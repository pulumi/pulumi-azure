// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Policy
{
    public static class GetPolicyDefintion
    {
        /// <summary>
        /// Use this data source to access information about a Policy Definition, both custom and built in. Retrieves Policy Definitions from your current subscription by default.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.Policy.GetPolicyDefintion.InvokeAsync(new Azure.Policy.GetPolicyDefintionArgs
        ///         {
        ///             DisplayName = "Allowed resource types",
        ///         }));
        ///         this.Id = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPolicyDefintionResult> InvokeAsync(GetPolicyDefintionArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPolicyDefintionResult>("azure:policy/getPolicyDefintion:getPolicyDefintion", args ?? new GetPolicyDefintionArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about a Policy Definition, both custom and built in. Retrieves Policy Definitions from your current subscription by default.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.Policy.GetPolicyDefintion.InvokeAsync(new Azure.Policy.GetPolicyDefintionArgs
        ///         {
        ///             DisplayName = "Allowed resource types",
        ///         }));
        ///         this.Id = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPolicyDefintionResult> Invoke(GetPolicyDefintionInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPolicyDefintionResult>("azure:policy/getPolicyDefintion:getPolicyDefintion", args ?? new GetPolicyDefintionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyDefintionArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the display name of the Policy Definition. Conflicts with `name`.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("managementGroupId")]
        public string? ManagementGroupId { get; set; }

        /// <summary>
        /// Only retrieve Policy Definitions from this Management Group.
        /// </summary>
        [Input("managementGroupName")]
        public string? ManagementGroupName { get; set; }

        /// <summary>
        /// Specifies the name of the Policy Definition. Conflicts with `display_name`.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetPolicyDefintionArgs()
        {
        }
    }

    public sealed class GetPolicyDefintionInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the display name of the Policy Definition. Conflicts with `name`.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("managementGroupId")]
        public Input<string>? ManagementGroupId { get; set; }

        /// <summary>
        /// Only retrieve Policy Definitions from this Management Group.
        /// </summary>
        [Input("managementGroupName")]
        public Input<string>? ManagementGroupName { get; set; }

        /// <summary>
        /// Specifies the name of the Policy Definition. Conflicts with `display_name`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetPolicyDefintionInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPolicyDefintionResult
    {
        /// <summary>
        /// The Description of the Policy.
        /// </summary>
        public readonly string Description;
        public readonly string DisplayName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ManagementGroupId;
        public readonly string? ManagementGroupName;
        /// <summary>
        /// Any Metadata defined in the Policy.
        /// </summary>
        public readonly string Metadata;
        public readonly string Name;
        /// <summary>
        /// Any Parameters defined in the Policy.
        /// </summary>
        public readonly string Parameters;
        /// <summary>
        /// The Rule as defined (in JSON) in the Policy.
        /// </summary>
        public readonly string PolicyRule;
        /// <summary>
        /// The Type of the Policy. Possible values are "BuiltIn", "Custom" and "NotSpecified".
        /// </summary>
        public readonly string PolicyType;
        /// <summary>
        /// The Type of Policy.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetPolicyDefintionResult(
            string description,

            string displayName,

            string id,

            string? managementGroupId,

            string? managementGroupName,

            string metadata,

            string name,

            string parameters,

            string policyRule,

            string policyType,

            string type)
        {
            Description = description;
            DisplayName = displayName;
            Id = id;
            ManagementGroupId = managementGroupId;
            ManagementGroupName = managementGroupName;
            Metadata = metadata;
            Name = name;
            Parameters = parameters;
            PolicyRule = policyRule;
            PolicyType = policyType;
            Type = type;
        }
    }
}
