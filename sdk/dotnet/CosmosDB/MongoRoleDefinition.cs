// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    /// <summary>
    /// Manages a Cosmos DB Mongo Role Definition.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.CosmosDB.Account("exampleAccount", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         OfferType = "Standard",
    ///         Kind = "MongoDB",
    ///         Capabilities = new[]
    ///         {
    ///             new Azure.CosmosDB.Inputs.AccountCapabilityArgs
    ///             {
    ///                 Name = "EnableMongo",
    ///             },
    ///             new Azure.CosmosDB.Inputs.AccountCapabilityArgs
    ///             {
    ///                 Name = "EnableMongoRoleBasedAccessControl",
    ///             },
    ///         },
    ///         ConsistencyPolicy = new Azure.CosmosDB.Inputs.AccountConsistencyPolicyArgs
    ///         {
    ///             ConsistencyLevel = "Strong",
    ///         },
    ///         GeoLocations = new[]
    ///         {
    ///             new Azure.CosmosDB.Inputs.AccountGeoLocationArgs
    ///             {
    ///                 Location = exampleResourceGroup.Location,
    ///                 FailoverPriority = 0,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleMongoDatabase = new Azure.CosmosDB.MongoDatabase("exampleMongoDatabase", new()
    ///     {
    ///         ResourceGroupName = exampleAccount.ResourceGroupName,
    ///         AccountName = exampleAccount.Name,
    ///     });
    /// 
    ///     var exampleMongoRoleDefinition = new Azure.CosmosDB.MongoRoleDefinition("exampleMongoRoleDefinition", new()
    ///     {
    ///         CosmosMongoDatabaseId = exampleMongoDatabase.Id,
    ///         RoleName = "example-roledefinition",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Cosmos DB Mongo Role Definitions can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:cosmosdb/mongoRoleDefinition:MongoRoleDefinition example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/mongodbRoleDefinitions/dbname1.rolename1
    /// ```
    /// </summary>
    [AzureResourceType("azure:cosmosdb/mongoRoleDefinition:MongoRoleDefinition")]
    public partial class MongoRoleDefinition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The resource ID of the Mongo DB. Changing this forces a new resource to be created.
        /// </summary>
        [Output("cosmosMongoDatabaseId")]
        public Output<string> CosmosMongoDatabaseId { get; private set; } = null!;

        /// <summary>
        /// A list of Mongo Roles which are inherited to the Mongo Role Definition.
        /// 
        /// &gt; **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmos_mongo_database_id`.
        /// </summary>
        [Output("inheritedRoleNames")]
        public Output<ImmutableArray<string>> InheritedRoleNames { get; private set; } = null!;

        /// <summary>
        /// A `privilege` block as defined below.
        /// </summary>
        [Output("privileges")]
        public Output<ImmutableArray<Outputs.MongoRoleDefinitionPrivilege>> Privileges { get; private set; } = null!;

        /// <summary>
        /// The user-friendly name for the Mongo Role Definition. It must be unique for the database account. Changing this forces a new resource to be created.
        /// </summary>
        [Output("roleName")]
        public Output<string> RoleName { get; private set; } = null!;


        /// <summary>
        /// Create a MongoRoleDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MongoRoleDefinition(string name, MongoRoleDefinitionArgs args, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/mongoRoleDefinition:MongoRoleDefinition", name, args ?? new MongoRoleDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MongoRoleDefinition(string name, Input<string> id, MongoRoleDefinitionState? state = null, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/mongoRoleDefinition:MongoRoleDefinition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MongoRoleDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MongoRoleDefinition Get(string name, Input<string> id, MongoRoleDefinitionState? state = null, CustomResourceOptions? options = null)
        {
            return new MongoRoleDefinition(name, id, state, options);
        }
    }

    public sealed class MongoRoleDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource ID of the Mongo DB. Changing this forces a new resource to be created.
        /// </summary>
        [Input("cosmosMongoDatabaseId", required: true)]
        public Input<string> CosmosMongoDatabaseId { get; set; } = null!;

        [Input("inheritedRoleNames")]
        private InputList<string>? _inheritedRoleNames;

        /// <summary>
        /// A list of Mongo Roles which are inherited to the Mongo Role Definition.
        /// 
        /// &gt; **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmos_mongo_database_id`.
        /// </summary>
        public InputList<string> InheritedRoleNames
        {
            get => _inheritedRoleNames ?? (_inheritedRoleNames = new InputList<string>());
            set => _inheritedRoleNames = value;
        }

        [Input("privileges")]
        private InputList<Inputs.MongoRoleDefinitionPrivilegeArgs>? _privileges;

        /// <summary>
        /// A `privilege` block as defined below.
        /// </summary>
        public InputList<Inputs.MongoRoleDefinitionPrivilegeArgs> Privileges
        {
            get => _privileges ?? (_privileges = new InputList<Inputs.MongoRoleDefinitionPrivilegeArgs>());
            set => _privileges = value;
        }

        /// <summary>
        /// The user-friendly name for the Mongo Role Definition. It must be unique for the database account. Changing this forces a new resource to be created.
        /// </summary>
        [Input("roleName", required: true)]
        public Input<string> RoleName { get; set; } = null!;

        public MongoRoleDefinitionArgs()
        {
        }
        public static new MongoRoleDefinitionArgs Empty => new MongoRoleDefinitionArgs();
    }

    public sealed class MongoRoleDefinitionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource ID of the Mongo DB. Changing this forces a new resource to be created.
        /// </summary>
        [Input("cosmosMongoDatabaseId")]
        public Input<string>? CosmosMongoDatabaseId { get; set; }

        [Input("inheritedRoleNames")]
        private InputList<string>? _inheritedRoleNames;

        /// <summary>
        /// A list of Mongo Roles which are inherited to the Mongo Role Definition.
        /// 
        /// &gt; **Note:** The role that needs to be inherited should exist in the Mongo DB of `cosmos_mongo_database_id`.
        /// </summary>
        public InputList<string> InheritedRoleNames
        {
            get => _inheritedRoleNames ?? (_inheritedRoleNames = new InputList<string>());
            set => _inheritedRoleNames = value;
        }

        [Input("privileges")]
        private InputList<Inputs.MongoRoleDefinitionPrivilegeGetArgs>? _privileges;

        /// <summary>
        /// A `privilege` block as defined below.
        /// </summary>
        public InputList<Inputs.MongoRoleDefinitionPrivilegeGetArgs> Privileges
        {
            get => _privileges ?? (_privileges = new InputList<Inputs.MongoRoleDefinitionPrivilegeGetArgs>());
            set => _privileges = value;
        }

        /// <summary>
        /// The user-friendly name for the Mongo Role Definition. It must be unique for the database account. Changing this forces a new resource to be created.
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        public MongoRoleDefinitionState()
        {
        }
        public static new MongoRoleDefinitionState Empty => new MongoRoleDefinitionState();
    }
}
