// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    /// <summary>
    /// Manages a Mongo Collection within a Cosmos DB Account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleAccount = Azure.CosmosDB.GetAccount.Invoke(new()
    ///     {
    ///         Name = "tfex-cosmosdb-account",
    ///         ResourceGroupName = "tfex-cosmosdb-account-rg",
    ///     });
    /// 
    ///     var exampleMongoDatabase = new Azure.CosmosDB.MongoDatabase("exampleMongoDatabase", new()
    ///     {
    ///         ResourceGroupName = exampleAccount.Apply(getAccountResult =&gt; getAccountResult.ResourceGroupName),
    ///         AccountName = exampleAccount.Apply(getAccountResult =&gt; getAccountResult.Name),
    ///     });
    /// 
    ///     var exampleMongoCollection = new Azure.CosmosDB.MongoCollection("exampleMongoCollection", new()
    ///     {
    ///         ResourceGroupName = exampleAccount.Apply(getAccountResult =&gt; getAccountResult.ResourceGroupName),
    ///         AccountName = exampleAccount.Apply(getAccountResult =&gt; getAccountResult.Name),
    ///         DatabaseName = exampleMongoDatabase.Name,
    ///         DefaultTtlSeconds = 777,
    ///         ShardKey = "uniqueKey",
    ///         Throughput = 400,
    ///         Indices = new[]
    ///         {
    ///             new Azure.CosmosDB.Inputs.MongoCollectionIndexArgs
    ///             {
    ///                 Keys = new[]
    ///                 {
    ///                     "_id",
    ///                 },
    ///                 Unique = true,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// CosmosDB Mongo Collection can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:cosmosdb/mongoCollection:MongoCollection collection1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/account1/mongodbDatabases/db1/collections/collection1
    /// ```
    /// </summary>
    [AzureResourceType("azure:cosmosdb/mongoCollection:MongoCollection")]
    public partial class MongoCollection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Cosmos DB Account in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// The default time to live of Analytical Storage for this Mongo Collection. If present and the value is set to `-1`, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number `n` – items will expire `n` seconds after their last modified time.
        /// </summary>
        [Output("analyticalStorageTtl")]
        public Output<int?> AnalyticalStorageTtl { get; private set; } = null!;

        [Output("autoscaleSettings")]
        public Output<Outputs.MongoCollectionAutoscaleSettings?> AutoscaleSettings { get; private set; } = null!;

        /// <summary>
        /// The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// The default Time To Live in seconds. If the value is `-1`, items are not automatically expired.
        /// </summary>
        [Output("defaultTtlSeconds")]
        public Output<int?> DefaultTtlSeconds { get; private set; } = null!;

        /// <summary>
        /// One or more `index` blocks as defined below.
        /// </summary>
        [Output("indices")]
        public Output<ImmutableArray<Outputs.MongoCollectionIndex>> Indices { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Cosmos DB Mongo Collection. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The name of the key to partition on for sharding. There must not be any other unique index keys. Changing this forces a new resource to be created.
        /// </summary>
        [Output("shardKey")]
        public Output<string?> ShardKey { get; private set; } = null!;

        /// <summary>
        /// One or more `system_indexes` blocks as defined below.
        /// </summary>
        [Output("systemIndexes")]
        public Output<ImmutableArray<Outputs.MongoCollectionSystemIndex>> SystemIndexes { get; private set; } = null!;

        [Output("throughput")]
        public Output<int> Throughput { get; private set; } = null!;


        /// <summary>
        /// Create a MongoCollection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MongoCollection(string name, MongoCollectionArgs args, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/mongoCollection:MongoCollection", name, args ?? new MongoCollectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MongoCollection(string name, Input<string> id, MongoCollectionState? state = null, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/mongoCollection:MongoCollection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MongoCollection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MongoCollection Get(string name, Input<string> id, MongoCollectionState? state = null, CustomResourceOptions? options = null)
        {
            return new MongoCollection(name, id, state, options);
        }
    }

    public sealed class MongoCollectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Account in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The default time to live of Analytical Storage for this Mongo Collection. If present and the value is set to `-1`, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number `n` – items will expire `n` seconds after their last modified time.
        /// </summary>
        [Input("analyticalStorageTtl")]
        public Input<int>? AnalyticalStorageTtl { get; set; }

        [Input("autoscaleSettings")]
        public Input<Inputs.MongoCollectionAutoscaleSettingsArgs>? AutoscaleSettings { get; set; }

        /// <summary>
        /// The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The default Time To Live in seconds. If the value is `-1`, items are not automatically expired.
        /// </summary>
        [Input("defaultTtlSeconds")]
        public Input<int>? DefaultTtlSeconds { get; set; }

        [Input("indices")]
        private InputList<Inputs.MongoCollectionIndexArgs>? _indices;

        /// <summary>
        /// One or more `index` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MongoCollectionIndexArgs> Indices
        {
            get => _indices ?? (_indices = new InputList<Inputs.MongoCollectionIndexArgs>());
            set => _indices = value;
        }

        /// <summary>
        /// Specifies the name of the Cosmos DB Mongo Collection. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the key to partition on for sharding. There must not be any other unique index keys. Changing this forces a new resource to be created.
        /// </summary>
        [Input("shardKey")]
        public Input<string>? ShardKey { get; set; }

        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        public MongoCollectionArgs()
        {
        }
        public static new MongoCollectionArgs Empty => new MongoCollectionArgs();
    }

    public sealed class MongoCollectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Account in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// The default time to live of Analytical Storage for this Mongo Collection. If present and the value is set to `-1`, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number `n` – items will expire `n` seconds after their last modified time.
        /// </summary>
        [Input("analyticalStorageTtl")]
        public Input<int>? AnalyticalStorageTtl { get; set; }

        [Input("autoscaleSettings")]
        public Input<Inputs.MongoCollectionAutoscaleSettingsGetArgs>? AutoscaleSettings { get; set; }

        /// <summary>
        /// The name of the Cosmos DB Mongo Database in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// The default Time To Live in seconds. If the value is `-1`, items are not automatically expired.
        /// </summary>
        [Input("defaultTtlSeconds")]
        public Input<int>? DefaultTtlSeconds { get; set; }

        [Input("indices")]
        private InputList<Inputs.MongoCollectionIndexGetArgs>? _indices;

        /// <summary>
        /// One or more `index` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MongoCollectionIndexGetArgs> Indices
        {
            get => _indices ?? (_indices = new InputList<Inputs.MongoCollectionIndexGetArgs>());
            set => _indices = value;
        }

        /// <summary>
        /// Specifies the name of the Cosmos DB Mongo Collection. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Mongo Collection is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The name of the key to partition on for sharding. There must not be any other unique index keys. Changing this forces a new resource to be created.
        /// </summary>
        [Input("shardKey")]
        public Input<string>? ShardKey { get; set; }

        [Input("systemIndexes")]
        private InputList<Inputs.MongoCollectionSystemIndexGetArgs>? _systemIndexes;

        /// <summary>
        /// One or more `system_indexes` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MongoCollectionSystemIndexGetArgs> SystemIndexes
        {
            get => _systemIndexes ?? (_systemIndexes = new InputList<Inputs.MongoCollectionSystemIndexGetArgs>());
            set => _systemIndexes = value;
        }

        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        public MongoCollectionState()
        {
        }
        public static new MongoCollectionState Empty => new MongoCollectionState();
    }
}
