// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    /// <summary>
    /// Manages a Cosmos DB SQL Role Definition.
    /// 
    /// ## Import
    /// 
    /// Cosmos DB SQL Role Definitions can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:cosmosdb/sqlRoleDefinition:SqlRoleDefinition example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/sqlRoleDefinitions/28b3c337-f436-482b-a167-c2618dc52033
    /// ```
    /// </summary>
    [AzureResourceType("azure:cosmosdb/sqlRoleDefinition:SqlRoleDefinition")]
    public partial class SqlRoleDefinition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Cosmos DB Account. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// A list of fully qualified scopes at or below which Role Assignments may be created using this Cosmos DB SQL Role Definition. It will allow application of this Cosmos DB SQL Role Definition on the entire Database Account or any underlying Database/Collection. Scopes higher than Database Account are not enforceable as assignable scopes.
        /// 
        /// &gt; **NOTE:** The resources referenced in assignable scopes need not exist.
        /// </summary>
        [Output("assignableScopes")]
        public Output<ImmutableArray<string>> AssignableScopes { get; private set; } = null!;

        /// <summary>
        /// An user-friendly name for the Cosmos DB SQL Role Definition which must be unique for the Database Account.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `permissions` block as defined below.
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<Outputs.SqlRoleDefinitionPermission>> Permissions { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Cosmos DB SQL Role Definition is created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The GUID as the name of the Cosmos DB SQL Role Definition - one will be generated if not specified. Changing this forces a new resource to be created.
        /// </summary>
        [Output("roleDefinitionId")]
        public Output<string> RoleDefinitionId { get; private set; } = null!;

        /// <summary>
        /// The type of the Cosmos DB SQL Role Definition. Possible values are `BuiltInRole` and `CustomRole`. Defaults to `CustomRole`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SqlRoleDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlRoleDefinition(string name, SqlRoleDefinitionArgs args, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/sqlRoleDefinition:SqlRoleDefinition", name, args ?? new SqlRoleDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SqlRoleDefinition(string name, Input<string> id, SqlRoleDefinitionState? state = null, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/sqlRoleDefinition:SqlRoleDefinition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlRoleDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlRoleDefinition Get(string name, Input<string> id, SqlRoleDefinitionState? state = null, CustomResourceOptions? options = null)
        {
            return new SqlRoleDefinition(name, id, state, options);
        }
    }

    public sealed class SqlRoleDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Account. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        [Input("assignableScopes", required: true)]
        private InputList<string>? _assignableScopes;

        /// <summary>
        /// A list of fully qualified scopes at or below which Role Assignments may be created using this Cosmos DB SQL Role Definition. It will allow application of this Cosmos DB SQL Role Definition on the entire Database Account or any underlying Database/Collection. Scopes higher than Database Account are not enforceable as assignable scopes.
        /// 
        /// &gt; **NOTE:** The resources referenced in assignable scopes need not exist.
        /// </summary>
        public InputList<string> AssignableScopes
        {
            get => _assignableScopes ?? (_assignableScopes = new InputList<string>());
            set => _assignableScopes = value;
        }

        /// <summary>
        /// An user-friendly name for the Cosmos DB SQL Role Definition which must be unique for the Database Account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions", required: true)]
        private InputList<Inputs.SqlRoleDefinitionPermissionArgs>? _permissions;

        /// <summary>
        /// A `permissions` block as defined below.
        /// </summary>
        public InputList<Inputs.SqlRoleDefinitionPermissionArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.SqlRoleDefinitionPermissionArgs>());
            set => _permissions = value;
        }

        /// <summary>
        /// The name of the Resource Group in which the Cosmos DB SQL Role Definition is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The GUID as the name of the Cosmos DB SQL Role Definition - one will be generated if not specified. Changing this forces a new resource to be created.
        /// </summary>
        [Input("roleDefinitionId")]
        public Input<string>? RoleDefinitionId { get; set; }

        /// <summary>
        /// The type of the Cosmos DB SQL Role Definition. Possible values are `BuiltInRole` and `CustomRole`. Defaults to `CustomRole`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SqlRoleDefinitionArgs()
        {
        }
        public static new SqlRoleDefinitionArgs Empty => new SqlRoleDefinitionArgs();
    }

    public sealed class SqlRoleDefinitionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Account. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        [Input("assignableScopes")]
        private InputList<string>? _assignableScopes;

        /// <summary>
        /// A list of fully qualified scopes at or below which Role Assignments may be created using this Cosmos DB SQL Role Definition. It will allow application of this Cosmos DB SQL Role Definition on the entire Database Account or any underlying Database/Collection. Scopes higher than Database Account are not enforceable as assignable scopes.
        /// 
        /// &gt; **NOTE:** The resources referenced in assignable scopes need not exist.
        /// </summary>
        public InputList<string> AssignableScopes
        {
            get => _assignableScopes ?? (_assignableScopes = new InputList<string>());
            set => _assignableScopes = value;
        }

        /// <summary>
        /// An user-friendly name for the Cosmos DB SQL Role Definition which must be unique for the Database Account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        private InputList<Inputs.SqlRoleDefinitionPermissionGetArgs>? _permissions;

        /// <summary>
        /// A `permissions` block as defined below.
        /// </summary>
        public InputList<Inputs.SqlRoleDefinitionPermissionGetArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.SqlRoleDefinitionPermissionGetArgs>());
            set => _permissions = value;
        }

        /// <summary>
        /// The name of the Resource Group in which the Cosmos DB SQL Role Definition is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The GUID as the name of the Cosmos DB SQL Role Definition - one will be generated if not specified. Changing this forces a new resource to be created.
        /// </summary>
        [Input("roleDefinitionId")]
        public Input<string>? RoleDefinitionId { get; set; }

        /// <summary>
        /// The type of the Cosmos DB SQL Role Definition. Possible values are `BuiltInRole` and `CustomRole`. Defaults to `CustomRole`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SqlRoleDefinitionState()
        {
        }
        public static new SqlRoleDefinitionState Empty => new SqlRoleDefinitionState();
    }
}
