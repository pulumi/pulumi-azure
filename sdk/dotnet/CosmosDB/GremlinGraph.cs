// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    /// <summary>
    /// Manages a Gremlin Graph within a Cosmos DB Account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleAccount = Output.Create(Azure.CosmosDB.GetAccount.InvokeAsync(new Azure.CosmosDB.GetAccountArgs
    ///         {
    ///             Name = "tfex-cosmosdb-account",
    ///             ResourceGroupName = "tfex-cosmosdb-account-rg",
    ///         }));
    ///         var exampleGremlinDatabase = new Azure.CosmosDB.GremlinDatabase("exampleGremlinDatabase", new Azure.CosmosDB.GremlinDatabaseArgs
    ///         {
    ///             ResourceGroupName = exampleAccount.Apply(exampleAccount =&gt; exampleAccount.ResourceGroupName),
    ///             AccountName = exampleAccount.Apply(exampleAccount =&gt; exampleAccount.Name),
    ///         });
    ///         var exampleGremlinGraph = new Azure.CosmosDB.GremlinGraph("exampleGremlinGraph", new Azure.CosmosDB.GremlinGraphArgs
    ///         {
    ///             ResourceGroupName = azurerm_cosmosdb_account.Example.Resource_group_name,
    ///             AccountName = azurerm_cosmosdb_account.Example.Name,
    ///             DatabaseName = exampleGremlinDatabase.Name,
    ///             PartitionKeyPath = "/Example",
    ///             Throughput = 400,
    ///             IndexPolicies = 
    ///             {
    ///                 new Azure.CosmosDB.Inputs.GremlinGraphIndexPolicyArgs
    ///                 {
    ///                     Automatic = true,
    ///                     IndexingMode = "Consistent",
    ///                     IncludedPaths = 
    ///                     {
    ///                         "/*",
    ///                     },
    ///                     ExcludedPaths = 
    ///                     {
    ///                         "/\"_etag\"/?",
    ///                     },
    ///                 },
    ///             },
    ///             ConflictResolutionPolicies = 
    ///             {
    ///                 new Azure.CosmosDB.Inputs.GremlinGraphConflictResolutionPolicyArgs
    ///                 {
    ///                     Mode = "LastWriterWins",
    ///                     ConflictResolutionPath = "/_ts",
    ///                 },
    ///             },
    ///             UniqueKeys = 
    ///             {
    ///                 new Azure.CosmosDB.Inputs.GremlinGraphUniqueKeyArgs
    ///                 {
    ///                     Paths = 
    ///                     {
    ///                         "/definition/id1",
    ///                         "/definition/id2",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// &gt; **NOTE:** The CosmosDB Account needs to have the `EnableGremlin` capability enabled to use this resource - which can be done by adding this to the `capabilities` list within the `azure.cosmosdb.Account` resource.
    /// 
    /// ## Import
    /// 
    /// Cosmos Gremlin Graphs can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:cosmosdb/gremlinGraph:GremlinGraph example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/account1/gremlinDatabases/db1/graphs/graphs1
    /// ```
    /// </summary>
    public partial class GremlinGraph : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the CosmosDB Account to create the Gremlin Graph within. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual manual destroy-apply. Requires `partition_key_path` to be set.
        /// </summary>
        [Output("autoscaleSettings")]
        public Output<Outputs.GremlinGraphAutoscaleSettings?> AutoscaleSettings { get; private set; } = null!;

        /// <summary>
        /// The conflict resolution policy for the graph. One or more `conflict_resolution_policy` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("conflictResolutionPolicies")]
        public Output<ImmutableArray<Outputs.GremlinGraphConflictResolutionPolicy>> ConflictResolutionPolicies { get; private set; } = null!;

        /// <summary>
        /// The name of the Cosmos DB Graph Database in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// The configuration of the indexing policy. One or more `index_policy` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("indexPolicies")]
        public Output<ImmutableArray<Outputs.GremlinGraphIndexPolicy>> IndexPolicies { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Cosmos DB Gremlin Graph. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Define a partition key. Changing this forces a new resource to be created.
        /// </summary>
        [Output("partitionKeyPath")]
        public Output<string?> PartitionKeyPath { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The throughput of the Gremlin graph (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual manual destroy-apply.
        /// </summary>
        [Output("throughput")]
        public Output<int> Throughput { get; private set; } = null!;

        /// <summary>
        /// One or more `unique_key` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("uniqueKeys")]
        public Output<ImmutableArray<Outputs.GremlinGraphUniqueKey>> UniqueKeys { get; private set; } = null!;


        /// <summary>
        /// Create a GremlinGraph resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GremlinGraph(string name, GremlinGraphArgs args, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/gremlinGraph:GremlinGraph", name, args ?? new GremlinGraphArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GremlinGraph(string name, Input<string> id, GremlinGraphState? state = null, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/gremlinGraph:GremlinGraph", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GremlinGraph resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GremlinGraph Get(string name, Input<string> id, GremlinGraphState? state = null, CustomResourceOptions? options = null)
        {
            return new GremlinGraph(name, id, state, options);
        }
    }

    public sealed class GremlinGraphArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the CosmosDB Account to create the Gremlin Graph within. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual manual destroy-apply. Requires `partition_key_path` to be set.
        /// </summary>
        [Input("autoscaleSettings")]
        public Input<Inputs.GremlinGraphAutoscaleSettingsArgs>? AutoscaleSettings { get; set; }

        [Input("conflictResolutionPolicies", required: true)]
        private InputList<Inputs.GremlinGraphConflictResolutionPolicyArgs>? _conflictResolutionPolicies;

        /// <summary>
        /// The conflict resolution policy for the graph. One or more `conflict_resolution_policy` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GremlinGraphConflictResolutionPolicyArgs> ConflictResolutionPolicies
        {
            get => _conflictResolutionPolicies ?? (_conflictResolutionPolicies = new InputList<Inputs.GremlinGraphConflictResolutionPolicyArgs>());
            set => _conflictResolutionPolicies = value;
        }

        /// <summary>
        /// The name of the Cosmos DB Graph Database in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        [Input("indexPolicies", required: true)]
        private InputList<Inputs.GremlinGraphIndexPolicyArgs>? _indexPolicies;

        /// <summary>
        /// The configuration of the indexing policy. One or more `index_policy` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GremlinGraphIndexPolicyArgs> IndexPolicies
        {
            get => _indexPolicies ?? (_indexPolicies = new InputList<Inputs.GremlinGraphIndexPolicyArgs>());
            set => _indexPolicies = value;
        }

        /// <summary>
        /// Specifies the name of the Cosmos DB Gremlin Graph. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Define a partition key. Changing this forces a new resource to be created.
        /// </summary>
        [Input("partitionKeyPath")]
        public Input<string>? PartitionKeyPath { get; set; }

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The throughput of the Gremlin graph (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual manual destroy-apply.
        /// </summary>
        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        [Input("uniqueKeys")]
        private InputList<Inputs.GremlinGraphUniqueKeyArgs>? _uniqueKeys;

        /// <summary>
        /// One or more `unique_key` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GremlinGraphUniqueKeyArgs> UniqueKeys
        {
            get => _uniqueKeys ?? (_uniqueKeys = new InputList<Inputs.GremlinGraphUniqueKeyArgs>());
            set => _uniqueKeys = value;
        }

        public GremlinGraphArgs()
        {
        }
    }

    public sealed class GremlinGraphState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the CosmosDB Account to create the Gremlin Graph within. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual manual destroy-apply. Requires `partition_key_path` to be set.
        /// </summary>
        [Input("autoscaleSettings")]
        public Input<Inputs.GremlinGraphAutoscaleSettingsGetArgs>? AutoscaleSettings { get; set; }

        [Input("conflictResolutionPolicies")]
        private InputList<Inputs.GremlinGraphConflictResolutionPolicyGetArgs>? _conflictResolutionPolicies;

        /// <summary>
        /// The conflict resolution policy for the graph. One or more `conflict_resolution_policy` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GremlinGraphConflictResolutionPolicyGetArgs> ConflictResolutionPolicies
        {
            get => _conflictResolutionPolicies ?? (_conflictResolutionPolicies = new InputList<Inputs.GremlinGraphConflictResolutionPolicyGetArgs>());
            set => _conflictResolutionPolicies = value;
        }

        /// <summary>
        /// The name of the Cosmos DB Graph Database in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        [Input("indexPolicies")]
        private InputList<Inputs.GremlinGraphIndexPolicyGetArgs>? _indexPolicies;

        /// <summary>
        /// The configuration of the indexing policy. One or more `index_policy` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GremlinGraphIndexPolicyGetArgs> IndexPolicies
        {
            get => _indexPolicies ?? (_indexPolicies = new InputList<Inputs.GremlinGraphIndexPolicyGetArgs>());
            set => _indexPolicies = value;
        }

        /// <summary>
        /// Specifies the name of the Cosmos DB Gremlin Graph. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Define a partition key. Changing this forces a new resource to be created.
        /// </summary>
        [Input("partitionKeyPath")]
        public Input<string>? PartitionKeyPath { get; set; }

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The throughput of the Gremlin graph (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual manual destroy-apply.
        /// </summary>
        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        [Input("uniqueKeys")]
        private InputList<Inputs.GremlinGraphUniqueKeyGetArgs>? _uniqueKeys;

        /// <summary>
        /// One or more `unique_key` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GremlinGraphUniqueKeyGetArgs> UniqueKeys
        {
            get => _uniqueKeys ?? (_uniqueKeys = new InputList<Inputs.GremlinGraphUniqueKeyGetArgs>());
            set => _uniqueKeys = value;
        }

        public GremlinGraphState()
        {
        }
    }
}
