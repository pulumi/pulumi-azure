// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    /// <summary>
    /// Manages a MongoDB Cluster using vCore Architecture.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-rg",
    ///         Location = "East US",
    ///     });
    /// 
    ///     var exampleMongoCluster = new Azure.CosmosDB.MongoCluster("example", new()
    ///     {
    ///         Name = "example-mc",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         AdministratorUsername = "adminTerraform",
    ///         AdministratorPassword = "QAZwsx123",
    ///         ShardCount = 1,
    ///         ComputeTier = "Free",
    ///         HighAvailabilityMode = "Disabled",
    ///         StorageSizeInGb = 32,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Preview Feature GeoReplicas)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-rg",
    ///         Location = "East US",
    ///     });
    /// 
    ///     var exampleMongoCluster = new Azure.CosmosDB.MongoCluster("example", new()
    ///     {
    ///         Name = "example-mc",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         AdministratorUsername = "adminTerraform",
    ///         AdministratorPassword = "QAZwsx123",
    ///         ShardCount = 1,
    ///         ComputeTier = "M30",
    ///         HighAvailabilityMode = "ZoneRedundantPreferred",
    ///         StorageSizeInGb = 64,
    ///         PreviewFeatures = new[]
    ///         {
    ///             "GeoReplicas",
    ///         },
    ///     });
    /// 
    ///     var exampleGeoReplica = new Azure.CosmosDB.MongoCluster("example_geo_replica", new()
    ///     {
    ///         Name = "example-mc-geo",
    ///         ResourceGroupName = example.Name,
    ///         Location = "Central US",
    ///         SourceServerId = exampleMongoCluster.Id,
    ///         SourceLocation = exampleMongoCluster.Location,
    ///         CreateMode = "GeoReplica",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.DocumentDB` - 2024-07-01
    /// 
    /// ## Import
    /// 
    /// MongoDB Clusters can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:cosmosdb/mongoCluster:MongoCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/mongoClusters/myMongoCluster
    /// ```
    /// </summary>
    [AzureResourceType("azure:cosmosdb/mongoCluster:MongoCluster")]
    public partial class MongoCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Password associated with the `AdministratorUsername` for the MongoDB Cluster.
        /// </summary>
        [Output("administratorPassword")]
        public Output<string?> AdministratorPassword { get; private set; } = null!;

        /// <summary>
        /// The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Output("administratorUsername")]
        public Output<string?> AdministratorUsername { get; private set; } = null!;

        /// <summary>
        /// The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
        /// </summary>
        [Output("computeTier")]
        public Output<string?> ComputeTier { get; private set; } = null!;

        /// <summary>
        /// The list of `ConnectionStrings` blocks as defined below.
        /// </summary>
        [Output("connectionStrings")]
        public Output<ImmutableArray<Outputs.MongoClusterConnectionString>> ConnectionStrings { get; private set; } = null!;

        /// <summary>
        /// The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("createMode")]
        public Output<string?> CreateMode { get; private set; } = null!;

        /// <summary>
        /// The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
        /// </summary>
        [Output("highAvailabilityMode")]
        public Output<string?> HighAvailabilityMode { get; private set; } = null!;

        /// <summary>
        /// The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Output("previewFeatures")]
        public Output<ImmutableArray<string>> PreviewFeatures { get; private set; } = null!;

        /// <summary>
        /// The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
        /// </summary>
        [Output("publicNetworkAccess")]
        public Output<string?> PublicNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Output("shardCount")]
        public Output<int?> ShardCount { get; private set; } = null!;

        /// <summary>
        /// The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Output("sourceLocation")]
        public Output<string?> SourceLocation { get; private set; } = null!;

        /// <summary>
        /// The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Output("sourceServerId")]
        public Output<string?> SourceServerId { get; private set; } = null!;

        /// <summary>
        /// The size of the data disk space for the MongoDB Cluster.
        /// </summary>
        [Output("storageSizeInGb")]
        public Output<int?> StorageSizeInGb { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the MongoDB Cluster.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0`, `7.0` and `8.0`.
        /// </summary>
        [Output("version")]
        public Output<string?> Version { get; private set; } = null!;


        /// <summary>
        /// Create a MongoCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MongoCluster(string name, MongoClusterArgs args, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/mongoCluster:MongoCluster", name, args ?? new MongoClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MongoCluster(string name, Input<string> id, MongoClusterState? state = null, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/mongoCluster:MongoCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "administratorPassword",
                    "connectionStrings",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MongoCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MongoCluster Get(string name, Input<string> id, MongoClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new MongoCluster(name, id, state, options);
        }
    }

    public sealed class MongoClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("administratorPassword")]
        private Input<string>? _administratorPassword;

        /// <summary>
        /// The Password associated with the `AdministratorUsername` for the MongoDB Cluster.
        /// </summary>
        public Input<string>? AdministratorPassword
        {
            get => _administratorPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _administratorPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("administratorUsername")]
        public Input<string>? AdministratorUsername { get; set; }

        /// <summary>
        /// The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
        /// </summary>
        [Input("computeTier")]
        public Input<string>? ComputeTier { get; set; }

        /// <summary>
        /// The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("createMode")]
        public Input<string>? CreateMode { get; set; }

        /// <summary>
        /// The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
        /// </summary>
        [Input("highAvailabilityMode")]
        public Input<string>? HighAvailabilityMode { get; set; }

        /// <summary>
        /// The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("previewFeatures")]
        private InputList<string>? _previewFeatures;

        /// <summary>
        /// The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> PreviewFeatures
        {
            get => _previewFeatures ?? (_previewFeatures = new InputList<string>());
            set => _previewFeatures = value;
        }

        /// <summary>
        /// The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
        /// </summary>
        [Input("publicNetworkAccess")]
        public Input<string>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("shardCount")]
        public Input<int>? ShardCount { get; set; }

        /// <summary>
        /// The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sourceLocation")]
        public Input<string>? SourceLocation { get; set; }

        /// <summary>
        /// The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sourceServerId")]
        public Input<string>? SourceServerId { get; set; }

        /// <summary>
        /// The size of the data disk space for the MongoDB Cluster.
        /// </summary>
        [Input("storageSizeInGb")]
        public Input<int>? StorageSizeInGb { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the MongoDB Cluster.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0`, `7.0` and `8.0`.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public MongoClusterArgs()
        {
        }
        public static new MongoClusterArgs Empty => new MongoClusterArgs();
    }

    public sealed class MongoClusterState : global::Pulumi.ResourceArgs
    {
        [Input("administratorPassword")]
        private Input<string>? _administratorPassword;

        /// <summary>
        /// The Password associated with the `AdministratorUsername` for the MongoDB Cluster.
        /// </summary>
        public Input<string>? AdministratorPassword
        {
            get => _administratorPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _administratorPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The administrator username of the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("administratorUsername")]
        public Input<string>? AdministratorUsername { get; set; }

        /// <summary>
        /// The compute tier to assign to the MongoDB Cluster. Possible values are `Free`, `M10`, `M20`, `M25`, `M30`, `M40`, `M50`, `M60`, `M80`, and `M200`.
        /// </summary>
        [Input("computeTier")]
        public Input<string>? ComputeTier { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.MongoClusterConnectionStringGetArgs>? _connectionStrings;

        /// <summary>
        /// The list of `ConnectionStrings` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MongoClusterConnectionStringGetArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.MongoClusterConnectionStringGetArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.MongoClusterConnectionStringGetArgs>());
                _connectionStrings = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The creation mode for the MongoDB Cluster. Possibles values are `Default` and `GeoReplica`. Defaults to `Default`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("createMode")]
        public Input<string>? CreateMode { get; set; }

        /// <summary>
        /// The high availability mode for the MongoDB Cluster. Possibles values are `Disabled` and `ZoneRedundantPreferred`.
        /// </summary>
        [Input("highAvailabilityMode")]
        public Input<string>? HighAvailabilityMode { get; set; }

        /// <summary>
        /// The supported Azure location where the MongoDB Cluster exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("previewFeatures")]
        private InputList<string>? _previewFeatures;

        /// <summary>
        /// The preview features that can be enabled on the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> PreviewFeatures
        {
            get => _previewFeatures ?? (_previewFeatures = new InputList<string>());
            set => _previewFeatures = value;
        }

        /// <summary>
        /// The Public Network Access setting for the MongoDB Cluster. Possibles values are `Disabled` and `Enabled`. Defaults to `Enabled`.
        /// </summary>
        [Input("publicNetworkAccess")]
        public Input<string>? PublicNetworkAccess { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The Number of shards to provision on the MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("shardCount")]
        public Input<int>? ShardCount { get; set; }

        /// <summary>
        /// The location of the source MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sourceLocation")]
        public Input<string>? SourceLocation { get; set; }

        /// <summary>
        /// The ID of the replication source MongoDB Cluster. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sourceServerId")]
        public Input<string>? SourceServerId { get; set; }

        /// <summary>
        /// The size of the data disk space for the MongoDB Cluster.
        /// </summary>
        [Input("storageSizeInGb")]
        public Input<int>? StorageSizeInGb { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the MongoDB Cluster.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The version for the MongoDB Cluster. Possibles values are `5.0`, `6.0`, `7.0` and `8.0`.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public MongoClusterState()
        {
        }
        public static new MongoClusterState Empty => new MongoClusterState();
    }
}
