// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    /// <summary>
    /// Manages a SQL Container within a Cosmos DB Account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Azure.CosmosDB.SqlContainer("example", new Azure.CosmosDB.SqlContainerArgs
    ///         {
    ///             ResourceGroupName = azurerm_cosmosdb_account.Example.Resource_group_name,
    ///             AccountName = azurerm_cosmosdb_account.Example.Name,
    ///             DatabaseName = azurerm_cosmosdb_sql_database.Example.Name,
    ///             PartitionKeyPath = "/definition/id",
    ///             PartitionKeyVersion = 1,
    ///             Throughput = 400,
    ///             IndexingPolicy = new Azure.CosmosDB.Inputs.SqlContainerIndexingPolicyArgs
    ///             {
    ///                 IndexingMode = "Consistent",
    ///                 IncludedPaths = 
    ///                 {
    ///                     new Azure.CosmosDB.Inputs.SqlContainerIndexingPolicyIncludedPathArgs
    ///                     {
    ///                         Path = "/*",
    ///                     },
    ///                     new Azure.CosmosDB.Inputs.SqlContainerIndexingPolicyIncludedPathArgs
    ///                     {
    ///                         Path = "/included/?",
    ///                     },
    ///                 },
    ///                 ExcludedPaths = 
    ///                 {
    ///                     new Azure.CosmosDB.Inputs.SqlContainerIndexingPolicyExcludedPathArgs
    ///                     {
    ///                         Path = "/excluded/?",
    ///                     },
    ///                 },
    ///             },
    ///             UniqueKeys = 
    ///             {
    ///                 new Azure.CosmosDB.Inputs.SqlContainerUniqueKeyArgs
    ///                 {
    ///                     Paths = 
    ///                     {
    ///                         "/definition/idlong",
    ///                         "/definition/idshort",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Cosmos SQL Containers can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:cosmosdb/sqlContainer:SqlContainer example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/sqlDatabases/database1/containers/container1
    /// ```
    /// </summary>
    [AzureResourceType("azure:cosmosdb/sqlContainer:SqlContainer")]
    public partial class SqlContainer : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Cosmos DB Account to create the container within. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual destroy-apply. Requires `partition_key_path` to be set.
        /// </summary>
        [Output("autoscaleSettings")]
        public Output<Outputs.SqlContainerAutoscaleSettings?> AutoscaleSettings { get; private set; } = null!;

        /// <summary>
        /// The name of the Cosmos DB SQL Database to create the container within. Changing this forces a new resource to be created.
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// The default time to live of SQL container. If missing, items are not expired automatically. If present and the value is set to `-1`, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number `n` – items will expire `n` seconds after their last modified time.
        /// </summary>
        [Output("defaultTtl")]
        public Output<int> DefaultTtl { get; private set; } = null!;

        /// <summary>
        /// An `indexing_policy` block as defined below.
        /// </summary>
        [Output("indexingPolicy")]
        public Output<Outputs.SqlContainerIndexingPolicy> IndexingPolicy { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Cosmos DB SQL Container. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Define a partition key. Changing this forces a new resource to be created.
        /// </summary>
        [Output("partitionKeyPath")]
        public Output<string?> PartitionKeyPath { get; private set; } = null!;

        /// <summary>
        /// Define a partition key version. Changing this forces a new resource to be created. Possible values are `1 `and `2`. This should be set to `2` in order to use large partition keys.
        /// </summary>
        [Output("partitionKeyVersion")]
        public Output<int?> PartitionKeyVersion { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which the Cosmos DB SQL Container is created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The throughput of SQL container (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon container creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// </summary>
        [Output("throughput")]
        public Output<int> Throughput { get; private set; } = null!;

        /// <summary>
        /// One or more `unique_key` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("uniqueKeys")]
        public Output<ImmutableArray<Outputs.SqlContainerUniqueKey>> UniqueKeys { get; private set; } = null!;


        /// <summary>
        /// Create a SqlContainer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlContainer(string name, SqlContainerArgs args, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/sqlContainer:SqlContainer", name, args ?? new SqlContainerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SqlContainer(string name, Input<string> id, SqlContainerState? state = null, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/sqlContainer:SqlContainer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlContainer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlContainer Get(string name, Input<string> id, SqlContainerState? state = null, CustomResourceOptions? options = null)
        {
            return new SqlContainer(name, id, state, options);
        }
    }

    public sealed class SqlContainerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Account to create the container within. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual destroy-apply. Requires `partition_key_path` to be set.
        /// </summary>
        [Input("autoscaleSettings")]
        public Input<Inputs.SqlContainerAutoscaleSettingsArgs>? AutoscaleSettings { get; set; }

        /// <summary>
        /// The name of the Cosmos DB SQL Database to create the container within. Changing this forces a new resource to be created.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The default time to live of SQL container. If missing, items are not expired automatically. If present and the value is set to `-1`, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number `n` – items will expire `n` seconds after their last modified time.
        /// </summary>
        [Input("defaultTtl")]
        public Input<int>? DefaultTtl { get; set; }

        /// <summary>
        /// An `indexing_policy` block as defined below.
        /// </summary>
        [Input("indexingPolicy")]
        public Input<Inputs.SqlContainerIndexingPolicyArgs>? IndexingPolicy { get; set; }

        /// <summary>
        /// Specifies the name of the Cosmos DB SQL Container. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Define a partition key. Changing this forces a new resource to be created.
        /// </summary>
        [Input("partitionKeyPath")]
        public Input<string>? PartitionKeyPath { get; set; }

        /// <summary>
        /// Define a partition key version. Changing this forces a new resource to be created. Possible values are `1 `and `2`. This should be set to `2` in order to use large partition keys.
        /// </summary>
        [Input("partitionKeyVersion")]
        public Input<int>? PartitionKeyVersion { get; set; }

        /// <summary>
        /// The name of the resource group in which the Cosmos DB SQL Container is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The throughput of SQL container (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon container creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// </summary>
        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        [Input("uniqueKeys")]
        private InputList<Inputs.SqlContainerUniqueKeyArgs>? _uniqueKeys;

        /// <summary>
        /// One or more `unique_key` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.SqlContainerUniqueKeyArgs> UniqueKeys
        {
            get => _uniqueKeys ?? (_uniqueKeys = new InputList<Inputs.SqlContainerUniqueKeyArgs>());
            set => _uniqueKeys = value;
        }

        public SqlContainerArgs()
        {
        }
    }

    public sealed class SqlContainerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Account to create the container within. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual destroy-apply. Requires `partition_key_path` to be set.
        /// </summary>
        [Input("autoscaleSettings")]
        public Input<Inputs.SqlContainerAutoscaleSettingsGetArgs>? AutoscaleSettings { get; set; }

        /// <summary>
        /// The name of the Cosmos DB SQL Database to create the container within. Changing this forces a new resource to be created.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// The default time to live of SQL container. If missing, items are not expired automatically. If present and the value is set to `-1`, it is equal to infinity, and items don’t expire by default. If present and the value is set to some number `n` – items will expire `n` seconds after their last modified time.
        /// </summary>
        [Input("defaultTtl")]
        public Input<int>? DefaultTtl { get; set; }

        /// <summary>
        /// An `indexing_policy` block as defined below.
        /// </summary>
        [Input("indexingPolicy")]
        public Input<Inputs.SqlContainerIndexingPolicyGetArgs>? IndexingPolicy { get; set; }

        /// <summary>
        /// Specifies the name of the Cosmos DB SQL Container. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Define a partition key. Changing this forces a new resource to be created.
        /// </summary>
        [Input("partitionKeyPath")]
        public Input<string>? PartitionKeyPath { get; set; }

        /// <summary>
        /// Define a partition key version. Changing this forces a new resource to be created. Possible values are `1 `and `2`. This should be set to `2` in order to use large partition keys.
        /// </summary>
        [Input("partitionKeyVersion")]
        public Input<int>? PartitionKeyVersion { get; set; }

        /// <summary>
        /// The name of the resource group in which the Cosmos DB SQL Container is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The throughput of SQL container (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon container creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// </summary>
        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        [Input("uniqueKeys")]
        private InputList<Inputs.SqlContainerUniqueKeyGetArgs>? _uniqueKeys;

        /// <summary>
        /// One or more `unique_key` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.SqlContainerUniqueKeyGetArgs> UniqueKeys
        {
            get => _uniqueKeys ?? (_uniqueKeys = new InputList<Inputs.SqlContainerUniqueKeyGetArgs>());
            set => _uniqueKeys = value;
        }

        public SqlContainerState()
        {
        }
    }
}
