// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    /// <summary>
    /// Manages a Cosmos DB SQL Role Assignment.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var current = Output.Create(Azure.Core.GetClientConfig.InvokeAsync());
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleAccount = new Azure.CosmosDB.Account("exampleAccount", new Azure.CosmosDB.AccountArgs
    ///         {
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             OfferType = "Standard",
    ///             Kind = "GlobalDocumentDB",
    ///             ConsistencyPolicy = new Azure.CosmosDB.Inputs.AccountConsistencyPolicyArgs
    ///             {
    ///                 ConsistencyLevel = "Strong",
    ///             },
    ///             GeoLocations = 
    ///             {
    ///                 new Azure.CosmosDB.Inputs.AccountGeoLocationArgs
    ///                 {
    ///                     Location = exampleResourceGroup.Location,
    ///                     FailoverPriority = 0,
    ///                 },
    ///             },
    ///         });
    ///         var exampleSqlRoleDefinition = new Azure.CosmosDB.SqlRoleDefinition("exampleSqlRoleDefinition", new Azure.CosmosDB.SqlRoleDefinitionArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             AccountName = exampleAccount.Name,
    ///             Type = "CustomRole",
    ///             AssignableScopes = 
    ///             {
    ///                 Output.Tuple(current, exampleResourceGroup.Name, exampleAccount.Name).Apply(values =&gt;
    ///                 {
    ///                     var current = values.Item1;
    ///                     var exampleResourceGroupName = values.Item2;
    ///                     var exampleAccountName = values.Item3;
    ///                     return $"/subscriptions/{current.SubscriptionId}/resourceGroups/{exampleResourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{exampleAccountName}";
    ///                 }),
    ///             },
    ///             Permissions = 
    ///             {
    ///                 new Azure.CosmosDB.Inputs.SqlRoleDefinitionPermissionArgs
    ///                 {
    ///                     DataActions = 
    ///                     {
    ///                         "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/read",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///         var exampleSqlRoleAssignment = new Azure.CosmosDB.SqlRoleAssignment("exampleSqlRoleAssignment", new Azure.CosmosDB.SqlRoleAssignmentArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             AccountName = exampleAccount.Name,
    ///             RoleDefinitionId = exampleSqlRoleDefinition.Id,
    ///             PrincipalId = current.Apply(current =&gt; current.ObjectId),
    ///             Scope = Output.Tuple(current, exampleResourceGroup.Name, exampleAccount.Name).Apply(values =&gt;
    ///             {
    ///                 var current = values.Item1;
    ///                 var exampleResourceGroupName = values.Item2;
    ///                 var exampleAccountName = values.Item3;
    ///                 return $"/subscriptions/{current.SubscriptionId}/resourceGroups/{exampleResourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{exampleAccountName}";
    ///             }),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Cosmos DB SQL Role Assignments can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:cosmosdb/sqlRoleAssignment:SqlRoleAssignment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/sqlRoleAssignments/9e007587-dbcd-4190-84cb-fcab5a09ca39
    /// ```
    /// </summary>
    [AzureResourceType("azure:cosmosdb/sqlRoleAssignment:SqlRoleAssignment")]
    public partial class SqlRoleAssignment : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Cosmos DB Account. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// The GUID as the name of the Cosmos DB SQL Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Principal (Client) in Azure Active Directory. Changing this forces a new resource to be created.
        /// </summary>
        [Output("principalId")]
        public Output<string> PrincipalId { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Cosmos DB SQL Role Assignment is created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the Cosmos DB SQL Role Definition.
        /// </summary>
        [Output("roleDefinitionId")]
        public Output<string> RoleDefinitionId { get; private set; } = null!;

        /// <summary>
        /// The data plane resource path for which access is being granted through this Cosmos DB SQL Role Assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a SqlRoleAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlRoleAssignment(string name, SqlRoleAssignmentArgs args, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/sqlRoleAssignment:SqlRoleAssignment", name, args ?? new SqlRoleAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SqlRoleAssignment(string name, Input<string> id, SqlRoleAssignmentState? state = null, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/sqlRoleAssignment:SqlRoleAssignment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlRoleAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlRoleAssignment Get(string name, Input<string> id, SqlRoleAssignmentState? state = null, CustomResourceOptions? options = null)
        {
            return new SqlRoleAssignment(name, id, state, options);
        }
    }

    public sealed class SqlRoleAssignmentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Account. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The GUID as the name of the Cosmos DB SQL Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Principal (Client) in Azure Active Directory. Changing this forces a new resource to be created.
        /// </summary>
        [Input("principalId", required: true)]
        public Input<string> PrincipalId { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Cosmos DB SQL Role Assignment is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The resource ID of the Cosmos DB SQL Role Definition.
        /// </summary>
        [Input("roleDefinitionId", required: true)]
        public Input<string> RoleDefinitionId { get; set; } = null!;

        /// <summary>
        /// The data plane resource path for which access is being granted through this Cosmos DB SQL Role Assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public SqlRoleAssignmentArgs()
        {
        }
    }

    public sealed class SqlRoleAssignmentState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Account. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// The GUID as the name of the Cosmos DB SQL Role Assignment - one will be generated if not specified. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Principal (Client) in Azure Active Directory. Changing this forces a new resource to be created.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The name of the Resource Group in which the Cosmos DB SQL Role Assignment is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The resource ID of the Cosmos DB SQL Role Definition.
        /// </summary>
        [Input("roleDefinitionId")]
        public Input<string>? RoleDefinitionId { get; set; }

        /// <summary>
        /// The data plane resource path for which access is being granted through this Cosmos DB SQL Role Assignment. Changing this forces a new resource to be created.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public SqlRoleAssignmentState()
        {
        }
    }
}
