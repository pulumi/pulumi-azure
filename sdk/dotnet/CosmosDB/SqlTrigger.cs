// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    /// <summary>
    /// Manages an SQL Trigger.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleAccount = Azure.CosmosDB.GetAccount.Invoke(new()
    ///     {
    ///         Name = "tfex-cosmosdb-account",
    ///         ResourceGroupName = "tfex-cosmosdb-account-rg",
    ///     });
    /// 
    ///     var exampleSqlDatabase = new Azure.CosmosDB.SqlDatabase("exampleSqlDatabase", new()
    ///     {
    ///         ResourceGroupName = exampleAccount.Apply(getAccountResult =&gt; getAccountResult.ResourceGroupName),
    ///         AccountName = exampleAccount.Apply(getAccountResult =&gt; getAccountResult.Name),
    ///         Throughput = 400,
    ///     });
    /// 
    ///     var exampleSqlContainer = new Azure.CosmosDB.SqlContainer("exampleSqlContainer", new()
    ///     {
    ///         ResourceGroupName = exampleAccount.Apply(getAccountResult =&gt; getAccountResult.ResourceGroupName),
    ///         AccountName = exampleAccount.Apply(getAccountResult =&gt; getAccountResult.Name),
    ///         DatabaseName = exampleSqlDatabase.Name,
    ///         PartitionKeyPath = "/id",
    ///     });
    /// 
    ///     var exampleSqlTrigger = new Azure.CosmosDB.SqlTrigger("exampleSqlTrigger", new()
    ///     {
    ///         ContainerId = exampleSqlContainer.Id,
    ///         Body = "function trigger(){}",
    ///         Operation = "Delete",
    ///         Type = "Post",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SQL Triggers can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:cosmosdb/sqlTrigger:SqlTrigger example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/sqlDatabases/database1/containers/container1/triggers/trigger1
    /// ```
    /// </summary>
    [AzureResourceType("azure:cosmosdb/sqlTrigger:SqlTrigger")]
    public partial class SqlTrigger : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Body of the Trigger.
        /// </summary>
        [Output("body")]
        public Output<string> Body { get; private set; } = null!;

        /// <summary>
        /// The id of the Cosmos DB SQL Container to create the SQL Trigger within. Changing this forces a new SQL Trigger to be created.
        /// </summary>
        [Output("containerId")]
        public Output<string> ContainerId { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this SQL Trigger. Changing this forces a new SQL Trigger to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The operation the trigger is associated with. Possible values are `All`, `Create`, `Update`, `Delete` and `Replace`.
        /// </summary>
        [Output("operation")]
        public Output<string> Operation { get; private set; } = null!;

        /// <summary>
        /// Type of the Trigger. Possible values are `Pre` and `Post`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SqlTrigger resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlTrigger(string name, SqlTriggerArgs args, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/sqlTrigger:SqlTrigger", name, args ?? new SqlTriggerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SqlTrigger(string name, Input<string> id, SqlTriggerState? state = null, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/sqlTrigger:SqlTrigger", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlTrigger resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlTrigger Get(string name, Input<string> id, SqlTriggerState? state = null, CustomResourceOptions? options = null)
        {
            return new SqlTrigger(name, id, state, options);
        }
    }

    public sealed class SqlTriggerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Body of the Trigger.
        /// </summary>
        [Input("body", required: true)]
        public Input<string> Body { get; set; } = null!;

        /// <summary>
        /// The id of the Cosmos DB SQL Container to create the SQL Trigger within. Changing this forces a new SQL Trigger to be created.
        /// </summary>
        [Input("containerId", required: true)]
        public Input<string> ContainerId { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this SQL Trigger. Changing this forces a new SQL Trigger to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The operation the trigger is associated with. Possible values are `All`, `Create`, `Update`, `Delete` and `Replace`.
        /// </summary>
        [Input("operation", required: true)]
        public Input<string> Operation { get; set; } = null!;

        /// <summary>
        /// Type of the Trigger. Possible values are `Pre` and `Post`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public SqlTriggerArgs()
        {
        }
        public static new SqlTriggerArgs Empty => new SqlTriggerArgs();
    }

    public sealed class SqlTriggerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Body of the Trigger.
        /// </summary>
        [Input("body")]
        public Input<string>? Body { get; set; }

        /// <summary>
        /// The id of the Cosmos DB SQL Container to create the SQL Trigger within. Changing this forces a new SQL Trigger to be created.
        /// </summary>
        [Input("containerId")]
        public Input<string>? ContainerId { get; set; }

        /// <summary>
        /// The name which should be used for this SQL Trigger. Changing this forces a new SQL Trigger to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The operation the trigger is associated with. Possible values are `All`, `Create`, `Update`, `Delete` and `Replace`.
        /// </summary>
        [Input("operation")]
        public Input<string>? Operation { get; set; }

        /// <summary>
        /// Type of the Trigger. Possible values are `Pre` and `Post`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SqlTriggerState()
        {
        }
        public static new SqlTriggerState Empty => new SqlTriggerState();
    }
}
