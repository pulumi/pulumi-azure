// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    public static class GetMongoDatabase
    {
        /// <summary>
        /// Use this data source to access information about an existing Cosmos DB Mongo Database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.CosmosDB.GetMongoDatabase.InvokeAsync(new Azure.CosmosDB.GetMongoDatabaseArgs
        ///         {
        ///             Name = "test-cosmosdb-mongo-db",
        ///             ResourceGroupName = "test-cosmosdb-account-rg",
        ///             AccountName = "test-cosmosdb-account",
        ///         }));
        ///         this.Id = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMongoDatabaseResult> InvokeAsync(GetMongoDatabaseArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMongoDatabaseResult>("azure:cosmosdb/getMongoDatabase:getMongoDatabase", args ?? new GetMongoDatabaseArgs(), options.WithVersion());
    }


    public sealed class GetMongoDatabaseArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Account where the Mongo Database exists.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of this Cosmos DB Mongo Database.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Cosmos DB Mongo Database exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetMongoDatabaseArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetMongoDatabaseResult
    {
        public readonly string AccountName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A mapping of tags assigned to the Cosmos DB Mongo Database.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetMongoDatabaseResult(
            string accountName,

            string id,

            string name,

            string resourceGroupName,

            ImmutableDictionary<string, string> tags)
        {
            AccountName = accountName;
            Id = id;
            Name = name;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
        }
    }
}
