// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    public static class GetAccount
    {
        /// <summary>
        /// Use this data source to access information about an existing CosmosDB (formally DocumentDB) Account.
        /// 
        /// {{% examples %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAccountResult> InvokeAsync(GetAccountArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAccountResult>("azure:cosmosdb/getAccount:getAccount", args ?? new GetAccountArgs(), options.WithVersion());
    }


    public sealed class GetAccountArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the CosmosDB Account.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group in which the CosmosDB Account resides.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetAccountArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAccountResult
    {
        /// <summary>
        /// Capabilities enabled on this Cosmos DB account.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountCapabilityResult> Capabilities;
        public readonly ImmutableArray<Outputs.GetAccountConsistencyPolicyResult> ConsistencyPolicies;
        /// <summary>
        /// If automatic failover is enabled for this CosmosDB Account.
        /// </summary>
        public readonly bool EnableAutomaticFailover;
        /// <summary>
        /// If multi-master is enabled for this Cosmos DB account.
        /// </summary>
        public readonly bool EnableMultipleWriteLocations;
        /// <summary>
        /// The endpoint used to connect to the CosmosDB account.
        /// </summary>
        public readonly string Endpoint;
        public readonly ImmutableArray<Outputs.GetAccountGeoLocationResult> GeoLocations;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The current IP Filter for this CosmosDB account
        /// </summary>
        public readonly string IpRangeFilter;
        /// <summary>
        /// If virtual network filtering is enabled for this Cosmos DB account.
        /// </summary>
        public readonly bool IsVirtualNetworkFilterEnabled;
        /// <summary>
        /// The Kind of the CosmosDB account.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The name of the Azure region hosting replicated data.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// The Offer Type to used by this CosmosDB Account.
        /// </summary>
        public readonly string OfferType;
        /// <summary>
        /// The Primary master key for the CosmosDB Account.
        /// </summary>
        public readonly string PrimaryMasterKey;
        /// <summary>
        /// The Primary read-only master Key for the CosmosDB Account.
        /// </summary>
        public readonly string PrimaryReadonlyMasterKey;
        /// <summary>
        /// A list of read endpoints available for this CosmosDB account.
        /// </summary>
        public readonly ImmutableArray<string> ReadEndpoints;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The Secondary master key for the CosmosDB Account.
        /// </summary>
        public readonly string SecondaryMasterKey;
        /// <summary>
        /// The Secondary read-only master key for the CosmosDB Account.
        /// </summary>
        public readonly string SecondaryReadonlyMasterKey;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Subnets that are allowed to access this CosmosDB account.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountVirtualNetworkRuleResult> VirtualNetworkRules;
        /// <summary>
        /// A list of write endpoints available for this CosmosDB account.
        /// </summary>
        public readonly ImmutableArray<string> WriteEndpoints;

        [OutputConstructor]
        private GetAccountResult(
            ImmutableArray<Outputs.GetAccountCapabilityResult> capabilities,

            ImmutableArray<Outputs.GetAccountConsistencyPolicyResult> consistencyPolicies,

            bool enableAutomaticFailover,

            bool enableMultipleWriteLocations,

            string endpoint,

            ImmutableArray<Outputs.GetAccountGeoLocationResult> geoLocations,

            string id,

            string ipRangeFilter,

            bool isVirtualNetworkFilterEnabled,

            string kind,

            string location,

            string name,

            string offerType,

            string primaryMasterKey,

            string primaryReadonlyMasterKey,

            ImmutableArray<string> readEndpoints,

            string resourceGroupName,

            string secondaryMasterKey,

            string secondaryReadonlyMasterKey,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<Outputs.GetAccountVirtualNetworkRuleResult> virtualNetworkRules,

            ImmutableArray<string> writeEndpoints)
        {
            Capabilities = capabilities;
            ConsistencyPolicies = consistencyPolicies;
            EnableAutomaticFailover = enableAutomaticFailover;
            EnableMultipleWriteLocations = enableMultipleWriteLocations;
            Endpoint = endpoint;
            GeoLocations = geoLocations;
            Id = id;
            IpRangeFilter = ipRangeFilter;
            IsVirtualNetworkFilterEnabled = isVirtualNetworkFilterEnabled;
            Kind = kind;
            Location = location;
            Name = name;
            OfferType = offerType;
            PrimaryMasterKey = primaryMasterKey;
            PrimaryReadonlyMasterKey = primaryReadonlyMasterKey;
            ReadEndpoints = readEndpoints;
            ResourceGroupName = resourceGroupName;
            SecondaryMasterKey = secondaryMasterKey;
            SecondaryReadonlyMasterKey = secondaryReadonlyMasterKey;
            Tags = tags;
            VirtualNetworkRules = virtualNetworkRules;
            WriteEndpoints = writeEndpoints;
        }
    }
}
