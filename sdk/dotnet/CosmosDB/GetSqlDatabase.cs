// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    public static class GetSqlDatabase
    {
        /// <summary>
        /// Use this data source to access information about an existing CosmosDB SQL Database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.CosmosDB.GetSqlDatabase.Invoke(new()
        ///     {
        ///         AccountName = "tfex-cosmosdb-sql-database-account-name",
        ///         Name = "tfex-cosmosdb-sql-database",
        ///         ResourceGroupName = "tfex-cosmosdb-sql-database-rg",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSqlDatabaseResult> InvokeAsync(GetSqlDatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSqlDatabaseResult>("azure:cosmosdb/getSqlDatabase:getSqlDatabase", args ?? new GetSqlDatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing CosmosDB SQL Database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.CosmosDB.GetSqlDatabase.Invoke(new()
        ///     {
        ///         AccountName = "tfex-cosmosdb-sql-database-account-name",
        ///         Name = "tfex-cosmosdb-sql-database",
        ///         ResourceGroupName = "tfex-cosmosdb-sql-database-rg",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSqlDatabaseResult> Invoke(GetSqlDatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlDatabaseResult>("azure:cosmosdb/getSqlDatabase:getSqlDatabase", args ?? new GetSqlDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSqlDatabaseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Cosmos DB SQL Database to create the table within.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Cosmos DB SQL Database.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which the Cosmos DB SQL Database is created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetSqlDatabaseArgs()
        {
        }
        public static new GetSqlDatabaseArgs Empty => new GetSqlDatabaseArgs();
    }

    public sealed class GetSqlDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Cosmos DB SQL Database to create the table within.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Cosmos DB SQL Database.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which the Cosmos DB SQL Database is created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetSqlDatabaseInvokeArgs()
        {
        }
        public static new GetSqlDatabaseInvokeArgs Empty => new GetSqlDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetSqlDatabaseResult
    {
        public readonly string AccountName;
        /// <summary>
        /// An `autoscale_settings` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSqlDatabaseAutoscaleSettingResult> AutoscaleSettings;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The throughput of SQL database (RU/s).
        /// </summary>
        public readonly int Throughput;

        [OutputConstructor]
        private GetSqlDatabaseResult(
            string accountName,

            ImmutableArray<Outputs.GetSqlDatabaseAutoscaleSettingResult> autoscaleSettings,

            string id,

            string name,

            string resourceGroupName,

            int throughput)
        {
            AccountName = accountName;
            AutoscaleSettings = autoscaleSettings;
            Id = id;
            Name = name;
            ResourceGroupName = resourceGroupName;
            Throughput = throughput;
        }
    }
}
