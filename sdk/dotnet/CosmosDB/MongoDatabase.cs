// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    /// <summary>
    /// Manages a Mongo Database within a Cosmos DB Account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleAccount = Azure.CosmosDB.GetAccount.Invoke(new()
    ///     {
    ///         Name = "tfex-cosmosdb-account",
    ///         ResourceGroupName = "tfex-cosmosdb-account-rg",
    ///     });
    /// 
    ///     var exampleMongoDatabase = new Azure.CosmosDB.MongoDatabase("exampleMongoDatabase", new()
    ///     {
    ///         ResourceGroupName = exampleAccount.Apply(getAccountResult =&gt; getAccountResult.ResourceGroupName),
    ///         AccountName = exampleAccount.Apply(getAccountResult =&gt; getAccountResult.Name),
    ///         Throughput = 400,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Cosmos Mongo Database can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:cosmosdb/mongoDatabase:MongoDatabase db1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/account1/mongodbDatabases/db1
    /// ```
    /// </summary>
    [AzureResourceType("azure:cosmosdb/mongoDatabase:MongoDatabase")]
    public partial class MongoDatabase : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Cosmos DB Mongo Database to create the table within. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual destroy-apply.
        /// 
        /// &gt; **Note:** Switching between autoscale and manual throughput is not supported via this provider and must be completed via the Azure Portal and refreshed.
        /// </summary>
        [Output("autoscaleSettings")]
        public Output<Outputs.MongoDatabaseAutoscaleSettings?> AutoscaleSettings { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Cosmos DB Mongo Database. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Mongo Database is created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The throughput of the MongoDB collection (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// 
        /// &gt; **Note:** throughput has a maximum value of `1000000` unless a higher limit is requested via Azure Support.
        /// </summary>
        [Output("throughput")]
        public Output<int> Throughput { get; private set; } = null!;


        /// <summary>
        /// Create a MongoDatabase resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MongoDatabase(string name, MongoDatabaseArgs args, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/mongoDatabase:MongoDatabase", name, args ?? new MongoDatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MongoDatabase(string name, Input<string> id, MongoDatabaseState? state = null, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/mongoDatabase:MongoDatabase", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MongoDatabase resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MongoDatabase Get(string name, Input<string> id, MongoDatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new MongoDatabase(name, id, state, options);
        }
    }

    public sealed class MongoDatabaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Mongo Database to create the table within. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual destroy-apply.
        /// 
        /// &gt; **Note:** Switching between autoscale and manual throughput is not supported via this provider and must be completed via the Azure Portal and refreshed.
        /// </summary>
        [Input("autoscaleSettings")]
        public Input<Inputs.MongoDatabaseAutoscaleSettingsArgs>? AutoscaleSettings { get; set; }

        /// <summary>
        /// Specifies the name of the Cosmos DB Mongo Database. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Mongo Database is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The throughput of the MongoDB collection (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// 
        /// &gt; **Note:** throughput has a maximum value of `1000000` unless a higher limit is requested via Azure Support.
        /// </summary>
        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        public MongoDatabaseArgs()
        {
        }
        public static new MongoDatabaseArgs Empty => new MongoDatabaseArgs();
    }

    public sealed class MongoDatabaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Mongo Database to create the table within. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual destroy-apply.
        /// 
        /// &gt; **Note:** Switching between autoscale and manual throughput is not supported via this provider and must be completed via the Azure Portal and refreshed.
        /// </summary>
        [Input("autoscaleSettings")]
        public Input<Inputs.MongoDatabaseAutoscaleSettingsGetArgs>? AutoscaleSettings { get; set; }

        /// <summary>
        /// Specifies the name of the Cosmos DB Mongo Database. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Mongo Database is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The throughput of the MongoDB collection (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// 
        /// &gt; **Note:** throughput has a maximum value of `1000000` unless a higher limit is requested via Azure Support.
        /// </summary>
        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        public MongoDatabaseState()
        {
        }
        public static new MongoDatabaseState Empty => new MongoDatabaseState();
    }
}
