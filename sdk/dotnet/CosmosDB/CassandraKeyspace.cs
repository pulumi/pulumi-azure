// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    /// <summary>
    /// Manages a Cassandra KeySpace within a Cosmos DB Account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = Output.Create(Azure.Core.GetResourceGroup.InvokeAsync(new Azure.Core.GetResourceGroupArgs
    ///         {
    ///             Name = "tflex-cosmosdb-account-rg",
    ///         }));
    ///         var exampleAccount = new Azure.CosmosDB.Account("exampleAccount", new Azure.CosmosDB.AccountArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Apply(exampleResourceGroup =&gt; exampleResourceGroup.Name),
    ///             Location = exampleResourceGroup.Apply(exampleResourceGroup =&gt; exampleResourceGroup.Location),
    ///             OfferType = "Standard",
    ///             Capabilities = 
    ///             {
    ///                 new Azure.CosmosDB.Inputs.AccountCapabilityArgs
    ///                 {
    ///                     Name = "EnableCassandra",
    ///                 },
    ///             },
    ///             ConsistencyPolicy = new Azure.CosmosDB.Inputs.AccountConsistencyPolicyArgs
    ///             {
    ///                 ConsistencyLevel = "Strong",
    ///             },
    ///             GeoLocations = 
    ///             {
    ///                 new Azure.CosmosDB.Inputs.AccountGeoLocationArgs
    ///                 {
    ///                     Location = "West US",
    ///                     FailoverPriority = 0,
    ///                 },
    ///             },
    ///         });
    ///         var exampleCassandraKeyspace = new Azure.CosmosDB.CassandraKeyspace("exampleCassandraKeyspace", new Azure.CosmosDB.CassandraKeyspaceArgs
    ///         {
    ///             ResourceGroupName = exampleAccount.ResourceGroupName,
    ///             AccountName = exampleAccount.Name,
    ///             Throughput = 400,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Cosmos Cassandra KeySpace can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:cosmosdb/cassandraKeyspace:CassandraKeyspace ks1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/account1/cassandraKeyspaces/ks1
    /// ```
    /// </summary>
    public partial class CassandraKeyspace : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Cosmos DB Cassandra KeySpace to create the table within. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// </summary>
        [Output("autoscaleSettings")]
        public Output<Outputs.CassandraKeyspaceAutoscaleSettings?> AutoscaleSettings { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Cosmos DB Cassandra KeySpace. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Cassandra KeySpace is created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The throughput of Cassandra KeySpace (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// </summary>
        [Output("throughput")]
        public Output<int> Throughput { get; private set; } = null!;


        /// <summary>
        /// Create a CassandraKeyspace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CassandraKeyspace(string name, CassandraKeyspaceArgs args, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/cassandraKeyspace:CassandraKeyspace", name, args ?? new CassandraKeyspaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CassandraKeyspace(string name, Input<string> id, CassandraKeyspaceState? state = null, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/cassandraKeyspace:CassandraKeyspace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CassandraKeyspace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CassandraKeyspace Get(string name, Input<string> id, CassandraKeyspaceState? state = null, CustomResourceOptions? options = null)
        {
            return new CassandraKeyspace(name, id, state, options);
        }
    }

    public sealed class CassandraKeyspaceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Cassandra KeySpace to create the table within. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// </summary>
        [Input("autoscaleSettings")]
        public Input<Inputs.CassandraKeyspaceAutoscaleSettingsArgs>? AutoscaleSettings { get; set; }

        /// <summary>
        /// Specifies the name of the Cosmos DB Cassandra KeySpace. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Cassandra KeySpace is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The throughput of Cassandra KeySpace (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// </summary>
        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        public CassandraKeyspaceArgs()
        {
        }
    }

    public sealed class CassandraKeyspaceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Cassandra KeySpace to create the table within. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// An `autoscale_settings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// </summary>
        [Input("autoscaleSettings")]
        public Input<Inputs.CassandraKeyspaceAutoscaleSettingsGetArgs>? AutoscaleSettings { get; set; }

        /// <summary>
        /// Specifies the name of the Cosmos DB Cassandra KeySpace. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Cassandra KeySpace is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The throughput of Cassandra KeySpace (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// </summary>
        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        public CassandraKeyspaceState()
        {
        }
    }
}
