// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    public static class GetSqlRoleDefinition
    {
        /// <summary>
        /// Use this data source to access information about an existing Cosmos DB SQL Role Definition.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.CosmosDB.GetSqlRoleDefinition.Invoke(new()
        ///     {
        ///         AccountName = "tfex-cosmosdb-sql-role-definition-account-name",
        ///         ResourceGroupName = "tfex-cosmosdb-sql-role-definition-rg",
        ///         RoleDefinitionId = "00000000-0000-0000-0000-000000000000",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSqlRoleDefinitionResult> InvokeAsync(GetSqlRoleDefinitionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSqlRoleDefinitionResult>("azure:cosmosdb/getSqlRoleDefinition:getSqlRoleDefinition", args ?? new GetSqlRoleDefinitionArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Cosmos DB SQL Role Definition.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.CosmosDB.GetSqlRoleDefinition.Invoke(new()
        ///     {
        ///         AccountName = "tfex-cosmosdb-sql-role-definition-account-name",
        ///         ResourceGroupName = "tfex-cosmosdb-sql-role-definition-rg",
        ///         RoleDefinitionId = "00000000-0000-0000-0000-000000000000",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSqlRoleDefinitionResult> Invoke(GetSqlRoleDefinitionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlRoleDefinitionResult>("azure:cosmosdb/getSqlRoleDefinition:getSqlRoleDefinition", args ?? new GetSqlRoleDefinitionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSqlRoleDefinitionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Account.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Cosmos DB SQL Role Definition is created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The GUID as the name of the Cosmos DB SQL Role Definition.
        /// </summary>
        [Input("roleDefinitionId", required: true)]
        public string RoleDefinitionId { get; set; } = null!;

        public GetSqlRoleDefinitionArgs()
        {
        }
        public static new GetSqlRoleDefinitionArgs Empty => new GetSqlRoleDefinitionArgs();
    }

    public sealed class GetSqlRoleDefinitionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Cosmos DB Account.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Cosmos DB SQL Role Definition is created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The GUID as the name of the Cosmos DB SQL Role Definition.
        /// </summary>
        [Input("roleDefinitionId", required: true)]
        public Input<string> RoleDefinitionId { get; set; } = null!;

        public GetSqlRoleDefinitionInvokeArgs()
        {
        }
        public static new GetSqlRoleDefinitionInvokeArgs Empty => new GetSqlRoleDefinitionInvokeArgs();
    }


    [OutputType]
    public sealed class GetSqlRoleDefinitionResult
    {
        public readonly string AccountName;
        /// <summary>
        /// A list of fully qualified scopes at or below which Role Assignments may be created using this Cosmos DB SQL Role Definition.
        /// </summary>
        public readonly ImmutableArray<string> AssignableScopes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The role name of the Cosmos DB SQL Role Definition.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A `permissions` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSqlRoleDefinitionPermissionResult> Permissions;
        public readonly string ResourceGroupName;
        public readonly string RoleDefinitionId;
        /// <summary>
        /// The type of the Cosmos DB SQL Role Definition.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetSqlRoleDefinitionResult(
            string accountName,

            ImmutableArray<string> assignableScopes,

            string id,

            string name,

            ImmutableArray<Outputs.GetSqlRoleDefinitionPermissionResult> permissions,

            string resourceGroupName,

            string roleDefinitionId,

            string type)
        {
            AccountName = accountName;
            AssignableScopes = assignableScopes;
            Id = id;
            Name = name;
            Permissions = permissions;
            ResourceGroupName = resourceGroupName;
            RoleDefinitionId = roleDefinitionId;
            Type = type;
        }
    }
}
