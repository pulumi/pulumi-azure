// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    /// <summary>
    /// Manages a Cassandra Datacenter.
    /// 
    /// &gt; **NOTE:** In order for the `Azure Managed Instances for Apache Cassandra` to work properly the product requires the `Azure Cosmos DB` Application ID to be present and working in your tenant. If the `Azure Cosmos DB` Application ID is missing in your environment you will need to have an administrator of your tenant run the following command to add the `Azure Cosmos DB` Application ID to your tenant:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    /// });
    /// ```
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.1.0/24",
    ///         },
    ///     });
    /// 
    ///     var exampleServicePrincipal = AzureAD.GetServicePrincipal.Invoke(new()
    ///     {
    ///         DisplayName = "Azure Cosmos DB",
    ///     });
    /// 
    ///     var exampleAssignment = new Azure.Authorization.Assignment("exampleAssignment", new()
    ///     {
    ///         Scope = exampleVirtualNetwork.Id,
    ///         RoleDefinitionName = "Network Contributor",
    ///         PrincipalId = exampleServicePrincipal.Apply(getServicePrincipalResult =&gt; getServicePrincipalResult.ObjectId),
    ///     });
    /// 
    ///     var exampleCassandraCluster = new Azure.CosmosDB.CassandraCluster("exampleCassandraCluster", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         DelegatedManagementSubnetId = exampleSubnet.Id,
    ///         DefaultAdminPassword = "Password1234",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleAssignment,
    ///         },
    ///     });
    /// 
    ///     var exampleCassandraDatacenter = new Azure.CosmosDB.CassandraDatacenter("exampleCassandraDatacenter", new()
    ///     {
    ///         Location = exampleCassandraCluster.Location,
    ///         CassandraClusterId = exampleCassandraCluster.Id,
    ///         DelegatedManagementSubnetId = exampleSubnet.Id,
    ///         NodeCount = 3,
    ///         DiskCount = 4,
    ///         SkuName = "Standard_DS14_v2",
    ///         AvailabilityZonesEnabled = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Cassandra Datacenters can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:cosmosdb/cassandraDatacenter:CassandraDatacenter example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DocumentDB/cassandraClusters/cluster1/dataCenters/dc1
    /// ```
    /// </summary>
    [AzureResourceType("azure:cosmosdb/cassandraDatacenter:CassandraDatacenter")]
    public partial class CassandraDatacenter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Determines whether availability zones are enabled. Defaults to `true`.
        /// </summary>
        [Output("availabilityZonesEnabled")]
        public Output<bool?> AvailabilityZonesEnabled { get; private set; } = null!;

        /// <summary>
        /// The key URI of the customer key to use for the encryption of the backup Storage Account.
        /// </summary>
        [Output("backupStorageCustomerKeyUri")]
        public Output<string?> BackupStorageCustomerKeyUri { get; private set; } = null!;

        /// <summary>
        /// The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
        /// </summary>
        [Output("base64EncodedYamlFragment")]
        public Output<string?> Base64EncodedYamlFragment { get; private set; } = null!;

        /// <summary>
        /// The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
        /// </summary>
        [Output("cassandraClusterId")]
        public Output<string> CassandraClusterId { get; private set; } = null!;

        /// <summary>
        /// The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
        /// </summary>
        [Output("delegatedManagementSubnetId")]
        public Output<string> DelegatedManagementSubnetId { get; private set; } = null!;

        /// <summary>
        /// Determines the number of p30 disks that are attached to each node.
        /// </summary>
        [Output("diskCount")]
        public Output<int?> DiskCount { get; private set; } = null!;

        /// <summary>
        /// The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
        /// </summary>
        [Output("diskSku")]
        public Output<string?> DiskSku { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The key URI of the customer key to use for the encryption of the Managed Disk.
        /// </summary>
        [Output("managedDiskCustomerKeyUri")]
        public Output<string?> ManagedDiskCustomerKeyUri { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
        /// </summary>
        [Output("nodeCount")]
        public Output<int?> NodeCount { get; private set; } = null!;

        /// <summary>
        /// A list of IP Address for the seed nodes in this Cassandra Datacenter.
        /// </summary>
        [Output("seedNodeIpAddresses")]
        public Output<ImmutableArray<string>> SeedNodeIpAddresses { get; private set; } = null!;

        /// <summary>
        /// Determines the selected sku.
        /// 
        /// &gt; **NOTE:** In v4.0 of the provider the `sku_name` will have a default value of `Standard_E16s_v5`.
        /// </summary>
        [Output("skuName")]
        public Output<string> SkuName { get; private set; } = null!;


        /// <summary>
        /// Create a CassandraDatacenter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CassandraDatacenter(string name, CassandraDatacenterArgs args, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/cassandraDatacenter:CassandraDatacenter", name, args ?? new CassandraDatacenterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CassandraDatacenter(string name, Input<string> id, CassandraDatacenterState? state = null, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/cassandraDatacenter:CassandraDatacenter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CassandraDatacenter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CassandraDatacenter Get(string name, Input<string> id, CassandraDatacenterState? state = null, CustomResourceOptions? options = null)
        {
            return new CassandraDatacenter(name, id, state, options);
        }
    }

    public sealed class CassandraDatacenterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines whether availability zones are enabled. Defaults to `true`.
        /// </summary>
        [Input("availabilityZonesEnabled")]
        public Input<bool>? AvailabilityZonesEnabled { get; set; }

        /// <summary>
        /// The key URI of the customer key to use for the encryption of the backup Storage Account.
        /// </summary>
        [Input("backupStorageCustomerKeyUri")]
        public Input<string>? BackupStorageCustomerKeyUri { get; set; }

        /// <summary>
        /// The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
        /// </summary>
        [Input("base64EncodedYamlFragment")]
        public Input<string>? Base64EncodedYamlFragment { get; set; }

        /// <summary>
        /// The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
        /// </summary>
        [Input("cassandraClusterId", required: true)]
        public Input<string> CassandraClusterId { get; set; } = null!;

        /// <summary>
        /// The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
        /// </summary>
        [Input("delegatedManagementSubnetId", required: true)]
        public Input<string> DelegatedManagementSubnetId { get; set; } = null!;

        /// <summary>
        /// Determines the number of p30 disks that are attached to each node.
        /// </summary>
        [Input("diskCount")]
        public Input<int>? DiskCount { get; set; }

        /// <summary>
        /// The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
        /// </summary>
        [Input("diskSku")]
        public Input<string>? DiskSku { get; set; }

        /// <summary>
        /// The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The key URI of the customer key to use for the encryption of the Managed Disk.
        /// </summary>
        [Input("managedDiskCustomerKeyUri")]
        public Input<string>? ManagedDiskCustomerKeyUri { get; set; }

        /// <summary>
        /// The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// Determines the selected sku.
        /// 
        /// &gt; **NOTE:** In v4.0 of the provider the `sku_name` will have a default value of `Standard_E16s_v5`.
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        public CassandraDatacenterArgs()
        {
        }
        public static new CassandraDatacenterArgs Empty => new CassandraDatacenterArgs();
    }

    public sealed class CassandraDatacenterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines whether availability zones are enabled. Defaults to `true`.
        /// </summary>
        [Input("availabilityZonesEnabled")]
        public Input<bool>? AvailabilityZonesEnabled { get; set; }

        /// <summary>
        /// The key URI of the customer key to use for the encryption of the backup Storage Account.
        /// </summary>
        [Input("backupStorageCustomerKeyUri")]
        public Input<string>? BackupStorageCustomerKeyUri { get; set; }

        /// <summary>
        /// The fragment of the cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this Cassandra Datacenter. The fragment should be Base64 encoded and only a subset of keys is allowed.
        /// </summary>
        [Input("base64EncodedYamlFragment")]
        public Input<string>? Base64EncodedYamlFragment { get; set; }

        /// <summary>
        /// The ID of the Cassandra Cluster. Changing this forces a new Cassandra Datacenter to be created.
        /// </summary>
        [Input("cassandraClusterId")]
        public Input<string>? CassandraClusterId { get; set; }

        /// <summary>
        /// The ID of the delegated management subnet for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
        /// </summary>
        [Input("delegatedManagementSubnetId")]
        public Input<string>? DelegatedManagementSubnetId { get; set; }

        /// <summary>
        /// Determines the number of p30 disks that are attached to each node.
        /// </summary>
        [Input("diskCount")]
        public Input<int>? DiskCount { get; set; }

        /// <summary>
        /// The Disk SKU that is used for this Cassandra Datacenter. Defaults to `P30`.
        /// </summary>
        [Input("diskSku")]
        public Input<string>? DiskSku { get; set; }

        /// <summary>
        /// The Azure Region where the Cassandra Datacenter should exist. Changing this forces a new Cassandra Datacenter to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The key URI of the customer key to use for the encryption of the Managed Disk.
        /// </summary>
        [Input("managedDiskCustomerKeyUri")]
        public Input<string>? ManagedDiskCustomerKeyUri { get; set; }

        /// <summary>
        /// The name which should be used for this Cassandra Datacenter. Changing this forces a new Cassandra Datacenter to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of nodes the Cassandra Datacenter should have. The number should be equal or greater than `3`. Defaults to `3`.
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        [Input("seedNodeIpAddresses")]
        private InputList<string>? _seedNodeIpAddresses;

        /// <summary>
        /// A list of IP Address for the seed nodes in this Cassandra Datacenter.
        /// </summary>
        public InputList<string> SeedNodeIpAddresses
        {
            get => _seedNodeIpAddresses ?? (_seedNodeIpAddresses = new InputList<string>());
            set => _seedNodeIpAddresses = value;
        }

        /// <summary>
        /// Determines the selected sku.
        /// 
        /// &gt; **NOTE:** In v4.0 of the provider the `sku_name` will have a default value of `Standard_E16s_v5`.
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        public CassandraDatacenterState()
        {
        }
        public static new CassandraDatacenterState Empty => new CassandraDatacenterState();
    }
}
