// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Cdn
{
    /// <summary>
    /// Manages a CDN FrontDoor Route.
    /// 
    /// ## Import
    /// 
    /// Frontdoor Routes can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:cdn/frontdoorRoute:FrontdoorRoute example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Cdn/profiles/profile1/afdEndpoints/endpoint1/routes/route1
    /// ```
    /// </summary>
    [AzureResourceType("azure:cdn/frontdoorRoute:FrontdoorRoute")]
    public partial class FrontdoorRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `cache` block as defined below.
        /// </summary>
        [Output("cache")]
        public Output<Outputs.FrontdoorRouteCache?> Cache { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the CDN FrontDoor Endpoint where this CDN FrontDoor Route should exist. Changing this forces a new Frontdoor Route to be created.
        /// </summary>
        [Output("cdnFrontdoorEndpointId")]
        public Output<string> CdnFrontdoorEndpointId { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the CDN FrontDoor Origin Group where this CDN FrontDoor Route should be created.
        /// </summary>
        [Output("cdnFrontdoorOriginGroupId")]
        public Output<string> CdnFrontdoorOriginGroupId { get; private set; } = null!;

        /// <summary>
        /// One or more Frontdoor Origin resource IDs that this Frontdoor Route will link to.
        /// </summary>
        [Output("cdnFrontdoorOriginIds")]
        public Output<ImmutableArray<string>> CdnFrontdoorOriginIds { get; private set; } = null!;

        /// <summary>
        /// A directory path on the origin that Frontdoor can use to retrieve content from (e.g. `contoso.cloudapp.net/originpath`).
        /// </summary>
        [Output("cdnFrontdoorOriginPath")]
        public Output<string?> CdnFrontdoorOriginPath { get; private set; } = null!;

        /// <summary>
        /// A list of the CDN FrontDoor Rule Set IDs which should be assigned to this CDN FrontDoor Route.
        /// </summary>
        [Output("cdnFrontdoorRuleSetIds")]
        public Output<ImmutableArray<string>> CdnFrontdoorRuleSetIds { get; private set; } = null!;

        /// <summary>
        /// Is this Frontdoor Route enabled? Possible values are `true` or `false`. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The Protocol that will be use when forwarding traffic to backends. Possible values are `HttpOnly`, `HttpsOnly` or `MatchRequest`.
        /// </summary>
        [Output("forwardingProtocol")]
        public Output<string?> ForwardingProtocol { get; private set; } = null!;

        /// <summary>
        /// Automatically redirect HTTP traffic to HTTPS traffic? Possible values are `true` or `false`. Defaults to `true`.
        /// </summary>
        [Output("httpsRedirectEnabled")]
        public Output<bool?> HttpsRedirectEnabled { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Frontdoor Route. Valid values must begin with a letter or number, end with a letter or number and may only contain letters, numbers and hypens with a maximum length of 90 characters. Changing this forces a new Frontdoor Route to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The route patterns of the rule.
        /// </summary>
        [Output("patternsToMatches")]
        public Output<ImmutableArray<string>> PatternsToMatches { get; private set; } = null!;

        /// <summary>
        /// One or more Protocols supported by this Frontdoor Route. Possible values are `Http` or `Https`.
        /// </summary>
        [Output("supportedProtocols")]
        public Output<ImmutableArray<string>> SupportedProtocols { get; private set; } = null!;


        /// <summary>
        /// Create a FrontdoorRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FrontdoorRoute(string name, FrontdoorRouteArgs args, CustomResourceOptions? options = null)
            : base("azure:cdn/frontdoorRoute:FrontdoorRoute", name, args ?? new FrontdoorRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FrontdoorRoute(string name, Input<string> id, FrontdoorRouteState? state = null, CustomResourceOptions? options = null)
            : base("azure:cdn/frontdoorRoute:FrontdoorRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FrontdoorRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FrontdoorRoute Get(string name, Input<string> id, FrontdoorRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new FrontdoorRoute(name, id, state, options);
        }
    }

    public sealed class FrontdoorRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `cache` block as defined below.
        /// </summary>
        [Input("cache")]
        public Input<Inputs.FrontdoorRouteCacheArgs>? Cache { get; set; }

        /// <summary>
        /// The resource ID of the CDN FrontDoor Endpoint where this CDN FrontDoor Route should exist. Changing this forces a new Frontdoor Route to be created.
        /// </summary>
        [Input("cdnFrontdoorEndpointId", required: true)]
        public Input<string> CdnFrontdoorEndpointId { get; set; } = null!;

        /// <summary>
        /// The resource ID of the CDN FrontDoor Origin Group where this CDN FrontDoor Route should be created.
        /// </summary>
        [Input("cdnFrontdoorOriginGroupId", required: true)]
        public Input<string> CdnFrontdoorOriginGroupId { get; set; } = null!;

        [Input("cdnFrontdoorOriginIds", required: true)]
        private InputList<string>? _cdnFrontdoorOriginIds;

        /// <summary>
        /// One or more Frontdoor Origin resource IDs that this Frontdoor Route will link to.
        /// </summary>
        public InputList<string> CdnFrontdoorOriginIds
        {
            get => _cdnFrontdoorOriginIds ?? (_cdnFrontdoorOriginIds = new InputList<string>());
            set => _cdnFrontdoorOriginIds = value;
        }

        /// <summary>
        /// A directory path on the origin that Frontdoor can use to retrieve content from (e.g. `contoso.cloudapp.net/originpath`).
        /// </summary>
        [Input("cdnFrontdoorOriginPath")]
        public Input<string>? CdnFrontdoorOriginPath { get; set; }

        [Input("cdnFrontdoorRuleSetIds")]
        private InputList<string>? _cdnFrontdoorRuleSetIds;

        /// <summary>
        /// A list of the CDN FrontDoor Rule Set IDs which should be assigned to this CDN FrontDoor Route.
        /// </summary>
        public InputList<string> CdnFrontdoorRuleSetIds
        {
            get => _cdnFrontdoorRuleSetIds ?? (_cdnFrontdoorRuleSetIds = new InputList<string>());
            set => _cdnFrontdoorRuleSetIds = value;
        }

        /// <summary>
        /// Is this Frontdoor Route enabled? Possible values are `true` or `false`. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The Protocol that will be use when forwarding traffic to backends. Possible values are `HttpOnly`, `HttpsOnly` or `MatchRequest`.
        /// </summary>
        [Input("forwardingProtocol")]
        public Input<string>? ForwardingProtocol { get; set; }

        /// <summary>
        /// Automatically redirect HTTP traffic to HTTPS traffic? Possible values are `true` or `false`. Defaults to `true`.
        /// </summary>
        [Input("httpsRedirectEnabled")]
        public Input<bool>? HttpsRedirectEnabled { get; set; }

        /// <summary>
        /// The name which should be used for this Frontdoor Route. Valid values must begin with a letter or number, end with a letter or number and may only contain letters, numbers and hypens with a maximum length of 90 characters. Changing this forces a new Frontdoor Route to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("patternsToMatches", required: true)]
        private InputList<string>? _patternsToMatches;

        /// <summary>
        /// The route patterns of the rule.
        /// </summary>
        public InputList<string> PatternsToMatches
        {
            get => _patternsToMatches ?? (_patternsToMatches = new InputList<string>());
            set => _patternsToMatches = value;
        }

        [Input("supportedProtocols", required: true)]
        private InputList<string>? _supportedProtocols;

        /// <summary>
        /// One or more Protocols supported by this Frontdoor Route. Possible values are `Http` or `Https`.
        /// </summary>
        public InputList<string> SupportedProtocols
        {
            get => _supportedProtocols ?? (_supportedProtocols = new InputList<string>());
            set => _supportedProtocols = value;
        }

        public FrontdoorRouteArgs()
        {
        }
        public static new FrontdoorRouteArgs Empty => new FrontdoorRouteArgs();
    }

    public sealed class FrontdoorRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `cache` block as defined below.
        /// </summary>
        [Input("cache")]
        public Input<Inputs.FrontdoorRouteCacheGetArgs>? Cache { get; set; }

        /// <summary>
        /// The resource ID of the CDN FrontDoor Endpoint where this CDN FrontDoor Route should exist. Changing this forces a new Frontdoor Route to be created.
        /// </summary>
        [Input("cdnFrontdoorEndpointId")]
        public Input<string>? CdnFrontdoorEndpointId { get; set; }

        /// <summary>
        /// The resource ID of the CDN FrontDoor Origin Group where this CDN FrontDoor Route should be created.
        /// </summary>
        [Input("cdnFrontdoorOriginGroupId")]
        public Input<string>? CdnFrontdoorOriginGroupId { get; set; }

        [Input("cdnFrontdoorOriginIds")]
        private InputList<string>? _cdnFrontdoorOriginIds;

        /// <summary>
        /// One or more Frontdoor Origin resource IDs that this Frontdoor Route will link to.
        /// </summary>
        public InputList<string> CdnFrontdoorOriginIds
        {
            get => _cdnFrontdoorOriginIds ?? (_cdnFrontdoorOriginIds = new InputList<string>());
            set => _cdnFrontdoorOriginIds = value;
        }

        /// <summary>
        /// A directory path on the origin that Frontdoor can use to retrieve content from (e.g. `contoso.cloudapp.net/originpath`).
        /// </summary>
        [Input("cdnFrontdoorOriginPath")]
        public Input<string>? CdnFrontdoorOriginPath { get; set; }

        [Input("cdnFrontdoorRuleSetIds")]
        private InputList<string>? _cdnFrontdoorRuleSetIds;

        /// <summary>
        /// A list of the CDN FrontDoor Rule Set IDs which should be assigned to this CDN FrontDoor Route.
        /// </summary>
        public InputList<string> CdnFrontdoorRuleSetIds
        {
            get => _cdnFrontdoorRuleSetIds ?? (_cdnFrontdoorRuleSetIds = new InputList<string>());
            set => _cdnFrontdoorRuleSetIds = value;
        }

        /// <summary>
        /// Is this Frontdoor Route enabled? Possible values are `true` or `false`. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The Protocol that will be use when forwarding traffic to backends. Possible values are `HttpOnly`, `HttpsOnly` or `MatchRequest`.
        /// </summary>
        [Input("forwardingProtocol")]
        public Input<string>? ForwardingProtocol { get; set; }

        /// <summary>
        /// Automatically redirect HTTP traffic to HTTPS traffic? Possible values are `true` or `false`. Defaults to `true`.
        /// </summary>
        [Input("httpsRedirectEnabled")]
        public Input<bool>? HttpsRedirectEnabled { get; set; }

        /// <summary>
        /// The name which should be used for this Frontdoor Route. Valid values must begin with a letter or number, end with a letter or number and may only contain letters, numbers and hypens with a maximum length of 90 characters. Changing this forces a new Frontdoor Route to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("patternsToMatches")]
        private InputList<string>? _patternsToMatches;

        /// <summary>
        /// The route patterns of the rule.
        /// </summary>
        public InputList<string> PatternsToMatches
        {
            get => _patternsToMatches ?? (_patternsToMatches = new InputList<string>());
            set => _patternsToMatches = value;
        }

        [Input("supportedProtocols")]
        private InputList<string>? _supportedProtocols;

        /// <summary>
        /// One or more Protocols supported by this Frontdoor Route. Possible values are `Http` or `Https`.
        /// </summary>
        public InputList<string> SupportedProtocols
        {
            get => _supportedProtocols ?? (_supportedProtocols = new InputList<string>());
            set => _supportedProtocols = value;
        }

        public FrontdoorRouteState()
        {
        }
        public static new FrontdoorRouteState Empty => new FrontdoorRouteState();
    }
}
