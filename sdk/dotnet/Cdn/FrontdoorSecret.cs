// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Cdn
{
    /// <summary>
    /// Manages a Front Door (standard/premium) Secret.
    /// 
    /// ```New-AzADServicePrincipal -ApplicationId "00000000-0000-0000-0000-000000000000"```
    /// 
    /// | Object ID                                | Key Permissions | Secret Permissions   | Certificate Permissions                       |
    /// |:-----------------------------------------|:---------------:|:--------------------:|:---------------------------------------------:|
    /// | `Microsoft.Azure.Cdn` Object ID          | -               | **Get**              | -                                             |
    /// | Your Personal AAD Object ID              | -               | **Get** and **List** | **Get**, **List**, **Purge** and **Recover**  |
    /// | Terraform Service Principal              | -               | **Get**              | **Get**, **Import**, **Delete** and **Purge** |
    /// 
    /// -&gt;**NOTE:** You only need to add the `Access Policy` for your personal AAD Object ID if you are planning to view the `secrets` via the Azure Portal.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using AzureAD = Pulumi.AzureAD;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var frontdoor = AzureAD.GetServicePrincipal.Invoke(new()
    ///     {
    ///         DisplayName = "Microsoft.Azure.Cdn",
    ///     });
    /// 
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-cdn-frontdoor",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    ///     {
    ///         Name = "example-keyvault",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SkuName = "premium",
    ///         SoftDeleteRetentionDays = 7,
    ///         NetworkAcls = new Azure.KeyVault.Inputs.KeyVaultNetworkAclsArgs
    ///         {
    ///             DefaultAction = "Deny",
    ///             Bypass = "AzureServices",
    ///             IpRules = new[]
    ///             {
    ///                 "10.0.0.0/24",
    ///             },
    ///         },
    ///         AccessPolicies = new[]
    ///         {
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///                 ObjectId = frontdoor.Apply(getServicePrincipalResult =&gt; getServicePrincipalResult.ObjectId),
    ///                 SecretPermissions = new[]
    ///                 {
    ///                     "Get",
    ///                 },
    ///             },
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///                 ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///                 CertificatePermissions = new[]
    ///                 {
    ///                     "Get",
    ///                     "Import",
    ///                     "Delete",
    ///                     "Purge",
    ///                 },
    ///                 SecretPermissions = new[]
    ///                 {
    ///                     "Get",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleCertificate = new Azure.KeyVault.Certificate("example", new()
    ///     {
    ///         Name = "example-cert",
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         KeyVaultCertificate = new Azure.KeyVault.Inputs.CertificateCertificateArgs
    ///         {
    ///             Contents = Std.Filebase64.Invoke(new()
    ///             {
    ///                 Input = "my-certificate.pfx",
    ///             }).Apply(invoke =&gt; invoke.Result),
    ///         },
    ///     });
    /// 
    ///     var exampleFrontdoorProfile = new Azure.Cdn.FrontdoorProfile("example", new()
    ///     {
    ///         Name = "example-cdn-profile",
    ///         ResourceGroupName = example.Name,
    ///         SkuName = "Standard_AzureFrontDoor",
    ///     });
    /// 
    ///     var exampleFrontdoorSecret = new Azure.Cdn.FrontdoorSecret("example", new()
    ///     {
    ///         Name = "example-customer-managed-secret",
    ///         CdnFrontdoorProfileId = exampleFrontdoorProfile.Id,
    ///         Secret = new Azure.Cdn.Inputs.FrontdoorSecretSecretArgs
    ///         {
    ///             CustomerCertificates = new[]
    ///             {
    ///                 new Azure.Cdn.Inputs.FrontdoorSecretSecretCustomerCertificateArgs
    ///                 {
    ///                     KeyVaultCertificateId = exampleCertificate.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Front Door Secrets can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:cdn/frontdoorSecret:FrontdoorSecret example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Cdn/profiles/profile1/secrets/secrets1
    /// ```
    /// </summary>
    [AzureResourceType("azure:cdn/frontdoorSecret:FrontdoorSecret")]
    public partial class FrontdoorSecret : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Resource ID of the Front Door Profile. Changing this forces a new Front Door Secret to be created.
        /// </summary>
        [Output("cdnFrontdoorProfileId")]
        public Output<string> CdnFrontdoorProfileId { get; private set; } = null!;

        /// <summary>
        /// The name of the Front Door Profile containing this Front Door Secret.
        /// </summary>
        [Output("cdnFrontdoorProfileName")]
        public Output<string> CdnFrontdoorProfileName { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Front Door Secret. Possible values must start with a letter or a number, only contain letters, numbers and hyphens and have a length of between 2 and 260 characters. Changing this forces a new Front Door Secret to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `secret` block as defined below. Changing this forces a new Front Door Secret to be created.
        /// </summary>
        [Output("secret")]
        public Output<Outputs.FrontdoorSecretSecret> Secret { get; private set; } = null!;


        /// <summary>
        /// Create a FrontdoorSecret resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FrontdoorSecret(string name, FrontdoorSecretArgs args, CustomResourceOptions? options = null)
            : base("azure:cdn/frontdoorSecret:FrontdoorSecret", name, args ?? new FrontdoorSecretArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FrontdoorSecret(string name, Input<string> id, FrontdoorSecretState? state = null, CustomResourceOptions? options = null)
            : base("azure:cdn/frontdoorSecret:FrontdoorSecret", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FrontdoorSecret resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FrontdoorSecret Get(string name, Input<string> id, FrontdoorSecretState? state = null, CustomResourceOptions? options = null)
        {
            return new FrontdoorSecret(name, id, state, options);
        }
    }

    public sealed class FrontdoorSecretArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Resource ID of the Front Door Profile. Changing this forces a new Front Door Secret to be created.
        /// </summary>
        [Input("cdnFrontdoorProfileId", required: true)]
        public Input<string> CdnFrontdoorProfileId { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Front Door Secret. Possible values must start with a letter or a number, only contain letters, numbers and hyphens and have a length of between 2 and 260 characters. Changing this forces a new Front Door Secret to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `secret` block as defined below. Changing this forces a new Front Door Secret to be created.
        /// </summary>
        [Input("secret", required: true)]
        public Input<Inputs.FrontdoorSecretSecretArgs> Secret { get; set; } = null!;

        public FrontdoorSecretArgs()
        {
        }
        public static new FrontdoorSecretArgs Empty => new FrontdoorSecretArgs();
    }

    public sealed class FrontdoorSecretState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Resource ID of the Front Door Profile. Changing this forces a new Front Door Secret to be created.
        /// </summary>
        [Input("cdnFrontdoorProfileId")]
        public Input<string>? CdnFrontdoorProfileId { get; set; }

        /// <summary>
        /// The name of the Front Door Profile containing this Front Door Secret.
        /// </summary>
        [Input("cdnFrontdoorProfileName")]
        public Input<string>? CdnFrontdoorProfileName { get; set; }

        /// <summary>
        /// The name which should be used for this Front Door Secret. Possible values must start with a letter or a number, only contain letters, numbers and hyphens and have a length of between 2 and 260 characters. Changing this forces a new Front Door Secret to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `secret` block as defined below. Changing this forces a new Front Door Secret to be created.
        /// </summary>
        [Input("secret")]
        public Input<Inputs.FrontdoorSecretSecretGetArgs>? Secret { get; set; }

        public FrontdoorSecretState()
        {
        }
        public static new FrontdoorSecretState Empty => new FrontdoorSecretState();
    }
}
