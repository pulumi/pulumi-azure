// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Cdn.Outputs
{

    [OutputType]
    public sealed class FrontdoorRuleConditionsSocketAddressCondition
    {
        /// <summary>
        /// Specify one or more IP address ranges. If multiple IP address ranges are specified, they're evaluated using `OR` logic.
        /// 
        /// &gt; **Note:** See the `Specifying IP Address Ranges` section below on how to correctly define the `MatchValues` field.
        /// </summary>
        public readonly ImmutableArray<string> MatchValues;
        /// <summary>
        /// If `True` operator becomes the opposite of its value. Possible values `True` or `False`. Defaults to `False`. Details can be found in the `Condition Operator List` below.
        /// </summary>
        public readonly bool? NegateCondition;
        /// <summary>
        /// The type of match. The Possible values are `IpMatch` or `Any`. Defaults to `IPMatch`.
        /// 
        /// &gt; **Note:** If the value of the `Operator` field is set to `IpMatch` then the `MatchValues` field is also required.
        /// </summary>
        public readonly string? Operator;

        [OutputConstructor]
        private FrontdoorRuleConditionsSocketAddressCondition(
            ImmutableArray<string> matchValues,

            bool? negateCondition,

            string? @operator)
        {
            MatchValues = matchValues;
            NegateCondition = negateCondition;
            Operator = @operator;
        }
    }
}
