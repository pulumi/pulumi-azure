// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Cdn.Outputs
{

    [OutputType]
    public sealed class FrontdoorFirewallPolicyLogScrubbingScrubbingRule
    {
        /// <summary>
        /// Is this `ScrubbingRule` enabled? Defaults to `True`.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// The variable to be scrubbed from the logs. Possible values include `QueryStringArgNames`, `RequestBodyJsonArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`, `RequestIPAddress`, or `RequestUri`.
        /// 
        /// &gt; **Note:** `RequestIPAddress` and `RequestUri` must use the `EqualsAny` `Operator`.
        /// </summary>
        public readonly string MatchVariable;
        /// <summary>
        /// When the `MatchVariable` is a collection, operate on the `Selector` to specify which elements in the collection this `ScrubbingRule` applies to. Possible values are `Equals` or `EqualsAny`. Defaults to `Equals`.
        /// </summary>
        public readonly string? Operator;
        /// <summary>
        /// When the `MatchVariable` is a collection, the `Operator` is used to specify which elements in the collection this `ScrubbingRule` applies to.
        /// 
        /// &gt; **Note:** The `Selector` field cannot be set if the `Operator` is set to `EqualsAny`.
        /// </summary>
        public readonly string? Selector;

        [OutputConstructor]
        private FrontdoorFirewallPolicyLogScrubbingScrubbingRule(
            bool? enabled,

            string matchVariable,

            string? @operator,

            string? selector)
        {
            Enabled = enabled;
            MatchVariable = matchVariable;
            Operator = @operator;
            Selector = selector;
        }
    }
}
