// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Cdn
{
    /// <summary>
    /// ## Import
    /// 
    /// CDN FrontDoor Origin can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:cdn/frontdoorOrigin:FrontdoorOrigin example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Cdn/profiles/profile1/originGroups/originGroup1/origins/origin1
    /// ```
    /// </summary>
    [AzureResourceType("azure:cdn/frontdoorOrigin:FrontdoorOrigin")]
    public partial class FrontdoorOrigin : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the CDN FrontDoor Origin Group within which this CDN FrontDoor Origin should exist. Changing this forces a new CDN FrontDoor Origin to be created.
        /// </summary>
        [Output("cdnFrontdoorOriginGroupId")]
        public Output<string> CdnFrontdoorOriginGroupId { get; private set; } = null!;

        /// <summary>
        /// Specifies whether certificate name checks are enabled for this origin.
        /// </summary>
        [Output("certificateNameCheckEnabled")]
        public Output<bool> CertificateNameCheckEnabled { get; private set; } = null!;

        /// <summary>
        /// Should the health probes be enabled against the origins defined within the origin group? Possible values are `true` or `false`. Defaults to `true`.
        /// </summary>
        [Output("healthProbesEnabled")]
        public Output<bool?> HealthProbesEnabled { get; private set; } = null!;

        /// <summary>
        /// The IPv4 address, IPv6 address or Domain name of the Origin.
        /// </summary>
        [Output("hostName")]
        public Output<string> HostName { get; private set; } = null!;

        /// <summary>
        /// The value of the HTTP port. Must be between `1` and `65535`. Defaults to `80`.
        /// </summary>
        [Output("httpPort")]
        public Output<int?> HttpPort { get; private set; } = null!;

        /// <summary>
        /// The value of the HTTPS port. Must be between `1` and `65535`. Defaults to `443`.
        /// </summary>
        [Output("httpsPort")]
        public Output<int?> HttpsPort { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this CDN FrontDoor Origin. Changing this forces a new CDN FrontDoor Origin to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The host header value (an IPv4 address, IPv6 address or Domain name) which is sent to the origin with each request. If unspecified the hostname from the request will be used.
        /// </summary>
        [Output("originHostHeader")]
        public Output<string?> OriginHostHeader { get; private set; } = null!;

        /// <summary>
        /// Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy. Must be between `1` and `5` (inclusive). Defaults to `1`.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// A `private_link` block as defined below.
        /// </summary>
        [Output("privateLink")]
        public Output<Outputs.FrontdoorOriginPrivateLink?> PrivateLink { get; private set; } = null!;

        /// <summary>
        /// The weight of the origin in a given origin group for load balancing. Must be between `1` and `1000`. Defaults to `500`.
        /// </summary>
        [Output("weight")]
        public Output<int?> Weight { get; private set; } = null!;


        /// <summary>
        /// Create a FrontdoorOrigin resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FrontdoorOrigin(string name, FrontdoorOriginArgs args, CustomResourceOptions? options = null)
            : base("azure:cdn/frontdoorOrigin:FrontdoorOrigin", name, args ?? new FrontdoorOriginArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FrontdoorOrigin(string name, Input<string> id, FrontdoorOriginState? state = null, CustomResourceOptions? options = null)
            : base("azure:cdn/frontdoorOrigin:FrontdoorOrigin", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FrontdoorOrigin resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FrontdoorOrigin Get(string name, Input<string> id, FrontdoorOriginState? state = null, CustomResourceOptions? options = null)
        {
            return new FrontdoorOrigin(name, id, state, options);
        }
    }

    public sealed class FrontdoorOriginArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the CDN FrontDoor Origin Group within which this CDN FrontDoor Origin should exist. Changing this forces a new CDN FrontDoor Origin to be created.
        /// </summary>
        [Input("cdnFrontdoorOriginGroupId", required: true)]
        public Input<string> CdnFrontdoorOriginGroupId { get; set; } = null!;

        /// <summary>
        /// Specifies whether certificate name checks are enabled for this origin.
        /// </summary>
        [Input("certificateNameCheckEnabled", required: true)]
        public Input<bool> CertificateNameCheckEnabled { get; set; } = null!;

        /// <summary>
        /// Should the health probes be enabled against the origins defined within the origin group? Possible values are `true` or `false`. Defaults to `true`.
        /// </summary>
        [Input("healthProbesEnabled")]
        public Input<bool>? HealthProbesEnabled { get; set; }

        /// <summary>
        /// The IPv4 address, IPv6 address or Domain name of the Origin.
        /// </summary>
        [Input("hostName", required: true)]
        public Input<string> HostName { get; set; } = null!;

        /// <summary>
        /// The value of the HTTP port. Must be between `1` and `65535`. Defaults to `80`.
        /// </summary>
        [Input("httpPort")]
        public Input<int>? HttpPort { get; set; }

        /// <summary>
        /// The value of the HTTPS port. Must be between `1` and `65535`. Defaults to `443`.
        /// </summary>
        [Input("httpsPort")]
        public Input<int>? HttpsPort { get; set; }

        /// <summary>
        /// The name which should be used for this CDN FrontDoor Origin. Changing this forces a new CDN FrontDoor Origin to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The host header value (an IPv4 address, IPv6 address or Domain name) which is sent to the origin with each request. If unspecified the hostname from the request will be used.
        /// </summary>
        [Input("originHostHeader")]
        public Input<string>? OriginHostHeader { get; set; }

        /// <summary>
        /// Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy. Must be between `1` and `5` (inclusive). Defaults to `1`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// A `private_link` block as defined below.
        /// </summary>
        [Input("privateLink")]
        public Input<Inputs.FrontdoorOriginPrivateLinkArgs>? PrivateLink { get; set; }

        /// <summary>
        /// The weight of the origin in a given origin group for load balancing. Must be between `1` and `1000`. Defaults to `500`.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public FrontdoorOriginArgs()
        {
        }
        public static new FrontdoorOriginArgs Empty => new FrontdoorOriginArgs();
    }

    public sealed class FrontdoorOriginState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the CDN FrontDoor Origin Group within which this CDN FrontDoor Origin should exist. Changing this forces a new CDN FrontDoor Origin to be created.
        /// </summary>
        [Input("cdnFrontdoorOriginGroupId")]
        public Input<string>? CdnFrontdoorOriginGroupId { get; set; }

        /// <summary>
        /// Specifies whether certificate name checks are enabled for this origin.
        /// </summary>
        [Input("certificateNameCheckEnabled")]
        public Input<bool>? CertificateNameCheckEnabled { get; set; }

        /// <summary>
        /// Should the health probes be enabled against the origins defined within the origin group? Possible values are `true` or `false`. Defaults to `true`.
        /// </summary>
        [Input("healthProbesEnabled")]
        public Input<bool>? HealthProbesEnabled { get; set; }

        /// <summary>
        /// The IPv4 address, IPv6 address or Domain name of the Origin.
        /// </summary>
        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        /// <summary>
        /// The value of the HTTP port. Must be between `1` and `65535`. Defaults to `80`.
        /// </summary>
        [Input("httpPort")]
        public Input<int>? HttpPort { get; set; }

        /// <summary>
        /// The value of the HTTPS port. Must be between `1` and `65535`. Defaults to `443`.
        /// </summary>
        [Input("httpsPort")]
        public Input<int>? HttpsPort { get; set; }

        /// <summary>
        /// The name which should be used for this CDN FrontDoor Origin. Changing this forces a new CDN FrontDoor Origin to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The host header value (an IPv4 address, IPv6 address or Domain name) which is sent to the origin with each request. If unspecified the hostname from the request will be used.
        /// </summary>
        [Input("originHostHeader")]
        public Input<string>? OriginHostHeader { get; set; }

        /// <summary>
        /// Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy. Must be between `1` and `5` (inclusive). Defaults to `1`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// A `private_link` block as defined below.
        /// </summary>
        [Input("privateLink")]
        public Input<Inputs.FrontdoorOriginPrivateLinkGetArgs>? PrivateLink { get; set; }

        /// <summary>
        /// The weight of the origin in a given origin group for load balancing. Must be between `1` and `1000`. Defaults to `500`.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public FrontdoorOriginState()
        {
        }
        public static new FrontdoorOriginState Empty => new FrontdoorOriginState();
    }
}
