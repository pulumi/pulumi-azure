// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AadB2C
{
    public static class GetDirectory
    {
        /// <summary>
        /// Use this data source to access information about an existing AAD B2C Directory.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.AadB2C.GetDirectory.Invoke(new()
        ///     {
        ///         ResourceGroupName = "example-rg",
        ///         DomainName = "exampleb2ctenant.onmicrosoft.com",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["tenantId"] = example.Apply(getDirectoryResult =&gt; getDirectoryResult.TenantId),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDirectoryResult> InvokeAsync(GetDirectoryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDirectoryResult>("azure:aadb2c/getDirectory:getDirectory", args ?? new GetDirectoryArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing AAD B2C Directory.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.AadB2C.GetDirectory.Invoke(new()
        ///     {
        ///         ResourceGroupName = "example-rg",
        ///         DomainName = "exampleb2ctenant.onmicrosoft.com",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["tenantId"] = example.Apply(getDirectoryResult =&gt; getDirectoryResult.TenantId),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDirectoryResult> Invoke(GetDirectoryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDirectoryResult>("azure:aadb2c/getDirectory:getDirectory", args ?? new GetDirectoryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDirectoryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Domain name of the B2C tenant, including the `.onmicrosoft.com` suffix.
        /// </summary>
        [Input("domainName", required: true)]
        public string DomainName { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the AAD B2C Directory exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDirectoryArgs()
        {
        }
        public static new GetDirectoryArgs Empty => new GetDirectoryArgs();
    }

    public sealed class GetDirectoryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Domain name of the B2C tenant, including the `.onmicrosoft.com` suffix.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the AAD B2C Directory exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetDirectoryInvokeArgs()
        {
        }
        public static new GetDirectoryInvokeArgs Empty => new GetDirectoryInvokeArgs();
    }


    [OutputType]
    public sealed class GetDirectoryResult
    {
        /// <summary>
        /// The type of billing for the AAD B2C tenant. Possible values include: `MAU` or `Auths`.
        /// </summary>
        public readonly string BillingType;
        /// <summary>
        /// Location in which the B2C tenant is hosted and data resides. See [official docs](https://aka.ms/B2CDataResidenc) for more information.
        /// </summary>
        public readonly string DataResidencyLocation;
        public readonly string DomainName;
        /// <summary>
        /// The date from which the billing type took effect. May not be populated until after the first billing cycle.
        /// </summary>
        public readonly string EffectiveStartDate;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ResourceGroupName;
        /// <summary>
        /// Billing SKU for the B2C tenant. See [official docs](https://aka.ms/b2cBilling) for more information.
        /// </summary>
        public readonly string SkuName;
        /// <summary>
        /// A mapping of tags assigned to the AAD B2C Directory.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The Tenant ID for the AAD B2C tenant.
        /// </summary>
        public readonly string TenantId;

        [OutputConstructor]
        private GetDirectoryResult(
            string billingType,

            string dataResidencyLocation,

            string domainName,

            string effectiveStartDate,

            string id,

            string resourceGroupName,

            string skuName,

            ImmutableDictionary<string, string> tags,

            string tenantId)
        {
            BillingType = billingType;
            DataResidencyLocation = dataResidencyLocation;
            DomainName = domainName;
            EffectiveStartDate = effectiveStartDate;
            Id = id;
            ResourceGroupName = resourceGroupName;
            SkuName = skuName;
            Tags = tags;
            TenantId = tenantId;
        }
    }
}
