// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Automanage
{
    /// <summary>
    /// Manages an Automanage Configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleConfiguration = new Azure.Automanage.Configuration("exampleConfiguration", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Antimalware = new Azure.Automanage.Inputs.ConfigurationAntimalwareArgs
    ///         {
    ///             Exclusions = new Azure.Automanage.Inputs.ConfigurationAntimalwareExclusionsArgs
    ///             {
    ///                 Extensions = "exe;dll",
    ///                 Paths = "C:\\Windows\\Temp;D:\\Temp",
    ///                 Processes = "svchost.exe;notepad.exe",
    ///             },
    ///             RealTimeProtectionEnabled = true,
    ///             ScheduledScanEnabled = true,
    ///             ScheduledScanType = "Quick",
    ///             ScheduledScanDay = 1,
    ///             ScheduledScanTimeInMinutes = 1339,
    ///         },
    ///         AzureSecurityBaseline = new Azure.Automanage.Inputs.ConfigurationAzureSecurityBaselineArgs
    ///         {
    ///             AssignmentType = "ApplyAndAutoCorrect",
    ///         },
    ///         AutomationAccountEnabled = true,
    ///         Backup = new Azure.Automanage.Inputs.ConfigurationBackupArgs
    ///         {
    ///             PolicyName = "acctest-backup-policy-%d",
    ///             TimeZone = "UTC",
    ///             InstantRpRetentionRangeInDays = 2,
    ///             SchedulePolicy = new Azure.Automanage.Inputs.ConfigurationBackupSchedulePolicyArgs
    ///             {
    ///                 ScheduleRunFrequency = "Daily",
    ///                 ScheduleRunDays = new[]
    ///                 {
    ///                     "Monday",
    ///                     "Tuesday",
    ///                 },
    ///                 ScheduleRunTimes = new[]
    ///                 {
    ///                     "12:00",
    ///                 },
    ///                 SchedulePolicyType = "SimpleSchedulePolicy",
    ///             },
    ///             RetentionPolicy = new Azure.Automanage.Inputs.ConfigurationBackupRetentionPolicyArgs
    ///             {
    ///                 RetentionPolicyType = "LongTermRetentionPolicy",
    ///                 DailySchedule = new Azure.Automanage.Inputs.ConfigurationBackupRetentionPolicyDailyScheduleArgs
    ///                 {
    ///                     RetentionTimes = new[]
    ///                     {
    ///                         "12:00",
    ///                     },
    ///                     RetentionDuration = new Azure.Automanage.Inputs.ConfigurationBackupRetentionPolicyDailyScheduleRetentionDurationArgs
    ///                     {
    ///                         Count = 7,
    ///                         DurationType = "Days",
    ///                     },
    ///                 },
    ///                 WeeklySchedule = new Azure.Automanage.Inputs.ConfigurationBackupRetentionPolicyWeeklyScheduleArgs
    ///                 {
    ///                     RetentionTimes = new[]
    ///                     {
    ///                         "14:00",
    ///                     },
    ///                     RetentionDuration = new Azure.Automanage.Inputs.ConfigurationBackupRetentionPolicyWeeklyScheduleRetentionDurationArgs
    ///                     {
    ///                         Count = 4,
    ///                         DurationType = "Weeks",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         BootDiagnosticsEnabled = true,
    ///         DefenderForCloudEnabled = true,
    ///         GuestConfigurationEnabled = true,
    ///         LogAnalyticsEnabled = true,
    ///         StatusChangeAlertEnabled = true,
    ///         Tags = 
    ///         {
    ///             { "env", "test" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Automanage Configuration can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:automanage/configuration:Configuration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Automanage/configurationProfiles/configurationProfile1
    /// ```
    /// </summary>
    [AzureResourceType("azure:automanage/configuration:Configuration")]
    public partial class Configuration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `antimalware` block as defined below.
        /// </summary>
        [Output("antimalware")]
        public Output<Outputs.ConfigurationAntimalware?> Antimalware { get; private set; } = null!;

        /// <summary>
        /// Whether the automation account is enabled. Defaults to `false`.
        /// </summary>
        [Output("automationAccountEnabled")]
        public Output<bool?> AutomationAccountEnabled { get; private set; } = null!;

        /// <summary>
        /// A `azure_security_baseline` block as defined below.
        /// </summary>
        [Output("azureSecurityBaseline")]
        public Output<Outputs.ConfigurationAzureSecurityBaseline?> AzureSecurityBaseline { get; private set; } = null!;

        /// <summary>
        /// A `backup` block as defined below.
        /// </summary>
        [Output("backup")]
        public Output<Outputs.ConfigurationBackup?> Backup { get; private set; } = null!;

        /// <summary>
        /// Whether the boot diagnostics are enabled. Defaults to `false`.
        /// </summary>
        [Output("bootDiagnosticsEnabled")]
        public Output<bool?> BootDiagnosticsEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether the defender for cloud is enabled. Defaults to `false`.
        /// </summary>
        [Output("defenderForCloudEnabled")]
        public Output<bool?> DefenderForCloudEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether the guest configuration is enabled. Defaults to `false`.
        /// </summary>
        [Output("guestConfigurationEnabled")]
        public Output<bool?> GuestConfigurationEnabled { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Automanage Configuration should exist. Changing this forces a new Automanage Configuration to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Whether log analytics are enabled. Defaults to `false`.
        /// </summary>
        [Output("logAnalyticsEnabled")]
        public Output<bool?> LogAnalyticsEnabled { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Automanage Configuration. Changing this forces a new Automanage Configuration to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Automanage Configuration should exist. Changing this forces a new Automanage Configuration to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Whether the status change alert is enabled. Defaults to `false`.
        /// </summary>
        [Output("statusChangeAlertEnabled")]
        public Output<bool?> StatusChangeAlertEnabled { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Configuration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Configuration(string name, ConfigurationArgs args, CustomResourceOptions? options = null)
            : base("azure:automanage/configuration:Configuration", name, args ?? new ConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Configuration(string name, Input<string> id, ConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("azure:automanage/configuration:Configuration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Configuration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Configuration Get(string name, Input<string> id, ConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new Configuration(name, id, state, options);
        }
    }

    public sealed class ConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `antimalware` block as defined below.
        /// </summary>
        [Input("antimalware")]
        public Input<Inputs.ConfigurationAntimalwareArgs>? Antimalware { get; set; }

        /// <summary>
        /// Whether the automation account is enabled. Defaults to `false`.
        /// </summary>
        [Input("automationAccountEnabled")]
        public Input<bool>? AutomationAccountEnabled { get; set; }

        /// <summary>
        /// A `azure_security_baseline` block as defined below.
        /// </summary>
        [Input("azureSecurityBaseline")]
        public Input<Inputs.ConfigurationAzureSecurityBaselineArgs>? AzureSecurityBaseline { get; set; }

        /// <summary>
        /// A `backup` block as defined below.
        /// </summary>
        [Input("backup")]
        public Input<Inputs.ConfigurationBackupArgs>? Backup { get; set; }

        /// <summary>
        /// Whether the boot diagnostics are enabled. Defaults to `false`.
        /// </summary>
        [Input("bootDiagnosticsEnabled")]
        public Input<bool>? BootDiagnosticsEnabled { get; set; }

        /// <summary>
        /// Whether the defender for cloud is enabled. Defaults to `false`.
        /// </summary>
        [Input("defenderForCloudEnabled")]
        public Input<bool>? DefenderForCloudEnabled { get; set; }

        /// <summary>
        /// Whether the guest configuration is enabled. Defaults to `false`.
        /// </summary>
        [Input("guestConfigurationEnabled")]
        public Input<bool>? GuestConfigurationEnabled { get; set; }

        /// <summary>
        /// The Azure Region where the Automanage Configuration should exist. Changing this forces a new Automanage Configuration to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Whether log analytics are enabled. Defaults to `false`.
        /// </summary>
        [Input("logAnalyticsEnabled")]
        public Input<bool>? LogAnalyticsEnabled { get; set; }

        /// <summary>
        /// The name which should be used for this Automanage Configuration. Changing this forces a new Automanage Configuration to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Automanage Configuration should exist. Changing this forces a new Automanage Configuration to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Whether the status change alert is enabled. Defaults to `false`.
        /// </summary>
        [Input("statusChangeAlertEnabled")]
        public Input<bool>? StatusChangeAlertEnabled { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ConfigurationArgs()
        {
        }
        public static new ConfigurationArgs Empty => new ConfigurationArgs();
    }

    public sealed class ConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `antimalware` block as defined below.
        /// </summary>
        [Input("antimalware")]
        public Input<Inputs.ConfigurationAntimalwareGetArgs>? Antimalware { get; set; }

        /// <summary>
        /// Whether the automation account is enabled. Defaults to `false`.
        /// </summary>
        [Input("automationAccountEnabled")]
        public Input<bool>? AutomationAccountEnabled { get; set; }

        /// <summary>
        /// A `azure_security_baseline` block as defined below.
        /// </summary>
        [Input("azureSecurityBaseline")]
        public Input<Inputs.ConfigurationAzureSecurityBaselineGetArgs>? AzureSecurityBaseline { get; set; }

        /// <summary>
        /// A `backup` block as defined below.
        /// </summary>
        [Input("backup")]
        public Input<Inputs.ConfigurationBackupGetArgs>? Backup { get; set; }

        /// <summary>
        /// Whether the boot diagnostics are enabled. Defaults to `false`.
        /// </summary>
        [Input("bootDiagnosticsEnabled")]
        public Input<bool>? BootDiagnosticsEnabled { get; set; }

        /// <summary>
        /// Whether the defender for cloud is enabled. Defaults to `false`.
        /// </summary>
        [Input("defenderForCloudEnabled")]
        public Input<bool>? DefenderForCloudEnabled { get; set; }

        /// <summary>
        /// Whether the guest configuration is enabled. Defaults to `false`.
        /// </summary>
        [Input("guestConfigurationEnabled")]
        public Input<bool>? GuestConfigurationEnabled { get; set; }

        /// <summary>
        /// The Azure Region where the Automanage Configuration should exist. Changing this forces a new Automanage Configuration to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Whether log analytics are enabled. Defaults to `false`.
        /// </summary>
        [Input("logAnalyticsEnabled")]
        public Input<bool>? LogAnalyticsEnabled { get; set; }

        /// <summary>
        /// The name which should be used for this Automanage Configuration. Changing this forces a new Automanage Configuration to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Automanage Configuration should exist. Changing this forces a new Automanage Configuration to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Whether the status change alert is enabled. Defaults to `false`.
        /// </summary>
        [Input("statusChangeAlertEnabled")]
        public Input<bool>? StatusChangeAlertEnabled { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ConfigurationState()
        {
        }
        public static new ConfigurationState Empty => new ConfigurationState();
    }
}
