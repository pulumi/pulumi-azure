// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Avs
{
    /// <summary>
    /// Manages a VMware Private Cloud.
    /// 
    /// ## Example Usage
    /// 
    /// &gt; **NOTE :**  Normal `pulumi up` could ignore this note. Please disable correlation request id for continuous operations in one build (like acctest). The continuous operations like `update` or `delete` could not be triggered when it shares the same `correlation-id` with its previous operation.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var examplePrivateCloud = new Azure.Avs.PrivateCloud("examplePrivateCloud", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         SkuName = "av36",
    ///         ManagementCluster = new Azure.Avs.Inputs.PrivateCloudManagementClusterArgs
    ///         {
    ///             Size = 3,
    ///         },
    ///         NetworkSubnetCidr = "192.168.48.0/22",
    ///         InternetConnectionEnabled = false,
    ///         NsxtPassword = "QazWsx13$Edc",
    ///         VcenterPassword = "WsxEdc23$Rfv",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VMware Private Clouds can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:avs/privateCloud:PrivateCloud example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/privateCloud1
    /// ```
    /// </summary>
    [AzureResourceType("azure:avs/privateCloud:PrivateCloud")]
    public partial class PrivateCloud : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `circuit` block as defined below.
        /// </summary>
        [Output("circuits")]
        public Output<ImmutableArray<Outputs.PrivateCloudCircuit>> Circuits { get; private set; } = null!;

        /// <summary>
        /// The endpoint for the HCX Cloud Manager.
        /// </summary>
        [Output("hcxCloudManagerEndpoint")]
        public Output<string> HcxCloudManagerEndpoint { get; private set; } = null!;

        /// <summary>
        /// Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
        /// &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
        /// </summary>
        [Output("internetConnectionEnabled")]
        public Output<bool?> InternetConnectionEnabled { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A `management_cluster` block as defined below.
        /// &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
        /// </summary>
        [Output("managementCluster")]
        public Output<Outputs.PrivateCloudManagementCluster> ManagementCluster { get; private set; } = null!;

        /// <summary>
        /// The network used to access vCenter Server and NSX-T Manager.
        /// </summary>
        [Output("managementSubnetCidr")]
        public Output<string> ManagementSubnetCidr { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Output("networkSubnetCidr")]
        public Output<string> NetworkSubnetCidr { get; private set; } = null!;

        /// <summary>
        /// The thumbprint of the NSX-T Manager SSL certificate.
        /// </summary>
        [Output("nsxtCertificateThumbprint")]
        public Output<string> NsxtCertificateThumbprint { get; private set; } = null!;

        /// <summary>
        /// The endpoint for the NSX-T Data Center manager.
        /// </summary>
        [Output("nsxtManagerEndpoint")]
        public Output<string> NsxtManagerEndpoint { get; private set; } = null!;

        /// <summary>
        /// The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Output("nsxtPassword")]
        public Output<string?> NsxtPassword { get; private set; } = null!;

        /// <summary>
        /// The network which is used for virtual machine cold migration, cloning, and snapshot migration.
        /// </summary>
        [Output("provisioningSubnetCidr")]
        public Output<string> ProvisioningSubnetCidr { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36`, `av36t`, `av36p`, `av36pt`, `av52`, `av52t`, and `av64`. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Output("skuName")]
        public Output<string> SkuName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the VMware Private Cloud.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The thumbprint of the vCenter Server SSL certificate.
        /// </summary>
        [Output("vcenterCertificateThumbprint")]
        public Output<string> VcenterCertificateThumbprint { get; private set; } = null!;

        /// <summary>
        /// The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Output("vcenterPassword")]
        public Output<string?> VcenterPassword { get; private set; } = null!;

        /// <summary>
        /// The endpoint for Virtual Center Server Appliance.
        /// </summary>
        [Output("vcsaEndpoint")]
        public Output<string> VcsaEndpoint { get; private set; } = null!;

        /// <summary>
        /// The network which is used for live migration of virtual machines.
        /// </summary>
        [Output("vmotionSubnetCidr")]
        public Output<string> VmotionSubnetCidr { get; private set; } = null!;


        /// <summary>
        /// Create a PrivateCloud resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PrivateCloud(string name, PrivateCloudArgs args, CustomResourceOptions? options = null)
            : base("azure:avs/privateCloud:PrivateCloud", name, args ?? new PrivateCloudArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PrivateCloud(string name, Input<string> id, PrivateCloudState? state = null, CustomResourceOptions? options = null)
            : base("azure:avs/privateCloud:PrivateCloud", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "nsxtPassword",
                    "vcenterPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PrivateCloud resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PrivateCloud Get(string name, Input<string> id, PrivateCloudState? state = null, CustomResourceOptions? options = null)
        {
            return new PrivateCloud(name, id, state, options);
        }
    }

    public sealed class PrivateCloudArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
        /// &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
        /// </summary>
        [Input("internetConnectionEnabled")]
        public Input<bool>? InternetConnectionEnabled { get; set; }

        /// <summary>
        /// The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A `management_cluster` block as defined below.
        /// &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
        /// </summary>
        [Input("managementCluster", required: true)]
        public Input<Inputs.PrivateCloudManagementClusterArgs> ManagementCluster { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Input("networkSubnetCidr", required: true)]
        public Input<string> NetworkSubnetCidr { get; set; } = null!;

        [Input("nsxtPassword")]
        private Input<string>? _nsxtPassword;

        /// <summary>
        /// The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        public Input<string>? NsxtPassword
        {
            get => _nsxtPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _nsxtPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36`, `av36t`, `av36p`, `av36pt`, `av52`, `av52t`, and `av64`. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Input("skuName", required: true)]
        public Input<string> SkuName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the VMware Private Cloud.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vcenterPassword")]
        private Input<string>? _vcenterPassword;

        /// <summary>
        /// The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        public Input<string>? VcenterPassword
        {
            get => _vcenterPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _vcenterPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public PrivateCloudArgs()
        {
        }
        public static new PrivateCloudArgs Empty => new PrivateCloudArgs();
    }

    public sealed class PrivateCloudState : global::Pulumi.ResourceArgs
    {
        [Input("circuits")]
        private InputList<Inputs.PrivateCloudCircuitGetArgs>? _circuits;

        /// <summary>
        /// A `circuit` block as defined below.
        /// </summary>
        public InputList<Inputs.PrivateCloudCircuitGetArgs> Circuits
        {
            get => _circuits ?? (_circuits = new InputList<Inputs.PrivateCloudCircuitGetArgs>());
            set => _circuits = value;
        }

        /// <summary>
        /// The endpoint for the HCX Cloud Manager.
        /// </summary>
        [Input("hcxCloudManagerEndpoint")]
        public Input<string>? HcxCloudManagerEndpoint { get; set; }

        /// <summary>
        /// Is the Private Cluster connected to the internet? This field can not updated with `management_cluster.0.size` together.
        /// &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
        /// </summary>
        [Input("internetConnectionEnabled")]
        public Input<bool>? InternetConnectionEnabled { get; set; }

        /// <summary>
        /// The Azure Region where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A `management_cluster` block as defined below.
        /// &gt; **NOTE :** `internet_connection_enabled` and `management_cluster.0.size` cannot be updated at the same time.
        /// </summary>
        [Input("managementCluster")]
        public Input<Inputs.PrivateCloudManagementClusterGetArgs>? ManagementCluster { get; set; }

        /// <summary>
        /// The network used to access vCenter Server and NSX-T Manager.
        /// </summary>
        [Input("managementSubnetCidr")]
        public Input<string>? ManagementSubnetCidr { get; set; }

        /// <summary>
        /// The name which should be used for this VMware Private Cloud. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The subnet which should be unique across virtual network in your subscription as well as on-premise. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Input("networkSubnetCidr")]
        public Input<string>? NetworkSubnetCidr { get; set; }

        /// <summary>
        /// The thumbprint of the NSX-T Manager SSL certificate.
        /// </summary>
        [Input("nsxtCertificateThumbprint")]
        public Input<string>? NsxtCertificateThumbprint { get; set; }

        /// <summary>
        /// The endpoint for the NSX-T Data Center manager.
        /// </summary>
        [Input("nsxtManagerEndpoint")]
        public Input<string>? NsxtManagerEndpoint { get; set; }

        [Input("nsxtPassword")]
        private Input<string>? _nsxtPassword;

        /// <summary>
        /// The password of the NSX-T Manager. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        public Input<string>? NsxtPassword
        {
            get => _nsxtPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _nsxtPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The network which is used for virtual machine cold migration, cloning, and snapshot migration.
        /// </summary>
        [Input("provisioningSubnetCidr")]
        public Input<string>? ProvisioningSubnetCidr { get; set; }

        /// <summary>
        /// The name of the Resource Group where the VMware Private Cloud should exist. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The Name of the SKU used for this Private Cloud. Possible values are `av20`, `av36`, `av36t`, `av36p`, `av36pt`, `av52`, `av52t`, and `av64`. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the VMware Private Cloud.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The thumbprint of the vCenter Server SSL certificate.
        /// </summary>
        [Input("vcenterCertificateThumbprint")]
        public Input<string>? VcenterCertificateThumbprint { get; set; }

        [Input("vcenterPassword")]
        private Input<string>? _vcenterPassword;

        /// <summary>
        /// The password of the vCenter admin. Changing this forces a new VMware Private Cloud to be created.
        /// </summary>
        public Input<string>? VcenterPassword
        {
            get => _vcenterPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _vcenterPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The endpoint for Virtual Center Server Appliance.
        /// </summary>
        [Input("vcsaEndpoint")]
        public Input<string>? VcsaEndpoint { get; set; }

        /// <summary>
        /// The network which is used for live migration of virtual machines.
        /// </summary>
        [Input("vmotionSubnetCidr")]
        public Input<string>? VmotionSubnetCidr { get; set; }

        public PrivateCloudState()
        {
        }
        public static new PrivateCloudState Empty => new PrivateCloudState();
    }
}
