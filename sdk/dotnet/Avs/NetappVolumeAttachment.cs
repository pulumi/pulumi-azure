// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Avs
{
    /// <summary>
    /// Manages an Azure VMware Solution Private Cloud Netapp File Attachment.
    /// 
    /// ## Example Usage
    /// 
    /// &gt; **NOTE :** For Azure Azure VMware Solution Private Cloud, normal `pulumi up` could ignore this note. Please disable correlation request id for continuous operations in one build (like acctest). The continuous operations like `update` or `delete` could not be triggered when it shares the same `correlation-id` with its previous operation.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var test = new Azure.Network.PublicIp("test", new()
    ///     {
    ///         Name = "example-public-ip",
    ///         Location = testAzurermResourceGroup.Location,
    ///         ResourceGroupName = testAzurermResourceGroup.Name,
    ///         AllocationMethod = "Static",
    ///         Sku = "Standard",
    ///     });
    /// 
    ///     var testVirtualNetwork = new Azure.Network.VirtualNetwork("test", new()
    ///     {
    ///         Name = "example-VirtualNetwork",
    ///         Location = testAzurermResourceGroup.Location,
    ///         ResourceGroupName = testAzurermResourceGroup.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.88.0.0/16",
    ///         },
    ///     });
    /// 
    ///     var netappSubnet = new Azure.Network.Subnet("netappSubnet", new()
    ///     {
    ///         Name = "example-Subnet",
    ///         ResourceGroupName = testAzurermResourceGroup.Name,
    ///         VirtualNetworkName = testVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.88.2.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "testdelegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Name = "Microsoft.Netapp/volumes",
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/networkinterfaces/*",
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var gatewaySubnet = new Azure.Network.Subnet("gatewaySubnet", new()
    ///     {
    ///         Name = "GatewaySubnet",
    ///         ResourceGroupName = testAzurermResourceGroup.Name,
    ///         VirtualNetworkName = testVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.88.1.0/24",
    ///         },
    ///     });
    /// 
    ///     var testVirtualNetworkGateway = new Azure.Network.VirtualNetworkGateway("test", new()
    ///     {
    ///         Name = "example-vnet-gateway",
    ///         Location = testAzurermResourceGroup.Location,
    ///         ResourceGroupName = testAzurermResourceGroup.Name,
    ///         Type = "ExpressRoute",
    ///         Sku = "Standard",
    ///         IpConfigurations = new[]
    ///         {
    ///             new Azure.Network.Inputs.VirtualNetworkGatewayIpConfigurationArgs
    ///             {
    ///                 Name = "vnetGatewayConfig",
    ///                 PublicIpAddressId = test.Id,
    ///                 SubnetId = gatewaySubnet.Id,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testAccount = new Azure.NetApp.Account("test", new()
    ///     {
    ///         Name = "example-NetAppAccount",
    ///         Location = testAzurermResourceGroup.Location,
    ///         ResourceGroupName = testAzurermResourceGroup.Name,
    ///     });
    /// 
    ///     var testPool = new Azure.NetApp.Pool("test", new()
    ///     {
    ///         Name = "example-NetAppPool",
    ///         Location = testAzurermResourceGroup.Location,
    ///         ResourceGroupName = testAzurermResourceGroup.Name,
    ///         AccountName = testAccount.Name,
    ///         ServiceLevel = "Standard",
    ///         SizeInTb = 4,
    ///     });
    /// 
    ///     var testVolume = new Azure.NetApp.Volume("test", new()
    ///     {
    ///         Name = "example-NetAppVolume",
    ///         Location = testAzurermResourceGroup.Location,
    ///         ResourceGroupName = testAzurermResourceGroup.Name,
    ///         AccountName = testAccount.Name,
    ///         PoolName = testPool.Name,
    ///         VolumePath = "my-unique-file-path-%d",
    ///         ServiceLevel = "Standard",
    ///         SubnetId = netappSubnet.Id,
    ///         Protocols = new[]
    ///         {
    ///             "NFSv3",
    ///         },
    ///         StorageQuotaInGb = 100,
    ///         AzureVmwareDataStoreEnabled = true,
    ///         ExportPolicyRules = new[]
    ///         {
    ///             new Azure.NetApp.Inputs.VolumeExportPolicyRuleArgs
    ///             {
    ///                 RuleIndex = 1,
    ///                 AllowedClients = new[]
    ///                 {
    ///                     "0.0.0.0/0",
    ///                 },
    ///                 ProtocolsEnabled = "NFSv3",
    ///                 UnixReadOnly = false,
    ///                 UnixReadWrite = true,
    ///                 RootAccessEnabled = true,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testPrivateCloud = new Azure.Avs.PrivateCloud("test", new()
    ///     {
    ///         Name = "example-PC",
    ///         ResourceGroupName = testAzurermResourceGroup.Name,
    ///         Location = testAzurermResourceGroup.Location,
    ///         SkuName = "av36",
    ///         ManagementCluster = new Azure.Avs.Inputs.PrivateCloudManagementClusterArgs
    ///         {
    ///             Size = 3,
    ///         },
    ///         NetworkSubnetCidr = "192.168.48.0/22",
    ///     });
    /// 
    ///     var testCluster = new Azure.Avs.Cluster("test", new()
    ///     {
    ///         Name = "example-vm-cluster",
    ///         VmwareCloudId = testPrivateCloud.Id,
    ///         ClusterNodeCount = 3,
    ///         SkuName = "av36",
    ///     });
    /// 
    ///     var testExpressRouteAuthorization = new Azure.Avs.ExpressRouteAuthorization("test", new()
    ///     {
    ///         Name = "example-VmwareAuthorization",
    ///         PrivateCloudId = testPrivateCloud.Id,
    ///     });
    /// 
    ///     var testVirtualNetworkGatewayConnection = new Azure.Network.VirtualNetworkGatewayConnection("test", new()
    ///     {
    ///         Name = "example-vnetgwconn",
    ///         Location = testAzurermResourceGroup.Location,
    ///         ResourceGroupName = testAzurermResourceGroup.Name,
    ///         Type = "ExpressRoute",
    ///         VirtualNetworkGatewayId = testVirtualNetworkGateway.Id,
    ///         ExpressRouteCircuitId = testPrivateCloud.Circuits.Apply(circuits =&gt; circuits[0].ExpressRouteId),
    ///         AuthorizationKey = testExpressRouteAuthorization.ExpressRouteAuthorizationKey,
    ///     });
    /// 
    ///     var testNetappVolumeAttachment = new Azure.Avs.NetappVolumeAttachment("test", new()
    ///     {
    ///         Name = "example-vmwareattachment",
    ///         NetappVolumeId = testVolume.Id,
    ///         VmwareClusterId = testCluster.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             testVirtualNetworkGatewayConnection,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Azure VMware Solution Private Cloud Netapp File Volume Attachments can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:avs/netappVolumeAttachment:NetappVolumeAttachment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AVS/privateClouds/privateCloud1/clusters/Cluster1/dataStores/datastore1
    /// ```
    /// </summary>
    [AzureResourceType("azure:avs/netappVolumeAttachment:NetappVolumeAttachment")]
    public partial class NetappVolumeAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name which should be used for this Azure VMware Solution Private Cloud Netapp File Volume Attachment. Changing this forces a new Azure VMware Solution Private Cloud Netapp File Volume Attachment to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The netapp file volume for this Azure VMware Solution Private Cloud Netapp File Volume Attachment to connect to. Changing this forces a new Azure VMware Solution Private Cloud Netapp File Volume Attachment to be created.
        /// </summary>
        [Output("netappVolumeId")]
        public Output<string> NetappVolumeId { get; private set; } = null!;

        /// <summary>
        /// The vmware cluster for this Azure VMware Solution Private Cloud Netapp File Volume Attachment to associated to. Changing this forces a new Azure VMware Solution Private Cloud Netapp File Volume Attachment to be created.
        /// 
        /// &gt; **NOTE :** please follow the prerequisites mentioned in this [article](https://learn.microsoft.com/en-us/azure/azure-vmware/attach-azure-netapp-files-to-azure-vmware-solution-hosts?tabs=azure-portal#prerequisites) before associating the netapp file volume to the Azure VMware Solution hosts.
        /// </summary>
        [Output("vmwareClusterId")]
        public Output<string> VmwareClusterId { get; private set; } = null!;


        /// <summary>
        /// Create a NetappVolumeAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetappVolumeAttachment(string name, NetappVolumeAttachmentArgs args, CustomResourceOptions? options = null)
            : base("azure:avs/netappVolumeAttachment:NetappVolumeAttachment", name, args ?? new NetappVolumeAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetappVolumeAttachment(string name, Input<string> id, NetappVolumeAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("azure:avs/netappVolumeAttachment:NetappVolumeAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetappVolumeAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetappVolumeAttachment Get(string name, Input<string> id, NetappVolumeAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new NetappVolumeAttachment(name, id, state, options);
        }
    }

    public sealed class NetappVolumeAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name which should be used for this Azure VMware Solution Private Cloud Netapp File Volume Attachment. Changing this forces a new Azure VMware Solution Private Cloud Netapp File Volume Attachment to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The netapp file volume for this Azure VMware Solution Private Cloud Netapp File Volume Attachment to connect to. Changing this forces a new Azure VMware Solution Private Cloud Netapp File Volume Attachment to be created.
        /// </summary>
        [Input("netappVolumeId", required: true)]
        public Input<string> NetappVolumeId { get; set; } = null!;

        /// <summary>
        /// The vmware cluster for this Azure VMware Solution Private Cloud Netapp File Volume Attachment to associated to. Changing this forces a new Azure VMware Solution Private Cloud Netapp File Volume Attachment to be created.
        /// 
        /// &gt; **NOTE :** please follow the prerequisites mentioned in this [article](https://learn.microsoft.com/en-us/azure/azure-vmware/attach-azure-netapp-files-to-azure-vmware-solution-hosts?tabs=azure-portal#prerequisites) before associating the netapp file volume to the Azure VMware Solution hosts.
        /// </summary>
        [Input("vmwareClusterId", required: true)]
        public Input<string> VmwareClusterId { get; set; } = null!;

        public NetappVolumeAttachmentArgs()
        {
        }
        public static new NetappVolumeAttachmentArgs Empty => new NetappVolumeAttachmentArgs();
    }

    public sealed class NetappVolumeAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name which should be used for this Azure VMware Solution Private Cloud Netapp File Volume Attachment. Changing this forces a new Azure VMware Solution Private Cloud Netapp File Volume Attachment to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The netapp file volume for this Azure VMware Solution Private Cloud Netapp File Volume Attachment to connect to. Changing this forces a new Azure VMware Solution Private Cloud Netapp File Volume Attachment to be created.
        /// </summary>
        [Input("netappVolumeId")]
        public Input<string>? NetappVolumeId { get; set; }

        /// <summary>
        /// The vmware cluster for this Azure VMware Solution Private Cloud Netapp File Volume Attachment to associated to. Changing this forces a new Azure VMware Solution Private Cloud Netapp File Volume Attachment to be created.
        /// 
        /// &gt; **NOTE :** please follow the prerequisites mentioned in this [article](https://learn.microsoft.com/en-us/azure/azure-vmware/attach-azure-netapp-files-to-azure-vmware-solution-hosts?tabs=azure-portal#prerequisites) before associating the netapp file volume to the Azure VMware Solution hosts.
        /// </summary>
        [Input("vmwareClusterId")]
        public Input<string>? VmwareClusterId { get; set; }

        public NetappVolumeAttachmentState()
        {
        }
        public static new NetappVolumeAttachmentState Empty => new NetappVolumeAttachmentState();
    }
}
