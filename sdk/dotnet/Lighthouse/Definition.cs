// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Lighthouse
{
    /// <summary>
    /// Manages a [Lighthouse](https://docs.microsoft.com/azure/lighthouse) Definition.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var contributor = Azure.Authorization.GetRoleDefinition.Invoke(new()
    ///     {
    ///         RoleDefinitionId = "b24988ac-6180-42a0-ab88-20f7382dd24c",
    ///     });
    /// 
    ///     var example = new Azure.Lighthouse.Definition("example", new()
    ///     {
    ///         Description = "This is a lighthouse definition created IaC",
    ///         ManagingTenantId = "00000000-0000-0000-0000-000000000000",
    ///         Scope = "/subscriptions/00000000-0000-0000-0000-000000000000",
    ///         Authorizations = new[]
    ///         {
    ///             new Azure.Lighthouse.Inputs.DefinitionAuthorizationArgs
    ///             {
    ///                 PrincipalId = "00000000-0000-0000-0000-000000000000",
    ///                 RoleDefinitionId = contributor.Apply(getRoleDefinitionResult =&gt; getRoleDefinitionResult.RoleDefinitionId),
    ///                 PrincipalDisplayName = "Tier 1 Support",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Lighthouse Definitions can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:lighthouse/definition:Definition example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.ManagedServices/registrationDefinitions/00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [AzureResourceType("azure:lighthouse/definition:Definition")]
    public partial class Definition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An `authorization` block as defined below.
        /// </summary>
        [Output("authorizations")]
        public Output<ImmutableArray<Outputs.DefinitionAuthorization>> Authorizations { get; private set; } = null!;

        /// <summary>
        /// A description of the Lighthouse Definition.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// An `eligible_authorization` block as defined below.
        /// </summary>
        [Output("eligibleAuthorizations")]
        public Output<ImmutableArray<Outputs.DefinitionEligibleAuthorization>> EligibleAuthorizations { get; private set; } = null!;

        /// <summary>
        /// A unique UUID/GUID which identifies this lighthouse definition - one will be generated if not specified. Changing this forces a new resource to be created.
        /// </summary>
        [Output("lighthouseDefinitionId")]
        public Output<string> LighthouseDefinitionId { get; private set; } = null!;

        /// <summary>
        /// The ID of the managing tenant. Changing this forces a new resource to be created.
        /// </summary>
        [Output("managingTenantId")]
        public Output<string> ManagingTenantId { get; private set; } = null!;

        /// <summary>
        /// The name of the Lighthouse Definition. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `plan` block as defined below.
        /// </summary>
        [Output("plan")]
        public Output<Outputs.DefinitionPlan?> Plan { get; private set; } = null!;

        /// <summary>
        /// The ID of the managed subscription. Changing this forces a new resource to be created.
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a Definition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Definition(string name, DefinitionArgs args, CustomResourceOptions? options = null)
            : base("azure:lighthouse/definition:Definition", name, args ?? new DefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Definition(string name, Input<string> id, DefinitionState? state = null, CustomResourceOptions? options = null)
            : base("azure:lighthouse/definition:Definition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Definition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Definition Get(string name, Input<string> id, DefinitionState? state = null, CustomResourceOptions? options = null)
        {
            return new Definition(name, id, state, options);
        }
    }

    public sealed class DefinitionArgs : global::Pulumi.ResourceArgs
    {
        [Input("authorizations", required: true)]
        private InputList<Inputs.DefinitionAuthorizationArgs>? _authorizations;

        /// <summary>
        /// An `authorization` block as defined below.
        /// </summary>
        public InputList<Inputs.DefinitionAuthorizationArgs> Authorizations
        {
            get => _authorizations ?? (_authorizations = new InputList<Inputs.DefinitionAuthorizationArgs>());
            set => _authorizations = value;
        }

        /// <summary>
        /// A description of the Lighthouse Definition.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("eligibleAuthorizations")]
        private InputList<Inputs.DefinitionEligibleAuthorizationArgs>? _eligibleAuthorizations;

        /// <summary>
        /// An `eligible_authorization` block as defined below.
        /// </summary>
        public InputList<Inputs.DefinitionEligibleAuthorizationArgs> EligibleAuthorizations
        {
            get => _eligibleAuthorizations ?? (_eligibleAuthorizations = new InputList<Inputs.DefinitionEligibleAuthorizationArgs>());
            set => _eligibleAuthorizations = value;
        }

        /// <summary>
        /// A unique UUID/GUID which identifies this lighthouse definition - one will be generated if not specified. Changing this forces a new resource to be created.
        /// </summary>
        [Input("lighthouseDefinitionId")]
        public Input<string>? LighthouseDefinitionId { get; set; }

        /// <summary>
        /// The ID of the managing tenant. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managingTenantId", required: true)]
        public Input<string> ManagingTenantId { get; set; } = null!;

        /// <summary>
        /// The name of the Lighthouse Definition. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `plan` block as defined below.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.DefinitionPlanArgs>? Plan { get; set; }

        /// <summary>
        /// The ID of the managed subscription. Changing this forces a new resource to be created.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public DefinitionArgs()
        {
        }
        public static new DefinitionArgs Empty => new DefinitionArgs();
    }

    public sealed class DefinitionState : global::Pulumi.ResourceArgs
    {
        [Input("authorizations")]
        private InputList<Inputs.DefinitionAuthorizationGetArgs>? _authorizations;

        /// <summary>
        /// An `authorization` block as defined below.
        /// </summary>
        public InputList<Inputs.DefinitionAuthorizationGetArgs> Authorizations
        {
            get => _authorizations ?? (_authorizations = new InputList<Inputs.DefinitionAuthorizationGetArgs>());
            set => _authorizations = value;
        }

        /// <summary>
        /// A description of the Lighthouse Definition.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("eligibleAuthorizations")]
        private InputList<Inputs.DefinitionEligibleAuthorizationGetArgs>? _eligibleAuthorizations;

        /// <summary>
        /// An `eligible_authorization` block as defined below.
        /// </summary>
        public InputList<Inputs.DefinitionEligibleAuthorizationGetArgs> EligibleAuthorizations
        {
            get => _eligibleAuthorizations ?? (_eligibleAuthorizations = new InputList<Inputs.DefinitionEligibleAuthorizationGetArgs>());
            set => _eligibleAuthorizations = value;
        }

        /// <summary>
        /// A unique UUID/GUID which identifies this lighthouse definition - one will be generated if not specified. Changing this forces a new resource to be created.
        /// </summary>
        [Input("lighthouseDefinitionId")]
        public Input<string>? LighthouseDefinitionId { get; set; }

        /// <summary>
        /// The ID of the managing tenant. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managingTenantId")]
        public Input<string>? ManagingTenantId { get; set; }

        /// <summary>
        /// The name of the Lighthouse Definition. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `plan` block as defined below.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.DefinitionPlanGetArgs>? Plan { get; set; }

        /// <summary>
        /// The ID of the managed subscription. Changing this forces a new resource to be created.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public DefinitionState()
        {
        }
        public static new DefinitionState Empty => new DefinitionState();
    }
}
