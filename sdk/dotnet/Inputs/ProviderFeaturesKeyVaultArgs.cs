// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Inputs
{

    public sealed class ProviderFeaturesKeyVaultArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When enabled soft-deleted `azure.keyvault.KeyVault` resources will be permanently deleted (e.g purged), when destroyed
        /// </summary>
        [Input("purgeSoftDeleteOnDestroy")]
        public Input<bool>? PurgeSoftDeleteOnDestroy { get; set; }

        /// <summary>
        /// When enabled soft-deleted `azure.keyvault.Certificate` resources will be permanently deleted (e.g purged), when destroyed
        /// </summary>
        [Input("purgeSoftDeletedCertificatesOnDestroy")]
        public Input<bool>? PurgeSoftDeletedCertificatesOnDestroy { get; set; }

        /// <summary>
        /// When enabled soft-deleted `azure.keyvault.ManagedHardwareSecurityModule` resources will be permanently deleted (e.g purged), when destroyed
        /// </summary>
        [Input("purgeSoftDeletedHardwareSecurityModulesOnDestroy")]
        public Input<bool>? PurgeSoftDeletedHardwareSecurityModulesOnDestroy { get; set; }

        /// <summary>
        /// When enabled soft-deleted `azure.keyvault.Key` resources will be permanently deleted (e.g purged), when destroyed
        /// </summary>
        [Input("purgeSoftDeletedKeysOnDestroy")]
        public Input<bool>? PurgeSoftDeletedKeysOnDestroy { get; set; }

        /// <summary>
        /// When enabled soft-deleted `azure.keyvault.Secret` resources will be permanently deleted (e.g purged), when destroyed
        /// </summary>
        [Input("purgeSoftDeletedSecretsOnDestroy")]
        public Input<bool>? PurgeSoftDeletedSecretsOnDestroy { get; set; }

        /// <summary>
        /// When enabled soft-deleted `azure.keyvault.Certificate` resources will be restored, instead of creating new ones
        /// </summary>
        [Input("recoverSoftDeletedCertificates")]
        public Input<bool>? RecoverSoftDeletedCertificates { get; set; }

        /// <summary>
        /// When enabled soft-deleted `azure.keyvault.KeyVault` resources will be restored, instead of creating new ones
        /// </summary>
        [Input("recoverSoftDeletedKeyVaults")]
        public Input<bool>? RecoverSoftDeletedKeyVaults { get; set; }

        /// <summary>
        /// When enabled soft-deleted `azure.keyvault.Key` resources will be restored, instead of creating new ones
        /// </summary>
        [Input("recoverSoftDeletedKeys")]
        public Input<bool>? RecoverSoftDeletedKeys { get; set; }

        /// <summary>
        /// When enabled soft-deleted `azure.keyvault.Secret` resources will be restored, instead of creating new ones
        /// </summary>
        [Input("recoverSoftDeletedSecrets")]
        public Input<bool>? RecoverSoftDeletedSecrets { get; set; }

        public ProviderFeaturesKeyVaultArgs()
        {
        }
        public static new ProviderFeaturesKeyVaultArgs Empty => new ProviderFeaturesKeyVaultArgs();
    }
}
