// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Orbital.Outputs
{

    [OutputType]
    public sealed class ContactProfileLinkChannel
    {
        /// <summary>
        /// Bandwidth in MHz.
        /// </summary>
        public readonly double BandwidthMhz;
        /// <summary>
        /// Center frequency in MHz.
        /// </summary>
        public readonly double CenterFrequencyMhz;
        /// <summary>
        /// Copy of the modem configuration file such as Kratos QRadio or Kratos QuantumRx. Only valid for downlink directions. If provided, the modem connects to the customer endpoint and sends demodulated data instead of a VITA.49 stream.
        /// </summary>
        public readonly string? DemodulationConfiguration;
        /// <summary>
        /// Customer End point to store/retrieve data during a contact. An `EndPoint` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.ContactProfileLinkChannelEndPoint> EndPoints;
        /// <summary>
        /// Copy of the modem configuration file such as Kratos QRadio. Only valid for uplink directions. If provided, the modem connects to the customer endpoint and accepts commands from the customer instead of a VITA.49 stream.
        /// </summary>
        public readonly string? ModulationConfiguration;
        /// <summary>
        /// Name of the channel.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private ContactProfileLinkChannel(
            double bandwidthMhz,

            double centerFrequencyMhz,

            string? demodulationConfiguration,

            ImmutableArray<Outputs.ContactProfileLinkChannelEndPoint> endPoints,

            string? modulationConfiguration,

            string name)
        {
            BandwidthMhz = bandwidthMhz;
            CenterFrequencyMhz = centerFrequencyMhz;
            DemodulationConfiguration = demodulationConfiguration;
            EndPoints = endPoints;
            ModulationConfiguration = modulationConfiguration;
            Name = name;
        }
    }
}
