// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ServiceBus
{
    public static class GetTopicAuthorizationRule
    {
        /// <summary>
        /// Use this data source to access information about a ServiceBus Topic Authorization Rule within a ServiceBus Topic.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ServiceBus.GetTopicAuthorizationRule.Invoke(new()
        ///     {
        ///         Name = "example-tfex_name",
        ///         ResourceGroupName = "example-resources",
        ///         NamespaceName = "example-namespace",
        ///         TopicName = "example-servicebus_topic",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["servicebusAuthorizationRuleId"] = data.Azurem_servicebus_topic_authorization_rule.Example.Id,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTopicAuthorizationRuleResult> InvokeAsync(GetTopicAuthorizationRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTopicAuthorizationRuleResult>("azure:servicebus/getTopicAuthorizationRule:getTopicAuthorizationRule", args ?? new GetTopicAuthorizationRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about a ServiceBus Topic Authorization Rule within a ServiceBus Topic.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ServiceBus.GetTopicAuthorizationRule.Invoke(new()
        ///     {
        ///         Name = "example-tfex_name",
        ///         ResourceGroupName = "example-resources",
        ///         NamespaceName = "example-namespace",
        ///         TopicName = "example-servicebus_topic",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["servicebusAuthorizationRuleId"] = data.Azurem_servicebus_topic_authorization_rule.Example.Id,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTopicAuthorizationRuleResult> Invoke(GetTopicAuthorizationRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTopicAuthorizationRuleResult>("azure:servicebus/getTopicAuthorizationRule:getTopicAuthorizationRule", args ?? new GetTopicAuthorizationRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTopicAuthorizationRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the ServiceBus Topic Authorization Rule resource.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the ServiceBus Namespace.
        /// </summary>
        [Input("namespaceName")]
        public string? NamespaceName { get; set; }

        [Input("queueName")]
        public string? QueueName { get; set; }

        /// <summary>
        /// The name of the resource group in which the ServiceBus Namespace exists.
        /// </summary>
        [Input("resourceGroupName")]
        public string? ResourceGroupName { get; set; }

        [Input("topicId")]
        public string? TopicId { get; set; }

        /// <summary>
        /// The name of the ServiceBus Topic.
        /// </summary>
        [Input("topicName")]
        public string? TopicName { get; set; }

        public GetTopicAuthorizationRuleArgs()
        {
        }
        public static new GetTopicAuthorizationRuleArgs Empty => new GetTopicAuthorizationRuleArgs();
    }

    public sealed class GetTopicAuthorizationRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the ServiceBus Topic Authorization Rule resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the ServiceBus Namespace.
        /// </summary>
        [Input("namespaceName")]
        public Input<string>? NamespaceName { get; set; }

        [Input("queueName")]
        public Input<string>? QueueName { get; set; }

        /// <summary>
        /// The name of the resource group in which the ServiceBus Namespace exists.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("topicId")]
        public Input<string>? TopicId { get; set; }

        /// <summary>
        /// The name of the ServiceBus Topic.
        /// </summary>
        [Input("topicName")]
        public Input<string>? TopicName { get; set; }

        public GetTopicAuthorizationRuleInvokeArgs()
        {
        }
        public static new GetTopicAuthorizationRuleInvokeArgs Empty => new GetTopicAuthorizationRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetTopicAuthorizationRuleResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool Listen;
        public readonly bool Manage;
        public readonly string Name;
        public readonly string? NamespaceName;
        /// <summary>
        /// The Primary Connection String for the ServiceBus Topic authorization Rule.
        /// </summary>
        public readonly string PrimaryConnectionString;
        /// <summary>
        /// The alias Primary Connection String for the ServiceBus Namespace, if the namespace is Geo DR paired.
        /// </summary>
        public readonly string PrimaryConnectionStringAlias;
        /// <summary>
        /// The Primary Key for the ServiceBus Topic authorization Rule.
        /// </summary>
        public readonly string PrimaryKey;
        public readonly string? QueueName;
        public readonly string? ResourceGroupName;
        /// <summary>
        /// The Secondary Connection String for the ServiceBus Topic authorization Rule.
        /// </summary>
        public readonly string SecondaryConnectionString;
        /// <summary>
        /// The alias Secondary Connection String for the ServiceBus Namespace
        /// </summary>
        public readonly string SecondaryConnectionStringAlias;
        /// <summary>
        /// The Secondary Key for the ServiceBus Topic authorization Rule.
        /// </summary>
        public readonly string SecondaryKey;
        public readonly bool Send;
        public readonly string? TopicId;
        public readonly string? TopicName;

        [OutputConstructor]
        private GetTopicAuthorizationRuleResult(
            string id,

            bool listen,

            bool manage,

            string name,

            string? namespaceName,

            string primaryConnectionString,

            string primaryConnectionStringAlias,

            string primaryKey,

            string? queueName,

            string? resourceGroupName,

            string secondaryConnectionString,

            string secondaryConnectionStringAlias,

            string secondaryKey,

            bool send,

            string? topicId,

            string? topicName)
        {
            Id = id;
            Listen = listen;
            Manage = manage;
            Name = name;
            NamespaceName = namespaceName;
            PrimaryConnectionString = primaryConnectionString;
            PrimaryConnectionStringAlias = primaryConnectionStringAlias;
            PrimaryKey = primaryKey;
            QueueName = queueName;
            ResourceGroupName = resourceGroupName;
            SecondaryConnectionString = secondaryConnectionString;
            SecondaryConnectionStringAlias = secondaryConnectionStringAlias;
            SecondaryKey = secondaryKey;
            Send = send;
            TopicId = topicId;
            TopicName = topicName;
        }
    }
}
