// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ServiceBus
{
    public static class GetQueueAuthorizationRule
    {
        /// <summary>
        /// Use this data source to access information about an existing ServiceBus Queue Authorisation Rule within a ServiceBus Queue.
        /// </summary>
        public static Task<GetQueueAuthorizationRuleResult> InvokeAsync(GetQueueAuthorizationRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetQueueAuthorizationRuleResult>("azure:servicebus/getQueueAuthorizationRule:getQueueAuthorizationRule", args ?? new GetQueueAuthorizationRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing ServiceBus Queue Authorisation Rule within a ServiceBus Queue.
        /// </summary>
        public static Output<GetQueueAuthorizationRuleResult> Invoke(GetQueueAuthorizationRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetQueueAuthorizationRuleResult>("azure:servicebus/getQueueAuthorizationRule:getQueueAuthorizationRule", args ?? new GetQueueAuthorizationRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetQueueAuthorizationRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this ServiceBus Queue Authorisation Rule.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the ServiceBus Namespace.
        /// </summary>
        [Input("namespaceName")]
        public string? NamespaceName { get; set; }

        [Input("queueId")]
        public string? QueueId { get; set; }

        /// <summary>
        /// The name of the ServiceBus Queue.
        /// </summary>
        [Input("queueName")]
        public string? QueueName { get; set; }

        /// <summary>
        /// The name of the Resource Group where the ServiceBus Queue Authorisation Rule exists.
        /// </summary>
        [Input("resourceGroupName")]
        public string? ResourceGroupName { get; set; }

        public GetQueueAuthorizationRuleArgs()
        {
        }
        public static new GetQueueAuthorizationRuleArgs Empty => new GetQueueAuthorizationRuleArgs();
    }

    public sealed class GetQueueAuthorizationRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this ServiceBus Queue Authorisation Rule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the ServiceBus Namespace.
        /// </summary>
        [Input("namespaceName")]
        public Input<string>? NamespaceName { get; set; }

        [Input("queueId")]
        public Input<string>? QueueId { get; set; }

        /// <summary>
        /// The name of the ServiceBus Queue.
        /// </summary>
        [Input("queueName")]
        public Input<string>? QueueName { get; set; }

        /// <summary>
        /// The name of the Resource Group where the ServiceBus Queue Authorisation Rule exists.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        public GetQueueAuthorizationRuleInvokeArgs()
        {
        }
        public static new GetQueueAuthorizationRuleInvokeArgs Empty => new GetQueueAuthorizationRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetQueueAuthorizationRuleResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool Listen;
        public readonly bool Manage;
        public readonly string Name;
        public readonly string? NamespaceName;
        /// <summary>
        /// The Primary Connection String for the ServiceBus Queue authorization Rule.
        /// </summary>
        public readonly string PrimaryConnectionString;
        /// <summary>
        /// The alias Primary Connection String for the ServiceBus Namespace, if the namespace is Geo DR paired.
        /// </summary>
        public readonly string PrimaryConnectionStringAlias;
        /// <summary>
        /// The Primary Key for the ServiceBus Queue authorization Rule.
        /// </summary>
        public readonly string PrimaryKey;
        public readonly string? QueueId;
        public readonly string? QueueName;
        public readonly string? ResourceGroupName;
        /// <summary>
        /// The Secondary Connection String for the ServiceBus Queue authorization Rule.
        /// </summary>
        public readonly string SecondaryConnectionString;
        /// <summary>
        /// The alias Secondary Connection String for the ServiceBus Namespace
        /// </summary>
        public readonly string SecondaryConnectionStringAlias;
        /// <summary>
        /// The Secondary Key for the ServiceBus Queue authorization Rule.
        /// </summary>
        public readonly string SecondaryKey;
        public readonly bool Send;

        [OutputConstructor]
        private GetQueueAuthorizationRuleResult(
            string id,

            bool listen,

            bool manage,

            string name,

            string? namespaceName,

            string primaryConnectionString,

            string primaryConnectionStringAlias,

            string primaryKey,

            string? queueId,

            string? queueName,

            string? resourceGroupName,

            string secondaryConnectionString,

            string secondaryConnectionStringAlias,

            string secondaryKey,

            bool send)
        {
            Id = id;
            Listen = listen;
            Manage = manage;
            Name = name;
            NamespaceName = namespaceName;
            PrimaryConnectionString = primaryConnectionString;
            PrimaryConnectionStringAlias = primaryConnectionStringAlias;
            PrimaryKey = primaryKey;
            QueueId = queueId;
            QueueName = queueName;
            ResourceGroupName = resourceGroupName;
            SecondaryConnectionString = secondaryConnectionString;
            SecondaryConnectionStringAlias = secondaryConnectionStringAlias;
            SecondaryKey = secondaryKey;
            Send = send;
        }
    }
}
