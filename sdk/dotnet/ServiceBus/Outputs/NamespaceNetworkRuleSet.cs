// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ServiceBus.Outputs
{

    [OutputType]
    public sealed class NamespaceNetworkRuleSet
    {
        /// <summary>
        /// Specifies the default action for the Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Allow`.
        /// </summary>
        public readonly string? DefaultAction;
        /// <summary>
        /// One or more IP Addresses, or CIDR Blocks which should be able to access the ServiceBus Namespace.
        /// </summary>
        public readonly ImmutableArray<string> IpRules;
        /// <summary>
        /// One or more `network_rules` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.NamespaceNetworkRuleSetNetworkRule> NetworkRules;
        /// <summary>
        /// Whether to allow traffic over public network. Possible values are `true` and `false`. Defaults to `true`.
        /// </summary>
        public readonly bool? PublicNetworkAccessEnabled;
        /// <summary>
        /// Are Azure Services that are known and trusted for this resource type are allowed to bypass firewall configuration? See [Trusted Microsoft Services](https://github.com/MicrosoftDocs/azure-docs/blob/master/articles/service-bus-messaging/includes/service-bus-trusted-services.md)
        /// </summary>
        public readonly bool? TrustedServicesAllowed;

        [OutputConstructor]
        private NamespaceNetworkRuleSet(
            string? defaultAction,

            ImmutableArray<string> ipRules,

            ImmutableArray<Outputs.NamespaceNetworkRuleSetNetworkRule> networkRules,

            bool? publicNetworkAccessEnabled,

            bool? trustedServicesAllowed)
        {
            DefaultAction = defaultAction;
            IpRules = ipRules;
            NetworkRules = networkRules;
            PublicNetworkAccessEnabled = publicNetworkAccessEnabled;
            TrustedServicesAllowed = trustedServicesAllowed;
        }
    }
}
