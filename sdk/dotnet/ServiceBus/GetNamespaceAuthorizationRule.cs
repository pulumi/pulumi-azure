// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ServiceBus
{
    public static class GetNamespaceAuthorizationRule
    {
        /// <summary>
        /// Use this data source to access information about an existing ServiceBus Namespace Authorization Rule.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ServiceBus.GetNamespaceAuthorizationRule.Invoke(new()
        ///     {
        ///         Name = "examplerule",
        ///         NamespaceId = "examplenamespace",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["ruleId"] = example.Apply(getNamespaceAuthorizationRuleResult =&gt; getNamespaceAuthorizationRuleResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNamespaceAuthorizationRuleResult> InvokeAsync(GetNamespaceAuthorizationRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNamespaceAuthorizationRuleResult>("azure:servicebus/getNamespaceAuthorizationRule:getNamespaceAuthorizationRule", args ?? new GetNamespaceAuthorizationRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing ServiceBus Namespace Authorization Rule.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ServiceBus.GetNamespaceAuthorizationRule.Invoke(new()
        ///     {
        ///         Name = "examplerule",
        ///         NamespaceId = "examplenamespace",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["ruleId"] = example.Apply(getNamespaceAuthorizationRuleResult =&gt; getNamespaceAuthorizationRuleResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNamespaceAuthorizationRuleResult> Invoke(GetNamespaceAuthorizationRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNamespaceAuthorizationRuleResult>("azure:servicebus/getNamespaceAuthorizationRule:getNamespaceAuthorizationRule", args ?? new GetNamespaceAuthorizationRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNamespaceAuthorizationRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the ServiceBus Namespace Authorization Rule.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the ID of the ServiceBus Namespace where the Service Bus Namespace Authorization Rule exists.
        /// </summary>
        [Input("namespaceId")]
        public string? NamespaceId { get; set; }

        /// <summary>
        /// Specifies the name of the ServiceBus Namespace.
        /// </summary>
        [Input("namespaceName")]
        public string? NamespaceName { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the ServiceBus Namespace exists.
        /// 
        /// &gt; **Note:** `namespace_name` and `resource_group_name` has been deprecated and will be removed in version 4.0 of the provider in favour of `namespace_id`.
        /// </summary>
        [Input("resourceGroupName")]
        public string? ResourceGroupName { get; set; }

        public GetNamespaceAuthorizationRuleArgs()
        {
        }
        public static new GetNamespaceAuthorizationRuleArgs Empty => new GetNamespaceAuthorizationRuleArgs();
    }

    public sealed class GetNamespaceAuthorizationRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the ServiceBus Namespace Authorization Rule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the ID of the ServiceBus Namespace where the Service Bus Namespace Authorization Rule exists.
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        /// <summary>
        /// Specifies the name of the ServiceBus Namespace.
        /// </summary>
        [Input("namespaceName")]
        public Input<string>? NamespaceName { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the ServiceBus Namespace exists.
        /// 
        /// &gt; **Note:** `namespace_name` and `resource_group_name` has been deprecated and will be removed in version 4.0 of the provider in favour of `namespace_id`.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        public GetNamespaceAuthorizationRuleInvokeArgs()
        {
        }
        public static new GetNamespaceAuthorizationRuleInvokeArgs Empty => new GetNamespaceAuthorizationRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetNamespaceAuthorizationRuleResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string? NamespaceId;
        public readonly string? NamespaceName;
        /// <summary>
        /// The primary connection string for the authorization rule.
        /// </summary>
        public readonly string PrimaryConnectionString;
        /// <summary>
        /// The alias Primary Connection String for the ServiceBus Namespace, if the namespace is Geo DR paired.
        /// </summary>
        public readonly string PrimaryConnectionStringAlias;
        /// <summary>
        /// The primary access key for the authorization rule.
        /// </summary>
        public readonly string PrimaryKey;
        public readonly string? ResourceGroupName;
        /// <summary>
        /// The secondary connection string for the authorization rule.
        /// </summary>
        public readonly string SecondaryConnectionString;
        /// <summary>
        /// The alias Secondary Connection String for the ServiceBus Namespace
        /// </summary>
        public readonly string SecondaryConnectionStringAlias;
        /// <summary>
        /// The secondary access key for the authorization rule.
        /// </summary>
        public readonly string SecondaryKey;

        [OutputConstructor]
        private GetNamespaceAuthorizationRuleResult(
            string id,

            string name,

            string? namespaceId,

            string? namespaceName,

            string primaryConnectionString,

            string primaryConnectionStringAlias,

            string primaryKey,

            string? resourceGroupName,

            string secondaryConnectionString,

            string secondaryConnectionStringAlias,

            string secondaryKey)
        {
            Id = id;
            Name = name;
            NamespaceId = namespaceId;
            NamespaceName = namespaceName;
            PrimaryConnectionString = primaryConnectionString;
            PrimaryConnectionStringAlias = primaryConnectionStringAlias;
            PrimaryKey = primaryKey;
            ResourceGroupName = resourceGroupName;
            SecondaryConnectionString = secondaryConnectionString;
            SecondaryConnectionStringAlias = secondaryConnectionStringAlias;
            SecondaryKey = secondaryKey;
        }
    }
}
