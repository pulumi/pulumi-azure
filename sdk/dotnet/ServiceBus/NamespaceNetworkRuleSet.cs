// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ServiceBus
{
    /// <summary>
    /// Manages a ServiceBus Namespace Network Rule Set.
    /// 
    /// &gt; The `azure.servicebus.NamespaceNetworkRuleSet` resource is deprecated
    /// and will be removed in version 4.0 of the AzureRM provider. Please use
    /// `network_rule_set` inside the `azure.servicebus.Namespace` resource instead.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleNamespace = new Azure.ServiceBus.Namespace("exampleNamespace", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "Premium",
    ///         Capacity = 1,
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "172.17.0.0/16",
    ///         },
    ///         DnsServers = new[]
    ///         {
    ///             "10.0.0.4",
    ///             "10.0.0.5",
    ///         },
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "172.17.0.0/24",
    ///         },
    ///         ServiceEndpoints = new[]
    ///         {
    ///             "Microsoft.ServiceBus",
    ///         },
    ///     });
    /// 
    ///     var exampleNamespaceNetworkRuleSet = new Azure.ServiceBus.NamespaceNetworkRuleSet("exampleNamespaceNetworkRuleSet", new()
    ///     {
    ///         NamespaceId = exampleNamespace.Id,
    ///         DefaultAction = "Deny",
    ///         PublicNetworkAccessEnabled = true,
    ///         NetworkRules = new[]
    ///         {
    ///             new Azure.ServiceBus.Inputs.NamespaceNetworkRuleSetNetworkRuleArgs
    ///             {
    ///                 SubnetId = exampleSubnet.Id,
    ///                 IgnoreMissingVnetServiceEndpoint = false,
    ///             },
    ///         },
    ///         IpRules = new[]
    ///         {
    ///             "1.1.1.1",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Service Bus Namespace can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:servicebus/namespaceNetworkRuleSet:NamespaceNetworkRuleSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ServiceBus/namespaces/sbns1
    /// ```
    /// </summary>
    [AzureResourceType("azure:servicebus/namespaceNetworkRuleSet:NamespaceNetworkRuleSet")]
    public partial class NamespaceNetworkRuleSet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the default action for the ServiceBus Namespace Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Allow`.
        /// </summary>
        [Output("defaultAction")]
        public Output<string?> DefaultAction { get; private set; } = null!;

        /// <summary>
        /// One or more IP Addresses, or CIDR Blocks which should be able to access the ServiceBus Namespace.
        /// </summary>
        [Output("ipRules")]
        public Output<ImmutableArray<string>> IpRules { get; private set; } = null!;

        /// <summary>
        /// Specifies the ServiceBus Namespace ID to which to attach the ServiceBus Namespace Network Rule Set. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** The ServiceBus Namespace must be `Premium` in order to attach a ServiceBus Namespace Network Rule Set.
        /// </summary>
        [Output("namespaceId")]
        public Output<string> NamespaceId { get; private set; } = null!;

        /// <summary>
        /// One or more `network_rules` blocks as defined below.
        /// </summary>
        [Output("networkRules")]
        public Output<ImmutableArray<Outputs.NamespaceNetworkRuleSetNetworkRule>> NetworkRules { get; private set; } = null!;

        /// <summary>
        /// Whether to allow traffic over public network. Possible values are `true` and `false`. Defaults to `true`.
        /// </summary>
        [Output("publicNetworkAccessEnabled")]
        public Output<bool?> PublicNetworkAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// If True, then Azure Services that are known and trusted for this resource type are allowed to bypass firewall configuration. See [Trusted Microsoft Services](https://github.com/MicrosoftDocs/azure-docs/blob/master/articles/service-bus-messaging/includes/service-bus-trusted-services.md)
        /// </summary>
        [Output("trustedServicesAllowed")]
        public Output<bool?> TrustedServicesAllowed { get; private set; } = null!;


        /// <summary>
        /// Create a NamespaceNetworkRuleSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NamespaceNetworkRuleSet(string name, NamespaceNetworkRuleSetArgs args, CustomResourceOptions? options = null)
            : base("azure:servicebus/namespaceNetworkRuleSet:NamespaceNetworkRuleSet", name, args ?? new NamespaceNetworkRuleSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NamespaceNetworkRuleSet(string name, Input<string> id, NamespaceNetworkRuleSetState? state = null, CustomResourceOptions? options = null)
            : base("azure:servicebus/namespaceNetworkRuleSet:NamespaceNetworkRuleSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NamespaceNetworkRuleSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NamespaceNetworkRuleSet Get(string name, Input<string> id, NamespaceNetworkRuleSetState? state = null, CustomResourceOptions? options = null)
        {
            return new NamespaceNetworkRuleSet(name, id, state, options);
        }
    }

    public sealed class NamespaceNetworkRuleSetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the default action for the ServiceBus Namespace Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Allow`.
        /// </summary>
        [Input("defaultAction")]
        public Input<string>? DefaultAction { get; set; }

        [Input("ipRules")]
        private InputList<string>? _ipRules;

        /// <summary>
        /// One or more IP Addresses, or CIDR Blocks which should be able to access the ServiceBus Namespace.
        /// </summary>
        public InputList<string> IpRules
        {
            get => _ipRules ?? (_ipRules = new InputList<string>());
            set => _ipRules = value;
        }

        /// <summary>
        /// Specifies the ServiceBus Namespace ID to which to attach the ServiceBus Namespace Network Rule Set. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** The ServiceBus Namespace must be `Premium` in order to attach a ServiceBus Namespace Network Rule Set.
        /// </summary>
        [Input("namespaceId", required: true)]
        public Input<string> NamespaceId { get; set; } = null!;

        [Input("networkRules")]
        private InputList<Inputs.NamespaceNetworkRuleSetNetworkRuleArgs>? _networkRules;

        /// <summary>
        /// One or more `network_rules` blocks as defined below.
        /// </summary>
        public InputList<Inputs.NamespaceNetworkRuleSetNetworkRuleArgs> NetworkRules
        {
            get => _networkRules ?? (_networkRules = new InputList<Inputs.NamespaceNetworkRuleSetNetworkRuleArgs>());
            set => _networkRules = value;
        }

        /// <summary>
        /// Whether to allow traffic over public network. Possible values are `true` and `false`. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// If True, then Azure Services that are known and trusted for this resource type are allowed to bypass firewall configuration. See [Trusted Microsoft Services](https://github.com/MicrosoftDocs/azure-docs/blob/master/articles/service-bus-messaging/includes/service-bus-trusted-services.md)
        /// </summary>
        [Input("trustedServicesAllowed")]
        public Input<bool>? TrustedServicesAllowed { get; set; }

        public NamespaceNetworkRuleSetArgs()
        {
        }
        public static new NamespaceNetworkRuleSetArgs Empty => new NamespaceNetworkRuleSetArgs();
    }

    public sealed class NamespaceNetworkRuleSetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the default action for the ServiceBus Namespace Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Allow`.
        /// </summary>
        [Input("defaultAction")]
        public Input<string>? DefaultAction { get; set; }

        [Input("ipRules")]
        private InputList<string>? _ipRules;

        /// <summary>
        /// One or more IP Addresses, or CIDR Blocks which should be able to access the ServiceBus Namespace.
        /// </summary>
        public InputList<string> IpRules
        {
            get => _ipRules ?? (_ipRules = new InputList<string>());
            set => _ipRules = value;
        }

        /// <summary>
        /// Specifies the ServiceBus Namespace ID to which to attach the ServiceBus Namespace Network Rule Set. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** The ServiceBus Namespace must be `Premium` in order to attach a ServiceBus Namespace Network Rule Set.
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        [Input("networkRules")]
        private InputList<Inputs.NamespaceNetworkRuleSetNetworkRuleGetArgs>? _networkRules;

        /// <summary>
        /// One or more `network_rules` blocks as defined below.
        /// </summary>
        public InputList<Inputs.NamespaceNetworkRuleSetNetworkRuleGetArgs> NetworkRules
        {
            get => _networkRules ?? (_networkRules = new InputList<Inputs.NamespaceNetworkRuleSetNetworkRuleGetArgs>());
            set => _networkRules = value;
        }

        /// <summary>
        /// Whether to allow traffic over public network. Possible values are `true` and `false`. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// If True, then Azure Services that are known and trusted for this resource type are allowed to bypass firewall configuration. See [Trusted Microsoft Services](https://github.com/MicrosoftDocs/azure-docs/blob/master/articles/service-bus-messaging/includes/service-bus-trusted-services.md)
        /// </summary>
        [Input("trustedServicesAllowed")]
        public Input<bool>? TrustedServicesAllowed { get; set; }

        public NamespaceNetworkRuleSetState()
        {
        }
        public static new NamespaceNetworkRuleSetState Empty => new NamespaceNetworkRuleSetState();
    }
}
