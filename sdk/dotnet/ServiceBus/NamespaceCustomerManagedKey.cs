// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ServiceBus
{
    /// <summary>
    /// Manages a Service Bus Namespace Customer Managed Key.
    /// 
    /// !&gt; **Note:** It is not possible to remove the Customer Managed Key from the Service Bus Namespace once it's been added. To remove the Customer Managed Key, the parent Service Bus Namespace must be deleted and recreated.
    /// 
    /// &gt; **Note:** This resource should only be used to create a Customer Managed Key for Service Bus Namespaces with System Assigned identities. The `customer_managed_key` block in `azure.servicebus.Namespace` should be used to create a Customer Managed Key for a Service Bus Namespace with a User Assigned identity.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resource-group",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleNamespace = new Azure.ServiceBus.Namespace("example", new()
    ///     {
    ///         Name = "example-servicebus-namespace",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         Sku = "Premium",
    ///         PremiumMessagingPartitions = 1,
    ///         Capacity = 1,
    ///         Identity = new Azure.ServiceBus.Inputs.NamespaceIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    ///     {
    ///         Name = "example-key-vault",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         EnabledForDiskEncryption = true,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SoftDeleteRetentionDays = 7,
    ///         PurgeProtectionEnabled = true,
    ///         SkuName = "standard",
    ///         AccessPolicies = new[]
    ///         {
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///                 ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///                 KeyPermissions = new[]
    ///                 {
    ///                     "Create",
    ///                     "Decrypt",
    ///                     "Encrypt",
    ///                     "Delete",
    ///                     "Get",
    ///                     "List",
    ///                     "Purge",
    ///                     "UnwrapKey",
    ///                     "WrapKey",
    ///                     "Verify",
    ///                     "GetRotationPolicy",
    ///                 },
    ///                 SecretPermissions = new[]
    ///                 {
    ///                     "Set",
    ///                 },
    ///             },
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = exampleNamespace.Identity.Apply(identity =&gt; identity?.TenantId),
    ///                 ObjectId = exampleNamespace.Identity.Apply(identity =&gt; identity?.PrincipalId),
    ///                 KeyPermissions = new[]
    ///                 {
    ///                     "Create",
    ///                     "Decrypt",
    ///                     "Encrypt",
    ///                     "Delete",
    ///                     "Get",
    ///                     "List",
    ///                     "Purge",
    ///                     "UnwrapKey",
    ///                     "WrapKey",
    ///                     "Verify",
    ///                     "GetRotationPolicy",
    ///                 },
    ///                 SecretPermissions = new[]
    ///                 {
    ///                     "Set",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleKey = new Azure.KeyVault.Key("example", new()
    ///     {
    ///         Name = "example-key-vault-key",
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         KeyType = "RSA",
    ///         KeySize = 2048,
    ///         KeyOpts = new[]
    ///         {
    ///             "decrypt",
    ///             "encrypt",
    ///             "sign",
    ///             "unwrapKey",
    ///             "verify",
    ///             "wrapKey",
    ///         },
    ///     });
    /// 
    ///     var exampleNamespaceCustomerManagedKey = new Azure.ServiceBus.NamespaceCustomerManagedKey("example", new()
    ///     {
    ///         NamespaceId = exampleNamespace.Id,
    ///         KeyVaultKeyId = exampleKey.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Service Bus Namespace Customer Managed Key can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:servicebus/namespaceCustomerManagedKey:NamespaceCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ServiceBus/namespaces/sbns1
    /// ```
    /// </summary>
    [AzureResourceType("azure:servicebus/namespaceCustomerManagedKey:NamespaceCustomerManagedKey")]
    public partial class NamespaceCustomerManagedKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Used to specify whether enable Infrastructure Encryption. Changing this forces a new resource to be created.
        /// </summary>
        [Output("infrastructureEncryptionEnabled")]
        public Output<bool?> InfrastructureEncryptionEnabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the Key Vault Key which should be used to Encrypt the data in this Service Bus Namespace.
        /// </summary>
        [Output("keyVaultKeyId")]
        public Output<string> KeyVaultKeyId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Service Bus namespace. Changing this forces a new resource to be created.
        /// </summary>
        [Output("namespaceId")]
        public Output<string> NamespaceId { get; private set; } = null!;


        /// <summary>
        /// Create a NamespaceCustomerManagedKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NamespaceCustomerManagedKey(string name, NamespaceCustomerManagedKeyArgs args, CustomResourceOptions? options = null)
            : base("azure:servicebus/namespaceCustomerManagedKey:NamespaceCustomerManagedKey", name, args ?? new NamespaceCustomerManagedKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NamespaceCustomerManagedKey(string name, Input<string> id, NamespaceCustomerManagedKeyState? state = null, CustomResourceOptions? options = null)
            : base("azure:servicebus/namespaceCustomerManagedKey:NamespaceCustomerManagedKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NamespaceCustomerManagedKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NamespaceCustomerManagedKey Get(string name, Input<string> id, NamespaceCustomerManagedKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new NamespaceCustomerManagedKey(name, id, state, options);
        }
    }

    public sealed class NamespaceCustomerManagedKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Used to specify whether enable Infrastructure Encryption. Changing this forces a new resource to be created.
        /// </summary>
        [Input("infrastructureEncryptionEnabled")]
        public Input<bool>? InfrastructureEncryptionEnabled { get; set; }

        /// <summary>
        /// The ID of the Key Vault Key which should be used to Encrypt the data in this Service Bus Namespace.
        /// </summary>
        [Input("keyVaultKeyId", required: true)]
        public Input<string> KeyVaultKeyId { get; set; } = null!;

        /// <summary>
        /// The ID of the Service Bus namespace. Changing this forces a new resource to be created.
        /// </summary>
        [Input("namespaceId", required: true)]
        public Input<string> NamespaceId { get; set; } = null!;

        public NamespaceCustomerManagedKeyArgs()
        {
        }
        public static new NamespaceCustomerManagedKeyArgs Empty => new NamespaceCustomerManagedKeyArgs();
    }

    public sealed class NamespaceCustomerManagedKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Used to specify whether enable Infrastructure Encryption. Changing this forces a new resource to be created.
        /// </summary>
        [Input("infrastructureEncryptionEnabled")]
        public Input<bool>? InfrastructureEncryptionEnabled { get; set; }

        /// <summary>
        /// The ID of the Key Vault Key which should be used to Encrypt the data in this Service Bus Namespace.
        /// </summary>
        [Input("keyVaultKeyId")]
        public Input<string>? KeyVaultKeyId { get; set; }

        /// <summary>
        /// The ID of the Service Bus namespace. Changing this forces a new resource to be created.
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        public NamespaceCustomerManagedKeyState()
        {
        }
        public static new NamespaceCustomerManagedKeyState Empty => new NamespaceCustomerManagedKeyState();
    }
}
