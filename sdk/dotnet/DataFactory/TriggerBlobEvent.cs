// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DataFactory
{
    /// <summary>
    /// Manages a Blob Event Trigger inside an Azure Data Factory.
    /// 
    /// ## Import
    /// 
    /// Data Factory Blob Event Trigger can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:datafactory/triggerBlobEvent:TriggerBlobEvent example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/triggers/example
    /// ```
    /// </summary>
    [AzureResourceType("azure:datafactory/triggerBlobEvent:TriggerBlobEvent")]
    public partial class TriggerBlobEvent : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies if the Data Factory Blob Event Trigger is activated. Defaults to `true`.
        /// </summary>
        [Output("activated")]
        public Output<bool?> Activated { get; private set; } = null!;

        /// <summary>
        /// A map of additional properties to associate with the Data Factory Blob Event Trigger.
        /// </summary>
        [Output("additionalProperties")]
        public Output<ImmutableDictionary<string, string>?> AdditionalProperties { get; private set; } = null!;

        /// <summary>
        /// List of tags that can be used for describing the Data Factory Blob Event Trigger.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableArray<string>> Annotations { get; private set; } = null!;

        /// <summary>
        /// The pattern that blob path starts with for trigger to fire.
        /// </summary>
        [Output("blobPathBeginsWith")]
        public Output<string?> BlobPathBeginsWith { get; private set; } = null!;

        /// <summary>
        /// The pattern that blob path ends with for trigger to fire.
        /// </summary>
        [Output("blobPathEndsWith")]
        public Output<string?> BlobPathEndsWith { get; private set; } = null!;

        /// <summary>
        /// The ID of Data Factory in which to associate the Trigger with. Changing this forces a new resource.
        /// </summary>
        [Output("dataFactoryId")]
        public Output<string> DataFactoryId { get; private set; } = null!;

        /// <summary>
        /// The description for the Data Factory Blob Event Trigger.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// List of events that will fire this trigger. Possible values are `Microsoft.Storage.BlobCreated` and `Microsoft.Storage.BlobDeleted`.
        /// </summary>
        [Output("events")]
        public Output<ImmutableArray<string>> Events { get; private set; } = null!;

        /// <summary>
        /// are blobs with zero bytes ignored?
        /// </summary>
        [Output("ignoreEmptyBlobs")]
        public Output<bool?> IgnoreEmptyBlobs { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Data Factory Blob Event Trigger. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more `pipeline` blocks as defined below.
        /// </summary>
        [Output("pipelines")]
        public Output<ImmutableArray<Outputs.TriggerBlobEventPipeline>> Pipelines { get; private set; } = null!;

        /// <summary>
        /// The ID of Storage Account in which blob event will be listened. Changing this forces a new resource.
        /// </summary>
        [Output("storageAccountId")]
        public Output<string> StorageAccountId { get; private set; } = null!;


        /// <summary>
        /// Create a TriggerBlobEvent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TriggerBlobEvent(string name, TriggerBlobEventArgs args, CustomResourceOptions? options = null)
            : base("azure:datafactory/triggerBlobEvent:TriggerBlobEvent", name, args ?? new TriggerBlobEventArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TriggerBlobEvent(string name, Input<string> id, TriggerBlobEventState? state = null, CustomResourceOptions? options = null)
            : base("azure:datafactory/triggerBlobEvent:TriggerBlobEvent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TriggerBlobEvent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TriggerBlobEvent Get(string name, Input<string> id, TriggerBlobEventState? state = null, CustomResourceOptions? options = null)
        {
            return new TriggerBlobEvent(name, id, state, options);
        }
    }

    public sealed class TriggerBlobEventArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies if the Data Factory Blob Event Trigger is activated. Defaults to `true`.
        /// </summary>
        [Input("activated")]
        public Input<bool>? Activated { get; set; }

        [Input("additionalProperties")]
        private InputMap<string>? _additionalProperties;

        /// <summary>
        /// A map of additional properties to associate with the Data Factory Blob Event Trigger.
        /// </summary>
        public InputMap<string> AdditionalProperties
        {
            get => _additionalProperties ?? (_additionalProperties = new InputMap<string>());
            set => _additionalProperties = value;
        }

        [Input("annotations")]
        private InputList<string>? _annotations;

        /// <summary>
        /// List of tags that can be used for describing the Data Factory Blob Event Trigger.
        /// </summary>
        public InputList<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputList<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The pattern that blob path starts with for trigger to fire.
        /// </summary>
        [Input("blobPathBeginsWith")]
        public Input<string>? BlobPathBeginsWith { get; set; }

        /// <summary>
        /// The pattern that blob path ends with for trigger to fire.
        /// </summary>
        [Input("blobPathEndsWith")]
        public Input<string>? BlobPathEndsWith { get; set; }

        /// <summary>
        /// The ID of Data Factory in which to associate the Trigger with. Changing this forces a new resource.
        /// </summary>
        [Input("dataFactoryId", required: true)]
        public Input<string> DataFactoryId { get; set; } = null!;

        /// <summary>
        /// The description for the Data Factory Blob Event Trigger.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("events", required: true)]
        private InputList<string>? _events;

        /// <summary>
        /// List of events that will fire this trigger. Possible values are `Microsoft.Storage.BlobCreated` and `Microsoft.Storage.BlobDeleted`.
        /// </summary>
        public InputList<string> Events
        {
            get => _events ?? (_events = new InputList<string>());
            set => _events = value;
        }

        /// <summary>
        /// are blobs with zero bytes ignored?
        /// </summary>
        [Input("ignoreEmptyBlobs")]
        public Input<bool>? IgnoreEmptyBlobs { get; set; }

        /// <summary>
        /// Specifies the name of the Data Factory Blob Event Trigger. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pipelines", required: true)]
        private InputList<Inputs.TriggerBlobEventPipelineArgs>? _pipelines;

        /// <summary>
        /// One or more `pipeline` blocks as defined below.
        /// </summary>
        public InputList<Inputs.TriggerBlobEventPipelineArgs> Pipelines
        {
            get => _pipelines ?? (_pipelines = new InputList<Inputs.TriggerBlobEventPipelineArgs>());
            set => _pipelines = value;
        }

        /// <summary>
        /// The ID of Storage Account in which blob event will be listened. Changing this forces a new resource.
        /// </summary>
        [Input("storageAccountId", required: true)]
        public Input<string> StorageAccountId { get; set; } = null!;

        public TriggerBlobEventArgs()
        {
        }
    }

    public sealed class TriggerBlobEventState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies if the Data Factory Blob Event Trigger is activated. Defaults to `true`.
        /// </summary>
        [Input("activated")]
        public Input<bool>? Activated { get; set; }

        [Input("additionalProperties")]
        private InputMap<string>? _additionalProperties;

        /// <summary>
        /// A map of additional properties to associate with the Data Factory Blob Event Trigger.
        /// </summary>
        public InputMap<string> AdditionalProperties
        {
            get => _additionalProperties ?? (_additionalProperties = new InputMap<string>());
            set => _additionalProperties = value;
        }

        [Input("annotations")]
        private InputList<string>? _annotations;

        /// <summary>
        /// List of tags that can be used for describing the Data Factory Blob Event Trigger.
        /// </summary>
        public InputList<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputList<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The pattern that blob path starts with for trigger to fire.
        /// </summary>
        [Input("blobPathBeginsWith")]
        public Input<string>? BlobPathBeginsWith { get; set; }

        /// <summary>
        /// The pattern that blob path ends with for trigger to fire.
        /// </summary>
        [Input("blobPathEndsWith")]
        public Input<string>? BlobPathEndsWith { get; set; }

        /// <summary>
        /// The ID of Data Factory in which to associate the Trigger with. Changing this forces a new resource.
        /// </summary>
        [Input("dataFactoryId")]
        public Input<string>? DataFactoryId { get; set; }

        /// <summary>
        /// The description for the Data Factory Blob Event Trigger.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("events")]
        private InputList<string>? _events;

        /// <summary>
        /// List of events that will fire this trigger. Possible values are `Microsoft.Storage.BlobCreated` and `Microsoft.Storage.BlobDeleted`.
        /// </summary>
        public InputList<string> Events
        {
            get => _events ?? (_events = new InputList<string>());
            set => _events = value;
        }

        /// <summary>
        /// are blobs with zero bytes ignored?
        /// </summary>
        [Input("ignoreEmptyBlobs")]
        public Input<bool>? IgnoreEmptyBlobs { get; set; }

        /// <summary>
        /// Specifies the name of the Data Factory Blob Event Trigger. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pipelines")]
        private InputList<Inputs.TriggerBlobEventPipelineGetArgs>? _pipelines;

        /// <summary>
        /// One or more `pipeline` blocks as defined below.
        /// </summary>
        public InputList<Inputs.TriggerBlobEventPipelineGetArgs> Pipelines
        {
            get => _pipelines ?? (_pipelines = new InputList<Inputs.TriggerBlobEventPipelineGetArgs>());
            set => _pipelines = value;
        }

        /// <summary>
        /// The ID of Storage Account in which blob event will be listened. Changing this forces a new resource.
        /// </summary>
        [Input("storageAccountId")]
        public Input<string>? StorageAccountId { get; set; }

        public TriggerBlobEventState()
        {
        }
    }
}
