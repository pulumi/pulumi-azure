// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DataFactory
{
    public static class GetTriggerSchedule
    {
        /// <summary>
        /// Use this data source to access information about a trigger schedule in Azure Data Factory.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.DataFactory.GetTriggerSchedule.Invoke(new()
        ///     {
        ///         Name = "example_trigger",
        ///         DataFactoryId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DataFactory/factories/datafactory1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getTriggerScheduleResult =&gt; getTriggerScheduleResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTriggerScheduleResult> InvokeAsync(GetTriggerScheduleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTriggerScheduleResult>("azure:datafactory/getTriggerSchedule:getTriggerSchedule", args ?? new GetTriggerScheduleArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about a trigger schedule in Azure Data Factory.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.DataFactory.GetTriggerSchedule.Invoke(new()
        ///     {
        ///         Name = "example_trigger",
        ///         DataFactoryId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DataFactory/factories/datafactory1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getTriggerScheduleResult =&gt; getTriggerScheduleResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTriggerScheduleResult> Invoke(GetTriggerScheduleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTriggerScheduleResult>("azure:datafactory/getTriggerSchedule:getTriggerSchedule", args ?? new GetTriggerScheduleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTriggerScheduleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Azure Data Factory to fetch trigger schedule from.
        /// </summary>
        [Input("dataFactoryId", required: true)]
        public string DataFactoryId { get; set; } = null!;

        /// <summary>
        /// The name of the trigger schedule.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetTriggerScheduleArgs()
        {
        }
        public static new GetTriggerScheduleArgs Empty => new GetTriggerScheduleArgs();
    }

    public sealed class GetTriggerScheduleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Azure Data Factory to fetch trigger schedule from.
        /// </summary>
        [Input("dataFactoryId", required: true)]
        public Input<string> DataFactoryId { get; set; } = null!;

        /// <summary>
        /// The name of the trigger schedule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetTriggerScheduleInvokeArgs()
        {
        }
        public static new GetTriggerScheduleInvokeArgs Empty => new GetTriggerScheduleInvokeArgs();
    }


    [OutputType]
    public sealed class GetTriggerScheduleResult
    {
        /// <summary>
        /// Specifies if the Data Factory Schedule Trigger is activated.
        /// </summary>
        public readonly bool Activated;
        /// <summary>
        /// List of tags that can be used for describing the Data Factory Schedule Trigger.
        /// </summary>
        public readonly ImmutableArray<string> Annotations;
        public readonly string DataFactoryId;
        /// <summary>
        /// The Schedule Trigger's description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The time the Schedule Trigger should end. The time will be represented in UTC.
        /// </summary>
        public readonly string EndTime;
        /// <summary>
        /// The trigger frequency.
        /// </summary>
        public readonly string Frequency;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The interval for how often the trigger occurs.
        /// </summary>
        public readonly int Interval;
        public readonly string Name;
        /// <summary>
        /// The Data Factory Pipeline name that the trigger will act on.
        /// </summary>
        public readonly string PipelineName;
        /// <summary>
        /// A `schedule` block as described below, which further specifies the recurrence schedule for the trigger.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTriggerScheduleScheduleResult> Schedules;
        /// <summary>
        /// The time the Schedule Trigger will start. The time will be represented in UTC.
        /// </summary>
        public readonly string StartTime;
        /// <summary>
        /// The timezone of the start/end time.
        /// </summary>
        public readonly string TimeZone;

        [OutputConstructor]
        private GetTriggerScheduleResult(
            bool activated,

            ImmutableArray<string> annotations,

            string dataFactoryId,

            string description,

            string endTime,

            string frequency,

            string id,

            int interval,

            string name,

            string pipelineName,

            ImmutableArray<Outputs.GetTriggerScheduleScheduleResult> schedules,

            string startTime,

            string timeZone)
        {
            Activated = activated;
            Annotations = annotations;
            DataFactoryId = dataFactoryId;
            Description = description;
            EndTime = endTime;
            Frequency = frequency;
            Id = id;
            Interval = interval;
            Name = name;
            PipelineName = pipelineName;
            Schedules = schedules;
            StartTime = startTime;
            TimeZone = timeZone;
        }
    }
}
