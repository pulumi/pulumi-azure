// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DataFactory
{
    /// <summary>
    /// Manages a Linked Service (connection) between Azure Databricks and Azure Data Factory.
    /// 
    /// ## Example Usage
    /// ### With Managed Identity &amp; New Cluster
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "East US",
    ///     });
    /// 
    ///     //Create a Linked Service using managed identity and new cluster config
    ///     var exampleFactory = new Azure.DataFactory.Factory("exampleFactory", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Identity = new Azure.DataFactory.Inputs.FactoryIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     //Create a databricks instance
    ///     var exampleWorkspace = new Azure.DataBricks.Workspace("exampleWorkspace", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Sku = "standard",
    ///     });
    /// 
    ///     var msiLinked = new Azure.DataFactory.LinkedServiceAzureDatabricks("msiLinked", new()
    ///     {
    ///         DataFactoryId = exampleFactory.Id,
    ///         Description = "ADB Linked Service via MSI",
    ///         AdbDomain = exampleWorkspace.WorkspaceUrl.Apply(workspaceUrl =&gt; $"https://{workspaceUrl}"),
    ///         MsiWorkSpaceResourceId = exampleWorkspace.Id,
    ///         NewClusterConfig = new Azure.DataFactory.Inputs.LinkedServiceAzureDatabricksNewClusterConfigArgs
    ///         {
    ///             NodeType = "Standard_NC12",
    ///             ClusterVersion = "5.5.x-gpu-scala2.11",
    ///             MinNumberOfWorkers = 1,
    ///             MaxNumberOfWorkers = 5,
    ///             DriverNodeType = "Standard_NC12",
    ///             LogDestination = "dbfs:/logs",
    ///             CustomTags = 
    ///             {
    ///                 { "custom_tag1", "sct_value_1" },
    ///                 { "custom_tag2", "sct_value_2" },
    ///             },
    ///             SparkConfig = 
    ///             {
    ///                 { "config1", "value1" },
    ///                 { "config2", "value2" },
    ///             },
    ///             SparkEnvironmentVariables = 
    ///             {
    ///                 { "envVar1", "value1" },
    ///                 { "envVar2", "value2" },
    ///             },
    ///             InitScripts = new[]
    ///             {
    ///                 "init.sh",
    ///                 "init2.sh",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With Access Token &amp; Existing Cluster
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "East US",
    ///     });
    /// 
    ///     //Link to an existing cluster via access token
    ///     var exampleFactory = new Azure.DataFactory.Factory("exampleFactory", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     //Create a databricks instance
    ///     var exampleWorkspace = new Azure.DataBricks.Workspace("exampleWorkspace", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Sku = "standard",
    ///     });
    /// 
    ///     var atLinked = new Azure.DataFactory.LinkedServiceAzureDatabricks("atLinked", new()
    ///     {
    ///         DataFactoryId = exampleFactory.Id,
    ///         Description = "ADB Linked Service via Access Token",
    ///         ExistingClusterId = "0308-201146-sly615",
    ///         AccessToken = "SomeDatabricksAccessToken",
    ///         AdbDomain = exampleWorkspace.WorkspaceUrl.Apply(workspaceUrl =&gt; $"https://{workspaceUrl}"),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Data Factory Linked Services can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:datafactory/linkedServiceAzureDatabricks:LinkedServiceAzureDatabricks example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
    /// ```
    /// </summary>
    [AzureResourceType("azure:datafactory/linkedServiceAzureDatabricks:LinkedServiceAzureDatabricks")]
    public partial class LinkedServiceAzureDatabricks : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Authenticate to ADB via an access token.
        /// </summary>
        [Output("accessToken")]
        public Output<string?> AccessToken { get; private set; } = null!;

        /// <summary>
        /// The domain URL of the databricks instance.
        /// </summary>
        [Output("adbDomain")]
        public Output<string> AdbDomain { get; private set; } = null!;

        /// <summary>
        /// A map of additional properties to associate with the Data Factory Linked Service.
        /// </summary>
        [Output("additionalProperties")]
        public Output<ImmutableDictionary<string, string>?> AdditionalProperties { get; private set; } = null!;

        /// <summary>
        /// List of tags that can be used for describing the Data Factory Linked Service.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableArray<string>> Annotations { get; private set; } = null!;

        /// <summary>
        /// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
        /// </summary>
        [Output("dataFactoryId")]
        public Output<string> DataFactoryId { get; private set; } = null!;

        /// <summary>
        /// The description for the Data Factory Linked Service.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The cluster_id of an existing cluster within the linked ADB instance.
        /// </summary>
        [Output("existingClusterId")]
        public Output<string?> ExistingClusterId { get; private set; } = null!;

        /// <summary>
        /// Leverages an instance pool within the linked ADB instance as one `instance_pool` block defined below.
        /// </summary>
        [Output("instancePool")]
        public Output<Outputs.LinkedServiceAzureDatabricksInstancePool?> InstancePool { get; private set; } = null!;

        /// <summary>
        /// The integration runtime reference to associate with the Data Factory Linked Service.
        /// </summary>
        [Output("integrationRuntimeName")]
        public Output<string?> IntegrationRuntimeName { get; private set; } = null!;

        /// <summary>
        /// Authenticate to ADB via Azure Key Vault Linked Service as defined in the `key_vault_password` block below.
        /// </summary>
        [Output("keyVaultPassword")]
        public Output<Outputs.LinkedServiceAzureDatabricksKeyVaultPassword?> KeyVaultPassword { get; private set; } = null!;

        /// <summary>
        /// Authenticate to ADB via managed service identity.
        /// </summary>
        [Output("msiWorkSpaceResourceId")]
        public Output<string?> MsiWorkSpaceResourceId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Creates new clusters within the linked ADB instance as defined in the `new_cluster_config` block below.
        /// </summary>
        [Output("newClusterConfig")]
        public Output<Outputs.LinkedServiceAzureDatabricksNewClusterConfig?> NewClusterConfig { get; private set; } = null!;

        /// <summary>
        /// A map of parameters to associate with the Data Factory Linked Service.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, string>?> Parameters { get; private set; } = null!;


        /// <summary>
        /// Create a LinkedServiceAzureDatabricks resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LinkedServiceAzureDatabricks(string name, LinkedServiceAzureDatabricksArgs args, CustomResourceOptions? options = null)
            : base("azure:datafactory/linkedServiceAzureDatabricks:LinkedServiceAzureDatabricks", name, args ?? new LinkedServiceAzureDatabricksArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LinkedServiceAzureDatabricks(string name, Input<string> id, LinkedServiceAzureDatabricksState? state = null, CustomResourceOptions? options = null)
            : base("azure:datafactory/linkedServiceAzureDatabricks:LinkedServiceAzureDatabricks", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "accessToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LinkedServiceAzureDatabricks resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LinkedServiceAzureDatabricks Get(string name, Input<string> id, LinkedServiceAzureDatabricksState? state = null, CustomResourceOptions? options = null)
        {
            return new LinkedServiceAzureDatabricks(name, id, state, options);
        }
    }

    public sealed class LinkedServiceAzureDatabricksArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessToken")]
        private Input<string>? _accessToken;

        /// <summary>
        /// Authenticate to ADB via an access token.
        /// </summary>
        public Input<string>? AccessToken
        {
            get => _accessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The domain URL of the databricks instance.
        /// </summary>
        [Input("adbDomain", required: true)]
        public Input<string> AdbDomain { get; set; } = null!;

        [Input("additionalProperties")]
        private InputMap<string>? _additionalProperties;

        /// <summary>
        /// A map of additional properties to associate with the Data Factory Linked Service.
        /// </summary>
        public InputMap<string> AdditionalProperties
        {
            get => _additionalProperties ?? (_additionalProperties = new InputMap<string>());
            set => _additionalProperties = value;
        }

        [Input("annotations")]
        private InputList<string>? _annotations;

        /// <summary>
        /// List of tags that can be used for describing the Data Factory Linked Service.
        /// </summary>
        public InputList<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputList<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
        /// </summary>
        [Input("dataFactoryId", required: true)]
        public Input<string> DataFactoryId { get; set; } = null!;

        /// <summary>
        /// The description for the Data Factory Linked Service.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The cluster_id of an existing cluster within the linked ADB instance.
        /// </summary>
        [Input("existingClusterId")]
        public Input<string>? ExistingClusterId { get; set; }

        /// <summary>
        /// Leverages an instance pool within the linked ADB instance as one `instance_pool` block defined below.
        /// </summary>
        [Input("instancePool")]
        public Input<Inputs.LinkedServiceAzureDatabricksInstancePoolArgs>? InstancePool { get; set; }

        /// <summary>
        /// The integration runtime reference to associate with the Data Factory Linked Service.
        /// </summary>
        [Input("integrationRuntimeName")]
        public Input<string>? IntegrationRuntimeName { get; set; }

        /// <summary>
        /// Authenticate to ADB via Azure Key Vault Linked Service as defined in the `key_vault_password` block below.
        /// </summary>
        [Input("keyVaultPassword")]
        public Input<Inputs.LinkedServiceAzureDatabricksKeyVaultPasswordArgs>? KeyVaultPassword { get; set; }

        /// <summary>
        /// Authenticate to ADB via managed service identity.
        /// </summary>
        [Input("msiWorkSpaceResourceId")]
        public Input<string>? MsiWorkSpaceResourceId { get; set; }

        /// <summary>
        /// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Creates new clusters within the linked ADB instance as defined in the `new_cluster_config` block below.
        /// </summary>
        [Input("newClusterConfig")]
        public Input<Inputs.LinkedServiceAzureDatabricksNewClusterConfigArgs>? NewClusterConfig { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// A map of parameters to associate with the Data Factory Linked Service.
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        public LinkedServiceAzureDatabricksArgs()
        {
        }
        public static new LinkedServiceAzureDatabricksArgs Empty => new LinkedServiceAzureDatabricksArgs();
    }

    public sealed class LinkedServiceAzureDatabricksState : global::Pulumi.ResourceArgs
    {
        [Input("accessToken")]
        private Input<string>? _accessToken;

        /// <summary>
        /// Authenticate to ADB via an access token.
        /// </summary>
        public Input<string>? AccessToken
        {
            get => _accessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The domain URL of the databricks instance.
        /// </summary>
        [Input("adbDomain")]
        public Input<string>? AdbDomain { get; set; }

        [Input("additionalProperties")]
        private InputMap<string>? _additionalProperties;

        /// <summary>
        /// A map of additional properties to associate with the Data Factory Linked Service.
        /// </summary>
        public InputMap<string> AdditionalProperties
        {
            get => _additionalProperties ?? (_additionalProperties = new InputMap<string>());
            set => _additionalProperties = value;
        }

        [Input("annotations")]
        private InputList<string>? _annotations;

        /// <summary>
        /// List of tags that can be used for describing the Data Factory Linked Service.
        /// </summary>
        public InputList<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputList<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
        /// </summary>
        [Input("dataFactoryId")]
        public Input<string>? DataFactoryId { get; set; }

        /// <summary>
        /// The description for the Data Factory Linked Service.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The cluster_id of an existing cluster within the linked ADB instance.
        /// </summary>
        [Input("existingClusterId")]
        public Input<string>? ExistingClusterId { get; set; }

        /// <summary>
        /// Leverages an instance pool within the linked ADB instance as one `instance_pool` block defined below.
        /// </summary>
        [Input("instancePool")]
        public Input<Inputs.LinkedServiceAzureDatabricksInstancePoolGetArgs>? InstancePool { get; set; }

        /// <summary>
        /// The integration runtime reference to associate with the Data Factory Linked Service.
        /// </summary>
        [Input("integrationRuntimeName")]
        public Input<string>? IntegrationRuntimeName { get; set; }

        /// <summary>
        /// Authenticate to ADB via Azure Key Vault Linked Service as defined in the `key_vault_password` block below.
        /// </summary>
        [Input("keyVaultPassword")]
        public Input<Inputs.LinkedServiceAzureDatabricksKeyVaultPasswordGetArgs>? KeyVaultPassword { get; set; }

        /// <summary>
        /// Authenticate to ADB via managed service identity.
        /// </summary>
        [Input("msiWorkSpaceResourceId")]
        public Input<string>? MsiWorkSpaceResourceId { get; set; }

        /// <summary>
        /// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Creates new clusters within the linked ADB instance as defined in the `new_cluster_config` block below.
        /// </summary>
        [Input("newClusterConfig")]
        public Input<Inputs.LinkedServiceAzureDatabricksNewClusterConfigGetArgs>? NewClusterConfig { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// A map of parameters to associate with the Data Factory Linked Service.
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        public LinkedServiceAzureDatabricksState()
        {
        }
        public static new LinkedServiceAzureDatabricksState Empty => new LinkedServiceAzureDatabricksState();
    }
}
