// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DataFactory
{
    /// <summary>
    /// Manages a Customer Managed Key for a Data Factory.
    /// 
    /// &gt; **Note:** The Customer Managed Key cannot be removed from the Data Factory once added. To remove the Customer Managed Key delete and recreate the parent Data Factory.
    /// 
    /// ## Example Usage
    /// 
    /// ### With System Assigned Identity
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    ///     {
    ///         Name = "example-key-vault",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SkuName = "standard",
    ///         PurgeProtectionEnabled = true,
    ///     });
    /// 
    ///     var exampleKey = new Azure.KeyVault.Key("example", new()
    ///     {
    ///         Name = "examplekey",
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         KeyType = "RSA",
    ///         KeySize = 2048,
    ///         KeyOpts = new[]
    ///         {
    ///             "unwrapKey",
    ///             "wrapKey",
    ///         },
    ///     });
    /// 
    ///     var currentClientPolicy = new Azure.KeyVault.AccessPolicy("current_client_policy", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///         KeyPermissions = new[]
    ///         {
    ///             "Create",
    ///             "Delete",
    ///             "Get",
    ///             "Purge",
    ///             "Recover",
    ///             "Update",
    ///             "GetRotationPolicy",
    ///         },
    ///         SecretPermissions = new[]
    ///         {
    ///             "Delete",
    ///             "Get",
    ///             "Set",
    ///         },
    ///     });
    /// 
    ///     var exampleFactory = new Azure.DataFactory.Factory("example", new()
    ///     {
    ///         Name = "example_data_factory",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         Identity = new Azure.DataFactory.Inputs.FactoryIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///             IdentityIds = new[]
    ///             {
    ///                 exampleAzurermUserAssignedIdentity.Id,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var datafactory = new Azure.KeyVault.AccessPolicy("datafactory", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         TenantId = exampleFactory.Identity.Apply(identity =&gt; identity?.TenantId),
    ///         ObjectId = exampleFactory.Identity.Apply(identity =&gt; identity?.PrincipalId),
    ///         KeyPermissions = new[]
    ///         {
    ///             "Create",
    ///             "Delete",
    ///             "Get",
    ///             "Purge",
    ///             "Recover",
    ///             "Update",
    ///             "GetRotationPolicy",
    ///             "WrapKey",
    ///             "UnwrapKey",
    ///         },
    ///         SecretPermissions = new[]
    ///         {
    ///             "Delete",
    ///             "Get",
    ///             "Set",
    ///         },
    ///     });
    /// 
    ///     var exampleCustomerManagedKey = new Azure.DataFactory.CustomerManagedKey("example", new()
    ///     {
    ///         DataFactoryId = exampleFactory.Id,
    ///         CustomerManagedKeyId = exampleKey.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.DataFactory` - 2018-06-01
    /// 
    /// ## Import
    /// 
    /// Data Factory Customer Managed Keys can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:datafactory/customerManagedKey:CustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example
    /// ```
    /// </summary>
    [AzureResourceType("azure:datafactory/customerManagedKey:CustomerManagedKey")]
    public partial class CustomerManagedKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID the of the Customer Managed Key to associate with the Data Factory.
        /// </summary>
        [Output("customerManagedKeyId")]
        public Output<string> CustomerManagedKeyId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Data Factory Resource the Customer Managed Key will be associated with. Changing this forces a new resource to be created.
        /// </summary>
        [Output("dataFactoryId")]
        public Output<string> DataFactoryId { get; private set; } = null!;

        /// <summary>
        /// The User Assigned Identity ID that will be used to access Key Vaults that contain the encryption keys.
        /// </summary>
        [Output("userAssignedIdentityId")]
        public Output<string?> UserAssignedIdentityId { get; private set; } = null!;


        /// <summary>
        /// Create a CustomerManagedKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomerManagedKey(string name, CustomerManagedKeyArgs args, CustomResourceOptions? options = null)
            : base("azure:datafactory/customerManagedKey:CustomerManagedKey", name, args ?? new CustomerManagedKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomerManagedKey(string name, Input<string> id, CustomerManagedKeyState? state = null, CustomResourceOptions? options = null)
            : base("azure:datafactory/customerManagedKey:CustomerManagedKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomerManagedKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomerManagedKey Get(string name, Input<string> id, CustomerManagedKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomerManagedKey(name, id, state, options);
        }
    }

    public sealed class CustomerManagedKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID the of the Customer Managed Key to associate with the Data Factory.
        /// </summary>
        [Input("customerManagedKeyId", required: true)]
        public Input<string> CustomerManagedKeyId { get; set; } = null!;

        /// <summary>
        /// The ID of the Data Factory Resource the Customer Managed Key will be associated with. Changing this forces a new resource to be created.
        /// </summary>
        [Input("dataFactoryId", required: true)]
        public Input<string> DataFactoryId { get; set; } = null!;

        /// <summary>
        /// The User Assigned Identity ID that will be used to access Key Vaults that contain the encryption keys.
        /// </summary>
        [Input("userAssignedIdentityId")]
        public Input<string>? UserAssignedIdentityId { get; set; }

        public CustomerManagedKeyArgs()
        {
        }
        public static new CustomerManagedKeyArgs Empty => new CustomerManagedKeyArgs();
    }

    public sealed class CustomerManagedKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID the of the Customer Managed Key to associate with the Data Factory.
        /// </summary>
        [Input("customerManagedKeyId")]
        public Input<string>? CustomerManagedKeyId { get; set; }

        /// <summary>
        /// The ID of the Data Factory Resource the Customer Managed Key will be associated with. Changing this forces a new resource to be created.
        /// </summary>
        [Input("dataFactoryId")]
        public Input<string>? DataFactoryId { get; set; }

        /// <summary>
        /// The User Assigned Identity ID that will be used to access Key Vaults that contain the encryption keys.
        /// </summary>
        [Input("userAssignedIdentityId")]
        public Input<string>? UserAssignedIdentityId { get; set; }

        public CustomerManagedKeyState()
        {
        }
        public static new CustomerManagedKeyState Empty => new CustomerManagedKeyState();
    }
}
