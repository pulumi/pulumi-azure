// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to access information about an App Service Certificate.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/app_service_certificate.html.markdown.
        /// </summary>
        public static Task<GetCertificateResult> GetCertificate(GetCertificateArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCertificateResult>("azure:appservice/getCertificate:getCertificate", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetCertificateArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the certificate.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the certificate.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetCertificateArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetCertificateResult
    {
        /// <summary>
        /// The expiration date for the certificate.
        /// </summary>
        public readonly string ExpirationDate;
        /// <summary>
        /// The friendly name of the certificate.
        /// </summary>
        public readonly string FriendlyName;
        /// <summary>
        /// List of host names the certificate applies to.
        /// </summary>
        public readonly ImmutableArray<string> HostNames;
        /// <summary>
        /// The issue date for the certificate.
        /// </summary>
        public readonly string IssueDate;
        /// <summary>
        /// The name of the certificate issuer.
        /// </summary>
        public readonly string Issuer;
        public readonly string Location;
        public readonly string Name;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The subject name of the certificate.
        /// </summary>
        public readonly string SubjectName;
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The thumbprint for the certificate.
        /// </summary>
        public readonly string Thumbprint;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetCertificateResult(
            string expirationDate,
            string friendlyName,
            ImmutableArray<string> hostNames,
            string issueDate,
            string issuer,
            string location,
            string name,
            string resourceGroupName,
            string subjectName,
            ImmutableDictionary<string, string>? tags,
            string thumbprint,
            string id)
        {
            ExpirationDate = expirationDate;
            FriendlyName = friendlyName;
            HostNames = hostNames;
            IssueDate = issueDate;
            Issuer = issuer;
            Location = location;
            Name = name;
            ResourceGroupName = resourceGroupName;
            SubjectName = subjectName;
            Tags = tags;
            Thumbprint = thumbprint;
            Id = id;
        }
    }
}
