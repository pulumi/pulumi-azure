// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to access information about an existing App Service Plan (formerly known as a `Server Farm`).
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/app_service_plan.html.markdown.
        /// </summary>
        public static Task<GetAppServicePlanResult> GetAppServicePlan(GetAppServicePlanArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAppServicePlanResult>("azure:appservice/getAppServicePlan:getAppServicePlan", args, options.WithVersion());
    }

    public sealed class GetAppServicePlanArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the App Service Plan.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the App Service Plan exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetAppServicePlanArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetAppServicePlanResult
    {
        /// <summary>
        /// A flag that indicates if it's a xenon plan (support for Windows Container)
        /// </summary>
        public readonly bool IsXenon;
        /// <summary>
        /// The Operating System type of the App Service Plan
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The Azure location where the App Service Plan exists
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan.
        /// </summary>
        public readonly int MaximumElasticWorkerCount;
        /// <summary>
        /// Maximum number of instances that can be assigned to this App Service plan.
        /// </summary>
        public readonly int MaximumNumberOfWorkers;
        public readonly string Name;
        /// <summary>
        /// A `properties` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAppServicePlanPropertiesResult> Properties;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A `sku` block as documented below.
        /// </summary>
        public readonly Outputs.GetAppServicePlanSkuResult Sku;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetAppServicePlanResult(
            bool isXenon,
            string kind,
            string location,
            int maximumElasticWorkerCount,
            int maximumNumberOfWorkers,
            string name,
            ImmutableArray<Outputs.GetAppServicePlanPropertiesResult> properties,
            string resourceGroupName,
            Outputs.GetAppServicePlanSkuResult sku,
            ImmutableDictionary<string, string> tags,
            string id)
        {
            IsXenon = isXenon;
            Kind = kind;
            Location = location;
            MaximumElasticWorkerCount = maximumElasticWorkerCount;
            MaximumNumberOfWorkers = maximumNumberOfWorkers;
            Name = name;
            Properties = properties;
            ResourceGroupName = resourceGroupName;
            Sku = sku;
            Tags = tags;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetAppServicePlanPropertiesResult
    {
        /// <summary>
        /// The ID of the App Service Environment where the App Service Plan is located.
        /// </summary>
        public readonly string AppServiceEnvironmentId;
        /// <summary>
        /// Can Apps assigned to this App Service Plan be scaled independently?
        /// </summary>
        public readonly bool PerSiteScaling;
        /// <summary>
        /// Is this App Service Plan `Reserved`?
        /// </summary>
        public readonly bool Reserved;

        [OutputConstructor]
        private GetAppServicePlanPropertiesResult(
            string appServiceEnvironmentId,
            bool perSiteScaling,
            bool reserved)
        {
            AppServiceEnvironmentId = appServiceEnvironmentId;
            PerSiteScaling = perSiteScaling;
            Reserved = reserved;
        }
    }

    [OutputType]
    public sealed class GetAppServicePlanSkuResult
    {
        /// <summary>
        /// Specifies the number of workers associated with this App Service Plan.
        /// </summary>
        public readonly int Capacity;
        /// <summary>
        /// Specifies the plan's instance size.
        /// </summary>
        public readonly string Size;
        /// <summary>
        /// Specifies the plan's pricing tier.
        /// </summary>
        public readonly string Tier;

        [OutputConstructor]
        private GetAppServicePlanSkuResult(
            int capacity,
            string size,
            string tier)
        {
            Capacity = capacity;
            Size = size;
            Tier = tier;
        }
    }
    }
}
