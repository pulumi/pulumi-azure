// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppService.Outputs
{

    [OutputType]
    public sealed class SlotAuthSettings
    {
        /// <summary>
        /// A `active_directory` block as defined below.
        /// </summary>
        public readonly Outputs.SlotAuthSettingsActiveDirectory? ActiveDirectory;
        /// <summary>
        /// Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form "key=value".
        /// </summary>
        public readonly ImmutableDictionary<string, string>? AdditionalLoginParams;
        /// <summary>
        /// External URLs that can be redirected to as part of logging in or logging out of the app.
        /// </summary>
        public readonly ImmutableArray<string> AllowedExternalRedirectUrls;
        /// <summary>
        /// The default provider to use when multiple providers have been set up. Possible values are `AzureActiveDirectory`, `Facebook`, `Google`, `MicrosoftAccount` and `Twitter`.
        /// </summary>
        public readonly string? DefaultProvider;
        /// <summary>
        /// Is Authentication enabled?
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// A `facebook` block as defined below.
        /// </summary>
        public readonly Outputs.SlotAuthSettingsFacebook? Facebook;
        /// <summary>
        /// A `google` block as defined below.
        /// </summary>
        public readonly Outputs.SlotAuthSettingsGoogle? Google;
        /// <summary>
        /// Issuer URI. When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.
        /// </summary>
        public readonly string? Issuer;
        /// <summary>
        /// A `microsoft` block as defined below.
        /// </summary>
        public readonly Outputs.SlotAuthSettingsMicrosoft? Microsoft;
        /// <summary>
        /// The runtime version of the Authentication/Authorization module.
        /// </summary>
        public readonly string? RuntimeVersion;
        /// <summary>
        /// The number of hours after session token expiration that a session token can be used to call the token refresh API. Defaults to 72.
        /// </summary>
        public readonly double? TokenRefreshExtensionHours;
        /// <summary>
        /// If enabled the module will durably store platform-specific security tokens that are obtained during login flows. Defaults to false.
        /// </summary>
        public readonly bool? TokenStoreEnabled;
        /// <summary>
        /// A `twitter` block as defined below.
        /// </summary>
        public readonly Outputs.SlotAuthSettingsTwitter? Twitter;
        /// <summary>
        /// The action to take when an unauthenticated client attempts to access the app. Possible values are `AllowAnonymous` and `RedirectToLoginPage`.
        /// </summary>
        public readonly string? UnauthenticatedClientAction;

        [OutputConstructor]
        private SlotAuthSettings(
            Outputs.SlotAuthSettingsActiveDirectory? activeDirectory,

            ImmutableDictionary<string, string>? additionalLoginParams,

            ImmutableArray<string> allowedExternalRedirectUrls,

            string? defaultProvider,

            bool enabled,

            Outputs.SlotAuthSettingsFacebook? facebook,

            Outputs.SlotAuthSettingsGoogle? google,

            string? issuer,

            Outputs.SlotAuthSettingsMicrosoft? microsoft,

            string? runtimeVersion,

            double? tokenRefreshExtensionHours,

            bool? tokenStoreEnabled,

            Outputs.SlotAuthSettingsTwitter? twitter,

            string? unauthenticatedClientAction)
        {
            ActiveDirectory = activeDirectory;
            AdditionalLoginParams = additionalLoginParams;
            AllowedExternalRedirectUrls = allowedExternalRedirectUrls;
            DefaultProvider = defaultProvider;
            Enabled = enabled;
            Facebook = facebook;
            Google = google;
            Issuer = issuer;
            Microsoft = microsoft;
            RuntimeVersion = runtimeVersion;
            TokenRefreshExtensionHours = tokenRefreshExtensionHours;
            TokenStoreEnabled = tokenStoreEnabled;
            Twitter = twitter;
            UnauthenticatedClientAction = unauthenticatedClientAction;
        }
    }
}
