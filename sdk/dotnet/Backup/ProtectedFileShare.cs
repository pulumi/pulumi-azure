// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Backup
{
    /// <summary>
    /// Manages an Azure Backup Protected File Share to enable backups for file shares within an Azure Storage Account
    /// 
    /// ## Import
    /// 
    /// Azure Backup Protected File Shares can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:backup/protectedFileShare:ProtectedFileShare item1 "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.RecoveryServices/vaults/example-recovery-vault/backupFabrics/Azure/protectionContainers/StorageContainer;storage;group2;example-storage-account/protectedItems/AzureFileShare;3f6e3108a45793581bcbd1c61c87a3b2ceeb4ff4bc02a95ce9d1022b23722935"
    /// ```
    /// 
    ///  -&gt; **NOTE** The ID requires quoting as there are semicolons. This user unfriendly ID can be found in the Deployments of the used resourcegroup, look for an Deployment which starts with `ConfigureAFSProtection-`, click then `Go to resource`.
    /// </summary>
    [AzureResourceType("azure:backup/protectedFileShare:ProtectedFileShare")]
    public partial class ProtectedFileShare : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the ID of the backup policy to use. The policy must be an Azure File Share backup policy. Other types are not supported.
        /// </summary>
        [Output("backupPolicyId")]
        public Output<string> BackupPolicyId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
        /// </summary>
        [Output("recoveryVaultName")]
        public Output<string> RecoveryVaultName { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Azure Backup Protected File Share. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the file share to backup. Changing this forces a new resource to be created.
        /// </summary>
        [Output("sourceFileShareName")]
        public Output<string> SourceFileShareName { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the storage account of the file share to backup. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE** The storage account must already be registered with the recovery vault in order to backup shares within the account. You can use the `azure.backup.ContainerStorageAccount` resource or the [Register-AzRecoveryServicesBackupContainer PowerShell cmdlet](https://docs.microsoft.com/powershell/module/az.recoveryservices/register-azrecoveryservicesbackupcontainer?view=azps-3.2.0) to register a storage account with a vault. When using the `azure.backup.ContainerStorageAccount` resource to register, you can use `depends_on` to explicitly declare the dependency. It will make sure that the registration is completed before creating the `azure.backup.ProtectedFileShare` resource.
        /// </summary>
        [Output("sourceStorageAccountId")]
        public Output<string> SourceStorageAccountId { get; private set; } = null!;


        /// <summary>
        /// Create a ProtectedFileShare resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProtectedFileShare(string name, ProtectedFileShareArgs args, CustomResourceOptions? options = null)
            : base("azure:backup/protectedFileShare:ProtectedFileShare", name, args ?? new ProtectedFileShareArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProtectedFileShare(string name, Input<string> id, ProtectedFileShareState? state = null, CustomResourceOptions? options = null)
            : base("azure:backup/protectedFileShare:ProtectedFileShare", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProtectedFileShare resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProtectedFileShare Get(string name, Input<string> id, ProtectedFileShareState? state = null, CustomResourceOptions? options = null)
        {
            return new ProtectedFileShare(name, id, state, options);
        }
    }

    public sealed class ProtectedFileShareArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the ID of the backup policy to use. The policy must be an Azure File Share backup policy. Other types are not supported.
        /// </summary>
        [Input("backupPolicyId", required: true)]
        public Input<string> BackupPolicyId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
        /// </summary>
        [Input("recoveryVaultName", required: true)]
        public Input<string> RecoveryVaultName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Azure Backup Protected File Share. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the file share to backup. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sourceFileShareName", required: true)]
        public Input<string> SourceFileShareName { get; set; } = null!;

        /// <summary>
        /// Specifies the ID of the storage account of the file share to backup. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE** The storage account must already be registered with the recovery vault in order to backup shares within the account. You can use the `azure.backup.ContainerStorageAccount` resource or the [Register-AzRecoveryServicesBackupContainer PowerShell cmdlet](https://docs.microsoft.com/powershell/module/az.recoveryservices/register-azrecoveryservicesbackupcontainer?view=azps-3.2.0) to register a storage account with a vault. When using the `azure.backup.ContainerStorageAccount` resource to register, you can use `depends_on` to explicitly declare the dependency. It will make sure that the registration is completed before creating the `azure.backup.ProtectedFileShare` resource.
        /// </summary>
        [Input("sourceStorageAccountId", required: true)]
        public Input<string> SourceStorageAccountId { get; set; } = null!;

        public ProtectedFileShareArgs()
        {
        }
        public static new ProtectedFileShareArgs Empty => new ProtectedFileShareArgs();
    }

    public sealed class ProtectedFileShareState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the ID of the backup policy to use. The policy must be an Azure File Share backup policy. Other types are not supported.
        /// </summary>
        [Input("backupPolicyId")]
        public Input<string>? BackupPolicyId { get; set; }

        /// <summary>
        /// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
        /// </summary>
        [Input("recoveryVaultName")]
        public Input<string>? RecoveryVaultName { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Azure Backup Protected File Share. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Specifies the name of the file share to backup. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sourceFileShareName")]
        public Input<string>? SourceFileShareName { get; set; }

        /// <summary>
        /// Specifies the ID of the storage account of the file share to backup. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE** The storage account must already be registered with the recovery vault in order to backup shares within the account. You can use the `azure.backup.ContainerStorageAccount` resource or the [Register-AzRecoveryServicesBackupContainer PowerShell cmdlet](https://docs.microsoft.com/powershell/module/az.recoveryservices/register-azrecoveryservicesbackupcontainer?view=azps-3.2.0) to register a storage account with a vault. When using the `azure.backup.ContainerStorageAccount` resource to register, you can use `depends_on` to explicitly declare the dependency. It will make sure that the registration is completed before creating the `azure.backup.ProtectedFileShare` resource.
        /// </summary>
        [Input("sourceStorageAccountId")]
        public Input<string>? SourceStorageAccountId { get; set; }

        public ProtectedFileShareState()
        {
        }
        public static new ProtectedFileShareState Empty => new ProtectedFileShareState();
    }
}
