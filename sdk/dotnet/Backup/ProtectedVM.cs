// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Backup
{
    /// <summary>
    /// Manages Azure Backup for an Azure VM
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVault = new Azure.RecoveryServices.Vault("exampleVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "Standard",
    ///     });
    /// 
    ///     var examplePolicyVM = new Azure.Backup.PolicyVM("examplePolicyVM", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         RecoveryVaultName = exampleVault.Name,
    ///         Backup = new Azure.Backup.Inputs.PolicyVMBackupArgs
    ///         {
    ///             Frequency = "Daily",
    ///             Time = "23:00",
    ///         },
    ///         RetentionDaily = new Azure.Backup.Inputs.PolicyVMRetentionDailyArgs
    ///         {
    ///             Count = 10,
    ///         },
    ///     });
    /// 
    ///     var exampleVirtualMachine = Azure.Compute.GetVirtualMachine.Invoke(new()
    ///     {
    ///         Name = "example-vm",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var vm1 = new Azure.Backup.ProtectedVM("vm1", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         RecoveryVaultName = exampleVault.Name,
    ///         SourceVmId = exampleVirtualMachine.Apply(getVirtualMachineResult =&gt; getVirtualMachineResult.Id),
    ///         BackupPolicyId = examplePolicyVM.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Recovery Services Protected VMs can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:backup/protectedVM:ProtectedVM item1 "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.RecoveryServices/vaults/example-recovery-vault/backupFabrics/Azure/protectionContainers/iaasvmcontainer;iaasvmcontainerv2;group1;vm1/protectedItems/vm;iaasvmcontainerv2;group1;vm1"
    /// ```
    /// 
    ///  Note the ID requires quoting as there are semicolons
    /// </summary>
    [AzureResourceType("azure:backup/protectedVM:ProtectedVM")]
    public partial class ProtectedVM : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the id of the backup policy to use. Required in creation or when `protection_stopped` is not specified.
        /// </summary>
        [Output("backupPolicyId")]
        public Output<string?> BackupPolicyId { get; private set; } = null!;

        /// <summary>
        /// A list of Disks' Logical Unit Numbers(LUN) to be excluded for VM Protection.
        /// </summary>
        [Output("excludeDiskLuns")]
        public Output<ImmutableArray<int>> ExcludeDiskLuns { get; private set; } = null!;

        /// <summary>
        /// A list of Disks' Logical Unit Numbers(LUN) to be included for VM Protection.
        /// </summary>
        [Output("includeDiskLuns")]
        public Output<ImmutableArray<int>> IncludeDiskLuns { get; private set; } = null!;

        /// <summary>
        /// Specifies Protection state of the backup. Possible values are `Invalid`, `IRPending`, `Protected`, `ProtectionStopped`, `ProtectionError` and `ProtectionPaused`.
        /// </summary>
        [Output("protectionState")]
        public Output<string> ProtectionState { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
        /// </summary>
        [Output("recoveryVaultName")]
        public Output<string> RecoveryVaultName { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the VM to backup. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** After creation, the `source_vm_id` property can be removed without forcing a new resource to be created; however, setting it to a different ID will create a new resource.
        /// This allows the source vm to be deleted without having to remove the backup.
        /// </summary>
        [Output("sourceVmId")]
        public Output<string> SourceVmId { get; private set; } = null!;


        /// <summary>
        /// Create a ProtectedVM resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProtectedVM(string name, ProtectedVMArgs args, CustomResourceOptions? options = null)
            : base("azure:backup/protectedVM:ProtectedVM", name, args ?? new ProtectedVMArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProtectedVM(string name, Input<string> id, ProtectedVMState? state = null, CustomResourceOptions? options = null)
            : base("azure:backup/protectedVM:ProtectedVM", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProtectedVM resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProtectedVM Get(string name, Input<string> id, ProtectedVMState? state = null, CustomResourceOptions? options = null)
        {
            return new ProtectedVM(name, id, state, options);
        }
    }

    public sealed class ProtectedVMArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the id of the backup policy to use. Required in creation or when `protection_stopped` is not specified.
        /// </summary>
        [Input("backupPolicyId")]
        public Input<string>? BackupPolicyId { get; set; }

        [Input("excludeDiskLuns")]
        private InputList<int>? _excludeDiskLuns;

        /// <summary>
        /// A list of Disks' Logical Unit Numbers(LUN) to be excluded for VM Protection.
        /// </summary>
        public InputList<int> ExcludeDiskLuns
        {
            get => _excludeDiskLuns ?? (_excludeDiskLuns = new InputList<int>());
            set => _excludeDiskLuns = value;
        }

        [Input("includeDiskLuns")]
        private InputList<int>? _includeDiskLuns;

        /// <summary>
        /// A list of Disks' Logical Unit Numbers(LUN) to be included for VM Protection.
        /// </summary>
        public InputList<int> IncludeDiskLuns
        {
            get => _includeDiskLuns ?? (_includeDiskLuns = new InputList<int>());
            set => _includeDiskLuns = value;
        }

        /// <summary>
        /// Specifies Protection state of the backup. Possible values are `Invalid`, `IRPending`, `Protected`, `ProtectionStopped`, `ProtectionError` and `ProtectionPaused`.
        /// </summary>
        [Input("protectionState")]
        public Input<string>? ProtectionState { get; set; }

        /// <summary>
        /// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
        /// </summary>
        [Input("recoveryVaultName", required: true)]
        public Input<string> RecoveryVaultName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the ID of the VM to backup. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** After creation, the `source_vm_id` property can be removed without forcing a new resource to be created; however, setting it to a different ID will create a new resource.
        /// This allows the source vm to be deleted without having to remove the backup.
        /// </summary>
        [Input("sourceVmId")]
        public Input<string>? SourceVmId { get; set; }

        public ProtectedVMArgs()
        {
        }
        public static new ProtectedVMArgs Empty => new ProtectedVMArgs();
    }

    public sealed class ProtectedVMState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the id of the backup policy to use. Required in creation or when `protection_stopped` is not specified.
        /// </summary>
        [Input("backupPolicyId")]
        public Input<string>? BackupPolicyId { get; set; }

        [Input("excludeDiskLuns")]
        private InputList<int>? _excludeDiskLuns;

        /// <summary>
        /// A list of Disks' Logical Unit Numbers(LUN) to be excluded for VM Protection.
        /// </summary>
        public InputList<int> ExcludeDiskLuns
        {
            get => _excludeDiskLuns ?? (_excludeDiskLuns = new InputList<int>());
            set => _excludeDiskLuns = value;
        }

        [Input("includeDiskLuns")]
        private InputList<int>? _includeDiskLuns;

        /// <summary>
        /// A list of Disks' Logical Unit Numbers(LUN) to be included for VM Protection.
        /// </summary>
        public InputList<int> IncludeDiskLuns
        {
            get => _includeDiskLuns ?? (_includeDiskLuns = new InputList<int>());
            set => _includeDiskLuns = value;
        }

        /// <summary>
        /// Specifies Protection state of the backup. Possible values are `Invalid`, `IRPending`, `Protected`, `ProtectionStopped`, `ProtectionError` and `ProtectionPaused`.
        /// </summary>
        [Input("protectionState")]
        public Input<string>? ProtectionState { get; set; }

        /// <summary>
        /// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
        /// </summary>
        [Input("recoveryVaultName")]
        public Input<string>? RecoveryVaultName { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Specifies the ID of the VM to backup. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** After creation, the `source_vm_id` property can be removed without forcing a new resource to be created; however, setting it to a different ID will create a new resource.
        /// This allows the source vm to be deleted without having to remove the backup.
        /// </summary>
        [Input("sourceVmId")]
        public Input<string>? SourceVmId { get; set; }

        public ProtectedVMState()
        {
        }
        public static new ProtectedVMState Empty => new ProtectedVMState();
    }
}
