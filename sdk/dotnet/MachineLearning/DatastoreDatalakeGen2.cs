// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MachineLearning
{
    /// <summary>
    /// Manages a Machine Learning Data Lake Gen2 DataStore.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleInsights = new Azure.AppInsights.Insights("exampleInsights", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ApplicationType = "web",
    ///     });
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("exampleKeyVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SkuName = "premium",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "GRS",
    ///     });
    /// 
    ///     var exampleWorkspace = new Azure.MachineLearning.Workspace("exampleWorkspace", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ApplicationInsightsId = exampleInsights.Id,
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         StorageAccountId = exampleAccount.Id,
    ///         Identity = new Azure.MachineLearning.Inputs.WorkspaceIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleContainer = new Azure.Storage.Container("exampleContainer", new()
    ///     {
    ///         StorageAccountName = exampleAccount.Name,
    ///         ContainerAccessType = "private",
    ///     });
    /// 
    ///     var exampleDatastoreDatalakeGen2 = new Azure.MachineLearning.DatastoreDatalakeGen2("exampleDatastoreDatalakeGen2", new()
    ///     {
    ///         WorkspaceId = exampleWorkspace.Id,
    ///         StorageContainerId = exampleContainer.ResourceManagerId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Machine Learning DataStores can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:machinelearning/datastoreDatalakeGen2:DatastoreDatalakeGen2 example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.MachineLearningServices/workspaces/mlw1/datastores/datastore1
    /// ```
    /// </summary>
    [AzureResourceType("azure:machinelearning/datastoreDatalakeGen2:DatastoreDatalakeGen2")]
    public partial class DatastoreDatalakeGen2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An URL used for authentication.
        /// </summary>
        [Output("authorityUrl")]
        public Output<string> AuthorityUrl { get; private set; } = null!;

        /// <summary>
        /// The object ID of the Service Principal.
        /// </summary>
        [Output("clientId")]
        public Output<string?> ClientId { get; private set; } = null!;

        /// <summary>
        /// The secret of the Service Principal.
        /// </summary>
        [Output("clientSecret")]
        public Output<string?> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// Text used to describe the asset. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Indicates whether this Machines Learning DataStore is the default for the Workspace.
        /// </summary>
        [Output("isDefault")]
        public Output<bool> IsDefault { get; private set; } = null!;

        /// <summary>
        /// The name of the Machine Learning DataStore. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies which identity to use when retrieving data from the specified source. Defaults to `None`. Possible values are `None`, `WorkspaceSystemAssignedIdentity` and `WorkspaceUserAssignedIdentity`.
        /// </summary>
        [Output("serviceDataIdentity")]
        public Output<string?> ServiceDataIdentity { get; private set; } = null!;

        /// <summary>
        /// The ID of the Storage Account Container. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        [Output("storageContainerId")]
        public Output<string> StorageContainerId { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Machine Learning DataStore. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The ID of the Tenant which the Service Principal belongs to.
        /// </summary>
        [Output("tenantId")]
        public Output<string?> TenantId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Machine Learning Workspace. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a DatastoreDatalakeGen2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatastoreDatalakeGen2(string name, DatastoreDatalakeGen2Args args, CustomResourceOptions? options = null)
            : base("azure:machinelearning/datastoreDatalakeGen2:DatastoreDatalakeGen2", name, args ?? new DatastoreDatalakeGen2Args(), MakeResourceOptions(options, ""))
        {
        }

        private DatastoreDatalakeGen2(string name, Input<string> id, DatastoreDatalakeGen2State? state = null, CustomResourceOptions? options = null)
            : base("azure:machinelearning/datastoreDatalakeGen2:DatastoreDatalakeGen2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "clientSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatastoreDatalakeGen2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatastoreDatalakeGen2 Get(string name, Input<string> id, DatastoreDatalakeGen2State? state = null, CustomResourceOptions? options = null)
        {
            return new DatastoreDatalakeGen2(name, id, state, options);
        }
    }

    public sealed class DatastoreDatalakeGen2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An URL used for authentication.
        /// </summary>
        [Input("authorityUrl")]
        public Input<string>? AuthorityUrl { get; set; }

        /// <summary>
        /// The object ID of the Service Principal.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// The secret of the Service Principal.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Text used to describe the asset. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the Machine Learning DataStore. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies which identity to use when retrieving data from the specified source. Defaults to `None`. Possible values are `None`, `WorkspaceSystemAssignedIdentity` and `WorkspaceUserAssignedIdentity`.
        /// </summary>
        [Input("serviceDataIdentity")]
        public Input<string>? ServiceDataIdentity { get; set; }

        /// <summary>
        /// The ID of the Storage Account Container. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        [Input("storageContainerId", required: true)]
        public Input<string> StorageContainerId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Machine Learning DataStore. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the Tenant which the Service Principal belongs to.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The ID of the Machine Learning Workspace. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public DatastoreDatalakeGen2Args()
        {
        }
        public static new DatastoreDatalakeGen2Args Empty => new DatastoreDatalakeGen2Args();
    }

    public sealed class DatastoreDatalakeGen2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An URL used for authentication.
        /// </summary>
        [Input("authorityUrl")]
        public Input<string>? AuthorityUrl { get; set; }

        /// <summary>
        /// The object ID of the Service Principal.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// The secret of the Service Principal.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Text used to describe the asset. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates whether this Machines Learning DataStore is the default for the Workspace.
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// The name of the Machine Learning DataStore. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies which identity to use when retrieving data from the specified source. Defaults to `None`. Possible values are `None`, `WorkspaceSystemAssignedIdentity` and `WorkspaceUserAssignedIdentity`.
        /// </summary>
        [Input("serviceDataIdentity")]
        public Input<string>? ServiceDataIdentity { get; set; }

        /// <summary>
        /// The ID of the Storage Account Container. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        [Input("storageContainerId")]
        public Input<string>? StorageContainerId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Machine Learning DataStore. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the Tenant which the Service Principal belongs to.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The ID of the Machine Learning Workspace. Changing this forces a new Machine Learning DataStore to be created.
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public DatastoreDatalakeGen2State()
        {
        }
        public static new DatastoreDatalakeGen2State Empty => new DatastoreDatalakeGen2State();
    }
}
