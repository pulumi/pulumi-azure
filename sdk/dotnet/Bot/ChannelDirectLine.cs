// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Bot
{
    /// <summary>
    /// Manages a Directline integration for a Bot Channel
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/bot_channel_directline.markdown.
    /// </summary>
    public partial class ChannelDirectLine : Pulumi.CustomResource
    {
        [Output("botName")]
        public Output<string> BotName { get; private set; } = null!;

        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        [Output("sites")]
        public Output<ImmutableArray<Outputs.ChannelDirectLineSites>> Sites { get; private set; } = null!;


        /// <summary>
        /// Create a ChannelDirectLine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ChannelDirectLine(string name, ChannelDirectLineArgs args, CustomResourceOptions? options = null)
            : base("azure:bot/channelDirectLine:ChannelDirectLine", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ChannelDirectLine(string name, Input<string> id, ChannelDirectLineState? state = null, CustomResourceOptions? options = null)
            : base("azure:bot/channelDirectLine:ChannelDirectLine", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ChannelDirectLine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ChannelDirectLine Get(string name, Input<string> id, ChannelDirectLineState? state = null, CustomResourceOptions? options = null)
        {
            return new ChannelDirectLine(name, id, state, options);
        }
    }

    public sealed class ChannelDirectLineArgs : Pulumi.ResourceArgs
    {
        [Input("botName", required: true)]
        public Input<string> BotName { get; set; } = null!;

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("sites", required: true)]
        private InputList<Inputs.ChannelDirectLineSitesArgs>? _sites;
        public InputList<Inputs.ChannelDirectLineSitesArgs> Sites
        {
            get => _sites ?? (_sites = new InputList<Inputs.ChannelDirectLineSitesArgs>());
            set => _sites = value;
        }

        public ChannelDirectLineArgs()
        {
        }
    }

    public sealed class ChannelDirectLineState : Pulumi.ResourceArgs
    {
        [Input("botName")]
        public Input<string>? BotName { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("sites")]
        private InputList<Inputs.ChannelDirectLineSitesGetArgs>? _sites;
        public InputList<Inputs.ChannelDirectLineSitesGetArgs> Sites
        {
            get => _sites ?? (_sites = new InputList<Inputs.ChannelDirectLineSitesGetArgs>());
            set => _sites = value;
        }

        public ChannelDirectLineState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ChannelDirectLineSitesArgs : Pulumi.ResourceArgs
    {
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("enhancedAuthenticationEnabled")]
        public Input<bool>? EnhancedAuthenticationEnabled { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("key2")]
        public Input<string>? Key2 { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("trustedOrigins")]
        private InputList<string>? _trustedOrigins;
        public InputList<string> TrustedOrigins
        {
            get => _trustedOrigins ?? (_trustedOrigins = new InputList<string>());
            set => _trustedOrigins = value;
        }

        [Input("v1Allowed")]
        public Input<bool>? V1Allowed { get; set; }

        [Input("v3Allowed")]
        public Input<bool>? V3Allowed { get; set; }

        public ChannelDirectLineSitesArgs()
        {
        }
    }

    public sealed class ChannelDirectLineSitesGetArgs : Pulumi.ResourceArgs
    {
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("enhancedAuthenticationEnabled")]
        public Input<bool>? EnhancedAuthenticationEnabled { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("key2")]
        public Input<string>? Key2 { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("trustedOrigins")]
        private InputList<string>? _trustedOrigins;
        public InputList<string> TrustedOrigins
        {
            get => _trustedOrigins ?? (_trustedOrigins = new InputList<string>());
            set => _trustedOrigins = value;
        }

        [Input("v1Allowed")]
        public Input<bool>? V1Allowed { get; set; }

        [Input("v3Allowed")]
        public Input<bool>? V3Allowed { get; set; }

        public ChannelDirectLineSitesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ChannelDirectLineSites
    {
        public readonly bool? Enabled;
        public readonly bool? EnhancedAuthenticationEnabled;
        public readonly string Id;
        public readonly string Key;
        public readonly string Key2;
        public readonly string Name;
        public readonly ImmutableArray<string> TrustedOrigins;
        public readonly bool? V1Allowed;
        public readonly bool? V3Allowed;

        [OutputConstructor]
        private ChannelDirectLineSites(
            bool? enabled,
            bool? enhancedAuthenticationEnabled,
            string id,
            string key,
            string key2,
            string name,
            ImmutableArray<string> trustedOrigins,
            bool? v1Allowed,
            bool? v3Allowed)
        {
            Enabled = enabled;
            EnhancedAuthenticationEnabled = enhancedAuthenticationEnabled;
            Id = id;
            Key = key;
            Key2 = key2;
            Name = name;
            TrustedOrigins = trustedOrigins;
            V1Allowed = v1Allowed;
            V3Allowed = v3Allowed;
        }
    }
    }
}
