// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Bot
{
    /// <summary>
    /// Manages an Azure Bot Service.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleInsights = new Azure.AppInsights.Insights("exampleInsights", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ApplicationType = "web",
    ///     });
    /// 
    ///     var exampleApiKey = new Azure.AppInsights.ApiKey("exampleApiKey", new()
    ///     {
    ///         ApplicationInsightsId = exampleInsights.Id,
    ///         ReadPermissions = new[]
    ///         {
    ///             "aggregate",
    ///             "api",
    ///             "draft",
    ///             "extendqueries",
    ///             "search",
    ///         },
    ///     });
    /// 
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleServiceAzureBot = new Azure.Bot.ServiceAzureBot("exampleServiceAzureBot", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = "global",
    ///         MicrosoftAppId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ClientId),
    ///         Sku = "F0",
    ///         Endpoint = "https://example.com",
    ///         DeveloperAppInsightsApiKey = exampleApiKey.ApiKey,
    ///         DeveloperAppInsightsApplicationId = exampleInsights.AppId,
    ///         Tags = 
    ///         {
    ///             { "environment", "test" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Azure Bot Services can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:bot/serviceAzureBot:ServiceAzureBot example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.BotService/botServices/botService1
    /// ```
    /// </summary>
    [AzureResourceType("azure:bot/serviceAzureBot:ServiceAzureBot")]
    public partial class ServiceAzureBot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Application Insights API Key to associate with this Azure Bot Service.
        /// </summary>
        [Output("developerAppInsightsApiKey")]
        public Output<string?> DeveloperAppInsightsApiKey { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the Application Insights instance to associate with this Azure Bot Service.
        /// </summary>
        [Output("developerAppInsightsApplicationId")]
        public Output<string?> DeveloperAppInsightsApplicationId { get; private set; } = null!;

        /// <summary>
        /// The Application Insight Key to associate with this Azure Bot Service.
        /// </summary>
        [Output("developerAppInsightsKey")]
        public Output<string?> DeveloperAppInsightsKey { get; private set; } = null!;

        /// <summary>
        /// The name that the Azure Bot Service will be displayed as. This defaults to the value set for `name` if not specified.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The Azure Bot Service endpoint.
        /// </summary>
        [Output("endpoint")]
        public Output<string?> Endpoint { get; private set; } = null!;

        /// <summary>
        /// The Icon Url of the Azure Bot Service. Defaults to `https://docs.botframework.com/static/devportal/client/images/bot-framework-default.png`.
        /// </summary>
        [Output("iconUrl")]
        public Output<string?> IconUrl { get; private set; } = null!;

        /// <summary>
        /// Is local authentication enabled? Defaults to `true`.
        /// </summary>
        [Output("localAuthenticationEnabled")]
        public Output<bool?> LocalAuthenticationEnabled { get; private set; } = null!;

        /// <summary>
        /// The supported Azure location where the Azure Bot Service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A list of LUIS App IDs to associate with this Azure Bot Service.
        /// </summary>
        [Output("luisAppIds")]
        public Output<ImmutableArray<string>> LuisAppIds { get; private set; } = null!;

        /// <summary>
        /// The LUIS key to associate with this Azure Bot Service.
        /// </summary>
        [Output("luisKey")]
        public Output<string?> LuisKey { get; private set; } = null!;

        /// <summary>
        /// The Microsoft Application ID for the Azure Bot Service. Changing this forces a new resource to be created.
        /// </summary>
        [Output("microsoftAppId")]
        public Output<string> MicrosoftAppId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Microsoft App Managed Identity for this Azure Bot Service. Changing this forces a new resource to be created.
        /// </summary>
        [Output("microsoftAppMsiId")]
        public Output<string?> MicrosoftAppMsiId { get; private set; } = null!;

        /// <summary>
        /// The Tenant ID of the Microsoft App for this Azure Bot Service. Changing this forces a new resource to be created.
        /// </summary>
        [Output("microsoftAppTenantId")]
        public Output<string?> MicrosoftAppTenantId { get; private set; } = null!;

        /// <summary>
        /// The Microsoft App Type for this Azure Bot Service. Possible values are `MultiTenant`, `SingleTenant` and `UserAssignedMSI`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("microsoftAppType")]
        public Output<string?> MicrosoftAppType { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Azure Bot Service. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("publicNetworkAccessEnabled")]
        public Output<bool?> PublicNetworkAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Azure Bot Service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The SKU of the Azure Bot Service. Accepted values are `F0` or `S1`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("sku")]
        public Output<string> Sku { get; private set; } = null!;

        /// <summary>
        /// Is the streaming endpoint enabled for this Azure Bot Service. Defaults to `false`.
        /// </summary>
        [Output("streamingEndpointEnabled")]
        public Output<bool?> StreamingEndpointEnabled { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to this Azure Bot Service.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceAzureBot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceAzureBot(string name, ServiceAzureBotArgs args, CustomResourceOptions? options = null)
            : base("azure:bot/serviceAzureBot:ServiceAzureBot", name, args ?? new ServiceAzureBotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceAzureBot(string name, Input<string> id, ServiceAzureBotState? state = null, CustomResourceOptions? options = null)
            : base("azure:bot/serviceAzureBot:ServiceAzureBot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "developerAppInsightsApiKey",
                    "luisKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceAzureBot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceAzureBot Get(string name, Input<string> id, ServiceAzureBotState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceAzureBot(name, id, state, options);
        }
    }

    public sealed class ServiceAzureBotArgs : global::Pulumi.ResourceArgs
    {
        [Input("developerAppInsightsApiKey")]
        private Input<string>? _developerAppInsightsApiKey;

        /// <summary>
        /// The Application Insights API Key to associate with this Azure Bot Service.
        /// </summary>
        public Input<string>? DeveloperAppInsightsApiKey
        {
            get => _developerAppInsightsApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _developerAppInsightsApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The resource ID of the Application Insights instance to associate with this Azure Bot Service.
        /// </summary>
        [Input("developerAppInsightsApplicationId")]
        public Input<string>? DeveloperAppInsightsApplicationId { get; set; }

        /// <summary>
        /// The Application Insight Key to associate with this Azure Bot Service.
        /// </summary>
        [Input("developerAppInsightsKey")]
        public Input<string>? DeveloperAppInsightsKey { get; set; }

        /// <summary>
        /// The name that the Azure Bot Service will be displayed as. This defaults to the value set for `name` if not specified.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The Azure Bot Service endpoint.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// The Icon Url of the Azure Bot Service. Defaults to `https://docs.botframework.com/static/devportal/client/images/bot-framework-default.png`.
        /// </summary>
        [Input("iconUrl")]
        public Input<string>? IconUrl { get; set; }

        /// <summary>
        /// Is local authentication enabled? Defaults to `true`.
        /// </summary>
        [Input("localAuthenticationEnabled")]
        public Input<bool>? LocalAuthenticationEnabled { get; set; }

        /// <summary>
        /// The supported Azure location where the Azure Bot Service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("luisAppIds")]
        private InputList<string>? _luisAppIds;

        /// <summary>
        /// A list of LUIS App IDs to associate with this Azure Bot Service.
        /// </summary>
        public InputList<string> LuisAppIds
        {
            get => _luisAppIds ?? (_luisAppIds = new InputList<string>());
            set => _luisAppIds = value;
        }

        [Input("luisKey")]
        private Input<string>? _luisKey;

        /// <summary>
        /// The LUIS key to associate with this Azure Bot Service.
        /// </summary>
        public Input<string>? LuisKey
        {
            get => _luisKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _luisKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Microsoft Application ID for the Azure Bot Service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("microsoftAppId", required: true)]
        public Input<string> MicrosoftAppId { get; set; } = null!;

        /// <summary>
        /// The ID of the Microsoft App Managed Identity for this Azure Bot Service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("microsoftAppMsiId")]
        public Input<string>? MicrosoftAppMsiId { get; set; }

        /// <summary>
        /// The Tenant ID of the Microsoft App for this Azure Bot Service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("microsoftAppTenantId")]
        public Input<string>? MicrosoftAppTenantId { get; set; }

        /// <summary>
        /// The Microsoft App Type for this Azure Bot Service. Possible values are `MultiTenant`, `SingleTenant` and `UserAssignedMSI`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("microsoftAppType")]
        public Input<string>? MicrosoftAppType { get; set; }

        /// <summary>
        /// The name which should be used for this Azure Bot Service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Azure Bot Service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The SKU of the Azure Bot Service. Accepted values are `F0` or `S1`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sku", required: true)]
        public Input<string> Sku { get; set; } = null!;

        /// <summary>
        /// Is the streaming endpoint enabled for this Azure Bot Service. Defaults to `false`.
        /// </summary>
        [Input("streamingEndpointEnabled")]
        public Input<bool>? StreamingEndpointEnabled { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to this Azure Bot Service.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ServiceAzureBotArgs()
        {
        }
        public static new ServiceAzureBotArgs Empty => new ServiceAzureBotArgs();
    }

    public sealed class ServiceAzureBotState : global::Pulumi.ResourceArgs
    {
        [Input("developerAppInsightsApiKey")]
        private Input<string>? _developerAppInsightsApiKey;

        /// <summary>
        /// The Application Insights API Key to associate with this Azure Bot Service.
        /// </summary>
        public Input<string>? DeveloperAppInsightsApiKey
        {
            get => _developerAppInsightsApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _developerAppInsightsApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The resource ID of the Application Insights instance to associate with this Azure Bot Service.
        /// </summary>
        [Input("developerAppInsightsApplicationId")]
        public Input<string>? DeveloperAppInsightsApplicationId { get; set; }

        /// <summary>
        /// The Application Insight Key to associate with this Azure Bot Service.
        /// </summary>
        [Input("developerAppInsightsKey")]
        public Input<string>? DeveloperAppInsightsKey { get; set; }

        /// <summary>
        /// The name that the Azure Bot Service will be displayed as. This defaults to the value set for `name` if not specified.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The Azure Bot Service endpoint.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// The Icon Url of the Azure Bot Service. Defaults to `https://docs.botframework.com/static/devportal/client/images/bot-framework-default.png`.
        /// </summary>
        [Input("iconUrl")]
        public Input<string>? IconUrl { get; set; }

        /// <summary>
        /// Is local authentication enabled? Defaults to `true`.
        /// </summary>
        [Input("localAuthenticationEnabled")]
        public Input<bool>? LocalAuthenticationEnabled { get; set; }

        /// <summary>
        /// The supported Azure location where the Azure Bot Service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("luisAppIds")]
        private InputList<string>? _luisAppIds;

        /// <summary>
        /// A list of LUIS App IDs to associate with this Azure Bot Service.
        /// </summary>
        public InputList<string> LuisAppIds
        {
            get => _luisAppIds ?? (_luisAppIds = new InputList<string>());
            set => _luisAppIds = value;
        }

        [Input("luisKey")]
        private Input<string>? _luisKey;

        /// <summary>
        /// The LUIS key to associate with this Azure Bot Service.
        /// </summary>
        public Input<string>? LuisKey
        {
            get => _luisKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _luisKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Microsoft Application ID for the Azure Bot Service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("microsoftAppId")]
        public Input<string>? MicrosoftAppId { get; set; }

        /// <summary>
        /// The ID of the Microsoft App Managed Identity for this Azure Bot Service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("microsoftAppMsiId")]
        public Input<string>? MicrosoftAppMsiId { get; set; }

        /// <summary>
        /// The Tenant ID of the Microsoft App for this Azure Bot Service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("microsoftAppTenantId")]
        public Input<string>? MicrosoftAppTenantId { get; set; }

        /// <summary>
        /// The Microsoft App Type for this Azure Bot Service. Possible values are `MultiTenant`, `SingleTenant` and `UserAssignedMSI`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("microsoftAppType")]
        public Input<string>? MicrosoftAppType { get; set; }

        /// <summary>
        /// The name which should be used for this Azure Bot Service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Azure Bot Service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The SKU of the Azure Bot Service. Accepted values are `F0` or `S1`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        /// <summary>
        /// Is the streaming endpoint enabled for this Azure Bot Service. Defaults to `false`.
        /// </summary>
        [Input("streamingEndpointEnabled")]
        public Input<bool>? StreamingEndpointEnabled { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to this Azure Bot Service.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ServiceAzureBotState()
        {
        }
        public static new ServiceAzureBotState Empty => new ServiceAzureBotState();
    }
}
