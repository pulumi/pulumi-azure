// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Bot
{
    /// <summary>
    /// Manages a SMS integration for a Bot Channel
    /// 
    /// &gt; **Note** A bot can only have a single SMS Channel associated with it.
    /// 
    /// ## Import
    /// 
    /// The SMS Integration for a Bot Channel can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:bot/channelSms:ChannelSms example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.BotService/botServices/botService1/channels/SmsChannel
    /// ```
    /// </summary>
    [AzureResourceType("azure:bot/channelSms:ChannelSms")]
    public partial class ChannelSms : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
        /// </summary>
        [Output("botName")]
        public Output<string> BotName { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The phone number for the SMS Channel.
        /// </summary>
        [Output("phoneNumber")]
        public Output<string> PhoneNumber { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group where the SMS Channel should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The account security identifier (SID) for the SMS Channel.
        /// </summary>
        [Output("smsChannelAccountSecurityId")]
        public Output<string> SmsChannelAccountSecurityId { get; private set; } = null!;

        /// <summary>
        /// The authorization token for the SMS Channel.
        /// </summary>
        [Output("smsChannelAuthToken")]
        public Output<string> SmsChannelAuthToken { get; private set; } = null!;


        /// <summary>
        /// Create a ChannelSms resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ChannelSms(string name, ChannelSmsArgs args, CustomResourceOptions? options = null)
            : base("azure:bot/channelSms:ChannelSms", name, args ?? new ChannelSmsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ChannelSms(string name, Input<string> id, ChannelSmsState? state = null, CustomResourceOptions? options = null)
            : base("azure:bot/channelSms:ChannelSms", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "smsChannelAuthToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ChannelSms resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ChannelSms Get(string name, Input<string> id, ChannelSmsState? state = null, CustomResourceOptions? options = null)
        {
            return new ChannelSms(name, id, state, options);
        }
    }

    public sealed class ChannelSmsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
        /// </summary>
        [Input("botName", required: true)]
        public Input<string> BotName { get; set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The phone number for the SMS Channel.
        /// </summary>
        [Input("phoneNumber", required: true)]
        public Input<string> PhoneNumber { get; set; } = null!;

        /// <summary>
        /// The name of the resource group where the SMS Channel should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The account security identifier (SID) for the SMS Channel.
        /// </summary>
        [Input("smsChannelAccountSecurityId", required: true)]
        public Input<string> SmsChannelAccountSecurityId { get; set; } = null!;

        [Input("smsChannelAuthToken", required: true)]
        private Input<string>? _smsChannelAuthToken;

        /// <summary>
        /// The authorization token for the SMS Channel.
        /// </summary>
        public Input<string>? SmsChannelAuthToken
        {
            get => _smsChannelAuthToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _smsChannelAuthToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ChannelSmsArgs()
        {
        }
        public static new ChannelSmsArgs Empty => new ChannelSmsArgs();
    }

    public sealed class ChannelSmsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
        /// </summary>
        [Input("botName")]
        public Input<string>? BotName { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The phone number for the SMS Channel.
        /// </summary>
        [Input("phoneNumber")]
        public Input<string>? PhoneNumber { get; set; }

        /// <summary>
        /// The name of the resource group where the SMS Channel should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The account security identifier (SID) for the SMS Channel.
        /// </summary>
        [Input("smsChannelAccountSecurityId")]
        public Input<string>? SmsChannelAccountSecurityId { get; set; }

        [Input("smsChannelAuthToken")]
        private Input<string>? _smsChannelAuthToken;

        /// <summary>
        /// The authorization token for the SMS Channel.
        /// </summary>
        public Input<string>? SmsChannelAuthToken
        {
            get => _smsChannelAuthToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _smsChannelAuthToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ChannelSmsState()
        {
        }
        public static new ChannelSmsState Empty => new ChannelSmsState();
    }
}
