// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Bot
{
    /// <summary>
    /// Manages a Web Chat integration for a Bot Channel
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleChannelsRegistration = new Azure.Bot.ChannelsRegistration("exampleChannelsRegistration", new()
    ///     {
    ///         Location = "global",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "F0",
    ///         MicrosoftAppId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ClientId),
    ///     });
    /// 
    ///     var exampleChannelWebChat = new Azure.Bot.ChannelWebChat("exampleChannelWebChat", new()
    ///     {
    ///         BotName = exampleChannelsRegistration.Name,
    ///         Location = exampleChannelsRegistration.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sites = new[]
    ///         {
    ///             new Azure.Bot.Inputs.ChannelWebChatSiteArgs
    ///             {
    ///                 Name = "TestSite",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Web Chat Channels can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:bot/channelWebChat:ChannelWebChat example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.BotService/botServices/botService1/channels/WebChatChannel
    /// ```
    /// </summary>
    [AzureResourceType("azure:bot/channelWebChat:ChannelWebChat")]
    public partial class ChannelWebChat : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
        /// </summary>
        [Output("botName")]
        public Output<string> BotName { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group where the Web Chat Channel should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A list of Web Chat Site names.
        /// 
        /// &gt; **NOTE:** `site_names` is deprecated and will be removed in favour of the property `site` in version 4.0 of the AzureRM Provider.
        /// </summary>
        [Output("siteNames")]
        public Output<ImmutableArray<string>> SiteNames { get; private set; } = null!;

        /// <summary>
        /// A site represents a client application that you want to connect to your bot. One or more `site` blocks as defined below.
        /// </summary>
        [Output("sites")]
        public Output<ImmutableArray<Outputs.ChannelWebChatSite>> Sites { get; private set; } = null!;


        /// <summary>
        /// Create a ChannelWebChat resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ChannelWebChat(string name, ChannelWebChatArgs args, CustomResourceOptions? options = null)
            : base("azure:bot/channelWebChat:ChannelWebChat", name, args ?? new ChannelWebChatArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ChannelWebChat(string name, Input<string> id, ChannelWebChatState? state = null, CustomResourceOptions? options = null)
            : base("azure:bot/channelWebChat:ChannelWebChat", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ChannelWebChat resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ChannelWebChat Get(string name, Input<string> id, ChannelWebChatState? state = null, CustomResourceOptions? options = null)
        {
            return new ChannelWebChat(name, id, state, options);
        }
    }

    public sealed class ChannelWebChatArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
        /// </summary>
        [Input("botName", required: true)]
        public Input<string> BotName { get; set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group where the Web Chat Channel should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("siteNames")]
        private InputList<string>? _siteNames;

        /// <summary>
        /// A list of Web Chat Site names.
        /// 
        /// &gt; **NOTE:** `site_names` is deprecated and will be removed in favour of the property `site` in version 4.0 of the AzureRM Provider.
        /// </summary>
        [Obsolete(@"`site_names` will be removed in favour of the property `site` in version 4.0 of the AzureRM Provider.")]
        public InputList<string> SiteNames
        {
            get => _siteNames ?? (_siteNames = new InputList<string>());
            set => _siteNames = value;
        }

        [Input("sites")]
        private InputList<Inputs.ChannelWebChatSiteArgs>? _sites;

        /// <summary>
        /// A site represents a client application that you want to connect to your bot. One or more `site` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ChannelWebChatSiteArgs> Sites
        {
            get => _sites ?? (_sites = new InputList<Inputs.ChannelWebChatSiteArgs>());
            set => _sites = value;
        }

        public ChannelWebChatArgs()
        {
        }
        public static new ChannelWebChatArgs Empty => new ChannelWebChatArgs();
    }

    public sealed class ChannelWebChatState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
        /// </summary>
        [Input("botName")]
        public Input<string>? BotName { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the resource group where the Web Chat Channel should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("siteNames")]
        private InputList<string>? _siteNames;

        /// <summary>
        /// A list of Web Chat Site names.
        /// 
        /// &gt; **NOTE:** `site_names` is deprecated and will be removed in favour of the property `site` in version 4.0 of the AzureRM Provider.
        /// </summary>
        [Obsolete(@"`site_names` will be removed in favour of the property `site` in version 4.0 of the AzureRM Provider.")]
        public InputList<string> SiteNames
        {
            get => _siteNames ?? (_siteNames = new InputList<string>());
            set => _siteNames = value;
        }

        [Input("sites")]
        private InputList<Inputs.ChannelWebChatSiteGetArgs>? _sites;

        /// <summary>
        /// A site represents a client application that you want to connect to your bot. One or more `site` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ChannelWebChatSiteGetArgs> Sites
        {
            get => _sites ?? (_sites = new InputList<Inputs.ChannelWebChatSiteGetArgs>());
            set => _sites = value;
        }

        public ChannelWebChatState()
        {
        }
        public static new ChannelWebChatState Empty => new ChannelWebChatState();
    }
}
