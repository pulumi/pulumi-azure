// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    /// <summary>
    /// Manages a Container Registry Task.
    /// 
    /// ## Import
    /// 
    /// Container Registry Tasks can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:containerservice/registryTask:RegistryTask example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.ContainerRegistry/registries/registry1/tasks/task1
    /// ```
    /// </summary>
    [AzureResourceType("azure:containerservice/registryTask:RegistryTask")]
    public partial class RegistryTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
        /// </summary>
        [Output("agentPoolName")]
        public Output<string?> AgentPoolName { get; private set; } = null!;

        /// <summary>
        /// A `agent_setting` block as defined below.
        /// </summary>
        [Output("agentSetting")]
        public Output<Outputs.RegistryTaskAgentSetting?> AgentSetting { get; private set; } = null!;

        /// <summary>
        /// A `base_image_trigger` block as defined below.
        /// </summary>
        [Output("baseImageTrigger")]
        public Output<Outputs.RegistryTaskBaseImageTrigger?> BaseImageTrigger { get; private set; } = null!;

        /// <summary>
        /// The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
        /// </summary>
        [Output("containerRegistryId")]
        public Output<string> ContainerRegistryId { get; private set; } = null!;

        /// <summary>
        /// A `docker_step` block as defined below.
        /// </summary>
        [Output("dockerStep")]
        public Output<Outputs.RegistryTaskDockerStep?> DockerStep { get; private set; } = null!;

        /// <summary>
        /// Should this Container Registry Task be enabled? Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// A `encoded_step` block as defined below.
        /// </summary>
        [Output("encodedStep")]
        public Output<Outputs.RegistryTaskEncodedStep?> EncodedStep { get; private set; } = null!;

        /// <summary>
        /// A `file_step` block as defined below.
        /// 
        /// &gt; **NOTE:** For non-system task (when `is_system_task` is set to `false`), one and only one of the `docker_step`, `encoded_step` and `file_step` should be specified.
        /// </summary>
        [Output("fileStep")]
        public Output<Outputs.RegistryTaskFileStep?> FileStep { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.RegistryTaskIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
        /// </summary>
        [Output("isSystemTask")]
        public Output<bool?> IsSystemTask { get; private set; } = null!;

        /// <summary>
        /// The template that describes the run log artifact.
        /// </summary>
        [Output("logTemplate")]
        public Output<string?> LogTemplate { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `platform` block as defined below.
        /// 
        /// &gt; **NOTE:** The `platform` is required for non-system task (when `is_system_task` is set to `false`).
        /// </summary>
        [Output("platform")]
        public Output<Outputs.RegistryTaskPlatform?> Platform { get; private set; } = null!;

        /// <summary>
        /// One `registry_credential` block as defined below.
        /// </summary>
        [Output("registryCredential")]
        public Output<Outputs.RegistryTaskRegistryCredential?> RegistryCredential { get; private set; } = null!;

        /// <summary>
        /// One or more `source_trigger` blocks as defined below.
        /// </summary>
        [Output("sourceTriggers")]
        public Output<ImmutableArray<Outputs.RegistryTaskSourceTrigger>> SourceTriggers { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Container Registry Task.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The timeout of this Container Registry Task in seconds. The valid range lies from 300 to 28800. Defaults to `3600`.
        /// </summary>
        [Output("timeoutInSeconds")]
        public Output<int?> TimeoutInSeconds { get; private set; } = null!;

        /// <summary>
        /// One or more `timer_trigger` blocks as defined below.
        /// </summary>
        [Output("timerTriggers")]
        public Output<ImmutableArray<Outputs.RegistryTaskTimerTrigger>> TimerTriggers { get; private set; } = null!;


        /// <summary>
        /// Create a RegistryTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegistryTask(string name, RegistryTaskArgs args, CustomResourceOptions? options = null)
            : base("azure:containerservice/registryTask:RegistryTask", name, args ?? new RegistryTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegistryTask(string name, Input<string> id, RegistryTaskState? state = null, CustomResourceOptions? options = null)
            : base("azure:containerservice/registryTask:RegistryTask", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegistryTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegistryTask Get(string name, Input<string> id, RegistryTaskState? state = null, CustomResourceOptions? options = null)
        {
            return new RegistryTask(name, id, state, options);
        }
    }

    public sealed class RegistryTaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
        /// </summary>
        [Input("agentPoolName")]
        public Input<string>? AgentPoolName { get; set; }

        /// <summary>
        /// A `agent_setting` block as defined below.
        /// </summary>
        [Input("agentSetting")]
        public Input<Inputs.RegistryTaskAgentSettingArgs>? AgentSetting { get; set; }

        /// <summary>
        /// A `base_image_trigger` block as defined below.
        /// </summary>
        [Input("baseImageTrigger")]
        public Input<Inputs.RegistryTaskBaseImageTriggerArgs>? BaseImageTrigger { get; set; }

        /// <summary>
        /// The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
        /// </summary>
        [Input("containerRegistryId", required: true)]
        public Input<string> ContainerRegistryId { get; set; } = null!;

        /// <summary>
        /// A `docker_step` block as defined below.
        /// </summary>
        [Input("dockerStep")]
        public Input<Inputs.RegistryTaskDockerStepArgs>? DockerStep { get; set; }

        /// <summary>
        /// Should this Container Registry Task be enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// A `encoded_step` block as defined below.
        /// </summary>
        [Input("encodedStep")]
        public Input<Inputs.RegistryTaskEncodedStepArgs>? EncodedStep { get; set; }

        /// <summary>
        /// A `file_step` block as defined below.
        /// 
        /// &gt; **NOTE:** For non-system task (when `is_system_task` is set to `false`), one and only one of the `docker_step`, `encoded_step` and `file_step` should be specified.
        /// </summary>
        [Input("fileStep")]
        public Input<Inputs.RegistryTaskFileStepArgs>? FileStep { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.RegistryTaskIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
        /// </summary>
        [Input("isSystemTask")]
        public Input<bool>? IsSystemTask { get; set; }

        /// <summary>
        /// The template that describes the run log artifact.
        /// </summary>
        [Input("logTemplate")]
        public Input<string>? LogTemplate { get; set; }

        /// <summary>
        /// The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `platform` block as defined below.
        /// 
        /// &gt; **NOTE:** The `platform` is required for non-system task (when `is_system_task` is set to `false`).
        /// </summary>
        [Input("platform")]
        public Input<Inputs.RegistryTaskPlatformArgs>? Platform { get; set; }

        /// <summary>
        /// One `registry_credential` block as defined below.
        /// </summary>
        [Input("registryCredential")]
        public Input<Inputs.RegistryTaskRegistryCredentialArgs>? RegistryCredential { get; set; }

        [Input("sourceTriggers")]
        private InputList<Inputs.RegistryTaskSourceTriggerArgs>? _sourceTriggers;

        /// <summary>
        /// One or more `source_trigger` blocks as defined below.
        /// </summary>
        public InputList<Inputs.RegistryTaskSourceTriggerArgs> SourceTriggers
        {
            get => _sourceTriggers ?? (_sourceTriggers = new InputList<Inputs.RegistryTaskSourceTriggerArgs>());
            set => _sourceTriggers = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Container Registry Task.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The timeout of this Container Registry Task in seconds. The valid range lies from 300 to 28800. Defaults to `3600`.
        /// </summary>
        [Input("timeoutInSeconds")]
        public Input<int>? TimeoutInSeconds { get; set; }

        [Input("timerTriggers")]
        private InputList<Inputs.RegistryTaskTimerTriggerArgs>? _timerTriggers;

        /// <summary>
        /// One or more `timer_trigger` blocks as defined below.
        /// </summary>
        public InputList<Inputs.RegistryTaskTimerTriggerArgs> TimerTriggers
        {
            get => _timerTriggers ?? (_timerTriggers = new InputList<Inputs.RegistryTaskTimerTriggerArgs>());
            set => _timerTriggers = value;
        }

        public RegistryTaskArgs()
        {
        }
        public static new RegistryTaskArgs Empty => new RegistryTaskArgs();
    }

    public sealed class RegistryTaskState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
        /// </summary>
        [Input("agentPoolName")]
        public Input<string>? AgentPoolName { get; set; }

        /// <summary>
        /// A `agent_setting` block as defined below.
        /// </summary>
        [Input("agentSetting")]
        public Input<Inputs.RegistryTaskAgentSettingGetArgs>? AgentSetting { get; set; }

        /// <summary>
        /// A `base_image_trigger` block as defined below.
        /// </summary>
        [Input("baseImageTrigger")]
        public Input<Inputs.RegistryTaskBaseImageTriggerGetArgs>? BaseImageTrigger { get; set; }

        /// <summary>
        /// The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
        /// </summary>
        [Input("containerRegistryId")]
        public Input<string>? ContainerRegistryId { get; set; }

        /// <summary>
        /// A `docker_step` block as defined below.
        /// </summary>
        [Input("dockerStep")]
        public Input<Inputs.RegistryTaskDockerStepGetArgs>? DockerStep { get; set; }

        /// <summary>
        /// Should this Container Registry Task be enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// A `encoded_step` block as defined below.
        /// </summary>
        [Input("encodedStep")]
        public Input<Inputs.RegistryTaskEncodedStepGetArgs>? EncodedStep { get; set; }

        /// <summary>
        /// A `file_step` block as defined below.
        /// 
        /// &gt; **NOTE:** For non-system task (when `is_system_task` is set to `false`), one and only one of the `docker_step`, `encoded_step` and `file_step` should be specified.
        /// </summary>
        [Input("fileStep")]
        public Input<Inputs.RegistryTaskFileStepGetArgs>? FileStep { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.RegistryTaskIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
        /// </summary>
        [Input("isSystemTask")]
        public Input<bool>? IsSystemTask { get; set; }

        /// <summary>
        /// The template that describes the run log artifact.
        /// </summary>
        [Input("logTemplate")]
        public Input<string>? LogTemplate { get; set; }

        /// <summary>
        /// The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `platform` block as defined below.
        /// 
        /// &gt; **NOTE:** The `platform` is required for non-system task (when `is_system_task` is set to `false`).
        /// </summary>
        [Input("platform")]
        public Input<Inputs.RegistryTaskPlatformGetArgs>? Platform { get; set; }

        /// <summary>
        /// One `registry_credential` block as defined below.
        /// </summary>
        [Input("registryCredential")]
        public Input<Inputs.RegistryTaskRegistryCredentialGetArgs>? RegistryCredential { get; set; }

        [Input("sourceTriggers")]
        private InputList<Inputs.RegistryTaskSourceTriggerGetArgs>? _sourceTriggers;

        /// <summary>
        /// One or more `source_trigger` blocks as defined below.
        /// </summary>
        public InputList<Inputs.RegistryTaskSourceTriggerGetArgs> SourceTriggers
        {
            get => _sourceTriggers ?? (_sourceTriggers = new InputList<Inputs.RegistryTaskSourceTriggerGetArgs>());
            set => _sourceTriggers = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Container Registry Task.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The timeout of this Container Registry Task in seconds. The valid range lies from 300 to 28800. Defaults to `3600`.
        /// </summary>
        [Input("timeoutInSeconds")]
        public Input<int>? TimeoutInSeconds { get; set; }

        [Input("timerTriggers")]
        private InputList<Inputs.RegistryTaskTimerTriggerGetArgs>? _timerTriggers;

        /// <summary>
        /// One or more `timer_trigger` blocks as defined below.
        /// </summary>
        public InputList<Inputs.RegistryTaskTimerTriggerGetArgs> TimerTriggers
        {
            get => _timerTriggers ?? (_timerTriggers = new InputList<Inputs.RegistryTaskTimerTriggerGetArgs>());
            set => _timerTriggers = value;
        }

        public RegistryTaskState()
        {
        }
        public static new RegistryTaskState Empty => new RegistryTaskState();
    }
}
