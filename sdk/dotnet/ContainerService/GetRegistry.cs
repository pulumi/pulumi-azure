// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    public static class GetRegistry
    {
        /// <summary>
        /// Use this data source to access information about an existing Container Registry.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ContainerService.GetRegistry.Invoke(new()
        ///     {
        ///         Name = "testacr",
        ///         ResourceGroupName = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["loginServer"] = example.Apply(getRegistryResult =&gt; getRegistryResult.LoginServer),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRegistryResult> InvokeAsync(GetRegistryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRegistryResult>("azure:containerservice/getRegistry:getRegistry", args ?? new GetRegistryArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Container Registry.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ContainerService.GetRegistry.Invoke(new()
        ///     {
        ///         Name = "testacr",
        ///         ResourceGroupName = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["loginServer"] = example.Apply(getRegistryResult =&gt; getRegistryResult.LoginServer),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRegistryResult> Invoke(GetRegistryInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRegistryResult>("azure:containerservice/getRegistry:getRegistry", args ?? new GetRegistryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegistryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Container Registry.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where this Container Registry exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetRegistryArgs()
        {
        }
        public static new GetRegistryArgs Empty => new GetRegistryArgs();
    }

    public sealed class GetRegistryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Container Registry.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where this Container Registry exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetRegistryInvokeArgs()
        {
        }
        public static new GetRegistryInvokeArgs Empty => new GetRegistryInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegistryResult
    {
        /// <summary>
        /// Is the Administrator account enabled for this Container Registry.
        /// </summary>
        public readonly bool AdminEnabled;
        /// <summary>
        /// The Password associated with the Container Registry Admin account - if the admin account is enabled.
        /// </summary>
        public readonly string AdminPassword;
        /// <summary>
        /// The Username associated with the Container Registry Admin account - if the admin account is enabled.
        /// </summary>
        public readonly string AdminUsername;
        /// <summary>
        /// Whether dedicated data endpoints for this Container Registry are enabled?
        /// </summary>
        public readonly bool DataEndpointEnabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Region in which this Container Registry exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The URL that can be used to log into the container registry.
        /// </summary>
        public readonly string LoginServer;
        public readonly string Name;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The SKU of this Container Registry, such as `Basic`.
        /// </summary>
        public readonly string Sku;
        /// <summary>
        /// A map of tags assigned to the Container Registry.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetRegistryResult(
            bool adminEnabled,

            string adminPassword,

            string adminUsername,

            bool dataEndpointEnabled,

            string id,

            string location,

            string loginServer,

            string name,

            string resourceGroupName,

            string sku,

            ImmutableDictionary<string, string> tags)
        {
            AdminEnabled = adminEnabled;
            AdminPassword = adminPassword;
            AdminUsername = adminUsername;
            DataEndpointEnabled = dataEndpointEnabled;
            Id = id;
            Location = location;
            LoginServer = loginServer;
            Name = name;
            ResourceGroupName = resourceGroupName;
            Sku = sku;
            Tags = tags;
        }
    }
}
