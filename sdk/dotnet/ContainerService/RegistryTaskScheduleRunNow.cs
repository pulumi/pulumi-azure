// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    /// <summary>
    /// Runs a Container Registry Task Schedule.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleRegistry = new Azure.ContainerService.Registry("exampleRegistry", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Sku = "Basic",
    ///     });
    /// 
    ///     var exampleRegistryTask = new Azure.ContainerService.RegistryTask("exampleRegistryTask", new()
    ///     {
    ///         ContainerRegistryId = exampleRegistry.Id,
    ///         Platform = new Azure.ContainerService.Inputs.RegistryTaskPlatformArgs
    ///         {
    ///             Os = "Linux",
    ///         },
    ///         DockerStep = new Azure.ContainerService.Inputs.RegistryTaskDockerStepArgs
    ///         {
    ///             DockerfilePath = "Dockerfile",
    ///             ContextPath = "https://github.com/&lt;user name&gt;/acr-build-helloworld-node#main",
    ///             ContextAccessToken = "&lt;github personal access token&gt;",
    ///             ImageNames = new[]
    ///             {
    ///                 "helloworld:{{.Run.ID}}",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleRegistryTaskScheduleRunNow = new Azure.ContainerService.RegistryTaskScheduleRunNow("exampleRegistryTaskScheduleRunNow", new()
    ///     {
    ///         ContainerRegistryTaskId = exampleRegistryTask.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AzureResourceType("azure:containerservice/registryTaskScheduleRunNow:RegistryTaskScheduleRunNow")]
    public partial class RegistryTaskScheduleRunNow : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
        /// </summary>
        [Output("containerRegistryTaskId")]
        public Output<string> ContainerRegistryTaskId { get; private set; } = null!;


        /// <summary>
        /// Create a RegistryTaskScheduleRunNow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegistryTaskScheduleRunNow(string name, RegistryTaskScheduleRunNowArgs args, CustomResourceOptions? options = null)
            : base("azure:containerservice/registryTaskScheduleRunNow:RegistryTaskScheduleRunNow", name, args ?? new RegistryTaskScheduleRunNowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegistryTaskScheduleRunNow(string name, Input<string> id, RegistryTaskScheduleRunNowState? state = null, CustomResourceOptions? options = null)
            : base("azure:containerservice/registryTaskScheduleRunNow:RegistryTaskScheduleRunNow", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegistryTaskScheduleRunNow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegistryTaskScheduleRunNow Get(string name, Input<string> id, RegistryTaskScheduleRunNowState? state = null, CustomResourceOptions? options = null)
        {
            return new RegistryTaskScheduleRunNow(name, id, state, options);
        }
    }

    public sealed class RegistryTaskScheduleRunNowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
        /// </summary>
        [Input("containerRegistryTaskId", required: true)]
        public Input<string> ContainerRegistryTaskId { get; set; } = null!;

        public RegistryTaskScheduleRunNowArgs()
        {
        }
        public static new RegistryTaskScheduleRunNowArgs Empty => new RegistryTaskScheduleRunNowArgs();
    }

    public sealed class RegistryTaskScheduleRunNowState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
        /// </summary>
        [Input("containerRegistryTaskId")]
        public Input<string>? ContainerRegistryTaskId { get; set; }

        public RegistryTaskScheduleRunNowState()
        {
        }
        public static new RegistryTaskScheduleRunNowState Empty => new RegistryTaskScheduleRunNowState();
    }
}
