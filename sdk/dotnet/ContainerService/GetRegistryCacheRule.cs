// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    public static class GetRegistryCacheRule
    {
        /// <summary>
        /// Use this data source to access information about an existing Container Registry Cache Rule.
        /// </summary>
        public static Task<GetRegistryCacheRuleResult> InvokeAsync(GetRegistryCacheRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegistryCacheRuleResult>("azure:containerservice/getRegistryCacheRule:getRegistryCacheRule", args ?? new GetRegistryCacheRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Container Registry Cache Rule.
        /// </summary>
        public static Output<GetRegistryCacheRuleResult> Invoke(GetRegistryCacheRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegistryCacheRuleResult>("azure:containerservice/getRegistryCacheRule:getRegistryCacheRule", args ?? new GetRegistryCacheRuleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Container Registry Cache Rule.
        /// </summary>
        public static Output<GetRegistryCacheRuleResult> Invoke(GetRegistryCacheRuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegistryCacheRuleResult>("azure:containerservice/getRegistryCacheRule:getRegistryCacheRule", args ?? new GetRegistryCacheRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegistryCacheRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the container registry where the cache rule should apply. Changing this forces a new resource to be created.
        /// </summary>
        [Input("containerRegistryId", required: true)]
        public string ContainerRegistryId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Container Registry Cache Rule. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetRegistryCacheRuleArgs()
        {
        }
        public static new GetRegistryCacheRuleArgs Empty => new GetRegistryCacheRuleArgs();
    }

    public sealed class GetRegistryCacheRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the container registry where the cache rule should apply. Changing this forces a new resource to be created.
        /// </summary>
        [Input("containerRegistryId", required: true)]
        public Input<string> ContainerRegistryId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Container Registry Cache Rule. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetRegistryCacheRuleInvokeArgs()
        {
        }
        public static new GetRegistryCacheRuleInvokeArgs Empty => new GetRegistryCacheRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegistryCacheRuleResult
    {
        public readonly string ContainerRegistryId;
        /// <summary>
        /// The ARM resource ID of the credential store which is associated with the cache rule.
        /// </summary>
        public readonly string CredentialSetId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// The name of the source repository path.
        /// </summary>
        public readonly string SourceRepo;
        /// <summary>
        /// The name of the new repository path to store artifacts.
        /// </summary>
        public readonly string TargetRepo;

        [OutputConstructor]
        private GetRegistryCacheRuleResult(
            string containerRegistryId,

            string credentialSetId,

            string id,

            string name,

            string sourceRepo,

            string targetRepo)
        {
            ContainerRegistryId = containerRegistryId;
            CredentialSetId = credentialSetId;
            Id = id;
            Name = name;
            SourceRepo = sourceRepo;
            TargetRepo = targetRepo;
        }
    }
}
