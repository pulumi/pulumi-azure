// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    public static class GetKubernetesCluster
    {
        /// <summary>
        /// Use this data source to access information about an existing Managed Kubernetes Cluster (AKS).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ContainerService.GetKubernetesCluster.Invoke(new()
        ///     {
        ///         Name = "myakscluster",
        ///         ResourceGroupName = "my-example-resource-group",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKubernetesClusterResult> InvokeAsync(GetKubernetesClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKubernetesClusterResult>("azure:containerservice/getKubernetesCluster:getKubernetesCluster", args ?? new GetKubernetesClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Managed Kubernetes Cluster (AKS).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ContainerService.GetKubernetesCluster.Invoke(new()
        ///     {
        ///         Name = "myakscluster",
        ///         ResourceGroupName = "my-example-resource-group",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKubernetesClusterResult> Invoke(GetKubernetesClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKubernetesClusterResult>("azure:containerservice/getKubernetesCluster:getKubernetesCluster", args ?? new GetKubernetesClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKubernetesClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the managed Kubernetes Cluster.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the managed Kubernetes Cluster exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetKubernetesClusterArgs()
        {
        }
        public static new GetKubernetesClusterArgs Empty => new GetKubernetesClusterArgs();
    }

    public sealed class GetKubernetesClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the managed Kubernetes Cluster.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the managed Kubernetes Cluster exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetKubernetesClusterInvokeArgs()
        {
        }
        public static new GetKubernetesClusterInvokeArgs Empty => new GetKubernetesClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetKubernetesClusterResult
    {
        /// <summary>
        /// An `aci_connector_linux` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterAciConnectorLinuxResult> AciConnectorLinuxes;
        /// <summary>
        /// An `agent_pool_profile` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterAgentPoolProfileResult> AgentPoolProfiles;
        /// <summary>
        /// The IP ranges to whitelist for incoming traffic to the primaries.
        /// </summary>
        public readonly ImmutableArray<string> ApiServerAuthorizedIpRanges;
        /// <summary>
        /// An `azure_active_directory_role_based_access_control` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControlResult> AzureActiveDirectoryRoleBasedAccessControls;
        /// <summary>
        /// Is Azure Policy enabled on this managed Kubernetes Cluster?
        /// </summary>
        public readonly bool AzurePolicyEnabled;
        /// <summary>
        /// A list of custom base64 encoded CAs used by this Managed Kubernetes Cluster.
        /// </summary>
        public readonly ImmutableArray<string> CustomCaTrustCertificatesBase64s;
        /// <summary>
        /// The ID of the Disk Encryption Set used for the Nodes and Volumes.
        /// </summary>
        public readonly string DiskEncryptionSetId;
        /// <summary>
        /// The DNS Prefix of the managed Kubernetes cluster.
        /// </summary>
        public readonly string DnsPrefix;
        /// <summary>
        /// The FQDN of the Azure Kubernetes Managed Cluster.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// Is HTTP Application Routing enabled for this managed Kubernetes Cluster?
        /// </summary>
        public readonly bool HttpApplicationRoutingEnabled;
        /// <summary>
        /// The Zone Name of the HTTP Application Routing.
        /// </summary>
        public readonly string HttpApplicationRoutingZoneName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An `identity` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterIdentityResult> Identities;
        /// <summary>
        /// An `ingress_application_gateway` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterIngressApplicationGatewayResult> IngressApplicationGateways;
        /// <summary>
        /// A `key_management_service` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterKeyManagementServiceResult> KeyManagementServices;
        /// <summary>
        /// A `key_vault_secrets_provider` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterKeyVaultSecretsProviderResult> KeyVaultSecretsProviders;
        /// <summary>
        /// Raw Kubernetes config for the admin account to be used by [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) and other compatible tools. This is only available when Role Based Access Control with Azure Active Directory is enabled and local accounts are not disabled.
        /// </summary>
        public readonly string KubeAdminConfigRaw;
        /// <summary>
        /// A `kube_admin_config` block as defined below. This is only available when Role Based Access Control with Azure Active Directory is enabled and local accounts are not disabled.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterKubeAdminConfigResult> KubeAdminConfigs;
        /// <summary>
        /// Base64 encoded Kubernetes configuration.
        /// </summary>
        public readonly string KubeConfigRaw;
        /// <summary>
        /// A `kube_config` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterKubeConfigResult> KubeConfigs;
        /// <summary>
        /// A `kubelet_identity` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterKubeletIdentityResult> KubeletIdentities;
        /// <summary>
        /// The version of Kubernetes used on the managed Kubernetes Cluster.
        /// </summary>
        public readonly string KubernetesVersion;
        /// <summary>
        /// A `linux_profile` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterLinuxProfileResult> LinuxProfiles;
        /// <summary>
        /// The Azure Region in which the managed Kubernetes Cluster exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// A `microsoft_defender` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterMicrosoftDefenderResult> MicrosoftDefenders;
        /// <summary>
        /// The name assigned to this pool of agents.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A `network_profile` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterNetworkProfileResult> NetworkProfiles;
        /// <summary>
        /// Auto-generated Resource Group containing AKS Cluster resources.
        /// </summary>
        public readonly string NodeResourceGroup;
        /// <summary>
        /// The ID of the Resource Group containing the resources for this Managed Kubernetes Cluster.
        /// </summary>
        public readonly string NodeResourceGroupId;
        /// <summary>
        /// Whether or not the OIDC feature is enabled or disabled.
        /// </summary>
        public readonly bool OidcIssuerEnabled;
        /// <summary>
        /// The OIDC issuer URL that is associated with the cluster.
        /// </summary>
        public readonly string OidcIssuerUrl;
        /// <summary>
        /// An `oms_agent` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterOmsAgentResult> OmsAgents;
        /// <summary>
        /// Is Open Service Mesh enabled for this managed Kubernetes Cluster?
        /// </summary>
        public readonly bool OpenServiceMeshEnabled;
        /// <summary>
        /// If the cluster has the Kubernetes API only exposed on internal IP addresses.
        /// </summary>
        public readonly bool PrivateClusterEnabled;
        /// <summary>
        /// The FQDN of this Kubernetes Cluster when private link has been enabled. This name is only resolvable inside the Virtual Network where the Azure Kubernetes Service is located
        /// </summary>
        public readonly string PrivateFqdn;
        public readonly string ResourceGroupName;
        /// <summary>
        /// Is Role Based Access Control enabled for this managed Kubernetes Cluster?
        /// </summary>
        public readonly bool RoleBasedAccessControlEnabled;
        public readonly ImmutableArray<Outputs.GetKubernetesClusterServiceMeshProfileResult> ServiceMeshProfiles;
        /// <summary>
        /// A `service_principal` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterServicePrincipalResult> ServicePrincipals;
        /// <summary>
        /// A `storage_profile` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterStorageProfileResult> StorageProfiles;
        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// A `windows_profile` block as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubernetesClusterWindowsProfileResult> WindowsProfiles;

        [OutputConstructor]
        private GetKubernetesClusterResult(
            ImmutableArray<Outputs.GetKubernetesClusterAciConnectorLinuxResult> aciConnectorLinuxes,

            ImmutableArray<Outputs.GetKubernetesClusterAgentPoolProfileResult> agentPoolProfiles,

            ImmutableArray<string> apiServerAuthorizedIpRanges,

            ImmutableArray<Outputs.GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControlResult> azureActiveDirectoryRoleBasedAccessControls,

            bool azurePolicyEnabled,

            ImmutableArray<string> customCaTrustCertificatesBase64s,

            string diskEncryptionSetId,

            string dnsPrefix,

            string fqdn,

            bool httpApplicationRoutingEnabled,

            string httpApplicationRoutingZoneName,

            string id,

            ImmutableArray<Outputs.GetKubernetesClusterIdentityResult> identities,

            ImmutableArray<Outputs.GetKubernetesClusterIngressApplicationGatewayResult> ingressApplicationGateways,

            ImmutableArray<Outputs.GetKubernetesClusterKeyManagementServiceResult> keyManagementServices,

            ImmutableArray<Outputs.GetKubernetesClusterKeyVaultSecretsProviderResult> keyVaultSecretsProviders,

            string kubeAdminConfigRaw,

            ImmutableArray<Outputs.GetKubernetesClusterKubeAdminConfigResult> kubeAdminConfigs,

            string kubeConfigRaw,

            ImmutableArray<Outputs.GetKubernetesClusterKubeConfigResult> kubeConfigs,

            ImmutableArray<Outputs.GetKubernetesClusterKubeletIdentityResult> kubeletIdentities,

            string kubernetesVersion,

            ImmutableArray<Outputs.GetKubernetesClusterLinuxProfileResult> linuxProfiles,

            string location,

            ImmutableArray<Outputs.GetKubernetesClusterMicrosoftDefenderResult> microsoftDefenders,

            string name,

            ImmutableArray<Outputs.GetKubernetesClusterNetworkProfileResult> networkProfiles,

            string nodeResourceGroup,

            string nodeResourceGroupId,

            bool oidcIssuerEnabled,

            string oidcIssuerUrl,

            ImmutableArray<Outputs.GetKubernetesClusterOmsAgentResult> omsAgents,

            bool openServiceMeshEnabled,

            bool privateClusterEnabled,

            string privateFqdn,

            string resourceGroupName,

            bool roleBasedAccessControlEnabled,

            ImmutableArray<Outputs.GetKubernetesClusterServiceMeshProfileResult> serviceMeshProfiles,

            ImmutableArray<Outputs.GetKubernetesClusterServicePrincipalResult> servicePrincipals,

            ImmutableArray<Outputs.GetKubernetesClusterStorageProfileResult> storageProfiles,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<Outputs.GetKubernetesClusterWindowsProfileResult> windowsProfiles)
        {
            AciConnectorLinuxes = aciConnectorLinuxes;
            AgentPoolProfiles = agentPoolProfiles;
            ApiServerAuthorizedIpRanges = apiServerAuthorizedIpRanges;
            AzureActiveDirectoryRoleBasedAccessControls = azureActiveDirectoryRoleBasedAccessControls;
            AzurePolicyEnabled = azurePolicyEnabled;
            CustomCaTrustCertificatesBase64s = customCaTrustCertificatesBase64s;
            DiskEncryptionSetId = diskEncryptionSetId;
            DnsPrefix = dnsPrefix;
            Fqdn = fqdn;
            HttpApplicationRoutingEnabled = httpApplicationRoutingEnabled;
            HttpApplicationRoutingZoneName = httpApplicationRoutingZoneName;
            Id = id;
            Identities = identities;
            IngressApplicationGateways = ingressApplicationGateways;
            KeyManagementServices = keyManagementServices;
            KeyVaultSecretsProviders = keyVaultSecretsProviders;
            KubeAdminConfigRaw = kubeAdminConfigRaw;
            KubeAdminConfigs = kubeAdminConfigs;
            KubeConfigRaw = kubeConfigRaw;
            KubeConfigs = kubeConfigs;
            KubeletIdentities = kubeletIdentities;
            KubernetesVersion = kubernetesVersion;
            LinuxProfiles = linuxProfiles;
            Location = location;
            MicrosoftDefenders = microsoftDefenders;
            Name = name;
            NetworkProfiles = networkProfiles;
            NodeResourceGroup = nodeResourceGroup;
            NodeResourceGroupId = nodeResourceGroupId;
            OidcIssuerEnabled = oidcIssuerEnabled;
            OidcIssuerUrl = oidcIssuerUrl;
            OmsAgents = omsAgents;
            OpenServiceMeshEnabled = openServiceMeshEnabled;
            PrivateClusterEnabled = privateClusterEnabled;
            PrivateFqdn = privateFqdn;
            ResourceGroupName = resourceGroupName;
            RoleBasedAccessControlEnabled = roleBasedAccessControlEnabled;
            ServiceMeshProfiles = serviceMeshProfiles;
            ServicePrincipals = servicePrincipals;
            StorageProfiles = storageProfiles;
            Tags = tags;
            WindowsProfiles = windowsProfiles;
        }
    }
}
