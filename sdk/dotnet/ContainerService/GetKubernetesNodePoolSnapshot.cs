// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    public static class GetKubernetesNodePoolSnapshot
    {
        /// <summary>
        /// Use this data source to access information about an existing Kubernetes Node Pool Snapshot.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ContainerService.GetKubernetesNodePoolSnapshot.Invoke(new()
        ///     {
        ///         Name = "example",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKubernetesNodePoolSnapshotResult> InvokeAsync(GetKubernetesNodePoolSnapshotArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKubernetesNodePoolSnapshotResult>("azure:containerservice/getKubernetesNodePoolSnapshot:getKubernetesNodePoolSnapshot", args ?? new GetKubernetesNodePoolSnapshotArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Kubernetes Node Pool Snapshot.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ContainerService.GetKubernetesNodePoolSnapshot.Invoke(new()
        ///     {
        ///         Name = "example",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKubernetesNodePoolSnapshotResult> Invoke(GetKubernetesNodePoolSnapshotInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKubernetesNodePoolSnapshotResult>("azure:containerservice/getKubernetesNodePoolSnapshot:getKubernetesNodePoolSnapshot", args ?? new GetKubernetesNodePoolSnapshotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKubernetesNodePoolSnapshotArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Kubernetes Node Pool Snapshot.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Kubernetes Node Pool Snapshot exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetKubernetesNodePoolSnapshotArgs()
        {
        }
        public static new GetKubernetesNodePoolSnapshotArgs Empty => new GetKubernetesNodePoolSnapshotArgs();
    }

    public sealed class GetKubernetesNodePoolSnapshotInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Kubernetes Node Pool Snapshot.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Kubernetes Node Pool Snapshot exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetKubernetesNodePoolSnapshotInvokeArgs()
        {
        }
        public static new GetKubernetesNodePoolSnapshotInvokeArgs Empty => new GetKubernetesNodePoolSnapshotInvokeArgs();
    }


    [OutputType]
    public sealed class GetKubernetesNodePoolSnapshotResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The ID of the source Node Pool.
        /// </summary>
        public readonly string SourceNodePoolId;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetKubernetesNodePoolSnapshotResult(
            string id,

            string name,

            string resourceGroupName,

            string sourceNodePoolId,

            ImmutableDictionary<string, string> tags)
        {
            Id = id;
            Name = name;
            ResourceGroupName = resourceGroupName;
            SourceNodePoolId = sourceNodePoolId;
            Tags = tags;
        }
    }
}
