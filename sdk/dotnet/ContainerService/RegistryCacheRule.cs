// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    /// <summary>
    /// Manages an Azure Container Registry Cache Rule.
    /// 
    /// &gt; **Note:** All arguments including the access key will be stored in the raw state as plain-text.
    /// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var acr = new Azure.ContainerService.Registry("acr", new()
    ///     {
    ///         Name = "containerRegistry1",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         Sku = "Basic",
    ///     });
    /// 
    ///     var cacheRule = new Azure.ContainerService.RegistryCacheRule("cache_rule", new()
    ///     {
    ///         Name = "cacherule",
    ///         ContainerRegistryId = acr.Id,
    ///         TargetRepo = "target",
    ///         SourceRepo = "docker.io/hello-world",
    ///         CredentialSetId = acr.Id.Apply(id =&gt; $"{id}/credentialSets/example"),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.ContainerRegistry` - 2023-07-01
    /// 
    /// ## Import
    /// 
    /// Container Registry Cache Rules can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:containerservice/registryCacheRule:RegistryCacheRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/myRegistry/cacheRules/myCacheRule
    /// ```
    /// </summary>
    [AzureResourceType("azure:containerservice/registryCacheRule:RegistryCacheRule")]
    public partial class RegistryCacheRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Container Registry where the Cache Rule should apply. Changing this forces a new resource to be created.
        /// </summary>
        [Output("containerRegistryId")]
        public Output<string> ContainerRegistryId { get; private set; } = null!;

        /// <summary>
        /// The ARM resource ID of the Credential Store which is associated with the Cache Rule.
        /// </summary>
        [Output("credentialSetId")]
        public Output<string?> CredentialSetId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Container Registry Cache Rule. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the source repository path. Changing this forces a new resource to be created.
        /// </summary>
        [Output("sourceRepo")]
        public Output<string> SourceRepo { get; private set; } = null!;

        /// <summary>
        /// The name of the new repository path to store artifacts. Changing this forces a new resource to be created.
        /// </summary>
        [Output("targetRepo")]
        public Output<string> TargetRepo { get; private set; } = null!;


        /// <summary>
        /// Create a RegistryCacheRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegistryCacheRule(string name, RegistryCacheRuleArgs args, CustomResourceOptions? options = null)
            : base("azure:containerservice/registryCacheRule:RegistryCacheRule", name, args ?? new RegistryCacheRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegistryCacheRule(string name, Input<string> id, RegistryCacheRuleState? state = null, CustomResourceOptions? options = null)
            : base("azure:containerservice/registryCacheRule:RegistryCacheRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegistryCacheRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegistryCacheRule Get(string name, Input<string> id, RegistryCacheRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new RegistryCacheRule(name, id, state, options);
        }
    }

    public sealed class RegistryCacheRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Container Registry where the Cache Rule should apply. Changing this forces a new resource to be created.
        /// </summary>
        [Input("containerRegistryId", required: true)]
        public Input<string> ContainerRegistryId { get; set; } = null!;

        /// <summary>
        /// The ARM resource ID of the Credential Store which is associated with the Cache Rule.
        /// </summary>
        [Input("credentialSetId")]
        public Input<string>? CredentialSetId { get; set; }

        /// <summary>
        /// Specifies the name of the Container Registry Cache Rule. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the source repository path. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sourceRepo", required: true)]
        public Input<string> SourceRepo { get; set; } = null!;

        /// <summary>
        /// The name of the new repository path to store artifacts. Changing this forces a new resource to be created.
        /// </summary>
        [Input("targetRepo", required: true)]
        public Input<string> TargetRepo { get; set; } = null!;

        public RegistryCacheRuleArgs()
        {
        }
        public static new RegistryCacheRuleArgs Empty => new RegistryCacheRuleArgs();
    }

    public sealed class RegistryCacheRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Container Registry where the Cache Rule should apply. Changing this forces a new resource to be created.
        /// </summary>
        [Input("containerRegistryId")]
        public Input<string>? ContainerRegistryId { get; set; }

        /// <summary>
        /// The ARM resource ID of the Credential Store which is associated with the Cache Rule.
        /// </summary>
        [Input("credentialSetId")]
        public Input<string>? CredentialSetId { get; set; }

        /// <summary>
        /// Specifies the name of the Container Registry Cache Rule. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the source repository path. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sourceRepo")]
        public Input<string>? SourceRepo { get; set; }

        /// <summary>
        /// The name of the new repository path to store artifacts. Changing this forces a new resource to be created.
        /// </summary>
        [Input("targetRepo")]
        public Input<string>? TargetRepo { get; set; }

        public RegistryCacheRuleState()
        {
        }
        public static new RegistryCacheRuleState Empty => new RegistryCacheRuleState();
    }
}
