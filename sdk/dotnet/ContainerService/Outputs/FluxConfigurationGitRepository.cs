// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService.Outputs
{

    [OutputType]
    public sealed class FluxConfigurationGitRepository
    {
        /// <summary>
        /// Specifies the Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS.
        /// </summary>
        public readonly string? HttpsCaCertBase64;
        /// <summary>
        /// Specifies the Base64-encoded HTTPS personal access token or password that will be used to access the repository.
        /// </summary>
        public readonly string? HttpsKeyBase64;
        /// <summary>
        /// Specifies the plaintext HTTPS username used to access private git repositories over HTTPS.
        /// </summary>
        public readonly string? HttpsUser;
        /// <summary>
        /// Specifies the name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. It must be between 1 and 63 characters. It can contain only lowercase letters, numbers, and hyphens (-). It must start and end with a lowercase letter or number.
        /// </summary>
        public readonly string? LocalAuthReference;
        /// <summary>
        /// Specifies the OIDC provider used for workload identity federation authentication against git repositories. Possible values are `Azure`, `Generic`.
        /// </summary>
        public readonly string? Provider;
        /// <summary>
        /// Specifies the source reference type for the GitRepository object. Possible values are `branch`, `commit`, `semver` and `tag`.
        /// </summary>
        public readonly string ReferenceType;
        /// <summary>
        /// Specifies the source reference value for the GitRepository object.
        /// </summary>
        public readonly string ReferenceValue;
        /// <summary>
        /// Specifies the Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH.
        /// </summary>
        public readonly string? SshKnownHostsBase64;
        /// <summary>
        /// Specifies the Base64-encoded SSH private key in PEM format.
        /// </summary>
        public readonly string? SshPrivateKeyBase64;
        /// <summary>
        /// Specifies the interval at which to re-reconcile the cluster git repository source with the remote. Defaults to `600`.
        /// </summary>
        public readonly int? SyncIntervalInSeconds;
        /// <summary>
        /// Specifies the maximum time to attempt to reconcile the cluster git repository source with the remote. Defaults to `600`.
        /// </summary>
        public readonly int? TimeoutInSeconds;
        /// <summary>
        /// Specifies the URL to sync for the flux configuration git repository. It must start with `http://`, `https://`, `git@` or `ssh://`.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private FluxConfigurationGitRepository(
            string? httpsCaCertBase64,

            string? httpsKeyBase64,

            string? httpsUser,

            string? localAuthReference,

            string? provider,

            string referenceType,

            string referenceValue,

            string? sshKnownHostsBase64,

            string? sshPrivateKeyBase64,

            int? syncIntervalInSeconds,

            int? timeoutInSeconds,

            string url)
        {
            HttpsCaCertBase64 = httpsCaCertBase64;
            HttpsKeyBase64 = httpsKeyBase64;
            HttpsUser = httpsUser;
            LocalAuthReference = localAuthReference;
            Provider = provider;
            ReferenceType = referenceType;
            ReferenceValue = referenceValue;
            SshKnownHostsBase64 = sshKnownHostsBase64;
            SshPrivateKeyBase64 = sshPrivateKeyBase64;
            SyncIntervalInSeconds = syncIntervalInSeconds;
            TimeoutInSeconds = timeoutInSeconds;
            Url = url;
        }
    }
}
