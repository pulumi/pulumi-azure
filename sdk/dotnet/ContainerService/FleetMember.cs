// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    /// <summary>
    /// &lt;!-- Note: This documentation is generated. Any manual changes will be overwritten --&gt;
    /// 
    /// Manages a Kubernetes Fleet Member.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var example = new Azure.Containerservice.KubernetesCluster.KubernetesCluster("example", new()
    ///     {
    ///         Name = "example",
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         DnsPrefix = "acctestaksexample",
    ///         DefaultNodePool = 
    ///         {
    ///             { "name", "example-value" },
    ///             { "nodeCount", "example-value" },
    ///             { "vmSize", "example-value" },
    ///         },
    ///         Identity = 
    ///         {
    ///             { "type", "example-value" },
    ///         },
    ///     });
    /// 
    ///     var exampleKubernetesFleetManager = new Azure.Containerservice.KubernetesFleetManager.KubernetesFleetManager("example", new()
    ///     {
    ///         Name = "example",
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         HubProfile = 
    ///         {
    ///             { "dnsPrefix", "val-example" },
    ///         },
    ///     });
    /// 
    ///     var exampleFleetMember = new Azure.Containerservice.FleetMember.FleetMember("example", new()
    ///     {
    ///         KubernetesClusterId = example.Id,
    ///         KubernetesFleetId = exampleKubernetesFleetManager.Id,
    ///         Name = "example",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing Kubernetes Fleet Member can be imported into Terraform using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:containerservice/fleetMember:FleetMember example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/members/{memberName}
    /// ```
    /// 
    ///  * Where `{subscriptionId}` is the ID of the Azure Subscription where the Kubernetes Fleet Member exists. For example `12345678-1234-9876-4563-123456789012`.
    /// 
    ///  * Where `{resourceGroupName}` is the name of Resource Group where this Kubernetes Fleet Member exists. For example `example-resource-group`.
    /// 
    ///  * Where `{fleetName}` is the name of the Fleet. For example `fleetValue`.
    /// 
    ///  * Where `{memberName}` is the name of the Member. For example `memberValue`.
    /// </summary>
    [AzureResourceType("azure:containerservice/fleetMember:FleetMember")]
    public partial class FleetMember : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The group this member belongs to for multi-cluster update management.
        /// </summary>
        [Output("group")]
        public Output<string?> Group { get; private set; } = null!;

        /// <summary>
        /// The ARM resource ID of the cluster that joins the Fleet. Changing this forces a new Kubernetes Fleet Member to be created.
        /// </summary>
        [Output("kubernetesClusterId")]
        public Output<string> KubernetesClusterId { get; private set; } = null!;

        /// <summary>
        /// Specifies the Kubernetes Fleet Id within which this Kubernetes Fleet Member should exist. Changing this forces a new Kubernetes Fleet Member to be created.
        /// </summary>
        [Output("kubernetesFleetId")]
        public Output<string> KubernetesFleetId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of this Kubernetes Fleet Member. Changing this forces a new Kubernetes Fleet Member to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a FleetMember resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FleetMember(string name, FleetMemberArgs args, CustomResourceOptions? options = null)
            : base("azure:containerservice/fleetMember:FleetMember", name, args ?? new FleetMemberArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FleetMember(string name, Input<string> id, FleetMemberState? state = null, CustomResourceOptions? options = null)
            : base("azure:containerservice/fleetMember:FleetMember", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FleetMember resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FleetMember Get(string name, Input<string> id, FleetMemberState? state = null, CustomResourceOptions? options = null)
        {
            return new FleetMember(name, id, state, options);
        }
    }

    public sealed class FleetMemberArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The group this member belongs to for multi-cluster update management.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// The ARM resource ID of the cluster that joins the Fleet. Changing this forces a new Kubernetes Fleet Member to be created.
        /// </summary>
        [Input("kubernetesClusterId", required: true)]
        public Input<string> KubernetesClusterId { get; set; } = null!;

        /// <summary>
        /// Specifies the Kubernetes Fleet Id within which this Kubernetes Fleet Member should exist. Changing this forces a new Kubernetes Fleet Member to be created.
        /// </summary>
        [Input("kubernetesFleetId", required: true)]
        public Input<string> KubernetesFleetId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of this Kubernetes Fleet Member. Changing this forces a new Kubernetes Fleet Member to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public FleetMemberArgs()
        {
        }
        public static new FleetMemberArgs Empty => new FleetMemberArgs();
    }

    public sealed class FleetMemberState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The group this member belongs to for multi-cluster update management.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// The ARM resource ID of the cluster that joins the Fleet. Changing this forces a new Kubernetes Fleet Member to be created.
        /// </summary>
        [Input("kubernetesClusterId")]
        public Input<string>? KubernetesClusterId { get; set; }

        /// <summary>
        /// Specifies the Kubernetes Fleet Id within which this Kubernetes Fleet Member should exist. Changing this forces a new Kubernetes Fleet Member to be created.
        /// </summary>
        [Input("kubernetesFleetId")]
        public Input<string>? KubernetesFleetId { get; set; }

        /// <summary>
        /// Specifies the name of this Kubernetes Fleet Member. Changing this forces a new Kubernetes Fleet Member to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public FleetMemberState()
        {
        }
        public static new FleetMemberState Empty => new FleetMemberState();
    }
}
