// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    /// <summary>
    /// Manages a Container Connected Registry.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleRegistry = new Azure.ContainerService.Registry("exampleRegistry", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Sku = "Premium",
    ///         DataEndpointEnabled = true,
    ///     });
    /// 
    ///     var exampleRegistryScopeMap = new Azure.ContainerService.RegistryScopeMap("exampleRegistryScopeMap", new()
    ///     {
    ///         ContainerRegistryName = exampleRegistry.Name,
    ///         ResourceGroupName = exampleRegistry.ResourceGroupName,
    ///         Actions = new[]
    ///         {
    ///             "repositories/hello-world/content/delete",
    ///             "repositories/hello-world/content/read",
    ///             "repositories/hello-world/content/write",
    ///             "repositories/hello-world/metadata/read",
    ///             "repositories/hello-world/metadata/write",
    ///             "gateway/examplecr/config/read",
    ///             "gateway/examplecr/config/write",
    ///             "gateway/examplecr/message/read",
    ///             "gateway/examplecr/message/write",
    ///         },
    ///     });
    /// 
    ///     var exampleRegistryToken = new Azure.ContainerService.RegistryToken("exampleRegistryToken", new()
    ///     {
    ///         ContainerRegistryName = exampleRegistry.Name,
    ///         ResourceGroupName = exampleRegistry.ResourceGroupName,
    ///         ScopeMapId = exampleRegistryScopeMap.Id,
    ///     });
    /// 
    ///     var exampleConnectedRegistry = new Azure.ContainerService.ConnectedRegistry("exampleConnectedRegistry", new()
    ///     {
    ///         ContainerRegistryId = exampleRegistry.Id,
    ///         SyncTokenId = exampleRegistryToken.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Container Connected Registries can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:containerservice/connectedRegistry:ConnectedRegistry example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.ContainerRegistry/registries/registry1/connectedRegistries/registry1
    /// ```
    /// </summary>
    [AzureResourceType("azure:containerservice/connectedRegistry:ConnectedRegistry")]
    public partial class ConnectedRegistry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Should the log auditing be enabled?
        /// </summary>
        [Output("auditLogEnabled")]
        public Output<bool?> AuditLogEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
        /// </summary>
        [Output("clientTokenIds")]
        public Output<ImmutableArray<string>> ClientTokenIds { get; private set; } = null!;

        /// <summary>
        /// The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
        /// 
        /// &gt; If `parent_registry_id` is not specified, the Connected Registry will be connected to the Container Registry identified by `container_registry_id`.
        /// </summary>
        [Output("containerRegistryId")]
        public Output<string> ContainerRegistryId { get; private set; } = null!;

        /// <summary>
        /// The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
        /// </summary>
        [Output("logLevel")]
        public Output<string?> LogLevel { get; private set; } = null!;

        /// <summary>
        /// The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more `notification` blocks as defined below.
        /// </summary>
        [Output("notifications")]
        public Output<ImmutableArray<Outputs.ConnectedRegistryNotification>> Notifications { get; private set; } = null!;

        /// <summary>
        /// The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
        /// </summary>
        [Output("parentRegistryId")]
        public Output<string?> ParentRegistryId { get; private set; } = null!;

        /// <summary>
        /// The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
        /// </summary>
        [Output("syncMessageTtl")]
        public Output<string?> SyncMessageTtl { get; private set; } = null!;

        /// <summary>
        /// The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
        /// </summary>
        [Output("syncSchedule")]
        public Output<string?> SyncSchedule { get; private set; } = null!;

        /// <summary>
        /// The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
        /// </summary>
        [Output("syncTokenId")]
        public Output<string> SyncTokenId { get; private set; } = null!;

        /// <summary>
        /// The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
        /// </summary>
        [Output("syncWindow")]
        public Output<string?> SyncWindow { get; private set; } = null!;


        /// <summary>
        /// Create a ConnectedRegistry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConnectedRegistry(string name, ConnectedRegistryArgs args, CustomResourceOptions? options = null)
            : base("azure:containerservice/connectedRegistry:ConnectedRegistry", name, args ?? new ConnectedRegistryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConnectedRegistry(string name, Input<string> id, ConnectedRegistryState? state = null, CustomResourceOptions? options = null)
            : base("azure:containerservice/connectedRegistry:ConnectedRegistry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConnectedRegistry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConnectedRegistry Get(string name, Input<string> id, ConnectedRegistryState? state = null, CustomResourceOptions? options = null)
        {
            return new ConnectedRegistry(name, id, state, options);
        }
    }

    public sealed class ConnectedRegistryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Should the log auditing be enabled?
        /// </summary>
        [Input("auditLogEnabled")]
        public Input<bool>? AuditLogEnabled { get; set; }

        [Input("clientTokenIds")]
        private InputList<string>? _clientTokenIds;

        /// <summary>
        /// Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
        /// </summary>
        public InputList<string> ClientTokenIds
        {
            get => _clientTokenIds ?? (_clientTokenIds = new InputList<string>());
            set => _clientTokenIds = value;
        }

        /// <summary>
        /// The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
        /// 
        /// &gt; If `parent_registry_id` is not specified, the Connected Registry will be connected to the Container Registry identified by `container_registry_id`.
        /// </summary>
        [Input("containerRegistryId", required: true)]
        public Input<string> ContainerRegistryId { get; set; } = null!;

        /// <summary>
        /// The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
        /// </summary>
        [Input("logLevel")]
        public Input<string>? LogLevel { get; set; }

        /// <summary>
        /// The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications")]
        private InputList<Inputs.ConnectedRegistryNotificationArgs>? _notifications;

        /// <summary>
        /// One or more `notification` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ConnectedRegistryNotificationArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.ConnectedRegistryNotificationArgs>());
            set => _notifications = value;
        }

        /// <summary>
        /// The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
        /// </summary>
        [Input("parentRegistryId")]
        public Input<string>? ParentRegistryId { get; set; }

        /// <summary>
        /// The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
        /// </summary>
        [Input("syncMessageTtl")]
        public Input<string>? SyncMessageTtl { get; set; }

        /// <summary>
        /// The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
        /// </summary>
        [Input("syncSchedule")]
        public Input<string>? SyncSchedule { get; set; }

        /// <summary>
        /// The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
        /// </summary>
        [Input("syncTokenId", required: true)]
        public Input<string> SyncTokenId { get; set; } = null!;

        /// <summary>
        /// The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
        /// </summary>
        [Input("syncWindow")]
        public Input<string>? SyncWindow { get; set; }

        public ConnectedRegistryArgs()
        {
        }
        public static new ConnectedRegistryArgs Empty => new ConnectedRegistryArgs();
    }

    public sealed class ConnectedRegistryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Should the log auditing be enabled?
        /// </summary>
        [Input("auditLogEnabled")]
        public Input<bool>? AuditLogEnabled { get; set; }

        [Input("clientTokenIds")]
        private InputList<string>? _clientTokenIds;

        /// <summary>
        /// Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
        /// </summary>
        public InputList<string> ClientTokenIds
        {
            get => _clientTokenIds ?? (_clientTokenIds = new InputList<string>());
            set => _clientTokenIds = value;
        }

        /// <summary>
        /// The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
        /// 
        /// &gt; If `parent_registry_id` is not specified, the Connected Registry will be connected to the Container Registry identified by `container_registry_id`.
        /// </summary>
        [Input("containerRegistryId")]
        public Input<string>? ContainerRegistryId { get; set; }

        /// <summary>
        /// The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
        /// </summary>
        [Input("logLevel")]
        public Input<string>? LogLevel { get; set; }

        /// <summary>
        /// The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications")]
        private InputList<Inputs.ConnectedRegistryNotificationGetArgs>? _notifications;

        /// <summary>
        /// One or more `notification` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ConnectedRegistryNotificationGetArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.ConnectedRegistryNotificationGetArgs>());
            set => _notifications = value;
        }

        /// <summary>
        /// The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
        /// </summary>
        [Input("parentRegistryId")]
        public Input<string>? ParentRegistryId { get; set; }

        /// <summary>
        /// The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
        /// </summary>
        [Input("syncMessageTtl")]
        public Input<string>? SyncMessageTtl { get; set; }

        /// <summary>
        /// The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
        /// </summary>
        [Input("syncSchedule")]
        public Input<string>? SyncSchedule { get; set; }

        /// <summary>
        /// The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
        /// </summary>
        [Input("syncTokenId")]
        public Input<string>? SyncTokenId { get; set; }

        /// <summary>
        /// The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
        /// </summary>
        [Input("syncWindow")]
        public Input<string>? SyncWindow { get; set; }

        public ConnectedRegistryState()
        {
        }
        public static new ConnectedRegistryState Empty => new ConnectedRegistryState();
    }
}
