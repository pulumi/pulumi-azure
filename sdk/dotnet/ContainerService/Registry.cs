// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    /// <summary>
    /// Manages an Azure Container Registry.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var acr = new Azure.ContainerService.Registry("acr", new()
    ///     {
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         Sku = "Premium",
    ///         AdminEnabled = false,
    ///         Georeplications = new[]
    ///         {
    ///             new Azure.ContainerService.Inputs.RegistryGeoreplicationArgs
    ///             {
    ///                 Location = "East US",
    ///                 ZoneRedundancyEnabled = true,
    ///                 Tags = null,
    ///             },
    ///             new Azure.ContainerService.Inputs.RegistryGeoreplicationArgs
    ///             {
    ///                 Location = "North Europe",
    ///                 ZoneRedundancyEnabled = true,
    ///                 Tags = null,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Encryption)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleUserAssignedIdentity = new Azure.Authorization.UserAssignedIdentity("exampleUserAssignedIdentity", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///     });
    /// 
    ///     var exampleKey = Azure.KeyVault.GetKey.Invoke(new()
    ///     {
    ///         Name = "super-secret",
    ///         KeyVaultId = data.Azurerm_key_vault.Existing.Id,
    ///     });
    /// 
    ///     var acr = new Azure.ContainerService.Registry("acr", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Sku = "Premium",
    ///         Identity = new Azure.ContainerService.Inputs.RegistryIdentityArgs
    ///         {
    ///             Type = "UserAssigned",
    ///             IdentityIds = new[]
    ///             {
    ///                 exampleUserAssignedIdentity.Id,
    ///             },
    ///         },
    ///         Encryption = new Azure.ContainerService.Inputs.RegistryEncryptionArgs
    ///         {
    ///             Enabled = true,
    ///             KeyVaultKeyId = exampleKey.Apply(getKeyResult =&gt; getKeyResult.Id),
    ///             IdentityClientId = exampleUserAssignedIdentity.ClientId,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Attaching A Container Registry To A Kubernetes Cluster)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleRegistry = new Azure.ContainerService.Registry("exampleRegistry", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Sku = "Premium",
    ///     });
    /// 
    ///     var exampleKubernetesCluster = new Azure.ContainerService.KubernetesCluster("exampleKubernetesCluster", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         DnsPrefix = "exampleaks1",
    ///         DefaultNodePool = new Azure.ContainerService.Inputs.KubernetesClusterDefaultNodePoolArgs
    ///         {
    ///             Name = "default",
    ///             NodeCount = 1,
    ///             VmSize = "Standard_D2_v2",
    ///         },
    ///         Identity = new Azure.ContainerService.Inputs.KubernetesClusterIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Environment", "Production" },
    ///         },
    ///     });
    /// 
    ///     var exampleAssignment = new Azure.Authorization.Assignment("exampleAssignment", new()
    ///     {
    ///         PrincipalId = exampleKubernetesCluster.KubeletIdentity.Apply(kubeletIdentity =&gt; kubeletIdentity.ObjectId),
    ///         RoleDefinitionName = "AcrPull",
    ///         Scope = exampleRegistry.Id,
    ///         SkipServicePrincipalAadCheck = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Container Registries can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:containerservice/registry:Registry example /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/mygroup1/providers/Microsoft.ContainerRegistry/registries/myregistry1
    /// ```
    /// </summary>
    [AzureResourceType("azure:containerservice/registry:Registry")]
    public partial class Registry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether the admin user is enabled. Defaults to `false`.
        /// </summary>
        [Output("adminEnabled")]
        public Output<bool?> AdminEnabled { get; private set; } = null!;

        /// <summary>
        /// The Password associated with the Container Registry Admin account - if the admin account is enabled.
        /// </summary>
        [Output("adminPassword")]
        public Output<string> AdminPassword { get; private set; } = null!;

        /// <summary>
        /// The Username associated with the Container Registry Admin account - if the admin account is enabled.
        /// </summary>
        [Output("adminUsername")]
        public Output<string> AdminUsername { get; private set; } = null!;

        /// <summary>
        /// Whether allows anonymous (unauthenticated) pull access to this Container Registry? Defaults to `false`. This is only supported on resources with the `Standard` or `Premium` SKU.
        /// </summary>
        [Output("anonymousPullEnabled")]
        public Output<bool?> AnonymousPullEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether to enable dedicated data endpoints for this Container Registry? Defaults to `false`. This is only supported on resources with the `Premium` SKU.
        /// </summary>
        [Output("dataEndpointEnabled")]
        public Output<bool?> DataEndpointEnabled { get; private set; } = null!;

        /// <summary>
        /// An `encryption` block as documented below.
        /// </summary>
        [Output("encryption")]
        public Output<Outputs.RegistryEncryption> Encryption { get; private set; } = null!;

        /// <summary>
        /// Boolean value that indicates whether export policy is enabled. Defaults to `true`. In order to set it to `false`, make sure the `public_network_access_enabled` is also set to `false`.
        /// </summary>
        [Output("exportPolicyEnabled")]
        public Output<bool?> ExportPolicyEnabled { get; private set; } = null!;

        /// <summary>
        /// A `georeplications` block as documented below.
        /// </summary>
        [Output("georeplications")]
        public Output<ImmutableArray<Outputs.RegistryGeoreplication>> Georeplications { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.RegistryIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The URL that can be used to log into the container registry.
        /// </summary>
        [Output("loginServer")]
        public Output<string> LoginServer { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Container Registry. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether to allow trusted Azure services to access a network restricted Container Registry? Possible values are `None` and `AzureServices`. Defaults to `AzureServices`.
        /// </summary>
        [Output("networkRuleBypassOption")]
        public Output<string?> NetworkRuleBypassOption { get; private set; } = null!;

        /// <summary>
        /// A `network_rule_set` block as documented below.
        /// </summary>
        [Output("networkRuleSet")]
        public Output<Outputs.RegistryNetworkRuleSet> NetworkRuleSet { get; private set; } = null!;

        /// <summary>
        /// Whether public network access is allowed for the container registry. Defaults to `true`.
        /// </summary>
        [Output("publicNetworkAccessEnabled")]
        public Output<bool?> PublicNetworkAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// Boolean value that indicates whether quarantine policy is enabled. Defaults to `false`.
        /// </summary>
        [Output("quarantinePolicyEnabled")]
        public Output<bool?> QuarantinePolicyEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `retention_policy` block as documented below.
        /// </summary>
        [Output("retentionPolicy")]
        public Output<Outputs.RegistryRetentionPolicy> RetentionPolicy { get; private set; } = null!;

        /// <summary>
        /// The SKU name of the container registry. Possible values are  `Basic`, `Standard` and `Premium`.
        /// </summary>
        [Output("sku")]
        public Output<string> Sku { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A `trust_policy` block as documented below.
        /// </summary>
        [Output("trustPolicy")]
        public Output<Outputs.RegistryTrustPolicy> TrustPolicy { get; private set; } = null!;

        /// <summary>
        /// Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to `false`.
        /// </summary>
        [Output("zoneRedundancyEnabled")]
        public Output<bool?> ZoneRedundancyEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a Registry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Registry(string name, RegistryArgs args, CustomResourceOptions? options = null)
            : base("azure:containerservice/registry:Registry", name, args ?? new RegistryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Registry(string name, Input<string> id, RegistryState? state = null, CustomResourceOptions? options = null)
            : base("azure:containerservice/registry:Registry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "adminPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Registry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Registry Get(string name, Input<string> id, RegistryState? state = null, CustomResourceOptions? options = null)
        {
            return new Registry(name, id, state, options);
        }
    }

    public sealed class RegistryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether the admin user is enabled. Defaults to `false`.
        /// </summary>
        [Input("adminEnabled")]
        public Input<bool>? AdminEnabled { get; set; }

        /// <summary>
        /// Whether allows anonymous (unauthenticated) pull access to this Container Registry? Defaults to `false`. This is only supported on resources with the `Standard` or `Premium` SKU.
        /// </summary>
        [Input("anonymousPullEnabled")]
        public Input<bool>? AnonymousPullEnabled { get; set; }

        /// <summary>
        /// Whether to enable dedicated data endpoints for this Container Registry? Defaults to `false`. This is only supported on resources with the `Premium` SKU.
        /// </summary>
        [Input("dataEndpointEnabled")]
        public Input<bool>? DataEndpointEnabled { get; set; }

        /// <summary>
        /// An `encryption` block as documented below.
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.RegistryEncryptionArgs>? Encryption { get; set; }

        /// <summary>
        /// Boolean value that indicates whether export policy is enabled. Defaults to `true`. In order to set it to `false`, make sure the `public_network_access_enabled` is also set to `false`.
        /// </summary>
        [Input("exportPolicyEnabled")]
        public Input<bool>? ExportPolicyEnabled { get; set; }

        [Input("georeplications")]
        private InputList<Inputs.RegistryGeoreplicationArgs>? _georeplications;

        /// <summary>
        /// A `georeplications` block as documented below.
        /// </summary>
        public InputList<Inputs.RegistryGeoreplicationArgs> Georeplications
        {
            get => _georeplications ?? (_georeplications = new InputList<Inputs.RegistryGeoreplicationArgs>());
            set => _georeplications = value;
        }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.RegistryIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Container Registry. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether to allow trusted Azure services to access a network restricted Container Registry? Possible values are `None` and `AzureServices`. Defaults to `AzureServices`.
        /// </summary>
        [Input("networkRuleBypassOption")]
        public Input<string>? NetworkRuleBypassOption { get; set; }

        /// <summary>
        /// A `network_rule_set` block as documented below.
        /// </summary>
        [Input("networkRuleSet")]
        public Input<Inputs.RegistryNetworkRuleSetArgs>? NetworkRuleSet { get; set; }

        /// <summary>
        /// Whether public network access is allowed for the container registry. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// Boolean value that indicates whether quarantine policy is enabled. Defaults to `false`.
        /// </summary>
        [Input("quarantinePolicyEnabled")]
        public Input<bool>? QuarantinePolicyEnabled { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `retention_policy` block as documented below.
        /// </summary>
        [Input("retentionPolicy")]
        public Input<Inputs.RegistryRetentionPolicyArgs>? RetentionPolicy { get; set; }

        /// <summary>
        /// The SKU name of the container registry. Possible values are  `Basic`, `Standard` and `Premium`.
        /// </summary>
        [Input("sku", required: true)]
        public Input<string> Sku { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `trust_policy` block as documented below.
        /// </summary>
        [Input("trustPolicy")]
        public Input<Inputs.RegistryTrustPolicyArgs>? TrustPolicy { get; set; }

        /// <summary>
        /// Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to `false`.
        /// </summary>
        [Input("zoneRedundancyEnabled")]
        public Input<bool>? ZoneRedundancyEnabled { get; set; }

        public RegistryArgs()
        {
        }
        public static new RegistryArgs Empty => new RegistryArgs();
    }

    public sealed class RegistryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether the admin user is enabled. Defaults to `false`.
        /// </summary>
        [Input("adminEnabled")]
        public Input<bool>? AdminEnabled { get; set; }

        [Input("adminPassword")]
        private Input<string>? _adminPassword;

        /// <summary>
        /// The Password associated with the Container Registry Admin account - if the admin account is enabled.
        /// </summary>
        public Input<string>? AdminPassword
        {
            get => _adminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Username associated with the Container Registry Admin account - if the admin account is enabled.
        /// </summary>
        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        /// <summary>
        /// Whether allows anonymous (unauthenticated) pull access to this Container Registry? Defaults to `false`. This is only supported on resources with the `Standard` or `Premium` SKU.
        /// </summary>
        [Input("anonymousPullEnabled")]
        public Input<bool>? AnonymousPullEnabled { get; set; }

        /// <summary>
        /// Whether to enable dedicated data endpoints for this Container Registry? Defaults to `false`. This is only supported on resources with the `Premium` SKU.
        /// </summary>
        [Input("dataEndpointEnabled")]
        public Input<bool>? DataEndpointEnabled { get; set; }

        /// <summary>
        /// An `encryption` block as documented below.
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.RegistryEncryptionGetArgs>? Encryption { get; set; }

        /// <summary>
        /// Boolean value that indicates whether export policy is enabled. Defaults to `true`. In order to set it to `false`, make sure the `public_network_access_enabled` is also set to `false`.
        /// </summary>
        [Input("exportPolicyEnabled")]
        public Input<bool>? ExportPolicyEnabled { get; set; }

        [Input("georeplications")]
        private InputList<Inputs.RegistryGeoreplicationGetArgs>? _georeplications;

        /// <summary>
        /// A `georeplications` block as documented below.
        /// </summary>
        public InputList<Inputs.RegistryGeoreplicationGetArgs> Georeplications
        {
            get => _georeplications ?? (_georeplications = new InputList<Inputs.RegistryGeoreplicationGetArgs>());
            set => _georeplications = value;
        }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.RegistryIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The URL that can be used to log into the container registry.
        /// </summary>
        [Input("loginServer")]
        public Input<string>? LoginServer { get; set; }

        /// <summary>
        /// Specifies the name of the Container Registry. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether to allow trusted Azure services to access a network restricted Container Registry? Possible values are `None` and `AzureServices`. Defaults to `AzureServices`.
        /// </summary>
        [Input("networkRuleBypassOption")]
        public Input<string>? NetworkRuleBypassOption { get; set; }

        /// <summary>
        /// A `network_rule_set` block as documented below.
        /// </summary>
        [Input("networkRuleSet")]
        public Input<Inputs.RegistryNetworkRuleSetGetArgs>? NetworkRuleSet { get; set; }

        /// <summary>
        /// Whether public network access is allowed for the container registry. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// Boolean value that indicates whether quarantine policy is enabled. Defaults to `false`.
        /// </summary>
        [Input("quarantinePolicyEnabled")]
        public Input<bool>? QuarantinePolicyEnabled { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `retention_policy` block as documented below.
        /// </summary>
        [Input("retentionPolicy")]
        public Input<Inputs.RegistryRetentionPolicyGetArgs>? RetentionPolicy { get; set; }

        /// <summary>
        /// The SKU name of the container registry. Possible values are  `Basic`, `Standard` and `Premium`.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `trust_policy` block as documented below.
        /// </summary>
        [Input("trustPolicy")]
        public Input<Inputs.RegistryTrustPolicyGetArgs>? TrustPolicy { get; set; }

        /// <summary>
        /// Whether zone redundancy is enabled for this Container Registry? Changing this forces a new resource to be created. Defaults to `false`.
        /// </summary>
        [Input("zoneRedundancyEnabled")]
        public Input<bool>? ZoneRedundancyEnabled { get; set; }

        public RegistryState()
        {
        }
        public static new RegistryState Empty => new RegistryState();
    }
}
