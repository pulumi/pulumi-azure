// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    /// <summary>
    /// Manages a Container Registry Credential Set.
    /// 
    /// ## Example Usage
    /// 
    /// ### Minimal)
    /// 
    /// &gt; **Note:** Be aware that you will need to permit the Identity that is created for the Container Registry to have `get` on secrets to the Key Vault, e.g. using the `azure.keyvault.AccessPolicy` resource.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleRegistry = new Azure.ContainerService.Registry("example", new()
    ///     {
    ///         Name = "exampleContainerRegistry",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         Sku = "Basic",
    ///     });
    /// 
    ///     var exampleRegistryCredentialSet = new Azure.ContainerService.RegistryCredentialSet("example", new()
    ///     {
    ///         Name = "exampleCredentialSet",
    ///         ContainerRegistryId = exampleRegistry.Id,
    ///         LoginServer = "docker.io",
    ///         Identity = new Azure.ContainerService.Inputs.RegistryCredentialSetIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///         AuthenticationCredentials = new Azure.ContainerService.Inputs.RegistryCredentialSetAuthenticationCredentialsArgs
    ///         {
    ///             UsernameSecretId = "https://example-keyvault.vault.azure.net/secrets/example-user-name",
    ///             PasswordSecretId = "https://example-keyvault.vault.azure.net/secrets/example-user-password",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Full)
    /// 
    /// This example provisions a key vault with two secrets, a container registry, a container registry credential set, and an access policy to allow the container registry to read the secrets from the key vault.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    ///     {
    ///         Name = "examplekeyvault",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SkuName = "standard",
    ///         SoftDeleteRetentionDays = 7,
    ///         AccessPolicies = new[]
    ///         {
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///                 ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///                 CertificatePermissions = new() { },
    ///                 KeyPermissions = new() { },
    ///                 SecretPermissions = new[]
    ///                 {
    ///                     "Get",
    ///                     "Set",
    ///                     "Delete",
    ///                     "Purge",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleUser = new Azure.KeyVault.Secret("example_user", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         Name = "example-user-name",
    ///         Value = "name",
    ///     });
    /// 
    ///     var examplePassword = new Azure.KeyVault.Secret("example_password", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         Name = "example-user-password",
    ///         Value = "password",
    ///     });
    /// 
    ///     var exampleRegistry = new Azure.ContainerService.Registry("example", new()
    ///     {
    ///         Name = "exampleContainerRegistry",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         Sku = "Basic",
    ///     });
    /// 
    ///     var exampleRegistryCredentialSet = new Azure.ContainerService.RegistryCredentialSet("example", new()
    ///     {
    ///         Name = "exampleCredentialSet",
    ///         ContainerRegistryId = exampleRegistry.Id,
    ///         LoginServer = "docker.io",
    ///         Identity = new Azure.ContainerService.Inputs.RegistryCredentialSetIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///         AuthenticationCredentials = new Azure.ContainerService.Inputs.RegistryCredentialSetAuthenticationCredentialsArgs
    ///         {
    ///             UsernameSecretId = exampleUser.VersionlessId,
    ///             PasswordSecretId = examplePassword.VersionlessId,
    ///         },
    ///     });
    /// 
    ///     var readSecrets = new Azure.KeyVault.AccessPolicy("read_secrets", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         TenantId = exampleRegistryCredentialSet.Identity.Apply(identity =&gt; identity.TenantId),
    ///         ObjectId = exampleRegistryCredentialSet.Identity.Apply(identity =&gt; identity.PrincipalId),
    ///         SecretPermissions = new[]
    ///         {
    ///             "Get",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.ContainerRegistry` - 2023-07-01
    /// 
    /// ## Import
    /// 
    /// Container Registry Credential Sets can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:containerservice/registryCredentialSet:RegistryCredentialSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ContainerRegistry/registries/registry1/credentialSets/credentialSet1
    /// ```
    /// </summary>
    [AzureResourceType("azure:containerservice/registryCredentialSet:RegistryCredentialSet")]
    public partial class RegistryCredentialSet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `authentication_credentials` block as defined below.
        /// </summary>
        [Output("authenticationCredentials")]
        public Output<Outputs.RegistryCredentialSetAuthenticationCredentials> AuthenticationCredentials { get; private set; } = null!;

        /// <summary>
        /// The ID of the Container Registry. Changing this forces a new Container Registry Credential Set to be created.
        /// </summary>
        [Output("containerRegistryId")]
        public Output<string> ContainerRegistryId { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.RegistryCredentialSetIdentity> Identity { get; private set; } = null!;

        /// <summary>
        /// The login server for the Credential Set. Changing this forces a new Container Registry Credential Set to be created.
        /// </summary>
        [Output("loginServer")]
        public Output<string> LoginServer { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Container Registry Credential Set. Changing this forces a new Container Registry Credential Set to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a RegistryCredentialSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegistryCredentialSet(string name, RegistryCredentialSetArgs args, CustomResourceOptions? options = null)
            : base("azure:containerservice/registryCredentialSet:RegistryCredentialSet", name, args ?? new RegistryCredentialSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegistryCredentialSet(string name, Input<string> id, RegistryCredentialSetState? state = null, CustomResourceOptions? options = null)
            : base("azure:containerservice/registryCredentialSet:RegistryCredentialSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegistryCredentialSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegistryCredentialSet Get(string name, Input<string> id, RegistryCredentialSetState? state = null, CustomResourceOptions? options = null)
        {
            return new RegistryCredentialSet(name, id, state, options);
        }
    }

    public sealed class RegistryCredentialSetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `authentication_credentials` block as defined below.
        /// </summary>
        [Input("authenticationCredentials", required: true)]
        public Input<Inputs.RegistryCredentialSetAuthenticationCredentialsArgs> AuthenticationCredentials { get; set; } = null!;

        /// <summary>
        /// The ID of the Container Registry. Changing this forces a new Container Registry Credential Set to be created.
        /// </summary>
        [Input("containerRegistryId", required: true)]
        public Input<string> ContainerRegistryId { get; set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity", required: true)]
        public Input<Inputs.RegistryCredentialSetIdentityArgs> Identity { get; set; } = null!;

        /// <summary>
        /// The login server for the Credential Set. Changing this forces a new Container Registry Credential Set to be created.
        /// </summary>
        [Input("loginServer", required: true)]
        public Input<string> LoginServer { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Container Registry Credential Set. Changing this forces a new Container Registry Credential Set to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public RegistryCredentialSetArgs()
        {
        }
        public static new RegistryCredentialSetArgs Empty => new RegistryCredentialSetArgs();
    }

    public sealed class RegistryCredentialSetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `authentication_credentials` block as defined below.
        /// </summary>
        [Input("authenticationCredentials")]
        public Input<Inputs.RegistryCredentialSetAuthenticationCredentialsGetArgs>? AuthenticationCredentials { get; set; }

        /// <summary>
        /// The ID of the Container Registry. Changing this forces a new Container Registry Credential Set to be created.
        /// </summary>
        [Input("containerRegistryId")]
        public Input<string>? ContainerRegistryId { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.RegistryCredentialSetIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The login server for the Credential Set. Changing this forces a new Container Registry Credential Set to be created.
        /// </summary>
        [Input("loginServer")]
        public Input<string>? LoginServer { get; set; }

        /// <summary>
        /// The name which should be used for this Container Registry Credential Set. Changing this forces a new Container Registry Credential Set to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public RegistryCredentialSetState()
        {
        }
        public static new RegistryCredentialSetState Empty => new RegistryCredentialSetState();
    }
}
