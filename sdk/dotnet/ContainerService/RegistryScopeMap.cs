// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    /// <summary>
    /// Manages an Azure Container Registry scope map.  Scope Maps are a preview feature only available in Premium SKU Container registries.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleRegistry = new Azure.ContainerService.Registry("exampleRegistry", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Sku = "Premium",
    ///         AdminEnabled = false,
    ///         Georeplications = new[]
    ///         {
    ///             new Azure.ContainerService.Inputs.RegistryGeoreplicationArgs
    ///             {
    ///                 Location = "East US",
    ///             },
    ///             new Azure.ContainerService.Inputs.RegistryGeoreplicationArgs
    ///             {
    ///                 Location = "West Europe",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleRegistryScopeMap = new Azure.ContainerService.RegistryScopeMap("exampleRegistryScopeMap", new()
    ///     {
    ///         ContainerRegistryName = exampleRegistry.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Actions = new[]
    ///         {
    ///             "repositories/repo1/content/read",
    ///             "repositories/repo1/content/write",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Container Registries can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:containerservice/registryScopeMap:RegistryScopeMap example /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/mygroup1/providers/Microsoft.ContainerRegistry/registries/myregistry1/scopeMaps/scopemap1
    /// ```
    /// </summary>
    [AzureResourceType("azure:containerservice/registryScopeMap:RegistryScopeMap")]
    public partial class RegistryScopeMap : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of actions to attach to the scope map (e.g. `repo/content/read`, `repo2/content/delete`).
        /// </summary>
        [Output("actions")]
        public Output<ImmutableArray<string>> Actions { get; private set; } = null!;

        /// <summary>
        /// The name of the Container Registry. Changing this forces a new resource to be created.
        /// </summary>
        [Output("containerRegistryName")]
        public Output<string> ContainerRegistryName { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the scope map. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;


        /// <summary>
        /// Create a RegistryScopeMap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegistryScopeMap(string name, RegistryScopeMapArgs args, CustomResourceOptions? options = null)
            : base("azure:containerservice/registryScopeMap:RegistryScopeMap", name, args ?? new RegistryScopeMapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegistryScopeMap(string name, Input<string> id, RegistryScopeMapState? state = null, CustomResourceOptions? options = null)
            : base("azure:containerservice/registryScopeMap:RegistryScopeMap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegistryScopeMap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegistryScopeMap Get(string name, Input<string> id, RegistryScopeMapState? state = null, CustomResourceOptions? options = null)
        {
            return new RegistryScopeMap(name, id, state, options);
        }
    }

    public sealed class RegistryScopeMapArgs : global::Pulumi.ResourceArgs
    {
        [Input("actions", required: true)]
        private InputList<string>? _actions;

        /// <summary>
        /// A list of actions to attach to the scope map (e.g. `repo/content/read`, `repo2/content/delete`).
        /// </summary>
        public InputList<string> Actions
        {
            get => _actions ?? (_actions = new InputList<string>());
            set => _actions = value;
        }

        /// <summary>
        /// The name of the Container Registry. Changing this forces a new resource to be created.
        /// </summary>
        [Input("containerRegistryName", required: true)]
        public Input<string> ContainerRegistryName { get; set; } = null!;

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the name of the scope map. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public RegistryScopeMapArgs()
        {
        }
        public static new RegistryScopeMapArgs Empty => new RegistryScopeMapArgs();
    }

    public sealed class RegistryScopeMapState : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<string>? _actions;

        /// <summary>
        /// A list of actions to attach to the scope map (e.g. `repo/content/read`, `repo2/content/delete`).
        /// </summary>
        public InputList<string> Actions
        {
            get => _actions ?? (_actions = new InputList<string>());
            set => _actions = value;
        }

        /// <summary>
        /// The name of the Container Registry. Changing this forces a new resource to be created.
        /// </summary>
        [Input("containerRegistryName")]
        public Input<string>? ContainerRegistryName { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the name of the scope map. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        public RegistryScopeMapState()
        {
        }
        public static new RegistryScopeMapState Empty => new RegistryScopeMapState();
    }
}
