// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService.Inputs
{

    public sealed class GroupInitContainerVolumeGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Boolean as to whether the mounted volume should be an empty directory. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("emptyDir")]
        public Input<bool>? EmptyDir { get; set; }

        /// <summary>
        /// A `git_repo` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("gitRepo")]
        public Input<Inputs.GroupInitContainerVolumeGitRepoGetArgs>? GitRepo { get; set; }

        /// <summary>
        /// The path on which this volume is to be mounted. Changing this forces a new resource to be created.
        /// </summary>
        [Input("mountPath", required: true)]
        public Input<string> MountPath { get; set; } = null!;

        /// <summary>
        /// The name of the volume mount. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specify if the volume is to be mounted as read only or not. The default value is `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        [Input("secret")]
        private InputMap<string>? _secret;

        /// <summary>
        /// A map of secrets that will be mounted as files in the volume. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> Secret
        {
            get => _secret ?? (_secret = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _secret = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The Azure storage share that is to be mounted as a volume. This must be created on the storage account specified as above. Changing this forces a new resource to be created.
        /// </summary>
        [Input("shareName")]
        public Input<string>? ShareName { get; set; }

        [Input("storageAccountKey")]
        private Input<string>? _storageAccountKey;

        /// <summary>
        /// The access key for the Azure Storage account specified as above. Changing this forces a new resource to be created.
        /// </summary>
        public Input<string>? StorageAccountKey
        {
            get => _storageAccountKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Azure storage account from which the volume is to be mounted. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageAccountName")]
        public Input<string>? StorageAccountName { get; set; }

        public GroupInitContainerVolumeGetArgs()
        {
        }
        public static new GroupInitContainerVolumeGetArgs Empty => new GroupInitContainerVolumeGetArgs();
    }
}
