// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService.Inputs
{

    public sealed class RegistryTaskDockerStepGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("arguments")]
        private InputMap<string>? _arguments;

        /// <summary>
        /// Specifies a map of arguments to be used when executing this step.
        /// </summary>
        public InputMap<string> Arguments
        {
            get => _arguments ?? (_arguments = new InputMap<string>());
            set => _arguments = value;
        }

        /// <summary>
        /// Should the image cache be enabled? Defaults to `true`.
        /// </summary>
        [Input("cacheEnabled")]
        public Input<bool>? CacheEnabled { get; set; }

        [Input("contextAccessToken", required: true)]
        private Input<string>? _contextAccessToken;

        /// <summary>
        /// The token (Git PAT or SAS token of storage account blob) associated with the context for this step.
        /// </summary>
        public Input<string>? ContextAccessToken
        {
            get => _contextAccessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _contextAccessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The URL (absolute or relative) of the source context for this step.
        /// </summary>
        [Input("contextPath", required: true)]
        public Input<string> ContextPath { get; set; } = null!;

        /// <summary>
        /// The Dockerfile path relative to the source context.
        /// </summary>
        [Input("dockerfilePath", required: true)]
        public Input<string> DockerfilePath { get; set; } = null!;

        [Input("imageNames")]
        private InputList<string>? _imageNames;

        /// <summary>
        /// Specifies a list of fully qualified image names including the repository and tag.
        /// </summary>
        public InputList<string> ImageNames
        {
            get => _imageNames ?? (_imageNames = new InputList<string>());
            set => _imageNames = value;
        }

        /// <summary>
        /// Should the image built be pushed to the registry or not? Defaults to `true`.
        /// </summary>
        [Input("pushEnabled")]
        public Input<bool>? PushEnabled { get; set; }

        [Input("secretArguments")]
        private InputMap<string>? _secretArguments;

        /// <summary>
        /// Specifies a map of *secret* arguments to be used when executing this step.
        /// </summary>
        public InputMap<string> SecretArguments
        {
            get => _secretArguments ?? (_secretArguments = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _secretArguments = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The name of the target build stage for the docker build.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        public RegistryTaskDockerStepGetArgs()
        {
        }
        public static new RegistryTaskDockerStepGetArgs Empty => new RegistryTaskDockerStepGetArgs();
    }
}
