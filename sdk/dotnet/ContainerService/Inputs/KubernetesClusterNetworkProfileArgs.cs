// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService.Inputs
{

    public sealed class KubernetesClusterNetworkProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// IP address within the Kubernetes service address range that will be used by cluster service discovery (kube-dns). Changing this forces a new resource to be created.
        /// </summary>
        [Input("dnsServiceIp")]
        public Input<string>? DnsServiceIp { get; set; }

        /// <summary>
        /// IP address (in CIDR notation) used as the Docker bridge IP address on nodes. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** `docker_bridge_cidr` has been deprecated as the API no longer supports it and will be removed in version 4.0 of the provider.
        /// </summary>
        [Input("dockerBridgeCidr")]
        public Input<string>? DockerBridgeCidr { get; set; }

        /// <summary>
        /// Specifies the eBPF data plane used for building the Kubernetes network. Possible value is `cilium`. Disabling this forces a new resource to be created.
        /// 
        /// &gt; **Note:** When `ebpf_data_plane` is set to `cilium`, the `network_plugin` field can only be set to `azure`.
        /// 
        /// &gt; **Note:** When `ebpf_data_plane` is set to `cilium`, one of either `network_plugin_mode = "overlay"` or `pod_subnet_id` must be specified.
        /// 
        /// &gt; **Note:** This requires that the Preview Feature `Microsoft.ContainerService/CiliumDataplanePreview` is enabled and the Resource Provider is re-registered, see [the documentation](https://learn.microsoft.com/en-us/azure/aks/azure-cni-powered-by-cilium) for more information.
        /// </summary>
        [Input("ebpfDataPlane")]
        public Input<string>? EbpfDataPlane { get; set; }

        [Input("ipVersions")]
        private InputList<string>? _ipVersions;

        /// <summary>
        /// Specifies a list of IP versions the Kubernetes Cluster will use to assign IP addresses to its nodes and pods. Possible values are `IPv4` and/or `IPv6`. `IPv4` must always be specified. Changing this forces a new resource to be created.
        /// 
        /// -&gt;**Note:** To configure dual-stack networking `ip_versions` should be set to `["IPv4", "IPv6"]`.
        /// 
        /// -&gt;**Note:** Dual-stack networking requires that the Preview Feature `Microsoft.ContainerService/AKS-EnableDualStack` is enabled and the Resource Provider is re-registered, see [the documentation](https://docs.microsoft.com/azure/aks/configure-kubenet-dual-stack?tabs=azure-cli%2Ckubectl#register-the-aks-enabledualstack-preview-feature) for more information.
        /// </summary>
        public InputList<string> IpVersions
        {
            get => _ipVersions ?? (_ipVersions = new InputList<string>());
            set => _ipVersions = value;
        }

        /// <summary>
        /// A `load_balancer_profile` block as defined below. This can only be specified when `load_balancer_sku` is set to `standard`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("loadBalancerProfile")]
        public Input<Inputs.KubernetesClusterNetworkProfileLoadBalancerProfileArgs>? LoadBalancerProfile { get; set; }

        /// <summary>
        /// Specifies the SKU of the Load Balancer used for this Kubernetes Cluster. Possible values are `basic` and `standard`. Defaults to `standard`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("loadBalancerSku")]
        public Input<string>? LoadBalancerSku { get; set; }

        /// <summary>
        /// A `nat_gateway_profile` block as defined below. This can only be specified when `load_balancer_sku` is set to `standard` and `outbound_type` is set to `managedNATGateway` or `userAssignedNATGateway`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("natGatewayProfile")]
        public Input<Inputs.KubernetesClusterNetworkProfileNatGatewayProfileArgs>? NatGatewayProfile { get; set; }

        /// <summary>
        /// Network mode to be used with Azure CNI. Possible values are `bridge` and `transparent`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** `network_mode` can only be set to `bridge` for existing Kubernetes Clusters and cannot be used to provision new Clusters - this will be removed by Azure in the future.
        /// 
        /// &gt; **Note:** This property can only be set when `network_plugin` is set to `azure`.
        /// </summary>
        [Input("networkMode")]
        public Input<string>? NetworkMode { get; set; }

        /// <summary>
        /// Network plugin to use for networking. Currently supported values are `azure`, `kubenet` and `none`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** When `network_plugin` is set to `azure` - the `pod_cidr` field must not be set.
        /// </summary>
        [Input("networkPlugin", required: true)]
        public Input<string> NetworkPlugin { get; set; } = null!;

        /// <summary>
        /// Specifies the network plugin mode used for building the Kubernetes network. Possible value is `overlay`.
        /// 
        /// &gt; **Note:** When `network_plugin_mode` is set to `overlay`, the `network_plugin` field can only be set to `azure`. When upgrading from Azure CNI without overlay, `pod_subnet_id` must be specified.
        /// </summary>
        [Input("networkPluginMode")]
        public Input<string>? NetworkPluginMode { get; set; }

        /// <summary>
        /// Sets up network policy to be used with Azure CNI. [Network policy allows us to control the traffic flow between pods](https://docs.microsoft.com/azure/aks/use-network-policies). Currently supported values are `calico`, `azure` and `cilium`.
        /// 
        /// &gt; **Note:** When `network_policy` is set to `azure`, the `network_plugin` field can only be set to `azure`.
        /// 
        /// &gt; **Note:** When `network_policy` is set to `cilium`, the `ebpf_data_plane` field must be set to `cilium`.
        /// </summary>
        [Input("networkPolicy")]
        public Input<string>? NetworkPolicy { get; set; }

        /// <summary>
        /// The outbound (egress) routing method which should be used for this Kubernetes Cluster. Possible values are `loadBalancer`, `userDefinedRouting`, `managedNATGateway` and `userAssignedNATGateway`. Defaults to `loadBalancer`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("outboundType")]
        public Input<string>? OutboundType { get; set; }

        /// <summary>
        /// The CIDR to use for pod IP addresses. This field can only be set when `network_plugin` is set to `kubenet`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("podCidr")]
        public Input<string>? PodCidr { get; set; }

        [Input("podCidrs")]
        private InputList<string>? _podCidrs;

        /// <summary>
        /// A list of CIDRs to use for pod IP addresses. For single-stack networking a single IPv4 CIDR is expected. For dual-stack networking an IPv4 and IPv6 CIDR are expected. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> PodCidrs
        {
            get => _podCidrs ?? (_podCidrs = new InputList<string>());
            set => _podCidrs = value;
        }

        /// <summary>
        /// The Network Range used by the Kubernetes service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serviceCidr")]
        public Input<string>? ServiceCidr { get; set; }

        [Input("serviceCidrs")]
        private InputList<string>? _serviceCidrs;

        /// <summary>
        /// A list of CIDRs to use for Kubernetes services. For single-stack networking a single IPv4 CIDR is expected. For dual-stack networking an IPv4 and IPv6 CIDR are expected. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** This range should not be used by any network element on or connected to this VNet. Service address CIDR must be smaller than /12. `docker_bridge_cidr`, `dns_service_ip` and `service_cidr` should all be empty or all should be set.
        /// </summary>
        public InputList<string> ServiceCidrs
        {
            get => _serviceCidrs ?? (_serviceCidrs = new InputList<string>());
            set => _serviceCidrs = value;
        }

        public KubernetesClusterNetworkProfileArgs()
        {
        }
        public static new KubernetesClusterNetworkProfileArgs Empty => new KubernetesClusterNetworkProfileArgs();
    }
}
