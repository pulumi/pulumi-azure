// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService.Inputs
{

    public sealed class KubernetesClusterAzureActiveDirectoryRoleBasedAccessControlArgs : global::Pulumi.ResourceArgs
    {
        [Input("adminGroupObjectIds")]
        private InputList<string>? _adminGroupObjectIds;
        public InputList<string> AdminGroupObjectIds
        {
            get => _adminGroupObjectIds ?? (_adminGroupObjectIds = new InputList<string>());
            set => _adminGroupObjectIds = value;
        }

        [Input("azureRbacEnabled")]
        public Input<bool>? AzureRbacEnabled { get; set; }

        [Input("clientAppId")]
        public Input<string>? ClientAppId { get; set; }

        /// <summary>
        /// Is the Azure Active Directory integration Managed, meaning that Azure will create/manage the Service Principal used for integration. Defaults to `false`.
        /// 
        /// &gt; **Note:** The property `managed` is deprecated and will be defaulted to `true` in v4.0 of the AzureRM provider. Until the property is removed it must be specified with `true` for AKS-managed Entra Integration.
        /// </summary>
        [Input("managed")]
        public Input<bool>? Managed { get; set; }

        [Input("serverAppId")]
        public Input<string>? ServerAppId { get; set; }

        [Input("serverAppSecret")]
        private Input<string>? _serverAppSecret;
        [Obsolete(@"Azure AD Integration (legacy) (https://aka.ms/aks/aad-legacy) is deprecated and clusters can no longer be created with the Azure AD integration (legacy) enabled. This field will be removed in v4.0 of the AzureRM Provider.")]
        public Input<string>? ServerAppSecret
        {
            get => _serverAppSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _serverAppSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Tenant ID used for Azure Active Directory Application. If this isn't specified the Tenant ID of the current Subscription is used.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public KubernetesClusterAzureActiveDirectoryRoleBasedAccessControlArgs()
        {
        }
        public static new KubernetesClusterAzureActiveDirectoryRoleBasedAccessControlArgs Empty => new KubernetesClusterAzureActiveDirectoryRoleBasedAccessControlArgs();
    }
}
