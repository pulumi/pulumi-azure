// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ContainerService
{
    public static class GetClusterNodePool
    {
        /// <summary>
        /// Use this data source to access information about an existing Kubernetes Cluster Node Pool.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.ContainerService.GetClusterNodePool.InvokeAsync(new Azure.ContainerService.GetClusterNodePoolArgs
        ///         {
        ///             Name = "existing",
        ///             KubernetesClusterName = "existing-cluster",
        ///             ResourceGroupName = "existing-resource-group",
        ///         }));
        ///         this.Id = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetClusterNodePoolResult> InvokeAsync(GetClusterNodePoolArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClusterNodePoolResult>("azure:containerservice/getClusterNodePool:getClusterNodePool", args ?? new GetClusterNodePoolArgs(), options.WithVersion());
    }


    public sealed class GetClusterNodePoolArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Name of the Kubernetes Cluster where this Node Pool is located.
        /// </summary>
        [Input("kubernetesClusterName", required: true)]
        public string KubernetesClusterName { get; set; } = null!;

        /// <summary>
        /// The name of this Kubernetes Cluster Node Pool.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Kubernetes Cluster exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetClusterNodePoolArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetClusterNodePoolResult
    {
        /// <summary>
        /// A list of Availability Zones in which the Nodes in this Node Pool exists.
        /// </summary>
        public readonly ImmutableArray<string> AvailabilityZones;
        /// <summary>
        /// Does this Node Pool have Auto-Scaling enabled?
        /// </summary>
        public readonly bool EnableAutoScaling;
        /// <summary>
        /// Do nodes in this Node Pool have a Public IP Address?
        /// </summary>
        public readonly bool EnableNodePublicIp;
        /// <summary>
        /// The eviction policy used for Virtual Machines in the Virtual Machine Scale Set, when `priority` is set to `Spot`.
        /// </summary>
        public readonly string EvictionPolicy;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KubernetesClusterName;
        /// <summary>
        /// The maximum number of Nodes allowed when auto-scaling is enabled.
        /// </summary>
        public readonly int MaxCount;
        /// <summary>
        /// The maximum number of Pods allowed on each Node in this Node Pool.
        /// </summary>
        public readonly int MaxPods;
        /// <summary>
        /// The minimum number of Nodes allowed when auto-scaling is enabled.
        /// </summary>
        public readonly int MinCount;
        /// <summary>
        /// The Mode for this Node Pool, specifying how these Nodes should be used (for either System or User resources).
        /// </summary>
        public readonly string Mode;
        public readonly string Name;
        /// <summary>
        /// The current number of Nodes in the Node Pool.
        /// </summary>
        public readonly int NodeCount;
        /// <summary>
        /// A map of Kubernetes Labels applied to each Node in this Node Pool.
        /// </summary>
        public readonly ImmutableDictionary<string, string> NodeLabels;
        /// <summary>
        /// A map of Kubernetes Taints applied to each Node in this Node Pool.
        /// </summary>
        public readonly ImmutableArray<string> NodeTaints;
        /// <summary>
        /// The version of Kubernetes configured on each Node in this Node Pool.
        /// </summary>
        public readonly string OrchestratorVersion;
        /// <summary>
        /// The size of the OS Disk on each Node in this Node Pool.
        /// </summary>
        public readonly int OsDiskSizeGb;
        /// <summary>
        /// The operating system used on each Node in this Node Pool.
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// The priority of the Virtual Machines in the Virtual Machine Scale Set backing this Node Pool.
        /// </summary>
        public readonly string Priority;
        /// <summary>
        /// The ID of the Proximity Placement Group where the Virtual Machine Scale Set backing this Node Pool will be placed.
        /// </summary>
        public readonly string ProximityPlacementGroupId;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The maximum price being paid for Virtual Machines in this Scale Set. `-1` means the current on-demand price for a Virtual Machine.
        /// </summary>
        public readonly double SpotMaxPrice;
        /// <summary>
        /// A mapping of tags assigned to the Kubernetes Cluster Node Pool.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The size of the Virtual Machines used in the Virtual Machine Scale Set backing this Node Pool.
        /// </summary>
        public readonly string VmSize;
        /// <summary>
        /// The ID of the Subnet in which this Node Pool exists.
        /// </summary>
        public readonly string VnetSubnetId;

        [OutputConstructor]
        private GetClusterNodePoolResult(
            ImmutableArray<string> availabilityZones,

            bool enableAutoScaling,

            bool enableNodePublicIp,

            string evictionPolicy,

            string id,

            string kubernetesClusterName,

            int maxCount,

            int maxPods,

            int minCount,

            string mode,

            string name,

            int nodeCount,

            ImmutableDictionary<string, string> nodeLabels,

            ImmutableArray<string> nodeTaints,

            string orchestratorVersion,

            int osDiskSizeGb,

            string osType,

            string priority,

            string proximityPlacementGroupId,

            string resourceGroupName,

            double spotMaxPrice,

            ImmutableDictionary<string, string> tags,

            string vmSize,

            string vnetSubnetId)
        {
            AvailabilityZones = availabilityZones;
            EnableAutoScaling = enableAutoScaling;
            EnableNodePublicIp = enableNodePublicIp;
            EvictionPolicy = evictionPolicy;
            Id = id;
            KubernetesClusterName = kubernetesClusterName;
            MaxCount = maxCount;
            MaxPods = maxPods;
            MinCount = minCount;
            Mode = mode;
            Name = name;
            NodeCount = nodeCount;
            NodeLabels = nodeLabels;
            NodeTaints = nodeTaints;
            OrchestratorVersion = orchestratorVersion;
            OsDiskSizeGb = osDiskSizeGb;
            OsType = osType;
            Priority = priority;
            ProximityPlacementGroupId = proximityPlacementGroupId;
            ResourceGroupName = resourceGroupName;
            SpotMaxPrice = spotMaxPrice;
            Tags = tags;
            VmSize = vmSize;
            VnetSubnetId = vnetSubnetId;
        }
    }
}
