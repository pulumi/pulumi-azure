// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Maps
{
    /// <summary>
    /// Manages an Azure Maps Creator.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Maps.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         SkuName = "G2",
    ///         Tags = 
    ///         {
    ///             { "environment", "Test" },
    ///         },
    ///     });
    /// 
    ///     var exampleCreator = new Azure.Maps.Creator("exampleCreator", new()
    ///     {
    ///         MapsAccountId = exampleAccount.Id,
    ///         Location = exampleResourceGroup.Location,
    ///         StorageUnits = 1,
    ///         Tags = 
    ///         {
    ///             { "environment", "Test" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An Azure Maps Creators can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:maps/creator:Creator example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Maps/accounts/account1/creators/creator1
    /// ```
    /// </summary>
    [AzureResourceType("azure:maps/creator:Creator")]
    public partial class Creator : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Azure Region where the Azure Maps Creator should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The ID of the Azure Maps Creator. Changing this forces a new resource to be created.
        /// </summary>
        [Output("mapsAccountId")]
        public Output<string> MapsAccountId { get; private set; } = null!;

        /// <summary>
        /// The name of the Azure Maps Creator. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The storage units to be allocated. Integer values from 1 to 100, inclusive.
        /// </summary>
        [Output("storageUnits")]
        public Output<int> StorageUnits { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Azure Maps Creator.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Creator resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Creator(string name, CreatorArgs args, CustomResourceOptions? options = null)
            : base("azure:maps/creator:Creator", name, args ?? new CreatorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Creator(string name, Input<string> id, CreatorState? state = null, CustomResourceOptions? options = null)
            : base("azure:maps/creator:Creator", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Creator resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Creator Get(string name, Input<string> id, CreatorState? state = null, CustomResourceOptions? options = null)
        {
            return new Creator(name, id, state, options);
        }
    }

    public sealed class CreatorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure Region where the Azure Maps Creator should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the Azure Maps Creator. Changing this forces a new resource to be created.
        /// </summary>
        [Input("mapsAccountId", required: true)]
        public Input<string> MapsAccountId { get; set; } = null!;

        /// <summary>
        /// The name of the Azure Maps Creator. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The storage units to be allocated. Integer values from 1 to 100, inclusive.
        /// </summary>
        [Input("storageUnits", required: true)]
        public Input<int> StorageUnits { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Azure Maps Creator.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public CreatorArgs()
        {
        }
        public static new CreatorArgs Empty => new CreatorArgs();
    }

    public sealed class CreatorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure Region where the Azure Maps Creator should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the Azure Maps Creator. Changing this forces a new resource to be created.
        /// </summary>
        [Input("mapsAccountId")]
        public Input<string>? MapsAccountId { get; set; }

        /// <summary>
        /// The name of the Azure Maps Creator. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The storage units to be allocated. Integer values from 1 to 100, inclusive.
        /// </summary>
        [Input("storageUnits")]
        public Input<int>? StorageUnits { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Azure Maps Creator.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public CreatorState()
        {
        }
        public static new CreatorState Empty => new CreatorState();
    }
}
