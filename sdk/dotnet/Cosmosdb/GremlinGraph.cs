// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    /// <summary>
    /// Manages a Gremlin Graph within a Cosmos DB Account.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/cosmosdb_gremlin_graph.html.markdown.
    /// </summary>
    public partial class GremlinGraph : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the CosmosDB Account to create the Gremlin Graph within. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// The conflict resolution policy for the graph. One or more `conflict_resolution_policy` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("conflictResolutionPolicies")]
        public Output<ImmutableArray<Outputs.GremlinGraphConflictResolutionPolicies>> ConflictResolutionPolicies { get; private set; } = null!;

        /// <summary>
        /// The name of the Cosmos DB Graph Database in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// The configuration of the indexing policy. One or more `index_policy` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("indexPolicies")]
        public Output<ImmutableArray<Outputs.GremlinGraphIndexPolicies>> IndexPolicies { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Cosmos DB Gremlin Graph. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Define a partition key. Changing this forces a new resource to be created.
        /// </summary>
        [Output("partitionKeyPath")]
        public Output<string?> PartitionKeyPath { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The throughput of the Gremlin database (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// </summary>
        [Output("throughput")]
        public Output<int> Throughput { get; private set; } = null!;

        /// <summary>
        /// One or more `unique_key` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("uniqueKeys")]
        public Output<ImmutableArray<Outputs.GremlinGraphUniqueKeys>> UniqueKeys { get; private set; } = null!;


        /// <summary>
        /// Create a GremlinGraph resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GremlinGraph(string name, GremlinGraphArgs args, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/gremlinGraph:GremlinGraph", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private GremlinGraph(string name, Input<string> id, GremlinGraphState? state = null, CustomResourceOptions? options = null)
            : base("azure:cosmosdb/gremlinGraph:GremlinGraph", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GremlinGraph resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GremlinGraph Get(string name, Input<string> id, GremlinGraphState? state = null, CustomResourceOptions? options = null)
        {
            return new GremlinGraph(name, id, state, options);
        }
    }

    public sealed class GremlinGraphArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the CosmosDB Account to create the Gremlin Graph within. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        [Input("conflictResolutionPolicies", required: true)]
        private InputList<Inputs.GremlinGraphConflictResolutionPoliciesArgs>? _conflictResolutionPolicies;

        /// <summary>
        /// The conflict resolution policy for the graph. One or more `conflict_resolution_policy` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GremlinGraphConflictResolutionPoliciesArgs> ConflictResolutionPolicies
        {
            get => _conflictResolutionPolicies ?? (_conflictResolutionPolicies = new InputList<Inputs.GremlinGraphConflictResolutionPoliciesArgs>());
            set => _conflictResolutionPolicies = value;
        }

        /// <summary>
        /// The name of the Cosmos DB Graph Database in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        [Input("indexPolicies", required: true)]
        private InputList<Inputs.GremlinGraphIndexPoliciesArgs>? _indexPolicies;

        /// <summary>
        /// The configuration of the indexing policy. One or more `index_policy` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GremlinGraphIndexPoliciesArgs> IndexPolicies
        {
            get => _indexPolicies ?? (_indexPolicies = new InputList<Inputs.GremlinGraphIndexPoliciesArgs>());
            set => _indexPolicies = value;
        }

        /// <summary>
        /// Specifies the name of the Cosmos DB Gremlin Graph. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Define a partition key. Changing this forces a new resource to be created.
        /// </summary>
        [Input("partitionKeyPath")]
        public Input<string>? PartitionKeyPath { get; set; }

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The throughput of the Gremlin database (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// </summary>
        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        [Input("uniqueKeys")]
        private InputList<Inputs.GremlinGraphUniqueKeysArgs>? _uniqueKeys;

        /// <summary>
        /// One or more `unique_key` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GremlinGraphUniqueKeysArgs> UniqueKeys
        {
            get => _uniqueKeys ?? (_uniqueKeys = new InputList<Inputs.GremlinGraphUniqueKeysArgs>());
            set => _uniqueKeys = value;
        }

        public GremlinGraphArgs()
        {
        }
    }

    public sealed class GremlinGraphState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the CosmosDB Account to create the Gremlin Graph within. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        [Input("conflictResolutionPolicies")]
        private InputList<Inputs.GremlinGraphConflictResolutionPoliciesGetArgs>? _conflictResolutionPolicies;

        /// <summary>
        /// The conflict resolution policy for the graph. One or more `conflict_resolution_policy` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GremlinGraphConflictResolutionPoliciesGetArgs> ConflictResolutionPolicies
        {
            get => _conflictResolutionPolicies ?? (_conflictResolutionPolicies = new InputList<Inputs.GremlinGraphConflictResolutionPoliciesGetArgs>());
            set => _conflictResolutionPolicies = value;
        }

        /// <summary>
        /// The name of the Cosmos DB Graph Database in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        [Input("indexPolicies")]
        private InputList<Inputs.GremlinGraphIndexPoliciesGetArgs>? _indexPolicies;

        /// <summary>
        /// The configuration of the indexing policy. One or more `index_policy` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GremlinGraphIndexPoliciesGetArgs> IndexPolicies
        {
            get => _indexPolicies ?? (_indexPolicies = new InputList<Inputs.GremlinGraphIndexPoliciesGetArgs>());
            set => _indexPolicies = value;
        }

        /// <summary>
        /// Specifies the name of the Cosmos DB Gremlin Graph. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Define a partition key. Changing this forces a new resource to be created.
        /// </summary>
        [Input("partitionKeyPath")]
        public Input<string>? PartitionKeyPath { get; set; }

        /// <summary>
        /// The name of the resource group in which the Cosmos DB Gremlin Graph is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The throughput of the Gremlin database (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual resource destroy-apply.
        /// </summary>
        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        [Input("uniqueKeys")]
        private InputList<Inputs.GremlinGraphUniqueKeysGetArgs>? _uniqueKeys;

        /// <summary>
        /// One or more `unique_key` blocks as defined below. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<Inputs.GremlinGraphUniqueKeysGetArgs> UniqueKeys
        {
            get => _uniqueKeys ?? (_uniqueKeys = new InputList<Inputs.GremlinGraphUniqueKeysGetArgs>());
            set => _uniqueKeys = value;
        }

        public GremlinGraphState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class GremlinGraphConflictResolutionPoliciesArgs : Pulumi.ResourceArgs
    {
        [Input("conflictResolutionPath")]
        public Input<string>? ConflictResolutionPath { get; set; }

        [Input("conflictResolutionProcedure")]
        public Input<string>? ConflictResolutionProcedure { get; set; }

        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        public GremlinGraphConflictResolutionPoliciesArgs()
        {
        }
    }

    public sealed class GremlinGraphConflictResolutionPoliciesGetArgs : Pulumi.ResourceArgs
    {
        [Input("conflictResolutionPath")]
        public Input<string>? ConflictResolutionPath { get; set; }

        [Input("conflictResolutionProcedure")]
        public Input<string>? ConflictResolutionProcedure { get; set; }

        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        public GremlinGraphConflictResolutionPoliciesGetArgs()
        {
        }
    }

    public sealed class GremlinGraphIndexPoliciesArgs : Pulumi.ResourceArgs
    {
        [Input("automatic")]
        public Input<bool>? Automatic { get; set; }

        [Input("excludedPaths")]
        private InputList<string>? _excludedPaths;
        public InputList<string> ExcludedPaths
        {
            get => _excludedPaths ?? (_excludedPaths = new InputList<string>());
            set => _excludedPaths = value;
        }

        [Input("includedPaths")]
        private InputList<string>? _includedPaths;
        public InputList<string> IncludedPaths
        {
            get => _includedPaths ?? (_includedPaths = new InputList<string>());
            set => _includedPaths = value;
        }

        [Input("indexingMode", required: true)]
        public Input<string> IndexingMode { get; set; } = null!;

        public GremlinGraphIndexPoliciesArgs()
        {
        }
    }

    public sealed class GremlinGraphIndexPoliciesGetArgs : Pulumi.ResourceArgs
    {
        [Input("automatic")]
        public Input<bool>? Automatic { get; set; }

        [Input("excludedPaths")]
        private InputList<string>? _excludedPaths;
        public InputList<string> ExcludedPaths
        {
            get => _excludedPaths ?? (_excludedPaths = new InputList<string>());
            set => _excludedPaths = value;
        }

        [Input("includedPaths")]
        private InputList<string>? _includedPaths;
        public InputList<string> IncludedPaths
        {
            get => _includedPaths ?? (_includedPaths = new InputList<string>());
            set => _includedPaths = value;
        }

        [Input("indexingMode", required: true)]
        public Input<string> IndexingMode { get; set; } = null!;

        public GremlinGraphIndexPoliciesGetArgs()
        {
        }
    }

    public sealed class GremlinGraphUniqueKeysArgs : Pulumi.ResourceArgs
    {
        [Input("paths", required: true)]
        private InputList<string>? _paths;
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        public GremlinGraphUniqueKeysArgs()
        {
        }
    }

    public sealed class GremlinGraphUniqueKeysGetArgs : Pulumi.ResourceArgs
    {
        [Input("paths", required: true)]
        private InputList<string>? _paths;
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        public GremlinGraphUniqueKeysGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GremlinGraphConflictResolutionPolicies
    {
        public readonly string? ConflictResolutionPath;
        public readonly string? ConflictResolutionProcedure;
        public readonly string Mode;

        [OutputConstructor]
        private GremlinGraphConflictResolutionPolicies(
            string? conflictResolutionPath,
            string? conflictResolutionProcedure,
            string mode)
        {
            ConflictResolutionPath = conflictResolutionPath;
            ConflictResolutionProcedure = conflictResolutionProcedure;
            Mode = mode;
        }
    }

    [OutputType]
    public sealed class GremlinGraphIndexPolicies
    {
        public readonly bool? Automatic;
        public readonly ImmutableArray<string> ExcludedPaths;
        public readonly ImmutableArray<string> IncludedPaths;
        public readonly string IndexingMode;

        [OutputConstructor]
        private GremlinGraphIndexPolicies(
            bool? automatic,
            ImmutableArray<string> excludedPaths,
            ImmutableArray<string> includedPaths,
            string indexingMode)
        {
            Automatic = automatic;
            ExcludedPaths = excludedPaths;
            IncludedPaths = includedPaths;
            IndexingMode = indexingMode;
        }
    }

    [OutputType]
    public sealed class GremlinGraphUniqueKeys
    {
        public readonly ImmutableArray<string> Paths;

        [OutputConstructor]
        private GremlinGraphUniqueKeys(ImmutableArray<string> paths)
        {
            Paths = paths;
        }
    }
    }
}
