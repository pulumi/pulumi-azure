// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.CosmosDB
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to access information about an existing CosmosDB (formally DocumentDB) Account.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/cosmosdb_account.html.markdown.
        /// </summary>
        public static Task<GetAccountResult> GetAccount(GetAccountArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAccountResult>("azure:cosmosdb/getAccount:getAccount", args, options.WithVersion());
    }

    public sealed class GetAccountArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the CosmosDB Account.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group in which the CosmosDB Account resides.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetAccountArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetAccountResult
    {
        /// <summary>
        /// Capabilities enabled on this Cosmos DB account.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountCapabilitiesResult> Capabilities;
        public readonly ImmutableArray<Outputs.GetAccountConsistencyPoliciesResult> ConsistencyPolicies;
        /// <summary>
        /// If automatic failover is enabled for this CosmosDB Account.
        /// </summary>
        public readonly bool EnableAutomaticFailover;
        /// <summary>
        /// If multi-master is enabled for this Cosmos DB account.
        /// </summary>
        public readonly bool EnableMultipleWriteLocations;
        /// <summary>
        /// The endpoint used to connect to the CosmosDB account.
        /// </summary>
        public readonly string Endpoint;
        public readonly ImmutableArray<Outputs.GetAccountGeoLocationsResult> GeoLocations;
        /// <summary>
        /// The current IP Filter for this CosmosDB account
        /// </summary>
        public readonly string IpRangeFilter;
        /// <summary>
        /// If virtual network filtering is enabled for this Cosmos DB account.
        /// </summary>
        public readonly bool IsVirtualNetworkFilterEnabled;
        /// <summary>
        /// The Kind of the CosmosDB account.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The name of the Azure region hosting replicated data.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// The Offer Type to used by this CosmosDB Account.
        /// </summary>
        public readonly string OfferType;
        /// <summary>
        /// The Primary master key for the CosmosDB Account.
        /// </summary>
        public readonly string PrimaryMasterKey;
        /// <summary>
        /// The Primary read-only master Key for the CosmosDB Account.
        /// </summary>
        public readonly string PrimaryReadonlyMasterKey;
        /// <summary>
        /// A list of read endpoints available for this CosmosDB account.
        /// </summary>
        public readonly ImmutableArray<string> ReadEndpoints;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The Secondary master key for the CosmosDB Account.
        /// </summary>
        public readonly string SecondaryMasterKey;
        /// <summary>
        /// The Secondary read-only master key for the CosmosDB Account.
        /// </summary>
        public readonly string SecondaryReadonlyMasterKey;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Subnets that are allowed to access this CosmosDB account.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountVirtualNetworkRulesResult> VirtualNetworkRules;
        /// <summary>
        /// A list of write endpoints available for this CosmosDB account.
        /// </summary>
        public readonly ImmutableArray<string> WriteEndpoints;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetAccountResult(
            ImmutableArray<Outputs.GetAccountCapabilitiesResult> capabilities,
            ImmutableArray<Outputs.GetAccountConsistencyPoliciesResult> consistencyPolicies,
            bool enableAutomaticFailover,
            bool enableMultipleWriteLocations,
            string endpoint,
            ImmutableArray<Outputs.GetAccountGeoLocationsResult> geoLocations,
            string ipRangeFilter,
            bool isVirtualNetworkFilterEnabled,
            string kind,
            string location,
            string name,
            string offerType,
            string primaryMasterKey,
            string primaryReadonlyMasterKey,
            ImmutableArray<string> readEndpoints,
            string resourceGroupName,
            string secondaryMasterKey,
            string secondaryReadonlyMasterKey,
            ImmutableDictionary<string, string> tags,
            ImmutableArray<Outputs.GetAccountVirtualNetworkRulesResult> virtualNetworkRules,
            ImmutableArray<string> writeEndpoints,
            string id)
        {
            Capabilities = capabilities;
            ConsistencyPolicies = consistencyPolicies;
            EnableAutomaticFailover = enableAutomaticFailover;
            EnableMultipleWriteLocations = enableMultipleWriteLocations;
            Endpoint = endpoint;
            GeoLocations = geoLocations;
            IpRangeFilter = ipRangeFilter;
            IsVirtualNetworkFilterEnabled = isVirtualNetworkFilterEnabled;
            Kind = kind;
            Location = location;
            Name = name;
            OfferType = offerType;
            PrimaryMasterKey = primaryMasterKey;
            PrimaryReadonlyMasterKey = primaryReadonlyMasterKey;
            ReadEndpoints = readEndpoints;
            ResourceGroupName = resourceGroupName;
            SecondaryMasterKey = secondaryMasterKey;
            SecondaryReadonlyMasterKey = secondaryReadonlyMasterKey;
            Tags = tags;
            VirtualNetworkRules = virtualNetworkRules;
            WriteEndpoints = writeEndpoints;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetAccountCapabilitiesResult
    {
        /// <summary>
        /// Specifies the name of the CosmosDB Account.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetAccountCapabilitiesResult(string name)
        {
            Name = name;
        }
    }

    [OutputType]
    public sealed class GetAccountConsistencyPoliciesResult
    {
        /// <summary>
        /// The Consistency Level used by this CosmosDB Account.
        /// </summary>
        public readonly string ConsistencyLevel;
        /// <summary>
        /// The amount of staleness (in seconds) tolerated when the consistency level is Bounded Staleness.
        /// </summary>
        public readonly int MaxIntervalInSeconds;
        /// <summary>
        /// The number of stale requests tolerated when the consistency level is Bounded Staleness.
        /// </summary>
        public readonly int MaxStalenessPrefix;

        [OutputConstructor]
        private GetAccountConsistencyPoliciesResult(
            string consistencyLevel,
            int maxIntervalInSeconds,
            int maxStalenessPrefix)
        {
            ConsistencyLevel = consistencyLevel;
            MaxIntervalInSeconds = maxIntervalInSeconds;
            MaxStalenessPrefix = maxStalenessPrefix;
        }
    }

    [OutputType]
    public sealed class GetAccountGeoLocationsResult
    {
        public readonly int FailoverPriority;
        /// <summary>
        /// The ID of the virtual network subnet.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the Azure region hosting replicated data.
        /// </summary>
        public readonly string Location;

        [OutputConstructor]
        private GetAccountGeoLocationsResult(
            int failoverPriority,
            string id,
            string location)
        {
            FailoverPriority = failoverPriority;
            Id = id;
            Location = location;
        }
    }

    [OutputType]
    public sealed class GetAccountVirtualNetworkRulesResult
    {
        /// <summary>
        /// The ID of the virtual network subnet.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetAccountVirtualNetworkRulesResult(string id)
        {
            Id = id;
        }
    }
    }
}
