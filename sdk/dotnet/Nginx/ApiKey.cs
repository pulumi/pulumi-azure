// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Nginx
{
    /// <summary>
    /// Manages the Dataplane API Key for an Nginx Deployment.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-rg",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var examplePublicIp = new Azure.Network.PublicIp("example", new()
    ///     {
    ///         Name = "example",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         AllocationMethod = "Static",
    ///         Sku = "Standard",
    ///         Tags = 
    ///         {
    ///             { "environment", "Production" },
    ///         },
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    ///     {
    ///         Name = "example-vnet",
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("example", new()
    ///     {
    ///         Name = "example-subnet",
    ///         ResourceGroupName = example.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "delegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Name = "NGINX.NGINXPLUS/nginxDeployments",
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleDeployment = new Azure.Nginx.Deployment("example", new()
    ///     {
    ///         Name = "example-nginx",
    ///         ResourceGroupName = example.Name,
    ///         Sku = "standardv2_Monthly",
    ///         Location = example.Location,
    ///         AutomaticUpgradeChannel = "stable",
    ///         FrontendPublic = new Azure.Nginx.Inputs.DeploymentFrontendPublicArgs
    ///         {
    ///             IpAddresses = new[]
    ///             {
    ///                 examplePublicIp.Id,
    ///             },
    ///         },
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Azure.Nginx.Inputs.DeploymentNetworkInterfaceArgs
    ///             {
    ///                 SubnetId = exampleSubnet.Id,
    ///             },
    ///         },
    ///         Capacity = 20,
    ///         Email = "user@test.com",
    ///     });
    /// 
    ///     var exampleApiKey = new Azure.Nginx.ApiKey("example", new()
    ///     {
    ///         Name = "example-api-key",
    ///         NginxDeploymentId = exampleDeployment.Id,
    ///         SecretText = "727c8642-6807-4254-9d02-ae93bfad21de",
    ///         EndDateTime = "2027-01-01T00:00:00Z",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Nginx.NginxPlus` - 2024-11-01-preview
    /// 
    /// ## Import
    /// 
    /// An NGINX Dataplane API Key can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:nginx/apiKey:ApiKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/deploy1/apiKeys/key1
    /// ```
    /// </summary>
    [AzureResourceType("azure:nginx/apiKey:ApiKey")]
    public partial class ApiKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The RFC3339 formatted date-time after which this Dataplane API Key is no longer valid. The maximum value is now+2y.
        /// </summary>
        [Output("endDateTime")]
        public Output<string> EndDateTime { get; private set; } = null!;

        /// <summary>
        /// The first three characters of the secret text to help identify it in use.
        /// </summary>
        [Output("hint")]
        public Output<string> Hint { get; private set; } = null!;

        /// <summary>
        /// The name of the NGINX Dataplane API Key. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the NGINX Deployment that the API key is associated with. Changing this forces a new resource to be created.
        /// </summary>
        [Output("nginxDeploymentId")]
        public Output<string> NginxDeploymentId { get; private set; } = null!;

        /// <summary>
        /// The value used as the Dataplane API Key. The API key requirements can be found in the [NGINXaaS Documentation](https://docs.nginx.com/nginxaas/azure/quickstart/loadbalancer-kubernetes/#create-an-nginxaas-data-plane-api-key).
        /// </summary>
        [Output("secretText")]
        public Output<string> SecretText { get; private set; } = null!;


        /// <summary>
        /// Create a ApiKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApiKey(string name, ApiKeyArgs args, CustomResourceOptions? options = null)
            : base("azure:nginx/apiKey:ApiKey", name, args ?? new ApiKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApiKey(string name, Input<string> id, ApiKeyState? state = null, CustomResourceOptions? options = null)
            : base("azure:nginx/apiKey:ApiKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "secretText",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApiKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApiKey Get(string name, Input<string> id, ApiKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new ApiKey(name, id, state, options);
        }
    }

    public sealed class ApiKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The RFC3339 formatted date-time after which this Dataplane API Key is no longer valid. The maximum value is now+2y.
        /// </summary>
        [Input("endDateTime", required: true)]
        public Input<string> EndDateTime { get; set; } = null!;

        /// <summary>
        /// The name of the NGINX Dataplane API Key. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the NGINX Deployment that the API key is associated with. Changing this forces a new resource to be created.
        /// </summary>
        [Input("nginxDeploymentId", required: true)]
        public Input<string> NginxDeploymentId { get; set; } = null!;

        [Input("secretText", required: true)]
        private Input<string>? _secretText;

        /// <summary>
        /// The value used as the Dataplane API Key. The API key requirements can be found in the [NGINXaaS Documentation](https://docs.nginx.com/nginxaas/azure/quickstart/loadbalancer-kubernetes/#create-an-nginxaas-data-plane-api-key).
        /// </summary>
        public Input<string>? SecretText
        {
            get => _secretText;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretText = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ApiKeyArgs()
        {
        }
        public static new ApiKeyArgs Empty => new ApiKeyArgs();
    }

    public sealed class ApiKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The RFC3339 formatted date-time after which this Dataplane API Key is no longer valid. The maximum value is now+2y.
        /// </summary>
        [Input("endDateTime")]
        public Input<string>? EndDateTime { get; set; }

        /// <summary>
        /// The first three characters of the secret text to help identify it in use.
        /// </summary>
        [Input("hint")]
        public Input<string>? Hint { get; set; }

        /// <summary>
        /// The name of the NGINX Dataplane API Key. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the NGINX Deployment that the API key is associated with. Changing this forces a new resource to be created.
        /// </summary>
        [Input("nginxDeploymentId")]
        public Input<string>? NginxDeploymentId { get; set; }

        [Input("secretText")]
        private Input<string>? _secretText;

        /// <summary>
        /// The value used as the Dataplane API Key. The API key requirements can be found in the [NGINXaaS Documentation](https://docs.nginx.com/nginxaas/azure/quickstart/loadbalancer-kubernetes/#create-an-nginxaas-data-plane-api-key).
        /// </summary>
        public Input<string>? SecretText
        {
            get => _secretText;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretText = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ApiKeyState()
        {
        }
        public static new ApiKeyState Empty => new ApiKeyState();
    }
}
