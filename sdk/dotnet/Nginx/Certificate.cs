// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Nginx
{
    /// <summary>
    /// Manages a Certificate for an NGinx Deployment.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Azure.Nginx.Certificate("test", new()
    ///     {
    ///         NginxDeploymentId = azurerm_nginx_deployment.Test.Id,
    ///         KeyVirtualPath = "/src/cert/soservermekey.key",
    ///         CertificateVirtualPath = "/src/cert/server.cert",
    ///         KeyVaultSecretId = azurerm_key_vault_certificate.Test.Secret_id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An Nginx Certificate can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:nginx/certificate:Certificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/deploy1/certificates/cer1
    /// ```
    /// </summary>
    [AzureResourceType("azure:nginx/certificate:Certificate")]
    public partial class Certificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specify the path to the cert file of this certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Output("certificateVirtualPath")]
        public Output<string> CertificateVirtualPath { get; private set; } = null!;

        /// <summary>
        /// Specify the ID of the Key Vault Secret for this certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Output("keyVaultSecretId")]
        public Output<string> KeyVaultSecretId { get; private set; } = null!;

        /// <summary>
        /// Specify the path to the key file of this certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Output("keyVirtualPath")]
        public Output<string> KeyVirtualPath { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Output("nginxDeploymentId")]
        public Output<string> NginxDeploymentId { get; private set; } = null!;


        /// <summary>
        /// Create a Certificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Certificate(string name, CertificateArgs args, CustomResourceOptions? options = null)
            : base("azure:nginx/certificate:Certificate", name, args ?? new CertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Certificate(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
            : base("azure:nginx/certificate:Certificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Certificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Certificate Get(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new Certificate(name, id, state, options);
        }
    }

    public sealed class CertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify the path to the cert file of this certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Input("certificateVirtualPath", required: true)]
        public Input<string> CertificateVirtualPath { get; set; } = null!;

        /// <summary>
        /// Specify the ID of the Key Vault Secret for this certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Input("keyVaultSecretId", required: true)]
        public Input<string> KeyVaultSecretId { get; set; } = null!;

        /// <summary>
        /// Specify the path to the key file of this certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Input("keyVirtualPath", required: true)]
        public Input<string> KeyVirtualPath { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Input("nginxDeploymentId", required: true)]
        public Input<string> NginxDeploymentId { get; set; } = null!;

        public CertificateArgs()
        {
        }
        public static new CertificateArgs Empty => new CertificateArgs();
    }

    public sealed class CertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify the path to the cert file of this certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Input("certificateVirtualPath")]
        public Input<string>? CertificateVirtualPath { get; set; }

        /// <summary>
        /// Specify the ID of the Key Vault Secret for this certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Input("keyVaultSecretId")]
        public Input<string>? KeyVaultSecretId { get; set; }

        /// <summary>
        /// Specify the path to the key file of this certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Input("keyVirtualPath")]
        public Input<string>? KeyVirtualPath { get; set; }

        /// <summary>
        /// The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Input("nginxDeploymentId")]
        public Input<string>? NginxDeploymentId { get; set; }

        public CertificateState()
        {
        }
        public static new CertificateState Empty => new CertificateState();
    }
}
