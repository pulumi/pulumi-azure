// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Nginx
{
    /// <summary>
    /// Manages a Certificate for an NGinx Deployment.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System;
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// 	
    /// string ReadFileBase64(string path) 
    /// {
    ///     return Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)));
    /// }
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var examplePublicIp = new Azure.Network.PublicIp("examplePublicIp", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AllocationMethod = "Static",
    ///         Sku = "Standard",
    ///         Tags = 
    ///         {
    ///             { "environment", "Production" },
    ///         },
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "delegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Name = "NGINX.NGINXPLUS/nginxDeployments",
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleDeployment = new Azure.Nginx.Deployment("exampleDeployment", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "publicpreview_Monthly_gmz7xq9ge3py",
    ///         Location = exampleResourceGroup.Location,
    ///         ManagedResourceGroup = "example",
    ///         DiagnoseSupportEnabled = true,
    ///         FrontendPublic = new Azure.Nginx.Inputs.DeploymentFrontendPublicArgs
    ///         {
    ///             IpAddresses = new[]
    ///             {
    ///                 examplePublicIp.Id,
    ///             },
    ///         },
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Azure.Nginx.Inputs.DeploymentNetworkInterfaceArgs
    ///             {
    ///                 SubnetId = exampleSubnet.Id,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("exampleKeyVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SkuName = "premium",
    ///         AccessPolicies = new[]
    ///         {
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///                 ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///                 CertificatePermissions = new[]
    ///                 {
    ///                     "Create",
    ///                     "Delete",
    ///                     "DeleteIssuers",
    ///                     "Get",
    ///                     "GetIssuers",
    ///                     "Import",
    ///                     "List",
    ///                     "ListIssuers",
    ///                     "ManageContacts",
    ///                     "ManageIssuers",
    ///                     "SetIssuers",
    ///                     "Update",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleCertificate = new Azure.KeyVault.Certificate("exampleCertificate", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         KeyVaultCertificate = new Azure.KeyVault.Inputs.CertificateCertificateArgs
    ///         {
    ///             Contents = ReadFileBase64("certificate-to-import.pfx"),
    ///             Password = "",
    ///         },
    ///     });
    /// 
    ///     var exampleNginx_certificateCertificate = new Azure.Nginx.Certificate("exampleNginx/certificateCertificate", new()
    ///     {
    ///         NginxDeploymentId = exampleDeployment.Id,
    ///         KeyVirtualPath = "/src/cert/soservermekey.key",
    ///         CertificateVirtualPath = "/src/cert/server.cert",
    ///         KeyVaultSecretId = exampleCertificate.SecretId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An Nginx Certificate can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:nginx/certificate:Certificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/deploy1/certificates/cer1
    /// ```
    /// </summary>
    [AzureResourceType("azure:nginx/certificate:Certificate")]
    public partial class Certificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specify the path to the cert file of this certificate.
        /// </summary>
        [Output("certificateVirtualPath")]
        public Output<string> CertificateVirtualPath { get; private set; } = null!;

        /// <summary>
        /// Specify the ID of the Key Vault Secret for this certificate.
        /// </summary>
        [Output("keyVaultSecretId")]
        public Output<string> KeyVaultSecretId { get; private set; } = null!;

        /// <summary>
        /// Specify the path to the key file of this certificate.
        /// </summary>
        [Output("keyVirtualPath")]
        public Output<string> KeyVirtualPath { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Output("nginxDeploymentId")]
        public Output<string> NginxDeploymentId { get; private set; } = null!;


        /// <summary>
        /// Create a Certificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Certificate(string name, CertificateArgs args, CustomResourceOptions? options = null)
            : base("azure:nginx/certificate:Certificate", name, args ?? new CertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Certificate(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
            : base("azure:nginx/certificate:Certificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Certificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Certificate Get(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new Certificate(name, id, state, options);
        }
    }

    public sealed class CertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify the path to the cert file of this certificate.
        /// </summary>
        [Input("certificateVirtualPath", required: true)]
        public Input<string> CertificateVirtualPath { get; set; } = null!;

        /// <summary>
        /// Specify the ID of the Key Vault Secret for this certificate.
        /// </summary>
        [Input("keyVaultSecretId", required: true)]
        public Input<string> KeyVaultSecretId { get; set; } = null!;

        /// <summary>
        /// Specify the path to the key file of this certificate.
        /// </summary>
        [Input("keyVirtualPath", required: true)]
        public Input<string> KeyVirtualPath { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Input("nginxDeploymentId", required: true)]
        public Input<string> NginxDeploymentId { get; set; } = null!;

        public CertificateArgs()
        {
        }
        public static new CertificateArgs Empty => new CertificateArgs();
    }

    public sealed class CertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify the path to the cert file of this certificate.
        /// </summary>
        [Input("certificateVirtualPath")]
        public Input<string>? CertificateVirtualPath { get; set; }

        /// <summary>
        /// Specify the ID of the Key Vault Secret for this certificate.
        /// </summary>
        [Input("keyVaultSecretId")]
        public Input<string>? KeyVaultSecretId { get; set; }

        /// <summary>
        /// Specify the path to the key file of this certificate.
        /// </summary>
        [Input("keyVirtualPath")]
        public Input<string>? KeyVirtualPath { get; set; }

        /// <summary>
        /// The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
        /// </summary>
        [Input("nginxDeploymentId")]
        public Input<string>? NginxDeploymentId { get; set; }

        public CertificateState()
        {
        }
        public static new CertificateState Empty => new CertificateState();
    }
}
