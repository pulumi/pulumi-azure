// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Nginx
{
    /// <summary>
    /// Manages the configuration for a Nginx Deployment.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-rg",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var examplePublicIp = new Azure.Network.PublicIp("example", new()
    ///     {
    ///         Name = "example",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         AllocationMethod = "Static",
    ///         Sku = "Standard",
    ///         Tags = 
    ///         {
    ///             { "environment", "Production" },
    ///         },
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    ///     {
    ///         Name = "example-vnet",
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("example", new()
    ///     {
    ///         Name = "example-subnet",
    ///         ResourceGroupName = example.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "delegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Name = "NGINX.NGINXPLUS/nginxDeployments",
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleDeployment = new Azure.Nginx.Deployment("example", new()
    ///     {
    ///         Name = "example-nginx",
    ///         ResourceGroupName = example.Name,
    ///         Sku = "publicpreview_Monthly_gmz7xq9ge3py",
    ///         Location = example.Location,
    ///         DiagnoseSupportEnabled = true,
    ///         FrontendPublic = new Azure.Nginx.Inputs.DeploymentFrontendPublicArgs
    ///         {
    ///             IpAddresses = new[]
    ///             {
    ///                 examplePublicIp.Id,
    ///             },
    ///         },
    ///         NetworkInterfaces = new[]
    ///         {
    ///             new Azure.Nginx.Inputs.DeploymentNetworkInterfaceArgs
    ///             {
    ///                 SubnetId = exampleSubnet.Id,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleConfiguration = new Azure.Nginx.Configuration("example", new()
    ///     {
    ///         NginxDeploymentId = exampleDeployment.Id,
    ///         RootFile = "/etc/nginx/nginx.conf",
    ///         ConfigFiles = new[]
    ///         {
    ///             new Azure.Nginx.Inputs.ConfigurationConfigFileArgs
    ///             {
    ///                 Content = Std.Base64encode.Invoke(new()
    ///                 {
    ///                     Input = @"http {
    ///     server {
    ///         listen 80;
    ///         location / {
    ///             default_type text/html;
    ///             return 200 '&lt;!doctype html&gt;&lt;html lang=""en""&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;
    ///                 &lt;div&gt;this one will be updated&lt;/div&gt;
    ///                 &lt;div&gt;at 10:38 am&lt;/div&gt;
    ///             &lt;/body&gt;&lt;/html&gt;';
    ///         }
    ///         include site/*.conf;
    ///     }
    /// }
    /// ",
    ///                 }).Apply(invoke =&gt; invoke.Result),
    ///                 VirtualPath = "/etc/nginx/nginx.conf",
    ///             },
    ///             new Azure.Nginx.Inputs.ConfigurationConfigFileArgs
    ///             {
    ///                 Content = Std.Base64encode.Invoke(new()
    ///                 {
    ///                     Input = @"location /bbb {
    ///  default_type text/html;
    ///  return 200 '&lt;!doctype html&gt;&lt;html lang=""en""&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;
    ///   &lt;div&gt;this one will be updated&lt;/div&gt;
    ///   &lt;div&gt;at 10:38 am&lt;/div&gt;
    ///  &lt;/body&gt;&lt;/html&gt;';
    /// }
    /// ",
    ///                 }).Apply(invoke =&gt; invoke.Result),
    ///                 VirtualPath = "/etc/nginx/site/b.conf",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Nginx.NginxPlus` - 2024-11-01-preview
    /// 
    /// ## Import
    /// 
    /// An Nginx Configuration can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:nginx/configuration:Configuration example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/dep1/configurations/default
    /// ```
    /// </summary>
    [AzureResourceType("azure:nginx/configuration:Configuration")]
    public partial class Configuration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// One or more `ConfigFile` blocks as defined below.
        /// </summary>
        [Output("configFiles")]
        public Output<ImmutableArray<Outputs.ConfigurationConfigFile>> ConfigFiles { get; private set; } = null!;

        /// <summary>
        /// The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
        /// </summary>
        [Output("nginxDeploymentId")]
        public Output<string> NginxDeploymentId { get; private set; } = null!;

        /// <summary>
        /// Specifies the package data for this configuration.
        /// </summary>
        [Output("packageData")]
        public Output<string?> PackageData { get; private set; } = null!;

        /// <summary>
        /// One or more `ProtectedFile` blocks with sensitive information as defined below. If specified `ConfigFile` must also be specified.
        /// </summary>
        [Output("protectedFiles")]
        public Output<ImmutableArray<Outputs.ConfigurationProtectedFile>> ProtectedFiles { get; private set; } = null!;

        /// <summary>
        /// Specifies the root file path of this Nginx Configuration.
        /// </summary>
        [Output("rootFile")]
        public Output<string> RootFile { get; private set; } = null!;


        /// <summary>
        /// Create a Configuration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Configuration(string name, ConfigurationArgs args, CustomResourceOptions? options = null)
            : base("azure:nginx/configuration:Configuration", name, args ?? new ConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Configuration(string name, Input<string> id, ConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("azure:nginx/configuration:Configuration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Configuration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Configuration Get(string name, Input<string> id, ConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new Configuration(name, id, state, options);
        }
    }

    public sealed class ConfigurationArgs : global::Pulumi.ResourceArgs
    {
        [Input("configFiles")]
        private InputList<Inputs.ConfigurationConfigFileArgs>? _configFiles;

        /// <summary>
        /// One or more `ConfigFile` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ConfigurationConfigFileArgs> ConfigFiles
        {
            get => _configFiles ?? (_configFiles = new InputList<Inputs.ConfigurationConfigFileArgs>());
            set => _configFiles = value;
        }

        /// <summary>
        /// The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
        /// </summary>
        [Input("nginxDeploymentId", required: true)]
        public Input<string> NginxDeploymentId { get; set; } = null!;

        /// <summary>
        /// Specifies the package data for this configuration.
        /// </summary>
        [Input("packageData")]
        public Input<string>? PackageData { get; set; }

        [Input("protectedFiles")]
        private InputList<Inputs.ConfigurationProtectedFileArgs>? _protectedFiles;

        /// <summary>
        /// One or more `ProtectedFile` blocks with sensitive information as defined below. If specified `ConfigFile` must also be specified.
        /// </summary>
        public InputList<Inputs.ConfigurationProtectedFileArgs> ProtectedFiles
        {
            get => _protectedFiles ?? (_protectedFiles = new InputList<Inputs.ConfigurationProtectedFileArgs>());
            set => _protectedFiles = value;
        }

        /// <summary>
        /// Specifies the root file path of this Nginx Configuration.
        /// </summary>
        [Input("rootFile", required: true)]
        public Input<string> RootFile { get; set; } = null!;

        public ConfigurationArgs()
        {
        }
        public static new ConfigurationArgs Empty => new ConfigurationArgs();
    }

    public sealed class ConfigurationState : global::Pulumi.ResourceArgs
    {
        [Input("configFiles")]
        private InputList<Inputs.ConfigurationConfigFileGetArgs>? _configFiles;

        /// <summary>
        /// One or more `ConfigFile` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ConfigurationConfigFileGetArgs> ConfigFiles
        {
            get => _configFiles ?? (_configFiles = new InputList<Inputs.ConfigurationConfigFileGetArgs>());
            set => _configFiles = value;
        }

        /// <summary>
        /// The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
        /// </summary>
        [Input("nginxDeploymentId")]
        public Input<string>? NginxDeploymentId { get; set; }

        /// <summary>
        /// Specifies the package data for this configuration.
        /// </summary>
        [Input("packageData")]
        public Input<string>? PackageData { get; set; }

        [Input("protectedFiles")]
        private InputList<Inputs.ConfigurationProtectedFileGetArgs>? _protectedFiles;

        /// <summary>
        /// One or more `ProtectedFile` blocks with sensitive information as defined below. If specified `ConfigFile` must also be specified.
        /// </summary>
        public InputList<Inputs.ConfigurationProtectedFileGetArgs> ProtectedFiles
        {
            get => _protectedFiles ?? (_protectedFiles = new InputList<Inputs.ConfigurationProtectedFileGetArgs>());
            set => _protectedFiles = value;
        }

        /// <summary>
        /// Specifies the root file path of this Nginx Configuration.
        /// </summary>
        [Input("rootFile")]
        public Input<string>? RootFile { get; set; }

        public ConfigurationState()
        {
        }
        public static new ConfigurationState Empty => new ConfigurationState();
    }
}
