// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Nginx
{
    /// <summary>
    /// Manages the configuration for a Nginx Deployment.
    /// 
    /// ## Import
    /// 
    /// An Nginx Configuration can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:nginx/configuration:Configuration example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/dep1/configurations/default
    /// ```
    /// </summary>
    [AzureResourceType("azure:nginx/configuration:Configuration")]
    public partial class Configuration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// One or more `config_file` blocks as defined below.
        /// </summary>
        [Output("configFiles")]
        public Output<ImmutableArray<Outputs.ConfigurationConfigFile>> ConfigFiles { get; private set; } = null!;

        /// <summary>
        /// The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
        /// </summary>
        [Output("nginxDeploymentId")]
        public Output<string> NginxDeploymentId { get; private set; } = null!;

        /// <summary>
        /// Specify the package data for this configuration.
        /// </summary>
        [Output("packageData")]
        public Output<string?> PackageData { get; private set; } = null!;

        /// <summary>
        /// One or more `protected_file` blocks with sensitive information as defined below. If specified `config_file` must also be specified.
        /// </summary>
        [Output("protectedFiles")]
        public Output<ImmutableArray<Outputs.ConfigurationProtectedFile>> ProtectedFiles { get; private set; } = null!;

        /// <summary>
        /// Specify the root file path of this Nginx Configuration.
        /// </summary>
        [Output("rootFile")]
        public Output<string> RootFile { get; private set; } = null!;


        /// <summary>
        /// Create a Configuration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Configuration(string name, ConfigurationArgs args, CustomResourceOptions? options = null)
            : base("azure:nginx/configuration:Configuration", name, args ?? new ConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Configuration(string name, Input<string> id, ConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("azure:nginx/configuration:Configuration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Configuration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Configuration Get(string name, Input<string> id, ConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new Configuration(name, id, state, options);
        }
    }

    public sealed class ConfigurationArgs : global::Pulumi.ResourceArgs
    {
        [Input("configFiles")]
        private InputList<Inputs.ConfigurationConfigFileArgs>? _configFiles;

        /// <summary>
        /// One or more `config_file` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ConfigurationConfigFileArgs> ConfigFiles
        {
            get => _configFiles ?? (_configFiles = new InputList<Inputs.ConfigurationConfigFileArgs>());
            set => _configFiles = value;
        }

        /// <summary>
        /// The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
        /// </summary>
        [Input("nginxDeploymentId", required: true)]
        public Input<string> NginxDeploymentId { get; set; } = null!;

        /// <summary>
        /// Specify the package data for this configuration.
        /// </summary>
        [Input("packageData")]
        public Input<string>? PackageData { get; set; }

        [Input("protectedFiles")]
        private InputList<Inputs.ConfigurationProtectedFileArgs>? _protectedFiles;

        /// <summary>
        /// One or more `protected_file` blocks with sensitive information as defined below. If specified `config_file` must also be specified.
        /// </summary>
        public InputList<Inputs.ConfigurationProtectedFileArgs> ProtectedFiles
        {
            get => _protectedFiles ?? (_protectedFiles = new InputList<Inputs.ConfigurationProtectedFileArgs>());
            set => _protectedFiles = value;
        }

        /// <summary>
        /// Specify the root file path of this Nginx Configuration.
        /// </summary>
        [Input("rootFile", required: true)]
        public Input<string> RootFile { get; set; } = null!;

        public ConfigurationArgs()
        {
        }
        public static new ConfigurationArgs Empty => new ConfigurationArgs();
    }

    public sealed class ConfigurationState : global::Pulumi.ResourceArgs
    {
        [Input("configFiles")]
        private InputList<Inputs.ConfigurationConfigFileGetArgs>? _configFiles;

        /// <summary>
        /// One or more `config_file` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ConfigurationConfigFileGetArgs> ConfigFiles
        {
            get => _configFiles ?? (_configFiles = new InputList<Inputs.ConfigurationConfigFileGetArgs>());
            set => _configFiles = value;
        }

        /// <summary>
        /// The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
        /// </summary>
        [Input("nginxDeploymentId")]
        public Input<string>? NginxDeploymentId { get; set; }

        /// <summary>
        /// Specify the package data for this configuration.
        /// </summary>
        [Input("packageData")]
        public Input<string>? PackageData { get; set; }

        [Input("protectedFiles")]
        private InputList<Inputs.ConfigurationProtectedFileGetArgs>? _protectedFiles;

        /// <summary>
        /// One or more `protected_file` blocks with sensitive information as defined below. If specified `config_file` must also be specified.
        /// </summary>
        public InputList<Inputs.ConfigurationProtectedFileGetArgs> ProtectedFiles
        {
            get => _protectedFiles ?? (_protectedFiles = new InputList<Inputs.ConfigurationProtectedFileGetArgs>());
            set => _protectedFiles = value;
        }

        /// <summary>
        /// Specify the root file path of this Nginx Configuration.
        /// </summary>
        [Input("rootFile")]
        public Input<string>? RootFile { get; set; }

        public ConfigurationState()
        {
        }
        public static new ConfigurationState Empty => new ConfigurationState();
    }
}
