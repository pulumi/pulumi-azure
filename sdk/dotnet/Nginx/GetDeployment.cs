// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Nginx
{
    public static class GetDeployment
    {
        /// <summary>
        /// Use this data source to access information about an existing Nginx Deployment.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Nginx.GetDeployment.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getDeploymentResult =&gt; getDeploymentResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDeploymentResult> InvokeAsync(GetDeploymentArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeploymentResult>("azure:nginx/getDeployment:getDeployment", args ?? new GetDeploymentArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Nginx Deployment.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Nginx.GetDeployment.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         ResourceGroupName = "existing",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getDeploymentResult =&gt; getDeploymentResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDeploymentResult> Invoke(GetDeploymentInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeploymentResult>("azure:nginx/getDeployment:getDeployment", args ?? new GetDeploymentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeploymentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Nginx Deployment.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Nginx Deployment exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetDeploymentArgs()
        {
        }
        public static new GetDeploymentArgs Empty => new GetDeploymentArgs();
    }

    public sealed class GetDeploymentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Nginx Deployment.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Nginx Deployment exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetDeploymentInvokeArgs()
        {
        }
        public static new GetDeploymentInvokeArgs Empty => new GetDeploymentInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeploymentResult
    {
        /// <summary>
        /// The number of NGINX capacity units for this Nginx Deployment.
        /// </summary>
        public readonly int Capacity;
        /// <summary>
        /// Whether diagnostic settings are enabled.
        /// </summary>
        public readonly bool DiagnoseSupportEnabled;
        /// <summary>
        /// Preferred email associated with the Nginx Deployment.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// A `frontend_private` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentFrontendPrivateResult> FrontendPrivates;
        /// <summary>
        /// A `frontend_public` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentFrontendPublicResult> FrontendPublics;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentIdentityResult> Identities;
        /// <summary>
        /// List of public IPs of the Ngix Deployment.
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// The Azure Region where the Nginx Deployment exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// A `logging_storage_account` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentLoggingStorageAccountResult> LoggingStorageAccounts;
        /// <summary>
        /// Auto-generated managed resource group for the Nginx Deployment.
        /// </summary>
        public readonly string ManagedResourceGroup;
        /// <summary>
        /// The account name of the StorageAccount for logging.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A `network_interface` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeploymentNetworkInterfaceResult> NetworkInterfaces;
        /// <summary>
        /// NGINX version of the Nginx Deployment.
        /// </summary>
        public readonly string NginxVersion;
        public readonly string ResourceGroupName;
        /// <summary>
        /// Name of the SKU for this Nginx Deployment.
        /// </summary>
        public readonly string Sku;
        /// <summary>
        /// A mapping of tags assigned to the Nginx Deployment.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetDeploymentResult(
            int capacity,

            bool diagnoseSupportEnabled,

            string email,

            ImmutableArray<Outputs.GetDeploymentFrontendPrivateResult> frontendPrivates,

            ImmutableArray<Outputs.GetDeploymentFrontendPublicResult> frontendPublics,

            string id,

            ImmutableArray<Outputs.GetDeploymentIdentityResult> identities,

            string ipAddress,

            string location,

            ImmutableArray<Outputs.GetDeploymentLoggingStorageAccountResult> loggingStorageAccounts,

            string managedResourceGroup,

            string name,

            ImmutableArray<Outputs.GetDeploymentNetworkInterfaceResult> networkInterfaces,

            string nginxVersion,

            string resourceGroupName,

            string sku,

            ImmutableDictionary<string, string> tags)
        {
            Capacity = capacity;
            DiagnoseSupportEnabled = diagnoseSupportEnabled;
            Email = email;
            FrontendPrivates = frontendPrivates;
            FrontendPublics = frontendPublics;
            Id = id;
            Identities = identities;
            IpAddress = ipAddress;
            Location = location;
            LoggingStorageAccounts = loggingStorageAccounts;
            ManagedResourceGroup = managedResourceGroup;
            Name = name;
            NetworkInterfaces = networkInterfaces;
            NginxVersion = nginxVersion;
            ResourceGroupName = resourceGroupName;
            Sku = sku;
            Tags = tags;
        }
    }
}
