// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Consumption
{
    /// <summary>
    /// Manages a Resource Group Consumption Budget.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "eastus",
    ///     });
    /// 
    ///     var exampleActionGroup = new Azure.Monitoring.ActionGroup("exampleActionGroup", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ShortName = "example",
    ///     });
    /// 
    ///     var exampleBudgetResourceGroup = new Azure.Consumption.BudgetResourceGroup("exampleBudgetResourceGroup", new()
    ///     {
    ///         ResourceGroupId = exampleResourceGroup.Id,
    ///         Amount = 1000,
    ///         TimeGrain = "Monthly",
    ///         TimePeriod = new Azure.Consumption.Inputs.BudgetResourceGroupTimePeriodArgs
    ///         {
    ///             StartDate = "2022-06-01T00:00:00Z",
    ///             EndDate = "2022-07-01T00:00:00Z",
    ///         },
    ///         Filter = new Azure.Consumption.Inputs.BudgetResourceGroupFilterArgs
    ///         {
    ///             Dimensions = new[]
    ///             {
    ///                 new Azure.Consumption.Inputs.BudgetResourceGroupFilterDimensionArgs
    ///                 {
    ///                     Name = "ResourceId",
    ///                     Values = new[]
    ///                     {
    ///                         exampleActionGroup.Id,
    ///                     },
    ///                 },
    ///             },
    ///             Tags = new[]
    ///             {
    ///                 new Azure.Consumption.Inputs.BudgetResourceGroupFilterTagArgs
    ///                 {
    ///                     Name = "foo",
    ///                     Values = new[]
    ///                     {
    ///                         "bar",
    ///                         "baz",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Notifications = new[]
    ///         {
    ///             new Azure.Consumption.Inputs.BudgetResourceGroupNotificationArgs
    ///             {
    ///                 Enabled = true,
    ///                 Threshold = 90,
    ///                 Operator = "EqualTo",
    ///                 ThresholdType = "Forecasted",
    ///                 ContactEmails = new[]
    ///                 {
    ///                     "foo@example.com",
    ///                     "bar@example.com",
    ///                 },
    ///                 ContactGroups = new[]
    ///                 {
    ///                     exampleActionGroup.Id,
    ///                 },
    ///                 ContactRoles = new[]
    ///                 {
    ///                     "Owner",
    ///                 },
    ///             },
    ///             new Azure.Consumption.Inputs.BudgetResourceGroupNotificationArgs
    ///             {
    ///                 Enabled = false,
    ///                 Threshold = 100,
    ///                 Operator = "GreaterThan",
    ///                 ContactEmails = new[]
    ///                 {
    ///                     "foo@example.com",
    ///                     "bar@example.com",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Resource Group Consumption Budgets can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:consumption/budgetResourceGroup:BudgetResourceGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Consumption/budgets/resourceGroup1
    /// ```
    /// </summary>
    [AzureResourceType("azure:consumption/budgetResourceGroup:BudgetResourceGroup")]
    public partial class BudgetResourceGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The total amount of cost to track with the budget.
        /// </summary>
        [Output("amount")]
        public Output<double> Amount { get; private set; } = null!;

        /// <summary>
        /// (Optional) The ETag of the Resource Group Consumption Budget
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// A `filter` block as defined below.
        /// </summary>
        [Output("filter")]
        public Output<Outputs.BudgetResourceGroupFilter?> Filter { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Resource Group Consumption Budget. Changing this forces a new Resource Group Consumption Budget to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more `notification` blocks as defined below.
        /// </summary>
        [Output("notifications")]
        public Output<ImmutableArray<Outputs.BudgetResourceGroupNotification>> Notifications { get; private set; } = null!;

        /// <summary>
        /// The ID of the Resource Group to create the consumption budget for in the form of /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1. Changing this forces a new Resource Group Consumption Budget to be created.
        /// </summary>
        [Output("resourceGroupId")]
        public Output<string> ResourceGroupId { get; private set; } = null!;

        /// <summary>
        /// The time covered by a budget. Tracking of the amount will be reset based on the time grain. Must be one of `BillingAnnual`, `BillingMonth`, `BillingQuarter`, `Annually`, `Monthly` and `Quarterly`. Defaults to `Monthly`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("timeGrain")]
        public Output<string?> TimeGrain { get; private set; } = null!;

        /// <summary>
        /// A `time_period` block as defined below.
        /// </summary>
        [Output("timePeriod")]
        public Output<Outputs.BudgetResourceGroupTimePeriod> TimePeriod { get; private set; } = null!;


        /// <summary>
        /// Create a BudgetResourceGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BudgetResourceGroup(string name, BudgetResourceGroupArgs args, CustomResourceOptions? options = null)
            : base("azure:consumption/budgetResourceGroup:BudgetResourceGroup", name, args ?? new BudgetResourceGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BudgetResourceGroup(string name, Input<string> id, BudgetResourceGroupState? state = null, CustomResourceOptions? options = null)
            : base("azure:consumption/budgetResourceGroup:BudgetResourceGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BudgetResourceGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BudgetResourceGroup Get(string name, Input<string> id, BudgetResourceGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new BudgetResourceGroup(name, id, state, options);
        }
    }

    public sealed class BudgetResourceGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The total amount of cost to track with the budget.
        /// </summary>
        [Input("amount", required: true)]
        public Input<double> Amount { get; set; } = null!;

        /// <summary>
        /// (Optional) The ETag of the Resource Group Consumption Budget
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// A `filter` block as defined below.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.BudgetResourceGroupFilterArgs>? Filter { get; set; }

        /// <summary>
        /// The name which should be used for this Resource Group Consumption Budget. Changing this forces a new Resource Group Consumption Budget to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications", required: true)]
        private InputList<Inputs.BudgetResourceGroupNotificationArgs>? _notifications;

        /// <summary>
        /// One or more `notification` blocks as defined below.
        /// </summary>
        public InputList<Inputs.BudgetResourceGroupNotificationArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.BudgetResourceGroupNotificationArgs>());
            set => _notifications = value;
        }

        /// <summary>
        /// The ID of the Resource Group to create the consumption budget for in the form of /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1. Changing this forces a new Resource Group Consumption Budget to be created.
        /// </summary>
        [Input("resourceGroupId", required: true)]
        public Input<string> ResourceGroupId { get; set; } = null!;

        /// <summary>
        /// The time covered by a budget. Tracking of the amount will be reset based on the time grain. Must be one of `BillingAnnual`, `BillingMonth`, `BillingQuarter`, `Annually`, `Monthly` and `Quarterly`. Defaults to `Monthly`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("timeGrain")]
        public Input<string>? TimeGrain { get; set; }

        /// <summary>
        /// A `time_period` block as defined below.
        /// </summary>
        [Input("timePeriod", required: true)]
        public Input<Inputs.BudgetResourceGroupTimePeriodArgs> TimePeriod { get; set; } = null!;

        public BudgetResourceGroupArgs()
        {
        }
        public static new BudgetResourceGroupArgs Empty => new BudgetResourceGroupArgs();
    }

    public sealed class BudgetResourceGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The total amount of cost to track with the budget.
        /// </summary>
        [Input("amount")]
        public Input<double>? Amount { get; set; }

        /// <summary>
        /// (Optional) The ETag of the Resource Group Consumption Budget
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// A `filter` block as defined below.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.BudgetResourceGroupFilterGetArgs>? Filter { get; set; }

        /// <summary>
        /// The name which should be used for this Resource Group Consumption Budget. Changing this forces a new Resource Group Consumption Budget to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications")]
        private InputList<Inputs.BudgetResourceGroupNotificationGetArgs>? _notifications;

        /// <summary>
        /// One or more `notification` blocks as defined below.
        /// </summary>
        public InputList<Inputs.BudgetResourceGroupNotificationGetArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.BudgetResourceGroupNotificationGetArgs>());
            set => _notifications = value;
        }

        /// <summary>
        /// The ID of the Resource Group to create the consumption budget for in the form of /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1. Changing this forces a new Resource Group Consumption Budget to be created.
        /// </summary>
        [Input("resourceGroupId")]
        public Input<string>? ResourceGroupId { get; set; }

        /// <summary>
        /// The time covered by a budget. Tracking of the amount will be reset based on the time grain. Must be one of `BillingAnnual`, `BillingMonth`, `BillingQuarter`, `Annually`, `Monthly` and `Quarterly`. Defaults to `Monthly`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("timeGrain")]
        public Input<string>? TimeGrain { get; set; }

        /// <summary>
        /// A `time_period` block as defined below.
        /// </summary>
        [Input("timePeriod")]
        public Input<Inputs.BudgetResourceGroupTimePeriodGetArgs>? TimePeriod { get; set; }

        public BudgetResourceGroupState()
        {
        }
        public static new BudgetResourceGroupState Empty => new BudgetResourceGroupState();
    }
}
