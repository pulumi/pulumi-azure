// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Azure.NetApp
{
    public static class GetAccount
    {
        /// <summary>
        /// Uses this data source to access information about an existing NetApp Account.
        /// 
        /// ## NetApp Account Usage
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.NetApp.GetAccount.InvokeAsync(new Azure.NetApp.GetAccountArgs
        ///         {
        ///             ResourceGroupName = "acctestRG",
        ///             Name = "acctestnetappaccount",
        ///         }));
        ///         this.NetappAccountId = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("netappAccountId")]
        ///     public Output&lt;string&gt; NetappAccountId { get; set; }
        /// }
        /// ```
        /// </summary>
        public static Task<GetAccountResult> InvokeAsync(GetAccountArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAccountResult>("azure:netapp/getAccount:getAccount", args ?? new GetAccountArgs(), options.WithVersion());

        /// <summary>
        /// Uses this data source to access information about an existing NetApp Account.
        /// 
        /// ## NetApp Account Usage
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.NetApp.GetAccount.InvokeAsync(new Azure.NetApp.GetAccountArgs
        ///         {
        ///             ResourceGroupName = "acctestRG",
        ///             Name = "acctestnetappaccount",
        ///         }));
        ///         this.NetappAccountId = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("netappAccountId")]
        ///     public Output&lt;string&gt; NetappAccountId { get; set; }
        /// }
        /// ```
        /// </summary>
        public static Output<GetAccountResult> Invoke(GetAccountInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAccountResult>("azure:netapp/getAccount:getAccount", args ?? new GetAccountInvokeArgs(), options.WithVersion());
    }


    public sealed class GetAccountArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp Account.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the NetApp Account exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetAccountArgs()
        {
        }
    }

    public sealed class GetAccountInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp Account.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the NetApp Account exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetAccountInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAccountResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Region where the NetApp Account exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        public readonly string ResourceGroupName;

        [OutputConstructor]
        private GetAccountResult(
            string id,

            string location,

            string name,

            string resourceGroupName)
        {
            Id = id;
            Location = location;
            Name = name;
            ResourceGroupName = resourceGroupName;
        }
    }
}
