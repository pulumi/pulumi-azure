// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.NetApp
{
    /// <summary>
    /// Manages a Volume Quota Rule.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "netapp",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Name = "Microsoft.Netapp/volumes",
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/networkinterfaces/*",
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleAccount = new Azure.NetApp.Account("exampleAccount", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var examplePool = new Azure.NetApp.Pool("examplePool", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AccountName = exampleAccount.Name,
    ///         ServiceLevel = "Premium",
    ///         SizeInTb = 4,
    ///     });
    /// 
    ///     var exampleVolume = new Azure.NetApp.Volume("exampleVolume", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         Zone = "1",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AccountName = exampleAccount.Name,
    ///         PoolName = examplePool.Name,
    ///         VolumePath = "my-unique-file-path",
    ///         ServiceLevel = "Premium",
    ///         SubnetId = exampleSubnet.Id,
    ///         NetworkFeatures = "Basic",
    ///         Protocols = new[]
    ///         {
    ///             "NFSv4.1",
    ///         },
    ///         SecurityStyle = "unix",
    ///         StorageQuotaInGb = 100,
    ///         SnapshotDirectoryVisible = false,
    ///     });
    /// 
    ///     var quota1 = new Azure.NetApp.VolumeQuotaRule("quota1", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         VolumeId = exampleVolume.Id,
    ///         QuotaTarget = "3001",
    ///         QuotaSizeInKib = 1024,
    ///         QuotaType = "IndividualGroupQuota",
    ///     });
    /// 
    ///     var quota2 = new Azure.NetApp.VolumeQuotaRule("quota2", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         VolumeId = exampleVolume.Id,
    ///         QuotaTarget = "2001",
    ///         QuotaSizeInKib = 1024,
    ///         QuotaType = "IndividualUserQuota",
    ///     });
    /// 
    ///     var quota3 = new Azure.NetApp.VolumeQuotaRule("quota3", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         VolumeId = exampleVolume.Id,
    ///         QuotaSizeInKib = 1024,
    ///         QuotaType = "DefaultUserQuota",
    ///     });
    /// 
    ///     var quota4 = new Azure.NetApp.VolumeQuotaRule("quota4", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         VolumeId = exampleVolume.Id,
    ///         QuotaSizeInKib = 1024,
    ///         QuotaType = "DefaultGroupQuota",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Volume Quota Rules can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:netapp/volumeQuotaRule:VolumeQuotaRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/vol1/volumeQuotaRules/quota1
    /// ```
    /// </summary>
    [AzureResourceType("azure:netapp/volumeQuotaRule:VolumeQuotaRule")]
    public partial class VolumeQuotaRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Azure Region where the Volume Quota Rule should exist. Changing this forces a new Volume Quota Rule to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Volume Quota Rule. Changing this forces a new Volume Quota Rule to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Quota size in kibibytes.
        /// </summary>
        [Output("quotaSizeInKib")]
        public Output<int> QuotaSizeInKib { get; private set; } = null!;

        /// <summary>
        /// Quota Target. This can be Unix UID/GID for NFSv3/NFSv4.1 volumes and Windows User SID for CIFS based volumes. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** `quota_target ` must be used when `quota_type` is `IndividualGroupQuota` or `IndividualUserQuota`
        /// 
        /// &gt; **NOTE:** more information about this resource can be found at [Understand default and individual user and group quotas](https://learn.microsoft.com/en-us/azure/azure-netapp-files/default-individual-user-group-quotas-introduction)
        /// </summary>
        [Output("quotaTarget")]
        public Output<string?> QuotaTarget { get; private set; } = null!;

        /// <summary>
        /// Quota type. Possible values are `DefaultGroupQuota`, `DefaultUserQuota`, `IndividualGroupQuota` and `IndividualUserQuota`. Please note that `IndividualGroupQuota` and `DefaultGroupQuota` are not applicable to SMB and dual-protocol volumes. Changing this forces a new resource to be created.
        /// </summary>
        [Output("quotaType")]
        public Output<string> QuotaType { get; private set; } = null!;

        /// <summary>
        /// The NetApp volume ID where the Volume Quota Rule is assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("volumeId")]
        public Output<string> VolumeId { get; private set; } = null!;


        /// <summary>
        /// Create a VolumeQuotaRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VolumeQuotaRule(string name, VolumeQuotaRuleArgs args, CustomResourceOptions? options = null)
            : base("azure:netapp/volumeQuotaRule:VolumeQuotaRule", name, args ?? new VolumeQuotaRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VolumeQuotaRule(string name, Input<string> id, VolumeQuotaRuleState? state = null, CustomResourceOptions? options = null)
            : base("azure:netapp/volumeQuotaRule:VolumeQuotaRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VolumeQuotaRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VolumeQuotaRule Get(string name, Input<string> id, VolumeQuotaRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new VolumeQuotaRule(name, id, state, options);
        }
    }

    public sealed class VolumeQuotaRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure Region where the Volume Quota Rule should exist. Changing this forces a new Volume Quota Rule to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Volume Quota Rule. Changing this forces a new Volume Quota Rule to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Quota size in kibibytes.
        /// </summary>
        [Input("quotaSizeInKib", required: true)]
        public Input<int> QuotaSizeInKib { get; set; } = null!;

        /// <summary>
        /// Quota Target. This can be Unix UID/GID for NFSv3/NFSv4.1 volumes and Windows User SID for CIFS based volumes. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** `quota_target ` must be used when `quota_type` is `IndividualGroupQuota` or `IndividualUserQuota`
        /// 
        /// &gt; **NOTE:** more information about this resource can be found at [Understand default and individual user and group quotas](https://learn.microsoft.com/en-us/azure/azure-netapp-files/default-individual-user-group-quotas-introduction)
        /// </summary>
        [Input("quotaTarget")]
        public Input<string>? QuotaTarget { get; set; }

        /// <summary>
        /// Quota type. Possible values are `DefaultGroupQuota`, `DefaultUserQuota`, `IndividualGroupQuota` and `IndividualUserQuota`. Please note that `IndividualGroupQuota` and `DefaultGroupQuota` are not applicable to SMB and dual-protocol volumes. Changing this forces a new resource to be created.
        /// </summary>
        [Input("quotaType", required: true)]
        public Input<string> QuotaType { get; set; } = null!;

        /// <summary>
        /// The NetApp volume ID where the Volume Quota Rule is assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("volumeId", required: true)]
        public Input<string> VolumeId { get; set; } = null!;

        public VolumeQuotaRuleArgs()
        {
        }
        public static new VolumeQuotaRuleArgs Empty => new VolumeQuotaRuleArgs();
    }

    public sealed class VolumeQuotaRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure Region where the Volume Quota Rule should exist. Changing this forces a new Volume Quota Rule to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Volume Quota Rule. Changing this forces a new Volume Quota Rule to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Quota size in kibibytes.
        /// </summary>
        [Input("quotaSizeInKib")]
        public Input<int>? QuotaSizeInKib { get; set; }

        /// <summary>
        /// Quota Target. This can be Unix UID/GID for NFSv3/NFSv4.1 volumes and Windows User SID for CIFS based volumes. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** `quota_target ` must be used when `quota_type` is `IndividualGroupQuota` or `IndividualUserQuota`
        /// 
        /// &gt; **NOTE:** more information about this resource can be found at [Understand default and individual user and group quotas](https://learn.microsoft.com/en-us/azure/azure-netapp-files/default-individual-user-group-quotas-introduction)
        /// </summary>
        [Input("quotaTarget")]
        public Input<string>? QuotaTarget { get; set; }

        /// <summary>
        /// Quota type. Possible values are `DefaultGroupQuota`, `DefaultUserQuota`, `IndividualGroupQuota` and `IndividualUserQuota`. Please note that `IndividualGroupQuota` and `DefaultGroupQuota` are not applicable to SMB and dual-protocol volumes. Changing this forces a new resource to be created.
        /// </summary>
        [Input("quotaType")]
        public Input<string>? QuotaType { get; set; }

        /// <summary>
        /// The NetApp volume ID where the Volume Quota Rule is assigned to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        public VolumeQuotaRuleState()
        {
        }
        public static new VolumeQuotaRuleState Empty => new VolumeQuotaRuleState();
    }
}
