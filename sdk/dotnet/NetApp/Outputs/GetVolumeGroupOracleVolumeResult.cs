// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.NetApp.Outputs
{

    [OutputType]
    public sealed class GetVolumeGroupOracleVolumeResult
    {
        /// <summary>
        /// The ID of the Capacity Pool.
        /// </summary>
        public readonly string CapacityPoolId;
        public readonly ImmutableArray<Outputs.GetVolumeGroupOracleVolumeDataProtectionReplicationResult> DataProtectionReplications;
        /// <summary>
        /// A `data_protection_snapshot_policy` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeGroupOracleVolumeDataProtectionSnapshotPolicyResult> DataProtectionSnapshotPolicies;
        /// <summary>
        /// The encryption key source.
        /// </summary>
        public readonly string EncryptionKeySource;
        /// <summary>
        /// A `export_policy_rule` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeGroupOracleVolumeExportPolicyRuleResult> ExportPolicyRules;
        /// <summary>
        /// Volume ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Private Endpoint ID for Key Vault when using customer managed keys.
        /// </summary>
        public readonly string KeyVaultPrivateEndpointId;
        /// <summary>
        /// A `mount_ip_addresses` block as defined below.
        /// </summary>
        public readonly ImmutableArray<string> MountIpAddresses;
        /// <summary>
        /// The name of this Application Volume Group for Oracle application.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network feature in use at the time of volume creation.
        /// </summary>
        public readonly string NetworkFeatures;
        /// <summary>
        /// A `protocols` block as defined below.
        /// </summary>
        public readonly ImmutableArray<string> Protocols;
        /// <summary>
        /// The ID of the proximity placement group.
        /// </summary>
        public readonly string ProximityPlacementGroupId;
        /// <summary>
        /// Volume security style.
        /// </summary>
        public readonly string SecurityStyle;
        /// <summary>
        /// The target performance of the file system.
        /// </summary>
        public readonly string ServiceLevel;
        /// <summary>
        /// Is the .snapshot (NFS clients) path of a volume visible?
        /// </summary>
        public readonly bool SnapshotDirectoryVisible;
        /// <summary>
        /// The maximum Storage Quota allowed for a file system in Gigabytes.
        /// </summary>
        public readonly int StorageQuotaInGb;
        /// <summary>
        /// The ID of the Subnet the NetApp Volume resides in.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// A mapping of tags assigned to the Application Volume Group.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Throughput of this volume in Mibps.
        /// </summary>
        public readonly double ThroughputInMibps;
        /// <summary>
        /// A unique file path for the volume.
        /// </summary>
        public readonly string VolumePath;
        /// <summary>
        /// Volume spec name.
        /// </summary>
        public readonly string VolumeSpecName;
        public readonly string Zone;

        [OutputConstructor]
        private GetVolumeGroupOracleVolumeResult(
            string capacityPoolId,

            ImmutableArray<Outputs.GetVolumeGroupOracleVolumeDataProtectionReplicationResult> dataProtectionReplications,

            ImmutableArray<Outputs.GetVolumeGroupOracleVolumeDataProtectionSnapshotPolicyResult> dataProtectionSnapshotPolicies,

            string encryptionKeySource,

            ImmutableArray<Outputs.GetVolumeGroupOracleVolumeExportPolicyRuleResult> exportPolicyRules,

            string id,

            string keyVaultPrivateEndpointId,

            ImmutableArray<string> mountIpAddresses,

            string name,

            string networkFeatures,

            ImmutableArray<string> protocols,

            string proximityPlacementGroupId,

            string securityStyle,

            string serviceLevel,

            bool snapshotDirectoryVisible,

            int storageQuotaInGb,

            string subnetId,

            ImmutableDictionary<string, string> tags,

            double throughputInMibps,

            string volumePath,

            string volumeSpecName,

            string zone)
        {
            CapacityPoolId = capacityPoolId;
            DataProtectionReplications = dataProtectionReplications;
            DataProtectionSnapshotPolicies = dataProtectionSnapshotPolicies;
            EncryptionKeySource = encryptionKeySource;
            ExportPolicyRules = exportPolicyRules;
            Id = id;
            KeyVaultPrivateEndpointId = keyVaultPrivateEndpointId;
            MountIpAddresses = mountIpAddresses;
            Name = name;
            NetworkFeatures = networkFeatures;
            Protocols = protocols;
            ProximityPlacementGroupId = proximityPlacementGroupId;
            SecurityStyle = securityStyle;
            ServiceLevel = serviceLevel;
            SnapshotDirectoryVisible = snapshotDirectoryVisible;
            StorageQuotaInGb = storageQuotaInGb;
            SubnetId = subnetId;
            Tags = tags;
            ThroughputInMibps = throughputInMibps;
            VolumePath = volumePath;
            VolumeSpecName = volumeSpecName;
            Zone = zone;
        }
    }
}
