// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.NetApp
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using Random = Pulumi.Random;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Random.Index.RandomString.RandomString("example", new()
    ///     {
    ///         Length = 12,
    ///         Special = true,
    ///     });
    /// 
    ///     var adminUsername = "exampleadmin";
    /// 
    ///     var adminPassword = example.Result;
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup.ResourceGroup("example", new()
    ///     {
    ///         Name = $"{prefix}-resources",
    ///         Location = location,
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork.VirtualNetwork("example", new()
    ///     {
    ///         Name = $"{prefix}-vnet",
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.6.0.0/16",
    ///         },
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet.Subnet("example", new()
    ///     {
    ///         Name = $"{prefix}-delegated-subnet",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.6.2.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             
    ///             {
    ///                 { "name", "testdelegation" },
    ///                 { "serviceDelegation", 
    ///                 {
    ///                     { "name", "Microsoft.Netapp/volumes" },
    ///                     { "actions", new[]
    ///                     {
    ///                         "Microsoft.Network/networkinterfaces/*",
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                     } },
    ///                 } },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var example1 = new Azure.Network.Subnet.Subnet("example1", new()
    ///     {
    ///         Name = $"{prefix}-hosts-subnet",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.6.1.0/24",
    ///         },
    ///     });
    /// 
    ///     var examplePlacementGroup = new Azure.Proximity.PlacementGroup.PlacementGroup("example", new()
    ///     {
    ///         Name = $"{prefix}-ppg",
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleAvailabilitySet = new Azure.Compute.AvailabilitySet.AvailabilitySet("example", new()
    ///     {
    ///         Name = $"{prefix}-avset",
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ProximityPlacementGroupId = examplePlacementGroup.Id,
    ///     });
    /// 
    ///     var exampleNetworkInterface = new Azure.Network.NetworkInterface.NetworkInterface("example", new()
    ///     {
    ///         Name = $"{prefix}-nic",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         IpConfigurations = new[]
    ///         {
    ///             
    ///             {
    ///                 { "name", "internal" },
    ///                 { "subnetId", example1.Id },
    ///                 { "privateIpAddressAllocation", "Dynamic" },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleLinuxVirtualMachine = new Azure.Compute.LinuxVirtualMachine.LinuxVirtualMachine("example", new()
    ///     {
    ///         Name = $"{prefix}-vm",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Size = "Standard_M8ms",
    ///         AdminUsername = adminUsername,
    ///         AdminPassword = adminPassword,
    ///         DisablePasswordAuthentication = false,
    ///         ProximityPlacementGroupId = examplePlacementGroup.Id,
    ///         AvailabilitySetId = exampleAvailabilitySet.Id,
    ///         NetworkInterfaceIds = new[]
    ///         {
    ///             exampleNetworkInterface.Id,
    ///         },
    ///         SourceImageReference = 
    ///         {
    ///             { "publisher", "Canonical" },
    ///             { "offer", "0001-com-ubuntu-server-jammy" },
    ///             { "sku", "22_04-lts" },
    ///             { "version", "latest" },
    ///         },
    ///         OsDisk = 
    ///         {
    ///             { "storageAccountType", "Standard_LRS" },
    ///             { "caching", "ReadWrite" },
    ///         },
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Netapp.Account.Account("example", new()
    ///     {
    ///         Name = $"{prefix}-netapp-account",
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var examplePool = new Azure.Netapp.Pool.Pool("example", new()
    ///     {
    ///         Name = $"{prefix}-netapp-pool",
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AccountName = exampleAccount.Name,
    ///         ServiceLevel = "Standard",
    ///         SizeInTb = 8,
    ///         QosType = "Manual",
    ///     });
    /// 
    ///     var exampleVolumeGroupSapHana = new Azure.Netapp.VolumeGroupSapHana.VolumeGroupSapHana("example", new()
    ///     {
    ///         Name = $"{prefix}-netapp-volumegroup",
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AccountName = exampleAccount.Name,
    ///         GroupDescription = "Test volume group",
    ///         ApplicationIdentifier = "TST",
    ///         Volumes = new[]
    ///         {
    ///             
    ///             {
    ///                 { "name", $"{prefix}-netapp-volume-1" },
    ///                 { "volumePath", "my-unique-file-path-1" },
    ///                 { "serviceLevel", "Standard" },
    ///                 { "capacityPoolId", examplePool.Id },
    ///                 { "subnetId", exampleSubnet.Id },
    ///                 { "proximityPlacementGroupId", examplePlacementGroup.Id },
    ///                 { "volumeSpecName", "data" },
    ///                 { "storageQuotaInGb", 1024 },
    ///                 { "throughputInMibps", 24 },
    ///                 { "protocols", "NFSv4.1" },
    ///                 { "securityStyle", "unix" },
    ///                 { "snapshotDirectoryVisible", false },
    ///                 { "exportPolicyRules", new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "ruleIndex", 1 },
    ///                         { "allowedClients", "0.0.0.0/0" },
    ///                         { "nfsv3Enabled", false },
    ///                         { "nfsv41Enabled", true },
    ///                         { "unixReadOnly", false },
    ///                         { "unixReadWrite", true },
    ///                         { "rootAccessEnabled", false },
    ///                     },
    ///                 } },
    ///                 { "tags", 
    ///                 {
    ///                     { "foo", "bar" },
    ///                 } },
    ///             },
    ///             
    ///             {
    ///                 { "name", $"{prefix}-netapp-volume-2" },
    ///                 { "volumePath", "my-unique-file-path-2" },
    ///                 { "serviceLevel", "Standard" },
    ///                 { "capacityPoolId", examplePool.Id },
    ///                 { "subnetId", exampleSubnet.Id },
    ///                 { "proximityPlacementGroupId", examplePlacementGroup.Id },
    ///                 { "volumeSpecName", "log" },
    ///                 { "storageQuotaInGb", 1024 },
    ///                 { "throughputInMibps", 24 },
    ///                 { "protocols", "NFSv4.1" },
    ///                 { "securityStyle", "unix" },
    ///                 { "snapshotDirectoryVisible", false },
    ///                 { "exportPolicyRules", new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "ruleIndex", 1 },
    ///                         { "allowedClients", "0.0.0.0/0" },
    ///                         { "nfsv3Enabled", false },
    ///                         { "nfsv41Enabled", true },
    ///                         { "unixReadOnly", false },
    ///                         { "unixReadWrite", true },
    ///                         { "rootAccessEnabled", false },
    ///                     },
    ///                 } },
    ///                 { "tags", 
    ///                 {
    ///                     { "foo", "bar" },
    ///                 } },
    ///             },
    ///             
    ///             {
    ///                 { "name", $"{prefix}-netapp-volume-3" },
    ///                 { "volumePath", "my-unique-file-path-3" },
    ///                 { "serviceLevel", "Standard" },
    ///                 { "capacityPoolId", examplePool.Id },
    ///                 { "subnetId", exampleSubnet.Id },
    ///                 { "proximityPlacementGroupId", examplePlacementGroup.Id },
    ///                 { "volumeSpecName", "shared" },
    ///                 { "storageQuotaInGb", 1024 },
    ///                 { "throughputInMibps", 24 },
    ///                 { "protocols", "NFSv4.1" },
    ///                 { "securityStyle", "unix" },
    ///                 { "snapshotDirectoryVisible", false },
    ///                 { "exportPolicyRules", new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "ruleIndex", 1 },
    ///                         { "allowedClients", "0.0.0.0/0" },
    ///                         { "nfsv3Enabled", false },
    ///                         { "nfsv41Enabled", true },
    ///                         { "unixReadOnly", false },
    ///                         { "unixReadWrite", true },
    ///                         { "rootAccessEnabled", false },
    ///                     },
    ///                 } },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Application Volume Groups can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:netapp/volumeGroupSapHana:VolumeGroupSapHana example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mytest-rg/providers/Microsoft.NetApp/netAppAccounts/netapp-account-test/volumeGroups/netapp-volumegroup-test
    /// ```
    /// </summary>
    [AzureResourceType("azure:netapp/volumeGroupSapHana:VolumeGroupSapHana")]
    public partial class VolumeGroupSapHana : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// The SAP System ID, maximum 3 characters, e.g. `SH9`. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Output("applicationIdentifier")]
        public Output<string> ApplicationIdentifier { get; private set; } = null!;

        /// <summary>
        /// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Output("groupDescription")]
        public Output<string> GroupDescription { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// One or more `volume` blocks as defined below.
        /// </summary>
        [Output("volumes")]
        public Output<ImmutableArray<Outputs.VolumeGroupSapHanaVolume>> Volumes { get; private set; } = null!;


        /// <summary>
        /// Create a VolumeGroupSapHana resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VolumeGroupSapHana(string name, VolumeGroupSapHanaArgs args, CustomResourceOptions? options = null)
            : base("azure:netapp/volumeGroupSapHana:VolumeGroupSapHana", name, args ?? new VolumeGroupSapHanaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VolumeGroupSapHana(string name, Input<string> id, VolumeGroupSapHanaState? state = null, CustomResourceOptions? options = null)
            : base("azure:netapp/volumeGroupSapHana:VolumeGroupSapHana", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VolumeGroupSapHana resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VolumeGroupSapHana Get(string name, Input<string> id, VolumeGroupSapHanaState? state = null, CustomResourceOptions? options = null)
        {
            return new VolumeGroupSapHana(name, id, state, options);
        }
    }

    public sealed class VolumeGroupSapHanaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The SAP System ID, maximum 3 characters, e.g. `SH9`. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("applicationIdentifier", required: true)]
        public Input<string> ApplicationIdentifier { get; set; } = null!;

        /// <summary>
        /// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("groupDescription", required: true)]
        public Input<string> GroupDescription { get; set; } = null!;

        /// <summary>
        /// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("volumes", required: true)]
        private InputList<Inputs.VolumeGroupSapHanaVolumeArgs>? _volumes;

        /// <summary>
        /// One or more `volume` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VolumeGroupSapHanaVolumeArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.VolumeGroupSapHanaVolumeArgs>());
            set => _volumes = value;
        }

        public VolumeGroupSapHanaArgs()
        {
        }
        public static new VolumeGroupSapHanaArgs Empty => new VolumeGroupSapHanaArgs();
    }

    public sealed class VolumeGroupSapHanaState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// The SAP System ID, maximum 3 characters, e.g. `SH9`. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("applicationIdentifier")]
        public Input<string>? ApplicationIdentifier { get; set; }

        /// <summary>
        /// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("groupDescription")]
        public Input<string>? GroupDescription { get; set; }

        /// <summary>
        /// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("volumes")]
        private InputList<Inputs.VolumeGroupSapHanaVolumeGetArgs>? _volumes;

        /// <summary>
        /// One or more `volume` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VolumeGroupSapHanaVolumeGetArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.VolumeGroupSapHanaVolumeGetArgs>());
            set => _volumes = value;
        }

        public VolumeGroupSapHanaState()
        {
        }
        public static new VolumeGroupSapHanaState Empty => new VolumeGroupSapHanaState();
    }
}
