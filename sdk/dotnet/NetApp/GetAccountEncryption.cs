// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.NetApp
{
    public static class GetAccountEncryption
    {
        /// <summary>
        /// Use this data source to access information about an existing NetApp Account Encryption Resource.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.NetApp.GetAccountEncryption.Invoke(new()
        ///     {
        ///         NetappAccountId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getAccountEncryptionResult =&gt; getAccountEncryptionResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAccountEncryptionResult> InvokeAsync(GetAccountEncryptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountEncryptionResult>("azure:netapp/getAccountEncryption:getAccountEncryption", args ?? new GetAccountEncryptionArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing NetApp Account Encryption Resource.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.NetApp.GetAccountEncryption.Invoke(new()
        ///     {
        ///         NetappAccountId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getAccountEncryptionResult =&gt; getAccountEncryptionResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAccountEncryptionResult> Invoke(GetAccountEncryptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountEncryptionResult>("azure:netapp/getAccountEncryption:getAccountEncryption", args ?? new GetAccountEncryptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountEncryptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The key vault encryption key.
        /// </summary>
        [Input("encryptionKey")]
        public string? EncryptionKey { get; set; }

        /// <summary>
        /// The ID of the NetApp account where customer managed keys-based encryption is enabled.
        /// </summary>
        [Input("netappAccountId", required: true)]
        public string NetappAccountId { get; set; } = null!;

        /// <summary>
        /// The ID of the System Assigned Manged Identity.
        /// </summary>
        [Input("systemAssignedIdentityPrincipalId")]
        public string? SystemAssignedIdentityPrincipalId { get; set; }

        /// <summary>
        /// The ID of the User Assigned Managed Identity.
        /// </summary>
        [Input("userAssignedIdentityId")]
        public string? UserAssignedIdentityId { get; set; }

        public GetAccountEncryptionArgs()
        {
        }
        public static new GetAccountEncryptionArgs Empty => new GetAccountEncryptionArgs();
    }

    public sealed class GetAccountEncryptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The key vault encryption key.
        /// </summary>
        [Input("encryptionKey")]
        public Input<string>? EncryptionKey { get; set; }

        /// <summary>
        /// The ID of the NetApp account where customer managed keys-based encryption is enabled.
        /// </summary>
        [Input("netappAccountId", required: true)]
        public Input<string> NetappAccountId { get; set; } = null!;

        /// <summary>
        /// The ID of the System Assigned Manged Identity.
        /// </summary>
        [Input("systemAssignedIdentityPrincipalId")]
        public Input<string>? SystemAssignedIdentityPrincipalId { get; set; }

        /// <summary>
        /// The ID of the User Assigned Managed Identity.
        /// </summary>
        [Input("userAssignedIdentityId")]
        public Input<string>? UserAssignedIdentityId { get; set; }

        public GetAccountEncryptionInvokeArgs()
        {
        }
        public static new GetAccountEncryptionInvokeArgs Empty => new GetAccountEncryptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountEncryptionResult
    {
        public readonly string? EncryptionKey;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string NetappAccountId;
        public readonly string? SystemAssignedIdentityPrincipalId;
        public readonly string? UserAssignedIdentityId;

        [OutputConstructor]
        private GetAccountEncryptionResult(
            string? encryptionKey,

            string id,

            string netappAccountId,

            string? systemAssignedIdentityPrincipalId,

            string? userAssignedIdentityId)
        {
            EncryptionKey = encryptionKey;
            Id = id;
            NetappAccountId = netappAccountId;
            SystemAssignedIdentityPrincipalId = systemAssignedIdentityPrincipalId;
            UserAssignedIdentityId = userAssignedIdentityId;
        }
    }
}
