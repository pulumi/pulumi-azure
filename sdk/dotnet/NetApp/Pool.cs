// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.NetApp
{
    /// <summary>
    /// Manages a Pool within a NetApp Account.
    /// 
    /// ## NetApp Pool Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.NetApp.Account("example", new()
    ///     {
    ///         Name = "example-netappaccount",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var examplePool = new Azure.NetApp.Pool("example", new()
    ///     {
    ///         Name = "example-netapppool",
    ///         AccountName = exampleAccount.Name,
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         ServiceLevel = "Premium",
    ///         SizeInTb = 4,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## NetApp Pool with Flexible Service Level Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.NetApp.Account("example", new()
    ///     {
    ///         Name = "example-netappaccount",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var examplePool = new Azure.NetApp.Pool("example", new()
    ///     {
    ///         Name = "example-netapppool",
    ///         AccountName = exampleAccount.Name,
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         ServiceLevel = "Flexible",
    ///         SizeInTb = 4,
    ///         QosType = "Manual",
    ///         CustomThroughputMibps = 256,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.NetApp` - 2025-06-01
    /// 
    /// ## Import
    /// 
    /// NetApp Pool can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:netapp/pool:Pool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1
    /// ```
    /// </summary>
    [AzureResourceType("azure:netapp/pool:Pool")]
    public partial class Pool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// Whether the NetApp Pool can hold cool access enabled volumes. Defaults to `False`.
        /// 
        /// &gt; **Note:** Disabling `CoolAccessEnabled` is not allowed and forces a new resource to be created.
        /// </summary>
        [Output("coolAccessEnabled")]
        public Output<bool?> CoolAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// The custom throughput for the pool in MiB/s. Minimum value is `128`. This field can only be set when `ServiceLevel` is set to `Flexible` and `QosType` is set to `Manual`.
        /// </summary>
        [Output("customThroughputMibps")]
        public Output<int?> CustomThroughputMibps { get; private set; } = null!;

        /// <summary>
        /// The encryption type of the pool. Valid values include `Single`, and `Double`. Defaults to `Single`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("encryptionType")]
        public Output<string?> EncryptionType { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the NetApp Pool. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// QoS Type of the pool. Valid values include `Auto` or `Manual`. Defaults to `Auto`.
        /// </summary>
        [Output("qosType")]
        public Output<string?> QosType { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group where the NetApp Pool should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The service level of the file system. Valid values include `Premium`, `Standard`, `Ultra`, and `Flexible`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("serviceLevel")]
        public Output<string> ServiceLevel { get; private set; } = null!;

        /// <summary>
        /// Provisioned size of the pool in TB. Value must be between `1` and `2048`.
        /// 
        /// &gt; **Note:** `2` TB capacity pool sizing is currently in preview. You can only take advantage of the `2` TB minimum if all the volumes in the capacity pool are using `Standard` network features. If any volume is using `Basic` network features, the minimum size is `4` TB. Please see the product [documentation](https://learn.microsoft.com/azure/azure-netapp-files/azure-netapp-files-set-up-capacity-pool) for more information.
        /// 
        /// &gt; **Note:** The maximum `SizeInTb` is goverened by regional quotas. You may request additional capacity from Azure, currently up to `2048`.
        /// </summary>
        [Output("sizeInTb")]
        public Output<int> SizeInTb { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Pool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pool(string name, PoolArgs args, CustomResourceOptions? options = null)
            : base("azure:netapp/pool:Pool", name, args ?? new PoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pool(string name, Input<string> id, PoolState? state = null, CustomResourceOptions? options = null)
            : base("azure:netapp/pool:Pool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pool Get(string name, Input<string> id, PoolState? state = null, CustomResourceOptions? options = null)
        {
            return new Pool(name, id, state, options);
        }
    }

    public sealed class PoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// Whether the NetApp Pool can hold cool access enabled volumes. Defaults to `False`.
        /// 
        /// &gt; **Note:** Disabling `CoolAccessEnabled` is not allowed and forces a new resource to be created.
        /// </summary>
        [Input("coolAccessEnabled")]
        public Input<bool>? CoolAccessEnabled { get; set; }

        /// <summary>
        /// The custom throughput for the pool in MiB/s. Minimum value is `128`. This field can only be set when `ServiceLevel` is set to `Flexible` and `QosType` is set to `Manual`.
        /// </summary>
        [Input("customThroughputMibps")]
        public Input<int>? CustomThroughputMibps { get; set; }

        /// <summary>
        /// The encryption type of the pool. Valid values include `Single`, and `Double`. Defaults to `Single`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("encryptionType")]
        public Input<string>? EncryptionType { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the NetApp Pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// QoS Type of the pool. Valid values include `Auto` or `Manual`. Defaults to `Auto`.
        /// </summary>
        [Input("qosType")]
        public Input<string>? QosType { get; set; }

        /// <summary>
        /// The name of the resource group where the NetApp Pool should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The service level of the file system. Valid values include `Premium`, `Standard`, `Ultra`, and `Flexible`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serviceLevel", required: true)]
        public Input<string> ServiceLevel { get; set; } = null!;

        /// <summary>
        /// Provisioned size of the pool in TB. Value must be between `1` and `2048`.
        /// 
        /// &gt; **Note:** `2` TB capacity pool sizing is currently in preview. You can only take advantage of the `2` TB minimum if all the volumes in the capacity pool are using `Standard` network features. If any volume is using `Basic` network features, the minimum size is `4` TB. Please see the product [documentation](https://learn.microsoft.com/azure/azure-netapp-files/azure-netapp-files-set-up-capacity-pool) for more information.
        /// 
        /// &gt; **Note:** The maximum `SizeInTb` is goverened by regional quotas. You may request additional capacity from Azure, currently up to `2048`.
        /// </summary>
        [Input("sizeInTb", required: true)]
        public Input<int> SizeInTb { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PoolArgs()
        {
        }
        public static new PoolArgs Empty => new PoolArgs();
    }

    public sealed class PoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// Whether the NetApp Pool can hold cool access enabled volumes. Defaults to `False`.
        /// 
        /// &gt; **Note:** Disabling `CoolAccessEnabled` is not allowed and forces a new resource to be created.
        /// </summary>
        [Input("coolAccessEnabled")]
        public Input<bool>? CoolAccessEnabled { get; set; }

        /// <summary>
        /// The custom throughput for the pool in MiB/s. Minimum value is `128`. This field can only be set when `ServiceLevel` is set to `Flexible` and `QosType` is set to `Manual`.
        /// </summary>
        [Input("customThroughputMibps")]
        public Input<int>? CustomThroughputMibps { get; set; }

        /// <summary>
        /// The encryption type of the pool. Valid values include `Single`, and `Double`. Defaults to `Single`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("encryptionType")]
        public Input<string>? EncryptionType { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the NetApp Pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// QoS Type of the pool. Valid values include `Auto` or `Manual`. Defaults to `Auto`.
        /// </summary>
        [Input("qosType")]
        public Input<string>? QosType { get; set; }

        /// <summary>
        /// The name of the resource group where the NetApp Pool should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The service level of the file system. Valid values include `Premium`, `Standard`, `Ultra`, and `Flexible`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serviceLevel")]
        public Input<string>? ServiceLevel { get; set; }

        /// <summary>
        /// Provisioned size of the pool in TB. Value must be between `1` and `2048`.
        /// 
        /// &gt; **Note:** `2` TB capacity pool sizing is currently in preview. You can only take advantage of the `2` TB minimum if all the volumes in the capacity pool are using `Standard` network features. If any volume is using `Basic` network features, the minimum size is `4` TB. Please see the product [documentation](https://learn.microsoft.com/azure/azure-netapp-files/azure-netapp-files-set-up-capacity-pool) for more information.
        /// 
        /// &gt; **Note:** The maximum `SizeInTb` is goverened by regional quotas. You may request additional capacity from Azure, currently up to `2048`.
        /// </summary>
        [Input("sizeInTb")]
        public Input<int>? SizeInTb { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PoolState()
        {
        }
        public static new PoolState Empty => new PoolState();
    }
}
