// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.NetApp
{
    /// <summary>
    /// Manages a NetApp Snapshot Policy.
    /// 
    /// ## NetApp Snapshot Policy Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "East US",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.NetApp.Account("exampleAccount", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleSnapshotPolicy = new Azure.NetApp.SnapshotPolicy("exampleSnapshotPolicy", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AccountName = exampleAccount.Name,
    ///         Enabled = true,
    ///         HourlySchedule = new Azure.NetApp.Inputs.SnapshotPolicyHourlyScheduleArgs
    ///         {
    ///             SnapshotsToKeep = 4,
    ///             Minute = 15,
    ///         },
    ///         DailySchedule = new Azure.NetApp.Inputs.SnapshotPolicyDailyScheduleArgs
    ///         {
    ///             SnapshotsToKeep = 2,
    ///             Hour = 20,
    ///             Minute = 15,
    ///         },
    ///         WeeklySchedule = new Azure.NetApp.Inputs.SnapshotPolicyWeeklyScheduleArgs
    ///         {
    ///             SnapshotsToKeep = 1,
    ///             DaysOfWeeks = new[]
    ///             {
    ///                 "Monday",
    ///                 "Friday",
    ///             },
    ///             Hour = 23,
    ///             Minute = 0,
    ///         },
    ///         MonthlySchedule = new Azure.NetApp.Inputs.SnapshotPolicyMonthlyScheduleArgs
    ///         {
    ///             SnapshotsToKeep = 1,
    ///             DaysOfMonths = new[]
    ///             {
    ///                 1,
    ///                 15,
    ///                 20,
    ///                 30,
    ///             },
    ///             Hour = 5,
    ///             Minute = 45,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// NetApp Snapshot Policy can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:netapp/snapshotPolicy:SnapshotPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1/snapshotPolicies/snapshotpolicy1
    /// ```
    /// </summary>
    [AzureResourceType("azure:netapp/snapshotPolicy:SnapshotPolicy")]
    public partial class SnapshotPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the NetApp Account in which the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// Sets a daily snapshot schedule. A `daily_schedule` block as defined below.
        /// </summary>
        [Output("dailySchedule")]
        public Output<Outputs.SnapshotPolicyDailySchedule> DailySchedule { get; private set; } = null!;

        /// <summary>
        /// Defines that the NetApp Snapshot Policy is enabled or not.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Sets an hourly snapshot schedule. A `hourly_schedule` block as defined below.
        /// </summary>
        [Output("hourlySchedule")]
        public Output<Outputs.SnapshotPolicyHourlySchedule> HourlySchedule { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Sets a monthly snapshot schedule. A `monthly_schedule` block as defined below.
        /// </summary>
        [Output("monthlySchedule")]
        public Output<Outputs.SnapshotPolicyMonthlySchedule> MonthlySchedule { get; private set; } = null!;

        /// <summary>
        /// The name of the NetApp Snapshot Policy. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group where the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Sets a weekly snapshot schedule. A `weekly_schedule` block as defined below.
        /// </summary>
        [Output("weeklySchedule")]
        public Output<Outputs.SnapshotPolicyWeeklySchedule> WeeklySchedule { get; private set; } = null!;


        /// <summary>
        /// Create a SnapshotPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SnapshotPolicy(string name, SnapshotPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure:netapp/snapshotPolicy:SnapshotPolicy", name, args ?? new SnapshotPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SnapshotPolicy(string name, Input<string> id, SnapshotPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azure:netapp/snapshotPolicy:SnapshotPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SnapshotPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SnapshotPolicy Get(string name, Input<string> id, SnapshotPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new SnapshotPolicy(name, id, state, options);
        }
    }

    public sealed class SnapshotPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the NetApp Account in which the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// Sets a daily snapshot schedule. A `daily_schedule` block as defined below.
        /// </summary>
        [Input("dailySchedule")]
        public Input<Inputs.SnapshotPolicyDailyScheduleArgs>? DailySchedule { get; set; }

        /// <summary>
        /// Defines that the NetApp Snapshot Policy is enabled or not.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Sets an hourly snapshot schedule. A `hourly_schedule` block as defined below.
        /// </summary>
        [Input("hourlySchedule")]
        public Input<Inputs.SnapshotPolicyHourlyScheduleArgs>? HourlySchedule { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Sets a monthly snapshot schedule. A `monthly_schedule` block as defined below.
        /// </summary>
        [Input("monthlySchedule")]
        public Input<Inputs.SnapshotPolicyMonthlyScheduleArgs>? MonthlySchedule { get; set; }

        /// <summary>
        /// The name of the NetApp Snapshot Policy. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group where the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Sets a weekly snapshot schedule. A `weekly_schedule` block as defined below.
        /// </summary>
        [Input("weeklySchedule")]
        public Input<Inputs.SnapshotPolicyWeeklyScheduleArgs>? WeeklySchedule { get; set; }

        public SnapshotPolicyArgs()
        {
        }
        public static new SnapshotPolicyArgs Empty => new SnapshotPolicyArgs();
    }

    public sealed class SnapshotPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the NetApp Account in which the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// Sets a daily snapshot schedule. A `daily_schedule` block as defined below.
        /// </summary>
        [Input("dailySchedule")]
        public Input<Inputs.SnapshotPolicyDailyScheduleGetArgs>? DailySchedule { get; set; }

        /// <summary>
        /// Defines that the NetApp Snapshot Policy is enabled or not.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Sets an hourly snapshot schedule. A `hourly_schedule` block as defined below.
        /// </summary>
        [Input("hourlySchedule")]
        public Input<Inputs.SnapshotPolicyHourlyScheduleGetArgs>? HourlySchedule { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Sets a monthly snapshot schedule. A `monthly_schedule` block as defined below.
        /// </summary>
        [Input("monthlySchedule")]
        public Input<Inputs.SnapshotPolicyMonthlyScheduleGetArgs>? MonthlySchedule { get; set; }

        /// <summary>
        /// The name of the NetApp Snapshot Policy. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group where the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Sets a weekly snapshot schedule. A `weekly_schedule` block as defined below.
        /// </summary>
        [Input("weeklySchedule")]
        public Input<Inputs.SnapshotPolicyWeeklyScheduleGetArgs>? WeeklySchedule { get; set; }

        public SnapshotPolicyState()
        {
        }
        public static new SnapshotPolicyState Empty => new SnapshotPolicyState();
    }
}
