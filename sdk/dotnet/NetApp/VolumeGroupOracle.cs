// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.NetApp
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = $"{prefix}-resources",
    ///         Location = location,
    ///         Tags = 
    ///         {
    ///             { "SkipNRMSNSG", "true" },
    ///         },
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    ///     {
    ///         Name = $"{prefix}-vnet",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.88.0.0/16",
    ///         },
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("example", new()
    ///     {
    ///         Name = $"{prefix}-delegated-subnet",
    ///         ResourceGroupName = example.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.88.2.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "exampledelegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Name = "Microsoft.Netapp/volumes",
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/networkinterfaces/*",
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleAccount = new Azure.NetApp.Account("example", new()
    ///     {
    ///         Name = $"{prefix}-netapp-account",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleSubnet,
    ///         },
    ///     });
    /// 
    ///     var examplePool = new Azure.NetApp.Pool("example", new()
    ///     {
    ///         Name = $"{prefix}-netapp-pool",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         AccountName = exampleAccount.Name,
    ///         ServiceLevel = "Standard",
    ///         SizeInTb = 4,
    ///         QosType = "Manual",
    ///     });
    /// 
    ///     var exampleVolumeGroupOracle = new Azure.NetApp.VolumeGroupOracle("example", new()
    ///     {
    ///         Name = $"{prefix}-NetAppVolumeGroupOracle",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         AccountName = exampleAccount.Name,
    ///         GroupDescription = "Example volume group for Oracle",
    ///         ApplicationIdentifier = "TST",
    ///         Volumes = new[]
    ///         {
    ///             new Azure.NetApp.Inputs.VolumeGroupOracleVolumeArgs
    ///             {
    ///                 Name = $"{prefix}-volume-ora1",
    ///                 VolumePath = $"{prefix}-my-unique-file-ora-path-1",
    ///                 ServiceLevel = "Standard",
    ///                 CapacityPoolId = examplePool.Id,
    ///                 SubnetId = exampleSubnet.Id,
    ///                 Zone = "1",
    ///                 VolumeSpecName = "ora-data1",
    ///                 StorageQuotaInGb = 1024,
    ///                 ThroughputInMibps = 24,
    ///                 Protocols = "NFSv4.1",
    ///                 SecurityStyle = "unix",
    ///                 SnapshotDirectoryVisible = false,
    ///                 ExportPolicyRules = new[]
    ///                 {
    ///                     new Azure.NetApp.Inputs.VolumeGroupOracleVolumeExportPolicyRuleArgs
    ///                     {
    ///                         RuleIndex = 1,
    ///                         AllowedClients = "0.0.0.0/0",
    ///                         Nfsv3Enabled = false,
    ///                         Nfsv41Enabled = true,
    ///                         UnixReadOnly = false,
    ///                         UnixReadWrite = true,
    ///                         RootAccessEnabled = false,
    ///                     },
    ///                 },
    ///             },
    ///             new Azure.NetApp.Inputs.VolumeGroupOracleVolumeArgs
    ///             {
    ///                 Name = $"{prefix}-volume-oraLog",
    ///                 VolumePath = $"{prefix}-my-unique-file-oralog-path",
    ///                 ServiceLevel = "Standard",
    ///                 CapacityPoolId = examplePool.Id,
    ///                 SubnetId = exampleSubnet.Id,
    ///                 Zone = "1",
    ///                 VolumeSpecName = "ora-log",
    ///                 StorageQuotaInGb = 1024,
    ///                 ThroughputInMibps = 24,
    ///                 Protocols = "NFSv4.1",
    ///                 SecurityStyle = "unix",
    ///                 SnapshotDirectoryVisible = false,
    ///                 ExportPolicyRules = new[]
    ///                 {
    ///                     new Azure.NetApp.Inputs.VolumeGroupOracleVolumeExportPolicyRuleArgs
    ///                     {
    ///                         RuleIndex = 1,
    ///                         AllowedClients = "0.0.0.0/0",
    ///                         Nfsv3Enabled = false,
    ///                         Nfsv41Enabled = true,
    ///                         UnixReadOnly = false,
    ///                         UnixReadWrite = true,
    ///                         RootAccessEnabled = false,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Application Volume Groups can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:netapp/volumeGroupOracle:VolumeGroupOracle example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mytest-rg/providers/Microsoft.NetApp/netAppAccounts/netapp-account-test/volumeGroups/netapp-volumegroup-test
    /// ```
    /// </summary>
    [AzureResourceType("azure:netapp/volumeGroupOracle:VolumeGroupOracle")]
    public partial class VolumeGroupOracle : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// The SAP System ID, maximum 3 characters, e.g. `OR1`. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Output("applicationIdentifier")]
        public Output<string> ApplicationIdentifier { get; private set; } = null!;

        /// <summary>
        /// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Output("groupDescription")]
        public Output<string> GroupDescription { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// One or more `volume` blocks as defined below.
        /// </summary>
        [Output("volumes")]
        public Output<ImmutableArray<Outputs.VolumeGroupOracleVolume>> Volumes { get; private set; } = null!;


        /// <summary>
        /// Create a VolumeGroupOracle resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VolumeGroupOracle(string name, VolumeGroupOracleArgs args, CustomResourceOptions? options = null)
            : base("azure:netapp/volumeGroupOracle:VolumeGroupOracle", name, args ?? new VolumeGroupOracleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VolumeGroupOracle(string name, Input<string> id, VolumeGroupOracleState? state = null, CustomResourceOptions? options = null)
            : base("azure:netapp/volumeGroupOracle:VolumeGroupOracle", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VolumeGroupOracle resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VolumeGroupOracle Get(string name, Input<string> id, VolumeGroupOracleState? state = null, CustomResourceOptions? options = null)
        {
            return new VolumeGroupOracle(name, id, state, options);
        }
    }

    public sealed class VolumeGroupOracleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The SAP System ID, maximum 3 characters, e.g. `OR1`. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("applicationIdentifier", required: true)]
        public Input<string> ApplicationIdentifier { get; set; } = null!;

        /// <summary>
        /// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("groupDescription", required: true)]
        public Input<string> GroupDescription { get; set; } = null!;

        /// <summary>
        /// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("volumes", required: true)]
        private InputList<Inputs.VolumeGroupOracleVolumeArgs>? _volumes;

        /// <summary>
        /// One or more `volume` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VolumeGroupOracleVolumeArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.VolumeGroupOracleVolumeArgs>());
            set => _volumes = value;
        }

        public VolumeGroupOracleArgs()
        {
        }
        public static new VolumeGroupOracleArgs Empty => new VolumeGroupOracleArgs();
    }

    public sealed class VolumeGroupOracleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// The SAP System ID, maximum 3 characters, e.g. `OR1`. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("applicationIdentifier")]
        public Input<string>? ApplicationIdentifier { get; set; }

        /// <summary>
        /// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("groupDescription")]
        public Input<string>? GroupDescription { get; set; }

        /// <summary>
        /// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("volumes")]
        private InputList<Inputs.VolumeGroupOracleVolumeGetArgs>? _volumes;

        /// <summary>
        /// One or more `volume` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VolumeGroupOracleVolumeGetArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.VolumeGroupOracleVolumeGetArgs>());
            set => _volumes = value;
        }

        public VolumeGroupOracleState()
        {
        }
        public static new VolumeGroupOracleState Empty => new VolumeGroupOracleState();
    }
}
