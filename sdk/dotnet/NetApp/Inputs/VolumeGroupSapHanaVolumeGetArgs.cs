// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.NetApp.Inputs
{

    public sealed class VolumeGroupSapHanaVolumeGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Capacity Pool. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("capacityPoolId", required: true)]
        public Input<string> CapacityPoolId { get; set; } = null!;

        /// <summary>
        /// A `data_protection_replication` block as defined below. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("dataProtectionReplication")]
        public Input<Inputs.VolumeGroupSapHanaVolumeDataProtectionReplicationGetArgs>? DataProtectionReplication { get; set; }

        /// <summary>
        /// A `data_protection_snapshot_policy` block as defined below.
        /// </summary>
        [Input("dataProtectionSnapshotPolicy")]
        public Input<Inputs.VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyGetArgs>? DataProtectionSnapshotPolicy { get; set; }

        [Input("exportPolicyRules", required: true)]
        private InputList<Inputs.VolumeGroupSapHanaVolumeExportPolicyRuleGetArgs>? _exportPolicyRules;

        /// <summary>
        /// One or more `export_policy_rule` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VolumeGroupSapHanaVolumeExportPolicyRuleGetArgs> ExportPolicyRules
        {
            get => _exportPolicyRules ?? (_exportPolicyRules = new InputList<Inputs.VolumeGroupSapHanaVolumeExportPolicyRuleGetArgs>());
            set => _exportPolicyRules = value;
        }

        /// <summary>
        /// The ID of the Application Volume Group.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("mountIpAddresses")]
        private InputList<string>? _mountIpAddresses;
        public InputList<string> MountIpAddresses
        {
            get => _mountIpAddresses ?? (_mountIpAddresses = new InputList<string>());
            set => _mountIpAddresses = value;
        }

        /// <summary>
        /// The name which should be used for this volume. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The target volume protocol expressed as a list. Changing this forces a new Application Volume Group to be created and data will be lost. Supported values for Application Volume Group include `NFSv3` or `NFSv4.1`, multi-protocol is not supported and there are certain rules on which protocol is supporteed per volume spec, please check [Configure application volume groups for the SAP HANA REST API](https://learn.microsoft.com/en-us/azure/azure-netapp-files/configure-application-volume-group-sap-hana-api) document for details.
        /// </summary>
        [Input("protocols", required: true)]
        public Input<string> Protocols { get; set; } = null!;

        /// <summary>
        /// The ID of the proximity placement group. Changing this forces a new Application Volume Group to be created and data will be lost. For SAP-HANA application, it is required to have PPG enabled so Azure NetApp Files can pin the volumes next to your compute resources, please check [Requirements and considerations for application volume group for SAP HANA](https://learn.microsoft.com/en-us/azure/azure-netapp-files/application-volume-group-considerations) for details and other requirements.
        /// </summary>
        [Input("proximityPlacementGroupId")]
        public Input<string>? ProximityPlacementGroupId { get; set; }

        /// <summary>
        /// Volume security style. Possible values are `ntfs` and `unix`. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("securityStyle", required: true)]
        public Input<string> SecurityStyle { get; set; } = null!;

        /// <summary>
        /// Volume security style. Possible values are `Premium`, `Standard` and `Ultra`. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("serviceLevel", required: true)]
        public Input<string> ServiceLevel { get; set; } = null!;

        /// <summary>
        /// Specifies whether the .snapshot (NFS clients) path of a volume is visible. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("snapshotDirectoryVisible", required: true)]
        public Input<bool> SnapshotDirectoryVisible { get; set; } = null!;

        /// <summary>
        /// The maximum Storage Quota allowed for a file system in Gigabytes.
        /// </summary>
        [Input("storageQuotaInGb", required: true)]
        public Input<int> StorageQuotaInGb { get; set; } = null!;

        /// <summary>
        /// The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Application Volume Group.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Throughput of this volume in Mibps.
        /// </summary>
        [Input("throughputInMibps", required: true)]
        public Input<double> ThroughputInMibps { get; set; } = null!;

        /// <summary>
        /// A unique file path for the volume. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("volumePath", required: true)]
        public Input<string> VolumePath { get; set; } = null!;

        /// <summary>
        /// Volume specification name. Possible values are `data`, `log`, `shared`, `data-backup` and `log-backup`. Changing this forces a new Application Volume Group to be created and data will be lost.
        /// </summary>
        [Input("volumeSpecName", required: true)]
        public Input<string> VolumeSpecName { get; set; } = null!;

        public VolumeGroupSapHanaVolumeGetArgs()
        {
        }
        public static new VolumeGroupSapHanaVolumeGetArgs Empty => new VolumeGroupSapHanaVolumeGetArgs();
    }
}
