// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.NetApp
{
    public static class GetVolume
    {
        /// <summary>
        /// Uses this data source to access information about an existing NetApp Volume.
        /// 
        /// ## NetApp Volume Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.NetApp.GetVolume.Invoke(new()
        ///     {
        ///         ResourceGroupName = "acctestRG",
        ///         AccountName = "acctestnetappaccount",
        ///         PoolName = "acctestnetapppool",
        ///         Name = "example-volume",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["netappVolumeId"] = example.Apply(getVolumeResult =&gt; getVolumeResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetVolumeResult> InvokeAsync(GetVolumeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeResult>("azure:netapp/getVolume:getVolume", args ?? new GetVolumeArgs(), options.WithDefaults());

        /// <summary>
        /// Uses this data source to access information about an existing NetApp Volume.
        /// 
        /// ## NetApp Volume Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.NetApp.GetVolume.Invoke(new()
        ///     {
        ///         ResourceGroupName = "acctestRG",
        ///         AccountName = "acctestnetappaccount",
        ///         PoolName = "acctestnetapppool",
        ///         Name = "example-volume",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["netappVolumeId"] = example.Apply(getVolumeResult =&gt; getVolumeResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVolumeResult> Invoke(GetVolumeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeResult>("azure:netapp/getVolume:getVolume", args ?? new GetVolumeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account where the NetApp pool exists.
        /// </summary>
        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the NetApp Volume.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the NetApp pool where the NetApp volume exists.
        /// </summary>
        [Input("poolName", required: true)]
        public string PoolName { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the NetApp Volume exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Volume security style
        /// </summary>
        [Input("securityStyle")]
        public string? SecurityStyle { get; set; }

        public GetVolumeArgs()
        {
        }
        public static new GetVolumeArgs Empty => new GetVolumeArgs();
    }

    public sealed class GetVolumeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the NetApp account where the NetApp pool exists.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the NetApp Volume.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the NetApp pool where the NetApp volume exists.
        /// </summary>
        [Input("poolName", required: true)]
        public Input<string> PoolName { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the NetApp Volume exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Volume security style
        /// </summary>
        [Input("securityStyle")]
        public Input<string>? SecurityStyle { get; set; }

        public GetVolumeInvokeArgs()
        {
        }
        public static new GetVolumeInvokeArgs Empty => new GetVolumeInvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeResult
    {
        public readonly string AccountName;
        /// <summary>
        /// Volume data protection block
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeDataProtectionReplicationResult> DataProtectionReplications;
        public readonly string EncryptionKeySource;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KeyVaultPrivateEndpointId;
        /// <summary>
        /// The Azure Region where the NetApp Volume exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// A list of IPv4 Addresses which should be used to mount the volume.
        /// </summary>
        public readonly ImmutableArray<string> MountIpAddresses;
        public readonly string Name;
        /// <summary>
        /// Network features in use `Basic` or `Standard`.
        /// </summary>
        public readonly string NetworkFeatures;
        public readonly string PoolName;
        /// <summary>
        /// A list of protocol types enabled on volume.
        /// </summary>
        public readonly ImmutableArray<string> Protocols;
        public readonly string ResourceGroupName;
        /// <summary>
        /// Volume security style
        /// </summary>
        public readonly string? SecurityStyle;
        /// <summary>
        /// The service level of the file system.
        /// </summary>
        public readonly string ServiceLevel;
        /// <summary>
        /// The maximum Storage Quota in Gigabytes allowed for a file system.
        /// </summary>
        public readonly int StorageQuotaInGb;
        /// <summary>
        /// The ID of a Subnet in which the NetApp Volume resides.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// The unique file path of the volume.
        /// </summary>
        public readonly string VolumePath;
        /// <summary>
        /// The Availability Zone in which the Volume is located.
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private GetVolumeResult(
            string accountName,

            ImmutableArray<Outputs.GetVolumeDataProtectionReplicationResult> dataProtectionReplications,

            string encryptionKeySource,

            string id,

            string keyVaultPrivateEndpointId,

            string location,

            ImmutableArray<string> mountIpAddresses,

            string name,

            string networkFeatures,

            string poolName,

            ImmutableArray<string> protocols,

            string resourceGroupName,

            string? securityStyle,

            string serviceLevel,

            int storageQuotaInGb,

            string subnetId,

            string volumePath,

            string zone)
        {
            AccountName = accountName;
            DataProtectionReplications = dataProtectionReplications;
            EncryptionKeySource = encryptionKeySource;
            Id = id;
            KeyVaultPrivateEndpointId = keyVaultPrivateEndpointId;
            Location = location;
            MountIpAddresses = mountIpAddresses;
            Name = name;
            NetworkFeatures = networkFeatures;
            PoolName = poolName;
            Protocols = protocols;
            ResourceGroupName = resourceGroupName;
            SecurityStyle = securityStyle;
            ServiceLevel = serviceLevel;
            StorageQuotaInGb = storageQuotaInGb;
            SubnetId = subnetId;
            VolumePath = volumePath;
            Zone = zone;
        }
    }
}
