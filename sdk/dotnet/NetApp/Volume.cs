// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.NetApp
{
    /// <summary>
    /// ## Import
    /// 
    /// NetApp Volumes can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:netapp/volume:Volume example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1
    /// ```
    /// </summary>
    [AzureResourceType("azure:netapp/volume:Volume")]
    public partial class Volume : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("accountName")]
        public Output<string> AccountName { get; private set; } = null!;

        /// <summary>
        /// Is the NetApp Volume enabled for Azure VMware Solution (AVS) datastore purpose. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("azureVmwareDataStoreEnabled")]
        public Output<bool?> AzureVmwareDataStoreEnabled { get; private set; } = null!;

        /// <summary>
        /// Creates volume from snapshot. Following properties must be the same as the original volume where the snapshot was taken from: `protocols`, `subnet_id`, `location`, `service_level`, `resource_group_name`, `account_name` and `pool_name`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("createFromSnapshotResourceId")]
        public Output<string> CreateFromSnapshotResourceId { get; private set; } = null!;

        /// <summary>
        /// A `data_protection_replication` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("dataProtectionReplication")]
        public Output<Outputs.VolumeDataProtectionReplication?> DataProtectionReplication { get; private set; } = null!;

        /// <summary>
        /// A `data_protection_snapshot_policy` block as defined below.
        /// </summary>
        [Output("dataProtectionSnapshotPolicy")]
        public Output<Outputs.VolumeDataProtectionSnapshotPolicy?> DataProtectionSnapshotPolicy { get; private set; } = null!;

        /// <summary>
        /// The encryption key source, it can be `Microsoft.NetApp` for platform managed keys or `Microsoft.KeyVault` for customer-managed keys. This is required with `key_vault_private_endpoint_id`.
        /// </summary>
        [Output("encryptionKeySource")]
        public Output<string> EncryptionKeySource { get; private set; } = null!;

        /// <summary>
        /// One or more `export_policy_rule` block defined below.
        /// </summary>
        [Output("exportPolicyRules")]
        public Output<ImmutableArray<Outputs.VolumeExportPolicyRule>> ExportPolicyRules { get; private set; } = null!;

        /// <summary>
        /// The Private Endpoint ID for Key Vault, which is required when using customer-managed keys. This is required with `encryption_key_source`.
        /// </summary>
        [Output("keyVaultPrivateEndpointId")]
        public Output<string> KeyVaultPrivateEndpointId { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A list of IPv4 Addresses which should be used to mount the volume.
        /// </summary>
        [Output("mountIpAddresses")]
        public Output<ImmutableArray<string>> MountIpAddresses { get; private set; } = null!;

        /// <summary>
        /// The name of the NetApp Volume. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Indicates which network feature to use, accepted values are `Basic` or `Standard`, it defaults to `Basic` if not defined. This is a feature in public preview and for more information about it and how to register, please refer to [Configure network features for an Azure NetApp Files volume](https://docs.microsoft.com/en-us/azure/azure-netapp-files/configure-network-features). Changing this forces a new resource to be created.
        /// </summary>
        [Output("networkFeatures")]
        public Output<string> NetworkFeatures { get; private set; } = null!;

        /// <summary>
        /// The name of the NetApp pool in which the NetApp Volume should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("poolName")]
        public Output<string> PoolName { get; private set; } = null!;

        /// <summary>
        /// The target volume protocol expressed as a list. Supported single value include `CIFS`, `NFSv3`, or `NFSv4.1`. If argument is not defined it will default to `NFSv3`. Changing this forces a new resource to be created and data will be lost. Dual protocol scenario is supported for CIFS and NFSv3, for more information, please refer to [Create a dual-protocol volume for Azure NetApp Files](https://docs.microsoft.com/azure/azure-netapp-files/create-volumes-dual-protocol) document.
        /// </summary>
        [Output("protocols")]
        public Output<ImmutableArray<string>> Protocols { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group where the NetApp Volume should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Volume security style, accepted values are `unix` or `ntfs`. If not provided, single-protocol volume is created defaulting to `unix` if it is `NFSv3` or `NFSv4.1` volume, if `CIFS`, it will default to `ntfs`. In a dual-protocol volume, if not provided, its value will be `ntfs`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("securityStyle")]
        public Output<string> SecurityStyle { get; private set; } = null!;

        /// <summary>
        /// The target performance of the file system. Valid values include `Premium`, `Standard`, or `Ultra`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("serviceLevel")]
        public Output<string> ServiceLevel { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the .snapshot (NFS clients) or ~snapshot (SMB clients) path of a volume is visible, default value is true.
        /// </summary>
        [Output("snapshotDirectoryVisible")]
        public Output<bool> SnapshotDirectoryVisible { get; private set; } = null!;

        /// <summary>
        /// The maximum Storage Quota allowed for a file system in Gigabytes.
        /// </summary>
        [Output("storageQuotaInGb")]
        public Output<int> StorageQuotaInGb { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new resource to be created.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// 
        /// &gt; **Note:** It is highly recommended to use the **lifecycle** property as noted in the example since it will prevent an accidental deletion of the volume if the `protocols` argument changes to a different protocol type.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Throughput of this volume in Mibps.
        /// </summary>
        [Output("throughputInMibps")]
        public Output<double> ThroughputInMibps { get; private set; } = null!;

        /// <summary>
        /// A unique file path for the volume. Used when creating mount targets. Changing this forces a new resource to be created.
        /// </summary>
        [Output("volumePath")]
        public Output<string> VolumePath { get; private set; } = null!;

        /// <summary>
        /// Specifies the Availability Zone in which the Volume should be located. Possible values are `1`, `2` and `3`. Changing this forces a new resource to be created. This feature is currently in preview, for more information on how to enable it, please refer to [Manage availability zone volume placement for Azure NetApp Files](https://learn.microsoft.com/en-us/azure/azure-netapp-files/manage-availability-zone-volume-placement#register-the-feature).
        /// </summary>
        [Output("zone")]
        public Output<string?> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Volume resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Volume(string name, VolumeArgs args, CustomResourceOptions? options = null)
            : base("azure:netapp/volume:Volume", name, args ?? new VolumeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Volume(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
            : base("azure:netapp/volume:Volume", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Volume resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Volume Get(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
        {
            return new Volume(name, id, state, options);
        }
    }

    public sealed class VolumeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// Is the NetApp Volume enabled for Azure VMware Solution (AVS) datastore purpose. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("azureVmwareDataStoreEnabled")]
        public Input<bool>? AzureVmwareDataStoreEnabled { get; set; }

        /// <summary>
        /// Creates volume from snapshot. Following properties must be the same as the original volume where the snapshot was taken from: `protocols`, `subnet_id`, `location`, `service_level`, `resource_group_name`, `account_name` and `pool_name`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("createFromSnapshotResourceId")]
        public Input<string>? CreateFromSnapshotResourceId { get; set; }

        /// <summary>
        /// A `data_protection_replication` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("dataProtectionReplication")]
        public Input<Inputs.VolumeDataProtectionReplicationArgs>? DataProtectionReplication { get; set; }

        /// <summary>
        /// A `data_protection_snapshot_policy` block as defined below.
        /// </summary>
        [Input("dataProtectionSnapshotPolicy")]
        public Input<Inputs.VolumeDataProtectionSnapshotPolicyArgs>? DataProtectionSnapshotPolicy { get; set; }

        /// <summary>
        /// The encryption key source, it can be `Microsoft.NetApp` for platform managed keys or `Microsoft.KeyVault` for customer-managed keys. This is required with `key_vault_private_endpoint_id`.
        /// </summary>
        [Input("encryptionKeySource")]
        public Input<string>? EncryptionKeySource { get; set; }

        [Input("exportPolicyRules")]
        private InputList<Inputs.VolumeExportPolicyRuleArgs>? _exportPolicyRules;

        /// <summary>
        /// One or more `export_policy_rule` block defined below.
        /// </summary>
        public InputList<Inputs.VolumeExportPolicyRuleArgs> ExportPolicyRules
        {
            get => _exportPolicyRules ?? (_exportPolicyRules = new InputList<Inputs.VolumeExportPolicyRuleArgs>());
            set => _exportPolicyRules = value;
        }

        /// <summary>
        /// The Private Endpoint ID for Key Vault, which is required when using customer-managed keys. This is required with `encryption_key_source`.
        /// </summary>
        [Input("keyVaultPrivateEndpointId")]
        public Input<string>? KeyVaultPrivateEndpointId { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the NetApp Volume. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Indicates which network feature to use, accepted values are `Basic` or `Standard`, it defaults to `Basic` if not defined. This is a feature in public preview and for more information about it and how to register, please refer to [Configure network features for an Azure NetApp Files volume](https://docs.microsoft.com/en-us/azure/azure-netapp-files/configure-network-features). Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkFeatures")]
        public Input<string>? NetworkFeatures { get; set; }

        /// <summary>
        /// The name of the NetApp pool in which the NetApp Volume should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("poolName", required: true)]
        public Input<string> PoolName { get; set; } = null!;

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// The target volume protocol expressed as a list. Supported single value include `CIFS`, `NFSv3`, or `NFSv4.1`. If argument is not defined it will default to `NFSv3`. Changing this forces a new resource to be created and data will be lost. Dual protocol scenario is supported for CIFS and NFSv3, for more information, please refer to [Create a dual-protocol volume for Azure NetApp Files](https://docs.microsoft.com/azure/azure-netapp-files/create-volumes-dual-protocol) document.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// The name of the resource group where the NetApp Volume should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Volume security style, accepted values are `unix` or `ntfs`. If not provided, single-protocol volume is created defaulting to `unix` if it is `NFSv3` or `NFSv4.1` volume, if `CIFS`, it will default to `ntfs`. In a dual-protocol volume, if not provided, its value will be `ntfs`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("securityStyle")]
        public Input<string>? SecurityStyle { get; set; }

        /// <summary>
        /// The target performance of the file system. Valid values include `Premium`, `Standard`, or `Ultra`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serviceLevel", required: true)]
        public Input<string> ServiceLevel { get; set; } = null!;

        /// <summary>
        /// Specifies whether the .snapshot (NFS clients) or ~snapshot (SMB clients) path of a volume is visible, default value is true.
        /// </summary>
        [Input("snapshotDirectoryVisible")]
        public Input<bool>? SnapshotDirectoryVisible { get; set; }

        /// <summary>
        /// The maximum Storage Quota allowed for a file system in Gigabytes.
        /// </summary>
        [Input("storageQuotaInGb", required: true)]
        public Input<int> StorageQuotaInGb { get; set; } = null!;

        /// <summary>
        /// The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// 
        /// &gt; **Note:** It is highly recommended to use the **lifecycle** property as noted in the example since it will prevent an accidental deletion of the volume if the `protocols` argument changes to a different protocol type.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Throughput of this volume in Mibps.
        /// </summary>
        [Input("throughputInMibps")]
        public Input<double>? ThroughputInMibps { get; set; }

        /// <summary>
        /// A unique file path for the volume. Used when creating mount targets. Changing this forces a new resource to be created.
        /// </summary>
        [Input("volumePath", required: true)]
        public Input<string> VolumePath { get; set; } = null!;

        /// <summary>
        /// Specifies the Availability Zone in which the Volume should be located. Possible values are `1`, `2` and `3`. Changing this forces a new resource to be created. This feature is currently in preview, for more information on how to enable it, please refer to [Manage availability zone volume placement for Azure NetApp Files](https://learn.microsoft.com/en-us/azure/azure-netapp-files/manage-availability-zone-volume-placement#register-the-feature).
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public VolumeArgs()
        {
        }
        public static new VolumeArgs Empty => new VolumeArgs();
    }

    public sealed class VolumeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// Is the NetApp Volume enabled for Azure VMware Solution (AVS) datastore purpose. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("azureVmwareDataStoreEnabled")]
        public Input<bool>? AzureVmwareDataStoreEnabled { get; set; }

        /// <summary>
        /// Creates volume from snapshot. Following properties must be the same as the original volume where the snapshot was taken from: `protocols`, `subnet_id`, `location`, `service_level`, `resource_group_name`, `account_name` and `pool_name`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("createFromSnapshotResourceId")]
        public Input<string>? CreateFromSnapshotResourceId { get; set; }

        /// <summary>
        /// A `data_protection_replication` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("dataProtectionReplication")]
        public Input<Inputs.VolumeDataProtectionReplicationGetArgs>? DataProtectionReplication { get; set; }

        /// <summary>
        /// A `data_protection_snapshot_policy` block as defined below.
        /// </summary>
        [Input("dataProtectionSnapshotPolicy")]
        public Input<Inputs.VolumeDataProtectionSnapshotPolicyGetArgs>? DataProtectionSnapshotPolicy { get; set; }

        /// <summary>
        /// The encryption key source, it can be `Microsoft.NetApp` for platform managed keys or `Microsoft.KeyVault` for customer-managed keys. This is required with `key_vault_private_endpoint_id`.
        /// </summary>
        [Input("encryptionKeySource")]
        public Input<string>? EncryptionKeySource { get; set; }

        [Input("exportPolicyRules")]
        private InputList<Inputs.VolumeExportPolicyRuleGetArgs>? _exportPolicyRules;

        /// <summary>
        /// One or more `export_policy_rule` block defined below.
        /// </summary>
        public InputList<Inputs.VolumeExportPolicyRuleGetArgs> ExportPolicyRules
        {
            get => _exportPolicyRules ?? (_exportPolicyRules = new InputList<Inputs.VolumeExportPolicyRuleGetArgs>());
            set => _exportPolicyRules = value;
        }

        /// <summary>
        /// The Private Endpoint ID for Key Vault, which is required when using customer-managed keys. This is required with `encryption_key_source`.
        /// </summary>
        [Input("keyVaultPrivateEndpointId")]
        public Input<string>? KeyVaultPrivateEndpointId { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("mountIpAddresses")]
        private InputList<string>? _mountIpAddresses;

        /// <summary>
        /// A list of IPv4 Addresses which should be used to mount the volume.
        /// </summary>
        public InputList<string> MountIpAddresses
        {
            get => _mountIpAddresses ?? (_mountIpAddresses = new InputList<string>());
            set => _mountIpAddresses = value;
        }

        /// <summary>
        /// The name of the NetApp Volume. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Indicates which network feature to use, accepted values are `Basic` or `Standard`, it defaults to `Basic` if not defined. This is a feature in public preview and for more information about it and how to register, please refer to [Configure network features for an Azure NetApp Files volume](https://docs.microsoft.com/en-us/azure/azure-netapp-files/configure-network-features). Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkFeatures")]
        public Input<string>? NetworkFeatures { get; set; }

        /// <summary>
        /// The name of the NetApp pool in which the NetApp Volume should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("poolName")]
        public Input<string>? PoolName { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// The target volume protocol expressed as a list. Supported single value include `CIFS`, `NFSv3`, or `NFSv4.1`. If argument is not defined it will default to `NFSv3`. Changing this forces a new resource to be created and data will be lost. Dual protocol scenario is supported for CIFS and NFSv3, for more information, please refer to [Create a dual-protocol volume for Azure NetApp Files](https://docs.microsoft.com/azure/azure-netapp-files/create-volumes-dual-protocol) document.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// The name of the resource group where the NetApp Volume should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Volume security style, accepted values are `unix` or `ntfs`. If not provided, single-protocol volume is created defaulting to `unix` if it is `NFSv3` or `NFSv4.1` volume, if `CIFS`, it will default to `ntfs`. In a dual-protocol volume, if not provided, its value will be `ntfs`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("securityStyle")]
        public Input<string>? SecurityStyle { get; set; }

        /// <summary>
        /// The target performance of the file system. Valid values include `Premium`, `Standard`, or `Ultra`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serviceLevel")]
        public Input<string>? ServiceLevel { get; set; }

        /// <summary>
        /// Specifies whether the .snapshot (NFS clients) or ~snapshot (SMB clients) path of a volume is visible, default value is true.
        /// </summary>
        [Input("snapshotDirectoryVisible")]
        public Input<bool>? SnapshotDirectoryVisible { get; set; }

        /// <summary>
        /// The maximum Storage Quota allowed for a file system in Gigabytes.
        /// </summary>
        [Input("storageQuotaInGb")]
        public Input<int>? StorageQuotaInGb { get; set; }

        /// <summary>
        /// The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// 
        /// &gt; **Note:** It is highly recommended to use the **lifecycle** property as noted in the example since it will prevent an accidental deletion of the volume if the `protocols` argument changes to a different protocol type.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Throughput of this volume in Mibps.
        /// </summary>
        [Input("throughputInMibps")]
        public Input<double>? ThroughputInMibps { get; set; }

        /// <summary>
        /// A unique file path for the volume. Used when creating mount targets. Changing this forces a new resource to be created.
        /// </summary>
        [Input("volumePath")]
        public Input<string>? VolumePath { get; set; }

        /// <summary>
        /// Specifies the Availability Zone in which the Volume should be located. Possible values are `1`, `2` and `3`. Changing this forces a new resource to be created. This feature is currently in preview, for more information on how to enable it, please refer to [Manage availability zone volume placement for Azure NetApp Files](https://learn.microsoft.com/en-us/azure/azure-netapp-files/manage-availability-zone-volume-placement#register-the-feature).
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public VolumeState()
        {
        }
        public static new VolumeState Empty => new VolumeState();
    }
}
