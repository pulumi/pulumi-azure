// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Iot
{
    /// <summary>
    /// Manages an IotHub Device Provisioning Service Shared Access Policy
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleIotHubDps = new Azure.Iot.IotHubDps("exampleIotHubDps", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Sku = new Azure.Iot.Inputs.IotHubDpsSkuArgs
    ///         {
    ///             Name = "S1",
    ///             Capacity = 1,
    ///         },
    ///     });
    /// 
    ///     var exampleDpsSharedAccessPolicy = new Azure.Iot.DpsSharedAccessPolicy("exampleDpsSharedAccessPolicy", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         IothubDpsName = exampleIotHubDps.Name,
    ///         EnrollmentWrite = true,
    ///         EnrollmentRead = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// IoTHub Device Provisioning Service Shared Access Policies can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:iot/dpsSharedAccessPolicy:DpsSharedAccessPolicy shared_access_policy1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/provisioningServices/dps1/keys/shared_access_policy1
    /// ```
    /// </summary>
    [AzureResourceType("azure:iot/dpsSharedAccessPolicy:DpsSharedAccessPolicy")]
    public partial class DpsSharedAccessPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Adds `EnrollmentRead` permission to this Shared Access Account. It allows read access to enrollment data.
        /// 
        /// &gt; **NOTE** When `enrollment_read` is set to `true`, `registration_read` must also be set to true. This is a limitation of the Azure REST API
        /// </summary>
        [Output("enrollmentRead")]
        public Output<bool?> EnrollmentRead { get; private set; } = null!;

        /// <summary>
        /// Adds `EnrollmentWrite` permission to this Shared Access Account. It allows write access to enrollment data.
        /// 
        /// &gt; **NOTE** When `registration_write` is set to `true`, `enrollment_read`, `registration_read`, and `registration_write` must also be set to true. This is a requirement of the Azure API.
        /// </summary>
        [Output("enrollmentWrite")]
        public Output<bool?> EnrollmentWrite { get; private set; } = null!;

        /// <summary>
        /// The name of the IoT Hub Device Provisioning service to which this Shared Access Policy belongs. Changing this forces a new resource to be created.
        /// </summary>
        [Output("iothubDpsName")]
        public Output<string> IothubDpsName { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the IotHub Shared Access Policy resource. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The primary connection string of the Shared Access Policy.
        /// </summary>
        [Output("primaryConnectionString")]
        public Output<string> PrimaryConnectionString { get; private set; } = null!;

        /// <summary>
        /// The primary key used to create the authentication token.
        /// </summary>
        [Output("primaryKey")]
        public Output<string> PrimaryKey { get; private set; } = null!;

        /// <summary>
        /// Adds `RegistrationStatusRead` permission to this Shared Access Account. It allows read access to device registrations.
        /// </summary>
        [Output("registrationRead")]
        public Output<bool?> RegistrationRead { get; private set; } = null!;

        /// <summary>
        /// Adds `RegistrationStatusWrite` permission to this Shared Access Account. It allows write access to device registrations.
        /// 
        /// &gt; **NOTE** When `registration_write` is set to `true`, `registration_read` must also be set to true. This is a requirement of the Azure API.
        /// </summary>
        [Output("registrationWrite")]
        public Output<bool?> RegistrationWrite { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group under which the IotHub Shared Access Policy resource has to be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The secondary connection string of the Shared Access Policy.
        /// </summary>
        [Output("secondaryConnectionString")]
        public Output<string> SecondaryConnectionString { get; private set; } = null!;

        /// <summary>
        /// The secondary key used to create the authentication token.
        /// </summary>
        [Output("secondaryKey")]
        public Output<string> SecondaryKey { get; private set; } = null!;

        /// <summary>
        /// Adds `ServiceConfig` permission to this Shared Access Account. It allows configuration of the Device Provisioning Service.
        /// 
        /// &gt; **NOTE** At least one of `registration_read`, `registration_write`, `service_config`, `enrollment_read`, `enrollment_write` permissions must be set to `true`.
        /// </summary>
        [Output("serviceConfig")]
        public Output<bool?> ServiceConfig { get; private set; } = null!;


        /// <summary>
        /// Create a DpsSharedAccessPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DpsSharedAccessPolicy(string name, DpsSharedAccessPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure:iot/dpsSharedAccessPolicy:DpsSharedAccessPolicy", name, args ?? new DpsSharedAccessPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DpsSharedAccessPolicy(string name, Input<string> id, DpsSharedAccessPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azure:iot/dpsSharedAccessPolicy:DpsSharedAccessPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "primaryConnectionString",
                    "primaryKey",
                    "secondaryConnectionString",
                    "secondaryKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DpsSharedAccessPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DpsSharedAccessPolicy Get(string name, Input<string> id, DpsSharedAccessPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new DpsSharedAccessPolicy(name, id, state, options);
        }
    }

    public sealed class DpsSharedAccessPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Adds `EnrollmentRead` permission to this Shared Access Account. It allows read access to enrollment data.
        /// 
        /// &gt; **NOTE** When `enrollment_read` is set to `true`, `registration_read` must also be set to true. This is a limitation of the Azure REST API
        /// </summary>
        [Input("enrollmentRead")]
        public Input<bool>? EnrollmentRead { get; set; }

        /// <summary>
        /// Adds `EnrollmentWrite` permission to this Shared Access Account. It allows write access to enrollment data.
        /// 
        /// &gt; **NOTE** When `registration_write` is set to `true`, `enrollment_read`, `registration_read`, and `registration_write` must also be set to true. This is a requirement of the Azure API.
        /// </summary>
        [Input("enrollmentWrite")]
        public Input<bool>? EnrollmentWrite { get; set; }

        /// <summary>
        /// The name of the IoT Hub Device Provisioning service to which this Shared Access Policy belongs. Changing this forces a new resource to be created.
        /// </summary>
        [Input("iothubDpsName", required: true)]
        public Input<string> IothubDpsName { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the IotHub Shared Access Policy resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Adds `RegistrationStatusRead` permission to this Shared Access Account. It allows read access to device registrations.
        /// </summary>
        [Input("registrationRead")]
        public Input<bool>? RegistrationRead { get; set; }

        /// <summary>
        /// Adds `RegistrationStatusWrite` permission to this Shared Access Account. It allows write access to device registrations.
        /// 
        /// &gt; **NOTE** When `registration_write` is set to `true`, `registration_read` must also be set to true. This is a requirement of the Azure API.
        /// </summary>
        [Input("registrationWrite")]
        public Input<bool>? RegistrationWrite { get; set; }

        /// <summary>
        /// The name of the resource group under which the IotHub Shared Access Policy resource has to be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Adds `ServiceConfig` permission to this Shared Access Account. It allows configuration of the Device Provisioning Service.
        /// 
        /// &gt; **NOTE** At least one of `registration_read`, `registration_write`, `service_config`, `enrollment_read`, `enrollment_write` permissions must be set to `true`.
        /// </summary>
        [Input("serviceConfig")]
        public Input<bool>? ServiceConfig { get; set; }

        public DpsSharedAccessPolicyArgs()
        {
        }
        public static new DpsSharedAccessPolicyArgs Empty => new DpsSharedAccessPolicyArgs();
    }

    public sealed class DpsSharedAccessPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Adds `EnrollmentRead` permission to this Shared Access Account. It allows read access to enrollment data.
        /// 
        /// &gt; **NOTE** When `enrollment_read` is set to `true`, `registration_read` must also be set to true. This is a limitation of the Azure REST API
        /// </summary>
        [Input("enrollmentRead")]
        public Input<bool>? EnrollmentRead { get; set; }

        /// <summary>
        /// Adds `EnrollmentWrite` permission to this Shared Access Account. It allows write access to enrollment data.
        /// 
        /// &gt; **NOTE** When `registration_write` is set to `true`, `enrollment_read`, `registration_read`, and `registration_write` must also be set to true. This is a requirement of the Azure API.
        /// </summary>
        [Input("enrollmentWrite")]
        public Input<bool>? EnrollmentWrite { get; set; }

        /// <summary>
        /// The name of the IoT Hub Device Provisioning service to which this Shared Access Policy belongs. Changing this forces a new resource to be created.
        /// </summary>
        [Input("iothubDpsName")]
        public Input<string>? IothubDpsName { get; set; }

        /// <summary>
        /// Specifies the name of the IotHub Shared Access Policy resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("primaryConnectionString")]
        private Input<string>? _primaryConnectionString;

        /// <summary>
        /// The primary connection string of the Shared Access Policy.
        /// </summary>
        public Input<string>? PrimaryConnectionString
        {
            get => _primaryConnectionString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _primaryConnectionString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("primaryKey")]
        private Input<string>? _primaryKey;

        /// <summary>
        /// The primary key used to create the authentication token.
        /// </summary>
        public Input<string>? PrimaryKey
        {
            get => _primaryKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _primaryKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Adds `RegistrationStatusRead` permission to this Shared Access Account. It allows read access to device registrations.
        /// </summary>
        [Input("registrationRead")]
        public Input<bool>? RegistrationRead { get; set; }

        /// <summary>
        /// Adds `RegistrationStatusWrite` permission to this Shared Access Account. It allows write access to device registrations.
        /// 
        /// &gt; **NOTE** When `registration_write` is set to `true`, `registration_read` must also be set to true. This is a requirement of the Azure API.
        /// </summary>
        [Input("registrationWrite")]
        public Input<bool>? RegistrationWrite { get; set; }

        /// <summary>
        /// The name of the resource group under which the IotHub Shared Access Policy resource has to be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("secondaryConnectionString")]
        private Input<string>? _secondaryConnectionString;

        /// <summary>
        /// The secondary connection string of the Shared Access Policy.
        /// </summary>
        public Input<string>? SecondaryConnectionString
        {
            get => _secondaryConnectionString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secondaryConnectionString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("secondaryKey")]
        private Input<string>? _secondaryKey;

        /// <summary>
        /// The secondary key used to create the authentication token.
        /// </summary>
        public Input<string>? SecondaryKey
        {
            get => _secondaryKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secondaryKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Adds `ServiceConfig` permission to this Shared Access Account. It allows configuration of the Device Provisioning Service.
        /// 
        /// &gt; **NOTE** At least one of `registration_read`, `registration_write`, `service_config`, `enrollment_read`, `enrollment_write` permissions must be set to `true`.
        /// </summary>
        [Input("serviceConfig")]
        public Input<bool>? ServiceConfig { get; set; }

        public DpsSharedAccessPolicyState()
        {
        }
        public static new DpsSharedAccessPolicyState Empty => new DpsSharedAccessPolicyState();
    }
}
