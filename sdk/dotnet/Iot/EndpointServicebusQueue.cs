// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Iot
{
    /// <summary>
    /// Manages an IotHub ServiceBus Queue Endpoint
    /// 
    /// &gt; **NOTE:** Endpoints can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azurerm_iothub_endpoint_*` resources - but the two ways of defining the endpoints cannot be used together. If both are used against the same IoTHub, spurious changes will occur. Also, defining a `azurerm_iothub_endpoint_*` resource and another endpoint of a different type directly on the `azure.iot.IoTHub` resource is not supported.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleNamespace = new Azure.ServiceBus.Namespace("exampleNamespace", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "Standard",
    ///     });
    /// 
    ///     var exampleQueue = new Azure.ServiceBus.Queue("exampleQueue", new()
    ///     {
    ///         NamespaceId = exampleNamespace.Id,
    ///         EnablePartitioning = true,
    ///     });
    /// 
    ///     var exampleQueueAuthorizationRule = new Azure.ServiceBus.QueueAuthorizationRule("exampleQueueAuthorizationRule", new()
    ///     {
    ///         QueueId = exampleQueue.Id,
    ///         Listen = false,
    ///         Send = true,
    ///         Manage = false,
    ///     });
    /// 
    ///     var exampleIoTHub = new Azure.Iot.IoTHub("exampleIoTHub", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Sku = new Azure.Iot.Inputs.IoTHubSkuArgs
    ///         {
    ///             Name = "B1",
    ///             Capacity = 1,
    ///         },
    ///         Tags = 
    ///         {
    ///             { "purpose", "example" },
    ///         },
    ///     });
    /// 
    ///     var exampleEndpointServicebusQueue = new Azure.Iot.EndpointServicebusQueue("exampleEndpointServicebusQueue", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         IothubId = exampleIoTHub.Id,
    ///         ConnectionString = exampleQueueAuthorizationRule.PrimaryConnectionString,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// IoTHub ServiceBus Queue Endpoint can be imported using the `resource id`, e.g. g
    /// 
    /// ```sh
    ///  $ pulumi import azure:iot/endpointServicebusQueue:EndpointServicebusQueue servicebus_queue1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1/endpoints/servicebusqueue_endpoint1
    /// ```
    /// </summary>
    [AzureResourceType("azure:iot/endpointServicebusQueue:EndpointServicebusQueue")]
    public partial class EndpointServicebusQueue : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Type used to authenticate against the Service Bus Queue endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
        /// </summary>
        [Output("authenticationType")]
        public Output<string?> AuthenticationType { get; private set; } = null!;

        /// <summary>
        /// The connection string for the endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `keyBased`.
        /// </summary>
        [Output("connectionString")]
        public Output<string?> ConnectionString { get; private set; } = null!;

        /// <summary>
        /// URI of the Service Bus endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
        /// </summary>
        [Output("endpointUri")]
        public Output<string?> EndpointUri { get; private set; } = null!;

        /// <summary>
        /// Name of the Service Bus Queue. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
        /// </summary>
        [Output("entityPath")]
        public Output<string?> EntityPath { get; private set; } = null!;

        /// <summary>
        /// ID of the User Managed Identity used to authenticate against the Service Bus Queue endpoint.
        /// 
        /// &gt; **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the Iot Hub. If not specified when `authentication_type` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
        /// </summary>
        [Output("identityId")]
        public Output<string?> IdentityId { get; private set; } = null!;

        /// <summary>
        /// The IoTHub ID for the endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Output("iothubId")]
        public Output<string> IothubId { get; private set; } = null!;

        /// <summary>
        /// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group under which the Service Bus Queue has been created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;


        /// <summary>
        /// Create a EndpointServicebusQueue resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EndpointServicebusQueue(string name, EndpointServicebusQueueArgs args, CustomResourceOptions? options = null)
            : base("azure:iot/endpointServicebusQueue:EndpointServicebusQueue", name, args ?? new EndpointServicebusQueueArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EndpointServicebusQueue(string name, Input<string> id, EndpointServicebusQueueState? state = null, CustomResourceOptions? options = null)
            : base("azure:iot/endpointServicebusQueue:EndpointServicebusQueue", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "connectionString",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EndpointServicebusQueue resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EndpointServicebusQueue Get(string name, Input<string> id, EndpointServicebusQueueState? state = null, CustomResourceOptions? options = null)
        {
            return new EndpointServicebusQueue(name, id, state, options);
        }
    }

    public sealed class EndpointServicebusQueueArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Type used to authenticate against the Service Bus Queue endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
        /// </summary>
        [Input("authenticationType")]
        public Input<string>? AuthenticationType { get; set; }

        [Input("connectionString")]
        private Input<string>? _connectionString;

        /// <summary>
        /// The connection string for the endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `keyBased`.
        /// </summary>
        public Input<string>? ConnectionString
        {
            get => _connectionString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _connectionString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// URI of the Service Bus endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
        /// </summary>
        [Input("endpointUri")]
        public Input<string>? EndpointUri { get; set; }

        /// <summary>
        /// Name of the Service Bus Queue. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
        /// </summary>
        [Input("entityPath")]
        public Input<string>? EntityPath { get; set; }

        /// <summary>
        /// ID of the User Managed Identity used to authenticate against the Service Bus Queue endpoint.
        /// 
        /// &gt; **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the Iot Hub. If not specified when `authentication_type` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
        /// </summary>
        [Input("identityId")]
        public Input<string>? IdentityId { get; set; }

        /// <summary>
        /// The IoTHub ID for the endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Input("iothubId", required: true)]
        public Input<string> IothubId { get; set; } = null!;

        /// <summary>
        /// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group under which the Service Bus Queue has been created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public EndpointServicebusQueueArgs()
        {
        }
        public static new EndpointServicebusQueueArgs Empty => new EndpointServicebusQueueArgs();
    }

    public sealed class EndpointServicebusQueueState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Type used to authenticate against the Service Bus Queue endpoint. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
        /// </summary>
        [Input("authenticationType")]
        public Input<string>? AuthenticationType { get; set; }

        [Input("connectionString")]
        private Input<string>? _connectionString;

        /// <summary>
        /// The connection string for the endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `keyBased`.
        /// </summary>
        public Input<string>? ConnectionString
        {
            get => _connectionString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _connectionString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// URI of the Service Bus endpoint. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
        /// </summary>
        [Input("endpointUri")]
        public Input<string>? EndpointUri { get; set; }

        /// <summary>
        /// Name of the Service Bus Queue. This attribute can only be specified and is mandatory when `authentication_type` is `identityBased`.
        /// </summary>
        [Input("entityPath")]
        public Input<string>? EntityPath { get; set; }

        /// <summary>
        /// ID of the User Managed Identity used to authenticate against the Service Bus Queue endpoint.
        /// 
        /// &gt; **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the Iot Hub. If not specified when `authentication_type` is `identityBased`, System Assigned Managed Identity of the Iot Hub will be used.
        /// </summary>
        [Input("identityId")]
        public Input<string>? IdentityId { get; set; }

        /// <summary>
        /// The IoTHub ID for the endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Input("iothubId")]
        public Input<string>? IothubId { get; set; }

        /// <summary>
        /// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved: `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group under which the Service Bus Queue has been created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        public EndpointServicebusQueueState()
        {
        }
        public static new EndpointServicebusQueueState Empty => new EndpointServicebusQueueState();
    }
}
