// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Iot
{
    /// <summary>
    /// Manages the File Upload of an IoT Hub.
    /// 
    /// &gt; **NOTE:** File upload can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azure.iot.FileUpload` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.
    /// 
    /// ## Import
    /// 
    /// IoT Hub File Uploads can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:iot/fileUpload:FileUpload example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/iotHubs/hub1
    /// ```
    /// </summary>
    [AzureResourceType("azure:iot/fileUpload:FileUpload")]
    public partial class FileUpload : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The type used to authenticate against the storage account. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
        /// </summary>
        [Output("authenticationType")]
        public Output<string?> AuthenticationType { get; private set; } = null!;

        /// <summary>
        /// The connection string for the Azure Storage account to which files are uploaded.
        /// </summary>
        [Output("connectionString")]
        public Output<string> ConnectionString { get; private set; } = null!;

        /// <summary>
        /// The name of the root container where the files should be uploaded to. The container need not exist but should be creatable using the `connection_string` specified.
        /// </summary>
        [Output("containerName")]
        public Output<string> ContainerName { get; private set; } = null!;

        /// <summary>
        /// The period of time for which a file upload notification message is available to consume before it expires, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
        /// </summary>
        [Output("defaultTtl")]
        public Output<string?> DefaultTtl { get; private set; } = null!;

        /// <summary>
        /// The ID of the User Managed Identity used to authenticate against the storage account.
        /// 
        /// &gt; **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the IoT Hub. If `identity_id` is omitted when `authentication_type` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.
        /// </summary>
        [Output("identityId")]
        public Output<string?> IdentityId { get; private set; } = null!;

        /// <summary>
        /// The ID of the IoT Hub. Changing this forces a new IoT Hub to be created.
        /// </summary>
        [Output("iothubId")]
        public Output<string> IothubId { get; private set; } = null!;

        /// <summary>
        /// The lock duration for the file upload notifications queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT1M`.
        /// </summary>
        [Output("lockDuration")]
        public Output<string?> LockDuration { get; private set; } = null!;

        /// <summary>
        /// The number of times the IoT Hub attempts to deliver a file upload notification message. Defaults to `10`.
        /// </summary>
        [Output("maxDeliveryCount")]
        public Output<int?> MaxDeliveryCount { get; private set; } = null!;

        /// <summary>
        /// Used to specify whether file notifications are sent to IoT Hub on upload. Defaults to `false`.
        /// </summary>
        [Output("notificationsEnabled")]
        public Output<bool?> NotificationsEnabled { get; private set; } = null!;

        /// <summary>
        /// The period of time for which the SAS URI generated by IoT Hub for file upload is valid, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 24 hours. Defaults to `PT1H`.
        /// </summary>
        [Output("sasTtl")]
        public Output<string?> SasTtl { get; private set; } = null!;


        /// <summary>
        /// Create a FileUpload resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FileUpload(string name, FileUploadArgs args, CustomResourceOptions? options = null)
            : base("azure:iot/fileUpload:FileUpload", name, args ?? new FileUploadArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FileUpload(string name, Input<string> id, FileUploadState? state = null, CustomResourceOptions? options = null)
            : base("azure:iot/fileUpload:FileUpload", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "connectionString",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FileUpload resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FileUpload Get(string name, Input<string> id, FileUploadState? state = null, CustomResourceOptions? options = null)
        {
            return new FileUpload(name, id, state, options);
        }
    }

    public sealed class FileUploadArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type used to authenticate against the storage account. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
        /// </summary>
        [Input("authenticationType")]
        public Input<string>? AuthenticationType { get; set; }

        [Input("connectionString", required: true)]
        private Input<string>? _connectionString;

        /// <summary>
        /// The connection string for the Azure Storage account to which files are uploaded.
        /// </summary>
        public Input<string>? ConnectionString
        {
            get => _connectionString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _connectionString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the root container where the files should be uploaded to. The container need not exist but should be creatable using the `connection_string` specified.
        /// </summary>
        [Input("containerName", required: true)]
        public Input<string> ContainerName { get; set; } = null!;

        /// <summary>
        /// The period of time for which a file upload notification message is available to consume before it expires, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
        /// </summary>
        [Input("defaultTtl")]
        public Input<string>? DefaultTtl { get; set; }

        /// <summary>
        /// The ID of the User Managed Identity used to authenticate against the storage account.
        /// 
        /// &gt; **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the IoT Hub. If `identity_id` is omitted when `authentication_type` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.
        /// </summary>
        [Input("identityId")]
        public Input<string>? IdentityId { get; set; }

        /// <summary>
        /// The ID of the IoT Hub. Changing this forces a new IoT Hub to be created.
        /// </summary>
        [Input("iothubId", required: true)]
        public Input<string> IothubId { get; set; } = null!;

        /// <summary>
        /// The lock duration for the file upload notifications queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT1M`.
        /// </summary>
        [Input("lockDuration")]
        public Input<string>? LockDuration { get; set; }

        /// <summary>
        /// The number of times the IoT Hub attempts to deliver a file upload notification message. Defaults to `10`.
        /// </summary>
        [Input("maxDeliveryCount")]
        public Input<int>? MaxDeliveryCount { get; set; }

        /// <summary>
        /// Used to specify whether file notifications are sent to IoT Hub on upload. Defaults to `false`.
        /// </summary>
        [Input("notificationsEnabled")]
        public Input<bool>? NotificationsEnabled { get; set; }

        /// <summary>
        /// The period of time for which the SAS URI generated by IoT Hub for file upload is valid, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 24 hours. Defaults to `PT1H`.
        /// </summary>
        [Input("sasTtl")]
        public Input<string>? SasTtl { get; set; }

        public FileUploadArgs()
        {
        }
        public static new FileUploadArgs Empty => new FileUploadArgs();
    }

    public sealed class FileUploadState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type used to authenticate against the storage account. Possible values are `keyBased` and `identityBased`. Defaults to `keyBased`.
        /// </summary>
        [Input("authenticationType")]
        public Input<string>? AuthenticationType { get; set; }

        [Input("connectionString")]
        private Input<string>? _connectionString;

        /// <summary>
        /// The connection string for the Azure Storage account to which files are uploaded.
        /// </summary>
        public Input<string>? ConnectionString
        {
            get => _connectionString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _connectionString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the root container where the files should be uploaded to. The container need not exist but should be creatable using the `connection_string` specified.
        /// </summary>
        [Input("containerName")]
        public Input<string>? ContainerName { get; set; }

        /// <summary>
        /// The period of time for which a file upload notification message is available to consume before it expires, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 48 hours. Defaults to `PT1H`.
        /// </summary>
        [Input("defaultTtl")]
        public Input<string>? DefaultTtl { get; set; }

        /// <summary>
        /// The ID of the User Managed Identity used to authenticate against the storage account.
        /// 
        /// &gt; **NOTE:** `identity_id` can only be specified when `authentication_type` is `identityBased`. It must be one of the `identity_ids` of the IoT Hub. If `identity_id` is omitted when `authentication_type` is `identityBased`, then the System-Assigned Managed Identity of the IoT Hub will be used.
        /// </summary>
        [Input("identityId")]
        public Input<string>? IdentityId { get; set; }

        /// <summary>
        /// The ID of the IoT Hub. Changing this forces a new IoT Hub to be created.
        /// </summary>
        [Input("iothubId")]
        public Input<string>? IothubId { get; set; }

        /// <summary>
        /// The lock duration for the file upload notifications queue, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 5 and 300 seconds. Defaults to `PT1M`.
        /// </summary>
        [Input("lockDuration")]
        public Input<string>? LockDuration { get; set; }

        /// <summary>
        /// The number of times the IoT Hub attempts to deliver a file upload notification message. Defaults to `10`.
        /// </summary>
        [Input("maxDeliveryCount")]
        public Input<int>? MaxDeliveryCount { get; set; }

        /// <summary>
        /// Used to specify whether file notifications are sent to IoT Hub on upload. Defaults to `false`.
        /// </summary>
        [Input("notificationsEnabled")]
        public Input<bool>? NotificationsEnabled { get; set; }

        /// <summary>
        /// The period of time for which the SAS URI generated by IoT Hub for file upload is valid, specified as an [ISO 8601 timespan duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). This value must be between 1 minute and 24 hours. Defaults to `PT1H`.
        /// </summary>
        [Input("sasTtl")]
        public Input<string>? SasTtl { get; set; }

        public FileUploadState()
        {
        }
        public static new FileUploadState Empty => new FileUploadState();
    }
}
