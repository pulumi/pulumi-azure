// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Iot
{
    /// <summary>
    /// Manages an Azure IoT Time Series Insights EventHub Event Source.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleEventHubNamespace = new Azure.EventHub.EventHubNamespace("exampleEventHubNamespace", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "Standard",
    ///     });
    /// 
    ///     var exampleEventHub = new Azure.EventHub.EventHub("exampleEventHub", new()
    ///     {
    ///         NamespaceName = exampleEventHubNamespace.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         PartitionCount = 2,
    ///         MessageRetention = 7,
    ///     });
    /// 
    ///     var exampleConsumerGroup = new Azure.EventHub.ConsumerGroup("exampleConsumerGroup", new()
    ///     {
    ///         NamespaceName = exampleEventHubNamespace.Name,
    ///         EventhubName = exampleEventHub.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleAuthorizationRule = new Azure.EventHub.AuthorizationRule("exampleAuthorizationRule", new()
    ///     {
    ///         NamespaceName = exampleEventHubNamespace.Name,
    ///         EventhubName = exampleEventHub.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Listen = true,
    ///         Send = false,
    ///         Manage = false,
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleTimeSeriesInsightsGen2Environment = new Azure.Iot.TimeSeriesInsightsGen2Environment("exampleTimeSeriesInsightsGen2Environment", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         SkuName = "L1",
    ///         IdProperties = new[]
    ///         {
    ///             "id",
    ///         },
    ///         Storage = new Azure.Iot.Inputs.TimeSeriesInsightsGen2EnvironmentStorageArgs
    ///         {
    ///             Name = exampleAccount.Name,
    ///             Key = exampleAccount.PrimaryAccessKey,
    ///         },
    ///     });
    /// 
    ///     var exampleTimeSeriesInsightsEventSourceEventhub = new Azure.Iot.TimeSeriesInsightsEventSourceEventhub("exampleTimeSeriesInsightsEventSourceEventhub", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         EnvironmentId = exampleTimeSeriesInsightsGen2Environment.Id,
    ///         EventhubName = exampleEventHub.Name,
    ///         NamespaceName = exampleEventHubNamespace.Name,
    ///         SharedAccessKey = exampleAuthorizationRule.PrimaryKey,
    ///         SharedAccessKeyName = exampleAuthorizationRule.Name,
    ///         ConsumerGroupName = exampleConsumerGroup.Name,
    ///         EventSourceResourceId = exampleEventHub.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Azure IoT Time Series Insights EventHub Event Source can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:iot/timeSeriesInsightsEventSourceEventhub:TimeSeriesInsightsEventSourceEventhub example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.TimeSeriesInsights/environments/environment1/eventSources/example
    /// ```
    /// </summary>
    [AzureResourceType("azure:iot/timeSeriesInsightsEventSourceEventhub:TimeSeriesInsightsEventSourceEventhub")]
    public partial class TimeSeriesInsightsEventSourceEventhub : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the name of the EventHub Consumer Group that holds the partitions from which events will be read.
        /// </summary>
        [Output("consumerGroupName")]
        public Output<string> ConsumerGroupName { get; private set; } = null!;

        /// <summary>
        /// Specifies the id of the IoT Time Series Insights Environment that the Event Source should be associated with. Changing this forces a new resource to created.
        /// </summary>
        [Output("environmentId")]
        public Output<string> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// Specifies the resource id where events will be coming from.
        /// </summary>
        [Output("eventSourceResourceId")]
        public Output<string> EventSourceResourceId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the EventHub which will be associated with this resource.
        /// </summary>
        [Output("eventhubName")]
        public Output<string> EventhubName { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Azure IoT Time Series Insights EventHub Event Source. Changing this forces a new resource to be created. Must be globally unique.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the EventHub Namespace name.
        /// </summary>
        [Output("namespaceName")]
        public Output<string> NamespaceName { get; private set; } = null!;

        /// <summary>
        /// Specifies the value of the Shared Access Policy key that grants the Time Series Insights service read access to the EventHub.
        /// </summary>
        [Output("sharedAccessKey")]
        public Output<string> SharedAccessKey { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Shared Access key that grants the Event Source access to the EventHub.
        /// </summary>
        [Output("sharedAccessKeyName")]
        public Output<string> SharedAccessKeyName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the value that will be used as the event source's timestamp. This value defaults to the event creation time.
        /// </summary>
        [Output("timestampPropertyName")]
        public Output<string> TimestampPropertyName { get; private set; } = null!;


        /// <summary>
        /// Create a TimeSeriesInsightsEventSourceEventhub resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TimeSeriesInsightsEventSourceEventhub(string name, TimeSeriesInsightsEventSourceEventhubArgs args, CustomResourceOptions? options = null)
            : base("azure:iot/timeSeriesInsightsEventSourceEventhub:TimeSeriesInsightsEventSourceEventhub", name, args ?? new TimeSeriesInsightsEventSourceEventhubArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TimeSeriesInsightsEventSourceEventhub(string name, Input<string> id, TimeSeriesInsightsEventSourceEventhubState? state = null, CustomResourceOptions? options = null)
            : base("azure:iot/timeSeriesInsightsEventSourceEventhub:TimeSeriesInsightsEventSourceEventhub", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "sharedAccessKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TimeSeriesInsightsEventSourceEventhub resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TimeSeriesInsightsEventSourceEventhub Get(string name, Input<string> id, TimeSeriesInsightsEventSourceEventhubState? state = null, CustomResourceOptions? options = null)
        {
            return new TimeSeriesInsightsEventSourceEventhub(name, id, state, options);
        }
    }

    public sealed class TimeSeriesInsightsEventSourceEventhubArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the EventHub Consumer Group that holds the partitions from which events will be read.
        /// </summary>
        [Input("consumerGroupName", required: true)]
        public Input<string> ConsumerGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the id of the IoT Time Series Insights Environment that the Event Source should be associated with. Changing this forces a new resource to created.
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        /// <summary>
        /// Specifies the resource id where events will be coming from.
        /// </summary>
        [Input("eventSourceResourceId", required: true)]
        public Input<string> EventSourceResourceId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the EventHub which will be associated with this resource.
        /// </summary>
        [Input("eventhubName", required: true)]
        public Input<string> EventhubName { get; set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Azure IoT Time Series Insights EventHub Event Source. Changing this forces a new resource to be created. Must be globally unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the EventHub Namespace name.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        [Input("sharedAccessKey", required: true)]
        private Input<string>? _sharedAccessKey;

        /// <summary>
        /// Specifies the value of the Shared Access Policy key that grants the Time Series Insights service read access to the EventHub.
        /// </summary>
        public Input<string>? SharedAccessKey
        {
            get => _sharedAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sharedAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the name of the Shared Access key that grants the Event Source access to the EventHub.
        /// </summary>
        [Input("sharedAccessKeyName", required: true)]
        public Input<string> SharedAccessKeyName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the value that will be used as the event source's timestamp. This value defaults to the event creation time.
        /// </summary>
        [Input("timestampPropertyName")]
        public Input<string>? TimestampPropertyName { get; set; }

        public TimeSeriesInsightsEventSourceEventhubArgs()
        {
        }
        public static new TimeSeriesInsightsEventSourceEventhubArgs Empty => new TimeSeriesInsightsEventSourceEventhubArgs();
    }

    public sealed class TimeSeriesInsightsEventSourceEventhubState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the EventHub Consumer Group that holds the partitions from which events will be read.
        /// </summary>
        [Input("consumerGroupName")]
        public Input<string>? ConsumerGroupName { get; set; }

        /// <summary>
        /// Specifies the id of the IoT Time Series Insights Environment that the Event Source should be associated with. Changing this forces a new resource to created.
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        /// <summary>
        /// Specifies the resource id where events will be coming from.
        /// </summary>
        [Input("eventSourceResourceId")]
        public Input<string>? EventSourceResourceId { get; set; }

        /// <summary>
        /// Specifies the name of the EventHub which will be associated with this resource.
        /// </summary>
        [Input("eventhubName")]
        public Input<string>? EventhubName { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Azure IoT Time Series Insights EventHub Event Source. Changing this forces a new resource to be created. Must be globally unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the EventHub Namespace name.
        /// </summary>
        [Input("namespaceName")]
        public Input<string>? NamespaceName { get; set; }

        [Input("sharedAccessKey")]
        private Input<string>? _sharedAccessKey;

        /// <summary>
        /// Specifies the value of the Shared Access Policy key that grants the Time Series Insights service read access to the EventHub.
        /// </summary>
        public Input<string>? SharedAccessKey
        {
            get => _sharedAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sharedAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the name of the Shared Access key that grants the Event Source access to the EventHub.
        /// </summary>
        [Input("sharedAccessKeyName")]
        public Input<string>? SharedAccessKeyName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the value that will be used as the event source's timestamp. This value defaults to the event creation time.
        /// </summary>
        [Input("timestampPropertyName")]
        public Input<string>? TimestampPropertyName { get; set; }

        public TimeSeriesInsightsEventSourceEventhubState()
        {
        }
        public static new TimeSeriesInsightsEventSourceEventhubState Empty => new TimeSeriesInsightsEventSourceEventhubState();
    }
}
