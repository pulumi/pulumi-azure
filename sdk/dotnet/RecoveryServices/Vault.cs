// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.RecoveryServices
{
    /// <summary>
    /// Manages a Recovery Services Vault.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var vault = new Azure.RecoveryServices.Vault("vault", new()
    ///     {
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         Sku = "Standard",
    ///         SoftDeleteEnabled = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Recovery Services Vaults can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:recoveryservices/vault:Vault vault1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.RecoveryServices/vaults/vault1
    /// ```
    /// </summary>
    [AzureResourceType("azure:recoveryservices/vault:Vault")]
    public partial class Vault : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to enable the Classic experience for VMware replication. If set to `false` VMware machines will be protected using the new stateless ASR replication appliance. Changing this forces a new resource to be created.
        /// </summary>
        [Output("classicVmwareReplicationEnabled")]
        public Output<bool> ClassicVmwareReplicationEnabled { get; private set; } = null!;

        /// <summary>
        /// Is cross region restore enabled for this Vault? Only can be `true`, when `storage_mode_type` is `GeoRedundant`. Defaults to `false`.
        /// 
        /// &gt; **Note:** Once `cross_region_restore_enabled` is set to `true`, changing it back to `false` forces a new Recovery Service Vault to be created.
        /// </summary>
        [Output("crossRegionRestoreEnabled")]
        public Output<bool?> CrossRegionRestoreEnabled { get; private set; } = null!;

        /// <summary>
        /// An `encryption` block as defined below. Required with `identity`.
        /// 
        /// !&gt; **Note:** Once Encryption with your own key has been Enabled it's not possible to Disable it.
        /// </summary>
        [Output("encryption")]
        public Output<Outputs.VaultEncryption?> Encryption { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.VaultIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Immutability Settings of vault, possible values include: `Locked`, `Unlocked` and `Disabled`.
        /// 
        /// &gt; **Note:** Once `immutability` is set to `Locked`, changing it to other values forces a new Recovery Services Vault to be created.
        /// </summary>
        [Output("immutability")]
        public Output<string> Immutability { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A `monitoring` block as defined below.
        /// </summary>
        [Output("monitoring")]
        public Output<Outputs.VaultMonitoring?> Monitoring { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Is it enabled to access the vault from public networks. Defaults to `true`.
        /// </summary>
        [Output("publicNetworkAccessEnabled")]
        public Output<bool?> PublicNetworkAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Sets the vault's SKU. Possible values include: `Standard`, `RS0`.
        /// </summary>
        [Output("sku")]
        public Output<string> Sku { get; private set; } = null!;

        /// <summary>
        /// Is soft delete enable for this Vault? Defaults to `true`.
        /// </summary>
        [Output("softDeleteEnabled")]
        public Output<bool?> SoftDeleteEnabled { get; private set; } = null!;

        /// <summary>
        /// The storage type of the Recovery Services Vault. Possible values are `GeoRedundant`, `LocallyRedundant` and `ZoneRedundant`. Defaults to `GeoRedundant`.
        /// </summary>
        [Output("storageModeType")]
        public Output<string?> StorageModeType { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Vault resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vault(string name, VaultArgs args, CustomResourceOptions? options = null)
            : base("azure:recoveryservices/vault:Vault", name, args ?? new VaultArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Vault(string name, Input<string> id, VaultState? state = null, CustomResourceOptions? options = null)
            : base("azure:recoveryservices/vault:Vault", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vault resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vault Get(string name, Input<string> id, VaultState? state = null, CustomResourceOptions? options = null)
        {
            return new Vault(name, id, state, options);
        }
    }

    public sealed class VaultArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable the Classic experience for VMware replication. If set to `false` VMware machines will be protected using the new stateless ASR replication appliance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("classicVmwareReplicationEnabled")]
        public Input<bool>? ClassicVmwareReplicationEnabled { get; set; }

        /// <summary>
        /// Is cross region restore enabled for this Vault? Only can be `true`, when `storage_mode_type` is `GeoRedundant`. Defaults to `false`.
        /// 
        /// &gt; **Note:** Once `cross_region_restore_enabled` is set to `true`, changing it back to `false` forces a new Recovery Service Vault to be created.
        /// </summary>
        [Input("crossRegionRestoreEnabled")]
        public Input<bool>? CrossRegionRestoreEnabled { get; set; }

        /// <summary>
        /// An `encryption` block as defined below. Required with `identity`.
        /// 
        /// !&gt; **Note:** Once Encryption with your own key has been Enabled it's not possible to Disable it.
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.VaultEncryptionArgs>? Encryption { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.VaultIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Immutability Settings of vault, possible values include: `Locked`, `Unlocked` and `Disabled`.
        /// 
        /// &gt; **Note:** Once `immutability` is set to `Locked`, changing it to other values forces a new Recovery Services Vault to be created.
        /// </summary>
        [Input("immutability")]
        public Input<string>? Immutability { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A `monitoring` block as defined below.
        /// </summary>
        [Input("monitoring")]
        public Input<Inputs.VaultMonitoringArgs>? Monitoring { get; set; }

        /// <summary>
        /// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Is it enabled to access the vault from public networks. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Sets the vault's SKU. Possible values include: `Standard`, `RS0`.
        /// </summary>
        [Input("sku", required: true)]
        public Input<string> Sku { get; set; } = null!;

        /// <summary>
        /// Is soft delete enable for this Vault? Defaults to `true`.
        /// </summary>
        [Input("softDeleteEnabled")]
        public Input<bool>? SoftDeleteEnabled { get; set; }

        /// <summary>
        /// The storage type of the Recovery Services Vault. Possible values are `GeoRedundant`, `LocallyRedundant` and `ZoneRedundant`. Defaults to `GeoRedundant`.
        /// </summary>
        [Input("storageModeType")]
        public Input<string>? StorageModeType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public VaultArgs()
        {
        }
        public static new VaultArgs Empty => new VaultArgs();
    }

    public sealed class VaultState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable the Classic experience for VMware replication. If set to `false` VMware machines will be protected using the new stateless ASR replication appliance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("classicVmwareReplicationEnabled")]
        public Input<bool>? ClassicVmwareReplicationEnabled { get; set; }

        /// <summary>
        /// Is cross region restore enabled for this Vault? Only can be `true`, when `storage_mode_type` is `GeoRedundant`. Defaults to `false`.
        /// 
        /// &gt; **Note:** Once `cross_region_restore_enabled` is set to `true`, changing it back to `false` forces a new Recovery Service Vault to be created.
        /// </summary>
        [Input("crossRegionRestoreEnabled")]
        public Input<bool>? CrossRegionRestoreEnabled { get; set; }

        /// <summary>
        /// An `encryption` block as defined below. Required with `identity`.
        /// 
        /// !&gt; **Note:** Once Encryption with your own key has been Enabled it's not possible to Disable it.
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.VaultEncryptionGetArgs>? Encryption { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.VaultIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Immutability Settings of vault, possible values include: `Locked`, `Unlocked` and `Disabled`.
        /// 
        /// &gt; **Note:** Once `immutability` is set to `Locked`, changing it to other values forces a new Recovery Services Vault to be created.
        /// </summary>
        [Input("immutability")]
        public Input<string>? Immutability { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A `monitoring` block as defined below.
        /// </summary>
        [Input("monitoring")]
        public Input<Inputs.VaultMonitoringGetArgs>? Monitoring { get; set; }

        /// <summary>
        /// Specifies the name of the Recovery Services Vault. Recovery Service Vault name must be 2 - 50 characters long, start with a letter, contain only letters, numbers and hyphens. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Is it enabled to access the vault from public networks. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Recovery Services Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Sets the vault's SKU. Possible values include: `Standard`, `RS0`.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        /// <summary>
        /// Is soft delete enable for this Vault? Defaults to `true`.
        /// </summary>
        [Input("softDeleteEnabled")]
        public Input<bool>? SoftDeleteEnabled { get; set; }

        /// <summary>
        /// The storage type of the Recovery Services Vault. Possible values are `GeoRedundant`, `LocallyRedundant` and `ZoneRedundant`. Defaults to `GeoRedundant`.
        /// </summary>
        [Input("storageModeType")]
        public Input<string>? StorageModeType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public VaultState()
        {
        }
        public static new VaultState Empty => new VaultState();
    }
}
