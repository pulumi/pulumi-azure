// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.StreamAnalytics
{
    /// <summary>
    /// Manages a Stream Analytics Output to CosmosDB.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleJob = Azure.StreamAnalytics.GetJob.Invoke(new()
    ///     {
    ///         Name = "example-job",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleAccount = new Azure.CosmosDB.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         OfferType = "Standard",
    ///         Kind = "GlobalDocumentDB",
    ///         ConsistencyPolicy = new Azure.CosmosDB.Inputs.AccountConsistencyPolicyArgs
    ///         {
    ///             ConsistencyLevel = "BoundedStaleness",
    ///             MaxIntervalInSeconds = 10,
    ///             MaxStalenessPrefix = 200,
    ///         },
    ///         GeoLocations = new[]
    ///         {
    ///             new Azure.CosmosDB.Inputs.AccountGeoLocationArgs
    ///             {
    ///                 Location = exampleResourceGroup.Location,
    ///                 FailoverPriority = 0,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleSqlDatabase = new Azure.CosmosDB.SqlDatabase("exampleSqlDatabase", new()
    ///     {
    ///         ResourceGroupName = exampleAccount.ResourceGroupName,
    ///         AccountName = exampleAccount.Name,
    ///         Throughput = 400,
    ///     });
    /// 
    ///     var exampleSqlContainer = new Azure.CosmosDB.SqlContainer("exampleSqlContainer", new()
    ///     {
    ///         ResourceGroupName = exampleAccount.ResourceGroupName,
    ///         AccountName = exampleAccount.Name,
    ///         DatabaseName = exampleSqlDatabase.Name,
    ///         PartitionKeyPath = "foo",
    ///     });
    /// 
    ///     var exampleOutputCosmosdb = new Azure.StreamAnalytics.OutputCosmosdb("exampleOutputCosmosdb", new()
    ///     {
    ///         StreamAnalyticsJobId = exampleJob.Apply(getJobResult =&gt; getJobResult.Id),
    ///         CosmosdbAccountKey = exampleAccount.PrimaryKey,
    ///         CosmosdbSqlDatabaseId = exampleSqlDatabase.Id,
    ///         ContainerName = exampleSqlContainer.Name,
    ///         DocumentId = "exampledocumentid",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Stream Analytics Outputs for CosmosDB can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:streamanalytics/outputCosmosdb:OutputCosmosdb example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StreamAnalytics/streamingJobs/job1/outputs/output1
    /// ```
    /// </summary>
    [AzureResourceType("azure:streamanalytics/outputCosmosdb:OutputCosmosdb")]
    public partial class OutputCosmosdb : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the CosmosDB container.
        /// </summary>
        [Output("containerName")]
        public Output<string> ContainerName { get; private set; } = null!;

        /// <summary>
        /// The account key for the CosmosDB database.
        /// </summary>
        [Output("cosmosdbAccountKey")]
        public Output<string> CosmosdbAccountKey { get; private set; } = null!;

        /// <summary>
        /// The ID of the CosmosDB database.
        /// </summary>
        [Output("cosmosdbSqlDatabaseId")]
        public Output<string> CosmosdbSqlDatabaseId { get; private set; } = null!;

        /// <summary>
        /// The name of the field in output events used to specify the primary key which insert or update operations are based on.
        /// </summary>
        [Output("documentId")]
        public Output<string?> DocumentId { get; private set; } = null!;

        /// <summary>
        /// The name of the Stream Analytics Output. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the field in output events used to specify the key for partitioning output across collections. If `container_name` contains `{partition}` token, this property is required to be specified.
        /// </summary>
        [Output("partitionKey")]
        public Output<string?> PartitionKey { get; private set; } = null!;

        /// <summary>
        /// The ID of the Stream Analytics Job. Changing this forces a new resource to be created.
        /// </summary>
        [Output("streamAnalyticsJobId")]
        public Output<string> StreamAnalyticsJobId { get; private set; } = null!;


        /// <summary>
        /// Create a OutputCosmosdb resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OutputCosmosdb(string name, OutputCosmosdbArgs args, CustomResourceOptions? options = null)
            : base("azure:streamanalytics/outputCosmosdb:OutputCosmosdb", name, args ?? new OutputCosmosdbArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OutputCosmosdb(string name, Input<string> id, OutputCosmosdbState? state = null, CustomResourceOptions? options = null)
            : base("azure:streamanalytics/outputCosmosdb:OutputCosmosdb", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "cosmosdbAccountKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OutputCosmosdb resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OutputCosmosdb Get(string name, Input<string> id, OutputCosmosdbState? state = null, CustomResourceOptions? options = null)
        {
            return new OutputCosmosdb(name, id, state, options);
        }
    }

    public sealed class OutputCosmosdbArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the CosmosDB container.
        /// </summary>
        [Input("containerName", required: true)]
        public Input<string> ContainerName { get; set; } = null!;

        [Input("cosmosdbAccountKey", required: true)]
        private Input<string>? _cosmosdbAccountKey;

        /// <summary>
        /// The account key for the CosmosDB database.
        /// </summary>
        public Input<string>? CosmosdbAccountKey
        {
            get => _cosmosdbAccountKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _cosmosdbAccountKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of the CosmosDB database.
        /// </summary>
        [Input("cosmosdbSqlDatabaseId", required: true)]
        public Input<string> CosmosdbSqlDatabaseId { get; set; } = null!;

        /// <summary>
        /// The name of the field in output events used to specify the primary key which insert or update operations are based on.
        /// </summary>
        [Input("documentId")]
        public Input<string>? DocumentId { get; set; }

        /// <summary>
        /// The name of the Stream Analytics Output. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the field in output events used to specify the key for partitioning output across collections. If `container_name` contains `{partition}` token, this property is required to be specified.
        /// </summary>
        [Input("partitionKey")]
        public Input<string>? PartitionKey { get; set; }

        /// <summary>
        /// The ID of the Stream Analytics Job. Changing this forces a new resource to be created.
        /// </summary>
        [Input("streamAnalyticsJobId", required: true)]
        public Input<string> StreamAnalyticsJobId { get; set; } = null!;

        public OutputCosmosdbArgs()
        {
        }
        public static new OutputCosmosdbArgs Empty => new OutputCosmosdbArgs();
    }

    public sealed class OutputCosmosdbState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the CosmosDB container.
        /// </summary>
        [Input("containerName")]
        public Input<string>? ContainerName { get; set; }

        [Input("cosmosdbAccountKey")]
        private Input<string>? _cosmosdbAccountKey;

        /// <summary>
        /// The account key for the CosmosDB database.
        /// </summary>
        public Input<string>? CosmosdbAccountKey
        {
            get => _cosmosdbAccountKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _cosmosdbAccountKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of the CosmosDB database.
        /// </summary>
        [Input("cosmosdbSqlDatabaseId")]
        public Input<string>? CosmosdbSqlDatabaseId { get; set; }

        /// <summary>
        /// The name of the field in output events used to specify the primary key which insert or update operations are based on.
        /// </summary>
        [Input("documentId")]
        public Input<string>? DocumentId { get; set; }

        /// <summary>
        /// The name of the Stream Analytics Output. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the field in output events used to specify the key for partitioning output across collections. If `container_name` contains `{partition}` token, this property is required to be specified.
        /// </summary>
        [Input("partitionKey")]
        public Input<string>? PartitionKey { get; set; }

        /// <summary>
        /// The ID of the Stream Analytics Job. Changing this forces a new resource to be created.
        /// </summary>
        [Input("streamAnalyticsJobId")]
        public Input<string>? StreamAnalyticsJobId { get; set; }

        public OutputCosmosdbState()
        {
        }
        public static new OutputCosmosdbState Empty => new OutputCosmosdbState();
    }
}
