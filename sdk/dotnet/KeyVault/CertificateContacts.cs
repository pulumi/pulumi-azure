// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault
{
    /// <summary>
    /// Manages Key Vault Certificate Contacts.
    /// 
    /// ## Disclaimers
    /// 
    /// &gt; **Note:** It's possible to define Key Vault Certificate Contacts both within the `azure.keyvault.KeyVault` resource via the `contact` block and by using the `azure.keyvault.CertificateContacts` resource. However it's not possible to use both methods to manage Certificate Contacts within a KeyVault, since there'll be conflicts.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("exampleKeyVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SkuName = "premium",
    ///     });
    /// 
    ///     var exampleAccessPolicy = new Azure.KeyVault.AccessPolicy("exampleAccessPolicy", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///         CertificatePermissions = new[]
    ///         {
    ///             "ManageContacts",
    ///         },
    ///         KeyPermissions = new[]
    ///         {
    ///             "Create",
    ///         },
    ///         SecretPermissions = new[]
    ///         {
    ///             "Set",
    ///         },
    ///     });
    /// 
    ///     var exampleCertificateContacts = new Azure.KeyVault.CertificateContacts("exampleCertificateContacts", new()
    ///     {
    ///         KeyVaultId = azurerm_key_vault.Test.Id,
    ///         Contacts = new[]
    ///         {
    ///             new Azure.KeyVault.Inputs.CertificateContactsContactArgs
    ///             {
    ///                 Email = "example@example.com",
    ///                 Name = "example",
    ///                 Phone = "01234567890",
    ///             },
    ///             new Azure.KeyVault.Inputs.CertificateContactsContactArgs
    ///             {
    ///                 Email = "example2@example.com",
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleAccessPolicy,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Key Vault Certificate Contacts can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:keyvault/certificateContacts:CertificateContacts example https://example-keyvault.vault.azure.net/certificates/contacts
    /// ```
    /// </summary>
    [AzureResourceType("azure:keyvault/certificateContacts:CertificateContacts")]
    public partial class CertificateContacts : global::Pulumi.CustomResource
    {
        /// <summary>
        /// One or more `contact` blocks as defined below.
        /// </summary>
        [Output("contacts")]
        public Output<ImmutableArray<Outputs.CertificateContactsContact>> Contacts { get; private set; } = null!;

        /// <summary>
        /// The ID of the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Output("keyVaultId")]
        public Output<string> KeyVaultId { get; private set; } = null!;


        /// <summary>
        /// Create a CertificateContacts resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificateContacts(string name, CertificateContactsArgs args, CustomResourceOptions? options = null)
            : base("azure:keyvault/certificateContacts:CertificateContacts", name, args ?? new CertificateContactsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CertificateContacts(string name, Input<string> id, CertificateContactsState? state = null, CustomResourceOptions? options = null)
            : base("azure:keyvault/certificateContacts:CertificateContacts", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificateContacts resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificateContacts Get(string name, Input<string> id, CertificateContactsState? state = null, CustomResourceOptions? options = null)
        {
            return new CertificateContacts(name, id, state, options);
        }
    }

    public sealed class CertificateContactsArgs : global::Pulumi.ResourceArgs
    {
        [Input("contacts", required: true)]
        private InputList<Inputs.CertificateContactsContactArgs>? _contacts;

        /// <summary>
        /// One or more `contact` blocks as defined below.
        /// </summary>
        public InputList<Inputs.CertificateContactsContactArgs> Contacts
        {
            get => _contacts ?? (_contacts = new InputList<Inputs.CertificateContactsContactArgs>());
            set => _contacts = value;
        }

        /// <summary>
        /// The ID of the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("keyVaultId", required: true)]
        public Input<string> KeyVaultId { get; set; } = null!;

        public CertificateContactsArgs()
        {
        }
        public static new CertificateContactsArgs Empty => new CertificateContactsArgs();
    }

    public sealed class CertificateContactsState : global::Pulumi.ResourceArgs
    {
        [Input("contacts")]
        private InputList<Inputs.CertificateContactsContactGetArgs>? _contacts;

        /// <summary>
        /// One or more `contact` blocks as defined below.
        /// </summary>
        public InputList<Inputs.CertificateContactsContactGetArgs> Contacts
        {
            get => _contacts ?? (_contacts = new InputList<Inputs.CertificateContactsContactGetArgs>());
            set => _contacts = value;
        }

        /// <summary>
        /// The ID of the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("keyVaultId")]
        public Input<string>? KeyVaultId { get; set; }

        public CertificateContactsState()
        {
        }
        public static new CertificateContactsState Empty => new CertificateContactsState();
    }
}
