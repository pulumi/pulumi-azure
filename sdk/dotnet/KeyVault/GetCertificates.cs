// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault
{
    public static class GetCertificates
    {
        /// <summary>
        /// Use this data source to retrieve a list of certificate names from an existing Key Vault.
        /// </summary>
        public static Task<GetCertificatesResult> InvokeAsync(GetCertificatesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificatesResult>("azure:keyvault/getCertificates:getCertificates", args ?? new GetCertificatesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve a list of certificate names from an existing Key Vault.
        /// </summary>
        public static Output<GetCertificatesResult> Invoke(GetCertificatesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificatesResult>("azure:keyvault/getCertificates:getCertificates", args ?? new GetCertificatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificatesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies whether to include certificates which are not completely provisioned. Defaults to true.
        /// </summary>
        [Input("includePending")]
        public bool? IncludePending { get; set; }

        /// <summary>
        /// Specifies the ID of the Key Vault instance to fetch certificate names from, available on the `azure.keyvault.KeyVault` Data Source / Resource.
        /// </summary>
        [Input("keyVaultId", required: true)]
        public string KeyVaultId { get; set; } = null!;

        public GetCertificatesArgs()
        {
        }
        public static new GetCertificatesArgs Empty => new GetCertificatesArgs();
    }

    public sealed class GetCertificatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies whether to include certificates which are not completely provisioned. Defaults to true.
        /// </summary>
        [Input("includePending")]
        public Input<bool>? IncludePending { get; set; }

        /// <summary>
        /// Specifies the ID of the Key Vault instance to fetch certificate names from, available on the `azure.keyvault.KeyVault` Data Source / Resource.
        /// </summary>
        [Input("keyVaultId", required: true)]
        public Input<string> KeyVaultId { get; set; } = null!;

        public GetCertificatesInvokeArgs()
        {
        }
        public static new GetCertificatesInvokeArgs Empty => new GetCertificatesInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificatesResult
    {
        /// <summary>
        /// One or more `certificates` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificatesCertificateResult> Certificates;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IncludePending;
        /// <summary>
        /// The Key Vault ID.
        /// </summary>
        public readonly string KeyVaultId;
        /// <summary>
        /// List containing names of certificates that exist in this Key Vault.
        /// </summary>
        public readonly ImmutableArray<string> Names;

        [OutputConstructor]
        private GetCertificatesResult(
            ImmutableArray<Outputs.GetCertificatesCertificateResult> certificates,

            string id,

            bool? includePending,

            string keyVaultId,

            ImmutableArray<string> names)
        {
            Certificates = certificates;
            Id = id;
            IncludePending = includePending;
            KeyVaultId = keyVaultId;
            Names = names;
        }
    }
}
