// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault
{
    public static class GetEncryptedValue
    {
        /// <summary>
        /// Encrypts or Decrypts a value using a Key Vault Key.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleKeyVault = Azure.KeyVault.GetKeyVault.Invoke(new()
        ///     {
        ///         Name = "mykeyvault",
        ///         ResourceGroupName = "some-resource-group",
        ///     });
        /// 
        ///     var exampleKey = Azure.KeyVault.GetKey.Invoke(new()
        ///     {
        ///         Name = "some-key",
        ///         KeyVaultId = exampleKeyVault.Apply(getKeyVaultResult =&gt; getKeyVaultResult.Id),
        ///     });
        /// 
        ///     var encrypted = Azure.KeyVault.GetEncryptedValue.Invoke(new()
        ///     {
        ///         KeyVaultKeyId = azurerm_key_vault_key.Test.Id,
        ///         Algorithm = "RSA1_5",
        ///         PlainTextValue = "some-encrypted-value",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = data.Azurerm_key_vault_encrypted_value.Example.Encrypted_data,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEncryptedValueResult> InvokeAsync(GetEncryptedValueArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEncryptedValueResult>("azure:keyvault/getEncryptedValue:getEncryptedValue", args ?? new GetEncryptedValueArgs(), options.WithDefaults());

        /// <summary>
        /// Encrypts or Decrypts a value using a Key Vault Key.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleKeyVault = Azure.KeyVault.GetKeyVault.Invoke(new()
        ///     {
        ///         Name = "mykeyvault",
        ///         ResourceGroupName = "some-resource-group",
        ///     });
        /// 
        ///     var exampleKey = Azure.KeyVault.GetKey.Invoke(new()
        ///     {
        ///         Name = "some-key",
        ///         KeyVaultId = exampleKeyVault.Apply(getKeyVaultResult =&gt; getKeyVaultResult.Id),
        ///     });
        /// 
        ///     var encrypted = Azure.KeyVault.GetEncryptedValue.Invoke(new()
        ///     {
        ///         KeyVaultKeyId = azurerm_key_vault_key.Test.Id,
        ///         Algorithm = "RSA1_5",
        ///         PlainTextValue = "some-encrypted-value",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = data.Azurerm_key_vault_encrypted_value.Example.Encrypted_data,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetEncryptedValueResult> Invoke(GetEncryptedValueInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEncryptedValueResult>("azure:keyvault/getEncryptedValue:getEncryptedValue", args ?? new GetEncryptedValueInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEncryptedValueArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Algorithm which should be used to Decrypt/Encrypt this Value. Possible values are `RSA1_5`, `RSA-OAEP` and `RSA-OAEP-256`.
        /// </summary>
        [Input("algorithm", required: true)]
        public string Algorithm { get; set; } = null!;

        /// <summary>
        /// The Base64 URL Encoded Encrypted Data which should be decrypted into `plain_text_value`.
        /// </summary>
        [Input("encryptedData")]
        public string? EncryptedData { get; set; }

        /// <summary>
        /// The ID of the Key Vault Key which should be used to Decrypt/Encrypt this Value.
        /// </summary>
        [Input("keyVaultKeyId", required: true)]
        public string KeyVaultKeyId { get; set; } = null!;

        /// <summary>
        /// The plain-text value which should be Encrypted into `encrypted_data`.
        /// </summary>
        [Input("plainTextValue")]
        public string? PlainTextValue { get; set; }

        public GetEncryptedValueArgs()
        {
        }
        public static new GetEncryptedValueArgs Empty => new GetEncryptedValueArgs();
    }

    public sealed class GetEncryptedValueInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Algorithm which should be used to Decrypt/Encrypt this Value. Possible values are `RSA1_5`, `RSA-OAEP` and `RSA-OAEP-256`.
        /// </summary>
        [Input("algorithm", required: true)]
        public Input<string> Algorithm { get; set; } = null!;

        /// <summary>
        /// The Base64 URL Encoded Encrypted Data which should be decrypted into `plain_text_value`.
        /// </summary>
        [Input("encryptedData")]
        public Input<string>? EncryptedData { get; set; }

        /// <summary>
        /// The ID of the Key Vault Key which should be used to Decrypt/Encrypt this Value.
        /// </summary>
        [Input("keyVaultKeyId", required: true)]
        public Input<string> KeyVaultKeyId { get; set; } = null!;

        /// <summary>
        /// The plain-text value which should be Encrypted into `encrypted_data`.
        /// </summary>
        [Input("plainTextValue")]
        public Input<string>? PlainTextValue { get; set; }

        public GetEncryptedValueInvokeArgs()
        {
        }
        public static new GetEncryptedValueInvokeArgs Empty => new GetEncryptedValueInvokeArgs();
    }


    [OutputType]
    public sealed class GetEncryptedValueResult
    {
        public readonly string Algorithm;
        public readonly string? EncryptedData;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KeyVaultKeyId;
        public readonly string? PlainTextValue;

        [OutputConstructor]
        private GetEncryptedValueResult(
            string algorithm,

            string? encryptedData,

            string id,

            string keyVaultKeyId,

            string? plainTextValue)
        {
            Algorithm = algorithm;
            EncryptedData = encryptedData;
            Id = id;
            KeyVaultKeyId = keyVaultKeyId;
            PlainTextValue = plainTextValue;
        }
    }
}
