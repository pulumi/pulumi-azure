// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault
{
    public static class GetEncryptedValue
    {
        /// <summary>
        /// Encrypts or Decrypts a value using a Key Vault Key.
        /// </summary>
        public static Task<GetEncryptedValueResult> InvokeAsync(GetEncryptedValueArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEncryptedValueResult>("azure:keyvault/getEncryptedValue:getEncryptedValue", args ?? new GetEncryptedValueArgs(), options.WithDefaults());

        /// <summary>
        /// Encrypts or Decrypts a value using a Key Vault Key.
        /// </summary>
        public static Output<GetEncryptedValueResult> Invoke(GetEncryptedValueInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEncryptedValueResult>("azure:keyvault/getEncryptedValue:getEncryptedValue", args ?? new GetEncryptedValueInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEncryptedValueArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Algorithm which should be used to Decrypt/Encrypt this Value. Possible values are `RSA1_5`, `RSA-OAEP` and `RSA-OAEP-256`.
        /// </summary>
        [Input("algorithm", required: true)]
        public string Algorithm { get; set; } = null!;

        [Input("encryptedData")]
        private string? _encryptedData;

        /// <summary>
        /// The Base64 URL Encoded Encrypted Data which should be decrypted into `plain_text_value`.
        /// </summary>
        public string? EncryptedData
        {
            get => _encryptedData;
            set => _encryptedData = value;
        }

        /// <summary>
        /// The ID of the Key Vault Key which should be used to Decrypt/Encrypt this Value.
        /// </summary>
        [Input("keyVaultKeyId", required: true)]
        public string KeyVaultKeyId { get; set; } = null!;

        [Input("plainTextValue")]
        private string? _plainTextValue;

        /// <summary>
        /// The plain-text value which should be Encrypted into `encrypted_data`.
        /// 
        /// &gt; **Note:** One of either `encrypted_data` or `plain_text_value` must be specified and is used to populate the encrypted/decrypted value for the other field.
        /// </summary>
        public string? PlainTextValue
        {
            get => _plainTextValue;
            set => _plainTextValue = value;
        }

        public GetEncryptedValueArgs()
        {
        }
        public static new GetEncryptedValueArgs Empty => new GetEncryptedValueArgs();
    }

    public sealed class GetEncryptedValueInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Algorithm which should be used to Decrypt/Encrypt this Value. Possible values are `RSA1_5`, `RSA-OAEP` and `RSA-OAEP-256`.
        /// </summary>
        [Input("algorithm", required: true)]
        public Input<string> Algorithm { get; set; } = null!;

        [Input("encryptedData")]
        private Input<string>? _encryptedData;

        /// <summary>
        /// The Base64 URL Encoded Encrypted Data which should be decrypted into `plain_text_value`.
        /// </summary>
        public Input<string>? EncryptedData
        {
            get => _encryptedData;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _encryptedData = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of the Key Vault Key which should be used to Decrypt/Encrypt this Value.
        /// </summary>
        [Input("keyVaultKeyId", required: true)]
        public Input<string> KeyVaultKeyId { get; set; } = null!;

        [Input("plainTextValue")]
        private Input<string>? _plainTextValue;

        /// <summary>
        /// The plain-text value which should be Encrypted into `encrypted_data`.
        /// 
        /// &gt; **Note:** One of either `encrypted_data` or `plain_text_value` must be specified and is used to populate the encrypted/decrypted value for the other field.
        /// </summary>
        public Input<string>? PlainTextValue
        {
            get => _plainTextValue;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _plainTextValue = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public GetEncryptedValueInvokeArgs()
        {
        }
        public static new GetEncryptedValueInvokeArgs Empty => new GetEncryptedValueInvokeArgs();
    }


    [OutputType]
    public sealed class GetEncryptedValueResult
    {
        public readonly string Algorithm;
        /// <summary>
        /// The Base64URL decoded string of `plain_text_value`. Because the API would remove padding characters of `plain_text_value` when encrypting, this attribute is useful to get the original value.
        /// </summary>
        public readonly string DecodedPlainTextValue;
        public readonly string? EncryptedData;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KeyVaultKeyId;
        public readonly string? PlainTextValue;

        [OutputConstructor]
        private GetEncryptedValueResult(
            string algorithm,

            string decodedPlainTextValue,

            string? encryptedData,

            string id,

            string keyVaultKeyId,

            string? plainTextValue)
        {
            Algorithm = algorithm;
            DecodedPlainTextValue = decodedPlainTextValue;
            EncryptedData = encryptedData;
            Id = id;
            KeyVaultKeyId = keyVaultKeyId;
            PlainTextValue = plainTextValue;
        }
    }
}
