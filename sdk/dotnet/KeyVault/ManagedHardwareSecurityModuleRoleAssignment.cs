// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault
{
    /// <summary>
    /// Manages a KeyVault Role Assignment.
    /// 
    /// ## Import
    /// 
    /// KeyVaults can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:keyvault/managedHardwareSecurityModuleRoleAssignment:ManagedHardwareSecurityModuleRoleAssignment example https://0000.managedhsm.azure.net///RoleAssignment/00000000-0000-0000-0000-000000000000
    /// ```
    /// </summary>
    [AzureResourceType("azure:keyvault/managedHardwareSecurityModuleRoleAssignment:ManagedHardwareSecurityModuleRoleAssignment")]
    public partial class ManagedHardwareSecurityModuleRoleAssignment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name in GUID notation which should be used for this KeyVault Role Assignment. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Output("principalId")]
        public Output<string> PrincipalId { get; private set; } = null!;

        /// <summary>
        /// The resource id of created assignment resource.
        /// </summary>
        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the role definition to assign. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Output("roleDefinitionId")]
        public Output<string> RoleDefinitionId { get; private set; } = null!;

        /// <summary>
        /// Specifies the scope to create the role assignment. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;

        /// <summary>
        /// The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Output("vaultBaseUrl")]
        public Output<string> VaultBaseUrl { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedHardwareSecurityModuleRoleAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedHardwareSecurityModuleRoleAssignment(string name, ManagedHardwareSecurityModuleRoleAssignmentArgs args, CustomResourceOptions? options = null)
            : base("azure:keyvault/managedHardwareSecurityModuleRoleAssignment:ManagedHardwareSecurityModuleRoleAssignment", name, args ?? new ManagedHardwareSecurityModuleRoleAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedHardwareSecurityModuleRoleAssignment(string name, Input<string> id, ManagedHardwareSecurityModuleRoleAssignmentState? state = null, CustomResourceOptions? options = null)
            : base("azure:keyvault/managedHardwareSecurityModuleRoleAssignment:ManagedHardwareSecurityModuleRoleAssignment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedHardwareSecurityModuleRoleAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedHardwareSecurityModuleRoleAssignment Get(string name, Input<string> id, ManagedHardwareSecurityModuleRoleAssignmentState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedHardwareSecurityModuleRoleAssignment(name, id, state, options);
        }
    }

    public sealed class ManagedHardwareSecurityModuleRoleAssignmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name in GUID notation which should be used for this KeyVault Role Assignment. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Input("principalId", required: true)]
        public Input<string> PrincipalId { get; set; } = null!;

        /// <summary>
        /// The resource ID of the role definition to assign. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Input("roleDefinitionId", required: true)]
        public Input<string> RoleDefinitionId { get; set; } = null!;

        /// <summary>
        /// Specifies the scope to create the role assignment. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        /// <summary>
        /// The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Input("vaultBaseUrl", required: true)]
        public Input<string> VaultBaseUrl { get; set; } = null!;

        public ManagedHardwareSecurityModuleRoleAssignmentArgs()
        {
        }
        public static new ManagedHardwareSecurityModuleRoleAssignmentArgs Empty => new ManagedHardwareSecurityModuleRoleAssignmentArgs();
    }

    public sealed class ManagedHardwareSecurityModuleRoleAssignmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name in GUID notation which should be used for this KeyVault Role Assignment. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The resource id of created assignment resource.
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// The resource ID of the role definition to assign. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Input("roleDefinitionId")]
        public Input<string>? RoleDefinitionId { get; set; }

        /// <summary>
        /// Specifies the scope to create the role assignment. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new KeyVault to be created.
        /// </summary>
        [Input("vaultBaseUrl")]
        public Input<string>? VaultBaseUrl { get; set; }

        public ManagedHardwareSecurityModuleRoleAssignmentState()
        {
        }
        public static new ManagedHardwareSecurityModuleRoleAssignmentState Empty => new ManagedHardwareSecurityModuleRoleAssignmentState();
    }
}
