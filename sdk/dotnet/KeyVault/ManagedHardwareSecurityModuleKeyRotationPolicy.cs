// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault
{
    /// <summary>
    /// Manages a Managed HSM Key rotation policy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.KeyVault.ManagedHardwareSecurityModuleKey("example", new()
    ///     {
    ///         Name = "example-key",
    ///         ManagedHsmId = exampleAzurermKeyVaultManagedHardwareSecurityModule.Id,
    ///         KeyType = "EC-HSM",
    ///         Curve = "P-521",
    ///         KeyOpts = new[]
    ///         {
    ///             "sign",
    ///         },
    ///     });
    /// 
    ///     var exampleManagedHardwareSecurityModuleKeyRotationPolicy = new Azure.KeyVault.ManagedHardwareSecurityModuleKeyRotationPolicy("example", new()
    ///     {
    ///         ManagedHsmKeyId = example.Id,
    ///         ExpireAfter = "P60D",
    ///         TimeBeforeExpiry = "P30D",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Managed HSM Key rotation policy can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:keyvault/managedHardwareSecurityModuleKeyRotationPolicy:ManagedHardwareSecurityModuleKeyRotationPolicy example https://example-hsm.managedhsm.azure.net/keys/example
    /// ```
    /// </summary>
    [AzureResourceType("azure:keyvault/managedHardwareSecurityModuleKeyRotationPolicy:ManagedHardwareSecurityModuleKeyRotationPolicy")]
    public partial class ManagedHardwareSecurityModuleKeyRotationPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specify the expiration duration on a newly rotated key as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `P28D`.
        /// </summary>
        [Output("expireAfter")]
        public Output<string> ExpireAfter { get; private set; } = null!;

        /// <summary>
        /// The ID of the Managed HSM Key. Changing this forces a new Managed HSM Key rotation policy to be created.
        /// </summary>
        [Output("managedHsmKeyId")]
        public Output<string> ManagedHsmKeyId { get; private set; } = null!;

        /// <summary>
        /// Rotate automatically at a duration after key creation as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `TimeAfterCreation` or `TimeBeforeExpiry` should be specified.
        /// </summary>
        [Output("timeAfterCreation")]
        public Output<string?> TimeAfterCreation { get; private set; } = null!;

        /// <summary>
        /// Rotate automatically at a duration before key expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `TimeAfterCreation` or `TimeBeforeExpiry` should be specified.
        /// </summary>
        [Output("timeBeforeExpiry")]
        public Output<string?> TimeBeforeExpiry { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedHardwareSecurityModuleKeyRotationPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedHardwareSecurityModuleKeyRotationPolicy(string name, ManagedHardwareSecurityModuleKeyRotationPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure:keyvault/managedHardwareSecurityModuleKeyRotationPolicy:ManagedHardwareSecurityModuleKeyRotationPolicy", name, args ?? new ManagedHardwareSecurityModuleKeyRotationPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedHardwareSecurityModuleKeyRotationPolicy(string name, Input<string> id, ManagedHardwareSecurityModuleKeyRotationPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azure:keyvault/managedHardwareSecurityModuleKeyRotationPolicy:ManagedHardwareSecurityModuleKeyRotationPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedHardwareSecurityModuleKeyRotationPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedHardwareSecurityModuleKeyRotationPolicy Get(string name, Input<string> id, ManagedHardwareSecurityModuleKeyRotationPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedHardwareSecurityModuleKeyRotationPolicy(name, id, state, options);
        }
    }

    public sealed class ManagedHardwareSecurityModuleKeyRotationPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify the expiration duration on a newly rotated key as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `P28D`.
        /// </summary>
        [Input("expireAfter", required: true)]
        public Input<string> ExpireAfter { get; set; } = null!;

        /// <summary>
        /// The ID of the Managed HSM Key. Changing this forces a new Managed HSM Key rotation policy to be created.
        /// </summary>
        [Input("managedHsmKeyId", required: true)]
        public Input<string> ManagedHsmKeyId { get; set; } = null!;

        /// <summary>
        /// Rotate automatically at a duration after key creation as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `TimeAfterCreation` or `TimeBeforeExpiry` should be specified.
        /// </summary>
        [Input("timeAfterCreation")]
        public Input<string>? TimeAfterCreation { get; set; }

        /// <summary>
        /// Rotate automatically at a duration before key expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `TimeAfterCreation` or `TimeBeforeExpiry` should be specified.
        /// </summary>
        [Input("timeBeforeExpiry")]
        public Input<string>? TimeBeforeExpiry { get; set; }

        public ManagedHardwareSecurityModuleKeyRotationPolicyArgs()
        {
        }
        public static new ManagedHardwareSecurityModuleKeyRotationPolicyArgs Empty => new ManagedHardwareSecurityModuleKeyRotationPolicyArgs();
    }

    public sealed class ManagedHardwareSecurityModuleKeyRotationPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify the expiration duration on a newly rotated key as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `P28D`.
        /// </summary>
        [Input("expireAfter")]
        public Input<string>? ExpireAfter { get; set; }

        /// <summary>
        /// The ID of the Managed HSM Key. Changing this forces a new Managed HSM Key rotation policy to be created.
        /// </summary>
        [Input("managedHsmKeyId")]
        public Input<string>? ManagedHsmKeyId { get; set; }

        /// <summary>
        /// Rotate automatically at a duration after key creation as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `TimeAfterCreation` or `TimeBeforeExpiry` should be specified.
        /// </summary>
        [Input("timeAfterCreation")]
        public Input<string>? TimeAfterCreation { get; set; }

        /// <summary>
        /// Rotate automatically at a duration before key expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `TimeAfterCreation` or `TimeBeforeExpiry` should be specified.
        /// </summary>
        [Input("timeBeforeExpiry")]
        public Input<string>? TimeBeforeExpiry { get; set; }

        public ManagedHardwareSecurityModuleKeyRotationPolicyState()
        {
        }
        public static new ManagedHardwareSecurityModuleKeyRotationPolicyState Empty => new ManagedHardwareSecurityModuleKeyRotationPolicyState();
    }
}
