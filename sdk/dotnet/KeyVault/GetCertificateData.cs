// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault
{
    public static class GetCertificateData
    {
        /// <summary>
        /// Use this data source to access data stored in an existing Key Vault Certificate.
        /// 
        /// &gt; **Note:** This data source uses the `GetSecret` function of the Azure API, to get the key of the certificate. Therefore you need secret/get permission
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleKeyVault = Output.Create(Azure.KeyVault.GetKeyVault.InvokeAsync(new Azure.KeyVault.GetKeyVaultArgs
        ///         {
        ///             Name = "examplekv",
        ///             ResourceGroupName = "some-resource-group",
        ///         }));
        ///         var exampleCertificateData = exampleKeyVault.Apply(exampleKeyVault =&gt; Output.Create(Azure.KeyVault.GetCertificateData.InvokeAsync(new Azure.KeyVault.GetCertificateDataArgs
        ///         {
        ///             Name = "secret-sauce",
        ///             KeyVaultId = exampleKeyVault.Id,
        ///         })));
        ///         this.ExamplePem = exampleCertificateData.Apply(exampleCertificateData =&gt; exampleCertificateData.Pem);
        ///     }
        /// 
        ///     [Output("examplePem")]
        ///     public Output&lt;string&gt; ExamplePem { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCertificateDataResult> InvokeAsync(GetCertificateDataArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCertificateDataResult>("azure:keyvault/getCertificateData:getCertificateData", args ?? new GetCertificateDataArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access data stored in an existing Key Vault Certificate.
        /// 
        /// &gt; **Note:** This data source uses the `GetSecret` function of the Azure API, to get the key of the certificate. Therefore you need secret/get permission
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleKeyVault = Output.Create(Azure.KeyVault.GetKeyVault.InvokeAsync(new Azure.KeyVault.GetKeyVaultArgs
        ///         {
        ///             Name = "examplekv",
        ///             ResourceGroupName = "some-resource-group",
        ///         }));
        ///         var exampleCertificateData = exampleKeyVault.Apply(exampleKeyVault =&gt; Output.Create(Azure.KeyVault.GetCertificateData.InvokeAsync(new Azure.KeyVault.GetCertificateDataArgs
        ///         {
        ///             Name = "secret-sauce",
        ///             KeyVaultId = exampleKeyVault.Id,
        ///         })));
        ///         this.ExamplePem = exampleCertificateData.Apply(exampleCertificateData =&gt; exampleCertificateData.Pem);
        ///     }
        /// 
        ///     [Output("examplePem")]
        ///     public Output&lt;string&gt; ExamplePem { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCertificateDataResult> Invoke(GetCertificateDataInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCertificateDataResult>("azure:keyvault/getCertificateData:getCertificateData", args ?? new GetCertificateDataInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateDataArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the ID of the Key Vault instance where the Secret resides, available on the `azure.keyvault.KeyVault` Data Source / Resource.
        /// </summary>
        [Input("keyVaultId", required: true)]
        public string KeyVaultId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Key Vault Secret.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the version of the certificate to look up.  (Defaults to latest)
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        public GetCertificateDataArgs()
        {
        }
    }

    public sealed class GetCertificateDataInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the ID of the Key Vault instance where the Secret resides, available on the `azure.keyvault.KeyVault` Data Source / Resource.
        /// </summary>
        [Input("keyVaultId", required: true)]
        public Input<string> KeyVaultId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Key Vault Secret.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the version of the certificate to look up.  (Defaults to latest)
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public GetCertificateDataInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCertificateDataResult
    {
        /// <summary>
        /// Amount of certificates in the chain in case Key Vault Certificate is a bundle (e.g. has an intermediate certificate).
        /// </summary>
        public readonly int CertificatesCount;
        /// <summary>
        /// Expiry date of certificate in RFC3339 format.
        /// </summary>
        public readonly string Expires;
        /// <summary>
        /// The raw Key Vault Certificate data represented as a hexadecimal string.
        /// </summary>
        public readonly string Hex;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Key Vault Certificate Key.
        /// </summary>
        public readonly string Key;
        public readonly string KeyVaultId;
        public readonly string Name;
        /// <summary>
        /// Not Before date of certificate in RFC3339 format.
        /// </summary>
        public readonly string NotBefore;
        /// <summary>
        /// The Key Vault Certificate in PEM format.
        /// </summary>
        public readonly string Pem;
        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string Version;

        [OutputConstructor]
        private GetCertificateDataResult(
            int certificatesCount,

            string expires,

            string hex,

            string id,

            string key,

            string keyVaultId,

            string name,

            string notBefore,

            string pem,

            ImmutableDictionary<string, string> tags,

            string version)
        {
            CertificatesCount = certificatesCount;
            Expires = expires;
            Hex = hex;
            Id = id;
            Key = key;
            KeyVaultId = keyVaultId;
            Name = name;
            NotBefore = notBefore;
            Pem = pem;
            Tags = tags;
            Version = version;
        }
    }
}
