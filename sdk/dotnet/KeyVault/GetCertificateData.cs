// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault
{
    public static class GetCertificateData
    {
        /// <summary>
        /// Use this data source to access data stored in an existing Key Vault Certificate.
        /// 
        /// &gt; **Note:** This data source uses the `GetSecret` function of the Azure API, to get the key of the certificate. Therefore you need secret/get permission
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleKeyVault = Azure.KeyVault.GetKeyVault.Invoke(new()
        ///     {
        ///         Name = "examplekv",
        ///         ResourceGroupName = "some-resource-group",
        ///     });
        /// 
        ///     var exampleCertificateData = Azure.KeyVault.GetCertificateData.Invoke(new()
        ///     {
        ///         Name = "secret-sauce",
        ///         KeyVaultId = exampleKeyVault.Apply(getKeyVaultResult =&gt; getKeyVaultResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["examplePem"] = exampleCertificateData.Apply(getCertificateDataResult =&gt; getCertificateDataResult.Pem),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCertificateDataResult> InvokeAsync(GetCertificateDataArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateDataResult>("azure:keyvault/getCertificateData:getCertificateData", args ?? new GetCertificateDataArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access data stored in an existing Key Vault Certificate.
        /// 
        /// &gt; **Note:** This data source uses the `GetSecret` function of the Azure API, to get the key of the certificate. Therefore you need secret/get permission
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleKeyVault = Azure.KeyVault.GetKeyVault.Invoke(new()
        ///     {
        ///         Name = "examplekv",
        ///         ResourceGroupName = "some-resource-group",
        ///     });
        /// 
        ///     var exampleCertificateData = Azure.KeyVault.GetCertificateData.Invoke(new()
        ///     {
        ///         Name = "secret-sauce",
        ///         KeyVaultId = exampleKeyVault.Apply(getKeyVaultResult =&gt; getKeyVaultResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["examplePem"] = exampleCertificateData.Apply(getCertificateDataResult =&gt; getCertificateDataResult.Pem),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCertificateDataResult> Invoke(GetCertificateDataInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateDataResult>("azure:keyvault/getCertificateData:getCertificateData", args ?? new GetCertificateDataInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateDataArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the ID of the Key Vault instance where the Secret resides, available on the `azure.keyvault.KeyVault` Data Source / Resource.
        /// </summary>
        [Input("keyVaultId", required: true)]
        public string KeyVaultId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Key Vault Secret.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the version of the certificate to look up.  (Defaults to latest)
        /// 
        /// &gt; **NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        public GetCertificateDataArgs()
        {
        }
        public static new GetCertificateDataArgs Empty => new GetCertificateDataArgs();
    }

    public sealed class GetCertificateDataInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the ID of the Key Vault instance where the Secret resides, available on the `azure.keyvault.KeyVault` Data Source / Resource.
        /// </summary>
        [Input("keyVaultId", required: true)]
        public Input<string> KeyVaultId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Key Vault Secret.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the version of the certificate to look up.  (Defaults to latest)
        /// 
        /// &gt; **NOTE:** The vault must be in the same subscription as the provider. If the vault is in another subscription, you must create an aliased provider for that subscription.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public GetCertificateDataInvokeArgs()
        {
        }
        public static new GetCertificateDataInvokeArgs Empty => new GetCertificateDataInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateDataResult
    {
        /// <summary>
        /// Amount of certificates in the chain in case Key Vault Certificate is a bundle (e.g. has an intermediate certificate).
        /// </summary>
        public readonly int CertificatesCount;
        /// <summary>
        /// Expiry date of certificate in RFC3339 format.
        /// </summary>
        public readonly string Expires;
        /// <summary>
        /// The raw Key Vault Certificate data represented as a hexadecimal string.
        /// </summary>
        public readonly string Hex;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Key Vault Certificate Key.
        /// </summary>
        public readonly string Key;
        public readonly string KeyVaultId;
        public readonly string Name;
        /// <summary>
        /// Not Before date of certificate in RFC3339 format.
        /// </summary>
        public readonly string NotBefore;
        /// <summary>
        /// The Key Vault Certificate in PEM format.
        /// </summary>
        public readonly string Pem;
        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string Version;

        [OutputConstructor]
        private GetCertificateDataResult(
            int certificatesCount,

            string expires,

            string hex,

            string id,

            string key,

            string keyVaultId,

            string name,

            string notBefore,

            string pem,

            ImmutableDictionary<string, string> tags,

            string version)
        {
            CertificatesCount = certificatesCount;
            Expires = expires;
            Hex = hex;
            Id = id;
            Key = key;
            KeyVaultId = keyVaultId;
            Name = name;
            NotBefore = notBefore;
            Pem = pem;
            Tags = tags;
            Version = version;
        }
    }
}
