// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault
{
    /// <summary>
    /// Manages a Key Vault Managed Hardware Security Module Key.
    /// 
    /// &gt; **Note:** The Azure Provider includes a Feature Toggle which will purge a Key Vault Managed Hardware Security Module Key resource on destroy, rather than the default soft-delete. See `PurgeSoftDeletedHardwareSecurityModulesOnDestroy` for more information.
    /// 
    /// ## Example Usage
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.KeyVault` - 2023-07-01
    /// 
    /// ## Import
    /// 
    /// Key Vault Managed Hardware Security Module Key can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:keyvault/managedHardwareSecurityModuleKey:ManagedHardwareSecurityModuleKey example https://exampleHSM.managedhsm.azure.net/keys/exampleKey
    /// ```
    /// </summary>
    [AzureResourceType("azure:keyvault/managedHardwareSecurityModuleKey:ManagedHardwareSecurityModuleKey")]
    public partial class ManagedHardwareSecurityModuleKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the curve to use when creating an `EC-HSM` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field is required if `KeyType` is `EC-HSM`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("curve")]
        public Output<string?> Curve { get; private set; } = null!;

        /// <summary>
        /// Expiration UTC datetime (Y-m-d'T'H:M:S'Z'). When this parameter gets changed on reruns, if newer date is ahead of current date, an update is performed. If the newer date is before the current date, resource will be force created.
        /// </summary>
        [Output("expirationDate")]
        public Output<string?> ExpirationDate { get; private set; } = null!;

        /// <summary>
        /// A list of JSON web key operations. Possible values include: `Decrypt`, `Encrypt`, `Sign`, `unwrapKey`, `Verify`, `wrapKey` and `Import`. Please note these values are case-sensitive.
        /// </summary>
        [Output("keyOpts")]
        public Output<ImmutableArray<string>> KeyOpts { get; private set; } = null!;

        /// <summary>
        /// Specifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. *Note*: This field is required if `KeyType` is `RSA-HSM` or `oct-HSM`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("keySize")]
        public Output<int?> KeySize { get; private set; } = null!;

        /// <summary>
        /// Specifies the Key Type to use for this Key Vault Managed Hardware Security Module Key. Possible values are `EC-HSM`, `oct-HSM` and `RSA-HSM`. More details see [HSM-protected keys](https://learn.microsoft.com/en-us/azure/key-vault/keys/about-keys#hsm-protected-keys). Changing this forces a new resource to be created.
        /// </summary>
        [Output("keyType")]
        public Output<string> KeyType { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the Key Vault Managed Hardware Security Module that they key will be owned by. Changing this forces a new resource to be created.
        /// </summary>
        [Output("managedHsmId")]
        public Output<string> ManagedHsmId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Key Vault Managed Hardware Security Module Key. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Key not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').
        /// 
        /// &gt; **Note:** Once `ExpirationDate` is set, it's not possible to unset the key even if it is deleted &amp; recreated as underlying Azure API uses the restore of the purged key.
        /// </summary>
        [Output("notBeforeDate")]
        public Output<string?> NotBeforeDate { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The versioned Key Vault Secret Managed Hardware Security Module Key ID.
        /// </summary>
        [Output("versionedId")]
        public Output<string> VersionedId { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedHardwareSecurityModuleKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedHardwareSecurityModuleKey(string name, ManagedHardwareSecurityModuleKeyArgs args, CustomResourceOptions? options = null)
            : base("azure:keyvault/managedHardwareSecurityModuleKey:ManagedHardwareSecurityModuleKey", name, args ?? new ManagedHardwareSecurityModuleKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedHardwareSecurityModuleKey(string name, Input<string> id, ManagedHardwareSecurityModuleKeyState? state = null, CustomResourceOptions? options = null)
            : base("azure:keyvault/managedHardwareSecurityModuleKey:ManagedHardwareSecurityModuleKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedHardwareSecurityModuleKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedHardwareSecurityModuleKey Get(string name, Input<string> id, ManagedHardwareSecurityModuleKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedHardwareSecurityModuleKey(name, id, state, options);
        }
    }

    public sealed class ManagedHardwareSecurityModuleKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the curve to use when creating an `EC-HSM` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field is required if `KeyType` is `EC-HSM`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("curve")]
        public Input<string>? Curve { get; set; }

        /// <summary>
        /// Expiration UTC datetime (Y-m-d'T'H:M:S'Z'). When this parameter gets changed on reruns, if newer date is ahead of current date, an update is performed. If the newer date is before the current date, resource will be force created.
        /// </summary>
        [Input("expirationDate")]
        public Input<string>? ExpirationDate { get; set; }

        [Input("keyOpts", required: true)]
        private InputList<string>? _keyOpts;

        /// <summary>
        /// A list of JSON web key operations. Possible values include: `Decrypt`, `Encrypt`, `Sign`, `unwrapKey`, `Verify`, `wrapKey` and `Import`. Please note these values are case-sensitive.
        /// </summary>
        public InputList<string> KeyOpts
        {
            get => _keyOpts ?? (_keyOpts = new InputList<string>());
            set => _keyOpts = value;
        }

        /// <summary>
        /// Specifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. *Note*: This field is required if `KeyType` is `RSA-HSM` or `oct-HSM`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("keySize")]
        public Input<int>? KeySize { get; set; }

        /// <summary>
        /// Specifies the Key Type to use for this Key Vault Managed Hardware Security Module Key. Possible values are `EC-HSM`, `oct-HSM` and `RSA-HSM`. More details see [HSM-protected keys](https://learn.microsoft.com/en-us/azure/key-vault/keys/about-keys#hsm-protected-keys). Changing this forces a new resource to be created.
        /// </summary>
        [Input("keyType", required: true)]
        public Input<string> KeyType { get; set; } = null!;

        /// <summary>
        /// Specifies the ID of the Key Vault Managed Hardware Security Module that they key will be owned by. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedHsmId", required: true)]
        public Input<string> ManagedHsmId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Key Vault Managed Hardware Security Module Key. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Key not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').
        /// 
        /// &gt; **Note:** Once `ExpirationDate` is set, it's not possible to unset the key even if it is deleted &amp; recreated as underlying Azure API uses the restore of the purged key.
        /// </summary>
        [Input("notBeforeDate")]
        public Input<string>? NotBeforeDate { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ManagedHardwareSecurityModuleKeyArgs()
        {
        }
        public static new ManagedHardwareSecurityModuleKeyArgs Empty => new ManagedHardwareSecurityModuleKeyArgs();
    }

    public sealed class ManagedHardwareSecurityModuleKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the curve to use when creating an `EC-HSM` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field is required if `KeyType` is `EC-HSM`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("curve")]
        public Input<string>? Curve { get; set; }

        /// <summary>
        /// Expiration UTC datetime (Y-m-d'T'H:M:S'Z'). When this parameter gets changed on reruns, if newer date is ahead of current date, an update is performed. If the newer date is before the current date, resource will be force created.
        /// </summary>
        [Input("expirationDate")]
        public Input<string>? ExpirationDate { get; set; }

        [Input("keyOpts")]
        private InputList<string>? _keyOpts;

        /// <summary>
        /// A list of JSON web key operations. Possible values include: `Decrypt`, `Encrypt`, `Sign`, `unwrapKey`, `Verify`, `wrapKey` and `Import`. Please note these values are case-sensitive.
        /// </summary>
        public InputList<string> KeyOpts
        {
            get => _keyOpts ?? (_keyOpts = new InputList<string>());
            set => _keyOpts = value;
        }

        /// <summary>
        /// Specifies the Size of the RSA key to create in bytes. For example, 1024 or 2048. *Note*: This field is required if `KeyType` is `RSA-HSM` or `oct-HSM`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("keySize")]
        public Input<int>? KeySize { get; set; }

        /// <summary>
        /// Specifies the Key Type to use for this Key Vault Managed Hardware Security Module Key. Possible values are `EC-HSM`, `oct-HSM` and `RSA-HSM`. More details see [HSM-protected keys](https://learn.microsoft.com/en-us/azure/key-vault/keys/about-keys#hsm-protected-keys). Changing this forces a new resource to be created.
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// Specifies the ID of the Key Vault Managed Hardware Security Module that they key will be owned by. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedHsmId")]
        public Input<string>? ManagedHsmId { get; set; }

        /// <summary>
        /// Specifies the name of the Key Vault Managed Hardware Security Module Key. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Key not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').
        /// 
        /// &gt; **Note:** Once `ExpirationDate` is set, it's not possible to unset the key even if it is deleted &amp; recreated as underlying Azure API uses the restore of the purged key.
        /// </summary>
        [Input("notBeforeDate")]
        public Input<string>? NotBeforeDate { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The versioned Key Vault Secret Managed Hardware Security Module Key ID.
        /// </summary>
        [Input("versionedId")]
        public Input<string>? VersionedId { get; set; }

        public ManagedHardwareSecurityModuleKeyState()
        {
        }
        public static new ManagedHardwareSecurityModuleKeyState Empty => new ManagedHardwareSecurityModuleKeyState();
    }
}
