// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Azure.KeyVault
{
    public static class GetCertificateIssuer
    {
        /// <summary>
        /// Use this data source to access information about an existing Key Vault Certificate Issuer.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleKeyVault = Output.Create(Azure.KeyVault.GetKeyVault.InvokeAsync(new Azure.KeyVault.GetKeyVaultArgs
        ///         {
        ///             Name = "mykeyvault",
        ///             ResourceGroupName = "some-resource-group",
        ///         }));
        ///         var exampleCertificateIssuer = exampleKeyVault.Apply(exampleKeyVault =&gt; Output.Create(Azure.KeyVault.GetCertificateIssuer.InvokeAsync(new Azure.KeyVault.GetCertificateIssuerArgs
        ///         {
        ///             Name = "existing",
        ///             KeyVaultId = exampleKeyVault.Id,
        ///         })));
        ///         this.Id = exampleCertificateIssuer.Apply(exampleCertificateIssuer =&gt; exampleCertificateIssuer.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCertificateIssuerResult> InvokeAsync(GetCertificateIssuerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCertificateIssuerResult>("azure:keyvault/getCertificateIssuer:getCertificateIssuer", args ?? new GetCertificateIssuerArgs(), options.WithVersion());

        /// <summary>
        /// Use this data source to access information about an existing Key Vault Certificate Issuer.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleKeyVault = Output.Create(Azure.KeyVault.GetKeyVault.InvokeAsync(new Azure.KeyVault.GetKeyVaultArgs
        ///         {
        ///             Name = "mykeyvault",
        ///             ResourceGroupName = "some-resource-group",
        ///         }));
        ///         var exampleCertificateIssuer = exampleKeyVault.Apply(exampleKeyVault =&gt; Output.Create(Azure.KeyVault.GetCertificateIssuer.InvokeAsync(new Azure.KeyVault.GetCertificateIssuerArgs
        ///         {
        ///             Name = "existing",
        ///             KeyVaultId = exampleKeyVault.Id,
        ///         })));
        ///         this.Id = exampleCertificateIssuer.Apply(exampleCertificateIssuer =&gt; exampleCertificateIssuer.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCertificateIssuerResult> Invoke(GetCertificateIssuerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCertificateIssuerResult>("azure:keyvault/getCertificateIssuer:getCertificateIssuer", args ?? new GetCertificateIssuerInvokeArgs(), options.WithVersion());
    }


    public sealed class GetCertificateIssuerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Key Vault in which to locate the Certificate Issuer.
        /// </summary>
        [Input("keyVaultId", required: true)]
        public string KeyVaultId { get; set; } = null!;

        /// <summary>
        /// The name of the Key Vault Certificate Issuer.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetCertificateIssuerArgs()
        {
        }
    }

    public sealed class GetCertificateIssuerInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Key Vault in which to locate the Certificate Issuer.
        /// </summary>
        [Input("keyVaultId", required: true)]
        public Input<string> KeyVaultId { get; set; } = null!;

        /// <summary>
        /// The name of the Key Vault Certificate Issuer.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetCertificateIssuerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCertificateIssuerResult
    {
        /// <summary>
        /// The account number with the third-party Certificate Issuer.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// A list of `admin` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateIssuerAdminResult> Admins;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KeyVaultId;
        public readonly string Name;
        /// <summary>
        /// The organization ID with the third-party Certificate Issuer.
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// The name of the third-party Certificate Issuer.
        /// </summary>
        public readonly string ProviderName;

        [OutputConstructor]
        private GetCertificateIssuerResult(
            string accountId,

            ImmutableArray<Outputs.GetCertificateIssuerAdminResult> admins,

            string id,

            string keyVaultId,

            string name,

            string orgId,

            string providerName)
        {
            AccountId = accountId;
            Admins = admins;
            Id = id;
            KeyVaultId = keyVaultId;
            Name = name;
            OrgId = orgId;
            ProviderName = providerName;
        }
    }
}
