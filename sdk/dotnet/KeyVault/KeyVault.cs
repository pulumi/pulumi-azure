// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("example", new()
    ///     {
    ///         Name = "examplekeyvault",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         EnabledForDiskEncryption = true,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SoftDeleteRetentionDays = 7,
    ///         PurgeProtectionEnabled = false,
    ///         SkuName = "standard",
    ///         AccessPolicies = new[]
    ///         {
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///                 ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///                 KeyPermissions = new[]
    ///                 {
    ///                     "Get",
    ///                 },
    ///                 SecretPermissions = new[]
    ///                 {
    ///                     "Get",
    ///                 },
    ///                 StoragePermissions = new[]
    ///                 {
    ///                     "Get",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Key Vault's can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:keyvault/keyVault:KeyVault example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.KeyVault/vaults/vault1
    /// ```
    /// </summary>
    [AzureResourceType("azure:keyvault/keyVault:KeyVault")]
    public partial class KeyVault : global::Pulumi.CustomResource
    {
        /// <summary>
        /// [A list](https://www.terraform.io/docs/configuration/attr-as-blocks.html) of `access_policy` objects (up to 1024) describing access policies, as described below.
        /// 
        /// &gt; **Note:** Since `access_policy` can be configured both inline and via the separate `azure.keyvault.AccessPolicy` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
        /// </summary>
        [Output("accessPolicies")]
        public Output<ImmutableArray<Outputs.KeyVaultAccessPolicy>> AccessPolicies { get; private set; } = null!;

        [Output("contacts")]
        public Output<ImmutableArray<Outputs.KeyVaultContact>> Contacts { get; private set; } = null!;

        /// <summary>
        /// Boolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions.
        /// </summary>
        [Output("enableRbacAuthorization")]
        public Output<bool?> EnableRbacAuthorization { get; private set; } = null!;

        /// <summary>
        /// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
        /// </summary>
        [Output("enabledForDeployment")]
        public Output<bool?> EnabledForDeployment { get; private set; } = null!;

        /// <summary>
        /// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
        /// </summary>
        [Output("enabledForDiskEncryption")]
        public Output<bool?> EnabledForDiskEncryption { get; private set; } = null!;

        /// <summary>
        /// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
        /// </summary>
        [Output("enabledForTemplateDeployment")]
        public Output<bool?> EnabledForTemplateDeployment { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Key Vault. Changing this forces a new resource to be created. The name must be globally unique. If the vault is in a recoverable state then the vault will need to be purged before reusing the name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `network_acls` block as defined below.
        /// </summary>
        [Output("networkAcls")]
        public Output<Outputs.KeyVaultNetworkAcls> NetworkAcls { get; private set; } = null!;

        /// <summary>
        /// Whether public network access is allowed for this Key Vault. Defaults to `true`.
        /// </summary>
        [Output("publicNetworkAccessEnabled")]
        public Output<bool?> PublicNetworkAccessEnabled { get; private set; } = null!;

        [Output("purgeProtectionEnabled")]
        public Output<bool?> PurgeProtectionEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
        /// </summary>
        [Output("skuName")]
        public Output<string> SkuName { get; private set; } = null!;

        /// <summary>
        /// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days.
        /// 
        /// &gt; **Note:** This field can only be configured one time and cannot be updated.
        /// </summary>
        [Output("softDeleteRetentionDays")]
        public Output<int?> SoftDeleteRetentionDays { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;

        /// <summary>
        /// The URI of the Key Vault, used for performing operations on keys and secrets.
        /// </summary>
        [Output("vaultUri")]
        public Output<string> VaultUri { get; private set; } = null!;


        /// <summary>
        /// Create a KeyVault resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KeyVault(string name, KeyVaultArgs args, CustomResourceOptions? options = null)
            : base("azure:keyvault/keyVault:KeyVault", name, args ?? new KeyVaultArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KeyVault(string name, Input<string> id, KeyVaultState? state = null, CustomResourceOptions? options = null)
            : base("azure:keyvault/keyVault:KeyVault", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KeyVault resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KeyVault Get(string name, Input<string> id, KeyVaultState? state = null, CustomResourceOptions? options = null)
        {
            return new KeyVault(name, id, state, options);
        }
    }

    public sealed class KeyVaultArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessPolicies")]
        private InputList<Inputs.KeyVaultAccessPolicyArgs>? _accessPolicies;

        /// <summary>
        /// [A list](https://www.terraform.io/docs/configuration/attr-as-blocks.html) of `access_policy` objects (up to 1024) describing access policies, as described below.
        /// 
        /// &gt; **Note:** Since `access_policy` can be configured both inline and via the separate `azure.keyvault.AccessPolicy` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
        /// </summary>
        public InputList<Inputs.KeyVaultAccessPolicyArgs> AccessPolicies
        {
            get => _accessPolicies ?? (_accessPolicies = new InputList<Inputs.KeyVaultAccessPolicyArgs>());
            set => _accessPolicies = value;
        }

        [Input("contacts")]
        private InputList<Inputs.KeyVaultContactArgs>? _contacts;
        [Obsolete(@"As the `contact` property requires reaching out to the dataplane, to better support private endpoints and keyvaults with public network access disabled, new key vaults with the `contact` field defined in the configuration file will now be required to use the `azure.keyvault.CertificateContacts` resource instead of the exposed `contact` field in the key vault resource itself.")]
        public InputList<Inputs.KeyVaultContactArgs> Contacts
        {
            get => _contacts ?? (_contacts = new InputList<Inputs.KeyVaultContactArgs>());
            set => _contacts = value;
        }

        /// <summary>
        /// Boolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions.
        /// </summary>
        [Input("enableRbacAuthorization")]
        public Input<bool>? EnableRbacAuthorization { get; set; }

        /// <summary>
        /// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
        /// </summary>
        [Input("enabledForDeployment")]
        public Input<bool>? EnabledForDeployment { get; set; }

        /// <summary>
        /// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
        /// </summary>
        [Input("enabledForDiskEncryption")]
        public Input<bool>? EnabledForDiskEncryption { get; set; }

        /// <summary>
        /// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
        /// </summary>
        [Input("enabledForTemplateDeployment")]
        public Input<bool>? EnabledForTemplateDeployment { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Key Vault. Changing this forces a new resource to be created. The name must be globally unique. If the vault is in a recoverable state then the vault will need to be purged before reusing the name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `network_acls` block as defined below.
        /// </summary>
        [Input("networkAcls")]
        public Input<Inputs.KeyVaultNetworkAclsArgs>? NetworkAcls { get; set; }

        /// <summary>
        /// Whether public network access is allowed for this Key Vault. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        [Input("purgeProtectionEnabled")]
        public Input<bool>? PurgeProtectionEnabled { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
        /// </summary>
        [Input("skuName", required: true)]
        public Input<string> SkuName { get; set; } = null!;

        /// <summary>
        /// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days.
        /// 
        /// &gt; **Note:** This field can only be configured one time and cannot be updated.
        /// </summary>
        [Input("softDeleteRetentionDays")]
        public Input<int>? SoftDeleteRetentionDays { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        public KeyVaultArgs()
        {
        }
        public static new KeyVaultArgs Empty => new KeyVaultArgs();
    }

    public sealed class KeyVaultState : global::Pulumi.ResourceArgs
    {
        [Input("accessPolicies")]
        private InputList<Inputs.KeyVaultAccessPolicyGetArgs>? _accessPolicies;

        /// <summary>
        /// [A list](https://www.terraform.io/docs/configuration/attr-as-blocks.html) of `access_policy` objects (up to 1024) describing access policies, as described below.
        /// 
        /// &gt; **Note:** Since `access_policy` can be configured both inline and via the separate `azure.keyvault.AccessPolicy` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
        /// </summary>
        public InputList<Inputs.KeyVaultAccessPolicyGetArgs> AccessPolicies
        {
            get => _accessPolicies ?? (_accessPolicies = new InputList<Inputs.KeyVaultAccessPolicyGetArgs>());
            set => _accessPolicies = value;
        }

        [Input("contacts")]
        private InputList<Inputs.KeyVaultContactGetArgs>? _contacts;
        [Obsolete(@"As the `contact` property requires reaching out to the dataplane, to better support private endpoints and keyvaults with public network access disabled, new key vaults with the `contact` field defined in the configuration file will now be required to use the `azure.keyvault.CertificateContacts` resource instead of the exposed `contact` field in the key vault resource itself.")]
        public InputList<Inputs.KeyVaultContactGetArgs> Contacts
        {
            get => _contacts ?? (_contacts = new InputList<Inputs.KeyVaultContactGetArgs>());
            set => _contacts = value;
        }

        /// <summary>
        /// Boolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions.
        /// </summary>
        [Input("enableRbacAuthorization")]
        public Input<bool>? EnableRbacAuthorization { get; set; }

        /// <summary>
        /// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
        /// </summary>
        [Input("enabledForDeployment")]
        public Input<bool>? EnabledForDeployment { get; set; }

        /// <summary>
        /// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
        /// </summary>
        [Input("enabledForDiskEncryption")]
        public Input<bool>? EnabledForDiskEncryption { get; set; }

        /// <summary>
        /// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
        /// </summary>
        [Input("enabledForTemplateDeployment")]
        public Input<bool>? EnabledForTemplateDeployment { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Key Vault. Changing this forces a new resource to be created. The name must be globally unique. If the vault is in a recoverable state then the vault will need to be purged before reusing the name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `network_acls` block as defined below.
        /// </summary>
        [Input("networkAcls")]
        public Input<Inputs.KeyVaultNetworkAclsGetArgs>? NetworkAcls { get; set; }

        /// <summary>
        /// Whether public network access is allowed for this Key Vault. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        [Input("purgeProtectionEnabled")]
        public Input<bool>? PurgeProtectionEnabled { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        /// <summary>
        /// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days.
        /// 
        /// &gt; **Note:** This field can only be configured one time and cannot be updated.
        /// </summary>
        [Input("softDeleteRetentionDays")]
        public Input<int>? SoftDeleteRetentionDays { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// The URI of the Key Vault, used for performing operations on keys and secrets.
        /// </summary>
        [Input("vaultUri")]
        public Input<string>? VaultUri { get; set; }

        public KeyVaultState()
        {
        }
        public static new KeyVaultState Empty => new KeyVaultState();
    }
}
