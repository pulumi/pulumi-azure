// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault.Inputs
{

    public sealed class CertifiateCertificateArgs : global::Pulumi.ResourceArgs
    {
        [Input("contents", required: true)]
        private Input<string>? _contents;

        /// <summary>
        /// The base64-encoded certificate contents.
        /// </summary>
        public Input<string>? Contents
        {
            get => _contents;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _contents = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password associated with the certificate.
        /// 
        /// &gt; **NOTE:** A PEM certificate is already base64 encoded. To successfully import, the `contents` property should include a PEM encoded X509 certificate and a private_key in pkcs8 format. There should only be linux style `\n` line endings and the whole block should have the PEM begin/end blocks around the certificate data and the private key data.
        /// 
        /// To convert a private key to pkcs8 format with openssl use:
        /// ```shell
        /// openssl pkcs8 -topk8 -nocrypt -in private_key.pem &gt; private_key_pk8.pem
        /// ```
        /// 
        /// The PEM content should look something like:
        /// ```text
        /// -----BEGIN CERTIFICATE-----
        /// aGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8K
        /// :
        /// aGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8KaGVsbG8K
        /// -----END CERTIFICATE-----
        /// -----BEGIN PRIVATE KEY-----
        /// d29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQK
        /// :
        /// d29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQKd29ybGQK
        /// -----END PRIVATE KEY-----
        /// ```
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public CertifiateCertificateArgs()
        {
        }
        public static new CertifiateCertificateArgs Empty => new CertifiateCertificateArgs();
    }
}
