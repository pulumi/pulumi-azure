// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault
{
    /// <summary>
    /// Manages a Key Vault Managed Storage Account.
    /// 
    /// ## Import
    /// 
    /// Key Vault Managed Storage Accounts can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:keyvault/managedStorageAccount:ManagedStorageAccount example https://example-keyvault.vault.azure.net/storage/exampleStorageAcc01
    /// ```
    /// </summary>
    [AzureResourceType("azure:keyvault/managedStorageAccount:ManagedStorageAccount")]
    public partial class ManagedStorageAccount : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Key Vault where the Managed Storage Account should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("keyVaultId")]
        public Output<string> KeyVaultId { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Key Vault Managed Storage Account. Changing this forces a new Key Vault Managed Storage Account to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Should Storage Account access key be regenerated periodically?
        /// 
        /// &gt; **NOTE:** Azure Key Vault application needs to have access to Storage Account for auto regeneration to work. Example can be found above.
        /// </summary>
        [Output("regenerateKeyAutomatically")]
        public Output<bool?> RegenerateKeyAutomatically { get; private set; } = null!;

        /// <summary>
        /// How often Storage Account access key should be regenerated. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
        /// </summary>
        [Output("regenerationPeriod")]
        public Output<string?> RegenerationPeriod { get; private set; } = null!;

        /// <summary>
        /// The ID of the Storage Account.
        /// </summary>
        [Output("storageAccountId")]
        public Output<string> StorageAccountId { get; private set; } = null!;

        /// <summary>
        /// Which Storage Account access key that is managed by Key Vault. Possible values are `key1` and `key2`.
        /// </summary>
        [Output("storageAccountKey")]
        public Output<string> StorageAccountKey { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Key Vault Managed Storage Account. Changing this forces a new resource to be created.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedStorageAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedStorageAccount(string name, ManagedStorageAccountArgs args, CustomResourceOptions? options = null)
            : base("azure:keyvault/managedStorageAccount:ManagedStorageAccount", name, args ?? new ManagedStorageAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedStorageAccount(string name, Input<string> id, ManagedStorageAccountState? state = null, CustomResourceOptions? options = null)
            : base("azure:keyvault/managedStorageAccount:ManagedStorageAccount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedStorageAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedStorageAccount Get(string name, Input<string> id, ManagedStorageAccountState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedStorageAccount(name, id, state, options);
        }
    }

    public sealed class ManagedStorageAccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Key Vault where the Managed Storage Account should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("keyVaultId", required: true)]
        public Input<string> KeyVaultId { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Key Vault Managed Storage Account. Changing this forces a new Key Vault Managed Storage Account to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Should Storage Account access key be regenerated periodically?
        /// 
        /// &gt; **NOTE:** Azure Key Vault application needs to have access to Storage Account for auto regeneration to work. Example can be found above.
        /// </summary>
        [Input("regenerateKeyAutomatically")]
        public Input<bool>? RegenerateKeyAutomatically { get; set; }

        /// <summary>
        /// How often Storage Account access key should be regenerated. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
        /// </summary>
        [Input("regenerationPeriod")]
        public Input<string>? RegenerationPeriod { get; set; }

        /// <summary>
        /// The ID of the Storage Account.
        /// </summary>
        [Input("storageAccountId", required: true)]
        public Input<string> StorageAccountId { get; set; } = null!;

        /// <summary>
        /// Which Storage Account access key that is managed by Key Vault. Possible values are `key1` and `key2`.
        /// </summary>
        [Input("storageAccountKey", required: true)]
        public Input<string> StorageAccountKey { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Key Vault Managed Storage Account. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ManagedStorageAccountArgs()
        {
        }
        public static new ManagedStorageAccountArgs Empty => new ManagedStorageAccountArgs();
    }

    public sealed class ManagedStorageAccountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Key Vault where the Managed Storage Account should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("keyVaultId")]
        public Input<string>? KeyVaultId { get; set; }

        /// <summary>
        /// The name which should be used for this Key Vault Managed Storage Account. Changing this forces a new Key Vault Managed Storage Account to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Should Storage Account access key be regenerated periodically?
        /// 
        /// &gt; **NOTE:** Azure Key Vault application needs to have access to Storage Account for auto regeneration to work. Example can be found above.
        /// </summary>
        [Input("regenerateKeyAutomatically")]
        public Input<bool>? RegenerateKeyAutomatically { get; set; }

        /// <summary>
        /// How often Storage Account access key should be regenerated. Value needs to be in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations).
        /// </summary>
        [Input("regenerationPeriod")]
        public Input<string>? RegenerationPeriod { get; set; }

        /// <summary>
        /// The ID of the Storage Account.
        /// </summary>
        [Input("storageAccountId")]
        public Input<string>? StorageAccountId { get; set; }

        /// <summary>
        /// Which Storage Account access key that is managed by Key Vault. Possible values are `key1` and `key2`.
        /// </summary>
        [Input("storageAccountKey")]
        public Input<string>? StorageAccountKey { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Key Vault Managed Storage Account. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ManagedStorageAccountState()
        {
        }
        public static new ManagedStorageAccountState Empty => new ManagedStorageAccountState();
    }
}
