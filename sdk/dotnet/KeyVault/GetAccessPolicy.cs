// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault
{
    public static class GetAccessPolicy
    {
        /// <summary>
        /// Use this data source to access information about the permissions from the Management Key Vault Templates.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var contributor = Azure.KeyVault.GetAccessPolicy.Invoke(new()
        ///     {
        ///         Name = "Key Management",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["accessPolicyKeyPermissions"] = contributor.Apply(getAccessPolicyResult =&gt; getAccessPolicyResult.KeyPermissions),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAccessPolicyResult> InvokeAsync(GetAccessPolicyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAccessPolicyResult>("azure:keyvault/getAccessPolicy:getAccessPolicy", args ?? new GetAccessPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about the permissions from the Management Key Vault Templates.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var contributor = Azure.KeyVault.GetAccessPolicy.Invoke(new()
        ///     {
        ///         Name = "Key Management",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["accessPolicyKeyPermissions"] = contributor.Apply(getAccessPolicyResult =&gt; getAccessPolicyResult.KeyPermissions),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAccessPolicyResult> Invoke(GetAccessPolicyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAccessPolicyResult>("azure:keyvault/getAccessPolicy:getAccessPolicy", args ?? new GetAccessPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccessPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Management Template. Possible values are: `Key Management`,
        /// `Secret Management`, `Certificate Management`, `Key &amp; Secret Management`, `Key &amp; Certificate Management`,
        /// `Secret &amp; Certificate Management`,  `Key, Secret, &amp; Certificate Management`
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetAccessPolicyArgs()
        {
        }
        public static new GetAccessPolicyArgs Empty => new GetAccessPolicyArgs();
    }

    public sealed class GetAccessPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Management Template. Possible values are: `Key Management`,
        /// `Secret Management`, `Certificate Management`, `Key &amp; Secret Management`, `Key &amp; Certificate Management`,
        /// `Secret &amp; Certificate Management`,  `Key, Secret, &amp; Certificate Management`
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetAccessPolicyInvokeArgs()
        {
        }
        public static new GetAccessPolicyInvokeArgs Empty => new GetAccessPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccessPolicyResult
    {
        /// <summary>
        /// the certificate permissions for the access policy
        /// </summary>
        public readonly ImmutableArray<string> CertificatePermissions;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// the key permissions for the access policy
        /// </summary>
        public readonly ImmutableArray<string> KeyPermissions;
        public readonly string Name;
        /// <summary>
        /// the secret permissions for the access policy
        /// </summary>
        public readonly ImmutableArray<string> SecretPermissions;

        [OutputConstructor]
        private GetAccessPolicyResult(
            ImmutableArray<string> certificatePermissions,

            string id,

            ImmutableArray<string> keyPermissions,

            string name,

            ImmutableArray<string> secretPermissions)
        {
            CertificatePermissions = certificatePermissions;
            Id = id;
            KeyPermissions = keyPermissions;
            Name = name;
            SecretPermissions = secretPermissions;
        }
    }
}
