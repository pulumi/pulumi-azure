// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.KeyVault
{
    public static class GetSecret
    {
        /// <summary>
        /// Use this data source to access information about an existing Key Vault Secret.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.KeyVault.GetSecret.InvokeAsync(new Azure.KeyVault.GetSecretArgs
        ///         {
        ///             Name = "secret-sauce",
        ///             KeyVaultId = data.Azurerm_key_vault.Existing.Id,
        ///         }));
        ///         this.SecretValue = example.Apply(example =&gt; example.Value);
        ///     }
        /// 
        ///     [Output("secretValue")]
        ///     public Output&lt;string&gt; SecretValue { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSecretResult> InvokeAsync(GetSecretArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSecretResult>("azure:keyvault/getSecret:getSecret", args ?? new GetSecretArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Key Vault Secret.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.KeyVault.GetSecret.InvokeAsync(new Azure.KeyVault.GetSecretArgs
        ///         {
        ///             Name = "secret-sauce",
        ///             KeyVaultId = data.Azurerm_key_vault.Existing.Id,
        ///         }));
        ///         this.SecretValue = example.Apply(example =&gt; example.Value);
        ///     }
        /// 
        ///     [Output("secretValue")]
        ///     public Output&lt;string&gt; SecretValue { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSecretResult> Invoke(GetSecretInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSecretResult>("azure:keyvault/getSecret:getSecret", args ?? new GetSecretInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecretArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the ID of the Key Vault instance where the Secret resides, available on the `azure.keyvault.KeyVault` Data Source / Resource.
        /// </summary>
        [Input("keyVaultId", required: true)]
        public string KeyVaultId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Key Vault Secret.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetSecretArgs()
        {
        }
    }

    public sealed class GetSecretInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the ID of the Key Vault instance where the Secret resides, available on the `azure.keyvault.KeyVault` Data Source / Resource.
        /// </summary>
        [Input("keyVaultId", required: true)]
        public Input<string> KeyVaultId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Key Vault Secret.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetSecretInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSecretResult
    {
        /// <summary>
        /// The content type for the Key Vault Secret.
        /// </summary>
        public readonly string ContentType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KeyVaultId;
        public readonly string Name;
        /// <summary>
        /// The (Versioned) ID for this Key Vault Secret. This property points to a specific version of a Key Vault Secret, as such using this won't auto-rotate values if used in other Azure Services.
        /// </summary>
        public readonly string ResourceId;
        /// <summary>
        /// The Versionless ID of the Key Vault Secret. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Secret is updated.
        /// </summary>
        public readonly string ResourceVersionlessId;
        /// <summary>
        /// Any tags assigned to this resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The value of the Key Vault Secret.
        /// </summary>
        public readonly string Value;
        /// <summary>
        /// The current version of the Key Vault Secret.
        /// </summary>
        public readonly string Version;
        public readonly string VersionlessId;

        [OutputConstructor]
        private GetSecretResult(
            string contentType,

            string id,

            string keyVaultId,

            string name,

            string resourceId,

            string resourceVersionlessId,

            ImmutableDictionary<string, string> tags,

            string value,

            string version,

            string versionlessId)
        {
            ContentType = contentType;
            Id = id;
            KeyVaultId = keyVaultId;
            Name = name;
            ResourceId = resourceId;
            ResourceVersionlessId = resourceVersionlessId;
            Tags = tags;
            Value = value;
            Version = version;
            VersionlessId = versionlessId;
        }
    }
}
