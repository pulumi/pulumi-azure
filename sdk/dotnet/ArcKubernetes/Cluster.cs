// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ArcKubernetes
{
    /// <summary>
    /// Manages an Arc Kubernetes Cluster.
    /// 
    /// &gt; **Note:** Installing and configuring the Azure Arc Agent on your Kubernetes Cluster to establish connectivity is outside the scope of this document. For more details refer to [Deploy agents to your cluster](https://learn.microsoft.com/en-us/azure/azure-arc/kubernetes/conceptual-agent-overview#deploy-agents-to-your-cluster) and [Connect an existing Kubernetes Cluster](https://learn.microsoft.com/en-us/azure/azure-arc/kubernetes/quickstart-connect-cluster?tabs=azure-cli#connect-an-existing-kubernetes-cluster). If you encounter issues connecting your Kubernetes Cluster to Azure Arc, we'd recommend opening a ticket with Microsoft Support.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System;
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// 	
    /// string ReadFileBase64(string path) 
    /// {
    ///     return Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)));
    /// }
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleCluster = new Azure.ArcKubernetes.Cluster("exampleCluster", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = "West Europe",
    ///         AgentPublicKeyCertificate = ReadFileBase64("testdata/public.cer"),
    ///         Identity = new Azure.ArcKubernetes.Inputs.ClusterIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "ENV", "Test" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &gt; **Note:** An extensive example on connecting the `azure.arckubernetes.Cluster` to an external kubernetes cluster can be found in the `./examples/arckubernetes` directory within the GitHub Repository.
    /// 
    /// ## Import
    /// 
    /// Arc Kubernetes Cluster can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:arckubernetes/cluster:Cluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Kubernetes/connectedClusters/cluster1
    /// ```
    /// </summary>
    [AzureResourceType("azure:arckubernetes/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the base64-encoded public certificate used by the agent to do the initial handshake to the backend services in Azure. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Output("agentPublicKeyCertificate")]
        public Output<string> AgentPublicKeyCertificate { get; private set; } = null!;

        /// <summary>
        /// Version of the agent running on the cluster resource.
        /// </summary>
        [Output("agentVersion")]
        public Output<string> AgentVersion { get; private set; } = null!;

        /// <summary>
        /// The distribution running on this Arc Kubernetes Cluster.
        /// </summary>
        [Output("distribution")]
        public Output<string> Distribution { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ClusterIdentity> Identity { get; private set; } = null!;

        /// <summary>
        /// The infrastructure on which the Arc Kubernetes Cluster is running on.
        /// </summary>
        [Output("infrastructure")]
        public Output<string> Infrastructure { get; private set; } = null!;

        /// <summary>
        /// The Kubernetes version of the cluster resource.
        /// </summary>
        [Output("kubernetesVersion")]
        public Output<string> KubernetesVersion { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure Region where the Arc Kubernetes Cluster should exist. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name which should be used for this Arc Kubernetes Cluster. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The cluster offering.
        /// </summary>
        [Output("offering")]
        public Output<string> Offering { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where the Arc Kubernetes Cluster should exist. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Arc Kubernetes Cluster.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Number of CPU cores present in the cluster resource.
        /// </summary>
        [Output("totalCoreCount")]
        public Output<int> TotalCoreCount { get; private set; } = null!;

        /// <summary>
        /// Number of nodes present in the cluster resource.
        /// </summary>
        [Output("totalNodeCount")]
        public Output<int> TotalNodeCount { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("azure:arckubernetes/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("azure:arckubernetes/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the base64-encoded public certificate used by the agent to do the initial handshake to the backend services in Azure. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Input("agentPublicKeyCertificate", required: true)]
        public Input<string> AgentPublicKeyCertificate { get; set; } = null!;

        /// <summary>
        /// An `identity` block as defined below. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Input("identity", required: true)]
        public Input<Inputs.ClusterIdentityArgs> Identity { get; set; } = null!;

        /// <summary>
        /// Specifies the Azure Region where the Arc Kubernetes Cluster should exist. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name which should be used for this Arc Kubernetes Cluster. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the Arc Kubernetes Cluster should exist. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Arc Kubernetes Cluster.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the base64-encoded public certificate used by the agent to do the initial handshake to the backend services in Azure. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Input("agentPublicKeyCertificate")]
        public Input<string>? AgentPublicKeyCertificate { get; set; }

        /// <summary>
        /// Version of the agent running on the cluster resource.
        /// </summary>
        [Input("agentVersion")]
        public Input<string>? AgentVersion { get; set; }

        /// <summary>
        /// The distribution running on this Arc Kubernetes Cluster.
        /// </summary>
        [Input("distribution")]
        public Input<string>? Distribution { get; set; }

        /// <summary>
        /// An `identity` block as defined below. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ClusterIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The infrastructure on which the Arc Kubernetes Cluster is running on.
        /// </summary>
        [Input("infrastructure")]
        public Input<string>? Infrastructure { get; set; }

        /// <summary>
        /// The Kubernetes version of the cluster resource.
        /// </summary>
        [Input("kubernetesVersion")]
        public Input<string>? KubernetesVersion { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the Arc Kubernetes Cluster should exist. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name which should be used for this Arc Kubernetes Cluster. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The cluster offering.
        /// </summary>
        [Input("offering")]
        public Input<string>? Offering { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the Arc Kubernetes Cluster should exist. Changing this forces a new Arc Kubernetes Cluster to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Arc Kubernetes Cluster.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Number of CPU cores present in the cluster resource.
        /// </summary>
        [Input("totalCoreCount")]
        public Input<int>? TotalCoreCount { get; set; }

        /// <summary>
        /// Number of nodes present in the cluster resource.
        /// </summary>
        [Input("totalNodeCount")]
        public Input<int>? TotalNodeCount { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
