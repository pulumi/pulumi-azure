// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Healthcare
{
    public static class GetDicomService
    {
        /// <summary>
        /// Use this data source to access information about an existing Healthcare DICOM Service
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Healthcare.GetDicomService.Invoke(new()
        ///     {
        ///         Name = "example-healthcare_dicom_service",
        ///         WorkspaceId = "example_healthcare_workspace",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["azurermHealthcareDicomService"] = example.Apply(getDicomServiceResult =&gt; getDicomServiceResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDicomServiceResult> InvokeAsync(GetDicomServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDicomServiceResult>("azure:healthcare/getDicomService:getDicomService", args ?? new GetDicomServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Healthcare DICOM Service
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Healthcare.GetDicomService.Invoke(new()
        ///     {
        ///         Name = "example-healthcare_dicom_service",
        ///         WorkspaceId = "example_healthcare_workspace",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["azurermHealthcareDicomService"] = example.Apply(getDicomServiceResult =&gt; getDicomServiceResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDicomServiceResult> Invoke(GetDicomServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDicomServiceResult>("azure:healthcare/getDicomService:getDicomService", args ?? new GetDicomServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDicomServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Healthcare DICOM Service
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Healthcare Workspace in which the Healthcare DICOM Service exists.
        /// </summary>
        [Input("workspaceId", required: true)]
        public string WorkspaceId { get; set; } = null!;

        public GetDicomServiceArgs()
        {
        }
        public static new GetDicomServiceArgs Empty => new GetDicomServiceArgs();
    }

    public sealed class GetDicomServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Healthcare DICOM Service
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Healthcare Workspace in which the Healthcare DICOM Service exists.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public GetDicomServiceInvokeArgs()
        {
        }
        public static new GetDicomServiceInvokeArgs Empty => new GetDicomServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetDicomServiceResult
    {
        /// <summary>
        /// The `authentication` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDicomServiceAuthenticationResult> Authentications;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetDicomServiceIdentityResult> Identities;
        /// <summary>
        /// The Azure Region where the Healthcare DICOM Service is located.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetDicomServicePrivateEndpointResult> PrivateEndpoints;
        /// <summary>
        /// The url of the Healthcare DICOM Services.
        /// </summary>
        public readonly string ServiceUrl;
        /// <summary>
        /// A map of tags assigned to the Healthcare DICOM Service.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string WorkspaceId;

        [OutputConstructor]
        private GetDicomServiceResult(
            ImmutableArray<Outputs.GetDicomServiceAuthenticationResult> authentications,

            string id,

            ImmutableArray<Outputs.GetDicomServiceIdentityResult> identities,

            string location,

            string name,

            ImmutableArray<Outputs.GetDicomServicePrivateEndpointResult> privateEndpoints,

            string serviceUrl,

            ImmutableDictionary<string, string> tags,

            string workspaceId)
        {
            Authentications = authentications;
            Id = id;
            Identities = identities;
            Location = location;
            Name = name;
            PrivateEndpoints = privateEndpoints;
            ServiceUrl = serviceUrl;
            Tags = tags;
            WorkspaceId = workspaceId;
        }
    }
}
