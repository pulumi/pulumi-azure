// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Healthcare
{
    /// <summary>
    /// Manages a Healthcare DICOM Service
    /// 
    /// ## Import
    /// 
    /// Healthcare DICOM Service can be imported using the resource`id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:healthcare/dicomService:DicomService example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.HealthcareApis/workspaces/workspace1/dicomServices/service1
    /// ```
    /// </summary>
    [AzureResourceType("azure:healthcare/dicomService:DicomService")]
    public partial class DicomService : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The `authentication` block as defined below.
        /// </summary>
        [Output("authentications")]
        public Output<ImmutableArray<Outputs.DicomServiceAuthentication>> Authentications { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.DicomServiceIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("privateEndpoints")]
        public Output<ImmutableArray<Outputs.DicomServicePrivateEndpoint>> PrivateEndpoints { get; private set; } = null!;

        /// <summary>
        /// Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
        /// </summary>
        [Output("publicNetworkAccessEnabled")]
        public Output<bool?> PublicNetworkAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// The url of the Healthcare DICOM Services.
        /// </summary>
        [Output("serviceUrl")]
        public Output<string> ServiceUrl { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the Healthcare DICOM Service.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the id of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a DicomService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DicomService(string name, DicomServiceArgs args, CustomResourceOptions? options = null)
            : base("azure:healthcare/dicomService:DicomService", name, args ?? new DicomServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DicomService(string name, Input<string> id, DicomServiceState? state = null, CustomResourceOptions? options = null)
            : base("azure:healthcare/dicomService:DicomService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DicomService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DicomService Get(string name, Input<string> id, DicomServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new DicomService(name, id, state, options);
        }
    }

    public sealed class DicomServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.DicomServiceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the Healthcare DICOM Service.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the id of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public DicomServiceArgs()
        {
        }
        public static new DicomServiceArgs Empty => new DicomServiceArgs();
    }

    public sealed class DicomServiceState : global::Pulumi.ResourceArgs
    {
        [Input("authentications")]
        private InputList<Inputs.DicomServiceAuthenticationGetArgs>? _authentications;

        /// <summary>
        /// The `authentication` block as defined below.
        /// </summary>
        public InputList<Inputs.DicomServiceAuthenticationGetArgs> Authentications
        {
            get => _authentications ?? (_authentications = new InputList<Inputs.DicomServiceAuthenticationGetArgs>());
            set => _authentications = value;
        }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.DicomServiceIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateEndpoints")]
        private InputList<Inputs.DicomServicePrivateEndpointGetArgs>? _privateEndpoints;
        public InputList<Inputs.DicomServicePrivateEndpointGetArgs> PrivateEndpoints
        {
            get => _privateEndpoints ?? (_privateEndpoints = new InputList<Inputs.DicomServicePrivateEndpointGetArgs>());
            set => _privateEndpoints = value;
        }

        /// <summary>
        /// Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// The url of the Healthcare DICOM Services.
        /// </summary>
        [Input("serviceUrl")]
        public Input<string>? ServiceUrl { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the Healthcare DICOM Service.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the id of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public DicomServiceState()
        {
        }
        public static new DicomServiceState Empty => new DicomServiceState();
    }
}
