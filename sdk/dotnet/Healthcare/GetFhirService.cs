// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Healthcare
{
    public static class GetFhirService
    {
        /// <summary>
        /// Use this data source to access information about an existing Healthcare FHIR Service(Fast Healthcare Interoperability Resources).
        /// </summary>
        public static Task<GetFhirServiceResult> InvokeAsync(GetFhirServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFhirServiceResult>("azure:healthcare/getFhirService:getFhirService", args ?? new GetFhirServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Healthcare FHIR Service(Fast Healthcare Interoperability Resources).
        /// </summary>
        public static Output<GetFhirServiceResult> Invoke(GetFhirServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFhirServiceResult>("azure:healthcare/getFhirService:getFhirService", args ?? new GetFhirServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFhirServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Healthcare FHIR Service.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// The map of tags assigned to the Healthcare FHIR Service.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// The id of the Healthcare Workspace in which the Healthcare FHIR Service exists.
        /// </summary>
        [Input("workspaceId", required: true)]
        public string WorkspaceId { get; set; } = null!;

        public GetFhirServiceArgs()
        {
        }
        public static new GetFhirServiceArgs Empty => new GetFhirServiceArgs();
    }

    public sealed class GetFhirServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Healthcare FHIR Service.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The map of tags assigned to the Healthcare FHIR Service.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The id of the Healthcare Workspace in which the Healthcare FHIR Service exists.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public GetFhirServiceInvokeArgs()
        {
        }
        public static new GetFhirServiceInvokeArgs Empty => new GetFhirServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetFhirServiceResult
    {
        /// <summary>
        /// The list of the access policies of the service instance.
        /// </summary>
        public readonly ImmutableArray<string> AccessPolicyObjectIds;
        /// <summary>
        /// The `authentication` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFhirServiceAuthenticationResult> Authentications;
        /// <summary>
        /// The name of the storage account which the operation configuration information is exported to.
        /// </summary>
        public readonly string ConfigurationExportStorageAccountName;
        /// <summary>
        /// The list of azure container registry settings used for convert data operation of the service instance.
        /// </summary>
        public readonly ImmutableArray<string> ContainerRegistryLoginServerUrls;
        /// <summary>
        /// The `cors` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFhirServiceCorResult> Cors;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFhirServiceIdentityResult> Identities;
        /// <summary>
        /// The kind of the Healthcare FHIR Service.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The Azure Region where the Healthcare FHIR Service is located.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// The map of tags assigned to the Healthcare FHIR Service.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly string WorkspaceId;

        [OutputConstructor]
        private GetFhirServiceResult(
            ImmutableArray<string> accessPolicyObjectIds,

            ImmutableArray<Outputs.GetFhirServiceAuthenticationResult> authentications,

            string configurationExportStorageAccountName,

            ImmutableArray<string> containerRegistryLoginServerUrls,

            ImmutableArray<Outputs.GetFhirServiceCorResult> cors,

            string id,

            ImmutableArray<Outputs.GetFhirServiceIdentityResult> identities,

            string kind,

            string location,

            string name,

            ImmutableDictionary<string, string>? tags,

            string workspaceId)
        {
            AccessPolicyObjectIds = accessPolicyObjectIds;
            Authentications = authentications;
            ConfigurationExportStorageAccountName = configurationExportStorageAccountName;
            ContainerRegistryLoginServerUrls = containerRegistryLoginServerUrls;
            Cors = cors;
            Id = id;
            Identities = identities;
            Kind = kind;
            Location = location;
            Name = name;
            Tags = tags;
            WorkspaceId = workspaceId;
        }
    }
}
