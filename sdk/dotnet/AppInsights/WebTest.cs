// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppInsights
{
    /// <summary>
    /// Manages an Application Insights WebTest.
    /// 
    /// ## Import
    /// 
    /// Application Insights Web Tests can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appinsights/webTest:WebTest my_test /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/microsoft.insights/webtests/my_test
    /// ```
    /// </summary>
    public partial class WebTest : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Application Insights component on which the WebTest operates. Changing this forces a new resource to be created.
        /// </summary>
        [Output("applicationInsightsId")]
        public Output<string> ApplicationInsightsId { get; private set; } = null!;

        /// <summary>
        /// An XML configuration specification for a WebTest.
        /// </summary>
        [Output("configuration")]
        public Output<string> Configuration { get; private set; } = null!;

        /// <summary>
        /// Purpose/user defined descriptive test for this WebTest.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Is the test actively being monitored.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Interval in seconds between test runs for this WebTest. Default is `300`.
        /// </summary>
        [Output("frequency")]
        public Output<int?> Frequency { get; private set; } = null!;

        /// <summary>
        /// A list of where to physically run the tests from to give global coverage for accessibility of your application.
        /// </summary>
        [Output("geoLocations")]
        public Output<ImmutableArray<string>> GeoLocations { get; private set; } = null!;

        /// <summary>
        /// = (Required) The kind of web test that this web test watches. Choices are `ping` and `multistep`.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The location of the resource group.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Application Insights WebTest. Changing this forces a
        /// new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Allow for retries should this WebTest fail.
        /// </summary>
        [Output("retryEnabled")]
        public Output<bool?> RetryEnabled { get; private set; } = null!;

        [Output("syntheticMonitorId")]
        public Output<string> SyntheticMonitorId { get; private set; } = null!;

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Seconds until this WebTest will timeout and fail. Default is `30`.
        /// </summary>
        [Output("timeout")]
        public Output<int?> Timeout { get; private set; } = null!;


        /// <summary>
        /// Create a WebTest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebTest(string name, WebTestArgs args, CustomResourceOptions? options = null)
            : base("azure:appinsights/webTest:WebTest", name, args ?? new WebTestArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebTest(string name, Input<string> id, WebTestState? state = null, CustomResourceOptions? options = null)
            : base("azure:appinsights/webTest:WebTest", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebTest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebTest Get(string name, Input<string> id, WebTestState? state = null, CustomResourceOptions? options = null)
        {
            return new WebTest(name, id, state, options);
        }
    }

    public sealed class WebTestArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Application Insights component on which the WebTest operates. Changing this forces a new resource to be created.
        /// </summary>
        [Input("applicationInsightsId", required: true)]
        public Input<string> ApplicationInsightsId { get; set; } = null!;

        /// <summary>
        /// An XML configuration specification for a WebTest.
        /// </summary>
        [Input("configuration", required: true)]
        public Input<string> Configuration { get; set; } = null!;

        /// <summary>
        /// Purpose/user defined descriptive test for this WebTest.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Is the test actively being monitored.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Interval in seconds between test runs for this WebTest. Default is `300`.
        /// </summary>
        [Input("frequency")]
        public Input<int>? Frequency { get; set; }

        [Input("geoLocations", required: true)]
        private InputList<string>? _geoLocations;

        /// <summary>
        /// A list of where to physically run the tests from to give global coverage for accessibility of your application.
        /// </summary>
        public InputList<string> GeoLocations
        {
            get => _geoLocations ?? (_geoLocations = new InputList<string>());
            set => _geoLocations = value;
        }

        /// <summary>
        /// = (Required) The kind of web test that this web test watches. Choices are `ping` and `multistep`.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// The location of the resource group.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Application Insights WebTest. Changing this forces a
        /// new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Allow for retries should this WebTest fail.
        /// </summary>
        [Input("retryEnabled")]
        public Input<bool>? RetryEnabled { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Seconds until this WebTest will timeout and fail. Default is `30`.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public WebTestArgs()
        {
        }
    }

    public sealed class WebTestState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Application Insights component on which the WebTest operates. Changing this forces a new resource to be created.
        /// </summary>
        [Input("applicationInsightsId")]
        public Input<string>? ApplicationInsightsId { get; set; }

        /// <summary>
        /// An XML configuration specification for a WebTest.
        /// </summary>
        [Input("configuration")]
        public Input<string>? Configuration { get; set; }

        /// <summary>
        /// Purpose/user defined descriptive test for this WebTest.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Is the test actively being monitored.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Interval in seconds between test runs for this WebTest. Default is `300`.
        /// </summary>
        [Input("frequency")]
        public Input<int>? Frequency { get; set; }

        [Input("geoLocations")]
        private InputList<string>? _geoLocations;

        /// <summary>
        /// A list of where to physically run the tests from to give global coverage for accessibility of your application.
        /// </summary>
        public InputList<string> GeoLocations
        {
            get => _geoLocations ?? (_geoLocations = new InputList<string>());
            set => _geoLocations = value;
        }

        /// <summary>
        /// = (Required) The kind of web test that this web test watches. Choices are `ping` and `multistep`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The location of the resource group.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of the Application Insights WebTest. Changing this forces a
        /// new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Allow for retries should this WebTest fail.
        /// </summary>
        [Input("retryEnabled")]
        public Input<bool>? RetryEnabled { get; set; }

        [Input("syntheticMonitorId")]
        public Input<string>? SyntheticMonitorId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Seconds until this WebTest will timeout and fail. Default is `30`.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public WebTestState()
        {
        }
    }
}
