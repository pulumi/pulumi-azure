// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.AppInsights
{
    /// <summary>
    /// Manages a Application Insights Standard WebTest.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleInsights = new Azure.AppInsights.Insights("exampleInsights", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ApplicationType = "web",
    ///     });
    /// 
    ///     var exampleStandardWebTest = new Azure.AppInsights.StandardWebTest("exampleStandardWebTest", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = "West Europe",
    ///         ApplicationInsightsId = exampleInsights.Id,
    ///         GeoLocations = new[]
    ///         {
    ///             "example",
    ///         },
    ///         Request = new Azure.AppInsights.Inputs.StandardWebTestRequestArgs
    ///         {
    ///             Url = "http://www.example.com",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Application Insights Standard WebTests can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:appinsights/standardWebTest:StandardWebTest example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Insights/webTests/appinsightswebtest
    /// ```
    /// </summary>
    [AzureResourceType("azure:appinsights/standardWebTest:StandardWebTest")]
    public partial class StandardWebTest : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Application Insights instance on which the WebTest operates. Changing this forces a new Application Insights Standard WebTest to be created.
        /// </summary>
        [Output("applicationInsightsId")]
        public Output<string> ApplicationInsightsId { get; private set; } = null!;

        /// <summary>
        /// Purpose/user defined descriptive test for this WebTest.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Should the WebTest be enabled?
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Interval in seconds between test runs for this WebTest. Valid options are `300`, `600` and `900`. Defaults to `300`.
        /// </summary>
        [Output("frequency")]
        public Output<int?> Frequency { get; private set; } = null!;

        /// <summary>
        /// Specifies a list of where to physically run the tests from to give global coverage for accessibility of your application.
        /// 
        /// &gt; **Note:** [Valid options for geo locations are described here](https://docs.microsoft.com/azure/azure-monitor/app/monitor-web-app-availability#location-population-tags)
        /// </summary>
        [Output("geoLocations")]
        public Output<ImmutableArray<string>> GeoLocations { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created. It needs to correlate with location of the parent resource (azurerm_application_insights)
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Application Insights Standard WebTest. Changing this forces a new Application Insights Standard WebTest to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `request` block as defined below.
        /// </summary>
        [Output("request")]
        public Output<Outputs.StandardWebTestRequest> Request { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Should the retry on WebTest failure be enabled?
        /// </summary>
        [Output("retryEnabled")]
        public Output<bool?> RetryEnabled { get; private set; } = null!;

        /// <summary>
        /// Unique ID of this WebTest. This is typically the same value as the Name field.
        /// </summary>
        [Output("syntheticMonitorId")]
        public Output<string> SyntheticMonitorId { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Application Insights Standard WebTest.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Seconds until this WebTest will timeout and fail. Default is `30`.
        /// </summary>
        [Output("timeout")]
        public Output<int?> Timeout { get; private set; } = null!;

        /// <summary>
        /// A `validation_rules` block as defined below.
        /// </summary>
        [Output("validationRules")]
        public Output<Outputs.StandardWebTestValidationRules> ValidationRules { get; private set; } = null!;


        /// <summary>
        /// Create a StandardWebTest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StandardWebTest(string name, StandardWebTestArgs args, CustomResourceOptions? options = null)
            : base("azure:appinsights/standardWebTest:StandardWebTest", name, args ?? new StandardWebTestArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StandardWebTest(string name, Input<string> id, StandardWebTestState? state = null, CustomResourceOptions? options = null)
            : base("azure:appinsights/standardWebTest:StandardWebTest", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StandardWebTest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StandardWebTest Get(string name, Input<string> id, StandardWebTestState? state = null, CustomResourceOptions? options = null)
        {
            return new StandardWebTest(name, id, state, options);
        }
    }

    public sealed class StandardWebTestArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Application Insights instance on which the WebTest operates. Changing this forces a new Application Insights Standard WebTest to be created.
        /// </summary>
        [Input("applicationInsightsId", required: true)]
        public Input<string> ApplicationInsightsId { get; set; } = null!;

        /// <summary>
        /// Purpose/user defined descriptive test for this WebTest.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Should the WebTest be enabled?
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Interval in seconds between test runs for this WebTest. Valid options are `300`, `600` and `900`. Defaults to `300`.
        /// </summary>
        [Input("frequency")]
        public Input<int>? Frequency { get; set; }

        [Input("geoLocations", required: true)]
        private InputList<string>? _geoLocations;

        /// <summary>
        /// Specifies a list of where to physically run the tests from to give global coverage for accessibility of your application.
        /// 
        /// &gt; **Note:** [Valid options for geo locations are described here](https://docs.microsoft.com/azure/azure-monitor/app/monitor-web-app-availability#location-population-tags)
        /// </summary>
        public InputList<string> GeoLocations
        {
            get => _geoLocations ?? (_geoLocations = new InputList<string>());
            set => _geoLocations = value;
        }

        /// <summary>
        /// The Azure Region where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created. It needs to correlate with location of the parent resource (azurerm_application_insights)
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Application Insights Standard WebTest. Changing this forces a new Application Insights Standard WebTest to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `request` block as defined below.
        /// </summary>
        [Input("request", required: true)]
        public Input<Inputs.StandardWebTestRequestArgs> Request { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Should the retry on WebTest failure be enabled?
        /// </summary>
        [Input("retryEnabled")]
        public Input<bool>? RetryEnabled { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Application Insights Standard WebTest.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Seconds until this WebTest will timeout and fail. Default is `30`.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// A `validation_rules` block as defined below.
        /// </summary>
        [Input("validationRules")]
        public Input<Inputs.StandardWebTestValidationRulesArgs>? ValidationRules { get; set; }

        public StandardWebTestArgs()
        {
        }
        public static new StandardWebTestArgs Empty => new StandardWebTestArgs();
    }

    public sealed class StandardWebTestState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Application Insights instance on which the WebTest operates. Changing this forces a new Application Insights Standard WebTest to be created.
        /// </summary>
        [Input("applicationInsightsId")]
        public Input<string>? ApplicationInsightsId { get; set; }

        /// <summary>
        /// Purpose/user defined descriptive test for this WebTest.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Should the WebTest be enabled?
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Interval in seconds between test runs for this WebTest. Valid options are `300`, `600` and `900`. Defaults to `300`.
        /// </summary>
        [Input("frequency")]
        public Input<int>? Frequency { get; set; }

        [Input("geoLocations")]
        private InputList<string>? _geoLocations;

        /// <summary>
        /// Specifies a list of where to physically run the tests from to give global coverage for accessibility of your application.
        /// 
        /// &gt; **Note:** [Valid options for geo locations are described here](https://docs.microsoft.com/azure/azure-monitor/app/monitor-web-app-availability#location-population-tags)
        /// </summary>
        public InputList<string> GeoLocations
        {
            get => _geoLocations ?? (_geoLocations = new InputList<string>());
            set => _geoLocations = value;
        }

        /// <summary>
        /// The Azure Region where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created. It needs to correlate with location of the parent resource (azurerm_application_insights)
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Application Insights Standard WebTest. Changing this forces a new Application Insights Standard WebTest to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `request` block as defined below.
        /// </summary>
        [Input("request")]
        public Input<Inputs.StandardWebTestRequestGetArgs>? Request { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Should the retry on WebTest failure be enabled?
        /// </summary>
        [Input("retryEnabled")]
        public Input<bool>? RetryEnabled { get; set; }

        /// <summary>
        /// Unique ID of this WebTest. This is typically the same value as the Name field.
        /// </summary>
        [Input("syntheticMonitorId")]
        public Input<string>? SyntheticMonitorId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Application Insights Standard WebTest.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Seconds until this WebTest will timeout and fail. Default is `30`.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// A `validation_rules` block as defined below.
        /// </summary>
        [Input("validationRules")]
        public Input<Inputs.StandardWebTestValidationRulesGetArgs>? ValidationRules { get; set; }

        public StandardWebTestState()
        {
        }
        public static new StandardWebTestState Empty => new StandardWebTestState();
    }
}
