// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DesktopVirtualization
{
    /// <summary>
    /// Manages a Virtual Desktop Scaling Plan.
    /// 
    /// ## Disclaimers
    /// 
    /// &gt; **Note** Scaling Plans are currently in preview and are only supported in a limited number of regions. Both the Scaling Plan and any referenced Host Pools must be deployed in a supported region. [Autoscale (preview) for Azure Virtual Desktop host pools](https://docs.microsoft.com/en-us/azure/virtual-desktop/autoscale-scaling-plan).
    /// 
    /// &gt; **Note** Scaling Plans require specific permissions to be granted to the Windows Virtual Desktop application before a 'host_pool' can be configured. [Required Permissions for Scaling Plans](https://docs.microsoft.com/en-us/azure/virtual-desktop/autoscale-scaling-plan#create-a-custom-rbac-role).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleRoleDefinition = new Azure.Authorization.RoleDefinition("exampleRoleDefinition", new Azure.Authorization.RoleDefinitionArgs
    ///         {
    ///             Scope = exampleResourceGroup.Id,
    ///             Description = "AVD AutoScale Role",
    ///             Permissions = 
    ///             {
    ///                 new Azure.Authorization.Inputs.RoleDefinitionPermissionArgs
    ///                 {
    ///                     Actions = 
    ///                     {
    ///                         "Microsoft.Insights/eventtypes/values/read",
    ///                         "Microsoft.Compute/virtualMachines/deallocate/action",
    ///                         "Microsoft.Compute/virtualMachines/restart/action",
    ///                         "Microsoft.Compute/virtualMachines/powerOff/action",
    ///                         "Microsoft.Compute/virtualMachines/start/action",
    ///                         "Microsoft.Compute/virtualMachines/read",
    ///                         "Microsoft.DesktopVirtualization/hostpools/read",
    ///                         "Microsoft.DesktopVirtualization/hostpools/write",
    ///                         "Microsoft.DesktopVirtualization/hostpools/sessionhosts/read",
    ///                         "Microsoft.DesktopVirtualization/hostpools/sessionhosts/write",
    ///                         "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/delete",
    ///                         "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/read",
    ///                         "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/sendMessage/action",
    ///                         "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/read",
    ///                     },
    ///                     NotActions = {},
    ///                 },
    ///             },
    ///             AssignableScopes = 
    ///             {
    ///                 exampleResourceGroup.Id,
    ///             },
    ///         });
    ///         var exampleServicePrincipal = Output.Create(AzureAD.GetServicePrincipal.InvokeAsync(new AzureAD.GetServicePrincipalArgs
    ///         {
    ///             DisplayName = "Windows Virtual Desktop",
    ///         }));
    ///         var exampleAssignment = new Azure.Authorization.Assignment("exampleAssignment", new Azure.Authorization.AssignmentArgs
    ///         {
    ///             Name = random_uuid.Example.Result,
    ///             Scope = exampleResourceGroup.Id,
    ///             RoleDefinitionId = exampleRoleDefinition.RoleDefinitionResourceId,
    ///             PrincipalId = exampleServicePrincipal.Apply(exampleServicePrincipal =&gt; exampleServicePrincipal.Id),
    ///             SkipServicePrincipalAadCheck = true,
    ///         });
    ///         var exampleHostPool = new Azure.DesktopVirtualization.HostPool("exampleHostPool", new Azure.DesktopVirtualization.HostPoolArgs
    ///         {
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Type = "Pooled",
    ///             ValidateEnvironment = true,
    ///             LoadBalancerType = "BreadthFirst",
    ///         });
    ///         var exampleScalingPlan = new Azure.DesktopVirtualization.ScalingPlan("exampleScalingPlan", new Azure.DesktopVirtualization.ScalingPlanArgs
    ///         {
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             FriendlyName = "Scaling Plan Example",
    ///             Description = "Example Scaling Plan",
    ///             TimeZone = "GMT Standard Time",
    ///             Schedules = 
    ///             {
    ///                 new Azure.DesktopVirtualization.Inputs.ScalingPlanScheduleArgs
    ///                 {
    ///                     Name = "Weekdays",
    ///                     DaysOfWeeks = 
    ///                     {
    ///                         "Monday",
    ///                         "Tuesday",
    ///                         "Wednesday",
    ///                         "Thursday",
    ///                         "Friday",
    ///                     },
    ///                     RampUpStartTime = "05:00",
    ///                     RampUpLoadBalancingAlgorithm = "BreadthFirst",
    ///                     RampUpMinimumHostsPercent = 20,
    ///                     RampUpCapacityThresholdPercent = 10,
    ///                     PeakStartTime = "09:00",
    ///                     PeakLoadBalancingAlgorithm = "BreadthFirst",
    ///                     RampDownStartTime = "19:00",
    ///                     RampDownLoadBalancingAlgorithm = "DepthFirst",
    ///                     RampDownMinimumHostsPercent = 10,
    ///                     RampDownForceLogoffUsers = false,
    ///                     RampDownWaitTimeMinutes = 45,
    ///                     RampDownNotificationMessage = "Please log off in the next 45 minutes...",
    ///                     RampDownCapacityThresholdPercent = 5,
    ///                     RampDownStopHostsWhen = "ZeroSessions",
    ///                     OffPeakStartTime = "22:00",
    ///                     OffPeakLoadBalancingAlgorithm = "DepthFirst",
    ///                 },
    ///             },
    ///             HostPools = 
    ///             {
    ///                 new Azure.DesktopVirtualization.Inputs.ScalingPlanHostPoolArgs
    ///                 {
    ///                     HostpoolId = exampleHostPool.Id,
    ///                     ScalingPlanEnabled = true,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Virtual Desktop Scaling Plans can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:desktopvirtualization/scalingPlan:ScalingPlan example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DesktopVirtualization/scalingPlans/plan1
    /// ```
    /// </summary>
    [AzureResourceType("azure:desktopvirtualization/scalingPlan:ScalingPlan")]
    public partial class ScalingPlan : Pulumi.CustomResource
    {
        /// <summary>
        /// A description of the Scaling Plan.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the tag associated with the VMs you want to exclude from autoscaling.
        /// </summary>
        [Output("exclusionTag")]
        public Output<string?> ExclusionTag { get; private set; } = null!;

        /// <summary>
        /// Friendly name of the Scaling Plan.
        /// </summary>
        [Output("friendlyName")]
        public Output<string?> FriendlyName { get; private set; } = null!;

        /// <summary>
        /// One or more `host_pool` blocks as defined below.
        /// </summary>
        [Output("hostPools")]
        public Output<ImmutableArray<Outputs.ScalingPlanHostPool>> HostPools { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Virtual Desktop Scaling Plan  should exist. Changing this forces a new Virtual Desktop Scaling Plan to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Virtual Desktop Scaling Plan . Changing this forces a new Virtual Desktop Scaling Plan to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Virtual Desktop Scaling Plan should exist. Changing this forces a new Virtual Desktop Scaling Plan  to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// One or more `schedule` blocks as defined below.
        /// </summary>
        [Output("schedules")]
        public Output<ImmutableArray<Outputs.ScalingPlanSchedule>> Schedules { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Virtual Desktop Scaling Plan .
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the Time Zone which should be used by the Scaling Plan for time based events, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Output("timeZone")]
        public Output<string> TimeZone { get; private set; } = null!;


        /// <summary>
        /// Create a ScalingPlan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScalingPlan(string name, ScalingPlanArgs args, CustomResourceOptions? options = null)
            : base("azure:desktopvirtualization/scalingPlan:ScalingPlan", name, args ?? new ScalingPlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScalingPlan(string name, Input<string> id, ScalingPlanState? state = null, CustomResourceOptions? options = null)
            : base("azure:desktopvirtualization/scalingPlan:ScalingPlan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScalingPlan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScalingPlan Get(string name, Input<string> id, ScalingPlanState? state = null, CustomResourceOptions? options = null)
        {
            return new ScalingPlan(name, id, state, options);
        }
    }

    public sealed class ScalingPlanArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the Scaling Plan.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the tag associated with the VMs you want to exclude from autoscaling.
        /// </summary>
        [Input("exclusionTag")]
        public Input<string>? ExclusionTag { get; set; }

        /// <summary>
        /// Friendly name of the Scaling Plan.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        [Input("hostPools")]
        private InputList<Inputs.ScalingPlanHostPoolArgs>? _hostPools;

        /// <summary>
        /// One or more `host_pool` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ScalingPlanHostPoolArgs> HostPools
        {
            get => _hostPools ?? (_hostPools = new InputList<Inputs.ScalingPlanHostPoolArgs>());
            set => _hostPools = value;
        }

        /// <summary>
        /// The Azure Region where the Virtual Desktop Scaling Plan  should exist. Changing this forces a new Virtual Desktop Scaling Plan to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Virtual Desktop Scaling Plan . Changing this forces a new Virtual Desktop Scaling Plan to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Virtual Desktop Scaling Plan should exist. Changing this forces a new Virtual Desktop Scaling Plan  to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("schedules", required: true)]
        private InputList<Inputs.ScalingPlanScheduleArgs>? _schedules;

        /// <summary>
        /// One or more `schedule` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ScalingPlanScheduleArgs> Schedules
        {
            get => _schedules ?? (_schedules = new InputList<Inputs.ScalingPlanScheduleArgs>());
            set => _schedules = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Virtual Desktop Scaling Plan .
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the Time Zone which should be used by the Scaling Plan for time based events, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Input("timeZone", required: true)]
        public Input<string> TimeZone { get; set; } = null!;

        public ScalingPlanArgs()
        {
        }
    }

    public sealed class ScalingPlanState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the Scaling Plan.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the tag associated with the VMs you want to exclude from autoscaling.
        /// </summary>
        [Input("exclusionTag")]
        public Input<string>? ExclusionTag { get; set; }

        /// <summary>
        /// Friendly name of the Scaling Plan.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        [Input("hostPools")]
        private InputList<Inputs.ScalingPlanHostPoolGetArgs>? _hostPools;

        /// <summary>
        /// One or more `host_pool` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ScalingPlanHostPoolGetArgs> HostPools
        {
            get => _hostPools ?? (_hostPools = new InputList<Inputs.ScalingPlanHostPoolGetArgs>());
            set => _hostPools = value;
        }

        /// <summary>
        /// The Azure Region where the Virtual Desktop Scaling Plan  should exist. Changing this forces a new Virtual Desktop Scaling Plan to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Virtual Desktop Scaling Plan . Changing this forces a new Virtual Desktop Scaling Plan to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Virtual Desktop Scaling Plan should exist. Changing this forces a new Virtual Desktop Scaling Plan  to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("schedules")]
        private InputList<Inputs.ScalingPlanScheduleGetArgs>? _schedules;

        /// <summary>
        /// One or more `schedule` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ScalingPlanScheduleGetArgs> Schedules
        {
            get => _schedules ?? (_schedules = new InputList<Inputs.ScalingPlanScheduleGetArgs>());
            set => _schedules = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Virtual Desktop Scaling Plan .
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the Time Zone which should be used by the Scaling Plan for time based events, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        public ScalingPlanState()
        {
        }
    }
}
