// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DesktopVirtualization
{
    /// <summary>
    /// Manages a Virtual Desktop Application.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Azure.Core.ResourceGroup("example", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var pooledbreadthfirst = new Azure.DesktopVirtualization.HostPool("pooledbreadthfirst", new Azure.DesktopVirtualization.HostPoolArgs
    ///         {
    ///             Location = example.Location,
    ///             ResourceGroupName = example.Name,
    ///             Type = "Pooled",
    ///             LoadBalancerType = "BreadthFirst",
    ///         });
    ///         var personalautomatic = new Azure.DesktopVirtualization.HostPool("personalautomatic", new Azure.DesktopVirtualization.HostPoolArgs
    ///         {
    ///             Location = example.Location,
    ///             ResourceGroupName = example.Name,
    ///             Type = "Personal",
    ///             PersonalDesktopAssignmentType = "Automatic",
    ///         });
    ///         var remoteapp = new Azure.DesktopVirtualization.ApplicationGroup("remoteapp", new Azure.DesktopVirtualization.ApplicationGroupArgs
    ///         {
    ///             Location = example.Location,
    ///             ResourceGroupName = example.Name,
    ///             Type = "RemoteApp",
    ///             HostPoolId = pooledbreadthfirst.Id,
    ///             FriendlyName = "TestAppGroup",
    ///             Description = "Acceptance Test: An application group",
    ///         });
    ///         var chrome = new Azure.DesktopVirtualization.Application("chrome", new Azure.DesktopVirtualization.ApplicationArgs
    ///         {
    ///             ApplicationGroupId = remoteapp.Id,
    ///             FriendlyName = "Google Chrome",
    ///             Description = "Chromium based web browser",
    ///             Path = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
    ///             CommandLineArgumentPolicy = "DoNotAllow",
    ///             CommandLineArguments = "--incognito",
    ///             ShowInPortal = false,
    ///             IconPath = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
    ///             IconIndex = 0,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Virtual Desktop Application can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:desktopvirtualization/application:Application example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/myapplicationgroup/applications/myapplication
    /// ```
    /// </summary>
    [AzureResourceType("azure:desktopvirtualization/application:Application")]
    public partial class Application : Pulumi.CustomResource
    {
        /// <summary>
        /// Resource ID for a Virtual Desktop Application Group to associate with the
        /// Virtual Desktop Application. Changing the ID forces a new resource to be created.
        /// </summary>
        [Output("applicationGroupId")]
        public Output<string> ApplicationGroupId { get; private set; } = null!;

        /// <summary>
        /// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: `DoNotAllow`, `Allow`, `Require`.
        /// </summary>
        [Output("commandLineArgumentPolicy")]
        public Output<string> CommandLineArgumentPolicy { get; private set; } = null!;

        /// <summary>
        /// Command Line Arguments for Virtual Desktop Application.
        /// </summary>
        [Output("commandLineArguments")]
        public Output<string?> CommandLineArguments { get; private set; } = null!;

        /// <summary>
        /// Option to set a description for the Virtual Desktop Application.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Option to set a friendly name for the Virtual Desktop Application.
        /// </summary>
        [Output("friendlyName")]
        public Output<string> FriendlyName { get; private set; } = null!;

        /// <summary>
        /// The index of the icon you wish to use.
        /// </summary>
        [Output("iconIndex")]
        public Output<int?> IconIndex { get; private set; } = null!;

        /// <summary>
        /// Specifies the path for an icon which will be used for this Virtual Desktop Application.
        /// </summary>
        [Output("iconPath")]
        public Output<string> IconPath { get; private set; } = null!;

        /// <summary>
        /// The name of the Virtual Desktop Application. Changing the name forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The file path location of the app on the Virtual Desktop OS.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to show the RemoteApp program in the RD Web Access server.
        /// </summary>
        [Output("showInPortal")]
        public Output<bool?> ShowInPortal { get; private set; } = null!;


        /// <summary>
        /// Create a Application resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Application(string name, ApplicationArgs args, CustomResourceOptions? options = null)
            : base("azure:desktopvirtualization/application:Application", name, args ?? new ApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Application(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
            : base("azure:desktopvirtualization/application:Application", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Application resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Application Get(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new Application(name, id, state, options);
        }
    }

    public sealed class ApplicationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Resource ID for a Virtual Desktop Application Group to associate with the
        /// Virtual Desktop Application. Changing the ID forces a new resource to be created.
        /// </summary>
        [Input("applicationGroupId", required: true)]
        public Input<string> ApplicationGroupId { get; set; } = null!;

        /// <summary>
        /// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: `DoNotAllow`, `Allow`, `Require`.
        /// </summary>
        [Input("commandLineArgumentPolicy", required: true)]
        public Input<string> CommandLineArgumentPolicy { get; set; } = null!;

        /// <summary>
        /// Command Line Arguments for Virtual Desktop Application.
        /// </summary>
        [Input("commandLineArguments")]
        public Input<string>? CommandLineArguments { get; set; }

        /// <summary>
        /// Option to set a description for the Virtual Desktop Application.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Option to set a friendly name for the Virtual Desktop Application.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        /// <summary>
        /// The index of the icon you wish to use.
        /// </summary>
        [Input("iconIndex")]
        public Input<int>? IconIndex { get; set; }

        /// <summary>
        /// Specifies the path for an icon which will be used for this Virtual Desktop Application.
        /// </summary>
        [Input("iconPath")]
        public Input<string>? IconPath { get; set; }

        /// <summary>
        /// The name of the Virtual Desktop Application. Changing the name forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The file path location of the app on the Virtual Desktop OS.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// Specifies whether to show the RemoteApp program in the RD Web Access server.
        /// </summary>
        [Input("showInPortal")]
        public Input<bool>? ShowInPortal { get; set; }

        public ApplicationArgs()
        {
        }
    }

    public sealed class ApplicationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Resource ID for a Virtual Desktop Application Group to associate with the
        /// Virtual Desktop Application. Changing the ID forces a new resource to be created.
        /// </summary>
        [Input("applicationGroupId")]
        public Input<string>? ApplicationGroupId { get; set; }

        /// <summary>
        /// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: `DoNotAllow`, `Allow`, `Require`.
        /// </summary>
        [Input("commandLineArgumentPolicy")]
        public Input<string>? CommandLineArgumentPolicy { get; set; }

        /// <summary>
        /// Command Line Arguments for Virtual Desktop Application.
        /// </summary>
        [Input("commandLineArguments")]
        public Input<string>? CommandLineArguments { get; set; }

        /// <summary>
        /// Option to set a description for the Virtual Desktop Application.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Option to set a friendly name for the Virtual Desktop Application.
        /// </summary>
        [Input("friendlyName")]
        public Input<string>? FriendlyName { get; set; }

        /// <summary>
        /// The index of the icon you wish to use.
        /// </summary>
        [Input("iconIndex")]
        public Input<int>? IconIndex { get; set; }

        /// <summary>
        /// Specifies the path for an icon which will be used for this Virtual Desktop Application.
        /// </summary>
        [Input("iconPath")]
        public Input<string>? IconPath { get; set; }

        /// <summary>
        /// The name of the Virtual Desktop Application. Changing the name forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The file path location of the app on the Virtual Desktop OS.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Specifies whether to show the RemoteApp program in the RD Web Access server.
        /// </summary>
        [Input("showInPortal")]
        public Input<bool>? ShowInPortal { get; set; }

        public ApplicationState()
        {
        }
    }
}
