// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DesktopVirtualization.Inputs
{

    public sealed class ScalingPlanScheduleArgs : global::Pulumi.ResourceArgs
    {
        [Input("daysOfWeeks", required: true)]
        private InputList<string>? _daysOfWeeks;

        /// <summary>
        /// A list of Days of the Week on which this schedule will be used..Possible values are `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`
        /// </summary>
        public InputList<string> DaysOfWeeks
        {
            get => _daysOfWeeks ?? (_daysOfWeeks = new InputList<string>());
            set => _daysOfWeeks = value;
        }

        /// <summary>
        /// The name of the schedule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The load Balancing Algorithm to use during Off-Peak Hours. Possible values are `DepthFirst` and `BreadthFirst`.
        /// </summary>
        [Input("offPeakLoadBalancingAlgorithm", required: true)]
        public Input<string> OffPeakLoadBalancingAlgorithm { get; set; } = null!;

        /// <summary>
        /// The time at which Off-Peak scaling will begin. This is also the end-time for the Ramp-Down period. The time must be specified in "HH:MM" format.
        /// </summary>
        [Input("offPeakStartTime", required: true)]
        public Input<string> OffPeakStartTime { get; set; } = null!;

        /// <summary>
        /// The load Balancing Algorithm to use during Peak Hours. Possible values are `DepthFirst` and `BreadthFirst`.
        /// </summary>
        [Input("peakLoadBalancingAlgorithm", required: true)]
        public Input<string> PeakLoadBalancingAlgorithm { get; set; } = null!;

        /// <summary>
        /// The time at which Peak scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
        /// </summary>
        [Input("peakStartTime", required: true)]
        public Input<string> PeakStartTime { get; set; } = null!;

        /// <summary>
        /// This is the value in percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-down and off-peak hours. For example, if capacity threshold is specified as 60% and your total host pool capacity is 100 sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of 60 sessions.
        /// </summary>
        [Input("rampDownCapacityThresholdPercent", required: true)]
        public Input<int> RampDownCapacityThresholdPercent { get; set; } = null!;

        /// <summary>
        /// Whether users will be forced to log-off session hosts once the `ramp_down_wait_time_minutes` value has been exceeded during the Ramp-Down period. Possible
        /// </summary>
        [Input("rampDownForceLogoffUsers", required: true)]
        public Input<bool> RampDownForceLogoffUsers { get; set; } = null!;

        /// <summary>
        /// The load Balancing Algorithm to use during the Ramp-Down period. Possible values are `DepthFirst` and `BreadthFirst`.
        /// </summary>
        [Input("rampDownLoadBalancingAlgorithm", required: true)]
        public Input<string> RampDownLoadBalancingAlgorithm { get; set; } = null!;

        /// <summary>
        /// The minimum percentage of session host virtual machines that you would like to get to for ramp-down and off-peak hours. For example, if Minimum percentage of hosts is specified as 10% and total number of session hosts in your host pool is 10, autoscale will ensure a minimum of 1 session host is available to take user connections.
        /// </summary>
        [Input("rampDownMinimumHostsPercent", required: true)]
        public Input<int> RampDownMinimumHostsPercent { get; set; } = null!;

        /// <summary>
        /// The notification message to send to users during Ramp-Down period when they are required to log-off.
        /// </summary>
        [Input("rampDownNotificationMessage", required: true)]
        public Input<string> RampDownNotificationMessage { get; set; } = null!;

        /// <summary>
        /// The time at which Ramp-Down scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
        /// </summary>
        [Input("rampDownStartTime", required: true)]
        public Input<string> RampDownStartTime { get; set; } = null!;

        /// <summary>
        /// Controls Session Host shutdown behaviour during Ramp-Down period. Session Hosts can either be shutdown when all sessions on the Session Host have ended, or when there are no Active sessions left on the Session Host. Possible values are `ZeroSessions` and `ZeroActiveSessions`.
        /// </summary>
        [Input("rampDownStopHostsWhen", required: true)]
        public Input<string> RampDownStopHostsWhen { get; set; } = null!;

        /// <summary>
        /// The number of minutes during Ramp-Down period that autoscale will wait after setting the session host VMs to drain mode, notifying any currently signed in users to save their work before forcing the users to logoff. Once all user sessions on the session host VM have been logged off, Autoscale will shut down the VM.
        /// </summary>
        [Input("rampDownWaitTimeMinutes", required: true)]
        public Input<int> RampDownWaitTimeMinutes { get; set; } = null!;

        /// <summary>
        /// Specify minimum percentage of session host virtual machines to start for ramp-up and peak hours. For example, if Minimum percentage of hosts is specified as 10% and total number of session hosts in your host pool is 10, autoscale will ensure a minimum of 1 session host is available to take user connections.
        /// </summary>
        [Input("rampUpCapacityThresholdPercent")]
        public Input<int>? RampUpCapacityThresholdPercent { get; set; }

        /// <summary>
        /// The load Balancing Algorithm to use during the Ramp-Up period. Possible values are `DepthFirst` and `BreadthFirst`.
        /// </summary>
        [Input("rampUpLoadBalancingAlgorithm", required: true)]
        public Input<string> RampUpLoadBalancingAlgorithm { get; set; } = null!;

        /// <summary>
        /// This is the value of percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-up and peak hours. For example, if capacity threshold is specified as 60% and your total host pool capacity is 100 sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of 60 sessions.
        /// </summary>
        [Input("rampUpMinimumHostsPercent")]
        public Input<int>? RampUpMinimumHostsPercent { get; set; }

        /// <summary>
        /// The time at which Ramp-Up scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
        /// </summary>
        [Input("rampUpStartTime", required: true)]
        public Input<string> RampUpStartTime { get; set; } = null!;

        public ScalingPlanScheduleArgs()
        {
        }
        public static new ScalingPlanScheduleArgs Empty => new ScalingPlanScheduleArgs();
    }
}
