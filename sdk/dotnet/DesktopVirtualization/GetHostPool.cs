// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DesktopVirtualization
{
    public static class GetHostPool
    {
        /// <summary>
        /// Use this data source to access information about an existing Virtual Desktop Host Pool.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.DesktopVirtualization.GetHostPool.Invoke(new()
        ///     {
        ///         Name = "example-pool",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetHostPoolResult> InvokeAsync(GetHostPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHostPoolResult>("azure:desktopvirtualization/getHostPool:getHostPool", args ?? new GetHostPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Virtual Desktop Host Pool.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.DesktopVirtualization.GetHostPool.Invoke(new()
        ///     {
        ///         Name = "example-pool",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetHostPoolResult> Invoke(GetHostPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHostPoolResult>("azure:desktopvirtualization/getHostPool:getHostPool", args ?? new GetHostPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHostPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Virtual Desktop Host Pool to retrieve.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group where the Virtual Desktop Host Pool exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetHostPoolArgs()
        {
        }
        public static new GetHostPoolArgs Empty => new GetHostPoolArgs();
    }

    public sealed class GetHostPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Virtual Desktop Host Pool to retrieve.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group where the Virtual Desktop Host Pool exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetHostPoolInvokeArgs()
        {
        }
        public static new GetHostPoolInvokeArgs Empty => new GetHostPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetHostPoolResult
    {
        /// <summary>
        /// The custom RDP properties string for the Virtual Desktop Host Pool.
        /// </summary>
        public readonly string CustomRdpProperties;
        /// <summary>
        /// The description for the Virtual Desktop Host Pool.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The friendly name for the Virtual Desktop Host Pool.
        /// </summary>
        public readonly string FriendlyName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The type of load balancing performed by the Host Pool
        /// </summary>
        public readonly string LoadBalancerType;
        /// <summary>
        /// The location/region where the Virtual Desktop Host Pool is located.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The maximum number of users that can have concurrent sessions on a session host.
        /// </summary>
        public readonly int MaximumSessionsAllowed;
        public readonly string Name;
        /// <summary>
        /// The type of personal desktop assignment in use by the Host Pool
        /// </summary>
        public readonly string PersonalDesktopAssignmentType;
        /// <summary>
        /// The preferred Application Group type for the Virtual Desktop Host Pool.
        /// </summary>
        public readonly string PreferredAppGroupType;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A `scheduled_agent_updates` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHostPoolScheduledAgentUpdateResult> ScheduledAgentUpdates;
        /// <summary>
        /// Returns `true` if the Start VM on Connection Feature is enabled.
        /// </summary>
        public readonly bool StartVmOnConnect;
        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The type of the Virtual Desktop Host Pool.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Returns `true` if the Host Pool is in Validation mode.
        /// </summary>
        public readonly bool ValidateEnvironment;

        [OutputConstructor]
        private GetHostPoolResult(
            string customRdpProperties,

            string description,

            string friendlyName,

            string id,

            string loadBalancerType,

            string location,

            int maximumSessionsAllowed,

            string name,

            string personalDesktopAssignmentType,

            string preferredAppGroupType,

            string resourceGroupName,

            ImmutableArray<Outputs.GetHostPoolScheduledAgentUpdateResult> scheduledAgentUpdates,

            bool startVmOnConnect,

            ImmutableDictionary<string, string> tags,

            string type,

            bool validateEnvironment)
        {
            CustomRdpProperties = customRdpProperties;
            Description = description;
            FriendlyName = friendlyName;
            Id = id;
            LoadBalancerType = loadBalancerType;
            Location = location;
            MaximumSessionsAllowed = maximumSessionsAllowed;
            Name = name;
            PersonalDesktopAssignmentType = personalDesktopAssignmentType;
            PreferredAppGroupType = preferredAppGroupType;
            ResourceGroupName = resourceGroupName;
            ScheduledAgentUpdates = scheduledAgentUpdates;
            StartVmOnConnect = startVmOnConnect;
            Tags = tags;
            Type = type;
            ValidateEnvironment = validateEnvironment;
        }
    }
}
