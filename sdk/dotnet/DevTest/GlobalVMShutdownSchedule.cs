// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DevTest
{
    /// <summary>
    /// Manages automated shutdown schedules for Azure VMs that are not within an Azure DevTest Lab. While this is part of the DevTest Labs service in Azure,
    /// this resource applies only to standard VMs, not DevTest Lab VMs. To manage automated shutdown schedules for DevTest Lab VMs, reference the
    /// `azure.devtest.Schedule` resource
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "eastus",
    ///         });
    ///         var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new Azure.Network.VirtualNetworkArgs
    ///         {
    ///             AddressSpaces = 
    ///             {
    ///                 "10.0.0.0/16",
    ///             },
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///         });
    ///         var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new Azure.Network.SubnetArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             VirtualNetworkName = exampleVirtualNetwork.Name,
    ///             AddressPrefixes = 
    ///             {
    ///                 "10.0.2.0/24",
    ///             },
    ///         });
    ///         var exampleNetworkInterface = new Azure.Network.NetworkInterface("exampleNetworkInterface", new Azure.Network.NetworkInterfaceArgs
    ///         {
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             IpConfigurations = 
    ///             {
    ///                 new Azure.Network.Inputs.NetworkInterfaceIpConfigurationArgs
    ///                 {
    ///                     Name = "testconfiguration1",
    ///                     SubnetId = exampleSubnet.Id,
    ///                     PrivateIpAddressAllocation = "Dynamic",
    ///                 },
    ///             },
    ///         });
    ///         var exampleLinuxVirtualMachine = new Azure.Compute.LinuxVirtualMachine("exampleLinuxVirtualMachine", new Azure.Compute.LinuxVirtualMachineArgs
    ///         {
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             NetworkInterfaceIds = 
    ///             {
    ///                 exampleNetworkInterface.Id,
    ///             },
    ///             Size = "Standard_B2s",
    ///             SourceImageReference = new Azure.Compute.Inputs.LinuxVirtualMachineSourceImageReferenceArgs
    ///             {
    ///                 Publisher = "Canonical",
    ///                 Offer = "UbuntuServer",
    ///                 Sku = "16.04-LTS",
    ///                 Version = "latest",
    ///             },
    ///             OsDisk = new Azure.Compute.Inputs.LinuxVirtualMachineOsDiskArgs
    ///             {
    ///                 Name = "myosdisk-%d",
    ///                 Caching = "ReadWrite",
    ///                 ManagedDiskType = "Standard_LRS",
    ///             },
    ///             AdminUsername = "testadmin",
    ///             AdminPassword = "Password1234!",
    ///             DisablePasswordAuthentication = false,
    ///         });
    ///         var exampleGlobalVMShutdownSchedule = new Azure.DevTest.GlobalVMShutdownSchedule("exampleGlobalVMShutdownSchedule", new Azure.DevTest.GlobalVMShutdownScheduleArgs
    ///         {
    ///             VirtualMachineId = azurerm_virtual_machine.Example.Id,
    ///             Location = exampleResourceGroup.Location,
    ///             Enabled = true,
    ///             DailyRecurrenceTime = "1100",
    ///             Timezone = "Pacific Standard Time",
    ///             NotificationSettings = new Azure.DevTest.Inputs.GlobalVMShutdownScheduleNotificationSettingsArgs
    ///             {
    ///                 Enabled = true,
    ///                 TimeInMinutes = 60,
    ///                 WebhookUrl = "https://sample-webhook-url.example.com",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing Dev Test Global Shutdown Schedule can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:devtest/globalVMShutdownSchedule:GlobalVMShutdownSchedule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/sample-rg/providers/Microsoft.DevTestLab/schedules/shutdown-computevm-SampleVM
    /// ```
    /// 
    ///  The name of the resource within the `resource id` will always follow the format `shutdown-computevm-&lt;VM Name&gt;` where `&lt;VM Name&gt;` is replaced by the name of the target Virtual Machine
    /// </summary>
    public partial class GlobalVMShutdownSchedule : Pulumi.CustomResource
    {
        /// <summary>
        /// The time each day when the schedule takes effect. Must match the format HHmm where HH is 00-23 and mm is 00-59 (e.g. 0930, 2300, etc.)
        /// </summary>
        [Output("dailyRecurrenceTime")]
        public Output<string> DailyRecurrenceTime { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the schedule. Possible values are `true` and `false`. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The location where the schedule is created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        [Output("notificationSettings")]
        public Output<Outputs.GlobalVMShutdownScheduleNotificationSettings> NotificationSettings { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The time zone ID (e.g. Pacific Standard time). Refer to this guide for a [full list of accepted time zone names](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Output("timezone")]
        public Output<string> Timezone { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the target ARM-based Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Output("virtualMachineId")]
        public Output<string> VirtualMachineId { get; private set; } = null!;


        /// <summary>
        /// Create a GlobalVMShutdownSchedule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GlobalVMShutdownSchedule(string name, GlobalVMShutdownScheduleArgs args, CustomResourceOptions? options = null)
            : base("azure:devtest/globalVMShutdownSchedule:GlobalVMShutdownSchedule", name, args ?? new GlobalVMShutdownScheduleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GlobalVMShutdownSchedule(string name, Input<string> id, GlobalVMShutdownScheduleState? state = null, CustomResourceOptions? options = null)
            : base("azure:devtest/globalVMShutdownSchedule:GlobalVMShutdownSchedule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GlobalVMShutdownSchedule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GlobalVMShutdownSchedule Get(string name, Input<string> id, GlobalVMShutdownScheduleState? state = null, CustomResourceOptions? options = null)
        {
            return new GlobalVMShutdownSchedule(name, id, state, options);
        }
    }

    public sealed class GlobalVMShutdownScheduleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The time each day when the schedule takes effect. Must match the format HHmm where HH is 00-23 and mm is 00-59 (e.g. 0930, 2300, etc.)
        /// </summary>
        [Input("dailyRecurrenceTime", required: true)]
        public Input<string> DailyRecurrenceTime { get; set; } = null!;

        /// <summary>
        /// Whether to enable the schedule. Possible values are `true` and `false`. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The location where the schedule is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("notificationSettings", required: true)]
        public Input<Inputs.GlobalVMShutdownScheduleNotificationSettingsArgs> NotificationSettings { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The time zone ID (e.g. Pacific Standard time). Refer to this guide for a [full list of accepted time zone names](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Input("timezone", required: true)]
        public Input<string> Timezone { get; set; } = null!;

        /// <summary>
        /// The resource ID of the target ARM-based Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("virtualMachineId", required: true)]
        public Input<string> VirtualMachineId { get; set; } = null!;

        public GlobalVMShutdownScheduleArgs()
        {
        }
    }

    public sealed class GlobalVMShutdownScheduleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The time each day when the schedule takes effect. Must match the format HHmm where HH is 00-23 and mm is 00-59 (e.g. 0930, 2300, etc.)
        /// </summary>
        [Input("dailyRecurrenceTime")]
        public Input<string>? DailyRecurrenceTime { get; set; }

        /// <summary>
        /// Whether to enable the schedule. Possible values are `true` and `false`. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The location where the schedule is created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("notificationSettings")]
        public Input<Inputs.GlobalVMShutdownScheduleNotificationSettingsGetArgs>? NotificationSettings { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The time zone ID (e.g. Pacific Standard time). Refer to this guide for a [full list of accepted time zone names](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/).
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// The resource ID of the target ARM-based Virtual Machine. Changing this forces a new resource to be created.
        /// </summary>
        [Input("virtualMachineId")]
        public Input<string>? VirtualMachineId { get; set; }

        public GlobalVMShutdownScheduleState()
        {
        }
    }
}
