// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DevTest
{
    public static class GetVirtualNetwork
    {
        /// <summary>
        /// Use this data source to access information about an existing Dev Test Lab Virtual Network.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.DevTest.GetVirtualNetwork.InvokeAsync(new Azure.DevTest.GetVirtualNetworkArgs
        ///         {
        ///             Name = "example-network",
        ///             LabName = "examplelab",
        ///             ResourceGroupName = "example-resource",
        ///         }));
        ///         this.LabSubnetName = example.Apply(example =&gt; example.AllowedSubnets[0].LabSubnetName);
        ///     }
        /// 
        ///     [Output("labSubnetName")]
        ///     public Output&lt;string&gt; LabSubnetName { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVirtualNetworkResult> InvokeAsync(GetVirtualNetworkArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVirtualNetworkResult>("azure:devtest/getVirtualNetwork:getVirtualNetwork", args ?? new GetVirtualNetworkArgs(), options.WithVersion());
    }


    public sealed class GetVirtualNetworkArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Dev Test Lab.
        /// </summary>
        [Input("labName", required: true)]
        public string LabName { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Virtual Network.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group that contains the Virtual Network.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetVirtualNetworkArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVirtualNetworkResult
    {
        /// <summary>
        /// The list of subnets enabled for the virtual network as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualNetworkAllowedSubnetResult> AllowedSubnets;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string LabName;
        public readonly string Name;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The list of permission overrides for the subnets as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualNetworkSubnetOverrideResult> SubnetOverrides;
        /// <summary>
        /// The unique immutable identifier of the virtual network.
        /// </summary>
        public readonly string UniqueIdentifier;

        [OutputConstructor]
        private GetVirtualNetworkResult(
            ImmutableArray<Outputs.GetVirtualNetworkAllowedSubnetResult> allowedSubnets,

            string id,

            string labName,

            string name,

            string resourceGroupName,

            ImmutableArray<Outputs.GetVirtualNetworkSubnetOverrideResult> subnetOverrides,

            string uniqueIdentifier)
        {
            AllowedSubnets = allowedSubnets;
            Id = id;
            LabName = labName;
            Name = name;
            ResourceGroupName = resourceGroupName;
            SubnetOverrides = subnetOverrides;
            UniqueIdentifier = uniqueIdentifier;
        }
    }
}
