// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.ExpressRoute
{
    public static class GetCircuitPeering
    {
        /// <summary>
        /// Use this data source to access information about an existing ExpressRoute Circuit Peering.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ExpressRoute.GetCircuitPeering.Invoke(new()
        ///     {
        ///         PeeringType = "example-peering",
        ///         ExpressRouteCircuitName = "example-expressroute",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCircuitPeeringResult> InvokeAsync(GetCircuitPeeringArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCircuitPeeringResult>("azure:expressroute/getCircuitPeering:getCircuitPeering", args ?? new GetCircuitPeeringArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing ExpressRoute Circuit Peering.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.ExpressRoute.GetCircuitPeering.Invoke(new()
        ///     {
        ///         PeeringType = "example-peering",
        ///         ExpressRouteCircuitName = "example-expressroute",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCircuitPeeringResult> Invoke(GetCircuitPeeringInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCircuitPeeringResult>("azure:expressroute/getCircuitPeering:getCircuitPeering", args ?? new GetCircuitPeeringInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCircuitPeeringArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
        /// </summary>
        [Input("expressRouteCircuitName", required: true)]
        public string ExpressRouteCircuitName { get; set; } = null!;

        /// <summary>
        /// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
        /// </summary>
        [Input("peeringType", required: true)]
        public string PeeringType { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetCircuitPeeringArgs()
        {
        }
        public static new GetCircuitPeeringArgs Empty => new GetCircuitPeeringArgs();
    }

    public sealed class GetCircuitPeeringInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
        /// </summary>
        [Input("expressRouteCircuitName", required: true)]
        public Input<string> ExpressRouteCircuitName { get; set; } = null!;

        /// <summary>
        /// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
        /// </summary>
        [Input("peeringType", required: true)]
        public Input<string> PeeringType { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetCircuitPeeringInvokeArgs()
        {
        }
        public static new GetCircuitPeeringInvokeArgs Empty => new GetCircuitPeeringInvokeArgs();
    }


    [OutputType]
    public sealed class GetCircuitPeeringResult
    {
        /// <summary>
        /// The ASN used by Azure for the peering.
        /// </summary>
        public readonly int AzureAsn;
        public readonly string ExpressRouteCircuitName;
        public readonly string GatewayManagerEtag;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates if IPv4 is enabled.
        /// </summary>
        public readonly bool Ipv4Enabled;
        public readonly int PeerAsn;
        /// <summary>
        /// The type of the ExpressRoute Circuit Peering.
        /// </summary>
        public readonly string PeeringType;
        /// <summary>
        /// The primary port used by Azure for this peering.
        /// </summary>
        public readonly string PrimaryAzurePort;
        /// <summary>
        /// The primary peer address prefix.
        /// </summary>
        public readonly string PrimaryPeerAddressPrefix;
        public readonly string ResourceGroupName;
        public readonly string RouteFilterId;
        /// <summary>
        /// The secondary port used by Azure for this peering.
        /// </summary>
        public readonly string SecondaryAzurePort;
        /// <summary>
        /// The secondary peer address prefix.
        /// </summary>
        public readonly string SecondaryPeerAddressPrefix;
        public readonly string SharedKey;
        /// <summary>
        /// The VLAN ID used for this peering.
        /// </summary>
        public readonly int VlanId;

        [OutputConstructor]
        private GetCircuitPeeringResult(
            int azureAsn,

            string expressRouteCircuitName,

            string gatewayManagerEtag,

            string id,

            bool ipv4Enabled,

            int peerAsn,

            string peeringType,

            string primaryAzurePort,

            string primaryPeerAddressPrefix,

            string resourceGroupName,

            string routeFilterId,

            string secondaryAzurePort,

            string secondaryPeerAddressPrefix,

            string sharedKey,

            int vlanId)
        {
            AzureAsn = azureAsn;
            ExpressRouteCircuitName = expressRouteCircuitName;
            GatewayManagerEtag = gatewayManagerEtag;
            Id = id;
            Ipv4Enabled = ipv4Enabled;
            PeerAsn = peerAsn;
            PeeringType = peeringType;
            PrimaryAzurePort = primaryAzurePort;
            PrimaryPeerAddressPrefix = primaryPeerAddressPrefix;
            ResourceGroupName = resourceGroupName;
            RouteFilterId = routeFilterId;
            SecondaryAzurePort = secondaryAzurePort;
            SecondaryPeerAddressPrefix = secondaryPeerAddressPrefix;
            SharedKey = sharedKey;
            VlanId = vlanId;
        }
    }
}
