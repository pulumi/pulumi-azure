// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network.Outputs
{

    [OutputType]
    public sealed class GetApplicationGatewayBackendHttpSettingResult
    {
        /// <summary>
        /// The name of the affinity cookie.
        /// </summary>
        public readonly string AffinityCookieName;
        /// <summary>
        /// One or more `authentication_certificate` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetApplicationGatewayBackendHttpSettingAuthenticationCertificateResult> AuthenticationCertificates;
        /// <summary>
        /// A `connection_draining` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetApplicationGatewayBackendHttpSettingConnectionDrainingResult> ConnectionDrainings;
        /// <summary>
        /// Is Cookie-Based Affinity enabled?
        /// </summary>
        public readonly string CookieBasedAffinity;
        /// <summary>
        /// The Hostname which is used for this HTTP Listener.
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// The ID of the Rewrite Rule Set
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of this Application Gateway.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The URL path to rewrite.
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// Whether host header will be picked from the host name of the backend server.
        /// </summary>
        public readonly bool PickHostNameFromBackendAddress;
        /// <summary>
        /// Custom port which is used for probing the backend servers.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The ID of the associated Probe.
        /// </summary>
        public readonly string ProbeId;
        /// <summary>
        /// The name of the associated HTTP Probe.
        /// </summary>
        public readonly string ProbeName;
        /// <summary>
        /// The Protocol used for this Probe.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The request timeout in seconds.
        /// </summary>
        public readonly int RequestTimeout;
        /// <summary>
        /// A list of `trusted_root_certificate` names.
        /// </summary>
        public readonly ImmutableArray<string> TrustedRootCertificateNames;

        [OutputConstructor]
        private GetApplicationGatewayBackendHttpSettingResult(
            string affinityCookieName,

            ImmutableArray<Outputs.GetApplicationGatewayBackendHttpSettingAuthenticationCertificateResult> authenticationCertificates,

            ImmutableArray<Outputs.GetApplicationGatewayBackendHttpSettingConnectionDrainingResult> connectionDrainings,

            string cookieBasedAffinity,

            string hostName,

            string id,

            string name,

            string path,

            bool pickHostNameFromBackendAddress,

            int port,

            string probeId,

            string probeName,

            string protocol,

            int requestTimeout,

            ImmutableArray<string> trustedRootCertificateNames)
        {
            AffinityCookieName = affinityCookieName;
            AuthenticationCertificates = authenticationCertificates;
            ConnectionDrainings = connectionDrainings;
            CookieBasedAffinity = cookieBasedAffinity;
            HostName = hostName;
            Id = id;
            Name = name;
            Path = path;
            PickHostNameFromBackendAddress = pickHostNameFromBackendAddress;
            Port = port;
            ProbeId = probeId;
            ProbeName = probeName;
            Protocol = protocol;
            RequestTimeout = requestTimeout;
            TrustedRootCertificateNames = trustedRootCertificateNames;
        }
    }
}
