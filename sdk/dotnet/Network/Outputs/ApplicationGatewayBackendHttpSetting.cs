// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network.Outputs
{

    [OutputType]
    public sealed class ApplicationGatewayBackendHttpSetting
    {
        /// <summary>
        /// The name of the affinity cookie.
        /// </summary>
        public readonly string? AffinityCookieName;
        /// <summary>
        /// One or more `authentication_certificate` blocks.
        /// </summary>
        public readonly ImmutableArray<Outputs.ApplicationGatewayBackendHttpSettingAuthenticationCertificate> AuthenticationCertificates;
        /// <summary>
        /// A `connection_draining` block as defined below.
        /// </summary>
        public readonly Outputs.ApplicationGatewayBackendHttpSettingConnectionDraining? ConnectionDraining;
        /// <summary>
        /// Is Cookie-Based Affinity enabled? Possible values are `Enabled` and `Disabled`.
        /// </summary>
        public readonly string CookieBasedAffinity;
        /// <summary>
        /// Host header to be sent to the backend servers. Cannot be set if `pick_host_name_from_backend_address` is set to `true`.
        /// </summary>
        public readonly string? HostName;
        /// <summary>
        /// The ID of the Rewrite Rule Set
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The name of the Backend HTTP Settings Collection.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Path which should be used as a prefix for all HTTP requests.
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// Whether host header should be picked from the host name of the backend server. Defaults to `false`.
        /// </summary>
        public readonly bool? PickHostNameFromBackendAddress;
        /// <summary>
        /// The port used for this Frontend Port.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The ID of the associated Probe.
        /// </summary>
        public readonly string? ProbeId;
        /// <summary>
        /// The name of an associated HTTP Probe.
        /// </summary>
        public readonly string? ProbeName;
        /// <summary>
        /// The Protocol to use for this HTTP Listener. Possible values are `Http` and `Https`.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The request timeout in seconds, which must be between 1 and 86400 seconds.
        /// </summary>
        public readonly int? RequestTimeout;
        /// <summary>
        /// A list of `trusted_root_certificate` names.
        /// </summary>
        public readonly ImmutableArray<string> TrustedRootCertificateNames;

        [OutputConstructor]
        private ApplicationGatewayBackendHttpSetting(
            string? affinityCookieName,

            ImmutableArray<Outputs.ApplicationGatewayBackendHttpSettingAuthenticationCertificate> authenticationCertificates,

            Outputs.ApplicationGatewayBackendHttpSettingConnectionDraining? connectionDraining,

            string cookieBasedAffinity,

            string? hostName,

            string? id,

            string name,

            string? path,

            bool? pickHostNameFromBackendAddress,

            int port,

            string? probeId,

            string? probeName,

            string protocol,

            int? requestTimeout,

            ImmutableArray<string> trustedRootCertificateNames)
        {
            AffinityCookieName = affinityCookieName;
            AuthenticationCertificates = authenticationCertificates;
            ConnectionDraining = connectionDraining;
            CookieBasedAffinity = cookieBasedAffinity;
            HostName = hostName;
            Id = id;
            Name = name;
            Path = path;
            PickHostNameFromBackendAddress = pickHostNameFromBackendAddress;
            Port = port;
            ProbeId = probeId;
            ProbeName = probeName;
            Protocol = protocol;
            RequestTimeout = requestTimeout;
            TrustedRootCertificateNames = trustedRootCertificateNames;
        }
    }
}
