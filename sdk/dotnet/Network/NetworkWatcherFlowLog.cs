// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages a Network Watcher Flow Log.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testResourceGroup = new Azure.Core.ResourceGroup("testResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "eastus",
    ///         });
    ///         var testNetworkSecurityGroup = new Azure.Network.NetworkSecurityGroup("testNetworkSecurityGroup", new Azure.Network.NetworkSecurityGroupArgs
    ///         {
    ///             Location = testResourceGroup.Location,
    ///             ResourceGroupName = testResourceGroup.Name,
    ///         });
    ///         var testNetworkWatcher = new Azure.Network.NetworkWatcher("testNetworkWatcher", new Azure.Network.NetworkWatcherArgs
    ///         {
    ///             Location = testResourceGroup.Location,
    ///             ResourceGroupName = testResourceGroup.Name,
    ///         });
    ///         var testAccount = new Azure.Storage.Account("testAccount", new Azure.Storage.AccountArgs
    ///         {
    ///             ResourceGroupName = testResourceGroup.Name,
    ///             Location = testResourceGroup.Location,
    ///             AccountTier = "Standard",
    ///             AccountKind = "StorageV2",
    ///             AccountReplicationType = "LRS",
    ///             EnableHttpsTrafficOnly = true,
    ///         });
    ///         var testAnalyticsWorkspace = new Azure.OperationalInsights.AnalyticsWorkspace("testAnalyticsWorkspace", new Azure.OperationalInsights.AnalyticsWorkspaceArgs
    ///         {
    ///             Location = testResourceGroup.Location,
    ///             ResourceGroupName = testResourceGroup.Name,
    ///             Sku = "PerGB2018",
    ///         });
    ///         var testNetworkWatcherFlowLog = new Azure.Network.NetworkWatcherFlowLog("testNetworkWatcherFlowLog", new Azure.Network.NetworkWatcherFlowLogArgs
    ///         {
    ///             NetworkWatcherName = testNetworkWatcher.Name,
    ///             ResourceGroupName = testResourceGroup.Name,
    ///             NetworkSecurityGroupId = testNetworkSecurityGroup.Id,
    ///             StorageAccountId = testAccount.Id,
    ///             Enabled = true,
    ///             RetentionPolicy = new Azure.Network.Inputs.NetworkWatcherFlowLogRetentionPolicyArgs
    ///             {
    ///                 Enabled = true,
    ///                 Days = 7,
    ///             },
    ///             TrafficAnalytics = new Azure.Network.Inputs.NetworkWatcherFlowLogTrafficAnalyticsArgs
    ///             {
    ///                 Enabled = true,
    ///                 WorkspaceId = testAnalyticsWorkspace.WorkspaceId,
    ///                 WorkspaceRegion = testAnalyticsWorkspace.Location,
    ///                 WorkspaceResourceId = testAnalyticsWorkspace.Id,
    ///                 IntervalInMinutes = 10,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Network Watcher Flow Logs can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:network/networkWatcherFlowLog:NetworkWatcherFlowLog watcher1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/networkWatchers/watcher1
    /// ```
    /// </summary>
    public partial class NetworkWatcherFlowLog : Pulumi.CustomResource
    {
        /// <summary>
        /// Boolean flag to enable/disable traffic analytics.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the Network Security Group for which to enable flow logs for. Changing this forces a new resource to be created.
        /// </summary>
        [Output("networkSecurityGroupId")]
        public Output<string> NetworkSecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// The name of the Network Watcher. Changing this forces a new resource to be created.
        /// </summary>
        [Output("networkWatcherName")]
        public Output<string> NetworkWatcherName { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which the Network Watcher was deployed. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `retention_policy` block as documented below.
        /// </summary>
        [Output("retentionPolicy")]
        public Output<Outputs.NetworkWatcherFlowLogRetentionPolicy> RetentionPolicy { get; private set; } = null!;

        /// <summary>
        /// The ID of the Storage Account where flow logs are stored.
        /// </summary>
        [Output("storageAccountId")]
        public Output<string> StorageAccountId { get; private set; } = null!;

        /// <summary>
        /// A `traffic_analytics` block as documented below.
        /// </summary>
        [Output("trafficAnalytics")]
        public Output<Outputs.NetworkWatcherFlowLogTrafficAnalytics?> TrafficAnalytics { get; private set; } = null!;

        /// <summary>
        /// The version (revision) of the flow log. Possible values are `1` and `2`.
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkWatcherFlowLog resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkWatcherFlowLog(string name, NetworkWatcherFlowLogArgs args, CustomResourceOptions? options = null)
            : base("azure:network/networkWatcherFlowLog:NetworkWatcherFlowLog", name, args ?? new NetworkWatcherFlowLogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkWatcherFlowLog(string name, Input<string> id, NetworkWatcherFlowLogState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/networkWatcherFlowLog:NetworkWatcherFlowLog", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkWatcherFlowLog resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkWatcherFlowLog Get(string name, Input<string> id, NetworkWatcherFlowLogState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkWatcherFlowLog(name, id, state, options);
        }
    }

    public sealed class NetworkWatcherFlowLogArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Boolean flag to enable/disable traffic analytics.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The ID of the Network Security Group for which to enable flow logs for. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkSecurityGroupId", required: true)]
        public Input<string> NetworkSecurityGroupId { get; set; } = null!;

        /// <summary>
        /// The name of the Network Watcher. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkWatcherName", required: true)]
        public Input<string> NetworkWatcherName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which the Network Watcher was deployed. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `retention_policy` block as documented below.
        /// </summary>
        [Input("retentionPolicy", required: true)]
        public Input<Inputs.NetworkWatcherFlowLogRetentionPolicyArgs> RetentionPolicy { get; set; } = null!;

        /// <summary>
        /// The ID of the Storage Account where flow logs are stored.
        /// </summary>
        [Input("storageAccountId", required: true)]
        public Input<string> StorageAccountId { get; set; } = null!;

        /// <summary>
        /// A `traffic_analytics` block as documented below.
        /// </summary>
        [Input("trafficAnalytics")]
        public Input<Inputs.NetworkWatcherFlowLogTrafficAnalyticsArgs>? TrafficAnalytics { get; set; }

        /// <summary>
        /// The version (revision) of the flow log. Possible values are `1` and `2`.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public NetworkWatcherFlowLogArgs()
        {
        }
    }

    public sealed class NetworkWatcherFlowLogState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Boolean flag to enable/disable traffic analytics.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID of the Network Security Group for which to enable flow logs for. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkSecurityGroupId")]
        public Input<string>? NetworkSecurityGroupId { get; set; }

        /// <summary>
        /// The name of the Network Watcher. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkWatcherName")]
        public Input<string>? NetworkWatcherName { get; set; }

        /// <summary>
        /// The name of the resource group in which the Network Watcher was deployed. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `retention_policy` block as documented below.
        /// </summary>
        [Input("retentionPolicy")]
        public Input<Inputs.NetworkWatcherFlowLogRetentionPolicyGetArgs>? RetentionPolicy { get; set; }

        /// <summary>
        /// The ID of the Storage Account where flow logs are stored.
        /// </summary>
        [Input("storageAccountId")]
        public Input<string>? StorageAccountId { get; set; }

        /// <summary>
        /// A `traffic_analytics` block as documented below.
        /// </summary>
        [Input("trafficAnalytics")]
        public Input<Inputs.NetworkWatcherFlowLogTrafficAnalyticsGetArgs>? TrafficAnalytics { get; set; }

        /// <summary>
        /// The version (revision) of the flow log. Possible values are `1` and `2`.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public NetworkWatcherFlowLogState()
        {
        }
    }
}
