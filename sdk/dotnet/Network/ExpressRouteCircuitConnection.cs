// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages an Express Route Circuit Connection.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleExpressRoutePort = new Azure.Network.ExpressRoutePort("exampleExpressRoutePort", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         PeeringLocation = "Equinix-Seattle-SE2",
    ///         BandwidthInGbps = 10,
    ///         Encapsulation = "Dot1Q",
    ///     });
    /// 
    ///     var exampleExpressRouteCircuit = new Azure.Network.ExpressRouteCircuit("exampleExpressRouteCircuit", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ExpressRoutePortId = exampleExpressRoutePort.Id,
    ///         BandwidthInGbps = 5,
    ///         Sku = new Azure.Network.Inputs.ExpressRouteCircuitSkuArgs
    ///         {
    ///             Tier = "Standard",
    ///             Family = "MeteredData",
    ///         },
    ///     });
    /// 
    ///     var example2ExpressRoutePort = new Azure.Network.ExpressRoutePort("example2ExpressRoutePort", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         PeeringLocation = "Allied-Toronto-King-West",
    ///         BandwidthInGbps = 10,
    ///         Encapsulation = "Dot1Q",
    ///     });
    /// 
    ///     var example2ExpressRouteCircuit = new Azure.Network.ExpressRouteCircuit("example2ExpressRouteCircuit", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ExpressRoutePortId = example2ExpressRoutePort.Id,
    ///         BandwidthInGbps = 5,
    ///         Sku = new Azure.Network.Inputs.ExpressRouteCircuitSkuArgs
    ///         {
    ///             Tier = "Standard",
    ///             Family = "MeteredData",
    ///         },
    ///     });
    /// 
    ///     var exampleExpressRouteCircuitPeering = new Azure.Network.ExpressRouteCircuitPeering("exampleExpressRouteCircuitPeering", new()
    ///     {
    ///         PeeringType = "AzurePrivatePeering",
    ///         ExpressRouteCircuitName = exampleExpressRouteCircuit.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         SharedKey = "ItsASecret",
    ///         PeerAsn = 100,
    ///         PrimaryPeerAddressPrefix = "192.168.1.0/30",
    ///         SecondaryPeerAddressPrefix = "192.168.1.0/30",
    ///         VlanId = 100,
    ///     });
    /// 
    ///     var example2ExpressRouteCircuitPeering = new Azure.Network.ExpressRouteCircuitPeering("example2ExpressRouteCircuitPeering", new()
    ///     {
    ///         PeeringType = "AzurePrivatePeering",
    ///         ExpressRouteCircuitName = example2ExpressRouteCircuit.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         SharedKey = "ItsASecret",
    ///         PeerAsn = 100,
    ///         PrimaryPeerAddressPrefix = "192.168.1.0/30",
    ///         SecondaryPeerAddressPrefix = "192.168.1.0/30",
    ///         VlanId = 100,
    ///     });
    /// 
    ///     var exampleExpressRouteCircuitConnection = new Azure.Network.ExpressRouteCircuitConnection("exampleExpressRouteCircuitConnection", new()
    ///     {
    ///         PeeringId = exampleExpressRouteCircuitPeering.Id,
    ///         PeerPeeringId = example2ExpressRouteCircuitPeering.Id,
    ///         AddressPrefixIpv4 = "192.169.9.0/29",
    ///         AuthorizationKey = "846a1918-b7a2-4917-b43c-8c4cdaee006a",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Express Route Circuit Connections can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:network/expressRouteCircuitConnection:ExpressRouteCircuitConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/expressRouteCircuits/circuit1/peerings/peering1/connections/connection1
    /// ```
    /// </summary>
    [AzureResourceType("azure:network/expressRouteCircuitConnection:ExpressRouteCircuitConnection")]
    public partial class ExpressRouteCircuitConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The IPv4 address space from which to allocate customer address for global reach. Changing this forces a new Express Route Circuit Connection to be created.
        /// </summary>
        [Output("addressPrefixIpv4")]
        public Output<string> AddressPrefixIpv4 { get; private set; } = null!;

        /// <summary>
        /// The IPv6 address space from which to allocate customer addresses for global reach.
        /// </summary>
        [Output("addressPrefixIpv6")]
        public Output<string?> AddressPrefixIpv6 { get; private set; } = null!;

        /// <summary>
        /// The authorization key which is associated with the Express Route Circuit Connection.
        /// </summary>
        [Output("authorizationKey")]
        public Output<string?> AuthorizationKey { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Express Route Circuit Connection. Changing this forces a new Express Route Circuit Connection to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the peered Express Route Circuit Private Peering. Changing this forces a new Express Route Circuit Connection to be created.
        /// </summary>
        [Output("peerPeeringId")]
        public Output<string> PeerPeeringId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Express Route Circuit Private Peering that this Express Route Circuit Connection connects with. Changing this forces a new Express Route Circuit Connection to be created.
        /// </summary>
        [Output("peeringId")]
        public Output<string> PeeringId { get; private set; } = null!;


        /// <summary>
        /// Create a ExpressRouteCircuitConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExpressRouteCircuitConnection(string name, ExpressRouteCircuitConnectionArgs args, CustomResourceOptions? options = null)
            : base("azure:network/expressRouteCircuitConnection:ExpressRouteCircuitConnection", name, args ?? new ExpressRouteCircuitConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExpressRouteCircuitConnection(string name, Input<string> id, ExpressRouteCircuitConnectionState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/expressRouteCircuitConnection:ExpressRouteCircuitConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "authorizationKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExpressRouteCircuitConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExpressRouteCircuitConnection Get(string name, Input<string> id, ExpressRouteCircuitConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new ExpressRouteCircuitConnection(name, id, state, options);
        }
    }

    public sealed class ExpressRouteCircuitConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IPv4 address space from which to allocate customer address for global reach. Changing this forces a new Express Route Circuit Connection to be created.
        /// </summary>
        [Input("addressPrefixIpv4", required: true)]
        public Input<string> AddressPrefixIpv4 { get; set; } = null!;

        /// <summary>
        /// The IPv6 address space from which to allocate customer addresses for global reach.
        /// </summary>
        [Input("addressPrefixIpv6")]
        public Input<string>? AddressPrefixIpv6 { get; set; }

        [Input("authorizationKey")]
        private Input<string>? _authorizationKey;

        /// <summary>
        /// The authorization key which is associated with the Express Route Circuit Connection.
        /// </summary>
        public Input<string>? AuthorizationKey
        {
            get => _authorizationKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authorizationKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name which should be used for this Express Route Circuit Connection. Changing this forces a new Express Route Circuit Connection to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the peered Express Route Circuit Private Peering. Changing this forces a new Express Route Circuit Connection to be created.
        /// </summary>
        [Input("peerPeeringId", required: true)]
        public Input<string> PeerPeeringId { get; set; } = null!;

        /// <summary>
        /// The ID of the Express Route Circuit Private Peering that this Express Route Circuit Connection connects with. Changing this forces a new Express Route Circuit Connection to be created.
        /// </summary>
        [Input("peeringId", required: true)]
        public Input<string> PeeringId { get; set; } = null!;

        public ExpressRouteCircuitConnectionArgs()
        {
        }
        public static new ExpressRouteCircuitConnectionArgs Empty => new ExpressRouteCircuitConnectionArgs();
    }

    public sealed class ExpressRouteCircuitConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IPv4 address space from which to allocate customer address for global reach. Changing this forces a new Express Route Circuit Connection to be created.
        /// </summary>
        [Input("addressPrefixIpv4")]
        public Input<string>? AddressPrefixIpv4 { get; set; }

        /// <summary>
        /// The IPv6 address space from which to allocate customer addresses for global reach.
        /// </summary>
        [Input("addressPrefixIpv6")]
        public Input<string>? AddressPrefixIpv6 { get; set; }

        [Input("authorizationKey")]
        private Input<string>? _authorizationKey;

        /// <summary>
        /// The authorization key which is associated with the Express Route Circuit Connection.
        /// </summary>
        public Input<string>? AuthorizationKey
        {
            get => _authorizationKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authorizationKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name which should be used for this Express Route Circuit Connection. Changing this forces a new Express Route Circuit Connection to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the peered Express Route Circuit Private Peering. Changing this forces a new Express Route Circuit Connection to be created.
        /// </summary>
        [Input("peerPeeringId")]
        public Input<string>? PeerPeeringId { get; set; }

        /// <summary>
        /// The ID of the Express Route Circuit Private Peering that this Express Route Circuit Connection connects with. Changing this forces a new Express Route Circuit Connection to be created.
        /// </summary>
        [Input("peeringId")]
        public Input<string>? PeeringId { get; set; }

        public ExpressRouteCircuitConnectionState()
        {
        }
        public static new ExpressRouteCircuitConnectionState Empty => new ExpressRouteCircuitConnectionState();
    }
}
