// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    public static class GetExpressRouteCircuit
    {
        /// <summary>
        /// Use this data source to access information about an existing ExpressRoute circuit.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetExpressRouteCircuit.Invoke(new()
        ///     {
        ///         ResourceGroupName = azurerm_resource_group.Example.Name,
        ///         Name = azurerm_express_route_circuit.Example.Name,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["expressRouteCircuitId"] = example.Apply(getExpressRouteCircuitResult =&gt; getExpressRouteCircuitResult.Id),
        ///         ["serviceKey"] = example.Apply(getExpressRouteCircuitResult =&gt; getExpressRouteCircuitResult.ServiceKey),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetExpressRouteCircuitResult> InvokeAsync(GetExpressRouteCircuitArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetExpressRouteCircuitResult>("azure:network/getExpressRouteCircuit:getExpressRouteCircuit", args ?? new GetExpressRouteCircuitArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing ExpressRoute circuit.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetExpressRouteCircuit.Invoke(new()
        ///     {
        ///         ResourceGroupName = azurerm_resource_group.Example.Name,
        ///         Name = azurerm_express_route_circuit.Example.Name,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["expressRouteCircuitId"] = example.Apply(getExpressRouteCircuitResult =&gt; getExpressRouteCircuitResult.Id),
        ///         ["serviceKey"] = example.Apply(getExpressRouteCircuitResult =&gt; getExpressRouteCircuitResult.ServiceKey),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetExpressRouteCircuitResult> Invoke(GetExpressRouteCircuitInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetExpressRouteCircuitResult>("azure:network/getExpressRouteCircuit:getExpressRouteCircuit", args ?? new GetExpressRouteCircuitInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExpressRouteCircuitArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the ExpressRoute circuit.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the ExpressRoute circuit exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetExpressRouteCircuitArgs()
        {
        }
        public static new GetExpressRouteCircuitArgs Empty => new GetExpressRouteCircuitArgs();
    }

    public sealed class GetExpressRouteCircuitInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the ExpressRoute circuit.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the ExpressRoute circuit exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetExpressRouteCircuitInvokeArgs()
        {
        }
        public static new GetExpressRouteCircuitInvokeArgs Empty => new GetExpressRouteCircuitInvokeArgs();
    }


    [OutputType]
    public sealed class GetExpressRouteCircuitResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure location where the ExpressRoute circuit exists
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// A `peerings` block for the ExpressRoute circuit as documented below
        /// </summary>
        public readonly ImmutableArray<Outputs.GetExpressRouteCircuitPeeringResult> Peerings;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The string needed by the service provider to provision the ExpressRoute circuit.
        /// </summary>
        public readonly string ServiceKey;
        /// <summary>
        /// A `service_provider_properties` block for the ExpressRoute circuit as documented below
        /// </summary>
        public readonly ImmutableArray<Outputs.GetExpressRouteCircuitServiceProviderPropertyResult> ServiceProviderProperties;
        /// <summary>
        /// The ExpressRoute circuit provisioning state from your chosen service provider. Possible values are `NotProvisioned`, `Provisioning`, `Provisioned`, and `Deprovisioning`.
        /// </summary>
        public readonly string ServiceProviderProvisioningState;
        /// <summary>
        /// A `sku` block for the ExpressRoute circuit as documented below.
        /// </summary>
        public readonly Outputs.GetExpressRouteCircuitSkuResult Sku;

        [OutputConstructor]
        private GetExpressRouteCircuitResult(
            string id,

            string location,

            string name,

            ImmutableArray<Outputs.GetExpressRouteCircuitPeeringResult> peerings,

            string resourceGroupName,

            string serviceKey,

            ImmutableArray<Outputs.GetExpressRouteCircuitServiceProviderPropertyResult> serviceProviderProperties,

            string serviceProviderProvisioningState,

            Outputs.GetExpressRouteCircuitSkuResult sku)
        {
            Id = id;
            Location = location;
            Name = name;
            Peerings = peerings;
            ResourceGroupName = resourceGroupName;
            ServiceKey = serviceKey;
            ServiceProviderProperties = serviceProviderProperties;
            ServiceProviderProvisioningState = serviceProviderProvisioningState;
            Sku = sku;
        }
    }
}
