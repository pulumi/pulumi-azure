// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    public static class GetVirtualWan
    {
        /// <summary>
        /// Use this data source to access information about an existing Virtual Wan.
        /// </summary>
        public static Task<GetVirtualWanResult> InvokeAsync(GetVirtualWanArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVirtualWanResult>("azure:network/getVirtualWan:getVirtualWan", args ?? new GetVirtualWanArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Virtual Wan.
        /// </summary>
        public static Output<GetVirtualWanResult> Invoke(GetVirtualWanInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVirtualWanResult>("azure:network/getVirtualWan:getVirtualWan", args ?? new GetVirtualWanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualWanArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Virtual Wan.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Virtual Wan exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetVirtualWanArgs()
        {
        }
        public static new GetVirtualWanArgs Empty => new GetVirtualWanArgs();
    }

    public sealed class GetVirtualWanInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Virtual Wan.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Virtual Wan exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetVirtualWanInvokeArgs()
        {
        }
        public static new GetVirtualWanInvokeArgs Empty => new GetVirtualWanInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualWanResult
    {
        /// <summary>
        /// Is branch to branch traffic is allowed?
        /// </summary>
        public readonly bool AllowBranchToBranchTraffic;
        /// <summary>
        /// Is VPN Encryption disabled?
        /// </summary>
        public readonly bool DisableVpnEncryption;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Region where the Virtual Wan exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// The Office365 Local Breakout Category.
        /// </summary>
        public readonly string Office365LocalBreakoutCategory;
        public readonly string ResourceGroupName;
        /// <summary>
        /// Type of Virtual Wan (Basic or Standard).
        /// </summary>
        public readonly string Sku;
        /// <summary>
        /// A mapping of tags assigned to the Virtual Wan.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// A list of Virtual Hubs IDs attached to this Virtual WAN.
        /// </summary>
        public readonly ImmutableArray<string> VirtualHubIds;
        /// <summary>
        /// A list of VPN Site IDs attached to this Virtual WAN.
        /// </summary>
        public readonly ImmutableArray<string> VpnSiteIds;

        [OutputConstructor]
        private GetVirtualWanResult(
            bool allowBranchToBranchTraffic,

            bool disableVpnEncryption,

            string id,

            string location,

            string name,

            string office365LocalBreakoutCategory,

            string resourceGroupName,

            string sku,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<string> virtualHubIds,

            ImmutableArray<string> vpnSiteIds)
        {
            AllowBranchToBranchTraffic = allowBranchToBranchTraffic;
            DisableVpnEncryption = disableVpnEncryption;
            Id = id;
            Location = location;
            Name = name;
            Office365LocalBreakoutCategory = office365LocalBreakoutCategory;
            ResourceGroupName = resourceGroupName;
            Sku = sku;
            Tags = tags;
            VirtualHubIds = virtualHubIds;
            VpnSiteIds = vpnSiteIds;
        }
    }
}
