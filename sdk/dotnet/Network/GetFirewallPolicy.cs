// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Azure.Network
{
    public static class GetFirewallPolicy
    {
        /// <summary>
        /// Use this data source to access information about an existing Firewall Policy.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.Network.GetFirewallPolicy.InvokeAsync(new Azure.Network.GetFirewallPolicyArgs
        ///         {
        ///             Name = "existing",
        ///             ResourceGroupName = "existing",
        ///         }));
        ///         this.Id = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFirewallPolicyResult> InvokeAsync(GetFirewallPolicyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFirewallPolicyResult>("azure:network/getFirewallPolicy:getFirewallPolicy", args ?? new GetFirewallPolicyArgs(), options.WithVersion());

        /// <summary>
        /// Use this data source to access information about an existing Firewall Policy.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.Network.GetFirewallPolicy.InvokeAsync(new Azure.Network.GetFirewallPolicyArgs
        ///         {
        ///             Name = "existing",
        ///             ResourceGroupName = "existing",
        ///         }));
        ///         this.Id = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("id")]
        ///     public Output&lt;string&gt; Id { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetFirewallPolicyResult> Invoke(GetFirewallPolicyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetFirewallPolicyResult>("azure:network/getFirewallPolicy:getFirewallPolicy", args ?? new GetFirewallPolicyInvokeArgs(), options.WithVersion());
    }


    public sealed class GetFirewallPolicyArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Firewall Policy.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Firewall Policy exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetFirewallPolicyArgs()
        {
        }
    }

    public sealed class GetFirewallPolicyInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Firewall Policy.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Firewall Policy exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetFirewallPolicyInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetFirewallPolicyResult
    {
        public readonly string BasePolicyId;
        public readonly ImmutableArray<string> ChildPolicies;
        public readonly ImmutableArray<Outputs.GetFirewallPolicyDnResult> Dns;
        public readonly ImmutableArray<string> Firewalls;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        public readonly string Name;
        public readonly string ResourceGroupName;
        public readonly ImmutableArray<string> RuleCollectionGroups;
        /// <summary>
        /// A mapping of tags assigned to the Firewall Policy.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly ImmutableArray<Outputs.GetFirewallPolicyThreatIntelligenceAllowlistResult> ThreatIntelligenceAllowlists;
        public readonly string ThreatIntelligenceMode;

        [OutputConstructor]
        private GetFirewallPolicyResult(
            string basePolicyId,

            ImmutableArray<string> childPolicies,

            ImmutableArray<Outputs.GetFirewallPolicyDnResult> dns,

            ImmutableArray<string> firewalls,

            string id,

            string location,

            string name,

            string resourceGroupName,

            ImmutableArray<string> ruleCollectionGroups,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<Outputs.GetFirewallPolicyThreatIntelligenceAllowlistResult> threatIntelligenceAllowlists,

            string threatIntelligenceMode)
        {
            BasePolicyId = basePolicyId;
            ChildPolicies = childPolicies;
            Dns = dns;
            Firewalls = firewalls;
            Id = id;
            Location = location;
            Name = name;
            ResourceGroupName = resourceGroupName;
            RuleCollectionGroups = ruleCollectionGroups;
            Tags = tags;
            ThreatIntelligenceAllowlists = threatIntelligenceAllowlists;
            ThreatIntelligenceMode = threatIntelligenceMode;
        }
    }
}
