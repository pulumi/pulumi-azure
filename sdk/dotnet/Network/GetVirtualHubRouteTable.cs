// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    public static class GetVirtualHubRouteTable
    {
        /// <summary>
        /// Uses this data source to access information about an existing Virtual Hub Route Table.
        /// 
        /// ## Virtual Hub Route Table Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetVirtualHubRouteTable.Invoke(new()
        ///     {
        ///         Name = "example-hub-route-table",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["virtualHubRouteTableId"] = example.Apply(getVirtualHubRouteTableResult =&gt; getVirtualHubRouteTableResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetVirtualHubRouteTableResult> InvokeAsync(GetVirtualHubRouteTableArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualHubRouteTableResult>("azure:network/getVirtualHubRouteTable:getVirtualHubRouteTable", args ?? new GetVirtualHubRouteTableArgs(), options.WithDefaults());

        /// <summary>
        /// Uses this data source to access information about an existing Virtual Hub Route Table.
        /// 
        /// ## Virtual Hub Route Table Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetVirtualHubRouteTable.Invoke(new()
        ///     {
        ///         Name = "example-hub-route-table",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["virtualHubRouteTableId"] = example.Apply(getVirtualHubRouteTableResult =&gt; getVirtualHubRouteTableResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVirtualHubRouteTableResult> Invoke(GetVirtualHubRouteTableInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualHubRouteTableResult>("azure:network/getVirtualHubRouteTable:getVirtualHubRouteTable", args ?? new GetVirtualHubRouteTableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualHubRouteTableArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Virtual Hub Route Table.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the Virtual Hub Route Table exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        [Input("virtualHubName", required: true)]
        public string VirtualHubName { get; set; } = null!;

        public GetVirtualHubRouteTableArgs()
        {
        }
        public static new GetVirtualHubRouteTableArgs Empty => new GetVirtualHubRouteTableArgs();
    }

    public sealed class GetVirtualHubRouteTableInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Virtual Hub Route Table.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the Virtual Hub Route Table exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("virtualHubName", required: true)]
        public Input<string> VirtualHubName { get; set; } = null!;

        public GetVirtualHubRouteTableInvokeArgs()
        {
        }
        public static new GetVirtualHubRouteTableInvokeArgs Empty => new GetVirtualHubRouteTableInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualHubRouteTableResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of labels associated with this route table.
        /// </summary>
        public readonly ImmutableArray<string> Labels;
        /// <summary>
        /// The name which is used for this route.
        /// </summary>
        public readonly string Name;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A `route` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualHubRouteTableRouteResult> Routes;
        /// <summary>
        /// The ID of the Virtual Hub within which this route table is created
        /// </summary>
        public readonly string VirtualHubId;
        public readonly string VirtualHubName;

        [OutputConstructor]
        private GetVirtualHubRouteTableResult(
            string id,

            ImmutableArray<string> labels,

            string name,

            string resourceGroupName,

            ImmutableArray<Outputs.GetVirtualHubRouteTableRouteResult> routes,

            string virtualHubId,

            string virtualHubName)
        {
            Id = id;
            Labels = labels;
            Name = name;
            ResourceGroupName = resourceGroupName;
            Routes = routes;
            VirtualHubId = virtualHubId;
            VirtualHubName = virtualHubName;
        }
    }
}
