// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages a Virtual Hub Route Table.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new Azure.Network.VirtualNetworkArgs
    ///         {
    ///             AddressSpaces = 
    ///             {
    ///                 "10.5.0.0/16",
    ///             },
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///         });
    ///         var exampleNetworkSecurityGroup = new Azure.Network.NetworkSecurityGroup("exampleNetworkSecurityGroup", new Azure.Network.NetworkSecurityGroupArgs
    ///         {
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///         });
    ///         var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new Azure.Network.SubnetArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             VirtualNetworkName = exampleVirtualNetwork.Name,
    ///             AddressPrefixes = 
    ///             {
    ///                 "10.5.1.0/24",
    ///             },
    ///         });
    ///         var exampleSubnetNetworkSecurityGroupAssociation = new Azure.Network.SubnetNetworkSecurityGroupAssociation("exampleSubnetNetworkSecurityGroupAssociation", new Azure.Network.SubnetNetworkSecurityGroupAssociationArgs
    ///         {
    ///             SubnetId = exampleSubnet.Id,
    ///             NetworkSecurityGroupId = exampleNetworkSecurityGroup.Id,
    ///         });
    ///         var exampleVirtualWan = new Azure.Network.VirtualWan("exampleVirtualWan", new Azure.Network.VirtualWanArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///         });
    ///         var exampleVirtualHub = new Azure.Network.VirtualHub("exampleVirtualHub", new Azure.Network.VirtualHubArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             VirtualWanId = exampleVirtualWan.Id,
    ///             AddressPrefix = "10.0.2.0/24",
    ///         });
    ///         var exampleVirtualHubConnection = new Azure.Network.VirtualHubConnection("exampleVirtualHubConnection", new Azure.Network.VirtualHubConnectionArgs
    ///         {
    ///             VirtualHubId = exampleVirtualHub.Id,
    ///             RemoteVirtualNetworkId = exampleVirtualNetwork.Id,
    ///         });
    ///         var exampleVirtualHubRouteTable = new Azure.Network.VirtualHubRouteTable("exampleVirtualHubRouteTable", new Azure.Network.VirtualHubRouteTableArgs
    ///         {
    ///             VirtualHubId = exampleVirtualHub.Id,
    ///             Labels = 
    ///             {
    ///                 "label1",
    ///             },
    ///             Routes = 
    ///             {
    ///                 new Azure.Network.Inputs.VirtualHubRouteTableRouteArgs
    ///                 {
    ///                     Name = "example-route",
    ///                     DestinationsType = "CIDR",
    ///                     Destinations = 
    ///                     {
    ///                         "10.0.0.0/16",
    ///                     },
    ///                     NextHopType = "ResourceId",
    ///                     NextHop = exampleVirtualHubConnection.Id,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Virtual Hub Route Tables can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:network/virtualHubRouteTable:VirtualHubRouteTable example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/routeTable1
    /// ```
    /// </summary>
    [AzureResourceType("azure:network/virtualHubRouteTable:VirtualHubRouteTable")]
    public partial class VirtualHubRouteTable : Pulumi.CustomResource
    {
        /// <summary>
        /// List of labels associated with this route table.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for Virtual Hub Route Table. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `route` block as defined below.
        /// </summary>
        [Output("routes")]
        public Output<ImmutableArray<Outputs.VirtualHubRouteTableRoute>> Routes { get; private set; } = null!;

        /// <summary>
        /// The ID of the Virtual Hub within which this route table should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("virtualHubId")]
        public Output<string> VirtualHubId { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualHubRouteTable resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualHubRouteTable(string name, VirtualHubRouteTableArgs args, CustomResourceOptions? options = null)
            : base("azure:network/virtualHubRouteTable:VirtualHubRouteTable", name, args ?? new VirtualHubRouteTableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualHubRouteTable(string name, Input<string> id, VirtualHubRouteTableState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/virtualHubRouteTable:VirtualHubRouteTable", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualHubRouteTable resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualHubRouteTable Get(string name, Input<string> id, VirtualHubRouteTableState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualHubRouteTable(name, id, state, options);
        }
    }

    public sealed class VirtualHubRouteTableArgs : Pulumi.ResourceArgs
    {
        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// List of labels associated with this route table.
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name which should be used for Virtual Hub Route Table. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("routes")]
        private InputList<Inputs.VirtualHubRouteTableRouteArgs>? _routes;

        /// <summary>
        /// A `route` block as defined below.
        /// </summary>
        public InputList<Inputs.VirtualHubRouteTableRouteArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.VirtualHubRouteTableRouteArgs>());
            set => _routes = value;
        }

        /// <summary>
        /// The ID of the Virtual Hub within which this route table should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("virtualHubId", required: true)]
        public Input<string> VirtualHubId { get; set; } = null!;

        public VirtualHubRouteTableArgs()
        {
        }
    }

    public sealed class VirtualHubRouteTableState : Pulumi.ResourceArgs
    {
        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// List of labels associated with this route table.
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name which should be used for Virtual Hub Route Table. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("routes")]
        private InputList<Inputs.VirtualHubRouteTableRouteGetArgs>? _routes;

        /// <summary>
        /// A `route` block as defined below.
        /// </summary>
        public InputList<Inputs.VirtualHubRouteTableRouteGetArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.VirtualHubRouteTableRouteGetArgs>());
            set => _routes = value;
        }

        /// <summary>
        /// The ID of the Virtual Hub within which this route table should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("virtualHubId")]
        public Input<string>? VirtualHubId { get; set; }

        public VirtualHubRouteTableState()
        {
        }
    }
}
