// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    public static class GetNetworkInterface
    {
        /// <summary>
        /// Use this data source to access information about an existing Network Interface.
        /// 
        /// {{% examples %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNetworkInterfaceResult> InvokeAsync(GetNetworkInterfaceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNetworkInterfaceResult>("azure:network/getNetworkInterface:getNetworkInterface", args ?? new GetNetworkInterfaceArgs(), options.WithVersion());
    }


    public sealed class GetNetworkInterfaceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Network Interface.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the Network Interface is located in.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkInterfaceArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNetworkInterfaceResult
    {
        /// <summary>
        /// List of DNS servers applied to the specified Network Interface.
        /// </summary>
        public readonly ImmutableArray<string> AppliedDnsServers;
        /// <summary>
        /// The list of DNS servers used by the specified Network Interface.
        /// </summary>
        public readonly ImmutableArray<string> DnsServers;
        /// <summary>
        /// Indicates if accelerated networking is set on the specified Network Interface.
        /// </summary>
        public readonly bool EnableAcceleratedNetworking;
        /// <summary>
        /// Indicate if IP forwarding is set on the specified Network Interface.
        /// </summary>
        public readonly bool EnableIpForwarding;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The internal dns name label of the specified Network Interface.
        /// </summary>
        public readonly string InternalDnsNameLabel;
        /// <summary>
        /// One or more `ip_configuration` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkInterfaceIpConfigurationResult> IpConfigurations;
        /// <summary>
        /// The location of the specified Network Interface.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The MAC address used by the specified Network Interface.
        /// </summary>
        public readonly string MacAddress;
        /// <summary>
        /// The name of the IP Configuration.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ID of the network security group associated to the specified Network Interface.
        /// </summary>
        public readonly string NetworkSecurityGroupId;
        /// <summary>
        /// The Private IP Address assigned to this Network Interface.
        /// </summary>
        public readonly string PrivateIpAddress;
        /// <summary>
        /// The list of private ip addresses associates to the specified Network Interface.
        /// </summary>
        public readonly ImmutableArray<string> PrivateIpAddresses;
        public readonly string ResourceGroupName;
        /// <summary>
        /// List the tags associated to the specified Network Interface.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The ID of the virtual machine that the specified Network Interface is attached to.
        /// </summary>
        public readonly string VirtualMachineId;

        [OutputConstructor]
        private GetNetworkInterfaceResult(
            ImmutableArray<string> appliedDnsServers,

            ImmutableArray<string> dnsServers,

            bool enableAcceleratedNetworking,

            bool enableIpForwarding,

            string id,

            string internalDnsNameLabel,

            ImmutableArray<Outputs.GetNetworkInterfaceIpConfigurationResult> ipConfigurations,

            string location,

            string macAddress,

            string name,

            string networkSecurityGroupId,

            string privateIpAddress,

            ImmutableArray<string> privateIpAddresses,

            string resourceGroupName,

            ImmutableDictionary<string, string> tags,

            string virtualMachineId)
        {
            AppliedDnsServers = appliedDnsServers;
            DnsServers = dnsServers;
            EnableAcceleratedNetworking = enableAcceleratedNetworking;
            EnableIpForwarding = enableIpForwarding;
            Id = id;
            InternalDnsNameLabel = internalDnsNameLabel;
            IpConfigurations = ipConfigurations;
            Location = location;
            MacAddress = macAddress;
            Name = name;
            NetworkSecurityGroupId = networkSecurityGroupId;
            PrivateIpAddress = privateIpAddress;
            PrivateIpAddresses = privateIpAddresses;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
            VirtualMachineId = virtualMachineId;
        }
    }
}
