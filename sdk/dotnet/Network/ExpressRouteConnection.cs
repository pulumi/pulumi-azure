// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages an Express Route Connection.
    /// 
    /// &gt; **NOTE:** The provider status of the Express Route Circuit must be set as provisioned while creating the Express Route Connection. See more details [here](https://docs.microsoft.com/azure/expressroute/expressroute-howto-circuit-portal-resource-manager#send-the-service-key-to-your-connectivity-provider-for-provisioning).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualWan = new Azure.Network.VirtualWan("exampleVirtualWan", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///     });
    /// 
    ///     var exampleVirtualHub = new Azure.Network.VirtualHub("exampleVirtualHub", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         VirtualWanId = exampleVirtualWan.Id,
    ///         AddressPrefix = "10.0.1.0/24",
    ///     });
    /// 
    ///     var exampleExpressRouteGateway = new Azure.Network.ExpressRouteGateway("exampleExpressRouteGateway", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         VirtualHubId = exampleVirtualHub.Id,
    ///         ScaleUnits = 1,
    ///     });
    /// 
    ///     var exampleExpressRoutePort = new Azure.Network.ExpressRoutePort("exampleExpressRoutePort", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         PeeringLocation = "Equinix-Seattle-SE2",
    ///         BandwidthInGbps = 10,
    ///         Encapsulation = "Dot1Q",
    ///     });
    /// 
    ///     var exampleExpressRouteCircuit = new Azure.Network.ExpressRouteCircuit("exampleExpressRouteCircuit", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ExpressRoutePortId = exampleExpressRoutePort.Id,
    ///         BandwidthInGbps = 5,
    ///         Sku = new Azure.Network.Inputs.ExpressRouteCircuitSkuArgs
    ///         {
    ///             Tier = "Standard",
    ///             Family = "MeteredData",
    ///         },
    ///     });
    /// 
    ///     var exampleExpressRouteCircuitPeering = new Azure.Network.ExpressRouteCircuitPeering("exampleExpressRouteCircuitPeering", new()
    ///     {
    ///         PeeringType = "AzurePrivatePeering",
    ///         ExpressRouteCircuitName = exampleExpressRouteCircuit.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         SharedKey = "ItsASecret",
    ///         PeerAsn = 100,
    ///         PrimaryPeerAddressPrefix = "192.168.1.0/30",
    ///         SecondaryPeerAddressPrefix = "192.168.2.0/30",
    ///         VlanId = 100,
    ///     });
    /// 
    ///     var exampleExpressRouteConnection = new Azure.Network.ExpressRouteConnection("exampleExpressRouteConnection", new()
    ///     {
    ///         ExpressRouteGatewayId = exampleExpressRouteGateway.Id,
    ///         ExpressRouteCircuitPeeringId = exampleExpressRouteCircuitPeering.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Express Route Connections can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:network/expressRouteConnection:ExpressRouteConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/expressRouteGateways/expressRouteGateway1/expressRouteConnections/connection1
    /// ```
    /// </summary>
    [AzureResourceType("azure:network/expressRouteConnection:ExpressRouteConnection")]
    public partial class ExpressRouteConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The authorization key to establish the Express Route Connection.
        /// </summary>
        [Output("authorizationKey")]
        public Output<string?> AuthorizationKey { get; private set; } = null!;

        /// <summary>
        /// Is Internet security enabled for this Express Route Connection?
        /// </summary>
        [Output("enableInternetSecurity")]
        public Output<bool?> EnableInternetSecurity { get; private set; } = null!;

        /// <summary>
        /// The ID of the Express Route Circuit Peering that this Express Route Connection connects with. Changing this forces a new resource to be created.
        /// </summary>
        [Output("expressRouteCircuitPeeringId")]
        public Output<string> ExpressRouteCircuitPeeringId { get; private set; } = null!;

        /// <summary>
        /// Specified whether Fast Path is enabled for Virtual Wan Firewall Hub. Defaults to `false`.
        /// </summary>
        [Output("expressRouteGatewayBypassEnabled")]
        public Output<bool?> ExpressRouteGatewayBypassEnabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the Express Route Gateway that this Express Route Connection connects with. Changing this forces a new resource to be created.
        /// </summary>
        [Output("expressRouteGatewayId")]
        public Output<string> ExpressRouteGatewayId { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Express Route Connection. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `routing` block as defined below.
        /// </summary>
        [Output("routing")]
        public Output<Outputs.ExpressRouteConnectionRouting> Routing { get; private set; } = null!;

        /// <summary>
        /// The routing weight associated to the Express Route Connection. Possible value is between `0` and `32000`. Defaults to `0`.
        /// </summary>
        [Output("routingWeight")]
        public Output<int?> RoutingWeight { get; private set; } = null!;


        /// <summary>
        /// Create a ExpressRouteConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExpressRouteConnection(string name, ExpressRouteConnectionArgs args, CustomResourceOptions? options = null)
            : base("azure:network/expressRouteConnection:ExpressRouteConnection", name, args ?? new ExpressRouteConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExpressRouteConnection(string name, Input<string> id, ExpressRouteConnectionState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/expressRouteConnection:ExpressRouteConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExpressRouteConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExpressRouteConnection Get(string name, Input<string> id, ExpressRouteConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new ExpressRouteConnection(name, id, state, options);
        }
    }

    public sealed class ExpressRouteConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authorization key to establish the Express Route Connection.
        /// </summary>
        [Input("authorizationKey")]
        public Input<string>? AuthorizationKey { get; set; }

        /// <summary>
        /// Is Internet security enabled for this Express Route Connection?
        /// </summary>
        [Input("enableInternetSecurity")]
        public Input<bool>? EnableInternetSecurity { get; set; }

        /// <summary>
        /// The ID of the Express Route Circuit Peering that this Express Route Connection connects with. Changing this forces a new resource to be created.
        /// </summary>
        [Input("expressRouteCircuitPeeringId", required: true)]
        public Input<string> ExpressRouteCircuitPeeringId { get; set; } = null!;

        /// <summary>
        /// Specified whether Fast Path is enabled for Virtual Wan Firewall Hub. Defaults to `false`.
        /// </summary>
        [Input("expressRouteGatewayBypassEnabled")]
        public Input<bool>? ExpressRouteGatewayBypassEnabled { get; set; }

        /// <summary>
        /// The ID of the Express Route Gateway that this Express Route Connection connects with. Changing this forces a new resource to be created.
        /// </summary>
        [Input("expressRouteGatewayId", required: true)]
        public Input<string> ExpressRouteGatewayId { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Express Route Connection. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `routing` block as defined below.
        /// </summary>
        [Input("routing")]
        public Input<Inputs.ExpressRouteConnectionRoutingArgs>? Routing { get; set; }

        /// <summary>
        /// The routing weight associated to the Express Route Connection. Possible value is between `0` and `32000`. Defaults to `0`.
        /// </summary>
        [Input("routingWeight")]
        public Input<int>? RoutingWeight { get; set; }

        public ExpressRouteConnectionArgs()
        {
        }
        public static new ExpressRouteConnectionArgs Empty => new ExpressRouteConnectionArgs();
    }

    public sealed class ExpressRouteConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authorization key to establish the Express Route Connection.
        /// </summary>
        [Input("authorizationKey")]
        public Input<string>? AuthorizationKey { get; set; }

        /// <summary>
        /// Is Internet security enabled for this Express Route Connection?
        /// </summary>
        [Input("enableInternetSecurity")]
        public Input<bool>? EnableInternetSecurity { get; set; }

        /// <summary>
        /// The ID of the Express Route Circuit Peering that this Express Route Connection connects with. Changing this forces a new resource to be created.
        /// </summary>
        [Input("expressRouteCircuitPeeringId")]
        public Input<string>? ExpressRouteCircuitPeeringId { get; set; }

        /// <summary>
        /// Specified whether Fast Path is enabled for Virtual Wan Firewall Hub. Defaults to `false`.
        /// </summary>
        [Input("expressRouteGatewayBypassEnabled")]
        public Input<bool>? ExpressRouteGatewayBypassEnabled { get; set; }

        /// <summary>
        /// The ID of the Express Route Gateway that this Express Route Connection connects with. Changing this forces a new resource to be created.
        /// </summary>
        [Input("expressRouteGatewayId")]
        public Input<string>? ExpressRouteGatewayId { get; set; }

        /// <summary>
        /// The name which should be used for this Express Route Connection. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `routing` block as defined below.
        /// </summary>
        [Input("routing")]
        public Input<Inputs.ExpressRouteConnectionRoutingGetArgs>? Routing { get; set; }

        /// <summary>
        /// The routing weight associated to the Express Route Connection. Possible value is between `0` and `32000`. Defaults to `0`.
        /// </summary>
        [Input("routingWeight")]
        public Input<int>? RoutingWeight { get; set; }

        public ExpressRouteConnectionState()
        {
        }
        public static new ExpressRouteConnectionState Empty => new ExpressRouteConnectionState();
    }
}
