// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages an Azure Route Server
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Tags = 
    ///         {
    ///             { "environment", "Production" },
    ///         },
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.1.0/24",
    ///         },
    ///     });
    /// 
    ///     var examplePublicIp = new Azure.Network.PublicIp("examplePublicIp", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AllocationMethod = "Static",
    ///         Sku = "Standard",
    ///     });
    /// 
    ///     var exampleRouteServer = new Azure.Network.RouteServer("exampleRouteServer", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Sku = "Standard",
    ///         PublicIpAddressId = examplePublicIp.Id,
    ///         SubnetId = exampleSubnet.Id,
    ///         BranchToBranchTrafficEnabled = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Route Server can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:network/routeServer:RouteServer example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/virtualHubs/routeServer1
    /// ```
    /// </summary>
    [AzureResourceType("azure:network/routeServer:RouteServer")]
    public partial class RouteServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to enable route exchange between Azure Route Server and the gateway(s)
        /// </summary>
        [Output("branchToBranchTrafficEnabled")]
        public Output<bool?> BranchToBranchTrafficEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the Route Server should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the Route Server. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Public IP Address. This option is required since September 1st 2021. Changing this forces a new resource to be created.
        /// </summary>
        [Output("publicIpAddressId")]
        public Output<string> PublicIpAddressId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where the Route Server should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        [Output("routingState")]
        public Output<string> RoutingState { get; private set; } = null!;

        /// <summary>
        /// The SKU of the Route Server. The only possible value is `Standard`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("sku")]
        public Output<string> Sku { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subnet that the Route Server will reside. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** Azure Route Server requires a dedicated subnet named RouteServerSubnet. The subnet size has to be at least /27 or short prefix (such as /26 or /25) and cannot be attached to any security group, otherwise, you'll receive an error message when deploying the Route Server
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("virtualRouterAsn")]
        public Output<int> VirtualRouterAsn { get; private set; } = null!;

        [Output("virtualRouterIps")]
        public Output<ImmutableArray<string>> VirtualRouterIps { get; private set; } = null!;


        /// <summary>
        /// Create a RouteServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouteServer(string name, RouteServerArgs args, CustomResourceOptions? options = null)
            : base("azure:network/routeServer:RouteServer", name, args ?? new RouteServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouteServer(string name, Input<string> id, RouteServerState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/routeServer:RouteServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouteServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouteServer Get(string name, Input<string> id, RouteServerState? state = null, CustomResourceOptions? options = null)
        {
            return new RouteServer(name, id, state, options);
        }
    }

    public sealed class RouteServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable route exchange between Azure Route Server and the gateway(s)
        /// </summary>
        [Input("branchToBranchTrafficEnabled")]
        public Input<bool>? BranchToBranchTrafficEnabled { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the Route Server should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the Route Server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Public IP Address. This option is required since September 1st 2021. Changing this forces a new resource to be created.
        /// </summary>
        [Input("publicIpAddressId", required: true)]
        public Input<string> PublicIpAddressId { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where the Route Server should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The SKU of the Route Server. The only possible value is `Standard`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sku", required: true)]
        public Input<string> Sku { get; set; } = null!;

        /// <summary>
        /// The ID of the Subnet that the Route Server will reside. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** Azure Route Server requires a dedicated subnet named RouteServerSubnet. The subnet size has to be at least /27 or short prefix (such as /26 or /25) and cannot be attached to any security group, otherwise, you'll receive an error message when deploying the Route Server
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public RouteServerArgs()
        {
        }
        public static new RouteServerArgs Empty => new RouteServerArgs();
    }

    public sealed class RouteServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable route exchange between Azure Route Server and the gateway(s)
        /// </summary>
        [Input("branchToBranchTrafficEnabled")]
        public Input<bool>? BranchToBranchTrafficEnabled { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the Route Server should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the Route Server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Public IP Address. This option is required since September 1st 2021. Changing this forces a new resource to be created.
        /// </summary>
        [Input("publicIpAddressId")]
        public Input<string>? PublicIpAddressId { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the Route Server should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("routingState")]
        public Input<string>? RoutingState { get; set; }

        /// <summary>
        /// The SKU of the Route Server. The only possible value is `Standard`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        /// <summary>
        /// The ID of the Subnet that the Route Server will reside. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** Azure Route Server requires a dedicated subnet named RouteServerSubnet. The subnet size has to be at least /27 or short prefix (such as /26 or /25) and cannot be attached to any security group, otherwise, you'll receive an error message when deploying the Route Server
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("virtualRouterAsn")]
        public Input<int>? VirtualRouterAsn { get; set; }

        [Input("virtualRouterIps")]
        private InputList<string>? _virtualRouterIps;
        public InputList<string> VirtualRouterIps
        {
            get => _virtualRouterIps ?? (_virtualRouterIps = new InputList<string>());
            set => _virtualRouterIps = value;
        }

        public RouteServerState()
        {
        }
        public static new RouteServerState Empty => new RouteServerState();
    }
}
