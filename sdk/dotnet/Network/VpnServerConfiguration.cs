// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages a VPN Server Configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Azure.Core.ResourceGroup("example", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var test = new Azure.Network.VpnServerConfiguration("test", new Azure.Network.VpnServerConfigurationArgs
    ///         {
    ///             ResourceGroupName = example.Name,
    ///             Location = example.Location,
    ///             VpnAuthenticationTypes = 
    ///             {
    ///                 "Certificate",
    ///             },
    ///             ClientRootCertificates = 
    ///             {
    ///                 new Azure.Network.Inputs.VpnServerConfigurationClientRootCertificateArgs
    ///                 {
    ///                     Name = "DigiCert-Federated-ID-Root-CA",
    ///                     PublicCertData = @"MIIDuzCCAqOgAwIBAgIQCHTZWCM+IlfFIRXIvyKSrjANBgkqhkiG9w0BAQsFADBn
    /// MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
    /// d3cuZGlnaWNlcnQuY29tMSYwJAYDVQQDEx1EaWdpQ2VydCBGZWRlcmF0ZWQgSUQg
    /// Um9vdCBDQTAeFw0xMzAxMTUxMjAwMDBaFw0zMzAxMTUxMjAwMDBaMGcxCzAJBgNV
    /// BAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdp
    /// Y2VydC5jb20xJjAkBgNVBAMTHURpZ2lDZXJ0IEZlZGVyYXRlZCBJRCBSb290IENB
    /// MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvAEB4pcCqnNNOWE6Ur5j
    /// QPUH+1y1F9KdHTRSza6k5iDlXq1kGS1qAkuKtw9JsiNRrjltmFnzMZRBbX8Tlfl8
    /// zAhBmb6dDduDGED01kBsTkgywYPxXVTKec0WxYEEF0oMn4wSYNl0lt2eJAKHXjNf
    /// GTwiibdP8CUR2ghSM2sUTI8Nt1Omfc4SMHhGhYD64uJMbX98THQ/4LMGuYegou+d
    /// GTiahfHtjn7AboSEknwAMJHCh5RlYZZ6B1O4QbKJ+34Q0eKgnI3X6Vc9u0zf6DH8
    /// Dk+4zQDYRRTqTnVO3VT8jzqDlCRuNtq6YvryOWN74/dq8LQhUnXHvFyrsdMaE1X2
    /// DwIDAQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjAdBgNV
    /// HQ4EFgQUGRdkFnbGt1EWjKwbUne+5OaZvRYwHwYDVR0jBBgwFoAUGRdkFnbGt1EW
    /// jKwbUne+5OaZvRYwDQYJKoZIhvcNAQELBQADggEBAHcqsHkrjpESqfuVTRiptJfP
    /// 9JbdtWqRTmOf6uJi2c8YVqI6XlKXsD8C1dUUaaHKLUJzvKiazibVuBwMIT84AyqR
    /// QELn3e0BtgEymEygMU569b01ZPxoFSnNXc7qDZBDef8WfqAV/sxkTi8L9BkmFYfL
    /// uGLOhRJOFprPdoDIUBB+tmCl3oDcBy3vnUeOEioz8zAkprcb3GHwHAK+vHmmfgcn
    /// WsfMLH4JCLa/tRYL+Rw/N3ybCkDp00s0WUZ+AoDywSl0Q/ZEnNY0MsFiw6LyIdbq
    /// M/s/1JRtO3bDSzD9TazRVzn2oBqzSa8VgIo5C1nOnoAKJTlsClJKvIhnRlaLQqk=
    /// ",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// VPN Server Configurations can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:network/vpnServerConfiguration:VpnServerConfiguration config1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/vpnServerConfigurations/config1
    /// ```
    /// </summary>
    [AzureResourceType("azure:network/vpnServerConfiguration:VpnServerConfiguration")]
    public partial class VpnServerConfiguration : Pulumi.CustomResource
    {
        /// <summary>
        /// A `azure_active_directory_authentication` block as defined below.
        /// </summary>
        [Output("azureActiveDirectoryAuthentications")]
        public Output<ImmutableArray<Outputs.VpnServerConfigurationAzureActiveDirectoryAuthentication>> AzureActiveDirectoryAuthentications { get; private set; } = null!;

        /// <summary>
        /// One or more `client_revoked_certificate` blocks as defined below.
        /// </summary>
        [Output("clientRevokedCertificates")]
        public Output<ImmutableArray<Outputs.VpnServerConfigurationClientRevokedCertificate>> ClientRevokedCertificates { get; private set; } = null!;

        /// <summary>
        /// One or more `client_root_certificate` blocks as defined below.
        /// </summary>
        [Output("clientRootCertificates")]
        public Output<ImmutableArray<Outputs.VpnServerConfigurationClientRootCertificate>> ClientRootCertificates { get; private set; } = null!;

        /// <summary>
        /// A `ipsec_policy` block as defined below.
        /// </summary>
        [Output("ipsecPolicy")]
        public Output<Outputs.VpnServerConfigurationIpsecPolicy?> IpsecPolicy { get; private set; } = null!;

        /// <summary>
        /// The Azure location where this VPN Server Configuration should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The Name which should be used for this VPN Server Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `radius` block as defined below.
        /// </summary>
        [Output("radius")]
        public Output<Outputs.VpnServerConfigurationRadius?> Radius { get; private set; } = null!;

        /// <summary>
        /// A `radius_server` block as defined below.
        /// </summary>
        [Output("radiusServer")]
        public Output<Outputs.VpnServerConfigurationRadiusServer?> RadiusServer { get; private set; } = null!;

        /// <summary>
        /// The Name of the Resource Group in which this VPN Server Configuration should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A list of one of more Authentication Types applicable for this VPN Server Configuration. Possible values are `AAD` (Azure Active Directory), `Certificate` and `Radius`.
        /// </summary>
        [Output("vpnAuthenticationTypes")]
        public Output<string> VpnAuthenticationTypes { get; private set; } = null!;

        /// <summary>
        /// A list of VPN Protocols to use for this Server Configuration. Possible values are `IkeV2` and `OpenVPN`.
        /// </summary>
        [Output("vpnProtocols")]
        public Output<ImmutableArray<string>> VpnProtocols { get; private set; } = null!;


        /// <summary>
        /// Create a VpnServerConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpnServerConfiguration(string name, VpnServerConfigurationArgs args, CustomResourceOptions? options = null)
            : base("azure:network/vpnServerConfiguration:VpnServerConfiguration", name, args ?? new VpnServerConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpnServerConfiguration(string name, Input<string> id, VpnServerConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/vpnServerConfiguration:VpnServerConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpnServerConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpnServerConfiguration Get(string name, Input<string> id, VpnServerConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new VpnServerConfiguration(name, id, state, options);
        }
    }

    public sealed class VpnServerConfigurationArgs : Pulumi.ResourceArgs
    {
        [Input("azureActiveDirectoryAuthentications")]
        private InputList<Inputs.VpnServerConfigurationAzureActiveDirectoryAuthenticationArgs>? _azureActiveDirectoryAuthentications;

        /// <summary>
        /// A `azure_active_directory_authentication` block as defined below.
        /// </summary>
        public InputList<Inputs.VpnServerConfigurationAzureActiveDirectoryAuthenticationArgs> AzureActiveDirectoryAuthentications
        {
            get => _azureActiveDirectoryAuthentications ?? (_azureActiveDirectoryAuthentications = new InputList<Inputs.VpnServerConfigurationAzureActiveDirectoryAuthenticationArgs>());
            set => _azureActiveDirectoryAuthentications = value;
        }

        [Input("clientRevokedCertificates")]
        private InputList<Inputs.VpnServerConfigurationClientRevokedCertificateArgs>? _clientRevokedCertificates;

        /// <summary>
        /// One or more `client_revoked_certificate` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VpnServerConfigurationClientRevokedCertificateArgs> ClientRevokedCertificates
        {
            get => _clientRevokedCertificates ?? (_clientRevokedCertificates = new InputList<Inputs.VpnServerConfigurationClientRevokedCertificateArgs>());
            set => _clientRevokedCertificates = value;
        }

        [Input("clientRootCertificates")]
        private InputList<Inputs.VpnServerConfigurationClientRootCertificateArgs>? _clientRootCertificates;

        /// <summary>
        /// One or more `client_root_certificate` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VpnServerConfigurationClientRootCertificateArgs> ClientRootCertificates
        {
            get => _clientRootCertificates ?? (_clientRootCertificates = new InputList<Inputs.VpnServerConfigurationClientRootCertificateArgs>());
            set => _clientRootCertificates = value;
        }

        /// <summary>
        /// A `ipsec_policy` block as defined below.
        /// </summary>
        [Input("ipsecPolicy")]
        public Input<Inputs.VpnServerConfigurationIpsecPolicyArgs>? IpsecPolicy { get; set; }

        /// <summary>
        /// The Azure location where this VPN Server Configuration should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The Name which should be used for this VPN Server Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `radius` block as defined below.
        /// </summary>
        [Input("radius")]
        public Input<Inputs.VpnServerConfigurationRadiusArgs>? Radius { get; set; }

        /// <summary>
        /// A `radius_server` block as defined below.
        /// </summary>
        [Input("radiusServer")]
        public Input<Inputs.VpnServerConfigurationRadiusServerArgs>? RadiusServer { get; set; }

        /// <summary>
        /// The Name of the Resource Group in which this VPN Server Configuration should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A list of one of more Authentication Types applicable for this VPN Server Configuration. Possible values are `AAD` (Azure Active Directory), `Certificate` and `Radius`.
        /// </summary>
        [Input("vpnAuthenticationTypes", required: true)]
        public Input<string> VpnAuthenticationTypes { get; set; } = null!;

        [Input("vpnProtocols")]
        private InputList<string>? _vpnProtocols;

        /// <summary>
        /// A list of VPN Protocols to use for this Server Configuration. Possible values are `IkeV2` and `OpenVPN`.
        /// </summary>
        public InputList<string> VpnProtocols
        {
            get => _vpnProtocols ?? (_vpnProtocols = new InputList<string>());
            set => _vpnProtocols = value;
        }

        public VpnServerConfigurationArgs()
        {
        }
    }

    public sealed class VpnServerConfigurationState : Pulumi.ResourceArgs
    {
        [Input("azureActiveDirectoryAuthentications")]
        private InputList<Inputs.VpnServerConfigurationAzureActiveDirectoryAuthenticationGetArgs>? _azureActiveDirectoryAuthentications;

        /// <summary>
        /// A `azure_active_directory_authentication` block as defined below.
        /// </summary>
        public InputList<Inputs.VpnServerConfigurationAzureActiveDirectoryAuthenticationGetArgs> AzureActiveDirectoryAuthentications
        {
            get => _azureActiveDirectoryAuthentications ?? (_azureActiveDirectoryAuthentications = new InputList<Inputs.VpnServerConfigurationAzureActiveDirectoryAuthenticationGetArgs>());
            set => _azureActiveDirectoryAuthentications = value;
        }

        [Input("clientRevokedCertificates")]
        private InputList<Inputs.VpnServerConfigurationClientRevokedCertificateGetArgs>? _clientRevokedCertificates;

        /// <summary>
        /// One or more `client_revoked_certificate` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VpnServerConfigurationClientRevokedCertificateGetArgs> ClientRevokedCertificates
        {
            get => _clientRevokedCertificates ?? (_clientRevokedCertificates = new InputList<Inputs.VpnServerConfigurationClientRevokedCertificateGetArgs>());
            set => _clientRevokedCertificates = value;
        }

        [Input("clientRootCertificates")]
        private InputList<Inputs.VpnServerConfigurationClientRootCertificateGetArgs>? _clientRootCertificates;

        /// <summary>
        /// One or more `client_root_certificate` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VpnServerConfigurationClientRootCertificateGetArgs> ClientRootCertificates
        {
            get => _clientRootCertificates ?? (_clientRootCertificates = new InputList<Inputs.VpnServerConfigurationClientRootCertificateGetArgs>());
            set => _clientRootCertificates = value;
        }

        /// <summary>
        /// A `ipsec_policy` block as defined below.
        /// </summary>
        [Input("ipsecPolicy")]
        public Input<Inputs.VpnServerConfigurationIpsecPolicyGetArgs>? IpsecPolicy { get; set; }

        /// <summary>
        /// The Azure location where this VPN Server Configuration should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The Name which should be used for this VPN Server Configuration. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `radius` block as defined below.
        /// </summary>
        [Input("radius")]
        public Input<Inputs.VpnServerConfigurationRadiusGetArgs>? Radius { get; set; }

        /// <summary>
        /// A `radius_server` block as defined below.
        /// </summary>
        [Input("radiusServer")]
        public Input<Inputs.VpnServerConfigurationRadiusServerGetArgs>? RadiusServer { get; set; }

        /// <summary>
        /// The Name of the Resource Group in which this VPN Server Configuration should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A list of one of more Authentication Types applicable for this VPN Server Configuration. Possible values are `AAD` (Azure Active Directory), `Certificate` and `Radius`.
        /// </summary>
        [Input("vpnAuthenticationTypes")]
        public Input<string>? VpnAuthenticationTypes { get; set; }

        [Input("vpnProtocols")]
        private InputList<string>? _vpnProtocols;

        /// <summary>
        /// A list of VPN Protocols to use for this Server Configuration. Possible values are `IkeV2` and `OpenVPN`.
        /// </summary>
        public InputList<string> VpnProtocols
        {
            get => _vpnProtocols ?? (_vpnProtocols = new InputList<string>());
            set => _vpnProtocols = value;
        }

        public VpnServerConfigurationState()
        {
        }
    }
}
