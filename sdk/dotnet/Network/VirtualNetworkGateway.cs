// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages a Virtual Network Gateway to establish secure, cross-premises connectivity.
    /// 
    /// &gt; **Note:** Please be aware that provisioning a Virtual Network Gateway takes a long time (between 30 minutes and 1 hour)
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/virtual_network_gateway.html.markdown.
    /// </summary>
    public partial class VirtualNetworkGateway : Pulumi.CustomResource
    {
        /// <summary>
        /// If `true`, an active-active Virtual Network Gateway
        /// will be created. An active-active gateway requires a `HighPerformance` or an
        /// `UltraPerformance` sku. If `false`, an active-standby gateway will be created.
        /// Defaults to `false`.
        /// </summary>
        [Output("activeActive")]
        public Output<bool> ActiveActive { get; private set; } = null!;

        [Output("bgpSettings")]
        public Output<Outputs.VirtualNetworkGatewayBgpSettings> BgpSettings { get; private set; } = null!;

        /// <summary>
        /// The ID of the local network gateway
        /// through which outbound Internet traffic from the virtual network in which the
        /// gateway is created will be routed (*forced tunneling*). Refer to the
        /// [Azure documentation on forced tunneling](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-forced-tunneling-rm).
        /// If not specified, forced tunneling is disabled.
        /// </summary>
        [Output("defaultLocalNetworkGatewayId")]
        public Output<string?> DefaultLocalNetworkGatewayId { get; private set; } = null!;

        /// <summary>
        /// If `true`, BGP (Border Gateway Protocol) will be enabled
        /// for this Virtual Network Gateway. Defaults to `false`.
        /// </summary>
        [Output("enableBgp")]
        public Output<bool> EnableBgp { get; private set; } = null!;

        /// <summary>
        /// The Generation of the Virtual Network gateway. Possible values include `Generation1`, `Generation2` or `None`.
        /// </summary>
        [Output("generation")]
        public Output<string> Generation { get; private set; } = null!;

        /// <summary>
        /// One or two `ip_configuration` blocks documented below.
        /// An active-standby gateway requires exactly one `ip_configuration` block whereas
        /// an active-active gateway requires exactly two `ip_configuration` blocks.
        /// </summary>
        [Output("ipConfigurations")]
        public Output<ImmutableArray<Outputs.VirtualNetworkGatewayIpConfigurations>> IpConfigurations { get; private set; } = null!;

        /// <summary>
        /// The location/region where the Virtual Network Gateway is
        /// located. Changing the location/region forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A user-defined name of the revoked certificate.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to
        /// create the Virtual Network Gateway. Changing the resource group name forces
        /// a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Configuration of the size and capacity of the virtual network
        /// gateway. Valid options are `Basic`, `Standard`, `HighPerformance`, `UltraPerformance`,
        /// `ErGw1AZ`, `ErGw2AZ`, `ErGw3AZ`, `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw4`,`VpnGw5`, `VpnGw1AZ`,
        /// `VpnGw2AZ`, `VpnGw3AZ`,`VpnGw4AZ` and `VpnGw5AZ` and depend on the `type`, `vpn_type` and
        /// `generation` arguments.
        /// A `PolicyBased` gateway only supports the `Basic` sku. Further, the `UltraPerformance`
        /// sku is only supported by an `ExpressRoute` gateway.
        /// </summary>
        [Output("sku")]
        public Output<string> Sku { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the Virtual Network Gateway. Valid options are
        /// `Vpn` or `ExpressRoute`. Changing the type forces a new resource to be created.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// A `vpn_client_configuration` block which
        /// is documented below. In this block the Virtual Network Gateway can be configured
        /// to accept IPSec point-to-site connections.
        /// </summary>
        [Output("vpnClientConfiguration")]
        public Output<Outputs.VirtualNetworkGatewayVpnClientConfiguration?> VpnClientConfiguration { get; private set; } = null!;

        /// <summary>
        /// The routing type of the Virtual Network Gateway. Valid
        /// options are `RouteBased` or `PolicyBased`. Defaults to `RouteBased`.
        /// </summary>
        [Output("vpnType")]
        public Output<string?> VpnType { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualNetworkGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualNetworkGateway(string name, VirtualNetworkGatewayArgs args, CustomResourceOptions? options = null)
            : base("azure:network/virtualNetworkGateway:VirtualNetworkGateway", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private VirtualNetworkGateway(string name, Input<string> id, VirtualNetworkGatewayState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/virtualNetworkGateway:VirtualNetworkGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualNetworkGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualNetworkGateway Get(string name, Input<string> id, VirtualNetworkGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualNetworkGateway(name, id, state, options);
        }
    }

    public sealed class VirtualNetworkGatewayArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If `true`, an active-active Virtual Network Gateway
        /// will be created. An active-active gateway requires a `HighPerformance` or an
        /// `UltraPerformance` sku. If `false`, an active-standby gateway will be created.
        /// Defaults to `false`.
        /// </summary>
        [Input("activeActive")]
        public Input<bool>? ActiveActive { get; set; }

        [Input("bgpSettings")]
        public Input<Inputs.VirtualNetworkGatewayBgpSettingsArgs>? BgpSettings { get; set; }

        /// <summary>
        /// The ID of the local network gateway
        /// through which outbound Internet traffic from the virtual network in which the
        /// gateway is created will be routed (*forced tunneling*). Refer to the
        /// [Azure documentation on forced tunneling](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-forced-tunneling-rm).
        /// If not specified, forced tunneling is disabled.
        /// </summary>
        [Input("defaultLocalNetworkGatewayId")]
        public Input<string>? DefaultLocalNetworkGatewayId { get; set; }

        /// <summary>
        /// If `true`, BGP (Border Gateway Protocol) will be enabled
        /// for this Virtual Network Gateway. Defaults to `false`.
        /// </summary>
        [Input("enableBgp")]
        public Input<bool>? EnableBgp { get; set; }

        /// <summary>
        /// The Generation of the Virtual Network gateway. Possible values include `Generation1`, `Generation2` or `None`.
        /// </summary>
        [Input("generation")]
        public Input<string>? Generation { get; set; }

        [Input("ipConfigurations", required: true)]
        private InputList<Inputs.VirtualNetworkGatewayIpConfigurationsArgs>? _ipConfigurations;

        /// <summary>
        /// One or two `ip_configuration` blocks documented below.
        /// An active-standby gateway requires exactly one `ip_configuration` block whereas
        /// an active-active gateway requires exactly two `ip_configuration` blocks.
        /// </summary>
        public InputList<Inputs.VirtualNetworkGatewayIpConfigurationsArgs> IpConfigurations
        {
            get => _ipConfigurations ?? (_ipConfigurations = new InputList<Inputs.VirtualNetworkGatewayIpConfigurationsArgs>());
            set => _ipConfigurations = value;
        }

        /// <summary>
        /// The location/region where the Virtual Network Gateway is
        /// located. Changing the location/region forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A user-defined name of the revoked certificate.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to
        /// create the Virtual Network Gateway. Changing the resource group name forces
        /// a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Configuration of the size and capacity of the virtual network
        /// gateway. Valid options are `Basic`, `Standard`, `HighPerformance`, `UltraPerformance`,
        /// `ErGw1AZ`, `ErGw2AZ`, `ErGw3AZ`, `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw4`,`VpnGw5`, `VpnGw1AZ`,
        /// `VpnGw2AZ`, `VpnGw3AZ`,`VpnGw4AZ` and `VpnGw5AZ` and depend on the `type`, `vpn_type` and
        /// `generation` arguments.
        /// A `PolicyBased` gateway only supports the `Basic` sku. Further, the `UltraPerformance`
        /// sku is only supported by an `ExpressRoute` gateway.
        /// </summary>
        [Input("sku", required: true)]
        public Input<string> Sku { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of the Virtual Network Gateway. Valid options are
        /// `Vpn` or `ExpressRoute`. Changing the type forces a new resource to be created.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// A `vpn_client_configuration` block which
        /// is documented below. In this block the Virtual Network Gateway can be configured
        /// to accept IPSec point-to-site connections.
        /// </summary>
        [Input("vpnClientConfiguration")]
        public Input<Inputs.VirtualNetworkGatewayVpnClientConfigurationArgs>? VpnClientConfiguration { get; set; }

        /// <summary>
        /// The routing type of the Virtual Network Gateway. Valid
        /// options are `RouteBased` or `PolicyBased`. Defaults to `RouteBased`.
        /// </summary>
        [Input("vpnType")]
        public Input<string>? VpnType { get; set; }

        public VirtualNetworkGatewayArgs()
        {
        }
    }

    public sealed class VirtualNetworkGatewayState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If `true`, an active-active Virtual Network Gateway
        /// will be created. An active-active gateway requires a `HighPerformance` or an
        /// `UltraPerformance` sku. If `false`, an active-standby gateway will be created.
        /// Defaults to `false`.
        /// </summary>
        [Input("activeActive")]
        public Input<bool>? ActiveActive { get; set; }

        [Input("bgpSettings")]
        public Input<Inputs.VirtualNetworkGatewayBgpSettingsGetArgs>? BgpSettings { get; set; }

        /// <summary>
        /// The ID of the local network gateway
        /// through which outbound Internet traffic from the virtual network in which the
        /// gateway is created will be routed (*forced tunneling*). Refer to the
        /// [Azure documentation on forced tunneling](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-forced-tunneling-rm).
        /// If not specified, forced tunneling is disabled.
        /// </summary>
        [Input("defaultLocalNetworkGatewayId")]
        public Input<string>? DefaultLocalNetworkGatewayId { get; set; }

        /// <summary>
        /// If `true`, BGP (Border Gateway Protocol) will be enabled
        /// for this Virtual Network Gateway. Defaults to `false`.
        /// </summary>
        [Input("enableBgp")]
        public Input<bool>? EnableBgp { get; set; }

        /// <summary>
        /// The Generation of the Virtual Network gateway. Possible values include `Generation1`, `Generation2` or `None`.
        /// </summary>
        [Input("generation")]
        public Input<string>? Generation { get; set; }

        [Input("ipConfigurations")]
        private InputList<Inputs.VirtualNetworkGatewayIpConfigurationsGetArgs>? _ipConfigurations;

        /// <summary>
        /// One or two `ip_configuration` blocks documented below.
        /// An active-standby gateway requires exactly one `ip_configuration` block whereas
        /// an active-active gateway requires exactly two `ip_configuration` blocks.
        /// </summary>
        public InputList<Inputs.VirtualNetworkGatewayIpConfigurationsGetArgs> IpConfigurations
        {
            get => _ipConfigurations ?? (_ipConfigurations = new InputList<Inputs.VirtualNetworkGatewayIpConfigurationsGetArgs>());
            set => _ipConfigurations = value;
        }

        /// <summary>
        /// The location/region where the Virtual Network Gateway is
        /// located. Changing the location/region forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A user-defined name of the revoked certificate.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the resource group in which to
        /// create the Virtual Network Gateway. Changing the resource group name forces
        /// a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Configuration of the size and capacity of the virtual network
        /// gateway. Valid options are `Basic`, `Standard`, `HighPerformance`, `UltraPerformance`,
        /// `ErGw1AZ`, `ErGw2AZ`, `ErGw3AZ`, `VpnGw1`, `VpnGw2`, `VpnGw3`, `VpnGw4`,`VpnGw5`, `VpnGw1AZ`,
        /// `VpnGw2AZ`, `VpnGw3AZ`,`VpnGw4AZ` and `VpnGw5AZ` and depend on the `type`, `vpn_type` and
        /// `generation` arguments.
        /// A `PolicyBased` gateway only supports the `Basic` sku. Further, the `UltraPerformance`
        /// sku is only supported by an `ExpressRoute` gateway.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of the Virtual Network Gateway. Valid options are
        /// `Vpn` or `ExpressRoute`. Changing the type forces a new resource to be created.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// A `vpn_client_configuration` block which
        /// is documented below. In this block the Virtual Network Gateway can be configured
        /// to accept IPSec point-to-site connections.
        /// </summary>
        [Input("vpnClientConfiguration")]
        public Input<Inputs.VirtualNetworkGatewayVpnClientConfigurationGetArgs>? VpnClientConfiguration { get; set; }

        /// <summary>
        /// The routing type of the Virtual Network Gateway. Valid
        /// options are `RouteBased` or `PolicyBased`. Defaults to `RouteBased`.
        /// </summary>
        [Input("vpnType")]
        public Input<string>? VpnType { get; set; }

        public VirtualNetworkGatewayState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class VirtualNetworkGatewayBgpSettingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Autonomous System Number (ASN) to use as part of the BGP.
        /// </summary>
        [Input("asn")]
        public Input<int>? Asn { get; set; }

        /// <summary>
        /// The weight added to routes which have been learned
        /// through BGP peering. Valid values can be between `0` and `100`.
        /// </summary>
        [Input("peerWeight")]
        public Input<int>? PeerWeight { get; set; }

        /// <summary>
        /// The BGP peer IP address of the virtual network
        /// gateway. This address is needed to configure the created gateway as a BGP Peer
        /// on the on-premises VPN devices. The IP address must be part of the subnet of
        /// the Virtual Network Gateway. Changing this forces a new resource to be created.
        /// </summary>
        [Input("peeringAddress")]
        public Input<string>? PeeringAddress { get; set; }

        public VirtualNetworkGatewayBgpSettingsArgs()
        {
        }
    }

    public sealed class VirtualNetworkGatewayBgpSettingsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Autonomous System Number (ASN) to use as part of the BGP.
        /// </summary>
        [Input("asn")]
        public Input<int>? Asn { get; set; }

        /// <summary>
        /// The weight added to routes which have been learned
        /// through BGP peering. Valid values can be between `0` and `100`.
        /// </summary>
        [Input("peerWeight")]
        public Input<int>? PeerWeight { get; set; }

        /// <summary>
        /// The BGP peer IP address of the virtual network
        /// gateway. This address is needed to configure the created gateway as a BGP Peer
        /// on the on-premises VPN devices. The IP address must be part of the subnet of
        /// the Virtual Network Gateway. Changing this forces a new resource to be created.
        /// </summary>
        [Input("peeringAddress")]
        public Input<string>? PeeringAddress { get; set; }

        public VirtualNetworkGatewayBgpSettingsGetArgs()
        {
        }
    }

    public sealed class VirtualNetworkGatewayIpConfigurationsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A user-defined name of the revoked certificate.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defines how the private IP address
        /// of the gateways virtual interface is assigned. Valid options are `Static` or
        /// `Dynamic`. Defaults to `Dynamic`.
        /// </summary>
        [Input("privateIpAddressAllocation")]
        public Input<string>? PrivateIpAddressAllocation { get; set; }

        /// <summary>
        /// The ID of the public ip address to associate
        /// with the Virtual Network Gateway.
        /// </summary>
        [Input("publicIpAddressId")]
        public Input<string>? PublicIpAddressId { get; set; }

        /// <summary>
        /// The ID of the gateway subnet of a virtual network in
        /// which the virtual network gateway will be created. It is mandatory that
        /// the associated subnet is named `GatewaySubnet`. Therefore, each virtual
        /// network can contain at most a single Virtual Network Gateway.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public VirtualNetworkGatewayIpConfigurationsArgs()
        {
        }
    }

    public sealed class VirtualNetworkGatewayIpConfigurationsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A user-defined name of the revoked certificate.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defines how the private IP address
        /// of the gateways virtual interface is assigned. Valid options are `Static` or
        /// `Dynamic`. Defaults to `Dynamic`.
        /// </summary>
        [Input("privateIpAddressAllocation")]
        public Input<string>? PrivateIpAddressAllocation { get; set; }

        /// <summary>
        /// The ID of the public ip address to associate
        /// with the Virtual Network Gateway.
        /// </summary>
        [Input("publicIpAddressId")]
        public Input<string>? PublicIpAddressId { get; set; }

        /// <summary>
        /// The ID of the gateway subnet of a virtual network in
        /// which the virtual network gateway will be created. It is mandatory that
        /// the associated subnet is named `GatewaySubnet`. Therefore, each virtual
        /// network can contain at most a single Virtual Network Gateway.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public VirtualNetworkGatewayIpConfigurationsGetArgs()
        {
        }
    }

    public sealed class VirtualNetworkGatewayVpnClientConfigurationArgs : Pulumi.ResourceArgs
    {
        [Input("addressSpaces", required: true)]
        private InputList<string>? _addressSpaces;

        /// <summary>
        /// The address space out of which ip addresses for
        /// vpn clients will be taken. You can provide more than one address space, e.g.
        /// in CIDR notation.
        /// </summary>
        public InputList<string> AddressSpaces
        {
            get => _addressSpaces ?? (_addressSpaces = new InputList<string>());
            set => _addressSpaces = value;
        }

        /// <summary>
        /// The address of the Radius server.
        /// This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
        /// </summary>
        [Input("radiusServerAddress")]
        public Input<string>? RadiusServerAddress { get; set; }

        /// <summary>
        /// The secret used by the Radius server.
        /// This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
        /// </summary>
        [Input("radiusServerSecret")]
        public Input<string>? RadiusServerSecret { get; set; }

        [Input("revokedCertificates")]
        private InputList<VirtualNetworkGatewayVpnClientConfigurationRevokedCertificatesArgs>? _revokedCertificates;

        /// <summary>
        /// One or more `revoked_certificate` blocks which
        /// are defined below.
        /// This setting is incompatible with the use of `radius_server_address` and `radius_server_secret`.
        /// </summary>
        public InputList<VirtualNetworkGatewayVpnClientConfigurationRevokedCertificatesArgs> RevokedCertificates
        {
            get => _revokedCertificates ?? (_revokedCertificates = new InputList<VirtualNetworkGatewayVpnClientConfigurationRevokedCertificatesArgs>());
            set => _revokedCertificates = value;
        }

        [Input("rootCertificates")]
        private InputList<VirtualNetworkGatewayVpnClientConfigurationRootCertificatesArgs>? _rootCertificates;

        /// <summary>
        /// One or more `root_certificate` blocks which are
        /// defined below. These root certificates are used to sign the client certificate
        /// used by the VPN clients to connect to the gateway.
        /// This setting is incompatible with the use of `radius_server_address` and `radius_server_secret`.
        /// </summary>
        public InputList<VirtualNetworkGatewayVpnClientConfigurationRootCertificatesArgs> RootCertificates
        {
            get => _rootCertificates ?? (_rootCertificates = new InputList<VirtualNetworkGatewayVpnClientConfigurationRootCertificatesArgs>());
            set => _rootCertificates = value;
        }

        [Input("vpnClientProtocols")]
        private InputList<string>? _vpnClientProtocols;

        /// <summary>
        /// List of the protocols supported by the vpn client.
        /// The supported values are `SSTP`, `IkeV2` and `OpenVPN`.
        /// </summary>
        public InputList<string> VpnClientProtocols
        {
            get => _vpnClientProtocols ?? (_vpnClientProtocols = new InputList<string>());
            set => _vpnClientProtocols = value;
        }

        public VirtualNetworkGatewayVpnClientConfigurationArgs()
        {
        }
    }

    public sealed class VirtualNetworkGatewayVpnClientConfigurationGetArgs : Pulumi.ResourceArgs
    {
        [Input("addressSpaces", required: true)]
        private InputList<string>? _addressSpaces;

        /// <summary>
        /// The address space out of which ip addresses for
        /// vpn clients will be taken. You can provide more than one address space, e.g.
        /// in CIDR notation.
        /// </summary>
        public InputList<string> AddressSpaces
        {
            get => _addressSpaces ?? (_addressSpaces = new InputList<string>());
            set => _addressSpaces = value;
        }

        /// <summary>
        /// The address of the Radius server.
        /// This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
        /// </summary>
        [Input("radiusServerAddress")]
        public Input<string>? RadiusServerAddress { get; set; }

        /// <summary>
        /// The secret used by the Radius server.
        /// This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
        /// </summary>
        [Input("radiusServerSecret")]
        public Input<string>? RadiusServerSecret { get; set; }

        [Input("revokedCertificates")]
        private InputList<VirtualNetworkGatewayVpnClientConfigurationRevokedCertificatesGetArgs>? _revokedCertificates;

        /// <summary>
        /// One or more `revoked_certificate` blocks which
        /// are defined below.
        /// This setting is incompatible with the use of `radius_server_address` and `radius_server_secret`.
        /// </summary>
        public InputList<VirtualNetworkGatewayVpnClientConfigurationRevokedCertificatesGetArgs> RevokedCertificates
        {
            get => _revokedCertificates ?? (_revokedCertificates = new InputList<VirtualNetworkGatewayVpnClientConfigurationRevokedCertificatesGetArgs>());
            set => _revokedCertificates = value;
        }

        [Input("rootCertificates")]
        private InputList<VirtualNetworkGatewayVpnClientConfigurationRootCertificatesGetArgs>? _rootCertificates;

        /// <summary>
        /// One or more `root_certificate` blocks which are
        /// defined below. These root certificates are used to sign the client certificate
        /// used by the VPN clients to connect to the gateway.
        /// This setting is incompatible with the use of `radius_server_address` and `radius_server_secret`.
        /// </summary>
        public InputList<VirtualNetworkGatewayVpnClientConfigurationRootCertificatesGetArgs> RootCertificates
        {
            get => _rootCertificates ?? (_rootCertificates = new InputList<VirtualNetworkGatewayVpnClientConfigurationRootCertificatesGetArgs>());
            set => _rootCertificates = value;
        }

        [Input("vpnClientProtocols")]
        private InputList<string>? _vpnClientProtocols;

        /// <summary>
        /// List of the protocols supported by the vpn client.
        /// The supported values are `SSTP`, `IkeV2` and `OpenVPN`.
        /// </summary>
        public InputList<string> VpnClientProtocols
        {
            get => _vpnClientProtocols ?? (_vpnClientProtocols = new InputList<string>());
            set => _vpnClientProtocols = value;
        }

        public VirtualNetworkGatewayVpnClientConfigurationGetArgs()
        {
        }
    }

    public sealed class VirtualNetworkGatewayVpnClientConfigurationRevokedCertificatesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A user-defined name of the revoked certificate.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("thumbprint", required: true)]
        public Input<string> Thumbprint { get; set; } = null!;

        public VirtualNetworkGatewayVpnClientConfigurationRevokedCertificatesArgs()
        {
        }
    }

    public sealed class VirtualNetworkGatewayVpnClientConfigurationRevokedCertificatesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A user-defined name of the revoked certificate.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("thumbprint", required: true)]
        public Input<string> Thumbprint { get; set; } = null!;

        public VirtualNetworkGatewayVpnClientConfigurationRevokedCertificatesGetArgs()
        {
        }
    }

    public sealed class VirtualNetworkGatewayVpnClientConfigurationRootCertificatesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A user-defined name of the revoked certificate.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The SHA1 thumbprint of the certificate to be
        /// revoked.
        /// </summary>
        [Input("publicCertData", required: true)]
        public Input<string> PublicCertData { get; set; } = null!;

        public VirtualNetworkGatewayVpnClientConfigurationRootCertificatesArgs()
        {
        }
    }

    public sealed class VirtualNetworkGatewayVpnClientConfigurationRootCertificatesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A user-defined name of the revoked certificate.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The SHA1 thumbprint of the certificate to be
        /// revoked.
        /// </summary>
        [Input("publicCertData", required: true)]
        public Input<string> PublicCertData { get; set; } = null!;

        public VirtualNetworkGatewayVpnClientConfigurationRootCertificatesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class VirtualNetworkGatewayBgpSettings
    {
        /// <summary>
        /// The Autonomous System Number (ASN) to use as part of the BGP.
        /// </summary>
        public readonly int? Asn;
        /// <summary>
        /// The weight added to routes which have been learned
        /// through BGP peering. Valid values can be between `0` and `100`.
        /// </summary>
        public readonly int? PeerWeight;
        /// <summary>
        /// The BGP peer IP address of the virtual network
        /// gateway. This address is needed to configure the created gateway as a BGP Peer
        /// on the on-premises VPN devices. The IP address must be part of the subnet of
        /// the Virtual Network Gateway. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string PeeringAddress;

        [OutputConstructor]
        private VirtualNetworkGatewayBgpSettings(
            int? asn,
            int? peerWeight,
            string peeringAddress)
        {
            Asn = asn;
            PeerWeight = peerWeight;
            PeeringAddress = peeringAddress;
        }
    }

    [OutputType]
    public sealed class VirtualNetworkGatewayIpConfigurations
    {
        /// <summary>
        /// A user-defined name of the revoked certificate.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Defines how the private IP address
        /// of the gateways virtual interface is assigned. Valid options are `Static` or
        /// `Dynamic`. Defaults to `Dynamic`.
        /// </summary>
        public readonly string? PrivateIpAddressAllocation;
        /// <summary>
        /// The ID of the public ip address to associate
        /// with the Virtual Network Gateway.
        /// </summary>
        public readonly string? PublicIpAddressId;
        /// <summary>
        /// The ID of the gateway subnet of a virtual network in
        /// which the virtual network gateway will be created. It is mandatory that
        /// the associated subnet is named `GatewaySubnet`. Therefore, each virtual
        /// network can contain at most a single Virtual Network Gateway.
        /// </summary>
        public readonly string SubnetId;

        [OutputConstructor]
        private VirtualNetworkGatewayIpConfigurations(
            string? name,
            string? privateIpAddressAllocation,
            string? publicIpAddressId,
            string subnetId)
        {
            Name = name;
            PrivateIpAddressAllocation = privateIpAddressAllocation;
            PublicIpAddressId = publicIpAddressId;
            SubnetId = subnetId;
        }
    }

    [OutputType]
    public sealed class VirtualNetworkGatewayVpnClientConfiguration
    {
        /// <summary>
        /// The address space out of which ip addresses for
        /// vpn clients will be taken. You can provide more than one address space, e.g.
        /// in CIDR notation.
        /// </summary>
        public readonly ImmutableArray<string> AddressSpaces;
        /// <summary>
        /// The address of the Radius server.
        /// This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
        /// </summary>
        public readonly string? RadiusServerAddress;
        /// <summary>
        /// The secret used by the Radius server.
        /// This setting is incompatible with the use of `root_certificate` and `revoked_certificate`.
        /// </summary>
        public readonly string? RadiusServerSecret;
        /// <summary>
        /// One or more `revoked_certificate` blocks which
        /// are defined below.
        /// This setting is incompatible with the use of `radius_server_address` and `radius_server_secret`.
        /// </summary>
        public readonly ImmutableArray<VirtualNetworkGatewayVpnClientConfigurationRevokedCertificates> RevokedCertificates;
        /// <summary>
        /// One or more `root_certificate` blocks which are
        /// defined below. These root certificates are used to sign the client certificate
        /// used by the VPN clients to connect to the gateway.
        /// This setting is incompatible with the use of `radius_server_address` and `radius_server_secret`.
        /// </summary>
        public readonly ImmutableArray<VirtualNetworkGatewayVpnClientConfigurationRootCertificates> RootCertificates;
        /// <summary>
        /// List of the protocols supported by the vpn client.
        /// The supported values are `SSTP`, `IkeV2` and `OpenVPN`.
        /// </summary>
        public readonly ImmutableArray<string> VpnClientProtocols;

        [OutputConstructor]
        private VirtualNetworkGatewayVpnClientConfiguration(
            ImmutableArray<string> addressSpaces,
            string? radiusServerAddress,
            string? radiusServerSecret,
            ImmutableArray<VirtualNetworkGatewayVpnClientConfigurationRevokedCertificates> revokedCertificates,
            ImmutableArray<VirtualNetworkGatewayVpnClientConfigurationRootCertificates> rootCertificates,
            ImmutableArray<string> vpnClientProtocols)
        {
            AddressSpaces = addressSpaces;
            RadiusServerAddress = radiusServerAddress;
            RadiusServerSecret = radiusServerSecret;
            RevokedCertificates = revokedCertificates;
            RootCertificates = rootCertificates;
            VpnClientProtocols = vpnClientProtocols;
        }
    }

    [OutputType]
    public sealed class VirtualNetworkGatewayVpnClientConfigurationRevokedCertificates
    {
        /// <summary>
        /// A user-defined name of the revoked certificate.
        /// </summary>
        public readonly string Name;
        public readonly string Thumbprint;

        [OutputConstructor]
        private VirtualNetworkGatewayVpnClientConfigurationRevokedCertificates(
            string name,
            string thumbprint)
        {
            Name = name;
            Thumbprint = thumbprint;
        }
    }

    [OutputType]
    public sealed class VirtualNetworkGatewayVpnClientConfigurationRootCertificates
    {
        /// <summary>
        /// A user-defined name of the revoked certificate.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The SHA1 thumbprint of the certificate to be
        /// revoked.
        /// </summary>
        public readonly string PublicCertData;

        [OutputConstructor]
        private VirtualNetworkGatewayVpnClientConfigurationRootCertificates(
            string name,
            string publicCertData)
        {
            Name = name;
            PublicCertData = publicCertData;
        }
    }
    }
}
