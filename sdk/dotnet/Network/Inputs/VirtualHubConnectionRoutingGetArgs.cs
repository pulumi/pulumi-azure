// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network.Inputs
{

    public sealed class VirtualHubConnectionRoutingGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the route table associated with this Virtual Hub connection.
        /// </summary>
        [Input("associatedRouteTableId")]
        public Input<string>? AssociatedRouteTableId { get; set; }

        /// <summary>
        /// The resource ID of the Route Map associated with this Routing Configuration for inbound learned routes.
        /// </summary>
        [Input("inboundRouteMapId")]
        public Input<string>? InboundRouteMapId { get; set; }

        /// <summary>
        /// The resource ID of the Route Map associated with this Routing Configuration for outbound advertised routes.
        /// </summary>
        [Input("outboundRouteMapId")]
        public Input<string>? OutboundRouteMapId { get; set; }

        /// <summary>
        /// A `PropagatedRouteTable` block as defined below.
        /// </summary>
        [Input("propagatedRouteTable")]
        public Input<Inputs.VirtualHubConnectionRoutingPropagatedRouteTableGetArgs>? PropagatedRouteTable { get; set; }

        /// <summary>
        /// The static VNet local route override criteria that is used to determine whether NVA in spoke VNet is bypassed for traffic with destination in spoke VNet. Possible values are `Contains` and `Equal`. Defaults to `Contains`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("staticVnetLocalRouteOverrideCriteria")]
        public Input<string>? StaticVnetLocalRouteOverrideCriteria { get; set; }

        /// <summary>
        /// Whether the static routes should be propagated to the Virtual Hub. Defaults to `True`.
        /// </summary>
        [Input("staticVnetPropagateStaticRoutesEnabled")]
        public Input<bool>? StaticVnetPropagateStaticRoutesEnabled { get; set; }

        [Input("staticVnetRoutes")]
        private InputList<Inputs.VirtualHubConnectionRoutingStaticVnetRouteGetArgs>? _staticVnetRoutes;

        /// <summary>
        /// A `StaticVnetRoute` block as defined below.
        /// </summary>
        public InputList<Inputs.VirtualHubConnectionRoutingStaticVnetRouteGetArgs> StaticVnetRoutes
        {
            get => _staticVnetRoutes ?? (_staticVnetRoutes = new InputList<Inputs.VirtualHubConnectionRoutingStaticVnetRouteGetArgs>());
            set => _staticVnetRoutes = value;
        }

        public VirtualHubConnectionRoutingGetArgs()
        {
        }
        public static new VirtualHubConnectionRoutingGetArgs Empty => new VirtualHubConnectionRoutingGetArgs();
    }
}
