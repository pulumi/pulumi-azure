// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network.Inputs
{

    public sealed class VirtualNetworkGatewayVpnClientConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The client id of the Azure VPN application.
        /// See [Create an Active Directory (AD) tenant for P2S OpenVPN protocol connections](https://docs.microsoft.com/en-gb/azure/vpn-gateway/openvpn-azure-ad-tenant-multi-app) for values
        /// </summary>
        [Input("aadAudience")]
        public Input<string>? AadAudience { get; set; }

        /// <summary>
        /// The STS url for your tenant
        /// </summary>
        [Input("aadIssuer")]
        public Input<string>? AadIssuer { get; set; }

        /// <summary>
        /// AzureAD Tenant URL
        /// </summary>
        [Input("aadTenant")]
        public Input<string>? AadTenant { get; set; }

        [Input("addressSpaces", required: true)]
        private InputList<string>? _addressSpaces;

        /// <summary>
        /// The address space out of which IP addresses for vpn clients will be taken. You can provide more than one address space, e.g. in CIDR notation.
        /// </summary>
        public InputList<string> AddressSpaces
        {
            get => _addressSpaces ?? (_addressSpaces = new InputList<string>());
            set => _addressSpaces = value;
        }

        /// <summary>
        /// An `ipsec_policy` block as defined below.
        /// </summary>
        [Input("ipsecPolicy")]
        public Input<Inputs.VirtualNetworkGatewayVpnClientConfigurationIpsecPolicyArgs>? IpsecPolicy { get; set; }

        /// <summary>
        /// The address of the Radius server.
        /// </summary>
        [Input("radiusServerAddress")]
        public Input<string>? RadiusServerAddress { get; set; }

        /// <summary>
        /// The secret used by the Radius server.
        /// </summary>
        [Input("radiusServerSecret")]
        public Input<string>? RadiusServerSecret { get; set; }

        [Input("radiusServers")]
        private InputList<Inputs.VirtualNetworkGatewayVpnClientConfigurationRadiusServerArgs>? _radiusServers;

        /// <summary>
        /// One or more `radius_server` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VirtualNetworkGatewayVpnClientConfigurationRadiusServerArgs> RadiusServers
        {
            get => _radiusServers ?? (_radiusServers = new InputList<Inputs.VirtualNetworkGatewayVpnClientConfigurationRadiusServerArgs>());
            set => _radiusServers = value;
        }

        [Input("revokedCertificates")]
        private InputList<Inputs.VirtualNetworkGatewayVpnClientConfigurationRevokedCertificateArgs>? _revokedCertificates;

        /// <summary>
        /// One or more `revoked_certificate` blocks which are defined below.
        /// </summary>
        public InputList<Inputs.VirtualNetworkGatewayVpnClientConfigurationRevokedCertificateArgs> RevokedCertificates
        {
            get => _revokedCertificates ?? (_revokedCertificates = new InputList<Inputs.VirtualNetworkGatewayVpnClientConfigurationRevokedCertificateArgs>());
            set => _revokedCertificates = value;
        }

        [Input("rootCertificates")]
        private InputList<Inputs.VirtualNetworkGatewayVpnClientConfigurationRootCertificateArgs>? _rootCertificates;

        /// <summary>
        /// One or more `root_certificate` blocks which are defined below. These root certificates are used to sign the client certificate used by the VPN clients to connect to the gateway.
        /// </summary>
        public InputList<Inputs.VirtualNetworkGatewayVpnClientConfigurationRootCertificateArgs> RootCertificates
        {
            get => _rootCertificates ?? (_rootCertificates = new InputList<Inputs.VirtualNetworkGatewayVpnClientConfigurationRootCertificateArgs>());
            set => _rootCertificates = value;
        }

        [Input("virtualNetworkGatewayClientConnections")]
        private InputList<Inputs.VirtualNetworkGatewayVpnClientConfigurationVirtualNetworkGatewayClientConnectionArgs>? _virtualNetworkGatewayClientConnections;

        /// <summary>
        /// One or more `virtual_network_gateway_client_connection` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VirtualNetworkGatewayVpnClientConfigurationVirtualNetworkGatewayClientConnectionArgs> VirtualNetworkGatewayClientConnections
        {
            get => _virtualNetworkGatewayClientConnections ?? (_virtualNetworkGatewayClientConnections = new InputList<Inputs.VirtualNetworkGatewayVpnClientConfigurationVirtualNetworkGatewayClientConnectionArgs>());
            set => _virtualNetworkGatewayClientConnections = value;
        }

        [Input("vpnAuthTypes")]
        private InputList<string>? _vpnAuthTypes;

        /// <summary>
        /// List of the vpn authentication types for the virtual network gateway.
        /// The supported values are `AAD`, `Radius` and `Certificate`.
        /// 
        /// &gt; **NOTE:** `vpn_auth_types` must be set when using multiple vpn authentication types.
        /// </summary>
        public InputList<string> VpnAuthTypes
        {
            get => _vpnAuthTypes ?? (_vpnAuthTypes = new InputList<string>());
            set => _vpnAuthTypes = value;
        }

        [Input("vpnClientProtocols")]
        private InputList<string>? _vpnClientProtocols;

        /// <summary>
        /// List of the protocols supported by the vpn client.
        /// The supported values are `SSTP`, `IkeV2` and `OpenVPN`.
        /// Values `SSTP` and `IkeV2` are incompatible with the use of
        /// `aad_tenant`, `aad_audience` and `aad_issuer`.
        /// </summary>
        public InputList<string> VpnClientProtocols
        {
            get => _vpnClientProtocols ?? (_vpnClientProtocols = new InputList<string>());
            set => _vpnClientProtocols = value;
        }

        public VirtualNetworkGatewayVpnClientConfigurationArgs()
        {
        }
        public static new VirtualNetworkGatewayVpnClientConfigurationArgs Empty => new VirtualNetworkGatewayVpnClientConfigurationArgs();
    }
}
