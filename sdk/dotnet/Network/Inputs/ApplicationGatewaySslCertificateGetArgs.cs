// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network.Inputs
{

    public sealed class ApplicationGatewaySslCertificateGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("data")]
        private Input<string>? _data;

        /// <summary>
        /// The base64-encoded PFX certificate data. Required if `key_vault_secret_id` is not set.
        /// 
        /// &gt; **NOTE:** When specifying a file, use `data = filebase64("path/to/file")` to encode the contents of that file.
        /// </summary>
        public Input<string>? Data
        {
            get => _data;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _data = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of the Rewrite Rule Set
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The Secret ID of (base-64 encoded unencrypted pfx) the `Secret` or `Certificate` object stored in Azure KeyVault. You need to enable soft delete for Key Vault to use this feature. Required if `data` is not set.
        /// 
        /// &gt; **NOTE:** TLS termination with Key Vault certificates is limited to the [v2 SKUs](https://docs.microsoft.com/azure/application-gateway/key-vault-certs).
        /// 
        /// &gt; **NOTE:** For TLS termination with Key Vault certificates to work properly existing user-assigned managed identity, which Application Gateway uses to retrieve certificates from Key Vault, should be defined via `identity` block. Additionally, access policies in the Key Vault to allow the identity to be granted *get* access to the secret should be defined.
        /// </summary>
        [Input("keyVaultSecretId")]
        public Input<string>? KeyVaultSecretId { get; set; }

        /// <summary>
        /// The Name of the SSL certificate that is unique within this Application Gateway
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password for the pfx file specified in data. Required if `data` is set.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Public Certificate Data associated with the SSL Certificate.
        /// </summary>
        [Input("publicCertData")]
        public Input<string>? PublicCertData { get; set; }

        public ApplicationGatewaySslCertificateGetArgs()
        {
        }
        public static new ApplicationGatewaySslCertificateGetArgs Empty => new ApplicationGatewaySslCertificateGetArgs();
    }
}
