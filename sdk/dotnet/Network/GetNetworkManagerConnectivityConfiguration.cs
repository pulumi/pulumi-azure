// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    public static class GetNetworkManagerConnectivityConfiguration
    {
        /// <summary>
        /// Use this data source to access information about an existing Network Manager Connectivity Configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetNetworkManagerConnectivityConfiguration.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         NetworkManagerId = "TODO",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getNetworkManagerConnectivityConfigurationResult =&gt; getNetworkManagerConnectivityConfigurationResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetNetworkManagerConnectivityConfigurationResult> InvokeAsync(GetNetworkManagerConnectivityConfigurationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkManagerConnectivityConfigurationResult>("azure:network/getNetworkManagerConnectivityConfiguration:getNetworkManagerConnectivityConfiguration", args ?? new GetNetworkManagerConnectivityConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Network Manager Connectivity Configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetNetworkManagerConnectivityConfiguration.Invoke(new()
        ///     {
        ///         Name = "existing",
        ///         NetworkManagerId = "TODO",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getNetworkManagerConnectivityConfigurationResult =&gt; getNetworkManagerConnectivityConfigurationResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworkManagerConnectivityConfigurationResult> Invoke(GetNetworkManagerConnectivityConfigurationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkManagerConnectivityConfigurationResult>("azure:network/getNetworkManagerConnectivityConfiguration:getNetworkManagerConnectivityConfiguration", args ?? new GetNetworkManagerConnectivityConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkManagerConnectivityConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Network Manager Connectivity Configuration.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the Network Manager.
        /// </summary>
        [Input("networkManagerId", required: true)]
        public string NetworkManagerId { get; set; } = null!;

        public GetNetworkManagerConnectivityConfigurationArgs()
        {
        }
        public static new GetNetworkManagerConnectivityConfigurationArgs Empty => new GetNetworkManagerConnectivityConfigurationArgs();
    }

    public sealed class GetNetworkManagerConnectivityConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this Network Manager Connectivity Configuration.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the Network Manager.
        /// </summary>
        [Input("networkManagerId", required: true)]
        public Input<string> NetworkManagerId { get; set; } = null!;

        public GetNetworkManagerConnectivityConfigurationInvokeArgs()
        {
        }
        public static new GetNetworkManagerConnectivityConfigurationInvokeArgs Empty => new GetNetworkManagerConnectivityConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkManagerConnectivityConfigurationResult
    {
        /// <summary>
        /// An `applies_to_group` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkManagerConnectivityConfigurationAppliesToGroupResult> AppliesToGroups;
        /// <summary>
        /// The connectivity topology type.
        /// </summary>
        public readonly string ConnectivityTopology;
        /// <summary>
        /// Whether to current existing Virtual Network Peering in the Connectivity Configuration affected scope.
        /// </summary>
        public readonly bool DeleteExistingPeeringEnabled;
        /// <summary>
        /// The description of the Connectivity Configuration.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Whether global mesh is supported.
        /// </summary>
        public readonly bool GlobalMeshEnabled;
        /// <summary>
        /// A `hub` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkManagerConnectivityConfigurationHubResult> Hubs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string NetworkManagerId;

        [OutputConstructor]
        private GetNetworkManagerConnectivityConfigurationResult(
            ImmutableArray<Outputs.GetNetworkManagerConnectivityConfigurationAppliesToGroupResult> appliesToGroups,

            string connectivityTopology,

            bool deleteExistingPeeringEnabled,

            string description,

            bool globalMeshEnabled,

            ImmutableArray<Outputs.GetNetworkManagerConnectivityConfigurationHubResult> hubs,

            string id,

            string name,

            string networkManagerId)
        {
            AppliesToGroups = appliesToGroups;
            ConnectivityTopology = connectivityTopology;
            DeleteExistingPeeringEnabled = deleteExistingPeeringEnabled;
            Description = description;
            GlobalMeshEnabled = globalMeshEnabled;
            Hubs = hubs;
            Id = id;
            Name = name;
            NetworkManagerId = networkManagerId;
        }
    }
}
