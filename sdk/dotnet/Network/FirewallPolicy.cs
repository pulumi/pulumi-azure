// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages a Firewall Policy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Azure.Network.FirewallPolicy("example", new Azure.Network.FirewallPolicyArgs
    ///         {
    ///             Location = "West Europe",
    ///             ResourceGroupName = "example",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// networks can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:network/firewallPolicy:FirewallPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/firewallPolicies/policy1
    /// ```
    /// </summary>
    public partial class FirewallPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the base Firewall Policy.
        /// </summary>
        [Output("basePolicyId")]
        public Output<string?> BasePolicyId { get; private set; } = null!;

        /// <summary>
        /// A list of reference to child Firewall Policies of this Firewall Policy.
        /// </summary>
        [Output("childPolicies")]
        public Output<ImmutableArray<string>> ChildPolicies { get; private set; } = null!;

        /// <summary>
        /// A `dns` block as defined below.
        /// </summary>
        [Output("dns")]
        public Output<Outputs.FirewallPolicyDns?> Dns { get; private set; } = null!;

        /// <summary>
        /// A list of references to Azure Firewalls that this Firewall Policy is associated with.
        /// </summary>
        [Output("firewalls")]
        public Output<ImmutableArray<string>> Firewalls { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Firewall Policy. Changing this forces a new Firewall Policy to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A list of references to Firewall Policy Rule Collection Groups that belongs to this Firewall Policy.
        /// </summary>
        [Output("ruleCollectionGroups")]
        public Output<ImmutableArray<string>> RuleCollectionGroups { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Firewall Policy.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A `threat_intelligence_allowlist` block as defined below.
        /// </summary>
        [Output("threatIntelligenceAllowlist")]
        public Output<Outputs.FirewallPolicyThreatIntelligenceAllowlist?> ThreatIntelligenceAllowlist { get; private set; } = null!;

        /// <summary>
        /// The operation mode for Threat Intelligence. Possible values are `Alert`, `Deny` and `Off`. Defaults to `Alert`.
        /// </summary>
        [Output("threatIntelligenceMode")]
        public Output<string?> ThreatIntelligenceMode { get; private set; } = null!;


        /// <summary>
        /// Create a FirewallPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FirewallPolicy(string name, FirewallPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure:network/firewallPolicy:FirewallPolicy", name, args ?? new FirewallPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FirewallPolicy(string name, Input<string> id, FirewallPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/firewallPolicy:FirewallPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FirewallPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FirewallPolicy Get(string name, Input<string> id, FirewallPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new FirewallPolicy(name, id, state, options);
        }
    }

    public sealed class FirewallPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the base Firewall Policy.
        /// </summary>
        [Input("basePolicyId")]
        public Input<string>? BasePolicyId { get; set; }

        /// <summary>
        /// A `dns` block as defined below.
        /// </summary>
        [Input("dns")]
        public Input<Inputs.FirewallPolicyDnsArgs>? Dns { get; set; }

        /// <summary>
        /// The Azure Region where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Firewall Policy. Changing this forces a new Firewall Policy to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Firewall Policy.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `threat_intelligence_allowlist` block as defined below.
        /// </summary>
        [Input("threatIntelligenceAllowlist")]
        public Input<Inputs.FirewallPolicyThreatIntelligenceAllowlistArgs>? ThreatIntelligenceAllowlist { get; set; }

        /// <summary>
        /// The operation mode for Threat Intelligence. Possible values are `Alert`, `Deny` and `Off`. Defaults to `Alert`.
        /// </summary>
        [Input("threatIntelligenceMode")]
        public Input<string>? ThreatIntelligenceMode { get; set; }

        public FirewallPolicyArgs()
        {
        }
    }

    public sealed class FirewallPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the base Firewall Policy.
        /// </summary>
        [Input("basePolicyId")]
        public Input<string>? BasePolicyId { get; set; }

        [Input("childPolicies")]
        private InputList<string>? _childPolicies;

        /// <summary>
        /// A list of reference to child Firewall Policies of this Firewall Policy.
        /// </summary>
        public InputList<string> ChildPolicies
        {
            get => _childPolicies ?? (_childPolicies = new InputList<string>());
            set => _childPolicies = value;
        }

        /// <summary>
        /// A `dns` block as defined below.
        /// </summary>
        [Input("dns")]
        public Input<Inputs.FirewallPolicyDnsGetArgs>? Dns { get; set; }

        [Input("firewalls")]
        private InputList<string>? _firewalls;

        /// <summary>
        /// A list of references to Azure Firewalls that this Firewall Policy is associated with.
        /// </summary>
        public InputList<string> Firewalls
        {
            get => _firewalls ?? (_firewalls = new InputList<string>());
            set => _firewalls = value;
        }

        /// <summary>
        /// The Azure Region where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Firewall Policy. Changing this forces a new Firewall Policy to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("ruleCollectionGroups")]
        private InputList<string>? _ruleCollectionGroups;

        /// <summary>
        /// A list of references to Firewall Policy Rule Collection Groups that belongs to this Firewall Policy.
        /// </summary>
        public InputList<string> RuleCollectionGroups
        {
            get => _ruleCollectionGroups ?? (_ruleCollectionGroups = new InputList<string>());
            set => _ruleCollectionGroups = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Firewall Policy.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `threat_intelligence_allowlist` block as defined below.
        /// </summary>
        [Input("threatIntelligenceAllowlist")]
        public Input<Inputs.FirewallPolicyThreatIntelligenceAllowlistGetArgs>? ThreatIntelligenceAllowlist { get; set; }

        /// <summary>
        /// The operation mode for Threat Intelligence. Possible values are `Alert`, `Deny` and `Off`. Defaults to `Alert`.
        /// </summary>
        [Input("threatIntelligenceMode")]
        public Input<string>? ThreatIntelligenceMode { get; set; }

        public FirewallPolicyState()
        {
        }
    }
}
