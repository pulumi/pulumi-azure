// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages a Route Map.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualWan = new Azure.Network.VirtualWan("exampleVirtualWan", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///     });
    /// 
    ///     var test = new Azure.Network.VirtualHub("test", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         VirtualWanId = exampleVirtualWan.Id,
    ///         AddressPrefix = "10.0.1.0/24",
    ///     });
    /// 
    ///     var exampleRouteMap = new Azure.Network.RouteMap("exampleRouteMap", new()
    ///     {
    ///         VirtualHubId = azurerm_virtual_hub.Example.Id,
    ///         Rules = new[]
    ///         {
    ///             new Azure.Network.Inputs.RouteMapRuleArgs
    ///             {
    ///                 Name = "rule1",
    ///                 NextStepIfMatched = "Continue",
    ///                 Actions = new[]
    ///                 {
    ///                     new Azure.Network.Inputs.RouteMapRuleActionArgs
    ///                     {
    ///                         Type = "Add",
    ///                         Parameters = new[]
    ///                         {
    ///                             new Azure.Network.Inputs.RouteMapRuleActionParameterArgs
    ///                             {
    ///                                 AsPaths = new[]
    ///                                 {
    ///                                     "22334",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 MatchCriterions = new[]
    ///                 {
    ///                     new Azure.Network.Inputs.RouteMapRuleMatchCriterionArgs
    ///                     {
    ///                         MatchCondition = "Contains",
    ///                         RoutePrefixes = new[]
    ///                         {
    ///                             "10.0.0.0/8",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Route Maps can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:network/routeMap:RouteMap example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/virtualHubs/virtualHub1/routeMaps/routeMap1
    /// ```
    /// </summary>
    [AzureResourceType("azure:network/routeMap:RouteMap")]
    public partial class RouteMap : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name which should be used for this Route Map. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `rule` block as defined below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.RouteMapRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the Virtual Hub. Changing this forces a new resource to be created.
        /// </summary>
        [Output("virtualHubId")]
        public Output<string> VirtualHubId { get; private set; } = null!;


        /// <summary>
        /// Create a RouteMap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouteMap(string name, RouteMapArgs args, CustomResourceOptions? options = null)
            : base("azure:network/routeMap:RouteMap", name, args ?? new RouteMapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouteMap(string name, Input<string> id, RouteMapState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/routeMap:RouteMap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouteMap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouteMap Get(string name, Input<string> id, RouteMapState? state = null, CustomResourceOptions? options = null)
        {
            return new RouteMap(name, id, state, options);
        }
    }

    public sealed class RouteMapArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name which should be used for this Route Map. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rules")]
        private InputList<Inputs.RouteMapRuleArgs>? _rules;

        /// <summary>
        /// A `rule` block as defined below.
        /// </summary>
        public InputList<Inputs.RouteMapRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.RouteMapRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// The resource ID of the Virtual Hub. Changing this forces a new resource to be created.
        /// </summary>
        [Input("virtualHubId", required: true)]
        public Input<string> VirtualHubId { get; set; } = null!;

        public RouteMapArgs()
        {
        }
        public static new RouteMapArgs Empty => new RouteMapArgs();
    }

    public sealed class RouteMapState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name which should be used for this Route Map. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rules")]
        private InputList<Inputs.RouteMapRuleGetArgs>? _rules;

        /// <summary>
        /// A `rule` block as defined below.
        /// </summary>
        public InputList<Inputs.RouteMapRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.RouteMapRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// The resource ID of the Virtual Hub. Changing this forces a new resource to be created.
        /// </summary>
        [Input("virtualHubId")]
        public Input<string>? VirtualHubId { get; set; }

        public RouteMapState()
        {
        }
        public static new RouteMapState Empty => new RouteMapState();
    }
}
