// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to access information about an existing Virtual Network Gateway Connection.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/d/virtual_network_gateway_connection.html.markdown.
        /// </summary>
        public static Task<GetGatewayConnectionResult> GetGatewayConnection(GetGatewayConnectionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGatewayConnectionResult>("azure:network/getGatewayConnection:getGatewayConnection", args ?? ResourceArgs.Empty, options.WithVersion());
    }

    public sealed class GetGatewayConnectionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the Virtual Network Gateway Connection.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the Virtual Network Gateway Connection is located in.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetGatewayConnectionArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetGatewayConnectionResult
    {
        /// <summary>
        /// The authorization key associated with the
        /// Express Route Circuit. This field is present only if the type is an
        /// ExpressRoute connection.
        /// </summary>
        public readonly string AuthorizationKey;
        public readonly string ConnectionProtocol;
        public readonly int EgressBytesTransferred;
        /// <summary>
        /// If `true`, BGP (Border Gateway Protocol) is enabled
        /// for this connection.
        /// </summary>
        public readonly bool EnableBgp;
        /// <summary>
        /// The ID of the Express Route Circuit
        /// (i.e. when `type` is `ExpressRoute`).
        /// </summary>
        public readonly string ExpressRouteCircuitId;
        /// <summary>
        /// If `true`, data packets will bypass ExpressRoute Gateway for data forwarding. This is only valid for ExpressRoute connections.
        /// </summary>
        public readonly bool ExpressRouteGatewayBypass;
        public readonly int IngressBytesTransferred;
        public readonly ImmutableArray<Outputs.GetGatewayConnectionIpsecPoliciesResult> IpsecPolicies;
        /// <summary>
        /// The ID of the local network gateway
        /// when a Site-to-Site connection (i.e. when `type` is `IPsec`).
        /// </summary>
        public readonly string LocalNetworkGatewayId;
        /// <summary>
        /// The location/region where the connection is
        /// located.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        /// <summary>
        /// The ID of the peer virtual
        /// network gateway when a VNet-to-VNet connection (i.e. when `type`
        /// is `Vnet2Vnet`).
        /// </summary>
        public readonly string PeerVirtualNetworkGatewayId;
        public readonly string ResourceGroupName;
        public readonly string ResourceGuid;
        /// <summary>
        /// The routing weight.
        /// </summary>
        public readonly int RoutingWeight;
        /// <summary>
        /// The shared IPSec key. 
        /// </summary>
        public readonly string SharedKey;
        /// <summary>
        /// (Optional) A mapping of tags to assign to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The type of connection. Valid options are `IPsec`
        /// (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet).
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// If `true`, policy-based traffic
        /// selectors are enabled for this connection. Enabling policy-based traffic
        /// selectors requires an `ipsec_policy` block.
        /// </summary>
        public readonly bool UsePolicyBasedTrafficSelectors;
        /// <summary>
        /// The ID of the Virtual Network Gateway
        /// in which the connection is created.
        /// </summary>
        public readonly string VirtualNetworkGatewayId;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetGatewayConnectionResult(
            string authorizationKey,
            string connectionProtocol,
            int egressBytesTransferred,
            bool enableBgp,
            string expressRouteCircuitId,
            bool expressRouteGatewayBypass,
            int ingressBytesTransferred,
            ImmutableArray<Outputs.GetGatewayConnectionIpsecPoliciesResult> ipsecPolicies,
            string localNetworkGatewayId,
            string location,
            string name,
            string peerVirtualNetworkGatewayId,
            string resourceGroupName,
            string resourceGuid,
            int routingWeight,
            string sharedKey,
            ImmutableDictionary<string, string> tags,
            string type,
            bool usePolicyBasedTrafficSelectors,
            string virtualNetworkGatewayId,
            string id)
        {
            AuthorizationKey = authorizationKey;
            ConnectionProtocol = connectionProtocol;
            EgressBytesTransferred = egressBytesTransferred;
            EnableBgp = enableBgp;
            ExpressRouteCircuitId = expressRouteCircuitId;
            ExpressRouteGatewayBypass = expressRouteGatewayBypass;
            IngressBytesTransferred = ingressBytesTransferred;
            IpsecPolicies = ipsecPolicies;
            LocalNetworkGatewayId = localNetworkGatewayId;
            Location = location;
            Name = name;
            PeerVirtualNetworkGatewayId = peerVirtualNetworkGatewayId;
            ResourceGroupName = resourceGroupName;
            ResourceGuid = resourceGuid;
            RoutingWeight = routingWeight;
            SharedKey = sharedKey;
            Tags = tags;
            Type = type;
            UsePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
            VirtualNetworkGatewayId = virtualNetworkGatewayId;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetGatewayConnectionIpsecPoliciesResult
    {
        /// <summary>
        /// The DH group used in IKE phase 1 for initial SA. Valid
        /// options are `DHGroup1`, `DHGroup14`, `DHGroup2`, `DHGroup2048`, `DHGroup24`,
        /// `ECP256`, `ECP384`, or `None`.
        /// </summary>
        public readonly string DhGroup;
        /// <summary>
        /// The IKE encryption algorithm. Valid
        /// options are `AES128`, `AES192`, `AES256`, `DES`, or `DES3`.
        /// </summary>
        public readonly string IkeEncryption;
        /// <summary>
        /// The IKE integrity algorithm. Valid
        /// options are `MD5`, `SHA1`, `SHA256`, or `SHA384`.
        /// </summary>
        public readonly string IkeIntegrity;
        /// <summary>
        /// The IPSec encryption algorithm. Valid
        /// options are `AES128`, `AES192`, `AES256`, `DES`, `DES3`, `GCMAES128`, `GCMAES192`, `GCMAES256`, or `None`.
        /// </summary>
        public readonly string IpsecEncryption;
        /// <summary>
        /// The IPSec integrity algorithm. Valid
        /// options are `GCMAES128`, `GCMAES192`, `GCMAES256`, `MD5`, `SHA1`, or `SHA256`.
        /// </summary>
        public readonly string IpsecIntegrity;
        /// <summary>
        /// The DH group used in IKE phase 2 for new child SA.
        /// Valid options are `ECP256`, `ECP384`, `PFS1`, `PFS2`, `PFS2048`, `PFS24`,
        /// or `None`.
        /// </summary>
        public readonly string PfsGroup;
        /// <summary>
        /// The IPSec SA payload size in KB. Must be at least
        /// `1024` KB.
        /// </summary>
        public readonly int SaDatasize;
        /// <summary>
        /// The IPSec SA lifetime in seconds. Must be at least
        /// `300` seconds.
        /// </summary>
        public readonly int SaLifetime;

        [OutputConstructor]
        private GetGatewayConnectionIpsecPoliciesResult(
            string dhGroup,
            string ikeEncryption,
            string ikeIntegrity,
            string ipsecEncryption,
            string ipsecIntegrity,
            string pfsGroup,
            int saDatasize,
            int saLifetime)
        {
            DhGroup = dhGroup;
            IkeEncryption = ikeEncryption;
            IkeIntegrity = ikeIntegrity;
            IpsecEncryption = ipsecEncryption;
            IpsecIntegrity = ipsecIntegrity;
            PfsGroup = pfsGroup;
            SaDatasize = saDatasize;
            SaLifetime = saLifetime;
        }
    }
    }
}
