// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    public static class GetPublicIP
    {
        /// <summary>
        /// Use this data source to access information about an existing Public IP Address.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPublicIPResult> InvokeAsync(GetPublicIPArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPublicIPResult>("azure:network/getPublicIP:getPublicIP", args ?? new GetPublicIPArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Public IP Address.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPublicIPResult> Invoke(GetPublicIPInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPublicIPResult>("azure:network/getPublicIP:getPublicIP", args ?? new GetPublicIPInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPublicIPArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the public IP address.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetPublicIPArgs()
        {
        }
        public static new GetPublicIPArgs Empty => new GetPublicIPArgs();
    }

    public sealed class GetPublicIPInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the public IP address.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetPublicIPInvokeArgs()
        {
        }
        public static new GetPublicIPInvokeArgs Empty => new GetPublicIPInvokeArgs();
    }


    [OutputType]
    public sealed class GetPublicIPResult
    {
        /// <summary>
        /// The allocation method for this IP address. Possible values are `Static` or `Dynamic`.
        /// </summary>
        public readonly string AllocationMethod;
        /// <summary>
        /// The DDoS protection mode of the public IP.
        /// </summary>
        public readonly string DdosProtectionMode;
        /// <summary>
        /// The ID of DDoS protection plan associated with the public IP.
        /// </summary>
        public readonly string DdosProtectionPlanId;
        /// <summary>
        /// The label for the Domain Name.
        /// </summary>
        public readonly string DomainNameLabel;
        /// <summary>
        /// Fully qualified domain name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies the timeout for the TCP idle connection.
        /// </summary>
        public readonly int IdleTimeoutInMinutes;
        /// <summary>
        /// The IP address value that was allocated.
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// A mapping of tags to assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> IpTags;
        /// <summary>
        /// The IP version being used, for example `IPv4` or `IPv6`.
        /// </summary>
        public readonly string IpVersion;
        /// <summary>
        /// The region that this public ip exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The fully qualified domain name that resolves to this public IP address.
        /// </summary>
        public readonly string ReverseFqdn;
        /// <summary>
        /// The SKU of the Public IP.
        /// </summary>
        public readonly string Sku;
        /// <summary>
        /// A mapping of tags to assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// A list of Availability Zones in which this Public IP is located.
        /// </summary>
        public readonly ImmutableArray<string> Zones;

        [OutputConstructor]
        private GetPublicIPResult(
            string allocationMethod,

            string ddosProtectionMode,

            string ddosProtectionPlanId,

            string domainNameLabel,

            string fqdn,

            string id,

            int idleTimeoutInMinutes,

            string ipAddress,

            ImmutableDictionary<string, string> ipTags,

            string ipVersion,

            string location,

            string name,

            string resourceGroupName,

            string reverseFqdn,

            string sku,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<string> zones)
        {
            AllocationMethod = allocationMethod;
            DdosProtectionMode = ddosProtectionMode;
            DdosProtectionPlanId = ddosProtectionPlanId;
            DomainNameLabel = domainNameLabel;
            Fqdn = fqdn;
            Id = id;
            IdleTimeoutInMinutes = idleTimeoutInMinutes;
            IpAddress = ipAddress;
            IpTags = ipTags;
            IpVersion = ipVersion;
            Location = location;
            Name = name;
            ResourceGroupName = resourceGroupName;
            ReverseFqdn = reverseFqdn;
            Sku = sku;
            Tags = tags;
            Zones = zones;
        }
    }
}
