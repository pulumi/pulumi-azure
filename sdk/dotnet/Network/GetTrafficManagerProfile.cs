// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    public static class GetTrafficManagerProfile
    {
        /// <summary>
        /// Use this data source to access information about an existing Traffic Manager Profile.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetTrafficManagerProfile.Invoke(new()
        ///     {
        ///         Name = "test",
        ///         ResourceGroupName = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["trafficRoutingMethod"] = example.Apply(getTrafficManagerProfileResult =&gt; getTrafficManagerProfileResult.TrafficRoutingMethod),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTrafficManagerProfileResult> InvokeAsync(GetTrafficManagerProfileArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTrafficManagerProfileResult>("azure:network/getTrafficManagerProfile:getTrafficManagerProfile", args ?? new GetTrafficManagerProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Traffic Manager Profile.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetTrafficManagerProfile.Invoke(new()
        ///     {
        ///         Name = "test",
        ///         ResourceGroupName = "test",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["trafficRoutingMethod"] = example.Apply(getTrafficManagerProfileResult =&gt; getTrafficManagerProfileResult.TrafficRoutingMethod),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTrafficManagerProfileResult> Invoke(GetTrafficManagerProfileInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTrafficManagerProfileResult>("azure:network/getTrafficManagerProfile:getTrafficManagerProfile", args ?? new GetTrafficManagerProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTrafficManagerProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Traffic Manager Profile.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the Traffic Manager Profile is located in.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// Indicates whether Traffic View is enabled for the Traffic Manager profile.
        /// </summary>
        [Input("trafficViewEnabled")]
        public bool? TrafficViewEnabled { get; set; }

        public GetTrafficManagerProfileArgs()
        {
        }
        public static new GetTrafficManagerProfileArgs Empty => new GetTrafficManagerProfileArgs();
    }

    public sealed class GetTrafficManagerProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Traffic Manager Profile.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the resource group the Traffic Manager Profile is located in.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Indicates whether Traffic View is enabled for the Traffic Manager profile.
        /// </summary>
        [Input("trafficViewEnabled")]
        public Input<bool>? TrafficViewEnabled { get; set; }

        public GetTrafficManagerProfileInvokeArgs()
        {
        }
        public static new GetTrafficManagerProfileInvokeArgs Empty => new GetTrafficManagerProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetTrafficManagerProfileResult
    {
        /// <summary>
        /// This block specifies the DNS configuration of the Profile.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTrafficManagerProfileDnsConfigResult> DnsConfigs;
        /// <summary>
        /// The FQDN of the created Profile.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// This block specifies the Endpoint monitoring configuration for the Profile.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTrafficManagerProfileMonitorConfigResult> MonitorConfigs;
        /// <summary>
        /// The name of the custom header.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The status of the profile.
        /// </summary>
        public readonly string ProfileStatus;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Specifies the algorithm used to route traffic.
        /// </summary>
        public readonly string TrafficRoutingMethod;
        /// <summary>
        /// Indicates whether Traffic View is enabled for the Traffic Manager profile.
        /// </summary>
        public readonly bool? TrafficViewEnabled;

        [OutputConstructor]
        private GetTrafficManagerProfileResult(
            ImmutableArray<Outputs.GetTrafficManagerProfileDnsConfigResult> dnsConfigs,

            string fqdn,

            string id,

            ImmutableArray<Outputs.GetTrafficManagerProfileMonitorConfigResult> monitorConfigs,

            string name,

            string profileStatus,

            string resourceGroupName,

            ImmutableDictionary<string, string>? tags,

            string trafficRoutingMethod,

            bool? trafficViewEnabled)
        {
            DnsConfigs = dnsConfigs;
            Fqdn = fqdn;
            Id = id;
            MonitorConfigs = monitorConfigs;
            Name = name;
            ProfileStatus = profileStatus;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
            TrafficRoutingMethod = trafficRoutingMethod;
            TrafficViewEnabled = trafficViewEnabled;
        }
    }
}
