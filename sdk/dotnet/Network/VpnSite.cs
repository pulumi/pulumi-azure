// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages a VPN Site.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleVirtualWan = new Azure.Network.VirtualWan("exampleVirtualWan", new Azure.Network.VirtualWanArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///         });
    ///         var exampleVpnSite = new Azure.Network.VpnSite("exampleVpnSite", new Azure.Network.VpnSiteArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             VirtualWanId = exampleVirtualWan.Id,
    ///             Links = 
    ///             {
    ///                 new Azure.Network.Inputs.VpnSiteLinkArgs
    ///                 {
    ///                     Name = "link1",
    ///                     IpAddress = "10.0.0.1",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// VPN Sites can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:network/vpnSite:VpnSite example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/vpnSites/site1
    /// ```
    /// </summary>
    [AzureResourceType("azure:network/vpnSite:VpnSite")]
    public partial class VpnSite : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies a list of IP address CIDRs that are located on your on-premises site. Traffic destined for these address spaces is routed to your local site.
        /// </summary>
        [Output("addressCidrs")]
        public Output<ImmutableArray<string>> AddressCidrs { get; private set; } = null!;

        /// <summary>
        /// The model of the VPN device.
        /// </summary>
        [Output("deviceModel")]
        public Output<string?> DeviceModel { get; private set; } = null!;

        /// <summary>
        /// The name of the VPN device vendor.
        /// </summary>
        [Output("deviceVendor")]
        public Output<string?> DeviceVendor { get; private set; } = null!;

        /// <summary>
        /// One or more `link` blocks as defined below.
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.VpnSiteLink>> Links { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the VPN Site should exist. Changing this forces a new VPN Site to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this VPN Site. Changing this forces a new VPN Site to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the VPN Site should exist. Changing this forces a new VPN Site to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the VPN Site.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The ID of the Virtual Wan where this VPN site resides in. Changing this forces a new VPN Site to be created.
        /// </summary>
        [Output("virtualWanId")]
        public Output<string> VirtualWanId { get; private set; } = null!;


        /// <summary>
        /// Create a VpnSite resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpnSite(string name, VpnSiteArgs args, CustomResourceOptions? options = null)
            : base("azure:network/vpnSite:VpnSite", name, args ?? new VpnSiteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpnSite(string name, Input<string> id, VpnSiteState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/vpnSite:VpnSite", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpnSite resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpnSite Get(string name, Input<string> id, VpnSiteState? state = null, CustomResourceOptions? options = null)
        {
            return new VpnSite(name, id, state, options);
        }
    }

    public sealed class VpnSiteArgs : Pulumi.ResourceArgs
    {
        [Input("addressCidrs")]
        private InputList<string>? _addressCidrs;

        /// <summary>
        /// Specifies a list of IP address CIDRs that are located on your on-premises site. Traffic destined for these address spaces is routed to your local site.
        /// </summary>
        public InputList<string> AddressCidrs
        {
            get => _addressCidrs ?? (_addressCidrs = new InputList<string>());
            set => _addressCidrs = value;
        }

        /// <summary>
        /// The model of the VPN device.
        /// </summary>
        [Input("deviceModel")]
        public Input<string>? DeviceModel { get; set; }

        /// <summary>
        /// The name of the VPN device vendor.
        /// </summary>
        [Input("deviceVendor")]
        public Input<string>? DeviceVendor { get; set; }

        [Input("links")]
        private InputList<Inputs.VpnSiteLinkArgs>? _links;

        /// <summary>
        /// One or more `link` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VpnSiteLinkArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.VpnSiteLinkArgs>());
            set => _links = value;
        }

        /// <summary>
        /// The Azure Region where the VPN Site should exist. Changing this forces a new VPN Site to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this VPN Site. Changing this forces a new VPN Site to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the VPN Site should exist. Changing this forces a new VPN Site to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the VPN Site.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the Virtual Wan where this VPN site resides in. Changing this forces a new VPN Site to be created.
        /// </summary>
        [Input("virtualWanId", required: true)]
        public Input<string> VirtualWanId { get; set; } = null!;

        public VpnSiteArgs()
        {
        }
    }

    public sealed class VpnSiteState : Pulumi.ResourceArgs
    {
        [Input("addressCidrs")]
        private InputList<string>? _addressCidrs;

        /// <summary>
        /// Specifies a list of IP address CIDRs that are located on your on-premises site. Traffic destined for these address spaces is routed to your local site.
        /// </summary>
        public InputList<string> AddressCidrs
        {
            get => _addressCidrs ?? (_addressCidrs = new InputList<string>());
            set => _addressCidrs = value;
        }

        /// <summary>
        /// The model of the VPN device.
        /// </summary>
        [Input("deviceModel")]
        public Input<string>? DeviceModel { get; set; }

        /// <summary>
        /// The name of the VPN device vendor.
        /// </summary>
        [Input("deviceVendor")]
        public Input<string>? DeviceVendor { get; set; }

        [Input("links")]
        private InputList<Inputs.VpnSiteLinkGetArgs>? _links;

        /// <summary>
        /// One or more `link` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VpnSiteLinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.VpnSiteLinkGetArgs>());
            set => _links = value;
        }

        /// <summary>
        /// The Azure Region where the VPN Site should exist. Changing this forces a new VPN Site to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this VPN Site. Changing this forces a new VPN Site to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the VPN Site should exist. Changing this forces a new VPN Site to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the VPN Site.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the Virtual Wan where this VPN site resides in. Changing this forces a new VPN Site to be created.
        /// </summary>
        [Input("virtualWanId")]
        public Input<string>? VirtualWanId { get; set; }

        public VpnSiteState()
        {
        }
    }
}
