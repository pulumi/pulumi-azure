// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Azure.Network
{
    public static class GetTrafficManager
    {
        /// <summary>
        /// Use this data source to access the ID of a specified Traffic Manager Geographical Location within the Geographical Hierarchy.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### World)
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.Network.GetTrafficManager.InvokeAsync(new Azure.Network.GetTrafficManagerArgs
        ///         {
        ///             Name = "World",
        ///         }));
        ///         this.LocationCode = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("locationCode")]
        ///     public Output&lt;string&gt; LocationCode { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTrafficManagerResult> InvokeAsync(GetTrafficManagerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTrafficManagerResult>("azure:network/getTrafficManager:getTrafficManager", args ?? new GetTrafficManagerArgs(), options.WithVersion());

        /// <summary>
        /// Use this data source to access the ID of a specified Traffic Manager Geographical Location within the Geographical Hierarchy.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### World)
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Azure.Network.GetTrafficManager.InvokeAsync(new Azure.Network.GetTrafficManagerArgs
        ///         {
        ///             Name = "World",
        ///         }));
        ///         this.LocationCode = example.Apply(example =&gt; example.Id);
        ///     }
        /// 
        ///     [Output("locationCode")]
        ///     public Output&lt;string&gt; LocationCode { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTrafficManagerResult> Invoke(GetTrafficManagerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTrafficManagerResult>("azure:network/getTrafficManager:getTrafficManager", args ?? new GetTrafficManagerInvokeArgs(), options.WithVersion());
    }


    public sealed class GetTrafficManagerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Location, for example `World`, `Europe` or `Germany`.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetTrafficManagerArgs()
        {
        }
    }

    public sealed class GetTrafficManagerInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the Location, for example `World`, `Europe` or `Germany`.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetTrafficManagerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetTrafficManagerResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;

        [OutputConstructor]
        private GetTrafficManagerResult(
            string id,

            string name)
        {
            Id = id;
            Name = name;
        }
    }
}
