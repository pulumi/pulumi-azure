// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages an ExpressRoute Circuit Peering.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/express_route_circuit_peering.html.markdown.
    /// </summary>
    public partial class ExpressRouteCircuitPeering : Pulumi.CustomResource
    {
        /// <summary>
        /// The ASN used by Azure.
        /// </summary>
        [Output("azureAsn")]
        public Output<int> AzureAsn { get; private set; } = null!;

        /// <summary>
        /// The name of the ExpressRoute Circuit in which to create the Peering.
        /// </summary>
        [Output("expressRouteCircuitName")]
        public Output<string> ExpressRouteCircuitName { get; private set; } = null!;

        /// <summary>
        /// A `microsoft_peering_config` block as defined below. Required when `peering_type` is set to `MicrosoftPeering`.
        /// </summary>
        [Output("microsoftPeeringConfig")]
        public Output<Outputs.ExpressRouteCircuitPeeringMicrosoftPeeringConfig?> MicrosoftPeeringConfig { get; private set; } = null!;

        /// <summary>
        /// The Either a 16-bit or a 32-bit ASN. Can either be public or private..
        /// </summary>
        [Output("peerAsn")]
        public Output<int> PeerAsn { get; private set; } = null!;

        /// <summary>
        /// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("peeringType")]
        public Output<string> PeeringType { get; private set; } = null!;

        /// <summary>
        /// The Primary Port used by Azure for this Peering.
        /// </summary>
        [Output("primaryAzurePort")]
        public Output<string> PrimaryAzurePort { get; private set; } = null!;

        /// <summary>
        /// A `/30` subnet for the primary link.
        /// </summary>
        [Output("primaryPeerAddressPrefix")]
        public Output<string> PrimaryPeerAddressPrefix { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to
        /// create the Express Route Circuit Peering. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The Secondary Port used by Azure for this Peering.
        /// </summary>
        [Output("secondaryAzurePort")]
        public Output<string> SecondaryAzurePort { get; private set; } = null!;

        /// <summary>
        /// A `/30` subnet for the secondary link.
        /// </summary>
        [Output("secondaryPeerAddressPrefix")]
        public Output<string> SecondaryPeerAddressPrefix { get; private set; } = null!;

        /// <summary>
        /// The shared key. Can be a maximum of 25 characters.
        /// </summary>
        [Output("sharedKey")]
        public Output<string?> SharedKey { get; private set; } = null!;

        /// <summary>
        /// A valid VLAN ID to establish this peering on.
        /// </summary>
        [Output("vlanId")]
        public Output<int> VlanId { get; private set; } = null!;


        /// <summary>
        /// Create a ExpressRouteCircuitPeering resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExpressRouteCircuitPeering(string name, ExpressRouteCircuitPeeringArgs args, CustomResourceOptions? options = null)
            : base("azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ExpressRouteCircuitPeering(string name, Input<string> id, ExpressRouteCircuitPeeringState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExpressRouteCircuitPeering resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExpressRouteCircuitPeering Get(string name, Input<string> id, ExpressRouteCircuitPeeringState? state = null, CustomResourceOptions? options = null)
        {
            return new ExpressRouteCircuitPeering(name, id, state, options);
        }
    }

    public sealed class ExpressRouteCircuitPeeringArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the ExpressRoute Circuit in which to create the Peering.
        /// </summary>
        [Input("expressRouteCircuitName", required: true)]
        public Input<string> ExpressRouteCircuitName { get; set; } = null!;

        /// <summary>
        /// A `microsoft_peering_config` block as defined below. Required when `peering_type` is set to `MicrosoftPeering`.
        /// </summary>
        [Input("microsoftPeeringConfig")]
        public Input<Inputs.ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs>? MicrosoftPeeringConfig { get; set; }

        /// <summary>
        /// The Either a 16-bit or a 32-bit ASN. Can either be public or private..
        /// </summary>
        [Input("peerAsn")]
        public Input<int>? PeerAsn { get; set; }

        /// <summary>
        /// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("peeringType", required: true)]
        public Input<string> PeeringType { get; set; } = null!;

        /// <summary>
        /// A `/30` subnet for the primary link.
        /// </summary>
        [Input("primaryPeerAddressPrefix", required: true)]
        public Input<string> PrimaryPeerAddressPrefix { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which to
        /// create the Express Route Circuit Peering. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `/30` subnet for the secondary link.
        /// </summary>
        [Input("secondaryPeerAddressPrefix", required: true)]
        public Input<string> SecondaryPeerAddressPrefix { get; set; } = null!;

        /// <summary>
        /// The shared key. Can be a maximum of 25 characters.
        /// </summary>
        [Input("sharedKey")]
        public Input<string>? SharedKey { get; set; }

        /// <summary>
        /// A valid VLAN ID to establish this peering on.
        /// </summary>
        [Input("vlanId", required: true)]
        public Input<int> VlanId { get; set; } = null!;

        public ExpressRouteCircuitPeeringArgs()
        {
        }
    }

    public sealed class ExpressRouteCircuitPeeringState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ASN used by Azure.
        /// </summary>
        [Input("azureAsn")]
        public Input<int>? AzureAsn { get; set; }

        /// <summary>
        /// The name of the ExpressRoute Circuit in which to create the Peering.
        /// </summary>
        [Input("expressRouteCircuitName")]
        public Input<string>? ExpressRouteCircuitName { get; set; }

        /// <summary>
        /// A `microsoft_peering_config` block as defined below. Required when `peering_type` is set to `MicrosoftPeering`.
        /// </summary>
        [Input("microsoftPeeringConfig")]
        public Input<Inputs.ExpressRouteCircuitPeeringMicrosoftPeeringConfigGetArgs>? MicrosoftPeeringConfig { get; set; }

        /// <summary>
        /// The Either a 16-bit or a 32-bit ASN. Can either be public or private..
        /// </summary>
        [Input("peerAsn")]
        public Input<int>? PeerAsn { get; set; }

        /// <summary>
        /// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("peeringType")]
        public Input<string>? PeeringType { get; set; }

        /// <summary>
        /// The Primary Port used by Azure for this Peering.
        /// </summary>
        [Input("primaryAzurePort")]
        public Input<string>? PrimaryAzurePort { get; set; }

        /// <summary>
        /// A `/30` subnet for the primary link.
        /// </summary>
        [Input("primaryPeerAddressPrefix")]
        public Input<string>? PrimaryPeerAddressPrefix { get; set; }

        /// <summary>
        /// The name of the resource group in which to
        /// create the Express Route Circuit Peering. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The Secondary Port used by Azure for this Peering.
        /// </summary>
        [Input("secondaryAzurePort")]
        public Input<string>? SecondaryAzurePort { get; set; }

        /// <summary>
        /// A `/30` subnet for the secondary link.
        /// </summary>
        [Input("secondaryPeerAddressPrefix")]
        public Input<string>? SecondaryPeerAddressPrefix { get; set; }

        /// <summary>
        /// The shared key. Can be a maximum of 25 characters.
        /// </summary>
        [Input("sharedKey")]
        public Input<string>? SharedKey { get; set; }

        /// <summary>
        /// A valid VLAN ID to establish this peering on.
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        public ExpressRouteCircuitPeeringState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs : Pulumi.ResourceArgs
    {
        [Input("advertisedPublicPrefixes", required: true)]
        private InputList<string>? _advertisedPublicPrefixes;
        public InputList<string> AdvertisedPublicPrefixes
        {
            get => _advertisedPublicPrefixes ?? (_advertisedPublicPrefixes = new InputList<string>());
            set => _advertisedPublicPrefixes = value;
        }

        public ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs()
        {
        }
    }

    public sealed class ExpressRouteCircuitPeeringMicrosoftPeeringConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("advertisedPublicPrefixes", required: true)]
        private InputList<string>? _advertisedPublicPrefixes;
        public InputList<string> AdvertisedPublicPrefixes
        {
            get => _advertisedPublicPrefixes ?? (_advertisedPublicPrefixes = new InputList<string>());
            set => _advertisedPublicPrefixes = value;
        }

        public ExpressRouteCircuitPeeringMicrosoftPeeringConfigGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ExpressRouteCircuitPeeringMicrosoftPeeringConfig
    {
        public readonly ImmutableArray<string> AdvertisedPublicPrefixes;

        [OutputConstructor]
        private ExpressRouteCircuitPeeringMicrosoftPeeringConfig(ImmutableArray<string> advertisedPublicPrefixes)
        {
            AdvertisedPublicPrefixes = advertisedPublicPrefixes;
        }
    }
    }
}
