// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages an External Endpoint within a Traffic Manager Profile.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleTrafficManagerProfile = new Azure.Network.TrafficManagerProfile("exampleTrafficManagerProfile", new Azure.Network.TrafficManagerProfileArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             TrafficRoutingMethod = "Weighted",
    ///             DnsConfig = new Azure.Network.Inputs.TrafficManagerProfileDnsConfigArgs
    ///             {
    ///                 RelativeName = "example-profile",
    ///                 Ttl = 100,
    ///             },
    ///             MonitorConfig = new Azure.Network.Inputs.TrafficManagerProfileMonitorConfigArgs
    ///             {
    ///                 Protocol = "http",
    ///                 Port = 80,
    ///                 Path = "/",
    ///                 IntervalInSeconds = 30,
    ///                 TimeoutInSeconds = 9,
    ///                 ToleratedNumberOfFailures = 3,
    ///             },
    ///             Tags = 
    ///             {
    ///                 { "environment", "Production" },
    ///             },
    ///         });
    ///         var exampleTrafficManagerExternalEndpoint = new Azure.Network.TrafficManagerExternalEndpoint("exampleTrafficManagerExternalEndpoint", new Azure.Network.TrafficManagerExternalEndpointArgs
    ///         {
    ///             ProfileId = exampleTrafficManagerProfile.Id,
    ///             Weight = 100,
    ///             Target = "www.example.com",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// External Endpoints can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:network/trafficManagerExternalEndpoint:TrafficManagerExternalEndpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-group/providers/Microsoft.Network/trafficManagerProfiles/example-profile/ExternalEndpoints/example-endpoint
    /// ```
    /// </summary>
    [AzureResourceType("azure:network/trafficManagerExternalEndpoint:TrafficManagerExternalEndpoint")]
    public partial class TrafficManagerExternalEndpoint : Pulumi.CustomResource
    {
        /// <summary>
        /// One or more `custom_header` blocks as defined below.
        /// </summary>
        [Output("customHeaders")]
        public Output<ImmutableArray<Outputs.TrafficManagerExternalEndpointCustomHeader>> CustomHeaders { get; private set; } = null!;

        /// <summary>
        /// Is the endpoint enabled? Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("endpointLocation")]
        public Output<string> EndpointLocation { get; private set; } = null!;

        /// <summary>
        /// A list of Geographic Regions used to distribute traffic, such as `WORLD`, `UK` or `DE`. The same location can't be specified in two endpoints. [See the Geographic Hierarchies documentation for more information](https://docs.microsoft.com/en-us/rest/api/trafficmanager/geographichierarchies/getdefault).
        /// </summary>
        [Output("geoMappings")]
        public Output<ImmutableArray<string>> GeoMappings { get; private set; } = null!;

        /// <summary>
        /// The name of the External Endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the priority of this Endpoint, this must be
        /// specified for Profiles using the `Priority` traffic routing method. Supports
        /// values between 1 and 1000, with no Endpoints sharing the same value. If
        /// omitted the value will be computed in order of creation.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// The ID of the Traffic Manager Profile that this External Endpoint should be created within. Changing this forces a new resource to be created.
        /// </summary>
        [Output("profileId")]
        public Output<string> ProfileId { get; private set; } = null!;

        /// <summary>
        /// One or more `subnet` blocks as defined below
        /// </summary>
        [Output("subnets")]
        public Output<ImmutableArray<Outputs.TrafficManagerExternalEndpointSubnet>> Subnets { get; private set; } = null!;

        /// <summary>
        /// The FQDN DNS name of the target.
        /// </summary>
        [Output("target")]
        public Output<string> Target { get; private set; } = null!;

        /// <summary>
        /// Specifies how much traffic should be distributed to this
        /// endpoint. Valid values are between `1` and `1000`.
        /// </summary>
        [Output("weight")]
        public Output<int> Weight { get; private set; } = null!;


        /// <summary>
        /// Create a TrafficManagerExternalEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TrafficManagerExternalEndpoint(string name, TrafficManagerExternalEndpointArgs args, CustomResourceOptions? options = null)
            : base("azure:network/trafficManagerExternalEndpoint:TrafficManagerExternalEndpoint", name, args ?? new TrafficManagerExternalEndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TrafficManagerExternalEndpoint(string name, Input<string> id, TrafficManagerExternalEndpointState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/trafficManagerExternalEndpoint:TrafficManagerExternalEndpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TrafficManagerExternalEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TrafficManagerExternalEndpoint Get(string name, Input<string> id, TrafficManagerExternalEndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new TrafficManagerExternalEndpoint(name, id, state, options);
        }
    }

    public sealed class TrafficManagerExternalEndpointArgs : Pulumi.ResourceArgs
    {
        [Input("customHeaders")]
        private InputList<Inputs.TrafficManagerExternalEndpointCustomHeaderArgs>? _customHeaders;

        /// <summary>
        /// One or more `custom_header` blocks as defined below.
        /// </summary>
        public InputList<Inputs.TrafficManagerExternalEndpointCustomHeaderArgs> CustomHeaders
        {
            get => _customHeaders ?? (_customHeaders = new InputList<Inputs.TrafficManagerExternalEndpointCustomHeaderArgs>());
            set => _customHeaders = value;
        }

        /// <summary>
        /// Is the endpoint enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("endpointLocation")]
        public Input<string>? EndpointLocation { get; set; }

        [Input("geoMappings")]
        private InputList<string>? _geoMappings;

        /// <summary>
        /// A list of Geographic Regions used to distribute traffic, such as `WORLD`, `UK` or `DE`. The same location can't be specified in two endpoints. [See the Geographic Hierarchies documentation for more information](https://docs.microsoft.com/en-us/rest/api/trafficmanager/geographichierarchies/getdefault).
        /// </summary>
        public InputList<string> GeoMappings
        {
            get => _geoMappings ?? (_geoMappings = new InputList<string>());
            set => _geoMappings = value;
        }

        /// <summary>
        /// The name of the External Endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the priority of this Endpoint, this must be
        /// specified for Profiles using the `Priority` traffic routing method. Supports
        /// values between 1 and 1000, with no Endpoints sharing the same value. If
        /// omitted the value will be computed in order of creation.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The ID of the Traffic Manager Profile that this External Endpoint should be created within. Changing this forces a new resource to be created.
        /// </summary>
        [Input("profileId", required: true)]
        public Input<string> ProfileId { get; set; } = null!;

        [Input("subnets")]
        private InputList<Inputs.TrafficManagerExternalEndpointSubnetArgs>? _subnets;

        /// <summary>
        /// One or more `subnet` blocks as defined below
        /// </summary>
        public InputList<Inputs.TrafficManagerExternalEndpointSubnetArgs> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<Inputs.TrafficManagerExternalEndpointSubnetArgs>());
            set => _subnets = value;
        }

        /// <summary>
        /// The FQDN DNS name of the target.
        /// </summary>
        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        /// <summary>
        /// Specifies how much traffic should be distributed to this
        /// endpoint. Valid values are between `1` and `1000`.
        /// </summary>
        [Input("weight", required: true)]
        public Input<int> Weight { get; set; } = null!;

        public TrafficManagerExternalEndpointArgs()
        {
        }
    }

    public sealed class TrafficManagerExternalEndpointState : Pulumi.ResourceArgs
    {
        [Input("customHeaders")]
        private InputList<Inputs.TrafficManagerExternalEndpointCustomHeaderGetArgs>? _customHeaders;

        /// <summary>
        /// One or more `custom_header` blocks as defined below.
        /// </summary>
        public InputList<Inputs.TrafficManagerExternalEndpointCustomHeaderGetArgs> CustomHeaders
        {
            get => _customHeaders ?? (_customHeaders = new InputList<Inputs.TrafficManagerExternalEndpointCustomHeaderGetArgs>());
            set => _customHeaders = value;
        }

        /// <summary>
        /// Is the endpoint enabled? Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("endpointLocation")]
        public Input<string>? EndpointLocation { get; set; }

        [Input("geoMappings")]
        private InputList<string>? _geoMappings;

        /// <summary>
        /// A list of Geographic Regions used to distribute traffic, such as `WORLD`, `UK` or `DE`. The same location can't be specified in two endpoints. [See the Geographic Hierarchies documentation for more information](https://docs.microsoft.com/en-us/rest/api/trafficmanager/geographichierarchies/getdefault).
        /// </summary>
        public InputList<string> GeoMappings
        {
            get => _geoMappings ?? (_geoMappings = new InputList<string>());
            set => _geoMappings = value;
        }

        /// <summary>
        /// The name of the External Endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the priority of this Endpoint, this must be
        /// specified for Profiles using the `Priority` traffic routing method. Supports
        /// values between 1 and 1000, with no Endpoints sharing the same value. If
        /// omitted the value will be computed in order of creation.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The ID of the Traffic Manager Profile that this External Endpoint should be created within. Changing this forces a new resource to be created.
        /// </summary>
        [Input("profileId")]
        public Input<string>? ProfileId { get; set; }

        [Input("subnets")]
        private InputList<Inputs.TrafficManagerExternalEndpointSubnetGetArgs>? _subnets;

        /// <summary>
        /// One or more `subnet` blocks as defined below
        /// </summary>
        public InputList<Inputs.TrafficManagerExternalEndpointSubnetGetArgs> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<Inputs.TrafficManagerExternalEndpointSubnetGetArgs>());
            set => _subnets = value;
        }

        /// <summary>
        /// The FQDN DNS name of the target.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        /// <summary>
        /// Specifies how much traffic should be distributed to this
        /// endpoint. Valid values are between `1` and `1000`.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public TrafficManagerExternalEndpointState()
        {
        }
    }
}
