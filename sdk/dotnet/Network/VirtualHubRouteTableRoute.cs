// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages a Route in a Virtual Hub Route Table.
    /// 
    /// &gt; **Note:** Route table routes can managed with this resource, or in-line with the virtual_hub_route_table resource. Using both is not supported.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    ///     {
    ///         Name = "example-vnet",
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.5.0.0/16",
    ///         },
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var exampleNetworkSecurityGroup = new Azure.Network.NetworkSecurityGroup("example", new()
    ///     {
    ///         Name = "example-nsg",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("example", new()
    ///     {
    ///         Name = "examplesubnet",
    ///         ResourceGroupName = example.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.5.1.0/24",
    ///         },
    ///     });
    /// 
    ///     var exampleSubnetNetworkSecurityGroupAssociation = new Azure.Network.SubnetNetworkSecurityGroupAssociation("example", new()
    ///     {
    ///         SubnetId = exampleSubnet.Id,
    ///         NetworkSecurityGroupId = exampleNetworkSecurityGroup.Id,
    ///     });
    /// 
    ///     var exampleVirtualWan = new Azure.Network.VirtualWan("example", new()
    ///     {
    ///         Name = "example-vwan",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///     });
    /// 
    ///     var exampleVirtualHub = new Azure.Network.VirtualHub("example", new()
    ///     {
    ///         Name = "example-vhub",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         VirtualWanId = exampleVirtualWan.Id,
    ///         AddressPrefix = "10.0.2.0/24",
    ///     });
    /// 
    ///     var exampleVirtualHubRouteTable = new Azure.Network.VirtualHubRouteTable("example", new()
    ///     {
    ///         Name = "example-vhubroutetable",
    ///         VirtualHubId = exampleVirtualHub.Id,
    ///         Labels = new[]
    ///         {
    ///             "label1",
    ///         },
    ///     });
    /// 
    ///     var exampleVirtualHubConnection = new Azure.Network.VirtualHubConnection("example", new()
    ///     {
    ///         Name = "example-vhubconn",
    ///         VirtualHubId = exampleVirtualHub.Id,
    ///         RemoteVirtualNetworkId = exampleVirtualNetwork.Id,
    ///         Routing = new Azure.Network.Inputs.VirtualHubConnectionRoutingArgs
    ///         {
    ///             AssociatedRouteTableId = exampleVirtualHubRouteTable.Id,
    ///         },
    ///     });
    /// 
    ///     var exampleVirtualHubRouteTableRoute = new Azure.Network.VirtualHubRouteTableRoute("example", new()
    ///     {
    ///         RouteTableId = exampleVirtualHubRouteTable.Id,
    ///         Name = "example-route",
    ///         DestinationsType = "CIDR",
    ///         Destinations = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         NextHopType = "ResourceId",
    ///         NextHop = exampleVirtualHubConnection.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Virtual Hub Route Table Routes can be imported using `&lt;Route Table Resource Id&gt;/routes/&lt;Route Name&gt;`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:network/virtualHubRouteTableRoute:VirtualHubRouteTableRoute example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/virtualHubs/virtualHub1/hubRouteTables/routeTable1/routes/routeName
    /// ```
    /// </summary>
    [AzureResourceType("azure:network/virtualHubRouteTableRoute:VirtualHubRouteTableRoute")]
    public partial class VirtualHubRouteTableRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of destination addresses for this route.
        /// </summary>
        [Output("destinations")]
        public Output<ImmutableArray<string>> Destinations { get; private set; } = null!;

        /// <summary>
        /// The type of destinations. Possible values are `CIDR`, `ResourceId` and `Service`.
        /// </summary>
        [Output("destinationsType")]
        public Output<string> DestinationsType { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this route. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The next hop's resource ID.
        /// </summary>
        [Output("nextHop")]
        public Output<string> NextHop { get; private set; } = null!;

        /// <summary>
        /// The type of next hop. Currently the only possible value is `ResourceId`. Defaults to `ResourceId`.
        /// </summary>
        [Output("nextHopType")]
        public Output<string?> NextHopType { get; private set; } = null!;

        /// <summary>
        /// The ID of the Virtual Hub Route Table to link this route to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("routeTableId")]
        public Output<string> RouteTableId { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualHubRouteTableRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualHubRouteTableRoute(string name, VirtualHubRouteTableRouteArgs args, CustomResourceOptions? options = null)
            : base("azure:network/virtualHubRouteTableRoute:VirtualHubRouteTableRoute", name, args ?? new VirtualHubRouteTableRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualHubRouteTableRoute(string name, Input<string> id, VirtualHubRouteTableRouteState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/virtualHubRouteTableRoute:VirtualHubRouteTableRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualHubRouteTableRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualHubRouteTableRoute Get(string name, Input<string> id, VirtualHubRouteTableRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualHubRouteTableRoute(name, id, state, options);
        }
    }

    public sealed class VirtualHubRouteTableRouteArgs : global::Pulumi.ResourceArgs
    {
        [Input("destinations", required: true)]
        private InputList<string>? _destinations;

        /// <summary>
        /// A list of destination addresses for this route.
        /// </summary>
        public InputList<string> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<string>());
            set => _destinations = value;
        }

        /// <summary>
        /// The type of destinations. Possible values are `CIDR`, `ResourceId` and `Service`.
        /// </summary>
        [Input("destinationsType", required: true)]
        public Input<string> DestinationsType { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this route. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The next hop's resource ID.
        /// </summary>
        [Input("nextHop", required: true)]
        public Input<string> NextHop { get; set; } = null!;

        /// <summary>
        /// The type of next hop. Currently the only possible value is `ResourceId`. Defaults to `ResourceId`.
        /// </summary>
        [Input("nextHopType")]
        public Input<string>? NextHopType { get; set; }

        /// <summary>
        /// The ID of the Virtual Hub Route Table to link this route to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("routeTableId", required: true)]
        public Input<string> RouteTableId { get; set; } = null!;

        public VirtualHubRouteTableRouteArgs()
        {
        }
        public static new VirtualHubRouteTableRouteArgs Empty => new VirtualHubRouteTableRouteArgs();
    }

    public sealed class VirtualHubRouteTableRouteState : global::Pulumi.ResourceArgs
    {
        [Input("destinations")]
        private InputList<string>? _destinations;

        /// <summary>
        /// A list of destination addresses for this route.
        /// </summary>
        public InputList<string> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<string>());
            set => _destinations = value;
        }

        /// <summary>
        /// The type of destinations. Possible values are `CIDR`, `ResourceId` and `Service`.
        /// </summary>
        [Input("destinationsType")]
        public Input<string>? DestinationsType { get; set; }

        /// <summary>
        /// The name which should be used for this route. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The next hop's resource ID.
        /// </summary>
        [Input("nextHop")]
        public Input<string>? NextHop { get; set; }

        /// <summary>
        /// The type of next hop. Currently the only possible value is `ResourceId`. Defaults to `ResourceId`.
        /// </summary>
        [Input("nextHopType")]
        public Input<string>? NextHopType { get; set; }

        /// <summary>
        /// The ID of the Virtual Hub Route Table to link this route to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("routeTableId")]
        public Input<string>? RouteTableId { get; set; }

        public VirtualHubRouteTableRouteState()
        {
        }
        public static new VirtualHubRouteTableRouteState Empty => new VirtualHubRouteTableRouteState();
    }
}
