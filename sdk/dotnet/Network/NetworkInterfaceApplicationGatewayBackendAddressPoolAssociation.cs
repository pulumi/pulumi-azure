// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages the association between a Network Interface and a Application Gateway's Backend Address Pool.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new Azure.Network.VirtualNetworkArgs
    ///         {
    ///             AddressSpaces = 
    ///             {
    ///                 "10.0.0.0/16",
    ///             },
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///         });
    ///         var frontend = new Azure.Network.Subnet("frontend", new Azure.Network.SubnetArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             VirtualNetworkName = exampleVirtualNetwork.Name,
    ///             AddressPrefixes = 
    ///             {
    ///                 "10.0.1.0/24",
    ///             },
    ///         });
    ///         var backend = new Azure.Network.Subnet("backend", new Azure.Network.SubnetArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             VirtualNetworkName = exampleVirtualNetwork.Name,
    ///             AddressPrefixes = 
    ///             {
    ///                 "10.0.2.0/24",
    ///             },
    ///         });
    ///         var examplePublicIp = new Azure.Network.PublicIp("examplePublicIp", new Azure.Network.PublicIpArgs
    ///         {
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             AllocationMethod = "Dynamic",
    ///         });
    ///         var backendAddressPoolName = exampleVirtualNetwork.Name.Apply(name =&gt; $"{name}-beap");
    ///         var frontendPortName = exampleVirtualNetwork.Name.Apply(name =&gt; $"{name}-feport");
    ///         var frontendIpConfigurationName = exampleVirtualNetwork.Name.Apply(name =&gt; $"{name}-feip");
    ///         var httpSettingName = exampleVirtualNetwork.Name.Apply(name =&gt; $"{name}-be-htst");
    ///         var listenerName = exampleVirtualNetwork.Name.Apply(name =&gt; $"{name}-httplstn");
    ///         var requestRoutingRuleName = exampleVirtualNetwork.Name.Apply(name =&gt; $"{name}-rqrt");
    ///         var network = new Azure.Network.ApplicationGateway("network", new Azure.Network.ApplicationGatewayArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             Sku = new Azure.Network.Inputs.ApplicationGatewaySkuArgs
    ///             {
    ///                 Name = "Standard_Small",
    ///                 Tier = "Standard",
    ///                 Capacity = 2,
    ///             },
    ///             GatewayIpConfigurations = 
    ///             {
    ///                 new Azure.Network.Inputs.ApplicationGatewayGatewayIpConfigurationArgs
    ///                 {
    ///                     Name = "my-gateway-ip-configuration",
    ///                     SubnetId = frontend.Id,
    ///                 },
    ///             },
    ///             FrontendPorts = 
    ///             {
    ///                 new Azure.Network.Inputs.ApplicationGatewayFrontendPortArgs
    ///                 {
    ///                     Name = frontendPortName,
    ///                     Port = 80,
    ///                 },
    ///             },
    ///             FrontendIpConfigurations = 
    ///             {
    ///                 new Azure.Network.Inputs.ApplicationGatewayFrontendIpConfigurationArgs
    ///                 {
    ///                     Name = frontendIpConfigurationName,
    ///                     PublicIpAddressId = examplePublicIp.Id,
    ///                 },
    ///             },
    ///             BackendAddressPools = 
    ///             {
    ///                 new Azure.Network.Inputs.ApplicationGatewayBackendAddressPoolArgs
    ///                 {
    ///                     Name = backendAddressPoolName,
    ///                 },
    ///             },
    ///             BackendHttpSettings = 
    ///             {
    ///                 new Azure.Network.Inputs.ApplicationGatewayBackendHttpSettingArgs
    ///                 {
    ///                     Name = httpSettingName,
    ///                     CookieBasedAffinity = "Disabled",
    ///                     Port = 80,
    ///                     Protocol = "Http",
    ///                     RequestTimeout = 1,
    ///                 },
    ///             },
    ///             HttpListeners = 
    ///             {
    ///                 new Azure.Network.Inputs.ApplicationGatewayHttpListenerArgs
    ///                 {
    ///                     Name = listenerName,
    ///                     FrontendIpConfigurationName = frontendIpConfigurationName,
    ///                     FrontendPortName = frontendPortName,
    ///                     Protocol = "Http",
    ///                 },
    ///             },
    ///             RequestRoutingRules = 
    ///             {
    ///                 new Azure.Network.Inputs.ApplicationGatewayRequestRoutingRuleArgs
    ///                 {
    ///                     Name = requestRoutingRuleName,
    ///                     RuleType = "Basic",
    ///                     HttpListenerName = listenerName,
    ///                     BackendAddressPoolName = backendAddressPoolName,
    ///                     BackendHttpSettingsName = httpSettingName,
    ///                 },
    ///             },
    ///         });
    ///         var exampleNetworkInterface = new Azure.Network.NetworkInterface("exampleNetworkInterface", new Azure.Network.NetworkInterfaceArgs
    ///         {
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             IpConfigurations = 
    ///             {
    ///                 new Azure.Network.Inputs.NetworkInterfaceIpConfigurationArgs
    ///                 {
    ///                     Name = "testconfiguration1",
    ///                     SubnetId = frontend.Id,
    ///                     PrivateIpAddressAllocation = "Dynamic",
    ///                 },
    ///             },
    ///         });
    ///         var exampleNetworkInterfaceApplicationGatewayBackendAddressPoolAssociation = new Azure.Network.NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation("exampleNetworkInterfaceApplicationGatewayBackendAddressPoolAssociation", new Azure.Network.NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs
    ///         {
    ///             NetworkInterfaceId = exampleNetworkInterface.Id,
    ///             IpConfigurationName = "testconfiguration1",
    ///             BackendAddressPoolId = network.BackendAddressPools.Apply(backendAddressPools =&gt; backendAddressPools[0].Id),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Associations between Network Interfaces and Application Gateway Backend Address Pools can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:network/networkInterfaceApplicationGatewayBackendAddressPoolAssociation:NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation association1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/microsoft.network/networkInterfaces/nic1/ipConfigurations/example|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/applicationGateways/gateway1/backendAddressPools/pool1
    /// ```
    /// </summary>
    public partial class NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Application Gateway's Backend Address Pool which this Network Interface which should be connected to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("backendAddressPoolId")]
        public Output<string> BackendAddressPoolId { get; private set; } = null!;

        /// <summary>
        /// The Name of the IP Configuration within the Network Interface which should be connected to the Backend Address Pool. Changing this forces a new resource to be created.
        /// </summary>
        [Output("ipConfigurationName")]
        public Output<string> IpConfigurationName { get; private set; } = null!;

        /// <summary>
        /// The ID of the Network Interface. Changing this forces a new resource to be created.
        /// </summary>
        [Output("networkInterfaceId")]
        public Output<string> NetworkInterfaceId { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(string name, NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs args, CustomResourceOptions? options = null)
            : base("azure:network/networkInterfaceApplicationGatewayBackendAddressPoolAssociation:NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation", name, args ?? new NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(string name, Input<string> id, NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/networkInterfaceApplicationGatewayBackendAddressPoolAssociation:NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation Get(string name, Input<string> id, NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkInterfaceApplicationGatewayBackendAddressPoolAssociation(name, id, state, options);
        }
    }

    public sealed class NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Application Gateway's Backend Address Pool which this Network Interface which should be connected to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("backendAddressPoolId", required: true)]
        public Input<string> BackendAddressPoolId { get; set; } = null!;

        /// <summary>
        /// The Name of the IP Configuration within the Network Interface which should be connected to the Backend Address Pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ipConfigurationName", required: true)]
        public Input<string> IpConfigurationName { get; set; } = null!;

        /// <summary>
        /// The ID of the Network Interface. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkInterfaceId", required: true)]
        public Input<string> NetworkInterfaceId { get; set; } = null!;

        public NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationArgs()
        {
        }
    }

    public sealed class NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Application Gateway's Backend Address Pool which this Network Interface which should be connected to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("backendAddressPoolId")]
        public Input<string>? BackendAddressPoolId { get; set; }

        /// <summary>
        /// The Name of the IP Configuration within the Network Interface which should be connected to the Backend Address Pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ipConfigurationName")]
        public Input<string>? IpConfigurationName { get; set; }

        /// <summary>
        /// The ID of the Network Interface. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        public NetworkInterfaceApplicationGatewayBackendAddressPoolAssociationState()
        {
        }
    }
}
