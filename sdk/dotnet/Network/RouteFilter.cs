// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages a Route Filter.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Azure.Network.RouteFilter("example", new Azure.Network.RouteFilterArgs
    ///         {
    ///             Location = "East US",
    ///             ResourceGroupName = "example",
    ///             Rule = new Azure.Network.Inputs.RouteFilterRuleArgs
    ///             {
    ///                 Access = "Allow",
    ///                 Communities = 
    ///                 {
    ///                     "12076:52004",
    ///                 },
    ///                 Name = "rule",
    ///                 RuleType = "Community",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Route Filters can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:network/routeFilter:RouteFilter example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/routeFilters/routeFilter1
    /// ```
    /// </summary>
    [AzureResourceType("azure:network/routeFilter:RouteFilter")]
    public partial class RouteFilter : Pulumi.CustomResource
    {
        /// <summary>
        /// The Azure Region where the Route Filter should exist. Changing this forces a new Route Filter to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The Name which should be used for this Route Filter.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Route Filter should exist. Changing this forces a new Route Filter to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `rules` block as defined below.
        /// </summary>
        [Output("rule")]
        public Output<Outputs.RouteFilterRule> Rule { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Route Filter.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a RouteFilter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouteFilter(string name, RouteFilterArgs args, CustomResourceOptions? options = null)
            : base("azure:network/routeFilter:RouteFilter", name, args ?? new RouteFilterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouteFilter(string name, Input<string> id, RouteFilterState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/routeFilter:RouteFilter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouteFilter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouteFilter Get(string name, Input<string> id, RouteFilterState? state = null, CustomResourceOptions? options = null)
        {
            return new RouteFilter(name, id, state, options);
        }
    }

    public sealed class RouteFilterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure Region where the Route Filter should exist. Changing this forces a new Route Filter to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The Name which should be used for this Route Filter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Route Filter should exist. Changing this forces a new Route Filter to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `rules` block as defined below.
        /// </summary>
        [Input("rule")]
        public Input<Inputs.RouteFilterRuleArgs>? Rule { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Route Filter.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public RouteFilterArgs()
        {
        }
    }

    public sealed class RouteFilterState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure Region where the Route Filter should exist. Changing this forces a new Route Filter to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The Name which should be used for this Route Filter.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Route Filter should exist. Changing this forces a new Route Filter to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `rules` block as defined below.
        /// </summary>
        [Input("rule")]
        public Input<Inputs.RouteFilterRuleGetArgs>? Rule { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Route Filter.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public RouteFilterState()
        {
        }
    }
}
