// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    public static class GetVirtualHub
    {
        /// <summary>
        /// Uses this data source to access information about an existing Virtual Hub.
        /// 
        /// ## Virtual Hub Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetVirtualHub.Invoke(new()
        ///     {
        ///         Name = "example-hub",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["virtualHubId"] = example.Apply(getVirtualHubResult =&gt; getVirtualHubResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetVirtualHubResult> InvokeAsync(GetVirtualHubArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualHubResult>("azure:network/getVirtualHub:getVirtualHub", args ?? new GetVirtualHubArgs(), options.WithDefaults());

        /// <summary>
        /// Uses this data source to access information about an existing Virtual Hub.
        /// 
        /// ## Virtual Hub Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetVirtualHub.Invoke(new()
        ///     {
        ///         Name = "example-hub",
        ///         ResourceGroupName = "example-resources",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["virtualHubId"] = example.Apply(getVirtualHubResult =&gt; getVirtualHubResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVirtualHubResult> Invoke(GetVirtualHubInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualHubResult>("azure:network/getVirtualHub:getVirtualHub", args ?? new GetVirtualHubInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualHubArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Virtual Hub.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the Virtual Hub exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetVirtualHubArgs()
        {
        }
        public static new GetVirtualHubArgs Empty => new GetVirtualHubArgs();
    }

    public sealed class GetVirtualHubInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Virtual Hub.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the Virtual Hub exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetVirtualHubInvokeArgs()
        {
        }
        public static new GetVirtualHubInvokeArgs Empty => new GetVirtualHubInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualHubResult
    {
        /// <summary>
        /// The Address Prefix used for this Virtual Hub.
        /// </summary>
        public readonly string AddressPrefix;
        /// <summary>
        /// The ID of the default Route Table in the Virtual Hub.
        /// </summary>
        public readonly string DefaultRouteTableId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Region where the Virtual Hub exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A mapping of tags assigned to the Virtual Hub.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The Autonomous System Number of the Virtual Hub BGP router.
        /// </summary>
        public readonly int VirtualRouterAsn;
        /// <summary>
        /// The IP addresses of the Virtual Hub BGP router.
        /// </summary>
        public readonly ImmutableArray<string> VirtualRouterIps;
        /// <summary>
        /// The ID of the Virtual WAN within which the Virtual Hub exists.
        /// </summary>
        public readonly string VirtualWanId;

        [OutputConstructor]
        private GetVirtualHubResult(
            string addressPrefix,

            string defaultRouteTableId,

            string id,

            string location,

            string name,

            string resourceGroupName,

            ImmutableDictionary<string, string> tags,

            int virtualRouterAsn,

            ImmutableArray<string> virtualRouterIps,

            string virtualWanId)
        {
            AddressPrefix = addressPrefix;
            DefaultRouteTableId = defaultRouteTableId;
            Id = id;
            Location = location;
            Name = name;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
            VirtualRouterAsn = virtualRouterAsn;
            VirtualRouterIps = virtualRouterIps;
            VirtualWanId = virtualWanId;
        }
    }
}
