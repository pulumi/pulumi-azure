// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    public static class GetVpnServerConfiguration
    {
        /// <summary>
        /// Use this data source to access information about an existing VPN Server Configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetVpnServerConfiguration.Invoke(new()
        ///     {
        ///         Name = "existing-local-vpn-server-configuration",
        ///         ResourceGroupName = "existing-resource-group",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["azurermVpnServerConfiguration"] = example.Apply(getVpnServerConfigurationResult =&gt; getVpnServerConfigurationResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Network` - 2024-05-01
        /// </summary>
        public static Task<GetVpnServerConfigurationResult> InvokeAsync(GetVpnServerConfigurationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpnServerConfigurationResult>("azure:network/getVpnServerConfiguration:getVpnServerConfiguration", args ?? new GetVpnServerConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing VPN Server Configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetVpnServerConfiguration.Invoke(new()
        ///     {
        ///         Name = "existing-local-vpn-server-configuration",
        ///         ResourceGroupName = "existing-resource-group",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["azurermVpnServerConfiguration"] = example.Apply(getVpnServerConfigurationResult =&gt; getVpnServerConfigurationResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Network` - 2024-05-01
        /// </summary>
        public static Output<GetVpnServerConfigurationResult> Invoke(GetVpnServerConfigurationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnServerConfigurationResult>("azure:network/getVpnServerConfiguration:getVpnServerConfiguration", args ?? new GetVpnServerConfigurationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing VPN Server Configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetVpnServerConfiguration.Invoke(new()
        ///     {
        ///         Name = "existing-local-vpn-server-configuration",
        ///         ResourceGroupName = "existing-resource-group",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["azurermVpnServerConfiguration"] = example.Apply(getVpnServerConfigurationResult =&gt; getVpnServerConfigurationResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Network` - 2024-05-01
        /// </summary>
        public static Output<GetVpnServerConfigurationResult> Invoke(GetVpnServerConfigurationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnServerConfigurationResult>("azure:network/getVpnServerConfiguration:getVpnServerConfiguration", args ?? new GetVpnServerConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpnServerConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Name of the VPN Server Configuration.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the VPN Server Configuration exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetVpnServerConfigurationArgs()
        {
        }
        public static new GetVpnServerConfigurationArgs Empty => new GetVpnServerConfigurationArgs();
    }

    public sealed class GetVpnServerConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Name of the VPN Server Configuration.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the VPN Server Configuration exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetVpnServerConfigurationInvokeArgs()
        {
        }
        public static new GetVpnServerConfigurationInvokeArgs Empty => new GetVpnServerConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpnServerConfigurationResult
    {
        /// <summary>
        /// A `azure_active_directory_authentication` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnServerConfigurationAzureActiveDirectoryAuthenticationResult> AzureActiveDirectoryAuthentications;
        /// <summary>
        /// One or more `client_revoked_certificate` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnServerConfigurationClientRevokedCertificateResult> ClientRevokedCertificates;
        /// <summary>
        /// One or more `client_root_certificate` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnServerConfigurationClientRootCertificateResult> ClientRootCertificates;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The `bgp_settings` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnServerConfigurationIpsecPolicyResult> IpsecPolicies;
        /// <summary>
        /// The Azure Region where the VPN Server Configuration exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The name used to uniquely identify this certificate.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A `radius` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnServerConfigurationRadiusResult> Radii;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A mapping of tags to assign to the VPN Server Configuration.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The list of Authentication Types applicable for the VPN Server Configuration.
        /// </summary>
        public readonly ImmutableArray<string> VpnAuthenticationTypes;
        /// <summary>
        /// The list of VPN Protocols to use for the VPN Server Configuration.
        /// </summary>
        public readonly ImmutableArray<string> VpnProtocols;

        [OutputConstructor]
        private GetVpnServerConfigurationResult(
            ImmutableArray<Outputs.GetVpnServerConfigurationAzureActiveDirectoryAuthenticationResult> azureActiveDirectoryAuthentications,

            ImmutableArray<Outputs.GetVpnServerConfigurationClientRevokedCertificateResult> clientRevokedCertificates,

            ImmutableArray<Outputs.GetVpnServerConfigurationClientRootCertificateResult> clientRootCertificates,

            string id,

            ImmutableArray<Outputs.GetVpnServerConfigurationIpsecPolicyResult> ipsecPolicies,

            string location,

            string name,

            ImmutableArray<Outputs.GetVpnServerConfigurationRadiusResult> radii,

            string resourceGroupName,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<string> vpnAuthenticationTypes,

            ImmutableArray<string> vpnProtocols)
        {
            AzureActiveDirectoryAuthentications = azureActiveDirectoryAuthentications;
            ClientRevokedCertificates = clientRevokedCertificates;
            ClientRootCertificates = clientRootCertificates;
            Id = id;
            IpsecPolicies = ipsecPolicies;
            Location = location;
            Name = name;
            Radii = radii;
            ResourceGroupName = resourceGroupName;
            Tags = tags;
            VpnAuthenticationTypes = vpnAuthenticationTypes;
            VpnProtocols = vpnProtocols;
        }
    }
}
