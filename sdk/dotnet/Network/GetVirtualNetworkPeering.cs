// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    public static class GetVirtualNetworkPeering
    {
        /// <summary>
        /// Use this data source to access information about an existing virtual network peering.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetVirtualNetwork.Invoke(new()
        ///     {
        ///         Name = "vnet01",
        ///         ResourceGroupName = "networking",
        ///     });
        /// 
        ///     var exampleGetVirtualNetworkPeering = Azure.Network.GetVirtualNetworkPeering.Invoke(new()
        ///     {
        ///         Name = "peer-vnet01-to-vnet02",
        ///         VirtualNetworkId = example.Apply(getVirtualNetworkResult =&gt; getVirtualNetworkResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = exampleGetVirtualNetworkPeering.Apply(getVirtualNetworkPeeringResult =&gt; getVirtualNetworkPeeringResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Network`: 2024-05-01
        /// </summary>
        public static Task<GetVirtualNetworkPeeringResult> InvokeAsync(GetVirtualNetworkPeeringArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualNetworkPeeringResult>("azure:network/getVirtualNetworkPeering:getVirtualNetworkPeering", args ?? new GetVirtualNetworkPeeringArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing virtual network peering.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetVirtualNetwork.Invoke(new()
        ///     {
        ///         Name = "vnet01",
        ///         ResourceGroupName = "networking",
        ///     });
        /// 
        ///     var exampleGetVirtualNetworkPeering = Azure.Network.GetVirtualNetworkPeering.Invoke(new()
        ///     {
        ///         Name = "peer-vnet01-to-vnet02",
        ///         VirtualNetworkId = example.Apply(getVirtualNetworkResult =&gt; getVirtualNetworkResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = exampleGetVirtualNetworkPeering.Apply(getVirtualNetworkPeeringResult =&gt; getVirtualNetworkPeeringResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Network`: 2024-05-01
        /// </summary>
        public static Output<GetVirtualNetworkPeeringResult> Invoke(GetVirtualNetworkPeeringInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualNetworkPeeringResult>("azure:network/getVirtualNetworkPeering:getVirtualNetworkPeering", args ?? new GetVirtualNetworkPeeringInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing virtual network peering.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Network.GetVirtualNetwork.Invoke(new()
        ///     {
        ///         Name = "vnet01",
        ///         ResourceGroupName = "networking",
        ///     });
        /// 
        ///     var exampleGetVirtualNetworkPeering = Azure.Network.GetVirtualNetworkPeering.Invoke(new()
        ///     {
        ///         Name = "peer-vnet01-to-vnet02",
        ///         VirtualNetworkId = example.Apply(getVirtualNetworkResult =&gt; getVirtualNetworkResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = exampleGetVirtualNetworkPeering.Apply(getVirtualNetworkPeeringResult =&gt; getVirtualNetworkPeeringResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Network`: 2024-05-01
        /// </summary>
        public static Output<GetVirtualNetworkPeeringResult> Invoke(GetVirtualNetworkPeeringInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualNetworkPeeringResult>("azure:network/getVirtualNetworkPeering:getVirtualNetworkPeering", args ?? new GetVirtualNetworkPeeringInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualNetworkPeeringArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this virtual network peering.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The resource ID of the virtual network.
        /// </summary>
        [Input("virtualNetworkId", required: true)]
        public string VirtualNetworkId { get; set; } = null!;

        public GetVirtualNetworkPeeringArgs()
        {
        }
        public static new GetVirtualNetworkPeeringArgs Empty => new GetVirtualNetworkPeeringArgs();
    }

    public sealed class GetVirtualNetworkPeeringInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this virtual network peering.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The resource ID of the virtual network.
        /// </summary>
        [Input("virtualNetworkId", required: true)]
        public Input<string> VirtualNetworkId { get; set; } = null!;

        public GetVirtualNetworkPeeringInvokeArgs()
        {
        }
        public static new GetVirtualNetworkPeeringInvokeArgs Empty => new GetVirtualNetworkPeeringInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualNetworkPeeringResult
    {
        /// <summary>
        /// Controls if forwarded traffic from VMs in the remote virtual network is allowed.
        /// </summary>
        public readonly bool AllowForwardedTraffic;
        /// <summary>
        /// Controls gatewayLinks can be used in the remote virtual networkâ€™s link to the local virtual network.
        /// </summary>
        public readonly bool AllowGatewayTransit;
        /// <summary>
        /// Controls if the traffic from the local virtual network can reach the remote virtual network.
        /// </summary>
        public readonly bool AllowVirtualNetworkAccess;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// Specifies whether only IPv6 address space is peered for Subnet peering.
        /// </summary>
        public readonly bool OnlyIpv6PeeringEnabled;
        /// <summary>
        /// Specifies whether complete Virtual Network address space is peered.
        /// </summary>
        public readonly bool PeerCompleteVirtualNetworksEnabled;
        /// <summary>
        /// The full Azure resource ID of the remote virtual network.
        /// </summary>
        public readonly string RemoteVirtualNetworkId;
        /// <summary>
        /// Controls if remote gateways can be used on the local virtual network.
        /// </summary>
        public readonly bool UseRemoteGateways;
        public readonly string VirtualNetworkId;

        [OutputConstructor]
        private GetVirtualNetworkPeeringResult(
            bool allowForwardedTraffic,

            bool allowGatewayTransit,

            bool allowVirtualNetworkAccess,

            string id,

            string name,

            bool onlyIpv6PeeringEnabled,

            bool peerCompleteVirtualNetworksEnabled,

            string remoteVirtualNetworkId,

            bool useRemoteGateways,

            string virtualNetworkId)
        {
            AllowForwardedTraffic = allowForwardedTraffic;
            AllowGatewayTransit = allowGatewayTransit;
            AllowVirtualNetworkAccess = allowVirtualNetworkAccess;
            Id = id;
            Name = name;
            OnlyIpv6PeeringEnabled = onlyIpv6PeeringEnabled;
            PeerCompleteVirtualNetworksEnabled = peerCompleteVirtualNetworksEnabled;
            RemoteVirtualNetworkId = remoteVirtualNetworkId;
            UseRemoteGateways = useRemoteGateways;
            VirtualNetworkId = virtualNetworkId;
        }
    }
}
