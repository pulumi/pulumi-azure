// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    public static class GetNetworkManager
    {
        /// <summary>
        /// Use this data source to access information about a Network Manager.
        /// </summary>
        public static Task<GetNetworkManagerResult> InvokeAsync(GetNetworkManagerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkManagerResult>("azure:network/getNetworkManager:getNetworkManager", args ?? new GetNetworkManagerArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about a Network Manager.
        /// </summary>
        public static Output<GetNetworkManagerResult> Invoke(GetNetworkManagerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkManagerResult>("azure:network/getNetworkManager:getNetworkManager", args ?? new GetNetworkManagerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkManagerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Network Manager.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the Network Manager exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkManagerArgs()
        {
        }
        public static new GetNetworkManagerArgs Empty => new GetNetworkManagerArgs();
    }

    public sealed class GetNetworkManagerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Network Manager.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The Name of the Resource Group where the Network Manager exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNetworkManagerInvokeArgs()
        {
        }
        public static new GetNetworkManagerInvokeArgs Empty => new GetNetworkManagerInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkManagerResult
    {
        /// <summary>
        /// One or more `cross_tenant_scopes` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkManagerCrossTenantScopeResult> CrossTenantScopes;
        /// <summary>
        /// A description of the Network Manager.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Region where the Network Manager exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A list of configuration deployment type configured on the Network Manager.
        /// </summary>
        public readonly ImmutableArray<string> ScopeAccesses;
        /// <summary>
        /// A `scope` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkManagerScopeResult> Scopes;
        /// <summary>
        /// A mapping of tags assigned to the Network Manager.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetNetworkManagerResult(
            ImmutableArray<Outputs.GetNetworkManagerCrossTenantScopeResult> crossTenantScopes,

            string description,

            string id,

            string location,

            string name,

            string resourceGroupName,

            ImmutableArray<string> scopeAccesses,

            ImmutableArray<Outputs.GetNetworkManagerScopeResult> scopes,

            ImmutableDictionary<string, string> tags)
        {
            CrossTenantScopes = crossTenantScopes;
            Description = description;
            Id = id;
            Location = location;
            Name = name;
            ResourceGroupName = resourceGroupName;
            ScopeAccesses = scopeAccesses;
            Scopes = scopes;
            Tags = tags;
        }
    }
}
