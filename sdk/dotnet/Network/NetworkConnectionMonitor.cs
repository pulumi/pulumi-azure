// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages a Network Connection Monitor.
    /// 
    /// &gt; **NOTE:** Any Network Connection Monitor resource created with API versions 2019-06-01 or earlier (v1) are now incompatible with this provider, which now only supports v2.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleNetworkWatcher = new Azure.Network.NetworkWatcher("exampleNetworkWatcher", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///     });
    /// 
    ///     var exampleNetworkInterface = new Azure.Network.NetworkInterface("exampleNetworkInterface", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         IpConfigurations = new[]
    ///         {
    ///             new Azure.Network.Inputs.NetworkInterfaceIpConfigurationArgs
    ///             {
    ///                 Name = "testconfiguration1",
    ///                 SubnetId = exampleSubnet.Id,
    ///                 PrivateIpAddressAllocation = "Dynamic",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleVirtualMachine = new Azure.Compute.VirtualMachine("exampleVirtualMachine", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         NetworkInterfaceIds = new[]
    ///         {
    ///             exampleNetworkInterface.Id,
    ///         },
    ///         VmSize = "Standard_D2s_v3",
    ///         StorageImageReference = new Azure.Compute.Inputs.VirtualMachineStorageImageReferenceArgs
    ///         {
    ///             Publisher = "Canonical",
    ///             Offer = "0001-com-ubuntu-server-focal",
    ///             Sku = "20_04-lts",
    ///             Version = "latest",
    ///         },
    ///         StorageOsDisk = new Azure.Compute.Inputs.VirtualMachineStorageOsDiskArgs
    ///         {
    ///             Name = "osdisk-example01",
    ///             Caching = "ReadWrite",
    ///             CreateOption = "FromImage",
    ///             ManagedDiskType = "Standard_LRS",
    ///         },
    ///         OsProfile = new Azure.Compute.Inputs.VirtualMachineOsProfileArgs
    ///         {
    ///             ComputerName = "hostnametest01",
    ///             AdminUsername = "testadmin",
    ///             AdminPassword = "Password1234!",
    ///         },
    ///         OsProfileLinuxConfig = new Azure.Compute.Inputs.VirtualMachineOsProfileLinuxConfigArgs
    ///         {
    ///             DisablePasswordAuthentication = false,
    ///         },
    ///     });
    /// 
    ///     var exampleExtension = new Azure.Compute.Extension("exampleExtension", new()
    ///     {
    ///         VirtualMachineId = exampleVirtualMachine.Id,
    ///         Publisher = "Microsoft.Azure.NetworkWatcher",
    ///         Type = "NetworkWatcherAgentLinux",
    ///         TypeHandlerVersion = "1.4",
    ///         AutoUpgradeMinorVersion = true,
    ///     });
    /// 
    ///     var exampleAnalyticsWorkspace = new Azure.OperationalInsights.AnalyticsWorkspace("exampleAnalyticsWorkspace", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "PerGB2018",
    ///     });
    /// 
    ///     var exampleNetworkConnectionMonitor = new Azure.Network.NetworkConnectionMonitor("exampleNetworkConnectionMonitor", new()
    ///     {
    ///         NetworkWatcherId = exampleNetworkWatcher.Id,
    ///         Location = exampleNetworkWatcher.Location,
    ///         Endpoints = new[]
    ///         {
    ///             new Azure.Network.Inputs.NetworkConnectionMonitorEndpointArgs
    ///             {
    ///                 Name = "source",
    ///                 TargetResourceId = exampleVirtualMachine.Id,
    ///                 Filter = new Azure.Network.Inputs.NetworkConnectionMonitorEndpointFilterArgs
    ///                 {
    ///                     Items = new[]
    ///                     {
    ///                         new Azure.Network.Inputs.NetworkConnectionMonitorEndpointFilterItemArgs
    ///                         {
    ///                             Address = exampleVirtualMachine.Id,
    ///                             Type = "AgentAddress",
    ///                         },
    ///                     },
    ///                     Type = "Include",
    ///                 },
    ///             },
    ///             new Azure.Network.Inputs.NetworkConnectionMonitorEndpointArgs
    ///             {
    ///                 Name = "destination",
    ///                 Address = "mycompany.io",
    ///             },
    ///         },
    ///         TestConfigurations = new[]
    ///         {
    ///             new Azure.Network.Inputs.NetworkConnectionMonitorTestConfigurationArgs
    ///             {
    ///                 Name = "tcpName",
    ///                 Protocol = "Tcp",
    ///                 TestFrequencyInSeconds = 60,
    ///                 TcpConfiguration = new Azure.Network.Inputs.NetworkConnectionMonitorTestConfigurationTcpConfigurationArgs
    ///                 {
    ///                     Port = 80,
    ///                 },
    ///             },
    ///         },
    ///         TestGroups = new[]
    ///         {
    ///             new Azure.Network.Inputs.NetworkConnectionMonitorTestGroupArgs
    ///             {
    ///                 Name = "exampletg",
    ///                 DestinationEndpoints = new[]
    ///                 {
    ///                     "destination",
    ///                 },
    ///                 SourceEndpoints = new[]
    ///                 {
    ///                     "source",
    ///                 },
    ///                 TestConfigurationNames = new[]
    ///                 {
    ///                     "tcpName",
    ///                 },
    ///             },
    ///         },
    ///         Notes = "examplenote",
    ///         OutputWorkspaceResourceIds = new[]
    ///         {
    ///             exampleAnalyticsWorkspace.Id,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleExtension,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Network Connection Monitors can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:network/networkConnectionMonitor:NetworkConnectionMonitor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/networkWatchers/watcher1/connectionMonitors/connectionMonitor1
    /// ```
    /// </summary>
    [AzureResourceType("azure:network/networkConnectionMonitor:NetworkConnectionMonitor")]
    public partial class NetworkConnectionMonitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `endpoint` block as defined below.
        /// </summary>
        [Output("endpoints")]
        public Output<ImmutableArray<Outputs.NetworkConnectionMonitorEndpoint>> Endpoints { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Network Watcher. Changing this forces a new resource to be created.
        /// </summary>
        [Output("networkWatcherId")]
        public Output<string> NetworkWatcherId { get; private set; } = null!;

        /// <summary>
        /// The description of the Network Connection Monitor.
        /// </summary>
        [Output("notes")]
        public Output<string?> Notes { get; private set; } = null!;

        /// <summary>
        /// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
        /// </summary>
        [Output("outputWorkspaceResourceIds")]
        public Output<ImmutableArray<string>> OutputWorkspaceResourceIds { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Network Connection Monitor.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A `test_configuration` block as defined below.
        /// </summary>
        [Output("testConfigurations")]
        public Output<ImmutableArray<Outputs.NetworkConnectionMonitorTestConfiguration>> TestConfigurations { get; private set; } = null!;

        /// <summary>
        /// A `test_group` block as defined below.
        /// </summary>
        [Output("testGroups")]
        public Output<ImmutableArray<Outputs.NetworkConnectionMonitorTestGroup>> TestGroups { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkConnectionMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkConnectionMonitor(string name, NetworkConnectionMonitorArgs args, CustomResourceOptions? options = null)
            : base("azure:network/networkConnectionMonitor:NetworkConnectionMonitor", name, args ?? new NetworkConnectionMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkConnectionMonitor(string name, Input<string> id, NetworkConnectionMonitorState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/networkConnectionMonitor:NetworkConnectionMonitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkConnectionMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkConnectionMonitor Get(string name, Input<string> id, NetworkConnectionMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkConnectionMonitor(name, id, state, options);
        }
    }

    public sealed class NetworkConnectionMonitorArgs : global::Pulumi.ResourceArgs
    {
        [Input("endpoints", required: true)]
        private InputList<Inputs.NetworkConnectionMonitorEndpointArgs>? _endpoints;

        /// <summary>
        /// A `endpoint` block as defined below.
        /// </summary>
        public InputList<Inputs.NetworkConnectionMonitorEndpointArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.NetworkConnectionMonitorEndpointArgs>());
            set => _endpoints = value;
        }

        /// <summary>
        /// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Network Watcher. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkWatcherId", required: true)]
        public Input<string> NetworkWatcherId { get; set; } = null!;

        /// <summary>
        /// The description of the Network Connection Monitor.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        [Input("outputWorkspaceResourceIds")]
        private InputList<string>? _outputWorkspaceResourceIds;

        /// <summary>
        /// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
        /// </summary>
        public InputList<string> OutputWorkspaceResourceIds
        {
            get => _outputWorkspaceResourceIds ?? (_outputWorkspaceResourceIds = new InputList<string>());
            set => _outputWorkspaceResourceIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Network Connection Monitor.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("testConfigurations", required: true)]
        private InputList<Inputs.NetworkConnectionMonitorTestConfigurationArgs>? _testConfigurations;

        /// <summary>
        /// A `test_configuration` block as defined below.
        /// </summary>
        public InputList<Inputs.NetworkConnectionMonitorTestConfigurationArgs> TestConfigurations
        {
            get => _testConfigurations ?? (_testConfigurations = new InputList<Inputs.NetworkConnectionMonitorTestConfigurationArgs>());
            set => _testConfigurations = value;
        }

        [Input("testGroups", required: true)]
        private InputList<Inputs.NetworkConnectionMonitorTestGroupArgs>? _testGroups;

        /// <summary>
        /// A `test_group` block as defined below.
        /// </summary>
        public InputList<Inputs.NetworkConnectionMonitorTestGroupArgs> TestGroups
        {
            get => _testGroups ?? (_testGroups = new InputList<Inputs.NetworkConnectionMonitorTestGroupArgs>());
            set => _testGroups = value;
        }

        public NetworkConnectionMonitorArgs()
        {
        }
        public static new NetworkConnectionMonitorArgs Empty => new NetworkConnectionMonitorArgs();
    }

    public sealed class NetworkConnectionMonitorState : global::Pulumi.ResourceArgs
    {
        [Input("endpoints")]
        private InputList<Inputs.NetworkConnectionMonitorEndpointGetArgs>? _endpoints;

        /// <summary>
        /// A `endpoint` block as defined below.
        /// </summary>
        public InputList<Inputs.NetworkConnectionMonitorEndpointGetArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.NetworkConnectionMonitorEndpointGetArgs>());
            set => _endpoints = value;
        }

        /// <summary>
        /// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Network Watcher. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkWatcherId")]
        public Input<string>? NetworkWatcherId { get; set; }

        /// <summary>
        /// The description of the Network Connection Monitor.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        [Input("outputWorkspaceResourceIds")]
        private InputList<string>? _outputWorkspaceResourceIds;

        /// <summary>
        /// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
        /// </summary>
        public InputList<string> OutputWorkspaceResourceIds
        {
            get => _outputWorkspaceResourceIds ?? (_outputWorkspaceResourceIds = new InputList<string>());
            set => _outputWorkspaceResourceIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Network Connection Monitor.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("testConfigurations")]
        private InputList<Inputs.NetworkConnectionMonitorTestConfigurationGetArgs>? _testConfigurations;

        /// <summary>
        /// A `test_configuration` block as defined below.
        /// </summary>
        public InputList<Inputs.NetworkConnectionMonitorTestConfigurationGetArgs> TestConfigurations
        {
            get => _testConfigurations ?? (_testConfigurations = new InputList<Inputs.NetworkConnectionMonitorTestConfigurationGetArgs>());
            set => _testConfigurations = value;
        }

        [Input("testGroups")]
        private InputList<Inputs.NetworkConnectionMonitorTestGroupGetArgs>? _testGroups;

        /// <summary>
        /// A `test_group` block as defined below.
        /// </summary>
        public InputList<Inputs.NetworkConnectionMonitorTestGroupGetArgs> TestGroups
        {
            get => _testGroups ?? (_testGroups = new InputList<Inputs.NetworkConnectionMonitorTestGroupGetArgs>());
            set => _testGroups = value;
        }

        public NetworkConnectionMonitorState()
        {
        }
        public static new NetworkConnectionMonitorState Empty => new NetworkConnectionMonitorState();
    }
}
