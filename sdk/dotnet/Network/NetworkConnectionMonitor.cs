// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages a Network Connection Monitor.
    /// 
    /// &gt; **NOTE:** Any Network Connection Monitor resource created with API versions 2019-06-01 or earlier (v1) are now incompatible with this provider, which now only supports v2.
    /// 
    /// ## Import
    /// 
    /// Network Connection Monitors can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:network/networkConnectionMonitor:NetworkConnectionMonitor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/networkWatchers/watcher1/connectionMonitors/connectionMonitor1
    /// ```
    /// </summary>
    [AzureResourceType("azure:network/networkConnectionMonitor:NetworkConnectionMonitor")]
    public partial class NetworkConnectionMonitor : Pulumi.CustomResource
    {
        [Output("autoStart")]
        public Output<bool> AutoStart { get; private set; } = null!;

        [Output("destination")]
        public Output<Outputs.NetworkConnectionMonitorDestination> Destination { get; private set; } = null!;

        /// <summary>
        /// A `endpoint` block as defined below.
        /// </summary>
        [Output("endpoints")]
        public Output<ImmutableArray<Outputs.NetworkConnectionMonitorEndpoint>> Endpoints { get; private set; } = null!;

        [Output("intervalInSeconds")]
        public Output<int> IntervalInSeconds { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Network Watcher. Changing this forces a new resource to be created.
        /// </summary>
        [Output("networkWatcherId")]
        public Output<string> NetworkWatcherId { get; private set; } = null!;

        /// <summary>
        /// The description of the Network Connection Monitor.
        /// </summary>
        [Output("notes")]
        public Output<string?> Notes { get; private set; } = null!;

        /// <summary>
        /// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
        /// </summary>
        [Output("outputWorkspaceResourceIds")]
        public Output<ImmutableArray<string>> OutputWorkspaceResourceIds { get; private set; } = null!;

        [Output("source")]
        public Output<Outputs.NetworkConnectionMonitorSource> Source { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Network Connection Monitor.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A `test_configuration` block as defined below.
        /// </summary>
        [Output("testConfigurations")]
        public Output<ImmutableArray<Outputs.NetworkConnectionMonitorTestConfiguration>> TestConfigurations { get; private set; } = null!;

        /// <summary>
        /// A `test_group` block as defined below.
        /// </summary>
        [Output("testGroups")]
        public Output<ImmutableArray<Outputs.NetworkConnectionMonitorTestGroup>> TestGroups { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkConnectionMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkConnectionMonitor(string name, NetworkConnectionMonitorArgs args, CustomResourceOptions? options = null)
            : base("azure:network/networkConnectionMonitor:NetworkConnectionMonitor", name, args ?? new NetworkConnectionMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkConnectionMonitor(string name, Input<string> id, NetworkConnectionMonitorState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/networkConnectionMonitor:NetworkConnectionMonitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkConnectionMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkConnectionMonitor Get(string name, Input<string> id, NetworkConnectionMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkConnectionMonitor(name, id, state, options);
        }
    }

    public sealed class NetworkConnectionMonitorArgs : Pulumi.ResourceArgs
    {
        [Input("autoStart")]
        public Input<bool>? AutoStart { get; set; }

        [Input("destination")]
        public Input<Inputs.NetworkConnectionMonitorDestinationArgs>? Destination { get; set; }

        [Input("endpoints", required: true)]
        private InputList<Inputs.NetworkConnectionMonitorEndpointArgs>? _endpoints;

        /// <summary>
        /// A `endpoint` block as defined below.
        /// </summary>
        public InputList<Inputs.NetworkConnectionMonitorEndpointArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.NetworkConnectionMonitorEndpointArgs>());
            set => _endpoints = value;
        }

        [Input("intervalInSeconds")]
        public Input<int>? IntervalInSeconds { get; set; }

        /// <summary>
        /// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Network Watcher. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkWatcherId", required: true)]
        public Input<string> NetworkWatcherId { get; set; } = null!;

        /// <summary>
        /// The description of the Network Connection Monitor.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        [Input("outputWorkspaceResourceIds")]
        private InputList<string>? _outputWorkspaceResourceIds;

        /// <summary>
        /// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
        /// </summary>
        public InputList<string> OutputWorkspaceResourceIds
        {
            get => _outputWorkspaceResourceIds ?? (_outputWorkspaceResourceIds = new InputList<string>());
            set => _outputWorkspaceResourceIds = value;
        }

        [Input("source")]
        public Input<Inputs.NetworkConnectionMonitorSourceArgs>? Source { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Network Connection Monitor.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("testConfigurations", required: true)]
        private InputList<Inputs.NetworkConnectionMonitorTestConfigurationArgs>? _testConfigurations;

        /// <summary>
        /// A `test_configuration` block as defined below.
        /// </summary>
        public InputList<Inputs.NetworkConnectionMonitorTestConfigurationArgs> TestConfigurations
        {
            get => _testConfigurations ?? (_testConfigurations = new InputList<Inputs.NetworkConnectionMonitorTestConfigurationArgs>());
            set => _testConfigurations = value;
        }

        [Input("testGroups", required: true)]
        private InputList<Inputs.NetworkConnectionMonitorTestGroupArgs>? _testGroups;

        /// <summary>
        /// A `test_group` block as defined below.
        /// </summary>
        public InputList<Inputs.NetworkConnectionMonitorTestGroupArgs> TestGroups
        {
            get => _testGroups ?? (_testGroups = new InputList<Inputs.NetworkConnectionMonitorTestGroupArgs>());
            set => _testGroups = value;
        }

        public NetworkConnectionMonitorArgs()
        {
        }
    }

    public sealed class NetworkConnectionMonitorState : Pulumi.ResourceArgs
    {
        [Input("autoStart")]
        public Input<bool>? AutoStart { get; set; }

        [Input("destination")]
        public Input<Inputs.NetworkConnectionMonitorDestinationGetArgs>? Destination { get; set; }

        [Input("endpoints")]
        private InputList<Inputs.NetworkConnectionMonitorEndpointGetArgs>? _endpoints;

        /// <summary>
        /// A `endpoint` block as defined below.
        /// </summary>
        public InputList<Inputs.NetworkConnectionMonitorEndpointGetArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.NetworkConnectionMonitorEndpointGetArgs>());
            set => _endpoints = value;
        }

        [Input("intervalInSeconds")]
        public Input<int>? IntervalInSeconds { get; set; }

        /// <summary>
        /// The Azure Region where the Network Connection Monitor should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Network Connection Monitor. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Network Watcher. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkWatcherId")]
        public Input<string>? NetworkWatcherId { get; set; }

        /// <summary>
        /// The description of the Network Connection Monitor.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        [Input("outputWorkspaceResourceIds")]
        private InputList<string>? _outputWorkspaceResourceIds;

        /// <summary>
        /// A list of IDs of the Log Analytics Workspace which will accept the output from the Network Connection Monitor.
        /// </summary>
        public InputList<string> OutputWorkspaceResourceIds
        {
            get => _outputWorkspaceResourceIds ?? (_outputWorkspaceResourceIds = new InputList<string>());
            set => _outputWorkspaceResourceIds = value;
        }

        [Input("source")]
        public Input<Inputs.NetworkConnectionMonitorSourceGetArgs>? Source { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Network Connection Monitor.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("testConfigurations")]
        private InputList<Inputs.NetworkConnectionMonitorTestConfigurationGetArgs>? _testConfigurations;

        /// <summary>
        /// A `test_configuration` block as defined below.
        /// </summary>
        public InputList<Inputs.NetworkConnectionMonitorTestConfigurationGetArgs> TestConfigurations
        {
            get => _testConfigurations ?? (_testConfigurations = new InputList<Inputs.NetworkConnectionMonitorTestConfigurationGetArgs>());
            set => _testConfigurations = value;
        }

        [Input("testGroups")]
        private InputList<Inputs.NetworkConnectionMonitorTestGroupGetArgs>? _testGroups;

        /// <summary>
        /// A `test_group` block as defined below.
        /// </summary>
        public InputList<Inputs.NetworkConnectionMonitorTestGroupGetArgs> TestGroups
        {
            get => _testGroups ?? (_testGroups = new InputList<Inputs.NetworkConnectionMonitorTestGroupGetArgs>());
            set => _testGroups = value;
        }

        public NetworkConnectionMonitorState()
        {
        }
    }
}
