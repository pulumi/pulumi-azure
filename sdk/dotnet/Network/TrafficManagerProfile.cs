// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Network
{
    /// <summary>
    /// Manages a Traffic Manager Profile to which multiple endpoints can be attached.
    /// 
    /// ## Notes
    /// 
    /// The Traffic Manager is created with the location `global`.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/traffic_manager_profile.html.markdown.
    /// </summary>
    public partial class TrafficManagerProfile : Pulumi.CustomResource
    {
        /// <summary>
        /// This block specifies the DNS configuration of the
        /// Profile, it supports the fields documented below.
        /// </summary>
        [Output("dnsConfigs")]
        public Output<ImmutableArray<Outputs.TrafficManagerProfileDnsConfigs>> DnsConfigs { get; private set; } = null!;

        /// <summary>
        /// The FQDN of the created Profile.
        /// </summary>
        [Output("fqdn")]
        public Output<string> Fqdn { get; private set; } = null!;

        /// <summary>
        /// This block specifies the Endpoint monitoring
        /// configuration for the Profile, it supports the fields documented below.
        /// </summary>
        [Output("monitorConfigs")]
        public Output<ImmutableArray<Outputs.TrafficManagerProfileMonitorConfigs>> MonitorConfigs { get; private set; } = null!;

        /// <summary>
        /// The name of the virtual network. Changing this forces a
        /// new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The status of the profile, can be set to either
        /// `Enabled` or `Disabled`. Defaults to `Enabled`.
        /// </summary>
        [Output("profileStatus")]
        public Output<string> ProfileStatus { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to
        /// create the virtual network.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the algorithm used to route traffic, possible values are:
        /// - `Geographic` - Traffic is routed based on Geographic regions specified in the Endpoint.
        /// - `MultiValue`- All healthy Endpoints are returned.  MultiValue routing method works only if all the endpoints of type ‘External’ and are specified as IPv4 or IPv6 addresses.
        /// - `Performance` - Traffic is routed via the User's closest Endpoint
        /// - `Priority` - Traffic is routed to the Endpoint with the lowest `priority` value.
        /// - `Subnet` - Traffic is routed based on a mapping of sets of end-user IP address ranges to a specific Endpoint within a Traffic Manager profile.
        /// - `Weighted` - Traffic is spread across Endpoints proportional to their `weight` value.
        /// </summary>
        [Output("trafficRoutingMethod")]
        public Output<string> TrafficRoutingMethod { get; private set; } = null!;


        /// <summary>
        /// Create a TrafficManagerProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TrafficManagerProfile(string name, TrafficManagerProfileArgs args, CustomResourceOptions? options = null)
            : base("azure:network/trafficManagerProfile:TrafficManagerProfile", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private TrafficManagerProfile(string name, Input<string> id, TrafficManagerProfileState? state = null, CustomResourceOptions? options = null)
            : base("azure:network/trafficManagerProfile:TrafficManagerProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,                Aliases = { new Alias { Type = "azure:trafficmanager/profile:Profile" } },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TrafficManagerProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TrafficManagerProfile Get(string name, Input<string> id, TrafficManagerProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new TrafficManagerProfile(name, id, state, options);
        }
    }

    public sealed class TrafficManagerProfileArgs : Pulumi.ResourceArgs
    {
        [Input("dnsConfigs", required: true)]
        private InputList<Inputs.TrafficManagerProfileDnsConfigsArgs>? _dnsConfigs;

        /// <summary>
        /// This block specifies the DNS configuration of the
        /// Profile, it supports the fields documented below.
        /// </summary>
        public InputList<Inputs.TrafficManagerProfileDnsConfigsArgs> DnsConfigs
        {
            get => _dnsConfigs ?? (_dnsConfigs = new InputList<Inputs.TrafficManagerProfileDnsConfigsArgs>());
            set => _dnsConfigs = value;
        }

        [Input("monitorConfigs", required: true)]
        private InputList<Inputs.TrafficManagerProfileMonitorConfigsArgs>? _monitorConfigs;

        /// <summary>
        /// This block specifies the Endpoint monitoring
        /// configuration for the Profile, it supports the fields documented below.
        /// </summary>
        public InputList<Inputs.TrafficManagerProfileMonitorConfigsArgs> MonitorConfigs
        {
            get => _monitorConfigs ?? (_monitorConfigs = new InputList<Inputs.TrafficManagerProfileMonitorConfigsArgs>());
            set => _monitorConfigs = value;
        }

        /// <summary>
        /// The name of the virtual network. Changing this forces a
        /// new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The status of the profile, can be set to either
        /// `Enabled` or `Disabled`. Defaults to `Enabled`.
        /// </summary>
        [Input("profileStatus")]
        public Input<string>? ProfileStatus { get; set; }

        /// <summary>
        /// The name of the resource group in which to
        /// create the virtual network.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the algorithm used to route traffic, possible values are:
        /// - `Geographic` - Traffic is routed based on Geographic regions specified in the Endpoint.
        /// - `MultiValue`- All healthy Endpoints are returned.  MultiValue routing method works only if all the endpoints of type ‘External’ and are specified as IPv4 or IPv6 addresses.
        /// - `Performance` - Traffic is routed via the User's closest Endpoint
        /// - `Priority` - Traffic is routed to the Endpoint with the lowest `priority` value.
        /// - `Subnet` - Traffic is routed based on a mapping of sets of end-user IP address ranges to a specific Endpoint within a Traffic Manager profile.
        /// - `Weighted` - Traffic is spread across Endpoints proportional to their `weight` value.
        /// </summary>
        [Input("trafficRoutingMethod", required: true)]
        public Input<string> TrafficRoutingMethod { get; set; } = null!;

        public TrafficManagerProfileArgs()
        {
        }
    }

    public sealed class TrafficManagerProfileState : Pulumi.ResourceArgs
    {
        [Input("dnsConfigs")]
        private InputList<Inputs.TrafficManagerProfileDnsConfigsGetArgs>? _dnsConfigs;

        /// <summary>
        /// This block specifies the DNS configuration of the
        /// Profile, it supports the fields documented below.
        /// </summary>
        public InputList<Inputs.TrafficManagerProfileDnsConfigsGetArgs> DnsConfigs
        {
            get => _dnsConfigs ?? (_dnsConfigs = new InputList<Inputs.TrafficManagerProfileDnsConfigsGetArgs>());
            set => _dnsConfigs = value;
        }

        /// <summary>
        /// The FQDN of the created Profile.
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        [Input("monitorConfigs")]
        private InputList<Inputs.TrafficManagerProfileMonitorConfigsGetArgs>? _monitorConfigs;

        /// <summary>
        /// This block specifies the Endpoint monitoring
        /// configuration for the Profile, it supports the fields documented below.
        /// </summary>
        public InputList<Inputs.TrafficManagerProfileMonitorConfigsGetArgs> MonitorConfigs
        {
            get => _monitorConfigs ?? (_monitorConfigs = new InputList<Inputs.TrafficManagerProfileMonitorConfigsGetArgs>());
            set => _monitorConfigs = value;
        }

        /// <summary>
        /// The name of the virtual network. Changing this forces a
        /// new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The status of the profile, can be set to either
        /// `Enabled` or `Disabled`. Defaults to `Enabled`.
        /// </summary>
        [Input("profileStatus")]
        public Input<string>? ProfileStatus { get; set; }

        /// <summary>
        /// The name of the resource group in which to
        /// create the virtual network.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the algorithm used to route traffic, possible values are:
        /// - `Geographic` - Traffic is routed based on Geographic regions specified in the Endpoint.
        /// - `MultiValue`- All healthy Endpoints are returned.  MultiValue routing method works only if all the endpoints of type ‘External’ and are specified as IPv4 or IPv6 addresses.
        /// - `Performance` - Traffic is routed via the User's closest Endpoint
        /// - `Priority` - Traffic is routed to the Endpoint with the lowest `priority` value.
        /// - `Subnet` - Traffic is routed based on a mapping of sets of end-user IP address ranges to a specific Endpoint within a Traffic Manager profile.
        /// - `Weighted` - Traffic is spread across Endpoints proportional to their `weight` value.
        /// </summary>
        [Input("trafficRoutingMethod")]
        public Input<string>? TrafficRoutingMethod { get; set; }

        public TrafficManagerProfileState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class TrafficManagerProfileDnsConfigsArgs : Pulumi.ResourceArgs
    {
        [Input("relativeName", required: true)]
        public Input<string> RelativeName { get; set; } = null!;

        [Input("ttl", required: true)]
        public Input<int> Ttl { get; set; } = null!;

        public TrafficManagerProfileDnsConfigsArgs()
        {
        }
    }

    public sealed class TrafficManagerProfileDnsConfigsGetArgs : Pulumi.ResourceArgs
    {
        [Input("relativeName", required: true)]
        public Input<string> RelativeName { get; set; } = null!;

        [Input("ttl", required: true)]
        public Input<int> Ttl { get; set; } = null!;

        public TrafficManagerProfileDnsConfigsGetArgs()
        {
        }
    }

    public sealed class TrafficManagerProfileMonitorConfigsArgs : Pulumi.ResourceArgs
    {
        [Input("intervalInSeconds")]
        public Input<int>? IntervalInSeconds { get; set; }

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        [Input("timeoutInSeconds")]
        public Input<int>? TimeoutInSeconds { get; set; }

        [Input("toleratedNumberOfFailures")]
        public Input<int>? ToleratedNumberOfFailures { get; set; }

        public TrafficManagerProfileMonitorConfigsArgs()
        {
        }
    }

    public sealed class TrafficManagerProfileMonitorConfigsGetArgs : Pulumi.ResourceArgs
    {
        [Input("intervalInSeconds")]
        public Input<int>? IntervalInSeconds { get; set; }

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        [Input("timeoutInSeconds")]
        public Input<int>? TimeoutInSeconds { get; set; }

        [Input("toleratedNumberOfFailures")]
        public Input<int>? ToleratedNumberOfFailures { get; set; }

        public TrafficManagerProfileMonitorConfigsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class TrafficManagerProfileDnsConfigs
    {
        public readonly string RelativeName;
        public readonly int Ttl;

        [OutputConstructor]
        private TrafficManagerProfileDnsConfigs(
            string relativeName,
            int ttl)
        {
            RelativeName = relativeName;
            Ttl = ttl;
        }
    }

    [OutputType]
    public sealed class TrafficManagerProfileMonitorConfigs
    {
        public readonly int? IntervalInSeconds;
        public readonly string? Path;
        public readonly int Port;
        public readonly string Protocol;
        public readonly int? TimeoutInSeconds;
        public readonly int? ToleratedNumberOfFailures;

        [OutputConstructor]
        private TrafficManagerProfileMonitorConfigs(
            int? intervalInSeconds,
            string? path,
            int port,
            string protocol,
            int? timeoutInSeconds,
            int? toleratedNumberOfFailures)
        {
            IntervalInSeconds = intervalInSeconds;
            Path = path;
            Port = port;
            Protocol = protocol;
            TimeoutInSeconds = timeoutInSeconds;
            ToleratedNumberOfFailures = toleratedNumberOfFailures;
        }
    }
    }
}
