// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Hybrid
{
    public static class GetComputeMachine
    {
        /// <summary>
        /// Use this data source to access information about an existing Hybrid Compute.
        /// 
        /// ## Disclaimers
        /// 
        /// &gt; **Note:** The  Data Source `azure.hybrid.getComputeMachine` is deprecated will be removed in v4.0 of the Azure Provider - a replacement can be found in the form of the `azure.arcmachine.get` Data Source.
        /// </summary>
        public static Task<GetComputeMachineResult> InvokeAsync(GetComputeMachineArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetComputeMachineResult>("azure:hybrid/getComputeMachine:getComputeMachine", args ?? new GetComputeMachineArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Hybrid Compute.
        /// 
        /// ## Disclaimers
        /// 
        /// &gt; **Note:** The  Data Source `azure.hybrid.getComputeMachine` is deprecated will be removed in v4.0 of the Azure Provider - a replacement can be found in the form of the `azure.arcmachine.get` Data Source.
        /// </summary>
        public static Output<GetComputeMachineResult> Invoke(GetComputeMachineInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetComputeMachineResult>("azure:hybrid/getComputeMachine:getComputeMachine", args ?? new GetComputeMachineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetComputeMachineArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this hybrid compute machine.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Hybrid Compute exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetComputeMachineArgs()
        {
        }
        public static new GetComputeMachineArgs Empty => new GetComputeMachineArgs();
    }

    public sealed class GetComputeMachineInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of this hybrid compute machine.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Hybrid Compute exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetComputeMachineInvokeArgs()
        {
        }
        public static new GetComputeMachineInvokeArgs Empty => new GetComputeMachineInvokeArgs();
    }


    [OutputType]
    public sealed class GetComputeMachineResult
    {
        /// <summary>
        /// Specifies the AD fully qualified display name.
        /// </summary>
        public readonly string AdFqdn;
        /// <summary>
        /// A `agent_configuration` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputeMachineAgentConfigurationResult> AgentConfigurations;
        /// <summary>
        /// The hybrid machine agent full version.
        /// </summary>
        public readonly string AgentVersion;
        /// <summary>
        /// Public Key that the client provides to be used during initial resource onboarding.
        /// </summary>
        public readonly string ClientPublicKey;
        /// <summary>
        /// A `cloud_metadata` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputeMachineCloudMetadataResult> CloudMetadatas;
        /// <summary>
        /// A `detected_properties` block as defined below.
        /// </summary>
        public readonly ImmutableDictionary<string, string> DetectedProperties;
        /// <summary>
        /// Specifies the hybrid machine display name.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Specifies the DNS fully qualified display name.
        /// </summary>
        public readonly string DnsFqdn;
        /// <summary>
        /// Specifies the Windows domain name.
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// A `error_details` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputeMachineErrorDetailResult> ErrorDetails;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputeMachineIdentityResult> Identities;
        /// <summary>
        /// The time of the last status change.
        /// </summary>
        public readonly string LastStatusChange;
        /// <summary>
        /// The Azure Region where the hybrid compute machine exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// A `location_data` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputeMachineLocationDataResult> LocationDatas;
        /// <summary>
        /// Specifies the hybrid machine fully qualified display name.
        /// </summary>
        public readonly string MachineFqdn;
        /// <summary>
        /// Specifies whether any MS SQL instance is discovered on the machine.
        /// </summary>
        public readonly bool MssqlDiscovered;
        /// <summary>
        /// A canonical name for the geographic or physical location.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Operating System running on the hybrid machine.
        /// </summary>
        public readonly string OsName;
        /// <summary>
        /// A `os_profile` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputeMachineOsProfileResult> OsProfiles;
        /// <summary>
        /// Specifies the Operating System product SKU.
        /// </summary>
        public readonly string OsSku;
        /// <summary>
        /// The type of Operating System. Possible values are `windows` and `linux`.
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// The version of Operating System running on the hybrid machine.
        /// </summary>
        public readonly string OsVersion;
        /// <summary>
        /// The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any.
        /// </summary>
        public readonly string ParentClusterResourceId;
        /// <summary>
        /// The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any.
        /// </summary>
        public readonly string PrivateLinkScopeResourceId;
        public readonly string ResourceGroupName;
        /// <summary>
        /// A `service_status` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetComputeMachineServiceStatusResult> ServiceStatuses;
        /// <summary>
        /// The current status of the service.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A mapping of tags assigned to the Hybrid Compute.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Specifies the hybrid machine unique ID.
        /// </summary>
        public readonly string VmId;
        /// <summary>
        /// Specifies the Arc Machine's unique SMBIOS ID.
        /// </summary>
        public readonly string VmUuid;

        [OutputConstructor]
        private GetComputeMachineResult(
            string adFqdn,

            ImmutableArray<Outputs.GetComputeMachineAgentConfigurationResult> agentConfigurations,

            string agentVersion,

            string clientPublicKey,

            ImmutableArray<Outputs.GetComputeMachineCloudMetadataResult> cloudMetadatas,

            ImmutableDictionary<string, string> detectedProperties,

            string displayName,

            string dnsFqdn,

            string domainName,

            ImmutableArray<Outputs.GetComputeMachineErrorDetailResult> errorDetails,

            string id,

            ImmutableArray<Outputs.GetComputeMachineIdentityResult> identities,

            string lastStatusChange,

            string location,

            ImmutableArray<Outputs.GetComputeMachineLocationDataResult> locationDatas,

            string machineFqdn,

            bool mssqlDiscovered,

            string name,

            string osName,

            ImmutableArray<Outputs.GetComputeMachineOsProfileResult> osProfiles,

            string osSku,

            string osType,

            string osVersion,

            string parentClusterResourceId,

            string privateLinkScopeResourceId,

            string resourceGroupName,

            ImmutableArray<Outputs.GetComputeMachineServiceStatusResult> serviceStatuses,

            string status,

            ImmutableDictionary<string, string> tags,

            string vmId,

            string vmUuid)
        {
            AdFqdn = adFqdn;
            AgentConfigurations = agentConfigurations;
            AgentVersion = agentVersion;
            ClientPublicKey = clientPublicKey;
            CloudMetadatas = cloudMetadatas;
            DetectedProperties = detectedProperties;
            DisplayName = displayName;
            DnsFqdn = dnsFqdn;
            DomainName = domainName;
            ErrorDetails = errorDetails;
            Id = id;
            Identities = identities;
            LastStatusChange = lastStatusChange;
            Location = location;
            LocationDatas = locationDatas;
            MachineFqdn = machineFqdn;
            MssqlDiscovered = mssqlDiscovered;
            Name = name;
            OsName = osName;
            OsProfiles = osProfiles;
            OsSku = osSku;
            OsType = osType;
            OsVersion = osVersion;
            ParentClusterResourceId = parentClusterResourceId;
            PrivateLinkScopeResourceId = privateLinkScopeResourceId;
            ResourceGroupName = resourceGroupName;
            ServiceStatuses = serviceStatuses;
            Status = status;
            Tags = tags;
            VmId = vmId;
            VmUuid = vmUuid;
        }
    }
}
