// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Dashboard
{
    public static class GetGrafana
    {
        /// <summary>
        /// Use this data source to access information about an existing Grafana Dashboard.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Dashboard.GetGrafana.Invoke(new()
        ///     {
        ///         Name = "example-grafana-dashboard",
        ///         ResourceGroupName = "example-rg",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["name"] = example.Apply(getGrafanaResult =&gt; getGrafanaResult.Name),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGrafanaResult> InvokeAsync(GetGrafanaArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGrafanaResult>("azure:dashboard/getGrafana:getGrafana", args ?? new GetGrafanaArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Grafana Dashboard.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.Dashboard.GetGrafana.Invoke(new()
        ///     {
        ///         Name = "example-grafana-dashboard",
        ///         ResourceGroupName = "example-rg",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["name"] = example.Apply(getGrafanaResult =&gt; getGrafanaResult.Name),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGrafanaResult> Invoke(GetGrafanaInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGrafanaResult>("azure:dashboard/getGrafana:getGrafana", args ?? new GetGrafanaInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGrafanaArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The managed identity of the grafana resource.
        /// </summary>
        [Input("identity")]
        public Inputs.GetGrafanaIdentityArgs? Identity { get; set; }

        /// <summary>
        /// Name of the grafana dashboard.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group where resource belongs to.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetGrafanaArgs()
        {
        }
        public static new GetGrafanaArgs Empty => new GetGrafanaArgs();
    }

    public sealed class GetGrafanaInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The managed identity of the grafana resource.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.GetGrafanaIdentityInputArgs>? Identity { get; set; }

        /// <summary>
        /// Name of the grafana dashboard.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of the resource group where resource belongs to.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetGrafanaInvokeArgs()
        {
        }
        public static new GetGrafanaInvokeArgs Empty => new GetGrafanaInvokeArgs();
    }


    [OutputType]
    public sealed class GetGrafanaResult
    {
        /// <summary>
        /// Whether the api key setting of the Grafana instance is enabled.
        /// </summary>
        public readonly bool ApiKeyEnabled;
        /// <summary>
        /// Scope for dns deterministic name hash calculation.
        /// </summary>
        public readonly string AutoGeneratedDomainNameLabelScope;
        /// <summary>
        /// Integrations for Azure Monitor Workspace.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGrafanaAzureMonitorWorkspaceIntegrationResult> AzureMonitorWorkspaceIntegrations;
        /// <summary>
        /// Whether the Grafana instance uses deterministic outbound IPs.
        /// </summary>
        public readonly bool DeterministicOutboundIpEnabled;
        /// <summary>
        /// The endpoint of the Grafana instance.
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// Major version of Grafana instance.
        /// </summary>
        public readonly string GrafanaMajorVersion;
        /// <summary>
        /// The full Grafana software semantic version deployed.
        /// </summary>
        public readonly string GrafanaVersion;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The managed identity of the grafana resource.
        /// </summary>
        public readonly Outputs.GetGrafanaIdentityResult? Identity;
        /// <summary>
        /// Azure location where the resource exists.
        /// </summary>
        public readonly string Location;
        public readonly string Name;
        public readonly ImmutableArray<string> OutboundIps;
        /// <summary>
        /// Whether or not public endpoint access is allowed for this server.
        /// </summary>
        public readonly bool PublicNetworkAccessEnabled;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The name of the SKU used for the Grafana instance.
        /// </summary>
        public readonly string Sku;
        /// <summary>
        /// A mapping of tags to assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The zone redundancy setting of the Grafana instance.
        /// </summary>
        public readonly bool ZoneRedundancyEnabled;

        [OutputConstructor]
        private GetGrafanaResult(
            bool apiKeyEnabled,

            string autoGeneratedDomainNameLabelScope,

            ImmutableArray<Outputs.GetGrafanaAzureMonitorWorkspaceIntegrationResult> azureMonitorWorkspaceIntegrations,

            bool deterministicOutboundIpEnabled,

            string endpoint,

            string grafanaMajorVersion,

            string grafanaVersion,

            string id,

            Outputs.GetGrafanaIdentityResult? identity,

            string location,

            string name,

            ImmutableArray<string> outboundIps,

            bool publicNetworkAccessEnabled,

            string resourceGroupName,

            string sku,

            ImmutableDictionary<string, string> tags,

            bool zoneRedundancyEnabled)
        {
            ApiKeyEnabled = apiKeyEnabled;
            AutoGeneratedDomainNameLabelScope = autoGeneratedDomainNameLabelScope;
            AzureMonitorWorkspaceIntegrations = azureMonitorWorkspaceIntegrations;
            DeterministicOutboundIpEnabled = deterministicOutboundIpEnabled;
            Endpoint = endpoint;
            GrafanaMajorVersion = grafanaMajorVersion;
            GrafanaVersion = grafanaVersion;
            Id = id;
            Identity = identity;
            Location = location;
            Name = name;
            OutboundIps = outboundIps;
            PublicNetworkAccessEnabled = publicNetworkAccessEnabled;
            ResourceGroupName = resourceGroupName;
            Sku = sku;
            Tags = tags;
            ZoneRedundancyEnabled = zoneRedundancyEnabled;
        }
    }
}
