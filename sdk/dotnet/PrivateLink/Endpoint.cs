// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.PrivateLink
{
    /// <summary>
    /// Manages a Private Endpoint.
    /// 
    /// Azure Private Endpoint is a network interface that connects you privately and securely to a service powered by Azure Private Link. Private Endpoint uses a private IP address from your VNet, effectively bringing the service into your VNet. The service could be an Azure service such as Azure Storage, SQL, etc. or your own Private Link Service.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var service = new Azure.Network.Subnet("service", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.1.0/24",
    ///         },
    ///         EnforcePrivateLinkServiceNetworkPolicies = true,
    ///     });
    /// 
    ///     var endpoint = new Azure.Network.Subnet("endpoint", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///         EnforcePrivateLinkEndpointNetworkPolicies = true,
    ///     });
    /// 
    ///     var examplePublicIp = new Azure.Network.PublicIp("examplePublicIp", new()
    ///     {
    ///         Sku = "Standard",
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AllocationMethod = "Static",
    ///     });
    /// 
    ///     var exampleLoadBalancer = new Azure.Lb.LoadBalancer("exampleLoadBalancer", new()
    ///     {
    ///         Sku = "Standard",
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         FrontendIpConfigurations = new[]
    ///         {
    ///             new Azure.Lb.Inputs.LoadBalancerFrontendIpConfigurationArgs
    ///             {
    ///                 Name = examplePublicIp.Name,
    ///                 PublicIpAddressId = examplePublicIp.Id,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleLinkService = new Azure.PrivateDns.LinkService("exampleLinkService", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         NatIpConfigurations = new[]
    ///         {
    ///             new Azure.PrivateDns.Inputs.LinkServiceNatIpConfigurationArgs
    ///             {
    ///                 Name = examplePublicIp.Name,
    ///                 Primary = true,
    ///                 SubnetId = service.Id,
    ///             },
    ///         },
    ///         LoadBalancerFrontendIpConfigurationIds = new[]
    ///         {
    ///             exampleLoadBalancer.FrontendIpConfigurations.Apply(frontendIpConfigurations =&gt; frontendIpConfigurations[0]?.Id),
    ///         },
    ///     });
    /// 
    ///     var exampleEndpoint = new Azure.PrivateLink.Endpoint("exampleEndpoint", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         SubnetId = endpoint.Id,
    ///         PrivateServiceConnection = new Azure.PrivateLink.Inputs.EndpointPrivateServiceConnectionArgs
    ///         {
    ///             Name = "example-privateserviceconnection",
    ///             PrivateConnectionResourceId = exampleLinkService.Id,
    ///             IsManualConnection = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Using a Private Link Service Alias with existing resources:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = Azure.Core.GetResourceGroup.Invoke(new()
    ///     {
    ///         Name = "example-resources",
    ///     });
    /// 
    ///     var vnet = Azure.Network.GetVirtualNetwork.Invoke(new()
    ///     {
    ///         Name = "example-network",
    ///         ResourceGroupName = exampleResourceGroup.Apply(getResourceGroupResult =&gt; getResourceGroupResult.Name),
    ///     });
    /// 
    ///     var subnet = Azure.Network.GetSubnet.Invoke(new()
    ///     {
    ///         Name = "default",
    ///         VirtualNetworkName = vnet.Apply(getVirtualNetworkResult =&gt; getVirtualNetworkResult.Name),
    ///         ResourceGroupName = exampleResourceGroup.Apply(getResourceGroupResult =&gt; getResourceGroupResult.Name),
    ///     });
    /// 
    ///     var exampleEndpoint = new Azure.PrivateLink.Endpoint("exampleEndpoint", new()
    ///     {
    ///         Location = exampleResourceGroup.Apply(getResourceGroupResult =&gt; getResourceGroupResult.Location),
    ///         ResourceGroupName = exampleResourceGroup.Apply(getResourceGroupResult =&gt; getResourceGroupResult.Name),
    ///         SubnetId = subnet.Apply(getSubnetResult =&gt; getSubnetResult.Id),
    ///         PrivateServiceConnection = new Azure.PrivateLink.Inputs.EndpointPrivateServiceConnectionArgs
    ///         {
    ///             Name = "example-privateserviceconnection",
    ///             PrivateConnectionResourceAlias = "example-privatelinkservice.d20286c8-4ea5-11eb-9584-8f53157226c6.centralus.azure.privatelinkservice",
    ///             IsManualConnection = true,
    ///             RequestMessage = "PL",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Using a Private Endpoint pointing to an *owned* Azure service, with proper DNS configuration:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///     });
    /// 
    ///     var exampleZone = new Azure.PrivateDns.Zone("exampleZone", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleEndpoint = new Azure.PrivateLink.Endpoint("exampleEndpoint", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         SubnetId = exampleSubnet.Id,
    ///         PrivateServiceConnection = new Azure.PrivateLink.Inputs.EndpointPrivateServiceConnectionArgs
    ///         {
    ///             Name = "example-privateserviceconnection",
    ///             PrivateConnectionResourceId = exampleAccount.Id,
    ///             SubresourceNames = new[]
    ///             {
    ///                 "blob",
    ///             },
    ///             IsManualConnection = false,
    ///         },
    ///         PrivateDnsZoneGroup = new Azure.PrivateLink.Inputs.EndpointPrivateDnsZoneGroupArgs
    ///         {
    ///             Name = "example-dns-zone-group",
    ///             PrivateDnsZoneIds = new[]
    ///             {
    ///                 exampleZone.Id,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleZoneVirtualNetworkLink = new Azure.PrivateDns.ZoneVirtualNetworkLink("exampleZoneVirtualNetworkLink", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         PrivateDnsZoneName = exampleZone.Name,
    ///         VirtualNetworkId = exampleVirtualNetwork.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ## Example HCL Configurations
    /// 
    /// * How to conneca `Private Endpoint` to a Application Gateway
    /// * How to connect a `Private Endpoint` to a Cosmos MongoDB
    /// * How to connect a `Private Endpoint` to a Cosmos PostgreSQL
    /// * How to connect a `Private Endpoint` to a PostgreSQL Server
    /// * How to connect a `Private Endpoint` to a Private Link Service
    /// * How to connect a `Private Endpoint` to a Private DNS Group
    /// * How to connect a `Private Endpoint` to a Databricks Workspace
    /// 
    /// ## Import
    /// 
    /// Private Endpoints can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:privatelink/endpoint:Endpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/privateEndpoints/endpoint1
    /// ```
    /// </summary>
    [AzureResourceType("azure:privatelink/endpoint:Endpoint")]
    public partial class Endpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `custom_dns_configs` block as defined below.
        /// </summary>
        [Output("customDnsConfigs")]
        public Output<ImmutableArray<Outputs.EndpointCustomDnsConfig>> CustomDnsConfigs { get; private set; } = null!;

        /// <summary>
        /// The custom name of the network interface attached to the private endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Output("customNetworkInterfaceName")]
        public Output<string?> CustomNetworkInterfaceName { get; private set; } = null!;

        /// <summary>
        /// One or more `ip_configuration` blocks as defined below. This allows a static IP address to be set for this Private Endpoint, otherwise an address is dynamically allocated from the Subnet.
        /// </summary>
        [Output("ipConfigurations")]
        public Output<ImmutableArray<Outputs.EndpointIpConfiguration>> IpConfigurations { get; private set; } = null!;

        /// <summary>
        /// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the Name of the Private Endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `network_interface` block as defined below.
        /// </summary>
        [Output("networkInterfaces")]
        public Output<ImmutableArray<Outputs.EndpointNetworkInterface>> NetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// A `private_dns_zone_configs` block as defined below.
        /// </summary>
        [Output("privateDnsZoneConfigs")]
        public Output<ImmutableArray<Outputs.EndpointPrivateDnsZoneConfig>> PrivateDnsZoneConfigs { get; private set; } = null!;

        /// <summary>
        /// A `private_dns_zone_group` block as defined below.
        /// </summary>
        [Output("privateDnsZoneGroup")]
        public Output<Outputs.EndpointPrivateDnsZoneGroup?> PrivateDnsZoneGroup { get; private set; } = null!;

        /// <summary>
        /// A `private_service_connection` block as defined below.
        /// </summary>
        [Output("privateServiceConnection")]
        public Output<Outputs.EndpointPrivateServiceConnection> PrivateServiceConnection { get; private set; } = null!;

        /// <summary>
        /// Specifies the Name of the Resource Group within which the Private Endpoint should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subnet from which Private IP Addresses will be allocated for this Private Endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Endpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Endpoint(string name, EndpointArgs args, CustomResourceOptions? options = null)
            : base("azure:privatelink/endpoint:Endpoint", name, args ?? new EndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Endpoint(string name, Input<string> id, EndpointState? state = null, CustomResourceOptions? options = null)
            : base("azure:privatelink/endpoint:Endpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Endpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Endpoint Get(string name, Input<string> id, EndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new Endpoint(name, id, state, options);
        }
    }

    public sealed class EndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The custom name of the network interface attached to the private endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Input("customNetworkInterfaceName")]
        public Input<string>? CustomNetworkInterfaceName { get; set; }

        [Input("ipConfigurations")]
        private InputList<Inputs.EndpointIpConfigurationArgs>? _ipConfigurations;

        /// <summary>
        /// One or more `ip_configuration` blocks as defined below. This allows a static IP address to be set for this Private Endpoint, otherwise an address is dynamically allocated from the Subnet.
        /// </summary>
        public InputList<Inputs.EndpointIpConfigurationArgs> IpConfigurations
        {
            get => _ipConfigurations ?? (_ipConfigurations = new InputList<Inputs.EndpointIpConfigurationArgs>());
            set => _ipConfigurations = value;
        }

        /// <summary>
        /// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the Name of the Private Endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `private_dns_zone_group` block as defined below.
        /// </summary>
        [Input("privateDnsZoneGroup")]
        public Input<Inputs.EndpointPrivateDnsZoneGroupArgs>? PrivateDnsZoneGroup { get; set; }

        /// <summary>
        /// A `private_service_connection` block as defined below.
        /// </summary>
        [Input("privateServiceConnection", required: true)]
        public Input<Inputs.EndpointPrivateServiceConnectionArgs> PrivateServiceConnection { get; set; } = null!;

        /// <summary>
        /// Specifies the Name of the Resource Group within which the Private Endpoint should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The ID of the Subnet from which Private IP Addresses will be allocated for this Private Endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public EndpointArgs()
        {
        }
        public static new EndpointArgs Empty => new EndpointArgs();
    }

    public sealed class EndpointState : global::Pulumi.ResourceArgs
    {
        [Input("customDnsConfigs")]
        private InputList<Inputs.EndpointCustomDnsConfigGetArgs>? _customDnsConfigs;

        /// <summary>
        /// A `custom_dns_configs` block as defined below.
        /// </summary>
        public InputList<Inputs.EndpointCustomDnsConfigGetArgs> CustomDnsConfigs
        {
            get => _customDnsConfigs ?? (_customDnsConfigs = new InputList<Inputs.EndpointCustomDnsConfigGetArgs>());
            set => _customDnsConfigs = value;
        }

        /// <summary>
        /// The custom name of the network interface attached to the private endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Input("customNetworkInterfaceName")]
        public Input<string>? CustomNetworkInterfaceName { get; set; }

        [Input("ipConfigurations")]
        private InputList<Inputs.EndpointIpConfigurationGetArgs>? _ipConfigurations;

        /// <summary>
        /// One or more `ip_configuration` blocks as defined below. This allows a static IP address to be set for this Private Endpoint, otherwise an address is dynamically allocated from the Subnet.
        /// </summary>
        public InputList<Inputs.EndpointIpConfigurationGetArgs> IpConfigurations
        {
            get => _ipConfigurations ?? (_ipConfigurations = new InputList<Inputs.EndpointIpConfigurationGetArgs>());
            set => _ipConfigurations = value;
        }

        /// <summary>
        /// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the Name of the Private Endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaces")]
        private InputList<Inputs.EndpointNetworkInterfaceGetArgs>? _networkInterfaces;

        /// <summary>
        /// A `network_interface` block as defined below.
        /// </summary>
        public InputList<Inputs.EndpointNetworkInterfaceGetArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.EndpointNetworkInterfaceGetArgs>());
            set => _networkInterfaces = value;
        }

        [Input("privateDnsZoneConfigs")]
        private InputList<Inputs.EndpointPrivateDnsZoneConfigGetArgs>? _privateDnsZoneConfigs;

        /// <summary>
        /// A `private_dns_zone_configs` block as defined below.
        /// </summary>
        public InputList<Inputs.EndpointPrivateDnsZoneConfigGetArgs> PrivateDnsZoneConfigs
        {
            get => _privateDnsZoneConfigs ?? (_privateDnsZoneConfigs = new InputList<Inputs.EndpointPrivateDnsZoneConfigGetArgs>());
            set => _privateDnsZoneConfigs = value;
        }

        /// <summary>
        /// A `private_dns_zone_group` block as defined below.
        /// </summary>
        [Input("privateDnsZoneGroup")]
        public Input<Inputs.EndpointPrivateDnsZoneGroupGetArgs>? PrivateDnsZoneGroup { get; set; }

        /// <summary>
        /// A `private_service_connection` block as defined below.
        /// </summary>
        [Input("privateServiceConnection")]
        public Input<Inputs.EndpointPrivateServiceConnectionGetArgs>? PrivateServiceConnection { get; set; }

        /// <summary>
        /// Specifies the Name of the Resource Group within which the Private Endpoint should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The ID of the Subnet from which Private IP Addresses will be allocated for this Private Endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public EndpointState()
        {
        }
        public static new EndpointState Empty => new EndpointState();
    }
}
