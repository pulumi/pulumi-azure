// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Dns
{
    public static class GetSoaRecord
    {
        public static Task<GetSoaRecordResult> InvokeAsync(GetSoaRecordArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSoaRecordResult>("azure:dns/getSoaRecord:getSoaRecord", args ?? new GetSoaRecordArgs(), options.WithDefaults());

        public static Output<GetSoaRecordResult> Invoke(GetSoaRecordInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSoaRecordResult>("azure:dns/getSoaRecord:getSoaRecord", args ?? new GetSoaRecordInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSoaRecordArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the DNS SOA Record.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Specifies the resource group where the DNS Zone (parent resource) exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the DNS Zone where the resource exists.
        /// </summary>
        [Input("zoneName", required: true)]
        public string ZoneName { get; set; } = null!;

        public GetSoaRecordArgs()
        {
        }
        public static new GetSoaRecordArgs Empty => new GetSoaRecordArgs();
    }

    public sealed class GetSoaRecordInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the DNS SOA Record.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the resource group where the DNS Zone (parent resource) exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the DNS Zone where the resource exists.
        /// </summary>
        [Input("zoneName", required: true)]
        public Input<string> ZoneName { get; set; } = null!;

        public GetSoaRecordInvokeArgs()
        {
        }
        public static new GetSoaRecordInvokeArgs Empty => new GetSoaRecordInvokeArgs();
    }


    [OutputType]
    public sealed class GetSoaRecordResult
    {
        /// <summary>
        /// The email contact for the SOA record.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// The expire time for the SOA record.
        /// </summary>
        public readonly int ExpireTime;
        /// <summary>
        /// The FQDN of the DNS SOA Record.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// The domain name of the authoritative name server for the SOA record.
        /// </summary>
        public readonly string HostName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The minimum Time To Live for the SOA record. By convention, it is used to determine the negative caching duration.
        /// </summary>
        public readonly int MinimumTtl;
        /// <summary>
        /// The name of the DNS SOA Record.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The refresh time for the SOA record.
        /// </summary>
        public readonly int RefreshTime;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The retry time for the SOA record.
        /// </summary>
        public readonly int RetryTime;
        /// <summary>
        /// The serial number for the SOA record.
        /// </summary>
        public readonly int SerialNumber;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The Time To Live (TTL) of the DNS record in seconds.
        /// </summary>
        public readonly int Ttl;
        public readonly string ZoneName;

        [OutputConstructor]
        private GetSoaRecordResult(
            string email,

            int expireTime,

            string fqdn,

            string hostName,

            string id,

            int minimumTtl,

            string? name,

            int refreshTime,

            string resourceGroupName,

            int retryTime,

            int serialNumber,

            ImmutableDictionary<string, string> tags,

            int ttl,

            string zoneName)
        {
            Email = email;
            ExpireTime = expireTime;
            Fqdn = fqdn;
            HostName = hostName;
            Id = id;
            MinimumTtl = minimumTtl;
            Name = name;
            RefreshTime = refreshTime;
            ResourceGroupName = resourceGroupName;
            RetryTime = retryTime;
            SerialNumber = serialNumber;
            Tags = tags;
            Ttl = ttl;
            ZoneName = zoneName;
        }
    }
}
