// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.SecurityCenter
{
    /// <summary>
    /// Manages the Defender for Storage.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "westus2",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleStorageDefender = new Azure.SecurityCenter.StorageDefender("exampleStorageDefender", new()
    ///     {
    ///         StorageAccountId = exampleAccount.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The setting can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:securitycenter/storageDefender:StorageDefender example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Storage/storageAccounts/storageacc
    /// ```
    /// </summary>
    [AzureResourceType("azure:securitycenter/storageDefender:StorageDefender")]
    public partial class StorageDefender : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The max GB to be scanned per Month. Must be `-1` or above `0`. Omit this property or set to `-1` if no capping is needed. Defaults to `-1`.
        /// </summary>
        [Output("malwareScanningOnUploadCapGbPerMonth")]
        public Output<int?> MalwareScanningOnUploadCapGbPerMonth { get; private set; } = null!;

        /// <summary>
        /// Whether On Upload malware scanning should be enabled. Defaults to `false`.
        /// </summary>
        [Output("malwareScanningOnUploadEnabled")]
        public Output<bool?> MalwareScanningOnUploadEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether the settings defined for this storage account should override the settings defined for the subscription. Defaults to `false`.
        /// </summary>
        [Output("overrideSubscriptionSettingsEnabled")]
        public Output<bool?> OverrideSubscriptionSettingsEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether Sensitive Data Discovery should be enabled. Defaults to `false`.
        /// </summary>
        [Output("sensitiveDataDiscoveryEnabled")]
        public Output<bool?> SensitiveDataDiscoveryEnabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the storage account the defender applied to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("storageAccountId")]
        public Output<string> StorageAccountId { get; private set; } = null!;


        /// <summary>
        /// Create a StorageDefender resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StorageDefender(string name, StorageDefenderArgs args, CustomResourceOptions? options = null)
            : base("azure:securitycenter/storageDefender:StorageDefender", name, args ?? new StorageDefenderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StorageDefender(string name, Input<string> id, StorageDefenderState? state = null, CustomResourceOptions? options = null)
            : base("azure:securitycenter/storageDefender:StorageDefender", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StorageDefender resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StorageDefender Get(string name, Input<string> id, StorageDefenderState? state = null, CustomResourceOptions? options = null)
        {
            return new StorageDefender(name, id, state, options);
        }
    }

    public sealed class StorageDefenderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The max GB to be scanned per Month. Must be `-1` or above `0`. Omit this property or set to `-1` if no capping is needed. Defaults to `-1`.
        /// </summary>
        [Input("malwareScanningOnUploadCapGbPerMonth")]
        public Input<int>? MalwareScanningOnUploadCapGbPerMonth { get; set; }

        /// <summary>
        /// Whether On Upload malware scanning should be enabled. Defaults to `false`.
        /// </summary>
        [Input("malwareScanningOnUploadEnabled")]
        public Input<bool>? MalwareScanningOnUploadEnabled { get; set; }

        /// <summary>
        /// Whether the settings defined for this storage account should override the settings defined for the subscription. Defaults to `false`.
        /// </summary>
        [Input("overrideSubscriptionSettingsEnabled")]
        public Input<bool>? OverrideSubscriptionSettingsEnabled { get; set; }

        /// <summary>
        /// Whether Sensitive Data Discovery should be enabled. Defaults to `false`.
        /// </summary>
        [Input("sensitiveDataDiscoveryEnabled")]
        public Input<bool>? SensitiveDataDiscoveryEnabled { get; set; }

        /// <summary>
        /// The ID of the storage account the defender applied to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageAccountId", required: true)]
        public Input<string> StorageAccountId { get; set; } = null!;

        public StorageDefenderArgs()
        {
        }
        public static new StorageDefenderArgs Empty => new StorageDefenderArgs();
    }

    public sealed class StorageDefenderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The max GB to be scanned per Month. Must be `-1` or above `0`. Omit this property or set to `-1` if no capping is needed. Defaults to `-1`.
        /// </summary>
        [Input("malwareScanningOnUploadCapGbPerMonth")]
        public Input<int>? MalwareScanningOnUploadCapGbPerMonth { get; set; }

        /// <summary>
        /// Whether On Upload malware scanning should be enabled. Defaults to `false`.
        /// </summary>
        [Input("malwareScanningOnUploadEnabled")]
        public Input<bool>? MalwareScanningOnUploadEnabled { get; set; }

        /// <summary>
        /// Whether the settings defined for this storage account should override the settings defined for the subscription. Defaults to `false`.
        /// </summary>
        [Input("overrideSubscriptionSettingsEnabled")]
        public Input<bool>? OverrideSubscriptionSettingsEnabled { get; set; }

        /// <summary>
        /// Whether Sensitive Data Discovery should be enabled. Defaults to `false`.
        /// </summary>
        [Input("sensitiveDataDiscoveryEnabled")]
        public Input<bool>? SensitiveDataDiscoveryEnabled { get; set; }

        /// <summary>
        /// The ID of the storage account the defender applied to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageAccountId")]
        public Input<string>? StorageAccountId { get; set; }

        public StorageDefenderState()
        {
        }
        public static new StorageDefenderState Empty => new StorageDefenderState();
    }
}
