// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.SecurityCenter
{
    /// <summary>
    /// Manages Security Center Automation and Continuous Export. This resource supports three types of destination in the `action`, Logic Apps, Log Analytics and Event Hubs
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleEventHubNamespace = new Azure.EventHub.EventHubNamespace("example", new()
    ///     {
    ///         Name = "example-namespace",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         Sku = "Standard",
    ///         Capacity = 2,
    ///     });
    /// 
    ///     var exampleEventHub = new Azure.EventHub.EventHub("example", new()
    ///     {
    ///         Name = "acceptanceTestEventHub",
    ///         NamespaceName = exampleEventHubNamespace.Name,
    ///         ResourceGroupName = example.Name,
    ///         PartitionCount = 2,
    ///         MessageRetention = 2,
    ///     });
    /// 
    ///     var exampleAuthorizationRule = new Azure.EventHub.AuthorizationRule("example", new()
    ///     {
    ///         Name = "example-rule",
    ///         NamespaceName = exampleEventHubNamespace.Name,
    ///         EventhubName = exampleEventHub.Name,
    ///         ResourceGroupName = example.Name,
    ///         Listen = true,
    ///         Send = false,
    ///         Manage = false,
    ///     });
    /// 
    ///     var exampleAutomation = new Azure.SecurityCenter.Automation("example", new()
    ///     {
    ///         Name = "example-automation",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         Actions = new[]
    ///         {
    ///             new Azure.SecurityCenter.Inputs.AutomationActionArgs
    ///             {
    ///                 Type = "eventhub",
    ///                 ResourceId = exampleEventHub.Id,
    ///                 ConnectionString = exampleAuthorizationRule.PrimaryConnectionString,
    ///             },
    ///         },
    ///         Sources = new[]
    ///         {
    ///             new Azure.SecurityCenter.Inputs.AutomationSourceArgs
    ///             {
    ///                 EventSource = "Alerts",
    ///                 RuleSets = new[]
    ///                 {
    ///                     new Azure.SecurityCenter.Inputs.AutomationSourceRuleSetArgs
    ///                     {
    ///                         Rules = new[]
    ///                         {
    ///                             new Azure.SecurityCenter.Inputs.AutomationSourceRuleSetRuleArgs
    ///                             {
    ///                                 PropertyPath = "properties.metadata.severity",
    ///                                 Operator = "Equals",
    ///                                 ExpectedValue = "High",
    ///                                 PropertyType = "String",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Scopes = new[]
    ///         {
    ///             $"/subscriptions/{current.Apply(getClientConfigResult =&gt; getClientConfigResult.SubscriptionId)}",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.Security`: 2019-01-01-preview
    /// 
    /// ## Import
    /// 
    /// Security Center Automations can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:securitycenter/automation:Automation example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Security/automations/automation1
    /// ```
    /// </summary>
    [AzureResourceType("azure:securitycenter/automation:Automation")]
    public partial class Automation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// One or more `action` blocks as defined below. An `action` tells this automation where the data is to be sent to upon being evaluated by the rules in the `source`.
        /// </summary>
        [Output("actions")]
        public Output<ImmutableArray<Outputs.AutomationAction>> Actions { get; private set; } = null!;

        /// <summary>
        /// Specifies the description for the Security Center Automation.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Boolean to enable or disable this Security Center Automation. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Security Center Automation should exist. Changing this forces a new Security Center Automation to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Security Center Automation. Changing this forces a new Security Center Automation to be created.
        /// 
        /// &gt; **Note:** For the automation to appear in Azure Portal correctly under Microsoft Defender for Cloud &gt; Environment Settings &gt; Account &gt; Continuous Export, either `ExportToWorkspace` or `ExportToEventHub` must be used.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Security Center Automation should exist. Changing this forces a new Security Center Automation to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A list of scopes on which the automation logic is applied, at least one is required. Supported scopes are a subscription (in this format `/subscriptions/00000000-0000-0000-0000-000000000000`) or a resource group under that subscription (in the format `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example`). The automation will only apply on defined scopes.
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// One or more `source` blocks as defined below. A `source` defines what data types will be processed and a set of rules to filter that data.
        /// </summary>
        [Output("sources")]
        public Output<ImmutableArray<Outputs.AutomationSource>> Sources { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Automation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Automation(string name, AutomationArgs args, CustomResourceOptions? options = null)
            : base("azure:securitycenter/automation:Automation", name, args ?? new AutomationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Automation(string name, Input<string> id, AutomationState? state = null, CustomResourceOptions? options = null)
            : base("azure:securitycenter/automation:Automation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Automation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Automation Get(string name, Input<string> id, AutomationState? state = null, CustomResourceOptions? options = null)
        {
            return new Automation(name, id, state, options);
        }
    }

    public sealed class AutomationArgs : global::Pulumi.ResourceArgs
    {
        [Input("actions", required: true)]
        private InputList<Inputs.AutomationActionArgs>? _actions;

        /// <summary>
        /// One or more `action` blocks as defined below. An `action` tells this automation where the data is to be sent to upon being evaluated by the rules in the `source`.
        /// </summary>
        public InputList<Inputs.AutomationActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.AutomationActionArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// Specifies the description for the Security Center Automation.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Boolean to enable or disable this Security Center Automation. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The Azure Region where the Security Center Automation should exist. Changing this forces a new Security Center Automation to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Security Center Automation. Changing this forces a new Security Center Automation to be created.
        /// 
        /// &gt; **Note:** For the automation to appear in Azure Portal correctly under Microsoft Defender for Cloud &gt; Environment Settings &gt; Account &gt; Continuous Export, either `ExportToWorkspace` or `ExportToEventHub` must be used.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Security Center Automation should exist. Changing this forces a new Security Center Automation to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("scopes", required: true)]
        private InputList<string>? _scopes;

        /// <summary>
        /// A list of scopes on which the automation logic is applied, at least one is required. Supported scopes are a subscription (in this format `/subscriptions/00000000-0000-0000-0000-000000000000`) or a resource group under that subscription (in the format `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example`). The automation will only apply on defined scopes.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("sources", required: true)]
        private InputList<Inputs.AutomationSourceArgs>? _sources;

        /// <summary>
        /// One or more `source` blocks as defined below. A `source` defines what data types will be processed and a set of rules to filter that data.
        /// </summary>
        public InputList<Inputs.AutomationSourceArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.AutomationSourceArgs>());
            set => _sources = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AutomationArgs()
        {
        }
        public static new AutomationArgs Empty => new AutomationArgs();
    }

    public sealed class AutomationState : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.AutomationActionGetArgs>? _actions;

        /// <summary>
        /// One or more `action` blocks as defined below. An `action` tells this automation where the data is to be sent to upon being evaluated by the rules in the `source`.
        /// </summary>
        public InputList<Inputs.AutomationActionGetArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.AutomationActionGetArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// Specifies the description for the Security Center Automation.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Boolean to enable or disable this Security Center Automation. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The Azure Region where the Security Center Automation should exist. Changing this forces a new Security Center Automation to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Security Center Automation. Changing this forces a new Security Center Automation to be created.
        /// 
        /// &gt; **Note:** For the automation to appear in Azure Portal correctly under Microsoft Defender for Cloud &gt; Environment Settings &gt; Account &gt; Continuous Export, either `ExportToWorkspace` or `ExportToEventHub` must be used.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Security Center Automation should exist. Changing this forces a new Security Center Automation to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// A list of scopes on which the automation logic is applied, at least one is required. Supported scopes are a subscription (in this format `/subscriptions/00000000-0000-0000-0000-000000000000`) or a resource group under that subscription (in the format `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example`). The automation will only apply on defined scopes.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("sources")]
        private InputList<Inputs.AutomationSourceGetArgs>? _sources;

        /// <summary>
        /// One or more `source` blocks as defined below. A `source` defines what data types will be processed and a set of rules to filter that data.
        /// </summary>
        public InputList<Inputs.AutomationSourceGetArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.AutomationSourceGetArgs>());
            set => _sources = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AutomationState()
        {
        }
        public static new AutomationState Empty => new AutomationState();
    }
}
