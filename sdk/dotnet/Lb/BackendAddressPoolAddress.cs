// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Lb
{
    /// <summary>
    /// Manages a Backend Address within a Backend Address Pool.
    /// 
    /// &gt; **Note:** Backend Addresses can only be added to a `Standard` SKU Load Balancer.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleVirtualNetwork = Azure.Network.GetVirtualNetwork.Invoke(new()
    ///     {
    ///         Name = "example-network",
    ///         ResourceGroupName = "example-resources",
    ///     });
    /// 
    ///     var exampleLB = Azure.Lb.GetLB.Invoke(new()
    ///     {
    ///         Name = "example-lb",
    ///         ResourceGroupName = "example-resources",
    ///     });
    /// 
    ///     var exampleBackendAddressPool = Azure.Lb.GetBackendAddressPool.Invoke(new()
    ///     {
    ///         Name = "first",
    ///         LoadbalancerId = exampleLB.Apply(getLBResult =&gt; getLBResult.Id),
    ///     });
    /// 
    ///     var exampleBackendAddressPoolAddress = new Azure.Lb.BackendAddressPoolAddress("exampleBackendAddressPoolAddress", new()
    ///     {
    ///         BackendAddressPoolId = exampleBackendAddressPool.Apply(getBackendAddressPoolResult =&gt; getBackendAddressPoolResult.Id),
    ///         VirtualNetworkId = exampleVirtualNetwork.Apply(getVirtualNetworkResult =&gt; getVirtualNetworkResult.Id),
    ///         IpAddress = "10.0.0.1",
    ///     });
    /// 
    ///     var backend_pool_cr = Azure.Lb.GetBackendAddressPool.Invoke(new()
    ///     {
    ///         Name = "globalLBBackendPool",
    ///         LoadbalancerId = exampleLB.Apply(getLBResult =&gt; getLBResult.Id),
    ///     });
    /// 
    ///     var example_1 = new Azure.Lb.BackendAddressPoolAddress("example-1", new()
    ///     {
    ///         BackendAddressPoolId = backend_pool_cr.Apply(getBackendAddressPoolResult =&gt; getBackendAddressPoolResult).Apply(backend_pool_cr =&gt; backend_pool_cr.Apply(getBackendAddressPoolResult =&gt; getBackendAddressPoolResult.Id)),
    ///         BackendAddressIpConfigurationId = azurerm_lb.Backend_lb_R1.Frontend_ip_configuration[0].Id,
    ///     });
    /// 
    ///     var example_2 = new Azure.Lb.BackendAddressPoolAddress("example-2", new()
    ///     {
    ///         BackendAddressPoolId = backend_pool_cr.Apply(getBackendAddressPoolResult =&gt; getBackendAddressPoolResult).Apply(backend_pool_cr =&gt; backend_pool_cr.Apply(getBackendAddressPoolResult =&gt; getBackendAddressPoolResult.Id)),
    ///         BackendAddressIpConfigurationId = azurerm_lb.Backend_lb_R2.Frontend_ip_configuration[0].Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Backend Address Pool Addresses can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/loadBalancer1/backendAddressPools/backendAddressPool1/addresses/address1
    /// ```
    /// </summary>
    [AzureResourceType("azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress")]
    public partial class BackendAddressPoolAddress : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ip config ID of the regional load balancer that's added to the global load balancer's backend address pool.
        /// </summary>
        [Output("backendAddressIpConfigurationId")]
        public Output<string?> BackendAddressIpConfigurationId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
        /// </summary>
        [Output("backendAddressPoolId")]
        public Output<string> BackendAddressPoolId { get; private set; } = null!;

        /// <summary>
        /// A list of `inbound_nat_rule_port_mapping` block as defined below.
        /// </summary>
        [Output("inboundNatRulePortMappings")]
        public Output<ImmutableArray<Outputs.BackendAddressPoolAddressInboundNatRulePortMapping>> InboundNatRulePortMappings { get; private set; } = null!;

        /// <summary>
        /// The Static IP Address which should be allocated to this Backend Address Pool.
        /// </summary>
        [Output("ipAddress")]
        public Output<string?> IpAddress { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Virtual Network within which the Backend Address Pool should exist.
        /// </summary>
        [Output("virtualNetworkId")]
        public Output<string?> VirtualNetworkId { get; private set; } = null!;


        /// <summary>
        /// Create a BackendAddressPoolAddress resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackendAddressPoolAddress(string name, BackendAddressPoolAddressArgs args, CustomResourceOptions? options = null)
            : base("azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress", name, args ?? new BackendAddressPoolAddressArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackendAddressPoolAddress(string name, Input<string> id, BackendAddressPoolAddressState? state = null, CustomResourceOptions? options = null)
            : base("azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackendAddressPoolAddress resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackendAddressPoolAddress Get(string name, Input<string> id, BackendAddressPoolAddressState? state = null, CustomResourceOptions? options = null)
        {
            return new BackendAddressPoolAddress(name, id, state, options);
        }
    }

    public sealed class BackendAddressPoolAddressArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ip config ID of the regional load balancer that's added to the global load balancer's backend address pool.
        /// </summary>
        [Input("backendAddressIpConfigurationId")]
        public Input<string>? BackendAddressIpConfigurationId { get; set; }

        /// <summary>
        /// The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
        /// </summary>
        [Input("backendAddressPoolId", required: true)]
        public Input<string> BackendAddressPoolId { get; set; } = null!;

        /// <summary>
        /// The Static IP Address which should be allocated to this Backend Address Pool.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Virtual Network within which the Backend Address Pool should exist.
        /// </summary>
        [Input("virtualNetworkId")]
        public Input<string>? VirtualNetworkId { get; set; }

        public BackendAddressPoolAddressArgs()
        {
        }
        public static new BackendAddressPoolAddressArgs Empty => new BackendAddressPoolAddressArgs();
    }

    public sealed class BackendAddressPoolAddressState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ip config ID of the regional load balancer that's added to the global load balancer's backend address pool.
        /// </summary>
        [Input("backendAddressIpConfigurationId")]
        public Input<string>? BackendAddressIpConfigurationId { get; set; }

        /// <summary>
        /// The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
        /// </summary>
        [Input("backendAddressPoolId")]
        public Input<string>? BackendAddressPoolId { get; set; }

        [Input("inboundNatRulePortMappings")]
        private InputList<Inputs.BackendAddressPoolAddressInboundNatRulePortMappingGetArgs>? _inboundNatRulePortMappings;

        /// <summary>
        /// A list of `inbound_nat_rule_port_mapping` block as defined below.
        /// </summary>
        public InputList<Inputs.BackendAddressPoolAddressInboundNatRulePortMappingGetArgs> InboundNatRulePortMappings
        {
            get => _inboundNatRulePortMappings ?? (_inboundNatRulePortMappings = new InputList<Inputs.BackendAddressPoolAddressInboundNatRulePortMappingGetArgs>());
            set => _inboundNatRulePortMappings = value;
        }

        /// <summary>
        /// The Static IP Address which should be allocated to this Backend Address Pool.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Virtual Network within which the Backend Address Pool should exist.
        /// </summary>
        [Input("virtualNetworkId")]
        public Input<string>? VirtualNetworkId { get; set; }

        public BackendAddressPoolAddressState()
        {
        }
        public static new BackendAddressPoolAddressState Empty => new BackendAddressPoolAddressState();
    }
}
