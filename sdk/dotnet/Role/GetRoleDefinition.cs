// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Role
{
    public static partial class Invokes
    {
        [Obsolete("Use GetRoleDefinition.InvokeAsync() instead")]
        public static Task<GetRoleDefinitionResult> GetRoleDefinition(GetRoleDefinitionArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRoleDefinitionResult>("azure:role/getRoleDefinition:getRoleDefinition", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetRoleDefinition
    {
        public static Task<GetRoleDefinitionResult> InvokeAsync(GetRoleDefinitionArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRoleDefinitionResult>("azure:role/getRoleDefinition:getRoleDefinition", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetRoleDefinitionArgs : Pulumi.InvokeArgs
    {
        [Input("name")]
        public string? Name { get; set; }

        [Input("roleDefinitionId")]
        public string? RoleDefinitionId { get; set; }

        [Input("scope")]
        public string? Scope { get; set; }

        public GetRoleDefinitionArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetRoleDefinitionResult
    {
        public readonly ImmutableArray<string> AssignableScopes;
        public readonly string Description;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetRoleDefinitionPermissionsResult> Permissions;
        public readonly string RoleDefinitionId;
        public readonly string? Scope;
        public readonly string Type;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetRoleDefinitionResult(
            ImmutableArray<string> assignableScopes,
            string description,
            string name,
            ImmutableArray<Outputs.GetRoleDefinitionPermissionsResult> permissions,
            string roleDefinitionId,
            string? scope,
            string type,
            string id)
        {
            AssignableScopes = assignableScopes;
            Description = description;
            Name = name;
            Permissions = permissions;
            RoleDefinitionId = roleDefinitionId;
            Scope = scope;
            Type = type;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetRoleDefinitionPermissionsResult
    {
        public readonly ImmutableArray<string> Actions;
        public readonly ImmutableArray<string> DataActions;
        public readonly ImmutableArray<string> NotActions;
        public readonly ImmutableArray<string> NotDataActions;

        [OutputConstructor]
        private GetRoleDefinitionPermissionsResult(
            ImmutableArray<string> actions,
            ImmutableArray<string> dataActions,
            ImmutableArray<string> notActions,
            ImmutableArray<string> notDataActions)
        {
            Actions = actions;
            DataActions = dataActions;
            NotActions = notActions;
            NotDataActions = notDataActions;
        }
    }
    }
}
