// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.PostgreSql
{
    /// <summary>
    /// Allows you to create a Virtual Endpoint associated with a Postgres Flexible Replica.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "East US",
    ///     });
    /// 
    ///     var exampleFlexibleServer = new Azure.PostgreSql.FlexibleServer("example", new()
    ///     {
    ///         Name = "example",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         Version = "16",
    ///         PublicNetworkAccessEnabled = false,
    ///         AdministratorLogin = "psqladmin",
    ///         AdministratorPassword = "H@Sh1CoR3!",
    ///         Zone = "1",
    ///         StorageMb = 32768,
    ///         StorageTier = "P30",
    ///         SkuName = "GP_Standard_D2ads_v5",
    ///     });
    /// 
    ///     var exampleReplica = new Azure.PostgreSql.FlexibleServer("example_replica", new()
    ///     {
    ///         Name = "example-replica",
    ///         ResourceGroupName = exampleFlexibleServer.ResourceGroupName,
    ///         Location = exampleFlexibleServer.Location,
    ///         CreateMode = "Replica",
    ///         SourceServerId = exampleFlexibleServer.Id,
    ///         Version = "16",
    ///         PublicNetworkAccessEnabled = false,
    ///         Zone = "1",
    ///         StorageMb = 32768,
    ///         StorageTier = "P30",
    ///         SkuName = "GP_Standard_D2ads_v5",
    ///     });
    /// 
    ///     var exampleFlexibleServerVirtualEndpoint = new Azure.PostgreSql.FlexibleServerVirtualEndpoint("example", new()
    ///     {
    ///         Name = "example-endpoint-1",
    ///         SourceServerId = exampleFlexibleServer.Id,
    ///         ReplicaServerId = exampleReplica.Id,
    ///         Type = "ReadWrite",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &gt; **Note:** If creating multiple replicas, an error can occur if virtual endpoints are created before all replicas have been completed. To avoid this error, use a `depends_on` property on `azure.postgresql.FlexibleServerVirtualEndpoint` that references all Postgres Flexible Server Replicas.
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.DBforPostgreSQL`: 2024-08-01
    /// 
    /// ## Import
    /// 
    /// A PostgreSQL Flexible Virtual Endpoint can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:postgresql/flexibleServerVirtualEndpoint:FlexibleServerVirtualEndpoint example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DBforPostgreSQL/flexibleServers/sourceServerName/virtualEndpoints/endpointName|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DBforPostgreSQL/flexibleServers/replicaServerName/virtualEndpoints/endpointName"
    /// ```
    /// </summary>
    [AzureResourceType("azure:postgresql/flexibleServerVirtualEndpoint:FlexibleServerVirtualEndpoint")]
    public partial class FlexibleServerVirtualEndpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Virtual Endpoint
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
        /// 
        /// &gt; **Note:** If a fail-over has occurred, you will be unable to update `replica_server_id`. You can remove the resource from state and reimport it back in with `source_server_id` and `replica_server_id` flipped and then update `replica_server_id`.
        /// </summary>
        [Output("replicaServerId")]
        public Output<string> ReplicaServerId { get; private set; } = null!;

        /// <summary>
        /// The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
        /// </summary>
        [Output("sourceServerId")]
        public Output<string> SourceServerId { get; private set; } = null!;

        /// <summary>
        /// The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a FlexibleServerVirtualEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FlexibleServerVirtualEndpoint(string name, FlexibleServerVirtualEndpointArgs args, CustomResourceOptions? options = null)
            : base("azure:postgresql/flexibleServerVirtualEndpoint:FlexibleServerVirtualEndpoint", name, args ?? new FlexibleServerVirtualEndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FlexibleServerVirtualEndpoint(string name, Input<string> id, FlexibleServerVirtualEndpointState? state = null, CustomResourceOptions? options = null)
            : base("azure:postgresql/flexibleServerVirtualEndpoint:FlexibleServerVirtualEndpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FlexibleServerVirtualEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FlexibleServerVirtualEndpoint Get(string name, Input<string> id, FlexibleServerVirtualEndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new FlexibleServerVirtualEndpoint(name, id, state, options);
        }
    }

    public sealed class FlexibleServerVirtualEndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Virtual Endpoint
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
        /// 
        /// &gt; **Note:** If a fail-over has occurred, you will be unable to update `replica_server_id`. You can remove the resource from state and reimport it back in with `source_server_id` and `replica_server_id` flipped and then update `replica_server_id`.
        /// </summary>
        [Input("replicaServerId", required: true)]
        public Input<string> ReplicaServerId { get; set; } = null!;

        /// <summary>
        /// The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
        /// </summary>
        [Input("sourceServerId", required: true)]
        public Input<string> SourceServerId { get; set; } = null!;

        /// <summary>
        /// The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public FlexibleServerVirtualEndpointArgs()
        {
        }
        public static new FlexibleServerVirtualEndpointArgs Empty => new FlexibleServerVirtualEndpointArgs();
    }

    public sealed class FlexibleServerVirtualEndpointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Virtual Endpoint
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Resource ID of the *Replica* Postgres Flexible Server this should be associated with
        /// 
        /// &gt; **Note:** If a fail-over has occurred, you will be unable to update `replica_server_id`. You can remove the resource from state and reimport it back in with `source_server_id` and `replica_server_id` flipped and then update `replica_server_id`.
        /// </summary>
        [Input("replicaServerId")]
        public Input<string>? ReplicaServerId { get; set; }

        /// <summary>
        /// The Resource ID of the *Source* Postgres Flexible Server this should be associated with.
        /// </summary>
        [Input("sourceServerId")]
        public Input<string>? SourceServerId { get; set; }

        /// <summary>
        /// The type of Virtual Endpoint. Currently only `ReadWrite` is supported.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public FlexibleServerVirtualEndpointState()
        {
        }
        public static new FlexibleServerVirtualEndpointState Empty => new FlexibleServerVirtualEndpointState();
    }
}
