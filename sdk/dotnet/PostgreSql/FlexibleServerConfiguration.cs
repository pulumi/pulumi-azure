// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.PostgreSql
{
    /// <summary>
    /// Sets a PostgreSQL Configuration value on a Azure PostgreSQL Flexible Server.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleFlexibleServer = new Azure.PostgreSql.FlexibleServer("exampleFlexibleServer", new Azure.PostgreSql.FlexibleServerArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             Version = "12",
    ///             AdministratorLogin = "psqladminun",
    ///             AdministratorPassword = "H@Sh1CoR3!",
    ///             StorageMb = 32768,
    ///             SkuName = "GP_Standard_D4s_v3",
    ///         });
    ///         var exampleFlexibleServerConfiguration = new Azure.PostgreSql.FlexibleServerConfiguration("exampleFlexibleServerConfiguration", new Azure.PostgreSql.FlexibleServerConfigurationArgs
    ///         {
    ///             ServerId = exampleFlexibleServer.Id,
    ///             Value = "on",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// PostgreSQL Configurations can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:postgresql/flexibleServerConfiguration:FlexibleServerConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/server1/configurations/configuration1
    /// ```
    /// </summary>
    [AzureResourceType("azure:postgresql/flexibleServerConfiguration:FlexibleServerConfiguration")]
    public partial class FlexibleServerConfiguration : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the name of the PostgreSQL Configuration, which needs [to be a valid PostgreSQL configuration name](https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIER). Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the PostgreSQL Flexible Server where we want to change configuration. Changing this forces a new PostgreSQL Flexible Server Configuration resource.
        /// </summary>
        [Output("serverId")]
        public Output<string> ServerId { get; private set; } = null!;

        /// <summary>
        /// Specifies the value of the PostgreSQL Configuration. See the PostgreSQL documentation for valid values.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;


        /// <summary>
        /// Create a FlexibleServerConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FlexibleServerConfiguration(string name, FlexibleServerConfigurationArgs args, CustomResourceOptions? options = null)
            : base("azure:postgresql/flexibleServerConfiguration:FlexibleServerConfiguration", name, args ?? new FlexibleServerConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FlexibleServerConfiguration(string name, Input<string> id, FlexibleServerConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("azure:postgresql/flexibleServerConfiguration:FlexibleServerConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FlexibleServerConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FlexibleServerConfiguration Get(string name, Input<string> id, FlexibleServerConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new FlexibleServerConfiguration(name, id, state, options);
        }
    }

    public sealed class FlexibleServerConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the PostgreSQL Configuration, which needs [to be a valid PostgreSQL configuration name](https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIER). Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the PostgreSQL Flexible Server where we want to change configuration. Changing this forces a new PostgreSQL Flexible Server Configuration resource.
        /// </summary>
        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        /// <summary>
        /// Specifies the value of the PostgreSQL Configuration. See the PostgreSQL documentation for valid values.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public FlexibleServerConfigurationArgs()
        {
        }
    }

    public sealed class FlexibleServerConfigurationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the PostgreSQL Configuration, which needs [to be a valid PostgreSQL configuration name](https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIER). Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the PostgreSQL Flexible Server where we want to change configuration. Changing this forces a new PostgreSQL Flexible Server Configuration resource.
        /// </summary>
        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        /// <summary>
        /// Specifies the value of the PostgreSQL Configuration. See the PostgreSQL documentation for valid values.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public FlexibleServerConfigurationState()
        {
        }
    }
}
