// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Mobile
{
    /// <summary>
    /// Manages a Mobile Network Packet Core Control Plane.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleNetwork = new Azure.Mobile.Network("exampleNetwork", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         MobileCountryCode = "001",
    ///         MobileNetworkCode = "01",
    ///     });
    /// 
    ///     var exampleNetworkSite = new Azure.Mobile.NetworkSite("exampleNetworkSite", new()
    ///     {
    ///         MobileNetworkId = azurerm_mobile_network.Test.Id,
    ///         Location = exampleResourceGroup.Location,
    ///     });
    /// 
    ///     var exampleDevice = new Azure.DataboxEdge.Device("exampleDevice", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         SkuName = "EdgeP_Base-Standard",
    ///     });
    /// 
    ///     var exampleNetworkPacketCoreControlPlane = new Azure.Mobile.NetworkPacketCoreControlPlane("exampleNetworkPacketCoreControlPlane", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Sku = "G0",
    ///         ControlPlaneAccessName = "default-interface",
    ///         ControlPlaneAccessIpv4Address = "192.168.1.199",
    ///         ControlPlaneAccessIpv4Gateway = "192.168.1.1",
    ///         ControlPlaneAccessIpv4Subnet = "192.168.1.0/25",
    ///         SiteIds = new[]
    ///         {
    ///             exampleNetworkSite.Id,
    ///         },
    ///         LocalDiagnosticsAccess = new Azure.Mobile.Inputs.NetworkPacketCoreControlPlaneLocalDiagnosticsAccessArgs
    ///         {
    ///             AuthenticationType = "AAD",
    ///         },
    ///         Platform = new Azure.Mobile.Inputs.NetworkPacketCoreControlPlanePlatformArgs
    ///         {
    ///             Type = "AKS-HCI",
    ///             EdgeDeviceId = exampleDevice.Id,
    ///         },
    ///         InteroperabilitySettingsJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["key"] = "value",
    ///         }),
    ///         Tags = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Mobile Network Packet Core Control Plane can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mobile/networkPacketCoreControlPlane:NetworkPacketCoreControlPlane example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/packetCoreControlPlane1
    /// ```
    /// </summary>
    [AzureResourceType("azure:mobile/networkPacketCoreControlPlane:NetworkPacketCoreControlPlane")]
    public partial class NetworkPacketCoreControlPlane : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The IPv4 address for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Output("controlPlaneAccessIpv4Address")]
        public Output<string?> ControlPlaneAccessIpv4Address { get; private set; } = null!;

        /// <summary>
        /// The default IPv4 gateway for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Output("controlPlaneAccessIpv4Gateway")]
        public Output<string?> ControlPlaneAccessIpv4Gateway { get; private set; } = null!;

        /// <summary>
        /// The IPv4 subnet for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Output("controlPlaneAccessIpv4Subnet")]
        public Output<string?> ControlPlaneAccessIpv4Subnet { get; private set; } = null!;

        /// <summary>
        /// Specifies the logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Output("controlPlaneAccessName")]
        public Output<string?> ControlPlaneAccessName { get; private set; } = null!;

        /// <summary>
        /// The core network technology generation. Possible values are `5GC` and `EPC`.
        /// </summary>
        [Output("coreNetworkTechnology")]
        public Output<string?> CoreNetworkTechnology { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.NetworkPacketCoreControlPlaneIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Settings in JSON format to allow interoperability with third party components e.g. RANs and UEs.
        /// </summary>
        [Output("interoperabilitySettingsJson")]
        public Output<string?> InteroperabilitySettingsJson { get; private set; } = null!;

        /// <summary>
        /// One or more `local_diagnostics_access` blocks as defined below. Specifies the Kubernetes ingress configuration that controls access to the packet core diagnostics through local APIs.
        /// </summary>
        [Output("localDiagnosticsAccess")]
        public Output<Outputs.NetworkPacketCoreControlPlaneLocalDiagnosticsAccess> LocalDiagnosticsAccess { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure Region where the Mobile Network Packet Core Control Plane should exist. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies The name of the Mobile Network Packet Core Control Plane. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `platform` block as defined below.
        /// </summary>
        [Output("platform")]
        public Output<Outputs.NetworkPacketCoreControlPlanePlatform?> Platform { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where the Mobile Network Packet Core Control Plane should exist. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A list of Mobile Network Site IDs in which this packet core control plane should be deployed. The Sites must be in the same location as the packet core control plane.
        /// </summary>
        [Output("siteIds")]
        public Output<ImmutableArray<string>> SiteIds { get; private set; } = null!;

        /// <summary>
        /// The SKU defining the throughput and SIM allowances for this packet core control plane deployment. Possible values are `G0`, `G1`, `G2`, `G3`, `G4`, `G5` and `G10`.
        /// </summary>
        [Output("sku")]
        public Output<string> Sku { get; private set; } = null!;

        /// <summary>
        /// Specifies the version of the packet core software that is deployed.
        /// </summary>
        [Output("softwareVersion")]
        public Output<string?> SoftwareVersion { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Mobile Network Packet Core Control Plane.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the MTU in bytes that can be sent to the user equipment. The same MTU is set on the user plane data links for all data networks. The MTU set on the user plane access link will be 60 bytes greater than this value to allow for GTP encapsulation.
        /// </summary>
        [Output("userEquipmentMtuInBytes")]
        public Output<int?> UserEquipmentMtuInBytes { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkPacketCoreControlPlane resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkPacketCoreControlPlane(string name, NetworkPacketCoreControlPlaneArgs args, CustomResourceOptions? options = null)
            : base("azure:mobile/networkPacketCoreControlPlane:NetworkPacketCoreControlPlane", name, args ?? new NetworkPacketCoreControlPlaneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkPacketCoreControlPlane(string name, Input<string> id, NetworkPacketCoreControlPlaneState? state = null, CustomResourceOptions? options = null)
            : base("azure:mobile/networkPacketCoreControlPlane:NetworkPacketCoreControlPlane", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkPacketCoreControlPlane resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkPacketCoreControlPlane Get(string name, Input<string> id, NetworkPacketCoreControlPlaneState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkPacketCoreControlPlane(name, id, state, options);
        }
    }

    public sealed class NetworkPacketCoreControlPlaneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IPv4 address for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Input("controlPlaneAccessIpv4Address")]
        public Input<string>? ControlPlaneAccessIpv4Address { get; set; }

        /// <summary>
        /// The default IPv4 gateway for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Input("controlPlaneAccessIpv4Gateway")]
        public Input<string>? ControlPlaneAccessIpv4Gateway { get; set; }

        /// <summary>
        /// The IPv4 subnet for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Input("controlPlaneAccessIpv4Subnet")]
        public Input<string>? ControlPlaneAccessIpv4Subnet { get; set; }

        /// <summary>
        /// Specifies the logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Input("controlPlaneAccessName")]
        public Input<string>? ControlPlaneAccessName { get; set; }

        /// <summary>
        /// The core network technology generation. Possible values are `5GC` and `EPC`.
        /// </summary>
        [Input("coreNetworkTechnology")]
        public Input<string>? CoreNetworkTechnology { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.NetworkPacketCoreControlPlaneIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Settings in JSON format to allow interoperability with third party components e.g. RANs and UEs.
        /// </summary>
        [Input("interoperabilitySettingsJson")]
        public Input<string>? InteroperabilitySettingsJson { get; set; }

        /// <summary>
        /// One or more `local_diagnostics_access` blocks as defined below. Specifies the Kubernetes ingress configuration that controls access to the packet core diagnostics through local APIs.
        /// </summary>
        [Input("localDiagnosticsAccess", required: true)]
        public Input<Inputs.NetworkPacketCoreControlPlaneLocalDiagnosticsAccessArgs> LocalDiagnosticsAccess { get; set; } = null!;

        /// <summary>
        /// Specifies the Azure Region where the Mobile Network Packet Core Control Plane should exist. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies The name of the Mobile Network Packet Core Control Plane. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `platform` block as defined below.
        /// </summary>
        [Input("platform")]
        public Input<Inputs.NetworkPacketCoreControlPlanePlatformArgs>? Platform { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the Mobile Network Packet Core Control Plane should exist. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("siteIds", required: true)]
        private InputList<string>? _siteIds;

        /// <summary>
        /// A list of Mobile Network Site IDs in which this packet core control plane should be deployed. The Sites must be in the same location as the packet core control plane.
        /// </summary>
        public InputList<string> SiteIds
        {
            get => _siteIds ?? (_siteIds = new InputList<string>());
            set => _siteIds = value;
        }

        /// <summary>
        /// The SKU defining the throughput and SIM allowances for this packet core control plane deployment. Possible values are `G0`, `G1`, `G2`, `G3`, `G4`, `G5` and `G10`.
        /// </summary>
        [Input("sku", required: true)]
        public Input<string> Sku { get; set; } = null!;

        /// <summary>
        /// Specifies the version of the packet core software that is deployed.
        /// </summary>
        [Input("softwareVersion")]
        public Input<string>? SoftwareVersion { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Mobile Network Packet Core Control Plane.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the MTU in bytes that can be sent to the user equipment. The same MTU is set on the user plane data links for all data networks. The MTU set on the user plane access link will be 60 bytes greater than this value to allow for GTP encapsulation.
        /// </summary>
        [Input("userEquipmentMtuInBytes")]
        public Input<int>? UserEquipmentMtuInBytes { get; set; }

        public NetworkPacketCoreControlPlaneArgs()
        {
        }
        public static new NetworkPacketCoreControlPlaneArgs Empty => new NetworkPacketCoreControlPlaneArgs();
    }

    public sealed class NetworkPacketCoreControlPlaneState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IPv4 address for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Input("controlPlaneAccessIpv4Address")]
        public Input<string>? ControlPlaneAccessIpv4Address { get; set; }

        /// <summary>
        /// The default IPv4 gateway for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Input("controlPlaneAccessIpv4Gateway")]
        public Input<string>? ControlPlaneAccessIpv4Gateway { get; set; }

        /// <summary>
        /// The IPv4 subnet for the control plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Input("controlPlaneAccessIpv4Subnet")]
        public Input<string>? ControlPlaneAccessIpv4Subnet { get; set; }

        /// <summary>
        /// Specifies the logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Input("controlPlaneAccessName")]
        public Input<string>? ControlPlaneAccessName { get; set; }

        /// <summary>
        /// The core network technology generation. Possible values are `5GC` and `EPC`.
        /// </summary>
        [Input("coreNetworkTechnology")]
        public Input<string>? CoreNetworkTechnology { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.NetworkPacketCoreControlPlaneIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Settings in JSON format to allow interoperability with third party components e.g. RANs and UEs.
        /// </summary>
        [Input("interoperabilitySettingsJson")]
        public Input<string>? InteroperabilitySettingsJson { get; set; }

        /// <summary>
        /// One or more `local_diagnostics_access` blocks as defined below. Specifies the Kubernetes ingress configuration that controls access to the packet core diagnostics through local APIs.
        /// </summary>
        [Input("localDiagnosticsAccess")]
        public Input<Inputs.NetworkPacketCoreControlPlaneLocalDiagnosticsAccessGetArgs>? LocalDiagnosticsAccess { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the Mobile Network Packet Core Control Plane should exist. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies The name of the Mobile Network Packet Core Control Plane. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `platform` block as defined below.
        /// </summary>
        [Input("platform")]
        public Input<Inputs.NetworkPacketCoreControlPlanePlatformGetArgs>? Platform { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the Mobile Network Packet Core Control Plane should exist. Changing this forces a new Mobile Network Packet Core Control Plane to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("siteIds")]
        private InputList<string>? _siteIds;

        /// <summary>
        /// A list of Mobile Network Site IDs in which this packet core control plane should be deployed. The Sites must be in the same location as the packet core control plane.
        /// </summary>
        public InputList<string> SiteIds
        {
            get => _siteIds ?? (_siteIds = new InputList<string>());
            set => _siteIds = value;
        }

        /// <summary>
        /// The SKU defining the throughput and SIM allowances for this packet core control plane deployment. Possible values are `G0`, `G1`, `G2`, `G3`, `G4`, `G5` and `G10`.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        /// <summary>
        /// Specifies the version of the packet core software that is deployed.
        /// </summary>
        [Input("softwareVersion")]
        public Input<string>? SoftwareVersion { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Mobile Network Packet Core Control Plane.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the MTU in bytes that can be sent to the user equipment. The same MTU is set on the user plane data links for all data networks. The MTU set on the user plane access link will be 60 bytes greater than this value to allow for GTP encapsulation.
        /// </summary>
        [Input("userEquipmentMtuInBytes")]
        public Input<int>? UserEquipmentMtuInBytes { get; set; }

        public NetworkPacketCoreControlPlaneState()
        {
        }
        public static new NetworkPacketCoreControlPlaneState Empty => new NetworkPacketCoreControlPlaneState();
    }
}
