// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Mobile
{
    /// <summary>
    /// Manages a Mobile Network Service.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "east us",
    ///     });
    /// 
    ///     var exampleNetwork = new Azure.Mobile.Network("exampleNetwork", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         MobileCountryCode = "001",
    ///         MobileNetworkCode = "01",
    ///     });
    /// 
    ///     var exampleNetworkService = new Azure.Mobile.NetworkService("exampleNetworkService", new()
    ///     {
    ///         MobileNetworkId = exampleNetwork.Id,
    ///         Location = exampleResourceGroup.Location,
    ///         ServicePrecedence = 0,
    ///         PccRules = new[]
    ///         {
    ///             new Azure.Mobile.Inputs.NetworkServicePccRuleArgs
    ///             {
    ///                 Name = "default-rule",
    ///                 Precedence = 1,
    ///                 TrafficControlEnabled = true,
    ///                 QosPolicy = new Azure.Mobile.Inputs.NetworkServicePccRuleQosPolicyArgs
    ///                 {
    ///                     AllocationAndRetentionPriorityLevel = 9,
    ///                     QosIndicator = 9,
    ///                     PreemptionCapability = "NotPreempt",
    ///                     PreemptionVulnerability = "Preemptable",
    ///                     GuaranteedBitRate = new Azure.Mobile.Inputs.NetworkServicePccRuleQosPolicyGuaranteedBitRateArgs
    ///                     {
    ///                         Downlink = "100 Mbps",
    ///                         Uplink = "10 Mbps",
    ///                     },
    ///                     MaximumBitRate = new Azure.Mobile.Inputs.NetworkServicePccRuleQosPolicyMaximumBitRateArgs
    ///                     {
    ///                         Downlink = "1 Gbps",
    ///                         Uplink = "100 Mbps",
    ///                     },
    ///                 },
    ///                 ServiceDataFlowTemplates = new[]
    ///                 {
    ///                     new Azure.Mobile.Inputs.NetworkServicePccRuleServiceDataFlowTemplateArgs
    ///                     {
    ///                         Direction = "Uplink",
    ///                         Name = "IP-to-server",
    ///                         Ports = new[] {},
    ///                         Protocols = new[]
    ///                         {
    ///                             "ip",
    ///                         },
    ///                         RemoteIpLists = new[]
    ///                         {
    ///                             "10.3.4.0/24",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         ServiceQosPolicy = new Azure.Mobile.Inputs.NetworkServiceServiceQosPolicyArgs
    ///         {
    ///             AllocationAndRetentionPriorityLevel = 9,
    ///             QosIndicator = 9,
    ///             PreemptionCapability = "NotPreempt",
    ///             PreemptionVulnerability = "Preemptable",
    ///             MaximumBitRate = new Azure.Mobile.Inputs.NetworkServiceServiceQosPolicyMaximumBitRateArgs
    ///             {
    ///                 Downlink = "1 Gbps",
    ///                 Uplink = "100 Mbps",
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Mobile Network Service can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mobile/networkService:NetworkService example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/mobileNetworks/mobileNetwork1/services/service1
    /// ```
    /// </summary>
    [AzureResourceType("azure:mobile/networkService:NetworkService")]
    public partial class NetworkService : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the Azure Region where the Mobile Network Service should exist. Changing this forces a new Mobile Network Service to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
        /// </summary>
        [Output("mobileNetworkId")]
        public Output<string> MobileNetworkId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name which should be used for this Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `pcc_rule` block as defined below. The set of PCC Rules that make up this service.
        /// </summary>
        [Output("pccRules")]
        public Output<ImmutableArray<Outputs.NetworkServicePccRule>> PccRules { get; private set; } = null!;

        /// <summary>
        /// A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all services configured in the mobile network. Must be between `0` and `255`.
        /// </summary>
        [Output("servicePrecedence")]
        public Output<int> ServicePrecedence { get; private set; } = null!;

        /// <summary>
        /// A `service_qos_policy` block as defined below. The QoS policy to use for packets matching this service. This can be overridden for particular flows using the ruleQosPolicy field in a `pcc_rule`. If this field is not specified then the `sim_policy` of User Equipment (UE) will define the QoS settings.
        /// </summary>
        [Output("serviceQosPolicy")]
        public Output<Outputs.NetworkServiceServiceQosPolicy?> ServiceQosPolicy { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Mobile Network Service.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkService(string name, NetworkServiceArgs args, CustomResourceOptions? options = null)
            : base("azure:mobile/networkService:NetworkService", name, args ?? new NetworkServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkService(string name, Input<string> id, NetworkServiceState? state = null, CustomResourceOptions? options = null)
            : base("azure:mobile/networkService:NetworkService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkService Get(string name, Input<string> id, NetworkServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkService(name, id, state, options);
        }
    }

    public sealed class NetworkServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Azure Region where the Mobile Network Service should exist. Changing this forces a new Mobile Network Service to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the ID of the Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
        /// </summary>
        [Input("mobileNetworkId", required: true)]
        public Input<string> MobileNetworkId { get; set; } = null!;

        /// <summary>
        /// Specifies the name which should be used for this Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pccRules", required: true)]
        private InputList<Inputs.NetworkServicePccRuleArgs>? _pccRules;

        /// <summary>
        /// A `pcc_rule` block as defined below. The set of PCC Rules that make up this service.
        /// </summary>
        public InputList<Inputs.NetworkServicePccRuleArgs> PccRules
        {
            get => _pccRules ?? (_pccRules = new InputList<Inputs.NetworkServicePccRuleArgs>());
            set => _pccRules = value;
        }

        /// <summary>
        /// A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all services configured in the mobile network. Must be between `0` and `255`.
        /// </summary>
        [Input("servicePrecedence", required: true)]
        public Input<int> ServicePrecedence { get; set; } = null!;

        /// <summary>
        /// A `service_qos_policy` block as defined below. The QoS policy to use for packets matching this service. This can be overridden for particular flows using the ruleQosPolicy field in a `pcc_rule`. If this field is not specified then the `sim_policy` of User Equipment (UE) will define the QoS settings.
        /// </summary>
        [Input("serviceQosPolicy")]
        public Input<Inputs.NetworkServiceServiceQosPolicyArgs>? ServiceQosPolicy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Mobile Network Service.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public NetworkServiceArgs()
        {
        }
        public static new NetworkServiceArgs Empty => new NetworkServiceArgs();
    }

    public sealed class NetworkServiceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the Azure Region where the Mobile Network Service should exist. Changing this forces a new Mobile Network Service to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the ID of the Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
        /// </summary>
        [Input("mobileNetworkId")]
        public Input<string>? MobileNetworkId { get; set; }

        /// <summary>
        /// Specifies the name which should be used for this Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pccRules")]
        private InputList<Inputs.NetworkServicePccRuleGetArgs>? _pccRules;

        /// <summary>
        /// A `pcc_rule` block as defined below. The set of PCC Rules that make up this service.
        /// </summary>
        public InputList<Inputs.NetworkServicePccRuleGetArgs> PccRules
        {
            get => _pccRules ?? (_pccRules = new InputList<Inputs.NetworkServicePccRuleGetArgs>());
            set => _pccRules = value;
        }

        /// <summary>
        /// A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all services configured in the mobile network. Must be between `0` and `255`.
        /// </summary>
        [Input("servicePrecedence")]
        public Input<int>? ServicePrecedence { get; set; }

        /// <summary>
        /// A `service_qos_policy` block as defined below. The QoS policy to use for packets matching this service. This can be overridden for particular flows using the ruleQosPolicy field in a `pcc_rule`. If this field is not specified then the `sim_policy` of User Equipment (UE) will define the QoS settings.
        /// </summary>
        [Input("serviceQosPolicy")]
        public Input<Inputs.NetworkServiceServiceQosPolicyGetArgs>? ServiceQosPolicy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Mobile Network Service.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public NetworkServiceState()
        {
        }
        public static new NetworkServiceState Empty => new NetworkServiceState();
    }
}
