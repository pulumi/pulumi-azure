// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Mobile.Outputs
{

    [OutputType]
    public sealed class GetNetworkSimPolicySliceDataNetworkResult
    {
        /// <summary>
        /// Allowed session types in addition to the default session type.
        /// </summary>
        public readonly ImmutableArray<string> AdditionalAllowedSessionTypes;
        /// <summary>
        /// Default QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemption_capability` and `preemption_vulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `qos_indicator` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        /// </summary>
        public readonly int AllocationAndRetentionPriorityLevel;
        /// <summary>
        /// An array of IDs of services that can be used as part of this SIM policy.
        /// </summary>
        public readonly ImmutableArray<string> AllowedServicesIds;
        /// <summary>
        /// The ID of Mobile Network Data Network which these settings apply to.
        /// </summary>
        public readonly string DataNetworkId;
        /// <summary>
        /// The default PDU session type, which is used if the UE does not request a specific session type.
        /// </summary>
        public readonly string DefaultSessionType;
        /// <summary>
        /// The maximum number of downlink packets to buffer at the user plane for High Latency Communication - Extended Buffering.
        /// </summary>
        public readonly int MaxBufferedPackets;
        /// <summary>
        /// The Preemption Capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        /// </summary>
        public readonly string PreemptionCapability;
        /// <summary>
        /// The Preemption Vulnerability of a QoS Flow controls whether it can be preempted by QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters.
        /// </summary>
        public readonly string PreemptionVulnerability;
        /// <summary>
        /// The QoS Indicator (5QI for 5G network /QCI for 4G net work) value identifies a set of QoS characteristics that control QoS forwarding treatment for QoS flows or EPS bearers.
        /// </summary>
        public readonly int QosIndicator;
        /// <summary>
        /// A `session_aggregate_maximum_bit_rate` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkSimPolicySliceDataNetworkSessionAggregateMaximumBitRateResult> SessionAggregateMaximumBitRates;

        [OutputConstructor]
        private GetNetworkSimPolicySliceDataNetworkResult(
            ImmutableArray<string> additionalAllowedSessionTypes,

            int allocationAndRetentionPriorityLevel,

            ImmutableArray<string> allowedServicesIds,

            string dataNetworkId,

            string defaultSessionType,

            int maxBufferedPackets,

            string preemptionCapability,

            string preemptionVulnerability,

            int qosIndicator,

            ImmutableArray<Outputs.GetNetworkSimPolicySliceDataNetworkSessionAggregateMaximumBitRateResult> sessionAggregateMaximumBitRates)
        {
            AdditionalAllowedSessionTypes = additionalAllowedSessionTypes;
            AllocationAndRetentionPriorityLevel = allocationAndRetentionPriorityLevel;
            AllowedServicesIds = allowedServicesIds;
            DataNetworkId = dataNetworkId;
            DefaultSessionType = defaultSessionType;
            MaxBufferedPackets = maxBufferedPackets;
            PreemptionCapability = preemptionCapability;
            PreemptionVulnerability = preemptionVulnerability;
            QosIndicator = qosIndicator;
            SessionAggregateMaximumBitRates = sessionAggregateMaximumBitRates;
        }
    }
}
