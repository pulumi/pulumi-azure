// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Mobile
{
    public static class GetNetworkPacketCoreControlPlane
    {
        /// <summary>
        /// Get information about a Mobile Network Packet Core Control Plane.
        /// </summary>
        public static Task<GetNetworkPacketCoreControlPlaneResult> InvokeAsync(GetNetworkPacketCoreControlPlaneArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkPacketCoreControlPlaneResult>("azure:mobile/getNetworkPacketCoreControlPlane:getNetworkPacketCoreControlPlane", args ?? new GetNetworkPacketCoreControlPlaneArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Mobile Network Packet Core Control Plane.
        /// </summary>
        public static Output<GetNetworkPacketCoreControlPlaneResult> Invoke(GetNetworkPacketCoreControlPlaneInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkPacketCoreControlPlaneResult>("azure:mobile/getNetworkPacketCoreControlPlane:getNetworkPacketCoreControlPlane", args ?? new GetNetworkPacketCoreControlPlaneInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkPacketCoreControlPlaneArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Mobile Network Packet Core Control Plane.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Mobile Network Packet Core Control Plane exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetNetworkPacketCoreControlPlaneArgs()
        {
        }
        public static new GetNetworkPacketCoreControlPlaneArgs Empty => new GetNetworkPacketCoreControlPlaneArgs();
    }

    public sealed class GetNetworkPacketCoreControlPlaneInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Mobile Network Packet Core Control Plane.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Mobile Network Packet Core Control Plane exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetNetworkPacketCoreControlPlaneInvokeArgs()
        {
        }
        public static new GetNetworkPacketCoreControlPlaneInvokeArgs Empty => new GetNetworkPacketCoreControlPlaneInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkPacketCoreControlPlaneResult
    {
        public readonly string ControlPlaneAccessIpv4Address;
        public readonly string ControlPlaneAccessIpv4Gateway;
        public readonly string ControlPlaneAccessIpv4Subnet;
        public readonly string ControlPlaneAccessName;
        /// <summary>
        /// The core network technology generation.
        /// </summary>
        public readonly string CoreNetworkTechnology;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkPacketCoreControlPlaneIdentityResult> Identities;
        /// <summary>
        /// Settings in JSON format to allow interoperability with third party components e.g. RANs and UEs.
        /// </summary>
        public readonly string InteroperabilitySettingsJson;
        /// <summary>
        /// One or more `local_diagnostics_access` blocks as defined below. The Kubernetes ingress configuration that controls access to the packet core diagnostics through local APIs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkPacketCoreControlPlaneLocalDiagnosticsAccessResult> LocalDiagnosticsAccesses;
        /// <summary>
        /// The Azure Region where the Mobile Network Packet Core Control Plane exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The logical name for this interface.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A `platform` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkPacketCoreControlPlanePlatformResult> Platforms;
        public readonly string ResourceGroupName;
        /// <summary>
        /// The list of Mobile Network Site IDs in which this packet core control plane is deployed.
        /// </summary>
        public readonly ImmutableArray<string> SiteIds;
        /// <summary>
        /// The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
        /// </summary>
        public readonly string Sku;
        /// <summary>
        /// The version of the packet core software that is deployed.
        /// </summary>
        public readonly string SoftwareVersion;
        /// <summary>
        /// A mapping of tags assigned to the Mobile Network Packet Core Control Plane.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The MTU in bytes that can be sent to the user equipment.
        /// </summary>
        public readonly int UserEquipmentMtuInBytes;

        [OutputConstructor]
        private GetNetworkPacketCoreControlPlaneResult(
            string controlPlaneAccessIpv4Address,

            string controlPlaneAccessIpv4Gateway,

            string controlPlaneAccessIpv4Subnet,

            string controlPlaneAccessName,

            string coreNetworkTechnology,

            string id,

            ImmutableArray<Outputs.GetNetworkPacketCoreControlPlaneIdentityResult> identities,

            string interoperabilitySettingsJson,

            ImmutableArray<Outputs.GetNetworkPacketCoreControlPlaneLocalDiagnosticsAccessResult> localDiagnosticsAccesses,

            string location,

            string name,

            ImmutableArray<Outputs.GetNetworkPacketCoreControlPlanePlatformResult> platforms,

            string resourceGroupName,

            ImmutableArray<string> siteIds,

            string sku,

            string softwareVersion,

            ImmutableDictionary<string, string> tags,

            int userEquipmentMtuInBytes)
        {
            ControlPlaneAccessIpv4Address = controlPlaneAccessIpv4Address;
            ControlPlaneAccessIpv4Gateway = controlPlaneAccessIpv4Gateway;
            ControlPlaneAccessIpv4Subnet = controlPlaneAccessIpv4Subnet;
            ControlPlaneAccessName = controlPlaneAccessName;
            CoreNetworkTechnology = coreNetworkTechnology;
            Id = id;
            Identities = identities;
            InteroperabilitySettingsJson = interoperabilitySettingsJson;
            LocalDiagnosticsAccesses = localDiagnosticsAccesses;
            Location = location;
            Name = name;
            Platforms = platforms;
            ResourceGroupName = resourceGroupName;
            SiteIds = siteIds;
            Sku = sku;
            SoftwareVersion = softwareVersion;
            Tags = tags;
            UserEquipmentMtuInBytes = userEquipmentMtuInBytes;
        }
    }
}
