// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Mobile
{
    /// <summary>
    /// Manages a Mobile Network Sim Group.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleNetwork = new Azure.Mobile.Network("exampleNetwork", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         MobileCountryCode = "001",
    ///         MobileNetworkCode = "01",
    ///     });
    /// 
    ///     var exampleUserAssignedIdentity = Azure.Authorization.GetUserAssignedIdentity.Invoke(new()
    ///     {
    ///         Name = "name_of_user_assigned_identity",
    ///         ResourceGroupName = "name_of_resource_group",
    ///     });
    /// 
    ///     var exampleKeyVault = Azure.KeyVault.GetKeyVault.Invoke(new()
    ///     {
    ///         Name = "example-kv",
    ///         ResourceGroupName = "some-resource-group",
    ///     });
    /// 
    ///     var exampleKey = Azure.KeyVault.GetKey.Invoke(new()
    ///     {
    ///         Name = "example-key",
    ///         KeyVaultId = exampleKeyVault.Apply(getKeyVaultResult =&gt; getKeyVaultResult.Id),
    ///     });
    /// 
    ///     var exampleNetworkSimGroup = new Azure.Mobile.NetworkSimGroup("exampleNetworkSimGroup", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         MobileNetworkId = exampleNetwork.Id,
    ///         EncryptionKeyUrl = exampleKey.Apply(getKeyResult =&gt; getKeyResult.Id),
    ///         Identity = new Azure.Mobile.Inputs.NetworkSimGroupIdentityArgs
    ///         {
    ///             Type = "SystemAssigned, UserAssigned",
    ///             IdentityIds = new[]
    ///             {
    ///                 exampleUserAssignedIdentity.Apply(getUserAssignedIdentityResult =&gt; getUserAssignedIdentityResult.Id),
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "key", "value" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Mobile Network Sim Groups can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mobile/networkSimGroup:NetworkSimGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/simGroups/simGroup1
    /// ```
    /// </summary>
    [AzureResourceType("azure:mobile/networkSimGroup:NetworkSimGroup")]
    public partial class NetworkSimGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A key to encrypt the SIM data that belongs to this SIM group.
        /// </summary>
        [Output("encryptionKeyUrl")]
        public Output<string?> EncryptionKeyUrl { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// 
        /// &gt; **NOTE:** A `UserAssigned` identity must be specified when `encryption_key_url` is specified.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.NetworkSimGroupIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure Region where the Mobile Network Sim Groups should exist. Changing this forces a new Mobile Network Sim Group to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The ID of Mobile Network which the Mobile Network Sim Group belongs to. Changing this forces a new Mobile Network Slice to be created.
        /// </summary>
        [Output("mobileNetworkId")]
        public Output<string> MobileNetworkId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name which should be used for this Mobile Network Sim Groups. Changing this forces a new Mobile Network Sim Group to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Mobile Network Sim Groups.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkSimGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkSimGroup(string name, NetworkSimGroupArgs args, CustomResourceOptions? options = null)
            : base("azure:mobile/networkSimGroup:NetworkSimGroup", name, args ?? new NetworkSimGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkSimGroup(string name, Input<string> id, NetworkSimGroupState? state = null, CustomResourceOptions? options = null)
            : base("azure:mobile/networkSimGroup:NetworkSimGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkSimGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkSimGroup Get(string name, Input<string> id, NetworkSimGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkSimGroup(name, id, state, options);
        }
    }

    public sealed class NetworkSimGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A key to encrypt the SIM data that belongs to this SIM group.
        /// </summary>
        [Input("encryptionKeyUrl")]
        public Input<string>? EncryptionKeyUrl { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// 
        /// &gt; **NOTE:** A `UserAssigned` identity must be specified when `encryption_key_url` is specified.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.NetworkSimGroupIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the Mobile Network Sim Groups should exist. Changing this forces a new Mobile Network Sim Group to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of Mobile Network which the Mobile Network Sim Group belongs to. Changing this forces a new Mobile Network Slice to be created.
        /// </summary>
        [Input("mobileNetworkId", required: true)]
        public Input<string> MobileNetworkId { get; set; } = null!;

        /// <summary>
        /// Specifies the name which should be used for this Mobile Network Sim Groups. Changing this forces a new Mobile Network Sim Group to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Mobile Network Sim Groups.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public NetworkSimGroupArgs()
        {
        }
        public static new NetworkSimGroupArgs Empty => new NetworkSimGroupArgs();
    }

    public sealed class NetworkSimGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A key to encrypt the SIM data that belongs to this SIM group.
        /// </summary>
        [Input("encryptionKeyUrl")]
        public Input<string>? EncryptionKeyUrl { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// 
        /// &gt; **NOTE:** A `UserAssigned` identity must be specified when `encryption_key_url` is specified.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.NetworkSimGroupIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies the Azure Region where the Mobile Network Sim Groups should exist. Changing this forces a new Mobile Network Sim Group to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of Mobile Network which the Mobile Network Sim Group belongs to. Changing this forces a new Mobile Network Slice to be created.
        /// </summary>
        [Input("mobileNetworkId")]
        public Input<string>? MobileNetworkId { get; set; }

        /// <summary>
        /// Specifies the name which should be used for this Mobile Network Sim Groups. Changing this forces a new Mobile Network Sim Group to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Mobile Network Sim Groups.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public NetworkSimGroupState()
        {
        }
        public static new NetworkSimGroupState Empty => new NetworkSimGroupState();
    }
}
