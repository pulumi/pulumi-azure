// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Mobile
{
    /// <summary>
    /// Manages a Mobile Network Sim.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleNetwork = new Azure.Mobile.Network("exampleNetwork", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         MobileCountryCode = "001",
    ///         MobileNetworkCode = "01",
    ///     });
    /// 
    ///     var exampleNetworkSimGroup = new Azure.Mobile.NetworkSimGroup("exampleNetworkSimGroup", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         MobileNetworkId = exampleNetwork.Id,
    ///     });
    /// 
    ///     var exampleNetworkSlice = new Azure.Mobile.NetworkSlice("exampleNetworkSlice", new()
    ///     {
    ///         MobileNetworkId = exampleNetwork.Id,
    ///         Location = exampleResourceGroup.Location,
    ///         SingleNetworkSliceSelectionAssistanceInformation = new Azure.Mobile.Inputs.NetworkSliceSingleNetworkSliceSelectionAssistanceInformationArgs
    ///         {
    ///             SliceServiceType = 1,
    ///         },
    ///     });
    /// 
    ///     var exampleNetworkAttachedDataNetwork = new Azure.Mobile.NetworkAttachedDataNetwork("exampleNetworkAttachedDataNetwork", new()
    ///     {
    ///         MobileNetworkDataNetworkName = azurerm_mobile_network_data_network.Example.Name,
    ///         MobileNetworkPacketCoreDataPlaneId = azurerm_mobile_network_packet_core_data_plane.Example.Id,
    ///         Location = exampleResourceGroup.Location,
    ///         DnsAddresses = new[]
    ///         {
    ///             "1.1.1.1",
    ///         },
    ///         UserEquipmentAddressPoolPrefixes = new[]
    ///         {
    ///             "2.4.0.0/24",
    ///         },
    ///         UserEquipmentStaticAddressPoolPrefixes = new[]
    ///         {
    ///             "2.4.1.0/24",
    ///         },
    ///         UserPlaneAccessName = "test",
    ///         UserPlaneAccessIpv4Address = "10.204.141.4",
    ///         UserPlaneAccessIpv4Gateway = "10.204.141.1",
    ///         UserPlaneAccessIpv4Subnet = "10.204.141.0/24",
    ///     });
    /// 
    ///     var exampleNetworkSim = new Azure.Mobile.NetworkSim("exampleNetworkSim", new()
    ///     {
    ///         MobileNetworkSimGroupId = exampleNetworkSimGroup.Id,
    ///         AuthenticationKey = "00000000000000000000000000000000",
    ///         IntegratedCircuitCardIdentifier = "8900000000000000000",
    ///         InternationalMobileSubscriberIdentity = "000000000000000",
    ///         OperatorKeyCode = "00000000000000000000000000000000",
    ///         StaticIpConfigurations = new[]
    ///         {
    ///             new Azure.Mobile.Inputs.NetworkSimStaticIpConfigurationArgs
    ///             {
    ///                 AttachedDataNetworkId = data.Azurerm_mobile_network_attached_data_network.Test.Id,
    ///                 SliceId = azurerm_mobile_network_slice.Test.Id,
    ///                 StaticIpv4Address = "2.4.0.1",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Mobile Network Sim can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mobile/networkSim:NetworkSim example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/simGroups/simGroup1/sims/sim1
    /// ```
    /// </summary>
    [AzureResourceType("azure:mobile/networkSim:NetworkSim")]
    public partial class NetworkSim : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Ki value for the SIM.
        /// </summary>
        [Output("authenticationKey")]
        public Output<string> AuthenticationKey { get; private set; } = null!;

        /// <summary>
        /// An optional free-form text field that can be used to record the device type this SIM is associated with, for example `Video camera`. The Azure portal allows SIMs to be grouped and filtered based on this value.
        /// </summary>
        [Output("deviceType")]
        public Output<string?> DeviceType { get; private set; } = null!;

        /// <summary>
        /// The integrated circuit card ID (ICCID) for the SIM. Changing this forces a new Mobile Network Sim to be created.
        /// </summary>
        [Output("integratedCircuitCardIdentifier")]
        public Output<string> IntegratedCircuitCardIdentifier { get; private set; } = null!;

        /// <summary>
        /// The international mobile subscriber identity (IMSI) for the SIM. Changing this forces a new Mobile Network Sim to be created.
        /// </summary>
        [Output("internationalMobileSubscriberIdentity")]
        public Output<string> InternationalMobileSubscriberIdentity { get; private set; } = null!;

        /// <summary>
        /// The ID of the Mobile Network which the Mobile Network Sim belongs to. Changing this forces a new Mobile Network Sim to be created.
        /// </summary>
        [Output("mobileNetworkSimGroupId")]
        public Output<string> MobileNetworkSimGroupId { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Mobile Network Sim. Changing this forces a new Mobile Network Sim to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Opc value for the SIM.
        /// </summary>
        [Output("operatorKeyCode")]
        public Output<string> OperatorKeyCode { get; private set; } = null!;

        /// <summary>
        /// The ID of SIM policy used by this SIM.
        /// </summary>
        [Output("simPolicyId")]
        public Output<string?> SimPolicyId { get; private set; } = null!;

        /// <summary>
        /// The state of the SIM resource.
        /// </summary>
        [Output("simState")]
        public Output<string> SimState { get; private set; } = null!;

        /// <summary>
        /// A `static_ip_configuration` block as defined below.
        /// </summary>
        [Output("staticIpConfigurations")]
        public Output<ImmutableArray<Outputs.NetworkSimStaticIpConfiguration>> StaticIpConfigurations { get; private set; } = null!;

        /// <summary>
        /// The public key fingerprint of the SIM vendor who provided this SIM, if any.
        /// </summary>
        [Output("vendorKeyFingerprint")]
        public Output<string> VendorKeyFingerprint { get; private set; } = null!;

        /// <summary>
        /// The name of the SIM vendor who provided this SIM, if any.
        /// </summary>
        [Output("vendorName")]
        public Output<string> VendorName { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkSim resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkSim(string name, NetworkSimArgs args, CustomResourceOptions? options = null)
            : base("azure:mobile/networkSim:NetworkSim", name, args ?? new NetworkSimArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkSim(string name, Input<string> id, NetworkSimState? state = null, CustomResourceOptions? options = null)
            : base("azure:mobile/networkSim:NetworkSim", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "authenticationKey",
                    "operatorKeyCode",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkSim resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkSim Get(string name, Input<string> id, NetworkSimState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkSim(name, id, state, options);
        }
    }

    public sealed class NetworkSimArgs : global::Pulumi.ResourceArgs
    {
        [Input("authenticationKey", required: true)]
        private Input<string>? _authenticationKey;

        /// <summary>
        /// The Ki value for the SIM.
        /// </summary>
        public Input<string>? AuthenticationKey
        {
            get => _authenticationKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authenticationKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// An optional free-form text field that can be used to record the device type this SIM is associated with, for example `Video camera`. The Azure portal allows SIMs to be grouped and filtered based on this value.
        /// </summary>
        [Input("deviceType")]
        public Input<string>? DeviceType { get; set; }

        /// <summary>
        /// The integrated circuit card ID (ICCID) for the SIM. Changing this forces a new Mobile Network Sim to be created.
        /// </summary>
        [Input("integratedCircuitCardIdentifier", required: true)]
        public Input<string> IntegratedCircuitCardIdentifier { get; set; } = null!;

        /// <summary>
        /// The international mobile subscriber identity (IMSI) for the SIM. Changing this forces a new Mobile Network Sim to be created.
        /// </summary>
        [Input("internationalMobileSubscriberIdentity", required: true)]
        public Input<string> InternationalMobileSubscriberIdentity { get; set; } = null!;

        /// <summary>
        /// The ID of the Mobile Network which the Mobile Network Sim belongs to. Changing this forces a new Mobile Network Sim to be created.
        /// </summary>
        [Input("mobileNetworkSimGroupId", required: true)]
        public Input<string> MobileNetworkSimGroupId { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Mobile Network Sim. Changing this forces a new Mobile Network Sim to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operatorKeyCode", required: true)]
        private Input<string>? _operatorKeyCode;

        /// <summary>
        /// The Opc value for the SIM.
        /// </summary>
        public Input<string>? OperatorKeyCode
        {
            get => _operatorKeyCode;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _operatorKeyCode = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of SIM policy used by this SIM.
        /// </summary>
        [Input("simPolicyId")]
        public Input<string>? SimPolicyId { get; set; }

        [Input("staticIpConfigurations")]
        private InputList<Inputs.NetworkSimStaticIpConfigurationArgs>? _staticIpConfigurations;

        /// <summary>
        /// A `static_ip_configuration` block as defined below.
        /// </summary>
        public InputList<Inputs.NetworkSimStaticIpConfigurationArgs> StaticIpConfigurations
        {
            get => _staticIpConfigurations ?? (_staticIpConfigurations = new InputList<Inputs.NetworkSimStaticIpConfigurationArgs>());
            set => _staticIpConfigurations = value;
        }

        public NetworkSimArgs()
        {
        }
        public static new NetworkSimArgs Empty => new NetworkSimArgs();
    }

    public sealed class NetworkSimState : global::Pulumi.ResourceArgs
    {
        [Input("authenticationKey")]
        private Input<string>? _authenticationKey;

        /// <summary>
        /// The Ki value for the SIM.
        /// </summary>
        public Input<string>? AuthenticationKey
        {
            get => _authenticationKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authenticationKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// An optional free-form text field that can be used to record the device type this SIM is associated with, for example `Video camera`. The Azure portal allows SIMs to be grouped and filtered based on this value.
        /// </summary>
        [Input("deviceType")]
        public Input<string>? DeviceType { get; set; }

        /// <summary>
        /// The integrated circuit card ID (ICCID) for the SIM. Changing this forces a new Mobile Network Sim to be created.
        /// </summary>
        [Input("integratedCircuitCardIdentifier")]
        public Input<string>? IntegratedCircuitCardIdentifier { get; set; }

        /// <summary>
        /// The international mobile subscriber identity (IMSI) for the SIM. Changing this forces a new Mobile Network Sim to be created.
        /// </summary>
        [Input("internationalMobileSubscriberIdentity")]
        public Input<string>? InternationalMobileSubscriberIdentity { get; set; }

        /// <summary>
        /// The ID of the Mobile Network which the Mobile Network Sim belongs to. Changing this forces a new Mobile Network Sim to be created.
        /// </summary>
        [Input("mobileNetworkSimGroupId")]
        public Input<string>? MobileNetworkSimGroupId { get; set; }

        /// <summary>
        /// The name which should be used for this Mobile Network Sim. Changing this forces a new Mobile Network Sim to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operatorKeyCode")]
        private Input<string>? _operatorKeyCode;

        /// <summary>
        /// The Opc value for the SIM.
        /// </summary>
        public Input<string>? OperatorKeyCode
        {
            get => _operatorKeyCode;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _operatorKeyCode = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of SIM policy used by this SIM.
        /// </summary>
        [Input("simPolicyId")]
        public Input<string>? SimPolicyId { get; set; }

        /// <summary>
        /// The state of the SIM resource.
        /// </summary>
        [Input("simState")]
        public Input<string>? SimState { get; set; }

        [Input("staticIpConfigurations")]
        private InputList<Inputs.NetworkSimStaticIpConfigurationGetArgs>? _staticIpConfigurations;

        /// <summary>
        /// A `static_ip_configuration` block as defined below.
        /// </summary>
        public InputList<Inputs.NetworkSimStaticIpConfigurationGetArgs> StaticIpConfigurations
        {
            get => _staticIpConfigurations ?? (_staticIpConfigurations = new InputList<Inputs.NetworkSimStaticIpConfigurationGetArgs>());
            set => _staticIpConfigurations = value;
        }

        /// <summary>
        /// The public key fingerprint of the SIM vendor who provided this SIM, if any.
        /// </summary>
        [Input("vendorKeyFingerprint")]
        public Input<string>? VendorKeyFingerprint { get; set; }

        /// <summary>
        /// The name of the SIM vendor who provided this SIM, if any.
        /// </summary>
        [Input("vendorName")]
        public Input<string>? VendorName { get; set; }

        public NetworkSimState()
        {
        }
        public static new NetworkSimState Empty => new NetworkSimState();
    }
}
