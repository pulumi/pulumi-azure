// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Mobile
{
    public static class GetNetworkService
    {
        /// <summary>
        /// Get information about a Mobile Network Service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleNetwork = Azure.Mobile.GetNetwork.Invoke(new()
        ///     {
        ///         Name = "example-mn",
        ///         ResourceGroupName = "example-rg",
        ///     });
        /// 
        ///     var exampleNetworkService = new Azure.Mobile.NetworkService("exampleNetworkService", new()
        ///     {
        ///         MobileNetworkId = exampleNetwork.Apply(getNetworkResult =&gt; getNetworkResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNetworkServiceResult> InvokeAsync(GetNetworkServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkServiceResult>("azure:mobile/getNetworkService:getNetworkService", args ?? new GetNetworkServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Mobile Network Service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleNetwork = Azure.Mobile.GetNetwork.Invoke(new()
        ///     {
        ///         Name = "example-mn",
        ///         ResourceGroupName = "example-rg",
        ///     });
        /// 
        ///     var exampleNetworkService = new Azure.Mobile.NetworkService("exampleNetworkService", new()
        ///     {
        ///         MobileNetworkId = exampleNetwork.Apply(getNetworkResult =&gt; getNetworkResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNetworkServiceResult> Invoke(GetNetworkServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkServiceResult>("azure:mobile/getNetworkService:getNetworkService", args ?? new GetNetworkServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the ID of the Mobile Network Service.
        /// </summary>
        [Input("mobileNetworkId", required: true)]
        public string MobileNetworkId { get; set; } = null!;

        /// <summary>
        /// Specifies the name which should be used for this Mobile Network Service.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetNetworkServiceArgs()
        {
        }
        public static new GetNetworkServiceArgs Empty => new GetNetworkServiceArgs();
    }

    public sealed class GetNetworkServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the ID of the Mobile Network Service.
        /// </summary>
        [Input("mobileNetworkId", required: true)]
        public Input<string> MobileNetworkId { get; set; } = null!;

        /// <summary>
        /// Specifies the name which should be used for this Mobile Network Service.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetNetworkServiceInvokeArgs()
        {
        }
        public static new GetNetworkServiceInvokeArgs Empty => new GetNetworkServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkServiceResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Azure Region where the Mobile Network Service should exist.
        /// </summary>
        public readonly string Location;
        public readonly string MobileNetworkId;
        /// <summary>
        /// The name of the data flow template. This must be unique within the parent data flow policy rule.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A `pcc_rule` block as defined below. The set of PCC Rules that make up this service.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkServicePccRuleResult> PccRules;
        /// <summary>
        /// A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority.
        /// </summary>
        public readonly int ServicePrecedence;
        /// <summary>
        /// A `service_qos_policy` block as defined below. The QoS policy to use for packets matching this service.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkServiceServiceQosPolicyResult> ServiceQosPolicies;
        /// <summary>
        /// A mapping of tags which should be assigned to the Mobile Network Service.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetNetworkServiceResult(
            string id,

            string location,

            string mobileNetworkId,

            string name,

            ImmutableArray<Outputs.GetNetworkServicePccRuleResult> pccRules,

            int servicePrecedence,

            ImmutableArray<Outputs.GetNetworkServiceServiceQosPolicyResult> serviceQosPolicies,

            ImmutableDictionary<string, string> tags)
        {
            Id = id;
            Location = location;
            MobileNetworkId = mobileNetworkId;
            Name = name;
            PccRules = pccRules;
            ServicePrecedence = servicePrecedence;
            ServiceQosPolicies = serviceQosPolicies;
            Tags = tags;
        }
    }
}
