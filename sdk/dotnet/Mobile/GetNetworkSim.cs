// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Mobile
{
    public static class GetNetworkSim
    {
        /// <summary>
        /// Get information about a Mobile Network Sim.
        /// </summary>
        public static Task<GetNetworkSimResult> InvokeAsync(GetNetworkSimArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkSimResult>("azure:mobile/getNetworkSim:getNetworkSim", args ?? new GetNetworkSimArgs(), options.WithDefaults());

        /// <summary>
        /// Get information about a Mobile Network Sim.
        /// </summary>
        public static Output<GetNetworkSimResult> Invoke(GetNetworkSimInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkSimResult>("azure:mobile/getNetworkSim:getNetworkSim", args ?? new GetNetworkSimInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkSimArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Mobile Network which the Mobile Network Sim belongs to.
        /// </summary>
        [Input("mobileNetworkSimGroupId", required: true)]
        public string MobileNetworkSimGroupId { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Mobile Network Sim.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetNetworkSimArgs()
        {
        }
        public static new GetNetworkSimArgs Empty => new GetNetworkSimArgs();
    }

    public sealed class GetNetworkSimInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Mobile Network which the Mobile Network Sim belongs to.
        /// </summary>
        [Input("mobileNetworkSimGroupId", required: true)]
        public Input<string> MobileNetworkSimGroupId { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Mobile Network Sim.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetNetworkSimInvokeArgs()
        {
        }
        public static new GetNetworkSimInvokeArgs Empty => new GetNetworkSimInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkSimResult
    {
        /// <summary>
        /// The device type this SIM is associated with.
        /// </summary>
        public readonly string DeviceType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The integrated circuit card ID (ICCID) for the SIM.
        /// </summary>
        public readonly string IntegratedCircuitCardIdentifier;
        /// <summary>
        /// The international mobile subscriber identity (IMSI) for the SIM.
        /// </summary>
        public readonly string InternationalMobileSubscriberIdentity;
        public readonly string MobileNetworkSimGroupId;
        public readonly string Name;
        /// <summary>
        /// The ID of SIM policy used by this SIM.
        /// </summary>
        public readonly string SimPolicyId;
        /// <summary>
        /// The state of the SIM resource.
        /// </summary>
        public readonly string SimState;
        /// <summary>
        /// A `static_ip_configuration` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkSimStaticIpConfigurationResult> StaticIpConfigurations;
        /// <summary>
        /// The public key fingerprint of the SIM vendor who provided this SIM.
        /// </summary>
        public readonly string VendorKeyFingerprint;
        /// <summary>
        /// The name of the SIM vendor who provided this SIM, if any.
        /// </summary>
        public readonly string VendorName;

        [OutputConstructor]
        private GetNetworkSimResult(
            string deviceType,

            string id,

            string integratedCircuitCardIdentifier,

            string internationalMobileSubscriberIdentity,

            string mobileNetworkSimGroupId,

            string name,

            string simPolicyId,

            string simState,

            ImmutableArray<Outputs.GetNetworkSimStaticIpConfigurationResult> staticIpConfigurations,

            string vendorKeyFingerprint,

            string vendorName)
        {
            DeviceType = deviceType;
            Id = id;
            IntegratedCircuitCardIdentifier = integratedCircuitCardIdentifier;
            InternationalMobileSubscriberIdentity = internationalMobileSubscriberIdentity;
            MobileNetworkSimGroupId = mobileNetworkSimGroupId;
            Name = name;
            SimPolicyId = simPolicyId;
            SimState = simState;
            StaticIpConfigurations = staticIpConfigurations;
            VendorKeyFingerprint = vendorKeyFingerprint;
            VendorName = vendorName;
        }
    }
}
