// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.PrivateDns
{
    /// <summary>
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/private_link_endpoint.html.markdown.
    /// </summary>
    public partial class LinkEndpoint : Pulumi.CustomResource
    {
        /// <summary>
        /// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the Name of the Private Service Connection. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `private_service_connection` block as defined below.
        /// </summary>
        [Output("privateServiceConnection")]
        public Output<Outputs.LinkEndpointPrivateServiceConnection> PrivateServiceConnection { get; private set; } = null!;

        /// <summary>
        /// Specifies the Name of the Resource Group within which the Private Link Endpoint should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subnet from which Private IP Addresses will be allocated for this Private Link Endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;


        /// <summary>
        /// Create a LinkEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LinkEndpoint(string name, LinkEndpointArgs args, CustomResourceOptions? options = null)
            : base("azure:privatedns/linkEndpoint:LinkEndpoint", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private LinkEndpoint(string name, Input<string> id, LinkEndpointState? state = null, CustomResourceOptions? options = null)
            : base("azure:privatedns/linkEndpoint:LinkEndpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LinkEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LinkEndpoint Get(string name, Input<string> id, LinkEndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new LinkEndpoint(name, id, state, options);
        }
    }

    public sealed class LinkEndpointArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the Name of the Private Service Connection. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `private_service_connection` block as defined below.
        /// </summary>
        [Input("privateServiceConnection", required: true)]
        public Input<Inputs.LinkEndpointPrivateServiceConnectionArgs> PrivateServiceConnection { get; set; } = null!;

        /// <summary>
        /// Specifies the Name of the Resource Group within which the Private Link Endpoint should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The ID of the Subnet from which Private IP Addresses will be allocated for this Private Link Endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public LinkEndpointArgs()
        {
        }
    }

    public sealed class LinkEndpointState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the Name of the Private Service Connection. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `private_service_connection` block as defined below.
        /// </summary>
        [Input("privateServiceConnection")]
        public Input<Inputs.LinkEndpointPrivateServiceConnectionGetArgs>? PrivateServiceConnection { get; set; }

        /// <summary>
        /// Specifies the Name of the Resource Group within which the Private Link Endpoint should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The ID of the Subnet from which Private IP Addresses will be allocated for this Private Link Endpoint. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        public LinkEndpointState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class LinkEndpointPrivateServiceConnectionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Does the Private Link Endpoint require Manual Approval from the remote resource owner? Changing this forces a new resource to be created.
        /// </summary>
        [Input("isManualConnection", required: true)]
        public Input<bool> IsManualConnection { get; set; } = null!;

        /// <summary>
        /// Specifies the Name of the Private Service Connection. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the Private Link Enabled Remote Resource which this Private Link Endpoint should be connected to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("privateConnectionResourceId", required: true)]
        public Input<string> PrivateConnectionResourceId { get; set; } = null!;

        /// <summary>
        /// A message passed to the owner of the remote resource when the private link endpoint attempts to establish the connection to the remote resource. The request message can be a maximum of `140` characters in length. Only valid if `is_manual_connection` is set to `true`.
        /// </summary>
        [Input("requestMessage")]
        public Input<string>? RequestMessage { get; set; }

        [Input("subresourceNames")]
        private InputList<string>? _subresourceNames;

        /// <summary>
        /// A list of subresource names which the Private Link Endpoint is able to connect to. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> SubresourceNames
        {
            get => _subresourceNames ?? (_subresourceNames = new InputList<string>());
            set => _subresourceNames = value;
        }

        public LinkEndpointPrivateServiceConnectionArgs()
        {
        }
    }

    public sealed class LinkEndpointPrivateServiceConnectionGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Does the Private Link Endpoint require Manual Approval from the remote resource owner? Changing this forces a new resource to be created.
        /// </summary>
        [Input("isManualConnection", required: true)]
        public Input<bool> IsManualConnection { get; set; } = null!;

        /// <summary>
        /// Specifies the Name of the Private Service Connection. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the Private Link Enabled Remote Resource which this Private Link Endpoint should be connected to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("privateConnectionResourceId", required: true)]
        public Input<string> PrivateConnectionResourceId { get; set; } = null!;

        /// <summary>
        /// A message passed to the owner of the remote resource when the private link endpoint attempts to establish the connection to the remote resource. The request message can be a maximum of `140` characters in length. Only valid if `is_manual_connection` is set to `true`.
        /// </summary>
        [Input("requestMessage")]
        public Input<string>? RequestMessage { get; set; }

        [Input("subresourceNames")]
        private InputList<string>? _subresourceNames;

        /// <summary>
        /// A list of subresource names which the Private Link Endpoint is able to connect to. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> SubresourceNames
        {
            get => _subresourceNames ?? (_subresourceNames = new InputList<string>());
            set => _subresourceNames = value;
        }

        public LinkEndpointPrivateServiceConnectionGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class LinkEndpointPrivateServiceConnection
    {
        /// <summary>
        /// Does the Private Link Endpoint require Manual Approval from the remote resource owner? Changing this forces a new resource to be created.
        /// </summary>
        public readonly bool IsManualConnection;
        /// <summary>
        /// Specifies the Name of the Private Service Connection. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ID of the Private Link Enabled Remote Resource which this Private Link Endpoint should be connected to. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string PrivateConnectionResourceId;
        /// <summary>
        /// A message passed to the owner of the remote resource when the private link endpoint attempts to establish the connection to the remote resource. The request message can be a maximum of `140` characters in length. Only valid if `is_manual_connection` is set to `true`.
        /// </summary>
        public readonly string? RequestMessage;
        /// <summary>
        /// A list of subresource names which the Private Link Endpoint is able to connect to. Changing this forces a new resource to be created.
        /// </summary>
        public readonly ImmutableArray<string> SubresourceNames;

        [OutputConstructor]
        private LinkEndpointPrivateServiceConnection(
            bool isManualConnection,
            string name,
            string privateConnectionResourceId,
            string? requestMessage,
            ImmutableArray<string> subresourceNames)
        {
            IsManualConnection = isManualConnection;
            Name = name;
            PrivateConnectionResourceId = privateConnectionResourceId;
            RequestMessage = requestMessage;
            SubresourceNames = subresourceNames;
        }
    }
    }
}
