// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.PrivateDns
{
    /// <summary>
    /// Manages an Azure Private Link Service.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/private_link_service.html.markdown.
    /// </summary>
    public partial class LinkService : Pulumi.CustomResource
    {
        /// <summary>
        /// The alias is a globally unique name for your private link service which Azure generates for you. Your can use this alias to request a connection to your private link service.
        /// </summary>
        [Output("alias")]
        public Output<string> Alias { get; private set; } = null!;

        /// <summary>
        /// A list of subscription globally unique identifiers(GUID) that will be automatically be able to use this service.
        /// </summary>
        [Output("autoApprovalSubscriptionIds")]
        public Output<ImmutableArray<string>> AutoApprovalSubscriptionIds { get; private set; } = null!;

        /// <summary>
        /// A list of Standard Load Balancer(SLB) resource IDs. The Private Link service is tied to the frontend IP address of a SLB. All traffic destined for the private link service will reach the frontend of the SLB. You can configure SLB rules to direct this traffic to appropriate backend pools where your applications are running.
        /// </summary>
        [Output("loadBalancerFrontendIpConfigurationIds")]
        public Output<ImmutableArray<string>> LoadBalancerFrontendIpConfigurationIds { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the private link service. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `nat_ip_configuration` block as defined below.
        /// </summary>
        [Output("natIpConfigurations")]
        public Output<ImmutableArray<Outputs.LinkServiceNatIpConfigurations>> NatIpConfigurations { get; private set; } = null!;

        [Output("networkInterfaceIds")]
        public Output<ImmutableArray<string>> NetworkInterfaceIds { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which the private link service resides. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>> Tags { get; private set; } = null!;

        /// <summary>
        /// A list of subscription globally unique identifiers(GUID) that will be able to see this service. If left undefined all Azure subscriptions will be able to see this service.
        /// </summary>
        [Output("visibilitySubscriptionIds")]
        public Output<ImmutableArray<string>> VisibilitySubscriptionIds { get; private set; } = null!;


        /// <summary>
        /// Create a LinkService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LinkService(string name, LinkServiceArgs args, CustomResourceOptions? options = null)
            : base("azure:privatedns/linkService:LinkService", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private LinkService(string name, Input<string> id, LinkServiceState? state = null, CustomResourceOptions? options = null)
            : base("azure:privatedns/linkService:LinkService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LinkService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LinkService Get(string name, Input<string> id, LinkServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new LinkService(name, id, state, options);
        }
    }

    public sealed class LinkServiceArgs : Pulumi.ResourceArgs
    {
        [Input("autoApprovalSubscriptionIds")]
        private InputList<string>? _autoApprovalSubscriptionIds;

        /// <summary>
        /// A list of subscription globally unique identifiers(GUID) that will be automatically be able to use this service.
        /// </summary>
        public InputList<string> AutoApprovalSubscriptionIds
        {
            get => _autoApprovalSubscriptionIds ?? (_autoApprovalSubscriptionIds = new InputList<string>());
            set => _autoApprovalSubscriptionIds = value;
        }

        [Input("loadBalancerFrontendIpConfigurationIds", required: true)]
        private InputList<string>? _loadBalancerFrontendIpConfigurationIds;

        /// <summary>
        /// A list of Standard Load Balancer(SLB) resource IDs. The Private Link service is tied to the frontend IP address of a SLB. All traffic destined for the private link service will reach the frontend of the SLB. You can configure SLB rules to direct this traffic to appropriate backend pools where your applications are running.
        /// </summary>
        public InputList<string> LoadBalancerFrontendIpConfigurationIds
        {
            get => _loadBalancerFrontendIpConfigurationIds ?? (_loadBalancerFrontendIpConfigurationIds = new InputList<string>());
            set => _loadBalancerFrontendIpConfigurationIds = value;
        }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the private link service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("natIpConfigurations", required: true)]
        private InputList<Inputs.LinkServiceNatIpConfigurationsArgs>? _natIpConfigurations;

        /// <summary>
        /// A `nat_ip_configuration` block as defined below.
        /// </summary>
        public InputList<Inputs.LinkServiceNatIpConfigurationsArgs> NatIpConfigurations
        {
            get => _natIpConfigurations ?? (_natIpConfigurations = new InputList<Inputs.LinkServiceNatIpConfigurationsArgs>());
            set => _natIpConfigurations = value;
        }

        /// <summary>
        /// The name of the resource group in which the private link service resides. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        [Input("visibilitySubscriptionIds")]
        private InputList<string>? _visibilitySubscriptionIds;

        /// <summary>
        /// A list of subscription globally unique identifiers(GUID) that will be able to see this service. If left undefined all Azure subscriptions will be able to see this service.
        /// </summary>
        public InputList<string> VisibilitySubscriptionIds
        {
            get => _visibilitySubscriptionIds ?? (_visibilitySubscriptionIds = new InputList<string>());
            set => _visibilitySubscriptionIds = value;
        }

        public LinkServiceArgs()
        {
        }
    }

    public sealed class LinkServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The alias is a globally unique name for your private link service which Azure generates for you. Your can use this alias to request a connection to your private link service.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        [Input("autoApprovalSubscriptionIds")]
        private InputList<string>? _autoApprovalSubscriptionIds;

        /// <summary>
        /// A list of subscription globally unique identifiers(GUID) that will be automatically be able to use this service.
        /// </summary>
        public InputList<string> AutoApprovalSubscriptionIds
        {
            get => _autoApprovalSubscriptionIds ?? (_autoApprovalSubscriptionIds = new InputList<string>());
            set => _autoApprovalSubscriptionIds = value;
        }

        [Input("loadBalancerFrontendIpConfigurationIds")]
        private InputList<string>? _loadBalancerFrontendIpConfigurationIds;

        /// <summary>
        /// A list of Standard Load Balancer(SLB) resource IDs. The Private Link service is tied to the frontend IP address of a SLB. All traffic destined for the private link service will reach the frontend of the SLB. You can configure SLB rules to direct this traffic to appropriate backend pools where your applications are running.
        /// </summary>
        public InputList<string> LoadBalancerFrontendIpConfigurationIds
        {
            get => _loadBalancerFrontendIpConfigurationIds ?? (_loadBalancerFrontendIpConfigurationIds = new InputList<string>());
            set => _loadBalancerFrontendIpConfigurationIds = value;
        }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the private link service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("natIpConfigurations")]
        private InputList<Inputs.LinkServiceNatIpConfigurationsGetArgs>? _natIpConfigurations;

        /// <summary>
        /// A `nat_ip_configuration` block as defined below.
        /// </summary>
        public InputList<Inputs.LinkServiceNatIpConfigurationsGetArgs> NatIpConfigurations
        {
            get => _natIpConfigurations ?? (_natIpConfigurations = new InputList<Inputs.LinkServiceNatIpConfigurationsGetArgs>());
            set => _natIpConfigurations = value;
        }

        [Input("networkInterfaceIds")]
        private InputList<string>? _networkInterfaceIds;
        public InputList<string> NetworkInterfaceIds
        {
            get => _networkInterfaceIds ?? (_networkInterfaceIds = new InputList<string>());
            set => _networkInterfaceIds = value;
        }

        /// <summary>
        /// The name of the resource group in which the private link service resides. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        [Input("visibilitySubscriptionIds")]
        private InputList<string>? _visibilitySubscriptionIds;

        /// <summary>
        /// A list of subscription globally unique identifiers(GUID) that will be able to see this service. If left undefined all Azure subscriptions will be able to see this service.
        /// </summary>
        public InputList<string> VisibilitySubscriptionIds
        {
            get => _visibilitySubscriptionIds ?? (_visibilitySubscriptionIds = new InputList<string>());
            set => _visibilitySubscriptionIds = value;
        }

        public LinkServiceState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class LinkServiceNatIpConfigurationsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the private link service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("primary", required: true)]
        public Input<bool> Primary { get; set; } = null!;

        [Input("privateIpAddress")]
        public Input<string>? PrivateIpAddress { get; set; }

        [Input("privateIpAddressVersion")]
        public Input<string>? PrivateIpAddressVersion { get; set; }

        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public LinkServiceNatIpConfigurationsArgs()
        {
        }
    }

    public sealed class LinkServiceNatIpConfigurationsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the private link service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("primary", required: true)]
        public Input<bool> Primary { get; set; } = null!;

        [Input("privateIpAddress")]
        public Input<string>? PrivateIpAddress { get; set; }

        [Input("privateIpAddressVersion")]
        public Input<string>? PrivateIpAddressVersion { get; set; }

        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public LinkServiceNatIpConfigurationsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class LinkServiceNatIpConfigurations
    {
        /// <summary>
        /// The name of the private link service. Changing this forces a new resource to be created.
        /// </summary>
        public readonly string Name;
        public readonly bool Primary;
        public readonly string? PrivateIpAddress;
        public readonly string? PrivateIpAddressVersion;
        public readonly string SubnetId;

        [OutputConstructor]
        private LinkServiceNatIpConfigurations(
            string name,
            bool primary,
            string? privateIpAddress,
            string? privateIpAddressVersion,
            string subnetId)
        {
            Name = name;
            Primary = primary;
            PrivateIpAddress = privateIpAddress;
            PrivateIpAddressVersion = privateIpAddressVersion;
            SubnetId = subnetId;
        }
    }
    }
}
