// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.PrivateDns
{
    /// <summary>
    /// Manages a Private Link Service.
    /// 
    /// &gt; **NOTE** Private Link is now in [GA](https://docs.microsoft.com/en-gb/azure/private-link/).
    /// </summary>
    public partial class LinkService : Pulumi.CustomResource
    {
        /// <summary>
        /// A globally unique DNS Name for your Private Link Service. You can use this alias to request a connection to your Private Link Service.
        /// </summary>
        [Output("alias")]
        public Output<string> Alias { get; private set; } = null!;

        /// <summary>
        /// A list of Subscription UUID/GUID's that will be automatically be able to use this Private Link Service.
        /// </summary>
        [Output("autoApprovalSubscriptionIds")]
        public Output<ImmutableArray<string>> AutoApprovalSubscriptionIds { get; private set; } = null!;

        /// <summary>
        /// Should the Private Link Service support the Proxy Protocol? Defaults to `false`.
        /// </summary>
        [Output("enableProxyProtocol")]
        public Output<bool?> EnableProxyProtocol { get; private set; } = null!;

        /// <summary>
        /// A list of Frontend IP Configuration ID's from a Standard Load Balancer, where traffic from the Private Link Service should be routed. You can use Load Balancer Rules to direct this traffic to appropriate backend pools where your applications are running.
        /// </summary>
        [Output("loadBalancerFrontendIpConfigurationIds")]
        public Output<ImmutableArray<string>> LoadBalancerFrontendIpConfigurationIds { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of this Private Link Service. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more (up to 8) `nat_ip_configuration` block as defined below.
        /// </summary>
        [Output("natIpConfigurations")]
        public Output<ImmutableArray<Outputs.LinkServiceNatIpConfiguration>> NatIpConfigurations { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Private Link Service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A list of Subscription UUID/GUID's that will be able to see this Private Link Service.
        /// </summary>
        [Output("visibilitySubscriptionIds")]
        public Output<ImmutableArray<string>> VisibilitySubscriptionIds { get; private set; } = null!;


        /// <summary>
        /// Create a LinkService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LinkService(string name, LinkServiceArgs args, CustomResourceOptions? options = null)
            : base("azure:privatedns/linkService:LinkService", name, args ?? new LinkServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LinkService(string name, Input<string> id, LinkServiceState? state = null, CustomResourceOptions? options = null)
            : base("azure:privatedns/linkService:LinkService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LinkService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LinkService Get(string name, Input<string> id, LinkServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new LinkService(name, id, state, options);
        }
    }

    public sealed class LinkServiceArgs : Pulumi.ResourceArgs
    {
        [Input("autoApprovalSubscriptionIds")]
        private InputList<string>? _autoApprovalSubscriptionIds;

        /// <summary>
        /// A list of Subscription UUID/GUID's that will be automatically be able to use this Private Link Service.
        /// </summary>
        public InputList<string> AutoApprovalSubscriptionIds
        {
            get => _autoApprovalSubscriptionIds ?? (_autoApprovalSubscriptionIds = new InputList<string>());
            set => _autoApprovalSubscriptionIds = value;
        }

        /// <summary>
        /// Should the Private Link Service support the Proxy Protocol? Defaults to `false`.
        /// </summary>
        [Input("enableProxyProtocol")]
        public Input<bool>? EnableProxyProtocol { get; set; }

        [Input("loadBalancerFrontendIpConfigurationIds", required: true)]
        private InputList<string>? _loadBalancerFrontendIpConfigurationIds;

        /// <summary>
        /// A list of Frontend IP Configuration ID's from a Standard Load Balancer, where traffic from the Private Link Service should be routed. You can use Load Balancer Rules to direct this traffic to appropriate backend pools where your applications are running.
        /// </summary>
        public InputList<string> LoadBalancerFrontendIpConfigurationIds
        {
            get => _loadBalancerFrontendIpConfigurationIds ?? (_loadBalancerFrontendIpConfigurationIds = new InputList<string>());
            set => _loadBalancerFrontendIpConfigurationIds = value;
        }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of this Private Link Service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("natIpConfigurations", required: true)]
        private InputList<Inputs.LinkServiceNatIpConfigurationArgs>? _natIpConfigurations;

        /// <summary>
        /// One or more (up to 8) `nat_ip_configuration` block as defined below.
        /// </summary>
        public InputList<Inputs.LinkServiceNatIpConfigurationArgs> NatIpConfigurations
        {
            get => _natIpConfigurations ?? (_natIpConfigurations = new InputList<Inputs.LinkServiceNatIpConfigurationArgs>());
            set => _natIpConfigurations = value;
        }

        /// <summary>
        /// The name of the Resource Group where the Private Link Service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("visibilitySubscriptionIds")]
        private InputList<string>? _visibilitySubscriptionIds;

        /// <summary>
        /// A list of Subscription UUID/GUID's that will be able to see this Private Link Service.
        /// </summary>
        public InputList<string> VisibilitySubscriptionIds
        {
            get => _visibilitySubscriptionIds ?? (_visibilitySubscriptionIds = new InputList<string>());
            set => _visibilitySubscriptionIds = value;
        }

        public LinkServiceArgs()
        {
        }
    }

    public sealed class LinkServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A globally unique DNS Name for your Private Link Service. You can use this alias to request a connection to your Private Link Service.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        [Input("autoApprovalSubscriptionIds")]
        private InputList<string>? _autoApprovalSubscriptionIds;

        /// <summary>
        /// A list of Subscription UUID/GUID's that will be automatically be able to use this Private Link Service.
        /// </summary>
        public InputList<string> AutoApprovalSubscriptionIds
        {
            get => _autoApprovalSubscriptionIds ?? (_autoApprovalSubscriptionIds = new InputList<string>());
            set => _autoApprovalSubscriptionIds = value;
        }

        /// <summary>
        /// Should the Private Link Service support the Proxy Protocol? Defaults to `false`.
        /// </summary>
        [Input("enableProxyProtocol")]
        public Input<bool>? EnableProxyProtocol { get; set; }

        [Input("loadBalancerFrontendIpConfigurationIds")]
        private InputList<string>? _loadBalancerFrontendIpConfigurationIds;

        /// <summary>
        /// A list of Frontend IP Configuration ID's from a Standard Load Balancer, where traffic from the Private Link Service should be routed. You can use Load Balancer Rules to direct this traffic to appropriate backend pools where your applications are running.
        /// </summary>
        public InputList<string> LoadBalancerFrontendIpConfigurationIds
        {
            get => _loadBalancerFrontendIpConfigurationIds ?? (_loadBalancerFrontendIpConfigurationIds = new InputList<string>());
            set => _loadBalancerFrontendIpConfigurationIds = value;
        }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the name of this Private Link Service. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("natIpConfigurations")]
        private InputList<Inputs.LinkServiceNatIpConfigurationGetArgs>? _natIpConfigurations;

        /// <summary>
        /// One or more (up to 8) `nat_ip_configuration` block as defined below.
        /// </summary>
        public InputList<Inputs.LinkServiceNatIpConfigurationGetArgs> NatIpConfigurations
        {
            get => _natIpConfigurations ?? (_natIpConfigurations = new InputList<Inputs.LinkServiceNatIpConfigurationGetArgs>());
            set => _natIpConfigurations = value;
        }

        /// <summary>
        /// The name of the Resource Group where the Private Link Service should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("visibilitySubscriptionIds")]
        private InputList<string>? _visibilitySubscriptionIds;

        /// <summary>
        /// A list of Subscription UUID/GUID's that will be able to see this Private Link Service.
        /// </summary>
        public InputList<string> VisibilitySubscriptionIds
        {
            get => _visibilitySubscriptionIds ?? (_visibilitySubscriptionIds = new InputList<string>());
            set => _visibilitySubscriptionIds = value;
        }

        public LinkServiceState()
        {
        }
    }
}
