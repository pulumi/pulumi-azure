// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Kusto
{
    /// <summary>
    /// Manages a Kusto Script.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleCluster = new Azure.Kusto.Cluster("exampleCluster", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = new Azure.Kusto.Inputs.ClusterSkuArgs
    ///         {
    ///             Name = "Dev(No SLA)_Standard_D11_v2",
    ///             Capacity = 1,
    ///         },
    ///     });
    /// 
    ///     var exampleDatabase = new Azure.Kusto.Database("exampleDatabase", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         ClusterName = exampleCluster.Name,
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleContainer = new Azure.Storage.Container("exampleContainer", new()
    ///     {
    ///         StorageAccountName = exampleAccount.Name,
    ///         ContainerAccessType = "private",
    ///     });
    /// 
    ///     var exampleBlob = new Azure.Storage.Blob("exampleBlob", new()
    ///     {
    ///         StorageAccountName = exampleAccount.Name,
    ///         StorageContainerName = exampleContainer.Name,
    ///         Type = "Block",
    ///         SourceContent = ".create table MyTable (Level:string, Timestamp:datetime, UserId:string, TraceId:string, Message:string, ProcessId:int32)",
    ///     });
    /// 
    ///     var exampleAccountBlobContainerSAS = Azure.Storage.GetAccountBlobContainerSAS.Invoke(new()
    ///     {
    ///         ConnectionString = exampleAccount.PrimaryConnectionString,
    ///         ContainerName = exampleContainer.Name,
    ///         HttpsOnly = true,
    ///         Start = "2017-03-21",
    ///         Expiry = "2022-03-21",
    ///         Permissions = new Azure.Storage.Inputs.GetAccountBlobContainerSASPermissionsInputArgs
    ///         {
    ///             Read = true,
    ///             Add = false,
    ///             Create = false,
    ///             Write = true,
    ///             Delete = false,
    ///             List = true,
    ///         },
    ///     });
    /// 
    ///     var exampleScript = new Azure.Kusto.Script("exampleScript", new()
    ///     {
    ///         DatabaseId = exampleDatabase.Id,
    ///         Url = exampleBlob.Id,
    ///         SasToken = exampleAccountBlobContainerSAS.Apply(getAccountBlobContainerSASResult =&gt; getAccountBlobContainerSASResult.Sas),
    ///         ContinueOnErrorsEnabled = true,
    ///         ForceAnUpdateWhenValueChanged = "first",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Kusto Scripts can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:kusto/script:Script example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Kusto/clusters/cluster1/databases/database1/scripts/script1
    /// ```
    /// </summary>
    [AzureResourceType("azure:kusto/script:Script")]
    public partial class Script : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Flag that indicates whether to continue if one of the command fails.
        /// </summary>
        [Output("continueOnErrorsEnabled")]
        public Output<bool?> ContinueOnErrorsEnabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the Kusto Database. Changing this forces a new Kusto Script to be created.
        /// </summary>
        [Output("databaseId")]
        public Output<string> DatabaseId { get; private set; } = null!;

        /// <summary>
        /// A unique string. If changed the script will be applied again.
        /// </summary>
        [Output("forceAnUpdateWhenValueChanged")]
        public Output<string> ForceAnUpdateWhenValueChanged { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Kusto Script. Changing this forces a new Kusto Script to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The SAS token used to access the script. Must be provided when using scriptUrl property. Changing this forces a new resource to be created.
        /// </summary>
        [Output("sasToken")]
        public Output<string?> SasToken { get; private set; } = null!;

        /// <summary>
        /// The script content. This property should be used when the script is provide inline and not through file in a SA. Must not be used together with `url` and `sas_token` properties. Changing this forces a new resource to be created.
        /// </summary>
        [Output("scriptContent")]
        public Output<string?> ScriptContent { get; private set; } = null!;

        /// <summary>
        /// The url to the KQL script blob file. Must not be used together with scriptContent property. Please reference [this documentation](https://docs.microsoft.com/azure/data-explorer/database-script) that describes the commands that are allowed in the script.
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Script resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Script(string name, ScriptArgs args, CustomResourceOptions? options = null)
            : base("azure:kusto/script:Script", name, args ?? new ScriptArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Script(string name, Input<string> id, ScriptState? state = null, CustomResourceOptions? options = null)
            : base("azure:kusto/script:Script", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "sasToken",
                    "scriptContent",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Script resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Script Get(string name, Input<string> id, ScriptState? state = null, CustomResourceOptions? options = null)
        {
            return new Script(name, id, state, options);
        }
    }

    public sealed class ScriptArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Flag that indicates whether to continue if one of the command fails.
        /// </summary>
        [Input("continueOnErrorsEnabled")]
        public Input<bool>? ContinueOnErrorsEnabled { get; set; }

        /// <summary>
        /// The ID of the Kusto Database. Changing this forces a new Kusto Script to be created.
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        /// <summary>
        /// A unique string. If changed the script will be applied again.
        /// </summary>
        [Input("forceAnUpdateWhenValueChanged")]
        public Input<string>? ForceAnUpdateWhenValueChanged { get; set; }

        /// <summary>
        /// The name which should be used for this Kusto Script. Changing this forces a new Kusto Script to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("sasToken")]
        private Input<string>? _sasToken;

        /// <summary>
        /// The SAS token used to access the script. Must be provided when using scriptUrl property. Changing this forces a new resource to be created.
        /// </summary>
        public Input<string>? SasToken
        {
            get => _sasToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sasToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("scriptContent")]
        private Input<string>? _scriptContent;

        /// <summary>
        /// The script content. This property should be used when the script is provide inline and not through file in a SA. Must not be used together with `url` and `sas_token` properties. Changing this forces a new resource to be created.
        /// </summary>
        public Input<string>? ScriptContent
        {
            get => _scriptContent;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _scriptContent = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The url to the KQL script blob file. Must not be used together with scriptContent property. Please reference [this documentation](https://docs.microsoft.com/azure/data-explorer/database-script) that describes the commands that are allowed in the script.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ScriptArgs()
        {
        }
        public static new ScriptArgs Empty => new ScriptArgs();
    }

    public sealed class ScriptState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Flag that indicates whether to continue if one of the command fails.
        /// </summary>
        [Input("continueOnErrorsEnabled")]
        public Input<bool>? ContinueOnErrorsEnabled { get; set; }

        /// <summary>
        /// The ID of the Kusto Database. Changing this forces a new Kusto Script to be created.
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// A unique string. If changed the script will be applied again.
        /// </summary>
        [Input("forceAnUpdateWhenValueChanged")]
        public Input<string>? ForceAnUpdateWhenValueChanged { get; set; }

        /// <summary>
        /// The name which should be used for this Kusto Script. Changing this forces a new Kusto Script to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("sasToken")]
        private Input<string>? _sasToken;

        /// <summary>
        /// The SAS token used to access the script. Must be provided when using scriptUrl property. Changing this forces a new resource to be created.
        /// </summary>
        public Input<string>? SasToken
        {
            get => _sasToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sasToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("scriptContent")]
        private Input<string>? _scriptContent;

        /// <summary>
        /// The script content. This property should be used when the script is provide inline and not through file in a SA. Must not be used together with `url` and `sas_token` properties. Changing this forces a new resource to be created.
        /// </summary>
        public Input<string>? ScriptContent
        {
            get => _scriptContent;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _scriptContent = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The url to the KQL script blob file. Must not be used together with scriptContent property. Please reference [this documentation](https://docs.microsoft.com/azure/data-explorer/database-script) that describes the commands that are allowed in the script.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ScriptState()
        {
        }
        public static new ScriptState Empty => new ScriptState();
    }
}
