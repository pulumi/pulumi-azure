// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Kusto
{
    /// <summary>
    /// Manages a Kusto (also known as Azure Data Explorer) Event Grid Data Connection
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleCluster = new Azure.Kusto.Cluster("exampleCluster", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = new Azure.Kusto.Inputs.ClusterSkuArgs
    ///         {
    ///             Name = "Standard_D13_v2",
    ///             Capacity = 2,
    ///         },
    ///     });
    /// 
    ///     var exampleDatabase = new Azure.Kusto.Database("exampleDatabase", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         ClusterName = exampleCluster.Name,
    ///         HotCachePeriod = "P7D",
    ///         SoftDeletePeriod = "P31D",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "GRS",
    ///     });
    /// 
    ///     var exampleEventHubNamespace = new Azure.EventHub.EventHubNamespace("exampleEventHubNamespace", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "Standard",
    ///     });
    /// 
    ///     var exampleEventHub = new Azure.EventHub.EventHub("exampleEventHub", new()
    ///     {
    ///         NamespaceName = exampleEventHubNamespace.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         PartitionCount = 1,
    ///         MessageRetention = 1,
    ///     });
    /// 
    ///     var exampleConsumerGroup = new Azure.EventHub.ConsumerGroup("exampleConsumerGroup", new()
    ///     {
    ///         NamespaceName = exampleEventHubNamespace.Name,
    ///         EventhubName = exampleEventHub.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleEventSubscription = new Azure.EventGrid.EventSubscription("exampleEventSubscription", new()
    ///     {
    ///         Scope = exampleAccount.Id,
    ///         EventhubEndpointId = exampleEventHub.Id,
    ///         EventDeliverySchema = "EventGridSchema",
    ///         IncludedEventTypes = new[]
    ///         {
    ///             "Microsoft.Storage.BlobCreated",
    ///             "Microsoft.Storage.BlobRenamed",
    ///         },
    ///         RetryPolicy = new Azure.EventGrid.Inputs.EventSubscriptionRetryPolicyArgs
    ///         {
    ///             EventTimeToLive = 144,
    ///             MaxDeliveryAttempts = 10,
    ///         },
    ///     });
    /// 
    ///     var exampleEventGridDataConnection = new Azure.Kusto.EventGridDataConnection("exampleEventGridDataConnection", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         ClusterName = exampleCluster.Name,
    ///         DatabaseName = exampleDatabase.Name,
    ///         StorageAccountId = exampleAccount.Id,
    ///         EventhubId = exampleEventHub.Id,
    ///         EventhubConsumerGroupName = exampleConsumerGroup.Name,
    ///         TableName = "my-table",
    ///         MappingRuleName = "my-table-mapping",
    ///         DataFormat = "JSON",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleEventSubscription,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Kusto Event Grid Data Connections can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:kusto/eventGridDataConnection:EventGridDataConnection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/clusters/cluster1/databases/database1/dataConnections/dataConnection1
    /// ```
    /// </summary>
    [AzureResourceType("azure:kusto/eventGridDataConnection:EventGridDataConnection")]
    public partial class EventGridDataConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the blob storage event type that needs to be processed. Possible Values are `Microsoft.Storage.BlobCreated` and `Microsoft.Storage.BlobRenamed`. Defaults to `Microsoft.Storage.BlobCreated`.
        /// </summary>
        [Output("blobStorageEventType")]
        public Output<string?> BlobStorageEventType { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// Specifies the data format of the EventHub messages. Allowed values: `APACHEAVRO`, `AVRO`, `CSV`, `JSON`, `MULTIJSON`, `ORC`, `PARQUET`, `PSV`, `RAW`, `SCSV`, `SINGLEJSON`, `SOHSV`, `TSV`, `TSVE`, `TXT` and `W3CLOGFILE`.
        /// </summary>
        [Output("dataFormat")]
        public Output<string?> DataFormat { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: `Single`, `Multi`. Changing this forces a new resource to be created. Defaults to `Single`.
        /// </summary>
        [Output("databaseRoutingType")]
        public Output<string?> DatabaseRoutingType { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the event grid that is subscribed to the storage account events.
        /// </summary>
        [Output("eventgridResourceId")]
        public Output<string?> EventgridResourceId { get; private set; } = null!;

        /// <summary>
        /// Specifies the Event Hub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
        /// </summary>
        [Output("eventhubConsumerGroupName")]
        public Output<string> EventhubConsumerGroupName { get; private set; } = null!;

        /// <summary>
        /// Specifies the resource id of the Event Hub this data connection will use for ingestion. Changing this forces a new resource to be created.
        /// </summary>
        [Output("eventhubId")]
        public Output<string> EventhubId { get; private set; } = null!;

        /// <summary>
        /// The location where the Kusto Database should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Empty for non-managed identity based data connection. For system assigned identity, provide cluster resource Id. For user assigned identity (UAI) provide the UAI resource Id.
        /// </summary>
        [Output("managedIdentityResourceId")]
        public Output<string?> ManagedIdentityResourceId { get; private set; } = null!;

        /// <summary>
        /// Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
        /// </summary>
        [Output("mappingRuleName")]
        public Output<string?> MappingRuleName { get; private set; } = null!;

        /// <summary>
        /// The name of the Kusto Event Grid Data Connection to create. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// is the first record of every file ignored? Defaults to `false`.
        /// </summary>
        [Output("skipFirstRecord")]
        public Output<bool?> SkipFirstRecord { get; private set; } = null!;

        /// <summary>
        /// Specifies the resource id of the Storage Account this data connection will use for ingestion. Changing this forces a new resource to be created.
        /// </summary>
        [Output("storageAccountId")]
        public Output<string> StorageAccountId { get; private set; } = null!;

        /// <summary>
        /// Specifies the target table name used for the message ingestion. Table must exist before resource is created.
        /// </summary>
        [Output("tableName")]
        public Output<string?> TableName { get; private set; } = null!;


        /// <summary>
        /// Create a EventGridDataConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventGridDataConnection(string name, EventGridDataConnectionArgs args, CustomResourceOptions? options = null)
            : base("azure:kusto/eventGridDataConnection:EventGridDataConnection", name, args ?? new EventGridDataConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventGridDataConnection(string name, Input<string> id, EventGridDataConnectionState? state = null, CustomResourceOptions? options = null)
            : base("azure:kusto/eventGridDataConnection:EventGridDataConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventGridDataConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventGridDataConnection Get(string name, Input<string> id, EventGridDataConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new EventGridDataConnection(name, id, state, options);
        }
    }

    public sealed class EventGridDataConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the blob storage event type that needs to be processed. Possible Values are `Microsoft.Storage.BlobCreated` and `Microsoft.Storage.BlobRenamed`. Defaults to `Microsoft.Storage.BlobCreated`.
        /// </summary>
        [Input("blobStorageEventType")]
        public Input<string>? BlobStorageEventType { get; set; }

        /// <summary>
        /// Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// Specifies the data format of the EventHub messages. Allowed values: `APACHEAVRO`, `AVRO`, `CSV`, `JSON`, `MULTIJSON`, `ORC`, `PARQUET`, `PSV`, `RAW`, `SCSV`, `SINGLEJSON`, `SOHSV`, `TSV`, `TSVE`, `TXT` and `W3CLOGFILE`.
        /// </summary>
        [Input("dataFormat")]
        public Input<string>? DataFormat { get; set; }

        /// <summary>
        /// Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: `Single`, `Multi`. Changing this forces a new resource to be created. Defaults to `Single`.
        /// </summary>
        [Input("databaseRoutingType")]
        public Input<string>? DatabaseRoutingType { get; set; }

        /// <summary>
        /// The resource ID of the event grid that is subscribed to the storage account events.
        /// </summary>
        [Input("eventgridResourceId")]
        public Input<string>? EventgridResourceId { get; set; }

        /// <summary>
        /// Specifies the Event Hub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
        /// </summary>
        [Input("eventhubConsumerGroupName", required: true)]
        public Input<string> EventhubConsumerGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the resource id of the Event Hub this data connection will use for ingestion. Changing this forces a new resource to be created.
        /// </summary>
        [Input("eventhubId", required: true)]
        public Input<string> EventhubId { get; set; } = null!;

        /// <summary>
        /// The location where the Kusto Database should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Empty for non-managed identity based data connection. For system assigned identity, provide cluster resource Id. For user assigned identity (UAI) provide the UAI resource Id.
        /// </summary>
        [Input("managedIdentityResourceId")]
        public Input<string>? ManagedIdentityResourceId { get; set; }

        /// <summary>
        /// Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
        /// </summary>
        [Input("mappingRuleName")]
        public Input<string>? MappingRuleName { get; set; }

        /// <summary>
        /// The name of the Kusto Event Grid Data Connection to create. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// is the first record of every file ignored? Defaults to `false`.
        /// </summary>
        [Input("skipFirstRecord")]
        public Input<bool>? SkipFirstRecord { get; set; }

        /// <summary>
        /// Specifies the resource id of the Storage Account this data connection will use for ingestion. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageAccountId", required: true)]
        public Input<string> StorageAccountId { get; set; } = null!;

        /// <summary>
        /// Specifies the target table name used for the message ingestion. Table must exist before resource is created.
        /// </summary>
        [Input("tableName")]
        public Input<string>? TableName { get; set; }

        public EventGridDataConnectionArgs()
        {
        }
        public static new EventGridDataConnectionArgs Empty => new EventGridDataConnectionArgs();
    }

    public sealed class EventGridDataConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the blob storage event type that needs to be processed. Possible Values are `Microsoft.Storage.BlobCreated` and `Microsoft.Storage.BlobRenamed`. Defaults to `Microsoft.Storage.BlobCreated`.
        /// </summary>
        [Input("blobStorageEventType")]
        public Input<string>? BlobStorageEventType { get; set; }

        /// <summary>
        /// Specifies the name of the Kusto Cluster this data connection will be added to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// Specifies the data format of the EventHub messages. Allowed values: `APACHEAVRO`, `AVRO`, `CSV`, `JSON`, `MULTIJSON`, `ORC`, `PARQUET`, `PSV`, `RAW`, `SCSV`, `SINGLEJSON`, `SOHSV`, `TSV`, `TSVE`, `TXT` and `W3CLOGFILE`.
        /// </summary>
        [Input("dataFormat")]
        public Input<string>? DataFormat { get; set; }

        /// <summary>
        /// Specifies the name of the Kusto Database this data connection will be added to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// Indication for database routing information from the data connection, by default only database routing information is allowed. Allowed values: `Single`, `Multi`. Changing this forces a new resource to be created. Defaults to `Single`.
        /// </summary>
        [Input("databaseRoutingType")]
        public Input<string>? DatabaseRoutingType { get; set; }

        /// <summary>
        /// The resource ID of the event grid that is subscribed to the storage account events.
        /// </summary>
        [Input("eventgridResourceId")]
        public Input<string>? EventgridResourceId { get; set; }

        /// <summary>
        /// Specifies the Event Hub consumer group this data connection will use for ingestion. Changing this forces a new resource to be created.
        /// </summary>
        [Input("eventhubConsumerGroupName")]
        public Input<string>? EventhubConsumerGroupName { get; set; }

        /// <summary>
        /// Specifies the resource id of the Event Hub this data connection will use for ingestion. Changing this forces a new resource to be created.
        /// </summary>
        [Input("eventhubId")]
        public Input<string>? EventhubId { get; set; }

        /// <summary>
        /// The location where the Kusto Database should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Empty for non-managed identity based data connection. For system assigned identity, provide cluster resource Id. For user assigned identity (UAI) provide the UAI resource Id.
        /// </summary>
        [Input("managedIdentityResourceId")]
        public Input<string>? ManagedIdentityResourceId { get; set; }

        /// <summary>
        /// Specifies the mapping rule used for the message ingestion. Mapping rule must exist before resource is created.
        /// </summary>
        [Input("mappingRuleName")]
        public Input<string>? MappingRuleName { get; set; }

        /// <summary>
        /// The name of the Kusto Event Grid Data Connection to create. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the Resource Group where the Kusto Database should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// is the first record of every file ignored? Defaults to `false`.
        /// </summary>
        [Input("skipFirstRecord")]
        public Input<bool>? SkipFirstRecord { get; set; }

        /// <summary>
        /// Specifies the resource id of the Storage Account this data connection will use for ingestion. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageAccountId")]
        public Input<string>? StorageAccountId { get; set; }

        /// <summary>
        /// Specifies the target table name used for the message ingestion. Table must exist before resource is created.
        /// </summary>
        [Input("tableName")]
        public Input<string>? TableName { get; set; }

        public EventGridDataConnectionState()
        {
        }
        public static new EventGridDataConnectionState Empty => new EventGridDataConnectionState();
    }
}
