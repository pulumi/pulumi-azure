// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Stack
{
    /// <summary>
    /// Manages an Azure Stack HCI Extension.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-hci-ext",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleHciExtension = new Azure.Stack.HciExtension("example", new()
    ///     {
    ///         Name = "AzureMonitorWindowsAgent",
    ///         ArcSettingId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-hci/providers/Microsoft.AzureStackHCI/clusters/hci-cl/arcSettings/default",
    ///         Publisher = "Microsoft.Azure.Monitor",
    ///         Type = "MicrosoftMonitoringAgent",
    ///         AutoUpgradeMinorVersionEnabled = true,
    ///         AutomaticUpgradeEnabled = true,
    ///         TypeHandlerVersion = "1.22.0",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.AzureStackHCI` - 2024-01-01
    /// 
    /// ## Import
    /// 
    /// Azure Stack HCI Extension can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:stack/hciExtension:HciExtension example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AzureStackHCI/clusters/cluster1/arcSettings/default/extensions/extension1
    /// ```
    /// </summary>
    [AzureResourceType("azure:stack/hciExtension:HciExtension")]
    public partial class HciExtension : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Azure Stack HCI Cluster Arc Setting. Changing this forces a new resource to be created.
        /// </summary>
        [Output("arcSettingId")]
        public Output<string> ArcSettingId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. Changing this forces a new resource to be created. Possible values are `True` and `False`. Defaults to `True`.
        /// </summary>
        [Output("autoUpgradeMinorVersionEnabled")]
        public Output<bool?> AutoUpgradeMinorVersionEnabled { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. Possible values are `True` and `False`. Defaults to `True`.
        /// </summary>
        [Output("automaticUpgradeEnabled")]
        public Output<bool?> AutomaticUpgradeEnabled { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Azure Stack HCI Extension. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The json formatted protected settings for the extension.
        /// </summary>
        [Output("protectedSettings")]
        public Output<string?> ProtectedSettings { get; private set; } = null!;

        /// <summary>
        /// The name of the extension handler publisher, such as `Microsoft.Azure.Monitor`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("publisher")]
        public Output<string> Publisher { get; private set; } = null!;

        /// <summary>
        /// The json formatted public settings for the extension.
        /// </summary>
        [Output("settings")]
        public Output<string?> Settings { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of the extension. For example `CustomScriptExtension` or `AzureMonitorLinuxAgent`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Specifies the version of the script handler.
        /// 
        /// &gt; **Note:** `TypeHandlerVersion` cannot be set when `AutomaticUpgradeEnabled` is set to `True`.
        /// </summary>
        [Output("typeHandlerVersion")]
        public Output<string?> TypeHandlerVersion { get; private set; } = null!;


        /// <summary>
        /// Create a HciExtension resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HciExtension(string name, HciExtensionArgs args, CustomResourceOptions? options = null)
            : base("azure:stack/hciExtension:HciExtension", name, args ?? new HciExtensionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HciExtension(string name, Input<string> id, HciExtensionState? state = null, CustomResourceOptions? options = null)
            : base("azure:stack/hciExtension:HciExtension", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "protectedSettings",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HciExtension resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HciExtension Get(string name, Input<string> id, HciExtensionState? state = null, CustomResourceOptions? options = null)
        {
            return new HciExtension(name, id, state, options);
        }
    }

    public sealed class HciExtensionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Azure Stack HCI Cluster Arc Setting. Changing this forces a new resource to be created.
        /// </summary>
        [Input("arcSettingId", required: true)]
        public Input<string> ArcSettingId { get; set; } = null!;

        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. Changing this forces a new resource to be created. Possible values are `True` and `False`. Defaults to `True`.
        /// </summary>
        [Input("autoUpgradeMinorVersionEnabled")]
        public Input<bool>? AutoUpgradeMinorVersionEnabled { get; set; }

        /// <summary>
        /// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. Possible values are `True` and `False`. Defaults to `True`.
        /// </summary>
        [Input("automaticUpgradeEnabled")]
        public Input<bool>? AutomaticUpgradeEnabled { get; set; }

        /// <summary>
        /// The name which should be used for this Azure Stack HCI Extension. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("protectedSettings")]
        private Input<string>? _protectedSettings;

        /// <summary>
        /// The json formatted protected settings for the extension.
        /// </summary>
        public Input<string>? ProtectedSettings
        {
            get => _protectedSettings;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _protectedSettings = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the extension handler publisher, such as `Microsoft.Azure.Monitor`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("publisher", required: true)]
        public Input<string> Publisher { get; set; } = null!;

        /// <summary>
        /// The json formatted public settings for the extension.
        /// </summary>
        [Input("settings")]
        public Input<string>? Settings { get; set; }

        /// <summary>
        /// Specifies the type of the extension. For example `CustomScriptExtension` or `AzureMonitorLinuxAgent`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Specifies the version of the script handler.
        /// 
        /// &gt; **Note:** `TypeHandlerVersion` cannot be set when `AutomaticUpgradeEnabled` is set to `True`.
        /// </summary>
        [Input("typeHandlerVersion")]
        public Input<string>? TypeHandlerVersion { get; set; }

        public HciExtensionArgs()
        {
        }
        public static new HciExtensionArgs Empty => new HciExtensionArgs();
    }

    public sealed class HciExtensionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Azure Stack HCI Cluster Arc Setting. Changing this forces a new resource to be created.
        /// </summary>
        [Input("arcSettingId")]
        public Input<string>? ArcSettingId { get; set; }

        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. Changing this forces a new resource to be created. Possible values are `True` and `False`. Defaults to `True`.
        /// </summary>
        [Input("autoUpgradeMinorVersionEnabled")]
        public Input<bool>? AutoUpgradeMinorVersionEnabled { get; set; }

        /// <summary>
        /// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. Possible values are `True` and `False`. Defaults to `True`.
        /// </summary>
        [Input("automaticUpgradeEnabled")]
        public Input<bool>? AutomaticUpgradeEnabled { get; set; }

        /// <summary>
        /// The name which should be used for this Azure Stack HCI Extension. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("protectedSettings")]
        private Input<string>? _protectedSettings;

        /// <summary>
        /// The json formatted protected settings for the extension.
        /// </summary>
        public Input<string>? ProtectedSettings
        {
            get => _protectedSettings;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _protectedSettings = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the extension handler publisher, such as `Microsoft.Azure.Monitor`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("publisher")]
        public Input<string>? Publisher { get; set; }

        /// <summary>
        /// The json formatted public settings for the extension.
        /// </summary>
        [Input("settings")]
        public Input<string>? Settings { get; set; }

        /// <summary>
        /// Specifies the type of the extension. For example `CustomScriptExtension` or `AzureMonitorLinuxAgent`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Specifies the version of the script handler.
        /// 
        /// &gt; **Note:** `TypeHandlerVersion` cannot be set when `AutomaticUpgradeEnabled` is set to `True`.
        /// </summary>
        [Input("typeHandlerVersion")]
        public Input<string>? TypeHandlerVersion { get; set; }

        public HciExtensionState()
        {
        }
        public static new HciExtensionState Empty => new HciExtensionState();
    }
}
