// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Stack
{
    /// <summary>
    /// Manages an Azure Stack HCI Virtual Hard Disk.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-rg",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleHciStoragePath = new Azure.Stack.HciStoragePath("example", new()
    ///     {
    ///         Name = "example-sp",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         CustomLocationId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ExtendedLocation/customLocations/cl1",
    ///         Path = "C:\\ClusterStorage\\UserStorage_2\\sp-example",
    ///         Tags = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    ///     var exampleHciVirtualHardDisk = new Azure.Stack.HciVirtualHardDisk("example", new()
    ///     {
    ///         Name = "example-vhd",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         CustomLocationId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ExtendedLocation/customLocations/cl1",
    ///         DiskSizeInGb = 2,
    ///         StoragePathId = exampleHciStoragePath.Id,
    ///         Tags = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.AzureStackHCI` - 2024-01-01
    /// 
    /// ## Import
    /// 
    /// Azure Stack HCI Virtual Hard Disks can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:stack/hciVirtualHardDisk:HciVirtualHardDisk example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.AzureStackHCI/virtualHardDisks/disk1
    /// ```
    /// </summary>
    [AzureResourceType("azure:stack/hciVirtualHardDisk:HciVirtualHardDisk")]
    public partial class HciVirtualHardDisk : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Output("blockSizeInBytes")]
        public Output<int?> BlockSizeInBytes { get; private set; } = null!;

        /// <summary>
        /// The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Output("customLocationId")]
        public Output<string> CustomLocationId { get; private set; } = null!;

        /// <summary>
        /// The format of the disk file. Possible values are `Vhdx` and `Vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Output("diskFileFormat")]
        public Output<string?> DiskFileFormat { get; private set; } = null!;

        /// <summary>
        /// The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Output("diskSizeInGb")]
        public Output<int> DiskSizeInGb { get; private set; } = null!;

        /// <summary>
        /// Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `False`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Output("dynamicEnabled")]
        public Output<bool?> DynamicEnabled { get; private set; } = null!;

        /// <summary>
        /// The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Output("hypervGeneration")]
        public Output<string?> HypervGeneration { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Output("logicalSectorInBytes")]
        public Output<int?> LogicalSectorInBytes { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Output("physicalSectorInBytes")]
        public Output<int?> PhysicalSectorInBytes { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// 
        /// &gt; **Note:** If `StoragePathId` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `IgnoreChanges`.
        /// </summary>
        [Output("storagePathId")]
        public Output<string?> StoragePathId { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a HciVirtualHardDisk resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HciVirtualHardDisk(string name, HciVirtualHardDiskArgs args, CustomResourceOptions? options = null)
            : base("azure:stack/hciVirtualHardDisk:HciVirtualHardDisk", name, args ?? new HciVirtualHardDiskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HciVirtualHardDisk(string name, Input<string> id, HciVirtualHardDiskState? state = null, CustomResourceOptions? options = null)
            : base("azure:stack/hciVirtualHardDisk:HciVirtualHardDisk", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HciVirtualHardDisk resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HciVirtualHardDisk Get(string name, Input<string> id, HciVirtualHardDiskState? state = null, CustomResourceOptions? options = null)
        {
            return new HciVirtualHardDisk(name, id, state, options);
        }
    }

    public sealed class HciVirtualHardDiskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("blockSizeInBytes")]
        public Input<int>? BlockSizeInBytes { get; set; }

        /// <summary>
        /// The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("customLocationId", required: true)]
        public Input<string> CustomLocationId { get; set; } = null!;

        /// <summary>
        /// The format of the disk file. Possible values are `Vhdx` and `Vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("diskFileFormat")]
        public Input<string>? DiskFileFormat { get; set; }

        /// <summary>
        /// The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("diskSizeInGb", required: true)]
        public Input<int> DiskSizeInGb { get; set; } = null!;

        /// <summary>
        /// Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `False`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("dynamicEnabled")]
        public Input<bool>? DynamicEnabled { get; set; }

        /// <summary>
        /// The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("hypervGeneration")]
        public Input<string>? HypervGeneration { get; set; }

        /// <summary>
        /// The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("logicalSectorInBytes")]
        public Input<int>? LogicalSectorInBytes { get; set; }

        /// <summary>
        /// The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("physicalSectorInBytes")]
        public Input<int>? PhysicalSectorInBytes { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// 
        /// &gt; **Note:** If `StoragePathId` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `IgnoreChanges`.
        /// </summary>
        [Input("storagePathId")]
        public Input<string>? StoragePathId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public HciVirtualHardDiskArgs()
        {
        }
        public static new HciVirtualHardDiskArgs Empty => new HciVirtualHardDiskArgs();
    }

    public sealed class HciVirtualHardDiskState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The block size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("blockSizeInBytes")]
        public Input<int>? BlockSizeInBytes { get; set; }

        /// <summary>
        /// The ID of the Custom Location where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("customLocationId")]
        public Input<string>? CustomLocationId { get; set; }

        /// <summary>
        /// The format of the disk file. Possible values are `Vhdx` and `Vhd`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("diskFileFormat")]
        public Input<string>? DiskFileFormat { get; set; }

        /// <summary>
        /// The size of the disk in GB. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("diskSizeInGb")]
        public Input<int>? DiskSizeInGb { get; set; }

        /// <summary>
        /// Whether to enable dynamic sizing for the Azure Stack HCI Virtual Hard Disk. Defaults to `False`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("dynamicEnabled")]
        public Input<bool>? DynamicEnabled { get; set; }

        /// <summary>
        /// The hypervisor generation of the Azure Stack HCI Virtual Hard Disk. Possible values are `V1` and `V2`. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("hypervGeneration")]
        public Input<string>? HypervGeneration { get; set; }

        /// <summary>
        /// The Azure Region where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The logical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("logicalSectorInBytes")]
        public Input<int>? LogicalSectorInBytes { get; set; }

        /// <summary>
        /// The name which should be used for this Azure Stack HCI Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The physical sector size of the disk in bytes. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("physicalSectorInBytes")]
        public Input<int>? PhysicalSectorInBytes { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Azure Stack HCI Virtual Hard Disk should exist. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The ID of the Azure Stack HCI Storage Path used for this Virtual Hard Disk. Changing this forces a new Azure Stack HCI Virtual Hard Disk to be created.
        /// 
        /// &gt; **Note:** If `StoragePathId` is not specified, the Virtual Hard Disk will be placed in a high availability Storage Path. If you experience a diff you may need to add this to `IgnoreChanges`.
        /// </summary>
        [Input("storagePathId")]
        public Input<string>? StoragePathId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Azure Stack HCI Virtual Hard Disk.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public HciVirtualHardDiskState()
        {
        }
        public static new HciVirtualHardDiskState Empty => new HciVirtualHardDiskState();
    }
}
