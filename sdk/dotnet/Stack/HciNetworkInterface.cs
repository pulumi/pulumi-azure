// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Stack
{
    /// <summary>
    /// Manages an Azure Stack HCI Network Interface.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-rg",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleHciLogicalNetwork = new Azure.Stack.HciLogicalNetwork("example", new()
    ///     {
    ///         Name = "example-hci-ln",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         CustomLocationId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ExtendedLocation/customLocations/cl1",
    ///         VirtualSwitchName = "ConvergedSwitch(managementcompute)",
    ///         DnsServers = new[]
    ///         {
    ///             "10.0.0.7",
    ///             "10.0.0.8",
    ///         },
    ///         Subnet = new Azure.Stack.Inputs.HciLogicalNetworkSubnetArgs
    ///         {
    ///             IpAllocationMethod = "Static",
    ///             AddressPrefix = "10.0.0.0/24",
    ///             Route = 
    ///             {
    ///                 { "name", "example-route" },
    ///                 { "addressPrefix", "0.0.0.0/0" },
    ///                 { "nextHopIpAddress", "10.0.20.1" },
    ///             },
    ///             VlanId = 123,
    ///         },
    ///         Tags = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    ///     var exampleHciNetworkInterface = new Azure.Stack.HciNetworkInterface("example", new()
    ///     {
    ///         Name = "example-ni",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         CustomLocationId = "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.ExtendedLocation/customLocations/cl1",
    ///         DnsServers = new[]
    ///         {
    ///             "10.0.0.8",
    ///         },
    ///         IpConfiguration = new Azure.Stack.Inputs.HciNetworkInterfaceIpConfigurationArgs
    ///         {
    ///             PrivateIpAddress = "10.0.0.2",
    ///             SubnetId = test.Id,
    ///         },
    ///         Tags = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.AzureStackHCI` - 2024-01-01
    /// 
    /// ## Import
    /// 
    /// Azure Stack HCI Network Interfaces can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:stack/hciNetworkInterface:HciNetworkInterface example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AzureStackHCI/networkInterfaces/ni1
    /// ```
    /// </summary>
    [AzureResourceType("azure:stack/hciNetworkInterface:HciNetworkInterface")]
    public partial class HciNetworkInterface : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Custom Location where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("customLocationId")]
        public Output<string> CustomLocationId { get; private set; } = null!;

        /// <summary>
        /// A list of IPv4 addresses of DNS servers available to VMs deployed in the Network Interface. Changing this forces a new resource to be created.
        /// </summary>
        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        /// <summary>
        /// An `IpConfiguration` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("ipConfiguration")]
        public Output<Outputs.HciNetworkInterfaceIpConfiguration> IpConfiguration { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The MAC address of the Network Interface. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** If `MacAddress` is not specified, it will be assigned by the server. If you experience a diff you may need to add this to `IgnoreChanges`.
        /// </summary>
        [Output("macAddress")]
        public Output<string?> MacAddress { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Azure Stack HCI Network Interface. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Azure Stack HCI Network Interface.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a HciNetworkInterface resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HciNetworkInterface(string name, HciNetworkInterfaceArgs args, CustomResourceOptions? options = null)
            : base("azure:stack/hciNetworkInterface:HciNetworkInterface", name, args ?? new HciNetworkInterfaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HciNetworkInterface(string name, Input<string> id, HciNetworkInterfaceState? state = null, CustomResourceOptions? options = null)
            : base("azure:stack/hciNetworkInterface:HciNetworkInterface", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HciNetworkInterface resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HciNetworkInterface Get(string name, Input<string> id, HciNetworkInterfaceState? state = null, CustomResourceOptions? options = null)
        {
            return new HciNetworkInterface(name, id, state, options);
        }
    }

    public sealed class HciNetworkInterfaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Custom Location where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("customLocationId", required: true)]
        public Input<string> CustomLocationId { get; set; } = null!;

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// A list of IPv4 addresses of DNS servers available to VMs deployed in the Network Interface. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// An `IpConfiguration` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ipConfiguration", required: true)]
        public Input<Inputs.HciNetworkInterfaceIpConfigurationArgs> IpConfiguration { get; set; } = null!;

        /// <summary>
        /// The Azure Region where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The MAC address of the Network Interface. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** If `MacAddress` is not specified, it will be assigned by the server. If you experience a diff you may need to add this to `IgnoreChanges`.
        /// </summary>
        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        /// <summary>
        /// The name which should be used for this Azure Stack HCI Network Interface. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Azure Stack HCI Network Interface.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public HciNetworkInterfaceArgs()
        {
        }
        public static new HciNetworkInterfaceArgs Empty => new HciNetworkInterfaceArgs();
    }

    public sealed class HciNetworkInterfaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Custom Location where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("customLocationId")]
        public Input<string>? CustomLocationId { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// A list of IPv4 addresses of DNS servers available to VMs deployed in the Network Interface. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// An `IpConfiguration` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ipConfiguration")]
        public Input<Inputs.HciNetworkInterfaceIpConfigurationGetArgs>? IpConfiguration { get; set; }

        /// <summary>
        /// The Azure Region where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The MAC address of the Network Interface. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** If `MacAddress` is not specified, it will be assigned by the server. If you experience a diff you may need to add this to `IgnoreChanges`.
        /// </summary>
        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        /// <summary>
        /// The name which should be used for this Azure Stack HCI Network Interface. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Azure Stack HCI Network Interface should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Azure Stack HCI Network Interface.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public HciNetworkInterfaceState()
        {
        }
        public static new HciNetworkInterfaceState Empty => new HciNetworkInterfaceState();
    }
}
