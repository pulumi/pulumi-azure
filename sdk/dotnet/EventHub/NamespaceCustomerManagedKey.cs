// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.EventHub
{
    /// <summary>
    /// Manages a Customer Managed Key for a EventHub Namespace.
    /// 
    /// !&gt; **Note:** In 2.x versions of the Azure Provider during deletion this resource will **delete and recreate the parent EventHub Namespace which may involve data loss** as it's not possible to remove the Customer Managed Key from the EventHub Namespace once it's been added. Version 3.0 of the Azure Provider will change this so that the Delete operation is a noop, requiring the parent EventHub Namespace is deleted/recreated to remove the Customer Managed Key.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleCluster = new Azure.EventHub.Cluster("exampleCluster", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         SkuName = "Dedicated_1",
    ///     });
    /// 
    ///     var exampleEventHubNamespace = new Azure.EventHub.EventHubNamespace("exampleEventHubNamespace", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "Standard",
    ///         DedicatedClusterId = exampleCluster.Id,
    ///         Identity = new Azure.EventHub.Inputs.EventHubNamespaceIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("exampleKeyVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SkuName = "standard",
    ///         PurgeProtectionEnabled = true,
    ///     });
    /// 
    ///     var exampleAccessPolicy = new Azure.KeyVault.AccessPolicy("exampleAccessPolicy", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         TenantId = exampleEventHubNamespace.Identity.Apply(identity =&gt; identity?.TenantId),
    ///         ObjectId = exampleEventHubNamespace.Identity.Apply(identity =&gt; identity?.PrincipalId),
    ///         KeyPermissions = new[]
    ///         {
    ///             "Get",
    ///             "UnwrapKey",
    ///             "WrapKey",
    ///         },
    ///     });
    /// 
    ///     var example2 = new Azure.KeyVault.AccessPolicy("example2", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///         KeyPermissions = new[]
    ///         {
    ///             "Create",
    ///             "Delete",
    ///             "Get",
    ///             "List",
    ///             "Purge",
    ///             "Recover",
    ///             "GetRotationPolicy",
    ///         },
    ///     });
    /// 
    ///     var exampleKey = new Azure.KeyVault.Key("exampleKey", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         KeyType = "RSA",
    ///         KeySize = 2048,
    ///         KeyOpts = new[]
    ///         {
    ///             "decrypt",
    ///             "encrypt",
    ///             "sign",
    ///             "unwrapKey",
    ///             "verify",
    ///             "wrapKey",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleAccessPolicy,
    ///             example2,
    ///         },
    ///     });
    /// 
    ///     var exampleNamespaceCustomerManagedKey = new Azure.EventHub.NamespaceCustomerManagedKey("exampleNamespaceCustomerManagedKey", new()
    ///     {
    ///         EventhubNamespaceId = exampleEventHubNamespace.Id,
    ///         KeyVaultKeyIds = new[]
    ///         {
    ///             exampleKey.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Customer Managed Keys for a EventHub Namespace can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:eventhub/namespaceCustomerManagedKey:NamespaceCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventHub/namespaces/namespace1
    /// ```
    /// </summary>
    [AzureResourceType("azure:eventhub/namespaceCustomerManagedKey:NamespaceCustomerManagedKey")]
    public partial class NamespaceCustomerManagedKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the EventHub Namespace. Changing this forces a new resource to be created.
        /// </summary>
        [Output("eventhubNamespaceId")]
        public Output<string> EventhubNamespaceId { get; private set; } = null!;

        /// <summary>
        /// The list of keys of Key Vault.
        /// </summary>
        [Output("keyVaultKeyIds")]
        public Output<ImmutableArray<string>> KeyVaultKeyIds { get; private set; } = null!;


        /// <summary>
        /// Create a NamespaceCustomerManagedKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NamespaceCustomerManagedKey(string name, NamespaceCustomerManagedKeyArgs args, CustomResourceOptions? options = null)
            : base("azure:eventhub/namespaceCustomerManagedKey:NamespaceCustomerManagedKey", name, args ?? new NamespaceCustomerManagedKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NamespaceCustomerManagedKey(string name, Input<string> id, NamespaceCustomerManagedKeyState? state = null, CustomResourceOptions? options = null)
            : base("azure:eventhub/namespaceCustomerManagedKey:NamespaceCustomerManagedKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NamespaceCustomerManagedKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NamespaceCustomerManagedKey Get(string name, Input<string> id, NamespaceCustomerManagedKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new NamespaceCustomerManagedKey(name, id, state, options);
        }
    }

    public sealed class NamespaceCustomerManagedKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the EventHub Namespace. Changing this forces a new resource to be created.
        /// </summary>
        [Input("eventhubNamespaceId", required: true)]
        public Input<string> EventhubNamespaceId { get; set; } = null!;

        [Input("keyVaultKeyIds", required: true)]
        private InputList<string>? _keyVaultKeyIds;

        /// <summary>
        /// The list of keys of Key Vault.
        /// </summary>
        public InputList<string> KeyVaultKeyIds
        {
            get => _keyVaultKeyIds ?? (_keyVaultKeyIds = new InputList<string>());
            set => _keyVaultKeyIds = value;
        }

        public NamespaceCustomerManagedKeyArgs()
        {
        }
        public static new NamespaceCustomerManagedKeyArgs Empty => new NamespaceCustomerManagedKeyArgs();
    }

    public sealed class NamespaceCustomerManagedKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the EventHub Namespace. Changing this forces a new resource to be created.
        /// </summary>
        [Input("eventhubNamespaceId")]
        public Input<string>? EventhubNamespaceId { get; set; }

        [Input("keyVaultKeyIds")]
        private InputList<string>? _keyVaultKeyIds;

        /// <summary>
        /// The list of keys of Key Vault.
        /// </summary>
        public InputList<string> KeyVaultKeyIds
        {
            get => _keyVaultKeyIds ?? (_keyVaultKeyIds = new InputList<string>());
            set => _keyVaultKeyIds = value;
        }

        public NamespaceCustomerManagedKeyState()
        {
        }
        public static new NamespaceCustomerManagedKeyState Empty => new NamespaceCustomerManagedKeyState();
    }
}
