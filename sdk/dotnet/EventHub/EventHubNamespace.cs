// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.EventHub
{
    /// <summary>
    /// Manages an EventHub Namespace.
    /// 
    /// ## Import
    /// 
    /// EventHub Namespaces can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:eventhub/eventHubNamespace:EventHubNamespace namespace1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventHub/namespaces/namespace1
    /// ```
    /// </summary>
    [AzureResourceType("azure:eventhub/eventHubNamespace:EventHubNamespace")]
    public partial class EventHubNamespace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Is Auto Inflate enabled for the EventHub Namespace?
        /// </summary>
        [Output("autoInflateEnabled")]
        public Output<bool?> AutoInflateEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the Capacity / Throughput Units for a `Standard` SKU namespace. Default capacity has a maximum of `2`, but can be increased in blocks of 2 on a committed purchase basis. Defaults to `1`.
        /// </summary>
        [Output("capacity")]
        public Output<int?> Capacity { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the EventHub Dedicated Cluster where this Namespace should created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("dedicatedClusterId")]
        public Output<string?> DedicatedClusterId { get; private set; } = null!;

        /// <summary>
        /// The primary connection string for the authorization rule `RootManageSharedAccessKey`.
        /// </summary>
        [Output("defaultPrimaryConnectionString")]
        public Output<string> DefaultPrimaryConnectionString { get; private set; } = null!;

        /// <summary>
        /// The alias of the primary connection string for the authorization rule `RootManageSharedAccessKey`, which is generated when disaster recovery is enabled.
        /// </summary>
        [Output("defaultPrimaryConnectionStringAlias")]
        public Output<string> DefaultPrimaryConnectionStringAlias { get; private set; } = null!;

        /// <summary>
        /// The primary access key for the authorization rule `RootManageSharedAccessKey`.
        /// </summary>
        [Output("defaultPrimaryKey")]
        public Output<string> DefaultPrimaryKey { get; private set; } = null!;

        /// <summary>
        /// The secondary connection string for the authorization rule `RootManageSharedAccessKey`.
        /// </summary>
        [Output("defaultSecondaryConnectionString")]
        public Output<string> DefaultSecondaryConnectionString { get; private set; } = null!;

        /// <summary>
        /// The alias of the secondary connection string for the authorization rule `RootManageSharedAccessKey`, which is generated when disaster recovery is enabled.
        /// </summary>
        [Output("defaultSecondaryConnectionStringAlias")]
        public Output<string> DefaultSecondaryConnectionStringAlias { get; private set; } = null!;

        /// <summary>
        /// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
        /// </summary>
        [Output("defaultSecondaryKey")]
        public Output<string> DefaultSecondaryKey { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.EventHubNamespaceIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Is SAS authentication enabled for the EventHub Namespace? Defaults to `true`.
        /// </summary>
        [Output("localAuthenticationEnabled")]
        public Output<bool?> LocalAuthenticationEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum number of throughput units when Auto Inflate is Enabled. Valid values range from `1` - `20`.
        /// </summary>
        [Output("maximumThroughputUnits")]
        public Output<int> MaximumThroughputUnits { get; private set; } = null!;

        /// <summary>
        /// The minimum supported TLS version for this EventHub Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
        /// </summary>
        [Output("minimumTlsVersion")]
        public Output<string> MinimumTlsVersion { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the EventHub Namespace resource. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `network_rulesets` block as defined below.
        /// </summary>
        [Output("networkRulesets")]
        public Output<Outputs.EventHubNamespaceNetworkRulesets> NetworkRulesets { get; private set; } = null!;

        /// <summary>
        /// Is public network access enabled for the EventHub Namespace? Defaults to `true`.
        /// </summary>
        [Output("publicNetworkAccessEnabled")]
        public Output<bool?> PublicNetworkAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the namespace. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Defines which tier to use. Valid options are `Basic`, `Standard`, and `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
        /// </summary>
        [Output("sku")]
        public Output<string> Sku { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies if the EventHub Namespace should be Zone Redundant (created across Availability Zones). Changing this forces a new resource to be created. Defaults to `false`.
        /// 
        /// &gt; **Note:** For eventhub premium namespace, `zone_redundant` is computed by api based on the availability zone feature in each region. User's input will be overridden. Please explicitly sets the property to `true` when creating the premium namespace in a region that supports availability zone since the default value is `false` in 3.0 provider.
        /// </summary>
        [Output("zoneRedundant")]
        public Output<bool?> ZoneRedundant { get; private set; } = null!;


        /// <summary>
        /// Create a EventHubNamespace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventHubNamespace(string name, EventHubNamespaceArgs args, CustomResourceOptions? options = null)
            : base("azure:eventhub/eventHubNamespace:EventHubNamespace", name, args ?? new EventHubNamespaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventHubNamespace(string name, Input<string> id, EventHubNamespaceState? state = null, CustomResourceOptions? options = null)
            : base("azure:eventhub/eventHubNamespace:EventHubNamespace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "defaultPrimaryConnectionString",
                    "defaultPrimaryConnectionStringAlias",
                    "defaultPrimaryKey",
                    "defaultSecondaryConnectionString",
                    "defaultSecondaryConnectionStringAlias",
                    "defaultSecondaryKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventHubNamespace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventHubNamespace Get(string name, Input<string> id, EventHubNamespaceState? state = null, CustomResourceOptions? options = null)
        {
            return new EventHubNamespace(name, id, state, options);
        }
    }

    public sealed class EventHubNamespaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is Auto Inflate enabled for the EventHub Namespace?
        /// </summary>
        [Input("autoInflateEnabled")]
        public Input<bool>? AutoInflateEnabled { get; set; }

        /// <summary>
        /// Specifies the Capacity / Throughput Units for a `Standard` SKU namespace. Default capacity has a maximum of `2`, but can be increased in blocks of 2 on a committed purchase basis. Defaults to `1`.
        /// </summary>
        [Input("capacity")]
        public Input<int>? Capacity { get; set; }

        /// <summary>
        /// Specifies the ID of the EventHub Dedicated Cluster where this Namespace should created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("dedicatedClusterId")]
        public Input<string>? DedicatedClusterId { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.EventHubNamespaceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Is SAS authentication enabled for the EventHub Namespace? Defaults to `true`.
        /// </summary>
        [Input("localAuthenticationEnabled")]
        public Input<bool>? LocalAuthenticationEnabled { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the maximum number of throughput units when Auto Inflate is Enabled. Valid values range from `1` - `20`.
        /// </summary>
        [Input("maximumThroughputUnits")]
        public Input<int>? MaximumThroughputUnits { get; set; }

        /// <summary>
        /// The minimum supported TLS version for this EventHub Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
        /// </summary>
        [Input("minimumTlsVersion")]
        public Input<string>? MinimumTlsVersion { get; set; }

        /// <summary>
        /// Specifies the name of the EventHub Namespace resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `network_rulesets` block as defined below.
        /// </summary>
        [Input("networkRulesets")]
        public Input<Inputs.EventHubNamespaceNetworkRulesetsArgs>? NetworkRulesets { get; set; }

        /// <summary>
        /// Is public network access enabled for the EventHub Namespace? Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the namespace. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Defines which tier to use. Valid options are `Basic`, `Standard`, and `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
        /// </summary>
        [Input("sku", required: true)]
        public Input<string> Sku { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies if the EventHub Namespace should be Zone Redundant (created across Availability Zones). Changing this forces a new resource to be created. Defaults to `false`.
        /// 
        /// &gt; **Note:** For eventhub premium namespace, `zone_redundant` is computed by api based on the availability zone feature in each region. User's input will be overridden. Please explicitly sets the property to `true` when creating the premium namespace in a region that supports availability zone since the default value is `false` in 3.0 provider.
        /// </summary>
        [Input("zoneRedundant")]
        public Input<bool>? ZoneRedundant { get; set; }

        public EventHubNamespaceArgs()
        {
        }
        public static new EventHubNamespaceArgs Empty => new EventHubNamespaceArgs();
    }

    public sealed class EventHubNamespaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is Auto Inflate enabled for the EventHub Namespace?
        /// </summary>
        [Input("autoInflateEnabled")]
        public Input<bool>? AutoInflateEnabled { get; set; }

        /// <summary>
        /// Specifies the Capacity / Throughput Units for a `Standard` SKU namespace. Default capacity has a maximum of `2`, but can be increased in blocks of 2 on a committed purchase basis. Defaults to `1`.
        /// </summary>
        [Input("capacity")]
        public Input<int>? Capacity { get; set; }

        /// <summary>
        /// Specifies the ID of the EventHub Dedicated Cluster where this Namespace should created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("dedicatedClusterId")]
        public Input<string>? DedicatedClusterId { get; set; }

        [Input("defaultPrimaryConnectionString")]
        private Input<string>? _defaultPrimaryConnectionString;

        /// <summary>
        /// The primary connection string for the authorization rule `RootManageSharedAccessKey`.
        /// </summary>
        public Input<string>? DefaultPrimaryConnectionString
        {
            get => _defaultPrimaryConnectionString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _defaultPrimaryConnectionString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("defaultPrimaryConnectionStringAlias")]
        private Input<string>? _defaultPrimaryConnectionStringAlias;

        /// <summary>
        /// The alias of the primary connection string for the authorization rule `RootManageSharedAccessKey`, which is generated when disaster recovery is enabled.
        /// </summary>
        public Input<string>? DefaultPrimaryConnectionStringAlias
        {
            get => _defaultPrimaryConnectionStringAlias;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _defaultPrimaryConnectionStringAlias = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("defaultPrimaryKey")]
        private Input<string>? _defaultPrimaryKey;

        /// <summary>
        /// The primary access key for the authorization rule `RootManageSharedAccessKey`.
        /// </summary>
        public Input<string>? DefaultPrimaryKey
        {
            get => _defaultPrimaryKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _defaultPrimaryKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("defaultSecondaryConnectionString")]
        private Input<string>? _defaultSecondaryConnectionString;

        /// <summary>
        /// The secondary connection string for the authorization rule `RootManageSharedAccessKey`.
        /// </summary>
        public Input<string>? DefaultSecondaryConnectionString
        {
            get => _defaultSecondaryConnectionString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _defaultSecondaryConnectionString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("defaultSecondaryConnectionStringAlias")]
        private Input<string>? _defaultSecondaryConnectionStringAlias;

        /// <summary>
        /// The alias of the secondary connection string for the authorization rule `RootManageSharedAccessKey`, which is generated when disaster recovery is enabled.
        /// </summary>
        public Input<string>? DefaultSecondaryConnectionStringAlias
        {
            get => _defaultSecondaryConnectionStringAlias;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _defaultSecondaryConnectionStringAlias = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("defaultSecondaryKey")]
        private Input<string>? _defaultSecondaryKey;

        /// <summary>
        /// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
        /// </summary>
        public Input<string>? DefaultSecondaryKey
        {
            get => _defaultSecondaryKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _defaultSecondaryKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.EventHubNamespaceIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// Is SAS authentication enabled for the EventHub Namespace? Defaults to `true`.
        /// </summary>
        [Input("localAuthenticationEnabled")]
        public Input<bool>? LocalAuthenticationEnabled { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Specifies the maximum number of throughput units when Auto Inflate is Enabled. Valid values range from `1` - `20`.
        /// </summary>
        [Input("maximumThroughputUnits")]
        public Input<int>? MaximumThroughputUnits { get; set; }

        /// <summary>
        /// The minimum supported TLS version for this EventHub Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
        /// </summary>
        [Input("minimumTlsVersion")]
        public Input<string>? MinimumTlsVersion { get; set; }

        /// <summary>
        /// Specifies the name of the EventHub Namespace resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `network_rulesets` block as defined below.
        /// </summary>
        [Input("networkRulesets")]
        public Input<Inputs.EventHubNamespaceNetworkRulesetsGetArgs>? NetworkRulesets { get; set; }

        /// <summary>
        /// Is public network access enabled for the EventHub Namespace? Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the namespace. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Defines which tier to use. Valid options are `Basic`, `Standard`, and `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies if the EventHub Namespace should be Zone Redundant (created across Availability Zones). Changing this forces a new resource to be created. Defaults to `false`.
        /// 
        /// &gt; **Note:** For eventhub premium namespace, `zone_redundant` is computed by api based on the availability zone feature in each region. User's input will be overridden. Please explicitly sets the property to `true` when creating the premium namespace in a region that supports availability zone since the default value is `false` in 3.0 provider.
        /// </summary>
        [Input("zoneRedundant")]
        public Input<bool>? ZoneRedundant { get; set; }

        public EventHubNamespaceState()
        {
        }
        public static new EventHubNamespaceState Empty => new EventHubNamespaceState();
    }
}
