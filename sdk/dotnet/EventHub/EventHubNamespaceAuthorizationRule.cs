// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.EventHub
{
    /// <summary>
    /// Manages an Authorization Rule for an Event Hub Namespace.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleEventHubNamespace = new Azure.EventHub.EventHubNamespace("exampleEventHubNamespace", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "Basic",
    ///         Capacity = 2,
    ///         Tags = 
    ///         {
    ///             { "environment", "Production" },
    ///         },
    ///     });
    /// 
    ///     var exampleEventHubNamespaceAuthorizationRule = new Azure.EventHub.EventHubNamespaceAuthorizationRule("exampleEventHubNamespaceAuthorizationRule", new()
    ///     {
    ///         NamespaceName = exampleEventHubNamespace.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Listen = true,
    ///         Send = false,
    ///         Manage = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// EventHub Namespace Authorization Rules can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:eventhub/eventHubNamespaceAuthorizationRule:EventHubNamespaceAuthorizationRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventHub/namespaces/namespace1/authorizationRules/rule1
    /// ```
    /// </summary>
    [AzureResourceType("azure:eventhub/eventHubNamespaceAuthorizationRule:EventHubNamespaceAuthorizationRule")]
    public partial class EventHubNamespaceAuthorizationRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Grants listen access to this this Authorization Rule. Defaults to `false`.
        /// </summary>
        [Output("listen")]
        public Output<bool?> Listen { get; private set; } = null!;

        /// <summary>
        /// Grants manage access to this this Authorization Rule. When this property is `true` - both `listen` and `send` must be too. Defaults to `false`.
        /// </summary>
        [Output("manage")]
        public Output<bool?> Manage { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Authorization Rule. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.
        /// </summary>
        [Output("namespaceName")]
        public Output<string> NamespaceName { get; private set; } = null!;

        /// <summary>
        /// The Primary Connection String for the Authorization Rule.
        /// </summary>
        [Output("primaryConnectionString")]
        public Output<string> PrimaryConnectionString { get; private set; } = null!;

        /// <summary>
        /// The alias of the Primary Connection String for the Authorization Rule, which is generated when disaster recovery is enabled.
        /// </summary>
        [Output("primaryConnectionStringAlias")]
        public Output<string> PrimaryConnectionStringAlias { get; private set; } = null!;

        /// <summary>
        /// The Primary Key for the Authorization Rule.
        /// </summary>
        [Output("primaryKey")]
        public Output<string> PrimaryKey { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which the EventHub Namespace exists. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE** At least one of the 3 permissions below needs to be set.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The Secondary Connection String for the Authorization Rule.
        /// </summary>
        [Output("secondaryConnectionString")]
        public Output<string> SecondaryConnectionString { get; private set; } = null!;

        /// <summary>
        /// The alias of the Secondary Connection String for the Authorization Rule, which is generated when disaster recovery is enabled.
        /// </summary>
        [Output("secondaryConnectionStringAlias")]
        public Output<string> SecondaryConnectionStringAlias { get; private set; } = null!;

        /// <summary>
        /// The Secondary Key for the Authorization Rule.
        /// </summary>
        [Output("secondaryKey")]
        public Output<string> SecondaryKey { get; private set; } = null!;

        /// <summary>
        /// Grants send access to this this Authorization Rule. Defaults to `false`.
        /// </summary>
        [Output("send")]
        public Output<bool?> Send { get; private set; } = null!;


        /// <summary>
        /// Create a EventHubNamespaceAuthorizationRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventHubNamespaceAuthorizationRule(string name, EventHubNamespaceAuthorizationRuleArgs args, CustomResourceOptions? options = null)
            : base("azure:eventhub/eventHubNamespaceAuthorizationRule:EventHubNamespaceAuthorizationRule", name, args ?? new EventHubNamespaceAuthorizationRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventHubNamespaceAuthorizationRule(string name, Input<string> id, EventHubNamespaceAuthorizationRuleState? state = null, CustomResourceOptions? options = null)
            : base("azure:eventhub/eventHubNamespaceAuthorizationRule:EventHubNamespaceAuthorizationRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "primaryConnectionString",
                    "primaryConnectionStringAlias",
                    "primaryKey",
                    "secondaryConnectionString",
                    "secondaryConnectionStringAlias",
                    "secondaryKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventHubNamespaceAuthorizationRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventHubNamespaceAuthorizationRule Get(string name, Input<string> id, EventHubNamespaceAuthorizationRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new EventHubNamespaceAuthorizationRule(name, id, state, options);
        }
    }

    public sealed class EventHubNamespaceAuthorizationRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Grants listen access to this this Authorization Rule. Defaults to `false`.
        /// </summary>
        [Input("listen")]
        public Input<bool>? Listen { get; set; }

        /// <summary>
        /// Grants manage access to this this Authorization Rule. When this property is `true` - both `listen` and `send` must be too. Defaults to `false`.
        /// </summary>
        [Input("manage")]
        public Input<bool>? Manage { get; set; }

        /// <summary>
        /// Specifies the name of the Authorization Rule. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which the EventHub Namespace exists. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE** At least one of the 3 permissions below needs to be set.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Grants send access to this this Authorization Rule. Defaults to `false`.
        /// </summary>
        [Input("send")]
        public Input<bool>? Send { get; set; }

        public EventHubNamespaceAuthorizationRuleArgs()
        {
        }
        public static new EventHubNamespaceAuthorizationRuleArgs Empty => new EventHubNamespaceAuthorizationRuleArgs();
    }

    public sealed class EventHubNamespaceAuthorizationRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Grants listen access to this this Authorization Rule. Defaults to `false`.
        /// </summary>
        [Input("listen")]
        public Input<bool>? Listen { get; set; }

        /// <summary>
        /// Grants manage access to this this Authorization Rule. When this property is `true` - both `listen` and `send` must be too. Defaults to `false`.
        /// </summary>
        [Input("manage")]
        public Input<bool>? Manage { get; set; }

        /// <summary>
        /// Specifies the name of the Authorization Rule. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.
        /// </summary>
        [Input("namespaceName")]
        public Input<string>? NamespaceName { get; set; }

        [Input("primaryConnectionString")]
        private Input<string>? _primaryConnectionString;

        /// <summary>
        /// The Primary Connection String for the Authorization Rule.
        /// </summary>
        public Input<string>? PrimaryConnectionString
        {
            get => _primaryConnectionString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _primaryConnectionString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("primaryConnectionStringAlias")]
        private Input<string>? _primaryConnectionStringAlias;

        /// <summary>
        /// The alias of the Primary Connection String for the Authorization Rule, which is generated when disaster recovery is enabled.
        /// </summary>
        public Input<string>? PrimaryConnectionStringAlias
        {
            get => _primaryConnectionStringAlias;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _primaryConnectionStringAlias = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("primaryKey")]
        private Input<string>? _primaryKey;

        /// <summary>
        /// The Primary Key for the Authorization Rule.
        /// </summary>
        public Input<string>? PrimaryKey
        {
            get => _primaryKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _primaryKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the resource group in which the EventHub Namespace exists. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE** At least one of the 3 permissions below needs to be set.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("secondaryConnectionString")]
        private Input<string>? _secondaryConnectionString;

        /// <summary>
        /// The Secondary Connection String for the Authorization Rule.
        /// </summary>
        public Input<string>? SecondaryConnectionString
        {
            get => _secondaryConnectionString;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secondaryConnectionString = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("secondaryConnectionStringAlias")]
        private Input<string>? _secondaryConnectionStringAlias;

        /// <summary>
        /// The alias of the Secondary Connection String for the Authorization Rule, which is generated when disaster recovery is enabled.
        /// </summary>
        public Input<string>? SecondaryConnectionStringAlias
        {
            get => _secondaryConnectionStringAlias;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secondaryConnectionStringAlias = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("secondaryKey")]
        private Input<string>? _secondaryKey;

        /// <summary>
        /// The Secondary Key for the Authorization Rule.
        /// </summary>
        public Input<string>? SecondaryKey
        {
            get => _secondaryKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secondaryKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Grants send access to this this Authorization Rule. Defaults to `false`.
        /// </summary>
        [Input("send")]
        public Input<bool>? Send { get; set; }

        public EventHubNamespaceAuthorizationRuleState()
        {
        }
        public static new EventHubNamespaceAuthorizationRuleState Empty => new EventHubNamespaceAuthorizationRuleState();
    }
}
