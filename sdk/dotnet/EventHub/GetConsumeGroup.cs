// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Azure.EventHub
{
    public static class GetConsumeGroup
    {
        /// <summary>
        /// Use this data source to access information about an existing Event Hubs Consumer Group within an Event Hub.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Azure.EventHub.GetConsumeGroup.InvokeAsync(new Azure.EventHub.GetConsumeGroupArgs
        ///         {
        ///             EventhubName = azurerm_eventhub.Test.Name,
        ///             Name = azurerm_eventhub_consumer_group.Test.Name,
        ///             NamespaceName = azurerm_eventhub_namespace.Test.Name,
        ///             ResourceGroupName = azurerm_resource_group.Test.Name,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetConsumeGroupResult> InvokeAsync(GetConsumeGroupArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConsumeGroupResult>("azure:eventhub/getConsumeGroup:getConsumeGroup", args ?? new GetConsumeGroupArgs(), options.WithVersion());

        /// <summary>
        /// Use this data source to access information about an existing Event Hubs Consumer Group within an Event Hub.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Azure.EventHub.GetConsumeGroup.InvokeAsync(new Azure.EventHub.GetConsumeGroupArgs
        ///         {
        ///             EventhubName = azurerm_eventhub.Test.Name,
        ///             Name = azurerm_eventhub_consumer_group.Test.Name,
        ///             NamespaceName = azurerm_eventhub_namespace.Test.Name,
        ///             ResourceGroupName = azurerm_resource_group.Test.Name,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetConsumeGroupResult> Invoke(GetConsumeGroupInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetConsumeGroupResult>("azure:eventhub/getConsumeGroup:getConsumeGroup", args ?? new GetConsumeGroupInvokeArgs(), options.WithVersion());
    }


    public sealed class GetConsumeGroupArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the EventHub.
        /// </summary>
        [Input("eventhubName", required: true)]
        public string EventhubName { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the EventHub Consumer Group resource.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the grandparent EventHub Namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which the EventHub Consumer Group's grandparent Namespace exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetConsumeGroupArgs()
        {
        }
    }

    public sealed class GetConsumeGroupInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies the name of the EventHub.
        /// </summary>
        [Input("eventhubName", required: true)]
        public Input<string> EventhubName { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the EventHub Consumer Group resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the grandparent EventHub Namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group in which the EventHub Consumer Group's grandparent Namespace exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetConsumeGroupInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetConsumeGroupResult
    {
        public readonly string EventhubName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Location;
        public readonly string Name;
        public readonly string NamespaceName;
        public readonly string ResourceGroupName;
        /// <summary>
        /// Specifies the user metadata.
        /// </summary>
        public readonly string UserMetadata;

        [OutputConstructor]
        private GetConsumeGroupResult(
            string eventhubName,

            string id,

            string location,

            string name,

            string namespaceName,

            string resourceGroupName,

            string userMetadata)
        {
            EventhubName = eventhubName;
            Id = id;
            Location = location;
            Name = name;
            NamespaceName = namespaceName;
            ResourceGroupName = resourceGroupName;
            UserMetadata = userMetadata;
        }
    }
}
