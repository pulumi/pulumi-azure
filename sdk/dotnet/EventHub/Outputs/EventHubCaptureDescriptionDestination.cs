// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.EventHub.Outputs
{

    [OutputType]
    public sealed class EventHubCaptureDescriptionDestination
    {
        /// <summary>
        /// The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
        /// </summary>
        public readonly string ArchiveNameFormat;
        /// <summary>
        /// The name of the Container within the Blob Storage Account where messages should be archived.
        /// </summary>
        public readonly string BlobContainerName;
        /// <summary>
        /// The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
        /// 
        /// &gt; At this time it's only possible to Capture EventHub messages to Blob Storage. There's [a Feature Request for the Azure SDK to add support for Capturing messages to Azure Data Lake here](https://github.com/Azure/azure-rest-api-specs/issues/2255).
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ID of the Blob Storage Account where messages should be archived.
        /// </summary>
        public readonly string StorageAccountId;

        [OutputConstructor]
        private EventHubCaptureDescriptionDestination(
            string archiveNameFormat,

            string blobContainerName,

            string name,

            string storageAccountId)
        {
            ArchiveNameFormat = archiveNameFormat;
            BlobContainerName = blobContainerName;
            Name = name;
            StorageAccountId = storageAccountId;
        }
    }
}
