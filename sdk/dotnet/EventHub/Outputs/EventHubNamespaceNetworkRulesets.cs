// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.EventHub.Outputs
{

    [OutputType]
    public sealed class EventHubNamespaceNetworkRulesets
    {
        /// <summary>
        /// The default action to take when a rule is not matched. Possible values are `Allow` and `Deny`.
        /// </summary>
        public readonly string DefaultAction;
        /// <summary>
        /// One or more `IpRule` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.EventHubNamespaceNetworkRulesetsIpRule> IpRules;
        /// <summary>
        /// Is public network access enabled for the EventHub Namespace? Defaults to `True`.
        /// 
        /// &gt; **Note:** The public network access setting at the network rule sets level should be the same as it's at the namespace level.
        /// </summary>
        public readonly bool? PublicNetworkAccessEnabled;
        /// <summary>
        /// Whether Trusted Microsoft Services are allowed to bypass firewall.
        /// </summary>
        public readonly bool? TrustedServiceAccessEnabled;
        /// <summary>
        /// One or more `VirtualNetworkRule` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.EventHubNamespaceNetworkRulesetsVirtualNetworkRule> VirtualNetworkRules;

        [OutputConstructor]
        private EventHubNamespaceNetworkRulesets(
            string defaultAction,

            ImmutableArray<Outputs.EventHubNamespaceNetworkRulesetsIpRule> ipRules,

            bool? publicNetworkAccessEnabled,

            bool? trustedServiceAccessEnabled,

            ImmutableArray<Outputs.EventHubNamespaceNetworkRulesetsVirtualNetworkRule> virtualNetworkRules)
        {
            DefaultAction = defaultAction;
            IpRules = ipRules;
            PublicNetworkAccessEnabled = publicNetworkAccessEnabled;
            TrustedServiceAccessEnabled = trustedServiceAccessEnabled;
            VirtualNetworkRules = virtualNetworkRules;
        }
    }
}
