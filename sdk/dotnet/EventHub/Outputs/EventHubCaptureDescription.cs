// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.EventHub.Outputs
{

    [OutputType]
    public sealed class EventHubCaptureDescription
    {
        /// <summary>
        /// A `destination` block as defined below.
        /// </summary>
        public readonly Outputs.EventHubCaptureDescriptionDestination Destination;
        /// <summary>
        /// Specifies if the Capture Description is Enabled.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
        /// </summary>
        public readonly string Encoding;
        /// <summary>
        /// Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
        /// </summary>
        public readonly int? IntervalInSeconds;
        /// <summary>
        /// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000`  bytes. Defaults to `314572800` bytes.
        /// </summary>
        public readonly int? SizeLimitInBytes;
        /// <summary>
        /// Specifies if empty files should not be emitted if no events occur during the Capture time window.  Defaults to `false`.
        /// </summary>
        public readonly bool? SkipEmptyArchives;

        [OutputConstructor]
        private EventHubCaptureDescription(
            Outputs.EventHubCaptureDescriptionDestination destination,

            bool enabled,

            string encoding,

            int? intervalInSeconds,

            int? sizeLimitInBytes,

            bool? skipEmptyArchives)
        {
            Destination = destination;
            Enabled = enabled;
            Encoding = encoding;
            IntervalInSeconds = intervalInSeconds;
            SizeLimitInBytes = sizeLimitInBytes;
            SkipEmptyArchives = skipEmptyArchives;
        }
    }
}
