// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Synapse
{
    /// <summary>
    /// Manages an Azure Active Directory SQL Administrator setting for a Synapse Workspace
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///         AccountKind = "StorageV2",
    ///         IsHnsEnabled = true,
    ///     });
    /// 
    ///     var exampleDataLakeGen2Filesystem = new Azure.Storage.DataLakeGen2Filesystem("exampleDataLakeGen2Filesystem", new()
    ///     {
    ///         StorageAccountId = exampleAccount.Id,
    ///     });
    /// 
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("exampleKeyVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SkuName = "standard",
    ///         PurgeProtectionEnabled = true,
    ///     });
    /// 
    ///     var deployer = new Azure.KeyVault.AccessPolicy("deployer", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///         KeyPermissions = new[]
    ///         {
    ///             "Create",
    ///             "Get",
    ///             "Delete",
    ///             "Purge",
    ///         },
    ///     });
    /// 
    ///     var exampleKey = new Azure.KeyVault.Key("exampleKey", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         KeyType = "RSA",
    ///         KeySize = 2048,
    ///         KeyOpts = new[]
    ///         {
    ///             "unwrapKey",
    ///             "wrapKey",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             deployer,
    ///         },
    ///     });
    /// 
    ///     var exampleWorkspace = new Azure.Synapse.Workspace("exampleWorkspace", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         StorageDataLakeGen2FilesystemId = exampleDataLakeGen2Filesystem.Id,
    ///         SqlAdministratorLogin = "sqladminuser",
    ///         SqlAdministratorLoginPassword = "H@Sh1CoR3!",
    ///         Identity = new Azure.Synapse.Inputs.WorkspaceIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Env", "production" },
    ///         },
    ///     });
    /// 
    ///     var exampleWorkspaceSqlAadAdmin = new Azure.Synapse.WorkspaceSqlAadAdmin("exampleWorkspaceSqlAadAdmin", new()
    ///     {
    ///         SynapseWorkspaceId = exampleWorkspace.Id,
    ///         Login = "AzureAD Admin",
    ///         ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Synapse Workspace Azure AD Administrator can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:synapse/workspaceSqlAadAdmin:WorkspaceSqlAadAdmin example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Synapse/workspaces/workspace1/sqlAdministrators/activeDirectory
    /// ```
    /// </summary>
    [AzureResourceType("azure:synapse/workspaceSqlAadAdmin:WorkspaceSqlAadAdmin")]
    public partial class WorkspaceSqlAadAdmin : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The login name of the Azure AD Administrator of this Synapse Workspace.
        /// </summary>
        [Output("login")]
        public Output<string> Login { get; private set; } = null!;

        /// <summary>
        /// The object id of the Azure AD Administrator of this Synapse Workspace.
        /// </summary>
        [Output("objectId")]
        public Output<string> ObjectId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Synapse Workspace where the Azure AD Administrator should be configured.
        /// </summary>
        [Output("synapseWorkspaceId")]
        public Output<string> SynapseWorkspaceId { get; private set; } = null!;

        /// <summary>
        /// The tenant id of the Azure AD Administrator of this Synapse Workspace.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a WorkspaceSqlAadAdmin resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkspaceSqlAadAdmin(string name, WorkspaceSqlAadAdminArgs args, CustomResourceOptions? options = null)
            : base("azure:synapse/workspaceSqlAadAdmin:WorkspaceSqlAadAdmin", name, args ?? new WorkspaceSqlAadAdminArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkspaceSqlAadAdmin(string name, Input<string> id, WorkspaceSqlAadAdminState? state = null, CustomResourceOptions? options = null)
            : base("azure:synapse/workspaceSqlAadAdmin:WorkspaceSqlAadAdmin", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkspaceSqlAadAdmin resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkspaceSqlAadAdmin Get(string name, Input<string> id, WorkspaceSqlAadAdminState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkspaceSqlAadAdmin(name, id, state, options);
        }
    }

    public sealed class WorkspaceSqlAadAdminArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The login name of the Azure AD Administrator of this Synapse Workspace.
        /// </summary>
        [Input("login", required: true)]
        public Input<string> Login { get; set; } = null!;

        /// <summary>
        /// The object id of the Azure AD Administrator of this Synapse Workspace.
        /// </summary>
        [Input("objectId", required: true)]
        public Input<string> ObjectId { get; set; } = null!;

        /// <summary>
        /// The ID of the Synapse Workspace where the Azure AD Administrator should be configured.
        /// </summary>
        [Input("synapseWorkspaceId", required: true)]
        public Input<string> SynapseWorkspaceId { get; set; } = null!;

        /// <summary>
        /// The tenant id of the Azure AD Administrator of this Synapse Workspace.
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        public WorkspaceSqlAadAdminArgs()
        {
        }
        public static new WorkspaceSqlAadAdminArgs Empty => new WorkspaceSqlAadAdminArgs();
    }

    public sealed class WorkspaceSqlAadAdminState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The login name of the Azure AD Administrator of this Synapse Workspace.
        /// </summary>
        [Input("login")]
        public Input<string>? Login { get; set; }

        /// <summary>
        /// The object id of the Azure AD Administrator of this Synapse Workspace.
        /// </summary>
        [Input("objectId")]
        public Input<string>? ObjectId { get; set; }

        /// <summary>
        /// The ID of the Synapse Workspace where the Azure AD Administrator should be configured.
        /// </summary>
        [Input("synapseWorkspaceId")]
        public Input<string>? SynapseWorkspaceId { get; set; }

        /// <summary>
        /// The tenant id of the Azure AD Administrator of this Synapse Workspace.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public WorkspaceSqlAadAdminState()
        {
        }
        public static new WorkspaceSqlAadAdminState Empty => new WorkspaceSqlAadAdminState();
    }
}
