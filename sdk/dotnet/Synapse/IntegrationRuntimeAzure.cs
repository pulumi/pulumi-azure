// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Synapse
{
    /// <summary>
    /// Manages a Synapse Azure Integration Runtime.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleContainer = new Azure.Storage.Container("exampleContainer", new()
    ///     {
    ///         StorageAccountName = exampleAccount.Name,
    ///         ContainerAccessType = "private",
    ///     });
    /// 
    ///     var exampleDataLakeGen2Filesystem = new Azure.Storage.DataLakeGen2Filesystem("exampleDataLakeGen2Filesystem", new()
    ///     {
    ///         StorageAccountId = exampleAccount.Id,
    ///     });
    /// 
    ///     var exampleWorkspace = new Azure.Synapse.Workspace("exampleWorkspace", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         StorageDataLakeGen2FilesystemId = exampleDataLakeGen2Filesystem.Id,
    ///         SqlAdministratorLogin = "sqladminuser",
    ///         SqlAdministratorLoginPassword = "H@Sh1CoR3!",
    ///         ManagedVirtualNetworkEnabled = true,
    ///         Identity = new Azure.Synapse.Inputs.WorkspaceIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleFirewallRule = new Azure.Synapse.FirewallRule("exampleFirewallRule", new()
    ///     {
    ///         SynapseWorkspaceId = exampleWorkspace.Id,
    ///         StartIpAddress = "0.0.0.0",
    ///         EndIpAddress = "255.255.255.255",
    ///     });
    /// 
    ///     var exampleIntegrationRuntimeAzure = new Azure.Synapse.IntegrationRuntimeAzure("exampleIntegrationRuntimeAzure", new()
    ///     {
    ///         SynapseWorkspaceId = exampleWorkspace.Id,
    ///         Location = exampleResourceGroup.Location,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Synapse Azure Integration Runtimes can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:synapse/integrationRuntimeAzure:IntegrationRuntimeAzure example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Synapse/workspaces/workspace1/integrationruntimes/IntegrationRuntime1
    /// ```
    /// </summary>
    [AzureResourceType("azure:synapse/integrationRuntimeAzure:IntegrationRuntimeAzure")]
    public partial class IntegrationRuntimeAzure : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Compute type of the cluster which will execute data flow job. Valid values are `General`, `ComputeOptimized` and `MemoryOptimized`. Defaults to `General`.
        /// </summary>
        [Output("computeType")]
        public Output<string?> ComputeType { get; private set; } = null!;

        /// <summary>
        /// Core count of the cluster which will execute data flow job. Valid values are `8`, `16`, `32`, `48`, `80`, `144` and `272`. Defaults to `8`.
        /// </summary>
        [Output("coreCount")]
        public Output<int?> CoreCount { get; private set; } = null!;

        /// <summary>
        /// Integration runtime description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Synapse Azure Integration Runtime should exist. Use `AutoResolve` to create an auto-resolve integration runtime. Changing this forces a new Synapse Azure Integration Runtime to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Synapse Azure Integration Runtime. Changing this forces a new Synapse Azure Integration Runtime to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Synapse Workspace ID in which to associate the Integration Runtime with. Changing this forces a new Synapse Azure Integration Runtime to be created.
        /// </summary>
        [Output("synapseWorkspaceId")]
        public Output<string> SynapseWorkspaceId { get; private set; } = null!;

        /// <summary>
        /// Time to live (in minutes) setting of the cluster which will execute data flow job. Defaults to `0`.
        /// </summary>
        [Output("timeToLiveMin")]
        public Output<int?> TimeToLiveMin { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationRuntimeAzure resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationRuntimeAzure(string name, IntegrationRuntimeAzureArgs args, CustomResourceOptions? options = null)
            : base("azure:synapse/integrationRuntimeAzure:IntegrationRuntimeAzure", name, args ?? new IntegrationRuntimeAzureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationRuntimeAzure(string name, Input<string> id, IntegrationRuntimeAzureState? state = null, CustomResourceOptions? options = null)
            : base("azure:synapse/integrationRuntimeAzure:IntegrationRuntimeAzure", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationRuntimeAzure resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationRuntimeAzure Get(string name, Input<string> id, IntegrationRuntimeAzureState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationRuntimeAzure(name, id, state, options);
        }
    }

    public sealed class IntegrationRuntimeAzureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Compute type of the cluster which will execute data flow job. Valid values are `General`, `ComputeOptimized` and `MemoryOptimized`. Defaults to `General`.
        /// </summary>
        [Input("computeType")]
        public Input<string>? ComputeType { get; set; }

        /// <summary>
        /// Core count of the cluster which will execute data flow job. Valid values are `8`, `16`, `32`, `48`, `80`, `144` and `272`. Defaults to `8`.
        /// </summary>
        [Input("coreCount")]
        public Input<int>? CoreCount { get; set; }

        /// <summary>
        /// Integration runtime description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Azure Region where the Synapse Azure Integration Runtime should exist. Use `AutoResolve` to create an auto-resolve integration runtime. Changing this forces a new Synapse Azure Integration Runtime to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Synapse Azure Integration Runtime. Changing this forces a new Synapse Azure Integration Runtime to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Synapse Workspace ID in which to associate the Integration Runtime with. Changing this forces a new Synapse Azure Integration Runtime to be created.
        /// </summary>
        [Input("synapseWorkspaceId", required: true)]
        public Input<string> SynapseWorkspaceId { get; set; } = null!;

        /// <summary>
        /// Time to live (in minutes) setting of the cluster which will execute data flow job. Defaults to `0`.
        /// </summary>
        [Input("timeToLiveMin")]
        public Input<int>? TimeToLiveMin { get; set; }

        public IntegrationRuntimeAzureArgs()
        {
        }
        public static new IntegrationRuntimeAzureArgs Empty => new IntegrationRuntimeAzureArgs();
    }

    public sealed class IntegrationRuntimeAzureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Compute type of the cluster which will execute data flow job. Valid values are `General`, `ComputeOptimized` and `MemoryOptimized`. Defaults to `General`.
        /// </summary>
        [Input("computeType")]
        public Input<string>? ComputeType { get; set; }

        /// <summary>
        /// Core count of the cluster which will execute data flow job. Valid values are `8`, `16`, `32`, `48`, `80`, `144` and `272`. Defaults to `8`.
        /// </summary>
        [Input("coreCount")]
        public Input<int>? CoreCount { get; set; }

        /// <summary>
        /// Integration runtime description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Azure Region where the Synapse Azure Integration Runtime should exist. Use `AutoResolve` to create an auto-resolve integration runtime. Changing this forces a new Synapse Azure Integration Runtime to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name which should be used for this Synapse Azure Integration Runtime. Changing this forces a new Synapse Azure Integration Runtime to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Synapse Workspace ID in which to associate the Integration Runtime with. Changing this forces a new Synapse Azure Integration Runtime to be created.
        /// </summary>
        [Input("synapseWorkspaceId")]
        public Input<string>? SynapseWorkspaceId { get; set; }

        /// <summary>
        /// Time to live (in minutes) setting of the cluster which will execute data flow job. Defaults to `0`.
        /// </summary>
        [Input("timeToLiveMin")]
        public Input<int>? TimeToLiveMin { get; set; }

        public IntegrationRuntimeAzureState()
        {
        }
        public static new IntegrationRuntimeAzureState Empty => new IntegrationRuntimeAzureState();
    }
}
