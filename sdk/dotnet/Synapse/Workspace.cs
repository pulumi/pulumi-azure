// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Synapse
{
    /// <summary>
    /// Manages a Synapse Workspace.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///         AccountKind = "StorageV2",
    ///         IsHnsEnabled = true,
    ///     });
    /// 
    ///     var exampleDataLakeGen2Filesystem = new Azure.Storage.DataLakeGen2Filesystem("exampleDataLakeGen2Filesystem", new()
    ///     {
    ///         StorageAccountId = exampleAccount.Id,
    ///     });
    /// 
    ///     var exampleWorkspace = new Azure.Synapse.Workspace("exampleWorkspace", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         StorageDataLakeGen2FilesystemId = exampleDataLakeGen2Filesystem.Id,
    ///         SqlAdministratorLogin = "sqladminuser",
    ///         SqlAdministratorLoginPassword = "H@Sh1CoR3!",
    ///         AadAdmin = new Azure.Synapse.Inputs.WorkspaceAadAdminArgs
    ///         {
    ///             Login = "AzureAD Admin",
    ///             ObjectId = "00000000-0000-0000-0000-000000000000",
    ///             TenantId = "00000000-0000-0000-0000-000000000000",
    ///         },
    ///         Identity = new Azure.Synapse.Inputs.WorkspaceIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Env", "production" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Creating A Workspace With Customer Managed Key And Azure AD Admin
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///         AccountKind = "StorageV2",
    ///         IsHnsEnabled = true,
    ///     });
    /// 
    ///     var exampleDataLakeGen2Filesystem = new Azure.Storage.DataLakeGen2Filesystem("exampleDataLakeGen2Filesystem", new()
    ///     {
    ///         StorageAccountId = exampleAccount.Id,
    ///     });
    /// 
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("exampleKeyVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SkuName = "standard",
    ///         PurgeProtectionEnabled = true,
    ///     });
    /// 
    ///     var deployer = new Azure.KeyVault.AccessPolicy("deployer", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///         KeyPermissions = new[]
    ///         {
    ///             "Create",
    ///             "Get",
    ///             "Delete",
    ///             "Purge",
    ///         },
    ///     });
    /// 
    ///     var exampleKey = new Azure.KeyVault.Key("exampleKey", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         KeyType = "RSA",
    ///         KeySize = 2048,
    ///         KeyOpts = new[]
    ///         {
    ///             "unwrapKey",
    ///             "wrapKey",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             deployer,
    ///         },
    ///     });
    /// 
    ///     var exampleWorkspace = new Azure.Synapse.Workspace("exampleWorkspace", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         StorageDataLakeGen2FilesystemId = exampleDataLakeGen2Filesystem.Id,
    ///         SqlAdministratorLogin = "sqladminuser",
    ///         SqlAdministratorLoginPassword = "H@Sh1CoR3!",
    ///         CustomerManagedKey = new Azure.Synapse.Inputs.WorkspaceCustomerManagedKeyArgs
    ///         {
    ///             KeyVersionlessId = exampleKey.VersionlessId,
    ///             KeyName = "enckey",
    ///         },
    ///         Identity = new Azure.Synapse.Inputs.WorkspaceIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Env", "production" },
    ///         },
    ///     });
    /// 
    ///     var workspacePolicy = new Azure.KeyVault.AccessPolicy("workspacePolicy", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         TenantId = exampleWorkspace.Identity.Apply(identity =&gt; identity?.TenantId),
    ///         ObjectId = exampleWorkspace.Identity.Apply(identity =&gt; identity?.PrincipalId),
    ///         KeyPermissions = new[]
    ///         {
    ///             "Get",
    ///             "WrapKey",
    ///             "UnwrapKey",
    ///         },
    ///     });
    /// 
    ///     var exampleWorkspaceKey = new Azure.Synapse.WorkspaceKey("exampleWorkspaceKey", new()
    ///     {
    ///         CustomerManagedKeyVersionlessId = exampleKey.VersionlessId,
    ///         SynapseWorkspaceId = exampleWorkspace.Id,
    ///         Active = true,
    ///         CustomerManagedKeyName = "enckey",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             workspacePolicy,
    ///         },
    ///     });
    /// 
    ///     var exampleWorkspaceAadAdmin = new Azure.Synapse.WorkspaceAadAdmin("exampleWorkspaceAadAdmin", new()
    ///     {
    ///         SynapseWorkspaceId = exampleWorkspace.Id,
    ///         Login = "AzureAD Admin",
    ///         ObjectId = "00000000-0000-0000-0000-000000000000",
    ///         TenantId = "00000000-0000-0000-0000-000000000000",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleWorkspaceKey,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Synapse Workspace can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:synapse/workspace:Workspace example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1
    /// ```
    /// </summary>
    [AzureResourceType("azure:synapse/workspace:Workspace")]
    public partial class Workspace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An `aad_admin` block as defined below. Conflicts with `customer_managed_key`.
        /// </summary>
        [Output("aadAdmin")]
        public Output<Outputs.WorkspaceAadAdmin> AadAdmin { get; private set; } = null!;

        /// <summary>
        /// An `azure_devops_repo` block as defined below.
        /// </summary>
        [Output("azureDevopsRepo")]
        public Output<Outputs.WorkspaceAzureDevopsRepo?> AzureDevopsRepo { get; private set; } = null!;

        /// <summary>
        /// Subnet ID used for computes in workspace Changing this forces a new resource to be created.
        /// </summary>
        [Output("computeSubnetId")]
        public Output<string?> ComputeSubnetId { get; private set; } = null!;

        /// <summary>
        /// A list of Connectivity endpoints for this Synapse Workspace.
        /// </summary>
        [Output("connectivityEndpoints")]
        public Output<ImmutableDictionary<string, string>> ConnectivityEndpoints { get; private set; } = null!;

        /// <summary>
        /// A `customer_managed_key` block as defined below. Conflicts with `aad_admin`.
        /// </summary>
        [Output("customerManagedKey")]
        public Output<Outputs.WorkspaceCustomerManagedKey?> CustomerManagedKey { get; private set; } = null!;

        /// <summary>
        /// Is data exfiltration protection enabled in this workspace? If set to `true`, `managed_virtual_network_enabled` must also be set to `true`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("dataExfiltrationProtectionEnabled")]
        public Output<bool?> DataExfiltrationProtectionEnabled { get; private set; } = null!;

        /// <summary>
        /// A `github_repo` block as defined below.
        /// </summary>
        [Output("githubRepo")]
        public Output<Outputs.WorkspaceGithubRepo?> GithubRepo { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.WorkspaceIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// Allowed AAD Tenant Ids For Linking.
        /// </summary>
        [Output("linkingAllowedForAadTenantIds")]
        public Output<ImmutableArray<string>> LinkingAllowedForAadTenantIds { get; private set; } = null!;

        /// <summary>
        /// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Workspace managed resource group. Changing this forces a new resource to be created.
        /// </summary>
        [Output("managedResourceGroupName")]
        public Output<string> ManagedResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Is Virtual Network enabled for all computes in this workspace?  Changing this forces a new resource to be created.
        /// </summary>
        [Output("managedVirtualNetworkEnabled")]
        public Output<bool?> ManagedVirtualNetworkEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether public network access is allowed for the Cognitive Account. Defaults to `true`.
        /// </summary>
        [Output("publicNetworkAccessEnabled")]
        public Output<bool?> PublicNetworkAccessEnabled { get; private set; } = null!;

        /// <summary>
        /// The ID of purview account.
        /// </summary>
        [Output("purviewId")]
        public Output<string?> PurviewId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// An `sql_aad_admin` block as defined below.
        /// </summary>
        [Output("sqlAadAdmin")]
        public Output<Outputs.WorkspaceSqlAadAdmin> SqlAadAdmin { get; private set; } = null!;

        /// <summary>
        /// Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided `aad_admin` or `customer_managed_key` must be provided.
        /// </summary>
        [Output("sqlAdministratorLogin")]
        public Output<string?> SqlAdministratorLogin { get; private set; } = null!;

        /// <summary>
        /// The Password associated with the `sql_administrator_login` for the SQL administrator. If this is not provided `aad_admin` or `customer_managed_key` must be provided.
        /// </summary>
        [Output("sqlAdministratorLoginPassword")]
        public Output<string?> SqlAdministratorLoginPassword { get; private set; } = null!;

        /// <summary>
        /// Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?
        /// </summary>
        [Output("sqlIdentityControlEnabled")]
        public Output<bool?> SqlIdentityControlEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
        /// </summary>
        [Output("storageDataLakeGen2FilesystemId")]
        public Output<string> StorageDataLakeGen2FilesystemId { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Synapse Workspace.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Workspace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Workspace(string name, WorkspaceArgs args, CustomResourceOptions? options = null)
            : base("azure:synapse/workspace:Workspace", name, args ?? new WorkspaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Workspace(string name, Input<string> id, WorkspaceState? state = null, CustomResourceOptions? options = null)
            : base("azure:synapse/workspace:Workspace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "sqlAdministratorLoginPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Workspace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Workspace Get(string name, Input<string> id, WorkspaceState? state = null, CustomResourceOptions? options = null)
        {
            return new Workspace(name, id, state, options);
        }
    }

    public sealed class WorkspaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `aad_admin` block as defined below. Conflicts with `customer_managed_key`.
        /// </summary>
        [Input("aadAdmin")]
        public Input<Inputs.WorkspaceAadAdminArgs>? AadAdmin { get; set; }

        /// <summary>
        /// An `azure_devops_repo` block as defined below.
        /// </summary>
        [Input("azureDevopsRepo")]
        public Input<Inputs.WorkspaceAzureDevopsRepoArgs>? AzureDevopsRepo { get; set; }

        /// <summary>
        /// Subnet ID used for computes in workspace Changing this forces a new resource to be created.
        /// </summary>
        [Input("computeSubnetId")]
        public Input<string>? ComputeSubnetId { get; set; }

        /// <summary>
        /// A `customer_managed_key` block as defined below. Conflicts with `aad_admin`.
        /// </summary>
        [Input("customerManagedKey")]
        public Input<Inputs.WorkspaceCustomerManagedKeyArgs>? CustomerManagedKey { get; set; }

        /// <summary>
        /// Is data exfiltration protection enabled in this workspace? If set to `true`, `managed_virtual_network_enabled` must also be set to `true`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("dataExfiltrationProtectionEnabled")]
        public Input<bool>? DataExfiltrationProtectionEnabled { get; set; }

        /// <summary>
        /// A `github_repo` block as defined below.
        /// </summary>
        [Input("githubRepo")]
        public Input<Inputs.WorkspaceGithubRepoArgs>? GithubRepo { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.WorkspaceIdentityArgs>? Identity { get; set; }

        [Input("linkingAllowedForAadTenantIds")]
        private InputList<string>? _linkingAllowedForAadTenantIds;

        /// <summary>
        /// Allowed AAD Tenant Ids For Linking.
        /// </summary>
        public InputList<string> LinkingAllowedForAadTenantIds
        {
            get => _linkingAllowedForAadTenantIds ?? (_linkingAllowedForAadTenantIds = new InputList<string>());
            set => _linkingAllowedForAadTenantIds = value;
        }

        /// <summary>
        /// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Workspace managed resource group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedResourceGroupName")]
        public Input<string>? ManagedResourceGroupName { get; set; }

        /// <summary>
        /// Is Virtual Network enabled for all computes in this workspace?  Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedVirtualNetworkEnabled")]
        public Input<bool>? ManagedVirtualNetworkEnabled { get; set; }

        /// <summary>
        /// Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether public network access is allowed for the Cognitive Account. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// The ID of purview account.
        /// </summary>
        [Input("purviewId")]
        public Input<string>? PurviewId { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// An `sql_aad_admin` block as defined below.
        /// </summary>
        [Input("sqlAadAdmin")]
        public Input<Inputs.WorkspaceSqlAadAdminArgs>? SqlAadAdmin { get; set; }

        /// <summary>
        /// Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided `aad_admin` or `customer_managed_key` must be provided.
        /// </summary>
        [Input("sqlAdministratorLogin")]
        public Input<string>? SqlAdministratorLogin { get; set; }

        [Input("sqlAdministratorLoginPassword")]
        private Input<string>? _sqlAdministratorLoginPassword;

        /// <summary>
        /// The Password associated with the `sql_administrator_login` for the SQL administrator. If this is not provided `aad_admin` or `customer_managed_key` must be provided.
        /// </summary>
        public Input<string>? SqlAdministratorLoginPassword
        {
            get => _sqlAdministratorLoginPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sqlAdministratorLoginPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?
        /// </summary>
        [Input("sqlIdentityControlEnabled")]
        public Input<bool>? SqlIdentityControlEnabled { get; set; }

        /// <summary>
        /// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageDataLakeGen2FilesystemId", required: true)]
        public Input<string> StorageDataLakeGen2FilesystemId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Synapse Workspace.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public WorkspaceArgs()
        {
        }
        public static new WorkspaceArgs Empty => new WorkspaceArgs();
    }

    public sealed class WorkspaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `aad_admin` block as defined below. Conflicts with `customer_managed_key`.
        /// </summary>
        [Input("aadAdmin")]
        public Input<Inputs.WorkspaceAadAdminGetArgs>? AadAdmin { get; set; }

        /// <summary>
        /// An `azure_devops_repo` block as defined below.
        /// </summary>
        [Input("azureDevopsRepo")]
        public Input<Inputs.WorkspaceAzureDevopsRepoGetArgs>? AzureDevopsRepo { get; set; }

        /// <summary>
        /// Subnet ID used for computes in workspace Changing this forces a new resource to be created.
        /// </summary>
        [Input("computeSubnetId")]
        public Input<string>? ComputeSubnetId { get; set; }

        [Input("connectivityEndpoints")]
        private InputMap<string>? _connectivityEndpoints;

        /// <summary>
        /// A list of Connectivity endpoints for this Synapse Workspace.
        /// </summary>
        public InputMap<string> ConnectivityEndpoints
        {
            get => _connectivityEndpoints ?? (_connectivityEndpoints = new InputMap<string>());
            set => _connectivityEndpoints = value;
        }

        /// <summary>
        /// A `customer_managed_key` block as defined below. Conflicts with `aad_admin`.
        /// </summary>
        [Input("customerManagedKey")]
        public Input<Inputs.WorkspaceCustomerManagedKeyGetArgs>? CustomerManagedKey { get; set; }

        /// <summary>
        /// Is data exfiltration protection enabled in this workspace? If set to `true`, `managed_virtual_network_enabled` must also be set to `true`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("dataExfiltrationProtectionEnabled")]
        public Input<bool>? DataExfiltrationProtectionEnabled { get; set; }

        /// <summary>
        /// A `github_repo` block as defined below.
        /// </summary>
        [Input("githubRepo")]
        public Input<Inputs.WorkspaceGithubRepoGetArgs>? GithubRepo { get; set; }

        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.WorkspaceIdentityGetArgs>? Identity { get; set; }

        [Input("linkingAllowedForAadTenantIds")]
        private InputList<string>? _linkingAllowedForAadTenantIds;

        /// <summary>
        /// Allowed AAD Tenant Ids For Linking.
        /// </summary>
        public InputList<string> LinkingAllowedForAadTenantIds
        {
            get => _linkingAllowedForAadTenantIds ?? (_linkingAllowedForAadTenantIds = new InputList<string>());
            set => _linkingAllowedForAadTenantIds = value;
        }

        /// <summary>
        /// Specifies the Azure Region where the synapse Workspace should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Workspace managed resource group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedResourceGroupName")]
        public Input<string>? ManagedResourceGroupName { get; set; }

        /// <summary>
        /// Is Virtual Network enabled for all computes in this workspace?  Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedVirtualNetworkEnabled")]
        public Input<bool>? ManagedVirtualNetworkEnabled { get; set; }

        /// <summary>
        /// Specifies the name which should be used for this synapse Workspace. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether public network access is allowed for the Cognitive Account. Defaults to `true`.
        /// </summary>
        [Input("publicNetworkAccessEnabled")]
        public Input<bool>? PublicNetworkAccessEnabled { get; set; }

        /// <summary>
        /// The ID of purview account.
        /// </summary>
        [Input("purviewId")]
        public Input<string>? PurviewId { get; set; }

        /// <summary>
        /// Specifies the name of the Resource Group where the synapse Workspace should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// An `sql_aad_admin` block as defined below.
        /// </summary>
        [Input("sqlAadAdmin")]
        public Input<Inputs.WorkspaceSqlAadAdminGetArgs>? SqlAadAdmin { get; set; }

        /// <summary>
        /// Specifies The login name of the SQL administrator. Changing this forces a new resource to be created. If this is not provided `aad_admin` or `customer_managed_key` must be provided.
        /// </summary>
        [Input("sqlAdministratorLogin")]
        public Input<string>? SqlAdministratorLogin { get; set; }

        [Input("sqlAdministratorLoginPassword")]
        private Input<string>? _sqlAdministratorLoginPassword;

        /// <summary>
        /// The Password associated with the `sql_administrator_login` for the SQL administrator. If this is not provided `aad_admin` or `customer_managed_key` must be provided.
        /// </summary>
        public Input<string>? SqlAdministratorLoginPassword
        {
            get => _sqlAdministratorLoginPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sqlAdministratorLoginPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Are pipelines (running as workspace's system assigned identity) allowed to access SQL pools?
        /// </summary>
        [Input("sqlIdentityControlEnabled")]
        public Input<bool>? SqlIdentityControlEnabled { get; set; }

        /// <summary>
        /// Specifies the ID of storage data lake gen2 filesystem resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageDataLakeGen2FilesystemId")]
        public Input<string>? StorageDataLakeGen2FilesystemId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Synapse Workspace.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public WorkspaceState()
        {
        }
        public static new WorkspaceState Empty => new WorkspaceState();
    }
}
