// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Synapse
{
    /// <summary>
    /// Manages the Vulnerability Assessment for a Synapse SQL Pool.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///         AccountKind = "StorageV2",
    ///         IsHnsEnabled = true,
    ///     });
    /// 
    ///     var exampleContainer = new Azure.Storage.Container("exampleContainer", new()
    ///     {
    ///         StorageAccountName = exampleAccount.Name,
    ///     });
    /// 
    ///     var exampleDataLakeGen2Filesystem = new Azure.Storage.DataLakeGen2Filesystem("exampleDataLakeGen2Filesystem", new()
    ///     {
    ///         StorageAccountId = exampleAccount.Id,
    ///     });
    /// 
    ///     var exampleWorkspace = new Azure.Synapse.Workspace("exampleWorkspace", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         StorageDataLakeGen2FilesystemId = exampleDataLakeGen2Filesystem.Id,
    ///         SqlAdministratorLogin = "sqladminuser",
    ///         SqlAdministratorLoginPassword = "H@Sh1CoR3!",
    ///         AadAdmin = new Azure.Synapse.Inputs.WorkspaceAadAdminArgs
    ///         {
    ///             Login = "AzureAD Admin",
    ///             ObjectId = "00000000-0000-0000-0000-000000000000",
    ///             TenantId = "00000000-0000-0000-0000-000000000000",
    ///         },
    ///         Identity = new Azure.Synapse.Inputs.WorkspaceIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Env", "production" },
    ///         },
    ///     });
    /// 
    ///     var exampleSqlPool = new Azure.Synapse.SqlPool("exampleSqlPool", new()
    ///     {
    ///         SynapseWorkspaceId = exampleWorkspace.Id,
    ///         SkuName = "DW100c",
    ///         CreateMode = "Default",
    ///     });
    /// 
    ///     var auditLogs = new Azure.Storage.Account("auditLogs", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleSqlPoolSecurityAlertPolicy = new Azure.Synapse.SqlPoolSecurityAlertPolicy("exampleSqlPoolSecurityAlertPolicy", new()
    ///     {
    ///         SqlPoolId = exampleSqlPool.Id,
    ///         PolicyState = "Enabled",
    ///         StorageEndpoint = auditLogs.PrimaryBlobEndpoint,
    ///         StorageAccountAccessKey = auditLogs.PrimaryAccessKey,
    ///         DisabledAlerts = new[]
    ///         {
    ///             "Sql_Injection",
    ///             "Data_Exfiltration",
    ///         },
    ///         RetentionDays = 20,
    ///     });
    /// 
    ///     var exampleSqlPoolVulnerabilityAssessment = new Azure.Synapse.SqlPoolVulnerabilityAssessment("exampleSqlPoolVulnerabilityAssessment", new()
    ///     {
    ///         SqlPoolSecurityAlertPolicyId = exampleSqlPoolSecurityAlertPolicy.Id,
    ///         StorageContainerPath = Output.Tuple(exampleAccount.PrimaryBlobEndpoint, exampleContainer.Name).Apply(values =&gt;
    ///         {
    ///             var primaryBlobEndpoint = values.Item1;
    ///             var name = values.Item2;
    ///             return $"{primaryBlobEndpoint}{name}/";
    ///         }),
    ///         StorageAccountAccessKey = exampleAccount.PrimaryAccessKey,
    ///         RecurringScans = new Azure.Synapse.Inputs.SqlPoolVulnerabilityAssessmentRecurringScansArgs
    ///         {
    ///             Enabled = true,
    ///             EmailSubscriptionAdminsEnabled = true,
    ///             Emails = new[]
    ///             {
    ///                 "email@example1.com",
    ///                 "email@example2.com",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Synapse SQL Pool Vulnerability Assessment can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:synapse/sqlPoolVulnerabilityAssessment:SqlPoolVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/vulnerabilityAssessments/default
    /// ```
    /// </summary>
    [AzureResourceType("azure:synapse/sqlPoolVulnerabilityAssessment:SqlPoolVulnerabilityAssessment")]
    public partial class SqlPoolVulnerabilityAssessment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        /// </summary>
        [Output("recurringScans")]
        public Output<Outputs.SqlPoolVulnerabilityAssessmentRecurringScans> RecurringScans { get; private set; } = null!;

        /// <summary>
        /// The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
        /// </summary>
        [Output("sqlPoolSecurityAlertPolicyId")]
        public Output<string> SqlPoolSecurityAlertPolicyId { get; private set; } = null!;

        /// <summary>
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        /// </summary>
        [Output("storageAccountAccessKey")]
        public Output<string?> StorageAccountAccessKey { get; private set; } = null!;

        /// <summary>
        /// A blob storage container path to hold the scan results (e.g. https://example.blob.core.windows.net/VaScans/).
        /// </summary>
        [Output("storageContainerPath")]
        public Output<string> StorageContainerPath { get; private set; } = null!;

        /// <summary>
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        /// </summary>
        [Output("storageContainerSasKey")]
        public Output<string?> StorageContainerSasKey { get; private set; } = null!;


        /// <summary>
        /// Create a SqlPoolVulnerabilityAssessment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlPoolVulnerabilityAssessment(string name, SqlPoolVulnerabilityAssessmentArgs args, CustomResourceOptions? options = null)
            : base("azure:synapse/sqlPoolVulnerabilityAssessment:SqlPoolVulnerabilityAssessment", name, args ?? new SqlPoolVulnerabilityAssessmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SqlPoolVulnerabilityAssessment(string name, Input<string> id, SqlPoolVulnerabilityAssessmentState? state = null, CustomResourceOptions? options = null)
            : base("azure:synapse/sqlPoolVulnerabilityAssessment:SqlPoolVulnerabilityAssessment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlPoolVulnerabilityAssessment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlPoolVulnerabilityAssessment Get(string name, Input<string> id, SqlPoolVulnerabilityAssessmentState? state = null, CustomResourceOptions? options = null)
        {
            return new SqlPoolVulnerabilityAssessment(name, id, state, options);
        }
    }

    public sealed class SqlPoolVulnerabilityAssessmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        /// </summary>
        [Input("recurringScans")]
        public Input<Inputs.SqlPoolVulnerabilityAssessmentRecurringScansArgs>? RecurringScans { get; set; }

        /// <summary>
        /// The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sqlPoolSecurityAlertPolicyId", required: true)]
        public Input<string> SqlPoolSecurityAlertPolicyId { get; set; } = null!;

        /// <summary>
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        /// </summary>
        [Input("storageAccountAccessKey")]
        public Input<string>? StorageAccountAccessKey { get; set; }

        /// <summary>
        /// A blob storage container path to hold the scan results (e.g. https://example.blob.core.windows.net/VaScans/).
        /// </summary>
        [Input("storageContainerPath", required: true)]
        public Input<string> StorageContainerPath { get; set; } = null!;

        /// <summary>
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        /// </summary>
        [Input("storageContainerSasKey")]
        public Input<string>? StorageContainerSasKey { get; set; }

        public SqlPoolVulnerabilityAssessmentArgs()
        {
        }
        public static new SqlPoolVulnerabilityAssessmentArgs Empty => new SqlPoolVulnerabilityAssessmentArgs();
    }

    public sealed class SqlPoolVulnerabilityAssessmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        /// </summary>
        [Input("recurringScans")]
        public Input<Inputs.SqlPoolVulnerabilityAssessmentRecurringScansGetArgs>? RecurringScans { get; set; }

        /// <summary>
        /// The ID of the security alert policy of the Synapse SQL Pool. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sqlPoolSecurityAlertPolicyId")]
        public Input<string>? SqlPoolSecurityAlertPolicyId { get; set; }

        /// <summary>
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        /// </summary>
        [Input("storageAccountAccessKey")]
        public Input<string>? StorageAccountAccessKey { get; set; }

        /// <summary>
        /// A blob storage container path to hold the scan results (e.g. https://example.blob.core.windows.net/VaScans/).
        /// </summary>
        [Input("storageContainerPath")]
        public Input<string>? StorageContainerPath { get; set; }

        /// <summary>
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        /// </summary>
        [Input("storageContainerSasKey")]
        public Input<string>? StorageContainerSasKey { get; set; }

        public SqlPoolVulnerabilityAssessmentState()
        {
        }
        public static new SqlPoolVulnerabilityAssessmentState Empty => new SqlPoolVulnerabilityAssessmentState();
    }
}
