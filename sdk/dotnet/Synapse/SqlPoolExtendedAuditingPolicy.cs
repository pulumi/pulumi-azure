// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Synapse
{
    /// <summary>
    /// Manages a Synapse SQL Pool Extended Auditing Policy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///         AccountKind = "BlobStorage",
    ///     });
    /// 
    ///     var exampleDataLakeGen2Filesystem = new Azure.Storage.DataLakeGen2Filesystem("exampleDataLakeGen2Filesystem", new()
    ///     {
    ///         StorageAccountId = exampleAccount.Id,
    ///     });
    /// 
    ///     var exampleWorkspace = new Azure.Synapse.Workspace("exampleWorkspace", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         StorageDataLakeGen2FilesystemId = exampleDataLakeGen2Filesystem.Id,
    ///         SqlAdministratorLogin = "sqladminuser",
    ///         SqlAdministratorLoginPassword = "H@Sh1CoR3!",
    ///         Identity = new Azure.Synapse.Inputs.WorkspaceIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleSqlPool = new Azure.Synapse.SqlPool("exampleSqlPool", new()
    ///     {
    ///         SynapseWorkspaceId = exampleWorkspace.Id,
    ///         SkuName = "DW100c",
    ///         CreateMode = "Default",
    ///     });
    /// 
    ///     var auditLogs = new Azure.Storage.Account("auditLogs", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleSqlPoolExtendedAuditingPolicy = new Azure.Synapse.SqlPoolExtendedAuditingPolicy("exampleSqlPoolExtendedAuditingPolicy", new()
    ///     {
    ///         SqlPoolId = exampleSqlPool.Id,
    ///         StorageEndpoint = auditLogs.PrimaryBlobEndpoint,
    ///         StorageAccountAccessKey = auditLogs.PrimaryAccessKey,
    ///         StorageAccountAccessKeyIsSecondary = false,
    ///         RetentionInDays = 6,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Synapse SQL Pool Extended Auditing Policys can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:synapse/sqlPoolExtendedAuditingPolicy:SqlPoolExtendedAuditingPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/extendedAuditingSettings/default
    /// ```
    /// </summary>
    [AzureResourceType("azure:synapse/sqlPoolExtendedAuditingPolicy:SqlPoolExtendedAuditingPolicy")]
    public partial class SqlPoolExtendedAuditingPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor.
        /// </summary>
        [Output("logMonitoringEnabled")]
        public Output<bool?> LogMonitoringEnabled { get; private set; } = null!;

        /// <summary>
        /// The number of days to retain logs for in the storage account.
        /// </summary>
        [Output("retentionInDays")]
        public Output<int?> RetentionInDays { get; private set; } = null!;

        /// <summary>
        /// The ID of the Synapse SQL pool to set the extended auditing policy. Changing this forces a new resource to be created.
        /// </summary>
        [Output("sqlPoolId")]
        public Output<string> SqlPoolId { get; private set; } = null!;

        /// <summary>
        /// The access key to use for the auditing storage account.
        /// </summary>
        [Output("storageAccountAccessKey")]
        public Output<string?> StorageAccountAccessKey { get; private set; } = null!;

        /// <summary>
        /// Is `storage_account_access_key` value the storage's secondary key?
        /// </summary>
        [Output("storageAccountAccessKeyIsSecondary")]
        public Output<bool?> StorageAccountAccessKeyIsSecondary { get; private set; } = null!;

        /// <summary>
        /// The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all extended auditing logs.
        /// </summary>
        [Output("storageEndpoint")]
        public Output<string?> StorageEndpoint { get; private set; } = null!;


        /// <summary>
        /// Create a SqlPoolExtendedAuditingPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlPoolExtendedAuditingPolicy(string name, SqlPoolExtendedAuditingPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure:synapse/sqlPoolExtendedAuditingPolicy:SqlPoolExtendedAuditingPolicy", name, args ?? new SqlPoolExtendedAuditingPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SqlPoolExtendedAuditingPolicy(string name, Input<string> id, SqlPoolExtendedAuditingPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azure:synapse/sqlPoolExtendedAuditingPolicy:SqlPoolExtendedAuditingPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlPoolExtendedAuditingPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlPoolExtendedAuditingPolicy Get(string name, Input<string> id, SqlPoolExtendedAuditingPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new SqlPoolExtendedAuditingPolicy(name, id, state, options);
        }
    }

    public sealed class SqlPoolExtendedAuditingPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor.
        /// </summary>
        [Input("logMonitoringEnabled")]
        public Input<bool>? LogMonitoringEnabled { get; set; }

        /// <summary>
        /// The number of days to retain logs for in the storage account.
        /// </summary>
        [Input("retentionInDays")]
        public Input<int>? RetentionInDays { get; set; }

        /// <summary>
        /// The ID of the Synapse SQL pool to set the extended auditing policy. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sqlPoolId", required: true)]
        public Input<string> SqlPoolId { get; set; } = null!;

        /// <summary>
        /// The access key to use for the auditing storage account.
        /// </summary>
        [Input("storageAccountAccessKey")]
        public Input<string>? StorageAccountAccessKey { get; set; }

        /// <summary>
        /// Is `storage_account_access_key` value the storage's secondary key?
        /// </summary>
        [Input("storageAccountAccessKeyIsSecondary")]
        public Input<bool>? StorageAccountAccessKeyIsSecondary { get; set; }

        /// <summary>
        /// The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all extended auditing logs.
        /// </summary>
        [Input("storageEndpoint")]
        public Input<string>? StorageEndpoint { get; set; }

        public SqlPoolExtendedAuditingPolicyArgs()
        {
        }
        public static new SqlPoolExtendedAuditingPolicyArgs Empty => new SqlPoolExtendedAuditingPolicyArgs();
    }

    public sealed class SqlPoolExtendedAuditingPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its master database audit events to Azure Monitor.
        /// </summary>
        [Input("logMonitoringEnabled")]
        public Input<bool>? LogMonitoringEnabled { get; set; }

        /// <summary>
        /// The number of days to retain logs for in the storage account.
        /// </summary>
        [Input("retentionInDays")]
        public Input<int>? RetentionInDays { get; set; }

        /// <summary>
        /// The ID of the Synapse SQL pool to set the extended auditing policy. Changing this forces a new resource to be created.
        /// </summary>
        [Input("sqlPoolId")]
        public Input<string>? SqlPoolId { get; set; }

        /// <summary>
        /// The access key to use for the auditing storage account.
        /// </summary>
        [Input("storageAccountAccessKey")]
        public Input<string>? StorageAccountAccessKey { get; set; }

        /// <summary>
        /// Is `storage_account_access_key` value the storage's secondary key?
        /// </summary>
        [Input("storageAccountAccessKeyIsSecondary")]
        public Input<bool>? StorageAccountAccessKeyIsSecondary { get; set; }

        /// <summary>
        /// The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all extended auditing logs.
        /// </summary>
        [Input("storageEndpoint")]
        public Input<string>? StorageEndpoint { get; set; }

        public SqlPoolExtendedAuditingPolicyState()
        {
        }
        public static new SqlPoolExtendedAuditingPolicyState Empty => new SqlPoolExtendedAuditingPolicyState();
    }
}
