// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.DataBricks
{
    /// <summary>
    /// Manages a Databricks Virtual Network Peering
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var remoteVirtualNetwork = new Azure.Network.VirtualNetwork("remoteVirtualNetwork", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.1.0/24",
    ///         },
    ///         Location = exampleResourceGroup.Location,
    ///     });
    /// 
    ///     var exampleWorkspace = new Azure.DataBricks.Workspace("exampleWorkspace", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Sku = "standard",
    ///     });
    /// 
    ///     var exampleVirtualNetworkPeering = new Azure.DataBricks.VirtualNetworkPeering("exampleVirtualNetworkPeering", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         WorkspaceId = exampleWorkspace.Id,
    ///         RemoteAddressSpacePrefixes = remoteVirtualNetwork.AddressSpaces,
    ///         RemoteVirtualNetworkId = remoteVirtualNetwork.Id,
    ///         AllowVirtualNetworkAccess = true,
    ///     });
    /// 
    ///     var remoteVirtualNetworkPeering = new Azure.Network.VirtualNetworkPeering("remoteVirtualNetworkPeering", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = remoteVirtualNetwork.Name,
    ///         RemoteVirtualNetworkId = exampleVirtualNetworkPeering.VirtualNetworkId,
    ///         AllowVirtualNetworkAccess = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Databrick Virtual Network Peerings can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:databricks/virtualNetworkPeering:VirtualNetworkPeering example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Databricks/workspaces/workspace1/virtualNetworkPeerings/peering1
    /// ```
    /// </summary>
    [AzureResourceType("azure:databricks/virtualNetworkPeering:VirtualNetworkPeering")]
    public partial class VirtualNetworkPeering : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of address blocks reserved for this virtual network in CIDR notation.
        /// </summary>
        [Output("addressSpacePrefixes")]
        public Output<ImmutableArray<string>> AddressSpacePrefixes { get; private set; } = null!;

        /// <summary>
        /// Can the forwarded traffic from the VMs in the local virtual network be forwarded to the remote virtual network? Defaults to `false`.
        /// </summary>
        [Output("allowForwardedTraffic")]
        public Output<bool?> AllowForwardedTraffic { get; private set; } = null!;

        /// <summary>
        /// Can the gateway links be used in the remote virtual network to link to the Databricks virtual network? Defaults to `false`.
        /// </summary>
        [Output("allowGatewayTransit")]
        public Output<bool?> AllowGatewayTransit { get; private set; } = null!;

        /// <summary>
        /// Can the VMs in the local virtual network space access the VMs in the remote virtual network space? Defaults to `true`.
        /// </summary>
        [Output("allowVirtualNetworkAccess")]
        public Output<bool?> AllowVirtualNetworkAccess { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the Databricks Virtual Network Peering resource. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.
        /// </summary>
        [Output("remoteAddressSpacePrefixes")]
        public Output<ImmutableArray<string>> RemoteAddressSpacePrefixes { get; private set; } = null!;

        /// <summary>
        /// The ID of the remote virtual network. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** The remote virtual network should be in the same region as the databricks workspace. Please see the [product documentation](https://learn.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering) for more information.
        /// </summary>
        [Output("remoteVirtualNetworkId")]
        public Output<string> RemoteVirtualNetworkId { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Databricks Virtual Network Peering should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Can remote gateways be used on the Databricks virtual network? Defaults to `false`.
        /// 
        /// &gt; **NOTE:** If the `use_remote_gateways` is set to `true`, and `allow_gateway_transit` on the remote peering is also `true`, the virtual network will use the gateways of the remote virtual network for transit. Only one peering can have this flag set to `true`. `use_remote_gateways` cannot be set if the virtual network already has a gateway.
        /// </summary>
        [Output("useRemoteGateways")]
        public Output<bool?> UseRemoteGateways { get; private set; } = null!;

        /// <summary>
        /// The ID of the internal Virtual Network used by the DataBricks Workspace.
        /// 
        /// &gt; **NOTE:** The `virtual_network_id` field is the value you must supply to the `azure.network.VirtualNetworkPeering` resources `remote_virtual_network_id` field to successfully peer the Databricks Virtual Network with the remote virtual network.
        /// </summary>
        [Output("virtualNetworkId")]
        public Output<string> VirtualNetworkId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Databricks Workspace that this Databricks Virtual Network Peering is bound. Changing this forces a new resource to be created.
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualNetworkPeering resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualNetworkPeering(string name, VirtualNetworkPeeringArgs args, CustomResourceOptions? options = null)
            : base("azure:databricks/virtualNetworkPeering:VirtualNetworkPeering", name, args ?? new VirtualNetworkPeeringArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualNetworkPeering(string name, Input<string> id, VirtualNetworkPeeringState? state = null, CustomResourceOptions? options = null)
            : base("azure:databricks/virtualNetworkPeering:VirtualNetworkPeering", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualNetworkPeering resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualNetworkPeering Get(string name, Input<string> id, VirtualNetworkPeeringState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualNetworkPeering(name, id, state, options);
        }
    }

    public sealed class VirtualNetworkPeeringArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Can the forwarded traffic from the VMs in the local virtual network be forwarded to the remote virtual network? Defaults to `false`.
        /// </summary>
        [Input("allowForwardedTraffic")]
        public Input<bool>? AllowForwardedTraffic { get; set; }

        /// <summary>
        /// Can the gateway links be used in the remote virtual network to link to the Databricks virtual network? Defaults to `false`.
        /// </summary>
        [Input("allowGatewayTransit")]
        public Input<bool>? AllowGatewayTransit { get; set; }

        /// <summary>
        /// Can the VMs in the local virtual network space access the VMs in the remote virtual network space? Defaults to `true`.
        /// </summary>
        [Input("allowVirtualNetworkAccess")]
        public Input<bool>? AllowVirtualNetworkAccess { get; set; }

        /// <summary>
        /// Specifies the name of the Databricks Virtual Network Peering resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("remoteAddressSpacePrefixes", required: true)]
        private InputList<string>? _remoteAddressSpacePrefixes;

        /// <summary>
        /// A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> RemoteAddressSpacePrefixes
        {
            get => _remoteAddressSpacePrefixes ?? (_remoteAddressSpacePrefixes = new InputList<string>());
            set => _remoteAddressSpacePrefixes = value;
        }

        /// <summary>
        /// The ID of the remote virtual network. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** The remote virtual network should be in the same region as the databricks workspace. Please see the [product documentation](https://learn.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering) for more information.
        /// </summary>
        [Input("remoteVirtualNetworkId", required: true)]
        public Input<string> RemoteVirtualNetworkId { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which the Databricks Virtual Network Peering should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Can remote gateways be used on the Databricks virtual network? Defaults to `false`.
        /// 
        /// &gt; **NOTE:** If the `use_remote_gateways` is set to `true`, and `allow_gateway_transit` on the remote peering is also `true`, the virtual network will use the gateways of the remote virtual network for transit. Only one peering can have this flag set to `true`. `use_remote_gateways` cannot be set if the virtual network already has a gateway.
        /// </summary>
        [Input("useRemoteGateways")]
        public Input<bool>? UseRemoteGateways { get; set; }

        /// <summary>
        /// The ID of the Databricks Workspace that this Databricks Virtual Network Peering is bound. Changing this forces a new resource to be created.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public VirtualNetworkPeeringArgs()
        {
        }
        public static new VirtualNetworkPeeringArgs Empty => new VirtualNetworkPeeringArgs();
    }

    public sealed class VirtualNetworkPeeringState : global::Pulumi.ResourceArgs
    {
        [Input("addressSpacePrefixes")]
        private InputList<string>? _addressSpacePrefixes;

        /// <summary>
        /// A list of address blocks reserved for this virtual network in CIDR notation.
        /// </summary>
        public InputList<string> AddressSpacePrefixes
        {
            get => _addressSpacePrefixes ?? (_addressSpacePrefixes = new InputList<string>());
            set => _addressSpacePrefixes = value;
        }

        /// <summary>
        /// Can the forwarded traffic from the VMs in the local virtual network be forwarded to the remote virtual network? Defaults to `false`.
        /// </summary>
        [Input("allowForwardedTraffic")]
        public Input<bool>? AllowForwardedTraffic { get; set; }

        /// <summary>
        /// Can the gateway links be used in the remote virtual network to link to the Databricks virtual network? Defaults to `false`.
        /// </summary>
        [Input("allowGatewayTransit")]
        public Input<bool>? AllowGatewayTransit { get; set; }

        /// <summary>
        /// Can the VMs in the local virtual network space access the VMs in the remote virtual network space? Defaults to `true`.
        /// </summary>
        [Input("allowVirtualNetworkAccess")]
        public Input<bool>? AllowVirtualNetworkAccess { get; set; }

        /// <summary>
        /// Specifies the name of the Databricks Virtual Network Peering resource. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("remoteAddressSpacePrefixes")]
        private InputList<string>? _remoteAddressSpacePrefixes;

        /// <summary>
        /// A list of address blocks reserved for the remote virtual network in CIDR notation. Changing this forces a new resource to be created.
        /// </summary>
        public InputList<string> RemoteAddressSpacePrefixes
        {
            get => _remoteAddressSpacePrefixes ?? (_remoteAddressSpacePrefixes = new InputList<string>());
            set => _remoteAddressSpacePrefixes = value;
        }

        /// <summary>
        /// The ID of the remote virtual network. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** The remote virtual network should be in the same region as the databricks workspace. Please see the [product documentation](https://learn.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering) for more information.
        /// </summary>
        [Input("remoteVirtualNetworkId")]
        public Input<string>? RemoteVirtualNetworkId { get; set; }

        /// <summary>
        /// The name of the Resource Group in which the Databricks Virtual Network Peering should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Can remote gateways be used on the Databricks virtual network? Defaults to `false`.
        /// 
        /// &gt; **NOTE:** If the `use_remote_gateways` is set to `true`, and `allow_gateway_transit` on the remote peering is also `true`, the virtual network will use the gateways of the remote virtual network for transit. Only one peering can have this flag set to `true`. `use_remote_gateways` cannot be set if the virtual network already has a gateway.
        /// </summary>
        [Input("useRemoteGateways")]
        public Input<bool>? UseRemoteGateways { get; set; }

        /// <summary>
        /// The ID of the internal Virtual Network used by the DataBricks Workspace.
        /// 
        /// &gt; **NOTE:** The `virtual_network_id` field is the value you must supply to the `azure.network.VirtualNetworkPeering` resources `remote_virtual_network_id` field to successfully peer the Databricks Virtual Network with the remote virtual network.
        /// </summary>
        [Input("virtualNetworkId")]
        public Input<string>? VirtualNetworkId { get; set; }

        /// <summary>
        /// The ID of the Databricks Workspace that this Databricks Virtual Network Peering is bound. Changing this forces a new resource to be created.
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public VirtualNetworkPeeringState()
        {
        }
        public static new VirtualNetworkPeeringState Empty => new VirtualNetworkPeeringState();
    }
}
