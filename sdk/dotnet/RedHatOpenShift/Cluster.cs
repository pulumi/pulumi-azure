// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.RedHatOpenShift
{
    /// <summary>
    /// Manages a fully managed Azure Red Hat OpenShift Cluster (also known as ARO).
    /// 
    /// &gt; **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleGetClientConfig = AzureAD.GetClientConfig.Invoke();
    /// 
    ///     var exampleApplication = new AzureAD.Application("example", new()
    ///     {
    ///         DisplayName = "example-aro",
    ///     });
    /// 
    ///     var exampleServicePrincipal = new AzureAD.ServicePrincipal("example", new()
    ///     {
    ///         ClientId = exampleApplication.ClientId,
    ///     });
    /// 
    ///     var exampleServicePrincipalPassword = new AzureAD.ServicePrincipalPassword("example", new()
    ///     {
    ///         ServicePrincipalId = exampleServicePrincipal.ObjectId,
    ///     });
    /// 
    ///     var redhatopenshift = AzureAD.GetServicePrincipal.Invoke(new()
    ///     {
    ///         ClientId = "f1dd0a37-89c6-4e07-bcd1-ffd3d43d8875",
    ///     });
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West US",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    ///     {
    ///         Name = "example-vnet",
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/22",
    ///         },
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var roleNetwork1 = new Azure.Authorization.Assignment("role_network1", new()
    ///     {
    ///         Scope = exampleVirtualNetwork.Id,
    ///         RoleDefinitionName = "Network Contributor",
    ///         PrincipalId = exampleServicePrincipal.ObjectId,
    ///     });
    /// 
    ///     var roleNetwork2 = new Azure.Authorization.Assignment("role_network2", new()
    ///     {
    ///         Scope = exampleVirtualNetwork.Id,
    ///         RoleDefinitionName = "Network Contributor",
    ///         PrincipalId = redhatopenshift.Apply(getServicePrincipalResult =&gt; getServicePrincipalResult.ObjectId),
    ///     });
    /// 
    ///     var mainSubnet = new Azure.Network.Subnet("main_subnet", new()
    ///     {
    ///         Name = "main-subnet",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.0.0/23",
    ///         },
    ///         ServiceEndpoints = new[]
    ///         {
    ///             "Microsoft.Storage",
    ///             "Microsoft.ContainerRegistry",
    ///         },
    ///     });
    /// 
    ///     var workerSubnet = new Azure.Network.Subnet("worker_subnet", new()
    ///     {
    ///         Name = "worker-subnet",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/23",
    ///         },
    ///         ServiceEndpoints = new[]
    ///         {
    ///             "Microsoft.Storage",
    ///             "Microsoft.ContainerRegistry",
    ///         },
    ///     });
    /// 
    ///     var exampleCluster = new Azure.RedHatOpenShift.Cluster("example", new()
    ///     {
    ///         Name = "examplearo",
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ClusterProfile = new Azure.RedHatOpenShift.Inputs.ClusterClusterProfileArgs
    ///         {
    ///             Domain = "aro-example.com",
    ///             Version = "4.13.23",
    ///         },
    ///         NetworkProfile = new Azure.RedHatOpenShift.Inputs.ClusterNetworkProfileArgs
    ///         {
    ///             PodCidr = "10.128.0.0/14",
    ///             ServiceCidr = "172.30.0.0/16",
    ///         },
    ///         MainProfile = new Azure.RedHatOpenShift.Inputs.ClusterMainProfileArgs
    ///         {
    ///             VmSize = "Standard_D8s_v3",
    ///             SubnetId = mainSubnet.Id,
    ///         },
    ///         ApiServerProfile = new Azure.RedHatOpenShift.Inputs.ClusterApiServerProfileArgs
    ///         {
    ///             Visibility = "Public",
    ///         },
    ///         IngressProfile = new Azure.RedHatOpenShift.Inputs.ClusterIngressProfileArgs
    ///         {
    ///             Visibility = "Public",
    ///         },
    ///         WorkerProfile = new Azure.RedHatOpenShift.Inputs.ClusterWorkerProfileArgs
    ///         {
    ///             VmSize = "Standard_D4s_v3",
    ///             DiskSizeGb = 128,
    ///             NodeCount = 3,
    ///             SubnetId = workerSubnet.Id,
    ///         },
    ///         ServicePrincipal = new Azure.RedHatOpenShift.Inputs.ClusterServicePrincipalArgs
    ///         {
    ///             ClientId = exampleApplication.ClientId,
    ///             ClientSecret = exampleServicePrincipalPassword.Value,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             roleNetwork1,
    ///             roleNetwork2,
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["consoleUrl"] = exampleCluster.ConsoleUrl,
    ///     };
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.RedHatOpenShift` - 2023-09-04
    /// 
    /// ## Import
    /// 
    /// Red Hat OpenShift Clusters can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:redhatopenshift/cluster:Cluster cluster1 /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/group1/providers/Microsoft.RedHatOpenShift/openShiftClusters/cluster1
    /// ```
    /// </summary>
    [AzureResourceType("azure:redhatopenshift/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An `api_server_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("apiServerProfile")]
        public Output<Outputs.ClusterApiServerProfile> ApiServerProfile { get; private set; } = null!;

        /// <summary>
        /// A `cluster_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("clusterProfile")]
        public Output<Outputs.ClusterClusterProfile> ClusterProfile { get; private set; } = null!;

        /// <summary>
        /// The Red Hat OpenShift cluster console URL.
        /// </summary>
        [Output("consoleUrl")]
        public Output<string> ConsoleUrl { get; private set; } = null!;

        /// <summary>
        /// An `ingress_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("ingressProfile")]
        public Output<Outputs.ClusterIngressProfile> IngressProfile { get; private set; } = null!;

        /// <summary>
        /// The location where the Azure Red Hat OpenShift Cluster should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A `main_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("mainProfile")]
        public Output<Outputs.ClusterMainProfile> MainProfile { get; private set; } = null!;

        /// <summary>
        /// The name of the Azure Red Hat OpenShift Cluster to create. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A `network_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("networkProfile")]
        public Output<Outputs.ClusterNetworkProfile> NetworkProfile { get; private set; } = null!;

        /// <summary>
        /// Specifies the Resource Group where the Azure Red Hat OpenShift Cluster should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// A `service_principal` block as defined below.
        /// </summary>
        [Output("servicePrincipal")]
        public Output<Outputs.ClusterServicePrincipal> ServicePrincipal { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A `worker_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("workerProfile")]
        public Output<Outputs.ClusterWorkerProfile> WorkerProfile { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("azure:redhatopenshift/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("azure:redhatopenshift/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `api_server_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("apiServerProfile", required: true)]
        public Input<Inputs.ClusterApiServerProfileArgs> ApiServerProfile { get; set; } = null!;

        /// <summary>
        /// A `cluster_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("clusterProfile", required: true)]
        public Input<Inputs.ClusterClusterProfileArgs> ClusterProfile { get; set; } = null!;

        /// <summary>
        /// An `ingress_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ingressProfile", required: true)]
        public Input<Inputs.ClusterIngressProfileArgs> IngressProfile { get; set; } = null!;

        /// <summary>
        /// The location where the Azure Red Hat OpenShift Cluster should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A `main_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("mainProfile", required: true)]
        public Input<Inputs.ClusterMainProfileArgs> MainProfile { get; set; } = null!;

        /// <summary>
        /// The name of the Azure Red Hat OpenShift Cluster to create. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `network_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkProfile", required: true)]
        public Input<Inputs.ClusterNetworkProfileArgs> NetworkProfile { get; set; } = null!;

        /// <summary>
        /// Specifies the Resource Group where the Azure Red Hat OpenShift Cluster should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// A `service_principal` block as defined below.
        /// </summary>
        [Input("servicePrincipal", required: true)]
        public Input<Inputs.ClusterServicePrincipalArgs> ServicePrincipal { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `worker_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("workerProfile", required: true)]
        public Input<Inputs.ClusterWorkerProfileArgs> WorkerProfile { get; set; } = null!;

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An `api_server_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("apiServerProfile")]
        public Input<Inputs.ClusterApiServerProfileGetArgs>? ApiServerProfile { get; set; }

        /// <summary>
        /// A `cluster_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("clusterProfile")]
        public Input<Inputs.ClusterClusterProfileGetArgs>? ClusterProfile { get; set; }

        /// <summary>
        /// The Red Hat OpenShift cluster console URL.
        /// </summary>
        [Input("consoleUrl")]
        public Input<string>? ConsoleUrl { get; set; }

        /// <summary>
        /// An `ingress_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ingressProfile")]
        public Input<Inputs.ClusterIngressProfileGetArgs>? IngressProfile { get; set; }

        /// <summary>
        /// The location where the Azure Red Hat OpenShift Cluster should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// A `main_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("mainProfile")]
        public Input<Inputs.ClusterMainProfileGetArgs>? MainProfile { get; set; }

        /// <summary>
        /// The name of the Azure Red Hat OpenShift Cluster to create. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A `network_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkProfile")]
        public Input<Inputs.ClusterNetworkProfileGetArgs>? NetworkProfile { get; set; }

        /// <summary>
        /// Specifies the Resource Group where the Azure Red Hat OpenShift Cluster should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// A `service_principal` block as defined below.
        /// </summary>
        [Input("servicePrincipal")]
        public Input<Inputs.ClusterServicePrincipalGetArgs>? ServicePrincipal { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `worker_profile` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("workerProfile")]
        public Input<Inputs.ClusterWorkerProfileGetArgs>? WorkerProfile { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
