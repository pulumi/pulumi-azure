// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Communication
{
    /// <summary>
    /// Manages an Email Communication Service Domain.
    /// 
    /// ## Import
    /// 
    /// Communication Services can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:communication/emailServiceDomain:EmailServiceDomain example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Communication/emailServices/emailCommunicationService1/domains/domain1
    /// ```
    /// </summary>
    [AzureResourceType("azure:communication/emailServiceDomain:EmailServiceDomain")]
    public partial class EmailServiceDomain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Describes how a Domains resource is being managed. Possible values are `AzureManaged`, `CustomerManaged`, `CustomerManagedInExchangeOnline`. Changing this forces a new Email Communication Service to be created.
        /// </summary>
        [Output("domainManagement")]
        public Output<string> DomainManagement { get; private set; } = null!;

        /// <summary>
        /// The resource ID of the Email Communication Service where the Domain belongs to. Changing this forces a new Email Communication Service to be created.
        /// </summary>
        [Output("emailServiceId")]
        public Output<string> EmailServiceId { get; private set; } = null!;

        /// <summary>
        /// P2 sender domain that is displayed to the email recipients [RFC 5322].
        /// </summary>
        [Output("fromSenderDomain")]
        public Output<string> FromSenderDomain { get; private set; } = null!;

        /// <summary>
        /// P1 sender domain that is present on the email envelope [RFC 5321].
        /// </summary>
        [Output("mailFromSenderDomain")]
        public Output<string> MailFromSenderDomain { get; private set; } = null!;

        /// <summary>
        /// The name of the Email Communication Service resource. If `domain_management` is `AzureManaged`, the name must be `AzureManagedDomain`. Changing this forces a new Email Communication Service to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Email Communication Service.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Describes user engagement tracking is enabled or disabled. Defaults to `false`.
        /// </summary>
        [Output("userEngagementTrackingEnabled")]
        public Output<bool?> UserEngagementTrackingEnabled { get; private set; } = null!;

        /// <summary>
        /// (Optional) An `verification_records` block as defined below.
        /// </summary>
        [Output("verificationRecords")]
        public Output<ImmutableArray<Outputs.EmailServiceDomainVerificationRecord>> VerificationRecords { get; private set; } = null!;


        /// <summary>
        /// Create a EmailServiceDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EmailServiceDomain(string name, EmailServiceDomainArgs args, CustomResourceOptions? options = null)
            : base("azure:communication/emailServiceDomain:EmailServiceDomain", name, args ?? new EmailServiceDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EmailServiceDomain(string name, Input<string> id, EmailServiceDomainState? state = null, CustomResourceOptions? options = null)
            : base("azure:communication/emailServiceDomain:EmailServiceDomain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EmailServiceDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EmailServiceDomain Get(string name, Input<string> id, EmailServiceDomainState? state = null, CustomResourceOptions? options = null)
        {
            return new EmailServiceDomain(name, id, state, options);
        }
    }

    public sealed class EmailServiceDomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Describes how a Domains resource is being managed. Possible values are `AzureManaged`, `CustomerManaged`, `CustomerManagedInExchangeOnline`. Changing this forces a new Email Communication Service to be created.
        /// </summary>
        [Input("domainManagement", required: true)]
        public Input<string> DomainManagement { get; set; } = null!;

        /// <summary>
        /// The resource ID of the Email Communication Service where the Domain belongs to. Changing this forces a new Email Communication Service to be created.
        /// </summary>
        [Input("emailServiceId", required: true)]
        public Input<string> EmailServiceId { get; set; } = null!;

        /// <summary>
        /// The name of the Email Communication Service resource. If `domain_management` is `AzureManaged`, the name must be `AzureManagedDomain`. Changing this forces a new Email Communication Service to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Email Communication Service.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Describes user engagement tracking is enabled or disabled. Defaults to `false`.
        /// </summary>
        [Input("userEngagementTrackingEnabled")]
        public Input<bool>? UserEngagementTrackingEnabled { get; set; }

        public EmailServiceDomainArgs()
        {
        }
        public static new EmailServiceDomainArgs Empty => new EmailServiceDomainArgs();
    }

    public sealed class EmailServiceDomainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Describes how a Domains resource is being managed. Possible values are `AzureManaged`, `CustomerManaged`, `CustomerManagedInExchangeOnline`. Changing this forces a new Email Communication Service to be created.
        /// </summary>
        [Input("domainManagement")]
        public Input<string>? DomainManagement { get; set; }

        /// <summary>
        /// The resource ID of the Email Communication Service where the Domain belongs to. Changing this forces a new Email Communication Service to be created.
        /// </summary>
        [Input("emailServiceId")]
        public Input<string>? EmailServiceId { get; set; }

        /// <summary>
        /// P2 sender domain that is displayed to the email recipients [RFC 5322].
        /// </summary>
        [Input("fromSenderDomain")]
        public Input<string>? FromSenderDomain { get; set; }

        /// <summary>
        /// P1 sender domain that is present on the email envelope [RFC 5321].
        /// </summary>
        [Input("mailFromSenderDomain")]
        public Input<string>? MailFromSenderDomain { get; set; }

        /// <summary>
        /// The name of the Email Communication Service resource. If `domain_management` is `AzureManaged`, the name must be `AzureManagedDomain`. Changing this forces a new Email Communication Service to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Email Communication Service.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Describes user engagement tracking is enabled or disabled. Defaults to `false`.
        /// </summary>
        [Input("userEngagementTrackingEnabled")]
        public Input<bool>? UserEngagementTrackingEnabled { get; set; }

        [Input("verificationRecords")]
        private InputList<Inputs.EmailServiceDomainVerificationRecordGetArgs>? _verificationRecords;

        /// <summary>
        /// (Optional) An `verification_records` block as defined below.
        /// </summary>
        public InputList<Inputs.EmailServiceDomainVerificationRecordGetArgs> VerificationRecords
        {
            get => _verificationRecords ?? (_verificationRecords = new InputList<Inputs.EmailServiceDomainVerificationRecordGetArgs>());
            set => _verificationRecords = value;
        }

        public EmailServiceDomainState()
        {
        }
        public static new EmailServiceDomainState Empty => new EmailServiceDomainState();
    }
}
