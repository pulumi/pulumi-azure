// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Communication
{
    /// <summary>
    /// Manages a communication service email domain association.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "group1",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleService = new Azure.Communication.Service("example", new()
    ///     {
    ///         Name = "CommunicationService1",
    ///         ResourceGroupName = example.Name,
    ///         DataLocation = "United States",
    ///     });
    /// 
    ///     var exampleEmailService = new Azure.Communication.EmailService("example", new()
    ///     {
    ///         Name = "emailCommunicationService1",
    ///         ResourceGroupName = example.Name,
    ///         DataLocation = "United States",
    ///     });
    /// 
    ///     var exampleEmailServiceDomain = new Azure.Communication.EmailServiceDomain("example", new()
    ///     {
    ///         Name = "AzureManagedDomain",
    ///         EmailServiceId = exampleEmailService.Id,
    ///         DomainManagement = "AzureManaged",
    ///     });
    /// 
    ///     var exampleServiceEmailDomainAssociation = new Azure.Communication.ServiceEmailDomainAssociation("example", new()
    ///     {
    ///         CommunicationServiceId = exampleService.Id,
    ///         EmailServiceDomainId = exampleEmailServiceDomain.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.Communication` - 2023-03-31
    /// 
    /// ## Import
    /// 
    /// Communication service email domain association can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:communication/serviceEmailDomainAssociation:ServiceEmailDomainAssociation example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Communication/communicationServices/communicationService1|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Communication/emailServices/emailCommunicationService1/domains/domain1"
    /// ```
    /// </summary>
    [AzureResourceType("azure:communication/serviceEmailDomainAssociation:ServiceEmailDomainAssociation")]
    public partial class ServiceEmailDomainAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Communication Service. Changing this forces a new communication service email domain association to be created.
        /// </summary>
        [Output("communicationServiceId")]
        public Output<string> CommunicationServiceId { get; private set; } = null!;

        /// <summary>
        /// The ID of the EMail Service Domain. Changing this forces a new communication service email domain association to be created.
        /// </summary>
        [Output("emailServiceDomainId")]
        public Output<string> EmailServiceDomainId { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceEmailDomainAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceEmailDomainAssociation(string name, ServiceEmailDomainAssociationArgs args, CustomResourceOptions? options = null)
            : base("azure:communication/serviceEmailDomainAssociation:ServiceEmailDomainAssociation", name, args ?? new ServiceEmailDomainAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceEmailDomainAssociation(string name, Input<string> id, ServiceEmailDomainAssociationState? state = null, CustomResourceOptions? options = null)
            : base("azure:communication/serviceEmailDomainAssociation:ServiceEmailDomainAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceEmailDomainAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceEmailDomainAssociation Get(string name, Input<string> id, ServiceEmailDomainAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceEmailDomainAssociation(name, id, state, options);
        }
    }

    public sealed class ServiceEmailDomainAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Communication Service. Changing this forces a new communication service email domain association to be created.
        /// </summary>
        [Input("communicationServiceId", required: true)]
        public Input<string> CommunicationServiceId { get; set; } = null!;

        /// <summary>
        /// The ID of the EMail Service Domain. Changing this forces a new communication service email domain association to be created.
        /// </summary>
        [Input("emailServiceDomainId", required: true)]
        public Input<string> EmailServiceDomainId { get; set; } = null!;

        public ServiceEmailDomainAssociationArgs()
        {
        }
        public static new ServiceEmailDomainAssociationArgs Empty => new ServiceEmailDomainAssociationArgs();
    }

    public sealed class ServiceEmailDomainAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Communication Service. Changing this forces a new communication service email domain association to be created.
        /// </summary>
        [Input("communicationServiceId")]
        public Input<string>? CommunicationServiceId { get; set; }

        /// <summary>
        /// The ID of the EMail Service Domain. Changing this forces a new communication service email domain association to be created.
        /// </summary>
        [Input("emailServiceDomainId")]
        public Input<string>? EmailServiceDomainId { get; set; }

        public ServiceEmailDomainAssociationState()
        {
        }
        public static new ServiceEmailDomainAssociationState Empty => new ServiceEmailDomainAssociationState();
    }
}
