// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Hpc.Inputs
{

    public sealed class CacheAccessPolicyAccessRuleGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access level for this rule. Possible values are: `Rw`, `Ro`, `No`.
        /// </summary>
        [Input("access", required: true)]
        public Input<string> Access { get; set; } = null!;

        /// <summary>
        /// The anonymous GID used when `RootSquashEnabled` is `True`.
        /// </summary>
        [Input("anonymousGid")]
        public Input<int>? AnonymousGid { get; set; }

        /// <summary>
        /// The anonymous UID used when `RootSquashEnabled` is `True`.
        /// </summary>
        [Input("anonymousUid")]
        public Input<int>? AnonymousUid { get; set; }

        /// <summary>
        /// The filter applied to the `Scope` for this rule. The filter's format depends on its scope: `Default` scope matches all clients and has no filter value; `Network` scope takes a CIDR format; `Host` takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.
        /// </summary>
        [Input("filter")]
        public Input<string>? Filter { get; set; }

        /// <summary>
        /// Whether to enable [root squash](https://docs.microsoft.com/azure/hpc-cache/access-policies#root-squash)?
        /// </summary>
        [Input("rootSquashEnabled")]
        public Input<bool>? RootSquashEnabled { get; set; }

        /// <summary>
        /// The scope of this rule. The `Scope` and (potentially) the `Filter` determine which clients match the rule. Possible values are: `Default`, `Network`, `Host`.
        /// 
        /// &gt; **Note:** Each `AccessRule` should set a unique `Scope`.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        /// <summary>
        /// Whether allow access to subdirectories under the root export?
        /// </summary>
        [Input("submountAccessEnabled")]
        public Input<bool>? SubmountAccessEnabled { get; set; }

        /// <summary>
        /// Whether [SUID](https://docs.microsoft.com/azure/hpc-cache/access-policies#suid) is allowed?
        /// </summary>
        [Input("suidEnabled")]
        public Input<bool>? SuidEnabled { get; set; }

        public CacheAccessPolicyAccessRuleGetArgs()
        {
        }
        public static new CacheAccessPolicyAccessRuleGetArgs Empty => new CacheAccessPolicyAccessRuleGetArgs();
    }
}
