// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Hpc
{
    /// <summary>
    /// Manages a Blob NFSv3 Target within a HPC Cache.
    /// 
    /// &gt; **NOTE:**: By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.
    /// 
    /// &gt; **NOTE:**: This resource depends on the NFSv3 enabled Storage Account, which has some prerequisites need to meet. Please checkout: &lt;https://docs.microsoft.com/azure/storage/blobs/network-file-system-protocol-support-how-to?tabs=azure-powershell&gt;.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// 	
    /// object NotImplemented(string errorMessage) 
    /// {
    ///     throw new System.NotImplementedException(errorMessage);
    /// }
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-rg",
    ///         Location = "west europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    ///     {
    ///         Name = "example-vnet",
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("example", new()
    ///     {
    ///         Name = "example-subnet",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///         ServiceEndpoints = new[]
    ///         {
    ///             "Microsoft.Storage",
    ///         },
    ///     });
    /// 
    ///     var example = AzureAD.GetServicePrincipal.Invoke(new()
    ///     {
    ///         DisplayName = "HPC Cache Resource Provider",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("example", new()
    ///     {
    ///         Name = "examplestorageaccount",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountKind = "StorageV2",
    ///         AccountReplicationType = "LRS",
    ///         IsHnsEnabled = true,
    ///         Nfsv3Enabled = true,
    ///         EnableHttpsTrafficOnly = false,
    ///         NetworkRules = new Azure.Storage.Inputs.AccountNetworkRulesArgs
    ///         {
    ///             DefaultAction = "Deny",
    ///             VirtualNetworkSubnetIds = new[]
    ///             {
    ///                 exampleSubnet.Id,
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Due to https://github.com/hashicorp/terraform-provider-azurerm/issues/2977 and the fact
    ///     // that the NFSv3 enabled storage account can't allow public network access - otherwise the NFSv3 protocol will fail,
    ///     // we have to use the ARM template to deploy the storage container as a workaround.
    ///     // Once the issue above got resolved, we can instead use the azurerm_storage_container resource.
    ///     var storage_containers = new Azure.Core.ResourceGroupTemplateDeployment("storage-containers", new()
    ///     {
    ///         Name = "example-deployment",
    ///         ResourceGroupName = exampleAccount.ResourceGroupName,
    ///         DeploymentMode = "Incremental",
    ///         ParametersContent = Output.JsonSerialize(Output.Create(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["location"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["value"] = exampleAccount.Location,
    ///             },
    ///             ["storageAccountName"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["value"] = exampleAccount.Name,
    ///             },
    ///             ["containerName"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["value"] = "example-container",
    ///             },
    ///         })),
    ///         TemplateContent = @"{
    ///   ""$schema"": ""https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"",
    ///   ""contentVersion"": ""1.0.0.0"",
    ///   ""parameters"": {
    ///     ""storageAccountName"": {
    ///       ""type"": ""String""
    ///     },
    ///     ""containerName"": {
    ///       ""type"": ""String""
    ///     },
    ///     ""location"": {
    ///       ""type"": ""String""
    ///     }
    ///   },
    ///   ""resources"": [
    ///     {
    ///       ""type"": ""Microsoft.Storage/storageAccounts"",
    ///       ""apiVersion"": ""2019-06-01"",
    ///       ""name"": ""[parameters('storageAccountName')]"",
    ///       ""location"": ""[parameters('location')]"",
    ///       ""sku"": {
    ///         ""name"": ""Standard_LRS"",
    ///         ""tier"": ""Standard""
    ///       },
    ///       ""kind"": ""StorageV2"",
    ///       ""properties"": {
    ///         ""accessTier"": ""Hot""
    ///       },
    ///       ""resources"": [
    ///         {
    ///           ""type"": ""blobServices/containers"",
    ///           ""apiVersion"": ""2019-06-01"",
    ///           ""name"": ""[concat('default/', parameters('containerName'))]"",
    ///           ""dependsOn"": [
    ///             ""[parameters('storageAccountName')]""
    ///           ]
    ///         }
    ///       ]
    ///     }
    ///   ],
    /// 
    ///   ""outputs"": {
    ///     ""id"": {
    ///       ""type"": ""String"",
    ///       ""value"": ""[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('containerName'))]""
    ///     }
    ///   }
    /// }
    /// ",
    ///     });
    /// 
    ///     var exampleStorageAccountContrib = new Azure.Authorization.Assignment("example_storage_account_contrib", new()
    ///     {
    ///         Scope = exampleAccount.Id,
    ///         RoleDefinitionName = "Storage Account Contributor",
    ///         PrincipalId = example.Apply(getServicePrincipalResult =&gt; getServicePrincipalResult.ObjectId),
    ///     });
    /// 
    ///     var exampleStorageBlobDataContrib = new Azure.Authorization.Assignment("example_storage_blob_data_contrib", new()
    ///     {
    ///         Scope = exampleAccount.Id,
    ///         RoleDefinitionName = "Storage Blob Data Contributor",
    ///         PrincipalId = example.Apply(getServicePrincipalResult =&gt; getServicePrincipalResult.ObjectId),
    ///     });
    /// 
    ///     var exampleCache = new Azure.Hpc.Cache("example", new()
    ///     {
    ///         Name = "example-hpc-cache",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         CacheSizeInGb = 3072,
    ///         SubnetId = exampleSubnet.Id,
    ///         SkuName = "Standard_2G",
    ///     });
    /// 
    ///     var exampleCacheBlobNfsTarget = new Azure.Hpc.CacheBlobNfsTarget("example", new()
    ///     {
    ///         Name = "example-hpc-target",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         CacheName = exampleCache.Name,
    ///         StorageContainerId = NotImplemented("jsondecode(azurerm_resource_group_template_deployment.storage-containers.output_content)").Id.Value,
    ///         NamespacePath = "/p1",
    ///         UsageModel = "READ_HEAVY_INFREQ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// HPC Cache Blob NFS Targets can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTarget example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
    /// ```
    /// </summary>
    [AzureResourceType("azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTarget")]
    public partial class CacheBlobNfsTarget : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the access policy applied to this target. Defaults to `default`.
        /// </summary>
        [Output("accessPolicyName")]
        public Output<string?> AccessPolicyName { get; private set; } = null!;

        /// <summary>
        /// The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
        /// </summary>
        [Output("cacheName")]
        public Output<string> CacheName { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The client-facing file path of the HPC Cache Blob NFS Target.
        /// </summary>
        [Output("namespacePath")]
        public Output<string> NamespacePath { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
        /// </summary>
        [Output("storageContainerId")]
        public Output<string> StorageContainerId { get; private set; } = null!;

        /// <summary>
        /// The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
        /// </summary>
        [Output("usageModel")]
        public Output<string> UsageModel { get; private set; } = null!;

        /// <summary>
        /// The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
        /// </summary>
        [Output("verificationTimerInSeconds")]
        public Output<int?> VerificationTimerInSeconds { get; private set; } = null!;

        /// <summary>
        /// The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
        /// </summary>
        [Output("writeBackTimerInSeconds")]
        public Output<int?> WriteBackTimerInSeconds { get; private set; } = null!;


        /// <summary>
        /// Create a CacheBlobNfsTarget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CacheBlobNfsTarget(string name, CacheBlobNfsTargetArgs args, CustomResourceOptions? options = null)
            : base("azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTarget", name, args ?? new CacheBlobNfsTargetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CacheBlobNfsTarget(string name, Input<string> id, CacheBlobNfsTargetState? state = null, CustomResourceOptions? options = null)
            : base("azure:hpc/cacheBlobNfsTarget:CacheBlobNfsTarget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CacheBlobNfsTarget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CacheBlobNfsTarget Get(string name, Input<string> id, CacheBlobNfsTargetState? state = null, CustomResourceOptions? options = null)
        {
            return new CacheBlobNfsTarget(name, id, state, options);
        }
    }

    public sealed class CacheBlobNfsTargetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the access policy applied to this target. Defaults to `default`.
        /// </summary>
        [Input("accessPolicyName")]
        public Input<string>? AccessPolicyName { get; set; }

        /// <summary>
        /// The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
        /// </summary>
        [Input("cacheName", required: true)]
        public Input<string> CacheName { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The client-facing file path of the HPC Cache Blob NFS Target.
        /// </summary>
        [Input("namespacePath", required: true)]
        public Input<string> NamespacePath { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
        /// </summary>
        [Input("storageContainerId", required: true)]
        public Input<string> StorageContainerId { get; set; } = null!;

        /// <summary>
        /// The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
        /// </summary>
        [Input("usageModel", required: true)]
        public Input<string> UsageModel { get; set; } = null!;

        /// <summary>
        /// The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
        /// </summary>
        [Input("verificationTimerInSeconds")]
        public Input<int>? VerificationTimerInSeconds { get; set; }

        /// <summary>
        /// The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
        /// </summary>
        [Input("writeBackTimerInSeconds")]
        public Input<int>? WriteBackTimerInSeconds { get; set; }

        public CacheBlobNfsTargetArgs()
        {
        }
        public static new CacheBlobNfsTargetArgs Empty => new CacheBlobNfsTargetArgs();
    }

    public sealed class CacheBlobNfsTargetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the access policy applied to this target. Defaults to `default`.
        /// </summary>
        [Input("accessPolicyName")]
        public Input<string>? AccessPolicyName { get; set; }

        /// <summary>
        /// The name of the HPC Cache, which the HPC Cache Blob NFS Target will be added to. Changing this forces a new HPC Cache Blob NFS Target to be created.
        /// </summary>
        [Input("cacheName")]
        public Input<string>? CacheName { get; set; }

        /// <summary>
        /// The name which should be used for this HPC Cache Blob NFS Target. Changing this forces a new HPC Cache Blob NFS Target to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The client-facing file path of the HPC Cache Blob NFS Target.
        /// </summary>
        [Input("namespacePath")]
        public Input<string>? NamespacePath { get; set; }

        /// <summary>
        /// The name of the Resource Group where the HPC Cache Blob NFS Target should exist. Changing this forces a new HPC Cache Blob NFS Target to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The Resource Manager ID of the Storage Container used as the HPC Cache Blob NFS Target. Changing this forces a new resource to be created.
        /// 
        /// &gt; **Note:** This is the Resource Manager ID of the Storage Container, rather than the regular ID - and can be accessed on the `azure.storage.Container` Data Source/Resource as `resource_manager_id`.
        /// </summary>
        [Input("storageContainerId")]
        public Input<string>? StorageContainerId { get; set; }

        /// <summary>
        /// The type of usage of the HPC Cache Blob NFS Target. Possible values are: `READ_HEAVY_INFREQ`, `READ_HEAVY_CHECK_180`, `READ_ONLY`, `READ_WRITE`, `WRITE_WORKLOAD_15`, `WRITE_AROUND`, `WRITE_WORKLOAD_CHECK_30`, `WRITE_WORKLOAD_CHECK_60` and `WRITE_WORKLOAD_CLOUDWS`.
        /// </summary>
        [Input("usageModel")]
        public Input<string>? UsageModel { get; set; }

        /// <summary>
        /// The amount of time the cache waits before it checks the back-end storage for file updates. Possible values are between `1` and `31536000`.
        /// </summary>
        [Input("verificationTimerInSeconds")]
        public Input<int>? VerificationTimerInSeconds { get; set; }

        /// <summary>
        /// The amount of time the cache waits after the last file change before it copies the changed file to back-end storage. Possible values are between `1` and `31536000`.
        /// </summary>
        [Input("writeBackTimerInSeconds")]
        public Input<int>? WriteBackTimerInSeconds { get; set; }

        public CacheBlobNfsTargetState()
        {
        }
        public static new CacheBlobNfsTargetState Empty => new CacheBlobNfsTargetState();
    }
}
