// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Hpc
{
    /// <summary>
    /// Manages a HPC Cache.
    /// 
    /// &gt; **Note:** By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.
    /// 
    /// ## Import
    /// 
    /// HPC Caches can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:hpc/cache:Cache example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroupName/providers/Microsoft.StorageCache/caches/cacheName
    /// ```
    /// </summary>
    [AzureResourceType("azure:hpc/cache:Cache")]
    public partial class Cache : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether the HPC Cache automatically rotates Encryption Key to the latest version.
        /// </summary>
        [Output("automaticallyRotateKeyToLatestEnabled")]
        public Output<bool?> AutomaticallyRotateKeyToLatestEnabled { get; private set; } = null!;

        /// <summary>
        /// The size of the HPC Cache, in GB. Possible values are `3072`, `6144`, `12288`, `21623`, `24576`, `43246`, `49152` and `86491`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** The `21623`, `43246` and `86491` sizes are restricted to read only resources.
        /// </summary>
        [Output("cacheSizeInGb")]
        public Output<int> CacheSizeInGb { get; private set; } = null!;

        /// <summary>
        /// A `default_access_policy` block as defined below.
        /// </summary>
        [Output("defaultAccessPolicy")]
        public Output<Outputs.CacheDefaultAccessPolicy> DefaultAccessPolicy { get; private set; } = null!;

        /// <summary>
        /// A `directory_active_directory` block as defined below.
        /// </summary>
        [Output("directoryActiveDirectory")]
        public Output<Outputs.CacheDirectoryActiveDirectory?> DirectoryActiveDirectory { get; private set; } = null!;

        /// <summary>
        /// A `directory_flat_file` block as defined below.
        /// </summary>
        [Output("directoryFlatFile")]
        public Output<Outputs.CacheDirectoryFlatFile?> DirectoryFlatFile { get; private set; } = null!;

        /// <summary>
        /// A `directory_ldap` block as defined below.
        /// 
        /// &gt; **Note:** Only one of `directory_active_directory`, `directory_flat_file` and `directory_ldap` can be set.
        /// </summary>
        [Output("directoryLdap")]
        public Output<Outputs.CacheDirectoryLdap?> DirectoryLdap { get; private set; } = null!;

        /// <summary>
        /// A `dns` block as defined below.
        /// </summary>
        [Output("dns")]
        public Output<Outputs.CacheDns?> Dns { get; private set; } = null!;

        /// <summary>
        /// An `identity` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.CacheIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The ID of the Key Vault Key which should be used to encrypt the data in this HPC Cache.
        /// </summary>
        [Output("keyVaultKeyId")]
        public Output<string?> KeyVaultKeyId { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// A list of IP Addresses where the HPC Cache can be mounted.
        /// </summary>
        [Output("mountAddresses")]
        public Output<ImmutableArray<string>> MountAddresses { get; private set; } = null!;

        /// <summary>
        /// The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to `1500`.
        /// </summary>
        [Output("mtu")]
        public Output<int?> Mtu { get; private set; } = null!;

        /// <summary>
        /// The name of the HPC Cache. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The NTP server IP Address or FQDN for the HPC Cache. Defaults to `time.windows.com`.
        /// </summary>
        [Output("ntpServer")]
        public Output<string?> NtpServer { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The SKU of HPC Cache to use. Possible values are (ReadWrite) - `Standard_2G`, `Standard_4G` `Standard_8G` or (ReadOnly) - `Standard_L4_5G`, `Standard_L9G`, and `Standard_L16G`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** The read-only SKUs have restricted cache sizes. `Standard_L4_5G` must be set to `21623`. `Standard_L9G` to `43246` and `Standard_L16G` to `86491`.
        /// </summary>
        [Output("skuName")]
        public Output<string> SkuName { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the HPC Cache.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Cache resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cache(string name, CacheArgs args, CustomResourceOptions? options = null)
            : base("azure:hpc/cache:Cache", name, args ?? new CacheArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cache(string name, Input<string> id, CacheState? state = null, CustomResourceOptions? options = null)
            : base("azure:hpc/cache:Cache", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cache resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cache Get(string name, Input<string> id, CacheState? state = null, CustomResourceOptions? options = null)
        {
            return new Cache(name, id, state, options);
        }
    }

    public sealed class CacheArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether the HPC Cache automatically rotates Encryption Key to the latest version.
        /// </summary>
        [Input("automaticallyRotateKeyToLatestEnabled")]
        public Input<bool>? AutomaticallyRotateKeyToLatestEnabled { get; set; }

        /// <summary>
        /// The size of the HPC Cache, in GB. Possible values are `3072`, `6144`, `12288`, `21623`, `24576`, `43246`, `49152` and `86491`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** The `21623`, `43246` and `86491` sizes are restricted to read only resources.
        /// </summary>
        [Input("cacheSizeInGb", required: true)]
        public Input<int> CacheSizeInGb { get; set; } = null!;

        /// <summary>
        /// A `default_access_policy` block as defined below.
        /// </summary>
        [Input("defaultAccessPolicy")]
        public Input<Inputs.CacheDefaultAccessPolicyArgs>? DefaultAccessPolicy { get; set; }

        /// <summary>
        /// A `directory_active_directory` block as defined below.
        /// </summary>
        [Input("directoryActiveDirectory")]
        public Input<Inputs.CacheDirectoryActiveDirectoryArgs>? DirectoryActiveDirectory { get; set; }

        /// <summary>
        /// A `directory_flat_file` block as defined below.
        /// </summary>
        [Input("directoryFlatFile")]
        public Input<Inputs.CacheDirectoryFlatFileArgs>? DirectoryFlatFile { get; set; }

        /// <summary>
        /// A `directory_ldap` block as defined below.
        /// 
        /// &gt; **Note:** Only one of `directory_active_directory`, `directory_flat_file` and `directory_ldap` can be set.
        /// </summary>
        [Input("directoryLdap")]
        public Input<Inputs.CacheDirectoryLdapArgs>? DirectoryLdap { get; set; }

        /// <summary>
        /// A `dns` block as defined below.
        /// </summary>
        [Input("dns")]
        public Input<Inputs.CacheDnsArgs>? Dns { get; set; }

        /// <summary>
        /// An `identity` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.CacheIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The ID of the Key Vault Key which should be used to encrypt the data in this HPC Cache.
        /// </summary>
        [Input("keyVaultKeyId")]
        public Input<string>? KeyVaultKeyId { get; set; }

        /// <summary>
        /// Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to `1500`.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// The name of the HPC Cache. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The NTP server IP Address or FQDN for the HPC Cache. Defaults to `time.windows.com`.
        /// </summary>
        [Input("ntpServer")]
        public Input<string>? NtpServer { get; set; }

        /// <summary>
        /// The name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The SKU of HPC Cache to use. Possible values are (ReadWrite) - `Standard_2G`, `Standard_4G` `Standard_8G` or (ReadOnly) - `Standard_L4_5G`, `Standard_L9G`, and `Standard_L16G`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** The read-only SKUs have restricted cache sizes. `Standard_L4_5G` must be set to `21623`. `Standard_L9G` to `43246` and `Standard_L16G` to `86491`.
        /// </summary>
        [Input("skuName", required: true)]
        public Input<string> SkuName { get; set; } = null!;

        /// <summary>
        /// The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the HPC Cache.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public CacheArgs()
        {
        }
        public static new CacheArgs Empty => new CacheArgs();
    }

    public sealed class CacheState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether the HPC Cache automatically rotates Encryption Key to the latest version.
        /// </summary>
        [Input("automaticallyRotateKeyToLatestEnabled")]
        public Input<bool>? AutomaticallyRotateKeyToLatestEnabled { get; set; }

        /// <summary>
        /// The size of the HPC Cache, in GB. Possible values are `3072`, `6144`, `12288`, `21623`, `24576`, `43246`, `49152` and `86491`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** The `21623`, `43246` and `86491` sizes are restricted to read only resources.
        /// </summary>
        [Input("cacheSizeInGb")]
        public Input<int>? CacheSizeInGb { get; set; }

        /// <summary>
        /// A `default_access_policy` block as defined below.
        /// </summary>
        [Input("defaultAccessPolicy")]
        public Input<Inputs.CacheDefaultAccessPolicyGetArgs>? DefaultAccessPolicy { get; set; }

        /// <summary>
        /// A `directory_active_directory` block as defined below.
        /// </summary>
        [Input("directoryActiveDirectory")]
        public Input<Inputs.CacheDirectoryActiveDirectoryGetArgs>? DirectoryActiveDirectory { get; set; }

        /// <summary>
        /// A `directory_flat_file` block as defined below.
        /// </summary>
        [Input("directoryFlatFile")]
        public Input<Inputs.CacheDirectoryFlatFileGetArgs>? DirectoryFlatFile { get; set; }

        /// <summary>
        /// A `directory_ldap` block as defined below.
        /// 
        /// &gt; **Note:** Only one of `directory_active_directory`, `directory_flat_file` and `directory_ldap` can be set.
        /// </summary>
        [Input("directoryLdap")]
        public Input<Inputs.CacheDirectoryLdapGetArgs>? DirectoryLdap { get; set; }

        /// <summary>
        /// A `dns` block as defined below.
        /// </summary>
        [Input("dns")]
        public Input<Inputs.CacheDnsGetArgs>? Dns { get; set; }

        /// <summary>
        /// An `identity` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.CacheIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The ID of the Key Vault Key which should be used to encrypt the data in this HPC Cache.
        /// </summary>
        [Input("keyVaultKeyId")]
        public Input<string>? KeyVaultKeyId { get; set; }

        /// <summary>
        /// Specifies the supported Azure Region where the HPC Cache should be created. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("mountAddresses")]
        private InputList<string>? _mountAddresses;

        /// <summary>
        /// A list of IP Addresses where the HPC Cache can be mounted.
        /// </summary>
        public InputList<string> MountAddresses
        {
            get => _mountAddresses ?? (_mountAddresses = new InputList<string>());
            set => _mountAddresses = value;
        }

        /// <summary>
        /// The IPv4 maximum transmission unit configured for the subnet of the HPC Cache. Possible values range from 576 - 1500. Defaults to `1500`.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// The name of the HPC Cache. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The NTP server IP Address or FQDN for the HPC Cache. Defaults to `time.windows.com`.
        /// </summary>
        [Input("ntpServer")]
        public Input<string>? NtpServer { get; set; }

        /// <summary>
        /// The name of the Resource Group in which to create the HPC Cache. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The SKU of HPC Cache to use. Possible values are (ReadWrite) - `Standard_2G`, `Standard_4G` `Standard_8G` or (ReadOnly) - `Standard_L4_5G`, `Standard_L9G`, and `Standard_L16G`. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** The read-only SKUs have restricted cache sizes. `Standard_L4_5G` must be set to `21623`. `Standard_L9G` to `43246` and `Standard_L16G` to `86491`.
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        /// <summary>
        /// The ID of the Subnet for the HPC Cache. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the HPC Cache.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public CacheState()
        {
        }
        public static new CacheState Empty => new CacheState();
    }
}
