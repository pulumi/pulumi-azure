// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Hpc
{
    /// <summary>
    /// Manages a Blob Target within a HPC Cache.
    /// 
    /// &gt; **NOTE:**: By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using AzureAD = Pulumi.AzureAD;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new Azure.Network.VirtualNetworkArgs
    ///         {
    ///             AddressSpaces = 
    ///             {
    ///                 "10.0.0.0/16",
    ///             },
    ///             Location = exampleResourceGroup.Location,
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///         });
    ///         var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new Azure.Network.SubnetArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             VirtualNetworkName = exampleVirtualNetwork.Name,
    ///             AddressPrefixes = 
    ///             {
    ///                 "10.0.1.0/24",
    ///             },
    ///         });
    ///         var exampleCache = new Azure.Hpc.Cache("exampleCache", new Azure.Hpc.CacheArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             CacheSizeInGb = 3072,
    ///             SubnetId = exampleSubnet.Id,
    ///             SkuName = "Standard_2G",
    ///         });
    ///         var exampleAccount = new Azure.Storage.Account("exampleAccount", new Azure.Storage.AccountArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             AccountTier = "Standard",
    ///             AccountReplicationType = "LRS",
    ///         });
    ///         var exampleContainer = new Azure.Storage.Container("exampleContainer", new Azure.Storage.ContainerArgs
    ///         {
    ///             StorageAccountName = exampleAccount.Name,
    ///         });
    ///         var exampleServicePrincipal = Output.Create(AzureAD.GetServicePrincipal.InvokeAsync(new AzureAD.GetServicePrincipalArgs
    ///         {
    ///             DisplayName = "HPC Cache Resource Provider",
    ///         }));
    ///         var exampleStorageAccountContrib = new Azure.Authorization.Assignment("exampleStorageAccountContrib", new Azure.Authorization.AssignmentArgs
    ///         {
    ///             Scope = exampleAccount.Id,
    ///             RoleDefinitionName = "Storage Account Contributor",
    ///             PrincipalId = exampleServicePrincipal.Apply(exampleServicePrincipal =&gt; exampleServicePrincipal.ObjectId),
    ///         });
    ///         var exampleStorageBlobDataContrib = new Azure.Authorization.Assignment("exampleStorageBlobDataContrib", new Azure.Authorization.AssignmentArgs
    ///         {
    ///             Scope = exampleAccount.Id,
    ///             RoleDefinitionName = "Storage Blob Data Contributor",
    ///             PrincipalId = exampleServicePrincipal.Apply(exampleServicePrincipal =&gt; exampleServicePrincipal.ObjectId),
    ///         });
    ///         var exampleCacheBlobTarget = new Azure.Hpc.CacheBlobTarget("exampleCacheBlobTarget", new Azure.Hpc.CacheBlobTargetArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             CacheName = exampleCache.Name,
    ///             StorageContainerId = exampleContainer.ResourceManagerId,
    ///             NamespacePath = "/blob_storage",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Blob Targets within an HPC Cache can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:hpc/cacheBlobTarget:CacheBlobTarget example azurerm_hpc_cache_blob_target.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
    /// ```
    /// </summary>
    public partial class CacheBlobTarget : Pulumi.CustomResource
    {
        /// <summary>
        /// The name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("cacheName")]
        public Output<string> CacheName { get; private set; } = null!;

        /// <summary>
        /// The name of the HPC Cache Blob Target. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The client-facing file path of the HPC Cache Blob Target.
        /// </summary>
        [Output("namespacePath")]
        public Output<string> NamespacePath { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.
        /// </summary>
        [Output("storageContainerId")]
        public Output<string> StorageContainerId { get; private set; } = null!;


        /// <summary>
        /// Create a CacheBlobTarget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CacheBlobTarget(string name, CacheBlobTargetArgs args, CustomResourceOptions? options = null)
            : base("azure:hpc/cacheBlobTarget:CacheBlobTarget", name, args ?? new CacheBlobTargetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CacheBlobTarget(string name, Input<string> id, CacheBlobTargetState? state = null, CustomResourceOptions? options = null)
            : base("azure:hpc/cacheBlobTarget:CacheBlobTarget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CacheBlobTarget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CacheBlobTarget Get(string name, Input<string> id, CacheBlobTargetState? state = null, CustomResourceOptions? options = null)
        {
            return new CacheBlobTarget(name, id, state, options);
        }
    }

    public sealed class CacheBlobTargetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("cacheName", required: true)]
        public Input<string> CacheName { get; set; } = null!;

        /// <summary>
        /// The name of the HPC Cache Blob Target. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The client-facing file path of the HPC Cache Blob Target.
        /// </summary>
        [Input("namespacePath", required: true)]
        public Input<string> NamespacePath { get; set; } = null!;

        /// <summary>
        /// The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageContainerId", required: true)]
        public Input<string> StorageContainerId { get; set; } = null!;

        public CacheBlobTargetArgs()
        {
        }
    }

    public sealed class CacheBlobTargetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name HPC Cache, which the HPC Cache Blob Target will be added to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("cacheName")]
        public Input<string>? CacheName { get; set; }

        /// <summary>
        /// The name of the HPC Cache Blob Target. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The client-facing file path of the HPC Cache Blob Target.
        /// </summary>
        [Input("namespacePath")]
        public Input<string>? NamespacePath { get; set; }

        /// <summary>
        /// The name of the Resource Group in which to create the HPC Cache Blob Target. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The Resource Manager ID of the Storage Container used as the HPC Cache Blob Target. Changing this forces a new resource to be created.
        /// </summary>
        [Input("storageContainerId")]
        public Input<string>? StorageContainerId { get; set; }

        public CacheBlobTargetState()
        {
        }
    }
}
