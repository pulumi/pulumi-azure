// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Hpc.Outputs
{

    [OutputType]
    public sealed class CacheAccessPolicyAccessRule
    {
        /// <summary>
        /// The access level for this rule. Possible values are: `rw`, `ro`, `no`.
        /// </summary>
        public readonly string Access;
        /// <summary>
        /// The anonymous GID used when `root_squash_enabled` is `true`.
        /// </summary>
        public readonly int? AnonymousGid;
        /// <summary>
        /// The anonymous UID used when `root_squash_enabled` is `true`.
        /// </summary>
        public readonly int? AnonymousUid;
        /// <summary>
        /// The filter applied to the `scope` for this rule. The filter's format depends on its scope: `default` scope matches all clients and has no filter value; `network` scope takes a CIDR format; `host` takes an IP address or fully qualified domain name. If a client does not match any filter rule and there is no default rule, access is denied.
        /// </summary>
        public readonly string? Filter;
        /// <summary>
        /// Whether to enable [root squash](https://docs.microsoft.com/azure/hpc-cache/access-policies#root-squash)?
        /// </summary>
        public readonly bool? RootSquashEnabled;
        /// <summary>
        /// The scope of this rule. The `scope` and (potentially) the `filter` determine which clients match the rule. Possible values are: `default`, `network`, `host`.
        /// 
        /// &gt; **NOTE:** Each `access_rule` should set a unique `scope`.
        /// </summary>
        public readonly string Scope;
        /// <summary>
        /// Whether allow access to subdirectories under the root export?
        /// </summary>
        public readonly bool? SubmountAccessEnabled;
        /// <summary>
        /// Whether [SUID](https://docs.microsoft.com/azure/hpc-cache/access-policies#suid) is allowed?
        /// </summary>
        public readonly bool? SuidEnabled;

        [OutputConstructor]
        private CacheAccessPolicyAccessRule(
            string access,

            int? anonymousGid,

            int? anonymousUid,

            string? filter,

            bool? rootSquashEnabled,

            string scope,

            bool? submountAccessEnabled,

            bool? suidEnabled)
        {
            Access = access;
            AnonymousGid = anonymousGid;
            AnonymousUid = anonymousUid;
            Filter = filter;
            RootSquashEnabled = rootSquashEnabled;
            Scope = scope;
            SubmountAccessEnabled = submountAccessEnabled;
            SuidEnabled = suidEnabled;
        }
    }
}
