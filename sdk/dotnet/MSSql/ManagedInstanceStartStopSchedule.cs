// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages Start Stop Schedules for an MS SQL Managed Instance.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "database-rg",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleNetworkSecurityGroup = new Azure.Network.NetworkSecurityGroup("example", new()
    ///     {
    ///         Name = "mi-security-group",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var allowManagementInbound = new Azure.Network.NetworkSecurityRule("allow_management_inbound", new()
    ///     {
    ///         Name = "allow_management_inbound",
    ///         Priority = 106,
    ///         Direction = "Inbound",
    ///         Access = "Allow",
    ///         Protocol = "Tcp",
    ///         SourcePortRange = "*",
    ///         DestinationPortRanges = new[]
    ///         {
    ///             "9000",
    ///             "9003",
    ///             "1438",
    ///             "1440",
    ///             "1452",
    ///         },
    ///         SourceAddressPrefix = "*",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowMisubnetInbound = new Azure.Network.NetworkSecurityRule("allow_misubnet_inbound", new()
    ///     {
    ///         Name = "allow_misubnet_inbound",
    ///         Priority = 200,
    ///         Direction = "Inbound",
    ///         Access = "Allow",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "10.0.0.0/24",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowHealthProbeInbound = new Azure.Network.NetworkSecurityRule("allow_health_probe_inbound", new()
    ///     {
    ///         Name = "allow_health_probe_inbound",
    ///         Priority = 300,
    ///         Direction = "Inbound",
    ///         Access = "Allow",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "AzureLoadBalancer",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowTdsInbound = new Azure.Network.NetworkSecurityRule("allow_tds_inbound", new()
    ///     {
    ///         Name = "allow_tds_inbound",
    ///         Priority = 1000,
    ///         Direction = "Inbound",
    ///         Access = "Allow",
    ///         Protocol = "Tcp",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "1433",
    ///         SourceAddressPrefix = "VirtualNetwork",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var denyAllInbound = new Azure.Network.NetworkSecurityRule("deny_all_inbound", new()
    ///     {
    ///         Name = "deny_all_inbound",
    ///         Priority = 4096,
    ///         Direction = "Inbound",
    ///         Access = "Deny",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "*",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowManagementOutbound = new Azure.Network.NetworkSecurityRule("allow_management_outbound", new()
    ///     {
    ///         Name = "allow_management_outbound",
    ///         Priority = 102,
    ///         Direction = "Outbound",
    ///         Access = "Allow",
    ///         Protocol = "Tcp",
    ///         SourcePortRange = "*",
    ///         DestinationPortRanges = new[]
    ///         {
    ///             "80",
    ///             "443",
    ///             "12000",
    ///         },
    ///         SourceAddressPrefix = "*",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowMisubnetOutbound = new Azure.Network.NetworkSecurityRule("allow_misubnet_outbound", new()
    ///     {
    ///         Name = "allow_misubnet_outbound",
    ///         Priority = 200,
    ///         Direction = "Outbound",
    ///         Access = "Allow",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "10.0.0.0/24",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var denyAllOutbound = new Azure.Network.NetworkSecurityRule("deny_all_outbound", new()
    ///     {
    ///         Name = "deny_all_outbound",
    ///         Priority = 4096,
    ///         Direction = "Outbound",
    ///         Access = "Deny",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "*",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    ///     {
    ///         Name = "vnet-mi",
    ///         ResourceGroupName = example.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = example.Location,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("example", new()
    ///     {
    ///         Name = "subnet-mi",
    ///         ResourceGroupName = example.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.0.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "managedinstancedelegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Name = "Microsoft.Sql/managedInstances",
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                         "Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action",
    ///                         "Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleSubnetNetworkSecurityGroupAssociation = new Azure.Network.SubnetNetworkSecurityGroupAssociation("example", new()
    ///     {
    ///         SubnetId = exampleSubnet.Id,
    ///         NetworkSecurityGroupId = exampleNetworkSecurityGroup.Id,
    ///     });
    /// 
    ///     var exampleRouteTable = new Azure.Network.RouteTable("example", new()
    ///     {
    ///         Name = "routetable-mi",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         DisableBgpRoutePropagation = false,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleSubnet,
    ///         },
    ///     });
    /// 
    ///     var exampleSubnetRouteTableAssociation = new Azure.Network.SubnetRouteTableAssociation("example", new()
    ///     {
    ///         SubnetId = exampleSubnet.Id,
    ///         RouteTableId = exampleRouteTable.Id,
    ///     });
    /// 
    ///     var exampleManagedInstance = new Azure.MSSql.ManagedInstance("example", new()
    ///     {
    ///         Name = "managedsqlinstance",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         LicenseType = "BasePrice",
    ///         SkuName = "GP_Gen5",
    ///         StorageSizeInGb = 32,
    ///         SubnetId = exampleSubnet.Id,
    ///         Vcores = 4,
    ///         AdministratorLogin = "mradministrator",
    ///         AdministratorLoginPassword = "thisIsDog11",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleSubnetNetworkSecurityGroupAssociation,
    ///             exampleSubnetRouteTableAssociation,
    ///         },
    ///     });
    /// 
    ///     var exampleManagedInstanceStartStopSchedule = new Azure.MSSql.ManagedInstanceStartStopSchedule("example", new()
    ///     {
    ///         ManagedInstanceId = exampleManagedInstance.Id,
    ///         TimezoneId = "Central European Standard Time",
    ///         Schedules = new[]
    ///         {
    ///             new Azure.MSSql.Inputs.ManagedInstanceStartStopScheduleScheduleArgs
    ///             {
    ///                 StartDay = "Monday",
    ///                 StartTime = "08:00",
    ///                 StopDay = "Monday",
    ///                 StopTime = "11:00",
    ///             },
    ///             new Azure.MSSql.Inputs.ManagedInstanceStartStopScheduleScheduleArgs
    ///             {
    ///                 StartDay = "Tuesday",
    ///                 StartTime = "12:00",
    ///                 StopDay = "Tuesday",
    ///                 StopTime = "18:00",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.Sql` - 2023-08-01-preview
    /// 
    /// ## Import
    /// 
    /// MS SQL Managed Instance Start Stop Schedule can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:mssql/managedInstanceStartStopSchedule:ManagedInstanceStartStopSchedule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Sql/managedInstances/managedInstance1/startStopSchedules/default
    /// ```
    /// </summary>
    [AzureResourceType("azure:mssql/managedInstanceStartStopSchedule:ManagedInstanceStartStopSchedule")]
    public partial class ManagedInstanceStartStopSchedule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the description of the schedule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the Managed Instance. Changing this forces a new Sql Start Stop Managed Instance Schedule to be created.
        /// </summary>
        [Output("managedInstanceId")]
        public Output<string> ManagedInstanceId { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the next action will be executed in the corresponding schedule time zone.
        /// </summary>
        [Output("nextExecutionTime")]
        public Output<string> NextExecutionTime { get; private set; } = null!;

        /// <summary>
        /// Next action to be executed (Start or Stop).
        /// </summary>
        [Output("nextRunAction")]
        public Output<string> NextRunAction { get; private set; } = null!;

        /// <summary>
        /// A `Schedule` block as defined below.
        /// </summary>
        [Output("schedules")]
        public Output<ImmutableArray<Outputs.ManagedInstanceStartStopScheduleSchedule>> Schedules { get; private set; } = null!;

        /// <summary>
        /// Specifies the time zone of the schedule. Defaults to `UTC`.
        /// </summary>
        [Output("timezoneId")]
        public Output<string?> TimezoneId { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedInstanceStartStopSchedule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedInstanceStartStopSchedule(string name, ManagedInstanceStartStopScheduleArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/managedInstanceStartStopSchedule:ManagedInstanceStartStopSchedule", name, args ?? new ManagedInstanceStartStopScheduleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedInstanceStartStopSchedule(string name, Input<string> id, ManagedInstanceStartStopScheduleState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/managedInstanceStartStopSchedule:ManagedInstanceStartStopSchedule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedInstanceStartStopSchedule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedInstanceStartStopSchedule Get(string name, Input<string> id, ManagedInstanceStartStopScheduleState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedInstanceStartStopSchedule(name, id, state, options);
        }
    }

    public sealed class ManagedInstanceStartStopScheduleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the description of the schedule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the ID of the Managed Instance. Changing this forces a new Sql Start Stop Managed Instance Schedule to be created.
        /// </summary>
        [Input("managedInstanceId", required: true)]
        public Input<string> ManagedInstanceId { get; set; } = null!;

        [Input("schedules", required: true)]
        private InputList<Inputs.ManagedInstanceStartStopScheduleScheduleArgs>? _schedules;

        /// <summary>
        /// A `Schedule` block as defined below.
        /// </summary>
        public InputList<Inputs.ManagedInstanceStartStopScheduleScheduleArgs> Schedules
        {
            get => _schedules ?? (_schedules = new InputList<Inputs.ManagedInstanceStartStopScheduleScheduleArgs>());
            set => _schedules = value;
        }

        /// <summary>
        /// Specifies the time zone of the schedule. Defaults to `UTC`.
        /// </summary>
        [Input("timezoneId")]
        public Input<string>? TimezoneId { get; set; }

        public ManagedInstanceStartStopScheduleArgs()
        {
        }
        public static new ManagedInstanceStartStopScheduleArgs Empty => new ManagedInstanceStartStopScheduleArgs();
    }

    public sealed class ManagedInstanceStartStopScheduleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the description of the schedule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies the ID of the Managed Instance. Changing this forces a new Sql Start Stop Managed Instance Schedule to be created.
        /// </summary>
        [Input("managedInstanceId")]
        public Input<string>? ManagedInstanceId { get; set; }

        /// <summary>
        /// Timestamp when the next action will be executed in the corresponding schedule time zone.
        /// </summary>
        [Input("nextExecutionTime")]
        public Input<string>? NextExecutionTime { get; set; }

        /// <summary>
        /// Next action to be executed (Start or Stop).
        /// </summary>
        [Input("nextRunAction")]
        public Input<string>? NextRunAction { get; set; }

        [Input("schedules")]
        private InputList<Inputs.ManagedInstanceStartStopScheduleScheduleGetArgs>? _schedules;

        /// <summary>
        /// A `Schedule` block as defined below.
        /// </summary>
        public InputList<Inputs.ManagedInstanceStartStopScheduleScheduleGetArgs> Schedules
        {
            get => _schedules ?? (_schedules = new InputList<Inputs.ManagedInstanceStartStopScheduleScheduleGetArgs>());
            set => _schedules = value;
        }

        /// <summary>
        /// Specifies the time zone of the schedule. Defaults to `UTC`.
        /// </summary>
        [Input("timezoneId")]
        public Input<string>? TimezoneId { get; set; }

        public ManagedInstanceStartStopScheduleState()
        {
        }
        public static new ManagedInstanceStartStopScheduleState Empty => new ManagedInstanceStartStopScheduleState();
    }
}
