// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages a MS SQL Database.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleServer = new Azure.MSSql.Server("exampleServer", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Version = "12.0",
    ///         AdministratorLogin = "4dm1n157r470r",
    ///         AdministratorLoginPassword = "4-v3ry-53cr37-p455w0rd",
    ///     });
    /// 
    ///     var exampleDatabase = new Azure.MSSql.Database("exampleDatabase", new()
    ///     {
    ///         ServerId = exampleServer.Id,
    ///         Collation = "SQL_Latin1_General_CP1_CI_AS",
    ///         LicenseType = "LicenseIncluded",
    ///         MaxSizeGb = 4,
    ///         ReadScale = true,
    ///         SkuName = "S0",
    ///         ZoneRedundant = true,
    ///         EnclaveType = "VBS",
    ///         Tags = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SQL Database can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mssql/database:Database example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/databases/example1
    /// ```
    /// </summary>
    [AzureResourceType("azure:mssql/database:Database")]
    public partial class Database : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Time in minutes after which database is automatically paused. A value of `-1` means that automatic pause is disabled. This property is only settable for Serverless databases.
        /// </summary>
        [Output("autoPauseDelayInMinutes")]
        public Output<int> AutoPauseDelayInMinutes { get; private set; } = null!;

        /// <summary>
        /// Specifies the collation of the database. Changing this forces a new resource to be created.
        /// </summary>
        [Output("collation")]
        public Output<string> Collation { get; private set; } = null!;

        /// <summary>
        /// The create mode of the database. Possible values are `Copy`, `Default`, `OnlineSecondary`, `PointInTimeRestore`, `Recovery`, `Restore`, `RestoreExternalBackup`, `RestoreExternalBackupSecondary`, `RestoreLongTermRetentionBackup` and `Secondary`. Mutually exclusive with `import`. Changing this forces a new resource to be created. Defaults to `Default`.
        /// </summary>
        [Output("createMode")]
        public Output<string?> CreateMode { get; private set; } = null!;

        /// <summary>
        /// The ID of the source database from which to create the new database. This should only be used for databases with `create_mode` values that use another database as reference. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** When configuring a secondary database, please be aware of the constraints for the `sku_name` property, as noted below, for both the primary and secondary databases. The `sku_name` of the secondary database may be inadvertently changed to match that of the primary when an incompatible combination of SKUs is detected by the provider.
        /// </summary>
        [Output("creationSourceDatabaseId")]
        public Output<string> CreationSourceDatabaseId { get; private set; } = null!;

        /// <summary>
        /// Specifies the ID of the elastic pool containing this database.
        /// </summary>
        [Output("elasticPoolId")]
        public Output<string?> ElasticPoolId { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of enclave to be used by the database. Possible value `VBS`.
        /// 
        /// &gt; **NOTE:** `enclave_type` is currently not supported for DW (e.g, DataWarehouse) and DC-series SKUs.
        /// 
        /// &gt; **NOTE:** Geo Replicated and Failover databases must have the same `enclave_type`.
        /// </summary>
        [Output("enclaveType")]
        public Output<string?> EnclaveType { get; private set; } = null!;

        /// <summary>
        /// A boolean that specifies if the Geo Backup Policy is enabled. Defaults to `true`.
        /// 
        /// &gt; **NOTE:** `geo_backup_enabled` is only applicable for DataWarehouse SKUs (DW*). This setting is ignored for all other SKUs.
        /// </summary>
        [Output("geoBackupEnabled")]
        public Output<bool?> GeoBackupEnabled { get; private set; } = null!;

        /// <summary>
        /// A `import` block as documented below. Mutually exclusive with `create_mode`.
        /// </summary>
        [Output("import")]
        public Output<Outputs.DatabaseImport?> Import { get; private set; } = null!;

        /// <summary>
        /// A boolean that specifies if this is a ledger database. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("ledgerEnabled")]
        public Output<bool> LedgerEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the license type applied to this database. Possible values are `LicenseIncluded` and `BasePrice`.
        /// </summary>
        [Output("licenseType")]
        public Output<string> LicenseType { get; private set; } = null!;

        /// <summary>
        /// A `long_term_retention_policy` block as defined below.
        /// </summary>
        [Output("longTermRetentionPolicy")]
        public Output<Outputs.DatabaseLongTermRetentionPolicy> LongTermRetentionPolicy { get; private set; } = null!;

        /// <summary>
        /// The name of the Public Maintenance Configuration window to apply to the database. Valid values include `SQL_Default`, `SQL_EastUS_DB_1`, `SQL_EastUS2_DB_1`, `SQL_SoutheastAsia_DB_1`, `SQL_AustraliaEast_DB_1`, `SQL_NorthEurope_DB_1`, `SQL_SouthCentralUS_DB_1`, `SQL_WestUS2_DB_1`, `SQL_UKSouth_DB_1`, `SQL_WestEurope_DB_1`, `SQL_EastUS_DB_2`, `SQL_EastUS2_DB_2`, `SQL_WestUS2_DB_2`, `SQL_SoutheastAsia_DB_2`, `SQL_AustraliaEast_DB_2`, `SQL_NorthEurope_DB_2`, `SQL_SouthCentralUS_DB_2`, `SQL_UKSouth_DB_2`, `SQL_WestEurope_DB_2`, `SQL_AustraliaSoutheast_DB_1`, `SQL_BrazilSouth_DB_1`, `SQL_CanadaCentral_DB_1`, `SQL_CanadaEast_DB_1`, `SQL_CentralUS_DB_1`, `SQL_EastAsia_DB_1`, `SQL_FranceCentral_DB_1`, `SQL_GermanyWestCentral_DB_1`, `SQL_CentralIndia_DB_1`, `SQL_SouthIndia_DB_1`, `SQL_JapanEast_DB_1`, `SQL_JapanWest_DB_1`, `SQL_NorthCentralUS_DB_1`, `SQL_UKWest_DB_1`, `SQL_WestUS_DB_1`, `SQL_AustraliaSoutheast_DB_2`, `SQL_BrazilSouth_DB_2`, `SQL_CanadaCentral_DB_2`, `SQL_CanadaEast_DB_2`, `SQL_CentralUS_DB_2`, `SQL_EastAsia_DB_2`, `SQL_FranceCentral_DB_2`, `SQL_GermanyWestCentral_DB_2`, `SQL_CentralIndia_DB_2`, `SQL_SouthIndia_DB_2`, `SQL_JapanEast_DB_2`, `SQL_JapanWest_DB_2`, `SQL_NorthCentralUS_DB_2`, `SQL_UKWest_DB_2`, `SQL_WestUS_DB_2`, `SQL_WestCentralUS_DB_1`, `SQL_FranceSouth_DB_1`, `SQL_WestCentralUS_DB_2`, `SQL_FranceSouth_DB_2`, `SQL_SwitzerlandNorth_DB_1`, `SQL_SwitzerlandNorth_DB_2`, `SQL_BrazilSoutheast_DB_1`, `SQL_UAENorth_DB_1`, `SQL_BrazilSoutheast_DB_2`, `SQL_UAENorth_DB_2`. Defaults to `SQL_Default`.
        /// 
        /// &gt; **NOTE:** `maintenance_configuration_name` is only applicable if `elastic_pool_id` is not set.
        /// </summary>
        [Output("maintenanceConfigurationName")]
        public Output<string> MaintenanceConfigurationName { get; private set; } = null!;

        /// <summary>
        /// The max size of the database in gigabytes.
        /// 
        /// &gt; **NOTE:** This value should not be configured when the `create_mode` is `Secondary` or `OnlineSecondary`, as the sizing of the primary is then used as per [Azure documentation](https://docs.microsoft.com/azure/azure-sql/database/single-database-scale#geo-replicated-database).
        /// </summary>
        [Output("maxSizeGb")]
        public Output<int> MaxSizeGb { get; private set; } = null!;

        /// <summary>
        /// Minimal capacity that database will always have allocated, if not paused. This property is only settable for Serverless databases.
        /// </summary>
        [Output("minCapacity")]
        public Output<double> MinCapacity { get; private set; } = null!;

        /// <summary>
        /// The name of the MS SQL Database. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of readonly secondary replicas associated with the database to which readonly application intent connections may be routed. This property is only settable for Hyperscale edition databases.
        /// </summary>
        [Output("readReplicaCount")]
        public Output<int> ReadReplicaCount { get; private set; } = null!;

        /// <summary>
        /// If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica. This property is only settable for Premium and Business Critical databases.
        /// </summary>
        [Output("readScale")]
        public Output<bool> ReadScale { get; private set; } = null!;

        /// <summary>
        /// The ID of the database to be recovered. This property is only applicable when the `create_mode` is `Recovery`.
        /// </summary>
        [Output("recoverDatabaseId")]
        public Output<string?> RecoverDatabaseId { get; private set; } = null!;

        /// <summary>
        /// The ID of the database to be restored. This property is only applicable when the `create_mode` is `Restore`.
        /// </summary>
        [Output("restoreDroppedDatabaseId")]
        public Output<string?> RestoreDroppedDatabaseId { get; private set; } = null!;

        /// <summary>
        /// Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database. This property is only settable for `create_mode`= `PointInTimeRestore` databases.
        /// </summary>
        [Output("restorePointInTime")]
        public Output<string> RestorePointInTime { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the sample schema to apply when creating this database. Possible value is `AdventureWorksLT`.
        /// </summary>
        [Output("sampleName")]
        public Output<string> SampleName { get; private set; } = null!;

        /// <summary>
        /// The id of the MS SQL Server on which to create the database. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** This setting is still required for "Serverless" SKUs
        /// </summary>
        [Output("serverId")]
        public Output<string> ServerId { get; private set; } = null!;

        /// <summary>
        /// A `short_term_retention_policy` block as defined below.
        /// </summary>
        [Output("shortTermRetentionPolicy")]
        public Output<Outputs.DatabaseShortTermRetentionPolicy> ShortTermRetentionPolicy { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the SKU used by the database. For example, `GP_S_Gen5_2`,`HS_Gen4_1`,`BC_Gen5_2`, `ElasticPool`, `Basic`,`S0`, `P2` ,`DW100c`, `DS100`. Changing this from the HyperScale service tier to another service tier will create a new resource.
        /// 
        /// &gt; **NOTE:** The default `sku_name` value may differ between Azure locations depending on local availability of Gen4/Gen5 capacity. When databases are replicated using the `creation_source_database_id` property, the source (primary) database cannot have a higher SKU service tier than any secondary databases. When changing the `sku_name` of a database having one or more secondary databases, this resource will first update any secondary databases as necessary. In such cases it's recommended to use the same `sku_name` in your configuration for all related databases, as not doing so may cause an unresolvable diff during subsequent plans.
        /// </summary>
        [Output("skuName")]
        public Output<string> SkuName { get; private set; } = null!;

        /// <summary>
        /// Specifies the storage account type used to store backups for this database. Possible values are `Geo`, `Local` and `Zone`. Defaults to `Geo`.
        /// </summary>
        [Output("storageAccountType")]
        public Output<string?> StorageAccountType { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Threat detection policy configuration. The `threat_detection_policy` block supports fields documented below.
        /// </summary>
        [Output("threatDetectionPolicy")]
        public Output<Outputs.DatabaseThreatDetectionPolicy> ThreatDetectionPolicy { get; private set; } = null!;

        /// <summary>
        /// If set to true, Transparent Data Encryption will be enabled on the database. Defaults to `true`.
        /// 
        /// &gt; **NOTE:** `transparent_data_encryption_enabled` can only be set to `false` on DW (e.g, DataWarehouse) server SKUs.
        /// </summary>
        [Output("transparentDataEncryptionEnabled")]
        public Output<bool?> TransparentDataEncryptionEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones. This property is only settable for Premium and Business Critical databases.
        /// </summary>
        [Output("zoneRedundant")]
        public Output<bool> ZoneRedundant { get; private set; } = null!;


        /// <summary>
        /// Create a Database resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Database(string name, DatabaseArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/database:Database", name, args ?? new DatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Database(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/database:Database", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Database resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Database Get(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new Database(name, id, state, options);
        }
    }

    public sealed class DatabaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time in minutes after which database is automatically paused. A value of `-1` means that automatic pause is disabled. This property is only settable for Serverless databases.
        /// </summary>
        [Input("autoPauseDelayInMinutes")]
        public Input<int>? AutoPauseDelayInMinutes { get; set; }

        /// <summary>
        /// Specifies the collation of the database. Changing this forces a new resource to be created.
        /// </summary>
        [Input("collation")]
        public Input<string>? Collation { get; set; }

        /// <summary>
        /// The create mode of the database. Possible values are `Copy`, `Default`, `OnlineSecondary`, `PointInTimeRestore`, `Recovery`, `Restore`, `RestoreExternalBackup`, `RestoreExternalBackupSecondary`, `RestoreLongTermRetentionBackup` and `Secondary`. Mutually exclusive with `import`. Changing this forces a new resource to be created. Defaults to `Default`.
        /// </summary>
        [Input("createMode")]
        public Input<string>? CreateMode { get; set; }

        /// <summary>
        /// The ID of the source database from which to create the new database. This should only be used for databases with `create_mode` values that use another database as reference. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** When configuring a secondary database, please be aware of the constraints for the `sku_name` property, as noted below, for both the primary and secondary databases. The `sku_name` of the secondary database may be inadvertently changed to match that of the primary when an incompatible combination of SKUs is detected by the provider.
        /// </summary>
        [Input("creationSourceDatabaseId")]
        public Input<string>? CreationSourceDatabaseId { get; set; }

        /// <summary>
        /// Specifies the ID of the elastic pool containing this database.
        /// </summary>
        [Input("elasticPoolId")]
        public Input<string>? ElasticPoolId { get; set; }

        /// <summary>
        /// Specifies the type of enclave to be used by the database. Possible value `VBS`.
        /// 
        /// &gt; **NOTE:** `enclave_type` is currently not supported for DW (e.g, DataWarehouse) and DC-series SKUs.
        /// 
        /// &gt; **NOTE:** Geo Replicated and Failover databases must have the same `enclave_type`.
        /// </summary>
        [Input("enclaveType")]
        public Input<string>? EnclaveType { get; set; }

        /// <summary>
        /// A boolean that specifies if the Geo Backup Policy is enabled. Defaults to `true`.
        /// 
        /// &gt; **NOTE:** `geo_backup_enabled` is only applicable for DataWarehouse SKUs (DW*). This setting is ignored for all other SKUs.
        /// </summary>
        [Input("geoBackupEnabled")]
        public Input<bool>? GeoBackupEnabled { get; set; }

        /// <summary>
        /// A `import` block as documented below. Mutually exclusive with `create_mode`.
        /// </summary>
        [Input("import")]
        public Input<Inputs.DatabaseImportArgs>? Import { get; set; }

        /// <summary>
        /// A boolean that specifies if this is a ledger database. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ledgerEnabled")]
        public Input<bool>? LedgerEnabled { get; set; }

        /// <summary>
        /// Specifies the license type applied to this database. Possible values are `LicenseIncluded` and `BasePrice`.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// A `long_term_retention_policy` block as defined below.
        /// </summary>
        [Input("longTermRetentionPolicy")]
        public Input<Inputs.DatabaseLongTermRetentionPolicyArgs>? LongTermRetentionPolicy { get; set; }

        /// <summary>
        /// The name of the Public Maintenance Configuration window to apply to the database. Valid values include `SQL_Default`, `SQL_EastUS_DB_1`, `SQL_EastUS2_DB_1`, `SQL_SoutheastAsia_DB_1`, `SQL_AustraliaEast_DB_1`, `SQL_NorthEurope_DB_1`, `SQL_SouthCentralUS_DB_1`, `SQL_WestUS2_DB_1`, `SQL_UKSouth_DB_1`, `SQL_WestEurope_DB_1`, `SQL_EastUS_DB_2`, `SQL_EastUS2_DB_2`, `SQL_WestUS2_DB_2`, `SQL_SoutheastAsia_DB_2`, `SQL_AustraliaEast_DB_2`, `SQL_NorthEurope_DB_2`, `SQL_SouthCentralUS_DB_2`, `SQL_UKSouth_DB_2`, `SQL_WestEurope_DB_2`, `SQL_AustraliaSoutheast_DB_1`, `SQL_BrazilSouth_DB_1`, `SQL_CanadaCentral_DB_1`, `SQL_CanadaEast_DB_1`, `SQL_CentralUS_DB_1`, `SQL_EastAsia_DB_1`, `SQL_FranceCentral_DB_1`, `SQL_GermanyWestCentral_DB_1`, `SQL_CentralIndia_DB_1`, `SQL_SouthIndia_DB_1`, `SQL_JapanEast_DB_1`, `SQL_JapanWest_DB_1`, `SQL_NorthCentralUS_DB_1`, `SQL_UKWest_DB_1`, `SQL_WestUS_DB_1`, `SQL_AustraliaSoutheast_DB_2`, `SQL_BrazilSouth_DB_2`, `SQL_CanadaCentral_DB_2`, `SQL_CanadaEast_DB_2`, `SQL_CentralUS_DB_2`, `SQL_EastAsia_DB_2`, `SQL_FranceCentral_DB_2`, `SQL_GermanyWestCentral_DB_2`, `SQL_CentralIndia_DB_2`, `SQL_SouthIndia_DB_2`, `SQL_JapanEast_DB_2`, `SQL_JapanWest_DB_2`, `SQL_NorthCentralUS_DB_2`, `SQL_UKWest_DB_2`, `SQL_WestUS_DB_2`, `SQL_WestCentralUS_DB_1`, `SQL_FranceSouth_DB_1`, `SQL_WestCentralUS_DB_2`, `SQL_FranceSouth_DB_2`, `SQL_SwitzerlandNorth_DB_1`, `SQL_SwitzerlandNorth_DB_2`, `SQL_BrazilSoutheast_DB_1`, `SQL_UAENorth_DB_1`, `SQL_BrazilSoutheast_DB_2`, `SQL_UAENorth_DB_2`. Defaults to `SQL_Default`.
        /// 
        /// &gt; **NOTE:** `maintenance_configuration_name` is only applicable if `elastic_pool_id` is not set.
        /// </summary>
        [Input("maintenanceConfigurationName")]
        public Input<string>? MaintenanceConfigurationName { get; set; }

        /// <summary>
        /// The max size of the database in gigabytes.
        /// 
        /// &gt; **NOTE:** This value should not be configured when the `create_mode` is `Secondary` or `OnlineSecondary`, as the sizing of the primary is then used as per [Azure documentation](https://docs.microsoft.com/azure/azure-sql/database/single-database-scale#geo-replicated-database).
        /// </summary>
        [Input("maxSizeGb")]
        public Input<int>? MaxSizeGb { get; set; }

        /// <summary>
        /// Minimal capacity that database will always have allocated, if not paused. This property is only settable for Serverless databases.
        /// </summary>
        [Input("minCapacity")]
        public Input<double>? MinCapacity { get; set; }

        /// <summary>
        /// The name of the MS SQL Database. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of readonly secondary replicas associated with the database to which readonly application intent connections may be routed. This property is only settable for Hyperscale edition databases.
        /// </summary>
        [Input("readReplicaCount")]
        public Input<int>? ReadReplicaCount { get; set; }

        /// <summary>
        /// If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica. This property is only settable for Premium and Business Critical databases.
        /// </summary>
        [Input("readScale")]
        public Input<bool>? ReadScale { get; set; }

        /// <summary>
        /// The ID of the database to be recovered. This property is only applicable when the `create_mode` is `Recovery`.
        /// </summary>
        [Input("recoverDatabaseId")]
        public Input<string>? RecoverDatabaseId { get; set; }

        /// <summary>
        /// The ID of the database to be restored. This property is only applicable when the `create_mode` is `Restore`.
        /// </summary>
        [Input("restoreDroppedDatabaseId")]
        public Input<string>? RestoreDroppedDatabaseId { get; set; }

        /// <summary>
        /// Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database. This property is only settable for `create_mode`= `PointInTimeRestore` databases.
        /// </summary>
        [Input("restorePointInTime")]
        public Input<string>? RestorePointInTime { get; set; }

        /// <summary>
        /// Specifies the name of the sample schema to apply when creating this database. Possible value is `AdventureWorksLT`.
        /// </summary>
        [Input("sampleName")]
        public Input<string>? SampleName { get; set; }

        /// <summary>
        /// The id of the MS SQL Server on which to create the database. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** This setting is still required for "Serverless" SKUs
        /// </summary>
        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        /// <summary>
        /// A `short_term_retention_policy` block as defined below.
        /// </summary>
        [Input("shortTermRetentionPolicy")]
        public Input<Inputs.DatabaseShortTermRetentionPolicyArgs>? ShortTermRetentionPolicy { get; set; }

        /// <summary>
        /// Specifies the name of the SKU used by the database. For example, `GP_S_Gen5_2`,`HS_Gen4_1`,`BC_Gen5_2`, `ElasticPool`, `Basic`,`S0`, `P2` ,`DW100c`, `DS100`. Changing this from the HyperScale service tier to another service tier will create a new resource.
        /// 
        /// &gt; **NOTE:** The default `sku_name` value may differ between Azure locations depending on local availability of Gen4/Gen5 capacity. When databases are replicated using the `creation_source_database_id` property, the source (primary) database cannot have a higher SKU service tier than any secondary databases. When changing the `sku_name` of a database having one or more secondary databases, this resource will first update any secondary databases as necessary. In such cases it's recommended to use the same `sku_name` in your configuration for all related databases, as not doing so may cause an unresolvable diff during subsequent plans.
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        /// <summary>
        /// Specifies the storage account type used to store backups for this database. Possible values are `Geo`, `Local` and `Zone`. Defaults to `Geo`.
        /// </summary>
        [Input("storageAccountType")]
        public Input<string>? StorageAccountType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Threat detection policy configuration. The `threat_detection_policy` block supports fields documented below.
        /// </summary>
        [Input("threatDetectionPolicy")]
        public Input<Inputs.DatabaseThreatDetectionPolicyArgs>? ThreatDetectionPolicy { get; set; }

        /// <summary>
        /// If set to true, Transparent Data Encryption will be enabled on the database. Defaults to `true`.
        /// 
        /// &gt; **NOTE:** `transparent_data_encryption_enabled` can only be set to `false` on DW (e.g, DataWarehouse) server SKUs.
        /// </summary>
        [Input("transparentDataEncryptionEnabled")]
        public Input<bool>? TransparentDataEncryptionEnabled { get; set; }

        /// <summary>
        /// Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones. This property is only settable for Premium and Business Critical databases.
        /// </summary>
        [Input("zoneRedundant")]
        public Input<bool>? ZoneRedundant { get; set; }

        public DatabaseArgs()
        {
        }
        public static new DatabaseArgs Empty => new DatabaseArgs();
    }

    public sealed class DatabaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time in minutes after which database is automatically paused. A value of `-1` means that automatic pause is disabled. This property is only settable for Serverless databases.
        /// </summary>
        [Input("autoPauseDelayInMinutes")]
        public Input<int>? AutoPauseDelayInMinutes { get; set; }

        /// <summary>
        /// Specifies the collation of the database. Changing this forces a new resource to be created.
        /// </summary>
        [Input("collation")]
        public Input<string>? Collation { get; set; }

        /// <summary>
        /// The create mode of the database. Possible values are `Copy`, `Default`, `OnlineSecondary`, `PointInTimeRestore`, `Recovery`, `Restore`, `RestoreExternalBackup`, `RestoreExternalBackupSecondary`, `RestoreLongTermRetentionBackup` and `Secondary`. Mutually exclusive with `import`. Changing this forces a new resource to be created. Defaults to `Default`.
        /// </summary>
        [Input("createMode")]
        public Input<string>? CreateMode { get; set; }

        /// <summary>
        /// The ID of the source database from which to create the new database. This should only be used for databases with `create_mode` values that use another database as reference. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** When configuring a secondary database, please be aware of the constraints for the `sku_name` property, as noted below, for both the primary and secondary databases. The `sku_name` of the secondary database may be inadvertently changed to match that of the primary when an incompatible combination of SKUs is detected by the provider.
        /// </summary>
        [Input("creationSourceDatabaseId")]
        public Input<string>? CreationSourceDatabaseId { get; set; }

        /// <summary>
        /// Specifies the ID of the elastic pool containing this database.
        /// </summary>
        [Input("elasticPoolId")]
        public Input<string>? ElasticPoolId { get; set; }

        /// <summary>
        /// Specifies the type of enclave to be used by the database. Possible value `VBS`.
        /// 
        /// &gt; **NOTE:** `enclave_type` is currently not supported for DW (e.g, DataWarehouse) and DC-series SKUs.
        /// 
        /// &gt; **NOTE:** Geo Replicated and Failover databases must have the same `enclave_type`.
        /// </summary>
        [Input("enclaveType")]
        public Input<string>? EnclaveType { get; set; }

        /// <summary>
        /// A boolean that specifies if the Geo Backup Policy is enabled. Defaults to `true`.
        /// 
        /// &gt; **NOTE:** `geo_backup_enabled` is only applicable for DataWarehouse SKUs (DW*). This setting is ignored for all other SKUs.
        /// </summary>
        [Input("geoBackupEnabled")]
        public Input<bool>? GeoBackupEnabled { get; set; }

        /// <summary>
        /// A `import` block as documented below. Mutually exclusive with `create_mode`.
        /// </summary>
        [Input("import")]
        public Input<Inputs.DatabaseImportGetArgs>? Import { get; set; }

        /// <summary>
        /// A boolean that specifies if this is a ledger database. Defaults to `false`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ledgerEnabled")]
        public Input<bool>? LedgerEnabled { get; set; }

        /// <summary>
        /// Specifies the license type applied to this database. Possible values are `LicenseIncluded` and `BasePrice`.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// A `long_term_retention_policy` block as defined below.
        /// </summary>
        [Input("longTermRetentionPolicy")]
        public Input<Inputs.DatabaseLongTermRetentionPolicyGetArgs>? LongTermRetentionPolicy { get; set; }

        /// <summary>
        /// The name of the Public Maintenance Configuration window to apply to the database. Valid values include `SQL_Default`, `SQL_EastUS_DB_1`, `SQL_EastUS2_DB_1`, `SQL_SoutheastAsia_DB_1`, `SQL_AustraliaEast_DB_1`, `SQL_NorthEurope_DB_1`, `SQL_SouthCentralUS_DB_1`, `SQL_WestUS2_DB_1`, `SQL_UKSouth_DB_1`, `SQL_WestEurope_DB_1`, `SQL_EastUS_DB_2`, `SQL_EastUS2_DB_2`, `SQL_WestUS2_DB_2`, `SQL_SoutheastAsia_DB_2`, `SQL_AustraliaEast_DB_2`, `SQL_NorthEurope_DB_2`, `SQL_SouthCentralUS_DB_2`, `SQL_UKSouth_DB_2`, `SQL_WestEurope_DB_2`, `SQL_AustraliaSoutheast_DB_1`, `SQL_BrazilSouth_DB_1`, `SQL_CanadaCentral_DB_1`, `SQL_CanadaEast_DB_1`, `SQL_CentralUS_DB_1`, `SQL_EastAsia_DB_1`, `SQL_FranceCentral_DB_1`, `SQL_GermanyWestCentral_DB_1`, `SQL_CentralIndia_DB_1`, `SQL_SouthIndia_DB_1`, `SQL_JapanEast_DB_1`, `SQL_JapanWest_DB_1`, `SQL_NorthCentralUS_DB_1`, `SQL_UKWest_DB_1`, `SQL_WestUS_DB_1`, `SQL_AustraliaSoutheast_DB_2`, `SQL_BrazilSouth_DB_2`, `SQL_CanadaCentral_DB_2`, `SQL_CanadaEast_DB_2`, `SQL_CentralUS_DB_2`, `SQL_EastAsia_DB_2`, `SQL_FranceCentral_DB_2`, `SQL_GermanyWestCentral_DB_2`, `SQL_CentralIndia_DB_2`, `SQL_SouthIndia_DB_2`, `SQL_JapanEast_DB_2`, `SQL_JapanWest_DB_2`, `SQL_NorthCentralUS_DB_2`, `SQL_UKWest_DB_2`, `SQL_WestUS_DB_2`, `SQL_WestCentralUS_DB_1`, `SQL_FranceSouth_DB_1`, `SQL_WestCentralUS_DB_2`, `SQL_FranceSouth_DB_2`, `SQL_SwitzerlandNorth_DB_1`, `SQL_SwitzerlandNorth_DB_2`, `SQL_BrazilSoutheast_DB_1`, `SQL_UAENorth_DB_1`, `SQL_BrazilSoutheast_DB_2`, `SQL_UAENorth_DB_2`. Defaults to `SQL_Default`.
        /// 
        /// &gt; **NOTE:** `maintenance_configuration_name` is only applicable if `elastic_pool_id` is not set.
        /// </summary>
        [Input("maintenanceConfigurationName")]
        public Input<string>? MaintenanceConfigurationName { get; set; }

        /// <summary>
        /// The max size of the database in gigabytes.
        /// 
        /// &gt; **NOTE:** This value should not be configured when the `create_mode` is `Secondary` or `OnlineSecondary`, as the sizing of the primary is then used as per [Azure documentation](https://docs.microsoft.com/azure/azure-sql/database/single-database-scale#geo-replicated-database).
        /// </summary>
        [Input("maxSizeGb")]
        public Input<int>? MaxSizeGb { get; set; }

        /// <summary>
        /// Minimal capacity that database will always have allocated, if not paused. This property is only settable for Serverless databases.
        /// </summary>
        [Input("minCapacity")]
        public Input<double>? MinCapacity { get; set; }

        /// <summary>
        /// The name of the MS SQL Database. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of readonly secondary replicas associated with the database to which readonly application intent connections may be routed. This property is only settable for Hyperscale edition databases.
        /// </summary>
        [Input("readReplicaCount")]
        public Input<int>? ReadReplicaCount { get; set; }

        /// <summary>
        /// If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica. This property is only settable for Premium and Business Critical databases.
        /// </summary>
        [Input("readScale")]
        public Input<bool>? ReadScale { get; set; }

        /// <summary>
        /// The ID of the database to be recovered. This property is only applicable when the `create_mode` is `Recovery`.
        /// </summary>
        [Input("recoverDatabaseId")]
        public Input<string>? RecoverDatabaseId { get; set; }

        /// <summary>
        /// The ID of the database to be restored. This property is only applicable when the `create_mode` is `Restore`.
        /// </summary>
        [Input("restoreDroppedDatabaseId")]
        public Input<string>? RestoreDroppedDatabaseId { get; set; }

        /// <summary>
        /// Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database. This property is only settable for `create_mode`= `PointInTimeRestore` databases.
        /// </summary>
        [Input("restorePointInTime")]
        public Input<string>? RestorePointInTime { get; set; }

        /// <summary>
        /// Specifies the name of the sample schema to apply when creating this database. Possible value is `AdventureWorksLT`.
        /// </summary>
        [Input("sampleName")]
        public Input<string>? SampleName { get; set; }

        /// <summary>
        /// The id of the MS SQL Server on which to create the database. Changing this forces a new resource to be created.
        /// 
        /// &gt; **NOTE:** This setting is still required for "Serverless" SKUs
        /// </summary>
        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        /// <summary>
        /// A `short_term_retention_policy` block as defined below.
        /// </summary>
        [Input("shortTermRetentionPolicy")]
        public Input<Inputs.DatabaseShortTermRetentionPolicyGetArgs>? ShortTermRetentionPolicy { get; set; }

        /// <summary>
        /// Specifies the name of the SKU used by the database. For example, `GP_S_Gen5_2`,`HS_Gen4_1`,`BC_Gen5_2`, `ElasticPool`, `Basic`,`S0`, `P2` ,`DW100c`, `DS100`. Changing this from the HyperScale service tier to another service tier will create a new resource.
        /// 
        /// &gt; **NOTE:** The default `sku_name` value may differ between Azure locations depending on local availability of Gen4/Gen5 capacity. When databases are replicated using the `creation_source_database_id` property, the source (primary) database cannot have a higher SKU service tier than any secondary databases. When changing the `sku_name` of a database having one or more secondary databases, this resource will first update any secondary databases as necessary. In such cases it's recommended to use the same `sku_name` in your configuration for all related databases, as not doing so may cause an unresolvable diff during subsequent plans.
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        /// <summary>
        /// Specifies the storage account type used to store backups for this database. Possible values are `Geo`, `Local` and `Zone`. Defaults to `Geo`.
        /// </summary>
        [Input("storageAccountType")]
        public Input<string>? StorageAccountType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Threat detection policy configuration. The `threat_detection_policy` block supports fields documented below.
        /// </summary>
        [Input("threatDetectionPolicy")]
        public Input<Inputs.DatabaseThreatDetectionPolicyGetArgs>? ThreatDetectionPolicy { get; set; }

        /// <summary>
        /// If set to true, Transparent Data Encryption will be enabled on the database. Defaults to `true`.
        /// 
        /// &gt; **NOTE:** `transparent_data_encryption_enabled` can only be set to `false` on DW (e.g, DataWarehouse) server SKUs.
        /// </summary>
        [Input("transparentDataEncryptionEnabled")]
        public Input<bool>? TransparentDataEncryptionEnabled { get; set; }

        /// <summary>
        /// Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones. This property is only settable for Premium and Business Critical databases.
        /// </summary>
        [Input("zoneRedundant")]
        public Input<bool>? ZoneRedundant { get; set; }

        public DatabaseState()
        {
        }
        public static new DatabaseState Empty => new DatabaseState();
    }
}
