// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages a Database Vulnerability Assessment Rule Baseline.
    /// 
    /// &gt; **NOTE** Database Vulnerability Assessment is currently only available for MS SQL databases.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West US",
    ///         });
    ///         var exampleSqlServer = new Azure.Sql.SqlServer("exampleSqlServer", new Azure.Sql.SqlServerArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             Version = "12.0",
    ///             AdministratorLogin = "4dm1n157r470r",
    ///             AdministratorLoginPassword = "4-v3ry-53cr37-p455w0rd",
    ///         });
    ///         var exampleAccount = new Azure.Storage.Account("exampleAccount", new Azure.Storage.AccountArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             AccountTier = "Standard",
    ///             AccountReplicationType = "GRS",
    ///         });
    ///         var exampleContainer = new Azure.Storage.Container("exampleContainer", new Azure.Storage.ContainerArgs
    ///         {
    ///             StorageAccountName = exampleAccount.Name,
    ///             ContainerAccessType = "private",
    ///         });
    ///         var exampleServerSecurityAlertPolicy = new Azure.MSSql.ServerSecurityAlertPolicy("exampleServerSecurityAlertPolicy", new Azure.MSSql.ServerSecurityAlertPolicyArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             ServerName = exampleSqlServer.Name,
    ///             State = "Enabled",
    ///         });
    ///         var exampleDatabase = new Azure.Sql.Database("exampleDatabase", new Azure.Sql.DatabaseArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             ServerName = exampleSqlServer.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             Edition = "Standard",
    ///         });
    ///         var exampleServerVulnerabilityAssessment = new Azure.MSSql.ServerVulnerabilityAssessment("exampleServerVulnerabilityAssessment", new Azure.MSSql.ServerVulnerabilityAssessmentArgs
    ///         {
    ///             ServerSecurityAlertPolicyId = exampleServerSecurityAlertPolicy.Id,
    ///             StorageContainerPath = Output.Tuple(exampleAccount.PrimaryBlobEndpoint, exampleContainer.Name).Apply(values =&gt;
    ///             {
    ///                 var primaryBlobEndpoint = values.Item1;
    ///                 var name = values.Item2;
    ///                 return $"{primaryBlobEndpoint}{name}/";
    ///             }),
    ///             StorageAccountAccessKey = exampleAccount.PrimaryAccessKey,
    ///         });
    ///         var exampleDatabaseVulnerabilityAssessmentRuleBaseline = new Azure.MSSql.DatabaseVulnerabilityAssessmentRuleBaseline("exampleDatabaseVulnerabilityAssessmentRuleBaseline", new Azure.MSSql.DatabaseVulnerabilityAssessmentRuleBaselineArgs
    ///         {
    ///             ServerVulnerabilityAssessmentId = exampleServerVulnerabilityAssessment.Id,
    ///             DatabaseName = exampleDatabase.Name,
    ///             RuleId = "VA2065",
    ///             BaselineName = "master",
    ///             BaselineResults = 
    ///             {
    ///                 new Azure.MSSql.Inputs.DatabaseVulnerabilityAssessmentRuleBaselineBaselineResultArgs
    ///                 {
    ///                     Results = 
    ///                     {
    ///                         "allowedip1",
    ///                         "123.123.123.123",
    ///                         "123.123.123.123",
    ///                     },
    ///                 },
    ///                 new Azure.MSSql.Inputs.DatabaseVulnerabilityAssessmentRuleBaselineBaselineResultArgs
    ///                 {
    ///                     Results = 
    ///                     {
    ///                         "allowedip2",
    ///                         "255.255.255.255",
    ///                         "255.255.255.255",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Database Vulnerability Assessment Rule Baseline can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mssql/databaseVulnerabilityAssessmentRuleBaseline:DatabaseVulnerabilityAssessmentRuleBaseline example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/servers/mssqlserver/databases/mysqldatabase/vulnerabilityAssessments/Default/rules/VA2065/baselines/master
    /// ```
    /// </summary>
    [AzureResourceType("azure:mssql/databaseVulnerabilityAssessmentRuleBaseline:DatabaseVulnerabilityAssessmentRuleBaseline")]
    public partial class DatabaseVulnerabilityAssessmentRuleBaseline : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("baselineName")]
        public Output<string?> BaselineName { get; private set; } = null!;

        /// <summary>
        /// A `baseline_result` block as documented below. Multiple blocks can be defined.
        /// </summary>
        [Output("baselineResults")]
        public Output<ImmutableArray<Outputs.DatabaseVulnerabilityAssessmentRuleBaselineBaselineResult>> BaselineResults { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// The vulnerability assessment rule ID. Changing this forces a new resource to be created.
        /// </summary>
        [Output("ruleId")]
        public Output<string> RuleId { get; private set; } = null!;

        /// <summary>
        /// The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Output("serverVulnerabilityAssessmentId")]
        public Output<string> ServerVulnerabilityAssessmentId { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseVulnerabilityAssessmentRuleBaseline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseVulnerabilityAssessmentRuleBaseline(string name, DatabaseVulnerabilityAssessmentRuleBaselineArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/databaseVulnerabilityAssessmentRuleBaseline:DatabaseVulnerabilityAssessmentRuleBaseline", name, args ?? new DatabaseVulnerabilityAssessmentRuleBaselineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseVulnerabilityAssessmentRuleBaseline(string name, Input<string> id, DatabaseVulnerabilityAssessmentRuleBaselineState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/databaseVulnerabilityAssessmentRuleBaseline:DatabaseVulnerabilityAssessmentRuleBaseline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseVulnerabilityAssessmentRuleBaseline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseVulnerabilityAssessmentRuleBaseline Get(string name, Input<string> id, DatabaseVulnerabilityAssessmentRuleBaselineState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseVulnerabilityAssessmentRuleBaseline(name, id, state, options);
        }
    }

    public sealed class DatabaseVulnerabilityAssessmentRuleBaselineArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("baselineName")]
        public Input<string>? BaselineName { get; set; }

        [Input("baselineResults", required: true)]
        private InputList<Inputs.DatabaseVulnerabilityAssessmentRuleBaselineBaselineResultArgs>? _baselineResults;

        /// <summary>
        /// A `baseline_result` block as documented below. Multiple blocks can be defined.
        /// </summary>
        public InputList<Inputs.DatabaseVulnerabilityAssessmentRuleBaselineBaselineResultArgs> BaselineResults
        {
            get => _baselineResults ?? (_baselineResults = new InputList<Inputs.DatabaseVulnerabilityAssessmentRuleBaselineBaselineResultArgs>());
            set => _baselineResults = value;
        }

        /// <summary>
        /// Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The vulnerability assessment rule ID. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ruleId", required: true)]
        public Input<string> RuleId { get; set; } = null!;

        /// <summary>
        /// The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverVulnerabilityAssessmentId", required: true)]
        public Input<string> ServerVulnerabilityAssessmentId { get; set; } = null!;

        public DatabaseVulnerabilityAssessmentRuleBaselineArgs()
        {
        }
    }

    public sealed class DatabaseVulnerabilityAssessmentRuleBaselineState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("baselineName")]
        public Input<string>? BaselineName { get; set; }

        [Input("baselineResults")]
        private InputList<Inputs.DatabaseVulnerabilityAssessmentRuleBaselineBaselineResultGetArgs>? _baselineResults;

        /// <summary>
        /// A `baseline_result` block as documented below. Multiple blocks can be defined.
        /// </summary>
        public InputList<Inputs.DatabaseVulnerabilityAssessmentRuleBaselineBaselineResultGetArgs> BaselineResults
        {
            get => _baselineResults ?? (_baselineResults = new InputList<Inputs.DatabaseVulnerabilityAssessmentRuleBaselineBaselineResultGetArgs>());
            set => _baselineResults = value;
        }

        /// <summary>
        /// Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// The vulnerability assessment rule ID. Changing this forces a new resource to be created.
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        /// <summary>
        /// The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverVulnerabilityAssessmentId")]
        public Input<string>? ServerVulnerabilityAssessmentId { get; set; }

        public DatabaseVulnerabilityAssessmentRuleBaselineState()
        {
        }
    }
}
