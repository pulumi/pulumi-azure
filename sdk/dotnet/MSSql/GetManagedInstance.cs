// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    public static class GetManagedInstance
    {
        /// <summary>
        /// Use this data source to access information about an existing Microsoft SQL Azure Managed Instance.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.MSSql.GetManagedInstance.Invoke(new()
        ///     {
        ///         Name = "managedsqlinstance",
        ///         ResourceGroupName = azurerm_resource_group.Example.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetManagedInstanceResult> InvokeAsync(GetManagedInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedInstanceResult>("azure:mssql/getManagedInstance:getManagedInstance", args ?? new GetManagedInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Microsoft SQL Azure Managed Instance.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.MSSql.GetManagedInstance.Invoke(new()
        ///     {
        ///         Name = "managedsqlinstance",
        ///         ResourceGroupName = azurerm_resource_group.Example.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetManagedInstanceResult> Invoke(GetManagedInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedInstanceResult>("azure:mssql/getManagedInstance:getManagedInstance", args ?? new GetManagedInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the SQL Managed Instance.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group where the SQL Managed Instance exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        public GetManagedInstanceArgs()
        {
        }
        public static new GetManagedInstanceArgs Empty => new GetManagedInstanceArgs();
    }

    public sealed class GetManagedInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the SQL Managed Instance.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group where the SQL Managed Instance exists.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        public GetManagedInstanceInvokeArgs()
        {
        }
        public static new GetManagedInstanceInvokeArgs Empty => new GetManagedInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedInstanceResult
    {
        /// <summary>
        /// The administrator login name for the SQL Managed Instance.
        /// </summary>
        public readonly string AdministratorLogin;
        /// <summary>
        /// Specifies how the SQL Managed Instance will be collated.
        /// </summary>
        public readonly string Collation;
        public readonly string CustomerManagedKeyId;
        /// <summary>
        /// The Dns Zone where the SQL Managed Instance is located.
        /// </summary>
        public readonly string DnsZone;
        /// <summary>
        /// The ID of the SQL Managed Instance which shares the DNS zone.
        /// </summary>
        public readonly string DnsZonePartnerId;
        /// <summary>
        /// The fully qualified domain name of the Azure Managed SQL Instance.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// An `identity` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagedInstanceIdentityResult> Identities;
        /// <summary>
        /// What type of license the SQL Managed Instance uses.
        /// </summary>
        public readonly string LicenseType;
        /// <summary>
        /// Specifies the supported Azure location where the resource exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The Minimum TLS Version.
        /// </summary>
        public readonly string MinimumTlsVersion;
        public readonly string Name;
        /// <summary>
        /// Specifies how the SQL Managed Instance will be accessed.
        /// </summary>
        public readonly string ProxyOverride;
        /// <summary>
        /// Whether the public data endpoint is enabled.
        /// </summary>
        public readonly bool PublicDataEndpointEnabled;
        public readonly string ResourceGroupName;
        /// <summary>
        /// Specifies the SKU Name of the SQL Managed Instance.
        /// </summary>
        public readonly string SkuName;
        /// <summary>
        /// Specifies the storage account type used to store backups for this database.
        /// </summary>
        public readonly string StorageAccountType;
        /// <summary>
        /// Maximum storage space allocated for the SQL Managed Instance.
        /// </summary>
        public readonly int StorageSizeInGb;
        /// <summary>
        /// The subnet resource ID that the SQL Managed Instance is associated with.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// A mapping of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The TimeZone ID that the SQL Managed Instance is running in.
        /// </summary>
        public readonly string TimezoneId;
        /// <summary>
        /// Number of cores that are assigned to the SQL Managed Instance.
        /// </summary>
        public readonly int Vcores;

        [OutputConstructor]
        private GetManagedInstanceResult(
            string administratorLogin,

            string collation,

            string customerManagedKeyId,

            string dnsZone,

            string dnsZonePartnerId,

            string fqdn,

            string id,

            ImmutableArray<Outputs.GetManagedInstanceIdentityResult> identities,

            string licenseType,

            string location,

            string minimumTlsVersion,

            string name,

            string proxyOverride,

            bool publicDataEndpointEnabled,

            string resourceGroupName,

            string skuName,

            string storageAccountType,

            int storageSizeInGb,

            string subnetId,

            ImmutableDictionary<string, string> tags,

            string timezoneId,

            int vcores)
        {
            AdministratorLogin = administratorLogin;
            Collation = collation;
            CustomerManagedKeyId = customerManagedKeyId;
            DnsZone = dnsZone;
            DnsZonePartnerId = dnsZonePartnerId;
            Fqdn = fqdn;
            Id = id;
            Identities = identities;
            LicenseType = licenseType;
            Location = location;
            MinimumTlsVersion = minimumTlsVersion;
            Name = name;
            ProxyOverride = proxyOverride;
            PublicDataEndpointEnabled = publicDataEndpointEnabled;
            ResourceGroupName = resourceGroupName;
            SkuName = skuName;
            StorageAccountType = storageAccountType;
            StorageSizeInGb = storageSizeInGb;
            SubnetId = subnetId;
            Tags = tags;
            TimezoneId = timezoneId;
            Vcores = vcores;
        }
    }
}
