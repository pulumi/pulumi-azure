// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages a Security Alert Policy for a MSSQL Server.
    /// 
    /// &gt; **Note:** Security Alert Policy is currently only available for MS SQL databases.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// using Azurerm = Pulumi.Azurerm;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "example-resources",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleSqlServer = new Azurerm.Index.SqlServer("example", new()
    ///     {
    ///         Name = "mysqlserver",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         Version = "12.0",
    ///         AdministratorLogin = "4dm1n157r470r",
    ///         AdministratorLoginPassword = "4-v3ry-53cr37-p455w0rd",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("example", new()
    ///     {
    ///         Name = "accteststorageaccount",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "GRS",
    ///     });
    /// 
    ///     var exampleServerSecurityAlertPolicy = new Azure.MSSql.ServerSecurityAlertPolicy("example", new()
    ///     {
    ///         ResourceGroupName = example.Name,
    ///         ServerName = exampleSqlServer.Name,
    ///         State = "Enabled",
    ///         StorageEndpoint = exampleAccount.PrimaryBlobEndpoint,
    ///         StorageAccountAccessKey = exampleAccount.PrimaryAccessKey,
    ///         RetentionDays = 20,
    ///         DisabledAlerts = new[]
    ///         {
    ///             "Sql_Injection",
    ///             "Data_Exfiltration",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.Sql`: 2023-08-01-preview
    /// 
    /// ## Import
    /// 
    /// MS SQL Server Security Alert Policy can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:mssql/serverSecurityAlertPolicy:ServerSecurityAlertPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/servers/mssqlserver/securityAlertPolicies/Default
    /// ```
    /// </summary>
    [AzureResourceType("azure:mssql/serverSecurityAlertPolicy:ServerSecurityAlertPolicy")]
    public partial class ServerSecurityAlertPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies an array of alerts that are disabled. Allowed values are: `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action`.
        /// </summary>
        [Output("disabledAlerts")]
        public Output<ImmutableArray<string>> DisabledAlerts { get; private set; } = null!;

        /// <summary>
        /// Are the alerts sent to the account administrators? Possible values are `true` or `false`. Defaults to `false`.
        /// </summary>
        [Output("emailAccountAdmins")]
        public Output<bool?> EmailAccountAdmins { get; private set; } = null!;

        /// <summary>
        /// Specifies an array of email addresses to which the alert is sent.
        /// </summary>
        [Output("emailAddresses")]
        public Output<ImmutableArray<string>> EmailAddresses { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of days to keep the Threat Detection audit logs. Defaults to `0`.
        /// </summary>
        [Output("retentionDays")]
        public Output<int?> RetentionDays { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Output("serverName")]
        public Output<string> ServerName { get; private set; } = null!;

        /// <summary>
        /// Specifies the state of the policy. Possible values are `Disabled` or `Enabled`.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Specifies the primary access key of the Threat Detection audit logs blob storage endpoint.
        /// 
        /// &gt; **Note:** The `storage_account_access_key` only applies if the storage account is not behind a virtual network or a firewall.
        /// </summary>
        [Output("storageAccountAccessKey")]
        public Output<string?> StorageAccountAccessKey { get; private set; } = null!;

        /// <summary>
        /// Specifies the blob storage endpoint that will hold all Threat Detection audit logs (e.g., `https://example.blob.core.windows.net`).
        /// 
        /// &gt; **Note:** The `storage_account_access_key` field is required when the `storage_endpoint` field has been set.
        /// 
        /// &gt; **Note:** Storage accounts configured with `shared_access_key_enabled = false` cannot be used for the `storage_endpoint` field.
        /// </summary>
        [Output("storageEndpoint")]
        public Output<string?> StorageEndpoint { get; private set; } = null!;


        /// <summary>
        /// Create a ServerSecurityAlertPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerSecurityAlertPolicy(string name, ServerSecurityAlertPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/serverSecurityAlertPolicy:ServerSecurityAlertPolicy", name, args ?? new ServerSecurityAlertPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerSecurityAlertPolicy(string name, Input<string> id, ServerSecurityAlertPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/serverSecurityAlertPolicy:ServerSecurityAlertPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "storageAccountAccessKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerSecurityAlertPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerSecurityAlertPolicy Get(string name, Input<string> id, ServerSecurityAlertPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerSecurityAlertPolicy(name, id, state, options);
        }
    }

    public sealed class ServerSecurityAlertPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("disabledAlerts")]
        private InputList<string>? _disabledAlerts;

        /// <summary>
        /// Specifies an array of alerts that are disabled. Allowed values are: `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action`.
        /// </summary>
        public InputList<string> DisabledAlerts
        {
            get => _disabledAlerts ?? (_disabledAlerts = new InputList<string>());
            set => _disabledAlerts = value;
        }

        /// <summary>
        /// Are the alerts sent to the account administrators? Possible values are `true` or `false`. Defaults to `false`.
        /// </summary>
        [Input("emailAccountAdmins")]
        public Input<bool>? EmailAccountAdmins { get; set; }

        [Input("emailAddresses")]
        private InputList<string>? _emailAddresses;

        /// <summary>
        /// Specifies an array of email addresses to which the alert is sent.
        /// </summary>
        public InputList<string> EmailAddresses
        {
            get => _emailAddresses ?? (_emailAddresses = new InputList<string>());
            set => _emailAddresses = value;
        }

        /// <summary>
        /// The name of the resource group that contains the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the number of days to keep the Threat Detection audit logs. Defaults to `0`.
        /// </summary>
        [Input("retentionDays")]
        public Input<int>? RetentionDays { get; set; }

        /// <summary>
        /// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        /// <summary>
        /// Specifies the state of the policy. Possible values are `Disabled` or `Enabled`.
        /// </summary>
        [Input("state", required: true)]
        public Input<string> State { get; set; } = null!;

        [Input("storageAccountAccessKey")]
        private Input<string>? _storageAccountAccessKey;

        /// <summary>
        /// Specifies the primary access key of the Threat Detection audit logs blob storage endpoint.
        /// 
        /// &gt; **Note:** The `storage_account_access_key` only applies if the storage account is not behind a virtual network or a firewall.
        /// </summary>
        public Input<string>? StorageAccountAccessKey
        {
            get => _storageAccountAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the blob storage endpoint that will hold all Threat Detection audit logs (e.g., `https://example.blob.core.windows.net`).
        /// 
        /// &gt; **Note:** The `storage_account_access_key` field is required when the `storage_endpoint` field has been set.
        /// 
        /// &gt; **Note:** Storage accounts configured with `shared_access_key_enabled = false` cannot be used for the `storage_endpoint` field.
        /// </summary>
        [Input("storageEndpoint")]
        public Input<string>? StorageEndpoint { get; set; }

        public ServerSecurityAlertPolicyArgs()
        {
        }
        public static new ServerSecurityAlertPolicyArgs Empty => new ServerSecurityAlertPolicyArgs();
    }

    public sealed class ServerSecurityAlertPolicyState : global::Pulumi.ResourceArgs
    {
        [Input("disabledAlerts")]
        private InputList<string>? _disabledAlerts;

        /// <summary>
        /// Specifies an array of alerts that are disabled. Allowed values are: `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action`.
        /// </summary>
        public InputList<string> DisabledAlerts
        {
            get => _disabledAlerts ?? (_disabledAlerts = new InputList<string>());
            set => _disabledAlerts = value;
        }

        /// <summary>
        /// Are the alerts sent to the account administrators? Possible values are `true` or `false`. Defaults to `false`.
        /// </summary>
        [Input("emailAccountAdmins")]
        public Input<bool>? EmailAccountAdmins { get; set; }

        [Input("emailAddresses")]
        private InputList<string>? _emailAddresses;

        /// <summary>
        /// Specifies an array of email addresses to which the alert is sent.
        /// </summary>
        public InputList<string> EmailAddresses
        {
            get => _emailAddresses ?? (_emailAddresses = new InputList<string>());
            set => _emailAddresses = value;
        }

        /// <summary>
        /// The name of the resource group that contains the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Specifies the number of days to keep the Threat Detection audit logs. Defaults to `0`.
        /// </summary>
        [Input("retentionDays")]
        public Input<int>? RetentionDays { get; set; }

        /// <summary>
        /// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverName")]
        public Input<string>? ServerName { get; set; }

        /// <summary>
        /// Specifies the state of the policy. Possible values are `Disabled` or `Enabled`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("storageAccountAccessKey")]
        private Input<string>? _storageAccountAccessKey;

        /// <summary>
        /// Specifies the primary access key of the Threat Detection audit logs blob storage endpoint.
        /// 
        /// &gt; **Note:** The `storage_account_access_key` only applies if the storage account is not behind a virtual network or a firewall.
        /// </summary>
        public Input<string>? StorageAccountAccessKey
        {
            get => _storageAccountAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the blob storage endpoint that will hold all Threat Detection audit logs (e.g., `https://example.blob.core.windows.net`).
        /// 
        /// &gt; **Note:** The `storage_account_access_key` field is required when the `storage_endpoint` field has been set.
        /// 
        /// &gt; **Note:** Storage accounts configured with `shared_access_key_enabled = false` cannot be used for the `storage_endpoint` field.
        /// </summary>
        [Input("storageEndpoint")]
        public Input<string>? StorageEndpoint { get; set; }

        public ServerSecurityAlertPolicyState()
        {
        }
        public static new ServerSecurityAlertPolicyState Empty => new ServerSecurityAlertPolicyState();
    }
}
