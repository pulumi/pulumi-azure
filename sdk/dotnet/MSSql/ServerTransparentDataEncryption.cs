// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages the transparent data encryption configuration for a MSSQL Server
    /// 
    /// !&gt; **IMPORTANT:** This resource should only be used with pre-existing MS SQL Instances that are over 2 years old. For new MS SQL Instances that will be created through the use of the `azure.mssql.Server` resource, please enable Transparent Data Encryption through `azure.mssql.Server` resource itself by configuring an identity block. By default all new MS SQL Instances are deployed with System Managed Transparent Data Encryption enabled.
    /// 
    /// &gt; **NOTE:** Once transparent data encryption is enabled on a MS SQL instance, it is not possible to remove TDE. You will be able to switch between 'ServiceManaged' and 'CustomerManaged' keys, but will not be able to remove encryption. For safety when this resource is deleted, the TDE mode will automatically be set to 'ServiceManaged'. See `key_vault_uri` for more information on how to specify the key types. As SQL Server only supports a single configuration for encryption settings, this resource will replace the current encryption settings on the server.
    /// 
    /// &gt; **Note:** See [documentation](https://docs.microsoft.com/azure/azure-sql/database/transparent-data-encryption-byok-overview) for important information on how handle lifecycle management of the keys to prevent data lockout.
    /// 
    /// ## Example Usage
    /// ### With Service Managed Key
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "EastUs",
    ///     });
    /// 
    ///     var exampleServer = new Azure.MSSql.Server("exampleServer", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Version = "12.0",
    ///         AdministratorLogin = "missadministrator",
    ///         AdministratorLoginPassword = "thisIsKat11",
    ///         MinimumTlsVersion = "1.2",
    ///         AzureadAdministrator = new Azure.MSSql.Inputs.ServerAzureadAdministratorArgs
    ///         {
    ///             LoginUsername = "AzureAD Admin",
    ///             ObjectId = "00000000-0000-0000-0000-000000000000",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "environment", "production" },
    ///         },
    ///     });
    /// 
    ///     var exampleServerTransparentDataEncryption = new Azure.MSSql.ServerTransparentDataEncryption("exampleServerTransparentDataEncryption", new()
    ///     {
    ///         ServerId = exampleServer.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### With Customer Managed Key
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "EastUs",
    ///     });
    /// 
    ///     var exampleServer = new Azure.MSSql.Server("exampleServer", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Version = "12.0",
    ///         AdministratorLogin = "missadministrator",
    ///         AdministratorLoginPassword = "thisIsKat11",
    ///         MinimumTlsVersion = "1.2",
    ///         AzureadAdministrator = new Azure.MSSql.Inputs.ServerAzureadAdministratorArgs
    ///         {
    ///             LoginUsername = "AzureAD Admin",
    ///             ObjectId = "00000000-0000-0000-0000-000000000000",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "environment", "production" },
    ///         },
    ///         Identity = new Azure.MSSql.Inputs.ServerIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     // Create a key vault with policies for the deployer to create a key &amp; SQL Server to wrap/unwrap/get key
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("exampleKeyVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         EnabledForDiskEncryption = true,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SoftDeleteRetentionDays = 7,
    ///         PurgeProtectionEnabled = false,
    ///         SkuName = "standard",
    ///         AccessPolicies = new[]
    ///         {
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///                 ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///                 KeyPermissions = new[]
    ///                 {
    ///                     "Get",
    ///                     "List",
    ///                     "Create",
    ///                     "Delete",
    ///                     "Update",
    ///                     "Recover",
    ///                     "Purge",
    ///                     "GetRotationPolicy",
    ///                 },
    ///             },
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = exampleServer.Identity.Apply(identity =&gt; identity?.TenantId),
    ///                 ObjectId = exampleServer.Identity.Apply(identity =&gt; identity?.PrincipalId),
    ///                 KeyPermissions = new[]
    ///                 {
    ///                     "Get",
    ///                     "WrapKey",
    ///                     "UnwrapKey",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleKey = new Azure.KeyVault.Key("exampleKey", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         KeyType = "RSA",
    ///         KeySize = 2048,
    ///         KeyOpts = new[]
    ///         {
    ///             "unwrapKey",
    ///             "wrapKey",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleKeyVault,
    ///         },
    ///     });
    /// 
    ///     var exampleServerTransparentDataEncryption = new Azure.MSSql.ServerTransparentDataEncryption("exampleServerTransparentDataEncryption", new()
    ///     {
    ///         ServerId = exampleServer.Id,
    ///         KeyVaultKeyId = exampleKey.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SQL Server Transparent Data Encryption can be imported using the resource id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/encryptionProtector/current
    /// ```
    /// </summary>
    [AzureResourceType("azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption")]
    public partial class ServerTransparentDataEncryption : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server will be automatically rotated to the latest key version within 60 minutes.
        /// </summary>
        [Output("autoRotationEnabled")]
        public Output<bool?> AutoRotationEnabled { get; private set; } = null!;

        /// <summary>
        /// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
        /// 
        /// &gt; **NOTE:** In order to use customer managed keys, the identity of the MSSQL server must have the following permissions on the key vault: 'get', 'wrapKey' and 'unwrapKey'
        /// 
        /// &gt; **NOTE:** If `server_id` denotes a secondary server deployed for disaster recovery purposes, then the `key_vault_key_id` should be the same key used for the primary server's transparent data encryption. Both primary and secondary servers should be encrypted with same key material.
        /// </summary>
        [Output("keyVaultKeyId")]
        public Output<string?> KeyVaultKeyId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Output("serverId")]
        public Output<string> ServerId { get; private set; } = null!;


        /// <summary>
        /// Create a ServerTransparentDataEncryption resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerTransparentDataEncryption(string name, ServerTransparentDataEncryptionArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption", name, args ?? new ServerTransparentDataEncryptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerTransparentDataEncryption(string name, Input<string> id, ServerTransparentDataEncryptionState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerTransparentDataEncryption resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerTransparentDataEncryption Get(string name, Input<string> id, ServerTransparentDataEncryptionState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerTransparentDataEncryption(name, id, state, options);
        }
    }

    public sealed class ServerTransparentDataEncryptionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server will be automatically rotated to the latest key version within 60 minutes.
        /// </summary>
        [Input("autoRotationEnabled")]
        public Input<bool>? AutoRotationEnabled { get; set; }

        /// <summary>
        /// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
        /// 
        /// &gt; **NOTE:** In order to use customer managed keys, the identity of the MSSQL server must have the following permissions on the key vault: 'get', 'wrapKey' and 'unwrapKey'
        /// 
        /// &gt; **NOTE:** If `server_id` denotes a secondary server deployed for disaster recovery purposes, then the `key_vault_key_id` should be the same key used for the primary server's transparent data encryption. Both primary and secondary servers should be encrypted with same key material.
        /// </summary>
        [Input("keyVaultKeyId")]
        public Input<string>? KeyVaultKeyId { get; set; }

        /// <summary>
        /// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        public ServerTransparentDataEncryptionArgs()
        {
        }
        public static new ServerTransparentDataEncryptionArgs Empty => new ServerTransparentDataEncryptionArgs();
    }

    public sealed class ServerTransparentDataEncryptionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server will be automatically rotated to the latest key version within 60 minutes.
        /// </summary>
        [Input("autoRotationEnabled")]
        public Input<bool>? AutoRotationEnabled { get; set; }

        /// <summary>
        /// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
        /// 
        /// &gt; **NOTE:** In order to use customer managed keys, the identity of the MSSQL server must have the following permissions on the key vault: 'get', 'wrapKey' and 'unwrapKey'
        /// 
        /// &gt; **NOTE:** If `server_id` denotes a secondary server deployed for disaster recovery purposes, then the `key_vault_key_id` should be the same key used for the primary server's transparent data encryption. Both primary and secondary servers should be encrypted with same key material.
        /// </summary>
        [Input("keyVaultKeyId")]
        public Input<string>? KeyVaultKeyId { get; set; }

        /// <summary>
        /// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        public ServerTransparentDataEncryptionState()
        {
        }
        public static new ServerTransparentDataEncryptionState Empty => new ServerTransparentDataEncryptionState();
    }
}
