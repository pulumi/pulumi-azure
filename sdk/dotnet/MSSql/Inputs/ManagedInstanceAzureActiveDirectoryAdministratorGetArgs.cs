// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql.Inputs
{

    public sealed class ManagedInstanceAzureActiveDirectoryAdministratorGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether only Azure AD authentication can be used to log in to this SQL Managed Instance. When `True`, the `AdministratorLogin` and `AdministratorLoginPassword` properties can be omitted. Defaults to `False`.
        /// </summary>
        [Input("azureadAuthenticationOnlyEnabled")]
        public Input<bool>? AzureadAuthenticationOnlyEnabled { get; set; }

        /// <summary>
        /// The login username of the Azure AD Administrator of this SQL Managed Instance.
        /// </summary>
        [Input("loginUsername", required: true)]
        public Input<string> LoginUsername { get; set; } = null!;

        /// <summary>
        /// The object id of the Azure AD Administrator of this SQL Managed Instance.
        /// </summary>
        [Input("objectId", required: true)]
        public Input<string> ObjectId { get; set; } = null!;

        /// <summary>
        /// The principal type of the Azure AD Administrator of this SQL Managed Instance. Possible values are `Application`, `Group`, `User`.
        /// </summary>
        [Input("principalType", required: true)]
        public Input<string> PrincipalType { get; set; } = null!;

        /// <summary>
        /// The tenant id of the Azure AD Administrator of this SQL Managed Instance. Should be specified if the Azure AD Administrator is homed in a different tenant to the SQL Managed Instance.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public ManagedInstanceAzureActiveDirectoryAdministratorGetArgs()
        {
        }
        public static new ManagedInstanceAzureActiveDirectoryAdministratorGetArgs Empty => new ManagedInstanceAzureActiveDirectoryAdministratorGetArgs();
    }
}
