// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql.Inputs
{

    public sealed class VirtualMachineWsfcDomainCredentialGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("clusterBootstrapAccountPassword", required: true)]
        private Input<string>? _clusterBootstrapAccountPassword;

        /// <summary>
        /// The account password used for creating cluster.
        /// </summary>
        public Input<string>? ClusterBootstrapAccountPassword
        {
            get => _clusterBootstrapAccountPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clusterBootstrapAccountPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clusterOperatorAccountPassword", required: true)]
        private Input<string>? _clusterOperatorAccountPassword;

        /// <summary>
        /// The account password used for operating cluster.
        /// </summary>
        public Input<string>? ClusterOperatorAccountPassword
        {
            get => _clusterOperatorAccountPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clusterOperatorAccountPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sqlServiceAccountPassword", required: true)]
        private Input<string>? _sqlServiceAccountPassword;

        /// <summary>
        /// The account password under which SQL service will run on all participating SQL virtual machines in the cluster.
        /// </summary>
        public Input<string>? SqlServiceAccountPassword
        {
            get => _sqlServiceAccountPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sqlServiceAccountPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public VirtualMachineWsfcDomainCredentialGetArgs()
        {
        }
        public static new VirtualMachineWsfcDomainCredentialGetArgs Empty => new VirtualMachineWsfcDomainCredentialGetArgs();
    }
}
