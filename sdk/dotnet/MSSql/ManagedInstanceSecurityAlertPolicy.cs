// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages a Security Alert Policy for an MS SQL Managed Instance.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleNetworkSecurityGroup = new Azure.Network.NetworkSecurityGroup("exampleNetworkSecurityGroup", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var allowManagementInbound = new Azure.Network.NetworkSecurityRule("allowManagementInbound", new()
    ///     {
    ///         Priority = 106,
    ///         Direction = "Inbound",
    ///         Access = "Allow",
    ///         Protocol = "Tcp",
    ///         SourcePortRange = "*",
    ///         DestinationPortRanges = new[]
    ///         {
    ///             "9000",
    ///             "9003",
    ///             "1438",
    ///             "1440",
    ///             "1452",
    ///         },
    ///         SourceAddressPrefix = "*",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowMisubnetInbound = new Azure.Network.NetworkSecurityRule("allowMisubnetInbound", new()
    ///     {
    ///         Priority = 200,
    ///         Direction = "Inbound",
    ///         Access = "Allow",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "10.0.0.0/24",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowHealthProbeInbound = new Azure.Network.NetworkSecurityRule("allowHealthProbeInbound", new()
    ///     {
    ///         Priority = 300,
    ///         Direction = "Inbound",
    ///         Access = "Allow",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "AzureLoadBalancer",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowTdsInbound = new Azure.Network.NetworkSecurityRule("allowTdsInbound", new()
    ///     {
    ///         Priority = 1000,
    ///         Direction = "Inbound",
    ///         Access = "Allow",
    ///         Protocol = "Tcp",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "1433",
    ///         SourceAddressPrefix = "VirtualNetwork",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var denyAllInbound = new Azure.Network.NetworkSecurityRule("denyAllInbound", new()
    ///     {
    ///         Priority = 4096,
    ///         Direction = "Inbound",
    ///         Access = "Deny",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "*",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowManagementOutbound = new Azure.Network.NetworkSecurityRule("allowManagementOutbound", new()
    ///     {
    ///         Priority = 102,
    ///         Direction = "Outbound",
    ///         Access = "Allow",
    ///         Protocol = "Tcp",
    ///         SourcePortRange = "*",
    ///         DestinationPortRanges = new[]
    ///         {
    ///             "80",
    ///             "443",
    ///             "12000",
    ///         },
    ///         SourceAddressPrefix = "*",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowMisubnetOutbound = new Azure.Network.NetworkSecurityRule("allowMisubnetOutbound", new()
    ///     {
    ///         Priority = 200,
    ///         Direction = "Outbound",
    ///         Access = "Allow",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "10.0.0.0/24",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var denyAllOutbound = new Azure.Network.NetworkSecurityRule("denyAllOutbound", new()
    ///     {
    ///         Priority = 4096,
    ///         Direction = "Outbound",
    ///         Access = "Deny",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "*",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = exampleResourceGroup.Location,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.0.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "managedinstancedelegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Name = "Microsoft.Sql/managedInstances",
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                         "Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action",
    ///                         "Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleSubnetNetworkSecurityGroupAssociation = new Azure.Network.SubnetNetworkSecurityGroupAssociation("exampleSubnetNetworkSecurityGroupAssociation", new()
    ///     {
    ///         SubnetId = exampleSubnet.Id,
    ///         NetworkSecurityGroupId = exampleNetworkSecurityGroup.Id,
    ///     });
    /// 
    ///     var exampleRouteTable = new Azure.Network.RouteTable("exampleRouteTable", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         DisableBgpRoutePropagation = false,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleSubnet,
    ///         },
    ///     });
    /// 
    ///     var exampleSubnetRouteTableAssociation = new Azure.Network.SubnetRouteTableAssociation("exampleSubnetRouteTableAssociation", new()
    ///     {
    ///         SubnetId = exampleSubnet.Id,
    ///         RouteTableId = exampleRouteTable.Id,
    ///     });
    /// 
    ///     var exampleManagedInstance = new Azure.MSSql.ManagedInstance("exampleManagedInstance", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         LicenseType = "BasePrice",
    ///         SkuName = "GP_Gen5",
    ///         StorageSizeInGb = 32,
    ///         SubnetId = exampleSubnet.Id,
    ///         Vcores = 4,
    ///         AdministratorLogin = "mradministrator",
    ///         AdministratorLoginPassword = "thisIsDog11",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleSubnetNetworkSecurityGroupAssociation,
    ///             exampleSubnetRouteTableAssociation,
    ///         },
    ///     });
    /// 
    ///     var exampleManagedInstanceSecurityAlertPolicy = new Azure.MSSql.ManagedInstanceSecurityAlertPolicy("exampleManagedInstanceSecurityAlertPolicy", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ManagedInstanceName = exampleManagedInstance.Name,
    ///         Enabled = true,
    ///         StorageEndpoint = azurerm_storage_account.Example.Primary_blob_endpoint,
    ///         StorageAccountAccessKey = azurerm_storage_account.Example.Primary_access_key,
    ///         DisabledAlerts = new[]
    ///         {
    ///             "Sql_Injection",
    ///             "Data_Exfiltration",
    ///         },
    ///         RetentionDays = 20,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// MS SQL Managed Instance Security Alert Policy can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mssql/managedInstanceSecurityAlertPolicy:ManagedInstanceSecurityAlertPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/managedInstances/instance1/securityAlertPolicies/Default
    /// ```
    /// </summary>
    [AzureResourceType("azure:mssql/managedInstanceSecurityAlertPolicy:ManagedInstanceSecurityAlertPolicy")]
    public partial class ManagedInstanceSecurityAlertPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies an array of alerts that are disabled. Possible values are `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action` and `Brute_Force`.
        /// </summary>
        [Output("disabledAlerts")]
        public Output<ImmutableArray<string>> DisabledAlerts { get; private set; } = null!;

        /// <summary>
        /// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
        /// </summary>
        [Output("emailAccountAdminsEnabled")]
        public Output<bool?> EmailAccountAdminsEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies an array of email addresses to which the alert is sent.
        /// </summary>
        [Output("emailAddresses")]
        public Output<ImmutableArray<string>> EmailAddresses { get; private set; } = null!;

        /// <summary>
        /// Specifies the state of the Security Alert Policy, whether it is enabled or disabled. Possible values are `true`, `false`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the MS SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Output("managedInstanceName")]
        public Output<string> ManagedInstanceName { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the MS SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
        /// </summary>
        [Output("retentionDays")]
        public Output<int?> RetentionDays { get; private set; } = null!;

        /// <summary>
        /// Specifies the identifier key of the Threat Detection audit storage account. This is mandatory when you use `storage_endpoint` to specify a storage account blob endpoint.
        /// 
        /// &gt; **NOTE:**  Please note that storage accounts configured with `shared_access_key_enabled = false` cannot be used to configure `azure.mssql.ManagedInstanceSecurityAlertPolicy` with `storage_endpoint` for now.
        /// </summary>
        [Output("storageAccountAccessKey")]
        public Output<string?> StorageAccountAccessKey { get; private set; } = null!;

        /// <summary>
        /// Specifies the blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
        /// </summary>
        [Output("storageEndpoint")]
        public Output<string?> StorageEndpoint { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedInstanceSecurityAlertPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedInstanceSecurityAlertPolicy(string name, ManagedInstanceSecurityAlertPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/managedInstanceSecurityAlertPolicy:ManagedInstanceSecurityAlertPolicy", name, args ?? new ManagedInstanceSecurityAlertPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedInstanceSecurityAlertPolicy(string name, Input<string> id, ManagedInstanceSecurityAlertPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/managedInstanceSecurityAlertPolicy:ManagedInstanceSecurityAlertPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "storageAccountAccessKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedInstanceSecurityAlertPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedInstanceSecurityAlertPolicy Get(string name, Input<string> id, ManagedInstanceSecurityAlertPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedInstanceSecurityAlertPolicy(name, id, state, options);
        }
    }

    public sealed class ManagedInstanceSecurityAlertPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("disabledAlerts")]
        private InputList<string>? _disabledAlerts;

        /// <summary>
        /// Specifies an array of alerts that are disabled. Possible values are `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action` and `Brute_Force`.
        /// </summary>
        public InputList<string> DisabledAlerts
        {
            get => _disabledAlerts ?? (_disabledAlerts = new InputList<string>());
            set => _disabledAlerts = value;
        }

        /// <summary>
        /// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
        /// </summary>
        [Input("emailAccountAdminsEnabled")]
        public Input<bool>? EmailAccountAdminsEnabled { get; set; }

        [Input("emailAddresses")]
        private InputList<string>? _emailAddresses;

        /// <summary>
        /// Specifies an array of email addresses to which the alert is sent.
        /// </summary>
        public InputList<string> EmailAddresses
        {
            get => _emailAddresses ?? (_emailAddresses = new InputList<string>());
            set => _emailAddresses = value;
        }

        /// <summary>
        /// Specifies the state of the Security Alert Policy, whether it is enabled or disabled. Possible values are `true`, `false`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Specifies the name of the MS SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedInstanceName", required: true)]
        public Input<string> ManagedInstanceName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group that contains the MS SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
        /// </summary>
        [Input("retentionDays")]
        public Input<int>? RetentionDays { get; set; }

        [Input("storageAccountAccessKey")]
        private Input<string>? _storageAccountAccessKey;

        /// <summary>
        /// Specifies the identifier key of the Threat Detection audit storage account. This is mandatory when you use `storage_endpoint` to specify a storage account blob endpoint.
        /// 
        /// &gt; **NOTE:**  Please note that storage accounts configured with `shared_access_key_enabled = false` cannot be used to configure `azure.mssql.ManagedInstanceSecurityAlertPolicy` with `storage_endpoint` for now.
        /// </summary>
        public Input<string>? StorageAccountAccessKey
        {
            get => _storageAccountAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
        /// </summary>
        [Input("storageEndpoint")]
        public Input<string>? StorageEndpoint { get; set; }

        public ManagedInstanceSecurityAlertPolicyArgs()
        {
        }
        public static new ManagedInstanceSecurityAlertPolicyArgs Empty => new ManagedInstanceSecurityAlertPolicyArgs();
    }

    public sealed class ManagedInstanceSecurityAlertPolicyState : global::Pulumi.ResourceArgs
    {
        [Input("disabledAlerts")]
        private InputList<string>? _disabledAlerts;

        /// <summary>
        /// Specifies an array of alerts that are disabled. Possible values are `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action` and `Brute_Force`.
        /// </summary>
        public InputList<string> DisabledAlerts
        {
            get => _disabledAlerts ?? (_disabledAlerts = new InputList<string>());
            set => _disabledAlerts = value;
        }

        /// <summary>
        /// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
        /// </summary>
        [Input("emailAccountAdminsEnabled")]
        public Input<bool>? EmailAccountAdminsEnabled { get; set; }

        [Input("emailAddresses")]
        private InputList<string>? _emailAddresses;

        /// <summary>
        /// Specifies an array of email addresses to which the alert is sent.
        /// </summary>
        public InputList<string> EmailAddresses
        {
            get => _emailAddresses ?? (_emailAddresses = new InputList<string>());
            set => _emailAddresses = value;
        }

        /// <summary>
        /// Specifies the state of the Security Alert Policy, whether it is enabled or disabled. Possible values are `true`, `false`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Specifies the name of the MS SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedInstanceName")]
        public Input<string>? ManagedInstanceName { get; set; }

        /// <summary>
        /// The name of the resource group that contains the MS SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
        /// </summary>
        [Input("retentionDays")]
        public Input<int>? RetentionDays { get; set; }

        [Input("storageAccountAccessKey")]
        private Input<string>? _storageAccountAccessKey;

        /// <summary>
        /// Specifies the identifier key of the Threat Detection audit storage account. This is mandatory when you use `storage_endpoint` to specify a storage account blob endpoint.
        /// 
        /// &gt; **NOTE:**  Please note that storage accounts configured with `shared_access_key_enabled = false` cannot be used to configure `azure.mssql.ManagedInstanceSecurityAlertPolicy` with `storage_endpoint` for now.
        /// </summary>
        public Input<string>? StorageAccountAccessKey
        {
            get => _storageAccountAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
        /// </summary>
        [Input("storageEndpoint")]
        public Input<string>? StorageEndpoint { get; set; }

        public ManagedInstanceSecurityAlertPolicyState()
        {
        }
        public static new ManagedInstanceSecurityAlertPolicyState Empty => new ManagedInstanceSecurityAlertPolicyState();
    }
}
