// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages the Vulnerability Assessment for an MS Managed Instance.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///     });
    /// 
    ///     var exampleManagedInstance = new Azure.MSSql.ManagedInstance("exampleManagedInstance", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         LicenseType = "BasePrice",
    ///         SkuName = "GP_Gen5",
    ///         StorageSizeInGb = 32,
    ///         SubnetId = exampleSubnet.Id,
    ///         Vcores = 4,
    ///         AdministratorLogin = "missadministrator",
    ///         AdministratorLoginPassword = "NCC-1701-D",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "GRS",
    ///     });
    /// 
    ///     var exampleContainer = new Azure.Storage.Container("exampleContainer", new()
    ///     {
    ///         StorageAccountName = exampleAccount.Name,
    ///         ContainerAccessType = "private",
    ///     });
    /// 
    ///     var exampleManagedInstanceSecurityAlertPolicy = new Azure.MSSql.ManagedInstanceSecurityAlertPolicy("exampleManagedInstanceSecurityAlertPolicy", new()
    ///     {
    ///         ResourceGroupName = azurerm_resource_group.Test.Name,
    ///         ManagedInstanceName = azurerm_mssql_managed_instance.Test.Name,
    ///         Enabled = true,
    ///         StorageEndpoint = azurerm_storage_account.Test.Primary_blob_endpoint,
    ///         StorageAccountAccessKey = azurerm_storage_account.Test.Primary_access_key,
    ///         RetentionDays = 30,
    ///     });
    /// 
    ///     var exampleManagedInstanceVulnerabilityAssessment = new Azure.MSSql.ManagedInstanceVulnerabilityAssessment("exampleManagedInstanceVulnerabilityAssessment", new()
    ///     {
    ///         ManagedInstanceId = exampleManagedInstance.Id,
    ///         StorageContainerPath = Output.Tuple(exampleAccount.PrimaryBlobEndpoint, exampleContainer.Name).Apply(values =&gt;
    ///         {
    ///             var primaryBlobEndpoint = values.Item1;
    ///             var name = values.Item2;
    ///             return $"{primaryBlobEndpoint}{name}/";
    ///         }),
    ///         StorageAccountAccessKey = exampleAccount.PrimaryAccessKey,
    ///         RecurringScans = new Azure.MSSql.Inputs.ManagedInstanceVulnerabilityAssessmentRecurringScansArgs
    ///         {
    ///             Enabled = true,
    ///             EmailSubscriptionAdmins = true,
    ///             Emails = new[]
    ///             {
    ///                 "email@example1.com",
    ///                 "email@example2.com",
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleManagedInstanceSecurityAlertPolicy,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The Vulnerability Assessment can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mssql/managedInstanceVulnerabilityAssessment:ManagedInstanceVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/managedInstances/instance1/vulnerabilityAssessments/Default
    /// ```
    /// </summary>
    [AzureResourceType("azure:mssql/managedInstanceVulnerabilityAssessment:ManagedInstanceVulnerabilityAssessment")]
    public partial class ManagedInstanceVulnerabilityAssessment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the MS SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Output("managedInstanceId")]
        public Output<string> ManagedInstanceId { get; private set; } = null!;

        /// <summary>
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        /// </summary>
        [Output("recurringScans")]
        public Output<Outputs.ManagedInstanceVulnerabilityAssessmentRecurringScans> RecurringScans { get; private set; } = null!;

        /// <summary>
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        /// 
        /// &gt; **NOTE** The `storage_account_access_key` only applies if the storage account is not behind a virtual network or a firewall.
        /// </summary>
        [Output("storageAccountAccessKey")]
        public Output<string?> StorageAccountAccessKey { get; private set; } = null!;

        /// <summary>
        /// A blob storage container path to hold the scan results (e.g. &lt;https://myStorage.blob.core.windows.net/VaScans/&gt;).
        /// </summary>
        [Output("storageContainerPath")]
        public Output<string> StorageContainerPath { get; private set; } = null!;

        /// <summary>
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        /// 
        /// &gt; **NOTE** The `storage_container_sas_key` only applies if the storage account is not behind a virtual network or a firewall.
        /// </summary>
        [Output("storageContainerSasKey")]
        public Output<string?> StorageContainerSasKey { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedInstanceVulnerabilityAssessment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedInstanceVulnerabilityAssessment(string name, ManagedInstanceVulnerabilityAssessmentArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/managedInstanceVulnerabilityAssessment:ManagedInstanceVulnerabilityAssessment", name, args ?? new ManagedInstanceVulnerabilityAssessmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedInstanceVulnerabilityAssessment(string name, Input<string> id, ManagedInstanceVulnerabilityAssessmentState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/managedInstanceVulnerabilityAssessment:ManagedInstanceVulnerabilityAssessment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "storageAccountAccessKey",
                    "storageContainerSasKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedInstanceVulnerabilityAssessment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedInstanceVulnerabilityAssessment Get(string name, Input<string> id, ManagedInstanceVulnerabilityAssessmentState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedInstanceVulnerabilityAssessment(name, id, state, options);
        }
    }

    public sealed class ManagedInstanceVulnerabilityAssessmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the MS SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedInstanceId", required: true)]
        public Input<string> ManagedInstanceId { get; set; } = null!;

        /// <summary>
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        /// </summary>
        [Input("recurringScans")]
        public Input<Inputs.ManagedInstanceVulnerabilityAssessmentRecurringScansArgs>? RecurringScans { get; set; }

        [Input("storageAccountAccessKey")]
        private Input<string>? _storageAccountAccessKey;

        /// <summary>
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        /// 
        /// &gt; **NOTE** The `storage_account_access_key` only applies if the storage account is not behind a virtual network or a firewall.
        /// </summary>
        public Input<string>? StorageAccountAccessKey
        {
            get => _storageAccountAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// A blob storage container path to hold the scan results (e.g. &lt;https://myStorage.blob.core.windows.net/VaScans/&gt;).
        /// </summary>
        [Input("storageContainerPath", required: true)]
        public Input<string> StorageContainerPath { get; set; } = null!;

        [Input("storageContainerSasKey")]
        private Input<string>? _storageContainerSasKey;

        /// <summary>
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        /// 
        /// &gt; **NOTE** The `storage_container_sas_key` only applies if the storage account is not behind a virtual network or a firewall.
        /// </summary>
        public Input<string>? StorageContainerSasKey
        {
            get => _storageContainerSasKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageContainerSasKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ManagedInstanceVulnerabilityAssessmentArgs()
        {
        }
        public static new ManagedInstanceVulnerabilityAssessmentArgs Empty => new ManagedInstanceVulnerabilityAssessmentArgs();
    }

    public sealed class ManagedInstanceVulnerabilityAssessmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the MS SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedInstanceId")]
        public Input<string>? ManagedInstanceId { get; set; }

        /// <summary>
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        /// </summary>
        [Input("recurringScans")]
        public Input<Inputs.ManagedInstanceVulnerabilityAssessmentRecurringScansGetArgs>? RecurringScans { get; set; }

        [Input("storageAccountAccessKey")]
        private Input<string>? _storageAccountAccessKey;

        /// <summary>
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        /// 
        /// &gt; **NOTE** The `storage_account_access_key` only applies if the storage account is not behind a virtual network or a firewall.
        /// </summary>
        public Input<string>? StorageAccountAccessKey
        {
            get => _storageAccountAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// A blob storage container path to hold the scan results (e.g. &lt;https://myStorage.blob.core.windows.net/VaScans/&gt;).
        /// </summary>
        [Input("storageContainerPath")]
        public Input<string>? StorageContainerPath { get; set; }

        [Input("storageContainerSasKey")]
        private Input<string>? _storageContainerSasKey;

        /// <summary>
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        /// 
        /// &gt; **NOTE** The `storage_container_sas_key` only applies if the storage account is not behind a virtual network or a firewall.
        /// </summary>
        public Input<string>? StorageContainerSasKey
        {
            get => _storageContainerSasKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageContainerSasKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ManagedInstanceVulnerabilityAssessmentState()
        {
        }
        public static new ManagedInstanceVulnerabilityAssessmentState Empty => new ManagedInstanceVulnerabilityAssessmentState();
    }
}
