// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages a Microsoft SQL Azure Managed Instance.
    /// 
    /// &gt; **Note:** All arguments including the administrator login and password will be stored in the raw state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
    /// 
    /// &gt; **Note:** SQL Managed Instance needs permission to read Azure Active Directory when configuring the AAD administrator. [Read more about provisioning AAD administrators](https://learn.microsoft.com/en-us/azure/azure-sql/database/authentication-aad-configure?view=azuresql#provision-azure-ad-admin-sql-managed-instance).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Azure.Core.ResourceGroup("example", new()
    ///     {
    ///         Name = "database-rg",
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleNetworkSecurityGroup = new Azure.Network.NetworkSecurityGroup("example", new()
    ///     {
    ///         Name = "mi-security-group",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///     });
    /// 
    ///     var allowManagementInbound = new Azure.Network.NetworkSecurityRule("allow_management_inbound", new()
    ///     {
    ///         Name = "allow_management_inbound",
    ///         Priority = 106,
    ///         Direction = "Inbound",
    ///         Access = "Allow",
    ///         Protocol = "Tcp",
    ///         SourcePortRange = "*",
    ///         DestinationPortRanges = new[]
    ///         {
    ///             "9000",
    ///             "9003",
    ///             "1438",
    ///             "1440",
    ///             "1452",
    ///         },
    ///         SourceAddressPrefix = "*",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowMisubnetInbound = new Azure.Network.NetworkSecurityRule("allow_misubnet_inbound", new()
    ///     {
    ///         Name = "allow_misubnet_inbound",
    ///         Priority = 200,
    ///         Direction = "Inbound",
    ///         Access = "Allow",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "10.0.0.0/24",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowHealthProbeInbound = new Azure.Network.NetworkSecurityRule("allow_health_probe_inbound", new()
    ///     {
    ///         Name = "allow_health_probe_inbound",
    ///         Priority = 300,
    ///         Direction = "Inbound",
    ///         Access = "Allow",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "AzureLoadBalancer",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowTdsInbound = new Azure.Network.NetworkSecurityRule("allow_tds_inbound", new()
    ///     {
    ///         Name = "allow_tds_inbound",
    ///         Priority = 1000,
    ///         Direction = "Inbound",
    ///         Access = "Allow",
    ///         Protocol = "Tcp",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "1433",
    ///         SourceAddressPrefix = "VirtualNetwork",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var denyAllInbound = new Azure.Network.NetworkSecurityRule("deny_all_inbound", new()
    ///     {
    ///         Name = "deny_all_inbound",
    ///         Priority = 4096,
    ///         Direction = "Inbound",
    ///         Access = "Deny",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "*",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowManagementOutbound = new Azure.Network.NetworkSecurityRule("allow_management_outbound", new()
    ///     {
    ///         Name = "allow_management_outbound",
    ///         Priority = 102,
    ///         Direction = "Outbound",
    ///         Access = "Allow",
    ///         Protocol = "Tcp",
    ///         SourcePortRange = "*",
    ///         DestinationPortRanges = new[]
    ///         {
    ///             "80",
    ///             "443",
    ///             "12000",
    ///         },
    ///         SourceAddressPrefix = "*",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var allowMisubnetOutbound = new Azure.Network.NetworkSecurityRule("allow_misubnet_outbound", new()
    ///     {
    ///         Name = "allow_misubnet_outbound",
    ///         Priority = 200,
    ///         Direction = "Outbound",
    ///         Access = "Allow",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "10.0.0.0/24",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var denyAllOutbound = new Azure.Network.NetworkSecurityRule("deny_all_outbound", new()
    ///     {
    ///         Name = "deny_all_outbound",
    ///         Priority = 4096,
    ///         Direction = "Outbound",
    ///         Access = "Deny",
    ///         Protocol = "*",
    ///         SourcePortRange = "*",
    ///         DestinationPortRange = "*",
    ///         SourceAddressPrefix = "*",
    ///         DestinationAddressPrefix = "*",
    ///         ResourceGroupName = example.Name,
    ///         NetworkSecurityGroupName = exampleNetworkSecurityGroup.Name,
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("example", new()
    ///     {
    ///         Name = "vnet-mi",
    ///         ResourceGroupName = example.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = example.Location,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("example", new()
    ///     {
    ///         Name = "subnet-mi",
    ///         ResourceGroupName = example.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.0.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "managedinstancedelegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Name = "Microsoft.Sql/managedInstances",
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                         "Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action",
    ///                         "Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleSubnetNetworkSecurityGroupAssociation = new Azure.Network.SubnetNetworkSecurityGroupAssociation("example", new()
    ///     {
    ///         SubnetId = exampleSubnet.Id,
    ///         NetworkSecurityGroupId = exampleNetworkSecurityGroup.Id,
    ///     });
    /// 
    ///     var exampleRouteTable = new Azure.Network.RouteTable("example", new()
    ///     {
    ///         Name = "routetable-mi",
    ///         Location = example.Location,
    ///         ResourceGroupName = example.Name,
    ///         BgpRoutePropagationEnabled = true,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleSubnet,
    ///         },
    ///     });
    /// 
    ///     var exampleSubnetRouteTableAssociation = new Azure.Network.SubnetRouteTableAssociation("example", new()
    ///     {
    ///         SubnetId = exampleSubnet.Id,
    ///         RouteTableId = exampleRouteTable.Id,
    ///     });
    /// 
    ///     var exampleManagedInstance = new Azure.MSSql.ManagedInstance("example", new()
    ///     {
    ///         Name = "managedsqlinstance",
    ///         ResourceGroupName = example.Name,
    ///         Location = example.Location,
    ///         LicenseType = "BasePrice",
    ///         SkuName = "GP_Gen5",
    ///         StorageSizeInGb = 32,
    ///         SubnetId = exampleSubnet.Id,
    ///         Vcores = 4,
    ///         AdministratorLogin = "mradministrator",
    ///         AdministratorLoginPassword = "thisIsDog11",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleSubnetNetworkSecurityGroupAssociation,
    ///             exampleSubnetRouteTableAssociation,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.Sql` - 2023-08-01-preview
    /// 
    /// ## Import
    /// 
    /// Microsoft SQL Managed Instances can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:mssql/managedInstance:ManagedInstance example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/managedInstances/myserver
    /// ```
    /// </summary>
    [AzureResourceType("azure:mssql/managedInstance:ManagedInstance")]
    public partial class ManagedInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The administrator login name for the new SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Output("administratorLogin")]
        public Output<string> AdministratorLogin { get; private set; } = null!;

        /// <summary>
        /// The password associated with the `AdministratorLogin` user. Needs to comply with Azure's [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
        /// 
        /// &gt; **Note:** Unless `azure_active_directory_administrator.azuread_authentication_only_enabled` is set to `True`, `AdministratorLogin` and `AdministratorLoginPassword` are required.
        /// </summary>
        [Output("administratorLoginPassword")]
        public Output<string?> AdministratorLoginPassword { get; private set; } = null!;

        /// <summary>
        /// An `AzureActiveDirectoryAdministrator` block as defined below.
        /// </summary>
        [Output("azureActiveDirectoryAdministrator")]
        public Output<Outputs.ManagedInstanceAzureActiveDirectoryAdministrator?> AzureActiveDirectoryAdministrator { get; private set; } = null!;

        /// <summary>
        /// Specifies how the SQL Managed Instance will be collated. Defaults to `SQL_Latin1_General_CP1_CI_AS`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("collation")]
        public Output<string?> Collation { get; private set; } = null!;

        /// <summary>
        /// Specifies the internal format of the SQL Managed Instance databases specific to the SQL engine version. Possible values are `AlwaysUpToDate` and `SQLServer2022`. Defaults to `SQLServer2022`.
        /// 
        /// &gt; **Note:** Changing `DatabaseFormat` from `AlwaysUpToDate` to `SQLServer2022` forces a new SQL Managed Instance to be created.
        /// </summary>
        [Output("databaseFormat")]
        public Output<string?> DatabaseFormat { get; private set; } = null!;

        /// <summary>
        /// The Dns Zone where the SQL Managed Instance is located.
        /// </summary>
        [Output("dnsZone")]
        public Output<string> DnsZone { get; private set; } = null!;

        /// <summary>
        /// The ID of the SQL Managed Instance which will share the DNS zone. This is a prerequisite for creating an `AzurermSqlManagedInstanceFailoverGroup`. Setting this after creation forces a new resource to be created.
        /// </summary>
        [Output("dnsZonePartnerId")]
        public Output<string?> DnsZonePartnerId { get; private set; } = null!;

        /// <summary>
        /// The fully qualified domain name of the Azure Managed SQL Instance
        /// </summary>
        [Output("fqdn")]
        public Output<string> Fqdn { get; private set; } = null!;

        /// <summary>
        /// Specifies the hybrid secondary usage for disaster recovery of the SQL Managed Instance. Possible values are `Active` and `Passive`. Defaults to `Active`.
        /// </summary>
        [Output("hybridSecondaryUsage")]
        public Output<string?> HybridSecondaryUsage { get; private set; } = null!;

        /// <summary>
        /// An `Identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.ManagedInstanceIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// What type of license the Managed Instance will use. Possible values are `LicenseIncluded` and `BasePrice`.
        /// </summary>
        [Output("licenseType")]
        public Output<string> LicenseType { get; private set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The name of the Public Maintenance Configuration window to apply to the SQL Managed Instance. Possible values are `SQL_Default` or an Azure Location in the format `SQL_{Location}_MI_{Size}`(for example `SQL_EastUS_MI_1`). Defaults to `SQL_Default`.
        /// 
        /// `MinimumTlsVersion` - (Optional) The Minimum TLS Version. Default value is `1.2` Valid values include `1.0`, `1.1`, `1.2`.
        /// 
        /// &gt; **Note:** Azure Services will require TLS 1.2+ by August 2025, please see this [announcement](https://azure.microsoft.com/en-us/updates/v2/update-retirement-tls1-0-tls1-1-versions-azure-services/) for more.
        /// </summary>
        [Output("maintenanceConfigurationName")]
        public Output<string?> MaintenanceConfigurationName { get; private set; } = null!;

        [Output("minimumTlsVersion")]
        public Output<string?> MinimumTlsVersion { get; private set; } = null!;

        /// <summary>
        /// The name of the SQL Managed Instance. This needs to be globally unique within Azure. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies how the SQL Managed Instance will be accessed. Defaults to `Default`. Possible values are `Default`, `Proxy`, and `Redirect`.
        /// </summary>
        [Output("proxyOverride")]
        public Output<string?> ProxyOverride { get; private set; } = null!;

        /// <summary>
        /// Is the public data endpoint enabled? Defaults to `False`.
        /// </summary>
        [Output("publicDataEndpointEnabled")]
        public Output<bool?> PublicDataEndpointEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the resource group in which to create the SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The service principal type. The only possible value is `SystemAssigned`.
        /// </summary>
        [Output("servicePrincipalType")]
        public Output<string?> ServicePrincipalType { get; private set; } = null!;

        /// <summary>
        /// Specifies the SKU Name for the SQL Managed Instance. Possible values are `GP_Gen4`, `GP_Gen5`, `GP_Gen8IM`, `GP_Gen8IH`, `BC_Gen4`, `BC_Gen5`, `BC_Gen8IM` or `BC_Gen8IH`.
        /// </summary>
        [Output("skuName")]
        public Output<string> SkuName { get; private set; } = null!;

        /// <summary>
        /// Specifies the storage account type used to store backups for this database. Possible values are `GRS`, `GZRS`, `LRS`, and `ZRS`. Defaults to `GRS`.
        /// </summary>
        [Output("storageAccountType")]
        public Output<string?> StorageAccountType { get; private set; } = null!;

        /// <summary>
        /// Maximum storage space for the SQL Managed instance. This should be a multiple of 32 (GB).
        /// </summary>
        [Output("storageSizeInGb")]
        public Output<int> StorageSizeInGb { get; private set; } = null!;

        /// <summary>
        /// The subnet resource id that the SQL Managed Instance will be associated with.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The TimeZone ID that the SQL Managed Instance will be operating in. Defaults to `UTC`. Changing this forces a new resource to be created.
        /// </summary>
        [Output("timezoneId")]
        public Output<string?> TimezoneId { get; private set; } = null!;

        /// <summary>
        /// Number of cores that should be assigned to the SQL Managed Instance. Values can be `8`, `16`, or `24` for Gen4 SKUs, or `4`, `6`, `8`, `10`, `12`, `16`, `20`, `24`, `32`, `40`, `48`, `56`, `64`, `80`, `96` or `128` for Gen5 SKUs.
        /// </summary>
        [Output("vcores")]
        public Output<int> Vcores { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the SQL Managed Instance is zone redundant. Defaults to `False`.
        /// </summary>
        [Output("zoneRedundantEnabled")]
        public Output<bool?> ZoneRedundantEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedInstance(string name, ManagedInstanceArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/managedInstance:ManagedInstance", name, args ?? new ManagedInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedInstance(string name, Input<string> id, ManagedInstanceState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/managedInstance:ManagedInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure:sql/managedInstance:ManagedInstance" },
                },
                AdditionalSecretOutputs =
                {
                    "administratorLoginPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedInstance Get(string name, Input<string> id, ManagedInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedInstance(name, id, state, options);
        }
    }

    public sealed class ManagedInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The administrator login name for the new SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("administratorLogin")]
        public Input<string>? AdministratorLogin { get; set; }

        [Input("administratorLoginPassword")]
        private Input<string>? _administratorLoginPassword;

        /// <summary>
        /// The password associated with the `AdministratorLogin` user. Needs to comply with Azure's [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
        /// 
        /// &gt; **Note:** Unless `azure_active_directory_administrator.azuread_authentication_only_enabled` is set to `True`, `AdministratorLogin` and `AdministratorLoginPassword` are required.
        /// </summary>
        public Input<string>? AdministratorLoginPassword
        {
            get => _administratorLoginPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _administratorLoginPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// An `AzureActiveDirectoryAdministrator` block as defined below.
        /// </summary>
        [Input("azureActiveDirectoryAdministrator")]
        public Input<Inputs.ManagedInstanceAzureActiveDirectoryAdministratorArgs>? AzureActiveDirectoryAdministrator { get; set; }

        /// <summary>
        /// Specifies how the SQL Managed Instance will be collated. Defaults to `SQL_Latin1_General_CP1_CI_AS`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("collation")]
        public Input<string>? Collation { get; set; }

        /// <summary>
        /// Specifies the internal format of the SQL Managed Instance databases specific to the SQL engine version. Possible values are `AlwaysUpToDate` and `SQLServer2022`. Defaults to `SQLServer2022`.
        /// 
        /// &gt; **Note:** Changing `DatabaseFormat` from `AlwaysUpToDate` to `SQLServer2022` forces a new SQL Managed Instance to be created.
        /// </summary>
        [Input("databaseFormat")]
        public Input<string>? DatabaseFormat { get; set; }

        /// <summary>
        /// The ID of the SQL Managed Instance which will share the DNS zone. This is a prerequisite for creating an `AzurermSqlManagedInstanceFailoverGroup`. Setting this after creation forces a new resource to be created.
        /// </summary>
        [Input("dnsZonePartnerId")]
        public Input<string>? DnsZonePartnerId { get; set; }

        /// <summary>
        /// Specifies the hybrid secondary usage for disaster recovery of the SQL Managed Instance. Possible values are `Active` and `Passive`. Defaults to `Active`.
        /// </summary>
        [Input("hybridSecondaryUsage")]
        public Input<string>? HybridSecondaryUsage { get; set; }

        /// <summary>
        /// An `Identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedInstanceIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// What type of license the Managed Instance will use. Possible values are `LicenseIncluded` and `BasePrice`.
        /// </summary>
        [Input("licenseType", required: true)]
        public Input<string> LicenseType { get; set; } = null!;

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the Public Maintenance Configuration window to apply to the SQL Managed Instance. Possible values are `SQL_Default` or an Azure Location in the format `SQL_{Location}_MI_{Size}`(for example `SQL_EastUS_MI_1`). Defaults to `SQL_Default`.
        /// 
        /// `MinimumTlsVersion` - (Optional) The Minimum TLS Version. Default value is `1.2` Valid values include `1.0`, `1.1`, `1.2`.
        /// 
        /// &gt; **Note:** Azure Services will require TLS 1.2+ by August 2025, please see this [announcement](https://azure.microsoft.com/en-us/updates/v2/update-retirement-tls1-0-tls1-1-versions-azure-services/) for more.
        /// </summary>
        [Input("maintenanceConfigurationName")]
        public Input<string>? MaintenanceConfigurationName { get; set; }

        [Input("minimumTlsVersion")]
        public Input<string>? MinimumTlsVersion { get; set; }

        /// <summary>
        /// The name of the SQL Managed Instance. This needs to be globally unique within Azure. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies how the SQL Managed Instance will be accessed. Defaults to `Default`. Possible values are `Default`, `Proxy`, and `Redirect`.
        /// </summary>
        [Input("proxyOverride")]
        public Input<string>? ProxyOverride { get; set; }

        /// <summary>
        /// Is the public data endpoint enabled? Defaults to `False`.
        /// </summary>
        [Input("publicDataEndpointEnabled")]
        public Input<bool>? PublicDataEndpointEnabled { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The service principal type. The only possible value is `SystemAssigned`.
        /// </summary>
        [Input("servicePrincipalType")]
        public Input<string>? ServicePrincipalType { get; set; }

        /// <summary>
        /// Specifies the SKU Name for the SQL Managed Instance. Possible values are `GP_Gen4`, `GP_Gen5`, `GP_Gen8IM`, `GP_Gen8IH`, `BC_Gen4`, `BC_Gen5`, `BC_Gen8IM` or `BC_Gen8IH`.
        /// </summary>
        [Input("skuName", required: true)]
        public Input<string> SkuName { get; set; } = null!;

        /// <summary>
        /// Specifies the storage account type used to store backups for this database. Possible values are `GRS`, `GZRS`, `LRS`, and `ZRS`. Defaults to `GRS`.
        /// </summary>
        [Input("storageAccountType")]
        public Input<string>? StorageAccountType { get; set; }

        /// <summary>
        /// Maximum storage space for the SQL Managed instance. This should be a multiple of 32 (GB).
        /// </summary>
        [Input("storageSizeInGb", required: true)]
        public Input<int> StorageSizeInGb { get; set; } = null!;

        /// <summary>
        /// The subnet resource id that the SQL Managed Instance will be associated with.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The TimeZone ID that the SQL Managed Instance will be operating in. Defaults to `UTC`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("timezoneId")]
        public Input<string>? TimezoneId { get; set; }

        /// <summary>
        /// Number of cores that should be assigned to the SQL Managed Instance. Values can be `8`, `16`, or `24` for Gen4 SKUs, or `4`, `6`, `8`, `10`, `12`, `16`, `20`, `24`, `32`, `40`, `48`, `56`, `64`, `80`, `96` or `128` for Gen5 SKUs.
        /// </summary>
        [Input("vcores", required: true)]
        public Input<int> Vcores { get; set; } = null!;

        /// <summary>
        /// Specifies whether the SQL Managed Instance is zone redundant. Defaults to `False`.
        /// </summary>
        [Input("zoneRedundantEnabled")]
        public Input<bool>? ZoneRedundantEnabled { get; set; }

        public ManagedInstanceArgs()
        {
        }
        public static new ManagedInstanceArgs Empty => new ManagedInstanceArgs();
    }

    public sealed class ManagedInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The administrator login name for the new SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("administratorLogin")]
        public Input<string>? AdministratorLogin { get; set; }

        [Input("administratorLoginPassword")]
        private Input<string>? _administratorLoginPassword;

        /// <summary>
        /// The password associated with the `AdministratorLogin` user. Needs to comply with Azure's [Password Policy](https://msdn.microsoft.com/library/ms161959.aspx)
        /// 
        /// &gt; **Note:** Unless `azure_active_directory_administrator.azuread_authentication_only_enabled` is set to `True`, `AdministratorLogin` and `AdministratorLoginPassword` are required.
        /// </summary>
        public Input<string>? AdministratorLoginPassword
        {
            get => _administratorLoginPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _administratorLoginPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// An `AzureActiveDirectoryAdministrator` block as defined below.
        /// </summary>
        [Input("azureActiveDirectoryAdministrator")]
        public Input<Inputs.ManagedInstanceAzureActiveDirectoryAdministratorGetArgs>? AzureActiveDirectoryAdministrator { get; set; }

        /// <summary>
        /// Specifies how the SQL Managed Instance will be collated. Defaults to `SQL_Latin1_General_CP1_CI_AS`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("collation")]
        public Input<string>? Collation { get; set; }

        /// <summary>
        /// Specifies the internal format of the SQL Managed Instance databases specific to the SQL engine version. Possible values are `AlwaysUpToDate` and `SQLServer2022`. Defaults to `SQLServer2022`.
        /// 
        /// &gt; **Note:** Changing `DatabaseFormat` from `AlwaysUpToDate` to `SQLServer2022` forces a new SQL Managed Instance to be created.
        /// </summary>
        [Input("databaseFormat")]
        public Input<string>? DatabaseFormat { get; set; }

        /// <summary>
        /// The Dns Zone where the SQL Managed Instance is located.
        /// </summary>
        [Input("dnsZone")]
        public Input<string>? DnsZone { get; set; }

        /// <summary>
        /// The ID of the SQL Managed Instance which will share the DNS zone. This is a prerequisite for creating an `AzurermSqlManagedInstanceFailoverGroup`. Setting this after creation forces a new resource to be created.
        /// </summary>
        [Input("dnsZonePartnerId")]
        public Input<string>? DnsZonePartnerId { get; set; }

        /// <summary>
        /// The fully qualified domain name of the Azure Managed SQL Instance
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        /// <summary>
        /// Specifies the hybrid secondary usage for disaster recovery of the SQL Managed Instance. Possible values are `Active` and `Passive`. Defaults to `Active`.
        /// </summary>
        [Input("hybridSecondaryUsage")]
        public Input<string>? HybridSecondaryUsage { get; set; }

        /// <summary>
        /// An `Identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.ManagedInstanceIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// What type of license the Managed Instance will use. Possible values are `LicenseIncluded` and `BasePrice`.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the Public Maintenance Configuration window to apply to the SQL Managed Instance. Possible values are `SQL_Default` or an Azure Location in the format `SQL_{Location}_MI_{Size}`(for example `SQL_EastUS_MI_1`). Defaults to `SQL_Default`.
        /// 
        /// `MinimumTlsVersion` - (Optional) The Minimum TLS Version. Default value is `1.2` Valid values include `1.0`, `1.1`, `1.2`.
        /// 
        /// &gt; **Note:** Azure Services will require TLS 1.2+ by August 2025, please see this [announcement](https://azure.microsoft.com/en-us/updates/v2/update-retirement-tls1-0-tls1-1-versions-azure-services/) for more.
        /// </summary>
        [Input("maintenanceConfigurationName")]
        public Input<string>? MaintenanceConfigurationName { get; set; }

        [Input("minimumTlsVersion")]
        public Input<string>? MinimumTlsVersion { get; set; }

        /// <summary>
        /// The name of the SQL Managed Instance. This needs to be globally unique within Azure. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies how the SQL Managed Instance will be accessed. Defaults to `Default`. Possible values are `Default`, `Proxy`, and `Redirect`.
        /// </summary>
        [Input("proxyOverride")]
        public Input<string>? ProxyOverride { get; set; }

        /// <summary>
        /// Is the public data endpoint enabled? Defaults to `False`.
        /// </summary>
        [Input("publicDataEndpointEnabled")]
        public Input<bool>? PublicDataEndpointEnabled { get; set; }

        /// <summary>
        /// The name of the resource group in which to create the SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The service principal type. The only possible value is `SystemAssigned`.
        /// </summary>
        [Input("servicePrincipalType")]
        public Input<string>? ServicePrincipalType { get; set; }

        /// <summary>
        /// Specifies the SKU Name for the SQL Managed Instance. Possible values are `GP_Gen4`, `GP_Gen5`, `GP_Gen8IM`, `GP_Gen8IH`, `BC_Gen4`, `BC_Gen5`, `BC_Gen8IM` or `BC_Gen8IH`.
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        /// <summary>
        /// Specifies the storage account type used to store backups for this database. Possible values are `GRS`, `GZRS`, `LRS`, and `ZRS`. Defaults to `GRS`.
        /// </summary>
        [Input("storageAccountType")]
        public Input<string>? StorageAccountType { get; set; }

        /// <summary>
        /// Maximum storage space for the SQL Managed instance. This should be a multiple of 32 (GB).
        /// </summary>
        [Input("storageSizeInGb")]
        public Input<int>? StorageSizeInGb { get; set; }

        /// <summary>
        /// The subnet resource id that the SQL Managed Instance will be associated with.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The TimeZone ID that the SQL Managed Instance will be operating in. Defaults to `UTC`. Changing this forces a new resource to be created.
        /// </summary>
        [Input("timezoneId")]
        public Input<string>? TimezoneId { get; set; }

        /// <summary>
        /// Number of cores that should be assigned to the SQL Managed Instance. Values can be `8`, `16`, or `24` for Gen4 SKUs, or `4`, `6`, `8`, `10`, `12`, `16`, `20`, `24`, `32`, `40`, `48`, `56`, `64`, `80`, `96` or `128` for Gen5 SKUs.
        /// </summary>
        [Input("vcores")]
        public Input<int>? Vcores { get; set; }

        /// <summary>
        /// Specifies whether the SQL Managed Instance is zone redundant. Defaults to `False`.
        /// </summary>
        [Input("zoneRedundantEnabled")]
        public Input<bool>? ZoneRedundantEnabled { get; set; }

        public ManagedInstanceState()
        {
        }
        public static new ManagedInstanceState Empty => new ManagedInstanceState();
    }
}
