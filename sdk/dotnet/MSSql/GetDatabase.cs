// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    public static class GetDatabase
    {
        /// <summary>
        /// Use this data source to access information about an existing SQL database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
        ///     {
        ///         Location = "West Europe",
        ///     });
        /// 
        ///     var exampleServer = new Azure.MSSql.Server("exampleServer", new()
        ///     {
        ///         ResourceGroupName = exampleResourceGroup.Name,
        ///         Location = exampleResourceGroup.Location,
        ///         Version = "12.0",
        ///         AdministratorLogin = "4dm1n157r470r",
        ///         AdministratorLoginPassword = "4-v3ry-53cr37-p455w0rd",
        ///     });
        /// 
        ///     var exampleDatabase = Azure.MSSql.GetDatabase.Invoke(new()
        ///     {
        ///         Name = "example-mssql-db",
        ///         ServerId = exampleServer.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["databaseId"] = exampleDatabase.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDatabaseResult> InvokeAsync(GetDatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseResult>("azure:mssql/getDatabase:getDatabase", args ?? new GetDatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing SQL database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
        ///     {
        ///         Location = "West Europe",
        ///     });
        /// 
        ///     var exampleServer = new Azure.MSSql.Server("exampleServer", new()
        ///     {
        ///         ResourceGroupName = exampleResourceGroup.Name,
        ///         Location = exampleResourceGroup.Location,
        ///         Version = "12.0",
        ///         AdministratorLogin = "4dm1n157r470r",
        ///         AdministratorLoginPassword = "4-v3ry-53cr37-p455w0rd",
        ///     });
        /// 
        ///     var exampleDatabase = Azure.MSSql.GetDatabase.Invoke(new()
        ///     {
        ///         Name = "example-mssql-db",
        ///         ServerId = exampleServer.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["databaseId"] = exampleDatabase.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDatabaseResult> Invoke(GetDatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseResult>("azure:mssql/getDatabase:getDatabase", args ?? new GetDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the MS SQL Database.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The id of the MS SQL Server on which to read the database.
        /// </summary>
        [Input("serverId", required: true)]
        public string ServerId { get; set; } = null!;

        public GetDatabaseArgs()
        {
        }
        public static new GetDatabaseArgs Empty => new GetDatabaseArgs();
    }

    public sealed class GetDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the MS SQL Database.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The id of the MS SQL Server on which to read the database.
        /// </summary>
        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        public GetDatabaseInvokeArgs()
        {
        }
        public static new GetDatabaseInvokeArgs Empty => new GetDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseResult
    {
        /// <summary>
        /// The collation of the database.
        /// </summary>
        public readonly string Collation;
        /// <summary>
        /// The id of the elastic pool containing this database.
        /// </summary>
        public readonly string ElasticPoolId;
        /// <summary>
        /// The type of enclave being used by the database.
        /// </summary>
        public readonly string EnclaveType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The license type to apply for this database.
        /// </summary>
        public readonly string LicenseType;
        /// <summary>
        /// The max size of the database in gigabytes.
        /// </summary>
        public readonly int MaxSizeGb;
        public readonly string Name;
        /// <summary>
        /// The number of readonly secondary replicas associated with the database to which readonly application intent connections may be routed.
        /// </summary>
        public readonly int ReadReplicaCount;
        /// <summary>
        /// If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica.
        /// </summary>
        public readonly bool ReadScale;
        public readonly string ServerId;
        /// <summary>
        /// The name of the SKU of the database.
        /// </summary>
        public readonly string SkuName;
        /// <summary>
        /// The storage account type used to store backups for this database.
        /// </summary>
        public readonly string StorageAccountType;
        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
        /// </summary>
        public readonly bool ZoneRedundant;

        [OutputConstructor]
        private GetDatabaseResult(
            string collation,

            string elasticPoolId,

            string enclaveType,

            string id,

            string licenseType,

            int maxSizeGb,

            string name,

            int readReplicaCount,

            bool readScale,

            string serverId,

            string skuName,

            string storageAccountType,

            ImmutableDictionary<string, string> tags,

            bool zoneRedundant)
        {
            Collation = collation;
            ElasticPoolId = elasticPoolId;
            EnclaveType = enclaveType;
            Id = id;
            LicenseType = licenseType;
            MaxSizeGb = maxSizeGb;
            Name = name;
            ReadReplicaCount = readReplicaCount;
            ReadScale = readScale;
            ServerId = serverId;
            SkuName = skuName;
            StorageAccountType = storageAccountType;
            Tags = tags;
            ZoneRedundant = zoneRedundant;
        }
    }
}
