// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages the Vulnerability Assessment for a MS SQL Server.
    /// 
    /// &gt; **NOTE** Vulnerability Assessment is currently only available for MS SQL databases.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West US",
    ///         });
    ///         var exampleSqlServer = new Azure.Sql.SqlServer("exampleSqlServer", new Azure.Sql.SqlServerArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             Version = "12.0",
    ///             AdministratorLogin = "4dm1n157r470r",
    ///             AdministratorLoginPassword = "4-v3ry-53cr37-p455w0rd",
    ///         });
    ///         var exampleAccount = new Azure.Storage.Account("exampleAccount", new Azure.Storage.AccountArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             AccountTier = "Standard",
    ///             AccountReplicationType = "GRS",
    ///         });
    ///         var exampleContainer = new Azure.Storage.Container("exampleContainer", new Azure.Storage.ContainerArgs
    ///         {
    ///             StorageAccountName = exampleAccount.Name,
    ///             ContainerAccessType = "private",
    ///         });
    ///         var exampleServerSecurityAlertPolicy = new Azure.MSSql.ServerSecurityAlertPolicy("exampleServerSecurityAlertPolicy", new Azure.MSSql.ServerSecurityAlertPolicyArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             ServerName = exampleSqlServer.Name,
    ///             State = "Enabled",
    ///         });
    ///         var exampleServerVulnerabilityAssessment = new Azure.MSSql.ServerVulnerabilityAssessment("exampleServerVulnerabilityAssessment", new Azure.MSSql.ServerVulnerabilityAssessmentArgs
    ///         {
    ///             ServerSecurityAlertPolicyId = exampleServerSecurityAlertPolicy.Id,
    ///             StorageContainerPath = Output.Tuple(exampleAccount.PrimaryBlobEndpoint, exampleContainer.Name).Apply(values =&gt;
    ///             {
    ///                 var primaryBlobEndpoint = values.Item1;
    ///                 var name = values.Item2;
    ///                 return $"{primaryBlobEndpoint}{name}/";
    ///             }),
    ///             StorageAccountAccessKey = exampleAccount.PrimaryAccessKey,
    ///             RecurringScans = new Azure.MSSql.Inputs.ServerVulnerabilityAssessmentRecurringScansArgs
    ///             {
    ///                 Enabled = true,
    ///                 EmailSubscriptionAdmins = true,
    ///                 Emails = 
    ///                 {
    ///                     "email@example1.com",
    ///                     "email@example2.com",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// MS SQL Server Vulnerability Assessment can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/servers/mssqlserver/vulnerabilityAssessments/Default
    /// ```
    /// </summary>
    public partial class ServerVulnerabilityAssessment : Pulumi.CustomResource
    {
        /// <summary>
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        /// </summary>
        [Output("recurringScans")]
        public Output<Outputs.ServerVulnerabilityAssessmentRecurringScans> RecurringScans { get; private set; } = null!;

        /// <summary>
        /// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Output("serverSecurityAlertPolicyId")]
        public Output<string> ServerSecurityAlertPolicyId { get; private set; } = null!;

        /// <summary>
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        /// </summary>
        [Output("storageAccountAccessKey")]
        public Output<string?> StorageAccountAccessKey { get; private set; } = null!;

        /// <summary>
        /// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
        /// </summary>
        [Output("storageContainerPath")]
        public Output<string> StorageContainerPath { get; private set; } = null!;

        /// <summary>
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        /// </summary>
        [Output("storageContainerSasKey")]
        public Output<string?> StorageContainerSasKey { get; private set; } = null!;


        /// <summary>
        /// Create a ServerVulnerabilityAssessment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerVulnerabilityAssessment(string name, ServerVulnerabilityAssessmentArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment", name, args ?? new ServerVulnerabilityAssessmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerVulnerabilityAssessment(string name, Input<string> id, ServerVulnerabilityAssessmentState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerVulnerabilityAssessment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerVulnerabilityAssessment Get(string name, Input<string> id, ServerVulnerabilityAssessmentState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerVulnerabilityAssessment(name, id, state, options);
        }
    }

    public sealed class ServerVulnerabilityAssessmentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        /// </summary>
        [Input("recurringScans")]
        public Input<Inputs.ServerVulnerabilityAssessmentRecurringScansArgs>? RecurringScans { get; set; }

        /// <summary>
        /// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverSecurityAlertPolicyId", required: true)]
        public Input<string> ServerSecurityAlertPolicyId { get; set; } = null!;

        /// <summary>
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        /// </summary>
        [Input("storageAccountAccessKey")]
        public Input<string>? StorageAccountAccessKey { get; set; }

        /// <summary>
        /// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
        /// </summary>
        [Input("storageContainerPath", required: true)]
        public Input<string> StorageContainerPath { get; set; } = null!;

        /// <summary>
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        /// </summary>
        [Input("storageContainerSasKey")]
        public Input<string>? StorageContainerSasKey { get; set; }

        public ServerVulnerabilityAssessmentArgs()
        {
        }
    }

    public sealed class ServerVulnerabilityAssessmentState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The recurring scans settings. The `recurring_scans` block supports fields documented below.
        /// </summary>
        [Input("recurringScans")]
        public Input<Inputs.ServerVulnerabilityAssessmentRecurringScansGetArgs>? RecurringScans { get; set; }

        /// <summary>
        /// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverSecurityAlertPolicyId")]
        public Input<string>? ServerSecurityAlertPolicyId { get; set; }

        /// <summary>
        /// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storage_container_sas_key` isn't specified, `storage_account_access_key` is required.
        /// </summary>
        [Input("storageAccountAccessKey")]
        public Input<string>? StorageAccountAccessKey { get; set; }

        /// <summary>
        /// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
        /// </summary>
        [Input("storageContainerPath")]
        public Input<string>? StorageContainerPath { get; set; }

        /// <summary>
        /// A shared access signature (SAS Key) that has write access to the blob container specified in `storage_container_path` parameter. If `storage_account_access_key` isn't specified, `storage_container_sas_key` is required.
        /// </summary>
        [Input("storageContainerSasKey")]
        public Input<string>? StorageContainerSasKey { get; set; }

        public ServerVulnerabilityAssessmentState()
        {
        }
    }
}
