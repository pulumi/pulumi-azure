// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages the transparent data encryption configuration for a MSSQL Managed Instance
    /// 
    /// !&gt; **IMPORTANT:** This resource is obsolete and should only be used on pre-existing MS SQL Instances that are over 2 years old. By default all new MS SQL Instances are deployed with System Managed Transparent Data Encryption enabled.
    /// 
    /// &gt; **NOTE:** Once transparent data encryption(TDE) is enabled on a MS SQL instance, it is not possible to remove TDE. You will be able to switch between 'ServiceManaged' and 'CustomerManaged' keys, but will not be able to remove encryption. For safety when this resource is deleted, the TDE mode will automatically be set to 'ServiceManaged'. See `key_vault_uri` for more information on how to specify the key types. As SQL Managed Instance only supports a single configuration for encryption settings, this resource will replace the current encryption settings on the server.
    /// 
    /// &gt; **Note:** See [documentation](https://docs.microsoft.com/azure/azure-sql/database/transparent-data-encryption-byok-overview) for important information on how handle lifecycle management of the keys to prevent data lockout.
    /// 
    /// ## Example Usage
    /// ### With Service Managed Key
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "EastUs",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = azurerm_resource_group.Test.Location,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.0.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "managedinstancedelegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Name = "Microsoft.Sql/managedInstances",
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                         "Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action",
    ///                         "Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleManagedInstance = new Azure.MSSql.ManagedInstance("exampleManagedInstance", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         LicenseType = "BasePrice",
    ///         SkuName = "GP_Gen5",
    ///         StorageSizeInGb = 32,
    ///         SubnetId = exampleSubnet.Id,
    ///         Vcores = 4,
    ///         AdministratorLogin = "missadministrator",
    ///         AdministratorLoginPassword = "NCC-1701-D",
    ///         Identity = new Azure.MSSql.Inputs.ManagedInstanceIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleManagedInstanceTransparentDataEncryption = new Azure.MSSql.ManagedInstanceTransparentDataEncryption("exampleManagedInstanceTransparentDataEncryption", new()
    ///     {
    ///         ManagedInstanceId = exampleManagedInstance.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### With Customer Managed Key
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "EastUs",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = azurerm_resource_group.Test.Location,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.0.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "managedinstancedelegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Name = "Microsoft.Sql/managedInstances",
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                         "Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action",
    ///                         "Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleManagedInstance = new Azure.MSSql.ManagedInstance("exampleManagedInstance", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         LicenseType = "BasePrice",
    ///         SkuName = "GP_Gen5",
    ///         StorageSizeInGb = 32,
    ///         SubnetId = exampleSubnet.Id,
    ///         Vcores = 4,
    ///         AdministratorLogin = "missadministrator",
    ///         AdministratorLoginPassword = "NCC-1701-D",
    ///         Identity = new Azure.MSSql.Inputs.ManagedInstanceIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     // Create a key vault with policies for the deployer to create a key &amp; SQL Managed Instance to wrap/unwrap/get key
    ///     var exampleKeyVault = new Azure.KeyVault.KeyVault("exampleKeyVault", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         EnabledForDiskEncryption = true,
    ///         TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///         SoftDeleteRetentionDays = 7,
    ///         PurgeProtectionEnabled = false,
    ///         SkuName = "standard",
    ///         AccessPolicies = new[]
    ///         {
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.TenantId),
    ///                 ObjectId = current.Apply(getClientConfigResult =&gt; getClientConfigResult.ObjectId),
    ///                 KeyPermissions = new[]
    ///                 {
    ///                     "Get",
    ///                     "List",
    ///                     "Create",
    ///                     "Delete",
    ///                     "Update",
    ///                     "Recover",
    ///                     "Purge",
    ///                     "GetRotationPolicy",
    ///                 },
    ///             },
    ///             new Azure.KeyVault.Inputs.KeyVaultAccessPolicyArgs
    ///             {
    ///                 TenantId = exampleManagedInstance.Identity.Apply(identity =&gt; identity?.TenantId),
    ///                 ObjectId = exampleManagedInstance.Identity.Apply(identity =&gt; identity?.PrincipalId),
    ///                 KeyPermissions = new[]
    ///                 {
    ///                     "Get",
    ///                     "WrapKey",
    ///                     "UnwrapKey",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleKey = new Azure.KeyVault.Key("exampleKey", new()
    ///     {
    ///         KeyVaultId = exampleKeyVault.Id,
    ///         KeyType = "RSA",
    ///         KeySize = 2048,
    ///         KeyOpts = new[]
    ///         {
    ///             "unwrapKey",
    ///             "wrapKey",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleKeyVault,
    ///         },
    ///     });
    /// 
    ///     var exampleManagedInstanceTransparentDataEncryption = new Azure.MSSql.ManagedInstanceTransparentDataEncryption("exampleManagedInstanceTransparentDataEncryption", new()
    ///     {
    ///         ManagedInstanceId = exampleManagedInstance.Id,
    ///         KeyVaultKeyId = exampleKey.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SQL Managed Instance Transparent Data Encryption can be imported using the resource id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mssql/managedInstanceTransparentDataEncryption:ManagedInstanceTransparentDataEncryption example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Sql/managedInstances/instance1/encryptionProtector/current
    /// ```
    /// </summary>
    [AzureResourceType("azure:mssql/managedInstanceTransparentDataEncryption:ManagedInstanceTransparentDataEncryption")]
    public partial class ManagedInstanceTransparentDataEncryption : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When enabled, the SQL Managed Instance will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the SQL Managed Instance will be automatically rotated to the latest key version within 60 minutes.
        /// </summary>
        [Output("autoRotationEnabled")]
        public Output<bool?> AutoRotationEnabled { get; private set; } = null!;

        /// <summary>
        /// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
        /// 
        /// &gt; **NOTE:** In order to use customer managed keys, the identity of the MSSQL Managed Instance must have the following permissions on the key vault: 'get', 'wrapKey' and 'unwrapKey'
        /// 
        /// &gt; **NOTE:** If `managed_instance_id` denotes a secondary instance deployed for disaster recovery purposes, then the `key_vault_key_id` should be the same key used for the primary instance's transparent data encryption. Both primary and secondary instances should be encrypted with same key material.
        /// </summary>
        [Output("keyVaultKeyId")]
        public Output<string?> KeyVaultKeyId { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the MS SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Output("managedInstanceId")]
        public Output<string> ManagedInstanceId { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedInstanceTransparentDataEncryption resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedInstanceTransparentDataEncryption(string name, ManagedInstanceTransparentDataEncryptionArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/managedInstanceTransparentDataEncryption:ManagedInstanceTransparentDataEncryption", name, args ?? new ManagedInstanceTransparentDataEncryptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedInstanceTransparentDataEncryption(string name, Input<string> id, ManagedInstanceTransparentDataEncryptionState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/managedInstanceTransparentDataEncryption:ManagedInstanceTransparentDataEncryption", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedInstanceTransparentDataEncryption resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedInstanceTransparentDataEncryption Get(string name, Input<string> id, ManagedInstanceTransparentDataEncryptionState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedInstanceTransparentDataEncryption(name, id, state, options);
        }
    }

    public sealed class ManagedInstanceTransparentDataEncryptionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When enabled, the SQL Managed Instance will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the SQL Managed Instance will be automatically rotated to the latest key version within 60 minutes.
        /// </summary>
        [Input("autoRotationEnabled")]
        public Input<bool>? AutoRotationEnabled { get; set; }

        /// <summary>
        /// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
        /// 
        /// &gt; **NOTE:** In order to use customer managed keys, the identity of the MSSQL Managed Instance must have the following permissions on the key vault: 'get', 'wrapKey' and 'unwrapKey'
        /// 
        /// &gt; **NOTE:** If `managed_instance_id` denotes a secondary instance deployed for disaster recovery purposes, then the `key_vault_key_id` should be the same key used for the primary instance's transparent data encryption. Both primary and secondary instances should be encrypted with same key material.
        /// </summary>
        [Input("keyVaultKeyId")]
        public Input<string>? KeyVaultKeyId { get; set; }

        /// <summary>
        /// Specifies the name of the MS SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedInstanceId", required: true)]
        public Input<string> ManagedInstanceId { get; set; } = null!;

        public ManagedInstanceTransparentDataEncryptionArgs()
        {
        }
        public static new ManagedInstanceTransparentDataEncryptionArgs Empty => new ManagedInstanceTransparentDataEncryptionArgs();
    }

    public sealed class ManagedInstanceTransparentDataEncryptionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When enabled, the SQL Managed Instance will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the SQL Managed Instance will be automatically rotated to the latest key version within 60 minutes.
        /// </summary>
        [Input("autoRotationEnabled")]
        public Input<bool>? AutoRotationEnabled { get; set; }

        /// <summary>
        /// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
        /// 
        /// &gt; **NOTE:** In order to use customer managed keys, the identity of the MSSQL Managed Instance must have the following permissions on the key vault: 'get', 'wrapKey' and 'unwrapKey'
        /// 
        /// &gt; **NOTE:** If `managed_instance_id` denotes a secondary instance deployed for disaster recovery purposes, then the `key_vault_key_id` should be the same key used for the primary instance's transparent data encryption. Both primary and secondary instances should be encrypted with same key material.
        /// </summary>
        [Input("keyVaultKeyId")]
        public Input<string>? KeyVaultKeyId { get; set; }

        /// <summary>
        /// Specifies the name of the MS SQL Managed Instance. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedInstanceId")]
        public Input<string>? ManagedInstanceId { get; set; }

        public ManagedInstanceTransparentDataEncryptionState()
        {
        }
        public static new ManagedInstanceTransparentDataEncryptionState Empty => new ManagedInstanceTransparentDataEncryptionState();
    }
}
