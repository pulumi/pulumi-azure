// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages a MS SQL Server Extended Auditing Policy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleServer = new Azure.MSSql.Server("exampleServer", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Version = "12.0",
    ///         AdministratorLogin = "missadministrator",
    ///         AdministratorLoginPassword = "AdminPassword123!",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///     });
    /// 
    ///     var exampleServerExtendedAuditingPolicy = new Azure.MSSql.ServerExtendedAuditingPolicy("exampleServerExtendedAuditingPolicy", new()
    ///     {
    ///         ServerId = exampleServer.Id,
    ///         StorageEndpoint = exampleAccount.PrimaryBlobEndpoint,
    ///         StorageAccountAccessKey = exampleAccount.PrimaryAccessKey,
    ///         StorageAccountAccessKeyIsSecondary = false,
    ///         RetentionInDays = 6,
    ///     });
    /// 
    /// });
    /// ```
    /// ### With Storage Account Behind VNet And Firewall
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var primary = Azure.Core.GetSubscription.Invoke();
    /// 
    ///     var exampleClientConfig = Azure.Core.GetClientConfig.Invoke();
    /// 
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///         ServiceEndpoints = new[]
    ///         {
    ///             "Microsoft.Sql",
    ///             "Microsoft.Storage",
    ///         },
    ///         EnforcePrivateLinkEndpointNetworkPolicies = true,
    ///     });
    /// 
    ///     var exampleServer = new Azure.MSSql.Server("exampleServer", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Version = "12.0",
    ///         AdministratorLogin = "missadministrator",
    ///         AdministratorLoginPassword = "AdminPassword123!",
    ///         MinimumTlsVersion = "1.2",
    ///         Identity = new Azure.MSSql.Inputs.ServerIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleAssignment = new Azure.Authorization.Assignment("exampleAssignment", new()
    ///     {
    ///         Scope = primary.Apply(getSubscriptionResult =&gt; getSubscriptionResult.Id),
    ///         RoleDefinitionName = "Storage Blob Data Contributor",
    ///         PrincipalId = exampleServer.Identity.Apply(identity =&gt; identity?.PrincipalId),
    ///     });
    /// 
    ///     var sqlvnetrule = new Azure.Sql.VirtualNetworkRule("sqlvnetrule", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ServerName = exampleServer.Name,
    ///         SubnetId = exampleSubnet.Id,
    ///     });
    /// 
    ///     var exampleFirewallRule = new Azure.Sql.FirewallRule("exampleFirewallRule", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         ServerName = exampleServer.Name,
    ///         StartIpAddress = "0.0.0.0",
    ///         EndIpAddress = "0.0.0.0",
    ///     });
    /// 
    ///     var exampleAccount = new Azure.Storage.Account("exampleAccount", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AccountTier = "Standard",
    ///         AccountReplicationType = "LRS",
    ///         AccountKind = "StorageV2",
    ///         AllowNestedItemsToBePublic = false,
    ///         NetworkRules = new Azure.Storage.Inputs.AccountNetworkRulesArgs
    ///         {
    ///             DefaultAction = "Deny",
    ///             IpRules = new[]
    ///             {
    ///                 "127.0.0.1",
    ///             },
    ///             VirtualNetworkSubnetIds = new[]
    ///             {
    ///                 exampleSubnet.Id,
    ///             },
    ///             Bypasses = new[]
    ///             {
    ///                 "AzureServices",
    ///             },
    ///         },
    ///         Identity = new Azure.Storage.Inputs.AccountIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    ///     var exampleServerExtendedAuditingPolicy = new Azure.MSSql.ServerExtendedAuditingPolicy("exampleServerExtendedAuditingPolicy", new()
    ///     {
    ///         StorageEndpoint = exampleAccount.PrimaryBlobEndpoint,
    ///         ServerId = exampleServer.Id,
    ///         RetentionInDays = 6,
    ///         LogMonitoringEnabled = false,
    ///         StorageAccountSubscriptionId = azurerm_subscription.Primary.Subscription_id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleAssignment,
    ///             exampleAccount,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With Log Analytics Workspace And EventHub
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleServer = new Azure.MSSql.Server("exampleServer", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         Version = "12.0",
    ///         AdministratorLogin = "missadministrator",
    ///         AdministratorLoginPassword = "AdminPassword123!",
    ///     });
    /// 
    ///     var exampleServerExtendedAuditingPolicy = new Azure.MSSql.ServerExtendedAuditingPolicy("exampleServerExtendedAuditingPolicy", new()
    ///     {
    ///         ServerId = exampleServer.Id,
    ///         StorageEndpoint = azurerm_storage_account.Example.Primary_blob_endpoint,
    ///         StorageAccountAccessKey = azurerm_storage_account.Example.Primary_access_key,
    ///         StorageAccountAccessKeyIsSecondary = false,
    ///         RetentionInDays = 6,
    ///     });
    /// 
    ///     var exampleAnalyticsWorkspace = new Azure.OperationalInsights.AnalyticsWorkspace("exampleAnalyticsWorkspace", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "PerGB2018",
    ///         RetentionInDays = 30,
    ///     });
    /// 
    ///     var exampleEventHubNamespace = new Azure.EventHub.EventHubNamespace("exampleEventHubNamespace", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Sku = "Standard",
    ///     });
    /// 
    ///     var exampleEventHub = new Azure.EventHub.EventHub("exampleEventHub", new()
    ///     {
    ///         NamespaceName = exampleEventHubNamespace.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         PartitionCount = 2,
    ///         MessageRetention = 1,
    ///     });
    /// 
    ///     var exampleEventHubNamespaceAuthorizationRule = new Azure.EventHub.EventHubNamespaceAuthorizationRule("exampleEventHubNamespaceAuthorizationRule", new()
    ///     {
    ///         NamespaceName = exampleEventHubNamespace.Name,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Listen = true,
    ///         Send = true,
    ///         Manage = true,
    ///     });
    /// 
    ///     var exampleMssql_serverExtendedAuditingPolicyServerExtendedAuditingPolicy = new Azure.MSSql.ServerExtendedAuditingPolicy("exampleMssql/serverExtendedAuditingPolicyServerExtendedAuditingPolicy", new()
    ///     {
    ///         ServerId = exampleServer.Id,
    ///         LogMonitoringEnabled = true,
    ///     });
    /// 
    ///     var exampleDiagnosticSetting = new Azure.Monitoring.DiagnosticSetting("exampleDiagnosticSetting", new()
    ///     {
    ///         TargetResourceId = exampleServer.Id.Apply(id =&gt; $"{id}/databases/master"),
    ///         EventhubAuthorizationRuleId = exampleEventHubNamespaceAuthorizationRule.Id,
    ///         EventhubName = exampleEventHub.Name,
    ///         LogAnalyticsWorkspaceId = exampleAnalyticsWorkspace.Id,
    ///         Logs = new[]
    ///         {
    ///             new Azure.Monitoring.Inputs.DiagnosticSettingLogArgs
    ///             {
    ///                 Category = "SQLSecurityAuditEvents",
    ///                 Enabled = true,
    ///                 RetentionPolicy = new Azure.Monitoring.Inputs.DiagnosticSettingLogRetentionPolicyArgs
    ///                 {
    ///                     Enabled = false,
    ///                 },
    ///             },
    ///         },
    ///         Metrics = new[]
    ///         {
    ///             new Azure.Monitoring.Inputs.DiagnosticSettingMetricArgs
    ///             {
    ///                 Category = "AllMetrics",
    ///                 RetentionPolicy = new Azure.Monitoring.Inputs.DiagnosticSettingMetricRetentionPolicyArgs
    ///                 {
    ///                     Enabled = false,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// MS SQL Server Extended Auditing Policies can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mssql/serverExtendedAuditingPolicy:ServerExtendedAuditingPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlServer1/extendedAuditingSettings/default
    /// ```
    /// </summary>
    [AzureResourceType("azure:mssql/serverExtendedAuditingPolicy:ServerExtendedAuditingPolicy")]
    public partial class ServerExtendedAuditingPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
        /// 
        /// -&gt;**NOTE:**  If `enabled` is `true`, `storage_endpoint` or `log_monitoring_enabled` are required.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
        /// </summary>
        [Output("logMonitoringEnabled")]
        public Output<bool?> LogMonitoringEnabled { get; private set; } = null!;

        /// <summary>
        /// The number of days to retain logs for in the storage account. Defaults to `0`.
        /// </summary>
        [Output("retentionInDays")]
        public Output<int?> RetentionInDays { get; private set; } = null!;

        /// <summary>
        /// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
        /// </summary>
        [Output("serverId")]
        public Output<string> ServerId { get; private set; } = null!;

        /// <summary>
        /// The access key to use for the auditing storage account.
        /// </summary>
        [Output("storageAccountAccessKey")]
        public Output<string?> StorageAccountAccessKey { get; private set; } = null!;

        /// <summary>
        /// Is `storage_account_access_key` value the storage's secondary key?
        /// </summary>
        [Output("storageAccountAccessKeyIsSecondary")]
        public Output<bool?> StorageAccountAccessKeyIsSecondary { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subscription containing the Storage Account.
        /// </summary>
        [Output("storageAccountSubscriptionId")]
        public Output<string?> StorageAccountSubscriptionId { get; private set; } = null!;

        /// <summary>
        /// The blob storage endpoint (e.g. &lt;https://example.blob.core.windows.net&gt;). This blob storage will hold all extended auditing logs.
        /// </summary>
        [Output("storageEndpoint")]
        public Output<string?> StorageEndpoint { get; private set; } = null!;


        /// <summary>
        /// Create a ServerExtendedAuditingPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerExtendedAuditingPolicy(string name, ServerExtendedAuditingPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/serverExtendedAuditingPolicy:ServerExtendedAuditingPolicy", name, args ?? new ServerExtendedAuditingPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerExtendedAuditingPolicy(string name, Input<string> id, ServerExtendedAuditingPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/serverExtendedAuditingPolicy:ServerExtendedAuditingPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "storageAccountAccessKey",
                    "storageAccountSubscriptionId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerExtendedAuditingPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerExtendedAuditingPolicy Get(string name, Input<string> id, ServerExtendedAuditingPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerExtendedAuditingPolicy(name, id, state, options);
        }
    }

    public sealed class ServerExtendedAuditingPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
        /// 
        /// -&gt;**NOTE:**  If `enabled` is `true`, `storage_endpoint` or `log_monitoring_enabled` are required.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
        /// </summary>
        [Input("logMonitoringEnabled")]
        public Input<bool>? LogMonitoringEnabled { get; set; }

        /// <summary>
        /// The number of days to retain logs for in the storage account. Defaults to `0`.
        /// </summary>
        [Input("retentionInDays")]
        public Input<int>? RetentionInDays { get; set; }

        /// <summary>
        /// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        [Input("storageAccountAccessKey")]
        private Input<string>? _storageAccountAccessKey;

        /// <summary>
        /// The access key to use for the auditing storage account.
        /// </summary>
        public Input<string>? StorageAccountAccessKey
        {
            get => _storageAccountAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Is `storage_account_access_key` value the storage's secondary key?
        /// </summary>
        [Input("storageAccountAccessKeyIsSecondary")]
        public Input<bool>? StorageAccountAccessKeyIsSecondary { get; set; }

        [Input("storageAccountSubscriptionId")]
        private Input<string>? _storageAccountSubscriptionId;

        /// <summary>
        /// The ID of the Subscription containing the Storage Account.
        /// </summary>
        public Input<string>? StorageAccountSubscriptionId
        {
            get => _storageAccountSubscriptionId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountSubscriptionId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The blob storage endpoint (e.g. &lt;https://example.blob.core.windows.net&gt;). This blob storage will hold all extended auditing logs.
        /// </summary>
        [Input("storageEndpoint")]
        public Input<string>? StorageEndpoint { get; set; }

        public ServerExtendedAuditingPolicyArgs()
        {
        }
        public static new ServerExtendedAuditingPolicyArgs Empty => new ServerExtendedAuditingPolicyArgs();
    }

    public sealed class ServerExtendedAuditingPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
        /// 
        /// -&gt;**NOTE:**  If `enabled` is `true`, `storage_endpoint` or `log_monitoring_enabled` are required.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
        /// </summary>
        [Input("logMonitoringEnabled")]
        public Input<bool>? LogMonitoringEnabled { get; set; }

        /// <summary>
        /// The number of days to retain logs for in the storage account. Defaults to `0`.
        /// </summary>
        [Input("retentionInDays")]
        public Input<int>? RetentionInDays { get; set; }

        /// <summary>
        /// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        [Input("storageAccountAccessKey")]
        private Input<string>? _storageAccountAccessKey;

        /// <summary>
        /// The access key to use for the auditing storage account.
        /// </summary>
        public Input<string>? StorageAccountAccessKey
        {
            get => _storageAccountAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Is `storage_account_access_key` value the storage's secondary key?
        /// </summary>
        [Input("storageAccountAccessKeyIsSecondary")]
        public Input<bool>? StorageAccountAccessKeyIsSecondary { get; set; }

        [Input("storageAccountSubscriptionId")]
        private Input<string>? _storageAccountSubscriptionId;

        /// <summary>
        /// The ID of the Subscription containing the Storage Account.
        /// </summary>
        public Input<string>? StorageAccountSubscriptionId
        {
            get => _storageAccountSubscriptionId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountSubscriptionId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The blob storage endpoint (e.g. &lt;https://example.blob.core.windows.net&gt;). This blob storage will hold all extended auditing logs.
        /// </summary>
        [Input("storageEndpoint")]
        public Input<string>? StorageEndpoint { get; set; }

        public ServerExtendedAuditingPolicyState()
        {
        }
        public static new ServerExtendedAuditingPolicyState Empty => new ServerExtendedAuditingPolicyState();
    }
}
