// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages a MS SQL Server DNS Alias.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new Azure.Core.ResourceGroupArgs
    ///         {
    ///             Location = "West Europe",
    ///         });
    ///         var exampleServer = new Azure.MSSql.Server("exampleServer", new Azure.MSSql.ServerArgs
    ///         {
    ///             ResourceGroupName = exampleResourceGroup.Name,
    ///             Location = exampleResourceGroup.Location,
    ///             Version = "12.0",
    ///             AdministratorLogin = "missadministrator",
    ///             AdministratorLoginPassword = "AdminPassword123!",
    ///         });
    ///         var exampleServerDnsAlias = new Azure.MSSql.ServerDnsAlias("exampleServerDnsAlias", new Azure.MSSql.ServerDnsAliasArgs
    ///         {
    ///             MssqlServerId = exampleServer.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// MSSQL Server DNS Aliass can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mssql/serverDnsAlias:ServerDnsAlias example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/dnsAliases/default
    /// ```
    /// </summary>
    [AzureResourceType("azure:mssql/serverDnsAlias:ServerDnsAlias")]
    public partial class ServerDnsAlias : Pulumi.CustomResource
    {
        /// <summary>
        /// The fully qualified DNS record for alias.
        /// </summary>
        [Output("dnsRecord")]
        public Output<string> DnsRecord { get; private set; } = null!;

        /// <summary>
        /// The ID of the mssql server. Changing this forces a new MSSQL Server DNS Alias to be created.
        /// </summary>
        [Output("mssqlServerId")]
        public Output<string> MssqlServerId { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this MSSQL Server DNS Alias. Changing this forces a new MSSQL Server DNS Alias to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a ServerDnsAlias resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerDnsAlias(string name, ServerDnsAliasArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/serverDnsAlias:ServerDnsAlias", name, args ?? new ServerDnsAliasArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerDnsAlias(string name, Input<string> id, ServerDnsAliasState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/serverDnsAlias:ServerDnsAlias", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerDnsAlias resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerDnsAlias Get(string name, Input<string> id, ServerDnsAliasState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerDnsAlias(name, id, state, options);
        }
    }

    public sealed class ServerDnsAliasArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the mssql server. Changing this forces a new MSSQL Server DNS Alias to be created.
        /// </summary>
        [Input("mssqlServerId", required: true)]
        public Input<string> MssqlServerId { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this MSSQL Server DNS Alias. Changing this forces a new MSSQL Server DNS Alias to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ServerDnsAliasArgs()
        {
        }
    }

    public sealed class ServerDnsAliasState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The fully qualified DNS record for alias.
        /// </summary>
        [Input("dnsRecord")]
        public Input<string>? DnsRecord { get; set; }

        /// <summary>
        /// The ID of the mssql server. Changing this forces a new MSSQL Server DNS Alias to be created.
        /// </summary>
        [Input("mssqlServerId")]
        public Input<string>? MssqlServerId { get; set; }

        /// <summary>
        /// The name which should be used for this MSSQL Server DNS Alias. Changing this forces a new MSSQL Server DNS Alias to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ServerDnsAliasState()
        {
        }
    }
}
