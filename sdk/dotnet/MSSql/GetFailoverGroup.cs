// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    public static class GetFailoverGroup
    {
        /// <summary>
        /// Use this data source to access information about an existing Microsoft Azure SQL Failover Group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.MSSql.GetFailoverGroup.Invoke(new()
        ///     {
        ///         Name = "example",
        ///         ServerId = "example-sql-server",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["mssqlFailoverGroupId"] = example.Apply(getFailoverGroupResult =&gt; getFailoverGroupResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Sql` - 2023-08-01-preview
        /// </summary>
        public static Task<GetFailoverGroupResult> InvokeAsync(GetFailoverGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFailoverGroupResult>("azure:mssql/getFailoverGroup:getFailoverGroup", args ?? new GetFailoverGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Microsoft Azure SQL Failover Group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.MSSql.GetFailoverGroup.Invoke(new()
        ///     {
        ///         Name = "example",
        ///         ServerId = "example-sql-server",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["mssqlFailoverGroupId"] = example.Apply(getFailoverGroupResult =&gt; getFailoverGroupResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Sql` - 2023-08-01-preview
        /// </summary>
        public static Output<GetFailoverGroupResult> Invoke(GetFailoverGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFailoverGroupResult>("azure:mssql/getFailoverGroup:getFailoverGroup", args ?? new GetFailoverGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing Microsoft Azure SQL Failover Group.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.MSSql.GetFailoverGroup.Invoke(new()
        ///     {
        ///         Name = "example",
        ///         ServerId = "example-sql-server",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["mssqlFailoverGroupId"] = example.Apply(getFailoverGroupResult =&gt; getFailoverGroupResult.Id),
        ///     };
        /// });
        /// ```
        /// 
        /// ## API Providers
        /// 
        /// &lt;!-- This section is generated, changes will be overwritten --&gt;
        /// This data source uses the following Azure API Providers:
        /// 
        /// * `Microsoft.Sql` - 2023-08-01-preview
        /// </summary>
        public static Output<GetFailoverGroupResult> Invoke(GetFailoverGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFailoverGroupResult>("azure:mssql/getFailoverGroup:getFailoverGroup", args ?? new GetFailoverGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFailoverGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Failover Group.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the primary SQL Server where the Failover Group exists.
        /// </summary>
        [Input("serverId", required: true)]
        public string ServerId { get; set; } = null!;

        public GetFailoverGroupArgs()
        {
        }
        public static new GetFailoverGroupArgs Empty => new GetFailoverGroupArgs();
    }

    public sealed class GetFailoverGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Failover Group.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the primary SQL Server where the Failover Group exists.
        /// </summary>
        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        public GetFailoverGroupInvokeArgs()
        {
        }
        public static new GetFailoverGroupInvokeArgs Empty => new GetFailoverGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetFailoverGroupResult
    {
        /// <summary>
        /// A set of database names in the Failover Group.
        /// </summary>
        public readonly ImmutableArray<string> Databases;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// A `PartnerServer` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFailoverGroupPartnerServerResult> PartnerServers;
        /// <summary>
        /// A `ReadWriteEndpointFailoverPolicy` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFailoverGroupReadWriteEndpointFailoverPolicyResult> ReadWriteEndpointFailoverPolicies;
        /// <summary>
        /// Whether failover is enabled for the readonly endpoint.
        /// </summary>
        public readonly bool ReadonlyEndpointFailoverPolicyEnabled;
        public readonly string ServerId;
        /// <summary>
        /// A mapping of tags which are assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetFailoverGroupResult(
            ImmutableArray<string> databases,

            string id,

            string name,

            ImmutableArray<Outputs.GetFailoverGroupPartnerServerResult> partnerServers,

            ImmutableArray<Outputs.GetFailoverGroupReadWriteEndpointFailoverPolicyResult> readWriteEndpointFailoverPolicies,

            bool readonlyEndpointFailoverPolicyEnabled,

            string serverId,

            ImmutableDictionary<string, string> tags)
        {
            Databases = databases;
            Id = id;
            Name = name;
            PartnerServers = partnerServers;
            ReadWriteEndpointFailoverPolicies = readWriteEndpointFailoverPolicies;
            ReadonlyEndpointFailoverPolicyEnabled = readonlyEndpointFailoverPolicyEnabled;
            ServerId = serverId;
            Tags = tags;
        }
    }
}
