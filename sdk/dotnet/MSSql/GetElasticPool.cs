// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    public static class GetElasticPool
    {
        /// <summary>
        /// Use this data source to access information about an existing SQL elastic pool.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.MSSql.GetElasticPool.Invoke(new()
        ///     {
        ///         Name = "mssqlelasticpoolname",
        ///         ResourceGroupName = "example-resources",
        ///         ServerName = "example-sql-server",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["elasticpoolId"] = example.Apply(getElasticPoolResult =&gt; getElasticPoolResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetElasticPoolResult> InvokeAsync(GetElasticPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetElasticPoolResult>("azure:mssql/getElasticPool:getElasticPool", args ?? new GetElasticPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to access information about an existing SQL elastic pool.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Azure = Pulumi.Azure;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Azure.MSSql.GetElasticPool.Invoke(new()
        ///     {
        ///         Name = "mssqlelasticpoolname",
        ///         ResourceGroupName = "example-resources",
        ///         ServerName = "example-sql-server",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["elasticpoolId"] = example.Apply(getElasticPoolResult =&gt; getElasticPoolResult.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetElasticPoolResult> Invoke(GetElasticPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetElasticPoolResult>("azure:mssql/getElasticPool:getElasticPool", args ?? new GetElasticPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetElasticPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the elastic pool.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group which contains the elastic pool.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public string ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the SQL Server which contains the elastic pool.
        /// </summary>
        [Input("serverName", required: true)]
        public string ServerName { get; set; } = null!;

        public GetElasticPoolArgs()
        {
        }
        public static new GetElasticPoolArgs Empty => new GetElasticPoolArgs();
    }

    public sealed class GetElasticPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the elastic pool.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the resource group which contains the elastic pool.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name of the SQL Server which contains the elastic pool.
        /// </summary>
        [Input("serverName", required: true)]
        public Input<string> ServerName { get; set; } = null!;

        public GetElasticPoolInvokeArgs()
        {
        }
        public static new GetElasticPoolInvokeArgs Empty => new GetElasticPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetElasticPoolResult
    {
        /// <summary>
        /// The type of enclave being used by the elastic pool.
        /// </summary>
        public readonly string EnclaveType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The license type to apply for this elastic pool.
        /// </summary>
        public readonly string LicenseType;
        /// <summary>
        /// Specifies the supported Azure location where the resource exists.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// The max data size of the elastic pool in bytes.
        /// </summary>
        public readonly int MaxSizeBytes;
        /// <summary>
        /// The max data size of the elastic pool in gigabytes.
        /// </summary>
        public readonly double MaxSizeGb;
        /// <summary>
        /// Specifies the SKU Name for this Elasticpool.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The maximum capacity any one database can consume.
        /// </summary>
        public readonly int PerDbMaxCapacity;
        /// <summary>
        /// The minimum capacity all databases are guaranteed.
        /// </summary>
        public readonly int PerDbMinCapacity;
        public readonly string ResourceGroupName;
        public readonly string ServerName;
        /// <summary>
        /// A `sku` block as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetElasticPoolSkusResult> Skus;
        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Whether or not this elastic pool is zone redundant.
        /// </summary>
        public readonly bool ZoneRedundant;

        [OutputConstructor]
        private GetElasticPoolResult(
            string enclaveType,

            string id,

            string licenseType,

            string location,

            int maxSizeBytes,

            double maxSizeGb,

            string name,

            int perDbMaxCapacity,

            int perDbMinCapacity,

            string resourceGroupName,

            string serverName,

            ImmutableArray<Outputs.GetElasticPoolSkusResult> skus,

            ImmutableDictionary<string, string> tags,

            bool zoneRedundant)
        {
            EnclaveType = enclaveType;
            Id = id;
            LicenseType = licenseType;
            Location = location;
            MaxSizeBytes = maxSizeBytes;
            MaxSizeGb = maxSizeGb;
            Name = name;
            PerDbMaxCapacity = perDbMaxCapacity;
            PerDbMinCapacity = perDbMinCapacity;
            ResourceGroupName = resourceGroupName;
            ServerName = serverName;
            Skus = skus;
            Tags = tags;
            ZoneRedundant = zoneRedundant;
        }
    }
}
