// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages an Azure SQL Managed Instance Failover Group.
    /// 
    /// ## Example Usage
    /// 
    /// &gt; **Note:** For a more complete example, see the `./examples/sql-azure/managed_instance_failover_group` directory within the GitHub Repository.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var name = "mymssqlmitest";
    /// 
    ///     var primaryName = $"{name}-primary";
    /// 
    ///     var primaryLocation = "West Europe";
    /// 
    ///     var failoverName = $"{name}-failover";
    /// 
    ///     var failoverLocation = "North Europe";
    /// 
    ///     //# Primary SQL Managed Instance
    ///     var primary = new Azure.Core.ResourceGroup("primary", new()
    ///     {
    ///         Name = primaryName,
    ///         Location = primaryLocation,
    ///     });
    /// 
    ///     var exampleZone = new Azure.PrivateDns.Zone("example", new()
    ///     {
    ///         Name = $"{name}.private",
    ///         ResourceGroupName = primary.Name,
    ///     });
    /// 
    ///     var primaryVirtualNetwork = new Azure.Network.VirtualNetwork("primary", new()
    ///     {
    ///         Name = primaryName,
    ///         Location = primary.Location,
    ///         ResourceGroupName = primary.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     var primaryZoneVirtualNetworkLink = new Azure.PrivateDns.ZoneVirtualNetworkLink("primary", new()
    ///     {
    ///         Name = "primary-link",
    ///         ResourceGroupName = primary.Name,
    ///         PrivateDnsZoneName = exampleZone.Name,
    ///         VirtualNetworkId = primaryVirtualNetwork.Id,
    ///     });
    /// 
    ///     var primarySubnet = new Azure.Network.Subnet("primary", new()
    ///     {
    ///         Name = primaryName,
    ///         ResourceGroupName = primary.Name,
    ///         VirtualNetworkName = primaryVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.1.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "delegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                         "Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action",
    ///                         "Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action",
    ///                     },
    ///                     Name = "Microsoft.Sql/managedInstances",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var primaryNetworkSecurityGroup = new Azure.Network.NetworkSecurityGroup("primary", new()
    ///     {
    ///         Name = primaryName,
    ///         Location = primary.Location,
    ///         ResourceGroupName = primary.Name,
    ///     });
    /// 
    ///     var primarySubnetNetworkSecurityGroupAssociation = new Azure.Network.SubnetNetworkSecurityGroupAssociation("primary", new()
    ///     {
    ///         SubnetId = primarySubnet.Id,
    ///         NetworkSecurityGroupId = primaryNetworkSecurityGroup.Id,
    ///     });
    /// 
    ///     var primaryRouteTable = new Azure.Network.RouteTable("primary", new()
    ///     {
    ///         Name = primaryName,
    ///         Location = primary.Location,
    ///         ResourceGroupName = primary.Name,
    ///     });
    /// 
    ///     var primarySubnetRouteTableAssociation = new Azure.Network.SubnetRouteTableAssociation("primary", new()
    ///     {
    ///         SubnetId = primarySubnet.Id,
    ///         RouteTableId = primaryRouteTable.Id,
    ///     });
    /// 
    ///     var primaryManagedInstance = new Azure.MSSql.ManagedInstance("primary", new()
    ///     {
    ///         Name = primaryName,
    ///         ResourceGroupName = primary.Name,
    ///         Location = primary.Location,
    ///         AdministratorLogin = "mradministrator",
    ///         AdministratorLoginPassword = "thisIsDog11",
    ///         LicenseType = "BasePrice",
    ///         SubnetId = primarySubnet.Id,
    ///         SkuName = "GP_Gen5",
    ///         Vcores = 4,
    ///         StorageSizeInGb = 32,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             primarySubnetNetworkSecurityGroupAssociation,
    ///             primarySubnetRouteTableAssociation,
    ///         },
    ///     });
    /// 
    ///     //# Secondary (Fail-over) SQL Managed Instance
    ///     var failover = new Azure.Core.ResourceGroup("failover", new()
    ///     {
    ///         Name = failoverName,
    ///         Location = failoverLocation,
    ///     });
    /// 
    ///     var failoverVirtualNetwork = new Azure.Network.VirtualNetwork("failover", new()
    ///     {
    ///         Name = failoverName,
    ///         Location = failover.Location,
    ///         ResourceGroupName = failover.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.1.0.0/16",
    ///         },
    ///     });
    /// 
    ///     var failoverZoneVirtualNetworkLink = new Azure.PrivateDns.ZoneVirtualNetworkLink("failover", new()
    ///     {
    ///         Name = "failover-link",
    ///         ResourceGroupName = exampleZone.ResourceGroupName,
    ///         PrivateDnsZoneName = exampleZone.Name,
    ///         VirtualNetworkId = failoverVirtualNetwork.Id,
    ///     });
    /// 
    ///     var failoverSubnet = new Azure.Network.Subnet("failover", new()
    ///     {
    ///         Name = "ManagedInstance",
    ///         ResourceGroupName = failover.Name,
    ///         VirtualNetworkName = failoverVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.1.1.0/24",
    ///         },
    ///         Delegations = new[]
    ///         {
    ///             new Azure.Network.Inputs.SubnetDelegationArgs
    ///             {
    ///                 Name = "delegation",
    ///                 ServiceDelegation = new Azure.Network.Inputs.SubnetDelegationServiceDelegationArgs
    ///                 {
    ///                     Actions = new[]
    ///                     {
    ///                         "Microsoft.Network/virtualNetworks/subnets/join/action",
    ///                         "Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action",
    ///                         "Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action",
    ///                     },
    ///                     Name = "Microsoft.Sql/managedInstances",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var failoverNetworkSecurityGroup = new Azure.Network.NetworkSecurityGroup("failover", new()
    ///     {
    ///         Name = failoverName,
    ///         Location = failover.Location,
    ///         ResourceGroupName = failover.Name,
    ///     });
    /// 
    ///     var failoverSubnetNetworkSecurityGroupAssociation = new Azure.Network.SubnetNetworkSecurityGroupAssociation("failover", new()
    ///     {
    ///         SubnetId = failoverSubnet.Id,
    ///         NetworkSecurityGroupId = failoverNetworkSecurityGroup.Id,
    ///     });
    /// 
    ///     var failoverRouteTable = new Azure.Network.RouteTable("failover", new()
    ///     {
    ///         Name = failoverName,
    ///         Location = failover.Location,
    ///         ResourceGroupName = failover.Name,
    ///     });
    /// 
    ///     var failoverSubnetRouteTableAssociation = new Azure.Network.SubnetRouteTableAssociation("failover", new()
    ///     {
    ///         SubnetId = failoverSubnet.Id,
    ///         RouteTableId = failoverRouteTable.Id,
    ///     });
    /// 
    ///     var failoverManagedInstance = new Azure.MSSql.ManagedInstance("failover", new()
    ///     {
    ///         Name = failoverName,
    ///         ResourceGroupName = failover.Name,
    ///         Location = failover.Location,
    ///         AdministratorLogin = "mradministrator",
    ///         AdministratorLoginPassword = "thisIsDog11",
    ///         LicenseType = "BasePrice",
    ///         SubnetId = failoverSubnet.Id,
    ///         SkuName = "GP_Gen5",
    ///         Vcores = 4,
    ///         StorageSizeInGb = 32,
    ///         DnsZonePartnerId = primaryManagedInstance.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             failoverSubnetNetworkSecurityGroupAssociation,
    ///             failoverSubnetRouteTableAssociation,
    ///         },
    ///     });
    /// 
    ///     var example = new Azure.MSSql.ManagedInstanceFailoverGroup("example", new()
    ///     {
    ///         Name = "example-failover-group",
    ///         Location = primaryManagedInstance.Location,
    ///         ManagedInstanceId = primaryManagedInstance.Id,
    ///         PartnerManagedInstanceId = failoverManagedInstance.Id,
    ///         SecondaryType = "Geo",
    ///         ReadWriteEndpointFailoverPolicy = new Azure.MSSql.Inputs.ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs
    ///         {
    ///             Mode = "Automatic",
    ///             GraceMinutes = 60,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             primaryZoneVirtualNetworkLink,
    ///             failoverZoneVirtualNetworkLink,
    ///         },
    ///     });
    /// 
    ///     var primaryToFailover = new Azure.Network.VirtualNetworkPeering("primary_to_failover", new()
    ///     {
    ///         Name = "primary-to-failover",
    ///         RemoteVirtualNetworkId = failoverVirtualNetwork.Id,
    ///         ResourceGroupName = primary.Name,
    ///         VirtualNetworkName = primaryVirtualNetwork.Name,
    ///     });
    /// 
    ///     var @default = new Azure.Network.Subnet("default", new()
    ///     {
    ///         Name = "default",
    ///         ResourceGroupName = failover.Name,
    ///         VirtualNetworkName = failoverVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.1.0.0/24",
    ///         },
    ///     });
    /// 
    ///     var failoverToPrimary = new Azure.Network.VirtualNetworkPeering("failover_to_primary", new()
    ///     {
    ///         Name = "failover-to-primary",
    ///         RemoteVirtualNetworkId = primaryVirtualNetwork.Id,
    ///         ResourceGroupName = failover.Name,
    ///         VirtualNetworkName = failoverVirtualNetwork.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &gt; **Note:** There are many prerequisites that must be in place before creating the failover group. To see them all, refer to [Configure a failover group for Azure SQL Managed Instance](https://learn.microsoft.com/en-us/azure/azure-sql/managed-instance/failover-group-configure-sql-mi).
    /// 
    /// ## API Providers
    /// 
    /// &lt;!-- This section is generated, changes will be overwritten --&gt;
    /// This resource uses the following Azure API Providers:
    /// 
    /// * `Microsoft.Sql` - 2023-08-01-preview
    /// 
    /// ## Import
    /// 
    /// SQL Instance Failover Groups can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import azure:mssql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Sql/locations/Location/instanceFailoverGroups/failoverGroup1
    /// ```
    /// </summary>
    [AzureResourceType("azure:mssql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup")]
    public partial class ManagedInstanceFailoverGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Azure Region where the Managed Instance Failover Group should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The ID of the Azure SQL Managed Instance which will be replicated using a Managed Instance Failover Group. Changing this forces a new resource to be created.
        /// </summary>
        [Output("managedInstanceId")]
        public Output<string> ManagedInstanceId { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Managed Instance Failover Group. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Azure SQL Managed Instance which will be replicated to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("partnerManagedInstanceId")]
        public Output<string> PartnerManagedInstanceId { get; private set; } = null!;

        /// <summary>
        /// A `partner_region` block as defined below.
        /// </summary>
        [Output("partnerRegions")]
        public Output<ImmutableArray<Outputs.ManagedInstanceFailoverGroupPartnerRegion>> PartnerRegions { get; private set; } = null!;

        /// <summary>
        /// A `read_write_endpoint_failover_policy` block as defined below.
        /// </summary>
        [Output("readWriteEndpointFailoverPolicy")]
        public Output<Outputs.ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy> ReadWriteEndpointFailoverPolicy { get; private set; } = null!;

        /// <summary>
        /// Failover policy for the read-only endpoint. Defaults to `true`.
        /// </summary>
        [Output("readonlyEndpointFailoverPolicyEnabled")]
        public Output<bool?> ReadonlyEndpointFailoverPolicyEnabled { get; private set; } = null!;

        /// <summary>
        /// The partner replication role of the Managed Instance Failover Group.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// The type of the secondary Managed Instance. Possible values are `Geo`, `Standby`. Defaults to `Geo`.
        /// </summary>
        [Output("secondaryType")]
        public Output<string?> SecondaryType { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedInstanceFailoverGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedInstanceFailoverGroup(string name, ManagedInstanceFailoverGroupArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup", name, args ?? new ManagedInstanceFailoverGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedInstanceFailoverGroup(string name, Input<string> id, ManagedInstanceFailoverGroupState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "azure:sql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedInstanceFailoverGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedInstanceFailoverGroup Get(string name, Input<string> id, ManagedInstanceFailoverGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedInstanceFailoverGroup(name, id, state, options);
        }
    }

    public sealed class ManagedInstanceFailoverGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure Region where the Managed Instance Failover Group should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the Azure SQL Managed Instance which will be replicated using a Managed Instance Failover Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedInstanceId", required: true)]
        public Input<string> ManagedInstanceId { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Managed Instance Failover Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Azure SQL Managed Instance which will be replicated to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("partnerManagedInstanceId", required: true)]
        public Input<string> PartnerManagedInstanceId { get; set; } = null!;

        /// <summary>
        /// A `read_write_endpoint_failover_policy` block as defined below.
        /// </summary>
        [Input("readWriteEndpointFailoverPolicy", required: true)]
        public Input<Inputs.ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs> ReadWriteEndpointFailoverPolicy { get; set; } = null!;

        /// <summary>
        /// Failover policy for the read-only endpoint. Defaults to `true`.
        /// </summary>
        [Input("readonlyEndpointFailoverPolicyEnabled")]
        public Input<bool>? ReadonlyEndpointFailoverPolicyEnabled { get; set; }

        /// <summary>
        /// The type of the secondary Managed Instance. Possible values are `Geo`, `Standby`. Defaults to `Geo`.
        /// </summary>
        [Input("secondaryType")]
        public Input<string>? SecondaryType { get; set; }

        public ManagedInstanceFailoverGroupArgs()
        {
        }
        public static new ManagedInstanceFailoverGroupArgs Empty => new ManagedInstanceFailoverGroupArgs();
    }

    public sealed class ManagedInstanceFailoverGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure Region where the Managed Instance Failover Group should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the Azure SQL Managed Instance which will be replicated using a Managed Instance Failover Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedInstanceId")]
        public Input<string>? ManagedInstanceId { get; set; }

        /// <summary>
        /// The name which should be used for this Managed Instance Failover Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Azure SQL Managed Instance which will be replicated to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("partnerManagedInstanceId")]
        public Input<string>? PartnerManagedInstanceId { get; set; }

        [Input("partnerRegions")]
        private InputList<Inputs.ManagedInstanceFailoverGroupPartnerRegionGetArgs>? _partnerRegions;

        /// <summary>
        /// A `partner_region` block as defined below.
        /// </summary>
        public InputList<Inputs.ManagedInstanceFailoverGroupPartnerRegionGetArgs> PartnerRegions
        {
            get => _partnerRegions ?? (_partnerRegions = new InputList<Inputs.ManagedInstanceFailoverGroupPartnerRegionGetArgs>());
            set => _partnerRegions = value;
        }

        /// <summary>
        /// A `read_write_endpoint_failover_policy` block as defined below.
        /// </summary>
        [Input("readWriteEndpointFailoverPolicy")]
        public Input<Inputs.ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyGetArgs>? ReadWriteEndpointFailoverPolicy { get; set; }

        /// <summary>
        /// Failover policy for the read-only endpoint. Defaults to `true`.
        /// </summary>
        [Input("readonlyEndpointFailoverPolicyEnabled")]
        public Input<bool>? ReadonlyEndpointFailoverPolicyEnabled { get; set; }

        /// <summary>
        /// The partner replication role of the Managed Instance Failover Group.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// The type of the secondary Managed Instance. Possible values are `Geo`, `Standby`. Defaults to `Geo`.
        /// </summary>
        [Input("secondaryType")]
        public Input<string>? SecondaryType { get; set; }

        public ManagedInstanceFailoverGroupState()
        {
        }
        public static new ManagedInstanceFailoverGroupState Empty => new ManagedInstanceFailoverGroupState();
    }
}
