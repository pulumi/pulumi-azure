// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages an Azure SQL Managed Instance Failover Group.
    /// 
    /// ## Example Usage
    /// 
    /// &gt; **Note:** For a more complete example, see the `./examples/sql-azure/managed_instance_failover_group` directory within the GitHub Repository.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West Europe",
    ///     });
    /// 
    ///     var exampleVirtualNetwork = new Azure.Network.VirtualNetwork("exampleVirtualNetwork", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         AddressSpaces = new[]
    ///         {
    ///             "10.0.0.0/16",
    ///         },
    ///     });
    /// 
    ///     var exampleSubnet = new Azure.Network.Subnet("exampleSubnet", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         VirtualNetworkName = exampleVirtualNetwork.Name,
    ///         AddressPrefixes = new[]
    ///         {
    ///             "10.0.2.0/24",
    ///         },
    ///     });
    /// 
    ///     var exampleNetworkSecurityGroup = new Azure.Network.NetworkSecurityGroup("exampleNetworkSecurityGroup", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleSubnetNetworkSecurityGroupAssociation = new Azure.Network.SubnetNetworkSecurityGroupAssociation("exampleSubnetNetworkSecurityGroupAssociation", new()
    ///     {
    ///         SubnetId = exampleSubnet.Id,
    ///         NetworkSecurityGroupId = exampleNetworkSecurityGroup.Id,
    ///     });
    /// 
    ///     var exampleRouteTable = new Azure.Network.RouteTable("exampleRouteTable", new()
    ///     {
    ///         Location = exampleResourceGroup.Location,
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///     });
    /// 
    ///     var exampleSubnetRouteTableAssociation = new Azure.Network.SubnetRouteTableAssociation("exampleSubnetRouteTableAssociation", new()
    ///     {
    ///         SubnetId = exampleSubnet.Id,
    ///         RouteTableId = exampleRouteTable.Id,
    ///     });
    /// 
    ///     var primary = new Azure.MSSql.ManagedInstance("primary", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AdministratorLogin = "mradministrator",
    ///         AdministratorLoginPassword = "thisIsDog11",
    ///         LicenseType = "BasePrice",
    ///         SubnetId = exampleSubnet.Id,
    ///         SkuName = "GP_Gen5",
    ///         Vcores = 4,
    ///         StorageSizeInGb = 32,
    ///         Tags = 
    ///         {
    ///             { "environment", "prod" },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleSubnetNetworkSecurityGroupAssociation,
    ///             exampleSubnetRouteTableAssociation,
    ///         },
    ///     });
    /// 
    ///     var secondary = new Azure.MSSql.ManagedInstance("secondary", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         AdministratorLogin = "mradministrator",
    ///         AdministratorLoginPassword = "thisIsDog11",
    ///         LicenseType = "BasePrice",
    ///         SubnetId = exampleSubnet.Id,
    ///         SkuName = "GP_Gen5",
    ///         Vcores = 4,
    ///         StorageSizeInGb = 32,
    ///         Tags = 
    ///         {
    ///             { "environment", "prod" },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleSubnetNetworkSecurityGroupAssociation,
    ///             exampleSubnetRouteTableAssociation,
    ///         },
    ///     });
    /// 
    ///     var exampleManagedInstanceFailoverGroup = new Azure.MSSql.ManagedInstanceFailoverGroup("exampleManagedInstanceFailoverGroup", new()
    ///     {
    ///         Location = primary.Location,
    ///         ManagedInstanceId = primary.Id,
    ///         PartnerManagedInstanceId = secondary.Id,
    ///         ReadWriteEndpointFailoverPolicy = new Azure.MSSql.Inputs.ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs
    ///         {
    ///             Mode = "Automatic",
    ///             GraceMinutes = 60,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SQL Instance Failover Groups can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mssql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Sql/locations/Location/instanceFailoverGroups/failoverGroup1
    /// ```
    /// </summary>
    [AzureResourceType("azure:mssql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup")]
    public partial class ManagedInstanceFailoverGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Azure Region where the Managed Instance Failover Group should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// The ID of the Azure SQL Managed Instance which will be replicated using a Managed Instance Failover Group. Changing this forces a new resource to be created.
        /// </summary>
        [Output("managedInstanceId")]
        public Output<string> ManagedInstanceId { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this Managed Instance Failover Group. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the Azure SQL Managed Instance which will be replicated to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("partnerManagedInstanceId")]
        public Output<string> PartnerManagedInstanceId { get; private set; } = null!;

        /// <summary>
        /// A `partner_region` block as defined below.
        /// </summary>
        [Output("partnerRegions")]
        public Output<ImmutableArray<Outputs.ManagedInstanceFailoverGroupPartnerRegion>> PartnerRegions { get; private set; } = null!;

        /// <summary>
        /// A `read_write_endpoint_failover_policy` block as defined below.
        /// </summary>
        [Output("readWriteEndpointFailoverPolicy")]
        public Output<Outputs.ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy> ReadWriteEndpointFailoverPolicy { get; private set; } = null!;

        /// <summary>
        /// Failover policy for the read-only endpoint. Defaults to `true`.
        /// </summary>
        [Output("readonlyEndpointFailoverPolicyEnabled")]
        public Output<bool?> ReadonlyEndpointFailoverPolicyEnabled { get; private set; } = null!;

        /// <summary>
        /// The partner replication role of the Managed Instance Failover Group.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedInstanceFailoverGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedInstanceFailoverGroup(string name, ManagedInstanceFailoverGroupArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup", name, args ?? new ManagedInstanceFailoverGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedInstanceFailoverGroup(string name, Input<string> id, ManagedInstanceFailoverGroupState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedInstanceFailoverGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedInstanceFailoverGroup Get(string name, Input<string> id, ManagedInstanceFailoverGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedInstanceFailoverGroup(name, id, state, options);
        }
    }

    public sealed class ManagedInstanceFailoverGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure Region where the Managed Instance Failover Group should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the Azure SQL Managed Instance which will be replicated using a Managed Instance Failover Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedInstanceId", required: true)]
        public Input<string> ManagedInstanceId { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this Managed Instance Failover Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Azure SQL Managed Instance which will be replicated to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("partnerManagedInstanceId", required: true)]
        public Input<string> PartnerManagedInstanceId { get; set; } = null!;

        /// <summary>
        /// A `read_write_endpoint_failover_policy` block as defined below.
        /// </summary>
        [Input("readWriteEndpointFailoverPolicy", required: true)]
        public Input<Inputs.ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs> ReadWriteEndpointFailoverPolicy { get; set; } = null!;

        /// <summary>
        /// Failover policy for the read-only endpoint. Defaults to `true`.
        /// </summary>
        [Input("readonlyEndpointFailoverPolicyEnabled")]
        public Input<bool>? ReadonlyEndpointFailoverPolicyEnabled { get; set; }

        public ManagedInstanceFailoverGroupArgs()
        {
        }
        public static new ManagedInstanceFailoverGroupArgs Empty => new ManagedInstanceFailoverGroupArgs();
    }

    public sealed class ManagedInstanceFailoverGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure Region where the Managed Instance Failover Group should exist. Changing this forces a new resource to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The ID of the Azure SQL Managed Instance which will be replicated using a Managed Instance Failover Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("managedInstanceId")]
        public Input<string>? ManagedInstanceId { get; set; }

        /// <summary>
        /// The name which should be used for this Managed Instance Failover Group. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the Azure SQL Managed Instance which will be replicated to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("partnerManagedInstanceId")]
        public Input<string>? PartnerManagedInstanceId { get; set; }

        [Input("partnerRegions")]
        private InputList<Inputs.ManagedInstanceFailoverGroupPartnerRegionGetArgs>? _partnerRegions;

        /// <summary>
        /// A `partner_region` block as defined below.
        /// </summary>
        public InputList<Inputs.ManagedInstanceFailoverGroupPartnerRegionGetArgs> PartnerRegions
        {
            get => _partnerRegions ?? (_partnerRegions = new InputList<Inputs.ManagedInstanceFailoverGroupPartnerRegionGetArgs>());
            set => _partnerRegions = value;
        }

        /// <summary>
        /// A `read_write_endpoint_failover_policy` block as defined below.
        /// </summary>
        [Input("readWriteEndpointFailoverPolicy")]
        public Input<Inputs.ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyGetArgs>? ReadWriteEndpointFailoverPolicy { get; set; }

        /// <summary>
        /// Failover policy for the read-only endpoint. Defaults to `true`.
        /// </summary>
        [Input("readonlyEndpointFailoverPolicyEnabled")]
        public Input<bool>? ReadonlyEndpointFailoverPolicyEnabled { get; set; }

        /// <summary>
        /// The partner replication role of the Managed Instance Failover Group.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        public ManagedInstanceFailoverGroupState()
        {
        }
        public static new ManagedInstanceFailoverGroupState Empty => new ManagedInstanceFailoverGroupState();
    }
}
