// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.MSSql
{
    /// <summary>
    /// Manages a MS SQL Server Microsoft Support Auditing Policy.
    /// 
    /// ## Import
    /// 
    /// MS SQL Server Microsoft Support Auditing Policies can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:mssql/serverMicrosoftSupportAuditingPolicy:ServerMicrosoftSupportAuditingPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlServer1/devOpsAuditingSettings/default
    /// ```
    /// </summary>
    [AzureResourceType("azure:mssql/serverMicrosoftSupportAuditingPolicy:ServerMicrosoftSupportAuditingPolicy")]
    public partial class ServerMicrosoftSupportAuditingPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Microsoft support auditing logs.
        /// </summary>
        [Output("blobStorageEndpoint")]
        public Output<string?> BlobStorageEndpoint { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
        /// 
        /// -&gt;**NOTE:**  If `enabled` is `true`, `blob_storage_endpoint` or `log_monitoring_enabled` are required.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
        /// </summary>
        [Output("logMonitoringEnabled")]
        public Output<bool?> LogMonitoringEnabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
        /// </summary>
        [Output("serverId")]
        public Output<string> ServerId { get; private set; } = null!;

        /// <summary>
        /// The access key to use for the auditing storage account.
        /// </summary>
        [Output("storageAccountAccessKey")]
        public Output<string?> StorageAccountAccessKey { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subscription containing the Storage Account.
        /// </summary>
        [Output("storageAccountSubscriptionId")]
        public Output<string?> StorageAccountSubscriptionId { get; private set; } = null!;


        /// <summary>
        /// Create a ServerMicrosoftSupportAuditingPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerMicrosoftSupportAuditingPolicy(string name, ServerMicrosoftSupportAuditingPolicyArgs args, CustomResourceOptions? options = null)
            : base("azure:mssql/serverMicrosoftSupportAuditingPolicy:ServerMicrosoftSupportAuditingPolicy", name, args ?? new ServerMicrosoftSupportAuditingPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerMicrosoftSupportAuditingPolicy(string name, Input<string> id, ServerMicrosoftSupportAuditingPolicyState? state = null, CustomResourceOptions? options = null)
            : base("azure:mssql/serverMicrosoftSupportAuditingPolicy:ServerMicrosoftSupportAuditingPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "storageAccountAccessKey",
                    "storageAccountSubscriptionId",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerMicrosoftSupportAuditingPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerMicrosoftSupportAuditingPolicy Get(string name, Input<string> id, ServerMicrosoftSupportAuditingPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerMicrosoftSupportAuditingPolicy(name, id, state, options);
        }
    }

    public sealed class ServerMicrosoftSupportAuditingPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Microsoft support auditing logs.
        /// </summary>
        [Input("blobStorageEndpoint")]
        public Input<string>? BlobStorageEndpoint { get; set; }

        /// <summary>
        /// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
        /// 
        /// -&gt;**NOTE:**  If `enabled` is `true`, `blob_storage_endpoint` or `log_monitoring_enabled` are required.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
        /// </summary>
        [Input("logMonitoringEnabled")]
        public Input<bool>? LogMonitoringEnabled { get; set; }

        /// <summary>
        /// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        [Input("storageAccountAccessKey")]
        private Input<string>? _storageAccountAccessKey;

        /// <summary>
        /// The access key to use for the auditing storage account.
        /// </summary>
        public Input<string>? StorageAccountAccessKey
        {
            get => _storageAccountAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("storageAccountSubscriptionId")]
        private Input<string>? _storageAccountSubscriptionId;

        /// <summary>
        /// The ID of the Subscription containing the Storage Account.
        /// </summary>
        public Input<string>? StorageAccountSubscriptionId
        {
            get => _storageAccountSubscriptionId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountSubscriptionId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ServerMicrosoftSupportAuditingPolicyArgs()
        {
        }
        public static new ServerMicrosoftSupportAuditingPolicyArgs Empty => new ServerMicrosoftSupportAuditingPolicyArgs();
    }

    public sealed class ServerMicrosoftSupportAuditingPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Microsoft support auditing logs.
        /// </summary>
        [Input("blobStorageEndpoint")]
        public Input<string>? BlobStorageEndpoint { get; set; }

        /// <summary>
        /// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
        /// 
        /// -&gt;**NOTE:**  If `enabled` is `true`, `blob_storage_endpoint` or `log_monitoring_enabled` are required.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
        /// </summary>
        [Input("logMonitoringEnabled")]
        public Input<bool>? LogMonitoringEnabled { get; set; }

        /// <summary>
        /// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
        /// </summary>
        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        [Input("storageAccountAccessKey")]
        private Input<string>? _storageAccountAccessKey;

        /// <summary>
        /// The access key to use for the auditing storage account.
        /// </summary>
        public Input<string>? StorageAccountAccessKey
        {
            get => _storageAccountAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("storageAccountSubscriptionId")]
        private Input<string>? _storageAccountSubscriptionId;

        /// <summary>
        /// The ID of the Subscription containing the Storage Account.
        /// </summary>
        public Input<string>? StorageAccountSubscriptionId
        {
            get => _storageAccountSubscriptionId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _storageAccountSubscriptionId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ServerMicrosoftSupportAuditingPolicyState()
        {
        }
        public static new ServerMicrosoftSupportAuditingPolicyState Empty => new ServerMicrosoftSupportAuditingPolicyState();
    }
}
