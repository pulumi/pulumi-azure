// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Azure.Datadog
{
    /// <summary>
    /// Manages a datadog Monitor.
    /// 
    /// ## Example Usage
    /// ### Monitor creation with linking to Datadog organization
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleResourceGroup = new Azure.Core.ResourceGroup("exampleResourceGroup", new()
    ///     {
    ///         Location = "West US 2",
    ///     });
    /// 
    ///     var exampleMonitor = new Azure.Datadog.Monitor("exampleMonitor", new()
    ///     {
    ///         ResourceGroupName = exampleResourceGroup.Name,
    ///         Location = exampleResourceGroup.Location,
    ///         DatadogOrganization = new Azure.Datadog.Inputs.MonitorDatadogOrganizationArgs
    ///         {
    ///             ApiKey = "XXXX",
    ///             ApplicationKey = "XXXX",
    ///         },
    ///         User = new Azure.Datadog.Inputs.MonitorUserArgs
    ///         {
    ///             Name = "Example",
    ///             Email = "abc@xyz.com",
    ///         },
    ///         SkuName = "Linked",
    ///         Identity = new Azure.Datadog.Inputs.MonitorIdentityArgs
    ///         {
    ///             Type = "SystemAssigned",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ## Role Assignment
    /// 
    /// To enable metrics flow, perform role assignment on the identity created above. `Monitoring reader(43d0d8ad-25c7-4714-9337-8ba259a9fe05)` role is required .
    /// 
    /// ### Role assignment on the monitor created
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Azure = Pulumi.Azure;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var primary = Azure.Core.GetSubscription.Invoke();
    /// 
    ///     var monitoringReader = Azure.Authorization.GetRoleDefinition.Invoke(new()
    ///     {
    ///         Name = "Monitoring Reader",
    ///     });
    /// 
    ///     var example = new Azure.Authorization.Assignment("example", new()
    ///     {
    ///         Scope = primary.Apply(getSubscriptionResult =&gt; getSubscriptionResult.Id),
    ///         RoleDefinitionId = monitoringReader.Apply(getRoleDefinitionResult =&gt; getRoleDefinitionResult.RoleDefinitionId),
    ///         PrincipalId = azurerm_datadog_monitor.Example.Identity[0].Principal_id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Datadog Monitors can be imported using the `resource id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import azure:datadog/monitor:Monitor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Datadog/monitors/monitor1
    /// ```
    /// </summary>
    [AzureResourceType("azure:datadog/monitor:Monitor")]
    public partial class Monitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A `datadog_organization` block as defined below.
        /// </summary>
        [Output("datadogOrganization")]
        public Output<Outputs.MonitorDatadogOrganization> DatadogOrganization { get; private set; } = null!;

        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.MonitorIdentity?> Identity { get; private set; } = null!;

        /// <summary>
        /// The Azure Region where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
        /// </summary>
        [Output("marketplaceSubscriptionStatus")]
        public Output<string> MarketplaceSubscriptionStatus { get; private set; } = null!;

        /// <summary>
        /// Is monitoring enabled? Defaults to `true`.
        /// </summary>
        [Output("monitoringEnabled")]
        public Output<bool?> MonitoringEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the user that will be associated with the Datadog Monitor. Changing this forces a new Datadog Monitor to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Resource Group where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        /// </summary>
        [Output("resourceGroupName")]
        public Output<string> ResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The name which should be used for this sku.
        /// </summary>
        [Output("skuName")]
        public Output<string> SkuName { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags which should be assigned to the Datadog Monitor.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A `user` block as defined below.
        /// </summary>
        [Output("user")]
        public Output<Outputs.MonitorUser> User { get; private set; } = null!;


        /// <summary>
        /// Create a Monitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Monitor(string name, MonitorArgs args, CustomResourceOptions? options = null)
            : base("azure:datadog/monitor:Monitor", name, args ?? new MonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Monitor(string name, Input<string> id, MonitorState? state = null, CustomResourceOptions? options = null)
            : base("azure:datadog/monitor:Monitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Monitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Monitor Get(string name, Input<string> id, MonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new Monitor(name, id, state, options);
        }
    }

    public sealed class MonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `datadog_organization` block as defined below.
        /// </summary>
        [Input("datadogOrganization", required: true)]
        public Input<Inputs.MonitorDatadogOrganizationArgs> DatadogOrganization { get; set; } = null!;

        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.MonitorIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure Region where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Is monitoring enabled? Defaults to `true`.
        /// </summary>
        [Input("monitoringEnabled")]
        public Input<bool>? MonitoringEnabled { get; set; }

        /// <summary>
        /// The name of the user that will be associated with the Datadog Monitor. Changing this forces a new Datadog Monitor to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The name which should be used for this sku.
        /// </summary>
        [Input("skuName", required: true)]
        public Input<string> SkuName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Datadog Monitor.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `user` block as defined below.
        /// </summary>
        [Input("user", required: true)]
        public Input<Inputs.MonitorUserArgs> User { get; set; } = null!;

        public MonitorArgs()
        {
        }
        public static new MonitorArgs Empty => new MonitorArgs();
    }

    public sealed class MonitorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `datadog_organization` block as defined below.
        /// </summary>
        [Input("datadogOrganization")]
        public Input<Inputs.MonitorDatadogOrganizationGetArgs>? DatadogOrganization { get; set; }

        /// <summary>
        /// A `identity` block as defined below.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.MonitorIdentityGetArgs>? Identity { get; set; }

        /// <summary>
        /// The Azure Region where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
        /// </summary>
        [Input("marketplaceSubscriptionStatus")]
        public Input<string>? MarketplaceSubscriptionStatus { get; set; }

        /// <summary>
        /// Is monitoring enabled? Defaults to `true`.
        /// </summary>
        [Input("monitoringEnabled")]
        public Input<bool>? MonitoringEnabled { get; set; }

        /// <summary>
        /// The name of the user that will be associated with the Datadog Monitor. Changing this forces a new Datadog Monitor to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Resource Group where the Datadog Monitor should exist. Changing this forces a new Datadog Monitor to be created.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        /// <summary>
        /// The name which should be used for this sku.
        /// </summary>
        [Input("skuName")]
        public Input<string>? SkuName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags which should be assigned to the Datadog Monitor.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `user` block as defined below.
        /// </summary>
        [Input("user")]
        public Input<Inputs.MonitorUserGetArgs>? User { get; set; }

        public MonitorState()
        {
        }
        public static new MonitorState Empty => new MonitorState();
    }
}
