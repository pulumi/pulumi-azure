// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mobile

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Mobile Network Attached Data Network.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mobile"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleNetworkPacketCoreControlPlane, err := mobile.LookupNetworkPacketCoreControlPlane(ctx, &mobile.LookupNetworkPacketCoreControlPlaneArgs{
//				Name:              "example-mnpccp",
//				ResourceGroupName: "example-rg",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = mobile.LookupNetworkAttachedDataNetwork(ctx, &mobile.LookupNetworkAttachedDataNetworkArgs{
//				MobileNetworkDataNetworkName:       exampleNetworkPacketCoreControlPlane.Name,
//				MobileNetworkPacketCoreDataPlaneId: exampleNetworkPacketCoreControlPlane.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNetworkAttachedDataNetwork(ctx *pulumi.Context, args *LookupNetworkAttachedDataNetworkArgs, opts ...pulumi.InvokeOption) (*LookupNetworkAttachedDataNetworkResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkAttachedDataNetworkResult
	err := ctx.Invoke("azure:mobile/getNetworkAttachedDataNetwork:getNetworkAttachedDataNetwork", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkAttachedDataNetwork.
type LookupNetworkAttachedDataNetworkArgs struct {
	// The Name of the `mobile.NetworkDataNetwork` this resource belongs to.
	MobileNetworkDataNetworkName string `pulumi:"mobileNetworkDataNetworkName"`
	// The ID of the `mobile.NetworkPacketCoreDataPlane` which the Mobile Network Attached Data Network belongs to.
	MobileNetworkPacketCoreDataPlaneId string `pulumi:"mobileNetworkPacketCoreDataPlaneId"`
}

// A collection of values returned by getNetworkAttachedDataNetwork.
type LookupNetworkAttachedDataNetworkResult struct {
	// The DNS servers to signal to UEs to use for this attached data network.
	DnsAddresses []string `pulumi:"dnsAddresses"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Azure Region where the Mobile Network Attached Data Network should exist.
	Location                           string `pulumi:"location"`
	MobileNetworkDataNetworkName       string `pulumi:"mobileNetworkDataNetworkName"`
	MobileNetworkPacketCoreDataPlaneId string `pulumi:"mobileNetworkPacketCoreDataPlaneId"`
	// A `networkAddressPortTranslation` block as defined below.
	NetworkAddressPortTranslations []GetNetworkAttachedDataNetworkNetworkAddressPortTranslation `pulumi:"networkAddressPortTranslations"`
	// A mapping of tags which should be assigned to the Mobile Network Attached Data Network.
	Tags                                   map[string]string `pulumi:"tags"`
	UserEquipmentAddressPoolPrefixes       []string          `pulumi:"userEquipmentAddressPoolPrefixes"`
	UserEquipmentStaticAddressPoolPrefixes []string          `pulumi:"userEquipmentStaticAddressPoolPrefixes"`
	// The IPv4 address for the user data plane interface.
	UserPlaneAccessIpv4Address string `pulumi:"userPlaneAccessIpv4Address"`
	// The default IPv4 gateway for the user data plane interface.
	UserPlaneAccessIpv4Gateway string `pulumi:"userPlaneAccessIpv4Gateway"`
	// The IPv4 subnet for the user data plane interface.
	UserPlaneAccessIpv4Subnet string `pulumi:"userPlaneAccessIpv4Subnet"`
	// The logical name for thie user data plane interface.
	UserPlaneAccessName string `pulumi:"userPlaneAccessName"`
}

func LookupNetworkAttachedDataNetworkOutput(ctx *pulumi.Context, args LookupNetworkAttachedDataNetworkOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkAttachedDataNetworkResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkAttachedDataNetworkResult, error) {
			args := v.(LookupNetworkAttachedDataNetworkArgs)
			r, err := LookupNetworkAttachedDataNetwork(ctx, &args, opts...)
			var s LookupNetworkAttachedDataNetworkResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetworkAttachedDataNetworkResultOutput)
}

// A collection of arguments for invoking getNetworkAttachedDataNetwork.
type LookupNetworkAttachedDataNetworkOutputArgs struct {
	// The Name of the `mobile.NetworkDataNetwork` this resource belongs to.
	MobileNetworkDataNetworkName pulumi.StringInput `pulumi:"mobileNetworkDataNetworkName"`
	// The ID of the `mobile.NetworkPacketCoreDataPlane` which the Mobile Network Attached Data Network belongs to.
	MobileNetworkPacketCoreDataPlaneId pulumi.StringInput `pulumi:"mobileNetworkPacketCoreDataPlaneId"`
}

func (LookupNetworkAttachedDataNetworkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkAttachedDataNetworkArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkAttachedDataNetwork.
type LookupNetworkAttachedDataNetworkResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkAttachedDataNetworkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkAttachedDataNetworkResult)(nil)).Elem()
}

func (o LookupNetworkAttachedDataNetworkResultOutput) ToLookupNetworkAttachedDataNetworkResultOutput() LookupNetworkAttachedDataNetworkResultOutput {
	return o
}

func (o LookupNetworkAttachedDataNetworkResultOutput) ToLookupNetworkAttachedDataNetworkResultOutputWithContext(ctx context.Context) LookupNetworkAttachedDataNetworkResultOutput {
	return o
}

// The DNS servers to signal to UEs to use for this attached data network.
func (o LookupNetworkAttachedDataNetworkResultOutput) DnsAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkAttachedDataNetworkResult) []string { return v.DnsAddresses }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNetworkAttachedDataNetworkResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkAttachedDataNetworkResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Azure Region where the Mobile Network Attached Data Network should exist.
func (o LookupNetworkAttachedDataNetworkResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkAttachedDataNetworkResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupNetworkAttachedDataNetworkResultOutput) MobileNetworkDataNetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkAttachedDataNetworkResult) string { return v.MobileNetworkDataNetworkName }).(pulumi.StringOutput)
}

func (o LookupNetworkAttachedDataNetworkResultOutput) MobileNetworkPacketCoreDataPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkAttachedDataNetworkResult) string { return v.MobileNetworkPacketCoreDataPlaneId }).(pulumi.StringOutput)
}

// A `networkAddressPortTranslation` block as defined below.
func (o LookupNetworkAttachedDataNetworkResultOutput) NetworkAddressPortTranslations() GetNetworkAttachedDataNetworkNetworkAddressPortTranslationArrayOutput {
	return o.ApplyT(func(v LookupNetworkAttachedDataNetworkResult) []GetNetworkAttachedDataNetworkNetworkAddressPortTranslation {
		return v.NetworkAddressPortTranslations
	}).(GetNetworkAttachedDataNetworkNetworkAddressPortTranslationArrayOutput)
}

// A mapping of tags which should be assigned to the Mobile Network Attached Data Network.
func (o LookupNetworkAttachedDataNetworkResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNetworkAttachedDataNetworkResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupNetworkAttachedDataNetworkResultOutput) UserEquipmentAddressPoolPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkAttachedDataNetworkResult) []string { return v.UserEquipmentAddressPoolPrefixes }).(pulumi.StringArrayOutput)
}

func (o LookupNetworkAttachedDataNetworkResultOutput) UserEquipmentStaticAddressPoolPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkAttachedDataNetworkResult) []string {
		return v.UserEquipmentStaticAddressPoolPrefixes
	}).(pulumi.StringArrayOutput)
}

// The IPv4 address for the user data plane interface.
func (o LookupNetworkAttachedDataNetworkResultOutput) UserPlaneAccessIpv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkAttachedDataNetworkResult) string { return v.UserPlaneAccessIpv4Address }).(pulumi.StringOutput)
}

// The default IPv4 gateway for the user data plane interface.
func (o LookupNetworkAttachedDataNetworkResultOutput) UserPlaneAccessIpv4Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkAttachedDataNetworkResult) string { return v.UserPlaneAccessIpv4Gateway }).(pulumi.StringOutput)
}

// The IPv4 subnet for the user data plane interface.
func (o LookupNetworkAttachedDataNetworkResultOutput) UserPlaneAccessIpv4Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkAttachedDataNetworkResult) string { return v.UserPlaneAccessIpv4Subnet }).(pulumi.StringOutput)
}

// The logical name for thie user data plane interface.
func (o LookupNetworkAttachedDataNetworkResultOutput) UserPlaneAccessName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkAttachedDataNetworkResult) string { return v.UserPlaneAccessName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkAttachedDataNetworkResultOutput{})
}
