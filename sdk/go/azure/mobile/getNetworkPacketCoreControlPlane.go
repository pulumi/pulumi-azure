// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mobile

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Mobile Network Packet Core Control Plane.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mobile"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mobile.LookupNetworkPacketCoreControlPlane(ctx, &mobile.LookupNetworkPacketCoreControlPlaneArgs{
//				Name:              "example-mnpccp",
//				ResourceGroupName: "example-rg",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNetworkPacketCoreControlPlane(ctx *pulumi.Context, args *LookupNetworkPacketCoreControlPlaneArgs, opts ...pulumi.InvokeOption) (*LookupNetworkPacketCoreControlPlaneResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkPacketCoreControlPlaneResult
	err := ctx.Invoke("azure:mobile/getNetworkPacketCoreControlPlane:getNetworkPacketCoreControlPlane", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkPacketCoreControlPlane.
type LookupNetworkPacketCoreControlPlaneArgs struct {
	// The name of the Mobile Network Packet Core Control Plane.
	Name string `pulumi:"name"`
	// The name of the Resource Group where the Mobile Network Packet Core Control Plane exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getNetworkPacketCoreControlPlane.
type LookupNetworkPacketCoreControlPlaneResult struct {
	ControlPlaneAccessIpv4Address string `pulumi:"controlPlaneAccessIpv4Address"`
	ControlPlaneAccessIpv4Gateway string `pulumi:"controlPlaneAccessIpv4Gateway"`
	ControlPlaneAccessIpv4Subnet  string `pulumi:"controlPlaneAccessIpv4Subnet"`
	ControlPlaneAccessName        string `pulumi:"controlPlaneAccessName"`
	// The core network technology generation.
	CoreNetworkTechnology string `pulumi:"coreNetworkTechnology"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// An `identity` block as defined below.
	Identities []GetNetworkPacketCoreControlPlaneIdentity `pulumi:"identities"`
	// Settings in JSON format to allow interoperability with third party components e.g. RANs and UEs.
	InteroperabilitySettingsJson string `pulumi:"interoperabilitySettingsJson"`
	// One or more `localDiagnosticsAccess` blocks as defined below. The Kubernetes ingress configuration that controls access to the packet core diagnostics through local APIs.
	LocalDiagnosticsAccesses []GetNetworkPacketCoreControlPlaneLocalDiagnosticsAccess `pulumi:"localDiagnosticsAccesses"`
	// The Azure Region where the Mobile Network Packet Core Control Plane exists.
	Location string `pulumi:"location"`
	// The logical name for this interface.
	Name string `pulumi:"name"`
	// A `platform` block as defined below.
	Platforms         []GetNetworkPacketCoreControlPlanePlatform `pulumi:"platforms"`
	ResourceGroupName string                                     `pulumi:"resourceGroupName"`
	// The list of Mobile Network Site IDs in which this packet core control plane is deployed.
	SiteIds []string `pulumi:"siteIds"`
	// The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
	Sku string `pulumi:"sku"`
	// The version of the packet core software that is deployed.
	SoftwareVersion string `pulumi:"softwareVersion"`
	// A mapping of tags assigned to the Mobile Network Packet Core Control Plane.
	Tags map[string]string `pulumi:"tags"`
	// The MTU in bytes that can be sent to the user equipment.
	UserEquipmentMtuInBytes int `pulumi:"userEquipmentMtuInBytes"`
}

func LookupNetworkPacketCoreControlPlaneOutput(ctx *pulumi.Context, args LookupNetworkPacketCoreControlPlaneOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkPacketCoreControlPlaneResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkPacketCoreControlPlaneResult, error) {
			args := v.(LookupNetworkPacketCoreControlPlaneArgs)
			r, err := LookupNetworkPacketCoreControlPlane(ctx, &args, opts...)
			var s LookupNetworkPacketCoreControlPlaneResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetworkPacketCoreControlPlaneResultOutput)
}

// A collection of arguments for invoking getNetworkPacketCoreControlPlane.
type LookupNetworkPacketCoreControlPlaneOutputArgs struct {
	// The name of the Mobile Network Packet Core Control Plane.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Mobile Network Packet Core Control Plane exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupNetworkPacketCoreControlPlaneOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkPacketCoreControlPlaneArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkPacketCoreControlPlane.
type LookupNetworkPacketCoreControlPlaneResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkPacketCoreControlPlaneResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkPacketCoreControlPlaneResult)(nil)).Elem()
}

func (o LookupNetworkPacketCoreControlPlaneResultOutput) ToLookupNetworkPacketCoreControlPlaneResultOutput() LookupNetworkPacketCoreControlPlaneResultOutput {
	return o
}

func (o LookupNetworkPacketCoreControlPlaneResultOutput) ToLookupNetworkPacketCoreControlPlaneResultOutputWithContext(ctx context.Context) LookupNetworkPacketCoreControlPlaneResultOutput {
	return o
}

func (o LookupNetworkPacketCoreControlPlaneResultOutput) ControlPlaneAccessIpv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) string { return v.ControlPlaneAccessIpv4Address }).(pulumi.StringOutput)
}

func (o LookupNetworkPacketCoreControlPlaneResultOutput) ControlPlaneAccessIpv4Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) string { return v.ControlPlaneAccessIpv4Gateway }).(pulumi.StringOutput)
}

func (o LookupNetworkPacketCoreControlPlaneResultOutput) ControlPlaneAccessIpv4Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) string { return v.ControlPlaneAccessIpv4Subnet }).(pulumi.StringOutput)
}

func (o LookupNetworkPacketCoreControlPlaneResultOutput) ControlPlaneAccessName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) string { return v.ControlPlaneAccessName }).(pulumi.StringOutput)
}

// The core network technology generation.
func (o LookupNetworkPacketCoreControlPlaneResultOutput) CoreNetworkTechnology() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) string { return v.CoreNetworkTechnology }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNetworkPacketCoreControlPlaneResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) string { return v.Id }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o LookupNetworkPacketCoreControlPlaneResultOutput) Identities() GetNetworkPacketCoreControlPlaneIdentityArrayOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) []GetNetworkPacketCoreControlPlaneIdentity {
		return v.Identities
	}).(GetNetworkPacketCoreControlPlaneIdentityArrayOutput)
}

// Settings in JSON format to allow interoperability with third party components e.g. RANs and UEs.
func (o LookupNetworkPacketCoreControlPlaneResultOutput) InteroperabilitySettingsJson() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) string { return v.InteroperabilitySettingsJson }).(pulumi.StringOutput)
}

// One or more `localDiagnosticsAccess` blocks as defined below. The Kubernetes ingress configuration that controls access to the packet core diagnostics through local APIs.
func (o LookupNetworkPacketCoreControlPlaneResultOutput) LocalDiagnosticsAccesses() GetNetworkPacketCoreControlPlaneLocalDiagnosticsAccessArrayOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) []GetNetworkPacketCoreControlPlaneLocalDiagnosticsAccess {
		return v.LocalDiagnosticsAccesses
	}).(GetNetworkPacketCoreControlPlaneLocalDiagnosticsAccessArrayOutput)
}

// The Azure Region where the Mobile Network Packet Core Control Plane exists.
func (o LookupNetworkPacketCoreControlPlaneResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) string { return v.Location }).(pulumi.StringOutput)
}

// The logical name for this interface.
func (o LookupNetworkPacketCoreControlPlaneResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) string { return v.Name }).(pulumi.StringOutput)
}

// A `platform` block as defined below.
func (o LookupNetworkPacketCoreControlPlaneResultOutput) Platforms() GetNetworkPacketCoreControlPlanePlatformArrayOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) []GetNetworkPacketCoreControlPlanePlatform {
		return v.Platforms
	}).(GetNetworkPacketCoreControlPlanePlatformArrayOutput)
}

func (o LookupNetworkPacketCoreControlPlaneResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The list of Mobile Network Site IDs in which this packet core control plane is deployed.
func (o LookupNetworkPacketCoreControlPlaneResultOutput) SiteIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) []string { return v.SiteIds }).(pulumi.StringArrayOutput)
}

// The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
func (o LookupNetworkPacketCoreControlPlaneResultOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) string { return v.Sku }).(pulumi.StringOutput)
}

// The version of the packet core software that is deployed.
func (o LookupNetworkPacketCoreControlPlaneResultOutput) SoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) string { return v.SoftwareVersion }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the Mobile Network Packet Core Control Plane.
func (o LookupNetworkPacketCoreControlPlaneResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The MTU in bytes that can be sent to the user equipment.
func (o LookupNetworkPacketCoreControlPlaneResultOutput) UserEquipmentMtuInBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkPacketCoreControlPlaneResult) int { return v.UserEquipmentMtuInBytes }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkPacketCoreControlPlaneResultOutput{})
}
