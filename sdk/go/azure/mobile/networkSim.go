// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mobile

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Mobile Network Sim.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mobile"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetwork, err := mobile.NewNetwork(ctx, "exampleNetwork", &mobile.NetworkArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				MobileCountryCode: pulumi.String("001"),
//				MobileNetworkCode: pulumi.String("01"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkSimGroup, err := mobile.NewNetworkSimGroup(ctx, "exampleNetworkSimGroup", &mobile.NetworkSimGroupArgs{
//				Location:        exampleResourceGroup.Location,
//				MobileNetworkId: exampleNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mobile.NewNetworkSlice(ctx, "exampleNetworkSlice", &mobile.NetworkSliceArgs{
//				MobileNetworkId: exampleNetwork.ID(),
//				Location:        exampleResourceGroup.Location,
//				SingleNetworkSliceSelectionAssistanceInformation: &mobile.NetworkSliceSingleNetworkSliceSelectionAssistanceInformationArgs{
//					SliceServiceType: pulumi.Int(1),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mobile.NewNetworkAttachedDataNetwork(ctx, "exampleNetworkAttachedDataNetwork", &mobile.NetworkAttachedDataNetworkArgs{
//				MobileNetworkDataNetworkName:       pulumi.Any(azurerm_mobile_network_data_network.Example.Name),
//				MobileNetworkPacketCoreDataPlaneId: pulumi.Any(azurerm_mobile_network_packet_core_data_plane.Example.Id),
//				Location:                           exampleResourceGroup.Location,
//				DnsAddresses: pulumi.StringArray{
//					pulumi.String("1.1.1.1"),
//				},
//				UserEquipmentAddressPoolPrefixes: pulumi.StringArray{
//					pulumi.String("2.4.0.0/24"),
//				},
//				UserEquipmentStaticAddressPoolPrefixes: pulumi.StringArray{
//					pulumi.String("2.4.1.0/24"),
//				},
//				UserPlaneAccessName:        pulumi.String("test"),
//				UserPlaneAccessIpv4Address: pulumi.String("10.204.141.4"),
//				UserPlaneAccessIpv4Gateway: pulumi.String("10.204.141.1"),
//				UserPlaneAccessIpv4Subnet:  pulumi.String("10.204.141.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mobile.NewNetworkSim(ctx, "exampleNetworkSim", &mobile.NetworkSimArgs{
//				MobileNetworkSimGroupId:               exampleNetworkSimGroup.ID(),
//				AuthenticationKey:                     pulumi.String("00000000000000000000000000000000"),
//				IntegratedCircuitCardIdentifier:       pulumi.String("8900000000000000000"),
//				InternationalMobileSubscriberIdentity: pulumi.String("000000000000000"),
//				OperatorKeyCode:                       pulumi.String("00000000000000000000000000000000"),
//				StaticIpConfigurations: mobile.NetworkSimStaticIpConfigurationArray{
//					&mobile.NetworkSimStaticIpConfigurationArgs{
//						AttachedDataNetworkId: pulumi.Any(data.Azurerm_mobile_network_attached_data_network.Test.Id),
//						SliceId:               pulumi.Any(azurerm_mobile_network_slice.Test.Id),
//						StaticIpv4Address:     pulumi.String("2.4.0.1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Mobile Network Sim can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:mobile/networkSim:NetworkSim example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/simGroups/simGroup1/sims/sim1
//
// ```
type NetworkSim struct {
	pulumi.CustomResourceState

	// The Ki value for the SIM.
	AuthenticationKey pulumi.StringOutput `pulumi:"authenticationKey"`
	// An optional free-form text field that can be used to record the device type this SIM is associated with, for example `Video camera`. The Azure portal allows SIMs to be grouped and filtered based on this value.
	DeviceType pulumi.StringPtrOutput `pulumi:"deviceType"`
	// The integrated circuit card ID (ICCID) for the SIM. Changing this forces a new Mobile Network Sim to be created.
	IntegratedCircuitCardIdentifier pulumi.StringOutput `pulumi:"integratedCircuitCardIdentifier"`
	// The international mobile subscriber identity (IMSI) for the SIM. Changing this forces a new Mobile Network Sim to be created.
	InternationalMobileSubscriberIdentity pulumi.StringOutput `pulumi:"internationalMobileSubscriberIdentity"`
	// The ID of the Mobile Network which the Mobile Network Sim belongs to. Changing this forces a new Mobile Network Sim to be created.
	MobileNetworkSimGroupId pulumi.StringOutput `pulumi:"mobileNetworkSimGroupId"`
	// The name which should be used for this Mobile Network Sim. Changing this forces a new Mobile Network Sim to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Opc value for the SIM.
	OperatorKeyCode pulumi.StringOutput `pulumi:"operatorKeyCode"`
	// The ID of SIM policy used by this SIM.
	SimPolicyId pulumi.StringPtrOutput `pulumi:"simPolicyId"`
	// The state of the SIM resource.
	SimState pulumi.StringOutput `pulumi:"simState"`
	// A `staticIpConfiguration` block as defined below.
	StaticIpConfigurations NetworkSimStaticIpConfigurationArrayOutput `pulumi:"staticIpConfigurations"`
	// The public key fingerprint of the SIM vendor who provided this SIM, if any.
	VendorKeyFingerprint pulumi.StringOutput `pulumi:"vendorKeyFingerprint"`
	// The name of the SIM vendor who provided this SIM, if any.
	VendorName pulumi.StringOutput `pulumi:"vendorName"`
}

// NewNetworkSim registers a new resource with the given unique name, arguments, and options.
func NewNetworkSim(ctx *pulumi.Context,
	name string, args *NetworkSimArgs, opts ...pulumi.ResourceOption) (*NetworkSim, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationKey == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationKey'")
	}
	if args.IntegratedCircuitCardIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'IntegratedCircuitCardIdentifier'")
	}
	if args.InternationalMobileSubscriberIdentity == nil {
		return nil, errors.New("invalid value for required argument 'InternationalMobileSubscriberIdentity'")
	}
	if args.MobileNetworkSimGroupId == nil {
		return nil, errors.New("invalid value for required argument 'MobileNetworkSimGroupId'")
	}
	if args.OperatorKeyCode == nil {
		return nil, errors.New("invalid value for required argument 'OperatorKeyCode'")
	}
	if args.AuthenticationKey != nil {
		args.AuthenticationKey = pulumi.ToSecret(args.AuthenticationKey).(pulumi.StringInput)
	}
	if args.OperatorKeyCode != nil {
		args.OperatorKeyCode = pulumi.ToSecret(args.OperatorKeyCode).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"authenticationKey",
		"operatorKeyCode",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkSim
	err := ctx.RegisterResource("azure:mobile/networkSim:NetworkSim", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkSim gets an existing NetworkSim resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSim(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkSimState, opts ...pulumi.ResourceOption) (*NetworkSim, error) {
	var resource NetworkSim
	err := ctx.ReadResource("azure:mobile/networkSim:NetworkSim", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkSim resources.
type networkSimState struct {
	// The Ki value for the SIM.
	AuthenticationKey *string `pulumi:"authenticationKey"`
	// An optional free-form text field that can be used to record the device type this SIM is associated with, for example `Video camera`. The Azure portal allows SIMs to be grouped and filtered based on this value.
	DeviceType *string `pulumi:"deviceType"`
	// The integrated circuit card ID (ICCID) for the SIM. Changing this forces a new Mobile Network Sim to be created.
	IntegratedCircuitCardIdentifier *string `pulumi:"integratedCircuitCardIdentifier"`
	// The international mobile subscriber identity (IMSI) for the SIM. Changing this forces a new Mobile Network Sim to be created.
	InternationalMobileSubscriberIdentity *string `pulumi:"internationalMobileSubscriberIdentity"`
	// The ID of the Mobile Network which the Mobile Network Sim belongs to. Changing this forces a new Mobile Network Sim to be created.
	MobileNetworkSimGroupId *string `pulumi:"mobileNetworkSimGroupId"`
	// The name which should be used for this Mobile Network Sim. Changing this forces a new Mobile Network Sim to be created.
	Name *string `pulumi:"name"`
	// The Opc value for the SIM.
	OperatorKeyCode *string `pulumi:"operatorKeyCode"`
	// The ID of SIM policy used by this SIM.
	SimPolicyId *string `pulumi:"simPolicyId"`
	// The state of the SIM resource.
	SimState *string `pulumi:"simState"`
	// A `staticIpConfiguration` block as defined below.
	StaticIpConfigurations []NetworkSimStaticIpConfiguration `pulumi:"staticIpConfigurations"`
	// The public key fingerprint of the SIM vendor who provided this SIM, if any.
	VendorKeyFingerprint *string `pulumi:"vendorKeyFingerprint"`
	// The name of the SIM vendor who provided this SIM, if any.
	VendorName *string `pulumi:"vendorName"`
}

type NetworkSimState struct {
	// The Ki value for the SIM.
	AuthenticationKey pulumi.StringPtrInput
	// An optional free-form text field that can be used to record the device type this SIM is associated with, for example `Video camera`. The Azure portal allows SIMs to be grouped and filtered based on this value.
	DeviceType pulumi.StringPtrInput
	// The integrated circuit card ID (ICCID) for the SIM. Changing this forces a new Mobile Network Sim to be created.
	IntegratedCircuitCardIdentifier pulumi.StringPtrInput
	// The international mobile subscriber identity (IMSI) for the SIM. Changing this forces a new Mobile Network Sim to be created.
	InternationalMobileSubscriberIdentity pulumi.StringPtrInput
	// The ID of the Mobile Network which the Mobile Network Sim belongs to. Changing this forces a new Mobile Network Sim to be created.
	MobileNetworkSimGroupId pulumi.StringPtrInput
	// The name which should be used for this Mobile Network Sim. Changing this forces a new Mobile Network Sim to be created.
	Name pulumi.StringPtrInput
	// The Opc value for the SIM.
	OperatorKeyCode pulumi.StringPtrInput
	// The ID of SIM policy used by this SIM.
	SimPolicyId pulumi.StringPtrInput
	// The state of the SIM resource.
	SimState pulumi.StringPtrInput
	// A `staticIpConfiguration` block as defined below.
	StaticIpConfigurations NetworkSimStaticIpConfigurationArrayInput
	// The public key fingerprint of the SIM vendor who provided this SIM, if any.
	VendorKeyFingerprint pulumi.StringPtrInput
	// The name of the SIM vendor who provided this SIM, if any.
	VendorName pulumi.StringPtrInput
}

func (NetworkSimState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSimState)(nil)).Elem()
}

type networkSimArgs struct {
	// The Ki value for the SIM.
	AuthenticationKey string `pulumi:"authenticationKey"`
	// An optional free-form text field that can be used to record the device type this SIM is associated with, for example `Video camera`. The Azure portal allows SIMs to be grouped and filtered based on this value.
	DeviceType *string `pulumi:"deviceType"`
	// The integrated circuit card ID (ICCID) for the SIM. Changing this forces a new Mobile Network Sim to be created.
	IntegratedCircuitCardIdentifier string `pulumi:"integratedCircuitCardIdentifier"`
	// The international mobile subscriber identity (IMSI) for the SIM. Changing this forces a new Mobile Network Sim to be created.
	InternationalMobileSubscriberIdentity string `pulumi:"internationalMobileSubscriberIdentity"`
	// The ID of the Mobile Network which the Mobile Network Sim belongs to. Changing this forces a new Mobile Network Sim to be created.
	MobileNetworkSimGroupId string `pulumi:"mobileNetworkSimGroupId"`
	// The name which should be used for this Mobile Network Sim. Changing this forces a new Mobile Network Sim to be created.
	Name *string `pulumi:"name"`
	// The Opc value for the SIM.
	OperatorKeyCode string `pulumi:"operatorKeyCode"`
	// The ID of SIM policy used by this SIM.
	SimPolicyId *string `pulumi:"simPolicyId"`
	// A `staticIpConfiguration` block as defined below.
	StaticIpConfigurations []NetworkSimStaticIpConfiguration `pulumi:"staticIpConfigurations"`
}

// The set of arguments for constructing a NetworkSim resource.
type NetworkSimArgs struct {
	// The Ki value for the SIM.
	AuthenticationKey pulumi.StringInput
	// An optional free-form text field that can be used to record the device type this SIM is associated with, for example `Video camera`. The Azure portal allows SIMs to be grouped and filtered based on this value.
	DeviceType pulumi.StringPtrInput
	// The integrated circuit card ID (ICCID) for the SIM. Changing this forces a new Mobile Network Sim to be created.
	IntegratedCircuitCardIdentifier pulumi.StringInput
	// The international mobile subscriber identity (IMSI) for the SIM. Changing this forces a new Mobile Network Sim to be created.
	InternationalMobileSubscriberIdentity pulumi.StringInput
	// The ID of the Mobile Network which the Mobile Network Sim belongs to. Changing this forces a new Mobile Network Sim to be created.
	MobileNetworkSimGroupId pulumi.StringInput
	// The name which should be used for this Mobile Network Sim. Changing this forces a new Mobile Network Sim to be created.
	Name pulumi.StringPtrInput
	// The Opc value for the SIM.
	OperatorKeyCode pulumi.StringInput
	// The ID of SIM policy used by this SIM.
	SimPolicyId pulumi.StringPtrInput
	// A `staticIpConfiguration` block as defined below.
	StaticIpConfigurations NetworkSimStaticIpConfigurationArrayInput
}

func (NetworkSimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSimArgs)(nil)).Elem()
}

type NetworkSimInput interface {
	pulumi.Input

	ToNetworkSimOutput() NetworkSimOutput
	ToNetworkSimOutputWithContext(ctx context.Context) NetworkSimOutput
}

func (*NetworkSim) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSim)(nil)).Elem()
}

func (i *NetworkSim) ToNetworkSimOutput() NetworkSimOutput {
	return i.ToNetworkSimOutputWithContext(context.Background())
}

func (i *NetworkSim) ToNetworkSimOutputWithContext(ctx context.Context) NetworkSimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSimOutput)
}

// NetworkSimArrayInput is an input type that accepts NetworkSimArray and NetworkSimArrayOutput values.
// You can construct a concrete instance of `NetworkSimArrayInput` via:
//
//	NetworkSimArray{ NetworkSimArgs{...} }
type NetworkSimArrayInput interface {
	pulumi.Input

	ToNetworkSimArrayOutput() NetworkSimArrayOutput
	ToNetworkSimArrayOutputWithContext(context.Context) NetworkSimArrayOutput
}

type NetworkSimArray []NetworkSimInput

func (NetworkSimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSim)(nil)).Elem()
}

func (i NetworkSimArray) ToNetworkSimArrayOutput() NetworkSimArrayOutput {
	return i.ToNetworkSimArrayOutputWithContext(context.Background())
}

func (i NetworkSimArray) ToNetworkSimArrayOutputWithContext(ctx context.Context) NetworkSimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSimArrayOutput)
}

// NetworkSimMapInput is an input type that accepts NetworkSimMap and NetworkSimMapOutput values.
// You can construct a concrete instance of `NetworkSimMapInput` via:
//
//	NetworkSimMap{ "key": NetworkSimArgs{...} }
type NetworkSimMapInput interface {
	pulumi.Input

	ToNetworkSimMapOutput() NetworkSimMapOutput
	ToNetworkSimMapOutputWithContext(context.Context) NetworkSimMapOutput
}

type NetworkSimMap map[string]NetworkSimInput

func (NetworkSimMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSim)(nil)).Elem()
}

func (i NetworkSimMap) ToNetworkSimMapOutput() NetworkSimMapOutput {
	return i.ToNetworkSimMapOutputWithContext(context.Background())
}

func (i NetworkSimMap) ToNetworkSimMapOutputWithContext(ctx context.Context) NetworkSimMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSimMapOutput)
}

type NetworkSimOutput struct{ *pulumi.OutputState }

func (NetworkSimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSim)(nil)).Elem()
}

func (o NetworkSimOutput) ToNetworkSimOutput() NetworkSimOutput {
	return o
}

func (o NetworkSimOutput) ToNetworkSimOutputWithContext(ctx context.Context) NetworkSimOutput {
	return o
}

// The Ki value for the SIM.
func (o NetworkSimOutput) AuthenticationKey() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSim) pulumi.StringOutput { return v.AuthenticationKey }).(pulumi.StringOutput)
}

// An optional free-form text field that can be used to record the device type this SIM is associated with, for example `Video camera`. The Azure portal allows SIMs to be grouped and filtered based on this value.
func (o NetworkSimOutput) DeviceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkSim) pulumi.StringPtrOutput { return v.DeviceType }).(pulumi.StringPtrOutput)
}

// The integrated circuit card ID (ICCID) for the SIM. Changing this forces a new Mobile Network Sim to be created.
func (o NetworkSimOutput) IntegratedCircuitCardIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSim) pulumi.StringOutput { return v.IntegratedCircuitCardIdentifier }).(pulumi.StringOutput)
}

// The international mobile subscriber identity (IMSI) for the SIM. Changing this forces a new Mobile Network Sim to be created.
func (o NetworkSimOutput) InternationalMobileSubscriberIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSim) pulumi.StringOutput { return v.InternationalMobileSubscriberIdentity }).(pulumi.StringOutput)
}

// The ID of the Mobile Network which the Mobile Network Sim belongs to. Changing this forces a new Mobile Network Sim to be created.
func (o NetworkSimOutput) MobileNetworkSimGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSim) pulumi.StringOutput { return v.MobileNetworkSimGroupId }).(pulumi.StringOutput)
}

// The name which should be used for this Mobile Network Sim. Changing this forces a new Mobile Network Sim to be created.
func (o NetworkSimOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSim) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Opc value for the SIM.
func (o NetworkSimOutput) OperatorKeyCode() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSim) pulumi.StringOutput { return v.OperatorKeyCode }).(pulumi.StringOutput)
}

// The ID of SIM policy used by this SIM.
func (o NetworkSimOutput) SimPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkSim) pulumi.StringPtrOutput { return v.SimPolicyId }).(pulumi.StringPtrOutput)
}

// The state of the SIM resource.
func (o NetworkSimOutput) SimState() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSim) pulumi.StringOutput { return v.SimState }).(pulumi.StringOutput)
}

// A `staticIpConfiguration` block as defined below.
func (o NetworkSimOutput) StaticIpConfigurations() NetworkSimStaticIpConfigurationArrayOutput {
	return o.ApplyT(func(v *NetworkSim) NetworkSimStaticIpConfigurationArrayOutput { return v.StaticIpConfigurations }).(NetworkSimStaticIpConfigurationArrayOutput)
}

// The public key fingerprint of the SIM vendor who provided this SIM, if any.
func (o NetworkSimOutput) VendorKeyFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSim) pulumi.StringOutput { return v.VendorKeyFingerprint }).(pulumi.StringOutput)
}

// The name of the SIM vendor who provided this SIM, if any.
func (o NetworkSimOutput) VendorName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSim) pulumi.StringOutput { return v.VendorName }).(pulumi.StringOutput)
}

type NetworkSimArrayOutput struct{ *pulumi.OutputState }

func (NetworkSimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSim)(nil)).Elem()
}

func (o NetworkSimArrayOutput) ToNetworkSimArrayOutput() NetworkSimArrayOutput {
	return o
}

func (o NetworkSimArrayOutput) ToNetworkSimArrayOutputWithContext(ctx context.Context) NetworkSimArrayOutput {
	return o
}

func (o NetworkSimArrayOutput) Index(i pulumi.IntInput) NetworkSimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkSim {
		return vs[0].([]*NetworkSim)[vs[1].(int)]
	}).(NetworkSimOutput)
}

type NetworkSimMapOutput struct{ *pulumi.OutputState }

func (NetworkSimMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSim)(nil)).Elem()
}

func (o NetworkSimMapOutput) ToNetworkSimMapOutput() NetworkSimMapOutput {
	return o
}

func (o NetworkSimMapOutput) ToNetworkSimMapOutputWithContext(ctx context.Context) NetworkSimMapOutput {
	return o
}

func (o NetworkSimMapOutput) MapIndex(k pulumi.StringInput) NetworkSimOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkSim {
		return vs[0].(map[string]*NetworkSim)[vs[1].(string)]
	}).(NetworkSimOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSimInput)(nil)).Elem(), &NetworkSim{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSimArrayInput)(nil)).Elem(), NetworkSimArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSimMapInput)(nil)).Elem(), NetworkSimMap{})
	pulumi.RegisterOutputType(NetworkSimOutput{})
	pulumi.RegisterOutputType(NetworkSimArrayOutput{})
	pulumi.RegisterOutputType(NetworkSimMapOutput{})
}
