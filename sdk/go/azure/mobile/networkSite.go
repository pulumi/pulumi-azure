// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mobile

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Mobile Network Site.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/databoxedge"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mobile"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = databoxedge.NewDevice(ctx, "exampleDevice", &databoxedge.DeviceArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				SkuName:           pulumi.String("EdgeP_Base-Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetwork, err := mobile.NewNetwork(ctx, "exampleNetwork", &mobile.NetworkArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				MobileCountryCode: pulumi.String("001"),
//				MobileNetworkCode: pulumi.String("01"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mobile.NewNetworkSite(ctx, "exampleNetworkSite", &mobile.NetworkSiteArgs{
//				MobileNetworkId: exampleNetwork.ID(),
//				Location:        exampleResourceGroup.Location,
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Mobile Network Site can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:mobile/networkSite:NetworkSite example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/mobileNetworks/mobileNetwork1/sites/site1
//
// ```
type NetworkSite struct {
	pulumi.CustomResourceState

	// The Azure Region where the Mobile Network Site should exist. Changing this forces a new Mobile Network Site to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// the ID of the Mobile Network which the Mobile Network Site belongs to. Changing this forces a new Mobile Network Site to be created.
	MobileNetworkId pulumi.StringOutput `pulumi:"mobileNetworkId"`
	// The name which should be used for this Mobile Network Site. Changing this forces a new Mobile Network Site to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// An array of Id of Network Functions deployed on the site.
	NetworkFunctionIds pulumi.StringArrayOutput `pulumi:"networkFunctionIds"`
	// A mapping of tags which should be assigned to the Mobile Network Site.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewNetworkSite registers a new resource with the given unique name, arguments, and options.
func NewNetworkSite(ctx *pulumi.Context,
	name string, args *NetworkSiteArgs, opts ...pulumi.ResourceOption) (*NetworkSite, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MobileNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'MobileNetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkSite
	err := ctx.RegisterResource("azure:mobile/networkSite:NetworkSite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkSite gets an existing NetworkSite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkSiteState, opts ...pulumi.ResourceOption) (*NetworkSite, error) {
	var resource NetworkSite
	err := ctx.ReadResource("azure:mobile/networkSite:NetworkSite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkSite resources.
type networkSiteState struct {
	// The Azure Region where the Mobile Network Site should exist. Changing this forces a new Mobile Network Site to be created.
	Location *string `pulumi:"location"`
	// the ID of the Mobile Network which the Mobile Network Site belongs to. Changing this forces a new Mobile Network Site to be created.
	MobileNetworkId *string `pulumi:"mobileNetworkId"`
	// The name which should be used for this Mobile Network Site. Changing this forces a new Mobile Network Site to be created.
	Name *string `pulumi:"name"`
	// An array of Id of Network Functions deployed on the site.
	NetworkFunctionIds []string `pulumi:"networkFunctionIds"`
	// A mapping of tags which should be assigned to the Mobile Network Site.
	Tags map[string]string `pulumi:"tags"`
}

type NetworkSiteState struct {
	// The Azure Region where the Mobile Network Site should exist. Changing this forces a new Mobile Network Site to be created.
	Location pulumi.StringPtrInput
	// the ID of the Mobile Network which the Mobile Network Site belongs to. Changing this forces a new Mobile Network Site to be created.
	MobileNetworkId pulumi.StringPtrInput
	// The name which should be used for this Mobile Network Site. Changing this forces a new Mobile Network Site to be created.
	Name pulumi.StringPtrInput
	// An array of Id of Network Functions deployed on the site.
	NetworkFunctionIds pulumi.StringArrayInput
	// A mapping of tags which should be assigned to the Mobile Network Site.
	Tags pulumi.StringMapInput
}

func (NetworkSiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSiteState)(nil)).Elem()
}

type networkSiteArgs struct {
	// The Azure Region where the Mobile Network Site should exist. Changing this forces a new Mobile Network Site to be created.
	Location *string `pulumi:"location"`
	// the ID of the Mobile Network which the Mobile Network Site belongs to. Changing this forces a new Mobile Network Site to be created.
	MobileNetworkId string `pulumi:"mobileNetworkId"`
	// The name which should be used for this Mobile Network Site. Changing this forces a new Mobile Network Site to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the Mobile Network Site.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a NetworkSite resource.
type NetworkSiteArgs struct {
	// The Azure Region where the Mobile Network Site should exist. Changing this forces a new Mobile Network Site to be created.
	Location pulumi.StringPtrInput
	// the ID of the Mobile Network which the Mobile Network Site belongs to. Changing this forces a new Mobile Network Site to be created.
	MobileNetworkId pulumi.StringInput
	// The name which should be used for this Mobile Network Site. Changing this forces a new Mobile Network Site to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Mobile Network Site.
	Tags pulumi.StringMapInput
}

func (NetworkSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSiteArgs)(nil)).Elem()
}

type NetworkSiteInput interface {
	pulumi.Input

	ToNetworkSiteOutput() NetworkSiteOutput
	ToNetworkSiteOutputWithContext(ctx context.Context) NetworkSiteOutput
}

func (*NetworkSite) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSite)(nil)).Elem()
}

func (i *NetworkSite) ToNetworkSiteOutput() NetworkSiteOutput {
	return i.ToNetworkSiteOutputWithContext(context.Background())
}

func (i *NetworkSite) ToNetworkSiteOutputWithContext(ctx context.Context) NetworkSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSiteOutput)
}

// NetworkSiteArrayInput is an input type that accepts NetworkSiteArray and NetworkSiteArrayOutput values.
// You can construct a concrete instance of `NetworkSiteArrayInput` via:
//
//	NetworkSiteArray{ NetworkSiteArgs{...} }
type NetworkSiteArrayInput interface {
	pulumi.Input

	ToNetworkSiteArrayOutput() NetworkSiteArrayOutput
	ToNetworkSiteArrayOutputWithContext(context.Context) NetworkSiteArrayOutput
}

type NetworkSiteArray []NetworkSiteInput

func (NetworkSiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSite)(nil)).Elem()
}

func (i NetworkSiteArray) ToNetworkSiteArrayOutput() NetworkSiteArrayOutput {
	return i.ToNetworkSiteArrayOutputWithContext(context.Background())
}

func (i NetworkSiteArray) ToNetworkSiteArrayOutputWithContext(ctx context.Context) NetworkSiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSiteArrayOutput)
}

// NetworkSiteMapInput is an input type that accepts NetworkSiteMap and NetworkSiteMapOutput values.
// You can construct a concrete instance of `NetworkSiteMapInput` via:
//
//	NetworkSiteMap{ "key": NetworkSiteArgs{...} }
type NetworkSiteMapInput interface {
	pulumi.Input

	ToNetworkSiteMapOutput() NetworkSiteMapOutput
	ToNetworkSiteMapOutputWithContext(context.Context) NetworkSiteMapOutput
}

type NetworkSiteMap map[string]NetworkSiteInput

func (NetworkSiteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSite)(nil)).Elem()
}

func (i NetworkSiteMap) ToNetworkSiteMapOutput() NetworkSiteMapOutput {
	return i.ToNetworkSiteMapOutputWithContext(context.Background())
}

func (i NetworkSiteMap) ToNetworkSiteMapOutputWithContext(ctx context.Context) NetworkSiteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSiteMapOutput)
}

type NetworkSiteOutput struct{ *pulumi.OutputState }

func (NetworkSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSite)(nil)).Elem()
}

func (o NetworkSiteOutput) ToNetworkSiteOutput() NetworkSiteOutput {
	return o
}

func (o NetworkSiteOutput) ToNetworkSiteOutputWithContext(ctx context.Context) NetworkSiteOutput {
	return o
}

// The Azure Region where the Mobile Network Site should exist. Changing this forces a new Mobile Network Site to be created.
func (o NetworkSiteOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSite) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// the ID of the Mobile Network which the Mobile Network Site belongs to. Changing this forces a new Mobile Network Site to be created.
func (o NetworkSiteOutput) MobileNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSite) pulumi.StringOutput { return v.MobileNetworkId }).(pulumi.StringOutput)
}

// The name which should be used for this Mobile Network Site. Changing this forces a new Mobile Network Site to be created.
func (o NetworkSiteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSite) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An array of Id of Network Functions deployed on the site.
func (o NetworkSiteOutput) NetworkFunctionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkSite) pulumi.StringArrayOutput { return v.NetworkFunctionIds }).(pulumi.StringArrayOutput)
}

// A mapping of tags which should be assigned to the Mobile Network Site.
func (o NetworkSiteOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkSite) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type NetworkSiteArrayOutput struct{ *pulumi.OutputState }

func (NetworkSiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSite)(nil)).Elem()
}

func (o NetworkSiteArrayOutput) ToNetworkSiteArrayOutput() NetworkSiteArrayOutput {
	return o
}

func (o NetworkSiteArrayOutput) ToNetworkSiteArrayOutputWithContext(ctx context.Context) NetworkSiteArrayOutput {
	return o
}

func (o NetworkSiteArrayOutput) Index(i pulumi.IntInput) NetworkSiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkSite {
		return vs[0].([]*NetworkSite)[vs[1].(int)]
	}).(NetworkSiteOutput)
}

type NetworkSiteMapOutput struct{ *pulumi.OutputState }

func (NetworkSiteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSite)(nil)).Elem()
}

func (o NetworkSiteMapOutput) ToNetworkSiteMapOutput() NetworkSiteMapOutput {
	return o
}

func (o NetworkSiteMapOutput) ToNetworkSiteMapOutputWithContext(ctx context.Context) NetworkSiteMapOutput {
	return o
}

func (o NetworkSiteMapOutput) MapIndex(k pulumi.StringInput) NetworkSiteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkSite {
		return vs[0].(map[string]*NetworkSite)[vs[1].(string)]
	}).(NetworkSiteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSiteInput)(nil)).Elem(), &NetworkSite{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSiteArrayInput)(nil)).Elem(), NetworkSiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSiteMapInput)(nil)).Elem(), NetworkSiteMap{})
	pulumi.RegisterOutputType(NetworkSiteOutput{})
	pulumi.RegisterOutputType(NetworkSiteArrayOutput{})
	pulumi.RegisterOutputType(NetworkSiteMapOutput{})
}
