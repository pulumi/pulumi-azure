// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mobile

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Mobile Network Attached Data Network.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/databoxedge"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/mobile"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDevice, err := databoxedge.NewDevice(ctx, "example", &databoxedge.DeviceArgs{
//				Name:              pulumi.String("example-device"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				SkuName:           pulumi.String("EdgeP_Base-Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetwork, err := mobile.NewNetwork(ctx, "example", &mobile.NetworkArgs{
//				Name:              pulumi.String("example-mn"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				MobileCountryCode: pulumi.String("001"),
//				MobileNetworkCode: pulumi.String("01"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkPacketCoreControlPlane, err := mobile.NewNetworkPacketCoreControlPlane(ctx, "example", &mobile.NetworkPacketCoreControlPlaneArgs{
//				Name:                          pulumi.String("example-mnpccp"),
//				ResourceGroupName:             example.Name,
//				Location:                      pulumi.String("West Europe"),
//				Sku:                           pulumi.String("G0"),
//				MobileNetworkId:               exampleNetwork.ID(),
//				ControlPlaneAccessName:        pulumi.String("default-interface"),
//				ControlPlaneAccessIpv4Address: pulumi.String("192.168.1.199"),
//				ControlPlaneAccessIpv4Gateway: pulumi.String("192.168.1.1"),
//				ControlPlaneAccessIpv4Subnet:  pulumi.String("192.168.1.0/25"),
//				Platform: &mobile.NetworkPacketCoreControlPlanePlatformArgs{
//					Type:         pulumi.String("AKS-HCI"),
//					EdgeDeviceId: exampleDevice.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkPacketCoreDataPlane, err := mobile.NewNetworkPacketCoreDataPlane(ctx, "example", &mobile.NetworkPacketCoreDataPlaneArgs{
//				Name:                                  pulumi.String("example-mnpcdp"),
//				MobileNetworkPacketCoreControlPlaneId: exampleNetworkPacketCoreControlPlane.ID(),
//				Location:                              example.Location,
//				UserPlaneAccessName:                   pulumi.String("default-interface"),
//				UserPlaneAccessIpv4Address:            pulumi.String("192.168.1.199"),
//				UserPlaneAccessIpv4Gateway:            pulumi.String("192.168.1.1"),
//				UserPlaneAccessIpv4Subnet:             pulumi.String("192.168.1.0/25"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkDataNetwork, err := mobile.NewNetworkDataNetwork(ctx, "example", &mobile.NetworkDataNetworkArgs{
//				Name:            pulumi.String("example-data-network"),
//				MobileNetworkId: exampleNetwork.ID(),
//				Location:        example.Location,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mobile.NewNetworkAttachedDataNetwork(ctx, "example", &mobile.NetworkAttachedDataNetworkArgs{
//				MobileNetworkDataNetworkName:       exampleNetworkDataNetwork.Name,
//				MobileNetworkPacketCoreDataPlaneId: exampleNetworkPacketCoreDataPlane.ID(),
//				Location:                           example.Location,
//				DnsAddresses: pulumi.StringArray{
//					pulumi.String("1.1.1.1"),
//				},
//				UserEquipmentAddressPoolPrefixes: pulumi.StringArray{
//					pulumi.String("2.4.1.0/24"),
//				},
//				UserEquipmentStaticAddressPoolPrefixes: pulumi.StringArray{
//					pulumi.String("2.4.2.0/24"),
//				},
//				UserPlaneAccessName:        pulumi.String("test"),
//				UserPlaneAccessIpv4Address: pulumi.String("10.204.141.4"),
//				UserPlaneAccessIpv4Gateway: pulumi.String("10.204.141.1"),
//				UserPlaneAccessIpv4Subnet:  pulumi.String("10.204.141.0/24"),
//				NetworkAddressPortTranslation: &mobile.NetworkAttachedDataNetworkNetworkAddressPortTranslationArgs{
//					PinholeMaximumNumber:        pulumi.Int(65536),
//					IcmpPinholeTimeoutInSeconds: pulumi.Int(30),
//					TcpPinholeTimeoutInSeconds:  pulumi.Int(100),
//					UdpPinholeTimeoutInSeconds:  pulumi.Int(39),
//					PortRange: &mobile.NetworkAttachedDataNetworkNetworkAddressPortTranslationPortRangeArgs{
//						Maximum: pulumi.Int(49999),
//						Minimum: pulumi.Int(1024),
//					},
//					TcpPortReuseMinimumHoldTimeInSeconds:    pulumi.Int(120),
//					UdpTcpPortReuseMinimumHoldTimeInSeconds: 60,
//				},
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.MobileNetwork` - 2022-11-01
//
// ## Import
//
// Mobile Network Attached Data Network can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:mobile/networkAttachedDataNetwork:NetworkAttachedDataNetwork example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/packetCoreControlPlane1/packetCoreDataPlanes/packetCoreDataPlane1/attachedDataNetworks/attachedDataNetwork1
// ```
type NetworkAttachedDataNetwork struct {
	pulumi.CustomResourceState

	// Specifies the DNS servers to signal to UEs to use for this attached data network.
	DnsAddresses pulumi.StringArrayOutput `pulumi:"dnsAddresses"`
	// Specifies the Azure Region where the Mobile Network Attached Data Network should exist. Changing this forces a new Mobile Network Attached Data Network to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the `mobile.NetworkDataNetwork` which the Attached Data Network belongs to, Changing this forces a new Mobile Network Attached Data Network to be created.
	MobileNetworkDataNetworkName pulumi.StringOutput `pulumi:"mobileNetworkDataNetworkName"`
	// Specifies the ID of the `mobile.NetworkPacketCoreDataPlane` which the Mobile Network Attached Data Network belongs to. Changing this forces a new Mobile Network Attached Data Network to be created.
	MobileNetworkPacketCoreDataPlaneId pulumi.StringOutput `pulumi:"mobileNetworkPacketCoreDataPlaneId"`
	// A `networkAddressPortTranslation` block as defined below.
	NetworkAddressPortTranslation NetworkAttachedDataNetworkNetworkAddressPortTranslationPtrOutput `pulumi:"networkAddressPortTranslation"`
	// A mapping of tags which should be assigned to the Mobile Network Attached Data Network.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. At least one of `userEquipmentAddressPoolPrefixes` and `userEquipmentStaticAddressPoolPrefix`. If you define both, they must be of the same size.
	UserEquipmentAddressPoolPrefixes pulumi.StringArrayOutput `pulumi:"userEquipmentAddressPoolPrefixes"`
	// Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource. At least one of `userEquipmentAddressPoolPrefix` and `userEquipmentStaticAddressPoolPrefixes`. If you define both, they must be of the same size.
	//
	// > **Note:** At least one of `userEquipmentAddressPoolPrefixes` and `userEquipmentStaticAddressPoolPrefixes` must be specified.
	UserEquipmentStaticAddressPoolPrefixes pulumi.StringArrayOutput `pulumi:"userEquipmentStaticAddressPoolPrefixes"`
	// The IPv4 address for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Address pulumi.StringPtrOutput `pulumi:"userPlaneAccessIpv4Address"`
	// The default IPv4 gateway for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Gateway pulumi.StringPtrOutput `pulumi:"userPlaneAccessIpv4Gateway"`
	// The IPv4 subnet for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Subnet pulumi.StringPtrOutput `pulumi:"userPlaneAccessIpv4Subnet"`
	// Specifies the logical name for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessName pulumi.StringPtrOutput `pulumi:"userPlaneAccessName"`
}

// NewNetworkAttachedDataNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetworkAttachedDataNetwork(ctx *pulumi.Context,
	name string, args *NetworkAttachedDataNetworkArgs, opts ...pulumi.ResourceOption) (*NetworkAttachedDataNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DnsAddresses == nil {
		return nil, errors.New("invalid value for required argument 'DnsAddresses'")
	}
	if args.MobileNetworkDataNetworkName == nil {
		return nil, errors.New("invalid value for required argument 'MobileNetworkDataNetworkName'")
	}
	if args.MobileNetworkPacketCoreDataPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'MobileNetworkPacketCoreDataPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkAttachedDataNetwork
	err := ctx.RegisterResource("azure:mobile/networkAttachedDataNetwork:NetworkAttachedDataNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAttachedDataNetwork gets an existing NetworkAttachedDataNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAttachedDataNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAttachedDataNetworkState, opts ...pulumi.ResourceOption) (*NetworkAttachedDataNetwork, error) {
	var resource NetworkAttachedDataNetwork
	err := ctx.ReadResource("azure:mobile/networkAttachedDataNetwork:NetworkAttachedDataNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAttachedDataNetwork resources.
type networkAttachedDataNetworkState struct {
	// Specifies the DNS servers to signal to UEs to use for this attached data network.
	DnsAddresses []string `pulumi:"dnsAddresses"`
	// Specifies the Azure Region where the Mobile Network Attached Data Network should exist. Changing this forces a new Mobile Network Attached Data Network to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the `mobile.NetworkDataNetwork` which the Attached Data Network belongs to, Changing this forces a new Mobile Network Attached Data Network to be created.
	MobileNetworkDataNetworkName *string `pulumi:"mobileNetworkDataNetworkName"`
	// Specifies the ID of the `mobile.NetworkPacketCoreDataPlane` which the Mobile Network Attached Data Network belongs to. Changing this forces a new Mobile Network Attached Data Network to be created.
	MobileNetworkPacketCoreDataPlaneId *string `pulumi:"mobileNetworkPacketCoreDataPlaneId"`
	// A `networkAddressPortTranslation` block as defined below.
	NetworkAddressPortTranslation *NetworkAttachedDataNetworkNetworkAddressPortTranslation `pulumi:"networkAddressPortTranslation"`
	// A mapping of tags which should be assigned to the Mobile Network Attached Data Network.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. At least one of `userEquipmentAddressPoolPrefixes` and `userEquipmentStaticAddressPoolPrefix`. If you define both, they must be of the same size.
	UserEquipmentAddressPoolPrefixes []string `pulumi:"userEquipmentAddressPoolPrefixes"`
	// Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource. At least one of `userEquipmentAddressPoolPrefix` and `userEquipmentStaticAddressPoolPrefixes`. If you define both, they must be of the same size.
	//
	// > **Note:** At least one of `userEquipmentAddressPoolPrefixes` and `userEquipmentStaticAddressPoolPrefixes` must be specified.
	UserEquipmentStaticAddressPoolPrefixes []string `pulumi:"userEquipmentStaticAddressPoolPrefixes"`
	// The IPv4 address for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Address *string `pulumi:"userPlaneAccessIpv4Address"`
	// The default IPv4 gateway for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Gateway *string `pulumi:"userPlaneAccessIpv4Gateway"`
	// The IPv4 subnet for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Subnet *string `pulumi:"userPlaneAccessIpv4Subnet"`
	// Specifies the logical name for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessName *string `pulumi:"userPlaneAccessName"`
}

type NetworkAttachedDataNetworkState struct {
	// Specifies the DNS servers to signal to UEs to use for this attached data network.
	DnsAddresses pulumi.StringArrayInput
	// Specifies the Azure Region where the Mobile Network Attached Data Network should exist. Changing this forces a new Mobile Network Attached Data Network to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the `mobile.NetworkDataNetwork` which the Attached Data Network belongs to, Changing this forces a new Mobile Network Attached Data Network to be created.
	MobileNetworkDataNetworkName pulumi.StringPtrInput
	// Specifies the ID of the `mobile.NetworkPacketCoreDataPlane` which the Mobile Network Attached Data Network belongs to. Changing this forces a new Mobile Network Attached Data Network to be created.
	MobileNetworkPacketCoreDataPlaneId pulumi.StringPtrInput
	// A `networkAddressPortTranslation` block as defined below.
	NetworkAddressPortTranslation NetworkAttachedDataNetworkNetworkAddressPortTranslationPtrInput
	// A mapping of tags which should be assigned to the Mobile Network Attached Data Network.
	Tags pulumi.StringMapInput
	// Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. At least one of `userEquipmentAddressPoolPrefixes` and `userEquipmentStaticAddressPoolPrefix`. If you define both, they must be of the same size.
	UserEquipmentAddressPoolPrefixes pulumi.StringArrayInput
	// Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource. At least one of `userEquipmentAddressPoolPrefix` and `userEquipmentStaticAddressPoolPrefixes`. If you define both, they must be of the same size.
	//
	// > **Note:** At least one of `userEquipmentAddressPoolPrefixes` and `userEquipmentStaticAddressPoolPrefixes` must be specified.
	UserEquipmentStaticAddressPoolPrefixes pulumi.StringArrayInput
	// The IPv4 address for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Address pulumi.StringPtrInput
	// The default IPv4 gateway for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Gateway pulumi.StringPtrInput
	// The IPv4 subnet for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Subnet pulumi.StringPtrInput
	// Specifies the logical name for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessName pulumi.StringPtrInput
}

func (NetworkAttachedDataNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAttachedDataNetworkState)(nil)).Elem()
}

type networkAttachedDataNetworkArgs struct {
	// Specifies the DNS servers to signal to UEs to use for this attached data network.
	DnsAddresses []string `pulumi:"dnsAddresses"`
	// Specifies the Azure Region where the Mobile Network Attached Data Network should exist. Changing this forces a new Mobile Network Attached Data Network to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the `mobile.NetworkDataNetwork` which the Attached Data Network belongs to, Changing this forces a new Mobile Network Attached Data Network to be created.
	MobileNetworkDataNetworkName string `pulumi:"mobileNetworkDataNetworkName"`
	// Specifies the ID of the `mobile.NetworkPacketCoreDataPlane` which the Mobile Network Attached Data Network belongs to. Changing this forces a new Mobile Network Attached Data Network to be created.
	MobileNetworkPacketCoreDataPlaneId string `pulumi:"mobileNetworkPacketCoreDataPlaneId"`
	// A `networkAddressPortTranslation` block as defined below.
	NetworkAddressPortTranslation *NetworkAttachedDataNetworkNetworkAddressPortTranslation `pulumi:"networkAddressPortTranslation"`
	// A mapping of tags which should be assigned to the Mobile Network Attached Data Network.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. At least one of `userEquipmentAddressPoolPrefixes` and `userEquipmentStaticAddressPoolPrefix`. If you define both, they must be of the same size.
	UserEquipmentAddressPoolPrefixes []string `pulumi:"userEquipmentAddressPoolPrefixes"`
	// Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource. At least one of `userEquipmentAddressPoolPrefix` and `userEquipmentStaticAddressPoolPrefixes`. If you define both, they must be of the same size.
	//
	// > **Note:** At least one of `userEquipmentAddressPoolPrefixes` and `userEquipmentStaticAddressPoolPrefixes` must be specified.
	UserEquipmentStaticAddressPoolPrefixes []string `pulumi:"userEquipmentStaticAddressPoolPrefixes"`
	// The IPv4 address for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Address *string `pulumi:"userPlaneAccessIpv4Address"`
	// The default IPv4 gateway for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Gateway *string `pulumi:"userPlaneAccessIpv4Gateway"`
	// The IPv4 subnet for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Subnet *string `pulumi:"userPlaneAccessIpv4Subnet"`
	// Specifies the logical name for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessName *string `pulumi:"userPlaneAccessName"`
}

// The set of arguments for constructing a NetworkAttachedDataNetwork resource.
type NetworkAttachedDataNetworkArgs struct {
	// Specifies the DNS servers to signal to UEs to use for this attached data network.
	DnsAddresses pulumi.StringArrayInput
	// Specifies the Azure Region where the Mobile Network Attached Data Network should exist. Changing this forces a new Mobile Network Attached Data Network to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the `mobile.NetworkDataNetwork` which the Attached Data Network belongs to, Changing this forces a new Mobile Network Attached Data Network to be created.
	MobileNetworkDataNetworkName pulumi.StringInput
	// Specifies the ID of the `mobile.NetworkPacketCoreDataPlane` which the Mobile Network Attached Data Network belongs to. Changing this forces a new Mobile Network Attached Data Network to be created.
	MobileNetworkPacketCoreDataPlaneId pulumi.StringInput
	// A `networkAddressPortTranslation` block as defined below.
	NetworkAddressPortTranslation NetworkAttachedDataNetworkNetworkAddressPortTranslationPtrInput
	// A mapping of tags which should be assigned to the Mobile Network Attached Data Network.
	Tags pulumi.StringMapInput
	// Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. At least one of `userEquipmentAddressPoolPrefixes` and `userEquipmentStaticAddressPoolPrefix`. If you define both, they must be of the same size.
	UserEquipmentAddressPoolPrefixes pulumi.StringArrayInput
	// Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource. At least one of `userEquipmentAddressPoolPrefix` and `userEquipmentStaticAddressPoolPrefixes`. If you define both, they must be of the same size.
	//
	// > **Note:** At least one of `userEquipmentAddressPoolPrefixes` and `userEquipmentStaticAddressPoolPrefixes` must be specified.
	UserEquipmentStaticAddressPoolPrefixes pulumi.StringArrayInput
	// The IPv4 address for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Address pulumi.StringPtrInput
	// The default IPv4 gateway for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Gateway pulumi.StringPtrInput
	// The IPv4 subnet for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessIpv4Subnet pulumi.StringPtrInput
	// Specifies the logical name for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
	UserPlaneAccessName pulumi.StringPtrInput
}

func (NetworkAttachedDataNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAttachedDataNetworkArgs)(nil)).Elem()
}

type NetworkAttachedDataNetworkInput interface {
	pulumi.Input

	ToNetworkAttachedDataNetworkOutput() NetworkAttachedDataNetworkOutput
	ToNetworkAttachedDataNetworkOutputWithContext(ctx context.Context) NetworkAttachedDataNetworkOutput
}

func (*NetworkAttachedDataNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAttachedDataNetwork)(nil)).Elem()
}

func (i *NetworkAttachedDataNetwork) ToNetworkAttachedDataNetworkOutput() NetworkAttachedDataNetworkOutput {
	return i.ToNetworkAttachedDataNetworkOutputWithContext(context.Background())
}

func (i *NetworkAttachedDataNetwork) ToNetworkAttachedDataNetworkOutputWithContext(ctx context.Context) NetworkAttachedDataNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAttachedDataNetworkOutput)
}

// NetworkAttachedDataNetworkArrayInput is an input type that accepts NetworkAttachedDataNetworkArray and NetworkAttachedDataNetworkArrayOutput values.
// You can construct a concrete instance of `NetworkAttachedDataNetworkArrayInput` via:
//
//	NetworkAttachedDataNetworkArray{ NetworkAttachedDataNetworkArgs{...} }
type NetworkAttachedDataNetworkArrayInput interface {
	pulumi.Input

	ToNetworkAttachedDataNetworkArrayOutput() NetworkAttachedDataNetworkArrayOutput
	ToNetworkAttachedDataNetworkArrayOutputWithContext(context.Context) NetworkAttachedDataNetworkArrayOutput
}

type NetworkAttachedDataNetworkArray []NetworkAttachedDataNetworkInput

func (NetworkAttachedDataNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAttachedDataNetwork)(nil)).Elem()
}

func (i NetworkAttachedDataNetworkArray) ToNetworkAttachedDataNetworkArrayOutput() NetworkAttachedDataNetworkArrayOutput {
	return i.ToNetworkAttachedDataNetworkArrayOutputWithContext(context.Background())
}

func (i NetworkAttachedDataNetworkArray) ToNetworkAttachedDataNetworkArrayOutputWithContext(ctx context.Context) NetworkAttachedDataNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAttachedDataNetworkArrayOutput)
}

// NetworkAttachedDataNetworkMapInput is an input type that accepts NetworkAttachedDataNetworkMap and NetworkAttachedDataNetworkMapOutput values.
// You can construct a concrete instance of `NetworkAttachedDataNetworkMapInput` via:
//
//	NetworkAttachedDataNetworkMap{ "key": NetworkAttachedDataNetworkArgs{...} }
type NetworkAttachedDataNetworkMapInput interface {
	pulumi.Input

	ToNetworkAttachedDataNetworkMapOutput() NetworkAttachedDataNetworkMapOutput
	ToNetworkAttachedDataNetworkMapOutputWithContext(context.Context) NetworkAttachedDataNetworkMapOutput
}

type NetworkAttachedDataNetworkMap map[string]NetworkAttachedDataNetworkInput

func (NetworkAttachedDataNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAttachedDataNetwork)(nil)).Elem()
}

func (i NetworkAttachedDataNetworkMap) ToNetworkAttachedDataNetworkMapOutput() NetworkAttachedDataNetworkMapOutput {
	return i.ToNetworkAttachedDataNetworkMapOutputWithContext(context.Background())
}

func (i NetworkAttachedDataNetworkMap) ToNetworkAttachedDataNetworkMapOutputWithContext(ctx context.Context) NetworkAttachedDataNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAttachedDataNetworkMapOutput)
}

type NetworkAttachedDataNetworkOutput struct{ *pulumi.OutputState }

func (NetworkAttachedDataNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAttachedDataNetwork)(nil)).Elem()
}

func (o NetworkAttachedDataNetworkOutput) ToNetworkAttachedDataNetworkOutput() NetworkAttachedDataNetworkOutput {
	return o
}

func (o NetworkAttachedDataNetworkOutput) ToNetworkAttachedDataNetworkOutputWithContext(ctx context.Context) NetworkAttachedDataNetworkOutput {
	return o
}

// Specifies the DNS servers to signal to UEs to use for this attached data network.
func (o NetworkAttachedDataNetworkOutput) DnsAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkAttachedDataNetwork) pulumi.StringArrayOutput { return v.DnsAddresses }).(pulumi.StringArrayOutput)
}

// Specifies the Azure Region where the Mobile Network Attached Data Network should exist. Changing this forces a new Mobile Network Attached Data Network to be created.
func (o NetworkAttachedDataNetworkOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAttachedDataNetwork) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the `mobile.NetworkDataNetwork` which the Attached Data Network belongs to, Changing this forces a new Mobile Network Attached Data Network to be created.
func (o NetworkAttachedDataNetworkOutput) MobileNetworkDataNetworkName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAttachedDataNetwork) pulumi.StringOutput { return v.MobileNetworkDataNetworkName }).(pulumi.StringOutput)
}

// Specifies the ID of the `mobile.NetworkPacketCoreDataPlane` which the Mobile Network Attached Data Network belongs to. Changing this forces a new Mobile Network Attached Data Network to be created.
func (o NetworkAttachedDataNetworkOutput) MobileNetworkPacketCoreDataPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAttachedDataNetwork) pulumi.StringOutput { return v.MobileNetworkPacketCoreDataPlaneId }).(pulumi.StringOutput)
}

// A `networkAddressPortTranslation` block as defined below.
func (o NetworkAttachedDataNetworkOutput) NetworkAddressPortTranslation() NetworkAttachedDataNetworkNetworkAddressPortTranslationPtrOutput {
	return o.ApplyT(func(v *NetworkAttachedDataNetwork) NetworkAttachedDataNetworkNetworkAddressPortTranslationPtrOutput {
		return v.NetworkAddressPortTranslation
	}).(NetworkAttachedDataNetworkNetworkAddressPortTranslationPtrOutput)
}

// A mapping of tags which should be assigned to the Mobile Network Attached Data Network.
func (o NetworkAttachedDataNetworkOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkAttachedDataNetwork) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. At least one of `userEquipmentAddressPoolPrefixes` and `userEquipmentStaticAddressPoolPrefix`. If you define both, they must be of the same size.
func (o NetworkAttachedDataNetworkOutput) UserEquipmentAddressPoolPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkAttachedDataNetwork) pulumi.StringArrayOutput {
		return v.UserEquipmentAddressPoolPrefixes
	}).(pulumi.StringArrayOutput)
}

// Specifies the user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs. The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource. At least one of `userEquipmentAddressPoolPrefix` and `userEquipmentStaticAddressPoolPrefixes`. If you define both, they must be of the same size.
//
// > **Note:** At least one of `userEquipmentAddressPoolPrefixes` and `userEquipmentStaticAddressPoolPrefixes` must be specified.
func (o NetworkAttachedDataNetworkOutput) UserEquipmentStaticAddressPoolPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkAttachedDataNetwork) pulumi.StringArrayOutput {
		return v.UserEquipmentStaticAddressPoolPrefixes
	}).(pulumi.StringArrayOutput)
}

// The IPv4 address for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
func (o NetworkAttachedDataNetworkOutput) UserPlaneAccessIpv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAttachedDataNetwork) pulumi.StringPtrOutput { return v.UserPlaneAccessIpv4Address }).(pulumi.StringPtrOutput)
}

// The default IPv4 gateway for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
func (o NetworkAttachedDataNetworkOutput) UserPlaneAccessIpv4Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAttachedDataNetwork) pulumi.StringPtrOutput { return v.UserPlaneAccessIpv4Gateway }).(pulumi.StringPtrOutput)
}

// The IPv4 subnet for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
func (o NetworkAttachedDataNetworkOutput) UserPlaneAccessIpv4Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAttachedDataNetwork) pulumi.StringPtrOutput { return v.UserPlaneAccessIpv4Subnet }).(pulumi.StringPtrOutput)
}

// Specifies the logical name for the user data plane interface. This should match one of the interfaces configured on your Azure Stack Edge device.
func (o NetworkAttachedDataNetworkOutput) UserPlaneAccessName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAttachedDataNetwork) pulumi.StringPtrOutput { return v.UserPlaneAccessName }).(pulumi.StringPtrOutput)
}

type NetworkAttachedDataNetworkArrayOutput struct{ *pulumi.OutputState }

func (NetworkAttachedDataNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAttachedDataNetwork)(nil)).Elem()
}

func (o NetworkAttachedDataNetworkArrayOutput) ToNetworkAttachedDataNetworkArrayOutput() NetworkAttachedDataNetworkArrayOutput {
	return o
}

func (o NetworkAttachedDataNetworkArrayOutput) ToNetworkAttachedDataNetworkArrayOutputWithContext(ctx context.Context) NetworkAttachedDataNetworkArrayOutput {
	return o
}

func (o NetworkAttachedDataNetworkArrayOutput) Index(i pulumi.IntInput) NetworkAttachedDataNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkAttachedDataNetwork {
		return vs[0].([]*NetworkAttachedDataNetwork)[vs[1].(int)]
	}).(NetworkAttachedDataNetworkOutput)
}

type NetworkAttachedDataNetworkMapOutput struct{ *pulumi.OutputState }

func (NetworkAttachedDataNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAttachedDataNetwork)(nil)).Elem()
}

func (o NetworkAttachedDataNetworkMapOutput) ToNetworkAttachedDataNetworkMapOutput() NetworkAttachedDataNetworkMapOutput {
	return o
}

func (o NetworkAttachedDataNetworkMapOutput) ToNetworkAttachedDataNetworkMapOutputWithContext(ctx context.Context) NetworkAttachedDataNetworkMapOutput {
	return o
}

func (o NetworkAttachedDataNetworkMapOutput) MapIndex(k pulumi.StringInput) NetworkAttachedDataNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkAttachedDataNetwork {
		return vs[0].(map[string]*NetworkAttachedDataNetwork)[vs[1].(string)]
	}).(NetworkAttachedDataNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAttachedDataNetworkInput)(nil)).Elem(), &NetworkAttachedDataNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAttachedDataNetworkArrayInput)(nil)).Elem(), NetworkAttachedDataNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAttachedDataNetworkMapInput)(nil)).Elem(), NetworkAttachedDataNetworkMap{})
	pulumi.RegisterOutputType(NetworkAttachedDataNetworkOutput{})
	pulumi.RegisterOutputType(NetworkAttachedDataNetworkArrayOutput{})
	pulumi.RegisterOutputType(NetworkAttachedDataNetworkMapOutput{})
}
