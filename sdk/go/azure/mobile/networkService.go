// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mobile

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Mobile Network Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mobile"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("east us"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetwork, err := mobile.NewNetwork(ctx, "exampleNetwork", &mobile.NetworkArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				MobileCountryCode: pulumi.String("001"),
//				MobileNetworkCode: pulumi.String("01"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mobile.NewNetworkService(ctx, "exampleNetworkService", &mobile.NetworkServiceArgs{
//				MobileNetworkId:   exampleNetwork.ID(),
//				Location:          exampleResourceGroup.Location,
//				ServicePrecedence: pulumi.Int(0),
//				PccRules: mobile.NetworkServicePccRuleArray{
//					&mobile.NetworkServicePccRuleArgs{
//						Name:                  pulumi.String("default-rule"),
//						Precedence:            pulumi.Int(1),
//						TrafficControlEnabled: pulumi.Bool(true),
//						QosPolicy: &mobile.NetworkServicePccRuleQosPolicyArgs{
//							AllocationAndRetentionPriorityLevel: pulumi.Int(9),
//							QosIndicator:                        pulumi.Int(9),
//							PreemptionCapability:                pulumi.String("NotPreempt"),
//							PreemptionVulnerability:             pulumi.String("Preemptable"),
//							GuaranteedBitRate: &mobile.NetworkServicePccRuleQosPolicyGuaranteedBitRateArgs{
//								Downlink: pulumi.String("100 Mbps"),
//								Uplink:   pulumi.String("10 Mbps"),
//							},
//							MaximumBitRate: &mobile.NetworkServicePccRuleQosPolicyMaximumBitRateArgs{
//								Downlink: pulumi.String("1 Gbps"),
//								Uplink:   pulumi.String("100 Mbps"),
//							},
//						},
//						ServiceDataFlowTemplates: mobile.NetworkServicePccRuleServiceDataFlowTemplateArray{
//							&mobile.NetworkServicePccRuleServiceDataFlowTemplateArgs{
//								Direction: pulumi.String("Uplink"),
//								Name:      pulumi.String("IP-to-server"),
//								Ports:     pulumi.StringArray{},
//								Protocols: pulumi.StringArray{
//									pulumi.String("ip"),
//								},
//								RemoteIpLists: pulumi.StringArray{
//									pulumi.String("10.3.4.0/24"),
//								},
//							},
//						},
//					},
//				},
//				ServiceQosPolicy: &mobile.NetworkServiceServiceQosPolicyArgs{
//					AllocationAndRetentionPriorityLevel: pulumi.Int(9),
//					QosIndicator:                        pulumi.Int(9),
//					PreemptionCapability:                pulumi.String("NotPreempt"),
//					PreemptionVulnerability:             pulumi.String("Preemptable"),
//					MaximumBitRate: &mobile.NetworkServiceServiceQosPolicyMaximumBitRateArgs{
//						Downlink: pulumi.String("1 Gbps"),
//						Uplink:   pulumi.String("100 Mbps"),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Mobile Network Service can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:mobile/networkService:NetworkService example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/mobileNetworks/mobileNetwork1/services/service1
//
// ```
type NetworkService struct {
	pulumi.CustomResourceState

	// Specifies the Azure Region where the Mobile Network Service should exist. Changing this forces a new Mobile Network Service to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the ID of the Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
	MobileNetworkId pulumi.StringOutput `pulumi:"mobileNetworkId"`
	// Specifies the name which should be used for this Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `pccRule` block as defined below. The set of PCC Rules that make up this service.
	PccRules NetworkServicePccRuleArrayOutput `pulumi:"pccRules"`
	// A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all services configured in the mobile network. Must be between `0` and `255`.
	ServicePrecedence pulumi.IntOutput `pulumi:"servicePrecedence"`
	// A `serviceQosPolicy` block as defined below. The QoS policy to use for packets matching this service. This can be overridden for particular flows using the ruleQosPolicy field in a `pccRule`. If this field is not specified then the `simPolicy` of User Equipment (UE) will define the QoS settings.
	ServiceQosPolicy NetworkServiceServiceQosPolicyPtrOutput `pulumi:"serviceQosPolicy"`
	// A mapping of tags which should be assigned to the Mobile Network Service.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewNetworkService registers a new resource with the given unique name, arguments, and options.
func NewNetworkService(ctx *pulumi.Context,
	name string, args *NetworkServiceArgs, opts ...pulumi.ResourceOption) (*NetworkService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MobileNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'MobileNetworkId'")
	}
	if args.PccRules == nil {
		return nil, errors.New("invalid value for required argument 'PccRules'")
	}
	if args.ServicePrecedence == nil {
		return nil, errors.New("invalid value for required argument 'ServicePrecedence'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkService
	err := ctx.RegisterResource("azure:mobile/networkService:NetworkService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkService gets an existing NetworkService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkServiceState, opts ...pulumi.ResourceOption) (*NetworkService, error) {
	var resource NetworkService
	err := ctx.ReadResource("azure:mobile/networkService:NetworkService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkService resources.
type networkServiceState struct {
	// Specifies the Azure Region where the Mobile Network Service should exist. Changing this forces a new Mobile Network Service to be created.
	Location *string `pulumi:"location"`
	// Specifies the ID of the Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
	MobileNetworkId *string `pulumi:"mobileNetworkId"`
	// Specifies the name which should be used for this Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
	Name *string `pulumi:"name"`
	// A `pccRule` block as defined below. The set of PCC Rules that make up this service.
	PccRules []NetworkServicePccRule `pulumi:"pccRules"`
	// A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all services configured in the mobile network. Must be between `0` and `255`.
	ServicePrecedence *int `pulumi:"servicePrecedence"`
	// A `serviceQosPolicy` block as defined below. The QoS policy to use for packets matching this service. This can be overridden for particular flows using the ruleQosPolicy field in a `pccRule`. If this field is not specified then the `simPolicy` of User Equipment (UE) will define the QoS settings.
	ServiceQosPolicy *NetworkServiceServiceQosPolicy `pulumi:"serviceQosPolicy"`
	// A mapping of tags which should be assigned to the Mobile Network Service.
	Tags map[string]string `pulumi:"tags"`
}

type NetworkServiceState struct {
	// Specifies the Azure Region where the Mobile Network Service should exist. Changing this forces a new Mobile Network Service to be created.
	Location pulumi.StringPtrInput
	// Specifies the ID of the Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
	MobileNetworkId pulumi.StringPtrInput
	// Specifies the name which should be used for this Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
	Name pulumi.StringPtrInput
	// A `pccRule` block as defined below. The set of PCC Rules that make up this service.
	PccRules NetworkServicePccRuleArrayInput
	// A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all services configured in the mobile network. Must be between `0` and `255`.
	ServicePrecedence pulumi.IntPtrInput
	// A `serviceQosPolicy` block as defined below. The QoS policy to use for packets matching this service. This can be overridden for particular flows using the ruleQosPolicy field in a `pccRule`. If this field is not specified then the `simPolicy` of User Equipment (UE) will define the QoS settings.
	ServiceQosPolicy NetworkServiceServiceQosPolicyPtrInput
	// A mapping of tags which should be assigned to the Mobile Network Service.
	Tags pulumi.StringMapInput
}

func (NetworkServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkServiceState)(nil)).Elem()
}

type networkServiceArgs struct {
	// Specifies the Azure Region where the Mobile Network Service should exist. Changing this forces a new Mobile Network Service to be created.
	Location *string `pulumi:"location"`
	// Specifies the ID of the Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
	MobileNetworkId string `pulumi:"mobileNetworkId"`
	// Specifies the name which should be used for this Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
	Name *string `pulumi:"name"`
	// A `pccRule` block as defined below. The set of PCC Rules that make up this service.
	PccRules []NetworkServicePccRule `pulumi:"pccRules"`
	// A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all services configured in the mobile network. Must be between `0` and `255`.
	ServicePrecedence int `pulumi:"servicePrecedence"`
	// A `serviceQosPolicy` block as defined below. The QoS policy to use for packets matching this service. This can be overridden for particular flows using the ruleQosPolicy field in a `pccRule`. If this field is not specified then the `simPolicy` of User Equipment (UE) will define the QoS settings.
	ServiceQosPolicy *NetworkServiceServiceQosPolicy `pulumi:"serviceQosPolicy"`
	// A mapping of tags which should be assigned to the Mobile Network Service.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a NetworkService resource.
type NetworkServiceArgs struct {
	// Specifies the Azure Region where the Mobile Network Service should exist. Changing this forces a new Mobile Network Service to be created.
	Location pulumi.StringPtrInput
	// Specifies the ID of the Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
	MobileNetworkId pulumi.StringInput
	// Specifies the name which should be used for this Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
	Name pulumi.StringPtrInput
	// A `pccRule` block as defined below. The set of PCC Rules that make up this service.
	PccRules NetworkServicePccRuleArrayInput
	// A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all services configured in the mobile network. Must be between `0` and `255`.
	ServicePrecedence pulumi.IntInput
	// A `serviceQosPolicy` block as defined below. The QoS policy to use for packets matching this service. This can be overridden for particular flows using the ruleQosPolicy field in a `pccRule`. If this field is not specified then the `simPolicy` of User Equipment (UE) will define the QoS settings.
	ServiceQosPolicy NetworkServiceServiceQosPolicyPtrInput
	// A mapping of tags which should be assigned to the Mobile Network Service.
	Tags pulumi.StringMapInput
}

func (NetworkServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkServiceArgs)(nil)).Elem()
}

type NetworkServiceInput interface {
	pulumi.Input

	ToNetworkServiceOutput() NetworkServiceOutput
	ToNetworkServiceOutputWithContext(ctx context.Context) NetworkServiceOutput
}

func (*NetworkService) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkService)(nil)).Elem()
}

func (i *NetworkService) ToNetworkServiceOutput() NetworkServiceOutput {
	return i.ToNetworkServiceOutputWithContext(context.Background())
}

func (i *NetworkService) ToNetworkServiceOutputWithContext(ctx context.Context) NetworkServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkServiceOutput)
}

// NetworkServiceArrayInput is an input type that accepts NetworkServiceArray and NetworkServiceArrayOutput values.
// You can construct a concrete instance of `NetworkServiceArrayInput` via:
//
//	NetworkServiceArray{ NetworkServiceArgs{...} }
type NetworkServiceArrayInput interface {
	pulumi.Input

	ToNetworkServiceArrayOutput() NetworkServiceArrayOutput
	ToNetworkServiceArrayOutputWithContext(context.Context) NetworkServiceArrayOutput
}

type NetworkServiceArray []NetworkServiceInput

func (NetworkServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkService)(nil)).Elem()
}

func (i NetworkServiceArray) ToNetworkServiceArrayOutput() NetworkServiceArrayOutput {
	return i.ToNetworkServiceArrayOutputWithContext(context.Background())
}

func (i NetworkServiceArray) ToNetworkServiceArrayOutputWithContext(ctx context.Context) NetworkServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkServiceArrayOutput)
}

// NetworkServiceMapInput is an input type that accepts NetworkServiceMap and NetworkServiceMapOutput values.
// You can construct a concrete instance of `NetworkServiceMapInput` via:
//
//	NetworkServiceMap{ "key": NetworkServiceArgs{...} }
type NetworkServiceMapInput interface {
	pulumi.Input

	ToNetworkServiceMapOutput() NetworkServiceMapOutput
	ToNetworkServiceMapOutputWithContext(context.Context) NetworkServiceMapOutput
}

type NetworkServiceMap map[string]NetworkServiceInput

func (NetworkServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkService)(nil)).Elem()
}

func (i NetworkServiceMap) ToNetworkServiceMapOutput() NetworkServiceMapOutput {
	return i.ToNetworkServiceMapOutputWithContext(context.Background())
}

func (i NetworkServiceMap) ToNetworkServiceMapOutputWithContext(ctx context.Context) NetworkServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkServiceMapOutput)
}

type NetworkServiceOutput struct{ *pulumi.OutputState }

func (NetworkServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkService)(nil)).Elem()
}

func (o NetworkServiceOutput) ToNetworkServiceOutput() NetworkServiceOutput {
	return o
}

func (o NetworkServiceOutput) ToNetworkServiceOutputWithContext(ctx context.Context) NetworkServiceOutput {
	return o
}

// Specifies the Azure Region where the Mobile Network Service should exist. Changing this forces a new Mobile Network Service to be created.
func (o NetworkServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkService) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the ID of the Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
func (o NetworkServiceOutput) MobileNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkService) pulumi.StringOutput { return v.MobileNetworkId }).(pulumi.StringOutput)
}

// Specifies the name which should be used for this Mobile Network Service. Changing this forces a new Mobile Network Service to be created.
func (o NetworkServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `pccRule` block as defined below. The set of PCC Rules that make up this service.
func (o NetworkServiceOutput) PccRules() NetworkServicePccRuleArrayOutput {
	return o.ApplyT(func(v *NetworkService) NetworkServicePccRuleArrayOutput { return v.PccRules }).(NetworkServicePccRuleArrayOutput)
}

// A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all services configured in the mobile network. Must be between `0` and `255`.
func (o NetworkServiceOutput) ServicePrecedence() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkService) pulumi.IntOutput { return v.ServicePrecedence }).(pulumi.IntOutput)
}

// A `serviceQosPolicy` block as defined below. The QoS policy to use for packets matching this service. This can be overridden for particular flows using the ruleQosPolicy field in a `pccRule`. If this field is not specified then the `simPolicy` of User Equipment (UE) will define the QoS settings.
func (o NetworkServiceOutput) ServiceQosPolicy() NetworkServiceServiceQosPolicyPtrOutput {
	return o.ApplyT(func(v *NetworkService) NetworkServiceServiceQosPolicyPtrOutput { return v.ServiceQosPolicy }).(NetworkServiceServiceQosPolicyPtrOutput)
}

// A mapping of tags which should be assigned to the Mobile Network Service.
func (o NetworkServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkService) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type NetworkServiceArrayOutput struct{ *pulumi.OutputState }

func (NetworkServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkService)(nil)).Elem()
}

func (o NetworkServiceArrayOutput) ToNetworkServiceArrayOutput() NetworkServiceArrayOutput {
	return o
}

func (o NetworkServiceArrayOutput) ToNetworkServiceArrayOutputWithContext(ctx context.Context) NetworkServiceArrayOutput {
	return o
}

func (o NetworkServiceArrayOutput) Index(i pulumi.IntInput) NetworkServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkService {
		return vs[0].([]*NetworkService)[vs[1].(int)]
	}).(NetworkServiceOutput)
}

type NetworkServiceMapOutput struct{ *pulumi.OutputState }

func (NetworkServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkService)(nil)).Elem()
}

func (o NetworkServiceMapOutput) ToNetworkServiceMapOutput() NetworkServiceMapOutput {
	return o
}

func (o NetworkServiceMapOutput) ToNetworkServiceMapOutputWithContext(ctx context.Context) NetworkServiceMapOutput {
	return o
}

func (o NetworkServiceMapOutput) MapIndex(k pulumi.StringInput) NetworkServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkService {
		return vs[0].(map[string]*NetworkService)[vs[1].(string)]
	}).(NetworkServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkServiceInput)(nil)).Elem(), &NetworkService{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkServiceArrayInput)(nil)).Elem(), NetworkServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkServiceMapInput)(nil)).Elem(), NetworkServiceMap{})
	pulumi.RegisterOutputType(NetworkServiceOutput{})
	pulumi.RegisterOutputType(NetworkServiceArrayOutput{})
	pulumi.RegisterOutputType(NetworkServiceMapOutput{})
}
