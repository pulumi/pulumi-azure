// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mobile

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Mobile Network Sim Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mobile"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetwork, err := mobile.NewNetwork(ctx, "exampleNetwork", &mobile.NetworkArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				MobileCountryCode: pulumi.String("001"),
//				MobileNetworkCode: pulumi.String("01"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleUserAssignedIdentity, err := authorization.LookupUserAssignedIdentity(ctx, &authorization.LookupUserAssignedIdentityArgs{
//				Name:              "name_of_user_assigned_identity",
//				ResourceGroupName: "name_of_resource_group",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.LookupKeyVault(ctx, &keyvault.LookupKeyVaultArgs{
//				Name:              "example-kv",
//				ResourceGroupName: "some-resource-group",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleKey, err := keyvault.LookupKey(ctx, &keyvault.LookupKeyArgs{
//				Name:       "example-key",
//				KeyVaultId: exampleKeyVault.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = mobile.NewNetworkSimGroup(ctx, "exampleNetworkSimGroup", &mobile.NetworkSimGroupArgs{
//				Location:         exampleResourceGroup.Location,
//				MobileNetworkId:  exampleNetwork.ID(),
//				EncryptionKeyUrl: *pulumi.String(exampleKey.Id),
//				Identity: &mobile.NetworkSimGroupIdentityArgs{
//					Type: pulumi.String("SystemAssigned, UserAssigned"),
//					IdentityIds: pulumi.StringArray{
//						*pulumi.String(exampleUserAssignedIdentity.Id),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Mobile Network Sim Groups can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:mobile/networkSimGroup:NetworkSimGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/simGroups/simGroup1
//
// ```
type NetworkSimGroup struct {
	pulumi.CustomResourceState

	// A key to encrypt the SIM data that belongs to this SIM group.
	EncryptionKeyUrl pulumi.StringPtrOutput `pulumi:"encryptionKeyUrl"`
	// An `identity` block as defined below.
	//
	// > **NOTE:** A `UserAssigned` identity must be specified when `encryptionKeyUrl` is specified.
	Identity NetworkSimGroupIdentityPtrOutput `pulumi:"identity"`
	// Specifies the Azure Region where the Mobile Network Sim Groups should exist. Changing this forces a new Mobile Network Sim Group to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The ID of Mobile Network which the Mobile Network Sim Group belongs to. Changing this forces a new Mobile Network Slice to be created.
	MobileNetworkId pulumi.StringOutput `pulumi:"mobileNetworkId"`
	// Specifies the name which should be used for this Mobile Network Sim Groups. Changing this forces a new Mobile Network Sim Group to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A mapping of tags which should be assigned to the Mobile Network Sim Groups.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewNetworkSimGroup registers a new resource with the given unique name, arguments, and options.
func NewNetworkSimGroup(ctx *pulumi.Context,
	name string, args *NetworkSimGroupArgs, opts ...pulumi.ResourceOption) (*NetworkSimGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MobileNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'MobileNetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkSimGroup
	err := ctx.RegisterResource("azure:mobile/networkSimGroup:NetworkSimGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkSimGroup gets an existing NetworkSimGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSimGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkSimGroupState, opts ...pulumi.ResourceOption) (*NetworkSimGroup, error) {
	var resource NetworkSimGroup
	err := ctx.ReadResource("azure:mobile/networkSimGroup:NetworkSimGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkSimGroup resources.
type networkSimGroupState struct {
	// A key to encrypt the SIM data that belongs to this SIM group.
	EncryptionKeyUrl *string `pulumi:"encryptionKeyUrl"`
	// An `identity` block as defined below.
	//
	// > **NOTE:** A `UserAssigned` identity must be specified when `encryptionKeyUrl` is specified.
	Identity *NetworkSimGroupIdentity `pulumi:"identity"`
	// Specifies the Azure Region where the Mobile Network Sim Groups should exist. Changing this forces a new Mobile Network Sim Group to be created.
	Location *string `pulumi:"location"`
	// The ID of Mobile Network which the Mobile Network Sim Group belongs to. Changing this forces a new Mobile Network Slice to be created.
	MobileNetworkId *string `pulumi:"mobileNetworkId"`
	// Specifies the name which should be used for this Mobile Network Sim Groups. Changing this forces a new Mobile Network Sim Group to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the Mobile Network Sim Groups.
	Tags map[string]string `pulumi:"tags"`
}

type NetworkSimGroupState struct {
	// A key to encrypt the SIM data that belongs to this SIM group.
	EncryptionKeyUrl pulumi.StringPtrInput
	// An `identity` block as defined below.
	//
	// > **NOTE:** A `UserAssigned` identity must be specified when `encryptionKeyUrl` is specified.
	Identity NetworkSimGroupIdentityPtrInput
	// Specifies the Azure Region where the Mobile Network Sim Groups should exist. Changing this forces a new Mobile Network Sim Group to be created.
	Location pulumi.StringPtrInput
	// The ID of Mobile Network which the Mobile Network Sim Group belongs to. Changing this forces a new Mobile Network Slice to be created.
	MobileNetworkId pulumi.StringPtrInput
	// Specifies the name which should be used for this Mobile Network Sim Groups. Changing this forces a new Mobile Network Sim Group to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Mobile Network Sim Groups.
	Tags pulumi.StringMapInput
}

func (NetworkSimGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSimGroupState)(nil)).Elem()
}

type networkSimGroupArgs struct {
	// A key to encrypt the SIM data that belongs to this SIM group.
	EncryptionKeyUrl *string `pulumi:"encryptionKeyUrl"`
	// An `identity` block as defined below.
	//
	// > **NOTE:** A `UserAssigned` identity must be specified when `encryptionKeyUrl` is specified.
	Identity *NetworkSimGroupIdentity `pulumi:"identity"`
	// Specifies the Azure Region where the Mobile Network Sim Groups should exist. Changing this forces a new Mobile Network Sim Group to be created.
	Location *string `pulumi:"location"`
	// The ID of Mobile Network which the Mobile Network Sim Group belongs to. Changing this forces a new Mobile Network Slice to be created.
	MobileNetworkId string `pulumi:"mobileNetworkId"`
	// Specifies the name which should be used for this Mobile Network Sim Groups. Changing this forces a new Mobile Network Sim Group to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the Mobile Network Sim Groups.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a NetworkSimGroup resource.
type NetworkSimGroupArgs struct {
	// A key to encrypt the SIM data that belongs to this SIM group.
	EncryptionKeyUrl pulumi.StringPtrInput
	// An `identity` block as defined below.
	//
	// > **NOTE:** A `UserAssigned` identity must be specified when `encryptionKeyUrl` is specified.
	Identity NetworkSimGroupIdentityPtrInput
	// Specifies the Azure Region where the Mobile Network Sim Groups should exist. Changing this forces a new Mobile Network Sim Group to be created.
	Location pulumi.StringPtrInput
	// The ID of Mobile Network which the Mobile Network Sim Group belongs to. Changing this forces a new Mobile Network Slice to be created.
	MobileNetworkId pulumi.StringInput
	// Specifies the name which should be used for this Mobile Network Sim Groups. Changing this forces a new Mobile Network Sim Group to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Mobile Network Sim Groups.
	Tags pulumi.StringMapInput
}

func (NetworkSimGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSimGroupArgs)(nil)).Elem()
}

type NetworkSimGroupInput interface {
	pulumi.Input

	ToNetworkSimGroupOutput() NetworkSimGroupOutput
	ToNetworkSimGroupOutputWithContext(ctx context.Context) NetworkSimGroupOutput
}

func (*NetworkSimGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSimGroup)(nil)).Elem()
}

func (i *NetworkSimGroup) ToNetworkSimGroupOutput() NetworkSimGroupOutput {
	return i.ToNetworkSimGroupOutputWithContext(context.Background())
}

func (i *NetworkSimGroup) ToNetworkSimGroupOutputWithContext(ctx context.Context) NetworkSimGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSimGroupOutput)
}

// NetworkSimGroupArrayInput is an input type that accepts NetworkSimGroupArray and NetworkSimGroupArrayOutput values.
// You can construct a concrete instance of `NetworkSimGroupArrayInput` via:
//
//	NetworkSimGroupArray{ NetworkSimGroupArgs{...} }
type NetworkSimGroupArrayInput interface {
	pulumi.Input

	ToNetworkSimGroupArrayOutput() NetworkSimGroupArrayOutput
	ToNetworkSimGroupArrayOutputWithContext(context.Context) NetworkSimGroupArrayOutput
}

type NetworkSimGroupArray []NetworkSimGroupInput

func (NetworkSimGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSimGroup)(nil)).Elem()
}

func (i NetworkSimGroupArray) ToNetworkSimGroupArrayOutput() NetworkSimGroupArrayOutput {
	return i.ToNetworkSimGroupArrayOutputWithContext(context.Background())
}

func (i NetworkSimGroupArray) ToNetworkSimGroupArrayOutputWithContext(ctx context.Context) NetworkSimGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSimGroupArrayOutput)
}

// NetworkSimGroupMapInput is an input type that accepts NetworkSimGroupMap and NetworkSimGroupMapOutput values.
// You can construct a concrete instance of `NetworkSimGroupMapInput` via:
//
//	NetworkSimGroupMap{ "key": NetworkSimGroupArgs{...} }
type NetworkSimGroupMapInput interface {
	pulumi.Input

	ToNetworkSimGroupMapOutput() NetworkSimGroupMapOutput
	ToNetworkSimGroupMapOutputWithContext(context.Context) NetworkSimGroupMapOutput
}

type NetworkSimGroupMap map[string]NetworkSimGroupInput

func (NetworkSimGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSimGroup)(nil)).Elem()
}

func (i NetworkSimGroupMap) ToNetworkSimGroupMapOutput() NetworkSimGroupMapOutput {
	return i.ToNetworkSimGroupMapOutputWithContext(context.Background())
}

func (i NetworkSimGroupMap) ToNetworkSimGroupMapOutputWithContext(ctx context.Context) NetworkSimGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSimGroupMapOutput)
}

type NetworkSimGroupOutput struct{ *pulumi.OutputState }

func (NetworkSimGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSimGroup)(nil)).Elem()
}

func (o NetworkSimGroupOutput) ToNetworkSimGroupOutput() NetworkSimGroupOutput {
	return o
}

func (o NetworkSimGroupOutput) ToNetworkSimGroupOutputWithContext(ctx context.Context) NetworkSimGroupOutput {
	return o
}

// A key to encrypt the SIM data that belongs to this SIM group.
func (o NetworkSimGroupOutput) EncryptionKeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkSimGroup) pulumi.StringPtrOutput { return v.EncryptionKeyUrl }).(pulumi.StringPtrOutput)
}

// An `identity` block as defined below.
//
// > **NOTE:** A `UserAssigned` identity must be specified when `encryptionKeyUrl` is specified.
func (o NetworkSimGroupOutput) Identity() NetworkSimGroupIdentityPtrOutput {
	return o.ApplyT(func(v *NetworkSimGroup) NetworkSimGroupIdentityPtrOutput { return v.Identity }).(NetworkSimGroupIdentityPtrOutput)
}

// Specifies the Azure Region where the Mobile Network Sim Groups should exist. Changing this forces a new Mobile Network Sim Group to be created.
func (o NetworkSimGroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSimGroup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The ID of Mobile Network which the Mobile Network Sim Group belongs to. Changing this forces a new Mobile Network Slice to be created.
func (o NetworkSimGroupOutput) MobileNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSimGroup) pulumi.StringOutput { return v.MobileNetworkId }).(pulumi.StringOutput)
}

// Specifies the name which should be used for this Mobile Network Sim Groups. Changing this forces a new Mobile Network Sim Group to be created.
func (o NetworkSimGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSimGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Mobile Network Sim Groups.
func (o NetworkSimGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkSimGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type NetworkSimGroupArrayOutput struct{ *pulumi.OutputState }

func (NetworkSimGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSimGroup)(nil)).Elem()
}

func (o NetworkSimGroupArrayOutput) ToNetworkSimGroupArrayOutput() NetworkSimGroupArrayOutput {
	return o
}

func (o NetworkSimGroupArrayOutput) ToNetworkSimGroupArrayOutputWithContext(ctx context.Context) NetworkSimGroupArrayOutput {
	return o
}

func (o NetworkSimGroupArrayOutput) Index(i pulumi.IntInput) NetworkSimGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkSimGroup {
		return vs[0].([]*NetworkSimGroup)[vs[1].(int)]
	}).(NetworkSimGroupOutput)
}

type NetworkSimGroupMapOutput struct{ *pulumi.OutputState }

func (NetworkSimGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSimGroup)(nil)).Elem()
}

func (o NetworkSimGroupMapOutput) ToNetworkSimGroupMapOutput() NetworkSimGroupMapOutput {
	return o
}

func (o NetworkSimGroupMapOutput) ToNetworkSimGroupMapOutputWithContext(ctx context.Context) NetworkSimGroupMapOutput {
	return o
}

func (o NetworkSimGroupMapOutput) MapIndex(k pulumi.StringInput) NetworkSimGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkSimGroup {
		return vs[0].(map[string]*NetworkSimGroup)[vs[1].(string)]
	}).(NetworkSimGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSimGroupInput)(nil)).Elem(), &NetworkSimGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSimGroupArrayInput)(nil)).Elem(), NetworkSimGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSimGroupMapInput)(nil)).Elem(), NetworkSimGroupMap{})
	pulumi.RegisterOutputType(NetworkSimGroupOutput{})
	pulumi.RegisterOutputType(NetworkSimGroupArrayOutput{})
	pulumi.RegisterOutputType(NetworkSimGroupMapOutput{})
}
