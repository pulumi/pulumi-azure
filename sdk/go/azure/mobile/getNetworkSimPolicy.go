// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mobile

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Mobile Network Sim Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mobile"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleNetwork, err := mobile.LookupNetwork(ctx, &mobile.LookupNetworkArgs{
//				Name:              "example-mn",
//				ResourceGroupName: "example-rg",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = mobile.LookupNetworkSimPolicy(ctx, &mobile.LookupNetworkSimPolicyArgs{
//				Name:            "example-mnsp",
//				MobileNetworkId: exampleNetwork.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNetworkSimPolicy(ctx *pulumi.Context, args *LookupNetworkSimPolicyArgs, opts ...pulumi.InvokeOption) (*LookupNetworkSimPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkSimPolicyResult
	err := ctx.Invoke("azure:mobile/getNetworkSimPolicy:getNetworkSimPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkSimPolicy.
type LookupNetworkSimPolicyArgs struct {
	// The ID of the Mobile Network which the Sim Policy belongs to.
	MobileNetworkId string `pulumi:"mobileNetworkId"`
	// The name which should be used for this Mobile Network Sim Policies.
	Name string `pulumi:"name"`
}

// A collection of values returned by getNetworkSimPolicy.
type LookupNetworkSimPolicyResult struct {
	// The ID of default slice to use if the UE does not explicitly specify it.
	DefaultSliceId string `pulumi:"defaultSliceId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Azure Region where the Mobile Network Sim Policy should exist.
	Location        string `pulumi:"location"`
	MobileNetworkId string `pulumi:"mobileNetworkId"`
	Name            string `pulumi:"name"`
	// RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
	RatFrequencySelectionPriorityIndex int `pulumi:"ratFrequencySelectionPriorityIndex"`
	// Interval for the UE periodic registration update procedure.
	RegistrationTimerInSeconds int `pulumi:"registrationTimerInSeconds"`
	// An array of `slice` block as defined below. The allowed slices and the settings to use for them.
	Slices []GetNetworkSimPolicySlice `pulumi:"slices"`
	// A mapping of tags which should be assigned to the Mobile Network Sim Policies.
	Tags map[string]string `pulumi:"tags"`
	// A `userEquipmentAggregateMaximumBitRate` block as defined below.
	UserEquipmentAggregateMaximumBitRates []GetNetworkSimPolicyUserEquipmentAggregateMaximumBitRate `pulumi:"userEquipmentAggregateMaximumBitRates"`
}

func LookupNetworkSimPolicyOutput(ctx *pulumi.Context, args LookupNetworkSimPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkSimPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkSimPolicyResult, error) {
			args := v.(LookupNetworkSimPolicyArgs)
			r, err := LookupNetworkSimPolicy(ctx, &args, opts...)
			var s LookupNetworkSimPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetworkSimPolicyResultOutput)
}

// A collection of arguments for invoking getNetworkSimPolicy.
type LookupNetworkSimPolicyOutputArgs struct {
	// The ID of the Mobile Network which the Sim Policy belongs to.
	MobileNetworkId pulumi.StringInput `pulumi:"mobileNetworkId"`
	// The name which should be used for this Mobile Network Sim Policies.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupNetworkSimPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkSimPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkSimPolicy.
type LookupNetworkSimPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkSimPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkSimPolicyResult)(nil)).Elem()
}

func (o LookupNetworkSimPolicyResultOutput) ToLookupNetworkSimPolicyResultOutput() LookupNetworkSimPolicyResultOutput {
	return o
}

func (o LookupNetworkSimPolicyResultOutput) ToLookupNetworkSimPolicyResultOutputWithContext(ctx context.Context) LookupNetworkSimPolicyResultOutput {
	return o
}

// The ID of default slice to use if the UE does not explicitly specify it.
func (o LookupNetworkSimPolicyResultOutput) DefaultSliceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkSimPolicyResult) string { return v.DefaultSliceId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNetworkSimPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkSimPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Azure Region where the Mobile Network Sim Policy should exist.
func (o LookupNetworkSimPolicyResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkSimPolicyResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupNetworkSimPolicyResultOutput) MobileNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkSimPolicyResult) string { return v.MobileNetworkId }).(pulumi.StringOutput)
}

func (o LookupNetworkSimPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkSimPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
func (o LookupNetworkSimPolicyResultOutput) RatFrequencySelectionPriorityIndex() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkSimPolicyResult) int { return v.RatFrequencySelectionPriorityIndex }).(pulumi.IntOutput)
}

// Interval for the UE periodic registration update procedure.
func (o LookupNetworkSimPolicyResultOutput) RegistrationTimerInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkSimPolicyResult) int { return v.RegistrationTimerInSeconds }).(pulumi.IntOutput)
}

// An array of `slice` block as defined below. The allowed slices and the settings to use for them.
func (o LookupNetworkSimPolicyResultOutput) Slices() GetNetworkSimPolicySliceArrayOutput {
	return o.ApplyT(func(v LookupNetworkSimPolicyResult) []GetNetworkSimPolicySlice { return v.Slices }).(GetNetworkSimPolicySliceArrayOutput)
}

// A mapping of tags which should be assigned to the Mobile Network Sim Policies.
func (o LookupNetworkSimPolicyResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNetworkSimPolicyResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// A `userEquipmentAggregateMaximumBitRate` block as defined below.
func (o LookupNetworkSimPolicyResultOutput) UserEquipmentAggregateMaximumBitRates() GetNetworkSimPolicyUserEquipmentAggregateMaximumBitRateArrayOutput {
	return o.ApplyT(func(v LookupNetworkSimPolicyResult) []GetNetworkSimPolicyUserEquipmentAggregateMaximumBitRate {
		return v.UserEquipmentAggregateMaximumBitRates
	}).(GetNetworkSimPolicyUserEquipmentAggregateMaximumBitRateArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkSimPolicyResultOutput{})
}
