// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mobile

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Mobile Network Slice.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mobile"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mobile.LookupNetwork(ctx, &mobile.LookupNetworkArgs{
//				Name:              "example-mn",
//				ResourceGroupName: "example-rg",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = mobile.LookupNetworkSlice(ctx, &mobile.LookupNetworkSliceArgs{
//				Name:            "example-mns",
//				MobileNetworkId: data.Azurerm_mobile_network.Test.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNetworkSlice(ctx *pulumi.Context, args *LookupNetworkSliceArgs, opts ...pulumi.InvokeOption) (*LookupNetworkSliceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkSliceResult
	err := ctx.Invoke("azure:mobile/getNetworkSlice:getNetworkSlice", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkSlice.
type LookupNetworkSliceArgs struct {
	// The ID of Mobile Network which the Mobile Network Slice belongs to.
	MobileNetworkId string `pulumi:"mobileNetworkId"`
	// Specifies the name which should be used for this Mobile Network Slice.
	Name string `pulumi:"name"`
}

// A collection of values returned by getNetworkSlice.
type LookupNetworkSliceResult struct {
	// A description of this Mobile Network Slice.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Azure Region where the Mobile Network Slice exists.
	Location        string `pulumi:"location"`
	MobileNetworkId string `pulumi:"mobileNetworkId"`
	Name            string `pulumi:"name"`
	// A `singleNetworkSliceSelectionAssistanceInformation` block as defined below. Single-network slice selection assistance information (S-NSSAI).
	SingleNetworkSliceSelectionAssistanceInformations []GetNetworkSliceSingleNetworkSliceSelectionAssistanceInformation `pulumi:"singleNetworkSliceSelectionAssistanceInformations"`
	// A mapping of tags which are assigned to the Mobile Network Slice.
	Tags map[string]string `pulumi:"tags"`
}

func LookupNetworkSliceOutput(ctx *pulumi.Context, args LookupNetworkSliceOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkSliceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkSliceResult, error) {
			args := v.(LookupNetworkSliceArgs)
			r, err := LookupNetworkSlice(ctx, &args, opts...)
			var s LookupNetworkSliceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetworkSliceResultOutput)
}

// A collection of arguments for invoking getNetworkSlice.
type LookupNetworkSliceOutputArgs struct {
	// The ID of Mobile Network which the Mobile Network Slice belongs to.
	MobileNetworkId pulumi.StringInput `pulumi:"mobileNetworkId"`
	// Specifies the name which should be used for this Mobile Network Slice.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupNetworkSliceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkSliceArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkSlice.
type LookupNetworkSliceResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkSliceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkSliceResult)(nil)).Elem()
}

func (o LookupNetworkSliceResultOutput) ToLookupNetworkSliceResultOutput() LookupNetworkSliceResultOutput {
	return o
}

func (o LookupNetworkSliceResultOutput) ToLookupNetworkSliceResultOutputWithContext(ctx context.Context) LookupNetworkSliceResultOutput {
	return o
}

// A description of this Mobile Network Slice.
func (o LookupNetworkSliceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkSliceResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNetworkSliceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkSliceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Azure Region where the Mobile Network Slice exists.
func (o LookupNetworkSliceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkSliceResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupNetworkSliceResultOutput) MobileNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkSliceResult) string { return v.MobileNetworkId }).(pulumi.StringOutput)
}

func (o LookupNetworkSliceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkSliceResult) string { return v.Name }).(pulumi.StringOutput)
}

// A `singleNetworkSliceSelectionAssistanceInformation` block as defined below. Single-network slice selection assistance information (S-NSSAI).
func (o LookupNetworkSliceResultOutput) SingleNetworkSliceSelectionAssistanceInformations() GetNetworkSliceSingleNetworkSliceSelectionAssistanceInformationArrayOutput {
	return o.ApplyT(func(v LookupNetworkSliceResult) []GetNetworkSliceSingleNetworkSliceSelectionAssistanceInformation {
		return v.SingleNetworkSliceSelectionAssistanceInformations
	}).(GetNetworkSliceSingleNetworkSliceSelectionAssistanceInformationArrayOutput)
}

// A mapping of tags which are assigned to the Mobile Network Slice.
func (o LookupNetworkSliceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNetworkSliceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkSliceResultOutput{})
}
