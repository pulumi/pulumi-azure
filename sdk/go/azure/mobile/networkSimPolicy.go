// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mobile

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Mobile Network Sim Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	mobile/network "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/mobile/network"
//	mobile/networkDataNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/mobile/networkDataNetwork"
//	mobile/networkService "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/mobile/networkService"
//	mobile/networkSimPolicy "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/mobile/networkSimPolicy"
//	mobile/networkSlice "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/mobile/networkSlice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// example, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "example-resources",
// Location: "West Europe",
// })
// if err != nil {
// return err
// }
// exampleNetwork, err := mobile/network.NewNetwork(ctx, "example", &mobile/network.NetworkArgs{
// Name: "example-mn",
// Location: example.Location,
// ResourceGroupName: example.Name,
// MobileCountryCode: "001",
// MobileNetworkCode: "01",
// })
// if err != nil {
// return err
// }
// exampleNetworkDataNetwork, err := mobile/networkDataNetwork.NewNetworkDataNetwork(ctx, "example", &mobile/networkDataNetwork.NetworkDataNetworkArgs{
// Name: "example-mndn",
// MobileNetworkId: exampleNetwork.Id,
// Location: example.Location,
// })
// if err != nil {
// return err
// }
// exampleNetworkService, err := mobile/networkService.NewNetworkService(ctx, "example", &mobile/networkService.NetworkServiceArgs{
// Name: "example-mns",
// MobileNetworkId: exampleNetwork.Id,
// Location: example.Location,
// ServicePrecedence: 0,
// PccRules: []map[string]interface{}{
// map[string]interface{}{
// "name": "default-rule",
// "precedence": 1,
// "trafficControlEnabled": true,
// "serviceDataFlowTemplates": []map[string]interface{}{
// map[string]interface{}{
// "direction": "Uplink",
// "name": "IP-to-server",
// "ports": []interface{}{
// },
// "protocols": []string{
// "ip",
// },
// "remoteIpLists": []string{
// "10.3.4.0/24",
// },
// },
// },
// },
// },
// })
// if err != nil {
// return err
// }
// exampleNetworkSlice, err := mobile/networkSlice.NewNetworkSlice(ctx, "example", &mobile/networkSlice.NetworkSliceArgs{
// Name: "example-mns",
// MobileNetworkId: exampleNetwork.Id,
// Location: example.Location,
// SingleNetworkSliceSelectionAssistanceInformation: map[string]interface{}{
// "sliceServiceType": 1,
// },
// })
// if err != nil {
// return err
// }
// _, err = mobile/networkSimPolicy.NewNetworkSimPolicy(ctx, "example", &mobile/networkSimPolicy.NetworkSimPolicyArgs{
// Name: "example-mnsp",
// MobileNetworkId: exampleNetwork.Id,
// Location: example.Location,
// RegistrationTimerInSeconds: 3240,
// DefaultSliceId: exampleNetworkSlice.Id,
// Slices: []map[string]interface{}{
// map[string]interface{}{
// "defaultDataNetworkId": exampleNetworkDataNetwork.Id,
// "sliceId": exampleNetworkSlice.Id,
// "dataNetworks": []map[string]interface{}{
// map[string]interface{}{
// "dataNetworkId": exampleNetworkDataNetwork.Id,
// "allocationAndRetentionPriorityLevel": 9,
// "defaultSessionType": "IPv4",
// "qosIndicator": 9,
// "preemptionCapability": "NotPreempt",
// "preemptionVulnerability": "Preemptable",
// "allowedServicesIds": []interface{}{
// exampleNetworkService.Id,
// },
// "sessionAggregateMaximumBitRate": map[string]interface{}{
// "downlink": "1 Gbps",
// "uplink": "500 Mbps",
// },
// },
// },
// },
// },
// UserEquipmentAggregateMaximumBitRate: map[string]interface{}{
// "downlink": "1 Gbps",
// "uplink": "500 Mbps",
// },
// Tags: map[string]interface{}{
// "key": "value",
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// Mobile Network Sim Policies can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:mobile/networkSimPolicy:NetworkSimPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.MobileNetwork/mobileNetworks/mobileNetwork1/simPolicies/simPolicy1
// ```
type NetworkSimPolicy struct {
	pulumi.CustomResourceState

	// The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
	DefaultSliceId pulumi.StringOutput `pulumi:"defaultSliceId"`
	// Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
	MobileNetworkId pulumi.StringOutput `pulumi:"mobileNetworkId"`
	// The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
	RatFrequencySelectionPriorityIndex pulumi.IntPtrOutput `pulumi:"ratFrequencySelectionPriorityIndex"`
	// Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
	RegistrationTimerInSeconds pulumi.IntPtrOutput `pulumi:"registrationTimerInSeconds"`
	// An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
	Slices NetworkSimPolicySliceArrayOutput `pulumi:"slices"`
	// A mapping of tags which should be assigned to the Mobile Network Sim Policies.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A `userEquipmentAggregateMaximumBitRate` block as defined below.
	UserEquipmentAggregateMaximumBitRate NetworkSimPolicyUserEquipmentAggregateMaximumBitRateOutput `pulumi:"userEquipmentAggregateMaximumBitRate"`
}

// NewNetworkSimPolicy registers a new resource with the given unique name, arguments, and options.
func NewNetworkSimPolicy(ctx *pulumi.Context,
	name string, args *NetworkSimPolicyArgs, opts ...pulumi.ResourceOption) (*NetworkSimPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultSliceId == nil {
		return nil, errors.New("invalid value for required argument 'DefaultSliceId'")
	}
	if args.MobileNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'MobileNetworkId'")
	}
	if args.Slices == nil {
		return nil, errors.New("invalid value for required argument 'Slices'")
	}
	if args.UserEquipmentAggregateMaximumBitRate == nil {
		return nil, errors.New("invalid value for required argument 'UserEquipmentAggregateMaximumBitRate'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkSimPolicy
	err := ctx.RegisterResource("azure:mobile/networkSimPolicy:NetworkSimPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkSimPolicy gets an existing NetworkSimPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSimPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkSimPolicyState, opts ...pulumi.ResourceOption) (*NetworkSimPolicy, error) {
	var resource NetworkSimPolicy
	err := ctx.ReadResource("azure:mobile/networkSimPolicy:NetworkSimPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkSimPolicy resources.
type networkSimPolicyState struct {
	// The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
	DefaultSliceId *string `pulumi:"defaultSliceId"`
	// Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
	Location *string `pulumi:"location"`
	// The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
	MobileNetworkId *string `pulumi:"mobileNetworkId"`
	// The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
	Name *string `pulumi:"name"`
	// RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
	RatFrequencySelectionPriorityIndex *int `pulumi:"ratFrequencySelectionPriorityIndex"`
	// Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
	RegistrationTimerInSeconds *int `pulumi:"registrationTimerInSeconds"`
	// An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
	Slices []NetworkSimPolicySlice `pulumi:"slices"`
	// A mapping of tags which should be assigned to the Mobile Network Sim Policies.
	Tags map[string]string `pulumi:"tags"`
	// A `userEquipmentAggregateMaximumBitRate` block as defined below.
	UserEquipmentAggregateMaximumBitRate *NetworkSimPolicyUserEquipmentAggregateMaximumBitRate `pulumi:"userEquipmentAggregateMaximumBitRate"`
}

type NetworkSimPolicyState struct {
	// The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
	DefaultSliceId pulumi.StringPtrInput
	// Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
	Location pulumi.StringPtrInput
	// The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
	MobileNetworkId pulumi.StringPtrInput
	// The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
	Name pulumi.StringPtrInput
	// RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
	RatFrequencySelectionPriorityIndex pulumi.IntPtrInput
	// Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
	RegistrationTimerInSeconds pulumi.IntPtrInput
	// An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
	Slices NetworkSimPolicySliceArrayInput
	// A mapping of tags which should be assigned to the Mobile Network Sim Policies.
	Tags pulumi.StringMapInput
	// A `userEquipmentAggregateMaximumBitRate` block as defined below.
	UserEquipmentAggregateMaximumBitRate NetworkSimPolicyUserEquipmentAggregateMaximumBitRatePtrInput
}

func (NetworkSimPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSimPolicyState)(nil)).Elem()
}

type networkSimPolicyArgs struct {
	// The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
	DefaultSliceId string `pulumi:"defaultSliceId"`
	// Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
	Location *string `pulumi:"location"`
	// The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
	MobileNetworkId string `pulumi:"mobileNetworkId"`
	// The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
	Name *string `pulumi:"name"`
	// RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
	RatFrequencySelectionPriorityIndex *int `pulumi:"ratFrequencySelectionPriorityIndex"`
	// Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
	RegistrationTimerInSeconds *int `pulumi:"registrationTimerInSeconds"`
	// An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
	Slices []NetworkSimPolicySlice `pulumi:"slices"`
	// A mapping of tags which should be assigned to the Mobile Network Sim Policies.
	Tags map[string]string `pulumi:"tags"`
	// A `userEquipmentAggregateMaximumBitRate` block as defined below.
	UserEquipmentAggregateMaximumBitRate NetworkSimPolicyUserEquipmentAggregateMaximumBitRate `pulumi:"userEquipmentAggregateMaximumBitRate"`
}

// The set of arguments for constructing a NetworkSimPolicy resource.
type NetworkSimPolicyArgs struct {
	// The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
	DefaultSliceId pulumi.StringInput
	// Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
	Location pulumi.StringPtrInput
	// The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
	MobileNetworkId pulumi.StringInput
	// The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
	Name pulumi.StringPtrInput
	// RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
	RatFrequencySelectionPriorityIndex pulumi.IntPtrInput
	// Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
	RegistrationTimerInSeconds pulumi.IntPtrInput
	// An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
	Slices NetworkSimPolicySliceArrayInput
	// A mapping of tags which should be assigned to the Mobile Network Sim Policies.
	Tags pulumi.StringMapInput
	// A `userEquipmentAggregateMaximumBitRate` block as defined below.
	UserEquipmentAggregateMaximumBitRate NetworkSimPolicyUserEquipmentAggregateMaximumBitRateInput
}

func (NetworkSimPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSimPolicyArgs)(nil)).Elem()
}

type NetworkSimPolicyInput interface {
	pulumi.Input

	ToNetworkSimPolicyOutput() NetworkSimPolicyOutput
	ToNetworkSimPolicyOutputWithContext(ctx context.Context) NetworkSimPolicyOutput
}

func (*NetworkSimPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSimPolicy)(nil)).Elem()
}

func (i *NetworkSimPolicy) ToNetworkSimPolicyOutput() NetworkSimPolicyOutput {
	return i.ToNetworkSimPolicyOutputWithContext(context.Background())
}

func (i *NetworkSimPolicy) ToNetworkSimPolicyOutputWithContext(ctx context.Context) NetworkSimPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSimPolicyOutput)
}

// NetworkSimPolicyArrayInput is an input type that accepts NetworkSimPolicyArray and NetworkSimPolicyArrayOutput values.
// You can construct a concrete instance of `NetworkSimPolicyArrayInput` via:
//
//	NetworkSimPolicyArray{ NetworkSimPolicyArgs{...} }
type NetworkSimPolicyArrayInput interface {
	pulumi.Input

	ToNetworkSimPolicyArrayOutput() NetworkSimPolicyArrayOutput
	ToNetworkSimPolicyArrayOutputWithContext(context.Context) NetworkSimPolicyArrayOutput
}

type NetworkSimPolicyArray []NetworkSimPolicyInput

func (NetworkSimPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSimPolicy)(nil)).Elem()
}

func (i NetworkSimPolicyArray) ToNetworkSimPolicyArrayOutput() NetworkSimPolicyArrayOutput {
	return i.ToNetworkSimPolicyArrayOutputWithContext(context.Background())
}

func (i NetworkSimPolicyArray) ToNetworkSimPolicyArrayOutputWithContext(ctx context.Context) NetworkSimPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSimPolicyArrayOutput)
}

// NetworkSimPolicyMapInput is an input type that accepts NetworkSimPolicyMap and NetworkSimPolicyMapOutput values.
// You can construct a concrete instance of `NetworkSimPolicyMapInput` via:
//
//	NetworkSimPolicyMap{ "key": NetworkSimPolicyArgs{...} }
type NetworkSimPolicyMapInput interface {
	pulumi.Input

	ToNetworkSimPolicyMapOutput() NetworkSimPolicyMapOutput
	ToNetworkSimPolicyMapOutputWithContext(context.Context) NetworkSimPolicyMapOutput
}

type NetworkSimPolicyMap map[string]NetworkSimPolicyInput

func (NetworkSimPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSimPolicy)(nil)).Elem()
}

func (i NetworkSimPolicyMap) ToNetworkSimPolicyMapOutput() NetworkSimPolicyMapOutput {
	return i.ToNetworkSimPolicyMapOutputWithContext(context.Background())
}

func (i NetworkSimPolicyMap) ToNetworkSimPolicyMapOutputWithContext(ctx context.Context) NetworkSimPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSimPolicyMapOutput)
}

type NetworkSimPolicyOutput struct{ *pulumi.OutputState }

func (NetworkSimPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSimPolicy)(nil)).Elem()
}

func (o NetworkSimPolicyOutput) ToNetworkSimPolicyOutput() NetworkSimPolicyOutput {
	return o
}

func (o NetworkSimPolicyOutput) ToNetworkSimPolicyOutputWithContext(ctx context.Context) NetworkSimPolicyOutput {
	return o
}

// The ID of default slice to use if the UE does not explicitly specify it. This slice must exist in the `slice` block.
func (o NetworkSimPolicyOutput) DefaultSliceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSimPolicy) pulumi.StringOutput { return v.DefaultSliceId }).(pulumi.StringOutput)
}

// Specifies the Azure Region where the Mobile Network Sim Policy should exist. Changing this forces a new Mobile Network Sim Policies to be created.
func (o NetworkSimPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSimPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The ID of the Mobile Network which the Sim Policy belongs to. Changing this forces a new Mobile Network Sim Policies to be created.
func (o NetworkSimPolicyOutput) MobileNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSimPolicy) pulumi.StringOutput { return v.MobileNetworkId }).(pulumi.StringOutput)
}

// The name which should be used for this Mobile Network Sim Policies. Changing this forces a new Mobile Network Sim Policies to be created.
func (o NetworkSimPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSimPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413.
func (o NetworkSimPolicyOutput) RatFrequencySelectionPriorityIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkSimPolicy) pulumi.IntPtrOutput { return v.RatFrequencySelectionPriorityIndex }).(pulumi.IntPtrOutput)
}

// Interval for the user equipment periodic registration update procedure. Defaults to `3240`.
func (o NetworkSimPolicyOutput) RegistrationTimerInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkSimPolicy) pulumi.IntPtrOutput { return v.RegistrationTimerInSeconds }).(pulumi.IntPtrOutput)
}

// An array of `slice` block as defined below. The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
func (o NetworkSimPolicyOutput) Slices() NetworkSimPolicySliceArrayOutput {
	return o.ApplyT(func(v *NetworkSimPolicy) NetworkSimPolicySliceArrayOutput { return v.Slices }).(NetworkSimPolicySliceArrayOutput)
}

// A mapping of tags which should be assigned to the Mobile Network Sim Policies.
func (o NetworkSimPolicyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkSimPolicy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A `userEquipmentAggregateMaximumBitRate` block as defined below.
func (o NetworkSimPolicyOutput) UserEquipmentAggregateMaximumBitRate() NetworkSimPolicyUserEquipmentAggregateMaximumBitRateOutput {
	return o.ApplyT(func(v *NetworkSimPolicy) NetworkSimPolicyUserEquipmentAggregateMaximumBitRateOutput {
		return v.UserEquipmentAggregateMaximumBitRate
	}).(NetworkSimPolicyUserEquipmentAggregateMaximumBitRateOutput)
}

type NetworkSimPolicyArrayOutput struct{ *pulumi.OutputState }

func (NetworkSimPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSimPolicy)(nil)).Elem()
}

func (o NetworkSimPolicyArrayOutput) ToNetworkSimPolicyArrayOutput() NetworkSimPolicyArrayOutput {
	return o
}

func (o NetworkSimPolicyArrayOutput) ToNetworkSimPolicyArrayOutputWithContext(ctx context.Context) NetworkSimPolicyArrayOutput {
	return o
}

func (o NetworkSimPolicyArrayOutput) Index(i pulumi.IntInput) NetworkSimPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkSimPolicy {
		return vs[0].([]*NetworkSimPolicy)[vs[1].(int)]
	}).(NetworkSimPolicyOutput)
}

type NetworkSimPolicyMapOutput struct{ *pulumi.OutputState }

func (NetworkSimPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSimPolicy)(nil)).Elem()
}

func (o NetworkSimPolicyMapOutput) ToNetworkSimPolicyMapOutput() NetworkSimPolicyMapOutput {
	return o
}

func (o NetworkSimPolicyMapOutput) ToNetworkSimPolicyMapOutputWithContext(ctx context.Context) NetworkSimPolicyMapOutput {
	return o
}

func (o NetworkSimPolicyMapOutput) MapIndex(k pulumi.StringInput) NetworkSimPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkSimPolicy {
		return vs[0].(map[string]*NetworkSimPolicy)[vs[1].(string)]
	}).(NetworkSimPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSimPolicyInput)(nil)).Elem(), &NetworkSimPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSimPolicyArrayInput)(nil)).Elem(), NetworkSimPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSimPolicyMapInput)(nil)).Elem(), NetworkSimPolicyMap{})
	pulumi.RegisterOutputType(NetworkSimPolicyOutput{})
	pulumi.RegisterOutputType(NetworkSimPolicyArrayOutput{})
	pulumi.RegisterOutputType(NetworkSimPolicyMapOutput{})
}
