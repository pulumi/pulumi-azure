// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthcare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Healthcare Med Tech Service Fhir Destination.
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/eventhub"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/healthcare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleWorkspace, err := healthcare.NewWorkspace(ctx, "exampleWorkspace", &healthcare.WorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleEventHubNamespace, err := eventhub.NewEventHubNamespace(ctx, "exampleEventHubNamespace", &eventhub.EventHubNamespaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleEventHub, err := eventhub.NewEventHub(ctx, "exampleEventHub", &eventhub.EventHubArgs{
//				NamespaceName:     exampleEventHubNamespace.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PartitionCount:    pulumi.Int(1),
//				MessageRetention:  pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			exampleConsumerGroup, err := eventhub.NewConsumerGroup(ctx, "exampleConsumerGroup", &eventhub.ConsumerGroupArgs{
//				NamespaceName:     exampleEventHubNamespace.Name,
//				EventhubName:      exampleEventHub.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleFhirService, err := healthcare.NewFhirService(ctx, "exampleFhirService", &healthcare.FhirServiceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				WorkspaceId:       exampleWorkspace.ID(),
//				Kind:              pulumi.String("fhir-R4"),
//				Authentication: &healthcare.FhirServiceAuthenticationArgs{
//					Authority: pulumi.String("https://login.microsoftonline.com/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"),
//					Audience:  pulumi.String("https://examplefhir.fhir.azurehealthcareapis.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"templateType": "CollectionContent",
//				"template":     []interface{}{},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			exampleMedtechService, err := healthcare.NewMedtechService(ctx, "exampleMedtechService", &healthcare.MedtechServiceArgs{
//				WorkspaceId:               exampleWorkspace.ID(),
//				Location:                  exampleResourceGroup.Location,
//				EventhubNamespaceName:     exampleEventHubNamespace.Name,
//				EventhubName:              exampleEventHub.Name,
//				EventhubConsumerGroupName: exampleConsumerGroup.Name,
//				DeviceMappingJson:         pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON1, err := json.Marshal(map[string]interface{}{
//				"templateType": "CollectionFhirTemplate",
//				"template": []map[string]interface{}{
//					map[string]interface{}{
//						"templateType": "CodeValueFhir",
//						"template": map[string]interface{}{
//							"codes": []map[string]interface{}{
//								map[string]interface{}{
//									"code":    "8867-4",
//									"system":  "http://loinc.org",
//									"display": "Heart rate",
//								},
//							},
//							"periodInterval": 60,
//							"typeName":       "heartrate",
//							"value": map[string]interface{}{
//								"defaultPeriod": 5000,
//								"unit":          "count/min",
//								"valueName":     "hr",
//								"valueType":     "SampledData",
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			_, err = healthcare.NewMedtechServiceFhirDestination(ctx, "exampleMedtechServiceFhirDestination", &healthcare.MedtechServiceFhirDestinationArgs{
//				Location:                          pulumi.String("east us"),
//				MedtechServiceId:                  exampleMedtechService.ID(),
//				DestinationFhirServiceId:          exampleFhirService.ID(),
//				DestinationIdentityResolutionType: pulumi.String("Create"),
//				DestinationFhirMappingJson:        pulumi.String(json1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Healthcare Med Tech Service Fhir Destination can be imported using the resource`id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:healthcare/medtechServiceFhirDestination:MedtechServiceFhirDestination example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotConnectors/iotconnector1/fhirDestinations/destination1
//
// ```
type MedtechServiceFhirDestination struct {
	pulumi.CustomResourceState

	// Specifies the destination Fhir mappings of the Med Tech Service Fhir Destination.
	DestinationFhirMappingJson pulumi.StringOutput `pulumi:"destinationFhirMappingJson"`
	// Specifies the destination fhir service id of the Med Tech Service Fhir Destination.
	DestinationFhirServiceId pulumi.StringOutput `pulumi:"destinationFhirServiceId"`
	// Specifies the destination identity resolution type where the Healthcare Med Tech Service Fhir Destination should be created. Possible values are `Create`, `Lookup`.
	DestinationIdentityResolutionType pulumi.StringOutput `pulumi:"destinationIdentityResolutionType"`
	// Specifies the Azure Region where the Healthcare Med Tech Service Fhir Destination should be created. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the Healthcare Med Tech Service where the Healthcare Med Tech Service Fhir Destination should exist. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	MedtechServiceId pulumi.StringOutput `pulumi:"medtechServiceId"`
	// Specifies the name of the Healthcare Med Tech Service Fhir Destination. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewMedtechServiceFhirDestination registers a new resource with the given unique name, arguments, and options.
func NewMedtechServiceFhirDestination(ctx *pulumi.Context,
	name string, args *MedtechServiceFhirDestinationArgs, opts ...pulumi.ResourceOption) (*MedtechServiceFhirDestination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationFhirMappingJson == nil {
		return nil, errors.New("invalid value for required argument 'DestinationFhirMappingJson'")
	}
	if args.DestinationFhirServiceId == nil {
		return nil, errors.New("invalid value for required argument 'DestinationFhirServiceId'")
	}
	if args.DestinationIdentityResolutionType == nil {
		return nil, errors.New("invalid value for required argument 'DestinationIdentityResolutionType'")
	}
	if args.MedtechServiceId == nil {
		return nil, errors.New("invalid value for required argument 'MedtechServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MedtechServiceFhirDestination
	err := ctx.RegisterResource("azure:healthcare/medtechServiceFhirDestination:MedtechServiceFhirDestination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMedtechServiceFhirDestination gets an existing MedtechServiceFhirDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMedtechServiceFhirDestination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MedtechServiceFhirDestinationState, opts ...pulumi.ResourceOption) (*MedtechServiceFhirDestination, error) {
	var resource MedtechServiceFhirDestination
	err := ctx.ReadResource("azure:healthcare/medtechServiceFhirDestination:MedtechServiceFhirDestination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MedtechServiceFhirDestination resources.
type medtechServiceFhirDestinationState struct {
	// Specifies the destination Fhir mappings of the Med Tech Service Fhir Destination.
	DestinationFhirMappingJson *string `pulumi:"destinationFhirMappingJson"`
	// Specifies the destination fhir service id of the Med Tech Service Fhir Destination.
	DestinationFhirServiceId *string `pulumi:"destinationFhirServiceId"`
	// Specifies the destination identity resolution type where the Healthcare Med Tech Service Fhir Destination should be created. Possible values are `Create`, `Lookup`.
	DestinationIdentityResolutionType *string `pulumi:"destinationIdentityResolutionType"`
	// Specifies the Azure Region where the Healthcare Med Tech Service Fhir Destination should be created. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Healthcare Med Tech Service where the Healthcare Med Tech Service Fhir Destination should exist. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	MedtechServiceId *string `pulumi:"medtechServiceId"`
	// Specifies the name of the Healthcare Med Tech Service Fhir Destination. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	Name *string `pulumi:"name"`
}

type MedtechServiceFhirDestinationState struct {
	// Specifies the destination Fhir mappings of the Med Tech Service Fhir Destination.
	DestinationFhirMappingJson pulumi.StringPtrInput
	// Specifies the destination fhir service id of the Med Tech Service Fhir Destination.
	DestinationFhirServiceId pulumi.StringPtrInput
	// Specifies the destination identity resolution type where the Healthcare Med Tech Service Fhir Destination should be created. Possible values are `Create`, `Lookup`.
	DestinationIdentityResolutionType pulumi.StringPtrInput
	// Specifies the Azure Region where the Healthcare Med Tech Service Fhir Destination should be created. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Healthcare Med Tech Service where the Healthcare Med Tech Service Fhir Destination should exist. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	MedtechServiceId pulumi.StringPtrInput
	// Specifies the name of the Healthcare Med Tech Service Fhir Destination. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	Name pulumi.StringPtrInput
}

func (MedtechServiceFhirDestinationState) ElementType() reflect.Type {
	return reflect.TypeOf((*medtechServiceFhirDestinationState)(nil)).Elem()
}

type medtechServiceFhirDestinationArgs struct {
	// Specifies the destination Fhir mappings of the Med Tech Service Fhir Destination.
	DestinationFhirMappingJson string `pulumi:"destinationFhirMappingJson"`
	// Specifies the destination fhir service id of the Med Tech Service Fhir Destination.
	DestinationFhirServiceId string `pulumi:"destinationFhirServiceId"`
	// Specifies the destination identity resolution type where the Healthcare Med Tech Service Fhir Destination should be created. Possible values are `Create`, `Lookup`.
	DestinationIdentityResolutionType string `pulumi:"destinationIdentityResolutionType"`
	// Specifies the Azure Region where the Healthcare Med Tech Service Fhir Destination should be created. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Healthcare Med Tech Service where the Healthcare Med Tech Service Fhir Destination should exist. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	MedtechServiceId string `pulumi:"medtechServiceId"`
	// Specifies the name of the Healthcare Med Tech Service Fhir Destination. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a MedtechServiceFhirDestination resource.
type MedtechServiceFhirDestinationArgs struct {
	// Specifies the destination Fhir mappings of the Med Tech Service Fhir Destination.
	DestinationFhirMappingJson pulumi.StringInput
	// Specifies the destination fhir service id of the Med Tech Service Fhir Destination.
	DestinationFhirServiceId pulumi.StringInput
	// Specifies the destination identity resolution type where the Healthcare Med Tech Service Fhir Destination should be created. Possible values are `Create`, `Lookup`.
	DestinationIdentityResolutionType pulumi.StringInput
	// Specifies the Azure Region where the Healthcare Med Tech Service Fhir Destination should be created. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Healthcare Med Tech Service where the Healthcare Med Tech Service Fhir Destination should exist. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	MedtechServiceId pulumi.StringInput
	// Specifies the name of the Healthcare Med Tech Service Fhir Destination. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
	Name pulumi.StringPtrInput
}

func (MedtechServiceFhirDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*medtechServiceFhirDestinationArgs)(nil)).Elem()
}

type MedtechServiceFhirDestinationInput interface {
	pulumi.Input

	ToMedtechServiceFhirDestinationOutput() MedtechServiceFhirDestinationOutput
	ToMedtechServiceFhirDestinationOutputWithContext(ctx context.Context) MedtechServiceFhirDestinationOutput
}

func (*MedtechServiceFhirDestination) ElementType() reflect.Type {
	return reflect.TypeOf((**MedtechServiceFhirDestination)(nil)).Elem()
}

func (i *MedtechServiceFhirDestination) ToMedtechServiceFhirDestinationOutput() MedtechServiceFhirDestinationOutput {
	return i.ToMedtechServiceFhirDestinationOutputWithContext(context.Background())
}

func (i *MedtechServiceFhirDestination) ToMedtechServiceFhirDestinationOutputWithContext(ctx context.Context) MedtechServiceFhirDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedtechServiceFhirDestinationOutput)
}

// MedtechServiceFhirDestinationArrayInput is an input type that accepts MedtechServiceFhirDestinationArray and MedtechServiceFhirDestinationArrayOutput values.
// You can construct a concrete instance of `MedtechServiceFhirDestinationArrayInput` via:
//
//	MedtechServiceFhirDestinationArray{ MedtechServiceFhirDestinationArgs{...} }
type MedtechServiceFhirDestinationArrayInput interface {
	pulumi.Input

	ToMedtechServiceFhirDestinationArrayOutput() MedtechServiceFhirDestinationArrayOutput
	ToMedtechServiceFhirDestinationArrayOutputWithContext(context.Context) MedtechServiceFhirDestinationArrayOutput
}

type MedtechServiceFhirDestinationArray []MedtechServiceFhirDestinationInput

func (MedtechServiceFhirDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MedtechServiceFhirDestination)(nil)).Elem()
}

func (i MedtechServiceFhirDestinationArray) ToMedtechServiceFhirDestinationArrayOutput() MedtechServiceFhirDestinationArrayOutput {
	return i.ToMedtechServiceFhirDestinationArrayOutputWithContext(context.Background())
}

func (i MedtechServiceFhirDestinationArray) ToMedtechServiceFhirDestinationArrayOutputWithContext(ctx context.Context) MedtechServiceFhirDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedtechServiceFhirDestinationArrayOutput)
}

// MedtechServiceFhirDestinationMapInput is an input type that accepts MedtechServiceFhirDestinationMap and MedtechServiceFhirDestinationMapOutput values.
// You can construct a concrete instance of `MedtechServiceFhirDestinationMapInput` via:
//
//	MedtechServiceFhirDestinationMap{ "key": MedtechServiceFhirDestinationArgs{...} }
type MedtechServiceFhirDestinationMapInput interface {
	pulumi.Input

	ToMedtechServiceFhirDestinationMapOutput() MedtechServiceFhirDestinationMapOutput
	ToMedtechServiceFhirDestinationMapOutputWithContext(context.Context) MedtechServiceFhirDestinationMapOutput
}

type MedtechServiceFhirDestinationMap map[string]MedtechServiceFhirDestinationInput

func (MedtechServiceFhirDestinationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MedtechServiceFhirDestination)(nil)).Elem()
}

func (i MedtechServiceFhirDestinationMap) ToMedtechServiceFhirDestinationMapOutput() MedtechServiceFhirDestinationMapOutput {
	return i.ToMedtechServiceFhirDestinationMapOutputWithContext(context.Background())
}

func (i MedtechServiceFhirDestinationMap) ToMedtechServiceFhirDestinationMapOutputWithContext(ctx context.Context) MedtechServiceFhirDestinationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedtechServiceFhirDestinationMapOutput)
}

type MedtechServiceFhirDestinationOutput struct{ *pulumi.OutputState }

func (MedtechServiceFhirDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MedtechServiceFhirDestination)(nil)).Elem()
}

func (o MedtechServiceFhirDestinationOutput) ToMedtechServiceFhirDestinationOutput() MedtechServiceFhirDestinationOutput {
	return o
}

func (o MedtechServiceFhirDestinationOutput) ToMedtechServiceFhirDestinationOutputWithContext(ctx context.Context) MedtechServiceFhirDestinationOutput {
	return o
}

// Specifies the destination Fhir mappings of the Med Tech Service Fhir Destination.
func (o MedtechServiceFhirDestinationOutput) DestinationFhirMappingJson() pulumi.StringOutput {
	return o.ApplyT(func(v *MedtechServiceFhirDestination) pulumi.StringOutput { return v.DestinationFhirMappingJson }).(pulumi.StringOutput)
}

// Specifies the destination fhir service id of the Med Tech Service Fhir Destination.
func (o MedtechServiceFhirDestinationOutput) DestinationFhirServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MedtechServiceFhirDestination) pulumi.StringOutput { return v.DestinationFhirServiceId }).(pulumi.StringOutput)
}

// Specifies the destination identity resolution type where the Healthcare Med Tech Service Fhir Destination should be created. Possible values are `Create`, `Lookup`.
func (o MedtechServiceFhirDestinationOutput) DestinationIdentityResolutionType() pulumi.StringOutput {
	return o.ApplyT(func(v *MedtechServiceFhirDestination) pulumi.StringOutput { return v.DestinationIdentityResolutionType }).(pulumi.StringOutput)
}

// Specifies the Azure Region where the Healthcare Med Tech Service Fhir Destination should be created. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
func (o MedtechServiceFhirDestinationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MedtechServiceFhirDestination) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the Healthcare Med Tech Service where the Healthcare Med Tech Service Fhir Destination should exist. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
func (o MedtechServiceFhirDestinationOutput) MedtechServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MedtechServiceFhirDestination) pulumi.StringOutput { return v.MedtechServiceId }).(pulumi.StringOutput)
}

// Specifies the name of the Healthcare Med Tech Service Fhir Destination. Changing this forces a new Healthcare Med Tech Service Fhir Destination to be created.
func (o MedtechServiceFhirDestinationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MedtechServiceFhirDestination) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type MedtechServiceFhirDestinationArrayOutput struct{ *pulumi.OutputState }

func (MedtechServiceFhirDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MedtechServiceFhirDestination)(nil)).Elem()
}

func (o MedtechServiceFhirDestinationArrayOutput) ToMedtechServiceFhirDestinationArrayOutput() MedtechServiceFhirDestinationArrayOutput {
	return o
}

func (o MedtechServiceFhirDestinationArrayOutput) ToMedtechServiceFhirDestinationArrayOutputWithContext(ctx context.Context) MedtechServiceFhirDestinationArrayOutput {
	return o
}

func (o MedtechServiceFhirDestinationArrayOutput) Index(i pulumi.IntInput) MedtechServiceFhirDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MedtechServiceFhirDestination {
		return vs[0].([]*MedtechServiceFhirDestination)[vs[1].(int)]
	}).(MedtechServiceFhirDestinationOutput)
}

type MedtechServiceFhirDestinationMapOutput struct{ *pulumi.OutputState }

func (MedtechServiceFhirDestinationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MedtechServiceFhirDestination)(nil)).Elem()
}

func (o MedtechServiceFhirDestinationMapOutput) ToMedtechServiceFhirDestinationMapOutput() MedtechServiceFhirDestinationMapOutput {
	return o
}

func (o MedtechServiceFhirDestinationMapOutput) ToMedtechServiceFhirDestinationMapOutputWithContext(ctx context.Context) MedtechServiceFhirDestinationMapOutput {
	return o
}

func (o MedtechServiceFhirDestinationMapOutput) MapIndex(k pulumi.StringInput) MedtechServiceFhirDestinationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MedtechServiceFhirDestination {
		return vs[0].(map[string]*MedtechServiceFhirDestination)[vs[1].(string)]
	}).(MedtechServiceFhirDestinationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MedtechServiceFhirDestinationInput)(nil)).Elem(), &MedtechServiceFhirDestination{})
	pulumi.RegisterInputType(reflect.TypeOf((*MedtechServiceFhirDestinationArrayInput)(nil)).Elem(), MedtechServiceFhirDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MedtechServiceFhirDestinationMapInput)(nil)).Elem(), MedtechServiceFhirDestinationMap{})
	pulumi.RegisterOutputType(MedtechServiceFhirDestinationOutput{})
	pulumi.RegisterOutputType(MedtechServiceFhirDestinationArrayOutput{})
	pulumi.RegisterOutputType(MedtechServiceFhirDestinationMapOutput{})
}
