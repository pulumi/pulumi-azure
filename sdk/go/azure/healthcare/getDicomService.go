// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthcare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Healthcare DICOM Service
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/healthcare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := healthcare.LookupDicomService(ctx, &healthcare.LookupDicomServiceArgs{
//				Name:        "example-healthcare_dicom_service",
//				WorkspaceId: data.Azurerm_healthcare_workspace.Example.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("azurermHealthcareDicomService", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupDicomService(ctx *pulumi.Context, args *LookupDicomServiceArgs, opts ...pulumi.InvokeOption) (*LookupDicomServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDicomServiceResult
	err := ctx.Invoke("azure:healthcare/getDicomService:getDicomService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDicomService.
type LookupDicomServiceArgs struct {
	// The name of the Healthcare DICOM Service
	Name string `pulumi:"name"`
	// The id of the Healthcare Workspace in which the Healthcare DICOM Service exists.
	WorkspaceId string `pulumi:"workspaceId"`
}

// A collection of values returned by getDicomService.
type LookupDicomServiceResult struct {
	// The `authentication` block as defined below.
	Authentications []GetDicomServiceAuthentication `pulumi:"authentications"`
	// The provider-assigned unique ID for this managed resource.
	Id         string                    `pulumi:"id"`
	Identities []GetDicomServiceIdentity `pulumi:"identities"`
	// The Azure Region where the Healthcare DICOM Service is located.
	Location         string                           `pulumi:"location"`
	Name             string                           `pulumi:"name"`
	PrivateEndpoints []GetDicomServicePrivateEndpoint `pulumi:"privateEndpoints"`
	// The url of the Healthcare DICOM Services.
	ServiceUrl string `pulumi:"serviceUrl"`
	// A map of tags assigned to the Healthcare DICOM Service.
	Tags        map[string]string `pulumi:"tags"`
	WorkspaceId string            `pulumi:"workspaceId"`
}

func LookupDicomServiceOutput(ctx *pulumi.Context, args LookupDicomServiceOutputArgs, opts ...pulumi.InvokeOption) LookupDicomServiceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDicomServiceResult, error) {
			args := v.(LookupDicomServiceArgs)
			r, err := LookupDicomService(ctx, &args, opts...)
			var s LookupDicomServiceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDicomServiceResultOutput)
}

// A collection of arguments for invoking getDicomService.
type LookupDicomServiceOutputArgs struct {
	// The name of the Healthcare DICOM Service
	Name pulumi.StringInput `pulumi:"name"`
	// The id of the Healthcare Workspace in which the Healthcare DICOM Service exists.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (LookupDicomServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDicomServiceArgs)(nil)).Elem()
}

// A collection of values returned by getDicomService.
type LookupDicomServiceResultOutput struct{ *pulumi.OutputState }

func (LookupDicomServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDicomServiceResult)(nil)).Elem()
}

func (o LookupDicomServiceResultOutput) ToLookupDicomServiceResultOutput() LookupDicomServiceResultOutput {
	return o
}

func (o LookupDicomServiceResultOutput) ToLookupDicomServiceResultOutputWithContext(ctx context.Context) LookupDicomServiceResultOutput {
	return o
}

// The `authentication` block as defined below.
func (o LookupDicomServiceResultOutput) Authentications() GetDicomServiceAuthenticationArrayOutput {
	return o.ApplyT(func(v LookupDicomServiceResult) []GetDicomServiceAuthentication { return v.Authentications }).(GetDicomServiceAuthenticationArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDicomServiceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDicomServiceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDicomServiceResultOutput) Identities() GetDicomServiceIdentityArrayOutput {
	return o.ApplyT(func(v LookupDicomServiceResult) []GetDicomServiceIdentity { return v.Identities }).(GetDicomServiceIdentityArrayOutput)
}

// The Azure Region where the Healthcare DICOM Service is located.
func (o LookupDicomServiceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDicomServiceResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupDicomServiceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDicomServiceResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDicomServiceResultOutput) PrivateEndpoints() GetDicomServicePrivateEndpointArrayOutput {
	return o.ApplyT(func(v LookupDicomServiceResult) []GetDicomServicePrivateEndpoint { return v.PrivateEndpoints }).(GetDicomServicePrivateEndpointArrayOutput)
}

// The url of the Healthcare DICOM Services.
func (o LookupDicomServiceResultOutput) ServiceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDicomServiceResult) string { return v.ServiceUrl }).(pulumi.StringOutput)
}

// A map of tags assigned to the Healthcare DICOM Service.
func (o LookupDicomServiceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDicomServiceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupDicomServiceResultOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDicomServiceResult) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDicomServiceResultOutput{})
}
