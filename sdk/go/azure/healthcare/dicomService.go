// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthcare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Healthcare DICOM Service
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/healthcare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testWorkspace, err := healthcare.NewWorkspace(ctx, "testWorkspace", &healthcare.WorkspaceArgs{
//				ResourceGroupName: pulumi.String("tfex-resource_group"),
//				Location:          pulumi.String("east us"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = healthcare.NewDicomService(ctx, "testDicomService", &healthcare.DicomServiceArgs{
//				WorkspaceId: testWorkspace.ID(),
//				Location:    pulumi.String("east us"),
//				Identity: &healthcare.DicomServiceIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("None"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Healthcare DICOM Service can be imported using the resource`id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:healthcare/dicomService:DicomService example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.HealthcareApis/workspaces/workspace1/dicomServices/service1
//
// ```
type DicomService struct {
	pulumi.CustomResourceState

	// The `authentication` block as defined below.
	Authentications DicomServiceAuthenticationArrayOutput `pulumi:"authentications"`
	// An `identity` block as defined below.
	Identity DicomServiceIdentityPtrOutput `pulumi:"identity"`
	// Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
	Name             pulumi.StringOutput                    `pulumi:"name"`
	PrivateEndpoints DicomServicePrivateEndpointArrayOutput `pulumi:"privateEndpoints"`
	// Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// The url of the Healthcare DICOM Services.
	ServiceUrl pulumi.StringOutput `pulumi:"serviceUrl"`
	// A mapping of tags to assign to the Healthcare DICOM Service.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the id of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewDicomService registers a new resource with the given unique name, arguments, and options.
func NewDicomService(ctx *pulumi.Context,
	name string, args *DicomServiceArgs, opts ...pulumi.ResourceOption) (*DicomService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DicomService
	err := ctx.RegisterResource("azure:healthcare/dicomService:DicomService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDicomService gets an existing DicomService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDicomService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DicomServiceState, opts ...pulumi.ResourceOption) (*DicomService, error) {
	var resource DicomService
	err := ctx.ReadResource("azure:healthcare/dicomService:DicomService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DicomService resources.
type dicomServiceState struct {
	// The `authentication` block as defined below.
	Authentications []DicomServiceAuthentication `pulumi:"authentications"`
	// An `identity` block as defined below.
	Identity *DicomServiceIdentity `pulumi:"identity"`
	// Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
	Name             *string                       `pulumi:"name"`
	PrivateEndpoints []DicomServicePrivateEndpoint `pulumi:"privateEndpoints"`
	// Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The url of the Healthcare DICOM Services.
	ServiceUrl *string `pulumi:"serviceUrl"`
	// A mapping of tags to assign to the Healthcare DICOM Service.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the id of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DicomServiceState struct {
	// The `authentication` block as defined below.
	Authentications DicomServiceAuthenticationArrayInput
	// An `identity` block as defined below.
	Identity DicomServiceIdentityPtrInput
	// Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
	Name             pulumi.StringPtrInput
	PrivateEndpoints DicomServicePrivateEndpointArrayInput
	// Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The url of the Healthcare DICOM Services.
	ServiceUrl pulumi.StringPtrInput
	// A mapping of tags to assign to the Healthcare DICOM Service.
	Tags pulumi.StringMapInput
	// Specifies the id of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
	WorkspaceId pulumi.StringPtrInput
}

func (DicomServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dicomServiceState)(nil)).Elem()
}

type dicomServiceArgs struct {
	// An `identity` block as defined below.
	Identity *DicomServiceIdentity `pulumi:"identity"`
	// Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
	Name *string `pulumi:"name"`
	// Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// A mapping of tags to assign to the Healthcare DICOM Service.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the id of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DicomService resource.
type DicomServiceArgs struct {
	// An `identity` block as defined below.
	Identity DicomServiceIdentityPtrInput
	// Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
	Name pulumi.StringPtrInput
	// Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// A mapping of tags to assign to the Healthcare DICOM Service.
	Tags pulumi.StringMapInput
	// Specifies the id of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
	WorkspaceId pulumi.StringInput
}

func (DicomServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dicomServiceArgs)(nil)).Elem()
}

type DicomServiceInput interface {
	pulumi.Input

	ToDicomServiceOutput() DicomServiceOutput
	ToDicomServiceOutputWithContext(ctx context.Context) DicomServiceOutput
}

func (*DicomService) ElementType() reflect.Type {
	return reflect.TypeOf((**DicomService)(nil)).Elem()
}

func (i *DicomService) ToDicomServiceOutput() DicomServiceOutput {
	return i.ToDicomServiceOutputWithContext(context.Background())
}

func (i *DicomService) ToDicomServiceOutputWithContext(ctx context.Context) DicomServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomServiceOutput)
}

// DicomServiceArrayInput is an input type that accepts DicomServiceArray and DicomServiceArrayOutput values.
// You can construct a concrete instance of `DicomServiceArrayInput` via:
//
//	DicomServiceArray{ DicomServiceArgs{...} }
type DicomServiceArrayInput interface {
	pulumi.Input

	ToDicomServiceArrayOutput() DicomServiceArrayOutput
	ToDicomServiceArrayOutputWithContext(context.Context) DicomServiceArrayOutput
}

type DicomServiceArray []DicomServiceInput

func (DicomServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DicomService)(nil)).Elem()
}

func (i DicomServiceArray) ToDicomServiceArrayOutput() DicomServiceArrayOutput {
	return i.ToDicomServiceArrayOutputWithContext(context.Background())
}

func (i DicomServiceArray) ToDicomServiceArrayOutputWithContext(ctx context.Context) DicomServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomServiceArrayOutput)
}

// DicomServiceMapInput is an input type that accepts DicomServiceMap and DicomServiceMapOutput values.
// You can construct a concrete instance of `DicomServiceMapInput` via:
//
//	DicomServiceMap{ "key": DicomServiceArgs{...} }
type DicomServiceMapInput interface {
	pulumi.Input

	ToDicomServiceMapOutput() DicomServiceMapOutput
	ToDicomServiceMapOutputWithContext(context.Context) DicomServiceMapOutput
}

type DicomServiceMap map[string]DicomServiceInput

func (DicomServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DicomService)(nil)).Elem()
}

func (i DicomServiceMap) ToDicomServiceMapOutput() DicomServiceMapOutput {
	return i.ToDicomServiceMapOutputWithContext(context.Background())
}

func (i DicomServiceMap) ToDicomServiceMapOutputWithContext(ctx context.Context) DicomServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomServiceMapOutput)
}

type DicomServiceOutput struct{ *pulumi.OutputState }

func (DicomServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DicomService)(nil)).Elem()
}

func (o DicomServiceOutput) ToDicomServiceOutput() DicomServiceOutput {
	return o
}

func (o DicomServiceOutput) ToDicomServiceOutputWithContext(ctx context.Context) DicomServiceOutput {
	return o
}

// The `authentication` block as defined below.
func (o DicomServiceOutput) Authentications() DicomServiceAuthenticationArrayOutput {
	return o.ApplyT(func(v *DicomService) DicomServiceAuthenticationArrayOutput { return v.Authentications }).(DicomServiceAuthenticationArrayOutput)
}

// An `identity` block as defined below.
func (o DicomServiceOutput) Identity() DicomServiceIdentityPtrOutput {
	return o.ApplyT(func(v *DicomService) DicomServiceIdentityPtrOutput { return v.Identity }).(DicomServiceIdentityPtrOutput)
}

// Specifies the Azure Region where the Healthcare DICOM Service should be created. Changing this forces a new Healthcare DICOM Service to be created.
func (o DicomServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DicomService) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the Healthcare DICOM Service. Changing this forces a new Healthcare DICOM Service to be created.
func (o DicomServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DicomService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DicomServiceOutput) PrivateEndpoints() DicomServicePrivateEndpointArrayOutput {
	return o.ApplyT(func(v *DicomService) DicomServicePrivateEndpointArrayOutput { return v.PrivateEndpoints }).(DicomServicePrivateEndpointArrayOutput)
}

// Whether to enabled public networks when data plane traffic coming from public networks while private endpoint is enabled. Defaults to `true`.
func (o DicomServiceOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DicomService) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The url of the Healthcare DICOM Services.
func (o DicomServiceOutput) ServiceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *DicomService) pulumi.StringOutput { return v.ServiceUrl }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the Healthcare DICOM Service.
func (o DicomServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DicomService) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the id of the Healthcare Workspace where the Healthcare DICOM Service should exist. Changing this forces a new Healthcare DICOM Service to be created.
func (o DicomServiceOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DicomService) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type DicomServiceArrayOutput struct{ *pulumi.OutputState }

func (DicomServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DicomService)(nil)).Elem()
}

func (o DicomServiceArrayOutput) ToDicomServiceArrayOutput() DicomServiceArrayOutput {
	return o
}

func (o DicomServiceArrayOutput) ToDicomServiceArrayOutputWithContext(ctx context.Context) DicomServiceArrayOutput {
	return o
}

func (o DicomServiceArrayOutput) Index(i pulumi.IntInput) DicomServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DicomService {
		return vs[0].([]*DicomService)[vs[1].(int)]
	}).(DicomServiceOutput)
}

type DicomServiceMapOutput struct{ *pulumi.OutputState }

func (DicomServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DicomService)(nil)).Elem()
}

func (o DicomServiceMapOutput) ToDicomServiceMapOutput() DicomServiceMapOutput {
	return o
}

func (o DicomServiceMapOutput) ToDicomServiceMapOutputWithContext(ctx context.Context) DicomServiceMapOutput {
	return o
}

func (o DicomServiceMapOutput) MapIndex(k pulumi.StringInput) DicomServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DicomService {
		return vs[0].(map[string]*DicomService)[vs[1].(string)]
	}).(DicomServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DicomServiceInput)(nil)).Elem(), &DicomService{})
	pulumi.RegisterInputType(reflect.TypeOf((*DicomServiceArrayInput)(nil)).Elem(), DicomServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DicomServiceMapInput)(nil)).Elem(), DicomServiceMap{})
	pulumi.RegisterOutputType(DicomServiceOutput{})
	pulumi.RegisterOutputType(DicomServiceArrayOutput{})
	pulumi.RegisterOutputType(DicomServiceMapOutput{})
}
