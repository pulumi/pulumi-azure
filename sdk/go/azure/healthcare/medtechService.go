// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package healthcare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Healthcare Med Tech Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/healthcare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("east us"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleWorkspace, err := healthcare.NewWorkspace(ctx, "exampleWorkspace", &healthcare.WorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"templateType": "CollectionContent",
//				"template": []map[string]interface{}{
//					map[string]interface{}{
//						"templateType": "JsonPathContent",
//						"template": map[string]interface{}{
//							"typeName":            "heartrate",
//							"typeMatchExpression": "$..[?(@heartrate)]",
//							"deviceIdExpression":  "$.deviceid",
//							"timestampExpression": "$.measurementdatetime",
//							"values": []map[string]interface{}{
//								map[string]interface{}{
//									"required":        "true",
//									"valueExpression": "$.heartrate",
//									"valueName":       "hr",
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = healthcare.NewMedtechService(ctx, "exampleMedtechService", &healthcare.MedtechServiceArgs{
//				WorkspaceId: exampleWorkspace.ID(),
//				Location:    pulumi.String("east us"),
//				Identity: &healthcare.MedtechServiceIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//				EventhubNamespaceName:     pulumi.String("example-eventhub-namespace"),
//				EventhubName:              pulumi.String("example-eventhub"),
//				EventhubConsumerGroupName: pulumi.String("$Default"),
//				DeviceMappingJson:         pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Healthcare Med Tech Service can be imported using the resource`id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:healthcare/medtechService:MedtechService example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.HealthcareApis/workspaces/workspace1/iotConnectors/iotconnector1
//
// ```
type MedtechService struct {
	pulumi.CustomResourceState

	// Specifies the Device Mappings of the Med Tech Service.
	DeviceMappingJson pulumi.StringOutput `pulumi:"deviceMappingJson"`
	// Specifies the Consumer Group of the Event Hub to connect to.
	EventhubConsumerGroupName pulumi.StringOutput `pulumi:"eventhubConsumerGroupName"`
	// Specifies the name of the Event Hub to connect to.
	EventhubName pulumi.StringOutput `pulumi:"eventhubName"`
	// Specifies the namespace name of the Event Hub to connect to.
	EventhubNamespaceName pulumi.StringOutput `pulumi:"eventhubNamespaceName"`
	// An `identity` block as defined below.
	Identity MedtechServiceIdentityPtrOutput `pulumi:"identity"`
	// Specifies the Azure Region where the Healthcare Med Tech Service should be created. Changing this forces a new Healthcare Med Tech Service to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the Healthcare Med Tech Service. Changing this forces a new Healthcare Med Tech Service to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A mapping of tags to assign to the Healthcare Med Tech Service.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the id of the Healthcare Workspace where the Healthcare Med Tech Service should exist. Changing this forces a new Healthcare Med Tech Service to be created.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewMedtechService registers a new resource with the given unique name, arguments, and options.
func NewMedtechService(ctx *pulumi.Context,
	name string, args *MedtechServiceArgs, opts ...pulumi.ResourceOption) (*MedtechService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceMappingJson == nil {
		return nil, errors.New("invalid value for required argument 'DeviceMappingJson'")
	}
	if args.EventhubConsumerGroupName == nil {
		return nil, errors.New("invalid value for required argument 'EventhubConsumerGroupName'")
	}
	if args.EventhubName == nil {
		return nil, errors.New("invalid value for required argument 'EventhubName'")
	}
	if args.EventhubNamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'EventhubNamespaceName'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MedtechService
	err := ctx.RegisterResource("azure:healthcare/medtechService:MedtechService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMedtechService gets an existing MedtechService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMedtechService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MedtechServiceState, opts ...pulumi.ResourceOption) (*MedtechService, error) {
	var resource MedtechService
	err := ctx.ReadResource("azure:healthcare/medtechService:MedtechService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MedtechService resources.
type medtechServiceState struct {
	// Specifies the Device Mappings of the Med Tech Service.
	DeviceMappingJson *string `pulumi:"deviceMappingJson"`
	// Specifies the Consumer Group of the Event Hub to connect to.
	EventhubConsumerGroupName *string `pulumi:"eventhubConsumerGroupName"`
	// Specifies the name of the Event Hub to connect to.
	EventhubName *string `pulumi:"eventhubName"`
	// Specifies the namespace name of the Event Hub to connect to.
	EventhubNamespaceName *string `pulumi:"eventhubNamespaceName"`
	// An `identity` block as defined below.
	Identity *MedtechServiceIdentity `pulumi:"identity"`
	// Specifies the Azure Region where the Healthcare Med Tech Service should be created. Changing this forces a new Healthcare Med Tech Service to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Healthcare Med Tech Service. Changing this forces a new Healthcare Med Tech Service to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags to assign to the Healthcare Med Tech Service.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the id of the Healthcare Workspace where the Healthcare Med Tech Service should exist. Changing this forces a new Healthcare Med Tech Service to be created.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type MedtechServiceState struct {
	// Specifies the Device Mappings of the Med Tech Service.
	DeviceMappingJson pulumi.StringPtrInput
	// Specifies the Consumer Group of the Event Hub to connect to.
	EventhubConsumerGroupName pulumi.StringPtrInput
	// Specifies the name of the Event Hub to connect to.
	EventhubName pulumi.StringPtrInput
	// Specifies the namespace name of the Event Hub to connect to.
	EventhubNamespaceName pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity MedtechServiceIdentityPtrInput
	// Specifies the Azure Region where the Healthcare Med Tech Service should be created. Changing this forces a new Healthcare Med Tech Service to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Healthcare Med Tech Service. Changing this forces a new Healthcare Med Tech Service to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags to assign to the Healthcare Med Tech Service.
	Tags pulumi.StringMapInput
	// Specifies the id of the Healthcare Workspace where the Healthcare Med Tech Service should exist. Changing this forces a new Healthcare Med Tech Service to be created.
	WorkspaceId pulumi.StringPtrInput
}

func (MedtechServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*medtechServiceState)(nil)).Elem()
}

type medtechServiceArgs struct {
	// Specifies the Device Mappings of the Med Tech Service.
	DeviceMappingJson string `pulumi:"deviceMappingJson"`
	// Specifies the Consumer Group of the Event Hub to connect to.
	EventhubConsumerGroupName string `pulumi:"eventhubConsumerGroupName"`
	// Specifies the name of the Event Hub to connect to.
	EventhubName string `pulumi:"eventhubName"`
	// Specifies the namespace name of the Event Hub to connect to.
	EventhubNamespaceName string `pulumi:"eventhubNamespaceName"`
	// An `identity` block as defined below.
	Identity *MedtechServiceIdentity `pulumi:"identity"`
	// Specifies the Azure Region where the Healthcare Med Tech Service should be created. Changing this forces a new Healthcare Med Tech Service to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Healthcare Med Tech Service. Changing this forces a new Healthcare Med Tech Service to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags to assign to the Healthcare Med Tech Service.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the id of the Healthcare Workspace where the Healthcare Med Tech Service should exist. Changing this forces a new Healthcare Med Tech Service to be created.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a MedtechService resource.
type MedtechServiceArgs struct {
	// Specifies the Device Mappings of the Med Tech Service.
	DeviceMappingJson pulumi.StringInput
	// Specifies the Consumer Group of the Event Hub to connect to.
	EventhubConsumerGroupName pulumi.StringInput
	// Specifies the name of the Event Hub to connect to.
	EventhubName pulumi.StringInput
	// Specifies the namespace name of the Event Hub to connect to.
	EventhubNamespaceName pulumi.StringInput
	// An `identity` block as defined below.
	Identity MedtechServiceIdentityPtrInput
	// Specifies the Azure Region where the Healthcare Med Tech Service should be created. Changing this forces a new Healthcare Med Tech Service to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Healthcare Med Tech Service. Changing this forces a new Healthcare Med Tech Service to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags to assign to the Healthcare Med Tech Service.
	Tags pulumi.StringMapInput
	// Specifies the id of the Healthcare Workspace where the Healthcare Med Tech Service should exist. Changing this forces a new Healthcare Med Tech Service to be created.
	WorkspaceId pulumi.StringInput
}

func (MedtechServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*medtechServiceArgs)(nil)).Elem()
}

type MedtechServiceInput interface {
	pulumi.Input

	ToMedtechServiceOutput() MedtechServiceOutput
	ToMedtechServiceOutputWithContext(ctx context.Context) MedtechServiceOutput
}

func (*MedtechService) ElementType() reflect.Type {
	return reflect.TypeOf((**MedtechService)(nil)).Elem()
}

func (i *MedtechService) ToMedtechServiceOutput() MedtechServiceOutput {
	return i.ToMedtechServiceOutputWithContext(context.Background())
}

func (i *MedtechService) ToMedtechServiceOutputWithContext(ctx context.Context) MedtechServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedtechServiceOutput)
}

// MedtechServiceArrayInput is an input type that accepts MedtechServiceArray and MedtechServiceArrayOutput values.
// You can construct a concrete instance of `MedtechServiceArrayInput` via:
//
//	MedtechServiceArray{ MedtechServiceArgs{...} }
type MedtechServiceArrayInput interface {
	pulumi.Input

	ToMedtechServiceArrayOutput() MedtechServiceArrayOutput
	ToMedtechServiceArrayOutputWithContext(context.Context) MedtechServiceArrayOutput
}

type MedtechServiceArray []MedtechServiceInput

func (MedtechServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MedtechService)(nil)).Elem()
}

func (i MedtechServiceArray) ToMedtechServiceArrayOutput() MedtechServiceArrayOutput {
	return i.ToMedtechServiceArrayOutputWithContext(context.Background())
}

func (i MedtechServiceArray) ToMedtechServiceArrayOutputWithContext(ctx context.Context) MedtechServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedtechServiceArrayOutput)
}

// MedtechServiceMapInput is an input type that accepts MedtechServiceMap and MedtechServiceMapOutput values.
// You can construct a concrete instance of `MedtechServiceMapInput` via:
//
//	MedtechServiceMap{ "key": MedtechServiceArgs{...} }
type MedtechServiceMapInput interface {
	pulumi.Input

	ToMedtechServiceMapOutput() MedtechServiceMapOutput
	ToMedtechServiceMapOutputWithContext(context.Context) MedtechServiceMapOutput
}

type MedtechServiceMap map[string]MedtechServiceInput

func (MedtechServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MedtechService)(nil)).Elem()
}

func (i MedtechServiceMap) ToMedtechServiceMapOutput() MedtechServiceMapOutput {
	return i.ToMedtechServiceMapOutputWithContext(context.Background())
}

func (i MedtechServiceMap) ToMedtechServiceMapOutputWithContext(ctx context.Context) MedtechServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedtechServiceMapOutput)
}

type MedtechServiceOutput struct{ *pulumi.OutputState }

func (MedtechServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MedtechService)(nil)).Elem()
}

func (o MedtechServiceOutput) ToMedtechServiceOutput() MedtechServiceOutput {
	return o
}

func (o MedtechServiceOutput) ToMedtechServiceOutputWithContext(ctx context.Context) MedtechServiceOutput {
	return o
}

// Specifies the Device Mappings of the Med Tech Service.
func (o MedtechServiceOutput) DeviceMappingJson() pulumi.StringOutput {
	return o.ApplyT(func(v *MedtechService) pulumi.StringOutput { return v.DeviceMappingJson }).(pulumi.StringOutput)
}

// Specifies the Consumer Group of the Event Hub to connect to.
func (o MedtechServiceOutput) EventhubConsumerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *MedtechService) pulumi.StringOutput { return v.EventhubConsumerGroupName }).(pulumi.StringOutput)
}

// Specifies the name of the Event Hub to connect to.
func (o MedtechServiceOutput) EventhubName() pulumi.StringOutput {
	return o.ApplyT(func(v *MedtechService) pulumi.StringOutput { return v.EventhubName }).(pulumi.StringOutput)
}

// Specifies the namespace name of the Event Hub to connect to.
func (o MedtechServiceOutput) EventhubNamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *MedtechService) pulumi.StringOutput { return v.EventhubNamespaceName }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o MedtechServiceOutput) Identity() MedtechServiceIdentityPtrOutput {
	return o.ApplyT(func(v *MedtechService) MedtechServiceIdentityPtrOutput { return v.Identity }).(MedtechServiceIdentityPtrOutput)
}

// Specifies the Azure Region where the Healthcare Med Tech Service should be created. Changing this forces a new Healthcare Med Tech Service to be created.
func (o MedtechServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MedtechService) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the Healthcare Med Tech Service. Changing this forces a new Healthcare Med Tech Service to be created.
func (o MedtechServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MedtechService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the Healthcare Med Tech Service.
func (o MedtechServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MedtechService) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the id of the Healthcare Workspace where the Healthcare Med Tech Service should exist. Changing this forces a new Healthcare Med Tech Service to be created.
func (o MedtechServiceOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MedtechService) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type MedtechServiceArrayOutput struct{ *pulumi.OutputState }

func (MedtechServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MedtechService)(nil)).Elem()
}

func (o MedtechServiceArrayOutput) ToMedtechServiceArrayOutput() MedtechServiceArrayOutput {
	return o
}

func (o MedtechServiceArrayOutput) ToMedtechServiceArrayOutputWithContext(ctx context.Context) MedtechServiceArrayOutput {
	return o
}

func (o MedtechServiceArrayOutput) Index(i pulumi.IntInput) MedtechServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MedtechService {
		return vs[0].([]*MedtechService)[vs[1].(int)]
	}).(MedtechServiceOutput)
}

type MedtechServiceMapOutput struct{ *pulumi.OutputState }

func (MedtechServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MedtechService)(nil)).Elem()
}

func (o MedtechServiceMapOutput) ToMedtechServiceMapOutput() MedtechServiceMapOutput {
	return o
}

func (o MedtechServiceMapOutput) ToMedtechServiceMapOutputWithContext(ctx context.Context) MedtechServiceMapOutput {
	return o
}

func (o MedtechServiceMapOutput) MapIndex(k pulumi.StringInput) MedtechServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MedtechService {
		return vs[0].(map[string]*MedtechService)[vs[1].(string)]
	}).(MedtechServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MedtechServiceInput)(nil)).Elem(), &MedtechService{})
	pulumi.RegisterInputType(reflect.TypeOf((*MedtechServiceArrayInput)(nil)).Elem(), MedtechServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MedtechServiceMapInput)(nil)).Elem(), MedtechServiceMap{})
	pulumi.RegisterOutputType(MedtechServiceOutput{})
	pulumi.RegisterOutputType(MedtechServiceArrayOutput{})
	pulumi.RegisterOutputType(MedtechServiceMapOutput{})
}
