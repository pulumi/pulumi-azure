// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AccountActiveDirectory struct {
	// A list of DNS server IP addresses for the Active Directory domain. Only allows `IPv4` address.
	DnsServers []string `pulumi:"dnsServers"`
	// The name of the Active Directory domain.
	Domain string `pulumi:"domain"`
	// The Organizational Unit (OU) within the Active Directory Domain.
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	// The password associated with the `username`.
	Password string `pulumi:"password"`
	// The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.
	SmbServerName string `pulumi:"smbServerName"`
	// The Username of Active Directory Domain Administrator.
	Username string `pulumi:"username"`
}

// AccountActiveDirectoryInput is an input type that accepts AccountActiveDirectoryArgs and AccountActiveDirectoryOutput values.
// You can construct a concrete instance of `AccountActiveDirectoryInput` via:
//
//	AccountActiveDirectoryArgs{...}
type AccountActiveDirectoryInput interface {
	pulumi.Input

	ToAccountActiveDirectoryOutput() AccountActiveDirectoryOutput
	ToAccountActiveDirectoryOutputWithContext(context.Context) AccountActiveDirectoryOutput
}

type AccountActiveDirectoryArgs struct {
	// A list of DNS server IP addresses for the Active Directory domain. Only allows `IPv4` address.
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
	// The name of the Active Directory domain.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The Organizational Unit (OU) within the Active Directory Domain.
	OrganizationalUnit pulumi.StringPtrInput `pulumi:"organizationalUnit"`
	// The password associated with the `username`.
	Password pulumi.StringInput `pulumi:"password"`
	// The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.
	SmbServerName pulumi.StringInput `pulumi:"smbServerName"`
	// The Username of Active Directory Domain Administrator.
	Username pulumi.StringInput `pulumi:"username"`
}

func (AccountActiveDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountActiveDirectory)(nil)).Elem()
}

func (i AccountActiveDirectoryArgs) ToAccountActiveDirectoryOutput() AccountActiveDirectoryOutput {
	return i.ToAccountActiveDirectoryOutputWithContext(context.Background())
}

func (i AccountActiveDirectoryArgs) ToAccountActiveDirectoryOutputWithContext(ctx context.Context) AccountActiveDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountActiveDirectoryOutput)
}

func (i AccountActiveDirectoryArgs) ToAccountActiveDirectoryPtrOutput() AccountActiveDirectoryPtrOutput {
	return i.ToAccountActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i AccountActiveDirectoryArgs) ToAccountActiveDirectoryPtrOutputWithContext(ctx context.Context) AccountActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountActiveDirectoryOutput).ToAccountActiveDirectoryPtrOutputWithContext(ctx)
}

// AccountActiveDirectoryPtrInput is an input type that accepts AccountActiveDirectoryArgs, AccountActiveDirectoryPtr and AccountActiveDirectoryPtrOutput values.
// You can construct a concrete instance of `AccountActiveDirectoryPtrInput` via:
//
//	        AccountActiveDirectoryArgs{...}
//
//	or:
//
//	        nil
type AccountActiveDirectoryPtrInput interface {
	pulumi.Input

	ToAccountActiveDirectoryPtrOutput() AccountActiveDirectoryPtrOutput
	ToAccountActiveDirectoryPtrOutputWithContext(context.Context) AccountActiveDirectoryPtrOutput
}

type accountActiveDirectoryPtrType AccountActiveDirectoryArgs

func AccountActiveDirectoryPtr(v *AccountActiveDirectoryArgs) AccountActiveDirectoryPtrInput {
	return (*accountActiveDirectoryPtrType)(v)
}

func (*accountActiveDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountActiveDirectory)(nil)).Elem()
}

func (i *accountActiveDirectoryPtrType) ToAccountActiveDirectoryPtrOutput() AccountActiveDirectoryPtrOutput {
	return i.ToAccountActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i *accountActiveDirectoryPtrType) ToAccountActiveDirectoryPtrOutputWithContext(ctx context.Context) AccountActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountActiveDirectoryPtrOutput)
}

type AccountActiveDirectoryOutput struct{ *pulumi.OutputState }

func (AccountActiveDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountActiveDirectory)(nil)).Elem()
}

func (o AccountActiveDirectoryOutput) ToAccountActiveDirectoryOutput() AccountActiveDirectoryOutput {
	return o
}

func (o AccountActiveDirectoryOutput) ToAccountActiveDirectoryOutputWithContext(ctx context.Context) AccountActiveDirectoryOutput {
	return o
}

func (o AccountActiveDirectoryOutput) ToAccountActiveDirectoryPtrOutput() AccountActiveDirectoryPtrOutput {
	return o.ToAccountActiveDirectoryPtrOutputWithContext(context.Background())
}

func (o AccountActiveDirectoryOutput) ToAccountActiveDirectoryPtrOutputWithContext(ctx context.Context) AccountActiveDirectoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountActiveDirectory) *AccountActiveDirectory {
		return &v
	}).(AccountActiveDirectoryPtrOutput)
}

// A list of DNS server IP addresses for the Active Directory domain. Only allows `IPv4` address.
func (o AccountActiveDirectoryOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccountActiveDirectory) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// The name of the Active Directory domain.
func (o AccountActiveDirectoryOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v AccountActiveDirectory) string { return v.Domain }).(pulumi.StringOutput)
}

// The Organizational Unit (OU) within the Active Directory Domain.
func (o AccountActiveDirectoryOutput) OrganizationalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountActiveDirectory) *string { return v.OrganizationalUnit }).(pulumi.StringPtrOutput)
}

// The password associated with the `username`.
func (o AccountActiveDirectoryOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v AccountActiveDirectory) string { return v.Password }).(pulumi.StringOutput)
}

// The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.
func (o AccountActiveDirectoryOutput) SmbServerName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountActiveDirectory) string { return v.SmbServerName }).(pulumi.StringOutput)
}

// The Username of Active Directory Domain Administrator.
func (o AccountActiveDirectoryOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v AccountActiveDirectory) string { return v.Username }).(pulumi.StringOutput)
}

type AccountActiveDirectoryPtrOutput struct{ *pulumi.OutputState }

func (AccountActiveDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountActiveDirectory)(nil)).Elem()
}

func (o AccountActiveDirectoryPtrOutput) ToAccountActiveDirectoryPtrOutput() AccountActiveDirectoryPtrOutput {
	return o
}

func (o AccountActiveDirectoryPtrOutput) ToAccountActiveDirectoryPtrOutputWithContext(ctx context.Context) AccountActiveDirectoryPtrOutput {
	return o
}

func (o AccountActiveDirectoryPtrOutput) Elem() AccountActiveDirectoryOutput {
	return o.ApplyT(func(v *AccountActiveDirectory) AccountActiveDirectory {
		if v != nil {
			return *v
		}
		var ret AccountActiveDirectory
		return ret
	}).(AccountActiveDirectoryOutput)
}

// A list of DNS server IP addresses for the Active Directory domain. Only allows `IPv4` address.
func (o AccountActiveDirectoryPtrOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccountActiveDirectory) []string {
		if v == nil {
			return nil
		}
		return v.DnsServers
	}).(pulumi.StringArrayOutput)
}

// The name of the Active Directory domain.
func (o AccountActiveDirectoryPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

// The Organizational Unit (OU) within the Active Directory Domain.
func (o AccountActiveDirectoryPtrOutput) OrganizationalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return v.OrganizationalUnit
	}).(pulumi.StringPtrOutput)
}

// The password associated with the `username`.
func (o AccountActiveDirectoryPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The NetBIOS name which should be used for the NetApp SMB Server, which will be registered as a computer account in the AD and used to mount volumes.
func (o AccountActiveDirectoryPtrOutput) SmbServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return &v.SmbServerName
	}).(pulumi.StringPtrOutput)
}

// The Username of Active Directory Domain Administrator.
func (o AccountActiveDirectoryPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type AccountIdentity struct {
	// The identity id of the user assigned identity to use when type is `UserAssigned`
	IdentityIds []string `pulumi:"identityIds"`
	PrincipalId *string  `pulumi:"principalId"`
	TenantId    *string  `pulumi:"tenantId"`
	// The identity type, which can be `SystemAssigned` or `UserAssigned`. Only one type at a time is supported by Azure NetApp Files.
	Type string `pulumi:"type"`
}

// AccountIdentityInput is an input type that accepts AccountIdentityArgs and AccountIdentityOutput values.
// You can construct a concrete instance of `AccountIdentityInput` via:
//
//	AccountIdentityArgs{...}
type AccountIdentityInput interface {
	pulumi.Input

	ToAccountIdentityOutput() AccountIdentityOutput
	ToAccountIdentityOutputWithContext(context.Context) AccountIdentityOutput
}

type AccountIdentityArgs struct {
	// The identity id of the user assigned identity to use when type is `UserAssigned`
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	PrincipalId pulumi.StringPtrInput   `pulumi:"principalId"`
	TenantId    pulumi.StringPtrInput   `pulumi:"tenantId"`
	// The identity type, which can be `SystemAssigned` or `UserAssigned`. Only one type at a time is supported by Azure NetApp Files.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AccountIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountIdentity)(nil)).Elem()
}

func (i AccountIdentityArgs) ToAccountIdentityOutput() AccountIdentityOutput {
	return i.ToAccountIdentityOutputWithContext(context.Background())
}

func (i AccountIdentityArgs) ToAccountIdentityOutputWithContext(ctx context.Context) AccountIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIdentityOutput)
}

func (i AccountIdentityArgs) ToAccountIdentityPtrOutput() AccountIdentityPtrOutput {
	return i.ToAccountIdentityPtrOutputWithContext(context.Background())
}

func (i AccountIdentityArgs) ToAccountIdentityPtrOutputWithContext(ctx context.Context) AccountIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIdentityOutput).ToAccountIdentityPtrOutputWithContext(ctx)
}

// AccountIdentityPtrInput is an input type that accepts AccountIdentityArgs, AccountIdentityPtr and AccountIdentityPtrOutput values.
// You can construct a concrete instance of `AccountIdentityPtrInput` via:
//
//	        AccountIdentityArgs{...}
//
//	or:
//
//	        nil
type AccountIdentityPtrInput interface {
	pulumi.Input

	ToAccountIdentityPtrOutput() AccountIdentityPtrOutput
	ToAccountIdentityPtrOutputWithContext(context.Context) AccountIdentityPtrOutput
}

type accountIdentityPtrType AccountIdentityArgs

func AccountIdentityPtr(v *AccountIdentityArgs) AccountIdentityPtrInput {
	return (*accountIdentityPtrType)(v)
}

func (*accountIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountIdentity)(nil)).Elem()
}

func (i *accountIdentityPtrType) ToAccountIdentityPtrOutput() AccountIdentityPtrOutput {
	return i.ToAccountIdentityPtrOutputWithContext(context.Background())
}

func (i *accountIdentityPtrType) ToAccountIdentityPtrOutputWithContext(ctx context.Context) AccountIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountIdentityPtrOutput)
}

type AccountIdentityOutput struct{ *pulumi.OutputState }

func (AccountIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountIdentity)(nil)).Elem()
}

func (o AccountIdentityOutput) ToAccountIdentityOutput() AccountIdentityOutput {
	return o
}

func (o AccountIdentityOutput) ToAccountIdentityOutputWithContext(ctx context.Context) AccountIdentityOutput {
	return o
}

func (o AccountIdentityOutput) ToAccountIdentityPtrOutput() AccountIdentityPtrOutput {
	return o.ToAccountIdentityPtrOutputWithContext(context.Background())
}

func (o AccountIdentityOutput) ToAccountIdentityPtrOutputWithContext(ctx context.Context) AccountIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountIdentity) *AccountIdentity {
		return &v
	}).(AccountIdentityPtrOutput)
}

// The identity id of the user assigned identity to use when type is `UserAssigned`
func (o AccountIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccountIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

func (o AccountIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

func (o AccountIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The identity type, which can be `SystemAssigned` or `UserAssigned`. Only one type at a time is supported by Azure NetApp Files.
func (o AccountIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AccountIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type AccountIdentityPtrOutput struct{ *pulumi.OutputState }

func (AccountIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountIdentity)(nil)).Elem()
}

func (o AccountIdentityPtrOutput) ToAccountIdentityPtrOutput() AccountIdentityPtrOutput {
	return o
}

func (o AccountIdentityPtrOutput) ToAccountIdentityPtrOutputWithContext(ctx context.Context) AccountIdentityPtrOutput {
	return o
}

func (o AccountIdentityPtrOutput) Elem() AccountIdentityOutput {
	return o.ApplyT(func(v *AccountIdentity) AccountIdentity {
		if v != nil {
			return *v
		}
		var ret AccountIdentity
		return ret
	}).(AccountIdentityOutput)
}

// The identity id of the user assigned identity to use when type is `UserAssigned`
func (o AccountIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccountIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

func (o AccountIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

func (o AccountIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type, which can be `SystemAssigned` or `UserAssigned`. Only one type at a time is supported by Azure NetApp Files.
func (o AccountIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type SnapshotPolicyDailySchedule struct {
	// Hour of the day that the snapshots will be created, valid range is from 0 to 23.
	Hour int `pulumi:"hour"`
	// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
	Minute int `pulumi:"minute"`
	// How many hourly snapshots to keep, valid range is from 0 to 255.
	SnapshotsToKeep int `pulumi:"snapshotsToKeep"`
}

// SnapshotPolicyDailyScheduleInput is an input type that accepts SnapshotPolicyDailyScheduleArgs and SnapshotPolicyDailyScheduleOutput values.
// You can construct a concrete instance of `SnapshotPolicyDailyScheduleInput` via:
//
//	SnapshotPolicyDailyScheduleArgs{...}
type SnapshotPolicyDailyScheduleInput interface {
	pulumi.Input

	ToSnapshotPolicyDailyScheduleOutput() SnapshotPolicyDailyScheduleOutput
	ToSnapshotPolicyDailyScheduleOutputWithContext(context.Context) SnapshotPolicyDailyScheduleOutput
}

type SnapshotPolicyDailyScheduleArgs struct {
	// Hour of the day that the snapshots will be created, valid range is from 0 to 23.
	Hour pulumi.IntInput `pulumi:"hour"`
	// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
	Minute pulumi.IntInput `pulumi:"minute"`
	// How many hourly snapshots to keep, valid range is from 0 to 255.
	SnapshotsToKeep pulumi.IntInput `pulumi:"snapshotsToKeep"`
}

func (SnapshotPolicyDailyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotPolicyDailySchedule)(nil)).Elem()
}

func (i SnapshotPolicyDailyScheduleArgs) ToSnapshotPolicyDailyScheduleOutput() SnapshotPolicyDailyScheduleOutput {
	return i.ToSnapshotPolicyDailyScheduleOutputWithContext(context.Background())
}

func (i SnapshotPolicyDailyScheduleArgs) ToSnapshotPolicyDailyScheduleOutputWithContext(ctx context.Context) SnapshotPolicyDailyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyDailyScheduleOutput)
}

func (i SnapshotPolicyDailyScheduleArgs) ToSnapshotPolicyDailySchedulePtrOutput() SnapshotPolicyDailySchedulePtrOutput {
	return i.ToSnapshotPolicyDailySchedulePtrOutputWithContext(context.Background())
}

func (i SnapshotPolicyDailyScheduleArgs) ToSnapshotPolicyDailySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyDailySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyDailyScheduleOutput).ToSnapshotPolicyDailySchedulePtrOutputWithContext(ctx)
}

// SnapshotPolicyDailySchedulePtrInput is an input type that accepts SnapshotPolicyDailyScheduleArgs, SnapshotPolicyDailySchedulePtr and SnapshotPolicyDailySchedulePtrOutput values.
// You can construct a concrete instance of `SnapshotPolicyDailySchedulePtrInput` via:
//
//	        SnapshotPolicyDailyScheduleArgs{...}
//
//	or:
//
//	        nil
type SnapshotPolicyDailySchedulePtrInput interface {
	pulumi.Input

	ToSnapshotPolicyDailySchedulePtrOutput() SnapshotPolicyDailySchedulePtrOutput
	ToSnapshotPolicyDailySchedulePtrOutputWithContext(context.Context) SnapshotPolicyDailySchedulePtrOutput
}

type snapshotPolicyDailySchedulePtrType SnapshotPolicyDailyScheduleArgs

func SnapshotPolicyDailySchedulePtr(v *SnapshotPolicyDailyScheduleArgs) SnapshotPolicyDailySchedulePtrInput {
	return (*snapshotPolicyDailySchedulePtrType)(v)
}

func (*snapshotPolicyDailySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPolicyDailySchedule)(nil)).Elem()
}

func (i *snapshotPolicyDailySchedulePtrType) ToSnapshotPolicyDailySchedulePtrOutput() SnapshotPolicyDailySchedulePtrOutput {
	return i.ToSnapshotPolicyDailySchedulePtrOutputWithContext(context.Background())
}

func (i *snapshotPolicyDailySchedulePtrType) ToSnapshotPolicyDailySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyDailySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyDailySchedulePtrOutput)
}

type SnapshotPolicyDailyScheduleOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyDailyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotPolicyDailySchedule)(nil)).Elem()
}

func (o SnapshotPolicyDailyScheduleOutput) ToSnapshotPolicyDailyScheduleOutput() SnapshotPolicyDailyScheduleOutput {
	return o
}

func (o SnapshotPolicyDailyScheduleOutput) ToSnapshotPolicyDailyScheduleOutputWithContext(ctx context.Context) SnapshotPolicyDailyScheduleOutput {
	return o
}

func (o SnapshotPolicyDailyScheduleOutput) ToSnapshotPolicyDailySchedulePtrOutput() SnapshotPolicyDailySchedulePtrOutput {
	return o.ToSnapshotPolicyDailySchedulePtrOutputWithContext(context.Background())
}

func (o SnapshotPolicyDailyScheduleOutput) ToSnapshotPolicyDailySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyDailySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SnapshotPolicyDailySchedule) *SnapshotPolicyDailySchedule {
		return &v
	}).(SnapshotPolicyDailySchedulePtrOutput)
}

// Hour of the day that the snapshots will be created, valid range is from 0 to 23.
func (o SnapshotPolicyDailyScheduleOutput) Hour() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotPolicyDailySchedule) int { return v.Hour }).(pulumi.IntOutput)
}

// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
func (o SnapshotPolicyDailyScheduleOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotPolicyDailySchedule) int { return v.Minute }).(pulumi.IntOutput)
}

// How many hourly snapshots to keep, valid range is from 0 to 255.
func (o SnapshotPolicyDailyScheduleOutput) SnapshotsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotPolicyDailySchedule) int { return v.SnapshotsToKeep }).(pulumi.IntOutput)
}

type SnapshotPolicyDailySchedulePtrOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyDailySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPolicyDailySchedule)(nil)).Elem()
}

func (o SnapshotPolicyDailySchedulePtrOutput) ToSnapshotPolicyDailySchedulePtrOutput() SnapshotPolicyDailySchedulePtrOutput {
	return o
}

func (o SnapshotPolicyDailySchedulePtrOutput) ToSnapshotPolicyDailySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyDailySchedulePtrOutput {
	return o
}

func (o SnapshotPolicyDailySchedulePtrOutput) Elem() SnapshotPolicyDailyScheduleOutput {
	return o.ApplyT(func(v *SnapshotPolicyDailySchedule) SnapshotPolicyDailySchedule {
		if v != nil {
			return *v
		}
		var ret SnapshotPolicyDailySchedule
		return ret
	}).(SnapshotPolicyDailyScheduleOutput)
}

// Hour of the day that the snapshots will be created, valid range is from 0 to 23.
func (o SnapshotPolicyDailySchedulePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotPolicyDailySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.Hour
	}).(pulumi.IntPtrOutput)
}

// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
func (o SnapshotPolicyDailySchedulePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotPolicyDailySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.Minute
	}).(pulumi.IntPtrOutput)
}

// How many hourly snapshots to keep, valid range is from 0 to 255.
func (o SnapshotPolicyDailySchedulePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotPolicyDailySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

type SnapshotPolicyHourlySchedule struct {
	// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
	Minute int `pulumi:"minute"`
	// How many hourly snapshots to keep, valid range is from 0 to 255.
	SnapshotsToKeep int `pulumi:"snapshotsToKeep"`
}

// SnapshotPolicyHourlyScheduleInput is an input type that accepts SnapshotPolicyHourlyScheduleArgs and SnapshotPolicyHourlyScheduleOutput values.
// You can construct a concrete instance of `SnapshotPolicyHourlyScheduleInput` via:
//
//	SnapshotPolicyHourlyScheduleArgs{...}
type SnapshotPolicyHourlyScheduleInput interface {
	pulumi.Input

	ToSnapshotPolicyHourlyScheduleOutput() SnapshotPolicyHourlyScheduleOutput
	ToSnapshotPolicyHourlyScheduleOutputWithContext(context.Context) SnapshotPolicyHourlyScheduleOutput
}

type SnapshotPolicyHourlyScheduleArgs struct {
	// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
	Minute pulumi.IntInput `pulumi:"minute"`
	// How many hourly snapshots to keep, valid range is from 0 to 255.
	SnapshotsToKeep pulumi.IntInput `pulumi:"snapshotsToKeep"`
}

func (SnapshotPolicyHourlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotPolicyHourlySchedule)(nil)).Elem()
}

func (i SnapshotPolicyHourlyScheduleArgs) ToSnapshotPolicyHourlyScheduleOutput() SnapshotPolicyHourlyScheduleOutput {
	return i.ToSnapshotPolicyHourlyScheduleOutputWithContext(context.Background())
}

func (i SnapshotPolicyHourlyScheduleArgs) ToSnapshotPolicyHourlyScheduleOutputWithContext(ctx context.Context) SnapshotPolicyHourlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyHourlyScheduleOutput)
}

func (i SnapshotPolicyHourlyScheduleArgs) ToSnapshotPolicyHourlySchedulePtrOutput() SnapshotPolicyHourlySchedulePtrOutput {
	return i.ToSnapshotPolicyHourlySchedulePtrOutputWithContext(context.Background())
}

func (i SnapshotPolicyHourlyScheduleArgs) ToSnapshotPolicyHourlySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyHourlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyHourlyScheduleOutput).ToSnapshotPolicyHourlySchedulePtrOutputWithContext(ctx)
}

// SnapshotPolicyHourlySchedulePtrInput is an input type that accepts SnapshotPolicyHourlyScheduleArgs, SnapshotPolicyHourlySchedulePtr and SnapshotPolicyHourlySchedulePtrOutput values.
// You can construct a concrete instance of `SnapshotPolicyHourlySchedulePtrInput` via:
//
//	        SnapshotPolicyHourlyScheduleArgs{...}
//
//	or:
//
//	        nil
type SnapshotPolicyHourlySchedulePtrInput interface {
	pulumi.Input

	ToSnapshotPolicyHourlySchedulePtrOutput() SnapshotPolicyHourlySchedulePtrOutput
	ToSnapshotPolicyHourlySchedulePtrOutputWithContext(context.Context) SnapshotPolicyHourlySchedulePtrOutput
}

type snapshotPolicyHourlySchedulePtrType SnapshotPolicyHourlyScheduleArgs

func SnapshotPolicyHourlySchedulePtr(v *SnapshotPolicyHourlyScheduleArgs) SnapshotPolicyHourlySchedulePtrInput {
	return (*snapshotPolicyHourlySchedulePtrType)(v)
}

func (*snapshotPolicyHourlySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPolicyHourlySchedule)(nil)).Elem()
}

func (i *snapshotPolicyHourlySchedulePtrType) ToSnapshotPolicyHourlySchedulePtrOutput() SnapshotPolicyHourlySchedulePtrOutput {
	return i.ToSnapshotPolicyHourlySchedulePtrOutputWithContext(context.Background())
}

func (i *snapshotPolicyHourlySchedulePtrType) ToSnapshotPolicyHourlySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyHourlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyHourlySchedulePtrOutput)
}

type SnapshotPolicyHourlyScheduleOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyHourlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotPolicyHourlySchedule)(nil)).Elem()
}

func (o SnapshotPolicyHourlyScheduleOutput) ToSnapshotPolicyHourlyScheduleOutput() SnapshotPolicyHourlyScheduleOutput {
	return o
}

func (o SnapshotPolicyHourlyScheduleOutput) ToSnapshotPolicyHourlyScheduleOutputWithContext(ctx context.Context) SnapshotPolicyHourlyScheduleOutput {
	return o
}

func (o SnapshotPolicyHourlyScheduleOutput) ToSnapshotPolicyHourlySchedulePtrOutput() SnapshotPolicyHourlySchedulePtrOutput {
	return o.ToSnapshotPolicyHourlySchedulePtrOutputWithContext(context.Background())
}

func (o SnapshotPolicyHourlyScheduleOutput) ToSnapshotPolicyHourlySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyHourlySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SnapshotPolicyHourlySchedule) *SnapshotPolicyHourlySchedule {
		return &v
	}).(SnapshotPolicyHourlySchedulePtrOutput)
}

// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
func (o SnapshotPolicyHourlyScheduleOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotPolicyHourlySchedule) int { return v.Minute }).(pulumi.IntOutput)
}

// How many hourly snapshots to keep, valid range is from 0 to 255.
func (o SnapshotPolicyHourlyScheduleOutput) SnapshotsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotPolicyHourlySchedule) int { return v.SnapshotsToKeep }).(pulumi.IntOutput)
}

type SnapshotPolicyHourlySchedulePtrOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyHourlySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPolicyHourlySchedule)(nil)).Elem()
}

func (o SnapshotPolicyHourlySchedulePtrOutput) ToSnapshotPolicyHourlySchedulePtrOutput() SnapshotPolicyHourlySchedulePtrOutput {
	return o
}

func (o SnapshotPolicyHourlySchedulePtrOutput) ToSnapshotPolicyHourlySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyHourlySchedulePtrOutput {
	return o
}

func (o SnapshotPolicyHourlySchedulePtrOutput) Elem() SnapshotPolicyHourlyScheduleOutput {
	return o.ApplyT(func(v *SnapshotPolicyHourlySchedule) SnapshotPolicyHourlySchedule {
		if v != nil {
			return *v
		}
		var ret SnapshotPolicyHourlySchedule
		return ret
	}).(SnapshotPolicyHourlyScheduleOutput)
}

// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
func (o SnapshotPolicyHourlySchedulePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotPolicyHourlySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.Minute
	}).(pulumi.IntPtrOutput)
}

// How many hourly snapshots to keep, valid range is from 0 to 255.
func (o SnapshotPolicyHourlySchedulePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotPolicyHourlySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

type SnapshotPolicyMonthlySchedule struct {
	// List of the days of the month when the snapshots will be created, valid range is from 1 to 30.
	DaysOfMonths []int `pulumi:"daysOfMonths"`
	// Hour of the day that the snapshots will be created, valid range is from 0 to 23.
	Hour int `pulumi:"hour"`
	// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
	Minute int `pulumi:"minute"`
	// How many hourly snapshots to keep, valid range is from 0 to 255.
	SnapshotsToKeep int `pulumi:"snapshotsToKeep"`
}

// SnapshotPolicyMonthlyScheduleInput is an input type that accepts SnapshotPolicyMonthlyScheduleArgs and SnapshotPolicyMonthlyScheduleOutput values.
// You can construct a concrete instance of `SnapshotPolicyMonthlyScheduleInput` via:
//
//	SnapshotPolicyMonthlyScheduleArgs{...}
type SnapshotPolicyMonthlyScheduleInput interface {
	pulumi.Input

	ToSnapshotPolicyMonthlyScheduleOutput() SnapshotPolicyMonthlyScheduleOutput
	ToSnapshotPolicyMonthlyScheduleOutputWithContext(context.Context) SnapshotPolicyMonthlyScheduleOutput
}

type SnapshotPolicyMonthlyScheduleArgs struct {
	// List of the days of the month when the snapshots will be created, valid range is from 1 to 30.
	DaysOfMonths pulumi.IntArrayInput `pulumi:"daysOfMonths"`
	// Hour of the day that the snapshots will be created, valid range is from 0 to 23.
	Hour pulumi.IntInput `pulumi:"hour"`
	// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
	Minute pulumi.IntInput `pulumi:"minute"`
	// How many hourly snapshots to keep, valid range is from 0 to 255.
	SnapshotsToKeep pulumi.IntInput `pulumi:"snapshotsToKeep"`
}

func (SnapshotPolicyMonthlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotPolicyMonthlySchedule)(nil)).Elem()
}

func (i SnapshotPolicyMonthlyScheduleArgs) ToSnapshotPolicyMonthlyScheduleOutput() SnapshotPolicyMonthlyScheduleOutput {
	return i.ToSnapshotPolicyMonthlyScheduleOutputWithContext(context.Background())
}

func (i SnapshotPolicyMonthlyScheduleArgs) ToSnapshotPolicyMonthlyScheduleOutputWithContext(ctx context.Context) SnapshotPolicyMonthlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyMonthlyScheduleOutput)
}

func (i SnapshotPolicyMonthlyScheduleArgs) ToSnapshotPolicyMonthlySchedulePtrOutput() SnapshotPolicyMonthlySchedulePtrOutput {
	return i.ToSnapshotPolicyMonthlySchedulePtrOutputWithContext(context.Background())
}

func (i SnapshotPolicyMonthlyScheduleArgs) ToSnapshotPolicyMonthlySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyMonthlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyMonthlyScheduleOutput).ToSnapshotPolicyMonthlySchedulePtrOutputWithContext(ctx)
}

// SnapshotPolicyMonthlySchedulePtrInput is an input type that accepts SnapshotPolicyMonthlyScheduleArgs, SnapshotPolicyMonthlySchedulePtr and SnapshotPolicyMonthlySchedulePtrOutput values.
// You can construct a concrete instance of `SnapshotPolicyMonthlySchedulePtrInput` via:
//
//	        SnapshotPolicyMonthlyScheduleArgs{...}
//
//	or:
//
//	        nil
type SnapshotPolicyMonthlySchedulePtrInput interface {
	pulumi.Input

	ToSnapshotPolicyMonthlySchedulePtrOutput() SnapshotPolicyMonthlySchedulePtrOutput
	ToSnapshotPolicyMonthlySchedulePtrOutputWithContext(context.Context) SnapshotPolicyMonthlySchedulePtrOutput
}

type snapshotPolicyMonthlySchedulePtrType SnapshotPolicyMonthlyScheduleArgs

func SnapshotPolicyMonthlySchedulePtr(v *SnapshotPolicyMonthlyScheduleArgs) SnapshotPolicyMonthlySchedulePtrInput {
	return (*snapshotPolicyMonthlySchedulePtrType)(v)
}

func (*snapshotPolicyMonthlySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPolicyMonthlySchedule)(nil)).Elem()
}

func (i *snapshotPolicyMonthlySchedulePtrType) ToSnapshotPolicyMonthlySchedulePtrOutput() SnapshotPolicyMonthlySchedulePtrOutput {
	return i.ToSnapshotPolicyMonthlySchedulePtrOutputWithContext(context.Background())
}

func (i *snapshotPolicyMonthlySchedulePtrType) ToSnapshotPolicyMonthlySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyMonthlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyMonthlySchedulePtrOutput)
}

type SnapshotPolicyMonthlyScheduleOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyMonthlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotPolicyMonthlySchedule)(nil)).Elem()
}

func (o SnapshotPolicyMonthlyScheduleOutput) ToSnapshotPolicyMonthlyScheduleOutput() SnapshotPolicyMonthlyScheduleOutput {
	return o
}

func (o SnapshotPolicyMonthlyScheduleOutput) ToSnapshotPolicyMonthlyScheduleOutputWithContext(ctx context.Context) SnapshotPolicyMonthlyScheduleOutput {
	return o
}

func (o SnapshotPolicyMonthlyScheduleOutput) ToSnapshotPolicyMonthlySchedulePtrOutput() SnapshotPolicyMonthlySchedulePtrOutput {
	return o.ToSnapshotPolicyMonthlySchedulePtrOutputWithContext(context.Background())
}

func (o SnapshotPolicyMonthlyScheduleOutput) ToSnapshotPolicyMonthlySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyMonthlySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SnapshotPolicyMonthlySchedule) *SnapshotPolicyMonthlySchedule {
		return &v
	}).(SnapshotPolicyMonthlySchedulePtrOutput)
}

// List of the days of the month when the snapshots will be created, valid range is from 1 to 30.
func (o SnapshotPolicyMonthlyScheduleOutput) DaysOfMonths() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SnapshotPolicyMonthlySchedule) []int { return v.DaysOfMonths }).(pulumi.IntArrayOutput)
}

// Hour of the day that the snapshots will be created, valid range is from 0 to 23.
func (o SnapshotPolicyMonthlyScheduleOutput) Hour() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotPolicyMonthlySchedule) int { return v.Hour }).(pulumi.IntOutput)
}

// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
func (o SnapshotPolicyMonthlyScheduleOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotPolicyMonthlySchedule) int { return v.Minute }).(pulumi.IntOutput)
}

// How many hourly snapshots to keep, valid range is from 0 to 255.
func (o SnapshotPolicyMonthlyScheduleOutput) SnapshotsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotPolicyMonthlySchedule) int { return v.SnapshotsToKeep }).(pulumi.IntOutput)
}

type SnapshotPolicyMonthlySchedulePtrOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyMonthlySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPolicyMonthlySchedule)(nil)).Elem()
}

func (o SnapshotPolicyMonthlySchedulePtrOutput) ToSnapshotPolicyMonthlySchedulePtrOutput() SnapshotPolicyMonthlySchedulePtrOutput {
	return o
}

func (o SnapshotPolicyMonthlySchedulePtrOutput) ToSnapshotPolicyMonthlySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyMonthlySchedulePtrOutput {
	return o
}

func (o SnapshotPolicyMonthlySchedulePtrOutput) Elem() SnapshotPolicyMonthlyScheduleOutput {
	return o.ApplyT(func(v *SnapshotPolicyMonthlySchedule) SnapshotPolicyMonthlySchedule {
		if v != nil {
			return *v
		}
		var ret SnapshotPolicyMonthlySchedule
		return ret
	}).(SnapshotPolicyMonthlyScheduleOutput)
}

// List of the days of the month when the snapshots will be created, valid range is from 1 to 30.
func (o SnapshotPolicyMonthlySchedulePtrOutput) DaysOfMonths() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SnapshotPolicyMonthlySchedule) []int {
		if v == nil {
			return nil
		}
		return v.DaysOfMonths
	}).(pulumi.IntArrayOutput)
}

// Hour of the day that the snapshots will be created, valid range is from 0 to 23.
func (o SnapshotPolicyMonthlySchedulePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotPolicyMonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.Hour
	}).(pulumi.IntPtrOutput)
}

// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
func (o SnapshotPolicyMonthlySchedulePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotPolicyMonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.Minute
	}).(pulumi.IntPtrOutput)
}

// How many hourly snapshots to keep, valid range is from 0 to 255.
func (o SnapshotPolicyMonthlySchedulePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotPolicyMonthlySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

type SnapshotPolicyWeeklySchedule struct {
	// List of the week days using English names when the snapshots will be created.
	DaysOfWeeks []string `pulumi:"daysOfWeeks"`
	// Hour of the day that the snapshots will be created, valid range is from 0 to 23.
	Hour int `pulumi:"hour"`
	// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
	Minute int `pulumi:"minute"`
	// How many hourly snapshots to keep, valid range is from 0 to 255.
	SnapshotsToKeep int `pulumi:"snapshotsToKeep"`
}

// SnapshotPolicyWeeklyScheduleInput is an input type that accepts SnapshotPolicyWeeklyScheduleArgs and SnapshotPolicyWeeklyScheduleOutput values.
// You can construct a concrete instance of `SnapshotPolicyWeeklyScheduleInput` via:
//
//	SnapshotPolicyWeeklyScheduleArgs{...}
type SnapshotPolicyWeeklyScheduleInput interface {
	pulumi.Input

	ToSnapshotPolicyWeeklyScheduleOutput() SnapshotPolicyWeeklyScheduleOutput
	ToSnapshotPolicyWeeklyScheduleOutputWithContext(context.Context) SnapshotPolicyWeeklyScheduleOutput
}

type SnapshotPolicyWeeklyScheduleArgs struct {
	// List of the week days using English names when the snapshots will be created.
	DaysOfWeeks pulumi.StringArrayInput `pulumi:"daysOfWeeks"`
	// Hour of the day that the snapshots will be created, valid range is from 0 to 23.
	Hour pulumi.IntInput `pulumi:"hour"`
	// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
	Minute pulumi.IntInput `pulumi:"minute"`
	// How many hourly snapshots to keep, valid range is from 0 to 255.
	SnapshotsToKeep pulumi.IntInput `pulumi:"snapshotsToKeep"`
}

func (SnapshotPolicyWeeklyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotPolicyWeeklySchedule)(nil)).Elem()
}

func (i SnapshotPolicyWeeklyScheduleArgs) ToSnapshotPolicyWeeklyScheduleOutput() SnapshotPolicyWeeklyScheduleOutput {
	return i.ToSnapshotPolicyWeeklyScheduleOutputWithContext(context.Background())
}

func (i SnapshotPolicyWeeklyScheduleArgs) ToSnapshotPolicyWeeklyScheduleOutputWithContext(ctx context.Context) SnapshotPolicyWeeklyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyWeeklyScheduleOutput)
}

func (i SnapshotPolicyWeeklyScheduleArgs) ToSnapshotPolicyWeeklySchedulePtrOutput() SnapshotPolicyWeeklySchedulePtrOutput {
	return i.ToSnapshotPolicyWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i SnapshotPolicyWeeklyScheduleArgs) ToSnapshotPolicyWeeklySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyWeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyWeeklyScheduleOutput).ToSnapshotPolicyWeeklySchedulePtrOutputWithContext(ctx)
}

// SnapshotPolicyWeeklySchedulePtrInput is an input type that accepts SnapshotPolicyWeeklyScheduleArgs, SnapshotPolicyWeeklySchedulePtr and SnapshotPolicyWeeklySchedulePtrOutput values.
// You can construct a concrete instance of `SnapshotPolicyWeeklySchedulePtrInput` via:
//
//	        SnapshotPolicyWeeklyScheduleArgs{...}
//
//	or:
//
//	        nil
type SnapshotPolicyWeeklySchedulePtrInput interface {
	pulumi.Input

	ToSnapshotPolicyWeeklySchedulePtrOutput() SnapshotPolicyWeeklySchedulePtrOutput
	ToSnapshotPolicyWeeklySchedulePtrOutputWithContext(context.Context) SnapshotPolicyWeeklySchedulePtrOutput
}

type snapshotPolicyWeeklySchedulePtrType SnapshotPolicyWeeklyScheduleArgs

func SnapshotPolicyWeeklySchedulePtr(v *SnapshotPolicyWeeklyScheduleArgs) SnapshotPolicyWeeklySchedulePtrInput {
	return (*snapshotPolicyWeeklySchedulePtrType)(v)
}

func (*snapshotPolicyWeeklySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPolicyWeeklySchedule)(nil)).Elem()
}

func (i *snapshotPolicyWeeklySchedulePtrType) ToSnapshotPolicyWeeklySchedulePtrOutput() SnapshotPolicyWeeklySchedulePtrOutput {
	return i.ToSnapshotPolicyWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i *snapshotPolicyWeeklySchedulePtrType) ToSnapshotPolicyWeeklySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyWeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyWeeklySchedulePtrOutput)
}

type SnapshotPolicyWeeklyScheduleOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyWeeklyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotPolicyWeeklySchedule)(nil)).Elem()
}

func (o SnapshotPolicyWeeklyScheduleOutput) ToSnapshotPolicyWeeklyScheduleOutput() SnapshotPolicyWeeklyScheduleOutput {
	return o
}

func (o SnapshotPolicyWeeklyScheduleOutput) ToSnapshotPolicyWeeklyScheduleOutputWithContext(ctx context.Context) SnapshotPolicyWeeklyScheduleOutput {
	return o
}

func (o SnapshotPolicyWeeklyScheduleOutput) ToSnapshotPolicyWeeklySchedulePtrOutput() SnapshotPolicyWeeklySchedulePtrOutput {
	return o.ToSnapshotPolicyWeeklySchedulePtrOutputWithContext(context.Background())
}

func (o SnapshotPolicyWeeklyScheduleOutput) ToSnapshotPolicyWeeklySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyWeeklySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SnapshotPolicyWeeklySchedule) *SnapshotPolicyWeeklySchedule {
		return &v
	}).(SnapshotPolicyWeeklySchedulePtrOutput)
}

// List of the week days using English names when the snapshots will be created.
func (o SnapshotPolicyWeeklyScheduleOutput) DaysOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SnapshotPolicyWeeklySchedule) []string { return v.DaysOfWeeks }).(pulumi.StringArrayOutput)
}

// Hour of the day that the snapshots will be created, valid range is from 0 to 23.
func (o SnapshotPolicyWeeklyScheduleOutput) Hour() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotPolicyWeeklySchedule) int { return v.Hour }).(pulumi.IntOutput)
}

// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
func (o SnapshotPolicyWeeklyScheduleOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotPolicyWeeklySchedule) int { return v.Minute }).(pulumi.IntOutput)
}

// How many hourly snapshots to keep, valid range is from 0 to 255.
func (o SnapshotPolicyWeeklyScheduleOutput) SnapshotsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotPolicyWeeklySchedule) int { return v.SnapshotsToKeep }).(pulumi.IntOutput)
}

type SnapshotPolicyWeeklySchedulePtrOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyWeeklySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPolicyWeeklySchedule)(nil)).Elem()
}

func (o SnapshotPolicyWeeklySchedulePtrOutput) ToSnapshotPolicyWeeklySchedulePtrOutput() SnapshotPolicyWeeklySchedulePtrOutput {
	return o
}

func (o SnapshotPolicyWeeklySchedulePtrOutput) ToSnapshotPolicyWeeklySchedulePtrOutputWithContext(ctx context.Context) SnapshotPolicyWeeklySchedulePtrOutput {
	return o
}

func (o SnapshotPolicyWeeklySchedulePtrOutput) Elem() SnapshotPolicyWeeklyScheduleOutput {
	return o.ApplyT(func(v *SnapshotPolicyWeeklySchedule) SnapshotPolicyWeeklySchedule {
		if v != nil {
			return *v
		}
		var ret SnapshotPolicyWeeklySchedule
		return ret
	}).(SnapshotPolicyWeeklyScheduleOutput)
}

// List of the week days using English names when the snapshots will be created.
func (o SnapshotPolicyWeeklySchedulePtrOutput) DaysOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SnapshotPolicyWeeklySchedule) []string {
		if v == nil {
			return nil
		}
		return v.DaysOfWeeks
	}).(pulumi.StringArrayOutput)
}

// Hour of the day that the snapshots will be created, valid range is from 0 to 23.
func (o SnapshotPolicyWeeklySchedulePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotPolicyWeeklySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.Hour
	}).(pulumi.IntPtrOutput)
}

// Minute of the hour that the snapshots will be created, valid range is from 0 to 59.
func (o SnapshotPolicyWeeklySchedulePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotPolicyWeeklySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.Minute
	}).(pulumi.IntPtrOutput)
}

// How many hourly snapshots to keep, valid range is from 0 to 255.
func (o SnapshotPolicyWeeklySchedulePtrOutput) SnapshotsToKeep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotPolicyWeeklySchedule) *int {
		if v == nil {
			return nil
		}
		return &v.SnapshotsToKeep
	}).(pulumi.IntPtrOutput)
}

type VolumeDataProtectionReplication struct {
	// The endpoint type, default value is `dst` for destination.
	EndpointType *string `pulumi:"endpointType"`
	// Location of the primary volume. Changing this forces a new resource to be created.
	RemoteVolumeLocation string `pulumi:"remoteVolumeLocation"`
	// Resource ID of the primary volume.
	RemoteVolumeResourceId string `pulumi:"remoteVolumeResourceId"`
	// Replication frequency, supported values are '10minutes', 'hourly', 'daily', values are case sensitive.
	//
	// A full example of the `dataProtectionReplication` attribute can be found in the `./examples/netapp/volume_crr` directory within the GitHub Repository
	//
	// > **NOTE:** `dataProtectionReplication` can be defined only once per secondary volume, adding a second instance of it is not supported.
	ReplicationFrequency string `pulumi:"replicationFrequency"`
}

// VolumeDataProtectionReplicationInput is an input type that accepts VolumeDataProtectionReplicationArgs and VolumeDataProtectionReplicationOutput values.
// You can construct a concrete instance of `VolumeDataProtectionReplicationInput` via:
//
//	VolumeDataProtectionReplicationArgs{...}
type VolumeDataProtectionReplicationInput interface {
	pulumi.Input

	ToVolumeDataProtectionReplicationOutput() VolumeDataProtectionReplicationOutput
	ToVolumeDataProtectionReplicationOutputWithContext(context.Context) VolumeDataProtectionReplicationOutput
}

type VolumeDataProtectionReplicationArgs struct {
	// The endpoint type, default value is `dst` for destination.
	EndpointType pulumi.StringPtrInput `pulumi:"endpointType"`
	// Location of the primary volume. Changing this forces a new resource to be created.
	RemoteVolumeLocation pulumi.StringInput `pulumi:"remoteVolumeLocation"`
	// Resource ID of the primary volume.
	RemoteVolumeResourceId pulumi.StringInput `pulumi:"remoteVolumeResourceId"`
	// Replication frequency, supported values are '10minutes', 'hourly', 'daily', values are case sensitive.
	//
	// A full example of the `dataProtectionReplication` attribute can be found in the `./examples/netapp/volume_crr` directory within the GitHub Repository
	//
	// > **NOTE:** `dataProtectionReplication` can be defined only once per secondary volume, adding a second instance of it is not supported.
	ReplicationFrequency pulumi.StringInput `pulumi:"replicationFrequency"`
}

func (VolumeDataProtectionReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeDataProtectionReplication)(nil)).Elem()
}

func (i VolumeDataProtectionReplicationArgs) ToVolumeDataProtectionReplicationOutput() VolumeDataProtectionReplicationOutput {
	return i.ToVolumeDataProtectionReplicationOutputWithContext(context.Background())
}

func (i VolumeDataProtectionReplicationArgs) ToVolumeDataProtectionReplicationOutputWithContext(ctx context.Context) VolumeDataProtectionReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeDataProtectionReplicationOutput)
}

func (i VolumeDataProtectionReplicationArgs) ToVolumeDataProtectionReplicationPtrOutput() VolumeDataProtectionReplicationPtrOutput {
	return i.ToVolumeDataProtectionReplicationPtrOutputWithContext(context.Background())
}

func (i VolumeDataProtectionReplicationArgs) ToVolumeDataProtectionReplicationPtrOutputWithContext(ctx context.Context) VolumeDataProtectionReplicationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeDataProtectionReplicationOutput).ToVolumeDataProtectionReplicationPtrOutputWithContext(ctx)
}

// VolumeDataProtectionReplicationPtrInput is an input type that accepts VolumeDataProtectionReplicationArgs, VolumeDataProtectionReplicationPtr and VolumeDataProtectionReplicationPtrOutput values.
// You can construct a concrete instance of `VolumeDataProtectionReplicationPtrInput` via:
//
//	        VolumeDataProtectionReplicationArgs{...}
//
//	or:
//
//	        nil
type VolumeDataProtectionReplicationPtrInput interface {
	pulumi.Input

	ToVolumeDataProtectionReplicationPtrOutput() VolumeDataProtectionReplicationPtrOutput
	ToVolumeDataProtectionReplicationPtrOutputWithContext(context.Context) VolumeDataProtectionReplicationPtrOutput
}

type volumeDataProtectionReplicationPtrType VolumeDataProtectionReplicationArgs

func VolumeDataProtectionReplicationPtr(v *VolumeDataProtectionReplicationArgs) VolumeDataProtectionReplicationPtrInput {
	return (*volumeDataProtectionReplicationPtrType)(v)
}

func (*volumeDataProtectionReplicationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeDataProtectionReplication)(nil)).Elem()
}

func (i *volumeDataProtectionReplicationPtrType) ToVolumeDataProtectionReplicationPtrOutput() VolumeDataProtectionReplicationPtrOutput {
	return i.ToVolumeDataProtectionReplicationPtrOutputWithContext(context.Background())
}

func (i *volumeDataProtectionReplicationPtrType) ToVolumeDataProtectionReplicationPtrOutputWithContext(ctx context.Context) VolumeDataProtectionReplicationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeDataProtectionReplicationPtrOutput)
}

type VolumeDataProtectionReplicationOutput struct{ *pulumi.OutputState }

func (VolumeDataProtectionReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeDataProtectionReplication)(nil)).Elem()
}

func (o VolumeDataProtectionReplicationOutput) ToVolumeDataProtectionReplicationOutput() VolumeDataProtectionReplicationOutput {
	return o
}

func (o VolumeDataProtectionReplicationOutput) ToVolumeDataProtectionReplicationOutputWithContext(ctx context.Context) VolumeDataProtectionReplicationOutput {
	return o
}

func (o VolumeDataProtectionReplicationOutput) ToVolumeDataProtectionReplicationPtrOutput() VolumeDataProtectionReplicationPtrOutput {
	return o.ToVolumeDataProtectionReplicationPtrOutputWithContext(context.Background())
}

func (o VolumeDataProtectionReplicationOutput) ToVolumeDataProtectionReplicationPtrOutputWithContext(ctx context.Context) VolumeDataProtectionReplicationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeDataProtectionReplication) *VolumeDataProtectionReplication {
		return &v
	}).(VolumeDataProtectionReplicationPtrOutput)
}

// The endpoint type, default value is `dst` for destination.
func (o VolumeDataProtectionReplicationOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeDataProtectionReplication) *string { return v.EndpointType }).(pulumi.StringPtrOutput)
}

// Location of the primary volume. Changing this forces a new resource to be created.
func (o VolumeDataProtectionReplicationOutput) RemoteVolumeLocation() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeDataProtectionReplication) string { return v.RemoteVolumeLocation }).(pulumi.StringOutput)
}

// Resource ID of the primary volume.
func (o VolumeDataProtectionReplicationOutput) RemoteVolumeResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeDataProtectionReplication) string { return v.RemoteVolumeResourceId }).(pulumi.StringOutput)
}

// Replication frequency, supported values are '10minutes', 'hourly', 'daily', values are case sensitive.
//
// A full example of the `dataProtectionReplication` attribute can be found in the `./examples/netapp/volume_crr` directory within the GitHub Repository
//
// > **NOTE:** `dataProtectionReplication` can be defined only once per secondary volume, adding a second instance of it is not supported.
func (o VolumeDataProtectionReplicationOutput) ReplicationFrequency() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeDataProtectionReplication) string { return v.ReplicationFrequency }).(pulumi.StringOutput)
}

type VolumeDataProtectionReplicationPtrOutput struct{ *pulumi.OutputState }

func (VolumeDataProtectionReplicationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeDataProtectionReplication)(nil)).Elem()
}

func (o VolumeDataProtectionReplicationPtrOutput) ToVolumeDataProtectionReplicationPtrOutput() VolumeDataProtectionReplicationPtrOutput {
	return o
}

func (o VolumeDataProtectionReplicationPtrOutput) ToVolumeDataProtectionReplicationPtrOutputWithContext(ctx context.Context) VolumeDataProtectionReplicationPtrOutput {
	return o
}

func (o VolumeDataProtectionReplicationPtrOutput) Elem() VolumeDataProtectionReplicationOutput {
	return o.ApplyT(func(v *VolumeDataProtectionReplication) VolumeDataProtectionReplication {
		if v != nil {
			return *v
		}
		var ret VolumeDataProtectionReplication
		return ret
	}).(VolumeDataProtectionReplicationOutput)
}

// The endpoint type, default value is `dst` for destination.
func (o VolumeDataProtectionReplicationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeDataProtectionReplication) *string {
		if v == nil {
			return nil
		}
		return v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Location of the primary volume. Changing this forces a new resource to be created.
func (o VolumeDataProtectionReplicationPtrOutput) RemoteVolumeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeDataProtectionReplication) *string {
		if v == nil {
			return nil
		}
		return &v.RemoteVolumeLocation
	}).(pulumi.StringPtrOutput)
}

// Resource ID of the primary volume.
func (o VolumeDataProtectionReplicationPtrOutput) RemoteVolumeResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeDataProtectionReplication) *string {
		if v == nil {
			return nil
		}
		return &v.RemoteVolumeResourceId
	}).(pulumi.StringPtrOutput)
}

// Replication frequency, supported values are '10minutes', 'hourly', 'daily', values are case sensitive.
//
// A full example of the `dataProtectionReplication` attribute can be found in the `./examples/netapp/volume_crr` directory within the GitHub Repository
//
// > **NOTE:** `dataProtectionReplication` can be defined only once per secondary volume, adding a second instance of it is not supported.
func (o VolumeDataProtectionReplicationPtrOutput) ReplicationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeDataProtectionReplication) *string {
		if v == nil {
			return nil
		}
		return &v.ReplicationFrequency
	}).(pulumi.StringPtrOutput)
}

type VolumeDataProtectionSnapshotPolicy struct {
	// Resource ID of the snapshot policy to apply to the volume.
	//
	// A full example of the `dataProtectionSnapshotPolicy` attribute usage can be found in the `./examples/netapp/nfsv3_volume_with_snapshot_policy` directory within the GitHub Repository
	//
	// > **NOTE:** `dataProtectionSnapshotPolicy` block can be used alone or with dataProtectionReplication in the primary volume only, if enabling it in the secondary, an error will be thrown.
	SnapshotPolicyId string `pulumi:"snapshotPolicyId"`
}

// VolumeDataProtectionSnapshotPolicyInput is an input type that accepts VolumeDataProtectionSnapshotPolicyArgs and VolumeDataProtectionSnapshotPolicyOutput values.
// You can construct a concrete instance of `VolumeDataProtectionSnapshotPolicyInput` via:
//
//	VolumeDataProtectionSnapshotPolicyArgs{...}
type VolumeDataProtectionSnapshotPolicyInput interface {
	pulumi.Input

	ToVolumeDataProtectionSnapshotPolicyOutput() VolumeDataProtectionSnapshotPolicyOutput
	ToVolumeDataProtectionSnapshotPolicyOutputWithContext(context.Context) VolumeDataProtectionSnapshotPolicyOutput
}

type VolumeDataProtectionSnapshotPolicyArgs struct {
	// Resource ID of the snapshot policy to apply to the volume.
	//
	// A full example of the `dataProtectionSnapshotPolicy` attribute usage can be found in the `./examples/netapp/nfsv3_volume_with_snapshot_policy` directory within the GitHub Repository
	//
	// > **NOTE:** `dataProtectionSnapshotPolicy` block can be used alone or with dataProtectionReplication in the primary volume only, if enabling it in the secondary, an error will be thrown.
	SnapshotPolicyId pulumi.StringInput `pulumi:"snapshotPolicyId"`
}

func (VolumeDataProtectionSnapshotPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeDataProtectionSnapshotPolicy)(nil)).Elem()
}

func (i VolumeDataProtectionSnapshotPolicyArgs) ToVolumeDataProtectionSnapshotPolicyOutput() VolumeDataProtectionSnapshotPolicyOutput {
	return i.ToVolumeDataProtectionSnapshotPolicyOutputWithContext(context.Background())
}

func (i VolumeDataProtectionSnapshotPolicyArgs) ToVolumeDataProtectionSnapshotPolicyOutputWithContext(ctx context.Context) VolumeDataProtectionSnapshotPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeDataProtectionSnapshotPolicyOutput)
}

func (i VolumeDataProtectionSnapshotPolicyArgs) ToVolumeDataProtectionSnapshotPolicyPtrOutput() VolumeDataProtectionSnapshotPolicyPtrOutput {
	return i.ToVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(context.Background())
}

func (i VolumeDataProtectionSnapshotPolicyArgs) ToVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(ctx context.Context) VolumeDataProtectionSnapshotPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeDataProtectionSnapshotPolicyOutput).ToVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(ctx)
}

// VolumeDataProtectionSnapshotPolicyPtrInput is an input type that accepts VolumeDataProtectionSnapshotPolicyArgs, VolumeDataProtectionSnapshotPolicyPtr and VolumeDataProtectionSnapshotPolicyPtrOutput values.
// You can construct a concrete instance of `VolumeDataProtectionSnapshotPolicyPtrInput` via:
//
//	        VolumeDataProtectionSnapshotPolicyArgs{...}
//
//	or:
//
//	        nil
type VolumeDataProtectionSnapshotPolicyPtrInput interface {
	pulumi.Input

	ToVolumeDataProtectionSnapshotPolicyPtrOutput() VolumeDataProtectionSnapshotPolicyPtrOutput
	ToVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(context.Context) VolumeDataProtectionSnapshotPolicyPtrOutput
}

type volumeDataProtectionSnapshotPolicyPtrType VolumeDataProtectionSnapshotPolicyArgs

func VolumeDataProtectionSnapshotPolicyPtr(v *VolumeDataProtectionSnapshotPolicyArgs) VolumeDataProtectionSnapshotPolicyPtrInput {
	return (*volumeDataProtectionSnapshotPolicyPtrType)(v)
}

func (*volumeDataProtectionSnapshotPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeDataProtectionSnapshotPolicy)(nil)).Elem()
}

func (i *volumeDataProtectionSnapshotPolicyPtrType) ToVolumeDataProtectionSnapshotPolicyPtrOutput() VolumeDataProtectionSnapshotPolicyPtrOutput {
	return i.ToVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(context.Background())
}

func (i *volumeDataProtectionSnapshotPolicyPtrType) ToVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(ctx context.Context) VolumeDataProtectionSnapshotPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeDataProtectionSnapshotPolicyPtrOutput)
}

type VolumeDataProtectionSnapshotPolicyOutput struct{ *pulumi.OutputState }

func (VolumeDataProtectionSnapshotPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeDataProtectionSnapshotPolicy)(nil)).Elem()
}

func (o VolumeDataProtectionSnapshotPolicyOutput) ToVolumeDataProtectionSnapshotPolicyOutput() VolumeDataProtectionSnapshotPolicyOutput {
	return o
}

func (o VolumeDataProtectionSnapshotPolicyOutput) ToVolumeDataProtectionSnapshotPolicyOutputWithContext(ctx context.Context) VolumeDataProtectionSnapshotPolicyOutput {
	return o
}

func (o VolumeDataProtectionSnapshotPolicyOutput) ToVolumeDataProtectionSnapshotPolicyPtrOutput() VolumeDataProtectionSnapshotPolicyPtrOutput {
	return o.ToVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(context.Background())
}

func (o VolumeDataProtectionSnapshotPolicyOutput) ToVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(ctx context.Context) VolumeDataProtectionSnapshotPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeDataProtectionSnapshotPolicy) *VolumeDataProtectionSnapshotPolicy {
		return &v
	}).(VolumeDataProtectionSnapshotPolicyPtrOutput)
}

// Resource ID of the snapshot policy to apply to the volume.
//
// A full example of the `dataProtectionSnapshotPolicy` attribute usage can be found in the `./examples/netapp/nfsv3_volume_with_snapshot_policy` directory within the GitHub Repository
//
// > **NOTE:** `dataProtectionSnapshotPolicy` block can be used alone or with dataProtectionReplication in the primary volume only, if enabling it in the secondary, an error will be thrown.
func (o VolumeDataProtectionSnapshotPolicyOutput) SnapshotPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeDataProtectionSnapshotPolicy) string { return v.SnapshotPolicyId }).(pulumi.StringOutput)
}

type VolumeDataProtectionSnapshotPolicyPtrOutput struct{ *pulumi.OutputState }

func (VolumeDataProtectionSnapshotPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeDataProtectionSnapshotPolicy)(nil)).Elem()
}

func (o VolumeDataProtectionSnapshotPolicyPtrOutput) ToVolumeDataProtectionSnapshotPolicyPtrOutput() VolumeDataProtectionSnapshotPolicyPtrOutput {
	return o
}

func (o VolumeDataProtectionSnapshotPolicyPtrOutput) ToVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(ctx context.Context) VolumeDataProtectionSnapshotPolicyPtrOutput {
	return o
}

func (o VolumeDataProtectionSnapshotPolicyPtrOutput) Elem() VolumeDataProtectionSnapshotPolicyOutput {
	return o.ApplyT(func(v *VolumeDataProtectionSnapshotPolicy) VolumeDataProtectionSnapshotPolicy {
		if v != nil {
			return *v
		}
		var ret VolumeDataProtectionSnapshotPolicy
		return ret
	}).(VolumeDataProtectionSnapshotPolicyOutput)
}

// Resource ID of the snapshot policy to apply to the volume.
//
// A full example of the `dataProtectionSnapshotPolicy` attribute usage can be found in the `./examples/netapp/nfsv3_volume_with_snapshot_policy` directory within the GitHub Repository
//
// > **NOTE:** `dataProtectionSnapshotPolicy` block can be used alone or with dataProtectionReplication in the primary volume only, if enabling it in the secondary, an error will be thrown.
func (o VolumeDataProtectionSnapshotPolicyPtrOutput) SnapshotPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeDataProtectionSnapshotPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.SnapshotPolicyId
	}).(pulumi.StringPtrOutput)
}

type VolumeExportPolicyRule struct {
	// A list of allowed clients IPv4 addresses.
	AllowedClients []string `pulumi:"allowedClients"`
	// A list of allowed protocols. Valid values include `CIFS`, `NFSv3`, or `NFSv4.1`. Only one value is supported at this time. This replaces the previous arguments: `cifsEnabled`, `nfsv3Enabled` and `nfsv4Enabled`.
	ProtocolsEnabled *string `pulumi:"protocolsEnabled"`
	// Is root access permitted to this volume?
	RootAccessEnabled *bool `pulumi:"rootAccessEnabled"`
	// The index number of the rule.
	RuleIndex int `pulumi:"ruleIndex"`
	// Is the file system on unix read only?
	UnixReadOnly *bool `pulumi:"unixReadOnly"`
	// Is the file system on unix read and write?
	UnixReadWrite *bool `pulumi:"unixReadWrite"`
}

// VolumeExportPolicyRuleInput is an input type that accepts VolumeExportPolicyRuleArgs and VolumeExportPolicyRuleOutput values.
// You can construct a concrete instance of `VolumeExportPolicyRuleInput` via:
//
//	VolumeExportPolicyRuleArgs{...}
type VolumeExportPolicyRuleInput interface {
	pulumi.Input

	ToVolumeExportPolicyRuleOutput() VolumeExportPolicyRuleOutput
	ToVolumeExportPolicyRuleOutputWithContext(context.Context) VolumeExportPolicyRuleOutput
}

type VolumeExportPolicyRuleArgs struct {
	// A list of allowed clients IPv4 addresses.
	AllowedClients pulumi.StringArrayInput `pulumi:"allowedClients"`
	// A list of allowed protocols. Valid values include `CIFS`, `NFSv3`, or `NFSv4.1`. Only one value is supported at this time. This replaces the previous arguments: `cifsEnabled`, `nfsv3Enabled` and `nfsv4Enabled`.
	ProtocolsEnabled pulumi.StringPtrInput `pulumi:"protocolsEnabled"`
	// Is root access permitted to this volume?
	RootAccessEnabled pulumi.BoolPtrInput `pulumi:"rootAccessEnabled"`
	// The index number of the rule.
	RuleIndex pulumi.IntInput `pulumi:"ruleIndex"`
	// Is the file system on unix read only?
	UnixReadOnly pulumi.BoolPtrInput `pulumi:"unixReadOnly"`
	// Is the file system on unix read and write?
	UnixReadWrite pulumi.BoolPtrInput `pulumi:"unixReadWrite"`
}

func (VolumeExportPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeExportPolicyRule)(nil)).Elem()
}

func (i VolumeExportPolicyRuleArgs) ToVolumeExportPolicyRuleOutput() VolumeExportPolicyRuleOutput {
	return i.ToVolumeExportPolicyRuleOutputWithContext(context.Background())
}

func (i VolumeExportPolicyRuleArgs) ToVolumeExportPolicyRuleOutputWithContext(ctx context.Context) VolumeExportPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeExportPolicyRuleOutput)
}

// VolumeExportPolicyRuleArrayInput is an input type that accepts VolumeExportPolicyRuleArray and VolumeExportPolicyRuleArrayOutput values.
// You can construct a concrete instance of `VolumeExportPolicyRuleArrayInput` via:
//
//	VolumeExportPolicyRuleArray{ VolumeExportPolicyRuleArgs{...} }
type VolumeExportPolicyRuleArrayInput interface {
	pulumi.Input

	ToVolumeExportPolicyRuleArrayOutput() VolumeExportPolicyRuleArrayOutput
	ToVolumeExportPolicyRuleArrayOutputWithContext(context.Context) VolumeExportPolicyRuleArrayOutput
}

type VolumeExportPolicyRuleArray []VolumeExportPolicyRuleInput

func (VolumeExportPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeExportPolicyRule)(nil)).Elem()
}

func (i VolumeExportPolicyRuleArray) ToVolumeExportPolicyRuleArrayOutput() VolumeExportPolicyRuleArrayOutput {
	return i.ToVolumeExportPolicyRuleArrayOutputWithContext(context.Background())
}

func (i VolumeExportPolicyRuleArray) ToVolumeExportPolicyRuleArrayOutputWithContext(ctx context.Context) VolumeExportPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeExportPolicyRuleArrayOutput)
}

type VolumeExportPolicyRuleOutput struct{ *pulumi.OutputState }

func (VolumeExportPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeExportPolicyRule)(nil)).Elem()
}

func (o VolumeExportPolicyRuleOutput) ToVolumeExportPolicyRuleOutput() VolumeExportPolicyRuleOutput {
	return o
}

func (o VolumeExportPolicyRuleOutput) ToVolumeExportPolicyRuleOutputWithContext(ctx context.Context) VolumeExportPolicyRuleOutput {
	return o
}

// A list of allowed clients IPv4 addresses.
func (o VolumeExportPolicyRuleOutput) AllowedClients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) []string { return v.AllowedClients }).(pulumi.StringArrayOutput)
}

// A list of allowed protocols. Valid values include `CIFS`, `NFSv3`, or `NFSv4.1`. Only one value is supported at this time. This replaces the previous arguments: `cifsEnabled`, `nfsv3Enabled` and `nfsv4Enabled`.
func (o VolumeExportPolicyRuleOutput) ProtocolsEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *string { return v.ProtocolsEnabled }).(pulumi.StringPtrOutput)
}

// Is root access permitted to this volume?
func (o VolumeExportPolicyRuleOutput) RootAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *bool { return v.RootAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The index number of the rule.
func (o VolumeExportPolicyRuleOutput) RuleIndex() pulumi.IntOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) int { return v.RuleIndex }).(pulumi.IntOutput)
}

// Is the file system on unix read only?
func (o VolumeExportPolicyRuleOutput) UnixReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *bool { return v.UnixReadOnly }).(pulumi.BoolPtrOutput)
}

// Is the file system on unix read and write?
func (o VolumeExportPolicyRuleOutput) UnixReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeExportPolicyRule) *bool { return v.UnixReadWrite }).(pulumi.BoolPtrOutput)
}

type VolumeExportPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (VolumeExportPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeExportPolicyRule)(nil)).Elem()
}

func (o VolumeExportPolicyRuleArrayOutput) ToVolumeExportPolicyRuleArrayOutput() VolumeExportPolicyRuleArrayOutput {
	return o
}

func (o VolumeExportPolicyRuleArrayOutput) ToVolumeExportPolicyRuleArrayOutputWithContext(ctx context.Context) VolumeExportPolicyRuleArrayOutput {
	return o
}

func (o VolumeExportPolicyRuleArrayOutput) Index(i pulumi.IntInput) VolumeExportPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeExportPolicyRule {
		return vs[0].([]VolumeExportPolicyRule)[vs[1].(int)]
	}).(VolumeExportPolicyRuleOutput)
}

type VolumeGroupSapHanaVolume struct {
	// The ID of the Capacity Pool. Changing this forces a new Application Volume Group to be created and data will be lost.
	CapacityPoolId string `pulumi:"capacityPoolId"`
	// A `dataProtectionReplication` block as defined below. Changing this forces a new Application Volume Group to be created and data will be lost.
	DataProtectionReplication *VolumeGroupSapHanaVolumeDataProtectionReplication `pulumi:"dataProtectionReplication"`
	// A `dataProtectionSnapshotPolicy` block as defined below.
	DataProtectionSnapshotPolicy *VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy `pulumi:"dataProtectionSnapshotPolicy"`
	// One or more `exportPolicyRule` blocks as defined below.
	ExportPolicyRules []VolumeGroupSapHanaVolumeExportPolicyRule `pulumi:"exportPolicyRules"`
	// The ID of the Application Volume Group.
	Id               *string  `pulumi:"id"`
	MountIpAddresses []string `pulumi:"mountIpAddresses"`
	// The name which should be used for this volume. Changing this forces a new Application Volume Group to be created and data will be lost.
	Name string `pulumi:"name"`
	// The target volume protocol expressed as a list. Changing this forces a new Application Volume Group to be created and data will be lost. Supported values for Application Volume Group include `NFSv3` or `NFSv4.1`, multi-protocol is not supported and there are certain rules on which protocol is supporteed per volume spec, please check [Configure application volume groups for the SAP HANA REST API](https://learn.microsoft.com/en-us/azure/azure-netapp-files/configure-application-volume-group-sap-hana-api) document for details.
	Protocols string `pulumi:"protocols"`
	// The ID of the proximity placement group. Changing this forces a new Application Volume Group to be created and data will be lost. For SAP-HANA application, it is required to have PPG enabled so Azure NetApp Files can pin the volumes next to your compute resources, please check [Requirements and considerations for application volume group for SAP HANA](https://learn.microsoft.com/en-us/azure/azure-netapp-files/application-volume-group-considerations) for details and other requirements.
	ProximityPlacementGroupId *string `pulumi:"proximityPlacementGroupId"`
	// Volume security style. Possible values are `ntfs` and `unix`. Changing this forces a new Application Volume Group to be created and data will be lost.
	SecurityStyle string `pulumi:"securityStyle"`
	// Volume security style. Possible values are `Premium`, `Standard` and `Ultra`. Changing this forces a new Application Volume Group to be created and data will be lost.
	ServiceLevel string `pulumi:"serviceLevel"`
	// Specifies whether the .snapshot (NFS clients) path of a volume is visible. Changing this forces a new Application Volume Group to be created and data will be lost.
	SnapshotDirectoryVisible bool `pulumi:"snapshotDirectoryVisible"`
	// The maximum Storage Quota allowed for a file system in Gigabytes.
	StorageQuotaInGb int `pulumi:"storageQuotaInGb"`
	// The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new Application Volume Group to be created and data will be lost.
	SubnetId string `pulumi:"subnetId"`
	// A mapping of tags which should be assigned to the Application Volume Group.
	Tags map[string]string `pulumi:"tags"`
	// Throughput of this volume in Mibps.
	ThroughputInMibps float64 `pulumi:"throughputInMibps"`
	// A unique file path for the volume. Changing this forces a new Application Volume Group to be created and data will be lost.
	VolumePath string `pulumi:"volumePath"`
	// Volume specification name. Possible values are `data`, `log`, `shared`, `data-backup` and `log-backup`. Changing this forces a new Application Volume Group to be created and data will be lost.
	VolumeSpecName string `pulumi:"volumeSpecName"`
}

// VolumeGroupSapHanaVolumeInput is an input type that accepts VolumeGroupSapHanaVolumeArgs and VolumeGroupSapHanaVolumeOutput values.
// You can construct a concrete instance of `VolumeGroupSapHanaVolumeInput` via:
//
//	VolumeGroupSapHanaVolumeArgs{...}
type VolumeGroupSapHanaVolumeInput interface {
	pulumi.Input

	ToVolumeGroupSapHanaVolumeOutput() VolumeGroupSapHanaVolumeOutput
	ToVolumeGroupSapHanaVolumeOutputWithContext(context.Context) VolumeGroupSapHanaVolumeOutput
}

type VolumeGroupSapHanaVolumeArgs struct {
	// The ID of the Capacity Pool. Changing this forces a new Application Volume Group to be created and data will be lost.
	CapacityPoolId pulumi.StringInput `pulumi:"capacityPoolId"`
	// A `dataProtectionReplication` block as defined below. Changing this forces a new Application Volume Group to be created and data will be lost.
	DataProtectionReplication VolumeGroupSapHanaVolumeDataProtectionReplicationPtrInput `pulumi:"dataProtectionReplication"`
	// A `dataProtectionSnapshotPolicy` block as defined below.
	DataProtectionSnapshotPolicy VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrInput `pulumi:"dataProtectionSnapshotPolicy"`
	// One or more `exportPolicyRule` blocks as defined below.
	ExportPolicyRules VolumeGroupSapHanaVolumeExportPolicyRuleArrayInput `pulumi:"exportPolicyRules"`
	// The ID of the Application Volume Group.
	Id               pulumi.StringPtrInput   `pulumi:"id"`
	MountIpAddresses pulumi.StringArrayInput `pulumi:"mountIpAddresses"`
	// The name which should be used for this volume. Changing this forces a new Application Volume Group to be created and data will be lost.
	Name pulumi.StringInput `pulumi:"name"`
	// The target volume protocol expressed as a list. Changing this forces a new Application Volume Group to be created and data will be lost. Supported values for Application Volume Group include `NFSv3` or `NFSv4.1`, multi-protocol is not supported and there are certain rules on which protocol is supporteed per volume spec, please check [Configure application volume groups for the SAP HANA REST API](https://learn.microsoft.com/en-us/azure/azure-netapp-files/configure-application-volume-group-sap-hana-api) document for details.
	Protocols pulumi.StringInput `pulumi:"protocols"`
	// The ID of the proximity placement group. Changing this forces a new Application Volume Group to be created and data will be lost. For SAP-HANA application, it is required to have PPG enabled so Azure NetApp Files can pin the volumes next to your compute resources, please check [Requirements and considerations for application volume group for SAP HANA](https://learn.microsoft.com/en-us/azure/azure-netapp-files/application-volume-group-considerations) for details and other requirements.
	ProximityPlacementGroupId pulumi.StringPtrInput `pulumi:"proximityPlacementGroupId"`
	// Volume security style. Possible values are `ntfs` and `unix`. Changing this forces a new Application Volume Group to be created and data will be lost.
	SecurityStyle pulumi.StringInput `pulumi:"securityStyle"`
	// Volume security style. Possible values are `Premium`, `Standard` and `Ultra`. Changing this forces a new Application Volume Group to be created and data will be lost.
	ServiceLevel pulumi.StringInput `pulumi:"serviceLevel"`
	// Specifies whether the .snapshot (NFS clients) path of a volume is visible. Changing this forces a new Application Volume Group to be created and data will be lost.
	SnapshotDirectoryVisible pulumi.BoolInput `pulumi:"snapshotDirectoryVisible"`
	// The maximum Storage Quota allowed for a file system in Gigabytes.
	StorageQuotaInGb pulumi.IntInput `pulumi:"storageQuotaInGb"`
	// The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new Application Volume Group to be created and data will be lost.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// A mapping of tags which should be assigned to the Application Volume Group.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Throughput of this volume in Mibps.
	ThroughputInMibps pulumi.Float64Input `pulumi:"throughputInMibps"`
	// A unique file path for the volume. Changing this forces a new Application Volume Group to be created and data will be lost.
	VolumePath pulumi.StringInput `pulumi:"volumePath"`
	// Volume specification name. Possible values are `data`, `log`, `shared`, `data-backup` and `log-backup`. Changing this forces a new Application Volume Group to be created and data will be lost.
	VolumeSpecName pulumi.StringInput `pulumi:"volumeSpecName"`
}

func (VolumeGroupSapHanaVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupSapHanaVolume)(nil)).Elem()
}

func (i VolumeGroupSapHanaVolumeArgs) ToVolumeGroupSapHanaVolumeOutput() VolumeGroupSapHanaVolumeOutput {
	return i.ToVolumeGroupSapHanaVolumeOutputWithContext(context.Background())
}

func (i VolumeGroupSapHanaVolumeArgs) ToVolumeGroupSapHanaVolumeOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupSapHanaVolumeOutput)
}

// VolumeGroupSapHanaVolumeArrayInput is an input type that accepts VolumeGroupSapHanaVolumeArray and VolumeGroupSapHanaVolumeArrayOutput values.
// You can construct a concrete instance of `VolumeGroupSapHanaVolumeArrayInput` via:
//
//	VolumeGroupSapHanaVolumeArray{ VolumeGroupSapHanaVolumeArgs{...} }
type VolumeGroupSapHanaVolumeArrayInput interface {
	pulumi.Input

	ToVolumeGroupSapHanaVolumeArrayOutput() VolumeGroupSapHanaVolumeArrayOutput
	ToVolumeGroupSapHanaVolumeArrayOutputWithContext(context.Context) VolumeGroupSapHanaVolumeArrayOutput
}

type VolumeGroupSapHanaVolumeArray []VolumeGroupSapHanaVolumeInput

func (VolumeGroupSapHanaVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeGroupSapHanaVolume)(nil)).Elem()
}

func (i VolumeGroupSapHanaVolumeArray) ToVolumeGroupSapHanaVolumeArrayOutput() VolumeGroupSapHanaVolumeArrayOutput {
	return i.ToVolumeGroupSapHanaVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeGroupSapHanaVolumeArray) ToVolumeGroupSapHanaVolumeArrayOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupSapHanaVolumeArrayOutput)
}

type VolumeGroupSapHanaVolumeOutput struct{ *pulumi.OutputState }

func (VolumeGroupSapHanaVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupSapHanaVolume)(nil)).Elem()
}

func (o VolumeGroupSapHanaVolumeOutput) ToVolumeGroupSapHanaVolumeOutput() VolumeGroupSapHanaVolumeOutput {
	return o
}

func (o VolumeGroupSapHanaVolumeOutput) ToVolumeGroupSapHanaVolumeOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeOutput {
	return o
}

// The ID of the Capacity Pool. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaVolumeOutput) CapacityPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) string { return v.CapacityPoolId }).(pulumi.StringOutput)
}

// A `dataProtectionReplication` block as defined below. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaVolumeOutput) DataProtectionReplication() VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) *VolumeGroupSapHanaVolumeDataProtectionReplication {
		return v.DataProtectionReplication
	}).(VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput)
}

// A `dataProtectionSnapshotPolicy` block as defined below.
func (o VolumeGroupSapHanaVolumeOutput) DataProtectionSnapshotPolicy() VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) *VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy {
		return v.DataProtectionSnapshotPolicy
	}).(VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput)
}

// One or more `exportPolicyRule` blocks as defined below.
func (o VolumeGroupSapHanaVolumeOutput) ExportPolicyRules() VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) []VolumeGroupSapHanaVolumeExportPolicyRule {
		return v.ExportPolicyRules
	}).(VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput)
}

// The ID of the Application Volume Group.
func (o VolumeGroupSapHanaVolumeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o VolumeGroupSapHanaVolumeOutput) MountIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) []string { return v.MountIpAddresses }).(pulumi.StringArrayOutput)
}

// The name which should be used for this volume. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) string { return v.Name }).(pulumi.StringOutput)
}

// The target volume protocol expressed as a list. Changing this forces a new Application Volume Group to be created and data will be lost. Supported values for Application Volume Group include `NFSv3` or `NFSv4.1`, multi-protocol is not supported and there are certain rules on which protocol is supporteed per volume spec, please check [Configure application volume groups for the SAP HANA REST API](https://learn.microsoft.com/en-us/azure/azure-netapp-files/configure-application-volume-group-sap-hana-api) document for details.
func (o VolumeGroupSapHanaVolumeOutput) Protocols() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) string { return v.Protocols }).(pulumi.StringOutput)
}

// The ID of the proximity placement group. Changing this forces a new Application Volume Group to be created and data will be lost. For SAP-HANA application, it is required to have PPG enabled so Azure NetApp Files can pin the volumes next to your compute resources, please check [Requirements and considerations for application volume group for SAP HANA](https://learn.microsoft.com/en-us/azure/azure-netapp-files/application-volume-group-considerations) for details and other requirements.
func (o VolumeGroupSapHanaVolumeOutput) ProximityPlacementGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) *string { return v.ProximityPlacementGroupId }).(pulumi.StringPtrOutput)
}

// Volume security style. Possible values are `ntfs` and `unix`. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaVolumeOutput) SecurityStyle() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) string { return v.SecurityStyle }).(pulumi.StringOutput)
}

// Volume security style. Possible values are `Premium`, `Standard` and `Ultra`. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaVolumeOutput) ServiceLevel() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) string { return v.ServiceLevel }).(pulumi.StringOutput)
}

// Specifies whether the .snapshot (NFS clients) path of a volume is visible. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaVolumeOutput) SnapshotDirectoryVisible() pulumi.BoolOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) bool { return v.SnapshotDirectoryVisible }).(pulumi.BoolOutput)
}

// The maximum Storage Quota allowed for a file system in Gigabytes.
func (o VolumeGroupSapHanaVolumeOutput) StorageQuotaInGb() pulumi.IntOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) int { return v.StorageQuotaInGb }).(pulumi.IntOutput)
}

// The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaVolumeOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) string { return v.SubnetId }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Application Volume Group.
func (o VolumeGroupSapHanaVolumeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Throughput of this volume in Mibps.
func (o VolumeGroupSapHanaVolumeOutput) ThroughputInMibps() pulumi.Float64Output {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) float64 { return v.ThroughputInMibps }).(pulumi.Float64Output)
}

// A unique file path for the volume. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaVolumeOutput) VolumePath() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) string { return v.VolumePath }).(pulumi.StringOutput)
}

// Volume specification name. Possible values are `data`, `log`, `shared`, `data-backup` and `log-backup`. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaVolumeOutput) VolumeSpecName() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolume) string { return v.VolumeSpecName }).(pulumi.StringOutput)
}

type VolumeGroupSapHanaVolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeGroupSapHanaVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeGroupSapHanaVolume)(nil)).Elem()
}

func (o VolumeGroupSapHanaVolumeArrayOutput) ToVolumeGroupSapHanaVolumeArrayOutput() VolumeGroupSapHanaVolumeArrayOutput {
	return o
}

func (o VolumeGroupSapHanaVolumeArrayOutput) ToVolumeGroupSapHanaVolumeArrayOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeArrayOutput {
	return o
}

func (o VolumeGroupSapHanaVolumeArrayOutput) Index(i pulumi.IntInput) VolumeGroupSapHanaVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeGroupSapHanaVolume {
		return vs[0].([]VolumeGroupSapHanaVolume)[vs[1].(int)]
	}).(VolumeGroupSapHanaVolumeOutput)
}

type VolumeGroupSapHanaVolumeDataProtectionReplication struct {
	// The endpoint type. Possible values are `dst` and `src`. Defaults to `dst`.
	EndpointType *string `pulumi:"endpointType"`
	// Location of the primary volume.
	RemoteVolumeLocation string `pulumi:"remoteVolumeLocation"`
	// Resource ID of the primary volume.
	RemoteVolumeResourceId string `pulumi:"remoteVolumeResourceId"`
	// eplication frequency. Possible values are `10minutes`, `daily` and `hourly`.
	ReplicationFrequency string `pulumi:"replicationFrequency"`
}

// VolumeGroupSapHanaVolumeDataProtectionReplicationInput is an input type that accepts VolumeGroupSapHanaVolumeDataProtectionReplicationArgs and VolumeGroupSapHanaVolumeDataProtectionReplicationOutput values.
// You can construct a concrete instance of `VolumeGroupSapHanaVolumeDataProtectionReplicationInput` via:
//
//	VolumeGroupSapHanaVolumeDataProtectionReplicationArgs{...}
type VolumeGroupSapHanaVolumeDataProtectionReplicationInput interface {
	pulumi.Input

	ToVolumeGroupSapHanaVolumeDataProtectionReplicationOutput() VolumeGroupSapHanaVolumeDataProtectionReplicationOutput
	ToVolumeGroupSapHanaVolumeDataProtectionReplicationOutputWithContext(context.Context) VolumeGroupSapHanaVolumeDataProtectionReplicationOutput
}

type VolumeGroupSapHanaVolumeDataProtectionReplicationArgs struct {
	// The endpoint type. Possible values are `dst` and `src`. Defaults to `dst`.
	EndpointType pulumi.StringPtrInput `pulumi:"endpointType"`
	// Location of the primary volume.
	RemoteVolumeLocation pulumi.StringInput `pulumi:"remoteVolumeLocation"`
	// Resource ID of the primary volume.
	RemoteVolumeResourceId pulumi.StringInput `pulumi:"remoteVolumeResourceId"`
	// eplication frequency. Possible values are `10minutes`, `daily` and `hourly`.
	ReplicationFrequency pulumi.StringInput `pulumi:"replicationFrequency"`
}

func (VolumeGroupSapHanaVolumeDataProtectionReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupSapHanaVolumeDataProtectionReplication)(nil)).Elem()
}

func (i VolumeGroupSapHanaVolumeDataProtectionReplicationArgs) ToVolumeGroupSapHanaVolumeDataProtectionReplicationOutput() VolumeGroupSapHanaVolumeDataProtectionReplicationOutput {
	return i.ToVolumeGroupSapHanaVolumeDataProtectionReplicationOutputWithContext(context.Background())
}

func (i VolumeGroupSapHanaVolumeDataProtectionReplicationArgs) ToVolumeGroupSapHanaVolumeDataProtectionReplicationOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeDataProtectionReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupSapHanaVolumeDataProtectionReplicationOutput)
}

func (i VolumeGroupSapHanaVolumeDataProtectionReplicationArgs) ToVolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput() VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput {
	return i.ToVolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutputWithContext(context.Background())
}

func (i VolumeGroupSapHanaVolumeDataProtectionReplicationArgs) ToVolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupSapHanaVolumeDataProtectionReplicationOutput).ToVolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutputWithContext(ctx)
}

// VolumeGroupSapHanaVolumeDataProtectionReplicationPtrInput is an input type that accepts VolumeGroupSapHanaVolumeDataProtectionReplicationArgs, VolumeGroupSapHanaVolumeDataProtectionReplicationPtr and VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput values.
// You can construct a concrete instance of `VolumeGroupSapHanaVolumeDataProtectionReplicationPtrInput` via:
//
//	        VolumeGroupSapHanaVolumeDataProtectionReplicationArgs{...}
//
//	or:
//
//	        nil
type VolumeGroupSapHanaVolumeDataProtectionReplicationPtrInput interface {
	pulumi.Input

	ToVolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput() VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput
	ToVolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutputWithContext(context.Context) VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput
}

type volumeGroupSapHanaVolumeDataProtectionReplicationPtrType VolumeGroupSapHanaVolumeDataProtectionReplicationArgs

func VolumeGroupSapHanaVolumeDataProtectionReplicationPtr(v *VolumeGroupSapHanaVolumeDataProtectionReplicationArgs) VolumeGroupSapHanaVolumeDataProtectionReplicationPtrInput {
	return (*volumeGroupSapHanaVolumeDataProtectionReplicationPtrType)(v)
}

func (*volumeGroupSapHanaVolumeDataProtectionReplicationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupSapHanaVolumeDataProtectionReplication)(nil)).Elem()
}

func (i *volumeGroupSapHanaVolumeDataProtectionReplicationPtrType) ToVolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput() VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput {
	return i.ToVolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutputWithContext(context.Background())
}

func (i *volumeGroupSapHanaVolumeDataProtectionReplicationPtrType) ToVolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput)
}

type VolumeGroupSapHanaVolumeDataProtectionReplicationOutput struct{ *pulumi.OutputState }

func (VolumeGroupSapHanaVolumeDataProtectionReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupSapHanaVolumeDataProtectionReplication)(nil)).Elem()
}

func (o VolumeGroupSapHanaVolumeDataProtectionReplicationOutput) ToVolumeGroupSapHanaVolumeDataProtectionReplicationOutput() VolumeGroupSapHanaVolumeDataProtectionReplicationOutput {
	return o
}

func (o VolumeGroupSapHanaVolumeDataProtectionReplicationOutput) ToVolumeGroupSapHanaVolumeDataProtectionReplicationOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeDataProtectionReplicationOutput {
	return o
}

func (o VolumeGroupSapHanaVolumeDataProtectionReplicationOutput) ToVolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput() VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput {
	return o.ToVolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutputWithContext(context.Background())
}

func (o VolumeGroupSapHanaVolumeDataProtectionReplicationOutput) ToVolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeGroupSapHanaVolumeDataProtectionReplication) *VolumeGroupSapHanaVolumeDataProtectionReplication {
		return &v
	}).(VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput)
}

// The endpoint type. Possible values are `dst` and `src`. Defaults to `dst`.
func (o VolumeGroupSapHanaVolumeDataProtectionReplicationOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolumeDataProtectionReplication) *string { return v.EndpointType }).(pulumi.StringPtrOutput)
}

// Location of the primary volume.
func (o VolumeGroupSapHanaVolumeDataProtectionReplicationOutput) RemoteVolumeLocation() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolumeDataProtectionReplication) string { return v.RemoteVolumeLocation }).(pulumi.StringOutput)
}

// Resource ID of the primary volume.
func (o VolumeGroupSapHanaVolumeDataProtectionReplicationOutput) RemoteVolumeResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolumeDataProtectionReplication) string { return v.RemoteVolumeResourceId }).(pulumi.StringOutput)
}

// eplication frequency. Possible values are `10minutes`, `daily` and `hourly`.
func (o VolumeGroupSapHanaVolumeDataProtectionReplicationOutput) ReplicationFrequency() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolumeDataProtectionReplication) string { return v.ReplicationFrequency }).(pulumi.StringOutput)
}

type VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput struct{ *pulumi.OutputState }

func (VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupSapHanaVolumeDataProtectionReplication)(nil)).Elem()
}

func (o VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput) ToVolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput() VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput {
	return o
}

func (o VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput) ToVolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput {
	return o
}

func (o VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput) Elem() VolumeGroupSapHanaVolumeDataProtectionReplicationOutput {
	return o.ApplyT(func(v *VolumeGroupSapHanaVolumeDataProtectionReplication) VolumeGroupSapHanaVolumeDataProtectionReplication {
		if v != nil {
			return *v
		}
		var ret VolumeGroupSapHanaVolumeDataProtectionReplication
		return ret
	}).(VolumeGroupSapHanaVolumeDataProtectionReplicationOutput)
}

// The endpoint type. Possible values are `dst` and `src`. Defaults to `dst`.
func (o VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupSapHanaVolumeDataProtectionReplication) *string {
		if v == nil {
			return nil
		}
		return v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// Location of the primary volume.
func (o VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput) RemoteVolumeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupSapHanaVolumeDataProtectionReplication) *string {
		if v == nil {
			return nil
		}
		return &v.RemoteVolumeLocation
	}).(pulumi.StringPtrOutput)
}

// Resource ID of the primary volume.
func (o VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput) RemoteVolumeResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupSapHanaVolumeDataProtectionReplication) *string {
		if v == nil {
			return nil
		}
		return &v.RemoteVolumeResourceId
	}).(pulumi.StringPtrOutput)
}

// eplication frequency. Possible values are `10minutes`, `daily` and `hourly`.
func (o VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput) ReplicationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupSapHanaVolumeDataProtectionReplication) *string {
		if v == nil {
			return nil
		}
		return &v.ReplicationFrequency
	}).(pulumi.StringPtrOutput)
}

type VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy struct {
	// Resource ID of the snapshot policy to apply to the volume.
	SnapshotPolicyId string `pulumi:"snapshotPolicyId"`
}

// VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyInput is an input type that accepts VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs and VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput values.
// You can construct a concrete instance of `VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyInput` via:
//
//	VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs{...}
type VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyInput interface {
	pulumi.Input

	ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput() VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput
	ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutputWithContext(context.Context) VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput
}

type VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs struct {
	// Resource ID of the snapshot policy to apply to the volume.
	SnapshotPolicyId pulumi.StringInput `pulumi:"snapshotPolicyId"`
}

func (VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy)(nil)).Elem()
}

func (i VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs) ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput() VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput {
	return i.ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutputWithContext(context.Background())
}

func (i VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs) ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput)
}

func (i VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs) ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput() VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput {
	return i.ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(context.Background())
}

func (i VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs) ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput).ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(ctx)
}

// VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrInput is an input type that accepts VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs, VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtr and VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput values.
// You can construct a concrete instance of `VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrInput` via:
//
//	        VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs{...}
//
//	or:
//
//	        nil
type VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrInput interface {
	pulumi.Input

	ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput() VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput
	ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(context.Context) VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput
}

type volumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrType VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs

func VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtr(v *VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs) VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrInput {
	return (*volumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrType)(v)
}

func (*volumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy)(nil)).Elem()
}

func (i *volumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrType) ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput() VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput {
	return i.ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(context.Background())
}

func (i *volumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrType) ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput)
}

type VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput struct{ *pulumi.OutputState }

func (VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy)(nil)).Elem()
}

func (o VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput) ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput() VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput {
	return o
}

func (o VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput) ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput {
	return o
}

func (o VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput) ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput() VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput {
	return o.ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(context.Background())
}

func (o VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput) ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy) *VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy {
		return &v
	}).(VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput)
}

// Resource ID of the snapshot policy to apply to the volume.
func (o VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput) SnapshotPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy) string { return v.SnapshotPolicyId }).(pulumi.StringOutput)
}

type VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput struct{ *pulumi.OutputState }

func (VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy)(nil)).Elem()
}

func (o VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput) ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput() VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput {
	return o
}

func (o VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput) ToVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput {
	return o
}

func (o VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput) Elem() VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput {
	return o.ApplyT(func(v *VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy) VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy {
		if v != nil {
			return *v
		}
		var ret VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy
		return ret
	}).(VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput)
}

// Resource ID of the snapshot policy to apply to the volume.
func (o VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput) SnapshotPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.SnapshotPolicyId
	}).(pulumi.StringPtrOutput)
}

type VolumeGroupSapHanaVolumeExportPolicyRule struct {
	// A comma-sperated list of allowed client IPv4 addresses.
	AllowedClients string `pulumi:"allowedClients"`
	// Enables NFSv3. Please note that this cannot be enabled if volume has NFSv4.1 as its protocol.
	Nfsv3Enabled bool `pulumi:"nfsv3Enabled"`
	// Enables NFSv4.1. Please note that this cannot be enabled if volume has NFSv3 as its protocol.
	Nfsv41Enabled bool `pulumi:"nfsv41Enabled"`
	// Is root access permitted to this volume? Defaults to `true`.
	RootAccessEnabled *bool `pulumi:"rootAccessEnabled"`
	// The index number of the rule, must start at 1 and maximum 5.
	RuleIndex int `pulumi:"ruleIndex"`
	// Is the file system on unix read only? Defaults to `false.
	UnixReadOnly *bool `pulumi:"unixReadOnly"`
	// Is the file system on unix read and write? Defaults to `true`.
	UnixReadWrite *bool `pulumi:"unixReadWrite"`
}

// VolumeGroupSapHanaVolumeExportPolicyRuleInput is an input type that accepts VolumeGroupSapHanaVolumeExportPolicyRuleArgs and VolumeGroupSapHanaVolumeExportPolicyRuleOutput values.
// You can construct a concrete instance of `VolumeGroupSapHanaVolumeExportPolicyRuleInput` via:
//
//	VolumeGroupSapHanaVolumeExportPolicyRuleArgs{...}
type VolumeGroupSapHanaVolumeExportPolicyRuleInput interface {
	pulumi.Input

	ToVolumeGroupSapHanaVolumeExportPolicyRuleOutput() VolumeGroupSapHanaVolumeExportPolicyRuleOutput
	ToVolumeGroupSapHanaVolumeExportPolicyRuleOutputWithContext(context.Context) VolumeGroupSapHanaVolumeExportPolicyRuleOutput
}

type VolumeGroupSapHanaVolumeExportPolicyRuleArgs struct {
	// A comma-sperated list of allowed client IPv4 addresses.
	AllowedClients pulumi.StringInput `pulumi:"allowedClients"`
	// Enables NFSv3. Please note that this cannot be enabled if volume has NFSv4.1 as its protocol.
	Nfsv3Enabled pulumi.BoolInput `pulumi:"nfsv3Enabled"`
	// Enables NFSv4.1. Please note that this cannot be enabled if volume has NFSv3 as its protocol.
	Nfsv41Enabled pulumi.BoolInput `pulumi:"nfsv41Enabled"`
	// Is root access permitted to this volume? Defaults to `true`.
	RootAccessEnabled pulumi.BoolPtrInput `pulumi:"rootAccessEnabled"`
	// The index number of the rule, must start at 1 and maximum 5.
	RuleIndex pulumi.IntInput `pulumi:"ruleIndex"`
	// Is the file system on unix read only? Defaults to `false.
	UnixReadOnly pulumi.BoolPtrInput `pulumi:"unixReadOnly"`
	// Is the file system on unix read and write? Defaults to `true`.
	UnixReadWrite pulumi.BoolPtrInput `pulumi:"unixReadWrite"`
}

func (VolumeGroupSapHanaVolumeExportPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupSapHanaVolumeExportPolicyRule)(nil)).Elem()
}

func (i VolumeGroupSapHanaVolumeExportPolicyRuleArgs) ToVolumeGroupSapHanaVolumeExportPolicyRuleOutput() VolumeGroupSapHanaVolumeExportPolicyRuleOutput {
	return i.ToVolumeGroupSapHanaVolumeExportPolicyRuleOutputWithContext(context.Background())
}

func (i VolumeGroupSapHanaVolumeExportPolicyRuleArgs) ToVolumeGroupSapHanaVolumeExportPolicyRuleOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeExportPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupSapHanaVolumeExportPolicyRuleOutput)
}

// VolumeGroupSapHanaVolumeExportPolicyRuleArrayInput is an input type that accepts VolumeGroupSapHanaVolumeExportPolicyRuleArray and VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput values.
// You can construct a concrete instance of `VolumeGroupSapHanaVolumeExportPolicyRuleArrayInput` via:
//
//	VolumeGroupSapHanaVolumeExportPolicyRuleArray{ VolumeGroupSapHanaVolumeExportPolicyRuleArgs{...} }
type VolumeGroupSapHanaVolumeExportPolicyRuleArrayInput interface {
	pulumi.Input

	ToVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput() VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput
	ToVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutputWithContext(context.Context) VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput
}

type VolumeGroupSapHanaVolumeExportPolicyRuleArray []VolumeGroupSapHanaVolumeExportPolicyRuleInput

func (VolumeGroupSapHanaVolumeExportPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeGroupSapHanaVolumeExportPolicyRule)(nil)).Elem()
}

func (i VolumeGroupSapHanaVolumeExportPolicyRuleArray) ToVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput() VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput {
	return i.ToVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutputWithContext(context.Background())
}

func (i VolumeGroupSapHanaVolumeExportPolicyRuleArray) ToVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput)
}

type VolumeGroupSapHanaVolumeExportPolicyRuleOutput struct{ *pulumi.OutputState }

func (VolumeGroupSapHanaVolumeExportPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupSapHanaVolumeExportPolicyRule)(nil)).Elem()
}

func (o VolumeGroupSapHanaVolumeExportPolicyRuleOutput) ToVolumeGroupSapHanaVolumeExportPolicyRuleOutput() VolumeGroupSapHanaVolumeExportPolicyRuleOutput {
	return o
}

func (o VolumeGroupSapHanaVolumeExportPolicyRuleOutput) ToVolumeGroupSapHanaVolumeExportPolicyRuleOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeExportPolicyRuleOutput {
	return o
}

// A comma-sperated list of allowed client IPv4 addresses.
func (o VolumeGroupSapHanaVolumeExportPolicyRuleOutput) AllowedClients() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolumeExportPolicyRule) string { return v.AllowedClients }).(pulumi.StringOutput)
}

// Enables NFSv3. Please note that this cannot be enabled if volume has NFSv4.1 as its protocol.
func (o VolumeGroupSapHanaVolumeExportPolicyRuleOutput) Nfsv3Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolumeExportPolicyRule) bool { return v.Nfsv3Enabled }).(pulumi.BoolOutput)
}

// Enables NFSv4.1. Please note that this cannot be enabled if volume has NFSv3 as its protocol.
func (o VolumeGroupSapHanaVolumeExportPolicyRuleOutput) Nfsv41Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolumeExportPolicyRule) bool { return v.Nfsv41Enabled }).(pulumi.BoolOutput)
}

// Is root access permitted to this volume? Defaults to `true`.
func (o VolumeGroupSapHanaVolumeExportPolicyRuleOutput) RootAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolumeExportPolicyRule) *bool { return v.RootAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The index number of the rule, must start at 1 and maximum 5.
func (o VolumeGroupSapHanaVolumeExportPolicyRuleOutput) RuleIndex() pulumi.IntOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolumeExportPolicyRule) int { return v.RuleIndex }).(pulumi.IntOutput)
}

// Is the file system on unix read only? Defaults to `false.
func (o VolumeGroupSapHanaVolumeExportPolicyRuleOutput) UnixReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolumeExportPolicyRule) *bool { return v.UnixReadOnly }).(pulumi.BoolPtrOutput)
}

// Is the file system on unix read and write? Defaults to `true`.
func (o VolumeGroupSapHanaVolumeExportPolicyRuleOutput) UnixReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupSapHanaVolumeExportPolicyRule) *bool { return v.UnixReadWrite }).(pulumi.BoolPtrOutput)
}

type VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeGroupSapHanaVolumeExportPolicyRule)(nil)).Elem()
}

func (o VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput) ToVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput() VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput {
	return o
}

func (o VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput) ToVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutputWithContext(ctx context.Context) VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput {
	return o
}

func (o VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput) Index(i pulumi.IntInput) VolumeGroupSapHanaVolumeExportPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeGroupSapHanaVolumeExportPolicyRule {
		return vs[0].([]VolumeGroupSapHanaVolumeExportPolicyRule)[vs[1].(int)]
	}).(VolumeGroupSapHanaVolumeExportPolicyRuleOutput)
}

type GetAccountIdentity struct {
	IdentityIds []string `pulumi:"identityIds"`
	PrincipalId string   `pulumi:"principalId"`
	TenantId    string   `pulumi:"tenantId"`
	Type        string   `pulumi:"type"`
}

// GetAccountIdentityInput is an input type that accepts GetAccountIdentityArgs and GetAccountIdentityOutput values.
// You can construct a concrete instance of `GetAccountIdentityInput` via:
//
//	GetAccountIdentityArgs{...}
type GetAccountIdentityInput interface {
	pulumi.Input

	ToGetAccountIdentityOutput() GetAccountIdentityOutput
	ToGetAccountIdentityOutputWithContext(context.Context) GetAccountIdentityOutput
}

type GetAccountIdentityArgs struct {
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	PrincipalId pulumi.StringInput      `pulumi:"principalId"`
	TenantId    pulumi.StringInput      `pulumi:"tenantId"`
	Type        pulumi.StringInput      `pulumi:"type"`
}

func (GetAccountIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountIdentity)(nil)).Elem()
}

func (i GetAccountIdentityArgs) ToGetAccountIdentityOutput() GetAccountIdentityOutput {
	return i.ToGetAccountIdentityOutputWithContext(context.Background())
}

func (i GetAccountIdentityArgs) ToGetAccountIdentityOutputWithContext(ctx context.Context) GetAccountIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountIdentityOutput)
}

func (i GetAccountIdentityArgs) ToGetAccountIdentityPtrOutput() GetAccountIdentityPtrOutput {
	return i.ToGetAccountIdentityPtrOutputWithContext(context.Background())
}

func (i GetAccountIdentityArgs) ToGetAccountIdentityPtrOutputWithContext(ctx context.Context) GetAccountIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountIdentityOutput).ToGetAccountIdentityPtrOutputWithContext(ctx)
}

// GetAccountIdentityPtrInput is an input type that accepts GetAccountIdentityArgs, GetAccountIdentityPtr and GetAccountIdentityPtrOutput values.
// You can construct a concrete instance of `GetAccountIdentityPtrInput` via:
//
//	        GetAccountIdentityArgs{...}
//
//	or:
//
//	        nil
type GetAccountIdentityPtrInput interface {
	pulumi.Input

	ToGetAccountIdentityPtrOutput() GetAccountIdentityPtrOutput
	ToGetAccountIdentityPtrOutputWithContext(context.Context) GetAccountIdentityPtrOutput
}

type getAccountIdentityPtrType GetAccountIdentityArgs

func GetAccountIdentityPtr(v *GetAccountIdentityArgs) GetAccountIdentityPtrInput {
	return (*getAccountIdentityPtrType)(v)
}

func (*getAccountIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAccountIdentity)(nil)).Elem()
}

func (i *getAccountIdentityPtrType) ToGetAccountIdentityPtrOutput() GetAccountIdentityPtrOutput {
	return i.ToGetAccountIdentityPtrOutputWithContext(context.Background())
}

func (i *getAccountIdentityPtrType) ToGetAccountIdentityPtrOutputWithContext(ctx context.Context) GetAccountIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountIdentityPtrOutput)
}

type GetAccountIdentityOutput struct{ *pulumi.OutputState }

func (GetAccountIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountIdentity)(nil)).Elem()
}

func (o GetAccountIdentityOutput) ToGetAccountIdentityOutput() GetAccountIdentityOutput {
	return o
}

func (o GetAccountIdentityOutput) ToGetAccountIdentityOutputWithContext(ctx context.Context) GetAccountIdentityOutput {
	return o
}

func (o GetAccountIdentityOutput) ToGetAccountIdentityPtrOutput() GetAccountIdentityPtrOutput {
	return o.ToGetAccountIdentityPtrOutputWithContext(context.Background())
}

func (o GetAccountIdentityOutput) ToGetAccountIdentityPtrOutputWithContext(ctx context.Context) GetAccountIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetAccountIdentity) *GetAccountIdentity {
		return &v
	}).(GetAccountIdentityPtrOutput)
}

func (o GetAccountIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAccountIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

func (o GetAccountIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

func (o GetAccountIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

func (o GetAccountIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetAccountIdentityPtrOutput struct{ *pulumi.OutputState }

func (GetAccountIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAccountIdentity)(nil)).Elem()
}

func (o GetAccountIdentityPtrOutput) ToGetAccountIdentityPtrOutput() GetAccountIdentityPtrOutput {
	return o
}

func (o GetAccountIdentityPtrOutput) ToGetAccountIdentityPtrOutputWithContext(ctx context.Context) GetAccountIdentityPtrOutput {
	return o
}

func (o GetAccountIdentityPtrOutput) Elem() GetAccountIdentityOutput {
	return o.ApplyT(func(v *GetAccountIdentity) GetAccountIdentity {
		if v != nil {
			return *v
		}
		var ret GetAccountIdentity
		return ret
	}).(GetAccountIdentityOutput)
}

func (o GetAccountIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetAccountIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

func (o GetAccountIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAccountIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

func (o GetAccountIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAccountIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

func (o GetAccountIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAccountIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type GetSnapshotPolicyDailySchedule struct {
	// Hour of the day that the snapshots will be created.
	Hour int `pulumi:"hour"`
	// Minute of the hour that the snapshots will be created.
	Minute int `pulumi:"minute"`
	// How many hourly snapshots to keep.
	SnapshotsToKeep int `pulumi:"snapshotsToKeep"`
}

// GetSnapshotPolicyDailyScheduleInput is an input type that accepts GetSnapshotPolicyDailyScheduleArgs and GetSnapshotPolicyDailyScheduleOutput values.
// You can construct a concrete instance of `GetSnapshotPolicyDailyScheduleInput` via:
//
//	GetSnapshotPolicyDailyScheduleArgs{...}
type GetSnapshotPolicyDailyScheduleInput interface {
	pulumi.Input

	ToGetSnapshotPolicyDailyScheduleOutput() GetSnapshotPolicyDailyScheduleOutput
	ToGetSnapshotPolicyDailyScheduleOutputWithContext(context.Context) GetSnapshotPolicyDailyScheduleOutput
}

type GetSnapshotPolicyDailyScheduleArgs struct {
	// Hour of the day that the snapshots will be created.
	Hour pulumi.IntInput `pulumi:"hour"`
	// Minute of the hour that the snapshots will be created.
	Minute pulumi.IntInput `pulumi:"minute"`
	// How many hourly snapshots to keep.
	SnapshotsToKeep pulumi.IntInput `pulumi:"snapshotsToKeep"`
}

func (GetSnapshotPolicyDailyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotPolicyDailySchedule)(nil)).Elem()
}

func (i GetSnapshotPolicyDailyScheduleArgs) ToGetSnapshotPolicyDailyScheduleOutput() GetSnapshotPolicyDailyScheduleOutput {
	return i.ToGetSnapshotPolicyDailyScheduleOutputWithContext(context.Background())
}

func (i GetSnapshotPolicyDailyScheduleArgs) ToGetSnapshotPolicyDailyScheduleOutputWithContext(ctx context.Context) GetSnapshotPolicyDailyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotPolicyDailyScheduleOutput)
}

// GetSnapshotPolicyDailyScheduleArrayInput is an input type that accepts GetSnapshotPolicyDailyScheduleArray and GetSnapshotPolicyDailyScheduleArrayOutput values.
// You can construct a concrete instance of `GetSnapshotPolicyDailyScheduleArrayInput` via:
//
//	GetSnapshotPolicyDailyScheduleArray{ GetSnapshotPolicyDailyScheduleArgs{...} }
type GetSnapshotPolicyDailyScheduleArrayInput interface {
	pulumi.Input

	ToGetSnapshotPolicyDailyScheduleArrayOutput() GetSnapshotPolicyDailyScheduleArrayOutput
	ToGetSnapshotPolicyDailyScheduleArrayOutputWithContext(context.Context) GetSnapshotPolicyDailyScheduleArrayOutput
}

type GetSnapshotPolicyDailyScheduleArray []GetSnapshotPolicyDailyScheduleInput

func (GetSnapshotPolicyDailyScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnapshotPolicyDailySchedule)(nil)).Elem()
}

func (i GetSnapshotPolicyDailyScheduleArray) ToGetSnapshotPolicyDailyScheduleArrayOutput() GetSnapshotPolicyDailyScheduleArrayOutput {
	return i.ToGetSnapshotPolicyDailyScheduleArrayOutputWithContext(context.Background())
}

func (i GetSnapshotPolicyDailyScheduleArray) ToGetSnapshotPolicyDailyScheduleArrayOutputWithContext(ctx context.Context) GetSnapshotPolicyDailyScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotPolicyDailyScheduleArrayOutput)
}

type GetSnapshotPolicyDailyScheduleOutput struct{ *pulumi.OutputState }

func (GetSnapshotPolicyDailyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotPolicyDailySchedule)(nil)).Elem()
}

func (o GetSnapshotPolicyDailyScheduleOutput) ToGetSnapshotPolicyDailyScheduleOutput() GetSnapshotPolicyDailyScheduleOutput {
	return o
}

func (o GetSnapshotPolicyDailyScheduleOutput) ToGetSnapshotPolicyDailyScheduleOutputWithContext(ctx context.Context) GetSnapshotPolicyDailyScheduleOutput {
	return o
}

// Hour of the day that the snapshots will be created.
func (o GetSnapshotPolicyDailyScheduleOutput) Hour() pulumi.IntOutput {
	return o.ApplyT(func(v GetSnapshotPolicyDailySchedule) int { return v.Hour }).(pulumi.IntOutput)
}

// Minute of the hour that the snapshots will be created.
func (o GetSnapshotPolicyDailyScheduleOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v GetSnapshotPolicyDailySchedule) int { return v.Minute }).(pulumi.IntOutput)
}

// How many hourly snapshots to keep.
func (o GetSnapshotPolicyDailyScheduleOutput) SnapshotsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v GetSnapshotPolicyDailySchedule) int { return v.SnapshotsToKeep }).(pulumi.IntOutput)
}

type GetSnapshotPolicyDailyScheduleArrayOutput struct{ *pulumi.OutputState }

func (GetSnapshotPolicyDailyScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnapshotPolicyDailySchedule)(nil)).Elem()
}

func (o GetSnapshotPolicyDailyScheduleArrayOutput) ToGetSnapshotPolicyDailyScheduleArrayOutput() GetSnapshotPolicyDailyScheduleArrayOutput {
	return o
}

func (o GetSnapshotPolicyDailyScheduleArrayOutput) ToGetSnapshotPolicyDailyScheduleArrayOutputWithContext(ctx context.Context) GetSnapshotPolicyDailyScheduleArrayOutput {
	return o
}

func (o GetSnapshotPolicyDailyScheduleArrayOutput) Index(i pulumi.IntInput) GetSnapshotPolicyDailyScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSnapshotPolicyDailySchedule {
		return vs[0].([]GetSnapshotPolicyDailySchedule)[vs[1].(int)]
	}).(GetSnapshotPolicyDailyScheduleOutput)
}

type GetSnapshotPolicyHourlySchedule struct {
	// Minute of the hour that the snapshots will be created.
	Minute int `pulumi:"minute"`
	// How many hourly snapshots to keep.
	SnapshotsToKeep int `pulumi:"snapshotsToKeep"`
}

// GetSnapshotPolicyHourlyScheduleInput is an input type that accepts GetSnapshotPolicyHourlyScheduleArgs and GetSnapshotPolicyHourlyScheduleOutput values.
// You can construct a concrete instance of `GetSnapshotPolicyHourlyScheduleInput` via:
//
//	GetSnapshotPolicyHourlyScheduleArgs{...}
type GetSnapshotPolicyHourlyScheduleInput interface {
	pulumi.Input

	ToGetSnapshotPolicyHourlyScheduleOutput() GetSnapshotPolicyHourlyScheduleOutput
	ToGetSnapshotPolicyHourlyScheduleOutputWithContext(context.Context) GetSnapshotPolicyHourlyScheduleOutput
}

type GetSnapshotPolicyHourlyScheduleArgs struct {
	// Minute of the hour that the snapshots will be created.
	Minute pulumi.IntInput `pulumi:"minute"`
	// How many hourly snapshots to keep.
	SnapshotsToKeep pulumi.IntInput `pulumi:"snapshotsToKeep"`
}

func (GetSnapshotPolicyHourlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotPolicyHourlySchedule)(nil)).Elem()
}

func (i GetSnapshotPolicyHourlyScheduleArgs) ToGetSnapshotPolicyHourlyScheduleOutput() GetSnapshotPolicyHourlyScheduleOutput {
	return i.ToGetSnapshotPolicyHourlyScheduleOutputWithContext(context.Background())
}

func (i GetSnapshotPolicyHourlyScheduleArgs) ToGetSnapshotPolicyHourlyScheduleOutputWithContext(ctx context.Context) GetSnapshotPolicyHourlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotPolicyHourlyScheduleOutput)
}

// GetSnapshotPolicyHourlyScheduleArrayInput is an input type that accepts GetSnapshotPolicyHourlyScheduleArray and GetSnapshotPolicyHourlyScheduleArrayOutput values.
// You can construct a concrete instance of `GetSnapshotPolicyHourlyScheduleArrayInput` via:
//
//	GetSnapshotPolicyHourlyScheduleArray{ GetSnapshotPolicyHourlyScheduleArgs{...} }
type GetSnapshotPolicyHourlyScheduleArrayInput interface {
	pulumi.Input

	ToGetSnapshotPolicyHourlyScheduleArrayOutput() GetSnapshotPolicyHourlyScheduleArrayOutput
	ToGetSnapshotPolicyHourlyScheduleArrayOutputWithContext(context.Context) GetSnapshotPolicyHourlyScheduleArrayOutput
}

type GetSnapshotPolicyHourlyScheduleArray []GetSnapshotPolicyHourlyScheduleInput

func (GetSnapshotPolicyHourlyScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnapshotPolicyHourlySchedule)(nil)).Elem()
}

func (i GetSnapshotPolicyHourlyScheduleArray) ToGetSnapshotPolicyHourlyScheduleArrayOutput() GetSnapshotPolicyHourlyScheduleArrayOutput {
	return i.ToGetSnapshotPolicyHourlyScheduleArrayOutputWithContext(context.Background())
}

func (i GetSnapshotPolicyHourlyScheduleArray) ToGetSnapshotPolicyHourlyScheduleArrayOutputWithContext(ctx context.Context) GetSnapshotPolicyHourlyScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotPolicyHourlyScheduleArrayOutput)
}

type GetSnapshotPolicyHourlyScheduleOutput struct{ *pulumi.OutputState }

func (GetSnapshotPolicyHourlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotPolicyHourlySchedule)(nil)).Elem()
}

func (o GetSnapshotPolicyHourlyScheduleOutput) ToGetSnapshotPolicyHourlyScheduleOutput() GetSnapshotPolicyHourlyScheduleOutput {
	return o
}

func (o GetSnapshotPolicyHourlyScheduleOutput) ToGetSnapshotPolicyHourlyScheduleOutputWithContext(ctx context.Context) GetSnapshotPolicyHourlyScheduleOutput {
	return o
}

// Minute of the hour that the snapshots will be created.
func (o GetSnapshotPolicyHourlyScheduleOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v GetSnapshotPolicyHourlySchedule) int { return v.Minute }).(pulumi.IntOutput)
}

// How many hourly snapshots to keep.
func (o GetSnapshotPolicyHourlyScheduleOutput) SnapshotsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v GetSnapshotPolicyHourlySchedule) int { return v.SnapshotsToKeep }).(pulumi.IntOutput)
}

type GetSnapshotPolicyHourlyScheduleArrayOutput struct{ *pulumi.OutputState }

func (GetSnapshotPolicyHourlyScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnapshotPolicyHourlySchedule)(nil)).Elem()
}

func (o GetSnapshotPolicyHourlyScheduleArrayOutput) ToGetSnapshotPolicyHourlyScheduleArrayOutput() GetSnapshotPolicyHourlyScheduleArrayOutput {
	return o
}

func (o GetSnapshotPolicyHourlyScheduleArrayOutput) ToGetSnapshotPolicyHourlyScheduleArrayOutputWithContext(ctx context.Context) GetSnapshotPolicyHourlyScheduleArrayOutput {
	return o
}

func (o GetSnapshotPolicyHourlyScheduleArrayOutput) Index(i pulumi.IntInput) GetSnapshotPolicyHourlyScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSnapshotPolicyHourlySchedule {
		return vs[0].([]GetSnapshotPolicyHourlySchedule)[vs[1].(int)]
	}).(GetSnapshotPolicyHourlyScheduleOutput)
}

type GetSnapshotPolicyMonthlySchedule struct {
	DaysOfMonths []int `pulumi:"daysOfMonths"`
	// Hour of the day that the snapshots will be created.
	Hour int `pulumi:"hour"`
	// Minute of the hour that the snapshots will be created.
	Minute int `pulumi:"minute"`
	// How many hourly snapshots to keep.
	SnapshotsToKeep int `pulumi:"snapshotsToKeep"`
}

// GetSnapshotPolicyMonthlyScheduleInput is an input type that accepts GetSnapshotPolicyMonthlyScheduleArgs and GetSnapshotPolicyMonthlyScheduleOutput values.
// You can construct a concrete instance of `GetSnapshotPolicyMonthlyScheduleInput` via:
//
//	GetSnapshotPolicyMonthlyScheduleArgs{...}
type GetSnapshotPolicyMonthlyScheduleInput interface {
	pulumi.Input

	ToGetSnapshotPolicyMonthlyScheduleOutput() GetSnapshotPolicyMonthlyScheduleOutput
	ToGetSnapshotPolicyMonthlyScheduleOutputWithContext(context.Context) GetSnapshotPolicyMonthlyScheduleOutput
}

type GetSnapshotPolicyMonthlyScheduleArgs struct {
	DaysOfMonths pulumi.IntArrayInput `pulumi:"daysOfMonths"`
	// Hour of the day that the snapshots will be created.
	Hour pulumi.IntInput `pulumi:"hour"`
	// Minute of the hour that the snapshots will be created.
	Minute pulumi.IntInput `pulumi:"minute"`
	// How many hourly snapshots to keep.
	SnapshotsToKeep pulumi.IntInput `pulumi:"snapshotsToKeep"`
}

func (GetSnapshotPolicyMonthlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotPolicyMonthlySchedule)(nil)).Elem()
}

func (i GetSnapshotPolicyMonthlyScheduleArgs) ToGetSnapshotPolicyMonthlyScheduleOutput() GetSnapshotPolicyMonthlyScheduleOutput {
	return i.ToGetSnapshotPolicyMonthlyScheduleOutputWithContext(context.Background())
}

func (i GetSnapshotPolicyMonthlyScheduleArgs) ToGetSnapshotPolicyMonthlyScheduleOutputWithContext(ctx context.Context) GetSnapshotPolicyMonthlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotPolicyMonthlyScheduleOutput)
}

// GetSnapshotPolicyMonthlyScheduleArrayInput is an input type that accepts GetSnapshotPolicyMonthlyScheduleArray and GetSnapshotPolicyMonthlyScheduleArrayOutput values.
// You can construct a concrete instance of `GetSnapshotPolicyMonthlyScheduleArrayInput` via:
//
//	GetSnapshotPolicyMonthlyScheduleArray{ GetSnapshotPolicyMonthlyScheduleArgs{...} }
type GetSnapshotPolicyMonthlyScheduleArrayInput interface {
	pulumi.Input

	ToGetSnapshotPolicyMonthlyScheduleArrayOutput() GetSnapshotPolicyMonthlyScheduleArrayOutput
	ToGetSnapshotPolicyMonthlyScheduleArrayOutputWithContext(context.Context) GetSnapshotPolicyMonthlyScheduleArrayOutput
}

type GetSnapshotPolicyMonthlyScheduleArray []GetSnapshotPolicyMonthlyScheduleInput

func (GetSnapshotPolicyMonthlyScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnapshotPolicyMonthlySchedule)(nil)).Elem()
}

func (i GetSnapshotPolicyMonthlyScheduleArray) ToGetSnapshotPolicyMonthlyScheduleArrayOutput() GetSnapshotPolicyMonthlyScheduleArrayOutput {
	return i.ToGetSnapshotPolicyMonthlyScheduleArrayOutputWithContext(context.Background())
}

func (i GetSnapshotPolicyMonthlyScheduleArray) ToGetSnapshotPolicyMonthlyScheduleArrayOutputWithContext(ctx context.Context) GetSnapshotPolicyMonthlyScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotPolicyMonthlyScheduleArrayOutput)
}

type GetSnapshotPolicyMonthlyScheduleOutput struct{ *pulumi.OutputState }

func (GetSnapshotPolicyMonthlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotPolicyMonthlySchedule)(nil)).Elem()
}

func (o GetSnapshotPolicyMonthlyScheduleOutput) ToGetSnapshotPolicyMonthlyScheduleOutput() GetSnapshotPolicyMonthlyScheduleOutput {
	return o
}

func (o GetSnapshotPolicyMonthlyScheduleOutput) ToGetSnapshotPolicyMonthlyScheduleOutputWithContext(ctx context.Context) GetSnapshotPolicyMonthlyScheduleOutput {
	return o
}

func (o GetSnapshotPolicyMonthlyScheduleOutput) DaysOfMonths() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetSnapshotPolicyMonthlySchedule) []int { return v.DaysOfMonths }).(pulumi.IntArrayOutput)
}

// Hour of the day that the snapshots will be created.
func (o GetSnapshotPolicyMonthlyScheduleOutput) Hour() pulumi.IntOutput {
	return o.ApplyT(func(v GetSnapshotPolicyMonthlySchedule) int { return v.Hour }).(pulumi.IntOutput)
}

// Minute of the hour that the snapshots will be created.
func (o GetSnapshotPolicyMonthlyScheduleOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v GetSnapshotPolicyMonthlySchedule) int { return v.Minute }).(pulumi.IntOutput)
}

// How many hourly snapshots to keep.
func (o GetSnapshotPolicyMonthlyScheduleOutput) SnapshotsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v GetSnapshotPolicyMonthlySchedule) int { return v.SnapshotsToKeep }).(pulumi.IntOutput)
}

type GetSnapshotPolicyMonthlyScheduleArrayOutput struct{ *pulumi.OutputState }

func (GetSnapshotPolicyMonthlyScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnapshotPolicyMonthlySchedule)(nil)).Elem()
}

func (o GetSnapshotPolicyMonthlyScheduleArrayOutput) ToGetSnapshotPolicyMonthlyScheduleArrayOutput() GetSnapshotPolicyMonthlyScheduleArrayOutput {
	return o
}

func (o GetSnapshotPolicyMonthlyScheduleArrayOutput) ToGetSnapshotPolicyMonthlyScheduleArrayOutputWithContext(ctx context.Context) GetSnapshotPolicyMonthlyScheduleArrayOutput {
	return o
}

func (o GetSnapshotPolicyMonthlyScheduleArrayOutput) Index(i pulumi.IntInput) GetSnapshotPolicyMonthlyScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSnapshotPolicyMonthlySchedule {
		return vs[0].([]GetSnapshotPolicyMonthlySchedule)[vs[1].(int)]
	}).(GetSnapshotPolicyMonthlyScheduleOutput)
}

type GetSnapshotPolicyWeeklySchedule struct {
	// List of the week days using English names when the snapshots will be created.
	DaysOfWeeks []string `pulumi:"daysOfWeeks"`
	// Hour of the day that the snapshots will be created.
	Hour int `pulumi:"hour"`
	// Minute of the hour that the snapshots will be created.
	Minute int `pulumi:"minute"`
	// How many hourly snapshots to keep.
	SnapshotsToKeep int `pulumi:"snapshotsToKeep"`
}

// GetSnapshotPolicyWeeklyScheduleInput is an input type that accepts GetSnapshotPolicyWeeklyScheduleArgs and GetSnapshotPolicyWeeklyScheduleOutput values.
// You can construct a concrete instance of `GetSnapshotPolicyWeeklyScheduleInput` via:
//
//	GetSnapshotPolicyWeeklyScheduleArgs{...}
type GetSnapshotPolicyWeeklyScheduleInput interface {
	pulumi.Input

	ToGetSnapshotPolicyWeeklyScheduleOutput() GetSnapshotPolicyWeeklyScheduleOutput
	ToGetSnapshotPolicyWeeklyScheduleOutputWithContext(context.Context) GetSnapshotPolicyWeeklyScheduleOutput
}

type GetSnapshotPolicyWeeklyScheduleArgs struct {
	// List of the week days using English names when the snapshots will be created.
	DaysOfWeeks pulumi.StringArrayInput `pulumi:"daysOfWeeks"`
	// Hour of the day that the snapshots will be created.
	Hour pulumi.IntInput `pulumi:"hour"`
	// Minute of the hour that the snapshots will be created.
	Minute pulumi.IntInput `pulumi:"minute"`
	// How many hourly snapshots to keep.
	SnapshotsToKeep pulumi.IntInput `pulumi:"snapshotsToKeep"`
}

func (GetSnapshotPolicyWeeklyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotPolicyWeeklySchedule)(nil)).Elem()
}

func (i GetSnapshotPolicyWeeklyScheduleArgs) ToGetSnapshotPolicyWeeklyScheduleOutput() GetSnapshotPolicyWeeklyScheduleOutput {
	return i.ToGetSnapshotPolicyWeeklyScheduleOutputWithContext(context.Background())
}

func (i GetSnapshotPolicyWeeklyScheduleArgs) ToGetSnapshotPolicyWeeklyScheduleOutputWithContext(ctx context.Context) GetSnapshotPolicyWeeklyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotPolicyWeeklyScheduleOutput)
}

// GetSnapshotPolicyWeeklyScheduleArrayInput is an input type that accepts GetSnapshotPolicyWeeklyScheduleArray and GetSnapshotPolicyWeeklyScheduleArrayOutput values.
// You can construct a concrete instance of `GetSnapshotPolicyWeeklyScheduleArrayInput` via:
//
//	GetSnapshotPolicyWeeklyScheduleArray{ GetSnapshotPolicyWeeklyScheduleArgs{...} }
type GetSnapshotPolicyWeeklyScheduleArrayInput interface {
	pulumi.Input

	ToGetSnapshotPolicyWeeklyScheduleArrayOutput() GetSnapshotPolicyWeeklyScheduleArrayOutput
	ToGetSnapshotPolicyWeeklyScheduleArrayOutputWithContext(context.Context) GetSnapshotPolicyWeeklyScheduleArrayOutput
}

type GetSnapshotPolicyWeeklyScheduleArray []GetSnapshotPolicyWeeklyScheduleInput

func (GetSnapshotPolicyWeeklyScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnapshotPolicyWeeklySchedule)(nil)).Elem()
}

func (i GetSnapshotPolicyWeeklyScheduleArray) ToGetSnapshotPolicyWeeklyScheduleArrayOutput() GetSnapshotPolicyWeeklyScheduleArrayOutput {
	return i.ToGetSnapshotPolicyWeeklyScheduleArrayOutputWithContext(context.Background())
}

func (i GetSnapshotPolicyWeeklyScheduleArray) ToGetSnapshotPolicyWeeklyScheduleArrayOutputWithContext(ctx context.Context) GetSnapshotPolicyWeeklyScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnapshotPolicyWeeklyScheduleArrayOutput)
}

type GetSnapshotPolicyWeeklyScheduleOutput struct{ *pulumi.OutputState }

func (GetSnapshotPolicyWeeklyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotPolicyWeeklySchedule)(nil)).Elem()
}

func (o GetSnapshotPolicyWeeklyScheduleOutput) ToGetSnapshotPolicyWeeklyScheduleOutput() GetSnapshotPolicyWeeklyScheduleOutput {
	return o
}

func (o GetSnapshotPolicyWeeklyScheduleOutput) ToGetSnapshotPolicyWeeklyScheduleOutputWithContext(ctx context.Context) GetSnapshotPolicyWeeklyScheduleOutput {
	return o
}

// List of the week days using English names when the snapshots will be created.
func (o GetSnapshotPolicyWeeklyScheduleOutput) DaysOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSnapshotPolicyWeeklySchedule) []string { return v.DaysOfWeeks }).(pulumi.StringArrayOutput)
}

// Hour of the day that the snapshots will be created.
func (o GetSnapshotPolicyWeeklyScheduleOutput) Hour() pulumi.IntOutput {
	return o.ApplyT(func(v GetSnapshotPolicyWeeklySchedule) int { return v.Hour }).(pulumi.IntOutput)
}

// Minute of the hour that the snapshots will be created.
func (o GetSnapshotPolicyWeeklyScheduleOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v GetSnapshotPolicyWeeklySchedule) int { return v.Minute }).(pulumi.IntOutput)
}

// How many hourly snapshots to keep.
func (o GetSnapshotPolicyWeeklyScheduleOutput) SnapshotsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v GetSnapshotPolicyWeeklySchedule) int { return v.SnapshotsToKeep }).(pulumi.IntOutput)
}

type GetSnapshotPolicyWeeklyScheduleArrayOutput struct{ *pulumi.OutputState }

func (GetSnapshotPolicyWeeklyScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnapshotPolicyWeeklySchedule)(nil)).Elem()
}

func (o GetSnapshotPolicyWeeklyScheduleArrayOutput) ToGetSnapshotPolicyWeeklyScheduleArrayOutput() GetSnapshotPolicyWeeklyScheduleArrayOutput {
	return o
}

func (o GetSnapshotPolicyWeeklyScheduleArrayOutput) ToGetSnapshotPolicyWeeklyScheduleArrayOutputWithContext(ctx context.Context) GetSnapshotPolicyWeeklyScheduleArrayOutput {
	return o
}

func (o GetSnapshotPolicyWeeklyScheduleArrayOutput) Index(i pulumi.IntInput) GetSnapshotPolicyWeeklyScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSnapshotPolicyWeeklySchedule {
		return vs[0].([]GetSnapshotPolicyWeeklySchedule)[vs[1].(int)]
	}).(GetSnapshotPolicyWeeklyScheduleOutput)
}

type GetVolumeDataProtectionReplication struct {
	// The endpoint type.
	EndpointType string `pulumi:"endpointType"`
	// Location of the primary volume.
	RemoteVolumeLocation string `pulumi:"remoteVolumeLocation"`
	// Resource ID of the primary volume.
	RemoteVolumeResourceId string `pulumi:"remoteVolumeResourceId"`
	// Frequency of replication.
	ReplicationFrequency string `pulumi:"replicationFrequency"`
}

// GetVolumeDataProtectionReplicationInput is an input type that accepts GetVolumeDataProtectionReplicationArgs and GetVolumeDataProtectionReplicationOutput values.
// You can construct a concrete instance of `GetVolumeDataProtectionReplicationInput` via:
//
//	GetVolumeDataProtectionReplicationArgs{...}
type GetVolumeDataProtectionReplicationInput interface {
	pulumi.Input

	ToGetVolumeDataProtectionReplicationOutput() GetVolumeDataProtectionReplicationOutput
	ToGetVolumeDataProtectionReplicationOutputWithContext(context.Context) GetVolumeDataProtectionReplicationOutput
}

type GetVolumeDataProtectionReplicationArgs struct {
	// The endpoint type.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// Location of the primary volume.
	RemoteVolumeLocation pulumi.StringInput `pulumi:"remoteVolumeLocation"`
	// Resource ID of the primary volume.
	RemoteVolumeResourceId pulumi.StringInput `pulumi:"remoteVolumeResourceId"`
	// Frequency of replication.
	ReplicationFrequency pulumi.StringInput `pulumi:"replicationFrequency"`
}

func (GetVolumeDataProtectionReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeDataProtectionReplication)(nil)).Elem()
}

func (i GetVolumeDataProtectionReplicationArgs) ToGetVolumeDataProtectionReplicationOutput() GetVolumeDataProtectionReplicationOutput {
	return i.ToGetVolumeDataProtectionReplicationOutputWithContext(context.Background())
}

func (i GetVolumeDataProtectionReplicationArgs) ToGetVolumeDataProtectionReplicationOutputWithContext(ctx context.Context) GetVolumeDataProtectionReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeDataProtectionReplicationOutput)
}

// GetVolumeDataProtectionReplicationArrayInput is an input type that accepts GetVolumeDataProtectionReplicationArray and GetVolumeDataProtectionReplicationArrayOutput values.
// You can construct a concrete instance of `GetVolumeDataProtectionReplicationArrayInput` via:
//
//	GetVolumeDataProtectionReplicationArray{ GetVolumeDataProtectionReplicationArgs{...} }
type GetVolumeDataProtectionReplicationArrayInput interface {
	pulumi.Input

	ToGetVolumeDataProtectionReplicationArrayOutput() GetVolumeDataProtectionReplicationArrayOutput
	ToGetVolumeDataProtectionReplicationArrayOutputWithContext(context.Context) GetVolumeDataProtectionReplicationArrayOutput
}

type GetVolumeDataProtectionReplicationArray []GetVolumeDataProtectionReplicationInput

func (GetVolumeDataProtectionReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeDataProtectionReplication)(nil)).Elem()
}

func (i GetVolumeDataProtectionReplicationArray) ToGetVolumeDataProtectionReplicationArrayOutput() GetVolumeDataProtectionReplicationArrayOutput {
	return i.ToGetVolumeDataProtectionReplicationArrayOutputWithContext(context.Background())
}

func (i GetVolumeDataProtectionReplicationArray) ToGetVolumeDataProtectionReplicationArrayOutputWithContext(ctx context.Context) GetVolumeDataProtectionReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeDataProtectionReplicationArrayOutput)
}

type GetVolumeDataProtectionReplicationOutput struct{ *pulumi.OutputState }

func (GetVolumeDataProtectionReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeDataProtectionReplication)(nil)).Elem()
}

func (o GetVolumeDataProtectionReplicationOutput) ToGetVolumeDataProtectionReplicationOutput() GetVolumeDataProtectionReplicationOutput {
	return o
}

func (o GetVolumeDataProtectionReplicationOutput) ToGetVolumeDataProtectionReplicationOutputWithContext(ctx context.Context) GetVolumeDataProtectionReplicationOutput {
	return o
}

// The endpoint type.
func (o GetVolumeDataProtectionReplicationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeDataProtectionReplication) string { return v.EndpointType }).(pulumi.StringOutput)
}

// Location of the primary volume.
func (o GetVolumeDataProtectionReplicationOutput) RemoteVolumeLocation() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeDataProtectionReplication) string { return v.RemoteVolumeLocation }).(pulumi.StringOutput)
}

// Resource ID of the primary volume.
func (o GetVolumeDataProtectionReplicationOutput) RemoteVolumeResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeDataProtectionReplication) string { return v.RemoteVolumeResourceId }).(pulumi.StringOutput)
}

// Frequency of replication.
func (o GetVolumeDataProtectionReplicationOutput) ReplicationFrequency() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeDataProtectionReplication) string { return v.ReplicationFrequency }).(pulumi.StringOutput)
}

type GetVolumeDataProtectionReplicationArrayOutput struct{ *pulumi.OutputState }

func (GetVolumeDataProtectionReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeDataProtectionReplication)(nil)).Elem()
}

func (o GetVolumeDataProtectionReplicationArrayOutput) ToGetVolumeDataProtectionReplicationArrayOutput() GetVolumeDataProtectionReplicationArrayOutput {
	return o
}

func (o GetVolumeDataProtectionReplicationArrayOutput) ToGetVolumeDataProtectionReplicationArrayOutputWithContext(ctx context.Context) GetVolumeDataProtectionReplicationArrayOutput {
	return o
}

func (o GetVolumeDataProtectionReplicationArrayOutput) Index(i pulumi.IntInput) GetVolumeDataProtectionReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumeDataProtectionReplication {
		return vs[0].([]GetVolumeDataProtectionReplication)[vs[1].(int)]
	}).(GetVolumeDataProtectionReplicationOutput)
}

type GetVolumeGroupSapHanaVolume struct {
	// The ID of the Capacity Pool.
	CapacityPoolId string `pulumi:"capacityPoolId"`
	// A `dataProtectionReplication` block as defined below.
	DataProtectionReplications []GetVolumeGroupSapHanaVolumeDataProtectionReplication `pulumi:"dataProtectionReplications"`
	// A `dataProtectionSnapshotPolicy` block as defined below.
	DataProtectionSnapshotPolicies []GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy `pulumi:"dataProtectionSnapshotPolicies"`
	// A `exportPolicyRule` block as defined below.
	ExportPolicyRules []GetVolumeGroupSapHanaVolumeExportPolicyRule `pulumi:"exportPolicyRules"`
	// Volume ID.
	Id string `pulumi:"id"`
	// A `mountIpAddresses` block as defined below.
	MountIpAddresses []string `pulumi:"mountIpAddresses"`
	// The name of this Application Volume Group for SAP HANA application.
	Name string `pulumi:"name"`
	// A `protocols` block as defined below.
	Protocols []string `pulumi:"protocols"`
	// The ID of the proximity placement group.
	ProximityPlacementGroupId string `pulumi:"proximityPlacementGroupId"`
	// Volume security style.
	SecurityStyle string `pulumi:"securityStyle"`
	// The target performance of the file system.
	ServiceLevel string `pulumi:"serviceLevel"`
	// Is the .snapshot (NFS clients) path of a volume visible?
	SnapshotDirectoryVisible bool `pulumi:"snapshotDirectoryVisible"`
	// The maximum Storage Quota allowed for a file system in Gigabytes.
	StorageQuotaInGb int `pulumi:"storageQuotaInGb"`
	// The ID of the Subnet the NetApp Volume resides in.
	SubnetId string `pulumi:"subnetId"`
	// A mapping of tags assigned to the Application Volume Group.
	Tags map[string]string `pulumi:"tags"`
	// Throughput of this volume in Mibps.
	ThroughputInMibps float64 `pulumi:"throughputInMibps"`
	// A unique file path for the volume.
	VolumePath string `pulumi:"volumePath"`
	// Volume spec name.
	VolumeSpecName string `pulumi:"volumeSpecName"`
}

// GetVolumeGroupSapHanaVolumeInput is an input type that accepts GetVolumeGroupSapHanaVolumeArgs and GetVolumeGroupSapHanaVolumeOutput values.
// You can construct a concrete instance of `GetVolumeGroupSapHanaVolumeInput` via:
//
//	GetVolumeGroupSapHanaVolumeArgs{...}
type GetVolumeGroupSapHanaVolumeInput interface {
	pulumi.Input

	ToGetVolumeGroupSapHanaVolumeOutput() GetVolumeGroupSapHanaVolumeOutput
	ToGetVolumeGroupSapHanaVolumeOutputWithContext(context.Context) GetVolumeGroupSapHanaVolumeOutput
}

type GetVolumeGroupSapHanaVolumeArgs struct {
	// The ID of the Capacity Pool.
	CapacityPoolId pulumi.StringInput `pulumi:"capacityPoolId"`
	// A `dataProtectionReplication` block as defined below.
	DataProtectionReplications GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayInput `pulumi:"dataProtectionReplications"`
	// A `dataProtectionSnapshotPolicy` block as defined below.
	DataProtectionSnapshotPolicies GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayInput `pulumi:"dataProtectionSnapshotPolicies"`
	// A `exportPolicyRule` block as defined below.
	ExportPolicyRules GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayInput `pulumi:"exportPolicyRules"`
	// Volume ID.
	Id pulumi.StringInput `pulumi:"id"`
	// A `mountIpAddresses` block as defined below.
	MountIpAddresses pulumi.StringArrayInput `pulumi:"mountIpAddresses"`
	// The name of this Application Volume Group for SAP HANA application.
	Name pulumi.StringInput `pulumi:"name"`
	// A `protocols` block as defined below.
	Protocols pulumi.StringArrayInput `pulumi:"protocols"`
	// The ID of the proximity placement group.
	ProximityPlacementGroupId pulumi.StringInput `pulumi:"proximityPlacementGroupId"`
	// Volume security style.
	SecurityStyle pulumi.StringInput `pulumi:"securityStyle"`
	// The target performance of the file system.
	ServiceLevel pulumi.StringInput `pulumi:"serviceLevel"`
	// Is the .snapshot (NFS clients) path of a volume visible?
	SnapshotDirectoryVisible pulumi.BoolInput `pulumi:"snapshotDirectoryVisible"`
	// The maximum Storage Quota allowed for a file system in Gigabytes.
	StorageQuotaInGb pulumi.IntInput `pulumi:"storageQuotaInGb"`
	// The ID of the Subnet the NetApp Volume resides in.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// A mapping of tags assigned to the Application Volume Group.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Throughput of this volume in Mibps.
	ThroughputInMibps pulumi.Float64Input `pulumi:"throughputInMibps"`
	// A unique file path for the volume.
	VolumePath pulumi.StringInput `pulumi:"volumePath"`
	// Volume spec name.
	VolumeSpecName pulumi.StringInput `pulumi:"volumeSpecName"`
}

func (GetVolumeGroupSapHanaVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupSapHanaVolume)(nil)).Elem()
}

func (i GetVolumeGroupSapHanaVolumeArgs) ToGetVolumeGroupSapHanaVolumeOutput() GetVolumeGroupSapHanaVolumeOutput {
	return i.ToGetVolumeGroupSapHanaVolumeOutputWithContext(context.Background())
}

func (i GetVolumeGroupSapHanaVolumeArgs) ToGetVolumeGroupSapHanaVolumeOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeGroupSapHanaVolumeOutput)
}

// GetVolumeGroupSapHanaVolumeArrayInput is an input type that accepts GetVolumeGroupSapHanaVolumeArray and GetVolumeGroupSapHanaVolumeArrayOutput values.
// You can construct a concrete instance of `GetVolumeGroupSapHanaVolumeArrayInput` via:
//
//	GetVolumeGroupSapHanaVolumeArray{ GetVolumeGroupSapHanaVolumeArgs{...} }
type GetVolumeGroupSapHanaVolumeArrayInput interface {
	pulumi.Input

	ToGetVolumeGroupSapHanaVolumeArrayOutput() GetVolumeGroupSapHanaVolumeArrayOutput
	ToGetVolumeGroupSapHanaVolumeArrayOutputWithContext(context.Context) GetVolumeGroupSapHanaVolumeArrayOutput
}

type GetVolumeGroupSapHanaVolumeArray []GetVolumeGroupSapHanaVolumeInput

func (GetVolumeGroupSapHanaVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeGroupSapHanaVolume)(nil)).Elem()
}

func (i GetVolumeGroupSapHanaVolumeArray) ToGetVolumeGroupSapHanaVolumeArrayOutput() GetVolumeGroupSapHanaVolumeArrayOutput {
	return i.ToGetVolumeGroupSapHanaVolumeArrayOutputWithContext(context.Background())
}

func (i GetVolumeGroupSapHanaVolumeArray) ToGetVolumeGroupSapHanaVolumeArrayOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeGroupSapHanaVolumeArrayOutput)
}

type GetVolumeGroupSapHanaVolumeOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupSapHanaVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupSapHanaVolume)(nil)).Elem()
}

func (o GetVolumeGroupSapHanaVolumeOutput) ToGetVolumeGroupSapHanaVolumeOutput() GetVolumeGroupSapHanaVolumeOutput {
	return o
}

func (o GetVolumeGroupSapHanaVolumeOutput) ToGetVolumeGroupSapHanaVolumeOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeOutput {
	return o
}

// The ID of the Capacity Pool.
func (o GetVolumeGroupSapHanaVolumeOutput) CapacityPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) string { return v.CapacityPoolId }).(pulumi.StringOutput)
}

// A `dataProtectionReplication` block as defined below.
func (o GetVolumeGroupSapHanaVolumeOutput) DataProtectionReplications() GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) []GetVolumeGroupSapHanaVolumeDataProtectionReplication {
		return v.DataProtectionReplications
	}).(GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput)
}

// A `dataProtectionSnapshotPolicy` block as defined below.
func (o GetVolumeGroupSapHanaVolumeOutput) DataProtectionSnapshotPolicies() GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) []GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy {
		return v.DataProtectionSnapshotPolicies
	}).(GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput)
}

// A `exportPolicyRule` block as defined below.
func (o GetVolumeGroupSapHanaVolumeOutput) ExportPolicyRules() GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) []GetVolumeGroupSapHanaVolumeExportPolicyRule {
		return v.ExportPolicyRules
	}).(GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput)
}

// Volume ID.
func (o GetVolumeGroupSapHanaVolumeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) string { return v.Id }).(pulumi.StringOutput)
}

// A `mountIpAddresses` block as defined below.
func (o GetVolumeGroupSapHanaVolumeOutput) MountIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) []string { return v.MountIpAddresses }).(pulumi.StringArrayOutput)
}

// The name of this Application Volume Group for SAP HANA application.
func (o GetVolumeGroupSapHanaVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) string { return v.Name }).(pulumi.StringOutput)
}

// A `protocols` block as defined below.
func (o GetVolumeGroupSapHanaVolumeOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) []string { return v.Protocols }).(pulumi.StringArrayOutput)
}

// The ID of the proximity placement group.
func (o GetVolumeGroupSapHanaVolumeOutput) ProximityPlacementGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) string { return v.ProximityPlacementGroupId }).(pulumi.StringOutput)
}

// Volume security style.
func (o GetVolumeGroupSapHanaVolumeOutput) SecurityStyle() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) string { return v.SecurityStyle }).(pulumi.StringOutput)
}

// The target performance of the file system.
func (o GetVolumeGroupSapHanaVolumeOutput) ServiceLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) string { return v.ServiceLevel }).(pulumi.StringOutput)
}

// Is the .snapshot (NFS clients) path of a volume visible?
func (o GetVolumeGroupSapHanaVolumeOutput) SnapshotDirectoryVisible() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) bool { return v.SnapshotDirectoryVisible }).(pulumi.BoolOutput)
}

// The maximum Storage Quota allowed for a file system in Gigabytes.
func (o GetVolumeGroupSapHanaVolumeOutput) StorageQuotaInGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) int { return v.StorageQuotaInGb }).(pulumi.IntOutput)
}

// The ID of the Subnet the NetApp Volume resides in.
func (o GetVolumeGroupSapHanaVolumeOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) string { return v.SubnetId }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the Application Volume Group.
func (o GetVolumeGroupSapHanaVolumeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Throughput of this volume in Mibps.
func (o GetVolumeGroupSapHanaVolumeOutput) ThroughputInMibps() pulumi.Float64Output {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) float64 { return v.ThroughputInMibps }).(pulumi.Float64Output)
}

// A unique file path for the volume.
func (o GetVolumeGroupSapHanaVolumeOutput) VolumePath() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) string { return v.VolumePath }).(pulumi.StringOutput)
}

// Volume spec name.
func (o GetVolumeGroupSapHanaVolumeOutput) VolumeSpecName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolume) string { return v.VolumeSpecName }).(pulumi.StringOutput)
}

type GetVolumeGroupSapHanaVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupSapHanaVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeGroupSapHanaVolume)(nil)).Elem()
}

func (o GetVolumeGroupSapHanaVolumeArrayOutput) ToGetVolumeGroupSapHanaVolumeArrayOutput() GetVolumeGroupSapHanaVolumeArrayOutput {
	return o
}

func (o GetVolumeGroupSapHanaVolumeArrayOutput) ToGetVolumeGroupSapHanaVolumeArrayOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeArrayOutput {
	return o
}

func (o GetVolumeGroupSapHanaVolumeArrayOutput) Index(i pulumi.IntInput) GetVolumeGroupSapHanaVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumeGroupSapHanaVolume {
		return vs[0].([]GetVolumeGroupSapHanaVolume)[vs[1].(int)]
	}).(GetVolumeGroupSapHanaVolumeOutput)
}

type GetVolumeGroupSapHanaVolumeDataProtectionReplication struct {
	// The endpoint type.
	EndpointType string `pulumi:"endpointType"`
	// Location of the primary volume.
	RemoteVolumeLocation string `pulumi:"remoteVolumeLocation"`
	// Resource ID of the primary volume.
	RemoteVolumeResourceId string `pulumi:"remoteVolumeResourceId"`
	// Replication frequency.
	ReplicationFrequency string `pulumi:"replicationFrequency"`
}

// GetVolumeGroupSapHanaVolumeDataProtectionReplicationInput is an input type that accepts GetVolumeGroupSapHanaVolumeDataProtectionReplicationArgs and GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput values.
// You can construct a concrete instance of `GetVolumeGroupSapHanaVolumeDataProtectionReplicationInput` via:
//
//	GetVolumeGroupSapHanaVolumeDataProtectionReplicationArgs{...}
type GetVolumeGroupSapHanaVolumeDataProtectionReplicationInput interface {
	pulumi.Input

	ToGetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput() GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput
	ToGetVolumeGroupSapHanaVolumeDataProtectionReplicationOutputWithContext(context.Context) GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput
}

type GetVolumeGroupSapHanaVolumeDataProtectionReplicationArgs struct {
	// The endpoint type.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// Location of the primary volume.
	RemoteVolumeLocation pulumi.StringInput `pulumi:"remoteVolumeLocation"`
	// Resource ID of the primary volume.
	RemoteVolumeResourceId pulumi.StringInput `pulumi:"remoteVolumeResourceId"`
	// Replication frequency.
	ReplicationFrequency pulumi.StringInput `pulumi:"replicationFrequency"`
}

func (GetVolumeGroupSapHanaVolumeDataProtectionReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupSapHanaVolumeDataProtectionReplication)(nil)).Elem()
}

func (i GetVolumeGroupSapHanaVolumeDataProtectionReplicationArgs) ToGetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput() GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput {
	return i.ToGetVolumeGroupSapHanaVolumeDataProtectionReplicationOutputWithContext(context.Background())
}

func (i GetVolumeGroupSapHanaVolumeDataProtectionReplicationArgs) ToGetVolumeGroupSapHanaVolumeDataProtectionReplicationOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput)
}

// GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayInput is an input type that accepts GetVolumeGroupSapHanaVolumeDataProtectionReplicationArray and GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput values.
// You can construct a concrete instance of `GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayInput` via:
//
//	GetVolumeGroupSapHanaVolumeDataProtectionReplicationArray{ GetVolumeGroupSapHanaVolumeDataProtectionReplicationArgs{...} }
type GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayInput interface {
	pulumi.Input

	ToGetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput() GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput
	ToGetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutputWithContext(context.Context) GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput
}

type GetVolumeGroupSapHanaVolumeDataProtectionReplicationArray []GetVolumeGroupSapHanaVolumeDataProtectionReplicationInput

func (GetVolumeGroupSapHanaVolumeDataProtectionReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeGroupSapHanaVolumeDataProtectionReplication)(nil)).Elem()
}

func (i GetVolumeGroupSapHanaVolumeDataProtectionReplicationArray) ToGetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput() GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput {
	return i.ToGetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutputWithContext(context.Background())
}

func (i GetVolumeGroupSapHanaVolumeDataProtectionReplicationArray) ToGetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput)
}

type GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupSapHanaVolumeDataProtectionReplication)(nil)).Elem()
}

func (o GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput) ToGetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput() GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput {
	return o
}

func (o GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput) ToGetVolumeGroupSapHanaVolumeDataProtectionReplicationOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput {
	return o
}

// The endpoint type.
func (o GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolumeDataProtectionReplication) string { return v.EndpointType }).(pulumi.StringOutput)
}

// Location of the primary volume.
func (o GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput) RemoteVolumeLocation() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolumeDataProtectionReplication) string { return v.RemoteVolumeLocation }).(pulumi.StringOutput)
}

// Resource ID of the primary volume.
func (o GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput) RemoteVolumeResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolumeDataProtectionReplication) string { return v.RemoteVolumeResourceId }).(pulumi.StringOutput)
}

// Replication frequency.
func (o GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput) ReplicationFrequency() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolumeDataProtectionReplication) string { return v.ReplicationFrequency }).(pulumi.StringOutput)
}

type GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeGroupSapHanaVolumeDataProtectionReplication)(nil)).Elem()
}

func (o GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput) ToGetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput() GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput {
	return o
}

func (o GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput) ToGetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput {
	return o
}

func (o GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput) Index(i pulumi.IntInput) GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumeGroupSapHanaVolumeDataProtectionReplication {
		return vs[0].([]GetVolumeGroupSapHanaVolumeDataProtectionReplication)[vs[1].(int)]
	}).(GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput)
}

type GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy struct {
	// Resource ID of the snapshot policy to apply to the volume.
	SnapshotPolicyId string `pulumi:"snapshotPolicyId"`
}

// GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyInput is an input type that accepts GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs and GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput values.
// You can construct a concrete instance of `GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyInput` via:
//
//	GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs{...}
type GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyInput interface {
	pulumi.Input

	ToGetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput() GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput
	ToGetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutputWithContext(context.Context) GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput
}

type GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs struct {
	// Resource ID of the snapshot policy to apply to the volume.
	SnapshotPolicyId pulumi.StringInput `pulumi:"snapshotPolicyId"`
}

func (GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy)(nil)).Elem()
}

func (i GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs) ToGetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput() GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput {
	return i.ToGetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutputWithContext(context.Background())
}

func (i GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs) ToGetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput)
}

// GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayInput is an input type that accepts GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArray and GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput values.
// You can construct a concrete instance of `GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayInput` via:
//
//	GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArray{ GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs{...} }
type GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayInput interface {
	pulumi.Input

	ToGetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput() GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput
	ToGetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutputWithContext(context.Context) GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput
}

type GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArray []GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyInput

func (GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy)(nil)).Elem()
}

func (i GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArray) ToGetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput() GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput {
	return i.ToGetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutputWithContext(context.Background())
}

func (i GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArray) ToGetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput)
}

type GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy)(nil)).Elem()
}

func (o GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput) ToGetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput() GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput {
	return o
}

func (o GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput) ToGetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput {
	return o
}

// Resource ID of the snapshot policy to apply to the volume.
func (o GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput) SnapshotPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy) string { return v.SnapshotPolicyId }).(pulumi.StringOutput)
}

type GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy)(nil)).Elem()
}

func (o GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput) ToGetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput() GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput {
	return o
}

func (o GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput) ToGetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput {
	return o
}

func (o GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput) Index(i pulumi.IntInput) GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy {
		return vs[0].([]GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicy)[vs[1].(int)]
	}).(GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput)
}

type GetVolumeGroupSapHanaVolumeExportPolicyRule struct {
	// A list of allowed clients IPv4 addresses.
	AllowedClients string `pulumi:"allowedClients"`
	// Is the NFSv3 protocol enabled?
	Nfsv3Enabled bool `pulumi:"nfsv3Enabled"`
	// Is the NFSv4.1 enabled?
	Nfsv41Enabled bool `pulumi:"nfsv41Enabled"`
	// Is root access permitted to this volume?
	RootAccessEnabled bool `pulumi:"rootAccessEnabled"`
	// The index number of the rule.
	RuleIndex int `pulumi:"ruleIndex"`
	// Is the file system on unix read only?.
	UnixReadOnly bool `pulumi:"unixReadOnly"`
	// Is the file system on unix read and write?.
	UnixReadWrite bool `pulumi:"unixReadWrite"`
}

// GetVolumeGroupSapHanaVolumeExportPolicyRuleInput is an input type that accepts GetVolumeGroupSapHanaVolumeExportPolicyRuleArgs and GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput values.
// You can construct a concrete instance of `GetVolumeGroupSapHanaVolumeExportPolicyRuleInput` via:
//
//	GetVolumeGroupSapHanaVolumeExportPolicyRuleArgs{...}
type GetVolumeGroupSapHanaVolumeExportPolicyRuleInput interface {
	pulumi.Input

	ToGetVolumeGroupSapHanaVolumeExportPolicyRuleOutput() GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput
	ToGetVolumeGroupSapHanaVolumeExportPolicyRuleOutputWithContext(context.Context) GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput
}

type GetVolumeGroupSapHanaVolumeExportPolicyRuleArgs struct {
	// A list of allowed clients IPv4 addresses.
	AllowedClients pulumi.StringInput `pulumi:"allowedClients"`
	// Is the NFSv3 protocol enabled?
	Nfsv3Enabled pulumi.BoolInput `pulumi:"nfsv3Enabled"`
	// Is the NFSv4.1 enabled?
	Nfsv41Enabled pulumi.BoolInput `pulumi:"nfsv41Enabled"`
	// Is root access permitted to this volume?
	RootAccessEnabled pulumi.BoolInput `pulumi:"rootAccessEnabled"`
	// The index number of the rule.
	RuleIndex pulumi.IntInput `pulumi:"ruleIndex"`
	// Is the file system on unix read only?.
	UnixReadOnly pulumi.BoolInput `pulumi:"unixReadOnly"`
	// Is the file system on unix read and write?.
	UnixReadWrite pulumi.BoolInput `pulumi:"unixReadWrite"`
}

func (GetVolumeGroupSapHanaVolumeExportPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupSapHanaVolumeExportPolicyRule)(nil)).Elem()
}

func (i GetVolumeGroupSapHanaVolumeExportPolicyRuleArgs) ToGetVolumeGroupSapHanaVolumeExportPolicyRuleOutput() GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput {
	return i.ToGetVolumeGroupSapHanaVolumeExportPolicyRuleOutputWithContext(context.Background())
}

func (i GetVolumeGroupSapHanaVolumeExportPolicyRuleArgs) ToGetVolumeGroupSapHanaVolumeExportPolicyRuleOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput)
}

// GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayInput is an input type that accepts GetVolumeGroupSapHanaVolumeExportPolicyRuleArray and GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput values.
// You can construct a concrete instance of `GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayInput` via:
//
//	GetVolumeGroupSapHanaVolumeExportPolicyRuleArray{ GetVolumeGroupSapHanaVolumeExportPolicyRuleArgs{...} }
type GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayInput interface {
	pulumi.Input

	ToGetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput() GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput
	ToGetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutputWithContext(context.Context) GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput
}

type GetVolumeGroupSapHanaVolumeExportPolicyRuleArray []GetVolumeGroupSapHanaVolumeExportPolicyRuleInput

func (GetVolumeGroupSapHanaVolumeExportPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeGroupSapHanaVolumeExportPolicyRule)(nil)).Elem()
}

func (i GetVolumeGroupSapHanaVolumeExportPolicyRuleArray) ToGetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput() GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput {
	return i.ToGetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutputWithContext(context.Background())
}

func (i GetVolumeGroupSapHanaVolumeExportPolicyRuleArray) ToGetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput)
}

type GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeGroupSapHanaVolumeExportPolicyRule)(nil)).Elem()
}

func (o GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput) ToGetVolumeGroupSapHanaVolumeExportPolicyRuleOutput() GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput {
	return o
}

func (o GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput) ToGetVolumeGroupSapHanaVolumeExportPolicyRuleOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput {
	return o
}

// A list of allowed clients IPv4 addresses.
func (o GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput) AllowedClients() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolumeExportPolicyRule) string { return v.AllowedClients }).(pulumi.StringOutput)
}

// Is the NFSv3 protocol enabled?
func (o GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput) Nfsv3Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolumeExportPolicyRule) bool { return v.Nfsv3Enabled }).(pulumi.BoolOutput)
}

// Is the NFSv4.1 enabled?
func (o GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput) Nfsv41Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolumeExportPolicyRule) bool { return v.Nfsv41Enabled }).(pulumi.BoolOutput)
}

// Is root access permitted to this volume?
func (o GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput) RootAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolumeExportPolicyRule) bool { return v.RootAccessEnabled }).(pulumi.BoolOutput)
}

// The index number of the rule.
func (o GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput) RuleIndex() pulumi.IntOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolumeExportPolicyRule) int { return v.RuleIndex }).(pulumi.IntOutput)
}

// Is the file system on unix read only?.
func (o GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput) UnixReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolumeExportPolicyRule) bool { return v.UnixReadOnly }).(pulumi.BoolOutput)
}

// Is the file system on unix read and write?.
func (o GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput) UnixReadWrite() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumeGroupSapHanaVolumeExportPolicyRule) bool { return v.UnixReadWrite }).(pulumi.BoolOutput)
}

type GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumeGroupSapHanaVolumeExportPolicyRule)(nil)).Elem()
}

func (o GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput) ToGetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput() GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput {
	return o
}

func (o GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput) ToGetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutputWithContext(ctx context.Context) GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput {
	return o
}

func (o GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput) Index(i pulumi.IntInput) GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumeGroupSapHanaVolumeExportPolicyRule {
		return vs[0].([]GetVolumeGroupSapHanaVolumeExportPolicyRule)[vs[1].(int)]
	}).(GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountActiveDirectoryInput)(nil)).Elem(), AccountActiveDirectoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountActiveDirectoryPtrInput)(nil)).Elem(), AccountActiveDirectoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountIdentityInput)(nil)).Elem(), AccountIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountIdentityPtrInput)(nil)).Elem(), AccountIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotPolicyDailyScheduleInput)(nil)).Elem(), SnapshotPolicyDailyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotPolicyDailySchedulePtrInput)(nil)).Elem(), SnapshotPolicyDailyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotPolicyHourlyScheduleInput)(nil)).Elem(), SnapshotPolicyHourlyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotPolicyHourlySchedulePtrInput)(nil)).Elem(), SnapshotPolicyHourlyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotPolicyMonthlyScheduleInput)(nil)).Elem(), SnapshotPolicyMonthlyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotPolicyMonthlySchedulePtrInput)(nil)).Elem(), SnapshotPolicyMonthlyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotPolicyWeeklyScheduleInput)(nil)).Elem(), SnapshotPolicyWeeklyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotPolicyWeeklySchedulePtrInput)(nil)).Elem(), SnapshotPolicyWeeklyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeDataProtectionReplicationInput)(nil)).Elem(), VolumeDataProtectionReplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeDataProtectionReplicationPtrInput)(nil)).Elem(), VolumeDataProtectionReplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeDataProtectionSnapshotPolicyInput)(nil)).Elem(), VolumeDataProtectionSnapshotPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeDataProtectionSnapshotPolicyPtrInput)(nil)).Elem(), VolumeDataProtectionSnapshotPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeExportPolicyRuleInput)(nil)).Elem(), VolumeExportPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeExportPolicyRuleArrayInput)(nil)).Elem(), VolumeExportPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupSapHanaVolumeInput)(nil)).Elem(), VolumeGroupSapHanaVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupSapHanaVolumeArrayInput)(nil)).Elem(), VolumeGroupSapHanaVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupSapHanaVolumeDataProtectionReplicationInput)(nil)).Elem(), VolumeGroupSapHanaVolumeDataProtectionReplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupSapHanaVolumeDataProtectionReplicationPtrInput)(nil)).Elem(), VolumeGroupSapHanaVolumeDataProtectionReplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyInput)(nil)).Elem(), VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrInput)(nil)).Elem(), VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupSapHanaVolumeExportPolicyRuleInput)(nil)).Elem(), VolumeGroupSapHanaVolumeExportPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupSapHanaVolumeExportPolicyRuleArrayInput)(nil)).Elem(), VolumeGroupSapHanaVolumeExportPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountIdentityInput)(nil)).Elem(), GetAccountIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountIdentityPtrInput)(nil)).Elem(), GetAccountIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnapshotPolicyDailyScheduleInput)(nil)).Elem(), GetSnapshotPolicyDailyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnapshotPolicyDailyScheduleArrayInput)(nil)).Elem(), GetSnapshotPolicyDailyScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnapshotPolicyHourlyScheduleInput)(nil)).Elem(), GetSnapshotPolicyHourlyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnapshotPolicyHourlyScheduleArrayInput)(nil)).Elem(), GetSnapshotPolicyHourlyScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnapshotPolicyMonthlyScheduleInput)(nil)).Elem(), GetSnapshotPolicyMonthlyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnapshotPolicyMonthlyScheduleArrayInput)(nil)).Elem(), GetSnapshotPolicyMonthlyScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnapshotPolicyWeeklyScheduleInput)(nil)).Elem(), GetSnapshotPolicyWeeklyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnapshotPolicyWeeklyScheduleArrayInput)(nil)).Elem(), GetSnapshotPolicyWeeklyScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeDataProtectionReplicationInput)(nil)).Elem(), GetVolumeDataProtectionReplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeDataProtectionReplicationArrayInput)(nil)).Elem(), GetVolumeDataProtectionReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeGroupSapHanaVolumeInput)(nil)).Elem(), GetVolumeGroupSapHanaVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeGroupSapHanaVolumeArrayInput)(nil)).Elem(), GetVolumeGroupSapHanaVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeGroupSapHanaVolumeDataProtectionReplicationInput)(nil)).Elem(), GetVolumeGroupSapHanaVolumeDataProtectionReplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayInput)(nil)).Elem(), GetVolumeGroupSapHanaVolumeDataProtectionReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyInput)(nil)).Elem(), GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayInput)(nil)).Elem(), GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeGroupSapHanaVolumeExportPolicyRuleInput)(nil)).Elem(), GetVolumeGroupSapHanaVolumeExportPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayInput)(nil)).Elem(), GetVolumeGroupSapHanaVolumeExportPolicyRuleArray{})
	pulumi.RegisterOutputType(AccountActiveDirectoryOutput{})
	pulumi.RegisterOutputType(AccountActiveDirectoryPtrOutput{})
	pulumi.RegisterOutputType(AccountIdentityOutput{})
	pulumi.RegisterOutputType(AccountIdentityPtrOutput{})
	pulumi.RegisterOutputType(SnapshotPolicyDailyScheduleOutput{})
	pulumi.RegisterOutputType(SnapshotPolicyDailySchedulePtrOutput{})
	pulumi.RegisterOutputType(SnapshotPolicyHourlyScheduleOutput{})
	pulumi.RegisterOutputType(SnapshotPolicyHourlySchedulePtrOutput{})
	pulumi.RegisterOutputType(SnapshotPolicyMonthlyScheduleOutput{})
	pulumi.RegisterOutputType(SnapshotPolicyMonthlySchedulePtrOutput{})
	pulumi.RegisterOutputType(SnapshotPolicyWeeklyScheduleOutput{})
	pulumi.RegisterOutputType(SnapshotPolicyWeeklySchedulePtrOutput{})
	pulumi.RegisterOutputType(VolumeDataProtectionReplicationOutput{})
	pulumi.RegisterOutputType(VolumeDataProtectionReplicationPtrOutput{})
	pulumi.RegisterOutputType(VolumeDataProtectionSnapshotPolicyOutput{})
	pulumi.RegisterOutputType(VolumeDataProtectionSnapshotPolicyPtrOutput{})
	pulumi.RegisterOutputType(VolumeExportPolicyRuleOutput{})
	pulumi.RegisterOutputType(VolumeExportPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(VolumeGroupSapHanaVolumeOutput{})
	pulumi.RegisterOutputType(VolumeGroupSapHanaVolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeGroupSapHanaVolumeDataProtectionReplicationOutput{})
	pulumi.RegisterOutputType(VolumeGroupSapHanaVolumeDataProtectionReplicationPtrOutput{})
	pulumi.RegisterOutputType(VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput{})
	pulumi.RegisterOutputType(VolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyPtrOutput{})
	pulumi.RegisterOutputType(VolumeGroupSapHanaVolumeExportPolicyRuleOutput{})
	pulumi.RegisterOutputType(VolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(GetAccountIdentityOutput{})
	pulumi.RegisterOutputType(GetAccountIdentityPtrOutput{})
	pulumi.RegisterOutputType(GetSnapshotPolicyDailyScheduleOutput{})
	pulumi.RegisterOutputType(GetSnapshotPolicyDailyScheduleArrayOutput{})
	pulumi.RegisterOutputType(GetSnapshotPolicyHourlyScheduleOutput{})
	pulumi.RegisterOutputType(GetSnapshotPolicyHourlyScheduleArrayOutput{})
	pulumi.RegisterOutputType(GetSnapshotPolicyMonthlyScheduleOutput{})
	pulumi.RegisterOutputType(GetSnapshotPolicyMonthlyScheduleArrayOutput{})
	pulumi.RegisterOutputType(GetSnapshotPolicyWeeklyScheduleOutput{})
	pulumi.RegisterOutputType(GetSnapshotPolicyWeeklyScheduleArrayOutput{})
	pulumi.RegisterOutputType(GetVolumeDataProtectionReplicationOutput{})
	pulumi.RegisterOutputType(GetVolumeDataProtectionReplicationArrayOutput{})
	pulumi.RegisterOutputType(GetVolumeGroupSapHanaVolumeOutput{})
	pulumi.RegisterOutputType(GetVolumeGroupSapHanaVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetVolumeGroupSapHanaVolumeDataProtectionReplicationOutput{})
	pulumi.RegisterOutputType(GetVolumeGroupSapHanaVolumeDataProtectionReplicationArrayOutput{})
	pulumi.RegisterOutputType(GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyOutput{})
	pulumi.RegisterOutputType(GetVolumeGroupSapHanaVolumeDataProtectionSnapshotPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetVolumeGroupSapHanaVolumeExportPolicyRuleOutput{})
	pulumi.RegisterOutputType(GetVolumeGroupSapHanaVolumeExportPolicyRuleArrayOutput{})
}
