// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/netapp"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/proximity"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := random.NewRandomString(ctx, "example", &random.RandomStringArgs{
//				Length:  pulumi.Int(12),
//				Special: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			adminUsername := "exampleadmin"
//			adminPassword := example.Result
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.Sprintf("%v-resources", prefix),
//				Location: pulumi.Any(location),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
//				Name:              pulumi.Sprintf("%v-vnet", prefix),
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.88.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "example", &network.SubnetArgs{
//				Name:               pulumi.Sprintf("%v-delegated-subnet", prefix),
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.88.2.0/24"),
//				},
//				Delegations: network.SubnetDelegationArray{
//					&network.SubnetDelegationArgs{
//						Name: pulumi.String("testdelegation"),
//						ServiceDelegation: &network.SubnetDelegationServiceDelegationArgs{
//							Name: pulumi.String("Microsoft.Netapp/volumes"),
//							Actions: pulumi.StringArray{
//								pulumi.String("Microsoft.Network/networkinterfaces/*"),
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/join/action"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example1, err := network.NewSubnet(ctx, "example1", &network.SubnetArgs{
//				Name:               pulumi.Sprintf("%v-hosts-subnet", prefix),
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.88.1.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			examplePlacementGroup, err := proximity.NewPlacementGroup(ctx, "example", &proximity.PlacementGroupArgs{
//				Name:              pulumi.Sprintf("%v-ppg", prefix),
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleAvailabilitySet, err := compute.NewAvailabilitySet(ctx, "example", &compute.AvailabilitySetArgs{
//				Name:                      pulumi.Sprintf("%v-avset", prefix),
//				Location:                  exampleResourceGroup.Location,
//				ResourceGroupName:         exampleResourceGroup.Name,
//				ProximityPlacementGroupId: examplePlacementGroup.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkInterface, err := network.NewNetworkInterface(ctx, "example", &network.NetworkInterfaceArgs{
//				Name:              pulumi.Sprintf("%v-nic", prefix),
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				IpConfigurations: network.NetworkInterfaceIpConfigurationArray{
//					&network.NetworkInterfaceIpConfigurationArgs{
//						Name:                       pulumi.String("internal"),
//						SubnetId:                   example1.ID(),
//						PrivateIpAddressAllocation: pulumi.String("Dynamic"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleLinuxVirtualMachine, err := compute.NewLinuxVirtualMachine(ctx, "example", &compute.LinuxVirtualMachineArgs{
//				Name:                          pulumi.Sprintf("%v-vm", prefix),
//				ResourceGroupName:             exampleResourceGroup.Name,
//				Location:                      exampleResourceGroup.Location,
//				Size:                          pulumi.String("Standard_M8ms"),
//				AdminUsername:                 pulumi.String(adminUsername),
//				AdminPassword:                 pulumi.String(adminPassword),
//				DisablePasswordAuthentication: pulumi.Bool(false),
//				ProximityPlacementGroupId:     examplePlacementGroup.ID(),
//				AvailabilitySetId:             exampleAvailabilitySet.ID(),
//				NetworkInterfaceIds: pulumi.StringArray{
//					exampleNetworkInterface.ID(),
//				},
//				SourceImageReference: &compute.LinuxVirtualMachineSourceImageReferenceArgs{
//					Publisher: pulumi.String("Canonical"),
//					Offer:     pulumi.String("0001-com-ubuntu-server-jammy"),
//					Sku:       pulumi.String("22_04-lts"),
//					Version:   pulumi.String("latest"),
//				},
//				OsDisk: &compute.LinuxVirtualMachineOsDiskArgs{
//					StorageAccountType: pulumi.String("Standard_LRS"),
//					Caching:            pulumi.String("ReadWrite"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := netapp.NewAccount(ctx, "example", &netapp.AccountArgs{
//				Name:              pulumi.Sprintf("%v-netapp-account", prefix),
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleSubnet,
//				example1,
//			}))
//			if err != nil {
//				return err
//			}
//			examplePool, err := netapp.NewPool(ctx, "example", &netapp.PoolArgs{
//				Name:              pulumi.Sprintf("%v-netapp-pool", prefix),
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				AccountName:       exampleAccount.Name,
//				ServiceLevel:      pulumi.String("Standard"),
//				SizeInTb:          pulumi.Int(8),
//				QosType:           pulumi.String("Manual"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = netapp.NewVolumeGroupSapHana(ctx, "example", &netapp.VolumeGroupSapHanaArgs{
//				Name:                  pulumi.Sprintf("%v-netapp-volumegroup", prefix),
//				Location:              exampleResourceGroup.Location,
//				ResourceGroupName:     exampleResourceGroup.Name,
//				AccountName:           exampleAccount.Name,
//				GroupDescription:      pulumi.String("Test volume group"),
//				ApplicationIdentifier: pulumi.String("TST"),
//				Volumes: netapp.VolumeGroupSapHanaVolumeArray{
//					&netapp.VolumeGroupSapHanaVolumeArgs{
//						Name:                      pulumi.Sprintf("%v-netapp-volume-1", prefix),
//						VolumePath:                pulumi.String("my-unique-file-path-1"),
//						ServiceLevel:              pulumi.String("Standard"),
//						CapacityPoolId:            examplePool.ID(),
//						SubnetId:                  exampleSubnet.ID(),
//						ProximityPlacementGroupId: examplePlacementGroup.ID(),
//						VolumeSpecName:            pulumi.String("data"),
//						StorageQuotaInGb:          pulumi.Int(1024),
//						ThroughputInMibps:         pulumi.Float64(24),
//						Protocols:                 pulumi.String("NFSv4.1"),
//						SecurityStyle:             pulumi.String("unix"),
//						SnapshotDirectoryVisible:  pulumi.Bool(false),
//						ExportPolicyRules: netapp.VolumeGroupSapHanaVolumeExportPolicyRuleArray{
//							&netapp.VolumeGroupSapHanaVolumeExportPolicyRuleArgs{
//								RuleIndex:         pulumi.Int(1),
//								AllowedClients:    pulumi.String("0.0.0.0/0"),
//								Nfsv3Enabled:      pulumi.Bool(false),
//								Nfsv41Enabled:     pulumi.Bool(true),
//								UnixReadOnly:      pulumi.Bool(false),
//								UnixReadWrite:     pulumi.Bool(true),
//								RootAccessEnabled: pulumi.Bool(false),
//							},
//						},
//						Tags: pulumi.StringMap{
//							"foo": pulumi.String("bar"),
//						},
//					},
//					&netapp.VolumeGroupSapHanaVolumeArgs{
//						Name:                      pulumi.Sprintf("%v-netapp-volume-2", prefix),
//						VolumePath:                pulumi.String("my-unique-file-path-2"),
//						ServiceLevel:              pulumi.String("Standard"),
//						CapacityPoolId:            examplePool.ID(),
//						SubnetId:                  exampleSubnet.ID(),
//						ProximityPlacementGroupId: examplePlacementGroup.ID(),
//						VolumeSpecName:            pulumi.String("log"),
//						StorageQuotaInGb:          pulumi.Int(1024),
//						ThroughputInMibps:         pulumi.Float64(24),
//						Protocols:                 pulumi.String("NFSv4.1"),
//						SecurityStyle:             pulumi.String("unix"),
//						SnapshotDirectoryVisible:  pulumi.Bool(false),
//						ExportPolicyRules: netapp.VolumeGroupSapHanaVolumeExportPolicyRuleArray{
//							&netapp.VolumeGroupSapHanaVolumeExportPolicyRuleArgs{
//								RuleIndex:         pulumi.Int(1),
//								AllowedClients:    pulumi.String("0.0.0.0/0"),
//								Nfsv3Enabled:      pulumi.Bool(false),
//								Nfsv41Enabled:     pulumi.Bool(true),
//								UnixReadOnly:      pulumi.Bool(false),
//								UnixReadWrite:     pulumi.Bool(true),
//								RootAccessEnabled: pulumi.Bool(false),
//							},
//						},
//						Tags: pulumi.StringMap{
//							"foo": pulumi.String("bar"),
//						},
//					},
//					&netapp.VolumeGroupSapHanaVolumeArgs{
//						Name:                      pulumi.Sprintf("%v-netapp-volume-3", prefix),
//						VolumePath:                pulumi.String("my-unique-file-path-3"),
//						ServiceLevel:              pulumi.String("Standard"),
//						CapacityPoolId:            examplePool.ID(),
//						SubnetId:                  exampleSubnet.ID(),
//						ProximityPlacementGroupId: examplePlacementGroup.ID(),
//						VolumeSpecName:            pulumi.String("shared"),
//						StorageQuotaInGb:          pulumi.Int(1024),
//						ThroughputInMibps:         pulumi.Float64(24),
//						Protocols:                 pulumi.String("NFSv4.1"),
//						SecurityStyle:             pulumi.String("unix"),
//						SnapshotDirectoryVisible:  pulumi.Bool(false),
//						ExportPolicyRules: netapp.VolumeGroupSapHanaVolumeExportPolicyRuleArray{
//							&netapp.VolumeGroupSapHanaVolumeExportPolicyRuleArgs{
//								RuleIndex:         pulumi.Int(1),
//								AllowedClients:    pulumi.String("0.0.0.0/0"),
//								Nfsv3Enabled:      pulumi.Bool(false),
//								Nfsv41Enabled:     pulumi.Bool(true),
//								UnixReadOnly:      pulumi.Bool(false),
//								UnixReadWrite:     pulumi.Bool(true),
//								RootAccessEnabled: pulumi.Bool(false),
//							},
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleLinuxVirtualMachine,
//				examplePlacementGroup,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Application Volume Groups can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:netapp/volumeGroupSapHana:VolumeGroupSapHana example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mytest-rg/providers/Microsoft.NetApp/netAppAccounts/netapp-account-test/volumeGroups/netapp-volumegroup-test
// ```
type VolumeGroupSapHana struct {
	pulumi.CustomResourceState

	// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// The SAP System ID, maximum 3 characters, e.g. `SH9`. Changing this forces a new Application Volume Group to be created and data will be lost.
	ApplicationIdentifier pulumi.StringOutput `pulumi:"applicationIdentifier"`
	// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
	GroupDescription pulumi.StringOutput `pulumi:"groupDescription"`
	// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// One or more `volume` blocks as defined below.
	Volumes VolumeGroupSapHanaVolumeArrayOutput `pulumi:"volumes"`
}

// NewVolumeGroupSapHana registers a new resource with the given unique name, arguments, and options.
func NewVolumeGroupSapHana(ctx *pulumi.Context,
	name string, args *VolumeGroupSapHanaArgs, opts ...pulumi.ResourceOption) (*VolumeGroupSapHana, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ApplicationIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationIdentifier'")
	}
	if args.GroupDescription == nil {
		return nil, errors.New("invalid value for required argument 'GroupDescription'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Volumes == nil {
		return nil, errors.New("invalid value for required argument 'Volumes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeGroupSapHana
	err := ctx.RegisterResource("azure:netapp/volumeGroupSapHana:VolumeGroupSapHana", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeGroupSapHana gets an existing VolumeGroupSapHana resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeGroupSapHana(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeGroupSapHanaState, opts ...pulumi.ResourceOption) (*VolumeGroupSapHana, error) {
	var resource VolumeGroupSapHana
	err := ctx.ReadResource("azure:netapp/volumeGroupSapHana:VolumeGroupSapHana", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeGroupSapHana resources.
type volumeGroupSapHanaState struct {
	// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
	AccountName *string `pulumi:"accountName"`
	// The SAP System ID, maximum 3 characters, e.g. `SH9`. Changing this forces a new Application Volume Group to be created and data will be lost.
	ApplicationIdentifier *string `pulumi:"applicationIdentifier"`
	// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
	GroupDescription *string `pulumi:"groupDescription"`
	// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	Location *string `pulumi:"location"`
	// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// One or more `volume` blocks as defined below.
	Volumes []VolumeGroupSapHanaVolume `pulumi:"volumes"`
}

type VolumeGroupSapHanaState struct {
	// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
	AccountName pulumi.StringPtrInput
	// The SAP System ID, maximum 3 characters, e.g. `SH9`. Changing this forces a new Application Volume Group to be created and data will be lost.
	ApplicationIdentifier pulumi.StringPtrInput
	// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
	GroupDescription pulumi.StringPtrInput
	// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	Location pulumi.StringPtrInput
	// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	ResourceGroupName pulumi.StringPtrInput
	// One or more `volume` blocks as defined below.
	Volumes VolumeGroupSapHanaVolumeArrayInput
}

func (VolumeGroupSapHanaState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeGroupSapHanaState)(nil)).Elem()
}

type volumeGroupSapHanaArgs struct {
	// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
	AccountName string `pulumi:"accountName"`
	// The SAP System ID, maximum 3 characters, e.g. `SH9`. Changing this forces a new Application Volume Group to be created and data will be lost.
	ApplicationIdentifier string `pulumi:"applicationIdentifier"`
	// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
	GroupDescription string `pulumi:"groupDescription"`
	// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	Location *string `pulumi:"location"`
	// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// One or more `volume` blocks as defined below.
	Volumes []VolumeGroupSapHanaVolume `pulumi:"volumes"`
}

// The set of arguments for constructing a VolumeGroupSapHana resource.
type VolumeGroupSapHanaArgs struct {
	// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
	AccountName pulumi.StringInput
	// The SAP System ID, maximum 3 characters, e.g. `SH9`. Changing this forces a new Application Volume Group to be created and data will be lost.
	ApplicationIdentifier pulumi.StringInput
	// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
	GroupDescription pulumi.StringInput
	// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	Location pulumi.StringPtrInput
	// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	ResourceGroupName pulumi.StringInput
	// One or more `volume` blocks as defined below.
	Volumes VolumeGroupSapHanaVolumeArrayInput
}

func (VolumeGroupSapHanaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeGroupSapHanaArgs)(nil)).Elem()
}

type VolumeGroupSapHanaInput interface {
	pulumi.Input

	ToVolumeGroupSapHanaOutput() VolumeGroupSapHanaOutput
	ToVolumeGroupSapHanaOutputWithContext(ctx context.Context) VolumeGroupSapHanaOutput
}

func (*VolumeGroupSapHana) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupSapHana)(nil)).Elem()
}

func (i *VolumeGroupSapHana) ToVolumeGroupSapHanaOutput() VolumeGroupSapHanaOutput {
	return i.ToVolumeGroupSapHanaOutputWithContext(context.Background())
}

func (i *VolumeGroupSapHana) ToVolumeGroupSapHanaOutputWithContext(ctx context.Context) VolumeGroupSapHanaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupSapHanaOutput)
}

// VolumeGroupSapHanaArrayInput is an input type that accepts VolumeGroupSapHanaArray and VolumeGroupSapHanaArrayOutput values.
// You can construct a concrete instance of `VolumeGroupSapHanaArrayInput` via:
//
//	VolumeGroupSapHanaArray{ VolumeGroupSapHanaArgs{...} }
type VolumeGroupSapHanaArrayInput interface {
	pulumi.Input

	ToVolumeGroupSapHanaArrayOutput() VolumeGroupSapHanaArrayOutput
	ToVolumeGroupSapHanaArrayOutputWithContext(context.Context) VolumeGroupSapHanaArrayOutput
}

type VolumeGroupSapHanaArray []VolumeGroupSapHanaInput

func (VolumeGroupSapHanaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeGroupSapHana)(nil)).Elem()
}

func (i VolumeGroupSapHanaArray) ToVolumeGroupSapHanaArrayOutput() VolumeGroupSapHanaArrayOutput {
	return i.ToVolumeGroupSapHanaArrayOutputWithContext(context.Background())
}

func (i VolumeGroupSapHanaArray) ToVolumeGroupSapHanaArrayOutputWithContext(ctx context.Context) VolumeGroupSapHanaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupSapHanaArrayOutput)
}

// VolumeGroupSapHanaMapInput is an input type that accepts VolumeGroupSapHanaMap and VolumeGroupSapHanaMapOutput values.
// You can construct a concrete instance of `VolumeGroupSapHanaMapInput` via:
//
//	VolumeGroupSapHanaMap{ "key": VolumeGroupSapHanaArgs{...} }
type VolumeGroupSapHanaMapInput interface {
	pulumi.Input

	ToVolumeGroupSapHanaMapOutput() VolumeGroupSapHanaMapOutput
	ToVolumeGroupSapHanaMapOutputWithContext(context.Context) VolumeGroupSapHanaMapOutput
}

type VolumeGroupSapHanaMap map[string]VolumeGroupSapHanaInput

func (VolumeGroupSapHanaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeGroupSapHana)(nil)).Elem()
}

func (i VolumeGroupSapHanaMap) ToVolumeGroupSapHanaMapOutput() VolumeGroupSapHanaMapOutput {
	return i.ToVolumeGroupSapHanaMapOutputWithContext(context.Background())
}

func (i VolumeGroupSapHanaMap) ToVolumeGroupSapHanaMapOutputWithContext(ctx context.Context) VolumeGroupSapHanaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupSapHanaMapOutput)
}

type VolumeGroupSapHanaOutput struct{ *pulumi.OutputState }

func (VolumeGroupSapHanaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupSapHana)(nil)).Elem()
}

func (o VolumeGroupSapHanaOutput) ToVolumeGroupSapHanaOutput() VolumeGroupSapHanaOutput {
	return o
}

func (o VolumeGroupSapHanaOutput) ToVolumeGroupSapHanaOutputWithContext(ctx context.Context) VolumeGroupSapHanaOutput {
	return o
}

// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupSapHana) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// The SAP System ID, maximum 3 characters, e.g. `SH9`. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaOutput) ApplicationIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupSapHana) pulumi.StringOutput { return v.ApplicationIdentifier }).(pulumi.StringOutput)
}

// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaOutput) GroupDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupSapHana) pulumi.StringOutput { return v.GroupDescription }).(pulumi.StringOutput)
}

// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupSapHana) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupSapHana) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupSapHanaOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupSapHana) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// One or more `volume` blocks as defined below.
func (o VolumeGroupSapHanaOutput) Volumes() VolumeGroupSapHanaVolumeArrayOutput {
	return o.ApplyT(func(v *VolumeGroupSapHana) VolumeGroupSapHanaVolumeArrayOutput { return v.Volumes }).(VolumeGroupSapHanaVolumeArrayOutput)
}

type VolumeGroupSapHanaArrayOutput struct{ *pulumi.OutputState }

func (VolumeGroupSapHanaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeGroupSapHana)(nil)).Elem()
}

func (o VolumeGroupSapHanaArrayOutput) ToVolumeGroupSapHanaArrayOutput() VolumeGroupSapHanaArrayOutput {
	return o
}

func (o VolumeGroupSapHanaArrayOutput) ToVolumeGroupSapHanaArrayOutputWithContext(ctx context.Context) VolumeGroupSapHanaArrayOutput {
	return o
}

func (o VolumeGroupSapHanaArrayOutput) Index(i pulumi.IntInput) VolumeGroupSapHanaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeGroupSapHana {
		return vs[0].([]*VolumeGroupSapHana)[vs[1].(int)]
	}).(VolumeGroupSapHanaOutput)
}

type VolumeGroupSapHanaMapOutput struct{ *pulumi.OutputState }

func (VolumeGroupSapHanaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeGroupSapHana)(nil)).Elem()
}

func (o VolumeGroupSapHanaMapOutput) ToVolumeGroupSapHanaMapOutput() VolumeGroupSapHanaMapOutput {
	return o
}

func (o VolumeGroupSapHanaMapOutput) ToVolumeGroupSapHanaMapOutputWithContext(ctx context.Context) VolumeGroupSapHanaMapOutput {
	return o
}

func (o VolumeGroupSapHanaMapOutput) MapIndex(k pulumi.StringInput) VolumeGroupSapHanaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeGroupSapHana {
		return vs[0].(map[string]*VolumeGroupSapHana)[vs[1].(string)]
	}).(VolumeGroupSapHanaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupSapHanaInput)(nil)).Elem(), &VolumeGroupSapHana{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupSapHanaArrayInput)(nil)).Elem(), VolumeGroupSapHanaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupSapHanaMapInput)(nil)).Elem(), VolumeGroupSapHanaMap{})
	pulumi.RegisterOutputType(VolumeGroupSapHanaOutput{})
	pulumi.RegisterOutputType(VolumeGroupSapHanaArrayOutput{})
	pulumi.RegisterOutputType(VolumeGroupSapHanaMapOutput{})
}
