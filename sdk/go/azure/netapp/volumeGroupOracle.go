// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/netapp"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.Sprintf("%v-resources", prefix),
//				Location: pulumi.Any(location),
//				Tags: pulumi.StringMap{
//					"SkipNRMSNSG": pulumi.String("true"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
//				Name:              pulumi.Sprintf("%v-vnet", prefix),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.88.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "example", &network.SubnetArgs{
//				Name:               pulumi.Sprintf("%v-delegated-subnet", prefix),
//				ResourceGroupName:  example.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.88.2.0/24"),
//				},
//				Delegations: network.SubnetDelegationArray{
//					&network.SubnetDelegationArgs{
//						Name: pulumi.String("exampledelegation"),
//						ServiceDelegation: &network.SubnetDelegationServiceDelegationArgs{
//							Name: pulumi.String("Microsoft.Netapp/volumes"),
//							Actions: pulumi.StringArray{
//								pulumi.String("Microsoft.Network/networkinterfaces/*"),
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/join/action"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := netapp.NewAccount(ctx, "example", &netapp.AccountArgs{
//				Name:              pulumi.Sprintf("%v-netapp-account", prefix),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleSubnet,
//			}))
//			if err != nil {
//				return err
//			}
//			examplePool, err := netapp.NewPool(ctx, "example", &netapp.PoolArgs{
//				Name:              pulumi.Sprintf("%v-netapp-pool", prefix),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				AccountName:       exampleAccount.Name,
//				ServiceLevel:      pulumi.String("Standard"),
//				SizeInTb:          pulumi.Int(4),
//				QosType:           pulumi.String("Manual"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = netapp.NewVolumeGroupOracle(ctx, "example", &netapp.VolumeGroupOracleArgs{
//				Name:                  pulumi.Sprintf("%v-NetAppVolumeGroupOracle", prefix),
//				Location:              example.Location,
//				ResourceGroupName:     example.Name,
//				AccountName:           exampleAccount.Name,
//				GroupDescription:      pulumi.String("Example volume group for Oracle"),
//				ApplicationIdentifier: pulumi.String("TST"),
//				Volumes: netapp.VolumeGroupOracleVolumeArray{
//					&netapp.VolumeGroupOracleVolumeArgs{
//						Name:                     pulumi.Sprintf("%v-volume-ora1", prefix),
//						VolumePath:               pulumi.Sprintf("%v-my-unique-file-ora-path-1", prefix),
//						ServiceLevel:             pulumi.String("Standard"),
//						CapacityPoolId:           examplePool.ID(),
//						SubnetId:                 exampleSubnet.ID(),
//						Zone:                     pulumi.String("1"),
//						VolumeSpecName:           pulumi.String("ora-data1"),
//						StorageQuotaInGb:         pulumi.Int(1024),
//						ThroughputInMibps:        pulumi.Float64(24),
//						Protocols:                pulumi.String("NFSv4.1"),
//						SecurityStyle:            pulumi.String("unix"),
//						SnapshotDirectoryVisible: pulumi.Bool(false),
//						ExportPolicyRules: netapp.VolumeGroupOracleVolumeExportPolicyRuleArray{
//							&netapp.VolumeGroupOracleVolumeExportPolicyRuleArgs{
//								RuleIndex:         pulumi.Int(1),
//								AllowedClients:    pulumi.String("0.0.0.0/0"),
//								Nfsv3Enabled:      pulumi.Bool(false),
//								Nfsv41Enabled:     pulumi.Bool(true),
//								UnixReadOnly:      pulumi.Bool(false),
//								UnixReadWrite:     pulumi.Bool(true),
//								RootAccessEnabled: pulumi.Bool(false),
//							},
//						},
//					},
//					&netapp.VolumeGroupOracleVolumeArgs{
//						Name:                     pulumi.Sprintf("%v-volume-oraLog", prefix),
//						VolumePath:               pulumi.Sprintf("%v-my-unique-file-oralog-path", prefix),
//						ServiceLevel:             pulumi.String("Standard"),
//						CapacityPoolId:           examplePool.ID(),
//						SubnetId:                 exampleSubnet.ID(),
//						Zone:                     pulumi.String("1"),
//						VolumeSpecName:           pulumi.String("ora-log"),
//						StorageQuotaInGb:         pulumi.Int(1024),
//						ThroughputInMibps:        pulumi.Float64(24),
//						Protocols:                pulumi.String("NFSv4.1"),
//						SecurityStyle:            pulumi.String("unix"),
//						SnapshotDirectoryVisible: pulumi.Bool(false),
//						ExportPolicyRules: netapp.VolumeGroupOracleVolumeExportPolicyRuleArray{
//							&netapp.VolumeGroupOracleVolumeExportPolicyRuleArgs{
//								RuleIndex:         pulumi.Int(1),
//								AllowedClients:    pulumi.String("0.0.0.0/0"),
//								Nfsv3Enabled:      pulumi.Bool(false),
//								Nfsv41Enabled:     pulumi.Bool(true),
//								UnixReadOnly:      pulumi.Bool(false),
//								UnixReadWrite:     pulumi.Bool(true),
//								RootAccessEnabled: pulumi.Bool(false),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Cross-Region Replication
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/netapp"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.Sprintf("%v-resources", prefix),
//				Location: pulumi.Any(location),
//				Tags: pulumi.StringMap{
//					"SkipNRMSNSG": pulumi.String("true"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Primary region networking
//			examplePrimary, err := network.NewVirtualNetwork(ctx, "example_primary", &network.VirtualNetworkArgs{
//				Name:              pulumi.Sprintf("%v-vnet-primary", prefix),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.47.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			examplePrimarySubnet, err := network.NewSubnet(ctx, "example_primary", &network.SubnetArgs{
//				Name:               pulumi.Sprintf("%v-delegated-subnet-primary", prefix),
//				ResourceGroupName:  example.Name,
//				VirtualNetworkName: examplePrimary.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.47.2.0/24"),
//				},
//				Delegations: network.SubnetDelegationArray{
//					&network.SubnetDelegationArgs{
//						Name: pulumi.String("exampledelegation"),
//						ServiceDelegation: &network.SubnetDelegationServiceDelegationArgs{
//							Name: pulumi.String("Microsoft.Netapp/volumes"),
//							Actions: pulumi.StringArray{
//								pulumi.String("Microsoft.Network/networkinterfaces/*"),
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/join/action"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Secondary region networking
//			exampleSecondary, err := network.NewVirtualNetwork(ctx, "example_secondary", &network.VirtualNetworkArgs{
//				Name:              pulumi.Sprintf("%v-vnet-secondary", prefix),
//				Location:          pulumi.Any(altLocation),
//				ResourceGroupName: example.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.48.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSecondarySubnet, err := network.NewSubnet(ctx, "example_secondary", &network.SubnetArgs{
//				Name:               pulumi.Sprintf("%v-delegated-subnet-secondary", prefix),
//				ResourceGroupName:  example.Name,
//				VirtualNetworkName: exampleSecondary.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.48.2.0/24"),
//				},
//				Delegations: network.SubnetDelegationArray{
//					&network.SubnetDelegationArgs{
//						Name: pulumi.String("exampledelegation"),
//						ServiceDelegation: &network.SubnetDelegationServiceDelegationArgs{
//							Name: pulumi.String("Microsoft.Netapp/volumes"),
//							Actions: pulumi.StringArray{
//								pulumi.String("Microsoft.Network/networkinterfaces/*"),
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/join/action"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Primary region NetApp infrastructure
//			examplePrimaryAccount, err := netapp.NewAccount(ctx, "example_primary", &netapp.AccountArgs{
//				Name:              pulumi.Sprintf("%v-netapp-account-primary", prefix),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				examplePrimarySubnet,
//			}))
//			if err != nil {
//				return err
//			}
//			examplePrimaryPool, err := netapp.NewPool(ctx, "example_primary", &netapp.PoolArgs{
//				Name:              pulumi.Sprintf("%v-netapp-pool-primary", prefix),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				AccountName:       examplePrimaryAccount.Name,
//				ServiceLevel:      pulumi.String("Standard"),
//				SizeInTb:          pulumi.Int(4),
//				QosType:           pulumi.String("Manual"),
//			})
//			if err != nil {
//				return err
//			}
//			// Secondary region NetApp infrastructure
//			exampleSecondaryAccount, err := netapp.NewAccount(ctx, "example_secondary", &netapp.AccountArgs{
//				Name:              pulumi.Sprintf("%v-netapp-account-secondary", prefix),
//				Location:          pulumi.Any(altLocation),
//				ResourceGroupName: example.Name,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleSecondarySubnet,
//			}))
//			if err != nil {
//				return err
//			}
//			exampleSecondaryPool, err := netapp.NewPool(ctx, "example_secondary", &netapp.PoolArgs{
//				Name:              pulumi.Sprintf("%v-netapp-pool-secondary", prefix),
//				Location:          pulumi.Any(altLocation),
//				ResourceGroupName: example.Name,
//				AccountName:       exampleSecondaryAccount.Name,
//				ServiceLevel:      pulumi.String("Standard"),
//				SizeInTb:          pulumi.Int(4),
//				QosType:           pulumi.String("Manual"),
//			})
//			if err != nil {
//				return err
//			}
//			// Primary Oracle volume group
//			examplePrimaryVolumeGroupOracle, err := netapp.NewVolumeGroupOracle(ctx, "example_primary", &netapp.VolumeGroupOracleArgs{
//				Name:                  pulumi.Sprintf("%v-NetAppVolumeGroupOracle-primary", prefix),
//				Location:              example.Location,
//				ResourceGroupName:     example.Name,
//				AccountName:           examplePrimaryAccount.Name,
//				GroupDescription:      pulumi.String("Primary Oracle volume group for CRR"),
//				ApplicationIdentifier: pulumi.String("TST"),
//				Volumes: netapp.VolumeGroupOracleVolumeArray{
//					&netapp.VolumeGroupOracleVolumeArgs{
//						Name:                     pulumi.Sprintf("%v-volume-ora1-primary", prefix),
//						VolumePath:               pulumi.Sprintf("%v-my-unique-file-ora-path-1-primary", prefix),
//						ServiceLevel:             pulumi.String("Standard"),
//						CapacityPoolId:           examplePrimaryPool.ID(),
//						SubnetId:                 examplePrimarySubnet.ID(),
//						VolumeSpecName:           pulumi.String("ora-data1"),
//						StorageQuotaInGb:         pulumi.Int(1024),
//						ThroughputInMibps:        pulumi.Float64(24),
//						Protocols:                pulumi.String("NFSv4.1"),
//						SecurityStyle:            pulumi.String("unix"),
//						SnapshotDirectoryVisible: pulumi.Bool(false),
//						ExportPolicyRules: netapp.VolumeGroupOracleVolumeExportPolicyRuleArray{
//							&netapp.VolumeGroupOracleVolumeExportPolicyRuleArgs{
//								RuleIndex:         pulumi.Int(1),
//								AllowedClients:    pulumi.String("0.0.0.0/0"),
//								Nfsv3Enabled:      pulumi.Bool(false),
//								Nfsv41Enabled:     pulumi.Bool(true),
//								UnixReadOnly:      pulumi.Bool(false),
//								UnixReadWrite:     pulumi.Bool(true),
//								RootAccessEnabled: pulumi.Bool(false),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Secondary Oracle volume group with CRR
//			_, err = netapp.NewVolumeGroupOracle(ctx, "example_secondary", &netapp.VolumeGroupOracleArgs{
//				Name:                  pulumi.Sprintf("%v-NetAppVolumeGroupOracle-secondary", prefix),
//				Location:              pulumi.Any(altLocation),
//				ResourceGroupName:     example.Name,
//				AccountName:           exampleSecondaryAccount.Name,
//				GroupDescription:      pulumi.String("Secondary Oracle volume group for CRR"),
//				ApplicationIdentifier: pulumi.String("TST"),
//				Volumes: netapp.VolumeGroupOracleVolumeArray{
//					&netapp.VolumeGroupOracleVolumeArgs{
//						Name:                     pulumi.Sprintf("%v-volume-ora1-secondary", prefix),
//						VolumePath:               pulumi.Sprintf("%v-my-unique-file-ora-path-1-secondary", prefix),
//						ServiceLevel:             pulumi.String("Standard"),
//						CapacityPoolId:           exampleSecondaryPool.ID(),
//						SubnetId:                 exampleSecondarySubnet.ID(),
//						VolumeSpecName:           pulumi.String("ora-data1"),
//						StorageQuotaInGb:         pulumi.Int(1024),
//						ThroughputInMibps:        pulumi.Float64(24),
//						Protocols:                pulumi.String("NFSv4.1"),
//						SecurityStyle:            pulumi.String("unix"),
//						SnapshotDirectoryVisible: pulumi.Bool(false),
//						ExportPolicyRules: netapp.VolumeGroupOracleVolumeExportPolicyRuleArray{
//							&netapp.VolumeGroupOracleVolumeExportPolicyRuleArgs{
//								RuleIndex:         pulumi.Int(1),
//								AllowedClients:    pulumi.String("0.0.0.0/0"),
//								Nfsv3Enabled:      pulumi.Bool(false),
//								Nfsv41Enabled:     pulumi.Bool(true),
//								UnixReadOnly:      pulumi.Bool(false),
//								UnixReadWrite:     pulumi.Bool(true),
//								RootAccessEnabled: pulumi.Bool(false),
//							},
//						},
//						DataProtectionReplication: &netapp.VolumeGroupOracleVolumeDataProtectionReplicationArgs{
//							EndpointType:         pulumi.String("dst"),
//							RemoteVolumeLocation: example.Location,
//							RemoteVolumeResourceId: examplePrimaryVolumeGroupOracle.Volumes.ApplyT(func(volumes []netapp.VolumeGroupOracleVolume) (*string, error) {
//								return &volumes[0].Id, nil
//							}).(pulumi.StringPtrOutput),
//							ReplicationFrequency: pulumi.String("10minutes"),
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				examplePrimaryVolumeGroupOracle,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.NetApp` - 2025-06-01
//
// ## Import
//
// Application Volume Groups can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:netapp/volumeGroupOracle:VolumeGroupOracle example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mytest-rg/providers/Microsoft.NetApp/netAppAccounts/netapp-account-test/volumeGroups/netapp-volumegroup-test
// ```
type VolumeGroupOracle struct {
	pulumi.CustomResourceState

	// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// The SAP System ID, maximum 3 characters, e.g. `OR1`. Changing this forces a new Application Volume Group to be created and data will be lost.
	ApplicationIdentifier pulumi.StringOutput `pulumi:"applicationIdentifier"`
	// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
	GroupDescription pulumi.StringOutput `pulumi:"groupDescription"`
	// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// One or more `volume` blocks as defined below.
	Volumes VolumeGroupOracleVolumeArrayOutput `pulumi:"volumes"`
}

// NewVolumeGroupOracle registers a new resource with the given unique name, arguments, and options.
func NewVolumeGroupOracle(ctx *pulumi.Context,
	name string, args *VolumeGroupOracleArgs, opts ...pulumi.ResourceOption) (*VolumeGroupOracle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ApplicationIdentifier == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationIdentifier'")
	}
	if args.GroupDescription == nil {
		return nil, errors.New("invalid value for required argument 'GroupDescription'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Volumes == nil {
		return nil, errors.New("invalid value for required argument 'Volumes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeGroupOracle
	err := ctx.RegisterResource("azure:netapp/volumeGroupOracle:VolumeGroupOracle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeGroupOracle gets an existing VolumeGroupOracle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeGroupOracle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeGroupOracleState, opts ...pulumi.ResourceOption) (*VolumeGroupOracle, error) {
	var resource VolumeGroupOracle
	err := ctx.ReadResource("azure:netapp/volumeGroupOracle:VolumeGroupOracle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeGroupOracle resources.
type volumeGroupOracleState struct {
	// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
	AccountName *string `pulumi:"accountName"`
	// The SAP System ID, maximum 3 characters, e.g. `OR1`. Changing this forces a new Application Volume Group to be created and data will be lost.
	ApplicationIdentifier *string `pulumi:"applicationIdentifier"`
	// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
	GroupDescription *string `pulumi:"groupDescription"`
	// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	Location *string `pulumi:"location"`
	// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// One or more `volume` blocks as defined below.
	Volumes []VolumeGroupOracleVolume `pulumi:"volumes"`
}

type VolumeGroupOracleState struct {
	// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
	AccountName pulumi.StringPtrInput
	// The SAP System ID, maximum 3 characters, e.g. `OR1`. Changing this forces a new Application Volume Group to be created and data will be lost.
	ApplicationIdentifier pulumi.StringPtrInput
	// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
	GroupDescription pulumi.StringPtrInput
	// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	Location pulumi.StringPtrInput
	// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	ResourceGroupName pulumi.StringPtrInput
	// One or more `volume` blocks as defined below.
	Volumes VolumeGroupOracleVolumeArrayInput
}

func (VolumeGroupOracleState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeGroupOracleState)(nil)).Elem()
}

type volumeGroupOracleArgs struct {
	// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
	AccountName string `pulumi:"accountName"`
	// The SAP System ID, maximum 3 characters, e.g. `OR1`. Changing this forces a new Application Volume Group to be created and data will be lost.
	ApplicationIdentifier string `pulumi:"applicationIdentifier"`
	// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
	GroupDescription string `pulumi:"groupDescription"`
	// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	Location *string `pulumi:"location"`
	// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// One or more `volume` blocks as defined below.
	Volumes []VolumeGroupOracleVolume `pulumi:"volumes"`
}

// The set of arguments for constructing a VolumeGroupOracle resource.
type VolumeGroupOracleArgs struct {
	// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
	AccountName pulumi.StringInput
	// The SAP System ID, maximum 3 characters, e.g. `OR1`. Changing this forces a new Application Volume Group to be created and data will be lost.
	ApplicationIdentifier pulumi.StringInput
	// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
	GroupDescription pulumi.StringInput
	// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	Location pulumi.StringPtrInput
	// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
	ResourceGroupName pulumi.StringInput
	// One or more `volume` blocks as defined below.
	Volumes VolumeGroupOracleVolumeArrayInput
}

func (VolumeGroupOracleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeGroupOracleArgs)(nil)).Elem()
}

type VolumeGroupOracleInput interface {
	pulumi.Input

	ToVolumeGroupOracleOutput() VolumeGroupOracleOutput
	ToVolumeGroupOracleOutputWithContext(ctx context.Context) VolumeGroupOracleOutput
}

func (*VolumeGroupOracle) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupOracle)(nil)).Elem()
}

func (i *VolumeGroupOracle) ToVolumeGroupOracleOutput() VolumeGroupOracleOutput {
	return i.ToVolumeGroupOracleOutputWithContext(context.Background())
}

func (i *VolumeGroupOracle) ToVolumeGroupOracleOutputWithContext(ctx context.Context) VolumeGroupOracleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupOracleOutput)
}

// VolumeGroupOracleArrayInput is an input type that accepts VolumeGroupOracleArray and VolumeGroupOracleArrayOutput values.
// You can construct a concrete instance of `VolumeGroupOracleArrayInput` via:
//
//	VolumeGroupOracleArray{ VolumeGroupOracleArgs{...} }
type VolumeGroupOracleArrayInput interface {
	pulumi.Input

	ToVolumeGroupOracleArrayOutput() VolumeGroupOracleArrayOutput
	ToVolumeGroupOracleArrayOutputWithContext(context.Context) VolumeGroupOracleArrayOutput
}

type VolumeGroupOracleArray []VolumeGroupOracleInput

func (VolumeGroupOracleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeGroupOracle)(nil)).Elem()
}

func (i VolumeGroupOracleArray) ToVolumeGroupOracleArrayOutput() VolumeGroupOracleArrayOutput {
	return i.ToVolumeGroupOracleArrayOutputWithContext(context.Background())
}

func (i VolumeGroupOracleArray) ToVolumeGroupOracleArrayOutputWithContext(ctx context.Context) VolumeGroupOracleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupOracleArrayOutput)
}

// VolumeGroupOracleMapInput is an input type that accepts VolumeGroupOracleMap and VolumeGroupOracleMapOutput values.
// You can construct a concrete instance of `VolumeGroupOracleMapInput` via:
//
//	VolumeGroupOracleMap{ "key": VolumeGroupOracleArgs{...} }
type VolumeGroupOracleMapInput interface {
	pulumi.Input

	ToVolumeGroupOracleMapOutput() VolumeGroupOracleMapOutput
	ToVolumeGroupOracleMapOutputWithContext(context.Context) VolumeGroupOracleMapOutput
}

type VolumeGroupOracleMap map[string]VolumeGroupOracleInput

func (VolumeGroupOracleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeGroupOracle)(nil)).Elem()
}

func (i VolumeGroupOracleMap) ToVolumeGroupOracleMapOutput() VolumeGroupOracleMapOutput {
	return i.ToVolumeGroupOracleMapOutputWithContext(context.Background())
}

func (i VolumeGroupOracleMap) ToVolumeGroupOracleMapOutputWithContext(ctx context.Context) VolumeGroupOracleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupOracleMapOutput)
}

type VolumeGroupOracleOutput struct{ *pulumi.OutputState }

func (VolumeGroupOracleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupOracle)(nil)).Elem()
}

func (o VolumeGroupOracleOutput) ToVolumeGroupOracleOutput() VolumeGroupOracleOutput {
	return o
}

func (o VolumeGroupOracleOutput) ToVolumeGroupOracleOutputWithContext(ctx context.Context) VolumeGroupOracleOutput {
	return o
}

// Name of the account where the application volume group belong to. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupOracleOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupOracle) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// The SAP System ID, maximum 3 characters, e.g. `OR1`. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupOracleOutput) ApplicationIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupOracle) pulumi.StringOutput { return v.ApplicationIdentifier }).(pulumi.StringOutput)
}

// Volume group description. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupOracleOutput) GroupDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupOracle) pulumi.StringOutput { return v.GroupDescription }).(pulumi.StringOutput)
}

// The Azure Region where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupOracleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupOracle) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Application Volume Group. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupOracleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupOracle) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Application Volume Group should exist. Changing this forces a new Application Volume Group to be created and data will be lost.
func (o VolumeGroupOracleOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeGroupOracle) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// One or more `volume` blocks as defined below.
func (o VolumeGroupOracleOutput) Volumes() VolumeGroupOracleVolumeArrayOutput {
	return o.ApplyT(func(v *VolumeGroupOracle) VolumeGroupOracleVolumeArrayOutput { return v.Volumes }).(VolumeGroupOracleVolumeArrayOutput)
}

type VolumeGroupOracleArrayOutput struct{ *pulumi.OutputState }

func (VolumeGroupOracleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeGroupOracle)(nil)).Elem()
}

func (o VolumeGroupOracleArrayOutput) ToVolumeGroupOracleArrayOutput() VolumeGroupOracleArrayOutput {
	return o
}

func (o VolumeGroupOracleArrayOutput) ToVolumeGroupOracleArrayOutputWithContext(ctx context.Context) VolumeGroupOracleArrayOutput {
	return o
}

func (o VolumeGroupOracleArrayOutput) Index(i pulumi.IntInput) VolumeGroupOracleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeGroupOracle {
		return vs[0].([]*VolumeGroupOracle)[vs[1].(int)]
	}).(VolumeGroupOracleOutput)
}

type VolumeGroupOracleMapOutput struct{ *pulumi.OutputState }

func (VolumeGroupOracleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeGroupOracle)(nil)).Elem()
}

func (o VolumeGroupOracleMapOutput) ToVolumeGroupOracleMapOutput() VolumeGroupOracleMapOutput {
	return o
}

func (o VolumeGroupOracleMapOutput) ToVolumeGroupOracleMapOutputWithContext(ctx context.Context) VolumeGroupOracleMapOutput {
	return o
}

func (o VolumeGroupOracleMapOutput) MapIndex(k pulumi.StringInput) VolumeGroupOracleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeGroupOracle {
		return vs[0].(map[string]*VolumeGroupOracle)[vs[1].(string)]
	}).(VolumeGroupOracleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupOracleInput)(nil)).Elem(), &VolumeGroupOracle{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupOracleArrayInput)(nil)).Elem(), VolumeGroupOracleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeGroupOracleMapInput)(nil)).Elem(), VolumeGroupOracleMap{})
	pulumi.RegisterOutputType(VolumeGroupOracleOutput{})
	pulumi.RegisterOutputType(VolumeGroupOracleArrayOutput{})
	pulumi.RegisterOutputType(VolumeGroupOracleMapOutput{})
}
