// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Application Volume Group for SAP HANA application.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/netapp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := netapp.LookupVolumeGroupSapHana(ctx, &netapp.LookupVolumeGroupSapHanaArgs{
//				Name:              "existing application volume group name",
//				ResourceGroupName: "resource group name where the account and volume group belong to",
//				AccountName:       "existing account where the application volume group belong to",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupVolumeGroupSapHana(ctx *pulumi.Context, args *LookupVolumeGroupSapHanaArgs, opts ...pulumi.InvokeOption) (*LookupVolumeGroupSapHanaResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVolumeGroupSapHanaResult
	err := ctx.Invoke("azure:netapp/getVolumeGroupSapHana:getVolumeGroupSapHana", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolumeGroupSapHana.
type LookupVolumeGroupSapHanaArgs struct {
	// Name of the account where the application volume group belong to.
	AccountName string `pulumi:"accountName"`
	// The name of this Application Volume Group for SAP HANA application.
	Name string `pulumi:"name"`
	// The name of the Resource Group where the Application Volume Group exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getVolumeGroupSapHana.
type LookupVolumeGroupSapHanaResult struct {
	AccountName string `pulumi:"accountName"`
	// The application identifier.
	ApplicationIdentifier string `pulumi:"applicationIdentifier"`
	// Volume group description.
	GroupDescription string `pulumi:"groupDescription"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Azure Region where the Application Volume Group exists.
	Location string `pulumi:"location"`
	// The name of this volume.
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `volume` block as defined below.
	Volumes []GetVolumeGroupSapHanaVolume `pulumi:"volumes"`
}

func LookupVolumeGroupSapHanaOutput(ctx *pulumi.Context, args LookupVolumeGroupSapHanaOutputArgs, opts ...pulumi.InvokeOption) LookupVolumeGroupSapHanaResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVolumeGroupSapHanaResult, error) {
			args := v.(LookupVolumeGroupSapHanaArgs)
			r, err := LookupVolumeGroupSapHana(ctx, &args, opts...)
			var s LookupVolumeGroupSapHanaResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVolumeGroupSapHanaResultOutput)
}

// A collection of arguments for invoking getVolumeGroupSapHana.
type LookupVolumeGroupSapHanaOutputArgs struct {
	// Name of the account where the application volume group belong to.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of this Application Volume Group for SAP HANA application.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Application Volume Group exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupVolumeGroupSapHanaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeGroupSapHanaArgs)(nil)).Elem()
}

// A collection of values returned by getVolumeGroupSapHana.
type LookupVolumeGroupSapHanaResultOutput struct{ *pulumi.OutputState }

func (LookupVolumeGroupSapHanaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeGroupSapHanaResult)(nil)).Elem()
}

func (o LookupVolumeGroupSapHanaResultOutput) ToLookupVolumeGroupSapHanaResultOutput() LookupVolumeGroupSapHanaResultOutput {
	return o
}

func (o LookupVolumeGroupSapHanaResultOutput) ToLookupVolumeGroupSapHanaResultOutputWithContext(ctx context.Context) LookupVolumeGroupSapHanaResultOutput {
	return o
}

func (o LookupVolumeGroupSapHanaResultOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeGroupSapHanaResult) string { return v.AccountName }).(pulumi.StringOutput)
}

// The application identifier.
func (o LookupVolumeGroupSapHanaResultOutput) ApplicationIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeGroupSapHanaResult) string { return v.ApplicationIdentifier }).(pulumi.StringOutput)
}

// Volume group description.
func (o LookupVolumeGroupSapHanaResultOutput) GroupDescription() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeGroupSapHanaResult) string { return v.GroupDescription }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVolumeGroupSapHanaResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeGroupSapHanaResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Azure Region where the Application Volume Group exists.
func (o LookupVolumeGroupSapHanaResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeGroupSapHanaResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of this volume.
func (o LookupVolumeGroupSapHanaResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeGroupSapHanaResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupVolumeGroupSapHanaResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeGroupSapHanaResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `volume` block as defined below.
func (o LookupVolumeGroupSapHanaResultOutput) Volumes() GetVolumeGroupSapHanaVolumeArrayOutput {
	return o.ApplyT(func(v LookupVolumeGroupSapHanaResult) []GetVolumeGroupSapHanaVolume { return v.Volumes }).(GetVolumeGroupSapHanaVolumeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVolumeGroupSapHanaResultOutput{})
}
