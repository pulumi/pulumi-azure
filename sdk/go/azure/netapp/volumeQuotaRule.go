// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Volume Quota Rule.
//
// ## Import
//
// Volume Quota Rules can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:netapp/volumeQuotaRule:VolumeQuotaRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/vol1/volumeQuotaRules/quota1
//
// ```
type VolumeQuotaRule struct {
	pulumi.CustomResourceState

	// The Azure Region where the Volume Quota Rule should exist. Changing this forces a new Volume Quota Rule to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Volume Quota Rule. Changing this forces a new Volume Quota Rule to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Quota size in kibibytes.
	QuotaSizeInKib pulumi.IntOutput `pulumi:"quotaSizeInKib"`
	// Quota Target. This can be Unix UID/GID for NFSv3/NFSv4.1 volumes and Windows User SID for CIFS based volumes.
	//
	// > **NOTE:** ` quotaTarget  ` must be used when `quotaType` is `IndividualGroupQuota` or `IndividualUserQuota`
	//
	// > **NOTE:** more information about this resource can be found at [Understand default and individual user and group quotas](https://learn.microsoft.com/en-us/azure/azure-netapp-files/default-individual-user-group-quotas-introduction)
	QuotaTarget pulumi.StringPtrOutput `pulumi:"quotaTarget"`
	// Quota type. Possible values are `DefaultGroupQuota`, `DefaultUserQuota`, `IndividualGroupQuota` and `IndividualUserQuota`. Please note that `IndividualGroupQuota` and `DefaultGroupQuota` are not applicable to SMB and dual-protocol volumes.
	QuotaType pulumi.StringOutput `pulumi:"quotaType"`
	// The NetApp volume ID where the Volume Quota Rule is assigned to.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewVolumeQuotaRule registers a new resource with the given unique name, arguments, and options.
func NewVolumeQuotaRule(ctx *pulumi.Context,
	name string, args *VolumeQuotaRuleArgs, opts ...pulumi.ResourceOption) (*VolumeQuotaRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.QuotaSizeInKib == nil {
		return nil, errors.New("invalid value for required argument 'QuotaSizeInKib'")
	}
	if args.QuotaType == nil {
		return nil, errors.New("invalid value for required argument 'QuotaType'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeQuotaRule
	err := ctx.RegisterResource("azure:netapp/volumeQuotaRule:VolumeQuotaRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeQuotaRule gets an existing VolumeQuotaRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeQuotaRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeQuotaRuleState, opts ...pulumi.ResourceOption) (*VolumeQuotaRule, error) {
	var resource VolumeQuotaRule
	err := ctx.ReadResource("azure:netapp/volumeQuotaRule:VolumeQuotaRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeQuotaRule resources.
type volumeQuotaRuleState struct {
	// The Azure Region where the Volume Quota Rule should exist. Changing this forces a new Volume Quota Rule to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Volume Quota Rule. Changing this forces a new Volume Quota Rule to be created.
	Name *string `pulumi:"name"`
	// Quota size in kibibytes.
	QuotaSizeInKib *int `pulumi:"quotaSizeInKib"`
	// Quota Target. This can be Unix UID/GID for NFSv3/NFSv4.1 volumes and Windows User SID for CIFS based volumes.
	//
	// > **NOTE:** ` quotaTarget  ` must be used when `quotaType` is `IndividualGroupQuota` or `IndividualUserQuota`
	//
	// > **NOTE:** more information about this resource can be found at [Understand default and individual user and group quotas](https://learn.microsoft.com/en-us/azure/azure-netapp-files/default-individual-user-group-quotas-introduction)
	QuotaTarget *string `pulumi:"quotaTarget"`
	// Quota type. Possible values are `DefaultGroupQuota`, `DefaultUserQuota`, `IndividualGroupQuota` and `IndividualUserQuota`. Please note that `IndividualGroupQuota` and `DefaultGroupQuota` are not applicable to SMB and dual-protocol volumes.
	QuotaType *string `pulumi:"quotaType"`
	// The NetApp volume ID where the Volume Quota Rule is assigned to.
	VolumeId *string `pulumi:"volumeId"`
}

type VolumeQuotaRuleState struct {
	// The Azure Region where the Volume Quota Rule should exist. Changing this forces a new Volume Quota Rule to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Volume Quota Rule. Changing this forces a new Volume Quota Rule to be created.
	Name pulumi.StringPtrInput
	// Quota size in kibibytes.
	QuotaSizeInKib pulumi.IntPtrInput
	// Quota Target. This can be Unix UID/GID for NFSv3/NFSv4.1 volumes and Windows User SID for CIFS based volumes.
	//
	// > **NOTE:** ` quotaTarget  ` must be used when `quotaType` is `IndividualGroupQuota` or `IndividualUserQuota`
	//
	// > **NOTE:** more information about this resource can be found at [Understand default and individual user and group quotas](https://learn.microsoft.com/en-us/azure/azure-netapp-files/default-individual-user-group-quotas-introduction)
	QuotaTarget pulumi.StringPtrInput
	// Quota type. Possible values are `DefaultGroupQuota`, `DefaultUserQuota`, `IndividualGroupQuota` and `IndividualUserQuota`. Please note that `IndividualGroupQuota` and `DefaultGroupQuota` are not applicable to SMB and dual-protocol volumes.
	QuotaType pulumi.StringPtrInput
	// The NetApp volume ID where the Volume Quota Rule is assigned to.
	VolumeId pulumi.StringPtrInput
}

func (VolumeQuotaRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeQuotaRuleState)(nil)).Elem()
}

type volumeQuotaRuleArgs struct {
	// The Azure Region where the Volume Quota Rule should exist. Changing this forces a new Volume Quota Rule to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Volume Quota Rule. Changing this forces a new Volume Quota Rule to be created.
	Name *string `pulumi:"name"`
	// Quota size in kibibytes.
	QuotaSizeInKib int `pulumi:"quotaSizeInKib"`
	// Quota Target. This can be Unix UID/GID for NFSv3/NFSv4.1 volumes and Windows User SID for CIFS based volumes.
	//
	// > **NOTE:** ` quotaTarget  ` must be used when `quotaType` is `IndividualGroupQuota` or `IndividualUserQuota`
	//
	// > **NOTE:** more information about this resource can be found at [Understand default and individual user and group quotas](https://learn.microsoft.com/en-us/azure/azure-netapp-files/default-individual-user-group-quotas-introduction)
	QuotaTarget *string `pulumi:"quotaTarget"`
	// Quota type. Possible values are `DefaultGroupQuota`, `DefaultUserQuota`, `IndividualGroupQuota` and `IndividualUserQuota`. Please note that `IndividualGroupQuota` and `DefaultGroupQuota` are not applicable to SMB and dual-protocol volumes.
	QuotaType string `pulumi:"quotaType"`
	// The NetApp volume ID where the Volume Quota Rule is assigned to.
	VolumeId string `pulumi:"volumeId"`
}

// The set of arguments for constructing a VolumeQuotaRule resource.
type VolumeQuotaRuleArgs struct {
	// The Azure Region where the Volume Quota Rule should exist. Changing this forces a new Volume Quota Rule to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Volume Quota Rule. Changing this forces a new Volume Quota Rule to be created.
	Name pulumi.StringPtrInput
	// Quota size in kibibytes.
	QuotaSizeInKib pulumi.IntInput
	// Quota Target. This can be Unix UID/GID for NFSv3/NFSv4.1 volumes and Windows User SID for CIFS based volumes.
	//
	// > **NOTE:** ` quotaTarget  ` must be used when `quotaType` is `IndividualGroupQuota` or `IndividualUserQuota`
	//
	// > **NOTE:** more information about this resource can be found at [Understand default and individual user and group quotas](https://learn.microsoft.com/en-us/azure/azure-netapp-files/default-individual-user-group-quotas-introduction)
	QuotaTarget pulumi.StringPtrInput
	// Quota type. Possible values are `DefaultGroupQuota`, `DefaultUserQuota`, `IndividualGroupQuota` and `IndividualUserQuota`. Please note that `IndividualGroupQuota` and `DefaultGroupQuota` are not applicable to SMB and dual-protocol volumes.
	QuotaType pulumi.StringInput
	// The NetApp volume ID where the Volume Quota Rule is assigned to.
	VolumeId pulumi.StringInput
}

func (VolumeQuotaRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeQuotaRuleArgs)(nil)).Elem()
}

type VolumeQuotaRuleInput interface {
	pulumi.Input

	ToVolumeQuotaRuleOutput() VolumeQuotaRuleOutput
	ToVolumeQuotaRuleOutputWithContext(ctx context.Context) VolumeQuotaRuleOutput
}

func (*VolumeQuotaRule) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeQuotaRule)(nil)).Elem()
}

func (i *VolumeQuotaRule) ToVolumeQuotaRuleOutput() VolumeQuotaRuleOutput {
	return i.ToVolumeQuotaRuleOutputWithContext(context.Background())
}

func (i *VolumeQuotaRule) ToVolumeQuotaRuleOutputWithContext(ctx context.Context) VolumeQuotaRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeQuotaRuleOutput)
}

func (i *VolumeQuotaRule) ToOutput(ctx context.Context) pulumix.Output[*VolumeQuotaRule] {
	return pulumix.Output[*VolumeQuotaRule]{
		OutputState: i.ToVolumeQuotaRuleOutputWithContext(ctx).OutputState,
	}
}

// VolumeQuotaRuleArrayInput is an input type that accepts VolumeQuotaRuleArray and VolumeQuotaRuleArrayOutput values.
// You can construct a concrete instance of `VolumeQuotaRuleArrayInput` via:
//
//	VolumeQuotaRuleArray{ VolumeQuotaRuleArgs{...} }
type VolumeQuotaRuleArrayInput interface {
	pulumi.Input

	ToVolumeQuotaRuleArrayOutput() VolumeQuotaRuleArrayOutput
	ToVolumeQuotaRuleArrayOutputWithContext(context.Context) VolumeQuotaRuleArrayOutput
}

type VolumeQuotaRuleArray []VolumeQuotaRuleInput

func (VolumeQuotaRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeQuotaRule)(nil)).Elem()
}

func (i VolumeQuotaRuleArray) ToVolumeQuotaRuleArrayOutput() VolumeQuotaRuleArrayOutput {
	return i.ToVolumeQuotaRuleArrayOutputWithContext(context.Background())
}

func (i VolumeQuotaRuleArray) ToVolumeQuotaRuleArrayOutputWithContext(ctx context.Context) VolumeQuotaRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeQuotaRuleArrayOutput)
}

func (i VolumeQuotaRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]*VolumeQuotaRule] {
	return pulumix.Output[[]*VolumeQuotaRule]{
		OutputState: i.ToVolumeQuotaRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// VolumeQuotaRuleMapInput is an input type that accepts VolumeQuotaRuleMap and VolumeQuotaRuleMapOutput values.
// You can construct a concrete instance of `VolumeQuotaRuleMapInput` via:
//
//	VolumeQuotaRuleMap{ "key": VolumeQuotaRuleArgs{...} }
type VolumeQuotaRuleMapInput interface {
	pulumi.Input

	ToVolumeQuotaRuleMapOutput() VolumeQuotaRuleMapOutput
	ToVolumeQuotaRuleMapOutputWithContext(context.Context) VolumeQuotaRuleMapOutput
}

type VolumeQuotaRuleMap map[string]VolumeQuotaRuleInput

func (VolumeQuotaRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeQuotaRule)(nil)).Elem()
}

func (i VolumeQuotaRuleMap) ToVolumeQuotaRuleMapOutput() VolumeQuotaRuleMapOutput {
	return i.ToVolumeQuotaRuleMapOutputWithContext(context.Background())
}

func (i VolumeQuotaRuleMap) ToVolumeQuotaRuleMapOutputWithContext(ctx context.Context) VolumeQuotaRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeQuotaRuleMapOutput)
}

func (i VolumeQuotaRuleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VolumeQuotaRule] {
	return pulumix.Output[map[string]*VolumeQuotaRule]{
		OutputState: i.ToVolumeQuotaRuleMapOutputWithContext(ctx).OutputState,
	}
}

type VolumeQuotaRuleOutput struct{ *pulumi.OutputState }

func (VolumeQuotaRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeQuotaRule)(nil)).Elem()
}

func (o VolumeQuotaRuleOutput) ToVolumeQuotaRuleOutput() VolumeQuotaRuleOutput {
	return o
}

func (o VolumeQuotaRuleOutput) ToVolumeQuotaRuleOutputWithContext(ctx context.Context) VolumeQuotaRuleOutput {
	return o
}

func (o VolumeQuotaRuleOutput) ToOutput(ctx context.Context) pulumix.Output[*VolumeQuotaRule] {
	return pulumix.Output[*VolumeQuotaRule]{
		OutputState: o.OutputState,
	}
}

// The Azure Region where the Volume Quota Rule should exist. Changing this forces a new Volume Quota Rule to be created.
func (o VolumeQuotaRuleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Volume Quota Rule. Changing this forces a new Volume Quota Rule to be created.
func (o VolumeQuotaRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Quota size in kibibytes.
func (o VolumeQuotaRuleOutput) QuotaSizeInKib() pulumi.IntOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.IntOutput { return v.QuotaSizeInKib }).(pulumi.IntOutput)
}

// Quota Target. This can be Unix UID/GID for NFSv3/NFSv4.1 volumes and Windows User SID for CIFS based volumes.
//
// > **NOTE:** ` quotaTarget  ` must be used when `quotaType` is `IndividualGroupQuota` or `IndividualUserQuota`
//
// > **NOTE:** more information about this resource can be found at [Understand default and individual user and group quotas](https://learn.microsoft.com/en-us/azure/azure-netapp-files/default-individual-user-group-quotas-introduction)
func (o VolumeQuotaRuleOutput) QuotaTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringPtrOutput { return v.QuotaTarget }).(pulumi.StringPtrOutput)
}

// Quota type. Possible values are `DefaultGroupQuota`, `DefaultUserQuota`, `IndividualGroupQuota` and `IndividualUserQuota`. Please note that `IndividualGroupQuota` and `DefaultGroupQuota` are not applicable to SMB and dual-protocol volumes.
func (o VolumeQuotaRuleOutput) QuotaType() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringOutput { return v.QuotaType }).(pulumi.StringOutput)
}

// The NetApp volume ID where the Volume Quota Rule is assigned to.
func (o VolumeQuotaRuleOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeQuotaRule) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type VolumeQuotaRuleArrayOutput struct{ *pulumi.OutputState }

func (VolumeQuotaRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeQuotaRule)(nil)).Elem()
}

func (o VolumeQuotaRuleArrayOutput) ToVolumeQuotaRuleArrayOutput() VolumeQuotaRuleArrayOutput {
	return o
}

func (o VolumeQuotaRuleArrayOutput) ToVolumeQuotaRuleArrayOutputWithContext(ctx context.Context) VolumeQuotaRuleArrayOutput {
	return o
}

func (o VolumeQuotaRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VolumeQuotaRule] {
	return pulumix.Output[[]*VolumeQuotaRule]{
		OutputState: o.OutputState,
	}
}

func (o VolumeQuotaRuleArrayOutput) Index(i pulumi.IntInput) VolumeQuotaRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeQuotaRule {
		return vs[0].([]*VolumeQuotaRule)[vs[1].(int)]
	}).(VolumeQuotaRuleOutput)
}

type VolumeQuotaRuleMapOutput struct{ *pulumi.OutputState }

func (VolumeQuotaRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeQuotaRule)(nil)).Elem()
}

func (o VolumeQuotaRuleMapOutput) ToVolumeQuotaRuleMapOutput() VolumeQuotaRuleMapOutput {
	return o
}

func (o VolumeQuotaRuleMapOutput) ToVolumeQuotaRuleMapOutputWithContext(ctx context.Context) VolumeQuotaRuleMapOutput {
	return o
}

func (o VolumeQuotaRuleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VolumeQuotaRule] {
	return pulumix.Output[map[string]*VolumeQuotaRule]{
		OutputState: o.OutputState,
	}
}

func (o VolumeQuotaRuleMapOutput) MapIndex(k pulumi.StringInput) VolumeQuotaRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeQuotaRule {
		return vs[0].(map[string]*VolumeQuotaRule)[vs[1].(string)]
	}).(VolumeQuotaRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeQuotaRuleInput)(nil)).Elem(), &VolumeQuotaRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeQuotaRuleArrayInput)(nil)).Elem(), VolumeQuotaRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeQuotaRuleMapInput)(nil)).Elem(), VolumeQuotaRuleMap{})
	pulumi.RegisterOutputType(VolumeQuotaRuleOutput{})
	pulumi.RegisterOutputType(VolumeQuotaRuleArrayOutput{})
	pulumi.RegisterOutputType(VolumeQuotaRuleMapOutput{})
}
