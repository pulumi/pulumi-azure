// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Uses this data source to access information about an existing NetApp Snapshot Policy.
//
// ## NetApp Snapshot Policy Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/netapp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := netapp.LookupSnapshotPolicy(ctx, &netapp.LookupSnapshotPolicyArgs{
//				ResourceGroupName: "acctestRG",
//				AccountName:       "acctestnetappaccount",
//				Name:              "example-snapshot-policy",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			ctx.Export("name", example.Name)
//			ctx.Export("enabled", example.Enabled)
//			ctx.Export("hourlySchedule", example.HourlySchedules)
//			ctx.Export("dailySchedule", example.DailySchedules)
//			ctx.Export("weeklySchedule", example.WeeklySchedules)
//			ctx.Export("monthlySchedule", example.MonthlySchedules)
//			return nil
//		})
//	}
//
// ```
func LookupSnapshotPolicy(ctx *pulumi.Context, args *LookupSnapshotPolicyArgs, opts ...pulumi.InvokeOption) (*LookupSnapshotPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSnapshotPolicyResult
	err := ctx.Invoke("azure:netapp/getSnapshotPolicy:getSnapshotPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSnapshotPolicy.
type LookupSnapshotPolicyArgs struct {
	// The name of the NetApp account where the NetApp Snapshot Policy exists.
	AccountName string `pulumi:"accountName"`
	// The name of the NetApp Snapshot Policy.
	Name string `pulumi:"name"`
	// The Name of the Resource Group where the NetApp Snapshot Policy exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getSnapshotPolicy.
type LookupSnapshotPolicyResult struct {
	// The name of the NetApp Account in which the NetApp Snapshot Policy was created.
	AccountName string `pulumi:"accountName"`
	// Daily snapshot schedule.
	DailySchedules []GetSnapshotPolicyDailySchedule `pulumi:"dailySchedules"`
	// Defines that the NetApp Snapshot Policy is enabled or not.
	Enabled bool `pulumi:"enabled"`
	// Hourly snapshot schedule.
	HourlySchedules []GetSnapshotPolicyHourlySchedule `pulumi:"hourlySchedules"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Specifies the supported Azure location where the resource exists.
	Location string `pulumi:"location"`
	// List of the days of the month when the snapshots will be created.
	MonthlySchedules []GetSnapshotPolicyMonthlySchedule `pulumi:"monthlySchedules"`
	// The name of the NetApp Snapshot Policy.
	Name string `pulumi:"name"`
	// The name of the resource group where the NetApp Snapshot Policy should be created.
	ResourceGroupName string            `pulumi:"resourceGroupName"`
	Tags              map[string]string `pulumi:"tags"`
	// Weekly snapshot schedule.
	WeeklySchedules []GetSnapshotPolicyWeeklySchedule `pulumi:"weeklySchedules"`
}

func LookupSnapshotPolicyOutput(ctx *pulumi.Context, args LookupSnapshotPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupSnapshotPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSnapshotPolicyResult, error) {
			args := v.(LookupSnapshotPolicyArgs)
			r, err := LookupSnapshotPolicy(ctx, &args, opts...)
			var s LookupSnapshotPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSnapshotPolicyResultOutput)
}

// A collection of arguments for invoking getSnapshotPolicy.
type LookupSnapshotPolicyOutputArgs struct {
	// The name of the NetApp account where the NetApp Snapshot Policy exists.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the NetApp Snapshot Policy.
	Name pulumi.StringInput `pulumi:"name"`
	// The Name of the Resource Group where the NetApp Snapshot Policy exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupSnapshotPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnapshotPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getSnapshotPolicy.
type LookupSnapshotPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupSnapshotPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnapshotPolicyResult)(nil)).Elem()
}

func (o LookupSnapshotPolicyResultOutput) ToLookupSnapshotPolicyResultOutput() LookupSnapshotPolicyResultOutput {
	return o
}

func (o LookupSnapshotPolicyResultOutput) ToLookupSnapshotPolicyResultOutputWithContext(ctx context.Context) LookupSnapshotPolicyResultOutput {
	return o
}

// The name of the NetApp Account in which the NetApp Snapshot Policy was created.
func (o LookupSnapshotPolicyResultOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotPolicyResult) string { return v.AccountName }).(pulumi.StringOutput)
}

// Daily snapshot schedule.
func (o LookupSnapshotPolicyResultOutput) DailySchedules() GetSnapshotPolicyDailyScheduleArrayOutput {
	return o.ApplyT(func(v LookupSnapshotPolicyResult) []GetSnapshotPolicyDailySchedule { return v.DailySchedules }).(GetSnapshotPolicyDailyScheduleArrayOutput)
}

// Defines that the NetApp Snapshot Policy is enabled or not.
func (o LookupSnapshotPolicyResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnapshotPolicyResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Hourly snapshot schedule.
func (o LookupSnapshotPolicyResultOutput) HourlySchedules() GetSnapshotPolicyHourlyScheduleArrayOutput {
	return o.ApplyT(func(v LookupSnapshotPolicyResult) []GetSnapshotPolicyHourlySchedule { return v.HourlySchedules }).(GetSnapshotPolicyHourlyScheduleArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSnapshotPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the supported Azure location where the resource exists.
func (o LookupSnapshotPolicyResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotPolicyResult) string { return v.Location }).(pulumi.StringOutput)
}

// List of the days of the month when the snapshots will be created.
func (o LookupSnapshotPolicyResultOutput) MonthlySchedules() GetSnapshotPolicyMonthlyScheduleArrayOutput {
	return o.ApplyT(func(v LookupSnapshotPolicyResult) []GetSnapshotPolicyMonthlySchedule { return v.MonthlySchedules }).(GetSnapshotPolicyMonthlyScheduleArrayOutput)
}

// The name of the NetApp Snapshot Policy.
func (o LookupSnapshotPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group where the NetApp Snapshot Policy should be created.
func (o LookupSnapshotPolicyResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotPolicyResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

func (o LookupSnapshotPolicyResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSnapshotPolicyResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Weekly snapshot schedule.
func (o LookupSnapshotPolicyResultOutput) WeeklySchedules() GetSnapshotPolicyWeeklyScheduleArrayOutput {
	return o.ApplyT(func(v LookupSnapshotPolicyResult) []GetSnapshotPolicyWeeklySchedule { return v.WeeklySchedules }).(GetSnapshotPolicyWeeklyScheduleArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSnapshotPolicyResultOutput{})
}
