// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a NetApp Snapshot Policy.
//
// ## NetApp Snapshot Policy Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/netapp"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("East US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := netapp.NewAccount(ctx, "exampleAccount", &netapp.AccountArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = netapp.NewSnapshotPolicy(ctx, "exampleSnapshotPolicy", &netapp.SnapshotPolicyArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			AccountName:       exampleAccount.Name,
// 			Enabled:           pulumi.Bool(true),
// 			HourlySchedule: &netapp.SnapshotPolicyHourlyScheduleArgs{
// 				SnapshotsToKeep: pulumi.Int(4),
// 				Minute:          pulumi.Int(15),
// 			},
// 			DailySchedule: &netapp.SnapshotPolicyDailyScheduleArgs{
// 				SnapshotsToKeep: pulumi.Int(2),
// 				Hour:            pulumi.Int(20),
// 				Minute:          pulumi.Int(15),
// 			},
// 			WeeklySchedule: &netapp.SnapshotPolicyWeeklyScheduleArgs{
// 				SnapshotsToKeep: pulumi.Int(1),
// 				DaysOfWeeks: pulumi.StringArray{
// 					pulumi.String("Monday"),
// 					pulumi.String("Friday"),
// 				},
// 				Hour:   pulumi.Int(23),
// 				Minute: pulumi.Int(0),
// 			},
// 			MonthlySchedule: &netapp.SnapshotPolicyMonthlyScheduleArgs{
// 				SnapshotsToKeep: pulumi.Int(1),
// 				DaysOfMonths: pulumi.IntArray{
// 					pulumi.Int(1),
// 					pulumi.Int(15),
// 					pulumi.Int(20),
// 					pulumi.Int(30),
// 				},
// 				Hour:   pulumi.Int(5),
// 				Minute: pulumi.Int(45),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// NetApp Snapshot Policy can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:netapp/snapshotPolicy:SnapshotPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1/snapshotPolicies/snapshotpolicy1
// ```
type SnapshotPolicy struct {
	pulumi.CustomResourceState

	// The name of the NetApp Account in which the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// Sets a daily snapshot schedule. See details in below `dailySchedule` block.
	DailySchedule SnapshotPolicyDailyScheduleOutput `pulumi:"dailySchedule"`
	// Defines that the NetApp Snapshot Policy is enabled or not.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Sets an hourly snapshot schedule. See details in below `hourlySchedule` block.
	HourlySchedule SnapshotPolicyHourlyScheduleOutput `pulumi:"hourlySchedule"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Sets a monthly snapshot schedule. See details in below `monthlySchedule` block.
	MonthlySchedule SnapshotPolicyMonthlyScheduleOutput `pulumi:"monthlySchedule"`
	// The name of the NetApp Snapshot Policy. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group where the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput    `pulumi:"resourceGroupName"`
	Tags              pulumi.StringMapOutput `pulumi:"tags"`
	// Sets a weekly snapshot schedule. See details in below `weeklySchedule` block.
	WeeklySchedule SnapshotPolicyWeeklyScheduleOutput `pulumi:"weeklySchedule"`
}

// NewSnapshotPolicy registers a new resource with the given unique name, arguments, and options.
func NewSnapshotPolicy(ctx *pulumi.Context,
	name string, args *SnapshotPolicyArgs, opts ...pulumi.ResourceOption) (*SnapshotPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource SnapshotPolicy
	err := ctx.RegisterResource("azure:netapp/snapshotPolicy:SnapshotPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotPolicy gets an existing SnapshotPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotPolicyState, opts ...pulumi.ResourceOption) (*SnapshotPolicy, error) {
	var resource SnapshotPolicy
	err := ctx.ReadResource("azure:netapp/snapshotPolicy:SnapshotPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotPolicy resources.
type snapshotPolicyState struct {
	// The name of the NetApp Account in which the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
	AccountName *string `pulumi:"accountName"`
	// Sets a daily snapshot schedule. See details in below `dailySchedule` block.
	DailySchedule *SnapshotPolicyDailySchedule `pulumi:"dailySchedule"`
	// Defines that the NetApp Snapshot Policy is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// Sets an hourly snapshot schedule. See details in below `hourlySchedule` block.
	HourlySchedule *SnapshotPolicyHourlySchedule `pulumi:"hourlySchedule"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Sets a monthly snapshot schedule. See details in below `monthlySchedule` block.
	MonthlySchedule *SnapshotPolicyMonthlySchedule `pulumi:"monthlySchedule"`
	// The name of the NetApp Snapshot Policy. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group where the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
	ResourceGroupName *string           `pulumi:"resourceGroupName"`
	Tags              map[string]string `pulumi:"tags"`
	// Sets a weekly snapshot schedule. See details in below `weeklySchedule` block.
	WeeklySchedule *SnapshotPolicyWeeklySchedule `pulumi:"weeklySchedule"`
}

type SnapshotPolicyState struct {
	// The name of the NetApp Account in which the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
	AccountName pulumi.StringPtrInput
	// Sets a daily snapshot schedule. See details in below `dailySchedule` block.
	DailySchedule SnapshotPolicyDailySchedulePtrInput
	// Defines that the NetApp Snapshot Policy is enabled or not.
	Enabled pulumi.BoolPtrInput
	// Sets an hourly snapshot schedule. See details in below `hourlySchedule` block.
	HourlySchedule SnapshotPolicyHourlySchedulePtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Sets a monthly snapshot schedule. See details in below `monthlySchedule` block.
	MonthlySchedule SnapshotPolicyMonthlySchedulePtrInput
	// The name of the NetApp Snapshot Policy. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group where the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	Tags              pulumi.StringMapInput
	// Sets a weekly snapshot schedule. See details in below `weeklySchedule` block.
	WeeklySchedule SnapshotPolicyWeeklySchedulePtrInput
}

func (SnapshotPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotPolicyState)(nil)).Elem()
}

type snapshotPolicyArgs struct {
	// The name of the NetApp Account in which the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
	AccountName string `pulumi:"accountName"`
	// Sets a daily snapshot schedule. See details in below `dailySchedule` block.
	DailySchedule *SnapshotPolicyDailySchedule `pulumi:"dailySchedule"`
	// Defines that the NetApp Snapshot Policy is enabled or not.
	Enabled bool `pulumi:"enabled"`
	// Sets an hourly snapshot schedule. See details in below `hourlySchedule` block.
	HourlySchedule *SnapshotPolicyHourlySchedule `pulumi:"hourlySchedule"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Sets a monthly snapshot schedule. See details in below `monthlySchedule` block.
	MonthlySchedule *SnapshotPolicyMonthlySchedule `pulumi:"monthlySchedule"`
	// The name of the NetApp Snapshot Policy. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group where the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
	ResourceGroupName string            `pulumi:"resourceGroupName"`
	Tags              map[string]string `pulumi:"tags"`
	// Sets a weekly snapshot schedule. See details in below `weeklySchedule` block.
	WeeklySchedule *SnapshotPolicyWeeklySchedule `pulumi:"weeklySchedule"`
}

// The set of arguments for constructing a SnapshotPolicy resource.
type SnapshotPolicyArgs struct {
	// The name of the NetApp Account in which the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
	AccountName pulumi.StringInput
	// Sets a daily snapshot schedule. See details in below `dailySchedule` block.
	DailySchedule SnapshotPolicyDailySchedulePtrInput
	// Defines that the NetApp Snapshot Policy is enabled or not.
	Enabled pulumi.BoolInput
	// Sets an hourly snapshot schedule. See details in below `hourlySchedule` block.
	HourlySchedule SnapshotPolicyHourlySchedulePtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Sets a monthly snapshot schedule. See details in below `monthlySchedule` block.
	MonthlySchedule SnapshotPolicyMonthlySchedulePtrInput
	// The name of the NetApp Snapshot Policy. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group where the NetApp Snapshot Policy should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	Tags              pulumi.StringMapInput
	// Sets a weekly snapshot schedule. See details in below `weeklySchedule` block.
	WeeklySchedule SnapshotPolicyWeeklySchedulePtrInput
}

func (SnapshotPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotPolicyArgs)(nil)).Elem()
}

type SnapshotPolicyInput interface {
	pulumi.Input

	ToSnapshotPolicyOutput() SnapshotPolicyOutput
	ToSnapshotPolicyOutputWithContext(ctx context.Context) SnapshotPolicyOutput
}

func (*SnapshotPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPolicy)(nil)).Elem()
}

func (i *SnapshotPolicy) ToSnapshotPolicyOutput() SnapshotPolicyOutput {
	return i.ToSnapshotPolicyOutputWithContext(context.Background())
}

func (i *SnapshotPolicy) ToSnapshotPolicyOutputWithContext(ctx context.Context) SnapshotPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyOutput)
}

// SnapshotPolicyArrayInput is an input type that accepts SnapshotPolicyArray and SnapshotPolicyArrayOutput values.
// You can construct a concrete instance of `SnapshotPolicyArrayInput` via:
//
//          SnapshotPolicyArray{ SnapshotPolicyArgs{...} }
type SnapshotPolicyArrayInput interface {
	pulumi.Input

	ToSnapshotPolicyArrayOutput() SnapshotPolicyArrayOutput
	ToSnapshotPolicyArrayOutputWithContext(context.Context) SnapshotPolicyArrayOutput
}

type SnapshotPolicyArray []SnapshotPolicyInput

func (SnapshotPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotPolicy)(nil)).Elem()
}

func (i SnapshotPolicyArray) ToSnapshotPolicyArrayOutput() SnapshotPolicyArrayOutput {
	return i.ToSnapshotPolicyArrayOutputWithContext(context.Background())
}

func (i SnapshotPolicyArray) ToSnapshotPolicyArrayOutputWithContext(ctx context.Context) SnapshotPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyArrayOutput)
}

// SnapshotPolicyMapInput is an input type that accepts SnapshotPolicyMap and SnapshotPolicyMapOutput values.
// You can construct a concrete instance of `SnapshotPolicyMapInput` via:
//
//          SnapshotPolicyMap{ "key": SnapshotPolicyArgs{...} }
type SnapshotPolicyMapInput interface {
	pulumi.Input

	ToSnapshotPolicyMapOutput() SnapshotPolicyMapOutput
	ToSnapshotPolicyMapOutputWithContext(context.Context) SnapshotPolicyMapOutput
}

type SnapshotPolicyMap map[string]SnapshotPolicyInput

func (SnapshotPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotPolicy)(nil)).Elem()
}

func (i SnapshotPolicyMap) ToSnapshotPolicyMapOutput() SnapshotPolicyMapOutput {
	return i.ToSnapshotPolicyMapOutputWithContext(context.Background())
}

func (i SnapshotPolicyMap) ToSnapshotPolicyMapOutputWithContext(ctx context.Context) SnapshotPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyMapOutput)
}

type SnapshotPolicyOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPolicy)(nil)).Elem()
}

func (o SnapshotPolicyOutput) ToSnapshotPolicyOutput() SnapshotPolicyOutput {
	return o
}

func (o SnapshotPolicyOutput) ToSnapshotPolicyOutputWithContext(ctx context.Context) SnapshotPolicyOutput {
	return o
}

type SnapshotPolicyArrayOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotPolicy)(nil)).Elem()
}

func (o SnapshotPolicyArrayOutput) ToSnapshotPolicyArrayOutput() SnapshotPolicyArrayOutput {
	return o
}

func (o SnapshotPolicyArrayOutput) ToSnapshotPolicyArrayOutputWithContext(ctx context.Context) SnapshotPolicyArrayOutput {
	return o
}

func (o SnapshotPolicyArrayOutput) Index(i pulumi.IntInput) SnapshotPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnapshotPolicy {
		return vs[0].([]*SnapshotPolicy)[vs[1].(int)]
	}).(SnapshotPolicyOutput)
}

type SnapshotPolicyMapOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotPolicy)(nil)).Elem()
}

func (o SnapshotPolicyMapOutput) ToSnapshotPolicyMapOutput() SnapshotPolicyMapOutput {
	return o
}

func (o SnapshotPolicyMapOutput) ToSnapshotPolicyMapOutputWithContext(ctx context.Context) SnapshotPolicyMapOutput {
	return o
}

func (o SnapshotPolicyMapOutput) MapIndex(k pulumi.StringInput) SnapshotPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnapshotPolicy {
		return vs[0].(map[string]*SnapshotPolicy)[vs[1].(string)]
	}).(SnapshotPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotPolicyInput)(nil)).Elem(), &SnapshotPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotPolicyArrayInput)(nil)).Elem(), SnapshotPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotPolicyMapInput)(nil)).Elem(), SnapshotPolicyMap{})
	pulumi.RegisterOutputType(SnapshotPolicyOutput{})
	pulumi.RegisterOutputType(SnapshotPolicyArrayOutput{})
	pulumi.RegisterOutputType(SnapshotPolicyMapOutput{})
}
