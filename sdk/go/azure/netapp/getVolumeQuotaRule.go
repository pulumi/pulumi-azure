// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Volume Quota Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/netapp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := netapp.LookupVolumeQuotaRule(ctx, &netapp.LookupVolumeQuotaRuleArgs{
//				Name:     "exampleQuotaRule",
//				VolumeId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/vol1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupVolumeQuotaRule(ctx *pulumi.Context, args *LookupVolumeQuotaRuleArgs, opts ...pulumi.InvokeOption) (*LookupVolumeQuotaRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVolumeQuotaRuleResult
	err := ctx.Invoke("azure:netapp/getVolumeQuotaRule:getVolumeQuotaRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolumeQuotaRule.
type LookupVolumeQuotaRuleArgs struct {
	// The name of this Volume Quota Rule.
	Name string `pulumi:"name"`
	// The NetApp volume ID where the Volume Quota Rule is assigned to.
	VolumeId string `pulumi:"volumeId"`
}

// A collection of values returned by getVolumeQuotaRule.
type LookupVolumeQuotaRuleResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Azure Region where the Volume Quota Rule exists.
	Location string `pulumi:"location"`
	Name     string `pulumi:"name"`
	// The quota size in kibibytes.
	QuotaSizeInKib int `pulumi:"quotaSizeInKib"`
	// The quota Target.
	QuotaTarget string `pulumi:"quotaTarget"`
	// The quota type.
	QuotaType string `pulumi:"quotaType"`
	VolumeId  string `pulumi:"volumeId"`
}

func LookupVolumeQuotaRuleOutput(ctx *pulumi.Context, args LookupVolumeQuotaRuleOutputArgs, opts ...pulumi.InvokeOption) LookupVolumeQuotaRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVolumeQuotaRuleResult, error) {
			args := v.(LookupVolumeQuotaRuleArgs)
			r, err := LookupVolumeQuotaRule(ctx, &args, opts...)
			var s LookupVolumeQuotaRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVolumeQuotaRuleResultOutput)
}

// A collection of arguments for invoking getVolumeQuotaRule.
type LookupVolumeQuotaRuleOutputArgs struct {
	// The name of this Volume Quota Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The NetApp volume ID where the Volume Quota Rule is assigned to.
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
}

func (LookupVolumeQuotaRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeQuotaRuleArgs)(nil)).Elem()
}

// A collection of values returned by getVolumeQuotaRule.
type LookupVolumeQuotaRuleResultOutput struct{ *pulumi.OutputState }

func (LookupVolumeQuotaRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeQuotaRuleResult)(nil)).Elem()
}

func (o LookupVolumeQuotaRuleResultOutput) ToLookupVolumeQuotaRuleResultOutput() LookupVolumeQuotaRuleResultOutput {
	return o
}

func (o LookupVolumeQuotaRuleResultOutput) ToLookupVolumeQuotaRuleResultOutputWithContext(ctx context.Context) LookupVolumeQuotaRuleResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVolumeQuotaRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeQuotaRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Azure Region where the Volume Quota Rule exists.
func (o LookupVolumeQuotaRuleResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeQuotaRuleResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupVolumeQuotaRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeQuotaRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// The quota size in kibibytes.
func (o LookupVolumeQuotaRuleResultOutput) QuotaSizeInKib() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVolumeQuotaRuleResult) int { return v.QuotaSizeInKib }).(pulumi.IntOutput)
}

// The quota Target.
func (o LookupVolumeQuotaRuleResultOutput) QuotaTarget() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeQuotaRuleResult) string { return v.QuotaTarget }).(pulumi.StringOutput)
}

// The quota type.
func (o LookupVolumeQuotaRuleResultOutput) QuotaType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeQuotaRuleResult) string { return v.QuotaType }).(pulumi.StringOutput)
}

func (o LookupVolumeQuotaRuleResultOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeQuotaRuleResult) string { return v.VolumeId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVolumeQuotaRuleResultOutput{})
}
