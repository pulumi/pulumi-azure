// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing NetApp Backup Vault.
//
// ## NetApp Backup Policy Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/netapp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := netapp.LookupBackupPolicy(ctx, &netapp.LookupBackupPolicyArgs{
//				ResourceGroupName: "example-resource-group",
//				AccountName:       "example-netappaccount",
//				Name:              "example-backuppolicy",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("backupPolicyId", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupBackupPolicy(ctx *pulumi.Context, args *LookupBackupPolicyArgs, opts ...pulumi.InvokeOption) (*LookupBackupPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	invokeOpts, optsErr := pulumi.NewInvokeOptions(opts...)
	if optsErr != nil {
		return &LookupBackupPolicyResult{}, optsErr
	}
	if len(invokeOpts.DependsOn) > 0 {
		return &LookupBackupPolicyResult{}, errors.New("DependsOn is not supported for direct form invoke LookupBackupPolicy, use LookupBackupPolicyOutput instead")
	}
	if len(invokeOpts.DependsOnInputs) > 0 {
		return &LookupBackupPolicyResult{}, errors.New("DependsOnInputs is not supported for direct form invoke LookupBackupPolicy, use LookupBackupPolicyOutput instead")
	}
	var rv LookupBackupPolicyResult
	err := ctx.Invoke("azure:netapp/getBackupPolicy:getBackupPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBackupPolicy.
type LookupBackupPolicyArgs struct {
	// The name of the NetApp Account in which the NetApp Policy exists.
	AccountName string `pulumi:"accountName"`
	// The name of the NetApp Backup Policy.
	Name string `pulumi:"name"`
	// The name of the resource group where the NetApp Backup Policy exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getBackupPolicy.
type LookupBackupPolicyResult struct {
	// The name of the NetApp account in which the NetApp Policy exists.
	AccountName string `pulumi:"accountName"`
	// The number of daily backups to keep.
	DailyBackupsToKeep int `pulumi:"dailyBackupsToKeep"`
	// Whether the Backup Policy is enabled.
	Enabled bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// NetApp Backup Policy location.
	Location string `pulumi:"location"`
	// The number of monthly backups to keep.
	MonthlyBackupsToKeep int    `pulumi:"monthlyBackupsToKeep"`
	Name                 string `pulumi:"name"`
	ResourceGroupName    string `pulumi:"resourceGroupName"`
	// List of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The number of weekly backups to keep.
	WeeklyBackupsToKeep int `pulumi:"weeklyBackupsToKeep"`
}

func LookupBackupPolicyOutput(ctx *pulumi.Context, args LookupBackupPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupBackupPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupBackupPolicyResultOutput, error) {
			args := v.(LookupBackupPolicyArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupBackupPolicyResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("azure:netapp/getBackupPolicy:getBackupPolicy", args, &rv, "", opts...)
			if err != nil {
				return LookupBackupPolicyResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupBackupPolicyResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(LookupBackupPolicyResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupBackupPolicyResultOutput), nil
			}
			return output, nil
		}).(LookupBackupPolicyResultOutput)
}

// A collection of arguments for invoking getBackupPolicy.
type LookupBackupPolicyOutputArgs struct {
	// The name of the NetApp Account in which the NetApp Policy exists.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the NetApp Backup Policy.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group where the NetApp Backup Policy exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupBackupPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBackupPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getBackupPolicy.
type LookupBackupPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupBackupPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBackupPolicyResult)(nil)).Elem()
}

func (o LookupBackupPolicyResultOutput) ToLookupBackupPolicyResultOutput() LookupBackupPolicyResultOutput {
	return o
}

func (o LookupBackupPolicyResultOutput) ToLookupBackupPolicyResultOutputWithContext(ctx context.Context) LookupBackupPolicyResultOutput {
	return o
}

// The name of the NetApp account in which the NetApp Policy exists.
func (o LookupBackupPolicyResultOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.AccountName }).(pulumi.StringOutput)
}

// The number of daily backups to keep.
func (o LookupBackupPolicyResultOutput) DailyBackupsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) int { return v.DailyBackupsToKeep }).(pulumi.IntOutput)
}

// Whether the Backup Policy is enabled.
func (o LookupBackupPolicyResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupBackupPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// NetApp Backup Policy location.
func (o LookupBackupPolicyResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.Location }).(pulumi.StringOutput)
}

// The number of monthly backups to keep.
func (o LookupBackupPolicyResultOutput) MonthlyBackupsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) int { return v.MonthlyBackupsToKeep }).(pulumi.IntOutput)
}

func (o LookupBackupPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupBackupPolicyResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// List of tags assigned to the resource.
func (o LookupBackupPolicyResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The number of weekly backups to keep.
func (o LookupBackupPolicyResultOutput) WeeklyBackupsToKeep() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBackupPolicyResult) int { return v.WeeklyBackupsToKeep }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBackupPolicyResultOutput{})
}
