// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package powerbi

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a PowerBI Embedded.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/powerbi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = powerbi.NewEmbedded(ctx, "exampleEmbedded", &powerbi.EmbeddedArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				SkuName:           pulumi.String("A1"),
//				Administrators: pulumi.StringArray{
//					pulumi.String("azsdktest@microsoft.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PowerBI Embedded can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:powerbi/embedded:Embedded example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.PowerBIDedicated/capacities/capacity1
//
// ```
type Embedded struct {
	pulumi.CustomResourceState

	// A set of administrator user identities, which manages the Power BI Embedded and must be a member user or a service principal in your AAD tenant.
	Administrators pulumi.StringArrayOutput `pulumi:"administrators"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Sets the PowerBI Embedded's mode. Possible values include: `Gen1`, `Gen2`. Defaults to `Gen1`. Changing this forces a new resource to be created.
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// The name of the PowerBI Embedded. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the PowerBI Embedded should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Sets the PowerBI Embedded's pricing level's SKU. Possible values include: `A1`, `A2`, `A3`, `A4`, `A5`, `A6`.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewEmbedded registers a new resource with the given unique name, arguments, and options.
func NewEmbedded(ctx *pulumi.Context,
	name string, args *EmbeddedArgs, opts ...pulumi.ResourceOption) (*Embedded, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Administrators == nil {
		return nil, errors.New("invalid value for required argument 'Administrators'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Embedded
	err := ctx.RegisterResource("azure:powerbi/embedded:Embedded", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmbedded gets an existing Embedded resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmbedded(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmbeddedState, opts ...pulumi.ResourceOption) (*Embedded, error) {
	var resource Embedded
	err := ctx.ReadResource("azure:powerbi/embedded:Embedded", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Embedded resources.
type embeddedState struct {
	// A set of administrator user identities, which manages the Power BI Embedded and must be a member user or a service principal in your AAD tenant.
	Administrators []string `pulumi:"administrators"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Sets the PowerBI Embedded's mode. Possible values include: `Gen1`, `Gen2`. Defaults to `Gen1`. Changing this forces a new resource to be created.
	Mode *string `pulumi:"mode"`
	// The name of the PowerBI Embedded. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the PowerBI Embedded should be created. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Sets the PowerBI Embedded's pricing level's SKU. Possible values include: `A1`, `A2`, `A3`, `A4`, `A5`, `A6`.
	SkuName *string `pulumi:"skuName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type EmbeddedState struct {
	// A set of administrator user identities, which manages the Power BI Embedded and must be a member user or a service principal in your AAD tenant.
	Administrators pulumi.StringArrayInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Sets the PowerBI Embedded's mode. Possible values include: `Gen1`, `Gen2`. Defaults to `Gen1`. Changing this forces a new resource to be created.
	Mode pulumi.StringPtrInput
	// The name of the PowerBI Embedded. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the PowerBI Embedded should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Sets the PowerBI Embedded's pricing level's SKU. Possible values include: `A1`, `A2`, `A3`, `A4`, `A5`, `A6`.
	SkuName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (EmbeddedState) ElementType() reflect.Type {
	return reflect.TypeOf((*embeddedState)(nil)).Elem()
}

type embeddedArgs struct {
	// A set of administrator user identities, which manages the Power BI Embedded and must be a member user or a service principal in your AAD tenant.
	Administrators []string `pulumi:"administrators"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Sets the PowerBI Embedded's mode. Possible values include: `Gen1`, `Gen2`. Defaults to `Gen1`. Changing this forces a new resource to be created.
	Mode *string `pulumi:"mode"`
	// The name of the PowerBI Embedded. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the PowerBI Embedded should be created. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Sets the PowerBI Embedded's pricing level's SKU. Possible values include: `A1`, `A2`, `A3`, `A4`, `A5`, `A6`.
	SkuName string `pulumi:"skuName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Embedded resource.
type EmbeddedArgs struct {
	// A set of administrator user identities, which manages the Power BI Embedded and must be a member user or a service principal in your AAD tenant.
	Administrators pulumi.StringArrayInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Sets the PowerBI Embedded's mode. Possible values include: `Gen1`, `Gen2`. Defaults to `Gen1`. Changing this forces a new resource to be created.
	Mode pulumi.StringPtrInput
	// The name of the PowerBI Embedded. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the PowerBI Embedded should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Sets the PowerBI Embedded's pricing level's SKU. Possible values include: `A1`, `A2`, `A3`, `A4`, `A5`, `A6`.
	SkuName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (EmbeddedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*embeddedArgs)(nil)).Elem()
}

type EmbeddedInput interface {
	pulumi.Input

	ToEmbeddedOutput() EmbeddedOutput
	ToEmbeddedOutputWithContext(ctx context.Context) EmbeddedOutput
}

func (*Embedded) ElementType() reflect.Type {
	return reflect.TypeOf((**Embedded)(nil)).Elem()
}

func (i *Embedded) ToEmbeddedOutput() EmbeddedOutput {
	return i.ToEmbeddedOutputWithContext(context.Background())
}

func (i *Embedded) ToEmbeddedOutputWithContext(ctx context.Context) EmbeddedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmbeddedOutput)
}

// EmbeddedArrayInput is an input type that accepts EmbeddedArray and EmbeddedArrayOutput values.
// You can construct a concrete instance of `EmbeddedArrayInput` via:
//
//	EmbeddedArray{ EmbeddedArgs{...} }
type EmbeddedArrayInput interface {
	pulumi.Input

	ToEmbeddedArrayOutput() EmbeddedArrayOutput
	ToEmbeddedArrayOutputWithContext(context.Context) EmbeddedArrayOutput
}

type EmbeddedArray []EmbeddedInput

func (EmbeddedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Embedded)(nil)).Elem()
}

func (i EmbeddedArray) ToEmbeddedArrayOutput() EmbeddedArrayOutput {
	return i.ToEmbeddedArrayOutputWithContext(context.Background())
}

func (i EmbeddedArray) ToEmbeddedArrayOutputWithContext(ctx context.Context) EmbeddedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmbeddedArrayOutput)
}

// EmbeddedMapInput is an input type that accepts EmbeddedMap and EmbeddedMapOutput values.
// You can construct a concrete instance of `EmbeddedMapInput` via:
//
//	EmbeddedMap{ "key": EmbeddedArgs{...} }
type EmbeddedMapInput interface {
	pulumi.Input

	ToEmbeddedMapOutput() EmbeddedMapOutput
	ToEmbeddedMapOutputWithContext(context.Context) EmbeddedMapOutput
}

type EmbeddedMap map[string]EmbeddedInput

func (EmbeddedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Embedded)(nil)).Elem()
}

func (i EmbeddedMap) ToEmbeddedMapOutput() EmbeddedMapOutput {
	return i.ToEmbeddedMapOutputWithContext(context.Background())
}

func (i EmbeddedMap) ToEmbeddedMapOutputWithContext(ctx context.Context) EmbeddedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmbeddedMapOutput)
}

type EmbeddedOutput struct{ *pulumi.OutputState }

func (EmbeddedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Embedded)(nil)).Elem()
}

func (o EmbeddedOutput) ToEmbeddedOutput() EmbeddedOutput {
	return o
}

func (o EmbeddedOutput) ToEmbeddedOutputWithContext(ctx context.Context) EmbeddedOutput {
	return o
}

// A set of administrator user identities, which manages the Power BI Embedded and must be a member user or a service principal in your AAD tenant.
func (o EmbeddedOutput) Administrators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Embedded) pulumi.StringArrayOutput { return v.Administrators }).(pulumi.StringArrayOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o EmbeddedOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Embedded) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Sets the PowerBI Embedded's mode. Possible values include: `Gen1`, `Gen2`. Defaults to `Gen1`. Changing this forces a new resource to be created.
func (o EmbeddedOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Embedded) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name of the PowerBI Embedded. Changing this forces a new resource to be created.
func (o EmbeddedOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Embedded) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the PowerBI Embedded should be created. Changing this forces a new resource to be created.
func (o EmbeddedOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Embedded) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Sets the PowerBI Embedded's pricing level's SKU. Possible values include: `A1`, `A2`, `A3`, `A4`, `A5`, `A6`.
func (o EmbeddedOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v *Embedded) pulumi.StringOutput { return v.SkuName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o EmbeddedOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Embedded) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type EmbeddedArrayOutput struct{ *pulumi.OutputState }

func (EmbeddedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Embedded)(nil)).Elem()
}

func (o EmbeddedArrayOutput) ToEmbeddedArrayOutput() EmbeddedArrayOutput {
	return o
}

func (o EmbeddedArrayOutput) ToEmbeddedArrayOutputWithContext(ctx context.Context) EmbeddedArrayOutput {
	return o
}

func (o EmbeddedArrayOutput) Index(i pulumi.IntInput) EmbeddedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Embedded {
		return vs[0].([]*Embedded)[vs[1].(int)]
	}).(EmbeddedOutput)
}

type EmbeddedMapOutput struct{ *pulumi.OutputState }

func (EmbeddedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Embedded)(nil)).Elem()
}

func (o EmbeddedMapOutput) ToEmbeddedMapOutput() EmbeddedMapOutput {
	return o
}

func (o EmbeddedMapOutput) ToEmbeddedMapOutputWithContext(ctx context.Context) EmbeddedMapOutput {
	return o
}

func (o EmbeddedMapOutput) MapIndex(k pulumi.StringInput) EmbeddedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Embedded {
		return vs[0].(map[string]*Embedded)[vs[1].(string)]
	}).(EmbeddedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmbeddedInput)(nil)).Elem(), &Embedded{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmbeddedArrayInput)(nil)).Elem(), EmbeddedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmbeddedMapInput)(nil)).Elem(), EmbeddedMap{})
	pulumi.RegisterOutputType(EmbeddedOutput{})
	pulumi.RegisterOutputType(EmbeddedArrayOutput{})
	pulumi.RegisterOutputType(EmbeddedMapOutput{})
}
