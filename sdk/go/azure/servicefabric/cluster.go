// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicefabric

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Service Fabric Cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/servicefabric"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = servicefabric.NewCluster(ctx, "exampleCluster", &servicefabric.ClusterArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				Location:           exampleResourceGroup.Location,
//				ReliabilityLevel:   pulumi.String("Bronze"),
//				UpgradeMode:        pulumi.String("Manual"),
//				ClusterCodeVersion: pulumi.String("7.1.456.959"),
//				VmImage:            pulumi.String("Windows"),
//				ManagementEndpoint: pulumi.String("https://example:80"),
//				NodeTypes: servicefabric.ClusterNodeTypeArray{
//					&servicefabric.ClusterNodeTypeArgs{
//						Name:               pulumi.String("first"),
//						InstanceCount:      pulumi.Int(3),
//						IsPrimary:          pulumi.Bool(true),
//						ClientEndpointPort: pulumi.Int(2020),
//						HttpEndpointPort:   pulumi.Int(80),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Service Fabric Clusters can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:servicefabric/cluster:Cluster cluster1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ServiceFabric/clusters/cluster1
//
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// A List of one or more features which should be enabled, such as `DnsService`.
	AddOnFeatures pulumi.StringArrayOutput `pulumi:"addOnFeatures"`
	// An `azureActiveDirectory` block as defined below.
	AzureActiveDirectory ClusterAzureActiveDirectoryPtrOutput `pulumi:"azureActiveDirectory"`
	// A `certificate` block as defined below. Conflicts with `certificateCommonNames`.
	Certificate ClusterCertificatePtrOutput `pulumi:"certificate"`
	// A `certificateCommonNames` block as defined below. Conflicts with `certificate`.
	CertificateCommonNames ClusterCertificateCommonNamesPtrOutput `pulumi:"certificateCommonNames"`
	// A `clientCertificateCommonName` block as defined below.
	//
	// > **NOTE:** If Client Certificates are enabled then at a Certificate must be configured on the cluster.
	ClientCertificateCommonNames ClusterClientCertificateCommonNameArrayOutput `pulumi:"clientCertificateCommonNames"`
	// One or more `clientCertificateThumbprint` blocks as defined below.
	ClientCertificateThumbprints ClusterClientCertificateThumbprintArrayOutput `pulumi:"clientCertificateThumbprints"`
	// Required if Upgrade Mode set to `Manual`, Specifies the Version of the Cluster Code of the cluster.
	ClusterCodeVersion pulumi.StringOutput `pulumi:"clusterCodeVersion"`
	// The Cluster Endpoint for this Service Fabric Cluster.
	ClusterEndpoint pulumi.StringOutput `pulumi:"clusterEndpoint"`
	// A `diagnosticsConfig` block as defined below.
	DiagnosticsConfig ClusterDiagnosticsConfigPtrOutput `pulumi:"diagnosticsConfig"`
	// One or more `fabricSettings` blocks as defined below.
	FabricSettings ClusterFabricSettingArrayOutput `pulumi:"fabricSettings"`
	// Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the Management Endpoint of the cluster such as `http://example.com`. Changing this forces a new resource to be created.
	ManagementEndpoint pulumi.StringOutput `pulumi:"managementEndpoint"`
	// The name of the Service Fabric Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `nodeType` blocks as defined below.
	NodeTypes ClusterNodeTypeArrayOutput `pulumi:"nodeTypes"`
	// Specifies the Reliability Level of the Cluster. Possible values include `None`, `Bronze`, `Silver`, `Gold` and `Platinum`.
	//
	// > **NOTE:** The Reliability Level of the Cluster depends on the number of nodes in the Cluster: `Platinum` requires at least 9 VM's, `Gold` requires at least 7 VM's, `Silver` requires at least 5 VM's, `Bronze` requires at least 3 VM's.
	ReliabilityLevel pulumi.StringOutput `pulumi:"reliabilityLevel"`
	// The name of the Resource Group in which the Service Fabric Cluster exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `reverseProxyCertificate` block as defined below. Conflicts with `reverseProxyCertificateCommonNames`.
	ReverseProxyCertificate ClusterReverseProxyCertificatePtrOutput `pulumi:"reverseProxyCertificate"`
	// A `reverseProxyCertificateCommonNames` block as defined below. Conflicts with `reverseProxyCertificate`.
	ReverseProxyCertificateCommonNames ClusterReverseProxyCertificateCommonNamesPtrOutput `pulumi:"reverseProxyCertificateCommonNames"`
	// Specifies the logical grouping of VMs in upgrade domains. Possible values are `Hierarchical` or `Parallel`.
	ServiceFabricZonalUpgradeMode pulumi.StringPtrOutput `pulumi:"serviceFabricZonalUpgradeMode"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the Upgrade Mode of the cluster. Possible values are `Automatic` or `Manual`.
	UpgradeMode pulumi.StringOutput `pulumi:"upgradeMode"`
	// A `upgradePolicy` block as defined below.
	UpgradePolicy ClusterUpgradePolicyPtrOutput `pulumi:"upgradePolicy"`
	// Specifies the Image expected for the Service Fabric Cluster, such as `Windows`. Changing this forces a new resource to be created.
	VmImage pulumi.StringOutput `pulumi:"vmImage"`
	// Specifies the upgrade mode for the virtual machine scale set updates that happen in all availability zones at once. Possible values are `Hierarchical` or `Parallel`.
	VmssZonalUpgradeMode pulumi.StringPtrOutput `pulumi:"vmssZonalUpgradeMode"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagementEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'ManagementEndpoint'")
	}
	if args.NodeTypes == nil {
		return nil, errors.New("invalid value for required argument 'NodeTypes'")
	}
	if args.ReliabilityLevel == nil {
		return nil, errors.New("invalid value for required argument 'ReliabilityLevel'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.UpgradeMode == nil {
		return nil, errors.New("invalid value for required argument 'UpgradeMode'")
	}
	if args.VmImage == nil {
		return nil, errors.New("invalid value for required argument 'VmImage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("azure:servicefabric/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("azure:servicefabric/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// A List of one or more features which should be enabled, such as `DnsService`.
	AddOnFeatures []string `pulumi:"addOnFeatures"`
	// An `azureActiveDirectory` block as defined below.
	AzureActiveDirectory *ClusterAzureActiveDirectory `pulumi:"azureActiveDirectory"`
	// A `certificate` block as defined below. Conflicts with `certificateCommonNames`.
	Certificate *ClusterCertificate `pulumi:"certificate"`
	// A `certificateCommonNames` block as defined below. Conflicts with `certificate`.
	CertificateCommonNames *ClusterCertificateCommonNames `pulumi:"certificateCommonNames"`
	// A `clientCertificateCommonName` block as defined below.
	//
	// > **NOTE:** If Client Certificates are enabled then at a Certificate must be configured on the cluster.
	ClientCertificateCommonNames []ClusterClientCertificateCommonName `pulumi:"clientCertificateCommonNames"`
	// One or more `clientCertificateThumbprint` blocks as defined below.
	ClientCertificateThumbprints []ClusterClientCertificateThumbprint `pulumi:"clientCertificateThumbprints"`
	// Required if Upgrade Mode set to `Manual`, Specifies the Version of the Cluster Code of the cluster.
	ClusterCodeVersion *string `pulumi:"clusterCodeVersion"`
	// The Cluster Endpoint for this Service Fabric Cluster.
	ClusterEndpoint *string `pulumi:"clusterEndpoint"`
	// A `diagnosticsConfig` block as defined below.
	DiagnosticsConfig *ClusterDiagnosticsConfig `pulumi:"diagnosticsConfig"`
	// One or more `fabricSettings` blocks as defined below.
	FabricSettings []ClusterFabricSetting `pulumi:"fabricSettings"`
	// Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the Management Endpoint of the cluster such as `http://example.com`. Changing this forces a new resource to be created.
	ManagementEndpoint *string `pulumi:"managementEndpoint"`
	// The name of the Service Fabric Cluster. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// One or more `nodeType` blocks as defined below.
	NodeTypes []ClusterNodeType `pulumi:"nodeTypes"`
	// Specifies the Reliability Level of the Cluster. Possible values include `None`, `Bronze`, `Silver`, `Gold` and `Platinum`.
	//
	// > **NOTE:** The Reliability Level of the Cluster depends on the number of nodes in the Cluster: `Platinum` requires at least 9 VM's, `Gold` requires at least 7 VM's, `Silver` requires at least 5 VM's, `Bronze` requires at least 3 VM's.
	ReliabilityLevel *string `pulumi:"reliabilityLevel"`
	// The name of the Resource Group in which the Service Fabric Cluster exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `reverseProxyCertificate` block as defined below. Conflicts with `reverseProxyCertificateCommonNames`.
	ReverseProxyCertificate *ClusterReverseProxyCertificate `pulumi:"reverseProxyCertificate"`
	// A `reverseProxyCertificateCommonNames` block as defined below. Conflicts with `reverseProxyCertificate`.
	ReverseProxyCertificateCommonNames *ClusterReverseProxyCertificateCommonNames `pulumi:"reverseProxyCertificateCommonNames"`
	// Specifies the logical grouping of VMs in upgrade domains. Possible values are `Hierarchical` or `Parallel`.
	ServiceFabricZonalUpgradeMode *string `pulumi:"serviceFabricZonalUpgradeMode"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the Upgrade Mode of the cluster. Possible values are `Automatic` or `Manual`.
	UpgradeMode *string `pulumi:"upgradeMode"`
	// A `upgradePolicy` block as defined below.
	UpgradePolicy *ClusterUpgradePolicy `pulumi:"upgradePolicy"`
	// Specifies the Image expected for the Service Fabric Cluster, such as `Windows`. Changing this forces a new resource to be created.
	VmImage *string `pulumi:"vmImage"`
	// Specifies the upgrade mode for the virtual machine scale set updates that happen in all availability zones at once. Possible values are `Hierarchical` or `Parallel`.
	VmssZonalUpgradeMode *string `pulumi:"vmssZonalUpgradeMode"`
}

type ClusterState struct {
	// A List of one or more features which should be enabled, such as `DnsService`.
	AddOnFeatures pulumi.StringArrayInput
	// An `azureActiveDirectory` block as defined below.
	AzureActiveDirectory ClusterAzureActiveDirectoryPtrInput
	// A `certificate` block as defined below. Conflicts with `certificateCommonNames`.
	Certificate ClusterCertificatePtrInput
	// A `certificateCommonNames` block as defined below. Conflicts with `certificate`.
	CertificateCommonNames ClusterCertificateCommonNamesPtrInput
	// A `clientCertificateCommonName` block as defined below.
	//
	// > **NOTE:** If Client Certificates are enabled then at a Certificate must be configured on the cluster.
	ClientCertificateCommonNames ClusterClientCertificateCommonNameArrayInput
	// One or more `clientCertificateThumbprint` blocks as defined below.
	ClientCertificateThumbprints ClusterClientCertificateThumbprintArrayInput
	// Required if Upgrade Mode set to `Manual`, Specifies the Version of the Cluster Code of the cluster.
	ClusterCodeVersion pulumi.StringPtrInput
	// The Cluster Endpoint for this Service Fabric Cluster.
	ClusterEndpoint pulumi.StringPtrInput
	// A `diagnosticsConfig` block as defined below.
	DiagnosticsConfig ClusterDiagnosticsConfigPtrInput
	// One or more `fabricSettings` blocks as defined below.
	FabricSettings ClusterFabricSettingArrayInput
	// Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the Management Endpoint of the cluster such as `http://example.com`. Changing this forces a new resource to be created.
	ManagementEndpoint pulumi.StringPtrInput
	// The name of the Service Fabric Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// One or more `nodeType` blocks as defined below.
	NodeTypes ClusterNodeTypeArrayInput
	// Specifies the Reliability Level of the Cluster. Possible values include `None`, `Bronze`, `Silver`, `Gold` and `Platinum`.
	//
	// > **NOTE:** The Reliability Level of the Cluster depends on the number of nodes in the Cluster: `Platinum` requires at least 9 VM's, `Gold` requires at least 7 VM's, `Silver` requires at least 5 VM's, `Bronze` requires at least 3 VM's.
	ReliabilityLevel pulumi.StringPtrInput
	// The name of the Resource Group in which the Service Fabric Cluster exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `reverseProxyCertificate` block as defined below. Conflicts with `reverseProxyCertificateCommonNames`.
	ReverseProxyCertificate ClusterReverseProxyCertificatePtrInput
	// A `reverseProxyCertificateCommonNames` block as defined below. Conflicts with `reverseProxyCertificate`.
	ReverseProxyCertificateCommonNames ClusterReverseProxyCertificateCommonNamesPtrInput
	// Specifies the logical grouping of VMs in upgrade domains. Possible values are `Hierarchical` or `Parallel`.
	ServiceFabricZonalUpgradeMode pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Specifies the Upgrade Mode of the cluster. Possible values are `Automatic` or `Manual`.
	UpgradeMode pulumi.StringPtrInput
	// A `upgradePolicy` block as defined below.
	UpgradePolicy ClusterUpgradePolicyPtrInput
	// Specifies the Image expected for the Service Fabric Cluster, such as `Windows`. Changing this forces a new resource to be created.
	VmImage pulumi.StringPtrInput
	// Specifies the upgrade mode for the virtual machine scale set updates that happen in all availability zones at once. Possible values are `Hierarchical` or `Parallel`.
	VmssZonalUpgradeMode pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// A List of one or more features which should be enabled, such as `DnsService`.
	AddOnFeatures []string `pulumi:"addOnFeatures"`
	// An `azureActiveDirectory` block as defined below.
	AzureActiveDirectory *ClusterAzureActiveDirectory `pulumi:"azureActiveDirectory"`
	// A `certificate` block as defined below. Conflicts with `certificateCommonNames`.
	Certificate *ClusterCertificate `pulumi:"certificate"`
	// A `certificateCommonNames` block as defined below. Conflicts with `certificate`.
	CertificateCommonNames *ClusterCertificateCommonNames `pulumi:"certificateCommonNames"`
	// A `clientCertificateCommonName` block as defined below.
	//
	// > **NOTE:** If Client Certificates are enabled then at a Certificate must be configured on the cluster.
	ClientCertificateCommonNames []ClusterClientCertificateCommonName `pulumi:"clientCertificateCommonNames"`
	// One or more `clientCertificateThumbprint` blocks as defined below.
	ClientCertificateThumbprints []ClusterClientCertificateThumbprint `pulumi:"clientCertificateThumbprints"`
	// Required if Upgrade Mode set to `Manual`, Specifies the Version of the Cluster Code of the cluster.
	ClusterCodeVersion *string `pulumi:"clusterCodeVersion"`
	// A `diagnosticsConfig` block as defined below.
	DiagnosticsConfig *ClusterDiagnosticsConfig `pulumi:"diagnosticsConfig"`
	// One or more `fabricSettings` blocks as defined below.
	FabricSettings []ClusterFabricSetting `pulumi:"fabricSettings"`
	// Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the Management Endpoint of the cluster such as `http://example.com`. Changing this forces a new resource to be created.
	ManagementEndpoint string `pulumi:"managementEndpoint"`
	// The name of the Service Fabric Cluster. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// One or more `nodeType` blocks as defined below.
	NodeTypes []ClusterNodeType `pulumi:"nodeTypes"`
	// Specifies the Reliability Level of the Cluster. Possible values include `None`, `Bronze`, `Silver`, `Gold` and `Platinum`.
	//
	// > **NOTE:** The Reliability Level of the Cluster depends on the number of nodes in the Cluster: `Platinum` requires at least 9 VM's, `Gold` requires at least 7 VM's, `Silver` requires at least 5 VM's, `Bronze` requires at least 3 VM's.
	ReliabilityLevel string `pulumi:"reliabilityLevel"`
	// The name of the Resource Group in which the Service Fabric Cluster exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `reverseProxyCertificate` block as defined below. Conflicts with `reverseProxyCertificateCommonNames`.
	ReverseProxyCertificate *ClusterReverseProxyCertificate `pulumi:"reverseProxyCertificate"`
	// A `reverseProxyCertificateCommonNames` block as defined below. Conflicts with `reverseProxyCertificate`.
	ReverseProxyCertificateCommonNames *ClusterReverseProxyCertificateCommonNames `pulumi:"reverseProxyCertificateCommonNames"`
	// Specifies the logical grouping of VMs in upgrade domains. Possible values are `Hierarchical` or `Parallel`.
	ServiceFabricZonalUpgradeMode *string `pulumi:"serviceFabricZonalUpgradeMode"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the Upgrade Mode of the cluster. Possible values are `Automatic` or `Manual`.
	UpgradeMode string `pulumi:"upgradeMode"`
	// A `upgradePolicy` block as defined below.
	UpgradePolicy *ClusterUpgradePolicy `pulumi:"upgradePolicy"`
	// Specifies the Image expected for the Service Fabric Cluster, such as `Windows`. Changing this forces a new resource to be created.
	VmImage string `pulumi:"vmImage"`
	// Specifies the upgrade mode for the virtual machine scale set updates that happen in all availability zones at once. Possible values are `Hierarchical` or `Parallel`.
	VmssZonalUpgradeMode *string `pulumi:"vmssZonalUpgradeMode"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// A List of one or more features which should be enabled, such as `DnsService`.
	AddOnFeatures pulumi.StringArrayInput
	// An `azureActiveDirectory` block as defined below.
	AzureActiveDirectory ClusterAzureActiveDirectoryPtrInput
	// A `certificate` block as defined below. Conflicts with `certificateCommonNames`.
	Certificate ClusterCertificatePtrInput
	// A `certificateCommonNames` block as defined below. Conflicts with `certificate`.
	CertificateCommonNames ClusterCertificateCommonNamesPtrInput
	// A `clientCertificateCommonName` block as defined below.
	//
	// > **NOTE:** If Client Certificates are enabled then at a Certificate must be configured on the cluster.
	ClientCertificateCommonNames ClusterClientCertificateCommonNameArrayInput
	// One or more `clientCertificateThumbprint` blocks as defined below.
	ClientCertificateThumbprints ClusterClientCertificateThumbprintArrayInput
	// Required if Upgrade Mode set to `Manual`, Specifies the Version of the Cluster Code of the cluster.
	ClusterCodeVersion pulumi.StringPtrInput
	// A `diagnosticsConfig` block as defined below.
	DiagnosticsConfig ClusterDiagnosticsConfigPtrInput
	// One or more `fabricSettings` blocks as defined below.
	FabricSettings ClusterFabricSettingArrayInput
	// Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the Management Endpoint of the cluster such as `http://example.com`. Changing this forces a new resource to be created.
	ManagementEndpoint pulumi.StringInput
	// The name of the Service Fabric Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// One or more `nodeType` blocks as defined below.
	NodeTypes ClusterNodeTypeArrayInput
	// Specifies the Reliability Level of the Cluster. Possible values include `None`, `Bronze`, `Silver`, `Gold` and `Platinum`.
	//
	// > **NOTE:** The Reliability Level of the Cluster depends on the number of nodes in the Cluster: `Platinum` requires at least 9 VM's, `Gold` requires at least 7 VM's, `Silver` requires at least 5 VM's, `Bronze` requires at least 3 VM's.
	ReliabilityLevel pulumi.StringInput
	// The name of the Resource Group in which the Service Fabric Cluster exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `reverseProxyCertificate` block as defined below. Conflicts with `reverseProxyCertificateCommonNames`.
	ReverseProxyCertificate ClusterReverseProxyCertificatePtrInput
	// A `reverseProxyCertificateCommonNames` block as defined below. Conflicts with `reverseProxyCertificate`.
	ReverseProxyCertificateCommonNames ClusterReverseProxyCertificateCommonNamesPtrInput
	// Specifies the logical grouping of VMs in upgrade domains. Possible values are `Hierarchical` or `Parallel`.
	ServiceFabricZonalUpgradeMode pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Specifies the Upgrade Mode of the cluster. Possible values are `Automatic` or `Manual`.
	UpgradeMode pulumi.StringInput
	// A `upgradePolicy` block as defined below.
	UpgradePolicy ClusterUpgradePolicyPtrInput
	// Specifies the Image expected for the Service Fabric Cluster, such as `Windows`. Changing this forces a new resource to be created.
	VmImage pulumi.StringInput
	// Specifies the upgrade mode for the virtual machine scale set updates that happen in all availability zones at once. Possible values are `Hierarchical` or `Parallel`.
	VmssZonalUpgradeMode pulumi.StringPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// A List of one or more features which should be enabled, such as `DnsService`.
func (o ClusterOutput) AddOnFeatures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.AddOnFeatures }).(pulumi.StringArrayOutput)
}

// An `azureActiveDirectory` block as defined below.
func (o ClusterOutput) AzureActiveDirectory() ClusterAzureActiveDirectoryPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAzureActiveDirectoryPtrOutput { return v.AzureActiveDirectory }).(ClusterAzureActiveDirectoryPtrOutput)
}

// A `certificate` block as defined below. Conflicts with `certificateCommonNames`.
func (o ClusterOutput) Certificate() ClusterCertificatePtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterCertificatePtrOutput { return v.Certificate }).(ClusterCertificatePtrOutput)
}

// A `certificateCommonNames` block as defined below. Conflicts with `certificate`.
func (o ClusterOutput) CertificateCommonNames() ClusterCertificateCommonNamesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterCertificateCommonNamesPtrOutput { return v.CertificateCommonNames }).(ClusterCertificateCommonNamesPtrOutput)
}

// A `clientCertificateCommonName` block as defined below.
//
// > **NOTE:** If Client Certificates are enabled then at a Certificate must be configured on the cluster.
func (o ClusterOutput) ClientCertificateCommonNames() ClusterClientCertificateCommonNameArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterClientCertificateCommonNameArrayOutput { return v.ClientCertificateCommonNames }).(ClusterClientCertificateCommonNameArrayOutput)
}

// One or more `clientCertificateThumbprint` blocks as defined below.
func (o ClusterOutput) ClientCertificateThumbprints() ClusterClientCertificateThumbprintArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterClientCertificateThumbprintArrayOutput { return v.ClientCertificateThumbprints }).(ClusterClientCertificateThumbprintArrayOutput)
}

// Required if Upgrade Mode set to `Manual`, Specifies the Version of the Cluster Code of the cluster.
func (o ClusterOutput) ClusterCodeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterCodeVersion }).(pulumi.StringOutput)
}

// The Cluster Endpoint for this Service Fabric Cluster.
func (o ClusterOutput) ClusterEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterEndpoint }).(pulumi.StringOutput)
}

// A `diagnosticsConfig` block as defined below.
func (o ClusterOutput) DiagnosticsConfig() ClusterDiagnosticsConfigPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterDiagnosticsConfigPtrOutput { return v.DiagnosticsConfig }).(ClusterDiagnosticsConfigPtrOutput)
}

// One or more `fabricSettings` blocks as defined below.
func (o ClusterOutput) FabricSettings() ClusterFabricSettingArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterFabricSettingArrayOutput { return v.FabricSettings }).(ClusterFabricSettingArrayOutput)
}

// Specifies the Azure Region where the Service Fabric Cluster should exist. Changing this forces a new resource to be created.
func (o ClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the Management Endpoint of the cluster such as `http://example.com`. Changing this forces a new resource to be created.
func (o ClusterOutput) ManagementEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ManagementEndpoint }).(pulumi.StringOutput)
}

// The name of the Service Fabric Cluster. Changing this forces a new resource to be created.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One or more `nodeType` blocks as defined below.
func (o ClusterOutput) NodeTypes() ClusterNodeTypeArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterNodeTypeArrayOutput { return v.NodeTypes }).(ClusterNodeTypeArrayOutput)
}

// Specifies the Reliability Level of the Cluster. Possible values include `None`, `Bronze`, `Silver`, `Gold` and `Platinum`.
//
// > **NOTE:** The Reliability Level of the Cluster depends on the number of nodes in the Cluster: `Platinum` requires at least 9 VM's, `Gold` requires at least 7 VM's, `Silver` requires at least 5 VM's, `Bronze` requires at least 3 VM's.
func (o ClusterOutput) ReliabilityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ReliabilityLevel }).(pulumi.StringOutput)
}

// The name of the Resource Group in which the Service Fabric Cluster exists. Changing this forces a new resource to be created.
func (o ClusterOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `reverseProxyCertificate` block as defined below. Conflicts with `reverseProxyCertificateCommonNames`.
func (o ClusterOutput) ReverseProxyCertificate() ClusterReverseProxyCertificatePtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterReverseProxyCertificatePtrOutput { return v.ReverseProxyCertificate }).(ClusterReverseProxyCertificatePtrOutput)
}

// A `reverseProxyCertificateCommonNames` block as defined below. Conflicts with `reverseProxyCertificate`.
func (o ClusterOutput) ReverseProxyCertificateCommonNames() ClusterReverseProxyCertificateCommonNamesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterReverseProxyCertificateCommonNamesPtrOutput {
		return v.ReverseProxyCertificateCommonNames
	}).(ClusterReverseProxyCertificateCommonNamesPtrOutput)
}

// Specifies the logical grouping of VMs in upgrade domains. Possible values are `Hierarchical` or `Parallel`.
func (o ClusterOutput) ServiceFabricZonalUpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ServiceFabricZonalUpgradeMode }).(pulumi.StringPtrOutput)
}

// A mapping of tags to assign to the resource.
func (o ClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the Upgrade Mode of the cluster. Possible values are `Automatic` or `Manual`.
func (o ClusterOutput) UpgradeMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.UpgradeMode }).(pulumi.StringOutput)
}

// A `upgradePolicy` block as defined below.
func (o ClusterOutput) UpgradePolicy() ClusterUpgradePolicyPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterUpgradePolicyPtrOutput { return v.UpgradePolicy }).(ClusterUpgradePolicyPtrOutput)
}

// Specifies the Image expected for the Service Fabric Cluster, such as `Windows`. Changing this forces a new resource to be created.
func (o ClusterOutput) VmImage() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VmImage }).(pulumi.StringOutput)
}

// Specifies the upgrade mode for the virtual machine scale set updates that happen in all availability zones at once. Possible values are `Hierarchical` or `Parallel`.
func (o ClusterOutput) VmssZonalUpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.VmssZonalUpgradeMode }).(pulumi.StringPtrOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
