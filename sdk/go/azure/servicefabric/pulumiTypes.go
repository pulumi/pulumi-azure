// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicefabric

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClusterAzureActiveDirectory struct {
	// The Azure Active Directory Client ID which should be used for the Client Application.
	ClientApplicationId string `pulumi:"clientApplicationId"`
	// The Azure Active Directory Cluster Application ID.
	ClusterApplicationId string `pulumi:"clusterApplicationId"`
	// The Azure Active Directory Tenant ID.
	TenantId string `pulumi:"tenantId"`
}

// ClusterAzureActiveDirectoryInput is an input type that accepts ClusterAzureActiveDirectoryArgs and ClusterAzureActiveDirectoryOutput values.
// You can construct a concrete instance of `ClusterAzureActiveDirectoryInput` via:
//
//          ClusterAzureActiveDirectoryArgs{...}
type ClusterAzureActiveDirectoryInput interface {
	pulumi.Input

	ToClusterAzureActiveDirectoryOutput() ClusterAzureActiveDirectoryOutput
	ToClusterAzureActiveDirectoryOutputWithContext(context.Context) ClusterAzureActiveDirectoryOutput
}

type ClusterAzureActiveDirectoryArgs struct {
	// The Azure Active Directory Client ID which should be used for the Client Application.
	ClientApplicationId pulumi.StringInput `pulumi:"clientApplicationId"`
	// The Azure Active Directory Cluster Application ID.
	ClusterApplicationId pulumi.StringInput `pulumi:"clusterApplicationId"`
	// The Azure Active Directory Tenant ID.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (ClusterAzureActiveDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAzureActiveDirectory)(nil)).Elem()
}

func (i ClusterAzureActiveDirectoryArgs) ToClusterAzureActiveDirectoryOutput() ClusterAzureActiveDirectoryOutput {
	return i.ToClusterAzureActiveDirectoryOutputWithContext(context.Background())
}

func (i ClusterAzureActiveDirectoryArgs) ToClusterAzureActiveDirectoryOutputWithContext(ctx context.Context) ClusterAzureActiveDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAzureActiveDirectoryOutput)
}

func (i ClusterAzureActiveDirectoryArgs) ToClusterAzureActiveDirectoryPtrOutput() ClusterAzureActiveDirectoryPtrOutput {
	return i.ToClusterAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i ClusterAzureActiveDirectoryArgs) ToClusterAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) ClusterAzureActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAzureActiveDirectoryOutput).ToClusterAzureActiveDirectoryPtrOutputWithContext(ctx)
}

// ClusterAzureActiveDirectoryPtrInput is an input type that accepts ClusterAzureActiveDirectoryArgs, ClusterAzureActiveDirectoryPtr and ClusterAzureActiveDirectoryPtrOutput values.
// You can construct a concrete instance of `ClusterAzureActiveDirectoryPtrInput` via:
//
//          ClusterAzureActiveDirectoryArgs{...}
//
//  or:
//
//          nil
type ClusterAzureActiveDirectoryPtrInput interface {
	pulumi.Input

	ToClusterAzureActiveDirectoryPtrOutput() ClusterAzureActiveDirectoryPtrOutput
	ToClusterAzureActiveDirectoryPtrOutputWithContext(context.Context) ClusterAzureActiveDirectoryPtrOutput
}

type clusterAzureActiveDirectoryPtrType ClusterAzureActiveDirectoryArgs

func ClusterAzureActiveDirectoryPtr(v *ClusterAzureActiveDirectoryArgs) ClusterAzureActiveDirectoryPtrInput {
	return (*clusterAzureActiveDirectoryPtrType)(v)
}

func (*clusterAzureActiveDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAzureActiveDirectory)(nil)).Elem()
}

func (i *clusterAzureActiveDirectoryPtrType) ToClusterAzureActiveDirectoryPtrOutput() ClusterAzureActiveDirectoryPtrOutput {
	return i.ToClusterAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i *clusterAzureActiveDirectoryPtrType) ToClusterAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) ClusterAzureActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAzureActiveDirectoryPtrOutput)
}

type ClusterAzureActiveDirectoryOutput struct{ *pulumi.OutputState }

func (ClusterAzureActiveDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAzureActiveDirectory)(nil)).Elem()
}

func (o ClusterAzureActiveDirectoryOutput) ToClusterAzureActiveDirectoryOutput() ClusterAzureActiveDirectoryOutput {
	return o
}

func (o ClusterAzureActiveDirectoryOutput) ToClusterAzureActiveDirectoryOutputWithContext(ctx context.Context) ClusterAzureActiveDirectoryOutput {
	return o
}

func (o ClusterAzureActiveDirectoryOutput) ToClusterAzureActiveDirectoryPtrOutput() ClusterAzureActiveDirectoryPtrOutput {
	return o.ToClusterAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (o ClusterAzureActiveDirectoryOutput) ToClusterAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) ClusterAzureActiveDirectoryPtrOutput {
	return o.ApplyT(func(v ClusterAzureActiveDirectory) *ClusterAzureActiveDirectory {
		return &v
	}).(ClusterAzureActiveDirectoryPtrOutput)
}

// The Azure Active Directory Client ID which should be used for the Client Application.
func (o ClusterAzureActiveDirectoryOutput) ClientApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAzureActiveDirectory) string { return v.ClientApplicationId }).(pulumi.StringOutput)
}

// The Azure Active Directory Cluster Application ID.
func (o ClusterAzureActiveDirectoryOutput) ClusterApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAzureActiveDirectory) string { return v.ClusterApplicationId }).(pulumi.StringOutput)
}

// The Azure Active Directory Tenant ID.
func (o ClusterAzureActiveDirectoryOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAzureActiveDirectory) string { return v.TenantId }).(pulumi.StringOutput)
}

type ClusterAzureActiveDirectoryPtrOutput struct{ *pulumi.OutputState }

func (ClusterAzureActiveDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAzureActiveDirectory)(nil)).Elem()
}

func (o ClusterAzureActiveDirectoryPtrOutput) ToClusterAzureActiveDirectoryPtrOutput() ClusterAzureActiveDirectoryPtrOutput {
	return o
}

func (o ClusterAzureActiveDirectoryPtrOutput) ToClusterAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) ClusterAzureActiveDirectoryPtrOutput {
	return o
}

func (o ClusterAzureActiveDirectoryPtrOutput) Elem() ClusterAzureActiveDirectoryOutput {
	return o.ApplyT(func(v *ClusterAzureActiveDirectory) ClusterAzureActiveDirectory { return *v }).(ClusterAzureActiveDirectoryOutput)
}

// The Azure Active Directory Client ID which should be used for the Client Application.
func (o ClusterAzureActiveDirectoryPtrOutput) ClientApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterAzureActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return &v.ClientApplicationId
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Cluster Application ID.
func (o ClusterAzureActiveDirectoryPtrOutput) ClusterApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterAzureActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterApplicationId
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID.
func (o ClusterAzureActiveDirectoryPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterAzureActiveDirectory) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

type ClusterCertificate struct {
	// The Thumbprint of the Certificate.
	Thumbprint string `pulumi:"thumbprint"`
	// The Secondary Thumbprint of the Certificate.
	ThumbprintSecondary *string `pulumi:"thumbprintSecondary"`
	// The X509 Store where the Certificate Exists, such as `My`.
	X509StoreName string `pulumi:"x509StoreName"`
}

// ClusterCertificateInput is an input type that accepts ClusterCertificateArgs and ClusterCertificateOutput values.
// You can construct a concrete instance of `ClusterCertificateInput` via:
//
//          ClusterCertificateArgs{...}
type ClusterCertificateInput interface {
	pulumi.Input

	ToClusterCertificateOutput() ClusterCertificateOutput
	ToClusterCertificateOutputWithContext(context.Context) ClusterCertificateOutput
}

type ClusterCertificateArgs struct {
	// The Thumbprint of the Certificate.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
	// The Secondary Thumbprint of the Certificate.
	ThumbprintSecondary pulumi.StringPtrInput `pulumi:"thumbprintSecondary"`
	// The X509 Store where the Certificate Exists, such as `My`.
	X509StoreName pulumi.StringInput `pulumi:"x509StoreName"`
}

func (ClusterCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificate)(nil)).Elem()
}

func (i ClusterCertificateArgs) ToClusterCertificateOutput() ClusterCertificateOutput {
	return i.ToClusterCertificateOutputWithContext(context.Background())
}

func (i ClusterCertificateArgs) ToClusterCertificateOutputWithContext(ctx context.Context) ClusterCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateOutput)
}

func (i ClusterCertificateArgs) ToClusterCertificatePtrOutput() ClusterCertificatePtrOutput {
	return i.ToClusterCertificatePtrOutputWithContext(context.Background())
}

func (i ClusterCertificateArgs) ToClusterCertificatePtrOutputWithContext(ctx context.Context) ClusterCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateOutput).ToClusterCertificatePtrOutputWithContext(ctx)
}

// ClusterCertificatePtrInput is an input type that accepts ClusterCertificateArgs, ClusterCertificatePtr and ClusterCertificatePtrOutput values.
// You can construct a concrete instance of `ClusterCertificatePtrInput` via:
//
//          ClusterCertificateArgs{...}
//
//  or:
//
//          nil
type ClusterCertificatePtrInput interface {
	pulumi.Input

	ToClusterCertificatePtrOutput() ClusterCertificatePtrOutput
	ToClusterCertificatePtrOutputWithContext(context.Context) ClusterCertificatePtrOutput
}

type clusterCertificatePtrType ClusterCertificateArgs

func ClusterCertificatePtr(v *ClusterCertificateArgs) ClusterCertificatePtrInput {
	return (*clusterCertificatePtrType)(v)
}

func (*clusterCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCertificate)(nil)).Elem()
}

func (i *clusterCertificatePtrType) ToClusterCertificatePtrOutput() ClusterCertificatePtrOutput {
	return i.ToClusterCertificatePtrOutputWithContext(context.Background())
}

func (i *clusterCertificatePtrType) ToClusterCertificatePtrOutputWithContext(ctx context.Context) ClusterCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificatePtrOutput)
}

type ClusterCertificateOutput struct{ *pulumi.OutputState }

func (ClusterCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificate)(nil)).Elem()
}

func (o ClusterCertificateOutput) ToClusterCertificateOutput() ClusterCertificateOutput {
	return o
}

func (o ClusterCertificateOutput) ToClusterCertificateOutputWithContext(ctx context.Context) ClusterCertificateOutput {
	return o
}

func (o ClusterCertificateOutput) ToClusterCertificatePtrOutput() ClusterCertificatePtrOutput {
	return o.ToClusterCertificatePtrOutputWithContext(context.Background())
}

func (o ClusterCertificateOutput) ToClusterCertificatePtrOutputWithContext(ctx context.Context) ClusterCertificatePtrOutput {
	return o.ApplyT(func(v ClusterCertificate) *ClusterCertificate {
		return &v
	}).(ClusterCertificatePtrOutput)
}

// The Thumbprint of the Certificate.
func (o ClusterCertificateOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCertificate) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// The Secondary Thumbprint of the Certificate.
func (o ClusterCertificateOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificate) *string { return v.ThumbprintSecondary }).(pulumi.StringPtrOutput)
}

// The X509 Store where the Certificate Exists, such as `My`.
func (o ClusterCertificateOutput) X509StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCertificate) string { return v.X509StoreName }).(pulumi.StringOutput)
}

type ClusterCertificatePtrOutput struct{ *pulumi.OutputState }

func (ClusterCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCertificate)(nil)).Elem()
}

func (o ClusterCertificatePtrOutput) ToClusterCertificatePtrOutput() ClusterCertificatePtrOutput {
	return o
}

func (o ClusterCertificatePtrOutput) ToClusterCertificatePtrOutputWithContext(ctx context.Context) ClusterCertificatePtrOutput {
	return o
}

func (o ClusterCertificatePtrOutput) Elem() ClusterCertificateOutput {
	return o.ApplyT(func(v *ClusterCertificate) ClusterCertificate { return *v }).(ClusterCertificateOutput)
}

// The Thumbprint of the Certificate.
func (o ClusterCertificatePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCertificate) *string {
		if v == nil {
			return nil
		}
		return &v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// The Secondary Thumbprint of the Certificate.
func (o ClusterCertificatePtrOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCertificate) *string {
		if v == nil {
			return nil
		}
		return v.ThumbprintSecondary
	}).(pulumi.StringPtrOutput)
}

// The X509 Store where the Certificate Exists, such as `My`.
func (o ClusterCertificatePtrOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCertificate) *string {
		if v == nil {
			return nil
		}
		return &v.X509StoreName
	}).(pulumi.StringPtrOutput)
}

type ClusterCertificateCommonNames struct {
	// A `commonNames` block as defined below.
	CommonNames []ClusterCertificateCommonNamesCommonName `pulumi:"commonNames"`
	// The X509 Store where the Certificate Exists, such as `My`.
	X509StoreName string `pulumi:"x509StoreName"`
}

// ClusterCertificateCommonNamesInput is an input type that accepts ClusterCertificateCommonNamesArgs and ClusterCertificateCommonNamesOutput values.
// You can construct a concrete instance of `ClusterCertificateCommonNamesInput` via:
//
//          ClusterCertificateCommonNamesArgs{...}
type ClusterCertificateCommonNamesInput interface {
	pulumi.Input

	ToClusterCertificateCommonNamesOutput() ClusterCertificateCommonNamesOutput
	ToClusterCertificateCommonNamesOutputWithContext(context.Context) ClusterCertificateCommonNamesOutput
}

type ClusterCertificateCommonNamesArgs struct {
	// A `commonNames` block as defined below.
	CommonNames ClusterCertificateCommonNamesCommonNameArrayInput `pulumi:"commonNames"`
	// The X509 Store where the Certificate Exists, such as `My`.
	X509StoreName pulumi.StringInput `pulumi:"x509StoreName"`
}

func (ClusterCertificateCommonNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateCommonNames)(nil)).Elem()
}

func (i ClusterCertificateCommonNamesArgs) ToClusterCertificateCommonNamesOutput() ClusterCertificateCommonNamesOutput {
	return i.ToClusterCertificateCommonNamesOutputWithContext(context.Background())
}

func (i ClusterCertificateCommonNamesArgs) ToClusterCertificateCommonNamesOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateCommonNamesOutput)
}

func (i ClusterCertificateCommonNamesArgs) ToClusterCertificateCommonNamesPtrOutput() ClusterCertificateCommonNamesPtrOutput {
	return i.ToClusterCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (i ClusterCertificateCommonNamesArgs) ToClusterCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateCommonNamesOutput).ToClusterCertificateCommonNamesPtrOutputWithContext(ctx)
}

// ClusterCertificateCommonNamesPtrInput is an input type that accepts ClusterCertificateCommonNamesArgs, ClusterCertificateCommonNamesPtr and ClusterCertificateCommonNamesPtrOutput values.
// You can construct a concrete instance of `ClusterCertificateCommonNamesPtrInput` via:
//
//          ClusterCertificateCommonNamesArgs{...}
//
//  or:
//
//          nil
type ClusterCertificateCommonNamesPtrInput interface {
	pulumi.Input

	ToClusterCertificateCommonNamesPtrOutput() ClusterCertificateCommonNamesPtrOutput
	ToClusterCertificateCommonNamesPtrOutputWithContext(context.Context) ClusterCertificateCommonNamesPtrOutput
}

type clusterCertificateCommonNamesPtrType ClusterCertificateCommonNamesArgs

func ClusterCertificateCommonNamesPtr(v *ClusterCertificateCommonNamesArgs) ClusterCertificateCommonNamesPtrInput {
	return (*clusterCertificateCommonNamesPtrType)(v)
}

func (*clusterCertificateCommonNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCertificateCommonNames)(nil)).Elem()
}

func (i *clusterCertificateCommonNamesPtrType) ToClusterCertificateCommonNamesPtrOutput() ClusterCertificateCommonNamesPtrOutput {
	return i.ToClusterCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (i *clusterCertificateCommonNamesPtrType) ToClusterCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateCommonNamesPtrOutput)
}

type ClusterCertificateCommonNamesOutput struct{ *pulumi.OutputState }

func (ClusterCertificateCommonNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateCommonNames)(nil)).Elem()
}

func (o ClusterCertificateCommonNamesOutput) ToClusterCertificateCommonNamesOutput() ClusterCertificateCommonNamesOutput {
	return o
}

func (o ClusterCertificateCommonNamesOutput) ToClusterCertificateCommonNamesOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesOutput {
	return o
}

func (o ClusterCertificateCommonNamesOutput) ToClusterCertificateCommonNamesPtrOutput() ClusterCertificateCommonNamesPtrOutput {
	return o.ToClusterCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (o ClusterCertificateCommonNamesOutput) ToClusterCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesPtrOutput {
	return o.ApplyT(func(v ClusterCertificateCommonNames) *ClusterCertificateCommonNames {
		return &v
	}).(ClusterCertificateCommonNamesPtrOutput)
}

// A `commonNames` block as defined below.
func (o ClusterCertificateCommonNamesOutput) CommonNames() ClusterCertificateCommonNamesCommonNameArrayOutput {
	return o.ApplyT(func(v ClusterCertificateCommonNames) []ClusterCertificateCommonNamesCommonName { return v.CommonNames }).(ClusterCertificateCommonNamesCommonNameArrayOutput)
}

// The X509 Store where the Certificate Exists, such as `My`.
func (o ClusterCertificateCommonNamesOutput) X509StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCertificateCommonNames) string { return v.X509StoreName }).(pulumi.StringOutput)
}

type ClusterCertificateCommonNamesPtrOutput struct{ *pulumi.OutputState }

func (ClusterCertificateCommonNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCertificateCommonNames)(nil)).Elem()
}

func (o ClusterCertificateCommonNamesPtrOutput) ToClusterCertificateCommonNamesPtrOutput() ClusterCertificateCommonNamesPtrOutput {
	return o
}

func (o ClusterCertificateCommonNamesPtrOutput) ToClusterCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesPtrOutput {
	return o
}

func (o ClusterCertificateCommonNamesPtrOutput) Elem() ClusterCertificateCommonNamesOutput {
	return o.ApplyT(func(v *ClusterCertificateCommonNames) ClusterCertificateCommonNames { return *v }).(ClusterCertificateCommonNamesOutput)
}

// A `commonNames` block as defined below.
func (o ClusterCertificateCommonNamesPtrOutput) CommonNames() ClusterCertificateCommonNamesCommonNameArrayOutput {
	return o.ApplyT(func(v *ClusterCertificateCommonNames) []ClusterCertificateCommonNamesCommonName {
		if v == nil {
			return nil
		}
		return v.CommonNames
	}).(ClusterCertificateCommonNamesCommonNameArrayOutput)
}

// The X509 Store where the Certificate Exists, such as `My`.
func (o ClusterCertificateCommonNamesPtrOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCertificateCommonNames) *string {
		if v == nil {
			return nil
		}
		return &v.X509StoreName
	}).(pulumi.StringPtrOutput)
}

type ClusterCertificateCommonNamesCommonName struct {
	// The common or subject name of the certificate.
	CertificateCommonName string `pulumi:"certificateCommonName"`
	// The Issuer Thumbprint of the Certificate.
	CertificateIssuerThumbprint *string `pulumi:"certificateIssuerThumbprint"`
}

// ClusterCertificateCommonNamesCommonNameInput is an input type that accepts ClusterCertificateCommonNamesCommonNameArgs and ClusterCertificateCommonNamesCommonNameOutput values.
// You can construct a concrete instance of `ClusterCertificateCommonNamesCommonNameInput` via:
//
//          ClusterCertificateCommonNamesCommonNameArgs{...}
type ClusterCertificateCommonNamesCommonNameInput interface {
	pulumi.Input

	ToClusterCertificateCommonNamesCommonNameOutput() ClusterCertificateCommonNamesCommonNameOutput
	ToClusterCertificateCommonNamesCommonNameOutputWithContext(context.Context) ClusterCertificateCommonNamesCommonNameOutput
}

type ClusterCertificateCommonNamesCommonNameArgs struct {
	// The common or subject name of the certificate.
	CertificateCommonName pulumi.StringInput `pulumi:"certificateCommonName"`
	// The Issuer Thumbprint of the Certificate.
	CertificateIssuerThumbprint pulumi.StringPtrInput `pulumi:"certificateIssuerThumbprint"`
}

func (ClusterCertificateCommonNamesCommonNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateCommonNamesCommonName)(nil)).Elem()
}

func (i ClusterCertificateCommonNamesCommonNameArgs) ToClusterCertificateCommonNamesCommonNameOutput() ClusterCertificateCommonNamesCommonNameOutput {
	return i.ToClusterCertificateCommonNamesCommonNameOutputWithContext(context.Background())
}

func (i ClusterCertificateCommonNamesCommonNameArgs) ToClusterCertificateCommonNamesCommonNameOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesCommonNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateCommonNamesCommonNameOutput)
}

// ClusterCertificateCommonNamesCommonNameArrayInput is an input type that accepts ClusterCertificateCommonNamesCommonNameArray and ClusterCertificateCommonNamesCommonNameArrayOutput values.
// You can construct a concrete instance of `ClusterCertificateCommonNamesCommonNameArrayInput` via:
//
//          ClusterCertificateCommonNamesCommonNameArray{ ClusterCertificateCommonNamesCommonNameArgs{...} }
type ClusterCertificateCommonNamesCommonNameArrayInput interface {
	pulumi.Input

	ToClusterCertificateCommonNamesCommonNameArrayOutput() ClusterCertificateCommonNamesCommonNameArrayOutput
	ToClusterCertificateCommonNamesCommonNameArrayOutputWithContext(context.Context) ClusterCertificateCommonNamesCommonNameArrayOutput
}

type ClusterCertificateCommonNamesCommonNameArray []ClusterCertificateCommonNamesCommonNameInput

func (ClusterCertificateCommonNamesCommonNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCertificateCommonNamesCommonName)(nil)).Elem()
}

func (i ClusterCertificateCommonNamesCommonNameArray) ToClusterCertificateCommonNamesCommonNameArrayOutput() ClusterCertificateCommonNamesCommonNameArrayOutput {
	return i.ToClusterCertificateCommonNamesCommonNameArrayOutputWithContext(context.Background())
}

func (i ClusterCertificateCommonNamesCommonNameArray) ToClusterCertificateCommonNamesCommonNameArrayOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesCommonNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateCommonNamesCommonNameArrayOutput)
}

type ClusterCertificateCommonNamesCommonNameOutput struct{ *pulumi.OutputState }

func (ClusterCertificateCommonNamesCommonNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateCommonNamesCommonName)(nil)).Elem()
}

func (o ClusterCertificateCommonNamesCommonNameOutput) ToClusterCertificateCommonNamesCommonNameOutput() ClusterCertificateCommonNamesCommonNameOutput {
	return o
}

func (o ClusterCertificateCommonNamesCommonNameOutput) ToClusterCertificateCommonNamesCommonNameOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesCommonNameOutput {
	return o
}

// The common or subject name of the certificate.
func (o ClusterCertificateCommonNamesCommonNameOutput) CertificateCommonName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCertificateCommonNamesCommonName) string { return v.CertificateCommonName }).(pulumi.StringOutput)
}

// The Issuer Thumbprint of the Certificate.
func (o ClusterCertificateCommonNamesCommonNameOutput) CertificateIssuerThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateCommonNamesCommonName) *string { return v.CertificateIssuerThumbprint }).(pulumi.StringPtrOutput)
}

type ClusterCertificateCommonNamesCommonNameArrayOutput struct{ *pulumi.OutputState }

func (ClusterCertificateCommonNamesCommonNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCertificateCommonNamesCommonName)(nil)).Elem()
}

func (o ClusterCertificateCommonNamesCommonNameArrayOutput) ToClusterCertificateCommonNamesCommonNameArrayOutput() ClusterCertificateCommonNamesCommonNameArrayOutput {
	return o
}

func (o ClusterCertificateCommonNamesCommonNameArrayOutput) ToClusterCertificateCommonNamesCommonNameArrayOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesCommonNameArrayOutput {
	return o
}

func (o ClusterCertificateCommonNamesCommonNameArrayOutput) Index(i pulumi.IntInput) ClusterCertificateCommonNamesCommonNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCertificateCommonNamesCommonName {
		return vs[0].([]ClusterCertificateCommonNamesCommonName)[vs[1].(int)]
	}).(ClusterCertificateCommonNamesCommonNameOutput)
}

type ClusterClientCertificateCommonName struct {
	// The common or subject name of the certificate.
	CommonName string `pulumi:"commonName"`
	// Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.
	IsAdmin          bool    `pulumi:"isAdmin"`
	IssuerThumbprint *string `pulumi:"issuerThumbprint"`
}

// ClusterClientCertificateCommonNameInput is an input type that accepts ClusterClientCertificateCommonNameArgs and ClusterClientCertificateCommonNameOutput values.
// You can construct a concrete instance of `ClusterClientCertificateCommonNameInput` via:
//
//          ClusterClientCertificateCommonNameArgs{...}
type ClusterClientCertificateCommonNameInput interface {
	pulumi.Input

	ToClusterClientCertificateCommonNameOutput() ClusterClientCertificateCommonNameOutput
	ToClusterClientCertificateCommonNameOutputWithContext(context.Context) ClusterClientCertificateCommonNameOutput
}

type ClusterClientCertificateCommonNameArgs struct {
	// The common or subject name of the certificate.
	CommonName pulumi.StringInput `pulumi:"commonName"`
	// Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.
	IsAdmin          pulumi.BoolInput      `pulumi:"isAdmin"`
	IssuerThumbprint pulumi.StringPtrInput `pulumi:"issuerThumbprint"`
}

func (ClusterClientCertificateCommonNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientCertificateCommonName)(nil)).Elem()
}

func (i ClusterClientCertificateCommonNameArgs) ToClusterClientCertificateCommonNameOutput() ClusterClientCertificateCommonNameOutput {
	return i.ToClusterClientCertificateCommonNameOutputWithContext(context.Background())
}

func (i ClusterClientCertificateCommonNameArgs) ToClusterClientCertificateCommonNameOutputWithContext(ctx context.Context) ClusterClientCertificateCommonNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientCertificateCommonNameOutput)
}

// ClusterClientCertificateCommonNameArrayInput is an input type that accepts ClusterClientCertificateCommonNameArray and ClusterClientCertificateCommonNameArrayOutput values.
// You can construct a concrete instance of `ClusterClientCertificateCommonNameArrayInput` via:
//
//          ClusterClientCertificateCommonNameArray{ ClusterClientCertificateCommonNameArgs{...} }
type ClusterClientCertificateCommonNameArrayInput interface {
	pulumi.Input

	ToClusterClientCertificateCommonNameArrayOutput() ClusterClientCertificateCommonNameArrayOutput
	ToClusterClientCertificateCommonNameArrayOutputWithContext(context.Context) ClusterClientCertificateCommonNameArrayOutput
}

type ClusterClientCertificateCommonNameArray []ClusterClientCertificateCommonNameInput

func (ClusterClientCertificateCommonNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterClientCertificateCommonName)(nil)).Elem()
}

func (i ClusterClientCertificateCommonNameArray) ToClusterClientCertificateCommonNameArrayOutput() ClusterClientCertificateCommonNameArrayOutput {
	return i.ToClusterClientCertificateCommonNameArrayOutputWithContext(context.Background())
}

func (i ClusterClientCertificateCommonNameArray) ToClusterClientCertificateCommonNameArrayOutputWithContext(ctx context.Context) ClusterClientCertificateCommonNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientCertificateCommonNameArrayOutput)
}

type ClusterClientCertificateCommonNameOutput struct{ *pulumi.OutputState }

func (ClusterClientCertificateCommonNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientCertificateCommonName)(nil)).Elem()
}

func (o ClusterClientCertificateCommonNameOutput) ToClusterClientCertificateCommonNameOutput() ClusterClientCertificateCommonNameOutput {
	return o
}

func (o ClusterClientCertificateCommonNameOutput) ToClusterClientCertificateCommonNameOutputWithContext(ctx context.Context) ClusterClientCertificateCommonNameOutput {
	return o
}

// The common or subject name of the certificate.
func (o ClusterClientCertificateCommonNameOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterClientCertificateCommonName) string { return v.CommonName }).(pulumi.StringOutput)
}

// Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.
func (o ClusterClientCertificateCommonNameOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterClientCertificateCommonName) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

func (o ClusterClientCertificateCommonNameOutput) IssuerThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterClientCertificateCommonName) *string { return v.IssuerThumbprint }).(pulumi.StringPtrOutput)
}

type ClusterClientCertificateCommonNameArrayOutput struct{ *pulumi.OutputState }

func (ClusterClientCertificateCommonNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterClientCertificateCommonName)(nil)).Elem()
}

func (o ClusterClientCertificateCommonNameArrayOutput) ToClusterClientCertificateCommonNameArrayOutput() ClusterClientCertificateCommonNameArrayOutput {
	return o
}

func (o ClusterClientCertificateCommonNameArrayOutput) ToClusterClientCertificateCommonNameArrayOutputWithContext(ctx context.Context) ClusterClientCertificateCommonNameArrayOutput {
	return o
}

func (o ClusterClientCertificateCommonNameArrayOutput) Index(i pulumi.IntInput) ClusterClientCertificateCommonNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterClientCertificateCommonName {
		return vs[0].([]ClusterClientCertificateCommonName)[vs[1].(int)]
	}).(ClusterClientCertificateCommonNameOutput)
}

type ClusterClientCertificateThumbprint struct {
	// Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.
	IsAdmin bool `pulumi:"isAdmin"`
	// The Thumbprint associated with the Client Certificate.
	Thumbprint string `pulumi:"thumbprint"`
}

// ClusterClientCertificateThumbprintInput is an input type that accepts ClusterClientCertificateThumbprintArgs and ClusterClientCertificateThumbprintOutput values.
// You can construct a concrete instance of `ClusterClientCertificateThumbprintInput` via:
//
//          ClusterClientCertificateThumbprintArgs{...}
type ClusterClientCertificateThumbprintInput interface {
	pulumi.Input

	ToClusterClientCertificateThumbprintOutput() ClusterClientCertificateThumbprintOutput
	ToClusterClientCertificateThumbprintOutputWithContext(context.Context) ClusterClientCertificateThumbprintOutput
}

type ClusterClientCertificateThumbprintArgs struct {
	// Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.
	IsAdmin pulumi.BoolInput `pulumi:"isAdmin"`
	// The Thumbprint associated with the Client Certificate.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
}

func (ClusterClientCertificateThumbprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientCertificateThumbprint)(nil)).Elem()
}

func (i ClusterClientCertificateThumbprintArgs) ToClusterClientCertificateThumbprintOutput() ClusterClientCertificateThumbprintOutput {
	return i.ToClusterClientCertificateThumbprintOutputWithContext(context.Background())
}

func (i ClusterClientCertificateThumbprintArgs) ToClusterClientCertificateThumbprintOutputWithContext(ctx context.Context) ClusterClientCertificateThumbprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientCertificateThumbprintOutput)
}

// ClusterClientCertificateThumbprintArrayInput is an input type that accepts ClusterClientCertificateThumbprintArray and ClusterClientCertificateThumbprintArrayOutput values.
// You can construct a concrete instance of `ClusterClientCertificateThumbprintArrayInput` via:
//
//          ClusterClientCertificateThumbprintArray{ ClusterClientCertificateThumbprintArgs{...} }
type ClusterClientCertificateThumbprintArrayInput interface {
	pulumi.Input

	ToClusterClientCertificateThumbprintArrayOutput() ClusterClientCertificateThumbprintArrayOutput
	ToClusterClientCertificateThumbprintArrayOutputWithContext(context.Context) ClusterClientCertificateThumbprintArrayOutput
}

type ClusterClientCertificateThumbprintArray []ClusterClientCertificateThumbprintInput

func (ClusterClientCertificateThumbprintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterClientCertificateThumbprint)(nil)).Elem()
}

func (i ClusterClientCertificateThumbprintArray) ToClusterClientCertificateThumbprintArrayOutput() ClusterClientCertificateThumbprintArrayOutput {
	return i.ToClusterClientCertificateThumbprintArrayOutputWithContext(context.Background())
}

func (i ClusterClientCertificateThumbprintArray) ToClusterClientCertificateThumbprintArrayOutputWithContext(ctx context.Context) ClusterClientCertificateThumbprintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientCertificateThumbprintArrayOutput)
}

type ClusterClientCertificateThumbprintOutput struct{ *pulumi.OutputState }

func (ClusterClientCertificateThumbprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientCertificateThumbprint)(nil)).Elem()
}

func (o ClusterClientCertificateThumbprintOutput) ToClusterClientCertificateThumbprintOutput() ClusterClientCertificateThumbprintOutput {
	return o
}

func (o ClusterClientCertificateThumbprintOutput) ToClusterClientCertificateThumbprintOutputWithContext(ctx context.Context) ClusterClientCertificateThumbprintOutput {
	return o
}

// Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.
func (o ClusterClientCertificateThumbprintOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterClientCertificateThumbprint) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

// The Thumbprint associated with the Client Certificate.
func (o ClusterClientCertificateThumbprintOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterClientCertificateThumbprint) string { return v.Thumbprint }).(pulumi.StringOutput)
}

type ClusterClientCertificateThumbprintArrayOutput struct{ *pulumi.OutputState }

func (ClusterClientCertificateThumbprintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterClientCertificateThumbprint)(nil)).Elem()
}

func (o ClusterClientCertificateThumbprintArrayOutput) ToClusterClientCertificateThumbprintArrayOutput() ClusterClientCertificateThumbprintArrayOutput {
	return o
}

func (o ClusterClientCertificateThumbprintArrayOutput) ToClusterClientCertificateThumbprintArrayOutputWithContext(ctx context.Context) ClusterClientCertificateThumbprintArrayOutput {
	return o
}

func (o ClusterClientCertificateThumbprintArrayOutput) Index(i pulumi.IntInput) ClusterClientCertificateThumbprintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterClientCertificateThumbprint {
		return vs[0].([]ClusterClientCertificateThumbprint)[vs[1].(int)]
	}).(ClusterClientCertificateThumbprintOutput)
}

type ClusterDiagnosticsConfig struct {
	// The Blob Endpoint of the Storage Account.
	BlobEndpoint string `pulumi:"blobEndpoint"`
	// The protected diagnostics storage key name, such as `StorageAccountKey1`.
	ProtectedAccountKeyName string `pulumi:"protectedAccountKeyName"`
	// The Queue Endpoint of the Storage Account.
	QueueEndpoint string `pulumi:"queueEndpoint"`
	// The name of the Storage Account where the Diagnostics should be sent to.
	StorageAccountName string `pulumi:"storageAccountName"`
	// The Table Endpoint of the Storage Account.
	TableEndpoint string `pulumi:"tableEndpoint"`
}

// ClusterDiagnosticsConfigInput is an input type that accepts ClusterDiagnosticsConfigArgs and ClusterDiagnosticsConfigOutput values.
// You can construct a concrete instance of `ClusterDiagnosticsConfigInput` via:
//
//          ClusterDiagnosticsConfigArgs{...}
type ClusterDiagnosticsConfigInput interface {
	pulumi.Input

	ToClusterDiagnosticsConfigOutput() ClusterDiagnosticsConfigOutput
	ToClusterDiagnosticsConfigOutputWithContext(context.Context) ClusterDiagnosticsConfigOutput
}

type ClusterDiagnosticsConfigArgs struct {
	// The Blob Endpoint of the Storage Account.
	BlobEndpoint pulumi.StringInput `pulumi:"blobEndpoint"`
	// The protected diagnostics storage key name, such as `StorageAccountKey1`.
	ProtectedAccountKeyName pulumi.StringInput `pulumi:"protectedAccountKeyName"`
	// The Queue Endpoint of the Storage Account.
	QueueEndpoint pulumi.StringInput `pulumi:"queueEndpoint"`
	// The name of the Storage Account where the Diagnostics should be sent to.
	StorageAccountName pulumi.StringInput `pulumi:"storageAccountName"`
	// The Table Endpoint of the Storage Account.
	TableEndpoint pulumi.StringInput `pulumi:"tableEndpoint"`
}

func (ClusterDiagnosticsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDiagnosticsConfig)(nil)).Elem()
}

func (i ClusterDiagnosticsConfigArgs) ToClusterDiagnosticsConfigOutput() ClusterDiagnosticsConfigOutput {
	return i.ToClusterDiagnosticsConfigOutputWithContext(context.Background())
}

func (i ClusterDiagnosticsConfigArgs) ToClusterDiagnosticsConfigOutputWithContext(ctx context.Context) ClusterDiagnosticsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDiagnosticsConfigOutput)
}

func (i ClusterDiagnosticsConfigArgs) ToClusterDiagnosticsConfigPtrOutput() ClusterDiagnosticsConfigPtrOutput {
	return i.ToClusterDiagnosticsConfigPtrOutputWithContext(context.Background())
}

func (i ClusterDiagnosticsConfigArgs) ToClusterDiagnosticsConfigPtrOutputWithContext(ctx context.Context) ClusterDiagnosticsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDiagnosticsConfigOutput).ToClusterDiagnosticsConfigPtrOutputWithContext(ctx)
}

// ClusterDiagnosticsConfigPtrInput is an input type that accepts ClusterDiagnosticsConfigArgs, ClusterDiagnosticsConfigPtr and ClusterDiagnosticsConfigPtrOutput values.
// You can construct a concrete instance of `ClusterDiagnosticsConfigPtrInput` via:
//
//          ClusterDiagnosticsConfigArgs{...}
//
//  or:
//
//          nil
type ClusterDiagnosticsConfigPtrInput interface {
	pulumi.Input

	ToClusterDiagnosticsConfigPtrOutput() ClusterDiagnosticsConfigPtrOutput
	ToClusterDiagnosticsConfigPtrOutputWithContext(context.Context) ClusterDiagnosticsConfigPtrOutput
}

type clusterDiagnosticsConfigPtrType ClusterDiagnosticsConfigArgs

func ClusterDiagnosticsConfigPtr(v *ClusterDiagnosticsConfigArgs) ClusterDiagnosticsConfigPtrInput {
	return (*clusterDiagnosticsConfigPtrType)(v)
}

func (*clusterDiagnosticsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterDiagnosticsConfig)(nil)).Elem()
}

func (i *clusterDiagnosticsConfigPtrType) ToClusterDiagnosticsConfigPtrOutput() ClusterDiagnosticsConfigPtrOutput {
	return i.ToClusterDiagnosticsConfigPtrOutputWithContext(context.Background())
}

func (i *clusterDiagnosticsConfigPtrType) ToClusterDiagnosticsConfigPtrOutputWithContext(ctx context.Context) ClusterDiagnosticsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDiagnosticsConfigPtrOutput)
}

type ClusterDiagnosticsConfigOutput struct{ *pulumi.OutputState }

func (ClusterDiagnosticsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDiagnosticsConfig)(nil)).Elem()
}

func (o ClusterDiagnosticsConfigOutput) ToClusterDiagnosticsConfigOutput() ClusterDiagnosticsConfigOutput {
	return o
}

func (o ClusterDiagnosticsConfigOutput) ToClusterDiagnosticsConfigOutputWithContext(ctx context.Context) ClusterDiagnosticsConfigOutput {
	return o
}

func (o ClusterDiagnosticsConfigOutput) ToClusterDiagnosticsConfigPtrOutput() ClusterDiagnosticsConfigPtrOutput {
	return o.ToClusterDiagnosticsConfigPtrOutputWithContext(context.Background())
}

func (o ClusterDiagnosticsConfigOutput) ToClusterDiagnosticsConfigPtrOutputWithContext(ctx context.Context) ClusterDiagnosticsConfigPtrOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) *ClusterDiagnosticsConfig {
		return &v
	}).(ClusterDiagnosticsConfigPtrOutput)
}

// The Blob Endpoint of the Storage Account.
func (o ClusterDiagnosticsConfigOutput) BlobEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.BlobEndpoint }).(pulumi.StringOutput)
}

// The protected diagnostics storage key name, such as `StorageAccountKey1`.
func (o ClusterDiagnosticsConfigOutput) ProtectedAccountKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.ProtectedAccountKeyName }).(pulumi.StringOutput)
}

// The Queue Endpoint of the Storage Account.
func (o ClusterDiagnosticsConfigOutput) QueueEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.QueueEndpoint }).(pulumi.StringOutput)
}

// The name of the Storage Account where the Diagnostics should be sent to.
func (o ClusterDiagnosticsConfigOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

// The Table Endpoint of the Storage Account.
func (o ClusterDiagnosticsConfigOutput) TableEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.TableEndpoint }).(pulumi.StringOutput)
}

type ClusterDiagnosticsConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterDiagnosticsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterDiagnosticsConfig)(nil)).Elem()
}

func (o ClusterDiagnosticsConfigPtrOutput) ToClusterDiagnosticsConfigPtrOutput() ClusterDiagnosticsConfigPtrOutput {
	return o
}

func (o ClusterDiagnosticsConfigPtrOutput) ToClusterDiagnosticsConfigPtrOutputWithContext(ctx context.Context) ClusterDiagnosticsConfigPtrOutput {
	return o
}

func (o ClusterDiagnosticsConfigPtrOutput) Elem() ClusterDiagnosticsConfigOutput {
	return o.ApplyT(func(v *ClusterDiagnosticsConfig) ClusterDiagnosticsConfig { return *v }).(ClusterDiagnosticsConfigOutput)
}

// The Blob Endpoint of the Storage Account.
func (o ClusterDiagnosticsConfigPtrOutput) BlobEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterDiagnosticsConfig) *string {
		if v == nil {
			return nil
		}
		return &v.BlobEndpoint
	}).(pulumi.StringPtrOutput)
}

// The protected diagnostics storage key name, such as `StorageAccountKey1`.
func (o ClusterDiagnosticsConfigPtrOutput) ProtectedAccountKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterDiagnosticsConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ProtectedAccountKeyName
	}).(pulumi.StringPtrOutput)
}

// The Queue Endpoint of the Storage Account.
func (o ClusterDiagnosticsConfigPtrOutput) QueueEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterDiagnosticsConfig) *string {
		if v == nil {
			return nil
		}
		return &v.QueueEndpoint
	}).(pulumi.StringPtrOutput)
}

// The name of the Storage Account where the Diagnostics should be sent to.
func (o ClusterDiagnosticsConfigPtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterDiagnosticsConfig) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// The Table Endpoint of the Storage Account.
func (o ClusterDiagnosticsConfigPtrOutput) TableEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterDiagnosticsConfig) *string {
		if v == nil {
			return nil
		}
		return &v.TableEndpoint
	}).(pulumi.StringPtrOutput)
}

type ClusterFabricSetting struct {
	// The name of the Fabric Setting, such as `Security` or `Federation`.
	Name string `pulumi:"name"`
	// A map containing settings for the specified Fabric Setting.
	Parameters map[string]string `pulumi:"parameters"`
}

// ClusterFabricSettingInput is an input type that accepts ClusterFabricSettingArgs and ClusterFabricSettingOutput values.
// You can construct a concrete instance of `ClusterFabricSettingInput` via:
//
//          ClusterFabricSettingArgs{...}
type ClusterFabricSettingInput interface {
	pulumi.Input

	ToClusterFabricSettingOutput() ClusterFabricSettingOutput
	ToClusterFabricSettingOutputWithContext(context.Context) ClusterFabricSettingOutput
}

type ClusterFabricSettingArgs struct {
	// The name of the Fabric Setting, such as `Security` or `Federation`.
	Name pulumi.StringInput `pulumi:"name"`
	// A map containing settings for the specified Fabric Setting.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (ClusterFabricSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterFabricSetting)(nil)).Elem()
}

func (i ClusterFabricSettingArgs) ToClusterFabricSettingOutput() ClusterFabricSettingOutput {
	return i.ToClusterFabricSettingOutputWithContext(context.Background())
}

func (i ClusterFabricSettingArgs) ToClusterFabricSettingOutputWithContext(ctx context.Context) ClusterFabricSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterFabricSettingOutput)
}

// ClusterFabricSettingArrayInput is an input type that accepts ClusterFabricSettingArray and ClusterFabricSettingArrayOutput values.
// You can construct a concrete instance of `ClusterFabricSettingArrayInput` via:
//
//          ClusterFabricSettingArray{ ClusterFabricSettingArgs{...} }
type ClusterFabricSettingArrayInput interface {
	pulumi.Input

	ToClusterFabricSettingArrayOutput() ClusterFabricSettingArrayOutput
	ToClusterFabricSettingArrayOutputWithContext(context.Context) ClusterFabricSettingArrayOutput
}

type ClusterFabricSettingArray []ClusterFabricSettingInput

func (ClusterFabricSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterFabricSetting)(nil)).Elem()
}

func (i ClusterFabricSettingArray) ToClusterFabricSettingArrayOutput() ClusterFabricSettingArrayOutput {
	return i.ToClusterFabricSettingArrayOutputWithContext(context.Background())
}

func (i ClusterFabricSettingArray) ToClusterFabricSettingArrayOutputWithContext(ctx context.Context) ClusterFabricSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterFabricSettingArrayOutput)
}

type ClusterFabricSettingOutput struct{ *pulumi.OutputState }

func (ClusterFabricSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterFabricSetting)(nil)).Elem()
}

func (o ClusterFabricSettingOutput) ToClusterFabricSettingOutput() ClusterFabricSettingOutput {
	return o
}

func (o ClusterFabricSettingOutput) ToClusterFabricSettingOutputWithContext(ctx context.Context) ClusterFabricSettingOutput {
	return o
}

// The name of the Fabric Setting, such as `Security` or `Federation`.
func (o ClusterFabricSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterFabricSetting) string { return v.Name }).(pulumi.StringOutput)
}

// A map containing settings for the specified Fabric Setting.
func (o ClusterFabricSettingOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterFabricSetting) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type ClusterFabricSettingArrayOutput struct{ *pulumi.OutputState }

func (ClusterFabricSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterFabricSetting)(nil)).Elem()
}

func (o ClusterFabricSettingArrayOutput) ToClusterFabricSettingArrayOutput() ClusterFabricSettingArrayOutput {
	return o
}

func (o ClusterFabricSettingArrayOutput) ToClusterFabricSettingArrayOutputWithContext(ctx context.Context) ClusterFabricSettingArrayOutput {
	return o
}

func (o ClusterFabricSettingArrayOutput) Index(i pulumi.IntInput) ClusterFabricSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterFabricSetting {
		return vs[0].([]ClusterFabricSetting)[vs[1].(int)]
	}).(ClusterFabricSettingOutput)
}

type ClusterNodeType struct {
	// A `applicationPorts` block as defined below.
	ApplicationPorts *ClusterNodeTypeApplicationPorts `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities map[string]string `pulumi:"capacities"`
	// The Port used for the Client Endpoint for this Node Type. Changing this forces a new resource to be created.
	ClientEndpointPort int `pulumi:"clientEndpointPort"`
	// The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`. Changing this forces a new resource to be created.
	DurabilityLevel *string `pulumi:"durabilityLevel"`
	// A `ephemeralPorts` block as defined below.
	EphemeralPorts *ClusterNodeTypeEphemeralPorts `pulumi:"ephemeralPorts"`
	// The Port used for the HTTP Endpoint for this Node Type. Changing this forces a new resource to be created.
	HttpEndpointPort int `pulumi:"httpEndpointPort"`
	// The number of nodes for this Node Type.
	InstanceCount int `pulumi:"instanceCount"`
	// Is this the Primary Node Type? Changing this forces a new resource to be created.
	IsPrimary bool `pulumi:"isPrimary"`
	// The name of the Node Type. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties map[string]string `pulumi:"placementProperties"`
	// The Port used for the Reverse Proxy Endpoint  for this Node Type. Changing this will upgrade the cluster.
	ReverseProxyEndpointPort *int `pulumi:"reverseProxyEndpointPort"`
}

// ClusterNodeTypeInput is an input type that accepts ClusterNodeTypeArgs and ClusterNodeTypeOutput values.
// You can construct a concrete instance of `ClusterNodeTypeInput` via:
//
//          ClusterNodeTypeArgs{...}
type ClusterNodeTypeInput interface {
	pulumi.Input

	ToClusterNodeTypeOutput() ClusterNodeTypeOutput
	ToClusterNodeTypeOutputWithContext(context.Context) ClusterNodeTypeOutput
}

type ClusterNodeTypeArgs struct {
	// A `applicationPorts` block as defined below.
	ApplicationPorts ClusterNodeTypeApplicationPortsPtrInput `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities pulumi.StringMapInput `pulumi:"capacities"`
	// The Port used for the Client Endpoint for this Node Type. Changing this forces a new resource to be created.
	ClientEndpointPort pulumi.IntInput `pulumi:"clientEndpointPort"`
	// The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`. Changing this forces a new resource to be created.
	DurabilityLevel pulumi.StringPtrInput `pulumi:"durabilityLevel"`
	// A `ephemeralPorts` block as defined below.
	EphemeralPorts ClusterNodeTypeEphemeralPortsPtrInput `pulumi:"ephemeralPorts"`
	// The Port used for the HTTP Endpoint for this Node Type. Changing this forces a new resource to be created.
	HttpEndpointPort pulumi.IntInput `pulumi:"httpEndpointPort"`
	// The number of nodes for this Node Type.
	InstanceCount pulumi.IntInput `pulumi:"instanceCount"`
	// Is this the Primary Node Type? Changing this forces a new resource to be created.
	IsPrimary pulumi.BoolInput `pulumi:"isPrimary"`
	// The name of the Node Type. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties pulumi.StringMapInput `pulumi:"placementProperties"`
	// The Port used for the Reverse Proxy Endpoint  for this Node Type. Changing this will upgrade the cluster.
	ReverseProxyEndpointPort pulumi.IntPtrInput `pulumi:"reverseProxyEndpointPort"`
}

func (ClusterNodeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeType)(nil)).Elem()
}

func (i ClusterNodeTypeArgs) ToClusterNodeTypeOutput() ClusterNodeTypeOutput {
	return i.ToClusterNodeTypeOutputWithContext(context.Background())
}

func (i ClusterNodeTypeArgs) ToClusterNodeTypeOutputWithContext(ctx context.Context) ClusterNodeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeOutput)
}

// ClusterNodeTypeArrayInput is an input type that accepts ClusterNodeTypeArray and ClusterNodeTypeArrayOutput values.
// You can construct a concrete instance of `ClusterNodeTypeArrayInput` via:
//
//          ClusterNodeTypeArray{ ClusterNodeTypeArgs{...} }
type ClusterNodeTypeArrayInput interface {
	pulumi.Input

	ToClusterNodeTypeArrayOutput() ClusterNodeTypeArrayOutput
	ToClusterNodeTypeArrayOutputWithContext(context.Context) ClusterNodeTypeArrayOutput
}

type ClusterNodeTypeArray []ClusterNodeTypeInput

func (ClusterNodeTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterNodeType)(nil)).Elem()
}

func (i ClusterNodeTypeArray) ToClusterNodeTypeArrayOutput() ClusterNodeTypeArrayOutput {
	return i.ToClusterNodeTypeArrayOutputWithContext(context.Background())
}

func (i ClusterNodeTypeArray) ToClusterNodeTypeArrayOutputWithContext(ctx context.Context) ClusterNodeTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeArrayOutput)
}

type ClusterNodeTypeOutput struct{ *pulumi.OutputState }

func (ClusterNodeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeType)(nil)).Elem()
}

func (o ClusterNodeTypeOutput) ToClusterNodeTypeOutput() ClusterNodeTypeOutput {
	return o
}

func (o ClusterNodeTypeOutput) ToClusterNodeTypeOutputWithContext(ctx context.Context) ClusterNodeTypeOutput {
	return o
}

// A `applicationPorts` block as defined below.
func (o ClusterNodeTypeOutput) ApplicationPorts() ClusterNodeTypeApplicationPortsPtrOutput {
	return o.ApplyT(func(v ClusterNodeType) *ClusterNodeTypeApplicationPorts { return v.ApplicationPorts }).(ClusterNodeTypeApplicationPortsPtrOutput)
}

// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
func (o ClusterNodeTypeOutput) Capacities() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterNodeType) map[string]string { return v.Capacities }).(pulumi.StringMapOutput)
}

// The Port used for the Client Endpoint for this Node Type. Changing this forces a new resource to be created.
func (o ClusterNodeTypeOutput) ClientEndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeType) int { return v.ClientEndpointPort }).(pulumi.IntOutput)
}

// The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`. Changing this forces a new resource to be created.
func (o ClusterNodeTypeOutput) DurabilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNodeType) *string { return v.DurabilityLevel }).(pulumi.StringPtrOutput)
}

// A `ephemeralPorts` block as defined below.
func (o ClusterNodeTypeOutput) EphemeralPorts() ClusterNodeTypeEphemeralPortsPtrOutput {
	return o.ApplyT(func(v ClusterNodeType) *ClusterNodeTypeEphemeralPorts { return v.EphemeralPorts }).(ClusterNodeTypeEphemeralPortsPtrOutput)
}

// The Port used for the HTTP Endpoint for this Node Type. Changing this forces a new resource to be created.
func (o ClusterNodeTypeOutput) HttpEndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeType) int { return v.HttpEndpointPort }).(pulumi.IntOutput)
}

// The number of nodes for this Node Type.
func (o ClusterNodeTypeOutput) InstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeType) int { return v.InstanceCount }).(pulumi.IntOutput)
}

// Is this the Primary Node Type? Changing this forces a new resource to be created.
func (o ClusterNodeTypeOutput) IsPrimary() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterNodeType) bool { return v.IsPrimary }).(pulumi.BoolOutput)
}

// The name of the Node Type. Changing this forces a new resource to be created.
func (o ClusterNodeTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeType) string { return v.Name }).(pulumi.StringOutput)
}

// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
func (o ClusterNodeTypeOutput) PlacementProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterNodeType) map[string]string { return v.PlacementProperties }).(pulumi.StringMapOutput)
}

// The Port used for the Reverse Proxy Endpoint  for this Node Type. Changing this will upgrade the cluster.
func (o ClusterNodeTypeOutput) ReverseProxyEndpointPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterNodeType) *int { return v.ReverseProxyEndpointPort }).(pulumi.IntPtrOutput)
}

type ClusterNodeTypeArrayOutput struct{ *pulumi.OutputState }

func (ClusterNodeTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterNodeType)(nil)).Elem()
}

func (o ClusterNodeTypeArrayOutput) ToClusterNodeTypeArrayOutput() ClusterNodeTypeArrayOutput {
	return o
}

func (o ClusterNodeTypeArrayOutput) ToClusterNodeTypeArrayOutputWithContext(ctx context.Context) ClusterNodeTypeArrayOutput {
	return o
}

func (o ClusterNodeTypeArrayOutput) Index(i pulumi.IntInput) ClusterNodeTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterNodeType {
		return vs[0].([]ClusterNodeType)[vs[1].(int)]
	}).(ClusterNodeTypeOutput)
}

type ClusterNodeTypeApplicationPorts struct {
	// The end of the Application Port Range on this Node Type.
	EndPort int `pulumi:"endPort"`
	// The start of the Application Port Range on this Node Type.
	StartPort int `pulumi:"startPort"`
}

// ClusterNodeTypeApplicationPortsInput is an input type that accepts ClusterNodeTypeApplicationPortsArgs and ClusterNodeTypeApplicationPortsOutput values.
// You can construct a concrete instance of `ClusterNodeTypeApplicationPortsInput` via:
//
//          ClusterNodeTypeApplicationPortsArgs{...}
type ClusterNodeTypeApplicationPortsInput interface {
	pulumi.Input

	ToClusterNodeTypeApplicationPortsOutput() ClusterNodeTypeApplicationPortsOutput
	ToClusterNodeTypeApplicationPortsOutputWithContext(context.Context) ClusterNodeTypeApplicationPortsOutput
}

type ClusterNodeTypeApplicationPortsArgs struct {
	// The end of the Application Port Range on this Node Type.
	EndPort pulumi.IntInput `pulumi:"endPort"`
	// The start of the Application Port Range on this Node Type.
	StartPort pulumi.IntInput `pulumi:"startPort"`
}

func (ClusterNodeTypeApplicationPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeTypeApplicationPorts)(nil)).Elem()
}

func (i ClusterNodeTypeApplicationPortsArgs) ToClusterNodeTypeApplicationPortsOutput() ClusterNodeTypeApplicationPortsOutput {
	return i.ToClusterNodeTypeApplicationPortsOutputWithContext(context.Background())
}

func (i ClusterNodeTypeApplicationPortsArgs) ToClusterNodeTypeApplicationPortsOutputWithContext(ctx context.Context) ClusterNodeTypeApplicationPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeApplicationPortsOutput)
}

func (i ClusterNodeTypeApplicationPortsArgs) ToClusterNodeTypeApplicationPortsPtrOutput() ClusterNodeTypeApplicationPortsPtrOutput {
	return i.ToClusterNodeTypeApplicationPortsPtrOutputWithContext(context.Background())
}

func (i ClusterNodeTypeApplicationPortsArgs) ToClusterNodeTypeApplicationPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeApplicationPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeApplicationPortsOutput).ToClusterNodeTypeApplicationPortsPtrOutputWithContext(ctx)
}

// ClusterNodeTypeApplicationPortsPtrInput is an input type that accepts ClusterNodeTypeApplicationPortsArgs, ClusterNodeTypeApplicationPortsPtr and ClusterNodeTypeApplicationPortsPtrOutput values.
// You can construct a concrete instance of `ClusterNodeTypeApplicationPortsPtrInput` via:
//
//          ClusterNodeTypeApplicationPortsArgs{...}
//
//  or:
//
//          nil
type ClusterNodeTypeApplicationPortsPtrInput interface {
	pulumi.Input

	ToClusterNodeTypeApplicationPortsPtrOutput() ClusterNodeTypeApplicationPortsPtrOutput
	ToClusterNodeTypeApplicationPortsPtrOutputWithContext(context.Context) ClusterNodeTypeApplicationPortsPtrOutput
}

type clusterNodeTypeApplicationPortsPtrType ClusterNodeTypeApplicationPortsArgs

func ClusterNodeTypeApplicationPortsPtr(v *ClusterNodeTypeApplicationPortsArgs) ClusterNodeTypeApplicationPortsPtrInput {
	return (*clusterNodeTypeApplicationPortsPtrType)(v)
}

func (*clusterNodeTypeApplicationPortsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeTypeApplicationPorts)(nil)).Elem()
}

func (i *clusterNodeTypeApplicationPortsPtrType) ToClusterNodeTypeApplicationPortsPtrOutput() ClusterNodeTypeApplicationPortsPtrOutput {
	return i.ToClusterNodeTypeApplicationPortsPtrOutputWithContext(context.Background())
}

func (i *clusterNodeTypeApplicationPortsPtrType) ToClusterNodeTypeApplicationPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeApplicationPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeApplicationPortsPtrOutput)
}

type ClusterNodeTypeApplicationPortsOutput struct{ *pulumi.OutputState }

func (ClusterNodeTypeApplicationPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeTypeApplicationPorts)(nil)).Elem()
}

func (o ClusterNodeTypeApplicationPortsOutput) ToClusterNodeTypeApplicationPortsOutput() ClusterNodeTypeApplicationPortsOutput {
	return o
}

func (o ClusterNodeTypeApplicationPortsOutput) ToClusterNodeTypeApplicationPortsOutputWithContext(ctx context.Context) ClusterNodeTypeApplicationPortsOutput {
	return o
}

func (o ClusterNodeTypeApplicationPortsOutput) ToClusterNodeTypeApplicationPortsPtrOutput() ClusterNodeTypeApplicationPortsPtrOutput {
	return o.ToClusterNodeTypeApplicationPortsPtrOutputWithContext(context.Background())
}

func (o ClusterNodeTypeApplicationPortsOutput) ToClusterNodeTypeApplicationPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeApplicationPortsPtrOutput {
	return o.ApplyT(func(v ClusterNodeTypeApplicationPorts) *ClusterNodeTypeApplicationPorts {
		return &v
	}).(ClusterNodeTypeApplicationPortsPtrOutput)
}

// The end of the Application Port Range on this Node Type.
func (o ClusterNodeTypeApplicationPortsOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeTypeApplicationPorts) int { return v.EndPort }).(pulumi.IntOutput)
}

// The start of the Application Port Range on this Node Type.
func (o ClusterNodeTypeApplicationPortsOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeTypeApplicationPorts) int { return v.StartPort }).(pulumi.IntOutput)
}

type ClusterNodeTypeApplicationPortsPtrOutput struct{ *pulumi.OutputState }

func (ClusterNodeTypeApplicationPortsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeTypeApplicationPorts)(nil)).Elem()
}

func (o ClusterNodeTypeApplicationPortsPtrOutput) ToClusterNodeTypeApplicationPortsPtrOutput() ClusterNodeTypeApplicationPortsPtrOutput {
	return o
}

func (o ClusterNodeTypeApplicationPortsPtrOutput) ToClusterNodeTypeApplicationPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeApplicationPortsPtrOutput {
	return o
}

func (o ClusterNodeTypeApplicationPortsPtrOutput) Elem() ClusterNodeTypeApplicationPortsOutput {
	return o.ApplyT(func(v *ClusterNodeTypeApplicationPorts) ClusterNodeTypeApplicationPorts { return *v }).(ClusterNodeTypeApplicationPortsOutput)
}

// The end of the Application Port Range on this Node Type.
func (o ClusterNodeTypeApplicationPortsPtrOutput) EndPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterNodeTypeApplicationPorts) *int {
		if v == nil {
			return nil
		}
		return &v.EndPort
	}).(pulumi.IntPtrOutput)
}

// The start of the Application Port Range on this Node Type.
func (o ClusterNodeTypeApplicationPortsPtrOutput) StartPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterNodeTypeApplicationPorts) *int {
		if v == nil {
			return nil
		}
		return &v.StartPort
	}).(pulumi.IntPtrOutput)
}

type ClusterNodeTypeEphemeralPorts struct {
	// The end of the Ephemeral Port Range on this Node Type.
	EndPort int `pulumi:"endPort"`
	// The start of the Ephemeral Port Range on this Node Type.
	StartPort int `pulumi:"startPort"`
}

// ClusterNodeTypeEphemeralPortsInput is an input type that accepts ClusterNodeTypeEphemeralPortsArgs and ClusterNodeTypeEphemeralPortsOutput values.
// You can construct a concrete instance of `ClusterNodeTypeEphemeralPortsInput` via:
//
//          ClusterNodeTypeEphemeralPortsArgs{...}
type ClusterNodeTypeEphemeralPortsInput interface {
	pulumi.Input

	ToClusterNodeTypeEphemeralPortsOutput() ClusterNodeTypeEphemeralPortsOutput
	ToClusterNodeTypeEphemeralPortsOutputWithContext(context.Context) ClusterNodeTypeEphemeralPortsOutput
}

type ClusterNodeTypeEphemeralPortsArgs struct {
	// The end of the Ephemeral Port Range on this Node Type.
	EndPort pulumi.IntInput `pulumi:"endPort"`
	// The start of the Ephemeral Port Range on this Node Type.
	StartPort pulumi.IntInput `pulumi:"startPort"`
}

func (ClusterNodeTypeEphemeralPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeTypeEphemeralPorts)(nil)).Elem()
}

func (i ClusterNodeTypeEphemeralPortsArgs) ToClusterNodeTypeEphemeralPortsOutput() ClusterNodeTypeEphemeralPortsOutput {
	return i.ToClusterNodeTypeEphemeralPortsOutputWithContext(context.Background())
}

func (i ClusterNodeTypeEphemeralPortsArgs) ToClusterNodeTypeEphemeralPortsOutputWithContext(ctx context.Context) ClusterNodeTypeEphemeralPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeEphemeralPortsOutput)
}

func (i ClusterNodeTypeEphemeralPortsArgs) ToClusterNodeTypeEphemeralPortsPtrOutput() ClusterNodeTypeEphemeralPortsPtrOutput {
	return i.ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(context.Background())
}

func (i ClusterNodeTypeEphemeralPortsArgs) ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeEphemeralPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeEphemeralPortsOutput).ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(ctx)
}

// ClusterNodeTypeEphemeralPortsPtrInput is an input type that accepts ClusterNodeTypeEphemeralPortsArgs, ClusterNodeTypeEphemeralPortsPtr and ClusterNodeTypeEphemeralPortsPtrOutput values.
// You can construct a concrete instance of `ClusterNodeTypeEphemeralPortsPtrInput` via:
//
//          ClusterNodeTypeEphemeralPortsArgs{...}
//
//  or:
//
//          nil
type ClusterNodeTypeEphemeralPortsPtrInput interface {
	pulumi.Input

	ToClusterNodeTypeEphemeralPortsPtrOutput() ClusterNodeTypeEphemeralPortsPtrOutput
	ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(context.Context) ClusterNodeTypeEphemeralPortsPtrOutput
}

type clusterNodeTypeEphemeralPortsPtrType ClusterNodeTypeEphemeralPortsArgs

func ClusterNodeTypeEphemeralPortsPtr(v *ClusterNodeTypeEphemeralPortsArgs) ClusterNodeTypeEphemeralPortsPtrInput {
	return (*clusterNodeTypeEphemeralPortsPtrType)(v)
}

func (*clusterNodeTypeEphemeralPortsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeTypeEphemeralPorts)(nil)).Elem()
}

func (i *clusterNodeTypeEphemeralPortsPtrType) ToClusterNodeTypeEphemeralPortsPtrOutput() ClusterNodeTypeEphemeralPortsPtrOutput {
	return i.ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(context.Background())
}

func (i *clusterNodeTypeEphemeralPortsPtrType) ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeEphemeralPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeEphemeralPortsPtrOutput)
}

type ClusterNodeTypeEphemeralPortsOutput struct{ *pulumi.OutputState }

func (ClusterNodeTypeEphemeralPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeTypeEphemeralPorts)(nil)).Elem()
}

func (o ClusterNodeTypeEphemeralPortsOutput) ToClusterNodeTypeEphemeralPortsOutput() ClusterNodeTypeEphemeralPortsOutput {
	return o
}

func (o ClusterNodeTypeEphemeralPortsOutput) ToClusterNodeTypeEphemeralPortsOutputWithContext(ctx context.Context) ClusterNodeTypeEphemeralPortsOutput {
	return o
}

func (o ClusterNodeTypeEphemeralPortsOutput) ToClusterNodeTypeEphemeralPortsPtrOutput() ClusterNodeTypeEphemeralPortsPtrOutput {
	return o.ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(context.Background())
}

func (o ClusterNodeTypeEphemeralPortsOutput) ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeEphemeralPortsPtrOutput {
	return o.ApplyT(func(v ClusterNodeTypeEphemeralPorts) *ClusterNodeTypeEphemeralPorts {
		return &v
	}).(ClusterNodeTypeEphemeralPortsPtrOutput)
}

// The end of the Ephemeral Port Range on this Node Type.
func (o ClusterNodeTypeEphemeralPortsOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeTypeEphemeralPorts) int { return v.EndPort }).(pulumi.IntOutput)
}

// The start of the Ephemeral Port Range on this Node Type.
func (o ClusterNodeTypeEphemeralPortsOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeTypeEphemeralPorts) int { return v.StartPort }).(pulumi.IntOutput)
}

type ClusterNodeTypeEphemeralPortsPtrOutput struct{ *pulumi.OutputState }

func (ClusterNodeTypeEphemeralPortsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeTypeEphemeralPorts)(nil)).Elem()
}

func (o ClusterNodeTypeEphemeralPortsPtrOutput) ToClusterNodeTypeEphemeralPortsPtrOutput() ClusterNodeTypeEphemeralPortsPtrOutput {
	return o
}

func (o ClusterNodeTypeEphemeralPortsPtrOutput) ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeEphemeralPortsPtrOutput {
	return o
}

func (o ClusterNodeTypeEphemeralPortsPtrOutput) Elem() ClusterNodeTypeEphemeralPortsOutput {
	return o.ApplyT(func(v *ClusterNodeTypeEphemeralPorts) ClusterNodeTypeEphemeralPorts { return *v }).(ClusterNodeTypeEphemeralPortsOutput)
}

// The end of the Ephemeral Port Range on this Node Type.
func (o ClusterNodeTypeEphemeralPortsPtrOutput) EndPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterNodeTypeEphemeralPorts) *int {
		if v == nil {
			return nil
		}
		return &v.EndPort
	}).(pulumi.IntPtrOutput)
}

// The start of the Ephemeral Port Range on this Node Type.
func (o ClusterNodeTypeEphemeralPortsPtrOutput) StartPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterNodeTypeEphemeralPorts) *int {
		if v == nil {
			return nil
		}
		return &v.StartPort
	}).(pulumi.IntPtrOutput)
}

type ClusterReverseProxyCertificate struct {
	// The Thumbprint of the Certificate.
	Thumbprint string `pulumi:"thumbprint"`
	// The Secondary Thumbprint of the Certificate.
	ThumbprintSecondary *string `pulumi:"thumbprintSecondary"`
	// The X509 Store where the Certificate Exists, such as `My`.
	X509StoreName string `pulumi:"x509StoreName"`
}

// ClusterReverseProxyCertificateInput is an input type that accepts ClusterReverseProxyCertificateArgs and ClusterReverseProxyCertificateOutput values.
// You can construct a concrete instance of `ClusterReverseProxyCertificateInput` via:
//
//          ClusterReverseProxyCertificateArgs{...}
type ClusterReverseProxyCertificateInput interface {
	pulumi.Input

	ToClusterReverseProxyCertificateOutput() ClusterReverseProxyCertificateOutput
	ToClusterReverseProxyCertificateOutputWithContext(context.Context) ClusterReverseProxyCertificateOutput
}

type ClusterReverseProxyCertificateArgs struct {
	// The Thumbprint of the Certificate.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
	// The Secondary Thumbprint of the Certificate.
	ThumbprintSecondary pulumi.StringPtrInput `pulumi:"thumbprintSecondary"`
	// The X509 Store where the Certificate Exists, such as `My`.
	X509StoreName pulumi.StringInput `pulumi:"x509StoreName"`
}

func (ClusterReverseProxyCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterReverseProxyCertificate)(nil)).Elem()
}

func (i ClusterReverseProxyCertificateArgs) ToClusterReverseProxyCertificateOutput() ClusterReverseProxyCertificateOutput {
	return i.ToClusterReverseProxyCertificateOutputWithContext(context.Background())
}

func (i ClusterReverseProxyCertificateArgs) ToClusterReverseProxyCertificateOutputWithContext(ctx context.Context) ClusterReverseProxyCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterReverseProxyCertificateOutput)
}

func (i ClusterReverseProxyCertificateArgs) ToClusterReverseProxyCertificatePtrOutput() ClusterReverseProxyCertificatePtrOutput {
	return i.ToClusterReverseProxyCertificatePtrOutputWithContext(context.Background())
}

func (i ClusterReverseProxyCertificateArgs) ToClusterReverseProxyCertificatePtrOutputWithContext(ctx context.Context) ClusterReverseProxyCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterReverseProxyCertificateOutput).ToClusterReverseProxyCertificatePtrOutputWithContext(ctx)
}

// ClusterReverseProxyCertificatePtrInput is an input type that accepts ClusterReverseProxyCertificateArgs, ClusterReverseProxyCertificatePtr and ClusterReverseProxyCertificatePtrOutput values.
// You can construct a concrete instance of `ClusterReverseProxyCertificatePtrInput` via:
//
//          ClusterReverseProxyCertificateArgs{...}
//
//  or:
//
//          nil
type ClusterReverseProxyCertificatePtrInput interface {
	pulumi.Input

	ToClusterReverseProxyCertificatePtrOutput() ClusterReverseProxyCertificatePtrOutput
	ToClusterReverseProxyCertificatePtrOutputWithContext(context.Context) ClusterReverseProxyCertificatePtrOutput
}

type clusterReverseProxyCertificatePtrType ClusterReverseProxyCertificateArgs

func ClusterReverseProxyCertificatePtr(v *ClusterReverseProxyCertificateArgs) ClusterReverseProxyCertificatePtrInput {
	return (*clusterReverseProxyCertificatePtrType)(v)
}

func (*clusterReverseProxyCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterReverseProxyCertificate)(nil)).Elem()
}

func (i *clusterReverseProxyCertificatePtrType) ToClusterReverseProxyCertificatePtrOutput() ClusterReverseProxyCertificatePtrOutput {
	return i.ToClusterReverseProxyCertificatePtrOutputWithContext(context.Background())
}

func (i *clusterReverseProxyCertificatePtrType) ToClusterReverseProxyCertificatePtrOutputWithContext(ctx context.Context) ClusterReverseProxyCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterReverseProxyCertificatePtrOutput)
}

type ClusterReverseProxyCertificateOutput struct{ *pulumi.OutputState }

func (ClusterReverseProxyCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterReverseProxyCertificate)(nil)).Elem()
}

func (o ClusterReverseProxyCertificateOutput) ToClusterReverseProxyCertificateOutput() ClusterReverseProxyCertificateOutput {
	return o
}

func (o ClusterReverseProxyCertificateOutput) ToClusterReverseProxyCertificateOutputWithContext(ctx context.Context) ClusterReverseProxyCertificateOutput {
	return o
}

func (o ClusterReverseProxyCertificateOutput) ToClusterReverseProxyCertificatePtrOutput() ClusterReverseProxyCertificatePtrOutput {
	return o.ToClusterReverseProxyCertificatePtrOutputWithContext(context.Background())
}

func (o ClusterReverseProxyCertificateOutput) ToClusterReverseProxyCertificatePtrOutputWithContext(ctx context.Context) ClusterReverseProxyCertificatePtrOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificate) *ClusterReverseProxyCertificate {
		return &v
	}).(ClusterReverseProxyCertificatePtrOutput)
}

// The Thumbprint of the Certificate.
func (o ClusterReverseProxyCertificateOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificate) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// The Secondary Thumbprint of the Certificate.
func (o ClusterReverseProxyCertificateOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificate) *string { return v.ThumbprintSecondary }).(pulumi.StringPtrOutput)
}

// The X509 Store where the Certificate Exists, such as `My`.
func (o ClusterReverseProxyCertificateOutput) X509StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificate) string { return v.X509StoreName }).(pulumi.StringOutput)
}

type ClusterReverseProxyCertificatePtrOutput struct{ *pulumi.OutputState }

func (ClusterReverseProxyCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterReverseProxyCertificate)(nil)).Elem()
}

func (o ClusterReverseProxyCertificatePtrOutput) ToClusterReverseProxyCertificatePtrOutput() ClusterReverseProxyCertificatePtrOutput {
	return o
}

func (o ClusterReverseProxyCertificatePtrOutput) ToClusterReverseProxyCertificatePtrOutputWithContext(ctx context.Context) ClusterReverseProxyCertificatePtrOutput {
	return o
}

func (o ClusterReverseProxyCertificatePtrOutput) Elem() ClusterReverseProxyCertificateOutput {
	return o.ApplyT(func(v *ClusterReverseProxyCertificate) ClusterReverseProxyCertificate { return *v }).(ClusterReverseProxyCertificateOutput)
}

// The Thumbprint of the Certificate.
func (o ClusterReverseProxyCertificatePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterReverseProxyCertificate) *string {
		if v == nil {
			return nil
		}
		return &v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// The Secondary Thumbprint of the Certificate.
func (o ClusterReverseProxyCertificatePtrOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterReverseProxyCertificate) *string {
		if v == nil {
			return nil
		}
		return v.ThumbprintSecondary
	}).(pulumi.StringPtrOutput)
}

// The X509 Store where the Certificate Exists, such as `My`.
func (o ClusterReverseProxyCertificatePtrOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterReverseProxyCertificate) *string {
		if v == nil {
			return nil
		}
		return &v.X509StoreName
	}).(pulumi.StringPtrOutput)
}

type ClusterReverseProxyCertificateCommonNames struct {
	// A `commonNames` block as defined below.
	CommonNames []ClusterReverseProxyCertificateCommonNamesCommonName `pulumi:"commonNames"`
	// The X509 Store where the Certificate Exists, such as `My`.
	X509StoreName string `pulumi:"x509StoreName"`
}

// ClusterReverseProxyCertificateCommonNamesInput is an input type that accepts ClusterReverseProxyCertificateCommonNamesArgs and ClusterReverseProxyCertificateCommonNamesOutput values.
// You can construct a concrete instance of `ClusterReverseProxyCertificateCommonNamesInput` via:
//
//          ClusterReverseProxyCertificateCommonNamesArgs{...}
type ClusterReverseProxyCertificateCommonNamesInput interface {
	pulumi.Input

	ToClusterReverseProxyCertificateCommonNamesOutput() ClusterReverseProxyCertificateCommonNamesOutput
	ToClusterReverseProxyCertificateCommonNamesOutputWithContext(context.Context) ClusterReverseProxyCertificateCommonNamesOutput
}

type ClusterReverseProxyCertificateCommonNamesArgs struct {
	// A `commonNames` block as defined below.
	CommonNames ClusterReverseProxyCertificateCommonNamesCommonNameArrayInput `pulumi:"commonNames"`
	// The X509 Store where the Certificate Exists, such as `My`.
	X509StoreName pulumi.StringInput `pulumi:"x509StoreName"`
}

func (ClusterReverseProxyCertificateCommonNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterReverseProxyCertificateCommonNames)(nil)).Elem()
}

func (i ClusterReverseProxyCertificateCommonNamesArgs) ToClusterReverseProxyCertificateCommonNamesOutput() ClusterReverseProxyCertificateCommonNamesOutput {
	return i.ToClusterReverseProxyCertificateCommonNamesOutputWithContext(context.Background())
}

func (i ClusterReverseProxyCertificateCommonNamesArgs) ToClusterReverseProxyCertificateCommonNamesOutputWithContext(ctx context.Context) ClusterReverseProxyCertificateCommonNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterReverseProxyCertificateCommonNamesOutput)
}

func (i ClusterReverseProxyCertificateCommonNamesArgs) ToClusterReverseProxyCertificateCommonNamesPtrOutput() ClusterReverseProxyCertificateCommonNamesPtrOutput {
	return i.ToClusterReverseProxyCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (i ClusterReverseProxyCertificateCommonNamesArgs) ToClusterReverseProxyCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ClusterReverseProxyCertificateCommonNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterReverseProxyCertificateCommonNamesOutput).ToClusterReverseProxyCertificateCommonNamesPtrOutputWithContext(ctx)
}

// ClusterReverseProxyCertificateCommonNamesPtrInput is an input type that accepts ClusterReverseProxyCertificateCommonNamesArgs, ClusterReverseProxyCertificateCommonNamesPtr and ClusterReverseProxyCertificateCommonNamesPtrOutput values.
// You can construct a concrete instance of `ClusterReverseProxyCertificateCommonNamesPtrInput` via:
//
//          ClusterReverseProxyCertificateCommonNamesArgs{...}
//
//  or:
//
//          nil
type ClusterReverseProxyCertificateCommonNamesPtrInput interface {
	pulumi.Input

	ToClusterReverseProxyCertificateCommonNamesPtrOutput() ClusterReverseProxyCertificateCommonNamesPtrOutput
	ToClusterReverseProxyCertificateCommonNamesPtrOutputWithContext(context.Context) ClusterReverseProxyCertificateCommonNamesPtrOutput
}

type clusterReverseProxyCertificateCommonNamesPtrType ClusterReverseProxyCertificateCommonNamesArgs

func ClusterReverseProxyCertificateCommonNamesPtr(v *ClusterReverseProxyCertificateCommonNamesArgs) ClusterReverseProxyCertificateCommonNamesPtrInput {
	return (*clusterReverseProxyCertificateCommonNamesPtrType)(v)
}

func (*clusterReverseProxyCertificateCommonNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterReverseProxyCertificateCommonNames)(nil)).Elem()
}

func (i *clusterReverseProxyCertificateCommonNamesPtrType) ToClusterReverseProxyCertificateCommonNamesPtrOutput() ClusterReverseProxyCertificateCommonNamesPtrOutput {
	return i.ToClusterReverseProxyCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (i *clusterReverseProxyCertificateCommonNamesPtrType) ToClusterReverseProxyCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ClusterReverseProxyCertificateCommonNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterReverseProxyCertificateCommonNamesPtrOutput)
}

type ClusterReverseProxyCertificateCommonNamesOutput struct{ *pulumi.OutputState }

func (ClusterReverseProxyCertificateCommonNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterReverseProxyCertificateCommonNames)(nil)).Elem()
}

func (o ClusterReverseProxyCertificateCommonNamesOutput) ToClusterReverseProxyCertificateCommonNamesOutput() ClusterReverseProxyCertificateCommonNamesOutput {
	return o
}

func (o ClusterReverseProxyCertificateCommonNamesOutput) ToClusterReverseProxyCertificateCommonNamesOutputWithContext(ctx context.Context) ClusterReverseProxyCertificateCommonNamesOutput {
	return o
}

func (o ClusterReverseProxyCertificateCommonNamesOutput) ToClusterReverseProxyCertificateCommonNamesPtrOutput() ClusterReverseProxyCertificateCommonNamesPtrOutput {
	return o.ToClusterReverseProxyCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (o ClusterReverseProxyCertificateCommonNamesOutput) ToClusterReverseProxyCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ClusterReverseProxyCertificateCommonNamesPtrOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificateCommonNames) *ClusterReverseProxyCertificateCommonNames {
		return &v
	}).(ClusterReverseProxyCertificateCommonNamesPtrOutput)
}

// A `commonNames` block as defined below.
func (o ClusterReverseProxyCertificateCommonNamesOutput) CommonNames() ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificateCommonNames) []ClusterReverseProxyCertificateCommonNamesCommonName {
		return v.CommonNames
	}).(ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput)
}

// The X509 Store where the Certificate Exists, such as `My`.
func (o ClusterReverseProxyCertificateCommonNamesOutput) X509StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificateCommonNames) string { return v.X509StoreName }).(pulumi.StringOutput)
}

type ClusterReverseProxyCertificateCommonNamesPtrOutput struct{ *pulumi.OutputState }

func (ClusterReverseProxyCertificateCommonNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterReverseProxyCertificateCommonNames)(nil)).Elem()
}

func (o ClusterReverseProxyCertificateCommonNamesPtrOutput) ToClusterReverseProxyCertificateCommonNamesPtrOutput() ClusterReverseProxyCertificateCommonNamesPtrOutput {
	return o
}

func (o ClusterReverseProxyCertificateCommonNamesPtrOutput) ToClusterReverseProxyCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ClusterReverseProxyCertificateCommonNamesPtrOutput {
	return o
}

func (o ClusterReverseProxyCertificateCommonNamesPtrOutput) Elem() ClusterReverseProxyCertificateCommonNamesOutput {
	return o.ApplyT(func(v *ClusterReverseProxyCertificateCommonNames) ClusterReverseProxyCertificateCommonNames {
		return *v
	}).(ClusterReverseProxyCertificateCommonNamesOutput)
}

// A `commonNames` block as defined below.
func (o ClusterReverseProxyCertificateCommonNamesPtrOutput) CommonNames() ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput {
	return o.ApplyT(func(v *ClusterReverseProxyCertificateCommonNames) []ClusterReverseProxyCertificateCommonNamesCommonName {
		if v == nil {
			return nil
		}
		return v.CommonNames
	}).(ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput)
}

// The X509 Store where the Certificate Exists, such as `My`.
func (o ClusterReverseProxyCertificateCommonNamesPtrOutput) X509StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterReverseProxyCertificateCommonNames) *string {
		if v == nil {
			return nil
		}
		return &v.X509StoreName
	}).(pulumi.StringPtrOutput)
}

type ClusterReverseProxyCertificateCommonNamesCommonName struct {
	// The common or subject name of the certificate.
	CertificateCommonName string `pulumi:"certificateCommonName"`
	// The Issuer Thumbprint of the Certificate.
	CertificateIssuerThumbprint *string `pulumi:"certificateIssuerThumbprint"`
}

// ClusterReverseProxyCertificateCommonNamesCommonNameInput is an input type that accepts ClusterReverseProxyCertificateCommonNamesCommonNameArgs and ClusterReverseProxyCertificateCommonNamesCommonNameOutput values.
// You can construct a concrete instance of `ClusterReverseProxyCertificateCommonNamesCommonNameInput` via:
//
//          ClusterReverseProxyCertificateCommonNamesCommonNameArgs{...}
type ClusterReverseProxyCertificateCommonNamesCommonNameInput interface {
	pulumi.Input

	ToClusterReverseProxyCertificateCommonNamesCommonNameOutput() ClusterReverseProxyCertificateCommonNamesCommonNameOutput
	ToClusterReverseProxyCertificateCommonNamesCommonNameOutputWithContext(context.Context) ClusterReverseProxyCertificateCommonNamesCommonNameOutput
}

type ClusterReverseProxyCertificateCommonNamesCommonNameArgs struct {
	// The common or subject name of the certificate.
	CertificateCommonName pulumi.StringInput `pulumi:"certificateCommonName"`
	// The Issuer Thumbprint of the Certificate.
	CertificateIssuerThumbprint pulumi.StringPtrInput `pulumi:"certificateIssuerThumbprint"`
}

func (ClusterReverseProxyCertificateCommonNamesCommonNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterReverseProxyCertificateCommonNamesCommonName)(nil)).Elem()
}

func (i ClusterReverseProxyCertificateCommonNamesCommonNameArgs) ToClusterReverseProxyCertificateCommonNamesCommonNameOutput() ClusterReverseProxyCertificateCommonNamesCommonNameOutput {
	return i.ToClusterReverseProxyCertificateCommonNamesCommonNameOutputWithContext(context.Background())
}

func (i ClusterReverseProxyCertificateCommonNamesCommonNameArgs) ToClusterReverseProxyCertificateCommonNamesCommonNameOutputWithContext(ctx context.Context) ClusterReverseProxyCertificateCommonNamesCommonNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterReverseProxyCertificateCommonNamesCommonNameOutput)
}

// ClusterReverseProxyCertificateCommonNamesCommonNameArrayInput is an input type that accepts ClusterReverseProxyCertificateCommonNamesCommonNameArray and ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput values.
// You can construct a concrete instance of `ClusterReverseProxyCertificateCommonNamesCommonNameArrayInput` via:
//
//          ClusterReverseProxyCertificateCommonNamesCommonNameArray{ ClusterReverseProxyCertificateCommonNamesCommonNameArgs{...} }
type ClusterReverseProxyCertificateCommonNamesCommonNameArrayInput interface {
	pulumi.Input

	ToClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput() ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput
	ToClusterReverseProxyCertificateCommonNamesCommonNameArrayOutputWithContext(context.Context) ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput
}

type ClusterReverseProxyCertificateCommonNamesCommonNameArray []ClusterReverseProxyCertificateCommonNamesCommonNameInput

func (ClusterReverseProxyCertificateCommonNamesCommonNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterReverseProxyCertificateCommonNamesCommonName)(nil)).Elem()
}

func (i ClusterReverseProxyCertificateCommonNamesCommonNameArray) ToClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput() ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput {
	return i.ToClusterReverseProxyCertificateCommonNamesCommonNameArrayOutputWithContext(context.Background())
}

func (i ClusterReverseProxyCertificateCommonNamesCommonNameArray) ToClusterReverseProxyCertificateCommonNamesCommonNameArrayOutputWithContext(ctx context.Context) ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput)
}

type ClusterReverseProxyCertificateCommonNamesCommonNameOutput struct{ *pulumi.OutputState }

func (ClusterReverseProxyCertificateCommonNamesCommonNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterReverseProxyCertificateCommonNamesCommonName)(nil)).Elem()
}

func (o ClusterReverseProxyCertificateCommonNamesCommonNameOutput) ToClusterReverseProxyCertificateCommonNamesCommonNameOutput() ClusterReverseProxyCertificateCommonNamesCommonNameOutput {
	return o
}

func (o ClusterReverseProxyCertificateCommonNamesCommonNameOutput) ToClusterReverseProxyCertificateCommonNamesCommonNameOutputWithContext(ctx context.Context) ClusterReverseProxyCertificateCommonNamesCommonNameOutput {
	return o
}

// The common or subject name of the certificate.
func (o ClusterReverseProxyCertificateCommonNamesCommonNameOutput) CertificateCommonName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificateCommonNamesCommonName) string { return v.CertificateCommonName }).(pulumi.StringOutput)
}

// The Issuer Thumbprint of the Certificate.
func (o ClusterReverseProxyCertificateCommonNamesCommonNameOutput) CertificateIssuerThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificateCommonNamesCommonName) *string {
		return v.CertificateIssuerThumbprint
	}).(pulumi.StringPtrOutput)
}

type ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput struct{ *pulumi.OutputState }

func (ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterReverseProxyCertificateCommonNamesCommonName)(nil)).Elem()
}

func (o ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput) ToClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput() ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput {
	return o
}

func (o ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput) ToClusterReverseProxyCertificateCommonNamesCommonNameArrayOutputWithContext(ctx context.Context) ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput {
	return o
}

func (o ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput) Index(i pulumi.IntInput) ClusterReverseProxyCertificateCommonNamesCommonNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterReverseProxyCertificateCommonNamesCommonName {
		return vs[0].([]ClusterReverseProxyCertificateCommonNamesCommonName)[vs[1].(int)]
	}).(ClusterReverseProxyCertificateCommonNamesCommonNameOutput)
}

type ClusterUpgradePolicy struct {
	// A `deltaHealthPolicy` block as defined below
	DeltaHealthPolicy   *ClusterUpgradePolicyDeltaHealthPolicy `pulumi:"deltaHealthPolicy"`
	ForceRestartEnabled *bool                                  `pulumi:"forceRestartEnabled"`
	// Specifies the duration, in "hh:mm:ss" string format, after which Service Fabric retries the health check if the previous health check fails. Defaults to `00:45:00`.
	HealthCheckRetryTimeout *string `pulumi:"healthCheckRetryTimeout"`
	// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric waits in order to verify that the cluster is stable before it continues to the next upgrade domain or completes the upgrade. This wait duration prevents undetected changes of health right after the health check is performed. Defaults to `00:01:00`.
	HealthCheckStableDuration *string `pulumi:"healthCheckStableDuration"`
	// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric waits before it performs the initial health check after it finishes the upgrade on the upgrade domain. Defaults to `00:00:30`.
	HealthCheckWaitDuration *string `pulumi:"healthCheckWaitDuration"`
	// A `healthPolicy` block as defined below
	HealthPolicy *ClusterUpgradePolicyHealthPolicy `pulumi:"healthPolicy"`
	// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric takes to upgrade a single upgrade domain. After this period, the upgrade fails. Defaults to `02:00:00`.
	UpgradeDomainTimeout *string `pulumi:"upgradeDomainTimeout"`
	// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric waits for a replica set to reconfigure into a safe state, if it is not already in a safe state, before Service Fabric proceeds with the upgrade. Defaults to `10675199.02:48:05.4775807`.
	UpgradeReplicaSetCheckTimeout *string `pulumi:"upgradeReplicaSetCheckTimeout"`
	// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric takes for the entire upgrade. After this period, the upgrade fails. Defaults to `12:00:00`.
	UpgradeTimeout *string `pulumi:"upgradeTimeout"`
}

// ClusterUpgradePolicyInput is an input type that accepts ClusterUpgradePolicyArgs and ClusterUpgradePolicyOutput values.
// You can construct a concrete instance of `ClusterUpgradePolicyInput` via:
//
//          ClusterUpgradePolicyArgs{...}
type ClusterUpgradePolicyInput interface {
	pulumi.Input

	ToClusterUpgradePolicyOutput() ClusterUpgradePolicyOutput
	ToClusterUpgradePolicyOutputWithContext(context.Context) ClusterUpgradePolicyOutput
}

type ClusterUpgradePolicyArgs struct {
	// A `deltaHealthPolicy` block as defined below
	DeltaHealthPolicy   ClusterUpgradePolicyDeltaHealthPolicyPtrInput `pulumi:"deltaHealthPolicy"`
	ForceRestartEnabled pulumi.BoolPtrInput                           `pulumi:"forceRestartEnabled"`
	// Specifies the duration, in "hh:mm:ss" string format, after which Service Fabric retries the health check if the previous health check fails. Defaults to `00:45:00`.
	HealthCheckRetryTimeout pulumi.StringPtrInput `pulumi:"healthCheckRetryTimeout"`
	// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric waits in order to verify that the cluster is stable before it continues to the next upgrade domain or completes the upgrade. This wait duration prevents undetected changes of health right after the health check is performed. Defaults to `00:01:00`.
	HealthCheckStableDuration pulumi.StringPtrInput `pulumi:"healthCheckStableDuration"`
	// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric waits before it performs the initial health check after it finishes the upgrade on the upgrade domain. Defaults to `00:00:30`.
	HealthCheckWaitDuration pulumi.StringPtrInput `pulumi:"healthCheckWaitDuration"`
	// A `healthPolicy` block as defined below
	HealthPolicy ClusterUpgradePolicyHealthPolicyPtrInput `pulumi:"healthPolicy"`
	// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric takes to upgrade a single upgrade domain. After this period, the upgrade fails. Defaults to `02:00:00`.
	UpgradeDomainTimeout pulumi.StringPtrInput `pulumi:"upgradeDomainTimeout"`
	// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric waits for a replica set to reconfigure into a safe state, if it is not already in a safe state, before Service Fabric proceeds with the upgrade. Defaults to `10675199.02:48:05.4775807`.
	UpgradeReplicaSetCheckTimeout pulumi.StringPtrInput `pulumi:"upgradeReplicaSetCheckTimeout"`
	// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric takes for the entire upgrade. After this period, the upgrade fails. Defaults to `12:00:00`.
	UpgradeTimeout pulumi.StringPtrInput `pulumi:"upgradeTimeout"`
}

func (ClusterUpgradePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicy)(nil)).Elem()
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyOutput() ClusterUpgradePolicyOutput {
	return i.ToClusterUpgradePolicyOutputWithContext(context.Background())
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyOutputWithContext(ctx context.Context) ClusterUpgradePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyOutput)
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return i.ToClusterUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i ClusterUpgradePolicyArgs) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyOutput).ToClusterUpgradePolicyPtrOutputWithContext(ctx)
}

// ClusterUpgradePolicyPtrInput is an input type that accepts ClusterUpgradePolicyArgs, ClusterUpgradePolicyPtr and ClusterUpgradePolicyPtrOutput values.
// You can construct a concrete instance of `ClusterUpgradePolicyPtrInput` via:
//
//          ClusterUpgradePolicyArgs{...}
//
//  or:
//
//          nil
type ClusterUpgradePolicyPtrInput interface {
	pulumi.Input

	ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput
	ToClusterUpgradePolicyPtrOutputWithContext(context.Context) ClusterUpgradePolicyPtrOutput
}

type clusterUpgradePolicyPtrType ClusterUpgradePolicyArgs

func ClusterUpgradePolicyPtr(v *ClusterUpgradePolicyArgs) ClusterUpgradePolicyPtrInput {
	return (*clusterUpgradePolicyPtrType)(v)
}

func (*clusterUpgradePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicy)(nil)).Elem()
}

func (i *clusterUpgradePolicyPtrType) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return i.ToClusterUpgradePolicyPtrOutputWithContext(context.Background())
}

func (i *clusterUpgradePolicyPtrType) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyPtrOutput)
}

type ClusterUpgradePolicyOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicy)(nil)).Elem()
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyOutput() ClusterUpgradePolicyOutput {
	return o
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyOutputWithContext(ctx context.Context) ClusterUpgradePolicyOutput {
	return o
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return o.ToClusterUpgradePolicyPtrOutputWithContext(context.Background())
}

func (o ClusterUpgradePolicyOutput) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *ClusterUpgradePolicy {
		return &v
	}).(ClusterUpgradePolicyPtrOutput)
}

// A `deltaHealthPolicy` block as defined below
func (o ClusterUpgradePolicyOutput) DeltaHealthPolicy() ClusterUpgradePolicyDeltaHealthPolicyPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *ClusterUpgradePolicyDeltaHealthPolicy { return v.DeltaHealthPolicy }).(ClusterUpgradePolicyDeltaHealthPolicyPtrOutput)
}

func (o ClusterUpgradePolicyOutput) ForceRestartEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *bool { return v.ForceRestartEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the duration, in "hh:mm:ss" string format, after which Service Fabric retries the health check if the previous health check fails. Defaults to `00:45:00`.
func (o ClusterUpgradePolicyOutput) HealthCheckRetryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *string { return v.HealthCheckRetryTimeout }).(pulumi.StringPtrOutput)
}

// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric waits in order to verify that the cluster is stable before it continues to the next upgrade domain or completes the upgrade. This wait duration prevents undetected changes of health right after the health check is performed. Defaults to `00:01:00`.
func (o ClusterUpgradePolicyOutput) HealthCheckStableDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *string { return v.HealthCheckStableDuration }).(pulumi.StringPtrOutput)
}

// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric waits before it performs the initial health check after it finishes the upgrade on the upgrade domain. Defaults to `00:00:30`.
func (o ClusterUpgradePolicyOutput) HealthCheckWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *string { return v.HealthCheckWaitDuration }).(pulumi.StringPtrOutput)
}

// A `healthPolicy` block as defined below
func (o ClusterUpgradePolicyOutput) HealthPolicy() ClusterUpgradePolicyHealthPolicyPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *ClusterUpgradePolicyHealthPolicy { return v.HealthPolicy }).(ClusterUpgradePolicyHealthPolicyPtrOutput)
}

// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric takes to upgrade a single upgrade domain. After this period, the upgrade fails. Defaults to `02:00:00`.
func (o ClusterUpgradePolicyOutput) UpgradeDomainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *string { return v.UpgradeDomainTimeout }).(pulumi.StringPtrOutput)
}

// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric waits for a replica set to reconfigure into a safe state, if it is not already in a safe state, before Service Fabric proceeds with the upgrade. Defaults to `10675199.02:48:05.4775807`.
func (o ClusterUpgradePolicyOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *string { return v.UpgradeReplicaSetCheckTimeout }).(pulumi.StringPtrOutput)
}

// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric takes for the entire upgrade. After this period, the upgrade fails. Defaults to `12:00:00`.
func (o ClusterUpgradePolicyOutput) UpgradeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicy) *string { return v.UpgradeTimeout }).(pulumi.StringPtrOutput)
}

type ClusterUpgradePolicyPtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicy)(nil)).Elem()
}

func (o ClusterUpgradePolicyPtrOutput) ToClusterUpgradePolicyPtrOutput() ClusterUpgradePolicyPtrOutput {
	return o
}

func (o ClusterUpgradePolicyPtrOutput) ToClusterUpgradePolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyPtrOutput {
	return o
}

func (o ClusterUpgradePolicyPtrOutput) Elem() ClusterUpgradePolicyOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) ClusterUpgradePolicy { return *v }).(ClusterUpgradePolicyOutput)
}

// A `deltaHealthPolicy` block as defined below
func (o ClusterUpgradePolicyPtrOutput) DeltaHealthPolicy() ClusterUpgradePolicyDeltaHealthPolicyPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *ClusterUpgradePolicyDeltaHealthPolicy {
		if v == nil {
			return nil
		}
		return v.DeltaHealthPolicy
	}).(ClusterUpgradePolicyDeltaHealthPolicyPtrOutput)
}

func (o ClusterUpgradePolicyPtrOutput) ForceRestartEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *bool {
		if v == nil {
			return nil
		}
		return v.ForceRestartEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the duration, in "hh:mm:ss" string format, after which Service Fabric retries the health check if the previous health check fails. Defaults to `00:45:00`.
func (o ClusterUpgradePolicyPtrOutput) HealthCheckRetryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckRetryTimeout
	}).(pulumi.StringPtrOutput)
}

// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric waits in order to verify that the cluster is stable before it continues to the next upgrade domain or completes the upgrade. This wait duration prevents undetected changes of health right after the health check is performed. Defaults to `00:01:00`.
func (o ClusterUpgradePolicyPtrOutput) HealthCheckStableDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckStableDuration
	}).(pulumi.StringPtrOutput)
}

// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric waits before it performs the initial health check after it finishes the upgrade on the upgrade domain. Defaults to `00:00:30`.
func (o ClusterUpgradePolicyPtrOutput) HealthCheckWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckWaitDuration
	}).(pulumi.StringPtrOutput)
}

// A `healthPolicy` block as defined below
func (o ClusterUpgradePolicyPtrOutput) HealthPolicy() ClusterUpgradePolicyHealthPolicyPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *ClusterUpgradePolicyHealthPolicy {
		if v == nil {
			return nil
		}
		return v.HealthPolicy
	}).(ClusterUpgradePolicyHealthPolicyPtrOutput)
}

// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric takes to upgrade a single upgrade domain. After this period, the upgrade fails. Defaults to `02:00:00`.
func (o ClusterUpgradePolicyPtrOutput) UpgradeDomainTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeDomainTimeout
	}).(pulumi.StringPtrOutput)
}

// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric waits for a replica set to reconfigure into a safe state, if it is not already in a safe state, before Service Fabric proceeds with the upgrade. Defaults to `10675199.02:48:05.4775807`.
func (o ClusterUpgradePolicyPtrOutput) UpgradeReplicaSetCheckTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeReplicaSetCheckTimeout
	}).(pulumi.StringPtrOutput)
}

// Specifies the duration, in "hh:mm:ss" string format, that Service Fabric takes for the entire upgrade. After this period, the upgrade fails. Defaults to `12:00:00`.
func (o ClusterUpgradePolicyPtrOutput) UpgradeTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicy) *string {
		if v == nil {
			return nil
		}
		return v.UpgradeTimeout
	}).(pulumi.StringPtrOutput)
}

type ClusterUpgradePolicyDeltaHealthPolicy struct {
	MaxDeltaUnhealthyApplicationsPercent       *int `pulumi:"maxDeltaUnhealthyApplicationsPercent"`
	MaxDeltaUnhealthyNodesPercent              *int `pulumi:"maxDeltaUnhealthyNodesPercent"`
	MaxUpgradeDomainDeltaUnhealthyNodesPercent *int `pulumi:"maxUpgradeDomainDeltaUnhealthyNodesPercent"`
}

// ClusterUpgradePolicyDeltaHealthPolicyInput is an input type that accepts ClusterUpgradePolicyDeltaHealthPolicyArgs and ClusterUpgradePolicyDeltaHealthPolicyOutput values.
// You can construct a concrete instance of `ClusterUpgradePolicyDeltaHealthPolicyInput` via:
//
//          ClusterUpgradePolicyDeltaHealthPolicyArgs{...}
type ClusterUpgradePolicyDeltaHealthPolicyInput interface {
	pulumi.Input

	ToClusterUpgradePolicyDeltaHealthPolicyOutput() ClusterUpgradePolicyDeltaHealthPolicyOutput
	ToClusterUpgradePolicyDeltaHealthPolicyOutputWithContext(context.Context) ClusterUpgradePolicyDeltaHealthPolicyOutput
}

type ClusterUpgradePolicyDeltaHealthPolicyArgs struct {
	MaxDeltaUnhealthyApplicationsPercent       pulumi.IntPtrInput `pulumi:"maxDeltaUnhealthyApplicationsPercent"`
	MaxDeltaUnhealthyNodesPercent              pulumi.IntPtrInput `pulumi:"maxDeltaUnhealthyNodesPercent"`
	MaxUpgradeDomainDeltaUnhealthyNodesPercent pulumi.IntPtrInput `pulumi:"maxUpgradeDomainDeltaUnhealthyNodesPercent"`
}

func (ClusterUpgradePolicyDeltaHealthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicyDeltaHealthPolicy)(nil)).Elem()
}

func (i ClusterUpgradePolicyDeltaHealthPolicyArgs) ToClusterUpgradePolicyDeltaHealthPolicyOutput() ClusterUpgradePolicyDeltaHealthPolicyOutput {
	return i.ToClusterUpgradePolicyDeltaHealthPolicyOutputWithContext(context.Background())
}

func (i ClusterUpgradePolicyDeltaHealthPolicyArgs) ToClusterUpgradePolicyDeltaHealthPolicyOutputWithContext(ctx context.Context) ClusterUpgradePolicyDeltaHealthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyDeltaHealthPolicyOutput)
}

func (i ClusterUpgradePolicyDeltaHealthPolicyArgs) ToClusterUpgradePolicyDeltaHealthPolicyPtrOutput() ClusterUpgradePolicyDeltaHealthPolicyPtrOutput {
	return i.ToClusterUpgradePolicyDeltaHealthPolicyPtrOutputWithContext(context.Background())
}

func (i ClusterUpgradePolicyDeltaHealthPolicyArgs) ToClusterUpgradePolicyDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyDeltaHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyDeltaHealthPolicyOutput).ToClusterUpgradePolicyDeltaHealthPolicyPtrOutputWithContext(ctx)
}

// ClusterUpgradePolicyDeltaHealthPolicyPtrInput is an input type that accepts ClusterUpgradePolicyDeltaHealthPolicyArgs, ClusterUpgradePolicyDeltaHealthPolicyPtr and ClusterUpgradePolicyDeltaHealthPolicyPtrOutput values.
// You can construct a concrete instance of `ClusterUpgradePolicyDeltaHealthPolicyPtrInput` via:
//
//          ClusterUpgradePolicyDeltaHealthPolicyArgs{...}
//
//  or:
//
//          nil
type ClusterUpgradePolicyDeltaHealthPolicyPtrInput interface {
	pulumi.Input

	ToClusterUpgradePolicyDeltaHealthPolicyPtrOutput() ClusterUpgradePolicyDeltaHealthPolicyPtrOutput
	ToClusterUpgradePolicyDeltaHealthPolicyPtrOutputWithContext(context.Context) ClusterUpgradePolicyDeltaHealthPolicyPtrOutput
}

type clusterUpgradePolicyDeltaHealthPolicyPtrType ClusterUpgradePolicyDeltaHealthPolicyArgs

func ClusterUpgradePolicyDeltaHealthPolicyPtr(v *ClusterUpgradePolicyDeltaHealthPolicyArgs) ClusterUpgradePolicyDeltaHealthPolicyPtrInput {
	return (*clusterUpgradePolicyDeltaHealthPolicyPtrType)(v)
}

func (*clusterUpgradePolicyDeltaHealthPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicyDeltaHealthPolicy)(nil)).Elem()
}

func (i *clusterUpgradePolicyDeltaHealthPolicyPtrType) ToClusterUpgradePolicyDeltaHealthPolicyPtrOutput() ClusterUpgradePolicyDeltaHealthPolicyPtrOutput {
	return i.ToClusterUpgradePolicyDeltaHealthPolicyPtrOutputWithContext(context.Background())
}

func (i *clusterUpgradePolicyDeltaHealthPolicyPtrType) ToClusterUpgradePolicyDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyDeltaHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyDeltaHealthPolicyPtrOutput)
}

type ClusterUpgradePolicyDeltaHealthPolicyOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyDeltaHealthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicyDeltaHealthPolicy)(nil)).Elem()
}

func (o ClusterUpgradePolicyDeltaHealthPolicyOutput) ToClusterUpgradePolicyDeltaHealthPolicyOutput() ClusterUpgradePolicyDeltaHealthPolicyOutput {
	return o
}

func (o ClusterUpgradePolicyDeltaHealthPolicyOutput) ToClusterUpgradePolicyDeltaHealthPolicyOutputWithContext(ctx context.Context) ClusterUpgradePolicyDeltaHealthPolicyOutput {
	return o
}

func (o ClusterUpgradePolicyDeltaHealthPolicyOutput) ToClusterUpgradePolicyDeltaHealthPolicyPtrOutput() ClusterUpgradePolicyDeltaHealthPolicyPtrOutput {
	return o.ToClusterUpgradePolicyDeltaHealthPolicyPtrOutputWithContext(context.Background())
}

func (o ClusterUpgradePolicyDeltaHealthPolicyOutput) ToClusterUpgradePolicyDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyDeltaHealthPolicyPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyDeltaHealthPolicy) *ClusterUpgradePolicyDeltaHealthPolicy {
		return &v
	}).(ClusterUpgradePolicyDeltaHealthPolicyPtrOutput)
}
func (o ClusterUpgradePolicyDeltaHealthPolicyOutput) MaxDeltaUnhealthyApplicationsPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyDeltaHealthPolicy) *int { return v.MaxDeltaUnhealthyApplicationsPercent }).(pulumi.IntPtrOutput)
}

func (o ClusterUpgradePolicyDeltaHealthPolicyOutput) MaxDeltaUnhealthyNodesPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyDeltaHealthPolicy) *int { return v.MaxDeltaUnhealthyNodesPercent }).(pulumi.IntPtrOutput)
}

func (o ClusterUpgradePolicyDeltaHealthPolicyOutput) MaxUpgradeDomainDeltaUnhealthyNodesPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyDeltaHealthPolicy) *int {
		return v.MaxUpgradeDomainDeltaUnhealthyNodesPercent
	}).(pulumi.IntPtrOutput)
}

type ClusterUpgradePolicyDeltaHealthPolicyPtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyDeltaHealthPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicyDeltaHealthPolicy)(nil)).Elem()
}

func (o ClusterUpgradePolicyDeltaHealthPolicyPtrOutput) ToClusterUpgradePolicyDeltaHealthPolicyPtrOutput() ClusterUpgradePolicyDeltaHealthPolicyPtrOutput {
	return o
}

func (o ClusterUpgradePolicyDeltaHealthPolicyPtrOutput) ToClusterUpgradePolicyDeltaHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyDeltaHealthPolicyPtrOutput {
	return o
}

func (o ClusterUpgradePolicyDeltaHealthPolicyPtrOutput) Elem() ClusterUpgradePolicyDeltaHealthPolicyOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyDeltaHealthPolicy) ClusterUpgradePolicyDeltaHealthPolicy { return *v }).(ClusterUpgradePolicyDeltaHealthPolicyOutput)
}

func (o ClusterUpgradePolicyDeltaHealthPolicyPtrOutput) MaxDeltaUnhealthyApplicationsPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyDeltaHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeltaUnhealthyApplicationsPercent
	}).(pulumi.IntPtrOutput)
}

func (o ClusterUpgradePolicyDeltaHealthPolicyPtrOutput) MaxDeltaUnhealthyNodesPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyDeltaHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxDeltaUnhealthyNodesPercent
	}).(pulumi.IntPtrOutput)
}

func (o ClusterUpgradePolicyDeltaHealthPolicyPtrOutput) MaxUpgradeDomainDeltaUnhealthyNodesPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyDeltaHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxUpgradeDomainDeltaUnhealthyNodesPercent
	}).(pulumi.IntPtrOutput)
}

type ClusterUpgradePolicyHealthPolicy struct {
	MaxUnhealthyApplicationsPercent *int `pulumi:"maxUnhealthyApplicationsPercent"`
	MaxUnhealthyNodesPercent        *int `pulumi:"maxUnhealthyNodesPercent"`
}

// ClusterUpgradePolicyHealthPolicyInput is an input type that accepts ClusterUpgradePolicyHealthPolicyArgs and ClusterUpgradePolicyHealthPolicyOutput values.
// You can construct a concrete instance of `ClusterUpgradePolicyHealthPolicyInput` via:
//
//          ClusterUpgradePolicyHealthPolicyArgs{...}
type ClusterUpgradePolicyHealthPolicyInput interface {
	pulumi.Input

	ToClusterUpgradePolicyHealthPolicyOutput() ClusterUpgradePolicyHealthPolicyOutput
	ToClusterUpgradePolicyHealthPolicyOutputWithContext(context.Context) ClusterUpgradePolicyHealthPolicyOutput
}

type ClusterUpgradePolicyHealthPolicyArgs struct {
	MaxUnhealthyApplicationsPercent pulumi.IntPtrInput `pulumi:"maxUnhealthyApplicationsPercent"`
	MaxUnhealthyNodesPercent        pulumi.IntPtrInput `pulumi:"maxUnhealthyNodesPercent"`
}

func (ClusterUpgradePolicyHealthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicyHealthPolicy)(nil)).Elem()
}

func (i ClusterUpgradePolicyHealthPolicyArgs) ToClusterUpgradePolicyHealthPolicyOutput() ClusterUpgradePolicyHealthPolicyOutput {
	return i.ToClusterUpgradePolicyHealthPolicyOutputWithContext(context.Background())
}

func (i ClusterUpgradePolicyHealthPolicyArgs) ToClusterUpgradePolicyHealthPolicyOutputWithContext(ctx context.Context) ClusterUpgradePolicyHealthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyHealthPolicyOutput)
}

func (i ClusterUpgradePolicyHealthPolicyArgs) ToClusterUpgradePolicyHealthPolicyPtrOutput() ClusterUpgradePolicyHealthPolicyPtrOutput {
	return i.ToClusterUpgradePolicyHealthPolicyPtrOutputWithContext(context.Background())
}

func (i ClusterUpgradePolicyHealthPolicyArgs) ToClusterUpgradePolicyHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyHealthPolicyOutput).ToClusterUpgradePolicyHealthPolicyPtrOutputWithContext(ctx)
}

// ClusterUpgradePolicyHealthPolicyPtrInput is an input type that accepts ClusterUpgradePolicyHealthPolicyArgs, ClusterUpgradePolicyHealthPolicyPtr and ClusterUpgradePolicyHealthPolicyPtrOutput values.
// You can construct a concrete instance of `ClusterUpgradePolicyHealthPolicyPtrInput` via:
//
//          ClusterUpgradePolicyHealthPolicyArgs{...}
//
//  or:
//
//          nil
type ClusterUpgradePolicyHealthPolicyPtrInput interface {
	pulumi.Input

	ToClusterUpgradePolicyHealthPolicyPtrOutput() ClusterUpgradePolicyHealthPolicyPtrOutput
	ToClusterUpgradePolicyHealthPolicyPtrOutputWithContext(context.Context) ClusterUpgradePolicyHealthPolicyPtrOutput
}

type clusterUpgradePolicyHealthPolicyPtrType ClusterUpgradePolicyHealthPolicyArgs

func ClusterUpgradePolicyHealthPolicyPtr(v *ClusterUpgradePolicyHealthPolicyArgs) ClusterUpgradePolicyHealthPolicyPtrInput {
	return (*clusterUpgradePolicyHealthPolicyPtrType)(v)
}

func (*clusterUpgradePolicyHealthPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicyHealthPolicy)(nil)).Elem()
}

func (i *clusterUpgradePolicyHealthPolicyPtrType) ToClusterUpgradePolicyHealthPolicyPtrOutput() ClusterUpgradePolicyHealthPolicyPtrOutput {
	return i.ToClusterUpgradePolicyHealthPolicyPtrOutputWithContext(context.Background())
}

func (i *clusterUpgradePolicyHealthPolicyPtrType) ToClusterUpgradePolicyHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyHealthPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePolicyHealthPolicyPtrOutput)
}

type ClusterUpgradePolicyHealthPolicyOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyHealthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePolicyHealthPolicy)(nil)).Elem()
}

func (o ClusterUpgradePolicyHealthPolicyOutput) ToClusterUpgradePolicyHealthPolicyOutput() ClusterUpgradePolicyHealthPolicyOutput {
	return o
}

func (o ClusterUpgradePolicyHealthPolicyOutput) ToClusterUpgradePolicyHealthPolicyOutputWithContext(ctx context.Context) ClusterUpgradePolicyHealthPolicyOutput {
	return o
}

func (o ClusterUpgradePolicyHealthPolicyOutput) ToClusterUpgradePolicyHealthPolicyPtrOutput() ClusterUpgradePolicyHealthPolicyPtrOutput {
	return o.ToClusterUpgradePolicyHealthPolicyPtrOutputWithContext(context.Background())
}

func (o ClusterUpgradePolicyHealthPolicyOutput) ToClusterUpgradePolicyHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyHealthPolicyPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyHealthPolicy) *ClusterUpgradePolicyHealthPolicy {
		return &v
	}).(ClusterUpgradePolicyHealthPolicyPtrOutput)
}
func (o ClusterUpgradePolicyHealthPolicyOutput) MaxUnhealthyApplicationsPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyHealthPolicy) *int { return v.MaxUnhealthyApplicationsPercent }).(pulumi.IntPtrOutput)
}

func (o ClusterUpgradePolicyHealthPolicyOutput) MaxUnhealthyNodesPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterUpgradePolicyHealthPolicy) *int { return v.MaxUnhealthyNodesPercent }).(pulumi.IntPtrOutput)
}

type ClusterUpgradePolicyHealthPolicyPtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePolicyHealthPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePolicyHealthPolicy)(nil)).Elem()
}

func (o ClusterUpgradePolicyHealthPolicyPtrOutput) ToClusterUpgradePolicyHealthPolicyPtrOutput() ClusterUpgradePolicyHealthPolicyPtrOutput {
	return o
}

func (o ClusterUpgradePolicyHealthPolicyPtrOutput) ToClusterUpgradePolicyHealthPolicyPtrOutputWithContext(ctx context.Context) ClusterUpgradePolicyHealthPolicyPtrOutput {
	return o
}

func (o ClusterUpgradePolicyHealthPolicyPtrOutput) Elem() ClusterUpgradePolicyHealthPolicyOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyHealthPolicy) ClusterUpgradePolicyHealthPolicy { return *v }).(ClusterUpgradePolicyHealthPolicyOutput)
}

func (o ClusterUpgradePolicyHealthPolicyPtrOutput) MaxUnhealthyApplicationsPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnhealthyApplicationsPercent
	}).(pulumi.IntPtrOutput)
}

func (o ClusterUpgradePolicyHealthPolicyPtrOutput) MaxUnhealthyNodesPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePolicyHealthPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnhealthyNodesPercent
	}).(pulumi.IntPtrOutput)
}

type MeshApplicationService struct {
	// Any number `codePackage` block as described below.
	CodePackages []MeshApplicationServiceCodePackage `pulumi:"codePackages"`
	// The name of the service resource.
	Name string `pulumi:"name"`
	// The operating system required by the code in service. Valid values are `Linux` or `Windows`.
	OsType string `pulumi:"osType"`
}

// MeshApplicationServiceInput is an input type that accepts MeshApplicationServiceArgs and MeshApplicationServiceOutput values.
// You can construct a concrete instance of `MeshApplicationServiceInput` via:
//
//          MeshApplicationServiceArgs{...}
type MeshApplicationServiceInput interface {
	pulumi.Input

	ToMeshApplicationServiceOutput() MeshApplicationServiceOutput
	ToMeshApplicationServiceOutputWithContext(context.Context) MeshApplicationServiceOutput
}

type MeshApplicationServiceArgs struct {
	// Any number `codePackage` block as described below.
	CodePackages MeshApplicationServiceCodePackageArrayInput `pulumi:"codePackages"`
	// The name of the service resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The operating system required by the code in service. Valid values are `Linux` or `Windows`.
	OsType pulumi.StringInput `pulumi:"osType"`
}

func (MeshApplicationServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshApplicationService)(nil)).Elem()
}

func (i MeshApplicationServiceArgs) ToMeshApplicationServiceOutput() MeshApplicationServiceOutput {
	return i.ToMeshApplicationServiceOutputWithContext(context.Background())
}

func (i MeshApplicationServiceArgs) ToMeshApplicationServiceOutputWithContext(ctx context.Context) MeshApplicationServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshApplicationServiceOutput)
}

// MeshApplicationServiceArrayInput is an input type that accepts MeshApplicationServiceArray and MeshApplicationServiceArrayOutput values.
// You can construct a concrete instance of `MeshApplicationServiceArrayInput` via:
//
//          MeshApplicationServiceArray{ MeshApplicationServiceArgs{...} }
type MeshApplicationServiceArrayInput interface {
	pulumi.Input

	ToMeshApplicationServiceArrayOutput() MeshApplicationServiceArrayOutput
	ToMeshApplicationServiceArrayOutputWithContext(context.Context) MeshApplicationServiceArrayOutput
}

type MeshApplicationServiceArray []MeshApplicationServiceInput

func (MeshApplicationServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MeshApplicationService)(nil)).Elem()
}

func (i MeshApplicationServiceArray) ToMeshApplicationServiceArrayOutput() MeshApplicationServiceArrayOutput {
	return i.ToMeshApplicationServiceArrayOutputWithContext(context.Background())
}

func (i MeshApplicationServiceArray) ToMeshApplicationServiceArrayOutputWithContext(ctx context.Context) MeshApplicationServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshApplicationServiceArrayOutput)
}

type MeshApplicationServiceOutput struct{ *pulumi.OutputState }

func (MeshApplicationServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshApplicationService)(nil)).Elem()
}

func (o MeshApplicationServiceOutput) ToMeshApplicationServiceOutput() MeshApplicationServiceOutput {
	return o
}

func (o MeshApplicationServiceOutput) ToMeshApplicationServiceOutputWithContext(ctx context.Context) MeshApplicationServiceOutput {
	return o
}

// Any number `codePackage` block as described below.
func (o MeshApplicationServiceOutput) CodePackages() MeshApplicationServiceCodePackageArrayOutput {
	return o.ApplyT(func(v MeshApplicationService) []MeshApplicationServiceCodePackage { return v.CodePackages }).(MeshApplicationServiceCodePackageArrayOutput)
}

// The name of the service resource.
func (o MeshApplicationServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MeshApplicationService) string { return v.Name }).(pulumi.StringOutput)
}

// The operating system required by the code in service. Valid values are `Linux` or `Windows`.
func (o MeshApplicationServiceOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v MeshApplicationService) string { return v.OsType }).(pulumi.StringOutput)
}

type MeshApplicationServiceArrayOutput struct{ *pulumi.OutputState }

func (MeshApplicationServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MeshApplicationService)(nil)).Elem()
}

func (o MeshApplicationServiceArrayOutput) ToMeshApplicationServiceArrayOutput() MeshApplicationServiceArrayOutput {
	return o
}

func (o MeshApplicationServiceArrayOutput) ToMeshApplicationServiceArrayOutputWithContext(ctx context.Context) MeshApplicationServiceArrayOutput {
	return o
}

func (o MeshApplicationServiceArrayOutput) Index(i pulumi.IntInput) MeshApplicationServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MeshApplicationService {
		return vs[0].([]MeshApplicationService)[vs[1].(int)]
	}).(MeshApplicationServiceOutput)
}

type MeshApplicationServiceCodePackage struct {
	// The Container image the code package will use.
	ImageName string `pulumi:"imageName"`
	// The name of the code package.
	Name string `pulumi:"name"`
	// A `resources` block as defined below.
	Resources MeshApplicationServiceCodePackageResources `pulumi:"resources"`
}

// MeshApplicationServiceCodePackageInput is an input type that accepts MeshApplicationServiceCodePackageArgs and MeshApplicationServiceCodePackageOutput values.
// You can construct a concrete instance of `MeshApplicationServiceCodePackageInput` via:
//
//          MeshApplicationServiceCodePackageArgs{...}
type MeshApplicationServiceCodePackageInput interface {
	pulumi.Input

	ToMeshApplicationServiceCodePackageOutput() MeshApplicationServiceCodePackageOutput
	ToMeshApplicationServiceCodePackageOutputWithContext(context.Context) MeshApplicationServiceCodePackageOutput
}

type MeshApplicationServiceCodePackageArgs struct {
	// The Container image the code package will use.
	ImageName pulumi.StringInput `pulumi:"imageName"`
	// The name of the code package.
	Name pulumi.StringInput `pulumi:"name"`
	// A `resources` block as defined below.
	Resources MeshApplicationServiceCodePackageResourcesInput `pulumi:"resources"`
}

func (MeshApplicationServiceCodePackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshApplicationServiceCodePackage)(nil)).Elem()
}

func (i MeshApplicationServiceCodePackageArgs) ToMeshApplicationServiceCodePackageOutput() MeshApplicationServiceCodePackageOutput {
	return i.ToMeshApplicationServiceCodePackageOutputWithContext(context.Background())
}

func (i MeshApplicationServiceCodePackageArgs) ToMeshApplicationServiceCodePackageOutputWithContext(ctx context.Context) MeshApplicationServiceCodePackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshApplicationServiceCodePackageOutput)
}

// MeshApplicationServiceCodePackageArrayInput is an input type that accepts MeshApplicationServiceCodePackageArray and MeshApplicationServiceCodePackageArrayOutput values.
// You can construct a concrete instance of `MeshApplicationServiceCodePackageArrayInput` via:
//
//          MeshApplicationServiceCodePackageArray{ MeshApplicationServiceCodePackageArgs{...} }
type MeshApplicationServiceCodePackageArrayInput interface {
	pulumi.Input

	ToMeshApplicationServiceCodePackageArrayOutput() MeshApplicationServiceCodePackageArrayOutput
	ToMeshApplicationServiceCodePackageArrayOutputWithContext(context.Context) MeshApplicationServiceCodePackageArrayOutput
}

type MeshApplicationServiceCodePackageArray []MeshApplicationServiceCodePackageInput

func (MeshApplicationServiceCodePackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MeshApplicationServiceCodePackage)(nil)).Elem()
}

func (i MeshApplicationServiceCodePackageArray) ToMeshApplicationServiceCodePackageArrayOutput() MeshApplicationServiceCodePackageArrayOutput {
	return i.ToMeshApplicationServiceCodePackageArrayOutputWithContext(context.Background())
}

func (i MeshApplicationServiceCodePackageArray) ToMeshApplicationServiceCodePackageArrayOutputWithContext(ctx context.Context) MeshApplicationServiceCodePackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshApplicationServiceCodePackageArrayOutput)
}

type MeshApplicationServiceCodePackageOutput struct{ *pulumi.OutputState }

func (MeshApplicationServiceCodePackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshApplicationServiceCodePackage)(nil)).Elem()
}

func (o MeshApplicationServiceCodePackageOutput) ToMeshApplicationServiceCodePackageOutput() MeshApplicationServiceCodePackageOutput {
	return o
}

func (o MeshApplicationServiceCodePackageOutput) ToMeshApplicationServiceCodePackageOutputWithContext(ctx context.Context) MeshApplicationServiceCodePackageOutput {
	return o
}

// The Container image the code package will use.
func (o MeshApplicationServiceCodePackageOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v MeshApplicationServiceCodePackage) string { return v.ImageName }).(pulumi.StringOutput)
}

// The name of the code package.
func (o MeshApplicationServiceCodePackageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MeshApplicationServiceCodePackage) string { return v.Name }).(pulumi.StringOutput)
}

// A `resources` block as defined below.
func (o MeshApplicationServiceCodePackageOutput) Resources() MeshApplicationServiceCodePackageResourcesOutput {
	return o.ApplyT(func(v MeshApplicationServiceCodePackage) MeshApplicationServiceCodePackageResources {
		return v.Resources
	}).(MeshApplicationServiceCodePackageResourcesOutput)
}

type MeshApplicationServiceCodePackageArrayOutput struct{ *pulumi.OutputState }

func (MeshApplicationServiceCodePackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MeshApplicationServiceCodePackage)(nil)).Elem()
}

func (o MeshApplicationServiceCodePackageArrayOutput) ToMeshApplicationServiceCodePackageArrayOutput() MeshApplicationServiceCodePackageArrayOutput {
	return o
}

func (o MeshApplicationServiceCodePackageArrayOutput) ToMeshApplicationServiceCodePackageArrayOutputWithContext(ctx context.Context) MeshApplicationServiceCodePackageArrayOutput {
	return o
}

func (o MeshApplicationServiceCodePackageArrayOutput) Index(i pulumi.IntInput) MeshApplicationServiceCodePackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MeshApplicationServiceCodePackage {
		return vs[0].([]MeshApplicationServiceCodePackage)[vs[1].(int)]
	}).(MeshApplicationServiceCodePackageOutput)
}

type MeshApplicationServiceCodePackageResources struct {
	// A `limits` block as defined below.
	Limits *MeshApplicationServiceCodePackageResourcesLimits `pulumi:"limits"`
	// A `requests` block as defined below.
	Requests MeshApplicationServiceCodePackageResourcesRequests `pulumi:"requests"`
}

// MeshApplicationServiceCodePackageResourcesInput is an input type that accepts MeshApplicationServiceCodePackageResourcesArgs and MeshApplicationServiceCodePackageResourcesOutput values.
// You can construct a concrete instance of `MeshApplicationServiceCodePackageResourcesInput` via:
//
//          MeshApplicationServiceCodePackageResourcesArgs{...}
type MeshApplicationServiceCodePackageResourcesInput interface {
	pulumi.Input

	ToMeshApplicationServiceCodePackageResourcesOutput() MeshApplicationServiceCodePackageResourcesOutput
	ToMeshApplicationServiceCodePackageResourcesOutputWithContext(context.Context) MeshApplicationServiceCodePackageResourcesOutput
}

type MeshApplicationServiceCodePackageResourcesArgs struct {
	// A `limits` block as defined below.
	Limits MeshApplicationServiceCodePackageResourcesLimitsPtrInput `pulumi:"limits"`
	// A `requests` block as defined below.
	Requests MeshApplicationServiceCodePackageResourcesRequestsInput `pulumi:"requests"`
}

func (MeshApplicationServiceCodePackageResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshApplicationServiceCodePackageResources)(nil)).Elem()
}

func (i MeshApplicationServiceCodePackageResourcesArgs) ToMeshApplicationServiceCodePackageResourcesOutput() MeshApplicationServiceCodePackageResourcesOutput {
	return i.ToMeshApplicationServiceCodePackageResourcesOutputWithContext(context.Background())
}

func (i MeshApplicationServiceCodePackageResourcesArgs) ToMeshApplicationServiceCodePackageResourcesOutputWithContext(ctx context.Context) MeshApplicationServiceCodePackageResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshApplicationServiceCodePackageResourcesOutput)
}

type MeshApplicationServiceCodePackageResourcesOutput struct{ *pulumi.OutputState }

func (MeshApplicationServiceCodePackageResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshApplicationServiceCodePackageResources)(nil)).Elem()
}

func (o MeshApplicationServiceCodePackageResourcesOutput) ToMeshApplicationServiceCodePackageResourcesOutput() MeshApplicationServiceCodePackageResourcesOutput {
	return o
}

func (o MeshApplicationServiceCodePackageResourcesOutput) ToMeshApplicationServiceCodePackageResourcesOutputWithContext(ctx context.Context) MeshApplicationServiceCodePackageResourcesOutput {
	return o
}

// A `limits` block as defined below.
func (o MeshApplicationServiceCodePackageResourcesOutput) Limits() MeshApplicationServiceCodePackageResourcesLimitsPtrOutput {
	return o.ApplyT(func(v MeshApplicationServiceCodePackageResources) *MeshApplicationServiceCodePackageResourcesLimits {
		return v.Limits
	}).(MeshApplicationServiceCodePackageResourcesLimitsPtrOutput)
}

// A `requests` block as defined below.
func (o MeshApplicationServiceCodePackageResourcesOutput) Requests() MeshApplicationServiceCodePackageResourcesRequestsOutput {
	return o.ApplyT(func(v MeshApplicationServiceCodePackageResources) MeshApplicationServiceCodePackageResourcesRequests {
		return v.Requests
	}).(MeshApplicationServiceCodePackageResourcesRequestsOutput)
}

type MeshApplicationServiceCodePackageResourcesLimits struct {
	// The maximum number of CPU cores the container can use.
	Cpu float64 `pulumi:"cpu"`
	// The maximum memory request in GB the container can use.
	Memory float64 `pulumi:"memory"`
}

// MeshApplicationServiceCodePackageResourcesLimitsInput is an input type that accepts MeshApplicationServiceCodePackageResourcesLimitsArgs and MeshApplicationServiceCodePackageResourcesLimitsOutput values.
// You can construct a concrete instance of `MeshApplicationServiceCodePackageResourcesLimitsInput` via:
//
//          MeshApplicationServiceCodePackageResourcesLimitsArgs{...}
type MeshApplicationServiceCodePackageResourcesLimitsInput interface {
	pulumi.Input

	ToMeshApplicationServiceCodePackageResourcesLimitsOutput() MeshApplicationServiceCodePackageResourcesLimitsOutput
	ToMeshApplicationServiceCodePackageResourcesLimitsOutputWithContext(context.Context) MeshApplicationServiceCodePackageResourcesLimitsOutput
}

type MeshApplicationServiceCodePackageResourcesLimitsArgs struct {
	// The maximum number of CPU cores the container can use.
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// The maximum memory request in GB the container can use.
	Memory pulumi.Float64Input `pulumi:"memory"`
}

func (MeshApplicationServiceCodePackageResourcesLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshApplicationServiceCodePackageResourcesLimits)(nil)).Elem()
}

func (i MeshApplicationServiceCodePackageResourcesLimitsArgs) ToMeshApplicationServiceCodePackageResourcesLimitsOutput() MeshApplicationServiceCodePackageResourcesLimitsOutput {
	return i.ToMeshApplicationServiceCodePackageResourcesLimitsOutputWithContext(context.Background())
}

func (i MeshApplicationServiceCodePackageResourcesLimitsArgs) ToMeshApplicationServiceCodePackageResourcesLimitsOutputWithContext(ctx context.Context) MeshApplicationServiceCodePackageResourcesLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshApplicationServiceCodePackageResourcesLimitsOutput)
}

func (i MeshApplicationServiceCodePackageResourcesLimitsArgs) ToMeshApplicationServiceCodePackageResourcesLimitsPtrOutput() MeshApplicationServiceCodePackageResourcesLimitsPtrOutput {
	return i.ToMeshApplicationServiceCodePackageResourcesLimitsPtrOutputWithContext(context.Background())
}

func (i MeshApplicationServiceCodePackageResourcesLimitsArgs) ToMeshApplicationServiceCodePackageResourcesLimitsPtrOutputWithContext(ctx context.Context) MeshApplicationServiceCodePackageResourcesLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshApplicationServiceCodePackageResourcesLimitsOutput).ToMeshApplicationServiceCodePackageResourcesLimitsPtrOutputWithContext(ctx)
}

// MeshApplicationServiceCodePackageResourcesLimitsPtrInput is an input type that accepts MeshApplicationServiceCodePackageResourcesLimitsArgs, MeshApplicationServiceCodePackageResourcesLimitsPtr and MeshApplicationServiceCodePackageResourcesLimitsPtrOutput values.
// You can construct a concrete instance of `MeshApplicationServiceCodePackageResourcesLimitsPtrInput` via:
//
//          MeshApplicationServiceCodePackageResourcesLimitsArgs{...}
//
//  or:
//
//          nil
type MeshApplicationServiceCodePackageResourcesLimitsPtrInput interface {
	pulumi.Input

	ToMeshApplicationServiceCodePackageResourcesLimitsPtrOutput() MeshApplicationServiceCodePackageResourcesLimitsPtrOutput
	ToMeshApplicationServiceCodePackageResourcesLimitsPtrOutputWithContext(context.Context) MeshApplicationServiceCodePackageResourcesLimitsPtrOutput
}

type meshApplicationServiceCodePackageResourcesLimitsPtrType MeshApplicationServiceCodePackageResourcesLimitsArgs

func MeshApplicationServiceCodePackageResourcesLimitsPtr(v *MeshApplicationServiceCodePackageResourcesLimitsArgs) MeshApplicationServiceCodePackageResourcesLimitsPtrInput {
	return (*meshApplicationServiceCodePackageResourcesLimitsPtrType)(v)
}

func (*meshApplicationServiceCodePackageResourcesLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MeshApplicationServiceCodePackageResourcesLimits)(nil)).Elem()
}

func (i *meshApplicationServiceCodePackageResourcesLimitsPtrType) ToMeshApplicationServiceCodePackageResourcesLimitsPtrOutput() MeshApplicationServiceCodePackageResourcesLimitsPtrOutput {
	return i.ToMeshApplicationServiceCodePackageResourcesLimitsPtrOutputWithContext(context.Background())
}

func (i *meshApplicationServiceCodePackageResourcesLimitsPtrType) ToMeshApplicationServiceCodePackageResourcesLimitsPtrOutputWithContext(ctx context.Context) MeshApplicationServiceCodePackageResourcesLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshApplicationServiceCodePackageResourcesLimitsPtrOutput)
}

type MeshApplicationServiceCodePackageResourcesLimitsOutput struct{ *pulumi.OutputState }

func (MeshApplicationServiceCodePackageResourcesLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshApplicationServiceCodePackageResourcesLimits)(nil)).Elem()
}

func (o MeshApplicationServiceCodePackageResourcesLimitsOutput) ToMeshApplicationServiceCodePackageResourcesLimitsOutput() MeshApplicationServiceCodePackageResourcesLimitsOutput {
	return o
}

func (o MeshApplicationServiceCodePackageResourcesLimitsOutput) ToMeshApplicationServiceCodePackageResourcesLimitsOutputWithContext(ctx context.Context) MeshApplicationServiceCodePackageResourcesLimitsOutput {
	return o
}

func (o MeshApplicationServiceCodePackageResourcesLimitsOutput) ToMeshApplicationServiceCodePackageResourcesLimitsPtrOutput() MeshApplicationServiceCodePackageResourcesLimitsPtrOutput {
	return o.ToMeshApplicationServiceCodePackageResourcesLimitsPtrOutputWithContext(context.Background())
}

func (o MeshApplicationServiceCodePackageResourcesLimitsOutput) ToMeshApplicationServiceCodePackageResourcesLimitsPtrOutputWithContext(ctx context.Context) MeshApplicationServiceCodePackageResourcesLimitsPtrOutput {
	return o.ApplyT(func(v MeshApplicationServiceCodePackageResourcesLimits) *MeshApplicationServiceCodePackageResourcesLimits {
		return &v
	}).(MeshApplicationServiceCodePackageResourcesLimitsPtrOutput)
}

// The maximum number of CPU cores the container can use.
func (o MeshApplicationServiceCodePackageResourcesLimitsOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v MeshApplicationServiceCodePackageResourcesLimits) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The maximum memory request in GB the container can use.
func (o MeshApplicationServiceCodePackageResourcesLimitsOutput) Memory() pulumi.Float64Output {
	return o.ApplyT(func(v MeshApplicationServiceCodePackageResourcesLimits) float64 { return v.Memory }).(pulumi.Float64Output)
}

type MeshApplicationServiceCodePackageResourcesLimitsPtrOutput struct{ *pulumi.OutputState }

func (MeshApplicationServiceCodePackageResourcesLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeshApplicationServiceCodePackageResourcesLimits)(nil)).Elem()
}

func (o MeshApplicationServiceCodePackageResourcesLimitsPtrOutput) ToMeshApplicationServiceCodePackageResourcesLimitsPtrOutput() MeshApplicationServiceCodePackageResourcesLimitsPtrOutput {
	return o
}

func (o MeshApplicationServiceCodePackageResourcesLimitsPtrOutput) ToMeshApplicationServiceCodePackageResourcesLimitsPtrOutputWithContext(ctx context.Context) MeshApplicationServiceCodePackageResourcesLimitsPtrOutput {
	return o
}

func (o MeshApplicationServiceCodePackageResourcesLimitsPtrOutput) Elem() MeshApplicationServiceCodePackageResourcesLimitsOutput {
	return o.ApplyT(func(v *MeshApplicationServiceCodePackageResourcesLimits) MeshApplicationServiceCodePackageResourcesLimits {
		return *v
	}).(MeshApplicationServiceCodePackageResourcesLimitsOutput)
}

// The maximum number of CPU cores the container can use.
func (o MeshApplicationServiceCodePackageResourcesLimitsPtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MeshApplicationServiceCodePackageResourcesLimits) *float64 {
		if v == nil {
			return nil
		}
		return &v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// The maximum memory request in GB the container can use.
func (o MeshApplicationServiceCodePackageResourcesLimitsPtrOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MeshApplicationServiceCodePackageResourcesLimits) *float64 {
		if v == nil {
			return nil
		}
		return &v.Memory
	}).(pulumi.Float64PtrOutput)
}

type MeshApplicationServiceCodePackageResourcesRequests struct {
	// The minimum number of CPU cores the container requires.
	Cpu float64 `pulumi:"cpu"`
	// The minimum memory request in GB the container requires.
	Memory float64 `pulumi:"memory"`
}

// MeshApplicationServiceCodePackageResourcesRequestsInput is an input type that accepts MeshApplicationServiceCodePackageResourcesRequestsArgs and MeshApplicationServiceCodePackageResourcesRequestsOutput values.
// You can construct a concrete instance of `MeshApplicationServiceCodePackageResourcesRequestsInput` via:
//
//          MeshApplicationServiceCodePackageResourcesRequestsArgs{...}
type MeshApplicationServiceCodePackageResourcesRequestsInput interface {
	pulumi.Input

	ToMeshApplicationServiceCodePackageResourcesRequestsOutput() MeshApplicationServiceCodePackageResourcesRequestsOutput
	ToMeshApplicationServiceCodePackageResourcesRequestsOutputWithContext(context.Context) MeshApplicationServiceCodePackageResourcesRequestsOutput
}

type MeshApplicationServiceCodePackageResourcesRequestsArgs struct {
	// The minimum number of CPU cores the container requires.
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// The minimum memory request in GB the container requires.
	Memory pulumi.Float64Input `pulumi:"memory"`
}

func (MeshApplicationServiceCodePackageResourcesRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshApplicationServiceCodePackageResourcesRequests)(nil)).Elem()
}

func (i MeshApplicationServiceCodePackageResourcesRequestsArgs) ToMeshApplicationServiceCodePackageResourcesRequestsOutput() MeshApplicationServiceCodePackageResourcesRequestsOutput {
	return i.ToMeshApplicationServiceCodePackageResourcesRequestsOutputWithContext(context.Background())
}

func (i MeshApplicationServiceCodePackageResourcesRequestsArgs) ToMeshApplicationServiceCodePackageResourcesRequestsOutputWithContext(ctx context.Context) MeshApplicationServiceCodePackageResourcesRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshApplicationServiceCodePackageResourcesRequestsOutput)
}

type MeshApplicationServiceCodePackageResourcesRequestsOutput struct{ *pulumi.OutputState }

func (MeshApplicationServiceCodePackageResourcesRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MeshApplicationServiceCodePackageResourcesRequests)(nil)).Elem()
}

func (o MeshApplicationServiceCodePackageResourcesRequestsOutput) ToMeshApplicationServiceCodePackageResourcesRequestsOutput() MeshApplicationServiceCodePackageResourcesRequestsOutput {
	return o
}

func (o MeshApplicationServiceCodePackageResourcesRequestsOutput) ToMeshApplicationServiceCodePackageResourcesRequestsOutputWithContext(ctx context.Context) MeshApplicationServiceCodePackageResourcesRequestsOutput {
	return o
}

// The minimum number of CPU cores the container requires.
func (o MeshApplicationServiceCodePackageResourcesRequestsOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v MeshApplicationServiceCodePackageResourcesRequests) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The minimum memory request in GB the container requires.
func (o MeshApplicationServiceCodePackageResourcesRequestsOutput) Memory() pulumi.Float64Output {
	return o.ApplyT(func(v MeshApplicationServiceCodePackageResourcesRequests) float64 { return v.Memory }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterOutputType(ClusterAzureActiveDirectoryOutput{})
	pulumi.RegisterOutputType(ClusterAzureActiveDirectoryPtrOutput{})
	pulumi.RegisterOutputType(ClusterCertificateOutput{})
	pulumi.RegisterOutputType(ClusterCertificatePtrOutput{})
	pulumi.RegisterOutputType(ClusterCertificateCommonNamesOutput{})
	pulumi.RegisterOutputType(ClusterCertificateCommonNamesPtrOutput{})
	pulumi.RegisterOutputType(ClusterCertificateCommonNamesCommonNameOutput{})
	pulumi.RegisterOutputType(ClusterCertificateCommonNamesCommonNameArrayOutput{})
	pulumi.RegisterOutputType(ClusterClientCertificateCommonNameOutput{})
	pulumi.RegisterOutputType(ClusterClientCertificateCommonNameArrayOutput{})
	pulumi.RegisterOutputType(ClusterClientCertificateThumbprintOutput{})
	pulumi.RegisterOutputType(ClusterClientCertificateThumbprintArrayOutput{})
	pulumi.RegisterOutputType(ClusterDiagnosticsConfigOutput{})
	pulumi.RegisterOutputType(ClusterDiagnosticsConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterFabricSettingOutput{})
	pulumi.RegisterOutputType(ClusterFabricSettingArrayOutput{})
	pulumi.RegisterOutputType(ClusterNodeTypeOutput{})
	pulumi.RegisterOutputType(ClusterNodeTypeArrayOutput{})
	pulumi.RegisterOutputType(ClusterNodeTypeApplicationPortsOutput{})
	pulumi.RegisterOutputType(ClusterNodeTypeApplicationPortsPtrOutput{})
	pulumi.RegisterOutputType(ClusterNodeTypeEphemeralPortsOutput{})
	pulumi.RegisterOutputType(ClusterNodeTypeEphemeralPortsPtrOutput{})
	pulumi.RegisterOutputType(ClusterReverseProxyCertificateOutput{})
	pulumi.RegisterOutputType(ClusterReverseProxyCertificatePtrOutput{})
	pulumi.RegisterOutputType(ClusterReverseProxyCertificateCommonNamesOutput{})
	pulumi.RegisterOutputType(ClusterReverseProxyCertificateCommonNamesPtrOutput{})
	pulumi.RegisterOutputType(ClusterReverseProxyCertificateCommonNamesCommonNameOutput{})
	pulumi.RegisterOutputType(ClusterReverseProxyCertificateCommonNamesCommonNameArrayOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyPtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyDeltaHealthPolicyOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyDeltaHealthPolicyPtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyHealthPolicyOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePolicyHealthPolicyPtrOutput{})
	pulumi.RegisterOutputType(MeshApplicationServiceOutput{})
	pulumi.RegisterOutputType(MeshApplicationServiceArrayOutput{})
	pulumi.RegisterOutputType(MeshApplicationServiceCodePackageOutput{})
	pulumi.RegisterOutputType(MeshApplicationServiceCodePackageArrayOutput{})
	pulumi.RegisterOutputType(MeshApplicationServiceCodePackageResourcesOutput{})
	pulumi.RegisterOutputType(MeshApplicationServiceCodePackageResourcesLimitsOutput{})
	pulumi.RegisterOutputType(MeshApplicationServiceCodePackageResourcesLimitsPtrOutput{})
	pulumi.RegisterOutputType(MeshApplicationServiceCodePackageResourcesRequestsOutput{})
}
