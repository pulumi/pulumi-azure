// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package servicefabric

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ClusterAzureActiveDirectory struct {
	// The Azure Active Directory Client ID which should be used for the Client Application.
	ClientApplicationId string `pulumi:"clientApplicationId"`
	// The Azure Active Directory Cluster Application ID.
	ClusterApplicationId string `pulumi:"clusterApplicationId"`
	// The Azure Active Directory Tenant ID.
	TenantId string `pulumi:"tenantId"`
}

type ClusterAzureActiveDirectoryInput interface {
	pulumi.Input

	ToClusterAzureActiveDirectoryOutput() ClusterAzureActiveDirectoryOutput
	ToClusterAzureActiveDirectoryOutputWithContext(context.Context) ClusterAzureActiveDirectoryOutput
}

type ClusterAzureActiveDirectoryArgs struct {
	// The Azure Active Directory Client ID which should be used for the Client Application.
	ClientApplicationId pulumi.StringInput `pulumi:"clientApplicationId"`
	// The Azure Active Directory Cluster Application ID.
	ClusterApplicationId pulumi.StringInput `pulumi:"clusterApplicationId"`
	// The Azure Active Directory Tenant ID.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (ClusterAzureActiveDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAzureActiveDirectory)(nil)).Elem()
}

func (i ClusterAzureActiveDirectoryArgs) ToClusterAzureActiveDirectoryOutput() ClusterAzureActiveDirectoryOutput {
	return i.ToClusterAzureActiveDirectoryOutputWithContext(context.Background())
}

func (i ClusterAzureActiveDirectoryArgs) ToClusterAzureActiveDirectoryOutputWithContext(ctx context.Context) ClusterAzureActiveDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAzureActiveDirectoryOutput)
}

func (i ClusterAzureActiveDirectoryArgs) ToClusterAzureActiveDirectoryPtrOutput() ClusterAzureActiveDirectoryPtrOutput {
	return i.ToClusterAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i ClusterAzureActiveDirectoryArgs) ToClusterAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) ClusterAzureActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAzureActiveDirectoryOutput).ToClusterAzureActiveDirectoryPtrOutputWithContext(ctx)
}

type ClusterAzureActiveDirectoryPtrInput interface {
	pulumi.Input

	ToClusterAzureActiveDirectoryPtrOutput() ClusterAzureActiveDirectoryPtrOutput
	ToClusterAzureActiveDirectoryPtrOutputWithContext(context.Context) ClusterAzureActiveDirectoryPtrOutput
}

type clusterAzureActiveDirectoryPtrType ClusterAzureActiveDirectoryArgs

func ClusterAzureActiveDirectoryPtr(v *ClusterAzureActiveDirectoryArgs) ClusterAzureActiveDirectoryPtrInput {
	return (*clusterAzureActiveDirectoryPtrType)(v)
}

func (*clusterAzureActiveDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAzureActiveDirectory)(nil)).Elem()
}

func (i *clusterAzureActiveDirectoryPtrType) ToClusterAzureActiveDirectoryPtrOutput() ClusterAzureActiveDirectoryPtrOutput {
	return i.ToClusterAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i *clusterAzureActiveDirectoryPtrType) ToClusterAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) ClusterAzureActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAzureActiveDirectoryPtrOutput)
}

type ClusterAzureActiveDirectoryOutput struct{ *pulumi.OutputState }

func (ClusterAzureActiveDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAzureActiveDirectory)(nil)).Elem()
}

func (o ClusterAzureActiveDirectoryOutput) ToClusterAzureActiveDirectoryOutput() ClusterAzureActiveDirectoryOutput {
	return o
}

func (o ClusterAzureActiveDirectoryOutput) ToClusterAzureActiveDirectoryOutputWithContext(ctx context.Context) ClusterAzureActiveDirectoryOutput {
	return o
}

func (o ClusterAzureActiveDirectoryOutput) ToClusterAzureActiveDirectoryPtrOutput() ClusterAzureActiveDirectoryPtrOutput {
	return o.ToClusterAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (o ClusterAzureActiveDirectoryOutput) ToClusterAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) ClusterAzureActiveDirectoryPtrOutput {
	return o.ApplyT(func(v ClusterAzureActiveDirectory) *ClusterAzureActiveDirectory {
		return &v
	}).(ClusterAzureActiveDirectoryPtrOutput)
}

// The Azure Active Directory Client ID which should be used for the Client Application.
func (o ClusterAzureActiveDirectoryOutput) ClientApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAzureActiveDirectory) string { return v.ClientApplicationId }).(pulumi.StringOutput)
}

// The Azure Active Directory Cluster Application ID.
func (o ClusterAzureActiveDirectoryOutput) ClusterApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAzureActiveDirectory) string { return v.ClusterApplicationId }).(pulumi.StringOutput)
}

// The Azure Active Directory Tenant ID.
func (o ClusterAzureActiveDirectoryOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAzureActiveDirectory) string { return v.TenantId }).(pulumi.StringOutput)
}

type ClusterAzureActiveDirectoryPtrOutput struct{ *pulumi.OutputState }

func (ClusterAzureActiveDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAzureActiveDirectory)(nil)).Elem()
}

func (o ClusterAzureActiveDirectoryPtrOutput) ToClusterAzureActiveDirectoryPtrOutput() ClusterAzureActiveDirectoryPtrOutput {
	return o
}

func (o ClusterAzureActiveDirectoryPtrOutput) ToClusterAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) ClusterAzureActiveDirectoryPtrOutput {
	return o
}

func (o ClusterAzureActiveDirectoryPtrOutput) Elem() ClusterAzureActiveDirectoryOutput {
	return o.ApplyT(func(v *ClusterAzureActiveDirectory) ClusterAzureActiveDirectory { return *v }).(ClusterAzureActiveDirectoryOutput)
}

// The Azure Active Directory Client ID which should be used for the Client Application.
func (o ClusterAzureActiveDirectoryPtrOutput) ClientApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAzureActiveDirectory) string { return v.ClientApplicationId }).(pulumi.StringOutput)
}

// The Azure Active Directory Cluster Application ID.
func (o ClusterAzureActiveDirectoryPtrOutput) ClusterApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAzureActiveDirectory) string { return v.ClusterApplicationId }).(pulumi.StringOutput)
}

// The Azure Active Directory Tenant ID.
func (o ClusterAzureActiveDirectoryPtrOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAzureActiveDirectory) string { return v.TenantId }).(pulumi.StringOutput)
}

type ClusterCertificate struct {
	// The Thumbprint of the Certificate.
	Thumbprint string `pulumi:"thumbprint"`
	// The Secondary Thumbprint of the Certificate.
	ThumbprintSecondary *string `pulumi:"thumbprintSecondary"`
	// The X509 Store where the Certificate Exists, such as `My`.
	X509StoreName string `pulumi:"x509StoreName"`
}

type ClusterCertificateInput interface {
	pulumi.Input

	ToClusterCertificateOutput() ClusterCertificateOutput
	ToClusterCertificateOutputWithContext(context.Context) ClusterCertificateOutput
}

type ClusterCertificateArgs struct {
	// The Thumbprint of the Certificate.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
	// The Secondary Thumbprint of the Certificate.
	ThumbprintSecondary pulumi.StringPtrInput `pulumi:"thumbprintSecondary"`
	// The X509 Store where the Certificate Exists, such as `My`.
	X509StoreName pulumi.StringInput `pulumi:"x509StoreName"`
}

func (ClusterCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificate)(nil)).Elem()
}

func (i ClusterCertificateArgs) ToClusterCertificateOutput() ClusterCertificateOutput {
	return i.ToClusterCertificateOutputWithContext(context.Background())
}

func (i ClusterCertificateArgs) ToClusterCertificateOutputWithContext(ctx context.Context) ClusterCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateOutput)
}

func (i ClusterCertificateArgs) ToClusterCertificatePtrOutput() ClusterCertificatePtrOutput {
	return i.ToClusterCertificatePtrOutputWithContext(context.Background())
}

func (i ClusterCertificateArgs) ToClusterCertificatePtrOutputWithContext(ctx context.Context) ClusterCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateOutput).ToClusterCertificatePtrOutputWithContext(ctx)
}

type ClusterCertificatePtrInput interface {
	pulumi.Input

	ToClusterCertificatePtrOutput() ClusterCertificatePtrOutput
	ToClusterCertificatePtrOutputWithContext(context.Context) ClusterCertificatePtrOutput
}

type clusterCertificatePtrType ClusterCertificateArgs

func ClusterCertificatePtr(v *ClusterCertificateArgs) ClusterCertificatePtrInput {
	return (*clusterCertificatePtrType)(v)
}

func (*clusterCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCertificate)(nil)).Elem()
}

func (i *clusterCertificatePtrType) ToClusterCertificatePtrOutput() ClusterCertificatePtrOutput {
	return i.ToClusterCertificatePtrOutputWithContext(context.Background())
}

func (i *clusterCertificatePtrType) ToClusterCertificatePtrOutputWithContext(ctx context.Context) ClusterCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificatePtrOutput)
}

type ClusterCertificateOutput struct{ *pulumi.OutputState }

func (ClusterCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificate)(nil)).Elem()
}

func (o ClusterCertificateOutput) ToClusterCertificateOutput() ClusterCertificateOutput {
	return o
}

func (o ClusterCertificateOutput) ToClusterCertificateOutputWithContext(ctx context.Context) ClusterCertificateOutput {
	return o
}

func (o ClusterCertificateOutput) ToClusterCertificatePtrOutput() ClusterCertificatePtrOutput {
	return o.ToClusterCertificatePtrOutputWithContext(context.Background())
}

func (o ClusterCertificateOutput) ToClusterCertificatePtrOutputWithContext(ctx context.Context) ClusterCertificatePtrOutput {
	return o.ApplyT(func(v ClusterCertificate) *ClusterCertificate {
		return &v
	}).(ClusterCertificatePtrOutput)
}

// The Thumbprint of the Certificate.
func (o ClusterCertificateOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCertificate) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// The Secondary Thumbprint of the Certificate.
func (o ClusterCertificateOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificate) *string { return v.ThumbprintSecondary }).(pulumi.StringPtrOutput)
}

// The X509 Store where the Certificate Exists, such as `My`.
func (o ClusterCertificateOutput) X509StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCertificate) string { return v.X509StoreName }).(pulumi.StringOutput)
}

type ClusterCertificatePtrOutput struct{ *pulumi.OutputState }

func (ClusterCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCertificate)(nil)).Elem()
}

func (o ClusterCertificatePtrOutput) ToClusterCertificatePtrOutput() ClusterCertificatePtrOutput {
	return o
}

func (o ClusterCertificatePtrOutput) ToClusterCertificatePtrOutputWithContext(ctx context.Context) ClusterCertificatePtrOutput {
	return o
}

func (o ClusterCertificatePtrOutput) Elem() ClusterCertificateOutput {
	return o.ApplyT(func(v *ClusterCertificate) ClusterCertificate { return *v }).(ClusterCertificateOutput)
}

// The Thumbprint of the Certificate.
func (o ClusterCertificatePtrOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCertificate) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// The Secondary Thumbprint of the Certificate.
func (o ClusterCertificatePtrOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificate) *string { return v.ThumbprintSecondary }).(pulumi.StringPtrOutput)
}

// The X509 Store where the Certificate Exists, such as `My`.
func (o ClusterCertificatePtrOutput) X509StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCertificate) string { return v.X509StoreName }).(pulumi.StringOutput)
}

type ClusterCertificateCommonNames struct {
	// A `commonNames` block as defined below.
	CommonNames []ClusterCertificateCommonNamesCommonName `pulumi:"commonNames"`
	// The X509 Store where the Certificate Exists, such as `My`.
	X509StoreName string `pulumi:"x509StoreName"`
}

type ClusterCertificateCommonNamesInput interface {
	pulumi.Input

	ToClusterCertificateCommonNamesOutput() ClusterCertificateCommonNamesOutput
	ToClusterCertificateCommonNamesOutputWithContext(context.Context) ClusterCertificateCommonNamesOutput
}

type ClusterCertificateCommonNamesArgs struct {
	// A `commonNames` block as defined below.
	CommonNames ClusterCertificateCommonNamesCommonNameArrayInput `pulumi:"commonNames"`
	// The X509 Store where the Certificate Exists, such as `My`.
	X509StoreName pulumi.StringInput `pulumi:"x509StoreName"`
}

func (ClusterCertificateCommonNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateCommonNames)(nil)).Elem()
}

func (i ClusterCertificateCommonNamesArgs) ToClusterCertificateCommonNamesOutput() ClusterCertificateCommonNamesOutput {
	return i.ToClusterCertificateCommonNamesOutputWithContext(context.Background())
}

func (i ClusterCertificateCommonNamesArgs) ToClusterCertificateCommonNamesOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateCommonNamesOutput)
}

func (i ClusterCertificateCommonNamesArgs) ToClusterCertificateCommonNamesPtrOutput() ClusterCertificateCommonNamesPtrOutput {
	return i.ToClusterCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (i ClusterCertificateCommonNamesArgs) ToClusterCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateCommonNamesOutput).ToClusterCertificateCommonNamesPtrOutputWithContext(ctx)
}

type ClusterCertificateCommonNamesPtrInput interface {
	pulumi.Input

	ToClusterCertificateCommonNamesPtrOutput() ClusterCertificateCommonNamesPtrOutput
	ToClusterCertificateCommonNamesPtrOutputWithContext(context.Context) ClusterCertificateCommonNamesPtrOutput
}

type clusterCertificateCommonNamesPtrType ClusterCertificateCommonNamesArgs

func ClusterCertificateCommonNamesPtr(v *ClusterCertificateCommonNamesArgs) ClusterCertificateCommonNamesPtrInput {
	return (*clusterCertificateCommonNamesPtrType)(v)
}

func (*clusterCertificateCommonNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCertificateCommonNames)(nil)).Elem()
}

func (i *clusterCertificateCommonNamesPtrType) ToClusterCertificateCommonNamesPtrOutput() ClusterCertificateCommonNamesPtrOutput {
	return i.ToClusterCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (i *clusterCertificateCommonNamesPtrType) ToClusterCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateCommonNamesPtrOutput)
}

type ClusterCertificateCommonNamesOutput struct{ *pulumi.OutputState }

func (ClusterCertificateCommonNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateCommonNames)(nil)).Elem()
}

func (o ClusterCertificateCommonNamesOutput) ToClusterCertificateCommonNamesOutput() ClusterCertificateCommonNamesOutput {
	return o
}

func (o ClusterCertificateCommonNamesOutput) ToClusterCertificateCommonNamesOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesOutput {
	return o
}

func (o ClusterCertificateCommonNamesOutput) ToClusterCertificateCommonNamesPtrOutput() ClusterCertificateCommonNamesPtrOutput {
	return o.ToClusterCertificateCommonNamesPtrOutputWithContext(context.Background())
}

func (o ClusterCertificateCommonNamesOutput) ToClusterCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesPtrOutput {
	return o.ApplyT(func(v ClusterCertificateCommonNames) *ClusterCertificateCommonNames {
		return &v
	}).(ClusterCertificateCommonNamesPtrOutput)
}

// A `commonNames` block as defined below.
func (o ClusterCertificateCommonNamesOutput) CommonNames() ClusterCertificateCommonNamesCommonNameArrayOutput {
	return o.ApplyT(func(v ClusterCertificateCommonNames) []ClusterCertificateCommonNamesCommonName { return v.CommonNames }).(ClusterCertificateCommonNamesCommonNameArrayOutput)
}

// The X509 Store where the Certificate Exists, such as `My`.
func (o ClusterCertificateCommonNamesOutput) X509StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCertificateCommonNames) string { return v.X509StoreName }).(pulumi.StringOutput)
}

type ClusterCertificateCommonNamesPtrOutput struct{ *pulumi.OutputState }

func (ClusterCertificateCommonNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCertificateCommonNames)(nil)).Elem()
}

func (o ClusterCertificateCommonNamesPtrOutput) ToClusterCertificateCommonNamesPtrOutput() ClusterCertificateCommonNamesPtrOutput {
	return o
}

func (o ClusterCertificateCommonNamesPtrOutput) ToClusterCertificateCommonNamesPtrOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesPtrOutput {
	return o
}

func (o ClusterCertificateCommonNamesPtrOutput) Elem() ClusterCertificateCommonNamesOutput {
	return o.ApplyT(func(v *ClusterCertificateCommonNames) ClusterCertificateCommonNames { return *v }).(ClusterCertificateCommonNamesOutput)
}

// A `commonNames` block as defined below.
func (o ClusterCertificateCommonNamesPtrOutput) CommonNames() ClusterCertificateCommonNamesCommonNameArrayOutput {
	return o.ApplyT(func(v ClusterCertificateCommonNames) []ClusterCertificateCommonNamesCommonName { return v.CommonNames }).(ClusterCertificateCommonNamesCommonNameArrayOutput)
}

// The X509 Store where the Certificate Exists, such as `My`.
func (o ClusterCertificateCommonNamesPtrOutput) X509StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCertificateCommonNames) string { return v.X509StoreName }).(pulumi.StringOutput)
}

type ClusterCertificateCommonNamesCommonName struct {
	// The common or subject name of the certificate.
	CertificateCommonName string `pulumi:"certificateCommonName"`
	// The Issuer Thumbprint of the Certificate.
	CertificateIssuerThumbprint *string `pulumi:"certificateIssuerThumbprint"`
}

type ClusterCertificateCommonNamesCommonNameInput interface {
	pulumi.Input

	ToClusterCertificateCommonNamesCommonNameOutput() ClusterCertificateCommonNamesCommonNameOutput
	ToClusterCertificateCommonNamesCommonNameOutputWithContext(context.Context) ClusterCertificateCommonNamesCommonNameOutput
}

type ClusterCertificateCommonNamesCommonNameArgs struct {
	// The common or subject name of the certificate.
	CertificateCommonName pulumi.StringInput `pulumi:"certificateCommonName"`
	// The Issuer Thumbprint of the Certificate.
	CertificateIssuerThumbprint pulumi.StringPtrInput `pulumi:"certificateIssuerThumbprint"`
}

func (ClusterCertificateCommonNamesCommonNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateCommonNamesCommonName)(nil)).Elem()
}

func (i ClusterCertificateCommonNamesCommonNameArgs) ToClusterCertificateCommonNamesCommonNameOutput() ClusterCertificateCommonNamesCommonNameOutput {
	return i.ToClusterCertificateCommonNamesCommonNameOutputWithContext(context.Background())
}

func (i ClusterCertificateCommonNamesCommonNameArgs) ToClusterCertificateCommonNamesCommonNameOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesCommonNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateCommonNamesCommonNameOutput)
}

type ClusterCertificateCommonNamesCommonNameArrayInput interface {
	pulumi.Input

	ToClusterCertificateCommonNamesCommonNameArrayOutput() ClusterCertificateCommonNamesCommonNameArrayOutput
	ToClusterCertificateCommonNamesCommonNameArrayOutputWithContext(context.Context) ClusterCertificateCommonNamesCommonNameArrayOutput
}

type ClusterCertificateCommonNamesCommonNameArray []ClusterCertificateCommonNamesCommonNameInput

func (ClusterCertificateCommonNamesCommonNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCertificateCommonNamesCommonName)(nil)).Elem()
}

func (i ClusterCertificateCommonNamesCommonNameArray) ToClusterCertificateCommonNamesCommonNameArrayOutput() ClusterCertificateCommonNamesCommonNameArrayOutput {
	return i.ToClusterCertificateCommonNamesCommonNameArrayOutputWithContext(context.Background())
}

func (i ClusterCertificateCommonNamesCommonNameArray) ToClusterCertificateCommonNamesCommonNameArrayOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesCommonNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateCommonNamesCommonNameArrayOutput)
}

type ClusterCertificateCommonNamesCommonNameOutput struct{ *pulumi.OutputState }

func (ClusterCertificateCommonNamesCommonNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateCommonNamesCommonName)(nil)).Elem()
}

func (o ClusterCertificateCommonNamesCommonNameOutput) ToClusterCertificateCommonNamesCommonNameOutput() ClusterCertificateCommonNamesCommonNameOutput {
	return o
}

func (o ClusterCertificateCommonNamesCommonNameOutput) ToClusterCertificateCommonNamesCommonNameOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesCommonNameOutput {
	return o
}

// The common or subject name of the certificate.
func (o ClusterCertificateCommonNamesCommonNameOutput) CertificateCommonName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterCertificateCommonNamesCommonName) string { return v.CertificateCommonName }).(pulumi.StringOutput)
}

// The Issuer Thumbprint of the Certificate.
func (o ClusterCertificateCommonNamesCommonNameOutput) CertificateIssuerThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateCommonNamesCommonName) *string { return v.CertificateIssuerThumbprint }).(pulumi.StringPtrOutput)
}

type ClusterCertificateCommonNamesCommonNameArrayOutput struct{ *pulumi.OutputState }

func (ClusterCertificateCommonNamesCommonNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCertificateCommonNamesCommonName)(nil)).Elem()
}

func (o ClusterCertificateCommonNamesCommonNameArrayOutput) ToClusterCertificateCommonNamesCommonNameArrayOutput() ClusterCertificateCommonNamesCommonNameArrayOutput {
	return o
}

func (o ClusterCertificateCommonNamesCommonNameArrayOutput) ToClusterCertificateCommonNamesCommonNameArrayOutputWithContext(ctx context.Context) ClusterCertificateCommonNamesCommonNameArrayOutput {
	return o
}

func (o ClusterCertificateCommonNamesCommonNameArrayOutput) Index(i pulumi.IntInput) ClusterCertificateCommonNamesCommonNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCertificateCommonNamesCommonName {
		return vs[0].([]ClusterCertificateCommonNamesCommonName)[vs[1].(int)]
	}).(ClusterCertificateCommonNamesCommonNameOutput)
}

type ClusterClientCertificateThumbprint struct {
	// Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.
	IsAdmin bool `pulumi:"isAdmin"`
	// The Thumbprint associated with the Client Certificate.
	Thumbprint string `pulumi:"thumbprint"`
}

type ClusterClientCertificateThumbprintInput interface {
	pulumi.Input

	ToClusterClientCertificateThumbprintOutput() ClusterClientCertificateThumbprintOutput
	ToClusterClientCertificateThumbprintOutputWithContext(context.Context) ClusterClientCertificateThumbprintOutput
}

type ClusterClientCertificateThumbprintArgs struct {
	// Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.
	IsAdmin pulumi.BoolInput `pulumi:"isAdmin"`
	// The Thumbprint associated with the Client Certificate.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
}

func (ClusterClientCertificateThumbprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientCertificateThumbprint)(nil)).Elem()
}

func (i ClusterClientCertificateThumbprintArgs) ToClusterClientCertificateThumbprintOutput() ClusterClientCertificateThumbprintOutput {
	return i.ToClusterClientCertificateThumbprintOutputWithContext(context.Background())
}

func (i ClusterClientCertificateThumbprintArgs) ToClusterClientCertificateThumbprintOutputWithContext(ctx context.Context) ClusterClientCertificateThumbprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientCertificateThumbprintOutput)
}

type ClusterClientCertificateThumbprintArrayInput interface {
	pulumi.Input

	ToClusterClientCertificateThumbprintArrayOutput() ClusterClientCertificateThumbprintArrayOutput
	ToClusterClientCertificateThumbprintArrayOutputWithContext(context.Context) ClusterClientCertificateThumbprintArrayOutput
}

type ClusterClientCertificateThumbprintArray []ClusterClientCertificateThumbprintInput

func (ClusterClientCertificateThumbprintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterClientCertificateThumbprint)(nil)).Elem()
}

func (i ClusterClientCertificateThumbprintArray) ToClusterClientCertificateThumbprintArrayOutput() ClusterClientCertificateThumbprintArrayOutput {
	return i.ToClusterClientCertificateThumbprintArrayOutputWithContext(context.Background())
}

func (i ClusterClientCertificateThumbprintArray) ToClusterClientCertificateThumbprintArrayOutputWithContext(ctx context.Context) ClusterClientCertificateThumbprintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientCertificateThumbprintArrayOutput)
}

type ClusterClientCertificateThumbprintOutput struct{ *pulumi.OutputState }

func (ClusterClientCertificateThumbprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientCertificateThumbprint)(nil)).Elem()
}

func (o ClusterClientCertificateThumbprintOutput) ToClusterClientCertificateThumbprintOutput() ClusterClientCertificateThumbprintOutput {
	return o
}

func (o ClusterClientCertificateThumbprintOutput) ToClusterClientCertificateThumbprintOutputWithContext(ctx context.Context) ClusterClientCertificateThumbprintOutput {
	return o
}

// Does the Client Certificate have Admin Access to the cluster? Non-admin clients can only perform read only operations on the cluster.
func (o ClusterClientCertificateThumbprintOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterClientCertificateThumbprint) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

// The Thumbprint associated with the Client Certificate.
func (o ClusterClientCertificateThumbprintOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterClientCertificateThumbprint) string { return v.Thumbprint }).(pulumi.StringOutput)
}

type ClusterClientCertificateThumbprintArrayOutput struct{ *pulumi.OutputState }

func (ClusterClientCertificateThumbprintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterClientCertificateThumbprint)(nil)).Elem()
}

func (o ClusterClientCertificateThumbprintArrayOutput) ToClusterClientCertificateThumbprintArrayOutput() ClusterClientCertificateThumbprintArrayOutput {
	return o
}

func (o ClusterClientCertificateThumbprintArrayOutput) ToClusterClientCertificateThumbprintArrayOutputWithContext(ctx context.Context) ClusterClientCertificateThumbprintArrayOutput {
	return o
}

func (o ClusterClientCertificateThumbprintArrayOutput) Index(i pulumi.IntInput) ClusterClientCertificateThumbprintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterClientCertificateThumbprint {
		return vs[0].([]ClusterClientCertificateThumbprint)[vs[1].(int)]
	}).(ClusterClientCertificateThumbprintOutput)
}

type ClusterDiagnosticsConfig struct {
	// The Blob Endpoint of the Storage Account.
	BlobEndpoint string `pulumi:"blobEndpoint"`
	// The protected diagnostics storage key name, such as `StorageAccountKey1`.
	ProtectedAccountKeyName string `pulumi:"protectedAccountKeyName"`
	// The Queue Endpoint of the Storage Account.
	QueueEndpoint string `pulumi:"queueEndpoint"`
	// The name of the Storage Account where the Diagnostics should be sent to.
	StorageAccountName string `pulumi:"storageAccountName"`
	// The Table Endpoint of the Storage Account.
	TableEndpoint string `pulumi:"tableEndpoint"`
}

type ClusterDiagnosticsConfigInput interface {
	pulumi.Input

	ToClusterDiagnosticsConfigOutput() ClusterDiagnosticsConfigOutput
	ToClusterDiagnosticsConfigOutputWithContext(context.Context) ClusterDiagnosticsConfigOutput
}

type ClusterDiagnosticsConfigArgs struct {
	// The Blob Endpoint of the Storage Account.
	BlobEndpoint pulumi.StringInput `pulumi:"blobEndpoint"`
	// The protected diagnostics storage key name, such as `StorageAccountKey1`.
	ProtectedAccountKeyName pulumi.StringInput `pulumi:"protectedAccountKeyName"`
	// The Queue Endpoint of the Storage Account.
	QueueEndpoint pulumi.StringInput `pulumi:"queueEndpoint"`
	// The name of the Storage Account where the Diagnostics should be sent to.
	StorageAccountName pulumi.StringInput `pulumi:"storageAccountName"`
	// The Table Endpoint of the Storage Account.
	TableEndpoint pulumi.StringInput `pulumi:"tableEndpoint"`
}

func (ClusterDiagnosticsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDiagnosticsConfig)(nil)).Elem()
}

func (i ClusterDiagnosticsConfigArgs) ToClusterDiagnosticsConfigOutput() ClusterDiagnosticsConfigOutput {
	return i.ToClusterDiagnosticsConfigOutputWithContext(context.Background())
}

func (i ClusterDiagnosticsConfigArgs) ToClusterDiagnosticsConfigOutputWithContext(ctx context.Context) ClusterDiagnosticsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDiagnosticsConfigOutput)
}

func (i ClusterDiagnosticsConfigArgs) ToClusterDiagnosticsConfigPtrOutput() ClusterDiagnosticsConfigPtrOutput {
	return i.ToClusterDiagnosticsConfigPtrOutputWithContext(context.Background())
}

func (i ClusterDiagnosticsConfigArgs) ToClusterDiagnosticsConfigPtrOutputWithContext(ctx context.Context) ClusterDiagnosticsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDiagnosticsConfigOutput).ToClusterDiagnosticsConfigPtrOutputWithContext(ctx)
}

type ClusterDiagnosticsConfigPtrInput interface {
	pulumi.Input

	ToClusterDiagnosticsConfigPtrOutput() ClusterDiagnosticsConfigPtrOutput
	ToClusterDiagnosticsConfigPtrOutputWithContext(context.Context) ClusterDiagnosticsConfigPtrOutput
}

type clusterDiagnosticsConfigPtrType ClusterDiagnosticsConfigArgs

func ClusterDiagnosticsConfigPtr(v *ClusterDiagnosticsConfigArgs) ClusterDiagnosticsConfigPtrInput {
	return (*clusterDiagnosticsConfigPtrType)(v)
}

func (*clusterDiagnosticsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterDiagnosticsConfig)(nil)).Elem()
}

func (i *clusterDiagnosticsConfigPtrType) ToClusterDiagnosticsConfigPtrOutput() ClusterDiagnosticsConfigPtrOutput {
	return i.ToClusterDiagnosticsConfigPtrOutputWithContext(context.Background())
}

func (i *clusterDiagnosticsConfigPtrType) ToClusterDiagnosticsConfigPtrOutputWithContext(ctx context.Context) ClusterDiagnosticsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDiagnosticsConfigPtrOutput)
}

type ClusterDiagnosticsConfigOutput struct{ *pulumi.OutputState }

func (ClusterDiagnosticsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDiagnosticsConfig)(nil)).Elem()
}

func (o ClusterDiagnosticsConfigOutput) ToClusterDiagnosticsConfigOutput() ClusterDiagnosticsConfigOutput {
	return o
}

func (o ClusterDiagnosticsConfigOutput) ToClusterDiagnosticsConfigOutputWithContext(ctx context.Context) ClusterDiagnosticsConfigOutput {
	return o
}

func (o ClusterDiagnosticsConfigOutput) ToClusterDiagnosticsConfigPtrOutput() ClusterDiagnosticsConfigPtrOutput {
	return o.ToClusterDiagnosticsConfigPtrOutputWithContext(context.Background())
}

func (o ClusterDiagnosticsConfigOutput) ToClusterDiagnosticsConfigPtrOutputWithContext(ctx context.Context) ClusterDiagnosticsConfigPtrOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) *ClusterDiagnosticsConfig {
		return &v
	}).(ClusterDiagnosticsConfigPtrOutput)
}

// The Blob Endpoint of the Storage Account.
func (o ClusterDiagnosticsConfigOutput) BlobEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.BlobEndpoint }).(pulumi.StringOutput)
}

// The protected diagnostics storage key name, such as `StorageAccountKey1`.
func (o ClusterDiagnosticsConfigOutput) ProtectedAccountKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.ProtectedAccountKeyName }).(pulumi.StringOutput)
}

// The Queue Endpoint of the Storage Account.
func (o ClusterDiagnosticsConfigOutput) QueueEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.QueueEndpoint }).(pulumi.StringOutput)
}

// The name of the Storage Account where the Diagnostics should be sent to.
func (o ClusterDiagnosticsConfigOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

// The Table Endpoint of the Storage Account.
func (o ClusterDiagnosticsConfigOutput) TableEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.TableEndpoint }).(pulumi.StringOutput)
}

type ClusterDiagnosticsConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterDiagnosticsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterDiagnosticsConfig)(nil)).Elem()
}

func (o ClusterDiagnosticsConfigPtrOutput) ToClusterDiagnosticsConfigPtrOutput() ClusterDiagnosticsConfigPtrOutput {
	return o
}

func (o ClusterDiagnosticsConfigPtrOutput) ToClusterDiagnosticsConfigPtrOutputWithContext(ctx context.Context) ClusterDiagnosticsConfigPtrOutput {
	return o
}

func (o ClusterDiagnosticsConfigPtrOutput) Elem() ClusterDiagnosticsConfigOutput {
	return o.ApplyT(func(v *ClusterDiagnosticsConfig) ClusterDiagnosticsConfig { return *v }).(ClusterDiagnosticsConfigOutput)
}

// The Blob Endpoint of the Storage Account.
func (o ClusterDiagnosticsConfigPtrOutput) BlobEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.BlobEndpoint }).(pulumi.StringOutput)
}

// The protected diagnostics storage key name, such as `StorageAccountKey1`.
func (o ClusterDiagnosticsConfigPtrOutput) ProtectedAccountKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.ProtectedAccountKeyName }).(pulumi.StringOutput)
}

// The Queue Endpoint of the Storage Account.
func (o ClusterDiagnosticsConfigPtrOutput) QueueEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.QueueEndpoint }).(pulumi.StringOutput)
}

// The name of the Storage Account where the Diagnostics should be sent to.
func (o ClusterDiagnosticsConfigPtrOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

// The Table Endpoint of the Storage Account.
func (o ClusterDiagnosticsConfigPtrOutput) TableEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterDiagnosticsConfig) string { return v.TableEndpoint }).(pulumi.StringOutput)
}

type ClusterFabricSetting struct {
	// The name of the Fabric Setting, such as `Security` or `Federation`.
	Name string `pulumi:"name"`
	// A map containing settings for the specified Fabric Setting.
	Parameters map[string]string `pulumi:"parameters"`
}

type ClusterFabricSettingInput interface {
	pulumi.Input

	ToClusterFabricSettingOutput() ClusterFabricSettingOutput
	ToClusterFabricSettingOutputWithContext(context.Context) ClusterFabricSettingOutput
}

type ClusterFabricSettingArgs struct {
	// The name of the Fabric Setting, such as `Security` or `Federation`.
	Name pulumi.StringInput `pulumi:"name"`
	// A map containing settings for the specified Fabric Setting.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
}

func (ClusterFabricSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterFabricSetting)(nil)).Elem()
}

func (i ClusterFabricSettingArgs) ToClusterFabricSettingOutput() ClusterFabricSettingOutput {
	return i.ToClusterFabricSettingOutputWithContext(context.Background())
}

func (i ClusterFabricSettingArgs) ToClusterFabricSettingOutputWithContext(ctx context.Context) ClusterFabricSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterFabricSettingOutput)
}

type ClusterFabricSettingArrayInput interface {
	pulumi.Input

	ToClusterFabricSettingArrayOutput() ClusterFabricSettingArrayOutput
	ToClusterFabricSettingArrayOutputWithContext(context.Context) ClusterFabricSettingArrayOutput
}

type ClusterFabricSettingArray []ClusterFabricSettingInput

func (ClusterFabricSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterFabricSetting)(nil)).Elem()
}

func (i ClusterFabricSettingArray) ToClusterFabricSettingArrayOutput() ClusterFabricSettingArrayOutput {
	return i.ToClusterFabricSettingArrayOutputWithContext(context.Background())
}

func (i ClusterFabricSettingArray) ToClusterFabricSettingArrayOutputWithContext(ctx context.Context) ClusterFabricSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterFabricSettingArrayOutput)
}

type ClusterFabricSettingOutput struct{ *pulumi.OutputState }

func (ClusterFabricSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterFabricSetting)(nil)).Elem()
}

func (o ClusterFabricSettingOutput) ToClusterFabricSettingOutput() ClusterFabricSettingOutput {
	return o
}

func (o ClusterFabricSettingOutput) ToClusterFabricSettingOutputWithContext(ctx context.Context) ClusterFabricSettingOutput {
	return o
}

// The name of the Fabric Setting, such as `Security` or `Federation`.
func (o ClusterFabricSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterFabricSetting) string { return v.Name }).(pulumi.StringOutput)
}

// A map containing settings for the specified Fabric Setting.
func (o ClusterFabricSettingOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterFabricSetting) map[string]string { return v.Parameters }).(pulumi.StringMapOutput)
}

type ClusterFabricSettingArrayOutput struct{ *pulumi.OutputState }

func (ClusterFabricSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterFabricSetting)(nil)).Elem()
}

func (o ClusterFabricSettingArrayOutput) ToClusterFabricSettingArrayOutput() ClusterFabricSettingArrayOutput {
	return o
}

func (o ClusterFabricSettingArrayOutput) ToClusterFabricSettingArrayOutputWithContext(ctx context.Context) ClusterFabricSettingArrayOutput {
	return o
}

func (o ClusterFabricSettingArrayOutput) Index(i pulumi.IntInput) ClusterFabricSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterFabricSetting {
		return vs[0].([]ClusterFabricSetting)[vs[1].(int)]
	}).(ClusterFabricSettingOutput)
}

type ClusterNodeType struct {
	// A `applicationPorts` block as defined below.
	ApplicationPorts *ClusterNodeTypeApplicationPorts `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities map[string]string `pulumi:"capacities"`
	// The Port used for the Client Endpoint for this Node Type. Changing this forces a new resource to be created.
	ClientEndpointPort int `pulumi:"clientEndpointPort"`
	// The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`. Changing this forces a new resource to be created.
	DurabilityLevel *string `pulumi:"durabilityLevel"`
	// A `ephemeralPorts` block as defined below.
	EphemeralPorts *ClusterNodeTypeEphemeralPorts `pulumi:"ephemeralPorts"`
	// The Port used for the HTTP Endpoint for this Node Type. Changing this forces a new resource to be created.
	HttpEndpointPort int `pulumi:"httpEndpointPort"`
	// The number of nodes for this Node Type.
	InstanceCount int `pulumi:"instanceCount"`
	// Is this the Primary Node Type? Changing this forces a new resource to be created.
	IsPrimary bool `pulumi:"isPrimary"`
	// The name of the Node Type. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties map[string]string `pulumi:"placementProperties"`
	// The Port used for the Reverse Proxy Endpoint  for this Node Type. Changing this will upgrade the cluster.
	ReverseProxyEndpointPort *int `pulumi:"reverseProxyEndpointPort"`
}

type ClusterNodeTypeInput interface {
	pulumi.Input

	ToClusterNodeTypeOutput() ClusterNodeTypeOutput
	ToClusterNodeTypeOutputWithContext(context.Context) ClusterNodeTypeOutput
}

type ClusterNodeTypeArgs struct {
	// A `applicationPorts` block as defined below.
	ApplicationPorts ClusterNodeTypeApplicationPortsPtrInput `pulumi:"applicationPorts"`
	// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
	Capacities pulumi.StringMapInput `pulumi:"capacities"`
	// The Port used for the Client Endpoint for this Node Type. Changing this forces a new resource to be created.
	ClientEndpointPort pulumi.IntInput `pulumi:"clientEndpointPort"`
	// The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`. Changing this forces a new resource to be created.
	DurabilityLevel pulumi.StringPtrInput `pulumi:"durabilityLevel"`
	// A `ephemeralPorts` block as defined below.
	EphemeralPorts ClusterNodeTypeEphemeralPortsPtrInput `pulumi:"ephemeralPorts"`
	// The Port used for the HTTP Endpoint for this Node Type. Changing this forces a new resource to be created.
	HttpEndpointPort pulumi.IntInput `pulumi:"httpEndpointPort"`
	// The number of nodes for this Node Type.
	InstanceCount pulumi.IntInput `pulumi:"instanceCount"`
	// Is this the Primary Node Type? Changing this forces a new resource to be created.
	IsPrimary pulumi.BoolInput `pulumi:"isPrimary"`
	// The name of the Node Type. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
	PlacementProperties pulumi.StringMapInput `pulumi:"placementProperties"`
	// The Port used for the Reverse Proxy Endpoint  for this Node Type. Changing this will upgrade the cluster.
	ReverseProxyEndpointPort pulumi.IntPtrInput `pulumi:"reverseProxyEndpointPort"`
}

func (ClusterNodeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeType)(nil)).Elem()
}

func (i ClusterNodeTypeArgs) ToClusterNodeTypeOutput() ClusterNodeTypeOutput {
	return i.ToClusterNodeTypeOutputWithContext(context.Background())
}

func (i ClusterNodeTypeArgs) ToClusterNodeTypeOutputWithContext(ctx context.Context) ClusterNodeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeOutput)
}

type ClusterNodeTypeArrayInput interface {
	pulumi.Input

	ToClusterNodeTypeArrayOutput() ClusterNodeTypeArrayOutput
	ToClusterNodeTypeArrayOutputWithContext(context.Context) ClusterNodeTypeArrayOutput
}

type ClusterNodeTypeArray []ClusterNodeTypeInput

func (ClusterNodeTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterNodeType)(nil)).Elem()
}

func (i ClusterNodeTypeArray) ToClusterNodeTypeArrayOutput() ClusterNodeTypeArrayOutput {
	return i.ToClusterNodeTypeArrayOutputWithContext(context.Background())
}

func (i ClusterNodeTypeArray) ToClusterNodeTypeArrayOutputWithContext(ctx context.Context) ClusterNodeTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeArrayOutput)
}

type ClusterNodeTypeOutput struct{ *pulumi.OutputState }

func (ClusterNodeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeType)(nil)).Elem()
}

func (o ClusterNodeTypeOutput) ToClusterNodeTypeOutput() ClusterNodeTypeOutput {
	return o
}

func (o ClusterNodeTypeOutput) ToClusterNodeTypeOutputWithContext(ctx context.Context) ClusterNodeTypeOutput {
	return o
}

// A `applicationPorts` block as defined below.
func (o ClusterNodeTypeOutput) ApplicationPorts() ClusterNodeTypeApplicationPortsPtrOutput {
	return o.ApplyT(func(v ClusterNodeType) *ClusterNodeTypeApplicationPorts { return v.ApplicationPorts }).(ClusterNodeTypeApplicationPortsPtrOutput)
}

// The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
func (o ClusterNodeTypeOutput) Capacities() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterNodeType) map[string]string { return v.Capacities }).(pulumi.StringMapOutput)
}

// The Port used for the Client Endpoint for this Node Type. Changing this forces a new resource to be created.
func (o ClusterNodeTypeOutput) ClientEndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeType) int { return v.ClientEndpointPort }).(pulumi.IntOutput)
}

// The Durability Level for this Node Type. Possible values include `Bronze`, `Gold` and `Silver`. Defaults to `Bronze`. Changing this forces a new resource to be created.
func (o ClusterNodeTypeOutput) DurabilityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNodeType) *string { return v.DurabilityLevel }).(pulumi.StringPtrOutput)
}

// A `ephemeralPorts` block as defined below.
func (o ClusterNodeTypeOutput) EphemeralPorts() ClusterNodeTypeEphemeralPortsPtrOutput {
	return o.ApplyT(func(v ClusterNodeType) *ClusterNodeTypeEphemeralPorts { return v.EphemeralPorts }).(ClusterNodeTypeEphemeralPortsPtrOutput)
}

// The Port used for the HTTP Endpoint for this Node Type. Changing this forces a new resource to be created.
func (o ClusterNodeTypeOutput) HttpEndpointPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeType) int { return v.HttpEndpointPort }).(pulumi.IntOutput)
}

// The number of nodes for this Node Type.
func (o ClusterNodeTypeOutput) InstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeType) int { return v.InstanceCount }).(pulumi.IntOutput)
}

// Is this the Primary Node Type? Changing this forces a new resource to be created.
func (o ClusterNodeTypeOutput) IsPrimary() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterNodeType) bool { return v.IsPrimary }).(pulumi.BoolOutput)
}

// The name of the Node Type. Changing this forces a new resource to be created.
func (o ClusterNodeTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeType) string { return v.Name }).(pulumi.StringOutput)
}

// The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
func (o ClusterNodeTypeOutput) PlacementProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterNodeType) map[string]string { return v.PlacementProperties }).(pulumi.StringMapOutput)
}

// The Port used for the Reverse Proxy Endpoint  for this Node Type. Changing this will upgrade the cluster.
func (o ClusterNodeTypeOutput) ReverseProxyEndpointPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterNodeType) *int { return v.ReverseProxyEndpointPort }).(pulumi.IntPtrOutput)
}

type ClusterNodeTypeArrayOutput struct{ *pulumi.OutputState }

func (ClusterNodeTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterNodeType)(nil)).Elem()
}

func (o ClusterNodeTypeArrayOutput) ToClusterNodeTypeArrayOutput() ClusterNodeTypeArrayOutput {
	return o
}

func (o ClusterNodeTypeArrayOutput) ToClusterNodeTypeArrayOutputWithContext(ctx context.Context) ClusterNodeTypeArrayOutput {
	return o
}

func (o ClusterNodeTypeArrayOutput) Index(i pulumi.IntInput) ClusterNodeTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterNodeType {
		return vs[0].([]ClusterNodeType)[vs[1].(int)]
	}).(ClusterNodeTypeOutput)
}

type ClusterNodeTypeApplicationPorts struct {
	// The end of the Application Port Range on this Node Type.
	EndPort int `pulumi:"endPort"`
	// The start of the Application Port Range on this Node Type.
	StartPort int `pulumi:"startPort"`
}

type ClusterNodeTypeApplicationPortsInput interface {
	pulumi.Input

	ToClusterNodeTypeApplicationPortsOutput() ClusterNodeTypeApplicationPortsOutput
	ToClusterNodeTypeApplicationPortsOutputWithContext(context.Context) ClusterNodeTypeApplicationPortsOutput
}

type ClusterNodeTypeApplicationPortsArgs struct {
	// The end of the Application Port Range on this Node Type.
	EndPort pulumi.IntInput `pulumi:"endPort"`
	// The start of the Application Port Range on this Node Type.
	StartPort pulumi.IntInput `pulumi:"startPort"`
}

func (ClusterNodeTypeApplicationPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeTypeApplicationPorts)(nil)).Elem()
}

func (i ClusterNodeTypeApplicationPortsArgs) ToClusterNodeTypeApplicationPortsOutput() ClusterNodeTypeApplicationPortsOutput {
	return i.ToClusterNodeTypeApplicationPortsOutputWithContext(context.Background())
}

func (i ClusterNodeTypeApplicationPortsArgs) ToClusterNodeTypeApplicationPortsOutputWithContext(ctx context.Context) ClusterNodeTypeApplicationPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeApplicationPortsOutput)
}

func (i ClusterNodeTypeApplicationPortsArgs) ToClusterNodeTypeApplicationPortsPtrOutput() ClusterNodeTypeApplicationPortsPtrOutput {
	return i.ToClusterNodeTypeApplicationPortsPtrOutputWithContext(context.Background())
}

func (i ClusterNodeTypeApplicationPortsArgs) ToClusterNodeTypeApplicationPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeApplicationPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeApplicationPortsOutput).ToClusterNodeTypeApplicationPortsPtrOutputWithContext(ctx)
}

type ClusterNodeTypeApplicationPortsPtrInput interface {
	pulumi.Input

	ToClusterNodeTypeApplicationPortsPtrOutput() ClusterNodeTypeApplicationPortsPtrOutput
	ToClusterNodeTypeApplicationPortsPtrOutputWithContext(context.Context) ClusterNodeTypeApplicationPortsPtrOutput
}

type clusterNodeTypeApplicationPortsPtrType ClusterNodeTypeApplicationPortsArgs

func ClusterNodeTypeApplicationPortsPtr(v *ClusterNodeTypeApplicationPortsArgs) ClusterNodeTypeApplicationPortsPtrInput {
	return (*clusterNodeTypeApplicationPortsPtrType)(v)
}

func (*clusterNodeTypeApplicationPortsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeTypeApplicationPorts)(nil)).Elem()
}

func (i *clusterNodeTypeApplicationPortsPtrType) ToClusterNodeTypeApplicationPortsPtrOutput() ClusterNodeTypeApplicationPortsPtrOutput {
	return i.ToClusterNodeTypeApplicationPortsPtrOutputWithContext(context.Background())
}

func (i *clusterNodeTypeApplicationPortsPtrType) ToClusterNodeTypeApplicationPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeApplicationPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeApplicationPortsPtrOutput)
}

type ClusterNodeTypeApplicationPortsOutput struct{ *pulumi.OutputState }

func (ClusterNodeTypeApplicationPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeTypeApplicationPorts)(nil)).Elem()
}

func (o ClusterNodeTypeApplicationPortsOutput) ToClusterNodeTypeApplicationPortsOutput() ClusterNodeTypeApplicationPortsOutput {
	return o
}

func (o ClusterNodeTypeApplicationPortsOutput) ToClusterNodeTypeApplicationPortsOutputWithContext(ctx context.Context) ClusterNodeTypeApplicationPortsOutput {
	return o
}

func (o ClusterNodeTypeApplicationPortsOutput) ToClusterNodeTypeApplicationPortsPtrOutput() ClusterNodeTypeApplicationPortsPtrOutput {
	return o.ToClusterNodeTypeApplicationPortsPtrOutputWithContext(context.Background())
}

func (o ClusterNodeTypeApplicationPortsOutput) ToClusterNodeTypeApplicationPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeApplicationPortsPtrOutput {
	return o.ApplyT(func(v ClusterNodeTypeApplicationPorts) *ClusterNodeTypeApplicationPorts {
		return &v
	}).(ClusterNodeTypeApplicationPortsPtrOutput)
}

// The end of the Application Port Range on this Node Type.
func (o ClusterNodeTypeApplicationPortsOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeTypeApplicationPorts) int { return v.EndPort }).(pulumi.IntOutput)
}

// The start of the Application Port Range on this Node Type.
func (o ClusterNodeTypeApplicationPortsOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeTypeApplicationPorts) int { return v.StartPort }).(pulumi.IntOutput)
}

type ClusterNodeTypeApplicationPortsPtrOutput struct{ *pulumi.OutputState }

func (ClusterNodeTypeApplicationPortsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeTypeApplicationPorts)(nil)).Elem()
}

func (o ClusterNodeTypeApplicationPortsPtrOutput) ToClusterNodeTypeApplicationPortsPtrOutput() ClusterNodeTypeApplicationPortsPtrOutput {
	return o
}

func (o ClusterNodeTypeApplicationPortsPtrOutput) ToClusterNodeTypeApplicationPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeApplicationPortsPtrOutput {
	return o
}

func (o ClusterNodeTypeApplicationPortsPtrOutput) Elem() ClusterNodeTypeApplicationPortsOutput {
	return o.ApplyT(func(v *ClusterNodeTypeApplicationPorts) ClusterNodeTypeApplicationPorts { return *v }).(ClusterNodeTypeApplicationPortsOutput)
}

// The end of the Application Port Range on this Node Type.
func (o ClusterNodeTypeApplicationPortsPtrOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeTypeApplicationPorts) int { return v.EndPort }).(pulumi.IntOutput)
}

// The start of the Application Port Range on this Node Type.
func (o ClusterNodeTypeApplicationPortsPtrOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeTypeApplicationPorts) int { return v.StartPort }).(pulumi.IntOutput)
}

type ClusterNodeTypeEphemeralPorts struct {
	// The end of the Ephemeral Port Range on this Node Type.
	EndPort int `pulumi:"endPort"`
	// The start of the Ephemeral Port Range on this Node Type.
	StartPort int `pulumi:"startPort"`
}

type ClusterNodeTypeEphemeralPortsInput interface {
	pulumi.Input

	ToClusterNodeTypeEphemeralPortsOutput() ClusterNodeTypeEphemeralPortsOutput
	ToClusterNodeTypeEphemeralPortsOutputWithContext(context.Context) ClusterNodeTypeEphemeralPortsOutput
}

type ClusterNodeTypeEphemeralPortsArgs struct {
	// The end of the Ephemeral Port Range on this Node Type.
	EndPort pulumi.IntInput `pulumi:"endPort"`
	// The start of the Ephemeral Port Range on this Node Type.
	StartPort pulumi.IntInput `pulumi:"startPort"`
}

func (ClusterNodeTypeEphemeralPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeTypeEphemeralPorts)(nil)).Elem()
}

func (i ClusterNodeTypeEphemeralPortsArgs) ToClusterNodeTypeEphemeralPortsOutput() ClusterNodeTypeEphemeralPortsOutput {
	return i.ToClusterNodeTypeEphemeralPortsOutputWithContext(context.Background())
}

func (i ClusterNodeTypeEphemeralPortsArgs) ToClusterNodeTypeEphemeralPortsOutputWithContext(ctx context.Context) ClusterNodeTypeEphemeralPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeEphemeralPortsOutput)
}

func (i ClusterNodeTypeEphemeralPortsArgs) ToClusterNodeTypeEphemeralPortsPtrOutput() ClusterNodeTypeEphemeralPortsPtrOutput {
	return i.ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(context.Background())
}

func (i ClusterNodeTypeEphemeralPortsArgs) ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeEphemeralPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeEphemeralPortsOutput).ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(ctx)
}

type ClusterNodeTypeEphemeralPortsPtrInput interface {
	pulumi.Input

	ToClusterNodeTypeEphemeralPortsPtrOutput() ClusterNodeTypeEphemeralPortsPtrOutput
	ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(context.Context) ClusterNodeTypeEphemeralPortsPtrOutput
}

type clusterNodeTypeEphemeralPortsPtrType ClusterNodeTypeEphemeralPortsArgs

func ClusterNodeTypeEphemeralPortsPtr(v *ClusterNodeTypeEphemeralPortsArgs) ClusterNodeTypeEphemeralPortsPtrInput {
	return (*clusterNodeTypeEphemeralPortsPtrType)(v)
}

func (*clusterNodeTypeEphemeralPortsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeTypeEphemeralPorts)(nil)).Elem()
}

func (i *clusterNodeTypeEphemeralPortsPtrType) ToClusterNodeTypeEphemeralPortsPtrOutput() ClusterNodeTypeEphemeralPortsPtrOutput {
	return i.ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(context.Background())
}

func (i *clusterNodeTypeEphemeralPortsPtrType) ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeEphemeralPortsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeTypeEphemeralPortsPtrOutput)
}

type ClusterNodeTypeEphemeralPortsOutput struct{ *pulumi.OutputState }

func (ClusterNodeTypeEphemeralPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeTypeEphemeralPorts)(nil)).Elem()
}

func (o ClusterNodeTypeEphemeralPortsOutput) ToClusterNodeTypeEphemeralPortsOutput() ClusterNodeTypeEphemeralPortsOutput {
	return o
}

func (o ClusterNodeTypeEphemeralPortsOutput) ToClusterNodeTypeEphemeralPortsOutputWithContext(ctx context.Context) ClusterNodeTypeEphemeralPortsOutput {
	return o
}

func (o ClusterNodeTypeEphemeralPortsOutput) ToClusterNodeTypeEphemeralPortsPtrOutput() ClusterNodeTypeEphemeralPortsPtrOutput {
	return o.ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(context.Background())
}

func (o ClusterNodeTypeEphemeralPortsOutput) ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeEphemeralPortsPtrOutput {
	return o.ApplyT(func(v ClusterNodeTypeEphemeralPorts) *ClusterNodeTypeEphemeralPorts {
		return &v
	}).(ClusterNodeTypeEphemeralPortsPtrOutput)
}

// The end of the Ephemeral Port Range on this Node Type.
func (o ClusterNodeTypeEphemeralPortsOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeTypeEphemeralPorts) int { return v.EndPort }).(pulumi.IntOutput)
}

// The start of the Ephemeral Port Range on this Node Type.
func (o ClusterNodeTypeEphemeralPortsOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeTypeEphemeralPorts) int { return v.StartPort }).(pulumi.IntOutput)
}

type ClusterNodeTypeEphemeralPortsPtrOutput struct{ *pulumi.OutputState }

func (ClusterNodeTypeEphemeralPortsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeTypeEphemeralPorts)(nil)).Elem()
}

func (o ClusterNodeTypeEphemeralPortsPtrOutput) ToClusterNodeTypeEphemeralPortsPtrOutput() ClusterNodeTypeEphemeralPortsPtrOutput {
	return o
}

func (o ClusterNodeTypeEphemeralPortsPtrOutput) ToClusterNodeTypeEphemeralPortsPtrOutputWithContext(ctx context.Context) ClusterNodeTypeEphemeralPortsPtrOutput {
	return o
}

func (o ClusterNodeTypeEphemeralPortsPtrOutput) Elem() ClusterNodeTypeEphemeralPortsOutput {
	return o.ApplyT(func(v *ClusterNodeTypeEphemeralPorts) ClusterNodeTypeEphemeralPorts { return *v }).(ClusterNodeTypeEphemeralPortsOutput)
}

// The end of the Ephemeral Port Range on this Node Type.
func (o ClusterNodeTypeEphemeralPortsPtrOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeTypeEphemeralPorts) int { return v.EndPort }).(pulumi.IntOutput)
}

// The start of the Ephemeral Port Range on this Node Type.
func (o ClusterNodeTypeEphemeralPortsPtrOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeTypeEphemeralPorts) int { return v.StartPort }).(pulumi.IntOutput)
}

type ClusterReverseProxyCertificate struct {
	// The Thumbprint of the Certificate.
	Thumbprint string `pulumi:"thumbprint"`
	// The Secondary Thumbprint of the Certificate.
	ThumbprintSecondary *string `pulumi:"thumbprintSecondary"`
	// The X509 Store where the Certificate Exists, such as `My`.
	X509StoreName string `pulumi:"x509StoreName"`
}

type ClusterReverseProxyCertificateInput interface {
	pulumi.Input

	ToClusterReverseProxyCertificateOutput() ClusterReverseProxyCertificateOutput
	ToClusterReverseProxyCertificateOutputWithContext(context.Context) ClusterReverseProxyCertificateOutput
}

type ClusterReverseProxyCertificateArgs struct {
	// The Thumbprint of the Certificate.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
	// The Secondary Thumbprint of the Certificate.
	ThumbprintSecondary pulumi.StringPtrInput `pulumi:"thumbprintSecondary"`
	// The X509 Store where the Certificate Exists, such as `My`.
	X509StoreName pulumi.StringInput `pulumi:"x509StoreName"`
}

func (ClusterReverseProxyCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterReverseProxyCertificate)(nil)).Elem()
}

func (i ClusterReverseProxyCertificateArgs) ToClusterReverseProxyCertificateOutput() ClusterReverseProxyCertificateOutput {
	return i.ToClusterReverseProxyCertificateOutputWithContext(context.Background())
}

func (i ClusterReverseProxyCertificateArgs) ToClusterReverseProxyCertificateOutputWithContext(ctx context.Context) ClusterReverseProxyCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterReverseProxyCertificateOutput)
}

func (i ClusterReverseProxyCertificateArgs) ToClusterReverseProxyCertificatePtrOutput() ClusterReverseProxyCertificatePtrOutput {
	return i.ToClusterReverseProxyCertificatePtrOutputWithContext(context.Background())
}

func (i ClusterReverseProxyCertificateArgs) ToClusterReverseProxyCertificatePtrOutputWithContext(ctx context.Context) ClusterReverseProxyCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterReverseProxyCertificateOutput).ToClusterReverseProxyCertificatePtrOutputWithContext(ctx)
}

type ClusterReverseProxyCertificatePtrInput interface {
	pulumi.Input

	ToClusterReverseProxyCertificatePtrOutput() ClusterReverseProxyCertificatePtrOutput
	ToClusterReverseProxyCertificatePtrOutputWithContext(context.Context) ClusterReverseProxyCertificatePtrOutput
}

type clusterReverseProxyCertificatePtrType ClusterReverseProxyCertificateArgs

func ClusterReverseProxyCertificatePtr(v *ClusterReverseProxyCertificateArgs) ClusterReverseProxyCertificatePtrInput {
	return (*clusterReverseProxyCertificatePtrType)(v)
}

func (*clusterReverseProxyCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterReverseProxyCertificate)(nil)).Elem()
}

func (i *clusterReverseProxyCertificatePtrType) ToClusterReverseProxyCertificatePtrOutput() ClusterReverseProxyCertificatePtrOutput {
	return i.ToClusterReverseProxyCertificatePtrOutputWithContext(context.Background())
}

func (i *clusterReverseProxyCertificatePtrType) ToClusterReverseProxyCertificatePtrOutputWithContext(ctx context.Context) ClusterReverseProxyCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterReverseProxyCertificatePtrOutput)
}

type ClusterReverseProxyCertificateOutput struct{ *pulumi.OutputState }

func (ClusterReverseProxyCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterReverseProxyCertificate)(nil)).Elem()
}

func (o ClusterReverseProxyCertificateOutput) ToClusterReverseProxyCertificateOutput() ClusterReverseProxyCertificateOutput {
	return o
}

func (o ClusterReverseProxyCertificateOutput) ToClusterReverseProxyCertificateOutputWithContext(ctx context.Context) ClusterReverseProxyCertificateOutput {
	return o
}

func (o ClusterReverseProxyCertificateOutput) ToClusterReverseProxyCertificatePtrOutput() ClusterReverseProxyCertificatePtrOutput {
	return o.ToClusterReverseProxyCertificatePtrOutputWithContext(context.Background())
}

func (o ClusterReverseProxyCertificateOutput) ToClusterReverseProxyCertificatePtrOutputWithContext(ctx context.Context) ClusterReverseProxyCertificatePtrOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificate) *ClusterReverseProxyCertificate {
		return &v
	}).(ClusterReverseProxyCertificatePtrOutput)
}

// The Thumbprint of the Certificate.
func (o ClusterReverseProxyCertificateOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificate) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// The Secondary Thumbprint of the Certificate.
func (o ClusterReverseProxyCertificateOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificate) *string { return v.ThumbprintSecondary }).(pulumi.StringPtrOutput)
}

// The X509 Store where the Certificate Exists, such as `My`.
func (o ClusterReverseProxyCertificateOutput) X509StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificate) string { return v.X509StoreName }).(pulumi.StringOutput)
}

type ClusterReverseProxyCertificatePtrOutput struct{ *pulumi.OutputState }

func (ClusterReverseProxyCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterReverseProxyCertificate)(nil)).Elem()
}

func (o ClusterReverseProxyCertificatePtrOutput) ToClusterReverseProxyCertificatePtrOutput() ClusterReverseProxyCertificatePtrOutput {
	return o
}

func (o ClusterReverseProxyCertificatePtrOutput) ToClusterReverseProxyCertificatePtrOutputWithContext(ctx context.Context) ClusterReverseProxyCertificatePtrOutput {
	return o
}

func (o ClusterReverseProxyCertificatePtrOutput) Elem() ClusterReverseProxyCertificateOutput {
	return o.ApplyT(func(v *ClusterReverseProxyCertificate) ClusterReverseProxyCertificate { return *v }).(ClusterReverseProxyCertificateOutput)
}

// The Thumbprint of the Certificate.
func (o ClusterReverseProxyCertificatePtrOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificate) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// The Secondary Thumbprint of the Certificate.
func (o ClusterReverseProxyCertificatePtrOutput) ThumbprintSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificate) *string { return v.ThumbprintSecondary }).(pulumi.StringPtrOutput)
}

// The X509 Store where the Certificate Exists, such as `My`.
func (o ClusterReverseProxyCertificatePtrOutput) X509StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterReverseProxyCertificate) string { return v.X509StoreName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ClusterAzureActiveDirectoryOutput{})
	pulumi.RegisterOutputType(ClusterAzureActiveDirectoryPtrOutput{})
	pulumi.RegisterOutputType(ClusterCertificateOutput{})
	pulumi.RegisterOutputType(ClusterCertificatePtrOutput{})
	pulumi.RegisterOutputType(ClusterCertificateCommonNamesOutput{})
	pulumi.RegisterOutputType(ClusterCertificateCommonNamesPtrOutput{})
	pulumi.RegisterOutputType(ClusterCertificateCommonNamesCommonNameOutput{})
	pulumi.RegisterOutputType(ClusterCertificateCommonNamesCommonNameArrayOutput{})
	pulumi.RegisterOutputType(ClusterClientCertificateThumbprintOutput{})
	pulumi.RegisterOutputType(ClusterClientCertificateThumbprintArrayOutput{})
	pulumi.RegisterOutputType(ClusterDiagnosticsConfigOutput{})
	pulumi.RegisterOutputType(ClusterDiagnosticsConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterFabricSettingOutput{})
	pulumi.RegisterOutputType(ClusterFabricSettingArrayOutput{})
	pulumi.RegisterOutputType(ClusterNodeTypeOutput{})
	pulumi.RegisterOutputType(ClusterNodeTypeArrayOutput{})
	pulumi.RegisterOutputType(ClusterNodeTypeApplicationPortsOutput{})
	pulumi.RegisterOutputType(ClusterNodeTypeApplicationPortsPtrOutput{})
	pulumi.RegisterOutputType(ClusterNodeTypeEphemeralPortsOutput{})
	pulumi.RegisterOutputType(ClusterNodeTypeEphemeralPortsPtrOutput{})
	pulumi.RegisterOutputType(ClusterReverseProxyCertificateOutput{})
	pulumi.RegisterOutputType(ClusterReverseProxyCertificatePtrOutput{})
}
