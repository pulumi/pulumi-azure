// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package expressroute

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing ExpressRoute Circuit Peering.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/expressroute"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := expressroute.GetCircuitPeering(ctx, &expressroute.GetCircuitPeeringArgs{
//				PeeringType:             "example-peering",
//				ExpressRouteCircuitName: "example-expressroute",
//				ResourceGroupName:       "example-resources",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCircuitPeering(ctx *pulumi.Context, args *GetCircuitPeeringArgs, opts ...pulumi.InvokeOption) (*GetCircuitPeeringResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCircuitPeeringResult
	err := ctx.Invoke("azure:expressroute/getCircuitPeering:getCircuitPeering", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCircuitPeering.
type GetCircuitPeeringArgs struct {
	// The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
	ExpressRouteCircuitName string `pulumi:"expressRouteCircuitName"`
	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
	PeeringType string `pulumi:"peeringType"`
	// The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getCircuitPeering.
type GetCircuitPeeringResult struct {
	// The ASN used by Azure for the peering.
	AzureAsn                int    `pulumi:"azureAsn"`
	ExpressRouteCircuitName string `pulumi:"expressRouteCircuitName"`
	GatewayManagerEtag      string `pulumi:"gatewayManagerEtag"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates if IPv4 is enabled.
	Ipv4Enabled bool `pulumi:"ipv4Enabled"`
	PeerAsn     int  `pulumi:"peerAsn"`
	// The type of the ExpressRoute Circuit Peering.
	PeeringType string `pulumi:"peeringType"`
	// The primary port used by Azure for this peering.
	PrimaryAzurePort string `pulumi:"primaryAzurePort"`
	// The primary peer address prefix.
	PrimaryPeerAddressPrefix string `pulumi:"primaryPeerAddressPrefix"`
	ResourceGroupName        string `pulumi:"resourceGroupName"`
	RouteFilterId            string `pulumi:"routeFilterId"`
	// The secondary port used by Azure for this peering.
	SecondaryAzurePort string `pulumi:"secondaryAzurePort"`
	// The secondary peer address prefix.
	SecondaryPeerAddressPrefix string `pulumi:"secondaryPeerAddressPrefix"`
	SharedKey                  string `pulumi:"sharedKey"`
	// The VLAN ID used for this peering.
	VlanId int `pulumi:"vlanId"`
}

func GetCircuitPeeringOutput(ctx *pulumi.Context, args GetCircuitPeeringOutputArgs, opts ...pulumi.InvokeOption) GetCircuitPeeringResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCircuitPeeringResult, error) {
			args := v.(GetCircuitPeeringArgs)
			r, err := GetCircuitPeering(ctx, &args, opts...)
			var s GetCircuitPeeringResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCircuitPeeringResultOutput)
}

// A collection of arguments for invoking getCircuitPeering.
type GetCircuitPeeringOutputArgs struct {
	// The name of the ExpressRoute Circuit in which to create the Peering. Changing this forces a new resource to be created.
	ExpressRouteCircuitName pulumi.StringInput `pulumi:"expressRouteCircuitName"`
	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`.
	PeeringType pulumi.StringInput `pulumi:"peeringType"`
	// The name of the resource group in which to create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (GetCircuitPeeringOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCircuitPeeringArgs)(nil)).Elem()
}

// A collection of values returned by getCircuitPeering.
type GetCircuitPeeringResultOutput struct{ *pulumi.OutputState }

func (GetCircuitPeeringResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCircuitPeeringResult)(nil)).Elem()
}

func (o GetCircuitPeeringResultOutput) ToGetCircuitPeeringResultOutput() GetCircuitPeeringResultOutput {
	return o
}

func (o GetCircuitPeeringResultOutput) ToGetCircuitPeeringResultOutputWithContext(ctx context.Context) GetCircuitPeeringResultOutput {
	return o
}

// The ASN used by Azure for the peering.
func (o GetCircuitPeeringResultOutput) AzureAsn() pulumi.IntOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) int { return v.AzureAsn }).(pulumi.IntOutput)
}

func (o GetCircuitPeeringResultOutput) ExpressRouteCircuitName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) string { return v.ExpressRouteCircuitName }).(pulumi.StringOutput)
}

func (o GetCircuitPeeringResultOutput) GatewayManagerEtag() pulumi.StringOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) string { return v.GatewayManagerEtag }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCircuitPeeringResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates if IPv4 is enabled.
func (o GetCircuitPeeringResultOutput) Ipv4Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) bool { return v.Ipv4Enabled }).(pulumi.BoolOutput)
}

func (o GetCircuitPeeringResultOutput) PeerAsn() pulumi.IntOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) int { return v.PeerAsn }).(pulumi.IntOutput)
}

// The type of the ExpressRoute Circuit Peering.
func (o GetCircuitPeeringResultOutput) PeeringType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) string { return v.PeeringType }).(pulumi.StringOutput)
}

// The primary port used by Azure for this peering.
func (o GetCircuitPeeringResultOutput) PrimaryAzurePort() pulumi.StringOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) string { return v.PrimaryAzurePort }).(pulumi.StringOutput)
}

// The primary peer address prefix.
func (o GetCircuitPeeringResultOutput) PrimaryPeerAddressPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) string { return v.PrimaryPeerAddressPrefix }).(pulumi.StringOutput)
}

func (o GetCircuitPeeringResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

func (o GetCircuitPeeringResultOutput) RouteFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) string { return v.RouteFilterId }).(pulumi.StringOutput)
}

// The secondary port used by Azure for this peering.
func (o GetCircuitPeeringResultOutput) SecondaryAzurePort() pulumi.StringOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) string { return v.SecondaryAzurePort }).(pulumi.StringOutput)
}

// The secondary peer address prefix.
func (o GetCircuitPeeringResultOutput) SecondaryPeerAddressPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) string { return v.SecondaryPeerAddressPrefix }).(pulumi.StringOutput)
}

func (o GetCircuitPeeringResultOutput) SharedKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) string { return v.SharedKey }).(pulumi.StringOutput)
}

// The VLAN ID used for this peering.
func (o GetCircuitPeeringResultOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v GetCircuitPeeringResult) int { return v.VlanId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCircuitPeeringResultOutput{})
}
