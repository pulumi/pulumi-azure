// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package frontdoor

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> **IMPORTANT** This deploys an Azure Front Door (classic) resource which has been deprecated and will receive security updates only. Please migrate your existing Azure Front Door (classic) deployments to the new Azure Front Door (standard/premium) resources. For your convenience, the service team has exposed a `Front Door Classic` to `Front Door Standard/Premium` [migration tool](https://learn.microsoft.com/azure/frontdoor/tier-migration) to allow you to migrate your existing `Front Door Classic` instances to the new `Front Door Standard/Premium` product tiers.
//
// Manages an Azure Front Door (classic) instance.
//
// Azure Front Door Service is Microsoft's highly available and scalable web application acceleration platform and global HTTP(S) load balancer. It provides built-in DDoS protection and application layer security and caching. Front Door enables you to build applications that maximize and automate high-availability and performance for your end-users. Use Front Door with Azure services including Web/Mobile Apps, Cloud Services and Virtual Machines â€“ or combine it with on-premises services for hybrid deployments and smooth cloud migration.
//
// Below are some of the key scenarios that Azure Front Door Service addresses:
//
// * Use Front Door to improve application scale and availability with instant multi-region failover
// * Use Front Door to improve application performance with SSL offload and routing requests to the fastest available application backend.
// * Use Front Door for application layer security and DDoS protection for your application.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/frontdoor"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = frontdoor.NewFrontdoor(ctx, "exampleFrontdoor", &frontdoor.FrontdoorArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				RoutingRules: frontdoor.FrontdoorRoutingRuleArray{
//					&frontdoor.FrontdoorRoutingRuleArgs{
//						Name: pulumi.String("exampleRoutingRule1"),
//						AcceptedProtocols: pulumi.StringArray{
//							pulumi.String("Http"),
//							pulumi.String("Https"),
//						},
//						PatternsToMatches: pulumi.StringArray{
//							pulumi.String("/*"),
//						},
//						FrontendEndpoints: pulumi.StringArray{
//							pulumi.String("exampleFrontendEndpoint1"),
//						},
//						ForwardingConfiguration: &frontdoor.FrontdoorRoutingRuleForwardingConfigurationArgs{
//							ForwardingProtocol: pulumi.String("MatchRequest"),
//							BackendPoolName:    pulumi.String("exampleBackendBing"),
//						},
//					},
//				},
//				BackendPoolLoadBalancings: frontdoor.FrontdoorBackendPoolLoadBalancingArray{
//					&frontdoor.FrontdoorBackendPoolLoadBalancingArgs{
//						Name: pulumi.String("exampleLoadBalancingSettings1"),
//					},
//				},
//				BackendPoolHealthProbes: frontdoor.FrontdoorBackendPoolHealthProbeArray{
//					&frontdoor.FrontdoorBackendPoolHealthProbeArgs{
//						Name: pulumi.String("exampleHealthProbeSetting1"),
//					},
//				},
//				BackendPools: frontdoor.FrontdoorBackendPoolArray{
//					&frontdoor.FrontdoorBackendPoolArgs{
//						Name: pulumi.String("exampleBackendBing"),
//						Backends: frontdoor.FrontdoorBackendPoolBackendArray{
//							&frontdoor.FrontdoorBackendPoolBackendArgs{
//								HostHeader: pulumi.String("www.bing.com"),
//								Address:    pulumi.String("www.bing.com"),
//								HttpPort:   pulumi.Int(80),
//								HttpsPort:  pulumi.Int(443),
//							},
//						},
//						LoadBalancingName: pulumi.String("exampleLoadBalancingSettings1"),
//						HealthProbeName:   pulumi.String("exampleHealthProbeSetting1"),
//					},
//				},
//				FrontendEndpoints: frontdoor.FrontdoorFrontendEndpointArray{
//					&frontdoor.FrontdoorFrontendEndpointArgs{
//						Name:     pulumi.String("exampleFrontendEndpoint1"),
//						HostName: pulumi.String("example-FrontDoor.azurefd.net"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Front Doors can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:frontdoor/frontdoor:Frontdoor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/frontDoors/frontdoor1
//
// ```
type Frontdoor struct {
	pulumi.CustomResourceState

	// A `backendPoolHealthProbe` block as defined below.
	BackendPoolHealthProbes FrontdoorBackendPoolHealthProbeArrayOutput `pulumi:"backendPoolHealthProbes"`
	// A map/dictionary of Backend Pool Health Probe Names (key) to the Backend Pool Health Probe ID (value)
	BackendPoolHealthProbesMap pulumi.StringMapOutput `pulumi:"backendPoolHealthProbesMap"`
	// A map/dictionary of Backend Pool Load Balancing Setting Names (key) to the Backend Pool Load Balancing Setting ID (value)
	BackendPoolLoadBalancingSettingsMap pulumi.StringMapOutput `pulumi:"backendPoolLoadBalancingSettingsMap"`
	// A `backendPoolLoadBalancing` block as defined below.
	BackendPoolLoadBalancings FrontdoorBackendPoolLoadBalancingArrayOutput `pulumi:"backendPoolLoadBalancings"`
	// A `backendPoolSettings` block as defined below.
	BackendPoolSettings FrontdoorBackendPoolSettingArrayOutput `pulumi:"backendPoolSettings"`
	// A `backendPool` block as defined below.
	//
	// > Azure by default allows specifying up to 50 Backend Pools - but this quota can be increased via Microsoft Support.
	BackendPools FrontdoorBackendPoolArrayOutput `pulumi:"backendPools"`
	// A map/dictionary of Backend Pool Names (key) to the Backend Pool ID (value)
	BackendPoolsMap pulumi.StringMapOutput `pulumi:"backendPoolsMap"`
	// The host that each frontendEndpoint must CNAME to.
	Cname                  pulumi.StringOutput                       `pulumi:"cname"`
	ExplicitResourceOrders FrontdoorExplicitResourceOrderArrayOutput `pulumi:"explicitResourceOrders"`
	// A friendly name for the Front Door service.
	FriendlyName pulumi.StringPtrOutput `pulumi:"friendlyName"`
	// A `frontendEndpoint` block as defined below.
	FrontendEndpoints FrontdoorFrontendEndpointArrayOutput `pulumi:"frontendEndpoints"`
	// The names of the `frontendEndpoint` blocks within this resource to associate with this `routingRule`.
	FrontendEndpointsMap pulumi.StringMapOutput `pulumi:"frontendEndpointsMap"`
	// The unique ID of the Front Door which is embedded into the incoming headers `X-Azure-FDID` attribute and maybe used to filter traffic sent by the Front Door to your backend.
	HeaderFrontdoorId pulumi.StringOutput `pulumi:"headerFrontdoorId"`
	// Should the Front Door Load Balancer be Enabled? Defaults to `true`.
	LoadBalancerEnabled pulumi.BoolPtrOutput `pulumi:"loadBalancerEnabled"`
	// Specifies the name of the Front Door service. Must be globally unique. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `routingRule` block as defined below.
	RoutingRules FrontdoorRoutingRuleArrayOutput `pulumi:"routingRules"`
	// A map/dictionary of Routing Rule Names (key) to the Routing Rule ID (value)
	RoutingRulesMap pulumi.StringMapOutput `pulumi:"routingRulesMap"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewFrontdoor registers a new resource with the given unique name, arguments, and options.
func NewFrontdoor(ctx *pulumi.Context,
	name string, args *FrontdoorArgs, opts ...pulumi.ResourceOption) (*Frontdoor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackendPoolHealthProbes == nil {
		return nil, errors.New("invalid value for required argument 'BackendPoolHealthProbes'")
	}
	if args.BackendPoolLoadBalancings == nil {
		return nil, errors.New("invalid value for required argument 'BackendPoolLoadBalancings'")
	}
	if args.BackendPools == nil {
		return nil, errors.New("invalid value for required argument 'BackendPools'")
	}
	if args.FrontendEndpoints == nil {
		return nil, errors.New("invalid value for required argument 'FrontendEndpoints'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.RoutingRules == nil {
		return nil, errors.New("invalid value for required argument 'RoutingRules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Frontdoor
	err := ctx.RegisterResource("azure:frontdoor/frontdoor:Frontdoor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFrontdoor gets an existing Frontdoor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFrontdoor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FrontdoorState, opts ...pulumi.ResourceOption) (*Frontdoor, error) {
	var resource Frontdoor
	err := ctx.ReadResource("azure:frontdoor/frontdoor:Frontdoor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Frontdoor resources.
type frontdoorState struct {
	// A `backendPoolHealthProbe` block as defined below.
	BackendPoolHealthProbes []FrontdoorBackendPoolHealthProbe `pulumi:"backendPoolHealthProbes"`
	// A map/dictionary of Backend Pool Health Probe Names (key) to the Backend Pool Health Probe ID (value)
	BackendPoolHealthProbesMap map[string]string `pulumi:"backendPoolHealthProbesMap"`
	// A map/dictionary of Backend Pool Load Balancing Setting Names (key) to the Backend Pool Load Balancing Setting ID (value)
	BackendPoolLoadBalancingSettingsMap map[string]string `pulumi:"backendPoolLoadBalancingSettingsMap"`
	// A `backendPoolLoadBalancing` block as defined below.
	BackendPoolLoadBalancings []FrontdoorBackendPoolLoadBalancing `pulumi:"backendPoolLoadBalancings"`
	// A `backendPoolSettings` block as defined below.
	BackendPoolSettings []FrontdoorBackendPoolSetting `pulumi:"backendPoolSettings"`
	// A `backendPool` block as defined below.
	//
	// > Azure by default allows specifying up to 50 Backend Pools - but this quota can be increased via Microsoft Support.
	BackendPools []FrontdoorBackendPool `pulumi:"backendPools"`
	// A map/dictionary of Backend Pool Names (key) to the Backend Pool ID (value)
	BackendPoolsMap map[string]string `pulumi:"backendPoolsMap"`
	// The host that each frontendEndpoint must CNAME to.
	Cname                  *string                          `pulumi:"cname"`
	ExplicitResourceOrders []FrontdoorExplicitResourceOrder `pulumi:"explicitResourceOrders"`
	// A friendly name for the Front Door service.
	FriendlyName *string `pulumi:"friendlyName"`
	// A `frontendEndpoint` block as defined below.
	FrontendEndpoints []FrontdoorFrontendEndpoint `pulumi:"frontendEndpoints"`
	// The names of the `frontendEndpoint` blocks within this resource to associate with this `routingRule`.
	FrontendEndpointsMap map[string]string `pulumi:"frontendEndpointsMap"`
	// The unique ID of the Front Door which is embedded into the incoming headers `X-Azure-FDID` attribute and maybe used to filter traffic sent by the Front Door to your backend.
	HeaderFrontdoorId *string `pulumi:"headerFrontdoorId"`
	// Should the Front Door Load Balancer be Enabled? Defaults to `true`.
	LoadBalancerEnabled *bool `pulumi:"loadBalancerEnabled"`
	// Specifies the name of the Front Door service. Must be globally unique. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `routingRule` block as defined below.
	RoutingRules []FrontdoorRoutingRule `pulumi:"routingRules"`
	// A map/dictionary of Routing Rule Names (key) to the Routing Rule ID (value)
	RoutingRulesMap map[string]string `pulumi:"routingRulesMap"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type FrontdoorState struct {
	// A `backendPoolHealthProbe` block as defined below.
	BackendPoolHealthProbes FrontdoorBackendPoolHealthProbeArrayInput
	// A map/dictionary of Backend Pool Health Probe Names (key) to the Backend Pool Health Probe ID (value)
	BackendPoolHealthProbesMap pulumi.StringMapInput
	// A map/dictionary of Backend Pool Load Balancing Setting Names (key) to the Backend Pool Load Balancing Setting ID (value)
	BackendPoolLoadBalancingSettingsMap pulumi.StringMapInput
	// A `backendPoolLoadBalancing` block as defined below.
	BackendPoolLoadBalancings FrontdoorBackendPoolLoadBalancingArrayInput
	// A `backendPoolSettings` block as defined below.
	BackendPoolSettings FrontdoorBackendPoolSettingArrayInput
	// A `backendPool` block as defined below.
	//
	// > Azure by default allows specifying up to 50 Backend Pools - but this quota can be increased via Microsoft Support.
	BackendPools FrontdoorBackendPoolArrayInput
	// A map/dictionary of Backend Pool Names (key) to the Backend Pool ID (value)
	BackendPoolsMap pulumi.StringMapInput
	// The host that each frontendEndpoint must CNAME to.
	Cname                  pulumi.StringPtrInput
	ExplicitResourceOrders FrontdoorExplicitResourceOrderArrayInput
	// A friendly name for the Front Door service.
	FriendlyName pulumi.StringPtrInput
	// A `frontendEndpoint` block as defined below.
	FrontendEndpoints FrontdoorFrontendEndpointArrayInput
	// The names of the `frontendEndpoint` blocks within this resource to associate with this `routingRule`.
	FrontendEndpointsMap pulumi.StringMapInput
	// The unique ID of the Front Door which is embedded into the incoming headers `X-Azure-FDID` attribute and maybe used to filter traffic sent by the Front Door to your backend.
	HeaderFrontdoorId pulumi.StringPtrInput
	// Should the Front Door Load Balancer be Enabled? Defaults to `true`.
	LoadBalancerEnabled pulumi.BoolPtrInput
	// Specifies the name of the Front Door service. Must be globally unique. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `routingRule` block as defined below.
	RoutingRules FrontdoorRoutingRuleArrayInput
	// A map/dictionary of Routing Rule Names (key) to the Routing Rule ID (value)
	RoutingRulesMap pulumi.StringMapInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (FrontdoorState) ElementType() reflect.Type {
	return reflect.TypeOf((*frontdoorState)(nil)).Elem()
}

type frontdoorArgs struct {
	// A `backendPoolHealthProbe` block as defined below.
	BackendPoolHealthProbes []FrontdoorBackendPoolHealthProbe `pulumi:"backendPoolHealthProbes"`
	// A `backendPoolLoadBalancing` block as defined below.
	BackendPoolLoadBalancings []FrontdoorBackendPoolLoadBalancing `pulumi:"backendPoolLoadBalancings"`
	// A `backendPoolSettings` block as defined below.
	BackendPoolSettings []FrontdoorBackendPoolSetting `pulumi:"backendPoolSettings"`
	// A `backendPool` block as defined below.
	//
	// > Azure by default allows specifying up to 50 Backend Pools - but this quota can be increased via Microsoft Support.
	BackendPools []FrontdoorBackendPool `pulumi:"backendPools"`
	// A friendly name for the Front Door service.
	FriendlyName *string `pulumi:"friendlyName"`
	// A `frontendEndpoint` block as defined below.
	FrontendEndpoints []FrontdoorFrontendEndpoint `pulumi:"frontendEndpoints"`
	// Should the Front Door Load Balancer be Enabled? Defaults to `true`.
	LoadBalancerEnabled *bool `pulumi:"loadBalancerEnabled"`
	// Specifies the name of the Front Door service. Must be globally unique. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `routingRule` block as defined below.
	RoutingRules []FrontdoorRoutingRule `pulumi:"routingRules"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Frontdoor resource.
type FrontdoorArgs struct {
	// A `backendPoolHealthProbe` block as defined below.
	BackendPoolHealthProbes FrontdoorBackendPoolHealthProbeArrayInput
	// A `backendPoolLoadBalancing` block as defined below.
	BackendPoolLoadBalancings FrontdoorBackendPoolLoadBalancingArrayInput
	// A `backendPoolSettings` block as defined below.
	BackendPoolSettings FrontdoorBackendPoolSettingArrayInput
	// A `backendPool` block as defined below.
	//
	// > Azure by default allows specifying up to 50 Backend Pools - but this quota can be increased via Microsoft Support.
	BackendPools FrontdoorBackendPoolArrayInput
	// A friendly name for the Front Door service.
	FriendlyName pulumi.StringPtrInput
	// A `frontendEndpoint` block as defined below.
	FrontendEndpoints FrontdoorFrontendEndpointArrayInput
	// Should the Front Door Load Balancer be Enabled? Defaults to `true`.
	LoadBalancerEnabled pulumi.BoolPtrInput
	// Specifies the name of the Front Door service. Must be globally unique. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `routingRule` block as defined below.
	RoutingRules FrontdoorRoutingRuleArrayInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (FrontdoorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*frontdoorArgs)(nil)).Elem()
}

type FrontdoorInput interface {
	pulumi.Input

	ToFrontdoorOutput() FrontdoorOutput
	ToFrontdoorOutputWithContext(ctx context.Context) FrontdoorOutput
}

func (*Frontdoor) ElementType() reflect.Type {
	return reflect.TypeOf((**Frontdoor)(nil)).Elem()
}

func (i *Frontdoor) ToFrontdoorOutput() FrontdoorOutput {
	return i.ToFrontdoorOutputWithContext(context.Background())
}

func (i *Frontdoor) ToFrontdoorOutputWithContext(ctx context.Context) FrontdoorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorOutput)
}

// FrontdoorArrayInput is an input type that accepts FrontdoorArray and FrontdoorArrayOutput values.
// You can construct a concrete instance of `FrontdoorArrayInput` via:
//
//	FrontdoorArray{ FrontdoorArgs{...} }
type FrontdoorArrayInput interface {
	pulumi.Input

	ToFrontdoorArrayOutput() FrontdoorArrayOutput
	ToFrontdoorArrayOutputWithContext(context.Context) FrontdoorArrayOutput
}

type FrontdoorArray []FrontdoorInput

func (FrontdoorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Frontdoor)(nil)).Elem()
}

func (i FrontdoorArray) ToFrontdoorArrayOutput() FrontdoorArrayOutput {
	return i.ToFrontdoorArrayOutputWithContext(context.Background())
}

func (i FrontdoorArray) ToFrontdoorArrayOutputWithContext(ctx context.Context) FrontdoorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorArrayOutput)
}

// FrontdoorMapInput is an input type that accepts FrontdoorMap and FrontdoorMapOutput values.
// You can construct a concrete instance of `FrontdoorMapInput` via:
//
//	FrontdoorMap{ "key": FrontdoorArgs{...} }
type FrontdoorMapInput interface {
	pulumi.Input

	ToFrontdoorMapOutput() FrontdoorMapOutput
	ToFrontdoorMapOutputWithContext(context.Context) FrontdoorMapOutput
}

type FrontdoorMap map[string]FrontdoorInput

func (FrontdoorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Frontdoor)(nil)).Elem()
}

func (i FrontdoorMap) ToFrontdoorMapOutput() FrontdoorMapOutput {
	return i.ToFrontdoorMapOutputWithContext(context.Background())
}

func (i FrontdoorMap) ToFrontdoorMapOutputWithContext(ctx context.Context) FrontdoorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorMapOutput)
}

type FrontdoorOutput struct{ *pulumi.OutputState }

func (FrontdoorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Frontdoor)(nil)).Elem()
}

func (o FrontdoorOutput) ToFrontdoorOutput() FrontdoorOutput {
	return o
}

func (o FrontdoorOutput) ToFrontdoorOutputWithContext(ctx context.Context) FrontdoorOutput {
	return o
}

// A `backendPoolHealthProbe` block as defined below.
func (o FrontdoorOutput) BackendPoolHealthProbes() FrontdoorBackendPoolHealthProbeArrayOutput {
	return o.ApplyT(func(v *Frontdoor) FrontdoorBackendPoolHealthProbeArrayOutput { return v.BackendPoolHealthProbes }).(FrontdoorBackendPoolHealthProbeArrayOutput)
}

// A map/dictionary of Backend Pool Health Probe Names (key) to the Backend Pool Health Probe ID (value)
func (o FrontdoorOutput) BackendPoolHealthProbesMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Frontdoor) pulumi.StringMapOutput { return v.BackendPoolHealthProbesMap }).(pulumi.StringMapOutput)
}

// A map/dictionary of Backend Pool Load Balancing Setting Names (key) to the Backend Pool Load Balancing Setting ID (value)
func (o FrontdoorOutput) BackendPoolLoadBalancingSettingsMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Frontdoor) pulumi.StringMapOutput { return v.BackendPoolLoadBalancingSettingsMap }).(pulumi.StringMapOutput)
}

// A `backendPoolLoadBalancing` block as defined below.
func (o FrontdoorOutput) BackendPoolLoadBalancings() FrontdoorBackendPoolLoadBalancingArrayOutput {
	return o.ApplyT(func(v *Frontdoor) FrontdoorBackendPoolLoadBalancingArrayOutput { return v.BackendPoolLoadBalancings }).(FrontdoorBackendPoolLoadBalancingArrayOutput)
}

// A `backendPoolSettings` block as defined below.
func (o FrontdoorOutput) BackendPoolSettings() FrontdoorBackendPoolSettingArrayOutput {
	return o.ApplyT(func(v *Frontdoor) FrontdoorBackendPoolSettingArrayOutput { return v.BackendPoolSettings }).(FrontdoorBackendPoolSettingArrayOutput)
}

// A `backendPool` block as defined below.
//
// > Azure by default allows specifying up to 50 Backend Pools - but this quota can be increased via Microsoft Support.
func (o FrontdoorOutput) BackendPools() FrontdoorBackendPoolArrayOutput {
	return o.ApplyT(func(v *Frontdoor) FrontdoorBackendPoolArrayOutput { return v.BackendPools }).(FrontdoorBackendPoolArrayOutput)
}

// A map/dictionary of Backend Pool Names (key) to the Backend Pool ID (value)
func (o FrontdoorOutput) BackendPoolsMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Frontdoor) pulumi.StringMapOutput { return v.BackendPoolsMap }).(pulumi.StringMapOutput)
}

// The host that each frontendEndpoint must CNAME to.
func (o FrontdoorOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v *Frontdoor) pulumi.StringOutput { return v.Cname }).(pulumi.StringOutput)
}

func (o FrontdoorOutput) ExplicitResourceOrders() FrontdoorExplicitResourceOrderArrayOutput {
	return o.ApplyT(func(v *Frontdoor) FrontdoorExplicitResourceOrderArrayOutput { return v.ExplicitResourceOrders }).(FrontdoorExplicitResourceOrderArrayOutput)
}

// A friendly name for the Front Door service.
func (o FrontdoorOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Frontdoor) pulumi.StringPtrOutput { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// A `frontendEndpoint` block as defined below.
func (o FrontdoorOutput) FrontendEndpoints() FrontdoorFrontendEndpointArrayOutput {
	return o.ApplyT(func(v *Frontdoor) FrontdoorFrontendEndpointArrayOutput { return v.FrontendEndpoints }).(FrontdoorFrontendEndpointArrayOutput)
}

// The names of the `frontendEndpoint` blocks within this resource to associate with this `routingRule`.
func (o FrontdoorOutput) FrontendEndpointsMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Frontdoor) pulumi.StringMapOutput { return v.FrontendEndpointsMap }).(pulumi.StringMapOutput)
}

// The unique ID of the Front Door which is embedded into the incoming headers `X-Azure-FDID` attribute and maybe used to filter traffic sent by the Front Door to your backend.
func (o FrontdoorOutput) HeaderFrontdoorId() pulumi.StringOutput {
	return o.ApplyT(func(v *Frontdoor) pulumi.StringOutput { return v.HeaderFrontdoorId }).(pulumi.StringOutput)
}

// Should the Front Door Load Balancer be Enabled? Defaults to `true`.
func (o FrontdoorOutput) LoadBalancerEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Frontdoor) pulumi.BoolPtrOutput { return v.LoadBalancerEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the name of the Front Door service. Must be globally unique. Changing this forces a new resource to be created.
func (o FrontdoorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Frontdoor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the Resource Group in which the Front Door service should exist. Changing this forces a new resource to be created.
func (o FrontdoorOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Frontdoor) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `routingRule` block as defined below.
func (o FrontdoorOutput) RoutingRules() FrontdoorRoutingRuleArrayOutput {
	return o.ApplyT(func(v *Frontdoor) FrontdoorRoutingRuleArrayOutput { return v.RoutingRules }).(FrontdoorRoutingRuleArrayOutput)
}

// A map/dictionary of Routing Rule Names (key) to the Routing Rule ID (value)
func (o FrontdoorOutput) RoutingRulesMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Frontdoor) pulumi.StringMapOutput { return v.RoutingRulesMap }).(pulumi.StringMapOutput)
}

// A mapping of tags to assign to the resource.
func (o FrontdoorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Frontdoor) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type FrontdoorArrayOutput struct{ *pulumi.OutputState }

func (FrontdoorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Frontdoor)(nil)).Elem()
}

func (o FrontdoorArrayOutput) ToFrontdoorArrayOutput() FrontdoorArrayOutput {
	return o
}

func (o FrontdoorArrayOutput) ToFrontdoorArrayOutputWithContext(ctx context.Context) FrontdoorArrayOutput {
	return o
}

func (o FrontdoorArrayOutput) Index(i pulumi.IntInput) FrontdoorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Frontdoor {
		return vs[0].([]*Frontdoor)[vs[1].(int)]
	}).(FrontdoorOutput)
}

type FrontdoorMapOutput struct{ *pulumi.OutputState }

func (FrontdoorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Frontdoor)(nil)).Elem()
}

func (o FrontdoorMapOutput) ToFrontdoorMapOutput() FrontdoorMapOutput {
	return o
}

func (o FrontdoorMapOutput) ToFrontdoorMapOutputWithContext(ctx context.Context) FrontdoorMapOutput {
	return o
}

func (o FrontdoorMapOutput) MapIndex(k pulumi.StringInput) FrontdoorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Frontdoor {
		return vs[0].(map[string]*Frontdoor)[vs[1].(string)]
	}).(FrontdoorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorInput)(nil)).Elem(), &Frontdoor{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorArrayInput)(nil)).Elem(), FrontdoorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorMapInput)(nil)).Elem(), FrontdoorMap{})
	pulumi.RegisterOutputType(FrontdoorOutput{})
	pulumi.RegisterOutputType(FrontdoorArrayOutput{})
	pulumi.RegisterOutputType(FrontdoorMapOutput{})
}
