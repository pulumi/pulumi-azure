// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package frontdoor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type CustomHttpsConfigurationCustomHttpsConfiguration struct {
	// The name of the Key Vault secret representing the full certificate PFX.
	AzureKeyVaultCertificateSecretName *string `pulumi:"azureKeyVaultCertificateSecretName"`
	// The version of the Key Vault secret representing the full certificate PFX.
	//
	// > **Note:** In order to enable the use of your own custom `HTTPS certificate` you must grant `Azure Front Door Service` access to your key vault. For instructions on how to configure your `Key Vault` correctly please refer to the [product documentation](https://docs.microsoft.com/azure/frontdoor/front-door-custom-domain-https#option-2-use-your-own-certificate).
	AzureKeyVaultCertificateSecretVersion *string `pulumi:"azureKeyVaultCertificateSecretVersion"`
	// The ID of the Key Vault containing the SSL certificate.
	AzureKeyVaultCertificateVaultId *string `pulumi:"azureKeyVaultCertificateVaultId"`
	// Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
	//
	// The following attributes are only valid if `certificateSource` is set to `AzureKeyVault`:
	CertificateSource *string `pulumi:"certificateSource"`
	// Minimum client TLS version supported.
	MinimumTlsVersion    *string `pulumi:"minimumTlsVersion"`
	ProvisioningState    *string `pulumi:"provisioningState"`
	ProvisioningSubstate *string `pulumi:"provisioningSubstate"`
}

// CustomHttpsConfigurationCustomHttpsConfigurationInput is an input type that accepts CustomHttpsConfigurationCustomHttpsConfigurationArgs and CustomHttpsConfigurationCustomHttpsConfigurationOutput values.
// You can construct a concrete instance of `CustomHttpsConfigurationCustomHttpsConfigurationInput` via:
//
//	CustomHttpsConfigurationCustomHttpsConfigurationArgs{...}
type CustomHttpsConfigurationCustomHttpsConfigurationInput interface {
	pulumi.Input

	ToCustomHttpsConfigurationCustomHttpsConfigurationOutput() CustomHttpsConfigurationCustomHttpsConfigurationOutput
	ToCustomHttpsConfigurationCustomHttpsConfigurationOutputWithContext(context.Context) CustomHttpsConfigurationCustomHttpsConfigurationOutput
}

type CustomHttpsConfigurationCustomHttpsConfigurationArgs struct {
	// The name of the Key Vault secret representing the full certificate PFX.
	AzureKeyVaultCertificateSecretName pulumi.StringPtrInput `pulumi:"azureKeyVaultCertificateSecretName"`
	// The version of the Key Vault secret representing the full certificate PFX.
	//
	// > **Note:** In order to enable the use of your own custom `HTTPS certificate` you must grant `Azure Front Door Service` access to your key vault. For instructions on how to configure your `Key Vault` correctly please refer to the [product documentation](https://docs.microsoft.com/azure/frontdoor/front-door-custom-domain-https#option-2-use-your-own-certificate).
	AzureKeyVaultCertificateSecretVersion pulumi.StringPtrInput `pulumi:"azureKeyVaultCertificateSecretVersion"`
	// The ID of the Key Vault containing the SSL certificate.
	AzureKeyVaultCertificateVaultId pulumi.StringPtrInput `pulumi:"azureKeyVaultCertificateVaultId"`
	// Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
	//
	// The following attributes are only valid if `certificateSource` is set to `AzureKeyVault`:
	CertificateSource pulumi.StringPtrInput `pulumi:"certificateSource"`
	// Minimum client TLS version supported.
	MinimumTlsVersion    pulumi.StringPtrInput `pulumi:"minimumTlsVersion"`
	ProvisioningState    pulumi.StringPtrInput `pulumi:"provisioningState"`
	ProvisioningSubstate pulumi.StringPtrInput `pulumi:"provisioningSubstate"`
}

func (CustomHttpsConfigurationCustomHttpsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomHttpsConfigurationCustomHttpsConfiguration)(nil)).Elem()
}

func (i CustomHttpsConfigurationCustomHttpsConfigurationArgs) ToCustomHttpsConfigurationCustomHttpsConfigurationOutput() CustomHttpsConfigurationCustomHttpsConfigurationOutput {
	return i.ToCustomHttpsConfigurationCustomHttpsConfigurationOutputWithContext(context.Background())
}

func (i CustomHttpsConfigurationCustomHttpsConfigurationArgs) ToCustomHttpsConfigurationCustomHttpsConfigurationOutputWithContext(ctx context.Context) CustomHttpsConfigurationCustomHttpsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomHttpsConfigurationCustomHttpsConfigurationOutput)
}

func (i CustomHttpsConfigurationCustomHttpsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[CustomHttpsConfigurationCustomHttpsConfiguration] {
	return pulumix.Output[CustomHttpsConfigurationCustomHttpsConfiguration]{
		OutputState: i.ToCustomHttpsConfigurationCustomHttpsConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i CustomHttpsConfigurationCustomHttpsConfigurationArgs) ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutput() CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput {
	return i.ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutputWithContext(context.Background())
}

func (i CustomHttpsConfigurationCustomHttpsConfigurationArgs) ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutputWithContext(ctx context.Context) CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomHttpsConfigurationCustomHttpsConfigurationOutput).ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutputWithContext(ctx)
}

// CustomHttpsConfigurationCustomHttpsConfigurationPtrInput is an input type that accepts CustomHttpsConfigurationCustomHttpsConfigurationArgs, CustomHttpsConfigurationCustomHttpsConfigurationPtr and CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput values.
// You can construct a concrete instance of `CustomHttpsConfigurationCustomHttpsConfigurationPtrInput` via:
//
//	        CustomHttpsConfigurationCustomHttpsConfigurationArgs{...}
//
//	or:
//
//	        nil
type CustomHttpsConfigurationCustomHttpsConfigurationPtrInput interface {
	pulumi.Input

	ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutput() CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput
	ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutputWithContext(context.Context) CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput
}

type customHttpsConfigurationCustomHttpsConfigurationPtrType CustomHttpsConfigurationCustomHttpsConfigurationArgs

func CustomHttpsConfigurationCustomHttpsConfigurationPtr(v *CustomHttpsConfigurationCustomHttpsConfigurationArgs) CustomHttpsConfigurationCustomHttpsConfigurationPtrInput {
	return (*customHttpsConfigurationCustomHttpsConfigurationPtrType)(v)
}

func (*customHttpsConfigurationCustomHttpsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomHttpsConfigurationCustomHttpsConfiguration)(nil)).Elem()
}

func (i *customHttpsConfigurationCustomHttpsConfigurationPtrType) ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutput() CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput {
	return i.ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutputWithContext(context.Background())
}

func (i *customHttpsConfigurationCustomHttpsConfigurationPtrType) ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutputWithContext(ctx context.Context) CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput)
}

func (i *customHttpsConfigurationCustomHttpsConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*CustomHttpsConfigurationCustomHttpsConfiguration] {
	return pulumix.Output[*CustomHttpsConfigurationCustomHttpsConfiguration]{
		OutputState: i.ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type CustomHttpsConfigurationCustomHttpsConfigurationOutput struct{ *pulumi.OutputState }

func (CustomHttpsConfigurationCustomHttpsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomHttpsConfigurationCustomHttpsConfiguration)(nil)).Elem()
}

func (o CustomHttpsConfigurationCustomHttpsConfigurationOutput) ToCustomHttpsConfigurationCustomHttpsConfigurationOutput() CustomHttpsConfigurationCustomHttpsConfigurationOutput {
	return o
}

func (o CustomHttpsConfigurationCustomHttpsConfigurationOutput) ToCustomHttpsConfigurationCustomHttpsConfigurationOutputWithContext(ctx context.Context) CustomHttpsConfigurationCustomHttpsConfigurationOutput {
	return o
}

func (o CustomHttpsConfigurationCustomHttpsConfigurationOutput) ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutput() CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput {
	return o.ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutputWithContext(context.Background())
}

func (o CustomHttpsConfigurationCustomHttpsConfigurationOutput) ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutputWithContext(ctx context.Context) CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomHttpsConfigurationCustomHttpsConfiguration) *CustomHttpsConfigurationCustomHttpsConfiguration {
		return &v
	}).(CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput)
}

func (o CustomHttpsConfigurationCustomHttpsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[CustomHttpsConfigurationCustomHttpsConfiguration] {
	return pulumix.Output[CustomHttpsConfigurationCustomHttpsConfiguration]{
		OutputState: o.OutputState,
	}
}

// The name of the Key Vault secret representing the full certificate PFX.
func (o CustomHttpsConfigurationCustomHttpsConfigurationOutput) AzureKeyVaultCertificateSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationCustomHttpsConfiguration) *string {
		return v.AzureKeyVaultCertificateSecretName
	}).(pulumi.StringPtrOutput)
}

// The version of the Key Vault secret representing the full certificate PFX.
//
// > **Note:** In order to enable the use of your own custom `HTTPS certificate` you must grant `Azure Front Door Service` access to your key vault. For instructions on how to configure your `Key Vault` correctly please refer to the [product documentation](https://docs.microsoft.com/azure/frontdoor/front-door-custom-domain-https#option-2-use-your-own-certificate).
func (o CustomHttpsConfigurationCustomHttpsConfigurationOutput) AzureKeyVaultCertificateSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationCustomHttpsConfiguration) *string {
		return v.AzureKeyVaultCertificateSecretVersion
	}).(pulumi.StringPtrOutput)
}

// The ID of the Key Vault containing the SSL certificate.
func (o CustomHttpsConfigurationCustomHttpsConfigurationOutput) AzureKeyVaultCertificateVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationCustomHttpsConfiguration) *string {
		return v.AzureKeyVaultCertificateVaultId
	}).(pulumi.StringPtrOutput)
}

// Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
//
// The following attributes are only valid if `certificateSource` is set to `AzureKeyVault`:
func (o CustomHttpsConfigurationCustomHttpsConfigurationOutput) CertificateSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationCustomHttpsConfiguration) *string { return v.CertificateSource }).(pulumi.StringPtrOutput)
}

// Minimum client TLS version supported.
func (o CustomHttpsConfigurationCustomHttpsConfigurationOutput) MinimumTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationCustomHttpsConfiguration) *string { return v.MinimumTlsVersion }).(pulumi.StringPtrOutput)
}

func (o CustomHttpsConfigurationCustomHttpsConfigurationOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationCustomHttpsConfiguration) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

func (o CustomHttpsConfigurationCustomHttpsConfigurationOutput) ProvisioningSubstate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpsConfigurationCustomHttpsConfiguration) *string { return v.ProvisioningSubstate }).(pulumi.StringPtrOutput)
}

type CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomHttpsConfigurationCustomHttpsConfiguration)(nil)).Elem()
}

func (o CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput) ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutput() CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput {
	return o
}

func (o CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput) ToCustomHttpsConfigurationCustomHttpsConfigurationPtrOutputWithContext(ctx context.Context) CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput {
	return o
}

func (o CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CustomHttpsConfigurationCustomHttpsConfiguration] {
	return pulumix.Output[*CustomHttpsConfigurationCustomHttpsConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput) Elem() CustomHttpsConfigurationCustomHttpsConfigurationOutput {
	return o.ApplyT(func(v *CustomHttpsConfigurationCustomHttpsConfiguration) CustomHttpsConfigurationCustomHttpsConfiguration {
		if v != nil {
			return *v
		}
		var ret CustomHttpsConfigurationCustomHttpsConfiguration
		return ret
	}).(CustomHttpsConfigurationCustomHttpsConfigurationOutput)
}

// The name of the Key Vault secret representing the full certificate PFX.
func (o CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput) AzureKeyVaultCertificateSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomHttpsConfigurationCustomHttpsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AzureKeyVaultCertificateSecretName
	}).(pulumi.StringPtrOutput)
}

// The version of the Key Vault secret representing the full certificate PFX.
//
// > **Note:** In order to enable the use of your own custom `HTTPS certificate` you must grant `Azure Front Door Service` access to your key vault. For instructions on how to configure your `Key Vault` correctly please refer to the [product documentation](https://docs.microsoft.com/azure/frontdoor/front-door-custom-domain-https#option-2-use-your-own-certificate).
func (o CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput) AzureKeyVaultCertificateSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomHttpsConfigurationCustomHttpsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AzureKeyVaultCertificateSecretVersion
	}).(pulumi.StringPtrOutput)
}

// The ID of the Key Vault containing the SSL certificate.
func (o CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput) AzureKeyVaultCertificateVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomHttpsConfigurationCustomHttpsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AzureKeyVaultCertificateVaultId
	}).(pulumi.StringPtrOutput)
}

// Certificate source to encrypted `HTTPS` traffic with. Allowed values are `FrontDoor` or `AzureKeyVault`. Defaults to `FrontDoor`.
//
// The following attributes are only valid if `certificateSource` is set to `AzureKeyVault`:
func (o CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput) CertificateSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomHttpsConfigurationCustomHttpsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CertificateSource
	}).(pulumi.StringPtrOutput)
}

// Minimum client TLS version supported.
func (o CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput) MinimumTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomHttpsConfigurationCustomHttpsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MinimumTlsVersion
	}).(pulumi.StringPtrOutput)
}

func (o CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomHttpsConfigurationCustomHttpsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

func (o CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput) ProvisioningSubstate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomHttpsConfigurationCustomHttpsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningSubstate
	}).(pulumi.StringPtrOutput)
}

type FirewallPolicyCustomRule struct {
	// The action to perform when the rule is matched. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
	Action string `pulumi:"action"`
	// Is the rule is enabled or disabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// One or more `matchCondition` block defined below. Can support up to `10` `matchCondition` blocks.
	MatchConditions []FirewallPolicyCustomRuleMatchCondition `pulumi:"matchConditions"`
	// Gets name of the resource that is unique within a policy. This name can be used to access the resource.
	Name string `pulumi:"name"`
	// The priority of the rule. Rules with a lower value will be evaluated before rules with a higher value. Defaults to `1`.
	Priority *int `pulumi:"priority"`
	// The rate limit duration in minutes. Defaults to `1`.
	RateLimitDurationInMinutes *int `pulumi:"rateLimitDurationInMinutes"`
	// The rate limit threshold. Defaults to `10`.
	RateLimitThreshold *int `pulumi:"rateLimitThreshold"`
	// The type of rule. Possible values are `MatchRule` or `RateLimitRule`.
	Type string `pulumi:"type"`
}

// FirewallPolicyCustomRuleInput is an input type that accepts FirewallPolicyCustomRuleArgs and FirewallPolicyCustomRuleOutput values.
// You can construct a concrete instance of `FirewallPolicyCustomRuleInput` via:
//
//	FirewallPolicyCustomRuleArgs{...}
type FirewallPolicyCustomRuleInput interface {
	pulumi.Input

	ToFirewallPolicyCustomRuleOutput() FirewallPolicyCustomRuleOutput
	ToFirewallPolicyCustomRuleOutputWithContext(context.Context) FirewallPolicyCustomRuleOutput
}

type FirewallPolicyCustomRuleArgs struct {
	// The action to perform when the rule is matched. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
	Action pulumi.StringInput `pulumi:"action"`
	// Is the rule is enabled or disabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// One or more `matchCondition` block defined below. Can support up to `10` `matchCondition` blocks.
	MatchConditions FirewallPolicyCustomRuleMatchConditionArrayInput `pulumi:"matchConditions"`
	// Gets name of the resource that is unique within a policy. This name can be used to access the resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The priority of the rule. Rules with a lower value will be evaluated before rules with a higher value. Defaults to `1`.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The rate limit duration in minutes. Defaults to `1`.
	RateLimitDurationInMinutes pulumi.IntPtrInput `pulumi:"rateLimitDurationInMinutes"`
	// The rate limit threshold. Defaults to `10`.
	RateLimitThreshold pulumi.IntPtrInput `pulumi:"rateLimitThreshold"`
	// The type of rule. Possible values are `MatchRule` or `RateLimitRule`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FirewallPolicyCustomRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyCustomRule)(nil)).Elem()
}

func (i FirewallPolicyCustomRuleArgs) ToFirewallPolicyCustomRuleOutput() FirewallPolicyCustomRuleOutput {
	return i.ToFirewallPolicyCustomRuleOutputWithContext(context.Background())
}

func (i FirewallPolicyCustomRuleArgs) ToFirewallPolicyCustomRuleOutputWithContext(ctx context.Context) FirewallPolicyCustomRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyCustomRuleOutput)
}

func (i FirewallPolicyCustomRuleArgs) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyCustomRule] {
	return pulumix.Output[FirewallPolicyCustomRule]{
		OutputState: i.ToFirewallPolicyCustomRuleOutputWithContext(ctx).OutputState,
	}
}

// FirewallPolicyCustomRuleArrayInput is an input type that accepts FirewallPolicyCustomRuleArray and FirewallPolicyCustomRuleArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyCustomRuleArrayInput` via:
//
//	FirewallPolicyCustomRuleArray{ FirewallPolicyCustomRuleArgs{...} }
type FirewallPolicyCustomRuleArrayInput interface {
	pulumi.Input

	ToFirewallPolicyCustomRuleArrayOutput() FirewallPolicyCustomRuleArrayOutput
	ToFirewallPolicyCustomRuleArrayOutputWithContext(context.Context) FirewallPolicyCustomRuleArrayOutput
}

type FirewallPolicyCustomRuleArray []FirewallPolicyCustomRuleInput

func (FirewallPolicyCustomRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyCustomRule)(nil)).Elem()
}

func (i FirewallPolicyCustomRuleArray) ToFirewallPolicyCustomRuleArrayOutput() FirewallPolicyCustomRuleArrayOutput {
	return i.ToFirewallPolicyCustomRuleArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyCustomRuleArray) ToFirewallPolicyCustomRuleArrayOutputWithContext(ctx context.Context) FirewallPolicyCustomRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyCustomRuleArrayOutput)
}

func (i FirewallPolicyCustomRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyCustomRule] {
	return pulumix.Output[[]FirewallPolicyCustomRule]{
		OutputState: i.ToFirewallPolicyCustomRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type FirewallPolicyCustomRuleOutput struct{ *pulumi.OutputState }

func (FirewallPolicyCustomRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyCustomRule)(nil)).Elem()
}

func (o FirewallPolicyCustomRuleOutput) ToFirewallPolicyCustomRuleOutput() FirewallPolicyCustomRuleOutput {
	return o
}

func (o FirewallPolicyCustomRuleOutput) ToFirewallPolicyCustomRuleOutputWithContext(ctx context.Context) FirewallPolicyCustomRuleOutput {
	return o
}

func (o FirewallPolicyCustomRuleOutput) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyCustomRule] {
	return pulumix.Output[FirewallPolicyCustomRule]{
		OutputState: o.OutputState,
	}
}

// The action to perform when the rule is matched. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
func (o FirewallPolicyCustomRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyCustomRule) string { return v.Action }).(pulumi.StringOutput)
}

// Is the rule is enabled or disabled? Defaults to `true`.
func (o FirewallPolicyCustomRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallPolicyCustomRule) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// One or more `matchCondition` block defined below. Can support up to `10` `matchCondition` blocks.
func (o FirewallPolicyCustomRuleOutput) MatchConditions() FirewallPolicyCustomRuleMatchConditionArrayOutput {
	return o.ApplyT(func(v FirewallPolicyCustomRule) []FirewallPolicyCustomRuleMatchCondition { return v.MatchConditions }).(FirewallPolicyCustomRuleMatchConditionArrayOutput)
}

// Gets name of the resource that is unique within a policy. This name can be used to access the resource.
func (o FirewallPolicyCustomRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyCustomRule) string { return v.Name }).(pulumi.StringOutput)
}

// The priority of the rule. Rules with a lower value will be evaluated before rules with a higher value. Defaults to `1`.
func (o FirewallPolicyCustomRuleOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallPolicyCustomRule) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The rate limit duration in minutes. Defaults to `1`.
func (o FirewallPolicyCustomRuleOutput) RateLimitDurationInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallPolicyCustomRule) *int { return v.RateLimitDurationInMinutes }).(pulumi.IntPtrOutput)
}

// The rate limit threshold. Defaults to `10`.
func (o FirewallPolicyCustomRuleOutput) RateLimitThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallPolicyCustomRule) *int { return v.RateLimitThreshold }).(pulumi.IntPtrOutput)
}

// The type of rule. Possible values are `MatchRule` or `RateLimitRule`.
func (o FirewallPolicyCustomRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyCustomRule) string { return v.Type }).(pulumi.StringOutput)
}

type FirewallPolicyCustomRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyCustomRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyCustomRule)(nil)).Elem()
}

func (o FirewallPolicyCustomRuleArrayOutput) ToFirewallPolicyCustomRuleArrayOutput() FirewallPolicyCustomRuleArrayOutput {
	return o
}

func (o FirewallPolicyCustomRuleArrayOutput) ToFirewallPolicyCustomRuleArrayOutputWithContext(ctx context.Context) FirewallPolicyCustomRuleArrayOutput {
	return o
}

func (o FirewallPolicyCustomRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyCustomRule] {
	return pulumix.Output[[]FirewallPolicyCustomRule]{
		OutputState: o.OutputState,
	}
}

func (o FirewallPolicyCustomRuleArrayOutput) Index(i pulumi.IntInput) FirewallPolicyCustomRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyCustomRule {
		return vs[0].([]FirewallPolicyCustomRule)[vs[1].(int)]
	}).(FirewallPolicyCustomRuleOutput)
}

type FirewallPolicyCustomRuleMatchCondition struct {
	// Up to `600` possible values to match. Limit is in total across all `matchCondition` blocks and `matchValues` arguments. String value itself can be up to `256` characters long.
	MatchValues []string `pulumi:"matchValues"`
	// The request variable to compare with. Possible values are `Cookies`, `PostArgs`, `QueryString`, `RemoteAddr`, `RequestBody`, `RequestHeader`, `RequestMethod`, `RequestUri`, or `SocketAddr`.
	MatchVariable string `pulumi:"matchVariable"`
	// Should the result of the condition be negated.
	NegationCondition *bool `pulumi:"negationCondition"`
	// Comparison type to use for matching with the variable value. Possible values are `Any`, `BeginsWith`, `Contains`, `EndsWith`, `Equal`, `GeoMatch`, `GreaterThan`, `GreaterThanOrEqual`, `IPMatch`, `LessThan`, `LessThanOrEqual` or `RegEx`.
	Operator string `pulumi:"operator"`
	// Match against a specific key if the `matchVariable` is `QueryString`, `PostArgs`, `RequestHeader` or `Cookies`.
	Selector *string `pulumi:"selector"`
	// Up to `5` transforms to apply. Possible values are `Lowercase`, `RemoveNulls`, `Trim`, `Uppercase`, `URLDecode` or`URLEncode`.
	Transforms []string `pulumi:"transforms"`
}

// FirewallPolicyCustomRuleMatchConditionInput is an input type that accepts FirewallPolicyCustomRuleMatchConditionArgs and FirewallPolicyCustomRuleMatchConditionOutput values.
// You can construct a concrete instance of `FirewallPolicyCustomRuleMatchConditionInput` via:
//
//	FirewallPolicyCustomRuleMatchConditionArgs{...}
type FirewallPolicyCustomRuleMatchConditionInput interface {
	pulumi.Input

	ToFirewallPolicyCustomRuleMatchConditionOutput() FirewallPolicyCustomRuleMatchConditionOutput
	ToFirewallPolicyCustomRuleMatchConditionOutputWithContext(context.Context) FirewallPolicyCustomRuleMatchConditionOutput
}

type FirewallPolicyCustomRuleMatchConditionArgs struct {
	// Up to `600` possible values to match. Limit is in total across all `matchCondition` blocks and `matchValues` arguments. String value itself can be up to `256` characters long.
	MatchValues pulumi.StringArrayInput `pulumi:"matchValues"`
	// The request variable to compare with. Possible values are `Cookies`, `PostArgs`, `QueryString`, `RemoteAddr`, `RequestBody`, `RequestHeader`, `RequestMethod`, `RequestUri`, or `SocketAddr`.
	MatchVariable pulumi.StringInput `pulumi:"matchVariable"`
	// Should the result of the condition be negated.
	NegationCondition pulumi.BoolPtrInput `pulumi:"negationCondition"`
	// Comparison type to use for matching with the variable value. Possible values are `Any`, `BeginsWith`, `Contains`, `EndsWith`, `Equal`, `GeoMatch`, `GreaterThan`, `GreaterThanOrEqual`, `IPMatch`, `LessThan`, `LessThanOrEqual` or `RegEx`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Match against a specific key if the `matchVariable` is `QueryString`, `PostArgs`, `RequestHeader` or `Cookies`.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// Up to `5` transforms to apply. Possible values are `Lowercase`, `RemoveNulls`, `Trim`, `Uppercase`, `URLDecode` or`URLEncode`.
	Transforms pulumi.StringArrayInput `pulumi:"transforms"`
}

func (FirewallPolicyCustomRuleMatchConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyCustomRuleMatchCondition)(nil)).Elem()
}

func (i FirewallPolicyCustomRuleMatchConditionArgs) ToFirewallPolicyCustomRuleMatchConditionOutput() FirewallPolicyCustomRuleMatchConditionOutput {
	return i.ToFirewallPolicyCustomRuleMatchConditionOutputWithContext(context.Background())
}

func (i FirewallPolicyCustomRuleMatchConditionArgs) ToFirewallPolicyCustomRuleMatchConditionOutputWithContext(ctx context.Context) FirewallPolicyCustomRuleMatchConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyCustomRuleMatchConditionOutput)
}

func (i FirewallPolicyCustomRuleMatchConditionArgs) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyCustomRuleMatchCondition] {
	return pulumix.Output[FirewallPolicyCustomRuleMatchCondition]{
		OutputState: i.ToFirewallPolicyCustomRuleMatchConditionOutputWithContext(ctx).OutputState,
	}
}

// FirewallPolicyCustomRuleMatchConditionArrayInput is an input type that accepts FirewallPolicyCustomRuleMatchConditionArray and FirewallPolicyCustomRuleMatchConditionArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyCustomRuleMatchConditionArrayInput` via:
//
//	FirewallPolicyCustomRuleMatchConditionArray{ FirewallPolicyCustomRuleMatchConditionArgs{...} }
type FirewallPolicyCustomRuleMatchConditionArrayInput interface {
	pulumi.Input

	ToFirewallPolicyCustomRuleMatchConditionArrayOutput() FirewallPolicyCustomRuleMatchConditionArrayOutput
	ToFirewallPolicyCustomRuleMatchConditionArrayOutputWithContext(context.Context) FirewallPolicyCustomRuleMatchConditionArrayOutput
}

type FirewallPolicyCustomRuleMatchConditionArray []FirewallPolicyCustomRuleMatchConditionInput

func (FirewallPolicyCustomRuleMatchConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyCustomRuleMatchCondition)(nil)).Elem()
}

func (i FirewallPolicyCustomRuleMatchConditionArray) ToFirewallPolicyCustomRuleMatchConditionArrayOutput() FirewallPolicyCustomRuleMatchConditionArrayOutput {
	return i.ToFirewallPolicyCustomRuleMatchConditionArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyCustomRuleMatchConditionArray) ToFirewallPolicyCustomRuleMatchConditionArrayOutputWithContext(ctx context.Context) FirewallPolicyCustomRuleMatchConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyCustomRuleMatchConditionArrayOutput)
}

func (i FirewallPolicyCustomRuleMatchConditionArray) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyCustomRuleMatchCondition] {
	return pulumix.Output[[]FirewallPolicyCustomRuleMatchCondition]{
		OutputState: i.ToFirewallPolicyCustomRuleMatchConditionArrayOutputWithContext(ctx).OutputState,
	}
}

type FirewallPolicyCustomRuleMatchConditionOutput struct{ *pulumi.OutputState }

func (FirewallPolicyCustomRuleMatchConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyCustomRuleMatchCondition)(nil)).Elem()
}

func (o FirewallPolicyCustomRuleMatchConditionOutput) ToFirewallPolicyCustomRuleMatchConditionOutput() FirewallPolicyCustomRuleMatchConditionOutput {
	return o
}

func (o FirewallPolicyCustomRuleMatchConditionOutput) ToFirewallPolicyCustomRuleMatchConditionOutputWithContext(ctx context.Context) FirewallPolicyCustomRuleMatchConditionOutput {
	return o
}

func (o FirewallPolicyCustomRuleMatchConditionOutput) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyCustomRuleMatchCondition] {
	return pulumix.Output[FirewallPolicyCustomRuleMatchCondition]{
		OutputState: o.OutputState,
	}
}

// Up to `600` possible values to match. Limit is in total across all `matchCondition` blocks and `matchValues` arguments. String value itself can be up to `256` characters long.
func (o FirewallPolicyCustomRuleMatchConditionOutput) MatchValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyCustomRuleMatchCondition) []string { return v.MatchValues }).(pulumi.StringArrayOutput)
}

// The request variable to compare with. Possible values are `Cookies`, `PostArgs`, `QueryString`, `RemoteAddr`, `RequestBody`, `RequestHeader`, `RequestMethod`, `RequestUri`, or `SocketAddr`.
func (o FirewallPolicyCustomRuleMatchConditionOutput) MatchVariable() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyCustomRuleMatchCondition) string { return v.MatchVariable }).(pulumi.StringOutput)
}

// Should the result of the condition be negated.
func (o FirewallPolicyCustomRuleMatchConditionOutput) NegationCondition() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallPolicyCustomRuleMatchCondition) *bool { return v.NegationCondition }).(pulumi.BoolPtrOutput)
}

// Comparison type to use for matching with the variable value. Possible values are `Any`, `BeginsWith`, `Contains`, `EndsWith`, `Equal`, `GeoMatch`, `GreaterThan`, `GreaterThanOrEqual`, `IPMatch`, `LessThan`, `LessThanOrEqual` or `RegEx`.
func (o FirewallPolicyCustomRuleMatchConditionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyCustomRuleMatchCondition) string { return v.Operator }).(pulumi.StringOutput)
}

// Match against a specific key if the `matchVariable` is `QueryString`, `PostArgs`, `RequestHeader` or `Cookies`.
func (o FirewallPolicyCustomRuleMatchConditionOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyCustomRuleMatchCondition) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// Up to `5` transforms to apply. Possible values are `Lowercase`, `RemoveNulls`, `Trim`, `Uppercase`, `URLDecode` or`URLEncode`.
func (o FirewallPolicyCustomRuleMatchConditionOutput) Transforms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyCustomRuleMatchCondition) []string { return v.Transforms }).(pulumi.StringArrayOutput)
}

type FirewallPolicyCustomRuleMatchConditionArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyCustomRuleMatchConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyCustomRuleMatchCondition)(nil)).Elem()
}

func (o FirewallPolicyCustomRuleMatchConditionArrayOutput) ToFirewallPolicyCustomRuleMatchConditionArrayOutput() FirewallPolicyCustomRuleMatchConditionArrayOutput {
	return o
}

func (o FirewallPolicyCustomRuleMatchConditionArrayOutput) ToFirewallPolicyCustomRuleMatchConditionArrayOutputWithContext(ctx context.Context) FirewallPolicyCustomRuleMatchConditionArrayOutput {
	return o
}

func (o FirewallPolicyCustomRuleMatchConditionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyCustomRuleMatchCondition] {
	return pulumix.Output[[]FirewallPolicyCustomRuleMatchCondition]{
		OutputState: o.OutputState,
	}
}

func (o FirewallPolicyCustomRuleMatchConditionArrayOutput) Index(i pulumi.IntInput) FirewallPolicyCustomRuleMatchConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyCustomRuleMatchCondition {
		return vs[0].([]FirewallPolicyCustomRuleMatchCondition)[vs[1].(int)]
	}).(FirewallPolicyCustomRuleMatchConditionOutput)
}

type FirewallPolicyManagedRule struct {
	// One or more `exclusion` blocks as defined below.
	Exclusions []FirewallPolicyManagedRuleExclusion `pulumi:"exclusions"`
	// One or more `override` blocks as defined below.
	Overrides []FirewallPolicyManagedRuleOverride `pulumi:"overrides"`
	// The name of the managed rule to use with this resource.
	Type string `pulumi:"type"`
	// The version on the managed rule to use with this resource.
	Version string `pulumi:"version"`
}

// FirewallPolicyManagedRuleInput is an input type that accepts FirewallPolicyManagedRuleArgs and FirewallPolicyManagedRuleOutput values.
// You can construct a concrete instance of `FirewallPolicyManagedRuleInput` via:
//
//	FirewallPolicyManagedRuleArgs{...}
type FirewallPolicyManagedRuleInput interface {
	pulumi.Input

	ToFirewallPolicyManagedRuleOutput() FirewallPolicyManagedRuleOutput
	ToFirewallPolicyManagedRuleOutputWithContext(context.Context) FirewallPolicyManagedRuleOutput
}

type FirewallPolicyManagedRuleArgs struct {
	// One or more `exclusion` blocks as defined below.
	Exclusions FirewallPolicyManagedRuleExclusionArrayInput `pulumi:"exclusions"`
	// One or more `override` blocks as defined below.
	Overrides FirewallPolicyManagedRuleOverrideArrayInput `pulumi:"overrides"`
	// The name of the managed rule to use with this resource.
	Type pulumi.StringInput `pulumi:"type"`
	// The version on the managed rule to use with this resource.
	Version pulumi.StringInput `pulumi:"version"`
}

func (FirewallPolicyManagedRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyManagedRule)(nil)).Elem()
}

func (i FirewallPolicyManagedRuleArgs) ToFirewallPolicyManagedRuleOutput() FirewallPolicyManagedRuleOutput {
	return i.ToFirewallPolicyManagedRuleOutputWithContext(context.Background())
}

func (i FirewallPolicyManagedRuleArgs) ToFirewallPolicyManagedRuleOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyManagedRuleOutput)
}

func (i FirewallPolicyManagedRuleArgs) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyManagedRule] {
	return pulumix.Output[FirewallPolicyManagedRule]{
		OutputState: i.ToFirewallPolicyManagedRuleOutputWithContext(ctx).OutputState,
	}
}

// FirewallPolicyManagedRuleArrayInput is an input type that accepts FirewallPolicyManagedRuleArray and FirewallPolicyManagedRuleArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyManagedRuleArrayInput` via:
//
//	FirewallPolicyManagedRuleArray{ FirewallPolicyManagedRuleArgs{...} }
type FirewallPolicyManagedRuleArrayInput interface {
	pulumi.Input

	ToFirewallPolicyManagedRuleArrayOutput() FirewallPolicyManagedRuleArrayOutput
	ToFirewallPolicyManagedRuleArrayOutputWithContext(context.Context) FirewallPolicyManagedRuleArrayOutput
}

type FirewallPolicyManagedRuleArray []FirewallPolicyManagedRuleInput

func (FirewallPolicyManagedRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyManagedRule)(nil)).Elem()
}

func (i FirewallPolicyManagedRuleArray) ToFirewallPolicyManagedRuleArrayOutput() FirewallPolicyManagedRuleArrayOutput {
	return i.ToFirewallPolicyManagedRuleArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyManagedRuleArray) ToFirewallPolicyManagedRuleArrayOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyManagedRuleArrayOutput)
}

func (i FirewallPolicyManagedRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyManagedRule] {
	return pulumix.Output[[]FirewallPolicyManagedRule]{
		OutputState: i.ToFirewallPolicyManagedRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type FirewallPolicyManagedRuleOutput struct{ *pulumi.OutputState }

func (FirewallPolicyManagedRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyManagedRule)(nil)).Elem()
}

func (o FirewallPolicyManagedRuleOutput) ToFirewallPolicyManagedRuleOutput() FirewallPolicyManagedRuleOutput {
	return o
}

func (o FirewallPolicyManagedRuleOutput) ToFirewallPolicyManagedRuleOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOutput {
	return o
}

func (o FirewallPolicyManagedRuleOutput) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyManagedRule] {
	return pulumix.Output[FirewallPolicyManagedRule]{
		OutputState: o.OutputState,
	}
}

// One or more `exclusion` blocks as defined below.
func (o FirewallPolicyManagedRuleOutput) Exclusions() FirewallPolicyManagedRuleExclusionArrayOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRule) []FirewallPolicyManagedRuleExclusion { return v.Exclusions }).(FirewallPolicyManagedRuleExclusionArrayOutput)
}

// One or more `override` blocks as defined below.
func (o FirewallPolicyManagedRuleOutput) Overrides() FirewallPolicyManagedRuleOverrideArrayOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRule) []FirewallPolicyManagedRuleOverride { return v.Overrides }).(FirewallPolicyManagedRuleOverrideArrayOutput)
}

// The name of the managed rule to use with this resource.
func (o FirewallPolicyManagedRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRule) string { return v.Type }).(pulumi.StringOutput)
}

// The version on the managed rule to use with this resource.
func (o FirewallPolicyManagedRuleOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRule) string { return v.Version }).(pulumi.StringOutput)
}

type FirewallPolicyManagedRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyManagedRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyManagedRule)(nil)).Elem()
}

func (o FirewallPolicyManagedRuleArrayOutput) ToFirewallPolicyManagedRuleArrayOutput() FirewallPolicyManagedRuleArrayOutput {
	return o
}

func (o FirewallPolicyManagedRuleArrayOutput) ToFirewallPolicyManagedRuleArrayOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleArrayOutput {
	return o
}

func (o FirewallPolicyManagedRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyManagedRule] {
	return pulumix.Output[[]FirewallPolicyManagedRule]{
		OutputState: o.OutputState,
	}
}

func (o FirewallPolicyManagedRuleArrayOutput) Index(i pulumi.IntInput) FirewallPolicyManagedRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyManagedRule {
		return vs[0].([]FirewallPolicyManagedRule)[vs[1].(int)]
	}).(FirewallPolicyManagedRuleOutput)
}

type FirewallPolicyManagedRuleExclusion struct {
	// The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
	MatchVariable string `pulumi:"matchVariable"`
	// Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
	Operator string `pulumi:"operator"`
	// Selector for the value in the `matchVariable` attribute this exclusion applies to.
	Selector string `pulumi:"selector"`
}

// FirewallPolicyManagedRuleExclusionInput is an input type that accepts FirewallPolicyManagedRuleExclusionArgs and FirewallPolicyManagedRuleExclusionOutput values.
// You can construct a concrete instance of `FirewallPolicyManagedRuleExclusionInput` via:
//
//	FirewallPolicyManagedRuleExclusionArgs{...}
type FirewallPolicyManagedRuleExclusionInput interface {
	pulumi.Input

	ToFirewallPolicyManagedRuleExclusionOutput() FirewallPolicyManagedRuleExclusionOutput
	ToFirewallPolicyManagedRuleExclusionOutputWithContext(context.Context) FirewallPolicyManagedRuleExclusionOutput
}

type FirewallPolicyManagedRuleExclusionArgs struct {
	// The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
	MatchVariable pulumi.StringInput `pulumi:"matchVariable"`
	// Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Selector for the value in the `matchVariable` attribute this exclusion applies to.
	Selector pulumi.StringInput `pulumi:"selector"`
}

func (FirewallPolicyManagedRuleExclusionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyManagedRuleExclusion)(nil)).Elem()
}

func (i FirewallPolicyManagedRuleExclusionArgs) ToFirewallPolicyManagedRuleExclusionOutput() FirewallPolicyManagedRuleExclusionOutput {
	return i.ToFirewallPolicyManagedRuleExclusionOutputWithContext(context.Background())
}

func (i FirewallPolicyManagedRuleExclusionArgs) ToFirewallPolicyManagedRuleExclusionOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleExclusionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyManagedRuleExclusionOutput)
}

func (i FirewallPolicyManagedRuleExclusionArgs) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyManagedRuleExclusion] {
	return pulumix.Output[FirewallPolicyManagedRuleExclusion]{
		OutputState: i.ToFirewallPolicyManagedRuleExclusionOutputWithContext(ctx).OutputState,
	}
}

// FirewallPolicyManagedRuleExclusionArrayInput is an input type that accepts FirewallPolicyManagedRuleExclusionArray and FirewallPolicyManagedRuleExclusionArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyManagedRuleExclusionArrayInput` via:
//
//	FirewallPolicyManagedRuleExclusionArray{ FirewallPolicyManagedRuleExclusionArgs{...} }
type FirewallPolicyManagedRuleExclusionArrayInput interface {
	pulumi.Input

	ToFirewallPolicyManagedRuleExclusionArrayOutput() FirewallPolicyManagedRuleExclusionArrayOutput
	ToFirewallPolicyManagedRuleExclusionArrayOutputWithContext(context.Context) FirewallPolicyManagedRuleExclusionArrayOutput
}

type FirewallPolicyManagedRuleExclusionArray []FirewallPolicyManagedRuleExclusionInput

func (FirewallPolicyManagedRuleExclusionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyManagedRuleExclusion)(nil)).Elem()
}

func (i FirewallPolicyManagedRuleExclusionArray) ToFirewallPolicyManagedRuleExclusionArrayOutput() FirewallPolicyManagedRuleExclusionArrayOutput {
	return i.ToFirewallPolicyManagedRuleExclusionArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyManagedRuleExclusionArray) ToFirewallPolicyManagedRuleExclusionArrayOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleExclusionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyManagedRuleExclusionArrayOutput)
}

func (i FirewallPolicyManagedRuleExclusionArray) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyManagedRuleExclusion] {
	return pulumix.Output[[]FirewallPolicyManagedRuleExclusion]{
		OutputState: i.ToFirewallPolicyManagedRuleExclusionArrayOutputWithContext(ctx).OutputState,
	}
}

type FirewallPolicyManagedRuleExclusionOutput struct{ *pulumi.OutputState }

func (FirewallPolicyManagedRuleExclusionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyManagedRuleExclusion)(nil)).Elem()
}

func (o FirewallPolicyManagedRuleExclusionOutput) ToFirewallPolicyManagedRuleExclusionOutput() FirewallPolicyManagedRuleExclusionOutput {
	return o
}

func (o FirewallPolicyManagedRuleExclusionOutput) ToFirewallPolicyManagedRuleExclusionOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleExclusionOutput {
	return o
}

func (o FirewallPolicyManagedRuleExclusionOutput) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyManagedRuleExclusion] {
	return pulumix.Output[FirewallPolicyManagedRuleExclusion]{
		OutputState: o.OutputState,
	}
}

// The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
func (o FirewallPolicyManagedRuleExclusionOutput) MatchVariable() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleExclusion) string { return v.MatchVariable }).(pulumi.StringOutput)
}

// Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
func (o FirewallPolicyManagedRuleExclusionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleExclusion) string { return v.Operator }).(pulumi.StringOutput)
}

// Selector for the value in the `matchVariable` attribute this exclusion applies to.
func (o FirewallPolicyManagedRuleExclusionOutput) Selector() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleExclusion) string { return v.Selector }).(pulumi.StringOutput)
}

type FirewallPolicyManagedRuleExclusionArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyManagedRuleExclusionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyManagedRuleExclusion)(nil)).Elem()
}

func (o FirewallPolicyManagedRuleExclusionArrayOutput) ToFirewallPolicyManagedRuleExclusionArrayOutput() FirewallPolicyManagedRuleExclusionArrayOutput {
	return o
}

func (o FirewallPolicyManagedRuleExclusionArrayOutput) ToFirewallPolicyManagedRuleExclusionArrayOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleExclusionArrayOutput {
	return o
}

func (o FirewallPolicyManagedRuleExclusionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyManagedRuleExclusion] {
	return pulumix.Output[[]FirewallPolicyManagedRuleExclusion]{
		OutputState: o.OutputState,
	}
}

func (o FirewallPolicyManagedRuleExclusionArrayOutput) Index(i pulumi.IntInput) FirewallPolicyManagedRuleExclusionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyManagedRuleExclusion {
		return vs[0].([]FirewallPolicyManagedRuleExclusion)[vs[1].(int)]
	}).(FirewallPolicyManagedRuleExclusionOutput)
}

type FirewallPolicyManagedRuleOverride struct {
	// One or more `exclusion` blocks as defined below.
	Exclusions []FirewallPolicyManagedRuleOverrideExclusion `pulumi:"exclusions"`
	// The managed rule group to override.
	RuleGroupName string `pulumi:"ruleGroupName"`
	// One or more `rule` blocks as defined below. If none are specified, all of the rules in the group will be disabled.
	Rules []FirewallPolicyManagedRuleOverrideRule `pulumi:"rules"`
}

// FirewallPolicyManagedRuleOverrideInput is an input type that accepts FirewallPolicyManagedRuleOverrideArgs and FirewallPolicyManagedRuleOverrideOutput values.
// You can construct a concrete instance of `FirewallPolicyManagedRuleOverrideInput` via:
//
//	FirewallPolicyManagedRuleOverrideArgs{...}
type FirewallPolicyManagedRuleOverrideInput interface {
	pulumi.Input

	ToFirewallPolicyManagedRuleOverrideOutput() FirewallPolicyManagedRuleOverrideOutput
	ToFirewallPolicyManagedRuleOverrideOutputWithContext(context.Context) FirewallPolicyManagedRuleOverrideOutput
}

type FirewallPolicyManagedRuleOverrideArgs struct {
	// One or more `exclusion` blocks as defined below.
	Exclusions FirewallPolicyManagedRuleOverrideExclusionArrayInput `pulumi:"exclusions"`
	// The managed rule group to override.
	RuleGroupName pulumi.StringInput `pulumi:"ruleGroupName"`
	// One or more `rule` blocks as defined below. If none are specified, all of the rules in the group will be disabled.
	Rules FirewallPolicyManagedRuleOverrideRuleArrayInput `pulumi:"rules"`
}

func (FirewallPolicyManagedRuleOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyManagedRuleOverride)(nil)).Elem()
}

func (i FirewallPolicyManagedRuleOverrideArgs) ToFirewallPolicyManagedRuleOverrideOutput() FirewallPolicyManagedRuleOverrideOutput {
	return i.ToFirewallPolicyManagedRuleOverrideOutputWithContext(context.Background())
}

func (i FirewallPolicyManagedRuleOverrideArgs) ToFirewallPolicyManagedRuleOverrideOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyManagedRuleOverrideOutput)
}

func (i FirewallPolicyManagedRuleOverrideArgs) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyManagedRuleOverride] {
	return pulumix.Output[FirewallPolicyManagedRuleOverride]{
		OutputState: i.ToFirewallPolicyManagedRuleOverrideOutputWithContext(ctx).OutputState,
	}
}

// FirewallPolicyManagedRuleOverrideArrayInput is an input type that accepts FirewallPolicyManagedRuleOverrideArray and FirewallPolicyManagedRuleOverrideArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyManagedRuleOverrideArrayInput` via:
//
//	FirewallPolicyManagedRuleOverrideArray{ FirewallPolicyManagedRuleOverrideArgs{...} }
type FirewallPolicyManagedRuleOverrideArrayInput interface {
	pulumi.Input

	ToFirewallPolicyManagedRuleOverrideArrayOutput() FirewallPolicyManagedRuleOverrideArrayOutput
	ToFirewallPolicyManagedRuleOverrideArrayOutputWithContext(context.Context) FirewallPolicyManagedRuleOverrideArrayOutput
}

type FirewallPolicyManagedRuleOverrideArray []FirewallPolicyManagedRuleOverrideInput

func (FirewallPolicyManagedRuleOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyManagedRuleOverride)(nil)).Elem()
}

func (i FirewallPolicyManagedRuleOverrideArray) ToFirewallPolicyManagedRuleOverrideArrayOutput() FirewallPolicyManagedRuleOverrideArrayOutput {
	return i.ToFirewallPolicyManagedRuleOverrideArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyManagedRuleOverrideArray) ToFirewallPolicyManagedRuleOverrideArrayOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyManagedRuleOverrideArrayOutput)
}

func (i FirewallPolicyManagedRuleOverrideArray) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyManagedRuleOverride] {
	return pulumix.Output[[]FirewallPolicyManagedRuleOverride]{
		OutputState: i.ToFirewallPolicyManagedRuleOverrideArrayOutputWithContext(ctx).OutputState,
	}
}

type FirewallPolicyManagedRuleOverrideOutput struct{ *pulumi.OutputState }

func (FirewallPolicyManagedRuleOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyManagedRuleOverride)(nil)).Elem()
}

func (o FirewallPolicyManagedRuleOverrideOutput) ToFirewallPolicyManagedRuleOverrideOutput() FirewallPolicyManagedRuleOverrideOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideOutput) ToFirewallPolicyManagedRuleOverrideOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideOutput) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyManagedRuleOverride] {
	return pulumix.Output[FirewallPolicyManagedRuleOverride]{
		OutputState: o.OutputState,
	}
}

// One or more `exclusion` blocks as defined below.
func (o FirewallPolicyManagedRuleOverrideOutput) Exclusions() FirewallPolicyManagedRuleOverrideExclusionArrayOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleOverride) []FirewallPolicyManagedRuleOverrideExclusion {
		return v.Exclusions
	}).(FirewallPolicyManagedRuleOverrideExclusionArrayOutput)
}

// The managed rule group to override.
func (o FirewallPolicyManagedRuleOverrideOutput) RuleGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleOverride) string { return v.RuleGroupName }).(pulumi.StringOutput)
}

// One or more `rule` blocks as defined below. If none are specified, all of the rules in the group will be disabled.
func (o FirewallPolicyManagedRuleOverrideOutput) Rules() FirewallPolicyManagedRuleOverrideRuleArrayOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleOverride) []FirewallPolicyManagedRuleOverrideRule { return v.Rules }).(FirewallPolicyManagedRuleOverrideRuleArrayOutput)
}

type FirewallPolicyManagedRuleOverrideArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyManagedRuleOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyManagedRuleOverride)(nil)).Elem()
}

func (o FirewallPolicyManagedRuleOverrideArrayOutput) ToFirewallPolicyManagedRuleOverrideArrayOutput() FirewallPolicyManagedRuleOverrideArrayOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideArrayOutput) ToFirewallPolicyManagedRuleOverrideArrayOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideArrayOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyManagedRuleOverride] {
	return pulumix.Output[[]FirewallPolicyManagedRuleOverride]{
		OutputState: o.OutputState,
	}
}

func (o FirewallPolicyManagedRuleOverrideArrayOutput) Index(i pulumi.IntInput) FirewallPolicyManagedRuleOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyManagedRuleOverride {
		return vs[0].([]FirewallPolicyManagedRuleOverride)[vs[1].(int)]
	}).(FirewallPolicyManagedRuleOverrideOutput)
}

type FirewallPolicyManagedRuleOverrideExclusion struct {
	// The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
	MatchVariable string `pulumi:"matchVariable"`
	// Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
	Operator string `pulumi:"operator"`
	// Selector for the value in the `matchVariable` attribute this exclusion applies to.
	Selector string `pulumi:"selector"`
}

// FirewallPolicyManagedRuleOverrideExclusionInput is an input type that accepts FirewallPolicyManagedRuleOverrideExclusionArgs and FirewallPolicyManagedRuleOverrideExclusionOutput values.
// You can construct a concrete instance of `FirewallPolicyManagedRuleOverrideExclusionInput` via:
//
//	FirewallPolicyManagedRuleOverrideExclusionArgs{...}
type FirewallPolicyManagedRuleOverrideExclusionInput interface {
	pulumi.Input

	ToFirewallPolicyManagedRuleOverrideExclusionOutput() FirewallPolicyManagedRuleOverrideExclusionOutput
	ToFirewallPolicyManagedRuleOverrideExclusionOutputWithContext(context.Context) FirewallPolicyManagedRuleOverrideExclusionOutput
}

type FirewallPolicyManagedRuleOverrideExclusionArgs struct {
	// The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
	MatchVariable pulumi.StringInput `pulumi:"matchVariable"`
	// Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Selector for the value in the `matchVariable` attribute this exclusion applies to.
	Selector pulumi.StringInput `pulumi:"selector"`
}

func (FirewallPolicyManagedRuleOverrideExclusionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyManagedRuleOverrideExclusion)(nil)).Elem()
}

func (i FirewallPolicyManagedRuleOverrideExclusionArgs) ToFirewallPolicyManagedRuleOverrideExclusionOutput() FirewallPolicyManagedRuleOverrideExclusionOutput {
	return i.ToFirewallPolicyManagedRuleOverrideExclusionOutputWithContext(context.Background())
}

func (i FirewallPolicyManagedRuleOverrideExclusionArgs) ToFirewallPolicyManagedRuleOverrideExclusionOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideExclusionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyManagedRuleOverrideExclusionOutput)
}

func (i FirewallPolicyManagedRuleOverrideExclusionArgs) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyManagedRuleOverrideExclusion] {
	return pulumix.Output[FirewallPolicyManagedRuleOverrideExclusion]{
		OutputState: i.ToFirewallPolicyManagedRuleOverrideExclusionOutputWithContext(ctx).OutputState,
	}
}

// FirewallPolicyManagedRuleOverrideExclusionArrayInput is an input type that accepts FirewallPolicyManagedRuleOverrideExclusionArray and FirewallPolicyManagedRuleOverrideExclusionArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyManagedRuleOverrideExclusionArrayInput` via:
//
//	FirewallPolicyManagedRuleOverrideExclusionArray{ FirewallPolicyManagedRuleOverrideExclusionArgs{...} }
type FirewallPolicyManagedRuleOverrideExclusionArrayInput interface {
	pulumi.Input

	ToFirewallPolicyManagedRuleOverrideExclusionArrayOutput() FirewallPolicyManagedRuleOverrideExclusionArrayOutput
	ToFirewallPolicyManagedRuleOverrideExclusionArrayOutputWithContext(context.Context) FirewallPolicyManagedRuleOverrideExclusionArrayOutput
}

type FirewallPolicyManagedRuleOverrideExclusionArray []FirewallPolicyManagedRuleOverrideExclusionInput

func (FirewallPolicyManagedRuleOverrideExclusionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyManagedRuleOverrideExclusion)(nil)).Elem()
}

func (i FirewallPolicyManagedRuleOverrideExclusionArray) ToFirewallPolicyManagedRuleOverrideExclusionArrayOutput() FirewallPolicyManagedRuleOverrideExclusionArrayOutput {
	return i.ToFirewallPolicyManagedRuleOverrideExclusionArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyManagedRuleOverrideExclusionArray) ToFirewallPolicyManagedRuleOverrideExclusionArrayOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideExclusionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyManagedRuleOverrideExclusionArrayOutput)
}

func (i FirewallPolicyManagedRuleOverrideExclusionArray) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyManagedRuleOverrideExclusion] {
	return pulumix.Output[[]FirewallPolicyManagedRuleOverrideExclusion]{
		OutputState: i.ToFirewallPolicyManagedRuleOverrideExclusionArrayOutputWithContext(ctx).OutputState,
	}
}

type FirewallPolicyManagedRuleOverrideExclusionOutput struct{ *pulumi.OutputState }

func (FirewallPolicyManagedRuleOverrideExclusionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyManagedRuleOverrideExclusion)(nil)).Elem()
}

func (o FirewallPolicyManagedRuleOverrideExclusionOutput) ToFirewallPolicyManagedRuleOverrideExclusionOutput() FirewallPolicyManagedRuleOverrideExclusionOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideExclusionOutput) ToFirewallPolicyManagedRuleOverrideExclusionOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideExclusionOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideExclusionOutput) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyManagedRuleOverrideExclusion] {
	return pulumix.Output[FirewallPolicyManagedRuleOverrideExclusion]{
		OutputState: o.OutputState,
	}
}

// The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
func (o FirewallPolicyManagedRuleOverrideExclusionOutput) MatchVariable() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleOverrideExclusion) string { return v.MatchVariable }).(pulumi.StringOutput)
}

// Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
func (o FirewallPolicyManagedRuleOverrideExclusionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleOverrideExclusion) string { return v.Operator }).(pulumi.StringOutput)
}

// Selector for the value in the `matchVariable` attribute this exclusion applies to.
func (o FirewallPolicyManagedRuleOverrideExclusionOutput) Selector() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleOverrideExclusion) string { return v.Selector }).(pulumi.StringOutput)
}

type FirewallPolicyManagedRuleOverrideExclusionArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyManagedRuleOverrideExclusionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyManagedRuleOverrideExclusion)(nil)).Elem()
}

func (o FirewallPolicyManagedRuleOverrideExclusionArrayOutput) ToFirewallPolicyManagedRuleOverrideExclusionArrayOutput() FirewallPolicyManagedRuleOverrideExclusionArrayOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideExclusionArrayOutput) ToFirewallPolicyManagedRuleOverrideExclusionArrayOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideExclusionArrayOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideExclusionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyManagedRuleOverrideExclusion] {
	return pulumix.Output[[]FirewallPolicyManagedRuleOverrideExclusion]{
		OutputState: o.OutputState,
	}
}

func (o FirewallPolicyManagedRuleOverrideExclusionArrayOutput) Index(i pulumi.IntInput) FirewallPolicyManagedRuleOverrideExclusionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyManagedRuleOverrideExclusion {
		return vs[0].([]FirewallPolicyManagedRuleOverrideExclusion)[vs[1].(int)]
	}).(FirewallPolicyManagedRuleOverrideExclusionOutput)
}

type FirewallPolicyManagedRuleOverrideRule struct {
	// The action to be applied when the rule matches. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
	Action string `pulumi:"action"`
	// Is the managed rule override enabled or disabled. Defaults to `false`
	Enabled *bool `pulumi:"enabled"`
	// One or more `exclusion` blocks as defined below.
	Exclusions []FirewallPolicyManagedRuleOverrideRuleExclusion `pulumi:"exclusions"`
	// Identifier for the managed rule.
	RuleId string `pulumi:"ruleId"`
}

// FirewallPolicyManagedRuleOverrideRuleInput is an input type that accepts FirewallPolicyManagedRuleOverrideRuleArgs and FirewallPolicyManagedRuleOverrideRuleOutput values.
// You can construct a concrete instance of `FirewallPolicyManagedRuleOverrideRuleInput` via:
//
//	FirewallPolicyManagedRuleOverrideRuleArgs{...}
type FirewallPolicyManagedRuleOverrideRuleInput interface {
	pulumi.Input

	ToFirewallPolicyManagedRuleOverrideRuleOutput() FirewallPolicyManagedRuleOverrideRuleOutput
	ToFirewallPolicyManagedRuleOverrideRuleOutputWithContext(context.Context) FirewallPolicyManagedRuleOverrideRuleOutput
}

type FirewallPolicyManagedRuleOverrideRuleArgs struct {
	// The action to be applied when the rule matches. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
	Action pulumi.StringInput `pulumi:"action"`
	// Is the managed rule override enabled or disabled. Defaults to `false`
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// One or more `exclusion` blocks as defined below.
	Exclusions FirewallPolicyManagedRuleOverrideRuleExclusionArrayInput `pulumi:"exclusions"`
	// Identifier for the managed rule.
	RuleId pulumi.StringInput `pulumi:"ruleId"`
}

func (FirewallPolicyManagedRuleOverrideRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyManagedRuleOverrideRule)(nil)).Elem()
}

func (i FirewallPolicyManagedRuleOverrideRuleArgs) ToFirewallPolicyManagedRuleOverrideRuleOutput() FirewallPolicyManagedRuleOverrideRuleOutput {
	return i.ToFirewallPolicyManagedRuleOverrideRuleOutputWithContext(context.Background())
}

func (i FirewallPolicyManagedRuleOverrideRuleArgs) ToFirewallPolicyManagedRuleOverrideRuleOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyManagedRuleOverrideRuleOutput)
}

func (i FirewallPolicyManagedRuleOverrideRuleArgs) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyManagedRuleOverrideRule] {
	return pulumix.Output[FirewallPolicyManagedRuleOverrideRule]{
		OutputState: i.ToFirewallPolicyManagedRuleOverrideRuleOutputWithContext(ctx).OutputState,
	}
}

// FirewallPolicyManagedRuleOverrideRuleArrayInput is an input type that accepts FirewallPolicyManagedRuleOverrideRuleArray and FirewallPolicyManagedRuleOverrideRuleArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyManagedRuleOverrideRuleArrayInput` via:
//
//	FirewallPolicyManagedRuleOverrideRuleArray{ FirewallPolicyManagedRuleOverrideRuleArgs{...} }
type FirewallPolicyManagedRuleOverrideRuleArrayInput interface {
	pulumi.Input

	ToFirewallPolicyManagedRuleOverrideRuleArrayOutput() FirewallPolicyManagedRuleOverrideRuleArrayOutput
	ToFirewallPolicyManagedRuleOverrideRuleArrayOutputWithContext(context.Context) FirewallPolicyManagedRuleOverrideRuleArrayOutput
}

type FirewallPolicyManagedRuleOverrideRuleArray []FirewallPolicyManagedRuleOverrideRuleInput

func (FirewallPolicyManagedRuleOverrideRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyManagedRuleOverrideRule)(nil)).Elem()
}

func (i FirewallPolicyManagedRuleOverrideRuleArray) ToFirewallPolicyManagedRuleOverrideRuleArrayOutput() FirewallPolicyManagedRuleOverrideRuleArrayOutput {
	return i.ToFirewallPolicyManagedRuleOverrideRuleArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyManagedRuleOverrideRuleArray) ToFirewallPolicyManagedRuleOverrideRuleArrayOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyManagedRuleOverrideRuleArrayOutput)
}

func (i FirewallPolicyManagedRuleOverrideRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyManagedRuleOverrideRule] {
	return pulumix.Output[[]FirewallPolicyManagedRuleOverrideRule]{
		OutputState: i.ToFirewallPolicyManagedRuleOverrideRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type FirewallPolicyManagedRuleOverrideRuleOutput struct{ *pulumi.OutputState }

func (FirewallPolicyManagedRuleOverrideRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyManagedRuleOverrideRule)(nil)).Elem()
}

func (o FirewallPolicyManagedRuleOverrideRuleOutput) ToFirewallPolicyManagedRuleOverrideRuleOutput() FirewallPolicyManagedRuleOverrideRuleOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideRuleOutput) ToFirewallPolicyManagedRuleOverrideRuleOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideRuleOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideRuleOutput) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyManagedRuleOverrideRule] {
	return pulumix.Output[FirewallPolicyManagedRuleOverrideRule]{
		OutputState: o.OutputState,
	}
}

// The action to be applied when the rule matches. Possible values are `Allow`, `Block`, `Log`, or `Redirect`.
func (o FirewallPolicyManagedRuleOverrideRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleOverrideRule) string { return v.Action }).(pulumi.StringOutput)
}

// Is the managed rule override enabled or disabled. Defaults to `false`
func (o FirewallPolicyManagedRuleOverrideRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleOverrideRule) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// One or more `exclusion` blocks as defined below.
func (o FirewallPolicyManagedRuleOverrideRuleOutput) Exclusions() FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleOverrideRule) []FirewallPolicyManagedRuleOverrideRuleExclusion {
		return v.Exclusions
	}).(FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput)
}

// Identifier for the managed rule.
func (o FirewallPolicyManagedRuleOverrideRuleOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleOverrideRule) string { return v.RuleId }).(pulumi.StringOutput)
}

type FirewallPolicyManagedRuleOverrideRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyManagedRuleOverrideRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyManagedRuleOverrideRule)(nil)).Elem()
}

func (o FirewallPolicyManagedRuleOverrideRuleArrayOutput) ToFirewallPolicyManagedRuleOverrideRuleArrayOutput() FirewallPolicyManagedRuleOverrideRuleArrayOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideRuleArrayOutput) ToFirewallPolicyManagedRuleOverrideRuleArrayOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideRuleArrayOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyManagedRuleOverrideRule] {
	return pulumix.Output[[]FirewallPolicyManagedRuleOverrideRule]{
		OutputState: o.OutputState,
	}
}

func (o FirewallPolicyManagedRuleOverrideRuleArrayOutput) Index(i pulumi.IntInput) FirewallPolicyManagedRuleOverrideRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyManagedRuleOverrideRule {
		return vs[0].([]FirewallPolicyManagedRuleOverrideRule)[vs[1].(int)]
	}).(FirewallPolicyManagedRuleOverrideRuleOutput)
}

type FirewallPolicyManagedRuleOverrideRuleExclusion struct {
	// The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
	MatchVariable string `pulumi:"matchVariable"`
	// Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
	Operator string `pulumi:"operator"`
	// Selector for the value in the `matchVariable` attribute this exclusion applies to.
	Selector string `pulumi:"selector"`
}

// FirewallPolicyManagedRuleOverrideRuleExclusionInput is an input type that accepts FirewallPolicyManagedRuleOverrideRuleExclusionArgs and FirewallPolicyManagedRuleOverrideRuleExclusionOutput values.
// You can construct a concrete instance of `FirewallPolicyManagedRuleOverrideRuleExclusionInput` via:
//
//	FirewallPolicyManagedRuleOverrideRuleExclusionArgs{...}
type FirewallPolicyManagedRuleOverrideRuleExclusionInput interface {
	pulumi.Input

	ToFirewallPolicyManagedRuleOverrideRuleExclusionOutput() FirewallPolicyManagedRuleOverrideRuleExclusionOutput
	ToFirewallPolicyManagedRuleOverrideRuleExclusionOutputWithContext(context.Context) FirewallPolicyManagedRuleOverrideRuleExclusionOutput
}

type FirewallPolicyManagedRuleOverrideRuleExclusionArgs struct {
	// The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
	MatchVariable pulumi.StringInput `pulumi:"matchVariable"`
	// Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Selector for the value in the `matchVariable` attribute this exclusion applies to.
	Selector pulumi.StringInput `pulumi:"selector"`
}

func (FirewallPolicyManagedRuleOverrideRuleExclusionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyManagedRuleOverrideRuleExclusion)(nil)).Elem()
}

func (i FirewallPolicyManagedRuleOverrideRuleExclusionArgs) ToFirewallPolicyManagedRuleOverrideRuleExclusionOutput() FirewallPolicyManagedRuleOverrideRuleExclusionOutput {
	return i.ToFirewallPolicyManagedRuleOverrideRuleExclusionOutputWithContext(context.Background())
}

func (i FirewallPolicyManagedRuleOverrideRuleExclusionArgs) ToFirewallPolicyManagedRuleOverrideRuleExclusionOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideRuleExclusionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyManagedRuleOverrideRuleExclusionOutput)
}

func (i FirewallPolicyManagedRuleOverrideRuleExclusionArgs) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyManagedRuleOverrideRuleExclusion] {
	return pulumix.Output[FirewallPolicyManagedRuleOverrideRuleExclusion]{
		OutputState: i.ToFirewallPolicyManagedRuleOverrideRuleExclusionOutputWithContext(ctx).OutputState,
	}
}

// FirewallPolicyManagedRuleOverrideRuleExclusionArrayInput is an input type that accepts FirewallPolicyManagedRuleOverrideRuleExclusionArray and FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyManagedRuleOverrideRuleExclusionArrayInput` via:
//
//	FirewallPolicyManagedRuleOverrideRuleExclusionArray{ FirewallPolicyManagedRuleOverrideRuleExclusionArgs{...} }
type FirewallPolicyManagedRuleOverrideRuleExclusionArrayInput interface {
	pulumi.Input

	ToFirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput() FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput
	ToFirewallPolicyManagedRuleOverrideRuleExclusionArrayOutputWithContext(context.Context) FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput
}

type FirewallPolicyManagedRuleOverrideRuleExclusionArray []FirewallPolicyManagedRuleOverrideRuleExclusionInput

func (FirewallPolicyManagedRuleOverrideRuleExclusionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyManagedRuleOverrideRuleExclusion)(nil)).Elem()
}

func (i FirewallPolicyManagedRuleOverrideRuleExclusionArray) ToFirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput() FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput {
	return i.ToFirewallPolicyManagedRuleOverrideRuleExclusionArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyManagedRuleOverrideRuleExclusionArray) ToFirewallPolicyManagedRuleOverrideRuleExclusionArrayOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput)
}

func (i FirewallPolicyManagedRuleOverrideRuleExclusionArray) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyManagedRuleOverrideRuleExclusion] {
	return pulumix.Output[[]FirewallPolicyManagedRuleOverrideRuleExclusion]{
		OutputState: i.ToFirewallPolicyManagedRuleOverrideRuleExclusionArrayOutputWithContext(ctx).OutputState,
	}
}

type FirewallPolicyManagedRuleOverrideRuleExclusionOutput struct{ *pulumi.OutputState }

func (FirewallPolicyManagedRuleOverrideRuleExclusionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyManagedRuleOverrideRuleExclusion)(nil)).Elem()
}

func (o FirewallPolicyManagedRuleOverrideRuleExclusionOutput) ToFirewallPolicyManagedRuleOverrideRuleExclusionOutput() FirewallPolicyManagedRuleOverrideRuleExclusionOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideRuleExclusionOutput) ToFirewallPolicyManagedRuleOverrideRuleExclusionOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideRuleExclusionOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideRuleExclusionOutput) ToOutput(ctx context.Context) pulumix.Output[FirewallPolicyManagedRuleOverrideRuleExclusion] {
	return pulumix.Output[FirewallPolicyManagedRuleOverrideRuleExclusion]{
		OutputState: o.OutputState,
	}
}

// The variable type to be excluded. Possible values are `QueryStringArgNames`, `RequestBodyPostArgNames`, `RequestCookieNames`, `RequestHeaderNames`.
func (o FirewallPolicyManagedRuleOverrideRuleExclusionOutput) MatchVariable() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleOverrideRuleExclusion) string { return v.MatchVariable }).(pulumi.StringOutput)
}

// Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to. Possible values are: `Equals`, `Contains`, `StartsWith`, `EndsWith`, `EqualsAny`.
func (o FirewallPolicyManagedRuleOverrideRuleExclusionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleOverrideRuleExclusion) string { return v.Operator }).(pulumi.StringOutput)
}

// Selector for the value in the `matchVariable` attribute this exclusion applies to.
func (o FirewallPolicyManagedRuleOverrideRuleExclusionOutput) Selector() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyManagedRuleOverrideRuleExclusion) string { return v.Selector }).(pulumi.StringOutput)
}

type FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyManagedRuleOverrideRuleExclusion)(nil)).Elem()
}

func (o FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput) ToFirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput() FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput) ToFirewallPolicyManagedRuleOverrideRuleExclusionArrayOutputWithContext(ctx context.Context) FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput {
	return o
}

func (o FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FirewallPolicyManagedRuleOverrideRuleExclusion] {
	return pulumix.Output[[]FirewallPolicyManagedRuleOverrideRuleExclusion]{
		OutputState: o.OutputState,
	}
}

func (o FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput) Index(i pulumi.IntInput) FirewallPolicyManagedRuleOverrideRuleExclusionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyManagedRuleOverrideRuleExclusion {
		return vs[0].([]FirewallPolicyManagedRuleOverrideRuleExclusion)[vs[1].(int)]
	}).(FirewallPolicyManagedRuleOverrideRuleExclusionOutput)
}

type FrontdoorBackendPool struct {
	// A `backend` block as defined below.
	Backends []FrontdoorBackendPoolBackend `pulumi:"backends"`
	// Specifies the name of the `backendPoolHealthProbe` block within this resource to use for this `Backend Pool`.
	HealthProbeName string `pulumi:"healthProbeName"`
	// The ID of the FrontDoor.
	Id *string `pulumi:"id"`
	// Specifies the name of the `backendPoolLoadBalancing` block within this resource to use for this `Backend Pool`.
	LoadBalancingName string `pulumi:"loadBalancingName"`
	// Specifies the name of the Backend Pool.
	Name string `pulumi:"name"`
}

// FrontdoorBackendPoolInput is an input type that accepts FrontdoorBackendPoolArgs and FrontdoorBackendPoolOutput values.
// You can construct a concrete instance of `FrontdoorBackendPoolInput` via:
//
//	FrontdoorBackendPoolArgs{...}
type FrontdoorBackendPoolInput interface {
	pulumi.Input

	ToFrontdoorBackendPoolOutput() FrontdoorBackendPoolOutput
	ToFrontdoorBackendPoolOutputWithContext(context.Context) FrontdoorBackendPoolOutput
}

type FrontdoorBackendPoolArgs struct {
	// A `backend` block as defined below.
	Backends FrontdoorBackendPoolBackendArrayInput `pulumi:"backends"`
	// Specifies the name of the `backendPoolHealthProbe` block within this resource to use for this `Backend Pool`.
	HealthProbeName pulumi.StringInput `pulumi:"healthProbeName"`
	// The ID of the FrontDoor.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the name of the `backendPoolLoadBalancing` block within this resource to use for this `Backend Pool`.
	LoadBalancingName pulumi.StringInput `pulumi:"loadBalancingName"`
	// Specifies the name of the Backend Pool.
	Name pulumi.StringInput `pulumi:"name"`
}

func (FrontdoorBackendPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorBackendPool)(nil)).Elem()
}

func (i FrontdoorBackendPoolArgs) ToFrontdoorBackendPoolOutput() FrontdoorBackendPoolOutput {
	return i.ToFrontdoorBackendPoolOutputWithContext(context.Background())
}

func (i FrontdoorBackendPoolArgs) ToFrontdoorBackendPoolOutputWithContext(ctx context.Context) FrontdoorBackendPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorBackendPoolOutput)
}

func (i FrontdoorBackendPoolArgs) ToOutput(ctx context.Context) pulumix.Output[FrontdoorBackendPool] {
	return pulumix.Output[FrontdoorBackendPool]{
		OutputState: i.ToFrontdoorBackendPoolOutputWithContext(ctx).OutputState,
	}
}

// FrontdoorBackendPoolArrayInput is an input type that accepts FrontdoorBackendPoolArray and FrontdoorBackendPoolArrayOutput values.
// You can construct a concrete instance of `FrontdoorBackendPoolArrayInput` via:
//
//	FrontdoorBackendPoolArray{ FrontdoorBackendPoolArgs{...} }
type FrontdoorBackendPoolArrayInput interface {
	pulumi.Input

	ToFrontdoorBackendPoolArrayOutput() FrontdoorBackendPoolArrayOutput
	ToFrontdoorBackendPoolArrayOutputWithContext(context.Context) FrontdoorBackendPoolArrayOutput
}

type FrontdoorBackendPoolArray []FrontdoorBackendPoolInput

func (FrontdoorBackendPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorBackendPool)(nil)).Elem()
}

func (i FrontdoorBackendPoolArray) ToFrontdoorBackendPoolArrayOutput() FrontdoorBackendPoolArrayOutput {
	return i.ToFrontdoorBackendPoolArrayOutputWithContext(context.Background())
}

func (i FrontdoorBackendPoolArray) ToFrontdoorBackendPoolArrayOutputWithContext(ctx context.Context) FrontdoorBackendPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorBackendPoolArrayOutput)
}

func (i FrontdoorBackendPoolArray) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorBackendPool] {
	return pulumix.Output[[]FrontdoorBackendPool]{
		OutputState: i.ToFrontdoorBackendPoolArrayOutputWithContext(ctx).OutputState,
	}
}

type FrontdoorBackendPoolOutput struct{ *pulumi.OutputState }

func (FrontdoorBackendPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorBackendPool)(nil)).Elem()
}

func (o FrontdoorBackendPoolOutput) ToFrontdoorBackendPoolOutput() FrontdoorBackendPoolOutput {
	return o
}

func (o FrontdoorBackendPoolOutput) ToFrontdoorBackendPoolOutputWithContext(ctx context.Context) FrontdoorBackendPoolOutput {
	return o
}

func (o FrontdoorBackendPoolOutput) ToOutput(ctx context.Context) pulumix.Output[FrontdoorBackendPool] {
	return pulumix.Output[FrontdoorBackendPool]{
		OutputState: o.OutputState,
	}
}

// A `backend` block as defined below.
func (o FrontdoorBackendPoolOutput) Backends() FrontdoorBackendPoolBackendArrayOutput {
	return o.ApplyT(func(v FrontdoorBackendPool) []FrontdoorBackendPoolBackend { return v.Backends }).(FrontdoorBackendPoolBackendArrayOutput)
}

// Specifies the name of the `backendPoolHealthProbe` block within this resource to use for this `Backend Pool`.
func (o FrontdoorBackendPoolOutput) HealthProbeName() pulumi.StringOutput {
	return o.ApplyT(func(v FrontdoorBackendPool) string { return v.HealthProbeName }).(pulumi.StringOutput)
}

// The ID of the FrontDoor.
func (o FrontdoorBackendPoolOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPool) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the name of the `backendPoolLoadBalancing` block within this resource to use for this `Backend Pool`.
func (o FrontdoorBackendPoolOutput) LoadBalancingName() pulumi.StringOutput {
	return o.ApplyT(func(v FrontdoorBackendPool) string { return v.LoadBalancingName }).(pulumi.StringOutput)
}

// Specifies the name of the Backend Pool.
func (o FrontdoorBackendPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FrontdoorBackendPool) string { return v.Name }).(pulumi.StringOutput)
}

type FrontdoorBackendPoolArrayOutput struct{ *pulumi.OutputState }

func (FrontdoorBackendPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorBackendPool)(nil)).Elem()
}

func (o FrontdoorBackendPoolArrayOutput) ToFrontdoorBackendPoolArrayOutput() FrontdoorBackendPoolArrayOutput {
	return o
}

func (o FrontdoorBackendPoolArrayOutput) ToFrontdoorBackendPoolArrayOutputWithContext(ctx context.Context) FrontdoorBackendPoolArrayOutput {
	return o
}

func (o FrontdoorBackendPoolArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorBackendPool] {
	return pulumix.Output[[]FrontdoorBackendPool]{
		OutputState: o.OutputState,
	}
}

func (o FrontdoorBackendPoolArrayOutput) Index(i pulumi.IntInput) FrontdoorBackendPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontdoorBackendPool {
		return vs[0].([]FrontdoorBackendPool)[vs[1].(int)]
	}).(FrontdoorBackendPoolOutput)
}

type FrontdoorBackendPoolBackend struct {
	// Location of the backend (IP address or FQDN)
	Address string `pulumi:"address"`
	// Specifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The value to use as the host header sent to the backend.
	HostHeader string `pulumi:"hostHeader"`
	// The HTTP TCP port number. Possible values are between `1` - `65535`.
	HttpPort int `pulumi:"httpPort"`
	// The HTTPS TCP port number. Possible values are between `1` - `65535`.
	HttpsPort int `pulumi:"httpsPort"`
	// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
	Priority *int `pulumi:"priority"`
	// Weight of this endpoint for load balancing purposes. Defaults to `50`.
	Weight *int `pulumi:"weight"`
}

// FrontdoorBackendPoolBackendInput is an input type that accepts FrontdoorBackendPoolBackendArgs and FrontdoorBackendPoolBackendOutput values.
// You can construct a concrete instance of `FrontdoorBackendPoolBackendInput` via:
//
//	FrontdoorBackendPoolBackendArgs{...}
type FrontdoorBackendPoolBackendInput interface {
	pulumi.Input

	ToFrontdoorBackendPoolBackendOutput() FrontdoorBackendPoolBackendOutput
	ToFrontdoorBackendPoolBackendOutputWithContext(context.Context) FrontdoorBackendPoolBackendOutput
}

type FrontdoorBackendPoolBackendArgs struct {
	// Location of the backend (IP address or FQDN)
	Address pulumi.StringInput `pulumi:"address"`
	// Specifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The value to use as the host header sent to the backend.
	HostHeader pulumi.StringInput `pulumi:"hostHeader"`
	// The HTTP TCP port number. Possible values are between `1` - `65535`.
	HttpPort pulumi.IntInput `pulumi:"httpPort"`
	// The HTTPS TCP port number. Possible values are between `1` - `65535`.
	HttpsPort pulumi.IntInput `pulumi:"httpsPort"`
	// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Weight of this endpoint for load balancing purposes. Defaults to `50`.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (FrontdoorBackendPoolBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorBackendPoolBackend)(nil)).Elem()
}

func (i FrontdoorBackendPoolBackendArgs) ToFrontdoorBackendPoolBackendOutput() FrontdoorBackendPoolBackendOutput {
	return i.ToFrontdoorBackendPoolBackendOutputWithContext(context.Background())
}

func (i FrontdoorBackendPoolBackendArgs) ToFrontdoorBackendPoolBackendOutputWithContext(ctx context.Context) FrontdoorBackendPoolBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorBackendPoolBackendOutput)
}

func (i FrontdoorBackendPoolBackendArgs) ToOutput(ctx context.Context) pulumix.Output[FrontdoorBackendPoolBackend] {
	return pulumix.Output[FrontdoorBackendPoolBackend]{
		OutputState: i.ToFrontdoorBackendPoolBackendOutputWithContext(ctx).OutputState,
	}
}

// FrontdoorBackendPoolBackendArrayInput is an input type that accepts FrontdoorBackendPoolBackendArray and FrontdoorBackendPoolBackendArrayOutput values.
// You can construct a concrete instance of `FrontdoorBackendPoolBackendArrayInput` via:
//
//	FrontdoorBackendPoolBackendArray{ FrontdoorBackendPoolBackendArgs{...} }
type FrontdoorBackendPoolBackendArrayInput interface {
	pulumi.Input

	ToFrontdoorBackendPoolBackendArrayOutput() FrontdoorBackendPoolBackendArrayOutput
	ToFrontdoorBackendPoolBackendArrayOutputWithContext(context.Context) FrontdoorBackendPoolBackendArrayOutput
}

type FrontdoorBackendPoolBackendArray []FrontdoorBackendPoolBackendInput

func (FrontdoorBackendPoolBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorBackendPoolBackend)(nil)).Elem()
}

func (i FrontdoorBackendPoolBackendArray) ToFrontdoorBackendPoolBackendArrayOutput() FrontdoorBackendPoolBackendArrayOutput {
	return i.ToFrontdoorBackendPoolBackendArrayOutputWithContext(context.Background())
}

func (i FrontdoorBackendPoolBackendArray) ToFrontdoorBackendPoolBackendArrayOutputWithContext(ctx context.Context) FrontdoorBackendPoolBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorBackendPoolBackendArrayOutput)
}

func (i FrontdoorBackendPoolBackendArray) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorBackendPoolBackend] {
	return pulumix.Output[[]FrontdoorBackendPoolBackend]{
		OutputState: i.ToFrontdoorBackendPoolBackendArrayOutputWithContext(ctx).OutputState,
	}
}

type FrontdoorBackendPoolBackendOutput struct{ *pulumi.OutputState }

func (FrontdoorBackendPoolBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorBackendPoolBackend)(nil)).Elem()
}

func (o FrontdoorBackendPoolBackendOutput) ToFrontdoorBackendPoolBackendOutput() FrontdoorBackendPoolBackendOutput {
	return o
}

func (o FrontdoorBackendPoolBackendOutput) ToFrontdoorBackendPoolBackendOutputWithContext(ctx context.Context) FrontdoorBackendPoolBackendOutput {
	return o
}

func (o FrontdoorBackendPoolBackendOutput) ToOutput(ctx context.Context) pulumix.Output[FrontdoorBackendPoolBackend] {
	return pulumix.Output[FrontdoorBackendPoolBackend]{
		OutputState: o.OutputState,
	}
}

// Location of the backend (IP address or FQDN)
func (o FrontdoorBackendPoolBackendOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolBackend) string { return v.Address }).(pulumi.StringOutput)
}

// Specifies if the backend is enabled or not. Valid options are `true` or `false`. Defaults to `true`.
func (o FrontdoorBackendPoolBackendOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolBackend) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The value to use as the host header sent to the backend.
func (o FrontdoorBackendPoolBackendOutput) HostHeader() pulumi.StringOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolBackend) string { return v.HostHeader }).(pulumi.StringOutput)
}

// The HTTP TCP port number. Possible values are between `1` - `65535`.
func (o FrontdoorBackendPoolBackendOutput) HttpPort() pulumi.IntOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolBackend) int { return v.HttpPort }).(pulumi.IntOutput)
}

// The HTTPS TCP port number. Possible values are between `1` - `65535`.
func (o FrontdoorBackendPoolBackendOutput) HttpsPort() pulumi.IntOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolBackend) int { return v.HttpsPort }).(pulumi.IntOutput)
}

// Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy. Defaults to `1`.
func (o FrontdoorBackendPoolBackendOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolBackend) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Weight of this endpoint for load balancing purposes. Defaults to `50`.
func (o FrontdoorBackendPoolBackendOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolBackend) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type FrontdoorBackendPoolBackendArrayOutput struct{ *pulumi.OutputState }

func (FrontdoorBackendPoolBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorBackendPoolBackend)(nil)).Elem()
}

func (o FrontdoorBackendPoolBackendArrayOutput) ToFrontdoorBackendPoolBackendArrayOutput() FrontdoorBackendPoolBackendArrayOutput {
	return o
}

func (o FrontdoorBackendPoolBackendArrayOutput) ToFrontdoorBackendPoolBackendArrayOutputWithContext(ctx context.Context) FrontdoorBackendPoolBackendArrayOutput {
	return o
}

func (o FrontdoorBackendPoolBackendArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorBackendPoolBackend] {
	return pulumix.Output[[]FrontdoorBackendPoolBackend]{
		OutputState: o.OutputState,
	}
}

func (o FrontdoorBackendPoolBackendArrayOutput) Index(i pulumi.IntInput) FrontdoorBackendPoolBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontdoorBackendPoolBackend {
		return vs[0].([]FrontdoorBackendPoolBackend)[vs[1].(int)]
	}).(FrontdoorBackendPoolBackendOutput)
}

type FrontdoorBackendPoolHealthProbe struct {
	// Is this health probe enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The ID of the FrontDoor.
	Id *string `pulumi:"id"`
	// The number of seconds between each Health Probe. Defaults to `120`.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
	// Specifies the name of the Health Probe.
	Name string `pulumi:"name"`
	// The path to use for the Health Probe. Default is `/`.
	Path *string `pulumi:"path"`
	// Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: `GET` and `HEAD`. Defaults to `GET`.
	//
	// > **NOTE:** Use the `HEAD` method if you do not need to check the response body of your health probe.
	ProbeMethod *string `pulumi:"probeMethod"`
	// Protocol scheme to use for the Health Probe. Possible values are `Http` and `Https`. Defaults to `Http`.
	Protocol *string `pulumi:"protocol"`
}

// FrontdoorBackendPoolHealthProbeInput is an input type that accepts FrontdoorBackendPoolHealthProbeArgs and FrontdoorBackendPoolHealthProbeOutput values.
// You can construct a concrete instance of `FrontdoorBackendPoolHealthProbeInput` via:
//
//	FrontdoorBackendPoolHealthProbeArgs{...}
type FrontdoorBackendPoolHealthProbeInput interface {
	pulumi.Input

	ToFrontdoorBackendPoolHealthProbeOutput() FrontdoorBackendPoolHealthProbeOutput
	ToFrontdoorBackendPoolHealthProbeOutputWithContext(context.Context) FrontdoorBackendPoolHealthProbeOutput
}

type FrontdoorBackendPoolHealthProbeArgs struct {
	// Is this health probe enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The ID of the FrontDoor.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The number of seconds between each Health Probe. Defaults to `120`.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
	// Specifies the name of the Health Probe.
	Name pulumi.StringInput `pulumi:"name"`
	// The path to use for the Health Probe. Default is `/`.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: `GET` and `HEAD`. Defaults to `GET`.
	//
	// > **NOTE:** Use the `HEAD` method if you do not need to check the response body of your health probe.
	ProbeMethod pulumi.StringPtrInput `pulumi:"probeMethod"`
	// Protocol scheme to use for the Health Probe. Possible values are `Http` and `Https`. Defaults to `Http`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (FrontdoorBackendPoolHealthProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorBackendPoolHealthProbe)(nil)).Elem()
}

func (i FrontdoorBackendPoolHealthProbeArgs) ToFrontdoorBackendPoolHealthProbeOutput() FrontdoorBackendPoolHealthProbeOutput {
	return i.ToFrontdoorBackendPoolHealthProbeOutputWithContext(context.Background())
}

func (i FrontdoorBackendPoolHealthProbeArgs) ToFrontdoorBackendPoolHealthProbeOutputWithContext(ctx context.Context) FrontdoorBackendPoolHealthProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorBackendPoolHealthProbeOutput)
}

func (i FrontdoorBackendPoolHealthProbeArgs) ToOutput(ctx context.Context) pulumix.Output[FrontdoorBackendPoolHealthProbe] {
	return pulumix.Output[FrontdoorBackendPoolHealthProbe]{
		OutputState: i.ToFrontdoorBackendPoolHealthProbeOutputWithContext(ctx).OutputState,
	}
}

// FrontdoorBackendPoolHealthProbeArrayInput is an input type that accepts FrontdoorBackendPoolHealthProbeArray and FrontdoorBackendPoolHealthProbeArrayOutput values.
// You can construct a concrete instance of `FrontdoorBackendPoolHealthProbeArrayInput` via:
//
//	FrontdoorBackendPoolHealthProbeArray{ FrontdoorBackendPoolHealthProbeArgs{...} }
type FrontdoorBackendPoolHealthProbeArrayInput interface {
	pulumi.Input

	ToFrontdoorBackendPoolHealthProbeArrayOutput() FrontdoorBackendPoolHealthProbeArrayOutput
	ToFrontdoorBackendPoolHealthProbeArrayOutputWithContext(context.Context) FrontdoorBackendPoolHealthProbeArrayOutput
}

type FrontdoorBackendPoolHealthProbeArray []FrontdoorBackendPoolHealthProbeInput

func (FrontdoorBackendPoolHealthProbeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorBackendPoolHealthProbe)(nil)).Elem()
}

func (i FrontdoorBackendPoolHealthProbeArray) ToFrontdoorBackendPoolHealthProbeArrayOutput() FrontdoorBackendPoolHealthProbeArrayOutput {
	return i.ToFrontdoorBackendPoolHealthProbeArrayOutputWithContext(context.Background())
}

func (i FrontdoorBackendPoolHealthProbeArray) ToFrontdoorBackendPoolHealthProbeArrayOutputWithContext(ctx context.Context) FrontdoorBackendPoolHealthProbeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorBackendPoolHealthProbeArrayOutput)
}

func (i FrontdoorBackendPoolHealthProbeArray) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorBackendPoolHealthProbe] {
	return pulumix.Output[[]FrontdoorBackendPoolHealthProbe]{
		OutputState: i.ToFrontdoorBackendPoolHealthProbeArrayOutputWithContext(ctx).OutputState,
	}
}

type FrontdoorBackendPoolHealthProbeOutput struct{ *pulumi.OutputState }

func (FrontdoorBackendPoolHealthProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorBackendPoolHealthProbe)(nil)).Elem()
}

func (o FrontdoorBackendPoolHealthProbeOutput) ToFrontdoorBackendPoolHealthProbeOutput() FrontdoorBackendPoolHealthProbeOutput {
	return o
}

func (o FrontdoorBackendPoolHealthProbeOutput) ToFrontdoorBackendPoolHealthProbeOutputWithContext(ctx context.Context) FrontdoorBackendPoolHealthProbeOutput {
	return o
}

func (o FrontdoorBackendPoolHealthProbeOutput) ToOutput(ctx context.Context) pulumix.Output[FrontdoorBackendPoolHealthProbe] {
	return pulumix.Output[FrontdoorBackendPoolHealthProbe]{
		OutputState: o.OutputState,
	}
}

// Is this health probe enabled? Defaults to `true`.
func (o FrontdoorBackendPoolHealthProbeOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolHealthProbe) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The ID of the FrontDoor.
func (o FrontdoorBackendPoolHealthProbeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolHealthProbe) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The number of seconds between each Health Probe. Defaults to `120`.
func (o FrontdoorBackendPoolHealthProbeOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolHealthProbe) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

// Specifies the name of the Health Probe.
func (o FrontdoorBackendPoolHealthProbeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolHealthProbe) string { return v.Name }).(pulumi.StringOutput)
}

// The path to use for the Health Probe. Default is `/`.
func (o FrontdoorBackendPoolHealthProbeOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolHealthProbe) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Specifies HTTP method the health probe uses when querying the backend pool instances. Possible values include: `GET` and `HEAD`. Defaults to `GET`.
//
// > **NOTE:** Use the `HEAD` method if you do not need to check the response body of your health probe.
func (o FrontdoorBackendPoolHealthProbeOutput) ProbeMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolHealthProbe) *string { return v.ProbeMethod }).(pulumi.StringPtrOutput)
}

// Protocol scheme to use for the Health Probe. Possible values are `Http` and `Https`. Defaults to `Http`.
func (o FrontdoorBackendPoolHealthProbeOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolHealthProbe) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type FrontdoorBackendPoolHealthProbeArrayOutput struct{ *pulumi.OutputState }

func (FrontdoorBackendPoolHealthProbeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorBackendPoolHealthProbe)(nil)).Elem()
}

func (o FrontdoorBackendPoolHealthProbeArrayOutput) ToFrontdoorBackendPoolHealthProbeArrayOutput() FrontdoorBackendPoolHealthProbeArrayOutput {
	return o
}

func (o FrontdoorBackendPoolHealthProbeArrayOutput) ToFrontdoorBackendPoolHealthProbeArrayOutputWithContext(ctx context.Context) FrontdoorBackendPoolHealthProbeArrayOutput {
	return o
}

func (o FrontdoorBackendPoolHealthProbeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorBackendPoolHealthProbe] {
	return pulumix.Output[[]FrontdoorBackendPoolHealthProbe]{
		OutputState: o.OutputState,
	}
}

func (o FrontdoorBackendPoolHealthProbeArrayOutput) Index(i pulumi.IntInput) FrontdoorBackendPoolHealthProbeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontdoorBackendPoolHealthProbe {
		return vs[0].([]FrontdoorBackendPoolHealthProbe)[vs[1].(int)]
	}).(FrontdoorBackendPoolHealthProbeOutput)
}

type FrontdoorBackendPoolLoadBalancing struct {
	// The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to `0`.
	AdditionalLatencyMilliseconds *int `pulumi:"additionalLatencyMilliseconds"`
	// The ID of the FrontDoor.
	Id *string `pulumi:"id"`
	// Specifies the name of the Load Balancer.
	Name string `pulumi:"name"`
	// The number of samples to consider for load balancing decisions. Defaults to `4`.
	SampleSize *int `pulumi:"sampleSize"`
	// The number of samples within the sample period that must succeed. Defaults to `2`.
	SuccessfulSamplesRequired *int `pulumi:"successfulSamplesRequired"`
}

// FrontdoorBackendPoolLoadBalancingInput is an input type that accepts FrontdoorBackendPoolLoadBalancingArgs and FrontdoorBackendPoolLoadBalancingOutput values.
// You can construct a concrete instance of `FrontdoorBackendPoolLoadBalancingInput` via:
//
//	FrontdoorBackendPoolLoadBalancingArgs{...}
type FrontdoorBackendPoolLoadBalancingInput interface {
	pulumi.Input

	ToFrontdoorBackendPoolLoadBalancingOutput() FrontdoorBackendPoolLoadBalancingOutput
	ToFrontdoorBackendPoolLoadBalancingOutputWithContext(context.Context) FrontdoorBackendPoolLoadBalancingOutput
}

type FrontdoorBackendPoolLoadBalancingArgs struct {
	// The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to `0`.
	AdditionalLatencyMilliseconds pulumi.IntPtrInput `pulumi:"additionalLatencyMilliseconds"`
	// The ID of the FrontDoor.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the name of the Load Balancer.
	Name pulumi.StringInput `pulumi:"name"`
	// The number of samples to consider for load balancing decisions. Defaults to `4`.
	SampleSize pulumi.IntPtrInput `pulumi:"sampleSize"`
	// The number of samples within the sample period that must succeed. Defaults to `2`.
	SuccessfulSamplesRequired pulumi.IntPtrInput `pulumi:"successfulSamplesRequired"`
}

func (FrontdoorBackendPoolLoadBalancingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorBackendPoolLoadBalancing)(nil)).Elem()
}

func (i FrontdoorBackendPoolLoadBalancingArgs) ToFrontdoorBackendPoolLoadBalancingOutput() FrontdoorBackendPoolLoadBalancingOutput {
	return i.ToFrontdoorBackendPoolLoadBalancingOutputWithContext(context.Background())
}

func (i FrontdoorBackendPoolLoadBalancingArgs) ToFrontdoorBackendPoolLoadBalancingOutputWithContext(ctx context.Context) FrontdoorBackendPoolLoadBalancingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorBackendPoolLoadBalancingOutput)
}

func (i FrontdoorBackendPoolLoadBalancingArgs) ToOutput(ctx context.Context) pulumix.Output[FrontdoorBackendPoolLoadBalancing] {
	return pulumix.Output[FrontdoorBackendPoolLoadBalancing]{
		OutputState: i.ToFrontdoorBackendPoolLoadBalancingOutputWithContext(ctx).OutputState,
	}
}

// FrontdoorBackendPoolLoadBalancingArrayInput is an input type that accepts FrontdoorBackendPoolLoadBalancingArray and FrontdoorBackendPoolLoadBalancingArrayOutput values.
// You can construct a concrete instance of `FrontdoorBackendPoolLoadBalancingArrayInput` via:
//
//	FrontdoorBackendPoolLoadBalancingArray{ FrontdoorBackendPoolLoadBalancingArgs{...} }
type FrontdoorBackendPoolLoadBalancingArrayInput interface {
	pulumi.Input

	ToFrontdoorBackendPoolLoadBalancingArrayOutput() FrontdoorBackendPoolLoadBalancingArrayOutput
	ToFrontdoorBackendPoolLoadBalancingArrayOutputWithContext(context.Context) FrontdoorBackendPoolLoadBalancingArrayOutput
}

type FrontdoorBackendPoolLoadBalancingArray []FrontdoorBackendPoolLoadBalancingInput

func (FrontdoorBackendPoolLoadBalancingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorBackendPoolLoadBalancing)(nil)).Elem()
}

func (i FrontdoorBackendPoolLoadBalancingArray) ToFrontdoorBackendPoolLoadBalancingArrayOutput() FrontdoorBackendPoolLoadBalancingArrayOutput {
	return i.ToFrontdoorBackendPoolLoadBalancingArrayOutputWithContext(context.Background())
}

func (i FrontdoorBackendPoolLoadBalancingArray) ToFrontdoorBackendPoolLoadBalancingArrayOutputWithContext(ctx context.Context) FrontdoorBackendPoolLoadBalancingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorBackendPoolLoadBalancingArrayOutput)
}

func (i FrontdoorBackendPoolLoadBalancingArray) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorBackendPoolLoadBalancing] {
	return pulumix.Output[[]FrontdoorBackendPoolLoadBalancing]{
		OutputState: i.ToFrontdoorBackendPoolLoadBalancingArrayOutputWithContext(ctx).OutputState,
	}
}

type FrontdoorBackendPoolLoadBalancingOutput struct{ *pulumi.OutputState }

func (FrontdoorBackendPoolLoadBalancingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorBackendPoolLoadBalancing)(nil)).Elem()
}

func (o FrontdoorBackendPoolLoadBalancingOutput) ToFrontdoorBackendPoolLoadBalancingOutput() FrontdoorBackendPoolLoadBalancingOutput {
	return o
}

func (o FrontdoorBackendPoolLoadBalancingOutput) ToFrontdoorBackendPoolLoadBalancingOutputWithContext(ctx context.Context) FrontdoorBackendPoolLoadBalancingOutput {
	return o
}

func (o FrontdoorBackendPoolLoadBalancingOutput) ToOutput(ctx context.Context) pulumix.Output[FrontdoorBackendPoolLoadBalancing] {
	return pulumix.Output[FrontdoorBackendPoolLoadBalancing]{
		OutputState: o.OutputState,
	}
}

// The additional latency in milliseconds for probes to fall into the lowest latency bucket. Defaults to `0`.
func (o FrontdoorBackendPoolLoadBalancingOutput) AdditionalLatencyMilliseconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolLoadBalancing) *int { return v.AdditionalLatencyMilliseconds }).(pulumi.IntPtrOutput)
}

// The ID of the FrontDoor.
func (o FrontdoorBackendPoolLoadBalancingOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolLoadBalancing) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Load Balancer.
func (o FrontdoorBackendPoolLoadBalancingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolLoadBalancing) string { return v.Name }).(pulumi.StringOutput)
}

// The number of samples to consider for load balancing decisions. Defaults to `4`.
func (o FrontdoorBackendPoolLoadBalancingOutput) SampleSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolLoadBalancing) *int { return v.SampleSize }).(pulumi.IntPtrOutput)
}

// The number of samples within the sample period that must succeed. Defaults to `2`.
func (o FrontdoorBackendPoolLoadBalancingOutput) SuccessfulSamplesRequired() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolLoadBalancing) *int { return v.SuccessfulSamplesRequired }).(pulumi.IntPtrOutput)
}

type FrontdoorBackendPoolLoadBalancingArrayOutput struct{ *pulumi.OutputState }

func (FrontdoorBackendPoolLoadBalancingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorBackendPoolLoadBalancing)(nil)).Elem()
}

func (o FrontdoorBackendPoolLoadBalancingArrayOutput) ToFrontdoorBackendPoolLoadBalancingArrayOutput() FrontdoorBackendPoolLoadBalancingArrayOutput {
	return o
}

func (o FrontdoorBackendPoolLoadBalancingArrayOutput) ToFrontdoorBackendPoolLoadBalancingArrayOutputWithContext(ctx context.Context) FrontdoorBackendPoolLoadBalancingArrayOutput {
	return o
}

func (o FrontdoorBackendPoolLoadBalancingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorBackendPoolLoadBalancing] {
	return pulumix.Output[[]FrontdoorBackendPoolLoadBalancing]{
		OutputState: o.OutputState,
	}
}

func (o FrontdoorBackendPoolLoadBalancingArrayOutput) Index(i pulumi.IntInput) FrontdoorBackendPoolLoadBalancingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontdoorBackendPoolLoadBalancing {
		return vs[0].([]FrontdoorBackendPoolLoadBalancing)[vs[1].(int)]
	}).(FrontdoorBackendPoolLoadBalancingOutput)
}

type FrontdoorBackendPoolSetting struct {
	// Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between `0` - `240`. Defaults to `60`.
	BackendPoolsSendReceiveTimeoutSeconds *int `pulumi:"backendPoolsSendReceiveTimeoutSeconds"`
	// Enforce certificate name check on `HTTPS` requests to all backend pools, this setting will have no effect on `HTTP` requests. Permitted values are `true` or `false`.
	//
	// > **NOTE:** `backendPoolsSendReceiveTimeoutSeconds` and `enforceBackendPoolsCertificateNameCheck` apply to all backend pools.
	EnforceBackendPoolsCertificateNameCheck bool `pulumi:"enforceBackendPoolsCertificateNameCheck"`
}

// FrontdoorBackendPoolSettingInput is an input type that accepts FrontdoorBackendPoolSettingArgs and FrontdoorBackendPoolSettingOutput values.
// You can construct a concrete instance of `FrontdoorBackendPoolSettingInput` via:
//
//	FrontdoorBackendPoolSettingArgs{...}
type FrontdoorBackendPoolSettingInput interface {
	pulumi.Input

	ToFrontdoorBackendPoolSettingOutput() FrontdoorBackendPoolSettingOutput
	ToFrontdoorBackendPoolSettingOutputWithContext(context.Context) FrontdoorBackendPoolSettingOutput
}

type FrontdoorBackendPoolSettingArgs struct {
	// Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between `0` - `240`. Defaults to `60`.
	BackendPoolsSendReceiveTimeoutSeconds pulumi.IntPtrInput `pulumi:"backendPoolsSendReceiveTimeoutSeconds"`
	// Enforce certificate name check on `HTTPS` requests to all backend pools, this setting will have no effect on `HTTP` requests. Permitted values are `true` or `false`.
	//
	// > **NOTE:** `backendPoolsSendReceiveTimeoutSeconds` and `enforceBackendPoolsCertificateNameCheck` apply to all backend pools.
	EnforceBackendPoolsCertificateNameCheck pulumi.BoolInput `pulumi:"enforceBackendPoolsCertificateNameCheck"`
}

func (FrontdoorBackendPoolSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorBackendPoolSetting)(nil)).Elem()
}

func (i FrontdoorBackendPoolSettingArgs) ToFrontdoorBackendPoolSettingOutput() FrontdoorBackendPoolSettingOutput {
	return i.ToFrontdoorBackendPoolSettingOutputWithContext(context.Background())
}

func (i FrontdoorBackendPoolSettingArgs) ToFrontdoorBackendPoolSettingOutputWithContext(ctx context.Context) FrontdoorBackendPoolSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorBackendPoolSettingOutput)
}

func (i FrontdoorBackendPoolSettingArgs) ToOutput(ctx context.Context) pulumix.Output[FrontdoorBackendPoolSetting] {
	return pulumix.Output[FrontdoorBackendPoolSetting]{
		OutputState: i.ToFrontdoorBackendPoolSettingOutputWithContext(ctx).OutputState,
	}
}

// FrontdoorBackendPoolSettingArrayInput is an input type that accepts FrontdoorBackendPoolSettingArray and FrontdoorBackendPoolSettingArrayOutput values.
// You can construct a concrete instance of `FrontdoorBackendPoolSettingArrayInput` via:
//
//	FrontdoorBackendPoolSettingArray{ FrontdoorBackendPoolSettingArgs{...} }
type FrontdoorBackendPoolSettingArrayInput interface {
	pulumi.Input

	ToFrontdoorBackendPoolSettingArrayOutput() FrontdoorBackendPoolSettingArrayOutput
	ToFrontdoorBackendPoolSettingArrayOutputWithContext(context.Context) FrontdoorBackendPoolSettingArrayOutput
}

type FrontdoorBackendPoolSettingArray []FrontdoorBackendPoolSettingInput

func (FrontdoorBackendPoolSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorBackendPoolSetting)(nil)).Elem()
}

func (i FrontdoorBackendPoolSettingArray) ToFrontdoorBackendPoolSettingArrayOutput() FrontdoorBackendPoolSettingArrayOutput {
	return i.ToFrontdoorBackendPoolSettingArrayOutputWithContext(context.Background())
}

func (i FrontdoorBackendPoolSettingArray) ToFrontdoorBackendPoolSettingArrayOutputWithContext(ctx context.Context) FrontdoorBackendPoolSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorBackendPoolSettingArrayOutput)
}

func (i FrontdoorBackendPoolSettingArray) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorBackendPoolSetting] {
	return pulumix.Output[[]FrontdoorBackendPoolSetting]{
		OutputState: i.ToFrontdoorBackendPoolSettingArrayOutputWithContext(ctx).OutputState,
	}
}

type FrontdoorBackendPoolSettingOutput struct{ *pulumi.OutputState }

func (FrontdoorBackendPoolSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorBackendPoolSetting)(nil)).Elem()
}

func (o FrontdoorBackendPoolSettingOutput) ToFrontdoorBackendPoolSettingOutput() FrontdoorBackendPoolSettingOutput {
	return o
}

func (o FrontdoorBackendPoolSettingOutput) ToFrontdoorBackendPoolSettingOutputWithContext(ctx context.Context) FrontdoorBackendPoolSettingOutput {
	return o
}

func (o FrontdoorBackendPoolSettingOutput) ToOutput(ctx context.Context) pulumix.Output[FrontdoorBackendPoolSetting] {
	return pulumix.Output[FrontdoorBackendPoolSetting]{
		OutputState: o.OutputState,
	}
}

// Specifies the send and receive timeout on forwarding request to the backend. When the timeout is reached, the request fails and returns. Possible values are between `0` - `240`. Defaults to `60`.
func (o FrontdoorBackendPoolSettingOutput) BackendPoolsSendReceiveTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolSetting) *int { return v.BackendPoolsSendReceiveTimeoutSeconds }).(pulumi.IntPtrOutput)
}

// Enforce certificate name check on `HTTPS` requests to all backend pools, this setting will have no effect on `HTTP` requests. Permitted values are `true` or `false`.
//
// > **NOTE:** `backendPoolsSendReceiveTimeoutSeconds` and `enforceBackendPoolsCertificateNameCheck` apply to all backend pools.
func (o FrontdoorBackendPoolSettingOutput) EnforceBackendPoolsCertificateNameCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v FrontdoorBackendPoolSetting) bool { return v.EnforceBackendPoolsCertificateNameCheck }).(pulumi.BoolOutput)
}

type FrontdoorBackendPoolSettingArrayOutput struct{ *pulumi.OutputState }

func (FrontdoorBackendPoolSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorBackendPoolSetting)(nil)).Elem()
}

func (o FrontdoorBackendPoolSettingArrayOutput) ToFrontdoorBackendPoolSettingArrayOutput() FrontdoorBackendPoolSettingArrayOutput {
	return o
}

func (o FrontdoorBackendPoolSettingArrayOutput) ToFrontdoorBackendPoolSettingArrayOutputWithContext(ctx context.Context) FrontdoorBackendPoolSettingArrayOutput {
	return o
}

func (o FrontdoorBackendPoolSettingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorBackendPoolSetting] {
	return pulumix.Output[[]FrontdoorBackendPoolSetting]{
		OutputState: o.OutputState,
	}
}

func (o FrontdoorBackendPoolSettingArrayOutput) Index(i pulumi.IntInput) FrontdoorBackendPoolSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontdoorBackendPoolSetting {
		return vs[0].([]FrontdoorBackendPoolSetting)[vs[1].(int)]
	}).(FrontdoorBackendPoolSettingOutput)
}

type FrontdoorExplicitResourceOrder struct {
	BackendPoolHealthProbeIds   []string `pulumi:"backendPoolHealthProbeIds"`
	BackendPoolIds              []string `pulumi:"backendPoolIds"`
	BackendPoolLoadBalancingIds []string `pulumi:"backendPoolLoadBalancingIds"`
	FrontendEndpointIds         []string `pulumi:"frontendEndpointIds"`
	RoutingRuleIds              []string `pulumi:"routingRuleIds"`
}

// FrontdoorExplicitResourceOrderInput is an input type that accepts FrontdoorExplicitResourceOrderArgs and FrontdoorExplicitResourceOrderOutput values.
// You can construct a concrete instance of `FrontdoorExplicitResourceOrderInput` via:
//
//	FrontdoorExplicitResourceOrderArgs{...}
type FrontdoorExplicitResourceOrderInput interface {
	pulumi.Input

	ToFrontdoorExplicitResourceOrderOutput() FrontdoorExplicitResourceOrderOutput
	ToFrontdoorExplicitResourceOrderOutputWithContext(context.Context) FrontdoorExplicitResourceOrderOutput
}

type FrontdoorExplicitResourceOrderArgs struct {
	BackendPoolHealthProbeIds   pulumi.StringArrayInput `pulumi:"backendPoolHealthProbeIds"`
	BackendPoolIds              pulumi.StringArrayInput `pulumi:"backendPoolIds"`
	BackendPoolLoadBalancingIds pulumi.StringArrayInput `pulumi:"backendPoolLoadBalancingIds"`
	FrontendEndpointIds         pulumi.StringArrayInput `pulumi:"frontendEndpointIds"`
	RoutingRuleIds              pulumi.StringArrayInput `pulumi:"routingRuleIds"`
}

func (FrontdoorExplicitResourceOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorExplicitResourceOrder)(nil)).Elem()
}

func (i FrontdoorExplicitResourceOrderArgs) ToFrontdoorExplicitResourceOrderOutput() FrontdoorExplicitResourceOrderOutput {
	return i.ToFrontdoorExplicitResourceOrderOutputWithContext(context.Background())
}

func (i FrontdoorExplicitResourceOrderArgs) ToFrontdoorExplicitResourceOrderOutputWithContext(ctx context.Context) FrontdoorExplicitResourceOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorExplicitResourceOrderOutput)
}

func (i FrontdoorExplicitResourceOrderArgs) ToOutput(ctx context.Context) pulumix.Output[FrontdoorExplicitResourceOrder] {
	return pulumix.Output[FrontdoorExplicitResourceOrder]{
		OutputState: i.ToFrontdoorExplicitResourceOrderOutputWithContext(ctx).OutputState,
	}
}

// FrontdoorExplicitResourceOrderArrayInput is an input type that accepts FrontdoorExplicitResourceOrderArray and FrontdoorExplicitResourceOrderArrayOutput values.
// You can construct a concrete instance of `FrontdoorExplicitResourceOrderArrayInput` via:
//
//	FrontdoorExplicitResourceOrderArray{ FrontdoorExplicitResourceOrderArgs{...} }
type FrontdoorExplicitResourceOrderArrayInput interface {
	pulumi.Input

	ToFrontdoorExplicitResourceOrderArrayOutput() FrontdoorExplicitResourceOrderArrayOutput
	ToFrontdoorExplicitResourceOrderArrayOutputWithContext(context.Context) FrontdoorExplicitResourceOrderArrayOutput
}

type FrontdoorExplicitResourceOrderArray []FrontdoorExplicitResourceOrderInput

func (FrontdoorExplicitResourceOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorExplicitResourceOrder)(nil)).Elem()
}

func (i FrontdoorExplicitResourceOrderArray) ToFrontdoorExplicitResourceOrderArrayOutput() FrontdoorExplicitResourceOrderArrayOutput {
	return i.ToFrontdoorExplicitResourceOrderArrayOutputWithContext(context.Background())
}

func (i FrontdoorExplicitResourceOrderArray) ToFrontdoorExplicitResourceOrderArrayOutputWithContext(ctx context.Context) FrontdoorExplicitResourceOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorExplicitResourceOrderArrayOutput)
}

func (i FrontdoorExplicitResourceOrderArray) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorExplicitResourceOrder] {
	return pulumix.Output[[]FrontdoorExplicitResourceOrder]{
		OutputState: i.ToFrontdoorExplicitResourceOrderArrayOutputWithContext(ctx).OutputState,
	}
}

type FrontdoorExplicitResourceOrderOutput struct{ *pulumi.OutputState }

func (FrontdoorExplicitResourceOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorExplicitResourceOrder)(nil)).Elem()
}

func (o FrontdoorExplicitResourceOrderOutput) ToFrontdoorExplicitResourceOrderOutput() FrontdoorExplicitResourceOrderOutput {
	return o
}

func (o FrontdoorExplicitResourceOrderOutput) ToFrontdoorExplicitResourceOrderOutputWithContext(ctx context.Context) FrontdoorExplicitResourceOrderOutput {
	return o
}

func (o FrontdoorExplicitResourceOrderOutput) ToOutput(ctx context.Context) pulumix.Output[FrontdoorExplicitResourceOrder] {
	return pulumix.Output[FrontdoorExplicitResourceOrder]{
		OutputState: o.OutputState,
	}
}

func (o FrontdoorExplicitResourceOrderOutput) BackendPoolHealthProbeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrontdoorExplicitResourceOrder) []string { return v.BackendPoolHealthProbeIds }).(pulumi.StringArrayOutput)
}

func (o FrontdoorExplicitResourceOrderOutput) BackendPoolIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrontdoorExplicitResourceOrder) []string { return v.BackendPoolIds }).(pulumi.StringArrayOutput)
}

func (o FrontdoorExplicitResourceOrderOutput) BackendPoolLoadBalancingIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrontdoorExplicitResourceOrder) []string { return v.BackendPoolLoadBalancingIds }).(pulumi.StringArrayOutput)
}

func (o FrontdoorExplicitResourceOrderOutput) FrontendEndpointIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrontdoorExplicitResourceOrder) []string { return v.FrontendEndpointIds }).(pulumi.StringArrayOutput)
}

func (o FrontdoorExplicitResourceOrderOutput) RoutingRuleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrontdoorExplicitResourceOrder) []string { return v.RoutingRuleIds }).(pulumi.StringArrayOutput)
}

type FrontdoorExplicitResourceOrderArrayOutput struct{ *pulumi.OutputState }

func (FrontdoorExplicitResourceOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorExplicitResourceOrder)(nil)).Elem()
}

func (o FrontdoorExplicitResourceOrderArrayOutput) ToFrontdoorExplicitResourceOrderArrayOutput() FrontdoorExplicitResourceOrderArrayOutput {
	return o
}

func (o FrontdoorExplicitResourceOrderArrayOutput) ToFrontdoorExplicitResourceOrderArrayOutputWithContext(ctx context.Context) FrontdoorExplicitResourceOrderArrayOutput {
	return o
}

func (o FrontdoorExplicitResourceOrderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorExplicitResourceOrder] {
	return pulumix.Output[[]FrontdoorExplicitResourceOrder]{
		OutputState: o.OutputState,
	}
}

func (o FrontdoorExplicitResourceOrderArrayOutput) Index(i pulumi.IntInput) FrontdoorExplicitResourceOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontdoorExplicitResourceOrder {
		return vs[0].([]FrontdoorExplicitResourceOrder)[vs[1].(int)]
	}).(FrontdoorExplicitResourceOrderOutput)
}

type FrontdoorFrontendEndpoint struct {
	// Specifies the host name of the `frontendEndpoint`. Must be a domain name. In order to use a name.azurefd.net domain, the name value must match the Front Door name.
	HostName string `pulumi:"hostName"`
	// The ID of the FrontDoor.
	Id *string `pulumi:"id"`
	// Specifies the name of the `frontendEndpoint`.
	Name string `pulumi:"name"`
	// Whether to allow session affinity on this host. Valid options are `true` or `false` Defaults to `false`.
	SessionAffinityEnabled *bool `pulumi:"sessionAffinityEnabled"`
	// The TTL to use in seconds for session affinity, if applicable. Defaults to `0`.
	SessionAffinityTtlSeconds *int `pulumi:"sessionAffinityTtlSeconds"`
	// Defines the Web Application Firewall policy `ID` for each host.
	WebApplicationFirewallPolicyLinkId *string `pulumi:"webApplicationFirewallPolicyLinkId"`
}

// FrontdoorFrontendEndpointInput is an input type that accepts FrontdoorFrontendEndpointArgs and FrontdoorFrontendEndpointOutput values.
// You can construct a concrete instance of `FrontdoorFrontendEndpointInput` via:
//
//	FrontdoorFrontendEndpointArgs{...}
type FrontdoorFrontendEndpointInput interface {
	pulumi.Input

	ToFrontdoorFrontendEndpointOutput() FrontdoorFrontendEndpointOutput
	ToFrontdoorFrontendEndpointOutputWithContext(context.Context) FrontdoorFrontendEndpointOutput
}

type FrontdoorFrontendEndpointArgs struct {
	// Specifies the host name of the `frontendEndpoint`. Must be a domain name. In order to use a name.azurefd.net domain, the name value must match the Front Door name.
	HostName pulumi.StringInput `pulumi:"hostName"`
	// The ID of the FrontDoor.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the name of the `frontendEndpoint`.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether to allow session affinity on this host. Valid options are `true` or `false` Defaults to `false`.
	SessionAffinityEnabled pulumi.BoolPtrInput `pulumi:"sessionAffinityEnabled"`
	// The TTL to use in seconds for session affinity, if applicable. Defaults to `0`.
	SessionAffinityTtlSeconds pulumi.IntPtrInput `pulumi:"sessionAffinityTtlSeconds"`
	// Defines the Web Application Firewall policy `ID` for each host.
	WebApplicationFirewallPolicyLinkId pulumi.StringPtrInput `pulumi:"webApplicationFirewallPolicyLinkId"`
}

func (FrontdoorFrontendEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorFrontendEndpoint)(nil)).Elem()
}

func (i FrontdoorFrontendEndpointArgs) ToFrontdoorFrontendEndpointOutput() FrontdoorFrontendEndpointOutput {
	return i.ToFrontdoorFrontendEndpointOutputWithContext(context.Background())
}

func (i FrontdoorFrontendEndpointArgs) ToFrontdoorFrontendEndpointOutputWithContext(ctx context.Context) FrontdoorFrontendEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorFrontendEndpointOutput)
}

func (i FrontdoorFrontendEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[FrontdoorFrontendEndpoint] {
	return pulumix.Output[FrontdoorFrontendEndpoint]{
		OutputState: i.ToFrontdoorFrontendEndpointOutputWithContext(ctx).OutputState,
	}
}

// FrontdoorFrontendEndpointArrayInput is an input type that accepts FrontdoorFrontendEndpointArray and FrontdoorFrontendEndpointArrayOutput values.
// You can construct a concrete instance of `FrontdoorFrontendEndpointArrayInput` via:
//
//	FrontdoorFrontendEndpointArray{ FrontdoorFrontendEndpointArgs{...} }
type FrontdoorFrontendEndpointArrayInput interface {
	pulumi.Input

	ToFrontdoorFrontendEndpointArrayOutput() FrontdoorFrontendEndpointArrayOutput
	ToFrontdoorFrontendEndpointArrayOutputWithContext(context.Context) FrontdoorFrontendEndpointArrayOutput
}

type FrontdoorFrontendEndpointArray []FrontdoorFrontendEndpointInput

func (FrontdoorFrontendEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorFrontendEndpoint)(nil)).Elem()
}

func (i FrontdoorFrontendEndpointArray) ToFrontdoorFrontendEndpointArrayOutput() FrontdoorFrontendEndpointArrayOutput {
	return i.ToFrontdoorFrontendEndpointArrayOutputWithContext(context.Background())
}

func (i FrontdoorFrontendEndpointArray) ToFrontdoorFrontendEndpointArrayOutputWithContext(ctx context.Context) FrontdoorFrontendEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorFrontendEndpointArrayOutput)
}

func (i FrontdoorFrontendEndpointArray) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorFrontendEndpoint] {
	return pulumix.Output[[]FrontdoorFrontendEndpoint]{
		OutputState: i.ToFrontdoorFrontendEndpointArrayOutputWithContext(ctx).OutputState,
	}
}

type FrontdoorFrontendEndpointOutput struct{ *pulumi.OutputState }

func (FrontdoorFrontendEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorFrontendEndpoint)(nil)).Elem()
}

func (o FrontdoorFrontendEndpointOutput) ToFrontdoorFrontendEndpointOutput() FrontdoorFrontendEndpointOutput {
	return o
}

func (o FrontdoorFrontendEndpointOutput) ToFrontdoorFrontendEndpointOutputWithContext(ctx context.Context) FrontdoorFrontendEndpointOutput {
	return o
}

func (o FrontdoorFrontendEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[FrontdoorFrontendEndpoint] {
	return pulumix.Output[FrontdoorFrontendEndpoint]{
		OutputState: o.OutputState,
	}
}

// Specifies the host name of the `frontendEndpoint`. Must be a domain name. In order to use a name.azurefd.net domain, the name value must match the Front Door name.
func (o FrontdoorFrontendEndpointOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v FrontdoorFrontendEndpoint) string { return v.HostName }).(pulumi.StringOutput)
}

// The ID of the FrontDoor.
func (o FrontdoorFrontendEndpointOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorFrontendEndpoint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the name of the `frontendEndpoint`.
func (o FrontdoorFrontendEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FrontdoorFrontendEndpoint) string { return v.Name }).(pulumi.StringOutput)
}

// Whether to allow session affinity on this host. Valid options are `true` or `false` Defaults to `false`.
func (o FrontdoorFrontendEndpointOutput) SessionAffinityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FrontdoorFrontendEndpoint) *bool { return v.SessionAffinityEnabled }).(pulumi.BoolPtrOutput)
}

// The TTL to use in seconds for session affinity, if applicable. Defaults to `0`.
func (o FrontdoorFrontendEndpointOutput) SessionAffinityTtlSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FrontdoorFrontendEndpoint) *int { return v.SessionAffinityTtlSeconds }).(pulumi.IntPtrOutput)
}

// Defines the Web Application Firewall policy `ID` for each host.
func (o FrontdoorFrontendEndpointOutput) WebApplicationFirewallPolicyLinkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorFrontendEndpoint) *string { return v.WebApplicationFirewallPolicyLinkId }).(pulumi.StringPtrOutput)
}

type FrontdoorFrontendEndpointArrayOutput struct{ *pulumi.OutputState }

func (FrontdoorFrontendEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorFrontendEndpoint)(nil)).Elem()
}

func (o FrontdoorFrontendEndpointArrayOutput) ToFrontdoorFrontendEndpointArrayOutput() FrontdoorFrontendEndpointArrayOutput {
	return o
}

func (o FrontdoorFrontendEndpointArrayOutput) ToFrontdoorFrontendEndpointArrayOutputWithContext(ctx context.Context) FrontdoorFrontendEndpointArrayOutput {
	return o
}

func (o FrontdoorFrontendEndpointArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorFrontendEndpoint] {
	return pulumix.Output[[]FrontdoorFrontendEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o FrontdoorFrontendEndpointArrayOutput) Index(i pulumi.IntInput) FrontdoorFrontendEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontdoorFrontendEndpoint {
		return vs[0].([]FrontdoorFrontendEndpoint)[vs[1].(int)]
	}).(FrontdoorFrontendEndpointOutput)
}

type FrontdoorRoutingRule struct {
	// Protocol schemes to match for the Backend Routing Rule. Possible values are `Http` and `Https`.
	AcceptedProtocols []string `pulumi:"acceptedProtocols"`
	// `Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// A `forwardingConfiguration` block as defined below.
	ForwardingConfiguration *FrontdoorRoutingRuleForwardingConfiguration `pulumi:"forwardingConfiguration"`
	// The names of the `frontendEndpoint` blocks within this resource to associate with this `routingRule`.
	FrontendEndpoints []string `pulumi:"frontendEndpoints"`
	// The ID of the FrontDoor.
	Id *string `pulumi:"id"`
	// Specifies the name of the Routing Rule.
	Name string `pulumi:"name"`
	// The route patterns for the Backend Routing Rule.
	PatternsToMatches []string `pulumi:"patternsToMatches"`
	// A `redirectConfiguration` block as defined below.
	RedirectConfiguration *FrontdoorRoutingRuleRedirectConfiguration `pulumi:"redirectConfiguration"`
}

// FrontdoorRoutingRuleInput is an input type that accepts FrontdoorRoutingRuleArgs and FrontdoorRoutingRuleOutput values.
// You can construct a concrete instance of `FrontdoorRoutingRuleInput` via:
//
//	FrontdoorRoutingRuleArgs{...}
type FrontdoorRoutingRuleInput interface {
	pulumi.Input

	ToFrontdoorRoutingRuleOutput() FrontdoorRoutingRuleOutput
	ToFrontdoorRoutingRuleOutputWithContext(context.Context) FrontdoorRoutingRuleOutput
}

type FrontdoorRoutingRuleArgs struct {
	// Protocol schemes to match for the Backend Routing Rule. Possible values are `Http` and `Https`.
	AcceptedProtocols pulumi.StringArrayInput `pulumi:"acceptedProtocols"`
	// `Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// A `forwardingConfiguration` block as defined below.
	ForwardingConfiguration FrontdoorRoutingRuleForwardingConfigurationPtrInput `pulumi:"forwardingConfiguration"`
	// The names of the `frontendEndpoint` blocks within this resource to associate with this `routingRule`.
	FrontendEndpoints pulumi.StringArrayInput `pulumi:"frontendEndpoints"`
	// The ID of the FrontDoor.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the name of the Routing Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The route patterns for the Backend Routing Rule.
	PatternsToMatches pulumi.StringArrayInput `pulumi:"patternsToMatches"`
	// A `redirectConfiguration` block as defined below.
	RedirectConfiguration FrontdoorRoutingRuleRedirectConfigurationPtrInput `pulumi:"redirectConfiguration"`
}

func (FrontdoorRoutingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorRoutingRule)(nil)).Elem()
}

func (i FrontdoorRoutingRuleArgs) ToFrontdoorRoutingRuleOutput() FrontdoorRoutingRuleOutput {
	return i.ToFrontdoorRoutingRuleOutputWithContext(context.Background())
}

func (i FrontdoorRoutingRuleArgs) ToFrontdoorRoutingRuleOutputWithContext(ctx context.Context) FrontdoorRoutingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorRoutingRuleOutput)
}

func (i FrontdoorRoutingRuleArgs) ToOutput(ctx context.Context) pulumix.Output[FrontdoorRoutingRule] {
	return pulumix.Output[FrontdoorRoutingRule]{
		OutputState: i.ToFrontdoorRoutingRuleOutputWithContext(ctx).OutputState,
	}
}

// FrontdoorRoutingRuleArrayInput is an input type that accepts FrontdoorRoutingRuleArray and FrontdoorRoutingRuleArrayOutput values.
// You can construct a concrete instance of `FrontdoorRoutingRuleArrayInput` via:
//
//	FrontdoorRoutingRuleArray{ FrontdoorRoutingRuleArgs{...} }
type FrontdoorRoutingRuleArrayInput interface {
	pulumi.Input

	ToFrontdoorRoutingRuleArrayOutput() FrontdoorRoutingRuleArrayOutput
	ToFrontdoorRoutingRuleArrayOutputWithContext(context.Context) FrontdoorRoutingRuleArrayOutput
}

type FrontdoorRoutingRuleArray []FrontdoorRoutingRuleInput

func (FrontdoorRoutingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorRoutingRule)(nil)).Elem()
}

func (i FrontdoorRoutingRuleArray) ToFrontdoorRoutingRuleArrayOutput() FrontdoorRoutingRuleArrayOutput {
	return i.ToFrontdoorRoutingRuleArrayOutputWithContext(context.Background())
}

func (i FrontdoorRoutingRuleArray) ToFrontdoorRoutingRuleArrayOutputWithContext(ctx context.Context) FrontdoorRoutingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorRoutingRuleArrayOutput)
}

func (i FrontdoorRoutingRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorRoutingRule] {
	return pulumix.Output[[]FrontdoorRoutingRule]{
		OutputState: i.ToFrontdoorRoutingRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type FrontdoorRoutingRuleOutput struct{ *pulumi.OutputState }

func (FrontdoorRoutingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorRoutingRule)(nil)).Elem()
}

func (o FrontdoorRoutingRuleOutput) ToFrontdoorRoutingRuleOutput() FrontdoorRoutingRuleOutput {
	return o
}

func (o FrontdoorRoutingRuleOutput) ToFrontdoorRoutingRuleOutputWithContext(ctx context.Context) FrontdoorRoutingRuleOutput {
	return o
}

func (o FrontdoorRoutingRuleOutput) ToOutput(ctx context.Context) pulumix.Output[FrontdoorRoutingRule] {
	return pulumix.Output[FrontdoorRoutingRule]{
		OutputState: o.OutputState,
	}
}

// Protocol schemes to match for the Backend Routing Rule. Possible values are `Http` and `Https`.
func (o FrontdoorRoutingRuleOutput) AcceptedProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrontdoorRoutingRule) []string { return v.AcceptedProtocols }).(pulumi.StringArrayOutput)
}

// `Enable` or `Disable` use of this Backend Routing Rule. Permitted values are `true` or `false`. Defaults to `true`.
func (o FrontdoorRoutingRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FrontdoorRoutingRule) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A `forwardingConfiguration` block as defined below.
func (o FrontdoorRoutingRuleOutput) ForwardingConfiguration() FrontdoorRoutingRuleForwardingConfigurationPtrOutput {
	return o.ApplyT(func(v FrontdoorRoutingRule) *FrontdoorRoutingRuleForwardingConfiguration {
		return v.ForwardingConfiguration
	}).(FrontdoorRoutingRuleForwardingConfigurationPtrOutput)
}

// The names of the `frontendEndpoint` blocks within this resource to associate with this `routingRule`.
func (o FrontdoorRoutingRuleOutput) FrontendEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrontdoorRoutingRule) []string { return v.FrontendEndpoints }).(pulumi.StringArrayOutput)
}

// The ID of the FrontDoor.
func (o FrontdoorRoutingRuleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorRoutingRule) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Routing Rule.
func (o FrontdoorRoutingRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FrontdoorRoutingRule) string { return v.Name }).(pulumi.StringOutput)
}

// The route patterns for the Backend Routing Rule.
func (o FrontdoorRoutingRuleOutput) PatternsToMatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrontdoorRoutingRule) []string { return v.PatternsToMatches }).(pulumi.StringArrayOutput)
}

// A `redirectConfiguration` block as defined below.
func (o FrontdoorRoutingRuleOutput) RedirectConfiguration() FrontdoorRoutingRuleRedirectConfigurationPtrOutput {
	return o.ApplyT(func(v FrontdoorRoutingRule) *FrontdoorRoutingRuleRedirectConfiguration {
		return v.RedirectConfiguration
	}).(FrontdoorRoutingRuleRedirectConfigurationPtrOutput)
}

type FrontdoorRoutingRuleArrayOutput struct{ *pulumi.OutputState }

func (FrontdoorRoutingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FrontdoorRoutingRule)(nil)).Elem()
}

func (o FrontdoorRoutingRuleArrayOutput) ToFrontdoorRoutingRuleArrayOutput() FrontdoorRoutingRuleArrayOutput {
	return o
}

func (o FrontdoorRoutingRuleArrayOutput) ToFrontdoorRoutingRuleArrayOutputWithContext(ctx context.Context) FrontdoorRoutingRuleArrayOutput {
	return o
}

func (o FrontdoorRoutingRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FrontdoorRoutingRule] {
	return pulumix.Output[[]FrontdoorRoutingRule]{
		OutputState: o.OutputState,
	}
}

func (o FrontdoorRoutingRuleArrayOutput) Index(i pulumi.IntInput) FrontdoorRoutingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FrontdoorRoutingRule {
		return vs[0].([]FrontdoorRoutingRule)[vs[1].(int)]
	}).(FrontdoorRoutingRuleOutput)
}

type FrontdoorRoutingRuleForwardingConfiguration struct {
	// Specifies the name of the Backend Pool to forward the incoming traffic to.
	BackendPoolName string `pulumi:"backendPoolName"`
	// Specify the minimum caching duration (in ISO8601 notation e.g. `P1DT2H` for 1 day and 2 hours). Needs to be greater than 0 and smaller than 365 days. `cacheDuration` works only in combination with `cacheEnabled` set to `true`.
	CacheDuration *string `pulumi:"cacheDuration"`
	// Specifies whether to Enable caching or not. Valid options are `true` or `false`. Defaults to `false`.
	CacheEnabled *bool `pulumi:"cacheEnabled"`
	// Defines cache behaviour in relation to query string parameters. Valid options are `StripAll`, `StripAllExcept`, `StripOnly` or `StripNone`. Defaults to `StripAll`.
	CacheQueryParameterStripDirective *string `pulumi:"cacheQueryParameterStripDirective"`
	// Specify query parameters (array). Works only in combination with `cacheQueryParameterStripDirective` set to `StripAllExcept` or `StripOnly`.
	CacheQueryParameters []string `pulumi:"cacheQueryParameters"`
	// Whether to use dynamic compression when caching. Valid options are `true` or `false`. Defaults to `false`.
	CacheUseDynamicCompression *bool `pulumi:"cacheUseDynamicCompression"`
	// Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behaviour preserves the URL path.
	CustomForwardingPath *string `pulumi:"customForwardingPath"`
	// Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `HttpsOnly`.
	ForwardingProtocol *string `pulumi:"forwardingProtocol"`
}

// FrontdoorRoutingRuleForwardingConfigurationInput is an input type that accepts FrontdoorRoutingRuleForwardingConfigurationArgs and FrontdoorRoutingRuleForwardingConfigurationOutput values.
// You can construct a concrete instance of `FrontdoorRoutingRuleForwardingConfigurationInput` via:
//
//	FrontdoorRoutingRuleForwardingConfigurationArgs{...}
type FrontdoorRoutingRuleForwardingConfigurationInput interface {
	pulumi.Input

	ToFrontdoorRoutingRuleForwardingConfigurationOutput() FrontdoorRoutingRuleForwardingConfigurationOutput
	ToFrontdoorRoutingRuleForwardingConfigurationOutputWithContext(context.Context) FrontdoorRoutingRuleForwardingConfigurationOutput
}

type FrontdoorRoutingRuleForwardingConfigurationArgs struct {
	// Specifies the name of the Backend Pool to forward the incoming traffic to.
	BackendPoolName pulumi.StringInput `pulumi:"backendPoolName"`
	// Specify the minimum caching duration (in ISO8601 notation e.g. `P1DT2H` for 1 day and 2 hours). Needs to be greater than 0 and smaller than 365 days. `cacheDuration` works only in combination with `cacheEnabled` set to `true`.
	CacheDuration pulumi.StringPtrInput `pulumi:"cacheDuration"`
	// Specifies whether to Enable caching or not. Valid options are `true` or `false`. Defaults to `false`.
	CacheEnabled pulumi.BoolPtrInput `pulumi:"cacheEnabled"`
	// Defines cache behaviour in relation to query string parameters. Valid options are `StripAll`, `StripAllExcept`, `StripOnly` or `StripNone`. Defaults to `StripAll`.
	CacheQueryParameterStripDirective pulumi.StringPtrInput `pulumi:"cacheQueryParameterStripDirective"`
	// Specify query parameters (array). Works only in combination with `cacheQueryParameterStripDirective` set to `StripAllExcept` or `StripOnly`.
	CacheQueryParameters pulumi.StringArrayInput `pulumi:"cacheQueryParameters"`
	// Whether to use dynamic compression when caching. Valid options are `true` or `false`. Defaults to `false`.
	CacheUseDynamicCompression pulumi.BoolPtrInput `pulumi:"cacheUseDynamicCompression"`
	// Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behaviour preserves the URL path.
	CustomForwardingPath pulumi.StringPtrInput `pulumi:"customForwardingPath"`
	// Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `HttpsOnly`.
	ForwardingProtocol pulumi.StringPtrInput `pulumi:"forwardingProtocol"`
}

func (FrontdoorRoutingRuleForwardingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorRoutingRuleForwardingConfiguration)(nil)).Elem()
}

func (i FrontdoorRoutingRuleForwardingConfigurationArgs) ToFrontdoorRoutingRuleForwardingConfigurationOutput() FrontdoorRoutingRuleForwardingConfigurationOutput {
	return i.ToFrontdoorRoutingRuleForwardingConfigurationOutputWithContext(context.Background())
}

func (i FrontdoorRoutingRuleForwardingConfigurationArgs) ToFrontdoorRoutingRuleForwardingConfigurationOutputWithContext(ctx context.Context) FrontdoorRoutingRuleForwardingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorRoutingRuleForwardingConfigurationOutput)
}

func (i FrontdoorRoutingRuleForwardingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[FrontdoorRoutingRuleForwardingConfiguration] {
	return pulumix.Output[FrontdoorRoutingRuleForwardingConfiguration]{
		OutputState: i.ToFrontdoorRoutingRuleForwardingConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i FrontdoorRoutingRuleForwardingConfigurationArgs) ToFrontdoorRoutingRuleForwardingConfigurationPtrOutput() FrontdoorRoutingRuleForwardingConfigurationPtrOutput {
	return i.ToFrontdoorRoutingRuleForwardingConfigurationPtrOutputWithContext(context.Background())
}

func (i FrontdoorRoutingRuleForwardingConfigurationArgs) ToFrontdoorRoutingRuleForwardingConfigurationPtrOutputWithContext(ctx context.Context) FrontdoorRoutingRuleForwardingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorRoutingRuleForwardingConfigurationOutput).ToFrontdoorRoutingRuleForwardingConfigurationPtrOutputWithContext(ctx)
}

// FrontdoorRoutingRuleForwardingConfigurationPtrInput is an input type that accepts FrontdoorRoutingRuleForwardingConfigurationArgs, FrontdoorRoutingRuleForwardingConfigurationPtr and FrontdoorRoutingRuleForwardingConfigurationPtrOutput values.
// You can construct a concrete instance of `FrontdoorRoutingRuleForwardingConfigurationPtrInput` via:
//
//	        FrontdoorRoutingRuleForwardingConfigurationArgs{...}
//
//	or:
//
//	        nil
type FrontdoorRoutingRuleForwardingConfigurationPtrInput interface {
	pulumi.Input

	ToFrontdoorRoutingRuleForwardingConfigurationPtrOutput() FrontdoorRoutingRuleForwardingConfigurationPtrOutput
	ToFrontdoorRoutingRuleForwardingConfigurationPtrOutputWithContext(context.Context) FrontdoorRoutingRuleForwardingConfigurationPtrOutput
}

type frontdoorRoutingRuleForwardingConfigurationPtrType FrontdoorRoutingRuleForwardingConfigurationArgs

func FrontdoorRoutingRuleForwardingConfigurationPtr(v *FrontdoorRoutingRuleForwardingConfigurationArgs) FrontdoorRoutingRuleForwardingConfigurationPtrInput {
	return (*frontdoorRoutingRuleForwardingConfigurationPtrType)(v)
}

func (*frontdoorRoutingRuleForwardingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontdoorRoutingRuleForwardingConfiguration)(nil)).Elem()
}

func (i *frontdoorRoutingRuleForwardingConfigurationPtrType) ToFrontdoorRoutingRuleForwardingConfigurationPtrOutput() FrontdoorRoutingRuleForwardingConfigurationPtrOutput {
	return i.ToFrontdoorRoutingRuleForwardingConfigurationPtrOutputWithContext(context.Background())
}

func (i *frontdoorRoutingRuleForwardingConfigurationPtrType) ToFrontdoorRoutingRuleForwardingConfigurationPtrOutputWithContext(ctx context.Context) FrontdoorRoutingRuleForwardingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorRoutingRuleForwardingConfigurationPtrOutput)
}

func (i *frontdoorRoutingRuleForwardingConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*FrontdoorRoutingRuleForwardingConfiguration] {
	return pulumix.Output[*FrontdoorRoutingRuleForwardingConfiguration]{
		OutputState: i.ToFrontdoorRoutingRuleForwardingConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type FrontdoorRoutingRuleForwardingConfigurationOutput struct{ *pulumi.OutputState }

func (FrontdoorRoutingRuleForwardingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorRoutingRuleForwardingConfiguration)(nil)).Elem()
}

func (o FrontdoorRoutingRuleForwardingConfigurationOutput) ToFrontdoorRoutingRuleForwardingConfigurationOutput() FrontdoorRoutingRuleForwardingConfigurationOutput {
	return o
}

func (o FrontdoorRoutingRuleForwardingConfigurationOutput) ToFrontdoorRoutingRuleForwardingConfigurationOutputWithContext(ctx context.Context) FrontdoorRoutingRuleForwardingConfigurationOutput {
	return o
}

func (o FrontdoorRoutingRuleForwardingConfigurationOutput) ToFrontdoorRoutingRuleForwardingConfigurationPtrOutput() FrontdoorRoutingRuleForwardingConfigurationPtrOutput {
	return o.ToFrontdoorRoutingRuleForwardingConfigurationPtrOutputWithContext(context.Background())
}

func (o FrontdoorRoutingRuleForwardingConfigurationOutput) ToFrontdoorRoutingRuleForwardingConfigurationPtrOutputWithContext(ctx context.Context) FrontdoorRoutingRuleForwardingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FrontdoorRoutingRuleForwardingConfiguration) *FrontdoorRoutingRuleForwardingConfiguration {
		return &v
	}).(FrontdoorRoutingRuleForwardingConfigurationPtrOutput)
}

func (o FrontdoorRoutingRuleForwardingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FrontdoorRoutingRuleForwardingConfiguration] {
	return pulumix.Output[FrontdoorRoutingRuleForwardingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Specifies the name of the Backend Pool to forward the incoming traffic to.
func (o FrontdoorRoutingRuleForwardingConfigurationOutput) BackendPoolName() pulumi.StringOutput {
	return o.ApplyT(func(v FrontdoorRoutingRuleForwardingConfiguration) string { return v.BackendPoolName }).(pulumi.StringOutput)
}

// Specify the minimum caching duration (in ISO8601 notation e.g. `P1DT2H` for 1 day and 2 hours). Needs to be greater than 0 and smaller than 365 days. `cacheDuration` works only in combination with `cacheEnabled` set to `true`.
func (o FrontdoorRoutingRuleForwardingConfigurationOutput) CacheDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorRoutingRuleForwardingConfiguration) *string { return v.CacheDuration }).(pulumi.StringPtrOutput)
}

// Specifies whether to Enable caching or not. Valid options are `true` or `false`. Defaults to `false`.
func (o FrontdoorRoutingRuleForwardingConfigurationOutput) CacheEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FrontdoorRoutingRuleForwardingConfiguration) *bool { return v.CacheEnabled }).(pulumi.BoolPtrOutput)
}

// Defines cache behaviour in relation to query string parameters. Valid options are `StripAll`, `StripAllExcept`, `StripOnly` or `StripNone`. Defaults to `StripAll`.
func (o FrontdoorRoutingRuleForwardingConfigurationOutput) CacheQueryParameterStripDirective() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorRoutingRuleForwardingConfiguration) *string {
		return v.CacheQueryParameterStripDirective
	}).(pulumi.StringPtrOutput)
}

// Specify query parameters (array). Works only in combination with `cacheQueryParameterStripDirective` set to `StripAllExcept` or `StripOnly`.
func (o FrontdoorRoutingRuleForwardingConfigurationOutput) CacheQueryParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FrontdoorRoutingRuleForwardingConfiguration) []string { return v.CacheQueryParameters }).(pulumi.StringArrayOutput)
}

// Whether to use dynamic compression when caching. Valid options are `true` or `false`. Defaults to `false`.
func (o FrontdoorRoutingRuleForwardingConfigurationOutput) CacheUseDynamicCompression() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FrontdoorRoutingRuleForwardingConfiguration) *bool { return v.CacheUseDynamicCompression }).(pulumi.BoolPtrOutput)
}

// Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behaviour preserves the URL path.
func (o FrontdoorRoutingRuleForwardingConfigurationOutput) CustomForwardingPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorRoutingRuleForwardingConfiguration) *string { return v.CustomForwardingPath }).(pulumi.StringPtrOutput)
}

// Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `HttpsOnly`.
func (o FrontdoorRoutingRuleForwardingConfigurationOutput) ForwardingProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorRoutingRuleForwardingConfiguration) *string { return v.ForwardingProtocol }).(pulumi.StringPtrOutput)
}

type FrontdoorRoutingRuleForwardingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FrontdoorRoutingRuleForwardingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontdoorRoutingRuleForwardingConfiguration)(nil)).Elem()
}

func (o FrontdoorRoutingRuleForwardingConfigurationPtrOutput) ToFrontdoorRoutingRuleForwardingConfigurationPtrOutput() FrontdoorRoutingRuleForwardingConfigurationPtrOutput {
	return o
}

func (o FrontdoorRoutingRuleForwardingConfigurationPtrOutput) ToFrontdoorRoutingRuleForwardingConfigurationPtrOutputWithContext(ctx context.Context) FrontdoorRoutingRuleForwardingConfigurationPtrOutput {
	return o
}

func (o FrontdoorRoutingRuleForwardingConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FrontdoorRoutingRuleForwardingConfiguration] {
	return pulumix.Output[*FrontdoorRoutingRuleForwardingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o FrontdoorRoutingRuleForwardingConfigurationPtrOutput) Elem() FrontdoorRoutingRuleForwardingConfigurationOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleForwardingConfiguration) FrontdoorRoutingRuleForwardingConfiguration {
		if v != nil {
			return *v
		}
		var ret FrontdoorRoutingRuleForwardingConfiguration
		return ret
	}).(FrontdoorRoutingRuleForwardingConfigurationOutput)
}

// Specifies the name of the Backend Pool to forward the incoming traffic to.
func (o FrontdoorRoutingRuleForwardingConfigurationPtrOutput) BackendPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleForwardingConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.BackendPoolName
	}).(pulumi.StringPtrOutput)
}

// Specify the minimum caching duration (in ISO8601 notation e.g. `P1DT2H` for 1 day and 2 hours). Needs to be greater than 0 and smaller than 365 days. `cacheDuration` works only in combination with `cacheEnabled` set to `true`.
func (o FrontdoorRoutingRuleForwardingConfigurationPtrOutput) CacheDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleForwardingConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CacheDuration
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to Enable caching or not. Valid options are `true` or `false`. Defaults to `false`.
func (o FrontdoorRoutingRuleForwardingConfigurationPtrOutput) CacheEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleForwardingConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.CacheEnabled
	}).(pulumi.BoolPtrOutput)
}

// Defines cache behaviour in relation to query string parameters. Valid options are `StripAll`, `StripAllExcept`, `StripOnly` or `StripNone`. Defaults to `StripAll`.
func (o FrontdoorRoutingRuleForwardingConfigurationPtrOutput) CacheQueryParameterStripDirective() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleForwardingConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CacheQueryParameterStripDirective
	}).(pulumi.StringPtrOutput)
}

// Specify query parameters (array). Works only in combination with `cacheQueryParameterStripDirective` set to `StripAllExcept` or `StripOnly`.
func (o FrontdoorRoutingRuleForwardingConfigurationPtrOutput) CacheQueryParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleForwardingConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.CacheQueryParameters
	}).(pulumi.StringArrayOutput)
}

// Whether to use dynamic compression when caching. Valid options are `true` or `false`. Defaults to `false`.
func (o FrontdoorRoutingRuleForwardingConfigurationPtrOutput) CacheUseDynamicCompression() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleForwardingConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.CacheUseDynamicCompression
	}).(pulumi.BoolPtrOutput)
}

// Path to use when constructing the request to forward to the backend. This functions as a URL Rewrite. Default behaviour preserves the URL path.
func (o FrontdoorRoutingRuleForwardingConfigurationPtrOutput) CustomForwardingPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleForwardingConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomForwardingPath
	}).(pulumi.StringPtrOutput)
}

// Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`. Defaults to `HttpsOnly`.
func (o FrontdoorRoutingRuleForwardingConfigurationPtrOutput) ForwardingProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleForwardingConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ForwardingProtocol
	}).(pulumi.StringPtrOutput)
}

type FrontdoorRoutingRuleRedirectConfiguration struct {
	// The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
	CustomFragment *string `pulumi:"customFragment"`
	// Set this to change the URL for the redirection.
	CustomHost *string `pulumi:"customHost"`
	// The path to retain as per the incoming request, or update in the URL for the redirection.
	CustomPath *string `pulumi:"customPath"`
	// Replace any existing query string from the incoming request URL.
	CustomQueryString *string `pulumi:"customQueryString"`
	// Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`.
	RedirectProtocol string `pulumi:"redirectProtocol"`
	// Status code for the redirect. Valida options are `Moved`, `Found`, `TemporaryRedirect`, `PermanentRedirect`.
	RedirectType string `pulumi:"redirectType"`
}

// FrontdoorRoutingRuleRedirectConfigurationInput is an input type that accepts FrontdoorRoutingRuleRedirectConfigurationArgs and FrontdoorRoutingRuleRedirectConfigurationOutput values.
// You can construct a concrete instance of `FrontdoorRoutingRuleRedirectConfigurationInput` via:
//
//	FrontdoorRoutingRuleRedirectConfigurationArgs{...}
type FrontdoorRoutingRuleRedirectConfigurationInput interface {
	pulumi.Input

	ToFrontdoorRoutingRuleRedirectConfigurationOutput() FrontdoorRoutingRuleRedirectConfigurationOutput
	ToFrontdoorRoutingRuleRedirectConfigurationOutputWithContext(context.Context) FrontdoorRoutingRuleRedirectConfigurationOutput
}

type FrontdoorRoutingRuleRedirectConfigurationArgs struct {
	// The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
	CustomFragment pulumi.StringPtrInput `pulumi:"customFragment"`
	// Set this to change the URL for the redirection.
	CustomHost pulumi.StringPtrInput `pulumi:"customHost"`
	// The path to retain as per the incoming request, or update in the URL for the redirection.
	CustomPath pulumi.StringPtrInput `pulumi:"customPath"`
	// Replace any existing query string from the incoming request URL.
	CustomQueryString pulumi.StringPtrInput `pulumi:"customQueryString"`
	// Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`.
	RedirectProtocol pulumi.StringInput `pulumi:"redirectProtocol"`
	// Status code for the redirect. Valida options are `Moved`, `Found`, `TemporaryRedirect`, `PermanentRedirect`.
	RedirectType pulumi.StringInput `pulumi:"redirectType"`
}

func (FrontdoorRoutingRuleRedirectConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorRoutingRuleRedirectConfiguration)(nil)).Elem()
}

func (i FrontdoorRoutingRuleRedirectConfigurationArgs) ToFrontdoorRoutingRuleRedirectConfigurationOutput() FrontdoorRoutingRuleRedirectConfigurationOutput {
	return i.ToFrontdoorRoutingRuleRedirectConfigurationOutputWithContext(context.Background())
}

func (i FrontdoorRoutingRuleRedirectConfigurationArgs) ToFrontdoorRoutingRuleRedirectConfigurationOutputWithContext(ctx context.Context) FrontdoorRoutingRuleRedirectConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorRoutingRuleRedirectConfigurationOutput)
}

func (i FrontdoorRoutingRuleRedirectConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[FrontdoorRoutingRuleRedirectConfiguration] {
	return pulumix.Output[FrontdoorRoutingRuleRedirectConfiguration]{
		OutputState: i.ToFrontdoorRoutingRuleRedirectConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i FrontdoorRoutingRuleRedirectConfigurationArgs) ToFrontdoorRoutingRuleRedirectConfigurationPtrOutput() FrontdoorRoutingRuleRedirectConfigurationPtrOutput {
	return i.ToFrontdoorRoutingRuleRedirectConfigurationPtrOutputWithContext(context.Background())
}

func (i FrontdoorRoutingRuleRedirectConfigurationArgs) ToFrontdoorRoutingRuleRedirectConfigurationPtrOutputWithContext(ctx context.Context) FrontdoorRoutingRuleRedirectConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorRoutingRuleRedirectConfigurationOutput).ToFrontdoorRoutingRuleRedirectConfigurationPtrOutputWithContext(ctx)
}

// FrontdoorRoutingRuleRedirectConfigurationPtrInput is an input type that accepts FrontdoorRoutingRuleRedirectConfigurationArgs, FrontdoorRoutingRuleRedirectConfigurationPtr and FrontdoorRoutingRuleRedirectConfigurationPtrOutput values.
// You can construct a concrete instance of `FrontdoorRoutingRuleRedirectConfigurationPtrInput` via:
//
//	        FrontdoorRoutingRuleRedirectConfigurationArgs{...}
//
//	or:
//
//	        nil
type FrontdoorRoutingRuleRedirectConfigurationPtrInput interface {
	pulumi.Input

	ToFrontdoorRoutingRuleRedirectConfigurationPtrOutput() FrontdoorRoutingRuleRedirectConfigurationPtrOutput
	ToFrontdoorRoutingRuleRedirectConfigurationPtrOutputWithContext(context.Context) FrontdoorRoutingRuleRedirectConfigurationPtrOutput
}

type frontdoorRoutingRuleRedirectConfigurationPtrType FrontdoorRoutingRuleRedirectConfigurationArgs

func FrontdoorRoutingRuleRedirectConfigurationPtr(v *FrontdoorRoutingRuleRedirectConfigurationArgs) FrontdoorRoutingRuleRedirectConfigurationPtrInput {
	return (*frontdoorRoutingRuleRedirectConfigurationPtrType)(v)
}

func (*frontdoorRoutingRuleRedirectConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontdoorRoutingRuleRedirectConfiguration)(nil)).Elem()
}

func (i *frontdoorRoutingRuleRedirectConfigurationPtrType) ToFrontdoorRoutingRuleRedirectConfigurationPtrOutput() FrontdoorRoutingRuleRedirectConfigurationPtrOutput {
	return i.ToFrontdoorRoutingRuleRedirectConfigurationPtrOutputWithContext(context.Background())
}

func (i *frontdoorRoutingRuleRedirectConfigurationPtrType) ToFrontdoorRoutingRuleRedirectConfigurationPtrOutputWithContext(ctx context.Context) FrontdoorRoutingRuleRedirectConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FrontdoorRoutingRuleRedirectConfigurationPtrOutput)
}

func (i *frontdoorRoutingRuleRedirectConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*FrontdoorRoutingRuleRedirectConfiguration] {
	return pulumix.Output[*FrontdoorRoutingRuleRedirectConfiguration]{
		OutputState: i.ToFrontdoorRoutingRuleRedirectConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type FrontdoorRoutingRuleRedirectConfigurationOutput struct{ *pulumi.OutputState }

func (FrontdoorRoutingRuleRedirectConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FrontdoorRoutingRuleRedirectConfiguration)(nil)).Elem()
}

func (o FrontdoorRoutingRuleRedirectConfigurationOutput) ToFrontdoorRoutingRuleRedirectConfigurationOutput() FrontdoorRoutingRuleRedirectConfigurationOutput {
	return o
}

func (o FrontdoorRoutingRuleRedirectConfigurationOutput) ToFrontdoorRoutingRuleRedirectConfigurationOutputWithContext(ctx context.Context) FrontdoorRoutingRuleRedirectConfigurationOutput {
	return o
}

func (o FrontdoorRoutingRuleRedirectConfigurationOutput) ToFrontdoorRoutingRuleRedirectConfigurationPtrOutput() FrontdoorRoutingRuleRedirectConfigurationPtrOutput {
	return o.ToFrontdoorRoutingRuleRedirectConfigurationPtrOutputWithContext(context.Background())
}

func (o FrontdoorRoutingRuleRedirectConfigurationOutput) ToFrontdoorRoutingRuleRedirectConfigurationPtrOutputWithContext(ctx context.Context) FrontdoorRoutingRuleRedirectConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FrontdoorRoutingRuleRedirectConfiguration) *FrontdoorRoutingRuleRedirectConfiguration {
		return &v
	}).(FrontdoorRoutingRuleRedirectConfigurationPtrOutput)
}

func (o FrontdoorRoutingRuleRedirectConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[FrontdoorRoutingRuleRedirectConfiguration] {
	return pulumix.Output[FrontdoorRoutingRuleRedirectConfiguration]{
		OutputState: o.OutputState,
	}
}

// The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
func (o FrontdoorRoutingRuleRedirectConfigurationOutput) CustomFragment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorRoutingRuleRedirectConfiguration) *string { return v.CustomFragment }).(pulumi.StringPtrOutput)
}

// Set this to change the URL for the redirection.
func (o FrontdoorRoutingRuleRedirectConfigurationOutput) CustomHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorRoutingRuleRedirectConfiguration) *string { return v.CustomHost }).(pulumi.StringPtrOutput)
}

// The path to retain as per the incoming request, or update in the URL for the redirection.
func (o FrontdoorRoutingRuleRedirectConfigurationOutput) CustomPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorRoutingRuleRedirectConfiguration) *string { return v.CustomPath }).(pulumi.StringPtrOutput)
}

// Replace any existing query string from the incoming request URL.
func (o FrontdoorRoutingRuleRedirectConfigurationOutput) CustomQueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FrontdoorRoutingRuleRedirectConfiguration) *string { return v.CustomQueryString }).(pulumi.StringPtrOutput)
}

// Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`.
func (o FrontdoorRoutingRuleRedirectConfigurationOutput) RedirectProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v FrontdoorRoutingRuleRedirectConfiguration) string { return v.RedirectProtocol }).(pulumi.StringOutput)
}

// Status code for the redirect. Valida options are `Moved`, `Found`, `TemporaryRedirect`, `PermanentRedirect`.
func (o FrontdoorRoutingRuleRedirectConfigurationOutput) RedirectType() pulumi.StringOutput {
	return o.ApplyT(func(v FrontdoorRoutingRuleRedirectConfiguration) string { return v.RedirectType }).(pulumi.StringOutput)
}

type FrontdoorRoutingRuleRedirectConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FrontdoorRoutingRuleRedirectConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FrontdoorRoutingRuleRedirectConfiguration)(nil)).Elem()
}

func (o FrontdoorRoutingRuleRedirectConfigurationPtrOutput) ToFrontdoorRoutingRuleRedirectConfigurationPtrOutput() FrontdoorRoutingRuleRedirectConfigurationPtrOutput {
	return o
}

func (o FrontdoorRoutingRuleRedirectConfigurationPtrOutput) ToFrontdoorRoutingRuleRedirectConfigurationPtrOutputWithContext(ctx context.Context) FrontdoorRoutingRuleRedirectConfigurationPtrOutput {
	return o
}

func (o FrontdoorRoutingRuleRedirectConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FrontdoorRoutingRuleRedirectConfiguration] {
	return pulumix.Output[*FrontdoorRoutingRuleRedirectConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o FrontdoorRoutingRuleRedirectConfigurationPtrOutput) Elem() FrontdoorRoutingRuleRedirectConfigurationOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleRedirectConfiguration) FrontdoorRoutingRuleRedirectConfiguration {
		if v != nil {
			return *v
		}
		var ret FrontdoorRoutingRuleRedirectConfiguration
		return ret
	}).(FrontdoorRoutingRuleRedirectConfigurationOutput)
}

// The destination fragment in the portion of URL after '#'. Set this to add a fragment to the redirect URL.
func (o FrontdoorRoutingRuleRedirectConfigurationPtrOutput) CustomFragment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleRedirectConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomFragment
	}).(pulumi.StringPtrOutput)
}

// Set this to change the URL for the redirection.
func (o FrontdoorRoutingRuleRedirectConfigurationPtrOutput) CustomHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleRedirectConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomHost
	}).(pulumi.StringPtrOutput)
}

// The path to retain as per the incoming request, or update in the URL for the redirection.
func (o FrontdoorRoutingRuleRedirectConfigurationPtrOutput) CustomPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleRedirectConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomPath
	}).(pulumi.StringPtrOutput)
}

// Replace any existing query string from the incoming request URL.
func (o FrontdoorRoutingRuleRedirectConfigurationPtrOutput) CustomQueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleRedirectConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomQueryString
	}).(pulumi.StringPtrOutput)
}

// Protocol to use when redirecting. Valid options are `HttpOnly`, `HttpsOnly`, or `MatchRequest`.
func (o FrontdoorRoutingRuleRedirectConfigurationPtrOutput) RedirectProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleRedirectConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RedirectProtocol
	}).(pulumi.StringPtrOutput)
}

// Status code for the redirect. Valida options are `Moved`, `Found`, `TemporaryRedirect`, `PermanentRedirect`.
func (o FrontdoorRoutingRuleRedirectConfigurationPtrOutput) RedirectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FrontdoorRoutingRuleRedirectConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RedirectType
	}).(pulumi.StringPtrOutput)
}

type RulesEngineRule struct {
	// An `action` block as defined below.
	Action *RulesEngineRuleAction `pulumi:"action"`
	// One or more `matchCondition` block as defined below.
	MatchConditions []RulesEngineRuleMatchCondition `pulumi:"matchConditions"`
	// The name of the rule.
	Name string `pulumi:"name"`
	// Priority of the rule, must be unique per rules engine definition.
	Priority int `pulumi:"priority"`
}

// RulesEngineRuleInput is an input type that accepts RulesEngineRuleArgs and RulesEngineRuleOutput values.
// You can construct a concrete instance of `RulesEngineRuleInput` via:
//
//	RulesEngineRuleArgs{...}
type RulesEngineRuleInput interface {
	pulumi.Input

	ToRulesEngineRuleOutput() RulesEngineRuleOutput
	ToRulesEngineRuleOutputWithContext(context.Context) RulesEngineRuleOutput
}

type RulesEngineRuleArgs struct {
	// An `action` block as defined below.
	Action RulesEngineRuleActionPtrInput `pulumi:"action"`
	// One or more `matchCondition` block as defined below.
	MatchConditions RulesEngineRuleMatchConditionArrayInput `pulumi:"matchConditions"`
	// The name of the rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Priority of the rule, must be unique per rules engine definition.
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (RulesEngineRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineRule)(nil)).Elem()
}

func (i RulesEngineRuleArgs) ToRulesEngineRuleOutput() RulesEngineRuleOutput {
	return i.ToRulesEngineRuleOutputWithContext(context.Background())
}

func (i RulesEngineRuleArgs) ToRulesEngineRuleOutputWithContext(ctx context.Context) RulesEngineRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleOutput)
}

func (i RulesEngineRuleArgs) ToOutput(ctx context.Context) pulumix.Output[RulesEngineRule] {
	return pulumix.Output[RulesEngineRule]{
		OutputState: i.ToRulesEngineRuleOutputWithContext(ctx).OutputState,
	}
}

// RulesEngineRuleArrayInput is an input type that accepts RulesEngineRuleArray and RulesEngineRuleArrayOutput values.
// You can construct a concrete instance of `RulesEngineRuleArrayInput` via:
//
//	RulesEngineRuleArray{ RulesEngineRuleArgs{...} }
type RulesEngineRuleArrayInput interface {
	pulumi.Input

	ToRulesEngineRuleArrayOutput() RulesEngineRuleArrayOutput
	ToRulesEngineRuleArrayOutputWithContext(context.Context) RulesEngineRuleArrayOutput
}

type RulesEngineRuleArray []RulesEngineRuleInput

func (RulesEngineRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineRule)(nil)).Elem()
}

func (i RulesEngineRuleArray) ToRulesEngineRuleArrayOutput() RulesEngineRuleArrayOutput {
	return i.ToRulesEngineRuleArrayOutputWithContext(context.Background())
}

func (i RulesEngineRuleArray) ToRulesEngineRuleArrayOutputWithContext(ctx context.Context) RulesEngineRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleArrayOutput)
}

func (i RulesEngineRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]RulesEngineRule] {
	return pulumix.Output[[]RulesEngineRule]{
		OutputState: i.ToRulesEngineRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type RulesEngineRuleOutput struct{ *pulumi.OutputState }

func (RulesEngineRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineRule)(nil)).Elem()
}

func (o RulesEngineRuleOutput) ToRulesEngineRuleOutput() RulesEngineRuleOutput {
	return o
}

func (o RulesEngineRuleOutput) ToRulesEngineRuleOutputWithContext(ctx context.Context) RulesEngineRuleOutput {
	return o
}

func (o RulesEngineRuleOutput) ToOutput(ctx context.Context) pulumix.Output[RulesEngineRule] {
	return pulumix.Output[RulesEngineRule]{
		OutputState: o.OutputState,
	}
}

// An `action` block as defined below.
func (o RulesEngineRuleOutput) Action() RulesEngineRuleActionPtrOutput {
	return o.ApplyT(func(v RulesEngineRule) *RulesEngineRuleAction { return v.Action }).(RulesEngineRuleActionPtrOutput)
}

// One or more `matchCondition` block as defined below.
func (o RulesEngineRuleOutput) MatchConditions() RulesEngineRuleMatchConditionArrayOutput {
	return o.ApplyT(func(v RulesEngineRule) []RulesEngineRuleMatchCondition { return v.MatchConditions }).(RulesEngineRuleMatchConditionArrayOutput)
}

// The name of the rule.
func (o RulesEngineRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RulesEngineRule) string { return v.Name }).(pulumi.StringOutput)
}

// Priority of the rule, must be unique per rules engine definition.
func (o RulesEngineRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v RulesEngineRule) int { return v.Priority }).(pulumi.IntOutput)
}

type RulesEngineRuleArrayOutput struct{ *pulumi.OutputState }

func (RulesEngineRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineRule)(nil)).Elem()
}

func (o RulesEngineRuleArrayOutput) ToRulesEngineRuleArrayOutput() RulesEngineRuleArrayOutput {
	return o
}

func (o RulesEngineRuleArrayOutput) ToRulesEngineRuleArrayOutputWithContext(ctx context.Context) RulesEngineRuleArrayOutput {
	return o
}

func (o RulesEngineRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RulesEngineRule] {
	return pulumix.Output[[]RulesEngineRule]{
		OutputState: o.OutputState,
	}
}

func (o RulesEngineRuleArrayOutput) Index(i pulumi.IntInput) RulesEngineRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesEngineRule {
		return vs[0].([]RulesEngineRule)[vs[1].(int)]
	}).(RulesEngineRuleOutput)
}

type RulesEngineRuleAction struct {
	// A `requestHeader` block as defined below.
	RequestHeaders []RulesEngineRuleActionRequestHeader `pulumi:"requestHeaders"`
	// A `responseHeader` block as defined below.
	ResponseHeaders []RulesEngineRuleActionResponseHeader `pulumi:"responseHeaders"`
}

// RulesEngineRuleActionInput is an input type that accepts RulesEngineRuleActionArgs and RulesEngineRuleActionOutput values.
// You can construct a concrete instance of `RulesEngineRuleActionInput` via:
//
//	RulesEngineRuleActionArgs{...}
type RulesEngineRuleActionInput interface {
	pulumi.Input

	ToRulesEngineRuleActionOutput() RulesEngineRuleActionOutput
	ToRulesEngineRuleActionOutputWithContext(context.Context) RulesEngineRuleActionOutput
}

type RulesEngineRuleActionArgs struct {
	// A `requestHeader` block as defined below.
	RequestHeaders RulesEngineRuleActionRequestHeaderArrayInput `pulumi:"requestHeaders"`
	// A `responseHeader` block as defined below.
	ResponseHeaders RulesEngineRuleActionResponseHeaderArrayInput `pulumi:"responseHeaders"`
}

func (RulesEngineRuleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineRuleAction)(nil)).Elem()
}

func (i RulesEngineRuleActionArgs) ToRulesEngineRuleActionOutput() RulesEngineRuleActionOutput {
	return i.ToRulesEngineRuleActionOutputWithContext(context.Background())
}

func (i RulesEngineRuleActionArgs) ToRulesEngineRuleActionOutputWithContext(ctx context.Context) RulesEngineRuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleActionOutput)
}

func (i RulesEngineRuleActionArgs) ToOutput(ctx context.Context) pulumix.Output[RulesEngineRuleAction] {
	return pulumix.Output[RulesEngineRuleAction]{
		OutputState: i.ToRulesEngineRuleActionOutputWithContext(ctx).OutputState,
	}
}

func (i RulesEngineRuleActionArgs) ToRulesEngineRuleActionPtrOutput() RulesEngineRuleActionPtrOutput {
	return i.ToRulesEngineRuleActionPtrOutputWithContext(context.Background())
}

func (i RulesEngineRuleActionArgs) ToRulesEngineRuleActionPtrOutputWithContext(ctx context.Context) RulesEngineRuleActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleActionOutput).ToRulesEngineRuleActionPtrOutputWithContext(ctx)
}

// RulesEngineRuleActionPtrInput is an input type that accepts RulesEngineRuleActionArgs, RulesEngineRuleActionPtr and RulesEngineRuleActionPtrOutput values.
// You can construct a concrete instance of `RulesEngineRuleActionPtrInput` via:
//
//	        RulesEngineRuleActionArgs{...}
//
//	or:
//
//	        nil
type RulesEngineRuleActionPtrInput interface {
	pulumi.Input

	ToRulesEngineRuleActionPtrOutput() RulesEngineRuleActionPtrOutput
	ToRulesEngineRuleActionPtrOutputWithContext(context.Context) RulesEngineRuleActionPtrOutput
}

type rulesEngineRuleActionPtrType RulesEngineRuleActionArgs

func RulesEngineRuleActionPtr(v *RulesEngineRuleActionArgs) RulesEngineRuleActionPtrInput {
	return (*rulesEngineRuleActionPtrType)(v)
}

func (*rulesEngineRuleActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RulesEngineRuleAction)(nil)).Elem()
}

func (i *rulesEngineRuleActionPtrType) ToRulesEngineRuleActionPtrOutput() RulesEngineRuleActionPtrOutput {
	return i.ToRulesEngineRuleActionPtrOutputWithContext(context.Background())
}

func (i *rulesEngineRuleActionPtrType) ToRulesEngineRuleActionPtrOutputWithContext(ctx context.Context) RulesEngineRuleActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleActionPtrOutput)
}

func (i *rulesEngineRuleActionPtrType) ToOutput(ctx context.Context) pulumix.Output[*RulesEngineRuleAction] {
	return pulumix.Output[*RulesEngineRuleAction]{
		OutputState: i.ToRulesEngineRuleActionPtrOutputWithContext(ctx).OutputState,
	}
}

type RulesEngineRuleActionOutput struct{ *pulumi.OutputState }

func (RulesEngineRuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineRuleAction)(nil)).Elem()
}

func (o RulesEngineRuleActionOutput) ToRulesEngineRuleActionOutput() RulesEngineRuleActionOutput {
	return o
}

func (o RulesEngineRuleActionOutput) ToRulesEngineRuleActionOutputWithContext(ctx context.Context) RulesEngineRuleActionOutput {
	return o
}

func (o RulesEngineRuleActionOutput) ToRulesEngineRuleActionPtrOutput() RulesEngineRuleActionPtrOutput {
	return o.ToRulesEngineRuleActionPtrOutputWithContext(context.Background())
}

func (o RulesEngineRuleActionOutput) ToRulesEngineRuleActionPtrOutputWithContext(ctx context.Context) RulesEngineRuleActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RulesEngineRuleAction) *RulesEngineRuleAction {
		return &v
	}).(RulesEngineRuleActionPtrOutput)
}

func (o RulesEngineRuleActionOutput) ToOutput(ctx context.Context) pulumix.Output[RulesEngineRuleAction] {
	return pulumix.Output[RulesEngineRuleAction]{
		OutputState: o.OutputState,
	}
}

// A `requestHeader` block as defined below.
func (o RulesEngineRuleActionOutput) RequestHeaders() RulesEngineRuleActionRequestHeaderArrayOutput {
	return o.ApplyT(func(v RulesEngineRuleAction) []RulesEngineRuleActionRequestHeader { return v.RequestHeaders }).(RulesEngineRuleActionRequestHeaderArrayOutput)
}

// A `responseHeader` block as defined below.
func (o RulesEngineRuleActionOutput) ResponseHeaders() RulesEngineRuleActionResponseHeaderArrayOutput {
	return o.ApplyT(func(v RulesEngineRuleAction) []RulesEngineRuleActionResponseHeader { return v.ResponseHeaders }).(RulesEngineRuleActionResponseHeaderArrayOutput)
}

type RulesEngineRuleActionPtrOutput struct{ *pulumi.OutputState }

func (RulesEngineRuleActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RulesEngineRuleAction)(nil)).Elem()
}

func (o RulesEngineRuleActionPtrOutput) ToRulesEngineRuleActionPtrOutput() RulesEngineRuleActionPtrOutput {
	return o
}

func (o RulesEngineRuleActionPtrOutput) ToRulesEngineRuleActionPtrOutputWithContext(ctx context.Context) RulesEngineRuleActionPtrOutput {
	return o
}

func (o RulesEngineRuleActionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RulesEngineRuleAction] {
	return pulumix.Output[*RulesEngineRuleAction]{
		OutputState: o.OutputState,
	}
}

func (o RulesEngineRuleActionPtrOutput) Elem() RulesEngineRuleActionOutput {
	return o.ApplyT(func(v *RulesEngineRuleAction) RulesEngineRuleAction {
		if v != nil {
			return *v
		}
		var ret RulesEngineRuleAction
		return ret
	}).(RulesEngineRuleActionOutput)
}

// A `requestHeader` block as defined below.
func (o RulesEngineRuleActionPtrOutput) RequestHeaders() RulesEngineRuleActionRequestHeaderArrayOutput {
	return o.ApplyT(func(v *RulesEngineRuleAction) []RulesEngineRuleActionRequestHeader {
		if v == nil {
			return nil
		}
		return v.RequestHeaders
	}).(RulesEngineRuleActionRequestHeaderArrayOutput)
}

// A `responseHeader` block as defined below.
func (o RulesEngineRuleActionPtrOutput) ResponseHeaders() RulesEngineRuleActionResponseHeaderArrayOutput {
	return o.ApplyT(func(v *RulesEngineRuleAction) []RulesEngineRuleActionResponseHeader {
		if v == nil {
			return nil
		}
		return v.ResponseHeaders
	}).(RulesEngineRuleActionResponseHeaderArrayOutput)
}

type RulesEngineRuleActionRequestHeader struct {
	// can be set to `Overwrite`, `Append` or `Delete`.
	HeaderActionType *string `pulumi:"headerActionType"`
	// header name (string).
	HeaderName *string `pulumi:"headerName"`
	// value name (string).
	Value *string `pulumi:"value"`
}

// RulesEngineRuleActionRequestHeaderInput is an input type that accepts RulesEngineRuleActionRequestHeaderArgs and RulesEngineRuleActionRequestHeaderOutput values.
// You can construct a concrete instance of `RulesEngineRuleActionRequestHeaderInput` via:
//
//	RulesEngineRuleActionRequestHeaderArgs{...}
type RulesEngineRuleActionRequestHeaderInput interface {
	pulumi.Input

	ToRulesEngineRuleActionRequestHeaderOutput() RulesEngineRuleActionRequestHeaderOutput
	ToRulesEngineRuleActionRequestHeaderOutputWithContext(context.Context) RulesEngineRuleActionRequestHeaderOutput
}

type RulesEngineRuleActionRequestHeaderArgs struct {
	// can be set to `Overwrite`, `Append` or `Delete`.
	HeaderActionType pulumi.StringPtrInput `pulumi:"headerActionType"`
	// header name (string).
	HeaderName pulumi.StringPtrInput `pulumi:"headerName"`
	// value name (string).
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RulesEngineRuleActionRequestHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineRuleActionRequestHeader)(nil)).Elem()
}

func (i RulesEngineRuleActionRequestHeaderArgs) ToRulesEngineRuleActionRequestHeaderOutput() RulesEngineRuleActionRequestHeaderOutput {
	return i.ToRulesEngineRuleActionRequestHeaderOutputWithContext(context.Background())
}

func (i RulesEngineRuleActionRequestHeaderArgs) ToRulesEngineRuleActionRequestHeaderOutputWithContext(ctx context.Context) RulesEngineRuleActionRequestHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleActionRequestHeaderOutput)
}

func (i RulesEngineRuleActionRequestHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[RulesEngineRuleActionRequestHeader] {
	return pulumix.Output[RulesEngineRuleActionRequestHeader]{
		OutputState: i.ToRulesEngineRuleActionRequestHeaderOutputWithContext(ctx).OutputState,
	}
}

// RulesEngineRuleActionRequestHeaderArrayInput is an input type that accepts RulesEngineRuleActionRequestHeaderArray and RulesEngineRuleActionRequestHeaderArrayOutput values.
// You can construct a concrete instance of `RulesEngineRuleActionRequestHeaderArrayInput` via:
//
//	RulesEngineRuleActionRequestHeaderArray{ RulesEngineRuleActionRequestHeaderArgs{...} }
type RulesEngineRuleActionRequestHeaderArrayInput interface {
	pulumi.Input

	ToRulesEngineRuleActionRequestHeaderArrayOutput() RulesEngineRuleActionRequestHeaderArrayOutput
	ToRulesEngineRuleActionRequestHeaderArrayOutputWithContext(context.Context) RulesEngineRuleActionRequestHeaderArrayOutput
}

type RulesEngineRuleActionRequestHeaderArray []RulesEngineRuleActionRequestHeaderInput

func (RulesEngineRuleActionRequestHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineRuleActionRequestHeader)(nil)).Elem()
}

func (i RulesEngineRuleActionRequestHeaderArray) ToRulesEngineRuleActionRequestHeaderArrayOutput() RulesEngineRuleActionRequestHeaderArrayOutput {
	return i.ToRulesEngineRuleActionRequestHeaderArrayOutputWithContext(context.Background())
}

func (i RulesEngineRuleActionRequestHeaderArray) ToRulesEngineRuleActionRequestHeaderArrayOutputWithContext(ctx context.Context) RulesEngineRuleActionRequestHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleActionRequestHeaderArrayOutput)
}

func (i RulesEngineRuleActionRequestHeaderArray) ToOutput(ctx context.Context) pulumix.Output[[]RulesEngineRuleActionRequestHeader] {
	return pulumix.Output[[]RulesEngineRuleActionRequestHeader]{
		OutputState: i.ToRulesEngineRuleActionRequestHeaderArrayOutputWithContext(ctx).OutputState,
	}
}

type RulesEngineRuleActionRequestHeaderOutput struct{ *pulumi.OutputState }

func (RulesEngineRuleActionRequestHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineRuleActionRequestHeader)(nil)).Elem()
}

func (o RulesEngineRuleActionRequestHeaderOutput) ToRulesEngineRuleActionRequestHeaderOutput() RulesEngineRuleActionRequestHeaderOutput {
	return o
}

func (o RulesEngineRuleActionRequestHeaderOutput) ToRulesEngineRuleActionRequestHeaderOutputWithContext(ctx context.Context) RulesEngineRuleActionRequestHeaderOutput {
	return o
}

func (o RulesEngineRuleActionRequestHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[RulesEngineRuleActionRequestHeader] {
	return pulumix.Output[RulesEngineRuleActionRequestHeader]{
		OutputState: o.OutputState,
	}
}

// can be set to `Overwrite`, `Append` or `Delete`.
func (o RulesEngineRuleActionRequestHeaderOutput) HeaderActionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesEngineRuleActionRequestHeader) *string { return v.HeaderActionType }).(pulumi.StringPtrOutput)
}

// header name (string).
func (o RulesEngineRuleActionRequestHeaderOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesEngineRuleActionRequestHeader) *string { return v.HeaderName }).(pulumi.StringPtrOutput)
}

// value name (string).
func (o RulesEngineRuleActionRequestHeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesEngineRuleActionRequestHeader) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RulesEngineRuleActionRequestHeaderArrayOutput struct{ *pulumi.OutputState }

func (RulesEngineRuleActionRequestHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineRuleActionRequestHeader)(nil)).Elem()
}

func (o RulesEngineRuleActionRequestHeaderArrayOutput) ToRulesEngineRuleActionRequestHeaderArrayOutput() RulesEngineRuleActionRequestHeaderArrayOutput {
	return o
}

func (o RulesEngineRuleActionRequestHeaderArrayOutput) ToRulesEngineRuleActionRequestHeaderArrayOutputWithContext(ctx context.Context) RulesEngineRuleActionRequestHeaderArrayOutput {
	return o
}

func (o RulesEngineRuleActionRequestHeaderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RulesEngineRuleActionRequestHeader] {
	return pulumix.Output[[]RulesEngineRuleActionRequestHeader]{
		OutputState: o.OutputState,
	}
}

func (o RulesEngineRuleActionRequestHeaderArrayOutput) Index(i pulumi.IntInput) RulesEngineRuleActionRequestHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesEngineRuleActionRequestHeader {
		return vs[0].([]RulesEngineRuleActionRequestHeader)[vs[1].(int)]
	}).(RulesEngineRuleActionRequestHeaderOutput)
}

type RulesEngineRuleActionResponseHeader struct {
	// can be set to `Overwrite`, `Append` or `Delete`.
	HeaderActionType *string `pulumi:"headerActionType"`
	// header name (string).
	HeaderName *string `pulumi:"headerName"`
	// value name (string).
	Value *string `pulumi:"value"`
}

// RulesEngineRuleActionResponseHeaderInput is an input type that accepts RulesEngineRuleActionResponseHeaderArgs and RulesEngineRuleActionResponseHeaderOutput values.
// You can construct a concrete instance of `RulesEngineRuleActionResponseHeaderInput` via:
//
//	RulesEngineRuleActionResponseHeaderArgs{...}
type RulesEngineRuleActionResponseHeaderInput interface {
	pulumi.Input

	ToRulesEngineRuleActionResponseHeaderOutput() RulesEngineRuleActionResponseHeaderOutput
	ToRulesEngineRuleActionResponseHeaderOutputWithContext(context.Context) RulesEngineRuleActionResponseHeaderOutput
}

type RulesEngineRuleActionResponseHeaderArgs struct {
	// can be set to `Overwrite`, `Append` or `Delete`.
	HeaderActionType pulumi.StringPtrInput `pulumi:"headerActionType"`
	// header name (string).
	HeaderName pulumi.StringPtrInput `pulumi:"headerName"`
	// value name (string).
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RulesEngineRuleActionResponseHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineRuleActionResponseHeader)(nil)).Elem()
}

func (i RulesEngineRuleActionResponseHeaderArgs) ToRulesEngineRuleActionResponseHeaderOutput() RulesEngineRuleActionResponseHeaderOutput {
	return i.ToRulesEngineRuleActionResponseHeaderOutputWithContext(context.Background())
}

func (i RulesEngineRuleActionResponseHeaderArgs) ToRulesEngineRuleActionResponseHeaderOutputWithContext(ctx context.Context) RulesEngineRuleActionResponseHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleActionResponseHeaderOutput)
}

func (i RulesEngineRuleActionResponseHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[RulesEngineRuleActionResponseHeader] {
	return pulumix.Output[RulesEngineRuleActionResponseHeader]{
		OutputState: i.ToRulesEngineRuleActionResponseHeaderOutputWithContext(ctx).OutputState,
	}
}

// RulesEngineRuleActionResponseHeaderArrayInput is an input type that accepts RulesEngineRuleActionResponseHeaderArray and RulesEngineRuleActionResponseHeaderArrayOutput values.
// You can construct a concrete instance of `RulesEngineRuleActionResponseHeaderArrayInput` via:
//
//	RulesEngineRuleActionResponseHeaderArray{ RulesEngineRuleActionResponseHeaderArgs{...} }
type RulesEngineRuleActionResponseHeaderArrayInput interface {
	pulumi.Input

	ToRulesEngineRuleActionResponseHeaderArrayOutput() RulesEngineRuleActionResponseHeaderArrayOutput
	ToRulesEngineRuleActionResponseHeaderArrayOutputWithContext(context.Context) RulesEngineRuleActionResponseHeaderArrayOutput
}

type RulesEngineRuleActionResponseHeaderArray []RulesEngineRuleActionResponseHeaderInput

func (RulesEngineRuleActionResponseHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineRuleActionResponseHeader)(nil)).Elem()
}

func (i RulesEngineRuleActionResponseHeaderArray) ToRulesEngineRuleActionResponseHeaderArrayOutput() RulesEngineRuleActionResponseHeaderArrayOutput {
	return i.ToRulesEngineRuleActionResponseHeaderArrayOutputWithContext(context.Background())
}

func (i RulesEngineRuleActionResponseHeaderArray) ToRulesEngineRuleActionResponseHeaderArrayOutputWithContext(ctx context.Context) RulesEngineRuleActionResponseHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleActionResponseHeaderArrayOutput)
}

func (i RulesEngineRuleActionResponseHeaderArray) ToOutput(ctx context.Context) pulumix.Output[[]RulesEngineRuleActionResponseHeader] {
	return pulumix.Output[[]RulesEngineRuleActionResponseHeader]{
		OutputState: i.ToRulesEngineRuleActionResponseHeaderArrayOutputWithContext(ctx).OutputState,
	}
}

type RulesEngineRuleActionResponseHeaderOutput struct{ *pulumi.OutputState }

func (RulesEngineRuleActionResponseHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineRuleActionResponseHeader)(nil)).Elem()
}

func (o RulesEngineRuleActionResponseHeaderOutput) ToRulesEngineRuleActionResponseHeaderOutput() RulesEngineRuleActionResponseHeaderOutput {
	return o
}

func (o RulesEngineRuleActionResponseHeaderOutput) ToRulesEngineRuleActionResponseHeaderOutputWithContext(ctx context.Context) RulesEngineRuleActionResponseHeaderOutput {
	return o
}

func (o RulesEngineRuleActionResponseHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[RulesEngineRuleActionResponseHeader] {
	return pulumix.Output[RulesEngineRuleActionResponseHeader]{
		OutputState: o.OutputState,
	}
}

// can be set to `Overwrite`, `Append` or `Delete`.
func (o RulesEngineRuleActionResponseHeaderOutput) HeaderActionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesEngineRuleActionResponseHeader) *string { return v.HeaderActionType }).(pulumi.StringPtrOutput)
}

// header name (string).
func (o RulesEngineRuleActionResponseHeaderOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesEngineRuleActionResponseHeader) *string { return v.HeaderName }).(pulumi.StringPtrOutput)
}

// value name (string).
func (o RulesEngineRuleActionResponseHeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesEngineRuleActionResponseHeader) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RulesEngineRuleActionResponseHeaderArrayOutput struct{ *pulumi.OutputState }

func (RulesEngineRuleActionResponseHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineRuleActionResponseHeader)(nil)).Elem()
}

func (o RulesEngineRuleActionResponseHeaderArrayOutput) ToRulesEngineRuleActionResponseHeaderArrayOutput() RulesEngineRuleActionResponseHeaderArrayOutput {
	return o
}

func (o RulesEngineRuleActionResponseHeaderArrayOutput) ToRulesEngineRuleActionResponseHeaderArrayOutputWithContext(ctx context.Context) RulesEngineRuleActionResponseHeaderArrayOutput {
	return o
}

func (o RulesEngineRuleActionResponseHeaderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RulesEngineRuleActionResponseHeader] {
	return pulumix.Output[[]RulesEngineRuleActionResponseHeader]{
		OutputState: o.OutputState,
	}
}

func (o RulesEngineRuleActionResponseHeaderArrayOutput) Index(i pulumi.IntInput) RulesEngineRuleActionResponseHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesEngineRuleActionResponseHeader {
		return vs[0].([]RulesEngineRuleActionResponseHeader)[vs[1].(int)]
	}).(RulesEngineRuleActionResponseHeaderOutput)
}

type RulesEngineRuleMatchCondition struct {
	// can be set to `true` or `false` to negate the given condition. Defaults to `false`.
	NegateCondition *bool `pulumi:"negateCondition"`
	// can be set to `Any`, `IPMatch`, `GeoMatch`, `Equal`, `Contains`, `LessThan`, `GreaterThan`, `LessThanOrEqual`, `GreaterThanOrEqual`, `BeginsWith` or `EndsWith`
	Operator string `pulumi:"operator"`
	// match against a specific key when `variable` is set to `PostArgs` or `RequestHeader`. It cannot be used with `QueryString` and `RequestMethod`.
	Selector *string `pulumi:"selector"`
	// can be set to one or more values out of `Lowercase`, `RemoveNulls`, `Trim`, `Uppercase`, `UrlDecode` and `UrlEncode`
	Transforms []string `pulumi:"transforms"`
	// (array) can contain one or more strings.
	Values []string `pulumi:"values"`
	// can be set to `IsMobile`, `RemoteAddr`, `RequestMethod`, `QueryString`, `PostArgs`, `RequestURI`, `RequestPath`, `RequestFilename`, `RequestFilenameExtension`,`RequestHeader`,`RequestBody` or `RequestScheme`.
	Variable *string `pulumi:"variable"`
}

// RulesEngineRuleMatchConditionInput is an input type that accepts RulesEngineRuleMatchConditionArgs and RulesEngineRuleMatchConditionOutput values.
// You can construct a concrete instance of `RulesEngineRuleMatchConditionInput` via:
//
//	RulesEngineRuleMatchConditionArgs{...}
type RulesEngineRuleMatchConditionInput interface {
	pulumi.Input

	ToRulesEngineRuleMatchConditionOutput() RulesEngineRuleMatchConditionOutput
	ToRulesEngineRuleMatchConditionOutputWithContext(context.Context) RulesEngineRuleMatchConditionOutput
}

type RulesEngineRuleMatchConditionArgs struct {
	// can be set to `true` or `false` to negate the given condition. Defaults to `false`.
	NegateCondition pulumi.BoolPtrInput `pulumi:"negateCondition"`
	// can be set to `Any`, `IPMatch`, `GeoMatch`, `Equal`, `Contains`, `LessThan`, `GreaterThan`, `LessThanOrEqual`, `GreaterThanOrEqual`, `BeginsWith` or `EndsWith`
	Operator pulumi.StringInput `pulumi:"operator"`
	// match against a specific key when `variable` is set to `PostArgs` or `RequestHeader`. It cannot be used with `QueryString` and `RequestMethod`.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// can be set to one or more values out of `Lowercase`, `RemoveNulls`, `Trim`, `Uppercase`, `UrlDecode` and `UrlEncode`
	Transforms pulumi.StringArrayInput `pulumi:"transforms"`
	// (array) can contain one or more strings.
	Values pulumi.StringArrayInput `pulumi:"values"`
	// can be set to `IsMobile`, `RemoteAddr`, `RequestMethod`, `QueryString`, `PostArgs`, `RequestURI`, `RequestPath`, `RequestFilename`, `RequestFilenameExtension`,`RequestHeader`,`RequestBody` or `RequestScheme`.
	Variable pulumi.StringPtrInput `pulumi:"variable"`
}

func (RulesEngineRuleMatchConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineRuleMatchCondition)(nil)).Elem()
}

func (i RulesEngineRuleMatchConditionArgs) ToRulesEngineRuleMatchConditionOutput() RulesEngineRuleMatchConditionOutput {
	return i.ToRulesEngineRuleMatchConditionOutputWithContext(context.Background())
}

func (i RulesEngineRuleMatchConditionArgs) ToRulesEngineRuleMatchConditionOutputWithContext(ctx context.Context) RulesEngineRuleMatchConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleMatchConditionOutput)
}

func (i RulesEngineRuleMatchConditionArgs) ToOutput(ctx context.Context) pulumix.Output[RulesEngineRuleMatchCondition] {
	return pulumix.Output[RulesEngineRuleMatchCondition]{
		OutputState: i.ToRulesEngineRuleMatchConditionOutputWithContext(ctx).OutputState,
	}
}

// RulesEngineRuleMatchConditionArrayInput is an input type that accepts RulesEngineRuleMatchConditionArray and RulesEngineRuleMatchConditionArrayOutput values.
// You can construct a concrete instance of `RulesEngineRuleMatchConditionArrayInput` via:
//
//	RulesEngineRuleMatchConditionArray{ RulesEngineRuleMatchConditionArgs{...} }
type RulesEngineRuleMatchConditionArrayInput interface {
	pulumi.Input

	ToRulesEngineRuleMatchConditionArrayOutput() RulesEngineRuleMatchConditionArrayOutput
	ToRulesEngineRuleMatchConditionArrayOutputWithContext(context.Context) RulesEngineRuleMatchConditionArrayOutput
}

type RulesEngineRuleMatchConditionArray []RulesEngineRuleMatchConditionInput

func (RulesEngineRuleMatchConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineRuleMatchCondition)(nil)).Elem()
}

func (i RulesEngineRuleMatchConditionArray) ToRulesEngineRuleMatchConditionArrayOutput() RulesEngineRuleMatchConditionArrayOutput {
	return i.ToRulesEngineRuleMatchConditionArrayOutputWithContext(context.Background())
}

func (i RulesEngineRuleMatchConditionArray) ToRulesEngineRuleMatchConditionArrayOutputWithContext(ctx context.Context) RulesEngineRuleMatchConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesEngineRuleMatchConditionArrayOutput)
}

func (i RulesEngineRuleMatchConditionArray) ToOutput(ctx context.Context) pulumix.Output[[]RulesEngineRuleMatchCondition] {
	return pulumix.Output[[]RulesEngineRuleMatchCondition]{
		OutputState: i.ToRulesEngineRuleMatchConditionArrayOutputWithContext(ctx).OutputState,
	}
}

type RulesEngineRuleMatchConditionOutput struct{ *pulumi.OutputState }

func (RulesEngineRuleMatchConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesEngineRuleMatchCondition)(nil)).Elem()
}

func (o RulesEngineRuleMatchConditionOutput) ToRulesEngineRuleMatchConditionOutput() RulesEngineRuleMatchConditionOutput {
	return o
}

func (o RulesEngineRuleMatchConditionOutput) ToRulesEngineRuleMatchConditionOutputWithContext(ctx context.Context) RulesEngineRuleMatchConditionOutput {
	return o
}

func (o RulesEngineRuleMatchConditionOutput) ToOutput(ctx context.Context) pulumix.Output[RulesEngineRuleMatchCondition] {
	return pulumix.Output[RulesEngineRuleMatchCondition]{
		OutputState: o.OutputState,
	}
}

// can be set to `true` or `false` to negate the given condition. Defaults to `false`.
func (o RulesEngineRuleMatchConditionOutput) NegateCondition() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RulesEngineRuleMatchCondition) *bool { return v.NegateCondition }).(pulumi.BoolPtrOutput)
}

// can be set to `Any`, `IPMatch`, `GeoMatch`, `Equal`, `Contains`, `LessThan`, `GreaterThan`, `LessThanOrEqual`, `GreaterThanOrEqual`, `BeginsWith` or `EndsWith`
func (o RulesEngineRuleMatchConditionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v RulesEngineRuleMatchCondition) string { return v.Operator }).(pulumi.StringOutput)
}

// match against a specific key when `variable` is set to `PostArgs` or `RequestHeader`. It cannot be used with `QueryString` and `RequestMethod`.
func (o RulesEngineRuleMatchConditionOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesEngineRuleMatchCondition) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// can be set to one or more values out of `Lowercase`, `RemoveNulls`, `Trim`, `Uppercase`, `UrlDecode` and `UrlEncode`
func (o RulesEngineRuleMatchConditionOutput) Transforms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesEngineRuleMatchCondition) []string { return v.Transforms }).(pulumi.StringArrayOutput)
}

// (array) can contain one or more strings.
func (o RulesEngineRuleMatchConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RulesEngineRuleMatchCondition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// can be set to `IsMobile`, `RemoteAddr`, `RequestMethod`, `QueryString`, `PostArgs`, `RequestURI`, `RequestPath`, `RequestFilename`, `RequestFilenameExtension`,`RequestHeader`,`RequestBody` or `RequestScheme`.
func (o RulesEngineRuleMatchConditionOutput) Variable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesEngineRuleMatchCondition) *string { return v.Variable }).(pulumi.StringPtrOutput)
}

type RulesEngineRuleMatchConditionArrayOutput struct{ *pulumi.OutputState }

func (RulesEngineRuleMatchConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesEngineRuleMatchCondition)(nil)).Elem()
}

func (o RulesEngineRuleMatchConditionArrayOutput) ToRulesEngineRuleMatchConditionArrayOutput() RulesEngineRuleMatchConditionArrayOutput {
	return o
}

func (o RulesEngineRuleMatchConditionArrayOutput) ToRulesEngineRuleMatchConditionArrayOutputWithContext(ctx context.Context) RulesEngineRuleMatchConditionArrayOutput {
	return o
}

func (o RulesEngineRuleMatchConditionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RulesEngineRuleMatchCondition] {
	return pulumix.Output[[]RulesEngineRuleMatchCondition]{
		OutputState: o.OutputState,
	}
}

func (o RulesEngineRuleMatchConditionArrayOutput) Index(i pulumi.IntInput) RulesEngineRuleMatchConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesEngineRuleMatchCondition {
		return vs[0].([]RulesEngineRuleMatchCondition)[vs[1].(int)]
	}).(RulesEngineRuleMatchConditionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomHttpsConfigurationCustomHttpsConfigurationInput)(nil)).Elem(), CustomHttpsConfigurationCustomHttpsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomHttpsConfigurationCustomHttpsConfigurationPtrInput)(nil)).Elem(), CustomHttpsConfigurationCustomHttpsConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyCustomRuleInput)(nil)).Elem(), FirewallPolicyCustomRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyCustomRuleArrayInput)(nil)).Elem(), FirewallPolicyCustomRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyCustomRuleMatchConditionInput)(nil)).Elem(), FirewallPolicyCustomRuleMatchConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyCustomRuleMatchConditionArrayInput)(nil)).Elem(), FirewallPolicyCustomRuleMatchConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyManagedRuleInput)(nil)).Elem(), FirewallPolicyManagedRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyManagedRuleArrayInput)(nil)).Elem(), FirewallPolicyManagedRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyManagedRuleExclusionInput)(nil)).Elem(), FirewallPolicyManagedRuleExclusionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyManagedRuleExclusionArrayInput)(nil)).Elem(), FirewallPolicyManagedRuleExclusionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyManagedRuleOverrideInput)(nil)).Elem(), FirewallPolicyManagedRuleOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyManagedRuleOverrideArrayInput)(nil)).Elem(), FirewallPolicyManagedRuleOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyManagedRuleOverrideExclusionInput)(nil)).Elem(), FirewallPolicyManagedRuleOverrideExclusionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyManagedRuleOverrideExclusionArrayInput)(nil)).Elem(), FirewallPolicyManagedRuleOverrideExclusionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyManagedRuleOverrideRuleInput)(nil)).Elem(), FirewallPolicyManagedRuleOverrideRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyManagedRuleOverrideRuleArrayInput)(nil)).Elem(), FirewallPolicyManagedRuleOverrideRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyManagedRuleOverrideRuleExclusionInput)(nil)).Elem(), FirewallPolicyManagedRuleOverrideRuleExclusionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallPolicyManagedRuleOverrideRuleExclusionArrayInput)(nil)).Elem(), FirewallPolicyManagedRuleOverrideRuleExclusionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorBackendPoolInput)(nil)).Elem(), FrontdoorBackendPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorBackendPoolArrayInput)(nil)).Elem(), FrontdoorBackendPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorBackendPoolBackendInput)(nil)).Elem(), FrontdoorBackendPoolBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorBackendPoolBackendArrayInput)(nil)).Elem(), FrontdoorBackendPoolBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorBackendPoolHealthProbeInput)(nil)).Elem(), FrontdoorBackendPoolHealthProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorBackendPoolHealthProbeArrayInput)(nil)).Elem(), FrontdoorBackendPoolHealthProbeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorBackendPoolLoadBalancingInput)(nil)).Elem(), FrontdoorBackendPoolLoadBalancingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorBackendPoolLoadBalancingArrayInput)(nil)).Elem(), FrontdoorBackendPoolLoadBalancingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorBackendPoolSettingInput)(nil)).Elem(), FrontdoorBackendPoolSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorBackendPoolSettingArrayInput)(nil)).Elem(), FrontdoorBackendPoolSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorExplicitResourceOrderInput)(nil)).Elem(), FrontdoorExplicitResourceOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorExplicitResourceOrderArrayInput)(nil)).Elem(), FrontdoorExplicitResourceOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorFrontendEndpointInput)(nil)).Elem(), FrontdoorFrontendEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorFrontendEndpointArrayInput)(nil)).Elem(), FrontdoorFrontendEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorRoutingRuleInput)(nil)).Elem(), FrontdoorRoutingRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorRoutingRuleArrayInput)(nil)).Elem(), FrontdoorRoutingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorRoutingRuleForwardingConfigurationInput)(nil)).Elem(), FrontdoorRoutingRuleForwardingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorRoutingRuleForwardingConfigurationPtrInput)(nil)).Elem(), FrontdoorRoutingRuleForwardingConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorRoutingRuleRedirectConfigurationInput)(nil)).Elem(), FrontdoorRoutingRuleRedirectConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FrontdoorRoutingRuleRedirectConfigurationPtrInput)(nil)).Elem(), FrontdoorRoutingRuleRedirectConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesEngineRuleInput)(nil)).Elem(), RulesEngineRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesEngineRuleArrayInput)(nil)).Elem(), RulesEngineRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesEngineRuleActionInput)(nil)).Elem(), RulesEngineRuleActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesEngineRuleActionPtrInput)(nil)).Elem(), RulesEngineRuleActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesEngineRuleActionRequestHeaderInput)(nil)).Elem(), RulesEngineRuleActionRequestHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesEngineRuleActionRequestHeaderArrayInput)(nil)).Elem(), RulesEngineRuleActionRequestHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesEngineRuleActionResponseHeaderInput)(nil)).Elem(), RulesEngineRuleActionResponseHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesEngineRuleActionResponseHeaderArrayInput)(nil)).Elem(), RulesEngineRuleActionResponseHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesEngineRuleMatchConditionInput)(nil)).Elem(), RulesEngineRuleMatchConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesEngineRuleMatchConditionArrayInput)(nil)).Elem(), RulesEngineRuleMatchConditionArray{})
	pulumi.RegisterOutputType(CustomHttpsConfigurationCustomHttpsConfigurationOutput{})
	pulumi.RegisterOutputType(CustomHttpsConfigurationCustomHttpsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyCustomRuleOutput{})
	pulumi.RegisterOutputType(FirewallPolicyCustomRuleArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyCustomRuleMatchConditionOutput{})
	pulumi.RegisterOutputType(FirewallPolicyCustomRuleMatchConditionArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyManagedRuleOutput{})
	pulumi.RegisterOutputType(FirewallPolicyManagedRuleArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyManagedRuleExclusionOutput{})
	pulumi.RegisterOutputType(FirewallPolicyManagedRuleExclusionArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyManagedRuleOverrideOutput{})
	pulumi.RegisterOutputType(FirewallPolicyManagedRuleOverrideArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyManagedRuleOverrideExclusionOutput{})
	pulumi.RegisterOutputType(FirewallPolicyManagedRuleOverrideExclusionArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyManagedRuleOverrideRuleOutput{})
	pulumi.RegisterOutputType(FirewallPolicyManagedRuleOverrideRuleArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyManagedRuleOverrideRuleExclusionOutput{})
	pulumi.RegisterOutputType(FirewallPolicyManagedRuleOverrideRuleExclusionArrayOutput{})
	pulumi.RegisterOutputType(FrontdoorBackendPoolOutput{})
	pulumi.RegisterOutputType(FrontdoorBackendPoolArrayOutput{})
	pulumi.RegisterOutputType(FrontdoorBackendPoolBackendOutput{})
	pulumi.RegisterOutputType(FrontdoorBackendPoolBackendArrayOutput{})
	pulumi.RegisterOutputType(FrontdoorBackendPoolHealthProbeOutput{})
	pulumi.RegisterOutputType(FrontdoorBackendPoolHealthProbeArrayOutput{})
	pulumi.RegisterOutputType(FrontdoorBackendPoolLoadBalancingOutput{})
	pulumi.RegisterOutputType(FrontdoorBackendPoolLoadBalancingArrayOutput{})
	pulumi.RegisterOutputType(FrontdoorBackendPoolSettingOutput{})
	pulumi.RegisterOutputType(FrontdoorBackendPoolSettingArrayOutput{})
	pulumi.RegisterOutputType(FrontdoorExplicitResourceOrderOutput{})
	pulumi.RegisterOutputType(FrontdoorExplicitResourceOrderArrayOutput{})
	pulumi.RegisterOutputType(FrontdoorFrontendEndpointOutput{})
	pulumi.RegisterOutputType(FrontdoorFrontendEndpointArrayOutput{})
	pulumi.RegisterOutputType(FrontdoorRoutingRuleOutput{})
	pulumi.RegisterOutputType(FrontdoorRoutingRuleArrayOutput{})
	pulumi.RegisterOutputType(FrontdoorRoutingRuleForwardingConfigurationOutput{})
	pulumi.RegisterOutputType(FrontdoorRoutingRuleForwardingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FrontdoorRoutingRuleRedirectConfigurationOutput{})
	pulumi.RegisterOutputType(FrontdoorRoutingRuleRedirectConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RulesEngineRuleOutput{})
	pulumi.RegisterOutputType(RulesEngineRuleArrayOutput{})
	pulumi.RegisterOutputType(RulesEngineRuleActionOutput{})
	pulumi.RegisterOutputType(RulesEngineRuleActionPtrOutput{})
	pulumi.RegisterOutputType(RulesEngineRuleActionRequestHeaderOutput{})
	pulumi.RegisterOutputType(RulesEngineRuleActionRequestHeaderArrayOutput{})
	pulumi.RegisterOutputType(RulesEngineRuleActionResponseHeaderOutput{})
	pulumi.RegisterOutputType(RulesEngineRuleActionResponseHeaderArrayOutput{})
	pulumi.RegisterOutputType(RulesEngineRuleMatchConditionOutput{})
	pulumi.RegisterOutputType(RulesEngineRuleMatchConditionArrayOutput{})
}
