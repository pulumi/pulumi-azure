// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appinsights

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type StandardWebTestRequest struct {
	// The WebTest request body.
	Body *string `pulumi:"body"`
	// Should the following of redirects be enabled? Defaults to `true`.
	FollowRedirectsEnabled *bool `pulumi:"followRedirectsEnabled"`
	// One or more `header` blocks as defined above.
	Headers []StandardWebTestRequestHeader `pulumi:"headers"`
	// Which HTTP verb to use for the call. Options are 'GET', 'POST', 'PUT', 'PATCH', and 'DELETE'. Defaults to `GET`.
	HttpVerb *string `pulumi:"httpVerb"`
	// Should the parsing of dependend requests be enabled? Defaults to `true`.
	ParseDependentRequestsEnabled *bool `pulumi:"parseDependentRequestsEnabled"`
	// The WebTest request URL.
	Url string `pulumi:"url"`
}

// StandardWebTestRequestInput is an input type that accepts StandardWebTestRequestArgs and StandardWebTestRequestOutput values.
// You can construct a concrete instance of `StandardWebTestRequestInput` via:
//
//	StandardWebTestRequestArgs{...}
type StandardWebTestRequestInput interface {
	pulumi.Input

	ToStandardWebTestRequestOutput() StandardWebTestRequestOutput
	ToStandardWebTestRequestOutputWithContext(context.Context) StandardWebTestRequestOutput
}

type StandardWebTestRequestArgs struct {
	// The WebTest request body.
	Body pulumi.StringPtrInput `pulumi:"body"`
	// Should the following of redirects be enabled? Defaults to `true`.
	FollowRedirectsEnabled pulumi.BoolPtrInput `pulumi:"followRedirectsEnabled"`
	// One or more `header` blocks as defined above.
	Headers StandardWebTestRequestHeaderArrayInput `pulumi:"headers"`
	// Which HTTP verb to use for the call. Options are 'GET', 'POST', 'PUT', 'PATCH', and 'DELETE'. Defaults to `GET`.
	HttpVerb pulumi.StringPtrInput `pulumi:"httpVerb"`
	// Should the parsing of dependend requests be enabled? Defaults to `true`.
	ParseDependentRequestsEnabled pulumi.BoolPtrInput `pulumi:"parseDependentRequestsEnabled"`
	// The WebTest request URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (StandardWebTestRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardWebTestRequest)(nil)).Elem()
}

func (i StandardWebTestRequestArgs) ToStandardWebTestRequestOutput() StandardWebTestRequestOutput {
	return i.ToStandardWebTestRequestOutputWithContext(context.Background())
}

func (i StandardWebTestRequestArgs) ToStandardWebTestRequestOutputWithContext(ctx context.Context) StandardWebTestRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardWebTestRequestOutput)
}

func (i StandardWebTestRequestArgs) ToStandardWebTestRequestPtrOutput() StandardWebTestRequestPtrOutput {
	return i.ToStandardWebTestRequestPtrOutputWithContext(context.Background())
}

func (i StandardWebTestRequestArgs) ToStandardWebTestRequestPtrOutputWithContext(ctx context.Context) StandardWebTestRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardWebTestRequestOutput).ToStandardWebTestRequestPtrOutputWithContext(ctx)
}

// StandardWebTestRequestPtrInput is an input type that accepts StandardWebTestRequestArgs, StandardWebTestRequestPtr and StandardWebTestRequestPtrOutput values.
// You can construct a concrete instance of `StandardWebTestRequestPtrInput` via:
//
//	        StandardWebTestRequestArgs{...}
//
//	or:
//
//	        nil
type StandardWebTestRequestPtrInput interface {
	pulumi.Input

	ToStandardWebTestRequestPtrOutput() StandardWebTestRequestPtrOutput
	ToStandardWebTestRequestPtrOutputWithContext(context.Context) StandardWebTestRequestPtrOutput
}

type standardWebTestRequestPtrType StandardWebTestRequestArgs

func StandardWebTestRequestPtr(v *StandardWebTestRequestArgs) StandardWebTestRequestPtrInput {
	return (*standardWebTestRequestPtrType)(v)
}

func (*standardWebTestRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardWebTestRequest)(nil)).Elem()
}

func (i *standardWebTestRequestPtrType) ToStandardWebTestRequestPtrOutput() StandardWebTestRequestPtrOutput {
	return i.ToStandardWebTestRequestPtrOutputWithContext(context.Background())
}

func (i *standardWebTestRequestPtrType) ToStandardWebTestRequestPtrOutputWithContext(ctx context.Context) StandardWebTestRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardWebTestRequestPtrOutput)
}

type StandardWebTestRequestOutput struct{ *pulumi.OutputState }

func (StandardWebTestRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardWebTestRequest)(nil)).Elem()
}

func (o StandardWebTestRequestOutput) ToStandardWebTestRequestOutput() StandardWebTestRequestOutput {
	return o
}

func (o StandardWebTestRequestOutput) ToStandardWebTestRequestOutputWithContext(ctx context.Context) StandardWebTestRequestOutput {
	return o
}

func (o StandardWebTestRequestOutput) ToStandardWebTestRequestPtrOutput() StandardWebTestRequestPtrOutput {
	return o.ToStandardWebTestRequestPtrOutputWithContext(context.Background())
}

func (o StandardWebTestRequestOutput) ToStandardWebTestRequestPtrOutputWithContext(ctx context.Context) StandardWebTestRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StandardWebTestRequest) *StandardWebTestRequest {
		return &v
	}).(StandardWebTestRequestPtrOutput)
}

// The WebTest request body.
func (o StandardWebTestRequestOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StandardWebTestRequest) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// Should the following of redirects be enabled? Defaults to `true`.
func (o StandardWebTestRequestOutput) FollowRedirectsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StandardWebTestRequest) *bool { return v.FollowRedirectsEnabled }).(pulumi.BoolPtrOutput)
}

// One or more `header` blocks as defined above.
func (o StandardWebTestRequestOutput) Headers() StandardWebTestRequestHeaderArrayOutput {
	return o.ApplyT(func(v StandardWebTestRequest) []StandardWebTestRequestHeader { return v.Headers }).(StandardWebTestRequestHeaderArrayOutput)
}

// Which HTTP verb to use for the call. Options are 'GET', 'POST', 'PUT', 'PATCH', and 'DELETE'. Defaults to `GET`.
func (o StandardWebTestRequestOutput) HttpVerb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StandardWebTestRequest) *string { return v.HttpVerb }).(pulumi.StringPtrOutput)
}

// Should the parsing of dependend requests be enabled? Defaults to `true`.
func (o StandardWebTestRequestOutput) ParseDependentRequestsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StandardWebTestRequest) *bool { return v.ParseDependentRequestsEnabled }).(pulumi.BoolPtrOutput)
}

// The WebTest request URL.
func (o StandardWebTestRequestOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v StandardWebTestRequest) string { return v.Url }).(pulumi.StringOutput)
}

type StandardWebTestRequestPtrOutput struct{ *pulumi.OutputState }

func (StandardWebTestRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardWebTestRequest)(nil)).Elem()
}

func (o StandardWebTestRequestPtrOutput) ToStandardWebTestRequestPtrOutput() StandardWebTestRequestPtrOutput {
	return o
}

func (o StandardWebTestRequestPtrOutput) ToStandardWebTestRequestPtrOutputWithContext(ctx context.Context) StandardWebTestRequestPtrOutput {
	return o
}

func (o StandardWebTestRequestPtrOutput) Elem() StandardWebTestRequestOutput {
	return o.ApplyT(func(v *StandardWebTestRequest) StandardWebTestRequest {
		if v != nil {
			return *v
		}
		var ret StandardWebTestRequest
		return ret
	}).(StandardWebTestRequestOutput)
}

// The WebTest request body.
func (o StandardWebTestRequestPtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandardWebTestRequest) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// Should the following of redirects be enabled? Defaults to `true`.
func (o StandardWebTestRequestPtrOutput) FollowRedirectsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StandardWebTestRequest) *bool {
		if v == nil {
			return nil
		}
		return v.FollowRedirectsEnabled
	}).(pulumi.BoolPtrOutput)
}

// One or more `header` blocks as defined above.
func (o StandardWebTestRequestPtrOutput) Headers() StandardWebTestRequestHeaderArrayOutput {
	return o.ApplyT(func(v *StandardWebTestRequest) []StandardWebTestRequestHeader {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(StandardWebTestRequestHeaderArrayOutput)
}

// Which HTTP verb to use for the call. Options are 'GET', 'POST', 'PUT', 'PATCH', and 'DELETE'. Defaults to `GET`.
func (o StandardWebTestRequestPtrOutput) HttpVerb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandardWebTestRequest) *string {
		if v == nil {
			return nil
		}
		return v.HttpVerb
	}).(pulumi.StringPtrOutput)
}

// Should the parsing of dependend requests be enabled? Defaults to `true`.
func (o StandardWebTestRequestPtrOutput) ParseDependentRequestsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StandardWebTestRequest) *bool {
		if v == nil {
			return nil
		}
		return v.ParseDependentRequestsEnabled
	}).(pulumi.BoolPtrOutput)
}

// The WebTest request URL.
func (o StandardWebTestRequestPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandardWebTestRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type StandardWebTestRequestHeader struct {
	// The name which should be used for a header in the request.
	Name string `pulumi:"name"`
	// The value which should be used for a header in the request.
	Value string `pulumi:"value"`
}

// StandardWebTestRequestHeaderInput is an input type that accepts StandardWebTestRequestHeaderArgs and StandardWebTestRequestHeaderOutput values.
// You can construct a concrete instance of `StandardWebTestRequestHeaderInput` via:
//
//	StandardWebTestRequestHeaderArgs{...}
type StandardWebTestRequestHeaderInput interface {
	pulumi.Input

	ToStandardWebTestRequestHeaderOutput() StandardWebTestRequestHeaderOutput
	ToStandardWebTestRequestHeaderOutputWithContext(context.Context) StandardWebTestRequestHeaderOutput
}

type StandardWebTestRequestHeaderArgs struct {
	// The name which should be used for a header in the request.
	Name pulumi.StringInput `pulumi:"name"`
	// The value which should be used for a header in the request.
	Value pulumi.StringInput `pulumi:"value"`
}

func (StandardWebTestRequestHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardWebTestRequestHeader)(nil)).Elem()
}

func (i StandardWebTestRequestHeaderArgs) ToStandardWebTestRequestHeaderOutput() StandardWebTestRequestHeaderOutput {
	return i.ToStandardWebTestRequestHeaderOutputWithContext(context.Background())
}

func (i StandardWebTestRequestHeaderArgs) ToStandardWebTestRequestHeaderOutputWithContext(ctx context.Context) StandardWebTestRequestHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardWebTestRequestHeaderOutput)
}

// StandardWebTestRequestHeaderArrayInput is an input type that accepts StandardWebTestRequestHeaderArray and StandardWebTestRequestHeaderArrayOutput values.
// You can construct a concrete instance of `StandardWebTestRequestHeaderArrayInput` via:
//
//	StandardWebTestRequestHeaderArray{ StandardWebTestRequestHeaderArgs{...} }
type StandardWebTestRequestHeaderArrayInput interface {
	pulumi.Input

	ToStandardWebTestRequestHeaderArrayOutput() StandardWebTestRequestHeaderArrayOutput
	ToStandardWebTestRequestHeaderArrayOutputWithContext(context.Context) StandardWebTestRequestHeaderArrayOutput
}

type StandardWebTestRequestHeaderArray []StandardWebTestRequestHeaderInput

func (StandardWebTestRequestHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StandardWebTestRequestHeader)(nil)).Elem()
}

func (i StandardWebTestRequestHeaderArray) ToStandardWebTestRequestHeaderArrayOutput() StandardWebTestRequestHeaderArrayOutput {
	return i.ToStandardWebTestRequestHeaderArrayOutputWithContext(context.Background())
}

func (i StandardWebTestRequestHeaderArray) ToStandardWebTestRequestHeaderArrayOutputWithContext(ctx context.Context) StandardWebTestRequestHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardWebTestRequestHeaderArrayOutput)
}

type StandardWebTestRequestHeaderOutput struct{ *pulumi.OutputState }

func (StandardWebTestRequestHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardWebTestRequestHeader)(nil)).Elem()
}

func (o StandardWebTestRequestHeaderOutput) ToStandardWebTestRequestHeaderOutput() StandardWebTestRequestHeaderOutput {
	return o
}

func (o StandardWebTestRequestHeaderOutput) ToStandardWebTestRequestHeaderOutputWithContext(ctx context.Context) StandardWebTestRequestHeaderOutput {
	return o
}

// The name which should be used for a header in the request.
func (o StandardWebTestRequestHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StandardWebTestRequestHeader) string { return v.Name }).(pulumi.StringOutput)
}

// The value which should be used for a header in the request.
func (o StandardWebTestRequestHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v StandardWebTestRequestHeader) string { return v.Value }).(pulumi.StringOutput)
}

type StandardWebTestRequestHeaderArrayOutput struct{ *pulumi.OutputState }

func (StandardWebTestRequestHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StandardWebTestRequestHeader)(nil)).Elem()
}

func (o StandardWebTestRequestHeaderArrayOutput) ToStandardWebTestRequestHeaderArrayOutput() StandardWebTestRequestHeaderArrayOutput {
	return o
}

func (o StandardWebTestRequestHeaderArrayOutput) ToStandardWebTestRequestHeaderArrayOutputWithContext(ctx context.Context) StandardWebTestRequestHeaderArrayOutput {
	return o
}

func (o StandardWebTestRequestHeaderArrayOutput) Index(i pulumi.IntInput) StandardWebTestRequestHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StandardWebTestRequestHeader {
		return vs[0].([]StandardWebTestRequestHeader)[vs[1].(int)]
	}).(StandardWebTestRequestHeaderOutput)
}

type StandardWebTestValidationRules struct {
	// A `content` block as defined above.
	Content *StandardWebTestValidationRulesContent `pulumi:"content"`
	// The expected status code of the response. Default is '200', '0' means 'response code < 400'
	ExpectedStatusCode *int `pulumi:"expectedStatusCode"`
	// The number of days of SSL certificate validity remaining for the checked endpoint. If the certificate has a shorter remaining lifetime left, the test will fail. This number should be between 1 and 365.
	SslCertRemainingLifetime *int `pulumi:"sslCertRemainingLifetime"`
	// Should the SSL check be enabled?
	SslCheckEnabled *bool `pulumi:"sslCheckEnabled"`
}

// StandardWebTestValidationRulesInput is an input type that accepts StandardWebTestValidationRulesArgs and StandardWebTestValidationRulesOutput values.
// You can construct a concrete instance of `StandardWebTestValidationRulesInput` via:
//
//	StandardWebTestValidationRulesArgs{...}
type StandardWebTestValidationRulesInput interface {
	pulumi.Input

	ToStandardWebTestValidationRulesOutput() StandardWebTestValidationRulesOutput
	ToStandardWebTestValidationRulesOutputWithContext(context.Context) StandardWebTestValidationRulesOutput
}

type StandardWebTestValidationRulesArgs struct {
	// A `content` block as defined above.
	Content StandardWebTestValidationRulesContentPtrInput `pulumi:"content"`
	// The expected status code of the response. Default is '200', '0' means 'response code < 400'
	ExpectedStatusCode pulumi.IntPtrInput `pulumi:"expectedStatusCode"`
	// The number of days of SSL certificate validity remaining for the checked endpoint. If the certificate has a shorter remaining lifetime left, the test will fail. This number should be between 1 and 365.
	SslCertRemainingLifetime pulumi.IntPtrInput `pulumi:"sslCertRemainingLifetime"`
	// Should the SSL check be enabled?
	SslCheckEnabled pulumi.BoolPtrInput `pulumi:"sslCheckEnabled"`
}

func (StandardWebTestValidationRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardWebTestValidationRules)(nil)).Elem()
}

func (i StandardWebTestValidationRulesArgs) ToStandardWebTestValidationRulesOutput() StandardWebTestValidationRulesOutput {
	return i.ToStandardWebTestValidationRulesOutputWithContext(context.Background())
}

func (i StandardWebTestValidationRulesArgs) ToStandardWebTestValidationRulesOutputWithContext(ctx context.Context) StandardWebTestValidationRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardWebTestValidationRulesOutput)
}

func (i StandardWebTestValidationRulesArgs) ToStandardWebTestValidationRulesPtrOutput() StandardWebTestValidationRulesPtrOutput {
	return i.ToStandardWebTestValidationRulesPtrOutputWithContext(context.Background())
}

func (i StandardWebTestValidationRulesArgs) ToStandardWebTestValidationRulesPtrOutputWithContext(ctx context.Context) StandardWebTestValidationRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardWebTestValidationRulesOutput).ToStandardWebTestValidationRulesPtrOutputWithContext(ctx)
}

// StandardWebTestValidationRulesPtrInput is an input type that accepts StandardWebTestValidationRulesArgs, StandardWebTestValidationRulesPtr and StandardWebTestValidationRulesPtrOutput values.
// You can construct a concrete instance of `StandardWebTestValidationRulesPtrInput` via:
//
//	        StandardWebTestValidationRulesArgs{...}
//
//	or:
//
//	        nil
type StandardWebTestValidationRulesPtrInput interface {
	pulumi.Input

	ToStandardWebTestValidationRulesPtrOutput() StandardWebTestValidationRulesPtrOutput
	ToStandardWebTestValidationRulesPtrOutputWithContext(context.Context) StandardWebTestValidationRulesPtrOutput
}

type standardWebTestValidationRulesPtrType StandardWebTestValidationRulesArgs

func StandardWebTestValidationRulesPtr(v *StandardWebTestValidationRulesArgs) StandardWebTestValidationRulesPtrInput {
	return (*standardWebTestValidationRulesPtrType)(v)
}

func (*standardWebTestValidationRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardWebTestValidationRules)(nil)).Elem()
}

func (i *standardWebTestValidationRulesPtrType) ToStandardWebTestValidationRulesPtrOutput() StandardWebTestValidationRulesPtrOutput {
	return i.ToStandardWebTestValidationRulesPtrOutputWithContext(context.Background())
}

func (i *standardWebTestValidationRulesPtrType) ToStandardWebTestValidationRulesPtrOutputWithContext(ctx context.Context) StandardWebTestValidationRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardWebTestValidationRulesPtrOutput)
}

type StandardWebTestValidationRulesOutput struct{ *pulumi.OutputState }

func (StandardWebTestValidationRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardWebTestValidationRules)(nil)).Elem()
}

func (o StandardWebTestValidationRulesOutput) ToStandardWebTestValidationRulesOutput() StandardWebTestValidationRulesOutput {
	return o
}

func (o StandardWebTestValidationRulesOutput) ToStandardWebTestValidationRulesOutputWithContext(ctx context.Context) StandardWebTestValidationRulesOutput {
	return o
}

func (o StandardWebTestValidationRulesOutput) ToStandardWebTestValidationRulesPtrOutput() StandardWebTestValidationRulesPtrOutput {
	return o.ToStandardWebTestValidationRulesPtrOutputWithContext(context.Background())
}

func (o StandardWebTestValidationRulesOutput) ToStandardWebTestValidationRulesPtrOutputWithContext(ctx context.Context) StandardWebTestValidationRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StandardWebTestValidationRules) *StandardWebTestValidationRules {
		return &v
	}).(StandardWebTestValidationRulesPtrOutput)
}

// A `content` block as defined above.
func (o StandardWebTestValidationRulesOutput) Content() StandardWebTestValidationRulesContentPtrOutput {
	return o.ApplyT(func(v StandardWebTestValidationRules) *StandardWebTestValidationRulesContent { return v.Content }).(StandardWebTestValidationRulesContentPtrOutput)
}

// The expected status code of the response. Default is '200', '0' means 'response code < 400'
func (o StandardWebTestValidationRulesOutput) ExpectedStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StandardWebTestValidationRules) *int { return v.ExpectedStatusCode }).(pulumi.IntPtrOutput)
}

// The number of days of SSL certificate validity remaining for the checked endpoint. If the certificate has a shorter remaining lifetime left, the test will fail. This number should be between 1 and 365.
func (o StandardWebTestValidationRulesOutput) SslCertRemainingLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StandardWebTestValidationRules) *int { return v.SslCertRemainingLifetime }).(pulumi.IntPtrOutput)
}

// Should the SSL check be enabled?
func (o StandardWebTestValidationRulesOutput) SslCheckEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StandardWebTestValidationRules) *bool { return v.SslCheckEnabled }).(pulumi.BoolPtrOutput)
}

type StandardWebTestValidationRulesPtrOutput struct{ *pulumi.OutputState }

func (StandardWebTestValidationRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardWebTestValidationRules)(nil)).Elem()
}

func (o StandardWebTestValidationRulesPtrOutput) ToStandardWebTestValidationRulesPtrOutput() StandardWebTestValidationRulesPtrOutput {
	return o
}

func (o StandardWebTestValidationRulesPtrOutput) ToStandardWebTestValidationRulesPtrOutputWithContext(ctx context.Context) StandardWebTestValidationRulesPtrOutput {
	return o
}

func (o StandardWebTestValidationRulesPtrOutput) Elem() StandardWebTestValidationRulesOutput {
	return o.ApplyT(func(v *StandardWebTestValidationRules) StandardWebTestValidationRules {
		if v != nil {
			return *v
		}
		var ret StandardWebTestValidationRules
		return ret
	}).(StandardWebTestValidationRulesOutput)
}

// A `content` block as defined above.
func (o StandardWebTestValidationRulesPtrOutput) Content() StandardWebTestValidationRulesContentPtrOutput {
	return o.ApplyT(func(v *StandardWebTestValidationRules) *StandardWebTestValidationRulesContent {
		if v == nil {
			return nil
		}
		return v.Content
	}).(StandardWebTestValidationRulesContentPtrOutput)
}

// The expected status code of the response. Default is '200', '0' means 'response code < 400'
func (o StandardWebTestValidationRulesPtrOutput) ExpectedStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StandardWebTestValidationRules) *int {
		if v == nil {
			return nil
		}
		return v.ExpectedStatusCode
	}).(pulumi.IntPtrOutput)
}

// The number of days of SSL certificate validity remaining for the checked endpoint. If the certificate has a shorter remaining lifetime left, the test will fail. This number should be between 1 and 365.
func (o StandardWebTestValidationRulesPtrOutput) SslCertRemainingLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StandardWebTestValidationRules) *int {
		if v == nil {
			return nil
		}
		return v.SslCertRemainingLifetime
	}).(pulumi.IntPtrOutput)
}

// Should the SSL check be enabled?
func (o StandardWebTestValidationRulesPtrOutput) SslCheckEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StandardWebTestValidationRules) *bool {
		if v == nil {
			return nil
		}
		return v.SslCheckEnabled
	}).(pulumi.BoolPtrOutput)
}

type StandardWebTestValidationRulesContent struct {
	// A string value containing the content to match on.
	ContentMatch string `pulumi:"contentMatch"`
	// Ignore the casing in the `contentMatch` value.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// If the content of `contentMatch` is found, pass the test. If set to `false`, the WebTest is failing if the content of `contentMatch` is found.
	PassIfTextFound *bool `pulumi:"passIfTextFound"`
}

// StandardWebTestValidationRulesContentInput is an input type that accepts StandardWebTestValidationRulesContentArgs and StandardWebTestValidationRulesContentOutput values.
// You can construct a concrete instance of `StandardWebTestValidationRulesContentInput` via:
//
//	StandardWebTestValidationRulesContentArgs{...}
type StandardWebTestValidationRulesContentInput interface {
	pulumi.Input

	ToStandardWebTestValidationRulesContentOutput() StandardWebTestValidationRulesContentOutput
	ToStandardWebTestValidationRulesContentOutputWithContext(context.Context) StandardWebTestValidationRulesContentOutput
}

type StandardWebTestValidationRulesContentArgs struct {
	// A string value containing the content to match on.
	ContentMatch pulumi.StringInput `pulumi:"contentMatch"`
	// Ignore the casing in the `contentMatch` value.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// If the content of `contentMatch` is found, pass the test. If set to `false`, the WebTest is failing if the content of `contentMatch` is found.
	PassIfTextFound pulumi.BoolPtrInput `pulumi:"passIfTextFound"`
}

func (StandardWebTestValidationRulesContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardWebTestValidationRulesContent)(nil)).Elem()
}

func (i StandardWebTestValidationRulesContentArgs) ToStandardWebTestValidationRulesContentOutput() StandardWebTestValidationRulesContentOutput {
	return i.ToStandardWebTestValidationRulesContentOutputWithContext(context.Background())
}

func (i StandardWebTestValidationRulesContentArgs) ToStandardWebTestValidationRulesContentOutputWithContext(ctx context.Context) StandardWebTestValidationRulesContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardWebTestValidationRulesContentOutput)
}

func (i StandardWebTestValidationRulesContentArgs) ToStandardWebTestValidationRulesContentPtrOutput() StandardWebTestValidationRulesContentPtrOutput {
	return i.ToStandardWebTestValidationRulesContentPtrOutputWithContext(context.Background())
}

func (i StandardWebTestValidationRulesContentArgs) ToStandardWebTestValidationRulesContentPtrOutputWithContext(ctx context.Context) StandardWebTestValidationRulesContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardWebTestValidationRulesContentOutput).ToStandardWebTestValidationRulesContentPtrOutputWithContext(ctx)
}

// StandardWebTestValidationRulesContentPtrInput is an input type that accepts StandardWebTestValidationRulesContentArgs, StandardWebTestValidationRulesContentPtr and StandardWebTestValidationRulesContentPtrOutput values.
// You can construct a concrete instance of `StandardWebTestValidationRulesContentPtrInput` via:
//
//	        StandardWebTestValidationRulesContentArgs{...}
//
//	or:
//
//	        nil
type StandardWebTestValidationRulesContentPtrInput interface {
	pulumi.Input

	ToStandardWebTestValidationRulesContentPtrOutput() StandardWebTestValidationRulesContentPtrOutput
	ToStandardWebTestValidationRulesContentPtrOutputWithContext(context.Context) StandardWebTestValidationRulesContentPtrOutput
}

type standardWebTestValidationRulesContentPtrType StandardWebTestValidationRulesContentArgs

func StandardWebTestValidationRulesContentPtr(v *StandardWebTestValidationRulesContentArgs) StandardWebTestValidationRulesContentPtrInput {
	return (*standardWebTestValidationRulesContentPtrType)(v)
}

func (*standardWebTestValidationRulesContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardWebTestValidationRulesContent)(nil)).Elem()
}

func (i *standardWebTestValidationRulesContentPtrType) ToStandardWebTestValidationRulesContentPtrOutput() StandardWebTestValidationRulesContentPtrOutput {
	return i.ToStandardWebTestValidationRulesContentPtrOutputWithContext(context.Background())
}

func (i *standardWebTestValidationRulesContentPtrType) ToStandardWebTestValidationRulesContentPtrOutputWithContext(ctx context.Context) StandardWebTestValidationRulesContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardWebTestValidationRulesContentPtrOutput)
}

type StandardWebTestValidationRulesContentOutput struct{ *pulumi.OutputState }

func (StandardWebTestValidationRulesContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardWebTestValidationRulesContent)(nil)).Elem()
}

func (o StandardWebTestValidationRulesContentOutput) ToStandardWebTestValidationRulesContentOutput() StandardWebTestValidationRulesContentOutput {
	return o
}

func (o StandardWebTestValidationRulesContentOutput) ToStandardWebTestValidationRulesContentOutputWithContext(ctx context.Context) StandardWebTestValidationRulesContentOutput {
	return o
}

func (o StandardWebTestValidationRulesContentOutput) ToStandardWebTestValidationRulesContentPtrOutput() StandardWebTestValidationRulesContentPtrOutput {
	return o.ToStandardWebTestValidationRulesContentPtrOutputWithContext(context.Background())
}

func (o StandardWebTestValidationRulesContentOutput) ToStandardWebTestValidationRulesContentPtrOutputWithContext(ctx context.Context) StandardWebTestValidationRulesContentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StandardWebTestValidationRulesContent) *StandardWebTestValidationRulesContent {
		return &v
	}).(StandardWebTestValidationRulesContentPtrOutput)
}

// A string value containing the content to match on.
func (o StandardWebTestValidationRulesContentOutput) ContentMatch() pulumi.StringOutput {
	return o.ApplyT(func(v StandardWebTestValidationRulesContent) string { return v.ContentMatch }).(pulumi.StringOutput)
}

// Ignore the casing in the `contentMatch` value.
func (o StandardWebTestValidationRulesContentOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StandardWebTestValidationRulesContent) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// If the content of `contentMatch` is found, pass the test. If set to `false`, the WebTest is failing if the content of `contentMatch` is found.
func (o StandardWebTestValidationRulesContentOutput) PassIfTextFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StandardWebTestValidationRulesContent) *bool { return v.PassIfTextFound }).(pulumi.BoolPtrOutput)
}

type StandardWebTestValidationRulesContentPtrOutput struct{ *pulumi.OutputState }

func (StandardWebTestValidationRulesContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardWebTestValidationRulesContent)(nil)).Elem()
}

func (o StandardWebTestValidationRulesContentPtrOutput) ToStandardWebTestValidationRulesContentPtrOutput() StandardWebTestValidationRulesContentPtrOutput {
	return o
}

func (o StandardWebTestValidationRulesContentPtrOutput) ToStandardWebTestValidationRulesContentPtrOutputWithContext(ctx context.Context) StandardWebTestValidationRulesContentPtrOutput {
	return o
}

func (o StandardWebTestValidationRulesContentPtrOutput) Elem() StandardWebTestValidationRulesContentOutput {
	return o.ApplyT(func(v *StandardWebTestValidationRulesContent) StandardWebTestValidationRulesContent {
		if v != nil {
			return *v
		}
		var ret StandardWebTestValidationRulesContent
		return ret
	}).(StandardWebTestValidationRulesContentOutput)
}

// A string value containing the content to match on.
func (o StandardWebTestValidationRulesContentPtrOutput) ContentMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandardWebTestValidationRulesContent) *string {
		if v == nil {
			return nil
		}
		return &v.ContentMatch
	}).(pulumi.StringPtrOutput)
}

// Ignore the casing in the `contentMatch` value.
func (o StandardWebTestValidationRulesContentPtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StandardWebTestValidationRulesContent) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// If the content of `contentMatch` is found, pass the test. If set to `false`, the WebTest is failing if the content of `contentMatch` is found.
func (o StandardWebTestValidationRulesContentPtrOutput) PassIfTextFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StandardWebTestValidationRulesContent) *bool {
		if v == nil {
			return nil
		}
		return v.PassIfTextFound
	}).(pulumi.BoolPtrOutput)
}

type WorkbookIdentity struct {
	// The list of User Assigned Managed Identity IDs assigned to this Workbook. Changing this forces a new resource to be created.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID of the System Assigned Managed Service Identity that is configured on this Workbook.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID of the System Assigned Managed Service Identity that is configured on this Workbook.
	TenantId *string `pulumi:"tenantId"`
	// The type of Managed Service Identity that is configured on this Workbook. Possible values are `UserAssigned`, `SystemAssigned` and `SystemAssigned, UserAssigned`. Changing this forces a new resource to be created.
	Type string `pulumi:"type"`
}

// WorkbookIdentityInput is an input type that accepts WorkbookIdentityArgs and WorkbookIdentityOutput values.
// You can construct a concrete instance of `WorkbookIdentityInput` via:
//
//	WorkbookIdentityArgs{...}
type WorkbookIdentityInput interface {
	pulumi.Input

	ToWorkbookIdentityOutput() WorkbookIdentityOutput
	ToWorkbookIdentityOutputWithContext(context.Context) WorkbookIdentityOutput
}

type WorkbookIdentityArgs struct {
	// The list of User Assigned Managed Identity IDs assigned to this Workbook. Changing this forces a new resource to be created.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID of the System Assigned Managed Service Identity that is configured on this Workbook.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID of the System Assigned Managed Service Identity that is configured on this Workbook.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The type of Managed Service Identity that is configured on this Workbook. Possible values are `UserAssigned`, `SystemAssigned` and `SystemAssigned, UserAssigned`. Changing this forces a new resource to be created.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WorkbookIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkbookIdentity)(nil)).Elem()
}

func (i WorkbookIdentityArgs) ToWorkbookIdentityOutput() WorkbookIdentityOutput {
	return i.ToWorkbookIdentityOutputWithContext(context.Background())
}

func (i WorkbookIdentityArgs) ToWorkbookIdentityOutputWithContext(ctx context.Context) WorkbookIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkbookIdentityOutput)
}

func (i WorkbookIdentityArgs) ToWorkbookIdentityPtrOutput() WorkbookIdentityPtrOutput {
	return i.ToWorkbookIdentityPtrOutputWithContext(context.Background())
}

func (i WorkbookIdentityArgs) ToWorkbookIdentityPtrOutputWithContext(ctx context.Context) WorkbookIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkbookIdentityOutput).ToWorkbookIdentityPtrOutputWithContext(ctx)
}

// WorkbookIdentityPtrInput is an input type that accepts WorkbookIdentityArgs, WorkbookIdentityPtr and WorkbookIdentityPtrOutput values.
// You can construct a concrete instance of `WorkbookIdentityPtrInput` via:
//
//	        WorkbookIdentityArgs{...}
//
//	or:
//
//	        nil
type WorkbookIdentityPtrInput interface {
	pulumi.Input

	ToWorkbookIdentityPtrOutput() WorkbookIdentityPtrOutput
	ToWorkbookIdentityPtrOutputWithContext(context.Context) WorkbookIdentityPtrOutput
}

type workbookIdentityPtrType WorkbookIdentityArgs

func WorkbookIdentityPtr(v *WorkbookIdentityArgs) WorkbookIdentityPtrInput {
	return (*workbookIdentityPtrType)(v)
}

func (*workbookIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkbookIdentity)(nil)).Elem()
}

func (i *workbookIdentityPtrType) ToWorkbookIdentityPtrOutput() WorkbookIdentityPtrOutput {
	return i.ToWorkbookIdentityPtrOutputWithContext(context.Background())
}

func (i *workbookIdentityPtrType) ToWorkbookIdentityPtrOutputWithContext(ctx context.Context) WorkbookIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkbookIdentityPtrOutput)
}

type WorkbookIdentityOutput struct{ *pulumi.OutputState }

func (WorkbookIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkbookIdentity)(nil)).Elem()
}

func (o WorkbookIdentityOutput) ToWorkbookIdentityOutput() WorkbookIdentityOutput {
	return o
}

func (o WorkbookIdentityOutput) ToWorkbookIdentityOutputWithContext(ctx context.Context) WorkbookIdentityOutput {
	return o
}

func (o WorkbookIdentityOutput) ToWorkbookIdentityPtrOutput() WorkbookIdentityPtrOutput {
	return o.ToWorkbookIdentityPtrOutputWithContext(context.Background())
}

func (o WorkbookIdentityOutput) ToWorkbookIdentityPtrOutputWithContext(ctx context.Context) WorkbookIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkbookIdentity) *WorkbookIdentity {
		return &v
	}).(WorkbookIdentityPtrOutput)
}

// The list of User Assigned Managed Identity IDs assigned to this Workbook. Changing this forces a new resource to be created.
func (o WorkbookIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WorkbookIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID of the System Assigned Managed Service Identity that is configured on this Workbook.
func (o WorkbookIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkbookIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID of the System Assigned Managed Service Identity that is configured on this Workbook.
func (o WorkbookIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkbookIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The type of Managed Service Identity that is configured on this Workbook. Possible values are `UserAssigned`, `SystemAssigned` and `SystemAssigned, UserAssigned`. Changing this forces a new resource to be created.
func (o WorkbookIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WorkbookIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type WorkbookIdentityPtrOutput struct{ *pulumi.OutputState }

func (WorkbookIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkbookIdentity)(nil)).Elem()
}

func (o WorkbookIdentityPtrOutput) ToWorkbookIdentityPtrOutput() WorkbookIdentityPtrOutput {
	return o
}

func (o WorkbookIdentityPtrOutput) ToWorkbookIdentityPtrOutputWithContext(ctx context.Context) WorkbookIdentityPtrOutput {
	return o
}

func (o WorkbookIdentityPtrOutput) Elem() WorkbookIdentityOutput {
	return o.ApplyT(func(v *WorkbookIdentity) WorkbookIdentity {
		if v != nil {
			return *v
		}
		var ret WorkbookIdentity
		return ret
	}).(WorkbookIdentityOutput)
}

// The list of User Assigned Managed Identity IDs assigned to this Workbook. Changing this forces a new resource to be created.
func (o WorkbookIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkbookIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID of the System Assigned Managed Service Identity that is configured on this Workbook.
func (o WorkbookIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkbookIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID of the System Assigned Managed Service Identity that is configured on this Workbook.
func (o WorkbookIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkbookIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of Managed Service Identity that is configured on this Workbook. Possible values are `UserAssigned`, `SystemAssigned` and `SystemAssigned, UserAssigned`. Changing this forces a new resource to be created.
func (o WorkbookIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkbookIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type WorkbookTemplateGallery struct {
	// Category for the gallery.
	Category string `pulumi:"category"`
	// Name of the workbook template in the gallery.
	Name string `pulumi:"name"`
	// Order of the template within the gallery. Defaults to `0`.
	Order *int `pulumi:"order"`
	// Azure resource type supported by the gallery. Defaults to `Azure Monitor`.
	ResourceType *string `pulumi:"resourceType"`
	// Type of workbook supported by the workbook template. Defaults to `workbook`.
	//
	// > **Note:** See [documentation](https://docs.microsoft.com/en-us/azure/azure-monitor/visualize/workbooks-automate#galleries) for more information of `resourceType` and `type`.
	Type *string `pulumi:"type"`
}

// WorkbookTemplateGalleryInput is an input type that accepts WorkbookTemplateGalleryArgs and WorkbookTemplateGalleryOutput values.
// You can construct a concrete instance of `WorkbookTemplateGalleryInput` via:
//
//	WorkbookTemplateGalleryArgs{...}
type WorkbookTemplateGalleryInput interface {
	pulumi.Input

	ToWorkbookTemplateGalleryOutput() WorkbookTemplateGalleryOutput
	ToWorkbookTemplateGalleryOutputWithContext(context.Context) WorkbookTemplateGalleryOutput
}

type WorkbookTemplateGalleryArgs struct {
	// Category for the gallery.
	Category pulumi.StringInput `pulumi:"category"`
	// Name of the workbook template in the gallery.
	Name pulumi.StringInput `pulumi:"name"`
	// Order of the template within the gallery. Defaults to `0`.
	Order pulumi.IntPtrInput `pulumi:"order"`
	// Azure resource type supported by the gallery. Defaults to `Azure Monitor`.
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
	// Type of workbook supported by the workbook template. Defaults to `workbook`.
	//
	// > **Note:** See [documentation](https://docs.microsoft.com/en-us/azure/azure-monitor/visualize/workbooks-automate#galleries) for more information of `resourceType` and `type`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (WorkbookTemplateGalleryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkbookTemplateGallery)(nil)).Elem()
}

func (i WorkbookTemplateGalleryArgs) ToWorkbookTemplateGalleryOutput() WorkbookTemplateGalleryOutput {
	return i.ToWorkbookTemplateGalleryOutputWithContext(context.Background())
}

func (i WorkbookTemplateGalleryArgs) ToWorkbookTemplateGalleryOutputWithContext(ctx context.Context) WorkbookTemplateGalleryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkbookTemplateGalleryOutput)
}

// WorkbookTemplateGalleryArrayInput is an input type that accepts WorkbookTemplateGalleryArray and WorkbookTemplateGalleryArrayOutput values.
// You can construct a concrete instance of `WorkbookTemplateGalleryArrayInput` via:
//
//	WorkbookTemplateGalleryArray{ WorkbookTemplateGalleryArgs{...} }
type WorkbookTemplateGalleryArrayInput interface {
	pulumi.Input

	ToWorkbookTemplateGalleryArrayOutput() WorkbookTemplateGalleryArrayOutput
	ToWorkbookTemplateGalleryArrayOutputWithContext(context.Context) WorkbookTemplateGalleryArrayOutput
}

type WorkbookTemplateGalleryArray []WorkbookTemplateGalleryInput

func (WorkbookTemplateGalleryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkbookTemplateGallery)(nil)).Elem()
}

func (i WorkbookTemplateGalleryArray) ToWorkbookTemplateGalleryArrayOutput() WorkbookTemplateGalleryArrayOutput {
	return i.ToWorkbookTemplateGalleryArrayOutputWithContext(context.Background())
}

func (i WorkbookTemplateGalleryArray) ToWorkbookTemplateGalleryArrayOutputWithContext(ctx context.Context) WorkbookTemplateGalleryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkbookTemplateGalleryArrayOutput)
}

type WorkbookTemplateGalleryOutput struct{ *pulumi.OutputState }

func (WorkbookTemplateGalleryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkbookTemplateGallery)(nil)).Elem()
}

func (o WorkbookTemplateGalleryOutput) ToWorkbookTemplateGalleryOutput() WorkbookTemplateGalleryOutput {
	return o
}

func (o WorkbookTemplateGalleryOutput) ToWorkbookTemplateGalleryOutputWithContext(ctx context.Context) WorkbookTemplateGalleryOutput {
	return o
}

// Category for the gallery.
func (o WorkbookTemplateGalleryOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v WorkbookTemplateGallery) string { return v.Category }).(pulumi.StringOutput)
}

// Name of the workbook template in the gallery.
func (o WorkbookTemplateGalleryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WorkbookTemplateGallery) string { return v.Name }).(pulumi.StringOutput)
}

// Order of the template within the gallery. Defaults to `0`.
func (o WorkbookTemplateGalleryOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkbookTemplateGallery) *int { return v.Order }).(pulumi.IntPtrOutput)
}

// Azure resource type supported by the gallery. Defaults to `Azure Monitor`.
func (o WorkbookTemplateGalleryOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkbookTemplateGallery) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// Type of workbook supported by the workbook template. Defaults to `workbook`.
//
// > **Note:** See [documentation](https://docs.microsoft.com/en-us/azure/azure-monitor/visualize/workbooks-automate#galleries) for more information of `resourceType` and `type`.
func (o WorkbookTemplateGalleryOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkbookTemplateGallery) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type WorkbookTemplateGalleryArrayOutput struct{ *pulumi.OutputState }

func (WorkbookTemplateGalleryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkbookTemplateGallery)(nil)).Elem()
}

func (o WorkbookTemplateGalleryArrayOutput) ToWorkbookTemplateGalleryArrayOutput() WorkbookTemplateGalleryArrayOutput {
	return o
}

func (o WorkbookTemplateGalleryArrayOutput) ToWorkbookTemplateGalleryArrayOutputWithContext(ctx context.Context) WorkbookTemplateGalleryArrayOutput {
	return o
}

func (o WorkbookTemplateGalleryArrayOutput) Index(i pulumi.IntInput) WorkbookTemplateGalleryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkbookTemplateGallery {
		return vs[0].([]WorkbookTemplateGallery)[vs[1].(int)]
	}).(WorkbookTemplateGalleryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StandardWebTestRequestInput)(nil)).Elem(), StandardWebTestRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardWebTestRequestPtrInput)(nil)).Elem(), StandardWebTestRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardWebTestRequestHeaderInput)(nil)).Elem(), StandardWebTestRequestHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardWebTestRequestHeaderArrayInput)(nil)).Elem(), StandardWebTestRequestHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardWebTestValidationRulesInput)(nil)).Elem(), StandardWebTestValidationRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardWebTestValidationRulesPtrInput)(nil)).Elem(), StandardWebTestValidationRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardWebTestValidationRulesContentInput)(nil)).Elem(), StandardWebTestValidationRulesContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardWebTestValidationRulesContentPtrInput)(nil)).Elem(), StandardWebTestValidationRulesContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkbookIdentityInput)(nil)).Elem(), WorkbookIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkbookIdentityPtrInput)(nil)).Elem(), WorkbookIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkbookTemplateGalleryInput)(nil)).Elem(), WorkbookTemplateGalleryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkbookTemplateGalleryArrayInput)(nil)).Elem(), WorkbookTemplateGalleryArray{})
	pulumi.RegisterOutputType(StandardWebTestRequestOutput{})
	pulumi.RegisterOutputType(StandardWebTestRequestPtrOutput{})
	pulumi.RegisterOutputType(StandardWebTestRequestHeaderOutput{})
	pulumi.RegisterOutputType(StandardWebTestRequestHeaderArrayOutput{})
	pulumi.RegisterOutputType(StandardWebTestValidationRulesOutput{})
	pulumi.RegisterOutputType(StandardWebTestValidationRulesPtrOutput{})
	pulumi.RegisterOutputType(StandardWebTestValidationRulesContentOutput{})
	pulumi.RegisterOutputType(StandardWebTestValidationRulesContentPtrOutput{})
	pulumi.RegisterOutputType(WorkbookIdentityOutput{})
	pulumi.RegisterOutputType(WorkbookIdentityPtrOutput{})
	pulumi.RegisterOutputType(WorkbookTemplateGalleryOutput{})
	pulumi.RegisterOutputType(WorkbookTemplateGalleryArrayOutput{})
}
