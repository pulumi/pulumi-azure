// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package appinsights

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Application Insights Standard WebTest.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleInsights, err := appinsights.NewInsights(ctx, "exampleInsights", &appinsights.InsightsArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				ApplicationType:   pulumi.String("web"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = appinsights.NewStandardWebTest(ctx, "exampleStandardWebTest", &appinsights.StandardWebTestArgs{
//				ResourceGroupName:     exampleResourceGroup.Name,
//				Location:              pulumi.String("West Europe"),
//				ApplicationInsightsId: exampleInsights.ID(),
//				GeoLocations: pulumi.StringArray{
//					pulumi.String("example"),
//				},
//				Request: &appinsights.StandardWebTestRequestArgs{
//					Url: pulumi.String("http://www.example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Application Insights Standard WebTests can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:appinsights/standardWebTest:StandardWebTest example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Insights/webTests/appinsightswebtest
//
// ```
type StandardWebTest struct {
	pulumi.CustomResourceState

	// The ID of the Application Insights instance on which the WebTest operates. Changing this forces a new Application Insights Standard WebTest to be created.
	ApplicationInsightsId pulumi.StringOutput `pulumi:"applicationInsightsId"`
	// Purpose/user defined descriptive test for this WebTest.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Should the WebTest be enabled?
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Interval in seconds between test runs for this WebTest. Valid options are `300`, `600` and `900`. Defaults to `300`.
	Frequency pulumi.IntPtrOutput `pulumi:"frequency"`
	// Specifies a list of where to physically run the tests from to give global coverage for accessibility of your application.
	//
	// > **Note:** [Valid options for geo locations are described here](https://docs.microsoft.com/azure/azure-monitor/app/monitor-web-app-availability#location-population-tags)
	GeoLocations pulumi.StringArrayOutput `pulumi:"geoLocations"`
	// The Azure Region where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created. It needs to correlate with location of the parent resource (azurerm_application_insights)
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Application Insights Standard WebTest. Changing this forces a new Application Insights Standard WebTest to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `request` block as defined below.
	Request StandardWebTestRequestOutput `pulumi:"request"`
	// The name of the Resource Group where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Should the retry on WebTest failure be enabled?
	RetryEnabled pulumi.BoolPtrOutput `pulumi:"retryEnabled"`
	// Unique ID of this WebTest. This is typically the same value as the Name field.
	SyntheticMonitorId pulumi.StringOutput `pulumi:"syntheticMonitorId"`
	// A mapping of tags which should be assigned to the Application Insights Standard WebTest.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Seconds until this WebTest will timeout and fail. Default is `30`.
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// A `validationRules` block as defined below.
	ValidationRules StandardWebTestValidationRulesPtrOutput `pulumi:"validationRules"`
}

// NewStandardWebTest registers a new resource with the given unique name, arguments, and options.
func NewStandardWebTest(ctx *pulumi.Context,
	name string, args *StandardWebTestArgs, opts ...pulumi.ResourceOption) (*StandardWebTest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationInsightsId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationInsightsId'")
	}
	if args.GeoLocations == nil {
		return nil, errors.New("invalid value for required argument 'GeoLocations'")
	}
	if args.Request == nil {
		return nil, errors.New("invalid value for required argument 'Request'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StandardWebTest
	err := ctx.RegisterResource("azure:appinsights/standardWebTest:StandardWebTest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStandardWebTest gets an existing StandardWebTest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStandardWebTest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StandardWebTestState, opts ...pulumi.ResourceOption) (*StandardWebTest, error) {
	var resource StandardWebTest
	err := ctx.ReadResource("azure:appinsights/standardWebTest:StandardWebTest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StandardWebTest resources.
type standardWebTestState struct {
	// The ID of the Application Insights instance on which the WebTest operates. Changing this forces a new Application Insights Standard WebTest to be created.
	ApplicationInsightsId *string `pulumi:"applicationInsightsId"`
	// Purpose/user defined descriptive test for this WebTest.
	Description *string `pulumi:"description"`
	// Should the WebTest be enabled?
	Enabled *bool `pulumi:"enabled"`
	// Interval in seconds between test runs for this WebTest. Valid options are `300`, `600` and `900`. Defaults to `300`.
	Frequency *int `pulumi:"frequency"`
	// Specifies a list of where to physically run the tests from to give global coverage for accessibility of your application.
	//
	// > **Note:** [Valid options for geo locations are described here](https://docs.microsoft.com/azure/azure-monitor/app/monitor-web-app-availability#location-population-tags)
	GeoLocations []string `pulumi:"geoLocations"`
	// The Azure Region where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created. It needs to correlate with location of the parent resource (azurerm_application_insights)
	Location *string `pulumi:"location"`
	// The name which should be used for this Application Insights Standard WebTest. Changing this forces a new Application Insights Standard WebTest to be created.
	Name *string `pulumi:"name"`
	// A `request` block as defined below.
	Request *StandardWebTestRequest `pulumi:"request"`
	// The name of the Resource Group where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Should the retry on WebTest failure be enabled?
	RetryEnabled *bool `pulumi:"retryEnabled"`
	// Unique ID of this WebTest. This is typically the same value as the Name field.
	SyntheticMonitorId *string `pulumi:"syntheticMonitorId"`
	// A mapping of tags which should be assigned to the Application Insights Standard WebTest.
	Tags map[string]string `pulumi:"tags"`
	// Seconds until this WebTest will timeout and fail. Default is `30`.
	Timeout *int `pulumi:"timeout"`
	// A `validationRules` block as defined below.
	ValidationRules *StandardWebTestValidationRules `pulumi:"validationRules"`
}

type StandardWebTestState struct {
	// The ID of the Application Insights instance on which the WebTest operates. Changing this forces a new Application Insights Standard WebTest to be created.
	ApplicationInsightsId pulumi.StringPtrInput
	// Purpose/user defined descriptive test for this WebTest.
	Description pulumi.StringPtrInput
	// Should the WebTest be enabled?
	Enabled pulumi.BoolPtrInput
	// Interval in seconds between test runs for this WebTest. Valid options are `300`, `600` and `900`. Defaults to `300`.
	Frequency pulumi.IntPtrInput
	// Specifies a list of where to physically run the tests from to give global coverage for accessibility of your application.
	//
	// > **Note:** [Valid options for geo locations are described here](https://docs.microsoft.com/azure/azure-monitor/app/monitor-web-app-availability#location-population-tags)
	GeoLocations pulumi.StringArrayInput
	// The Azure Region where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created. It needs to correlate with location of the parent resource (azurerm_application_insights)
	Location pulumi.StringPtrInput
	// The name which should be used for this Application Insights Standard WebTest. Changing this forces a new Application Insights Standard WebTest to be created.
	Name pulumi.StringPtrInput
	// A `request` block as defined below.
	Request StandardWebTestRequestPtrInput
	// The name of the Resource Group where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Should the retry on WebTest failure be enabled?
	RetryEnabled pulumi.BoolPtrInput
	// Unique ID of this WebTest. This is typically the same value as the Name field.
	SyntheticMonitorId pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Application Insights Standard WebTest.
	Tags pulumi.StringMapInput
	// Seconds until this WebTest will timeout and fail. Default is `30`.
	Timeout pulumi.IntPtrInput
	// A `validationRules` block as defined below.
	ValidationRules StandardWebTestValidationRulesPtrInput
}

func (StandardWebTestState) ElementType() reflect.Type {
	return reflect.TypeOf((*standardWebTestState)(nil)).Elem()
}

type standardWebTestArgs struct {
	// The ID of the Application Insights instance on which the WebTest operates. Changing this forces a new Application Insights Standard WebTest to be created.
	ApplicationInsightsId string `pulumi:"applicationInsightsId"`
	// Purpose/user defined descriptive test for this WebTest.
	Description *string `pulumi:"description"`
	// Should the WebTest be enabled?
	Enabled *bool `pulumi:"enabled"`
	// Interval in seconds between test runs for this WebTest. Valid options are `300`, `600` and `900`. Defaults to `300`.
	Frequency *int `pulumi:"frequency"`
	// Specifies a list of where to physically run the tests from to give global coverage for accessibility of your application.
	//
	// > **Note:** [Valid options for geo locations are described here](https://docs.microsoft.com/azure/azure-monitor/app/monitor-web-app-availability#location-population-tags)
	GeoLocations []string `pulumi:"geoLocations"`
	// The Azure Region where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created. It needs to correlate with location of the parent resource (azurerm_application_insights)
	Location *string `pulumi:"location"`
	// The name which should be used for this Application Insights Standard WebTest. Changing this forces a new Application Insights Standard WebTest to be created.
	Name *string `pulumi:"name"`
	// A `request` block as defined below.
	Request StandardWebTestRequest `pulumi:"request"`
	// The name of the Resource Group where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Should the retry on WebTest failure be enabled?
	RetryEnabled *bool `pulumi:"retryEnabled"`
	// A mapping of tags which should be assigned to the Application Insights Standard WebTest.
	Tags map[string]string `pulumi:"tags"`
	// Seconds until this WebTest will timeout and fail. Default is `30`.
	Timeout *int `pulumi:"timeout"`
	// A `validationRules` block as defined below.
	ValidationRules *StandardWebTestValidationRules `pulumi:"validationRules"`
}

// The set of arguments for constructing a StandardWebTest resource.
type StandardWebTestArgs struct {
	// The ID of the Application Insights instance on which the WebTest operates. Changing this forces a new Application Insights Standard WebTest to be created.
	ApplicationInsightsId pulumi.StringInput
	// Purpose/user defined descriptive test for this WebTest.
	Description pulumi.StringPtrInput
	// Should the WebTest be enabled?
	Enabled pulumi.BoolPtrInput
	// Interval in seconds between test runs for this WebTest. Valid options are `300`, `600` and `900`. Defaults to `300`.
	Frequency pulumi.IntPtrInput
	// Specifies a list of where to physically run the tests from to give global coverage for accessibility of your application.
	//
	// > **Note:** [Valid options for geo locations are described here](https://docs.microsoft.com/azure/azure-monitor/app/monitor-web-app-availability#location-population-tags)
	GeoLocations pulumi.StringArrayInput
	// The Azure Region where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created. It needs to correlate with location of the parent resource (azurerm_application_insights)
	Location pulumi.StringPtrInput
	// The name which should be used for this Application Insights Standard WebTest. Changing this forces a new Application Insights Standard WebTest to be created.
	Name pulumi.StringPtrInput
	// A `request` block as defined below.
	Request StandardWebTestRequestInput
	// The name of the Resource Group where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created.
	ResourceGroupName pulumi.StringInput
	// Should the retry on WebTest failure be enabled?
	RetryEnabled pulumi.BoolPtrInput
	// A mapping of tags which should be assigned to the Application Insights Standard WebTest.
	Tags pulumi.StringMapInput
	// Seconds until this WebTest will timeout and fail. Default is `30`.
	Timeout pulumi.IntPtrInput
	// A `validationRules` block as defined below.
	ValidationRules StandardWebTestValidationRulesPtrInput
}

func (StandardWebTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*standardWebTestArgs)(nil)).Elem()
}

type StandardWebTestInput interface {
	pulumi.Input

	ToStandardWebTestOutput() StandardWebTestOutput
	ToStandardWebTestOutputWithContext(ctx context.Context) StandardWebTestOutput
}

func (*StandardWebTest) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardWebTest)(nil)).Elem()
}

func (i *StandardWebTest) ToStandardWebTestOutput() StandardWebTestOutput {
	return i.ToStandardWebTestOutputWithContext(context.Background())
}

func (i *StandardWebTest) ToStandardWebTestOutputWithContext(ctx context.Context) StandardWebTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardWebTestOutput)
}

// StandardWebTestArrayInput is an input type that accepts StandardWebTestArray and StandardWebTestArrayOutput values.
// You can construct a concrete instance of `StandardWebTestArrayInput` via:
//
//	StandardWebTestArray{ StandardWebTestArgs{...} }
type StandardWebTestArrayInput interface {
	pulumi.Input

	ToStandardWebTestArrayOutput() StandardWebTestArrayOutput
	ToStandardWebTestArrayOutputWithContext(context.Context) StandardWebTestArrayOutput
}

type StandardWebTestArray []StandardWebTestInput

func (StandardWebTestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StandardWebTest)(nil)).Elem()
}

func (i StandardWebTestArray) ToStandardWebTestArrayOutput() StandardWebTestArrayOutput {
	return i.ToStandardWebTestArrayOutputWithContext(context.Background())
}

func (i StandardWebTestArray) ToStandardWebTestArrayOutputWithContext(ctx context.Context) StandardWebTestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardWebTestArrayOutput)
}

// StandardWebTestMapInput is an input type that accepts StandardWebTestMap and StandardWebTestMapOutput values.
// You can construct a concrete instance of `StandardWebTestMapInput` via:
//
//	StandardWebTestMap{ "key": StandardWebTestArgs{...} }
type StandardWebTestMapInput interface {
	pulumi.Input

	ToStandardWebTestMapOutput() StandardWebTestMapOutput
	ToStandardWebTestMapOutputWithContext(context.Context) StandardWebTestMapOutput
}

type StandardWebTestMap map[string]StandardWebTestInput

func (StandardWebTestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StandardWebTest)(nil)).Elem()
}

func (i StandardWebTestMap) ToStandardWebTestMapOutput() StandardWebTestMapOutput {
	return i.ToStandardWebTestMapOutputWithContext(context.Background())
}

func (i StandardWebTestMap) ToStandardWebTestMapOutputWithContext(ctx context.Context) StandardWebTestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardWebTestMapOutput)
}

type StandardWebTestOutput struct{ *pulumi.OutputState }

func (StandardWebTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardWebTest)(nil)).Elem()
}

func (o StandardWebTestOutput) ToStandardWebTestOutput() StandardWebTestOutput {
	return o
}

func (o StandardWebTestOutput) ToStandardWebTestOutputWithContext(ctx context.Context) StandardWebTestOutput {
	return o
}

// The ID of the Application Insights instance on which the WebTest operates. Changing this forces a new Application Insights Standard WebTest to be created.
func (o StandardWebTestOutput) ApplicationInsightsId() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardWebTest) pulumi.StringOutput { return v.ApplicationInsightsId }).(pulumi.StringOutput)
}

// Purpose/user defined descriptive test for this WebTest.
func (o StandardWebTestOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandardWebTest) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Should the WebTest be enabled?
func (o StandardWebTestOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StandardWebTest) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Interval in seconds between test runs for this WebTest. Valid options are `300`, `600` and `900`. Defaults to `300`.
func (o StandardWebTestOutput) Frequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StandardWebTest) pulumi.IntPtrOutput { return v.Frequency }).(pulumi.IntPtrOutput)
}

// Specifies a list of where to physically run the tests from to give global coverage for accessibility of your application.
//
// > **Note:** [Valid options for geo locations are described here](https://docs.microsoft.com/azure/azure-monitor/app/monitor-web-app-availability#location-population-tags)
func (o StandardWebTestOutput) GeoLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StandardWebTest) pulumi.StringArrayOutput { return v.GeoLocations }).(pulumi.StringArrayOutput)
}

// The Azure Region where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created. It needs to correlate with location of the parent resource (azurerm_application_insights)
func (o StandardWebTestOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardWebTest) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Application Insights Standard WebTest. Changing this forces a new Application Insights Standard WebTest to be created.
func (o StandardWebTestOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardWebTest) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `request` block as defined below.
func (o StandardWebTestOutput) Request() StandardWebTestRequestOutput {
	return o.ApplyT(func(v *StandardWebTest) StandardWebTestRequestOutput { return v.Request }).(StandardWebTestRequestOutput)
}

// The name of the Resource Group where the Application Insights Standard WebTest should exist. Changing this forces a new Application Insights Standard WebTest to be created.
func (o StandardWebTestOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardWebTest) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Should the retry on WebTest failure be enabled?
func (o StandardWebTestOutput) RetryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StandardWebTest) pulumi.BoolPtrOutput { return v.RetryEnabled }).(pulumi.BoolPtrOutput)
}

// Unique ID of this WebTest. This is typically the same value as the Name field.
func (o StandardWebTestOutput) SyntheticMonitorId() pulumi.StringOutput {
	return o.ApplyT(func(v *StandardWebTest) pulumi.StringOutput { return v.SyntheticMonitorId }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Application Insights Standard WebTest.
func (o StandardWebTestOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StandardWebTest) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Seconds until this WebTest will timeout and fail. Default is `30`.
func (o StandardWebTestOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StandardWebTest) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

// A `validationRules` block as defined below.
func (o StandardWebTestOutput) ValidationRules() StandardWebTestValidationRulesPtrOutput {
	return o.ApplyT(func(v *StandardWebTest) StandardWebTestValidationRulesPtrOutput { return v.ValidationRules }).(StandardWebTestValidationRulesPtrOutput)
}

type StandardWebTestArrayOutput struct{ *pulumi.OutputState }

func (StandardWebTestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StandardWebTest)(nil)).Elem()
}

func (o StandardWebTestArrayOutput) ToStandardWebTestArrayOutput() StandardWebTestArrayOutput {
	return o
}

func (o StandardWebTestArrayOutput) ToStandardWebTestArrayOutputWithContext(ctx context.Context) StandardWebTestArrayOutput {
	return o
}

func (o StandardWebTestArrayOutput) Index(i pulumi.IntInput) StandardWebTestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StandardWebTest {
		return vs[0].([]*StandardWebTest)[vs[1].(int)]
	}).(StandardWebTestOutput)
}

type StandardWebTestMapOutput struct{ *pulumi.OutputState }

func (StandardWebTestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StandardWebTest)(nil)).Elem()
}

func (o StandardWebTestMapOutput) ToStandardWebTestMapOutput() StandardWebTestMapOutput {
	return o
}

func (o StandardWebTestMapOutput) ToStandardWebTestMapOutputWithContext(ctx context.Context) StandardWebTestMapOutput {
	return o
}

func (o StandardWebTestMapOutput) MapIndex(k pulumi.StringInput) StandardWebTestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StandardWebTest {
		return vs[0].(map[string]*StandardWebTest)[vs[1].(string)]
	}).(StandardWebTestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StandardWebTestInput)(nil)).Elem(), &StandardWebTest{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardWebTestArrayInput)(nil)).Elem(), StandardWebTestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardWebTestMapInput)(nil)).Elem(), StandardWebTestMap{})
	pulumi.RegisterOutputType(StandardWebTestOutput{})
	pulumi.RegisterOutputType(StandardWebTestArrayOutput{})
	pulumi.RegisterOutputType(StandardWebTestMapOutput{})
}
