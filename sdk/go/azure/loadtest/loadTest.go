// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package loadtest

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// <!-- Note: This documentation is generated. Any manual changes will be overwritten -->
//
// Manages a Load Test Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/loadtest"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authorization.NewUserAssignedIdentity(ctx, "exampleUserAssignedIdentity", &authorization.UserAssignedIdentityArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = loadtest.NewLoadTest(ctx, "exampleLoadTest", &loadtest.LoadTestArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Blocks Reference
//
// ### `identity` Block
//
// The `identity` block supports the following arguments:
//
// * `type` - (Required) Specifies the type of Managed Identity that should be assigned to this Load Test. Possible values are `SystemAssigned`, `SystemAssigned, UserAssigned` and `UserAssigned`.
// * `identityIds` - (Optional) A list of the User Assigned Identity IDs that should be assigned to this Load Test.
//
// In addition to the arguments defined above, the `identity` block exports the following attributes:
//
// * `principalId` - The Principal ID for the System-Assigned Managed Identity assigned to this Load Test.
// * `tenantId` - The Tenant ID for the System-Assigned Managed Identity assigned to this Load Test.
//
// ## Import
//
// An existing Load Test can be imported into Terraform using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:loadtest/loadTest:LoadTest example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/loadTests/{loadTestName}
//
// ```
//
//   - Where `{subscriptionId}` is the ID of the Azure Subscription where the Load Test exists. For example `12345678-1234-9876-4563-123456789012`. * Where `{resourceGroupName}` is the name of Resource Group where this Load Test exists. For example `example-resource-group`. * Where `{loadTestName}` is the name of the Load Test. For example `loadTestValue`.
type LoadTest struct {
	pulumi.CustomResourceState

	// Resource data plane URI.
	DataPlaneUri pulumi.StringOutput `pulumi:"dataPlaneUri"`
	// Description of the resource. Changing this forces a new Load Test to be created.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Load Test.
	Identity LoadTestIdentityPtrOutput `pulumi:"identity"`
	// The Azure Region where the Load Test should exist. Changing this forces a new Load Test to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of this Load Test. Changing this forces a new Load Test to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the Resource Group within which this Load Test should exist. Changing this forces a new Load Test to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Load Test.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewLoadTest registers a new resource with the given unique name, arguments, and options.
func NewLoadTest(ctx *pulumi.Context,
	name string, args *LoadTestArgs, opts ...pulumi.ResourceOption) (*LoadTest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadTest
	err := ctx.RegisterResource("azure:loadtest/loadTest:LoadTest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadTest gets an existing LoadTest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadTest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadTestState, opts ...pulumi.ResourceOption) (*LoadTest, error) {
	var resource LoadTest
	err := ctx.ReadResource("azure:loadtest/loadTest:LoadTest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadTest resources.
type loadTestState struct {
	// Resource data plane URI.
	DataPlaneUri *string `pulumi:"dataPlaneUri"`
	// Description of the resource. Changing this forces a new Load Test to be created.
	Description *string `pulumi:"description"`
	// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Load Test.
	Identity *LoadTestIdentity `pulumi:"identity"`
	// The Azure Region where the Load Test should exist. Changing this forces a new Load Test to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of this Load Test. Changing this forces a new Load Test to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group within which this Load Test should exist. Changing this forces a new Load Test to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Load Test.
	Tags map[string]string `pulumi:"tags"`
}

type LoadTestState struct {
	// Resource data plane URI.
	DataPlaneUri pulumi.StringPtrInput
	// Description of the resource. Changing this forces a new Load Test to be created.
	Description pulumi.StringPtrInput
	// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Load Test.
	Identity LoadTestIdentityPtrInput
	// The Azure Region where the Load Test should exist. Changing this forces a new Load Test to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of this Load Test. Changing this forces a new Load Test to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group within which this Load Test should exist. Changing this forces a new Load Test to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Load Test.
	Tags pulumi.StringMapInput
}

func (LoadTestState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadTestState)(nil)).Elem()
}

type loadTestArgs struct {
	// Description of the resource. Changing this forces a new Load Test to be created.
	Description *string `pulumi:"description"`
	// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Load Test.
	Identity *LoadTestIdentity `pulumi:"identity"`
	// The Azure Region where the Load Test should exist. Changing this forces a new Load Test to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of this Load Test. Changing this forces a new Load Test to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group within which this Load Test should exist. Changing this forces a new Load Test to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Load Test.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a LoadTest resource.
type LoadTestArgs struct {
	// Description of the resource. Changing this forces a new Load Test to be created.
	Description pulumi.StringPtrInput
	// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Load Test.
	Identity LoadTestIdentityPtrInput
	// The Azure Region where the Load Test should exist. Changing this forces a new Load Test to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of this Load Test. Changing this forces a new Load Test to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group within which this Load Test should exist. Changing this forces a new Load Test to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Load Test.
	Tags pulumi.StringMapInput
}

func (LoadTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadTestArgs)(nil)).Elem()
}

type LoadTestInput interface {
	pulumi.Input

	ToLoadTestOutput() LoadTestOutput
	ToLoadTestOutputWithContext(ctx context.Context) LoadTestOutput
}

func (*LoadTest) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadTest)(nil)).Elem()
}

func (i *LoadTest) ToLoadTestOutput() LoadTestOutput {
	return i.ToLoadTestOutputWithContext(context.Background())
}

func (i *LoadTest) ToLoadTestOutputWithContext(ctx context.Context) LoadTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadTestOutput)
}

// LoadTestArrayInput is an input type that accepts LoadTestArray and LoadTestArrayOutput values.
// You can construct a concrete instance of `LoadTestArrayInput` via:
//
//	LoadTestArray{ LoadTestArgs{...} }
type LoadTestArrayInput interface {
	pulumi.Input

	ToLoadTestArrayOutput() LoadTestArrayOutput
	ToLoadTestArrayOutputWithContext(context.Context) LoadTestArrayOutput
}

type LoadTestArray []LoadTestInput

func (LoadTestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadTest)(nil)).Elem()
}

func (i LoadTestArray) ToLoadTestArrayOutput() LoadTestArrayOutput {
	return i.ToLoadTestArrayOutputWithContext(context.Background())
}

func (i LoadTestArray) ToLoadTestArrayOutputWithContext(ctx context.Context) LoadTestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadTestArrayOutput)
}

// LoadTestMapInput is an input type that accepts LoadTestMap and LoadTestMapOutput values.
// You can construct a concrete instance of `LoadTestMapInput` via:
//
//	LoadTestMap{ "key": LoadTestArgs{...} }
type LoadTestMapInput interface {
	pulumi.Input

	ToLoadTestMapOutput() LoadTestMapOutput
	ToLoadTestMapOutputWithContext(context.Context) LoadTestMapOutput
}

type LoadTestMap map[string]LoadTestInput

func (LoadTestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadTest)(nil)).Elem()
}

func (i LoadTestMap) ToLoadTestMapOutput() LoadTestMapOutput {
	return i.ToLoadTestMapOutputWithContext(context.Background())
}

func (i LoadTestMap) ToLoadTestMapOutputWithContext(ctx context.Context) LoadTestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadTestMapOutput)
}

type LoadTestOutput struct{ *pulumi.OutputState }

func (LoadTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadTest)(nil)).Elem()
}

func (o LoadTestOutput) ToLoadTestOutput() LoadTestOutput {
	return o
}

func (o LoadTestOutput) ToLoadTestOutputWithContext(ctx context.Context) LoadTestOutput {
	return o
}

// Resource data plane URI.
func (o LoadTestOutput) DataPlaneUri() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadTest) pulumi.StringOutput { return v.DataPlaneUri }).(pulumi.StringOutput)
}

// Description of the resource. Changing this forces a new Load Test to be created.
func (o LoadTestOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadTest) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// An `identity` block as defined below. Specifies the Managed Identity which should be assigned to this Load Test.
func (o LoadTestOutput) Identity() LoadTestIdentityPtrOutput {
	return o.ApplyT(func(v *LoadTest) LoadTestIdentityPtrOutput { return v.Identity }).(LoadTestIdentityPtrOutput)
}

// The Azure Region where the Load Test should exist. Changing this forces a new Load Test to be created.
func (o LoadTestOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadTest) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of this Load Test. Changing this forces a new Load Test to be created.
func (o LoadTestOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadTest) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the Resource Group within which this Load Test should exist. Changing this forces a new Load Test to be created.
func (o LoadTestOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadTest) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Load Test.
func (o LoadTestOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LoadTest) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type LoadTestArrayOutput struct{ *pulumi.OutputState }

func (LoadTestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadTest)(nil)).Elem()
}

func (o LoadTestArrayOutput) ToLoadTestArrayOutput() LoadTestArrayOutput {
	return o
}

func (o LoadTestArrayOutput) ToLoadTestArrayOutputWithContext(ctx context.Context) LoadTestArrayOutput {
	return o
}

func (o LoadTestArrayOutput) Index(i pulumi.IntInput) LoadTestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadTest {
		return vs[0].([]*LoadTest)[vs[1].(int)]
	}).(LoadTestOutput)
}

type LoadTestMapOutput struct{ *pulumi.OutputState }

func (LoadTestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadTest)(nil)).Elem()
}

func (o LoadTestMapOutput) ToLoadTestMapOutput() LoadTestMapOutput {
	return o
}

func (o LoadTestMapOutput) ToLoadTestMapOutputWithContext(ctx context.Context) LoadTestMapOutput {
	return o
}

func (o LoadTestMapOutput) MapIndex(k pulumi.StringInput) LoadTestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadTest {
		return vs[0].(map[string]*LoadTest)[vs[1].(string)]
	}).(LoadTestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadTestInput)(nil)).Elem(), &LoadTest{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadTestArrayInput)(nil)).Elem(), LoadTestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadTestMapInput)(nil)).Elem(), LoadTestMap{})
	pulumi.RegisterOutputType(LoadTestOutput{})
	pulumi.RegisterOutputType(LoadTestArrayOutput{})
	pulumi.RegisterOutputType(LoadTestMapOutput{})
}
