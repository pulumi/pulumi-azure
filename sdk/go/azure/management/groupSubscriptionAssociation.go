// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package management

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Management Group Subscription Association.
//
// !> **Note:** When using this resource, configuring `subscriptionIds` on the `management.Group` resource is not supported.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/management"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "exampleManagementGroup"
// 		exampleGroup, err := management.LookupGroup(ctx, &management.LookupGroupArgs{
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt1 := "12345678-1234-1234-1234-123456789012"
// 		exampleSubscription, err := core.LookupSubscription(ctx, &core.LookupSubscriptionArgs{
// 			SubscriptionId: &opt1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = management.NewGroupSubscriptionAssociation(ctx, "exampleGroupSubscriptionAssociation", &management.GroupSubscriptionAssociationArgs{
// 			ManagementGroupId: pulumi.String(exampleGroup.Id),
// 			SubscriptionId:    pulumi.String(exampleSubscription.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Managements can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:management/groupSubscriptionAssociation:GroupSubscriptionAssociation example /managementGroup/MyManagementGroup/subscription/12345678-1234-1234-1234-123456789012
// ```
type GroupSubscriptionAssociation struct {
	pulumi.CustomResourceState

	// The ID of the Management Group to associate the Subscription with. Changing this forces a new Management to be created.
	ManagementGroupId pulumi.StringOutput `pulumi:"managementGroupId"`
	// The ID of the Subscription to be associated with the Management Group. Changing this forces a new Management to be created.
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
}

// NewGroupSubscriptionAssociation registers a new resource with the given unique name, arguments, and options.
func NewGroupSubscriptionAssociation(ctx *pulumi.Context,
	name string, args *GroupSubscriptionAssociationArgs, opts ...pulumi.ResourceOption) (*GroupSubscriptionAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagementGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ManagementGroupId'")
	}
	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	var resource GroupSubscriptionAssociation
	err := ctx.RegisterResource("azure:management/groupSubscriptionAssociation:GroupSubscriptionAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupSubscriptionAssociation gets an existing GroupSubscriptionAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupSubscriptionAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupSubscriptionAssociationState, opts ...pulumi.ResourceOption) (*GroupSubscriptionAssociation, error) {
	var resource GroupSubscriptionAssociation
	err := ctx.ReadResource("azure:management/groupSubscriptionAssociation:GroupSubscriptionAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupSubscriptionAssociation resources.
type groupSubscriptionAssociationState struct {
	// The ID of the Management Group to associate the Subscription with. Changing this forces a new Management to be created.
	ManagementGroupId *string `pulumi:"managementGroupId"`
	// The ID of the Subscription to be associated with the Management Group. Changing this forces a new Management to be created.
	SubscriptionId *string `pulumi:"subscriptionId"`
}

type GroupSubscriptionAssociationState struct {
	// The ID of the Management Group to associate the Subscription with. Changing this forces a new Management to be created.
	ManagementGroupId pulumi.StringPtrInput
	// The ID of the Subscription to be associated with the Management Group. Changing this forces a new Management to be created.
	SubscriptionId pulumi.StringPtrInput
}

func (GroupSubscriptionAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupSubscriptionAssociationState)(nil)).Elem()
}

type groupSubscriptionAssociationArgs struct {
	// The ID of the Management Group to associate the Subscription with. Changing this forces a new Management to be created.
	ManagementGroupId string `pulumi:"managementGroupId"`
	// The ID of the Subscription to be associated with the Management Group. Changing this forces a new Management to be created.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// The set of arguments for constructing a GroupSubscriptionAssociation resource.
type GroupSubscriptionAssociationArgs struct {
	// The ID of the Management Group to associate the Subscription with. Changing this forces a new Management to be created.
	ManagementGroupId pulumi.StringInput
	// The ID of the Subscription to be associated with the Management Group. Changing this forces a new Management to be created.
	SubscriptionId pulumi.StringInput
}

func (GroupSubscriptionAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupSubscriptionAssociationArgs)(nil)).Elem()
}

type GroupSubscriptionAssociationInput interface {
	pulumi.Input

	ToGroupSubscriptionAssociationOutput() GroupSubscriptionAssociationOutput
	ToGroupSubscriptionAssociationOutputWithContext(ctx context.Context) GroupSubscriptionAssociationOutput
}

func (*GroupSubscriptionAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupSubscriptionAssociation)(nil))
}

func (i *GroupSubscriptionAssociation) ToGroupSubscriptionAssociationOutput() GroupSubscriptionAssociationOutput {
	return i.ToGroupSubscriptionAssociationOutputWithContext(context.Background())
}

func (i *GroupSubscriptionAssociation) ToGroupSubscriptionAssociationOutputWithContext(ctx context.Context) GroupSubscriptionAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSubscriptionAssociationOutput)
}

func (i *GroupSubscriptionAssociation) ToGroupSubscriptionAssociationPtrOutput() GroupSubscriptionAssociationPtrOutput {
	return i.ToGroupSubscriptionAssociationPtrOutputWithContext(context.Background())
}

func (i *GroupSubscriptionAssociation) ToGroupSubscriptionAssociationPtrOutputWithContext(ctx context.Context) GroupSubscriptionAssociationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSubscriptionAssociationPtrOutput)
}

type GroupSubscriptionAssociationPtrInput interface {
	pulumi.Input

	ToGroupSubscriptionAssociationPtrOutput() GroupSubscriptionAssociationPtrOutput
	ToGroupSubscriptionAssociationPtrOutputWithContext(ctx context.Context) GroupSubscriptionAssociationPtrOutput
}

type groupSubscriptionAssociationPtrType GroupSubscriptionAssociationArgs

func (*groupSubscriptionAssociationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupSubscriptionAssociation)(nil))
}

func (i *groupSubscriptionAssociationPtrType) ToGroupSubscriptionAssociationPtrOutput() GroupSubscriptionAssociationPtrOutput {
	return i.ToGroupSubscriptionAssociationPtrOutputWithContext(context.Background())
}

func (i *groupSubscriptionAssociationPtrType) ToGroupSubscriptionAssociationPtrOutputWithContext(ctx context.Context) GroupSubscriptionAssociationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSubscriptionAssociationPtrOutput)
}

// GroupSubscriptionAssociationArrayInput is an input type that accepts GroupSubscriptionAssociationArray and GroupSubscriptionAssociationArrayOutput values.
// You can construct a concrete instance of `GroupSubscriptionAssociationArrayInput` via:
//
//          GroupSubscriptionAssociationArray{ GroupSubscriptionAssociationArgs{...} }
type GroupSubscriptionAssociationArrayInput interface {
	pulumi.Input

	ToGroupSubscriptionAssociationArrayOutput() GroupSubscriptionAssociationArrayOutput
	ToGroupSubscriptionAssociationArrayOutputWithContext(context.Context) GroupSubscriptionAssociationArrayOutput
}

type GroupSubscriptionAssociationArray []GroupSubscriptionAssociationInput

func (GroupSubscriptionAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*GroupSubscriptionAssociation)(nil))
}

func (i GroupSubscriptionAssociationArray) ToGroupSubscriptionAssociationArrayOutput() GroupSubscriptionAssociationArrayOutput {
	return i.ToGroupSubscriptionAssociationArrayOutputWithContext(context.Background())
}

func (i GroupSubscriptionAssociationArray) ToGroupSubscriptionAssociationArrayOutputWithContext(ctx context.Context) GroupSubscriptionAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSubscriptionAssociationArrayOutput)
}

// GroupSubscriptionAssociationMapInput is an input type that accepts GroupSubscriptionAssociationMap and GroupSubscriptionAssociationMapOutput values.
// You can construct a concrete instance of `GroupSubscriptionAssociationMapInput` via:
//
//          GroupSubscriptionAssociationMap{ "key": GroupSubscriptionAssociationArgs{...} }
type GroupSubscriptionAssociationMapInput interface {
	pulumi.Input

	ToGroupSubscriptionAssociationMapOutput() GroupSubscriptionAssociationMapOutput
	ToGroupSubscriptionAssociationMapOutputWithContext(context.Context) GroupSubscriptionAssociationMapOutput
}

type GroupSubscriptionAssociationMap map[string]GroupSubscriptionAssociationInput

func (GroupSubscriptionAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*GroupSubscriptionAssociation)(nil))
}

func (i GroupSubscriptionAssociationMap) ToGroupSubscriptionAssociationMapOutput() GroupSubscriptionAssociationMapOutput {
	return i.ToGroupSubscriptionAssociationMapOutputWithContext(context.Background())
}

func (i GroupSubscriptionAssociationMap) ToGroupSubscriptionAssociationMapOutputWithContext(ctx context.Context) GroupSubscriptionAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupSubscriptionAssociationMapOutput)
}

type GroupSubscriptionAssociationOutput struct {
	*pulumi.OutputState
}

func (GroupSubscriptionAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupSubscriptionAssociation)(nil))
}

func (o GroupSubscriptionAssociationOutput) ToGroupSubscriptionAssociationOutput() GroupSubscriptionAssociationOutput {
	return o
}

func (o GroupSubscriptionAssociationOutput) ToGroupSubscriptionAssociationOutputWithContext(ctx context.Context) GroupSubscriptionAssociationOutput {
	return o
}

func (o GroupSubscriptionAssociationOutput) ToGroupSubscriptionAssociationPtrOutput() GroupSubscriptionAssociationPtrOutput {
	return o.ToGroupSubscriptionAssociationPtrOutputWithContext(context.Background())
}

func (o GroupSubscriptionAssociationOutput) ToGroupSubscriptionAssociationPtrOutputWithContext(ctx context.Context) GroupSubscriptionAssociationPtrOutput {
	return o.ApplyT(func(v GroupSubscriptionAssociation) *GroupSubscriptionAssociation {
		return &v
	}).(GroupSubscriptionAssociationPtrOutput)
}

type GroupSubscriptionAssociationPtrOutput struct {
	*pulumi.OutputState
}

func (GroupSubscriptionAssociationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupSubscriptionAssociation)(nil))
}

func (o GroupSubscriptionAssociationPtrOutput) ToGroupSubscriptionAssociationPtrOutput() GroupSubscriptionAssociationPtrOutput {
	return o
}

func (o GroupSubscriptionAssociationPtrOutput) ToGroupSubscriptionAssociationPtrOutputWithContext(ctx context.Context) GroupSubscriptionAssociationPtrOutput {
	return o
}

type GroupSubscriptionAssociationArrayOutput struct{ *pulumi.OutputState }

func (GroupSubscriptionAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupSubscriptionAssociation)(nil))
}

func (o GroupSubscriptionAssociationArrayOutput) ToGroupSubscriptionAssociationArrayOutput() GroupSubscriptionAssociationArrayOutput {
	return o
}

func (o GroupSubscriptionAssociationArrayOutput) ToGroupSubscriptionAssociationArrayOutputWithContext(ctx context.Context) GroupSubscriptionAssociationArrayOutput {
	return o
}

func (o GroupSubscriptionAssociationArrayOutput) Index(i pulumi.IntInput) GroupSubscriptionAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupSubscriptionAssociation {
		return vs[0].([]GroupSubscriptionAssociation)[vs[1].(int)]
	}).(GroupSubscriptionAssociationOutput)
}

type GroupSubscriptionAssociationMapOutput struct{ *pulumi.OutputState }

func (GroupSubscriptionAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GroupSubscriptionAssociation)(nil))
}

func (o GroupSubscriptionAssociationMapOutput) ToGroupSubscriptionAssociationMapOutput() GroupSubscriptionAssociationMapOutput {
	return o
}

func (o GroupSubscriptionAssociationMapOutput) ToGroupSubscriptionAssociationMapOutputWithContext(ctx context.Context) GroupSubscriptionAssociationMapOutput {
	return o
}

func (o GroupSubscriptionAssociationMapOutput) MapIndex(k pulumi.StringInput) GroupSubscriptionAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GroupSubscriptionAssociation {
		return vs[0].(map[string]GroupSubscriptionAssociation)[vs[1].(string)]
	}).(GroupSubscriptionAssociationOutput)
}

func init() {
	pulumi.RegisterOutputType(GroupSubscriptionAssociationOutput{})
	pulumi.RegisterOutputType(GroupSubscriptionAssociationPtrOutput{})
	pulumi.RegisterOutputType(GroupSubscriptionAssociationArrayOutput{})
	pulumi.RegisterOutputType(GroupSubscriptionAssociationMapOutput{})
}
