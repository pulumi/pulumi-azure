// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package management

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Management Group Policy Exemption.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/management"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/policy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleGroup, err := management.NewGroup(ctx, "exampleGroup", &management.GroupArgs{
//				DisplayName: pulumi.String("Example MgmtGroup"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePolicySetDefinition, err := policy.LookupPolicySetDefinition(ctx, &policy.LookupPolicySetDefinitionArgs{
//				DisplayName: pulumi.StringRef("Audit machines with insecure password security settings"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGroupPolicyAssignment, err := management.NewGroupPolicyAssignment(ctx, "exampleGroupPolicyAssignment", &management.GroupPolicyAssignmentArgs{
//				ManagementGroupId:  exampleGroup.ID(),
//				PolicyDefinitionId: *pulumi.String(examplePolicySetDefinition.Id),
//				Location:           pulumi.String("westus"),
//				Identity: &management.GroupPolicyAssignmentIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = management.NewGroupPolicyExemption(ctx, "exampleGroupPolicyExemption", &management.GroupPolicyExemptionArgs{
//				ManagementGroupId:  exampleGroup.ID(),
//				PolicyAssignmentId: exampleGroupPolicyAssignment.ID(),
//				ExemptionCategory:  pulumi.String("Mitigated"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Policy Exemptions can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:management/groupPolicyExemption:GroupPolicyExemption exemption1 /providers/Microsoft.Management/managementGroups/group1/providers/Microsoft.Authorization/policyExemptions/exemption1
//
// ```
type GroupPolicyExemption struct {
	pulumi.CustomResourceState

	// A description to use for this Policy Exemption.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A friendly display name to use for this Policy Exemption.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory pulumi.StringOutput `pulumi:"exemptionCategory"`
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn pulumi.StringPtrOutput `pulumi:"expiresOn"`
	// The Management Group ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	ManagementGroupId pulumi.StringOutput `pulumi:"managementGroupId"`
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Policy Assignment to be exempted at the specified Scope.
	PolicyAssignmentId pulumi.StringOutput `pulumi:"policyAssignmentId"`
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds pulumi.StringArrayOutput `pulumi:"policyDefinitionReferenceIds"`
}

// NewGroupPolicyExemption registers a new resource with the given unique name, arguments, and options.
func NewGroupPolicyExemption(ctx *pulumi.Context,
	name string, args *GroupPolicyExemptionArgs, opts ...pulumi.ResourceOption) (*GroupPolicyExemption, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExemptionCategory == nil {
		return nil, errors.New("invalid value for required argument 'ExemptionCategory'")
	}
	if args.ManagementGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ManagementGroupId'")
	}
	if args.PolicyAssignmentId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyAssignmentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupPolicyExemption
	err := ctx.RegisterResource("azure:management/groupPolicyExemption:GroupPolicyExemption", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupPolicyExemption gets an existing GroupPolicyExemption resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupPolicyExemption(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupPolicyExemptionState, opts ...pulumi.ResourceOption) (*GroupPolicyExemption, error) {
	var resource GroupPolicyExemption
	err := ctx.ReadResource("azure:management/groupPolicyExemption:GroupPolicyExemption", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupPolicyExemption resources.
type groupPolicyExemptionState struct {
	// A description to use for this Policy Exemption.
	Description *string `pulumi:"description"`
	// A friendly display name to use for this Policy Exemption.
	DisplayName *string `pulumi:"displayName"`
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory *string `pulumi:"exemptionCategory"`
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn *string `pulumi:"expiresOn"`
	// The Management Group ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	ManagementGroupId *string `pulumi:"managementGroupId"`
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata *string `pulumi:"metadata"`
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Policy Assignment to be exempted at the specified Scope.
	PolicyAssignmentId *string `pulumi:"policyAssignmentId"`
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds []string `pulumi:"policyDefinitionReferenceIds"`
}

type GroupPolicyExemptionState struct {
	// A description to use for this Policy Exemption.
	Description pulumi.StringPtrInput
	// A friendly display name to use for this Policy Exemption.
	DisplayName pulumi.StringPtrInput
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory pulumi.StringPtrInput
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn pulumi.StringPtrInput
	// The Management Group ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	ManagementGroupId pulumi.StringPtrInput
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata pulumi.StringPtrInput
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Policy Assignment to be exempted at the specified Scope.
	PolicyAssignmentId pulumi.StringPtrInput
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds pulumi.StringArrayInput
}

func (GroupPolicyExemptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPolicyExemptionState)(nil)).Elem()
}

type groupPolicyExemptionArgs struct {
	// A description to use for this Policy Exemption.
	Description *string `pulumi:"description"`
	// A friendly display name to use for this Policy Exemption.
	DisplayName *string `pulumi:"displayName"`
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory string `pulumi:"exemptionCategory"`
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn *string `pulumi:"expiresOn"`
	// The Management Group ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	ManagementGroupId string `pulumi:"managementGroupId"`
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata *string `pulumi:"metadata"`
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Policy Assignment to be exempted at the specified Scope.
	PolicyAssignmentId string `pulumi:"policyAssignmentId"`
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds []string `pulumi:"policyDefinitionReferenceIds"`
}

// The set of arguments for constructing a GroupPolicyExemption resource.
type GroupPolicyExemptionArgs struct {
	// A description to use for this Policy Exemption.
	Description pulumi.StringPtrInput
	// A friendly display name to use for this Policy Exemption.
	DisplayName pulumi.StringPtrInput
	// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
	ExemptionCategory pulumi.StringInput
	// The expiration date and time in UTC ISO 8601 format of this policy exemption.
	ExpiresOn pulumi.StringPtrInput
	// The Management Group ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
	ManagementGroupId pulumi.StringInput
	// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
	Metadata pulumi.StringPtrInput
	// The name of the Policy Exemption. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Policy Assignment to be exempted at the specified Scope.
	PolicyAssignmentId pulumi.StringInput
	// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
	PolicyDefinitionReferenceIds pulumi.StringArrayInput
}

func (GroupPolicyExemptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPolicyExemptionArgs)(nil)).Elem()
}

type GroupPolicyExemptionInput interface {
	pulumi.Input

	ToGroupPolicyExemptionOutput() GroupPolicyExemptionOutput
	ToGroupPolicyExemptionOutputWithContext(ctx context.Context) GroupPolicyExemptionOutput
}

func (*GroupPolicyExemption) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyExemption)(nil)).Elem()
}

func (i *GroupPolicyExemption) ToGroupPolicyExemptionOutput() GroupPolicyExemptionOutput {
	return i.ToGroupPolicyExemptionOutputWithContext(context.Background())
}

func (i *GroupPolicyExemption) ToGroupPolicyExemptionOutputWithContext(ctx context.Context) GroupPolicyExemptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyExemptionOutput)
}

// GroupPolicyExemptionArrayInput is an input type that accepts GroupPolicyExemptionArray and GroupPolicyExemptionArrayOutput values.
// You can construct a concrete instance of `GroupPolicyExemptionArrayInput` via:
//
//	GroupPolicyExemptionArray{ GroupPolicyExemptionArgs{...} }
type GroupPolicyExemptionArrayInput interface {
	pulumi.Input

	ToGroupPolicyExemptionArrayOutput() GroupPolicyExemptionArrayOutput
	ToGroupPolicyExemptionArrayOutputWithContext(context.Context) GroupPolicyExemptionArrayOutput
}

type GroupPolicyExemptionArray []GroupPolicyExemptionInput

func (GroupPolicyExemptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupPolicyExemption)(nil)).Elem()
}

func (i GroupPolicyExemptionArray) ToGroupPolicyExemptionArrayOutput() GroupPolicyExemptionArrayOutput {
	return i.ToGroupPolicyExemptionArrayOutputWithContext(context.Background())
}

func (i GroupPolicyExemptionArray) ToGroupPolicyExemptionArrayOutputWithContext(ctx context.Context) GroupPolicyExemptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyExemptionArrayOutput)
}

// GroupPolicyExemptionMapInput is an input type that accepts GroupPolicyExemptionMap and GroupPolicyExemptionMapOutput values.
// You can construct a concrete instance of `GroupPolicyExemptionMapInput` via:
//
//	GroupPolicyExemptionMap{ "key": GroupPolicyExemptionArgs{...} }
type GroupPolicyExemptionMapInput interface {
	pulumi.Input

	ToGroupPolicyExemptionMapOutput() GroupPolicyExemptionMapOutput
	ToGroupPolicyExemptionMapOutputWithContext(context.Context) GroupPolicyExemptionMapOutput
}

type GroupPolicyExemptionMap map[string]GroupPolicyExemptionInput

func (GroupPolicyExemptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupPolicyExemption)(nil)).Elem()
}

func (i GroupPolicyExemptionMap) ToGroupPolicyExemptionMapOutput() GroupPolicyExemptionMapOutput {
	return i.ToGroupPolicyExemptionMapOutputWithContext(context.Background())
}

func (i GroupPolicyExemptionMap) ToGroupPolicyExemptionMapOutputWithContext(ctx context.Context) GroupPolicyExemptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyExemptionMapOutput)
}

type GroupPolicyExemptionOutput struct{ *pulumi.OutputState }

func (GroupPolicyExemptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyExemption)(nil)).Elem()
}

func (o GroupPolicyExemptionOutput) ToGroupPolicyExemptionOutput() GroupPolicyExemptionOutput {
	return o
}

func (o GroupPolicyExemptionOutput) ToGroupPolicyExemptionOutputWithContext(ctx context.Context) GroupPolicyExemptionOutput {
	return o
}

// A description to use for this Policy Exemption.
func (o GroupPolicyExemptionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicyExemption) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A friendly display name to use for this Policy Exemption.
func (o GroupPolicyExemptionOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicyExemption) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The category of this policy exemption. Possible values are `Waiver` and `Mitigated`.
func (o GroupPolicyExemptionOutput) ExemptionCategory() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicyExemption) pulumi.StringOutput { return v.ExemptionCategory }).(pulumi.StringOutput)
}

// The expiration date and time in UTC ISO 8601 format of this policy exemption.
func (o GroupPolicyExemptionOutput) ExpiresOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicyExemption) pulumi.StringPtrOutput { return v.ExpiresOn }).(pulumi.StringPtrOutput)
}

// The Management Group ID where the Policy Exemption should be applied. Changing this forces a new resource to be created.
func (o GroupPolicyExemptionOutput) ManagementGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicyExemption) pulumi.StringOutput { return v.ManagementGroupId }).(pulumi.StringOutput)
}

// The metadata for this policy exemption. This is a JSON string representing additional metadata that should be stored with the policy exemption.
func (o GroupPolicyExemptionOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicyExemption) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

// The name of the Policy Exemption. Changing this forces a new resource to be created.
func (o GroupPolicyExemptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicyExemption) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Policy Assignment to be exempted at the specified Scope.
func (o GroupPolicyExemptionOutput) PolicyAssignmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicyExemption) pulumi.StringOutput { return v.PolicyAssignmentId }).(pulumi.StringOutput)
}

// The policy definition reference ID list when the associated policy assignment is an assignment of a policy set definition.
func (o GroupPolicyExemptionOutput) PolicyDefinitionReferenceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupPolicyExemption) pulumi.StringArrayOutput { return v.PolicyDefinitionReferenceIds }).(pulumi.StringArrayOutput)
}

type GroupPolicyExemptionArrayOutput struct{ *pulumi.OutputState }

func (GroupPolicyExemptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupPolicyExemption)(nil)).Elem()
}

func (o GroupPolicyExemptionArrayOutput) ToGroupPolicyExemptionArrayOutput() GroupPolicyExemptionArrayOutput {
	return o
}

func (o GroupPolicyExemptionArrayOutput) ToGroupPolicyExemptionArrayOutputWithContext(ctx context.Context) GroupPolicyExemptionArrayOutput {
	return o
}

func (o GroupPolicyExemptionArrayOutput) Index(i pulumi.IntInput) GroupPolicyExemptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupPolicyExemption {
		return vs[0].([]*GroupPolicyExemption)[vs[1].(int)]
	}).(GroupPolicyExemptionOutput)
}

type GroupPolicyExemptionMapOutput struct{ *pulumi.OutputState }

func (GroupPolicyExemptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupPolicyExemption)(nil)).Elem()
}

func (o GroupPolicyExemptionMapOutput) ToGroupPolicyExemptionMapOutput() GroupPolicyExemptionMapOutput {
	return o
}

func (o GroupPolicyExemptionMapOutput) ToGroupPolicyExemptionMapOutputWithContext(ctx context.Context) GroupPolicyExemptionMapOutput {
	return o
}

func (o GroupPolicyExemptionMapOutput) MapIndex(k pulumi.StringInput) GroupPolicyExemptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupPolicyExemption {
		return vs[0].(map[string]*GroupPolicyExemption)[vs[1].(string)]
	}).(GroupPolicyExemptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyExemptionInput)(nil)).Elem(), &GroupPolicyExemption{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyExemptionArrayInput)(nil)).Elem(), GroupPolicyExemptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyExemptionMapInput)(nil)).Elem(), GroupPolicyExemptionMap{})
	pulumi.RegisterOutputType(GroupPolicyExemptionOutput{})
	pulumi.RegisterOutputType(GroupPolicyExemptionArrayOutput{})
	pulumi.RegisterOutputType(GroupPolicyExemptionMapOutput{})
}
