// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package management

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GroupPolicyAssignmentIdentity struct {
	// A list of User Managed Identity IDs which should be assigned to the Policy Definition.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID of the Policy Assignment for this Management Group.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID of the Policy Assignment for this Management Group.
	TenantId *string `pulumi:"tenantId"`
	// The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` and `UserAssigned`.
	Type string `pulumi:"type"`
}

// GroupPolicyAssignmentIdentityInput is an input type that accepts GroupPolicyAssignmentIdentityArgs and GroupPolicyAssignmentIdentityOutput values.
// You can construct a concrete instance of `GroupPolicyAssignmentIdentityInput` via:
//
//          GroupPolicyAssignmentIdentityArgs{...}
type GroupPolicyAssignmentIdentityInput interface {
	pulumi.Input

	ToGroupPolicyAssignmentIdentityOutput() GroupPolicyAssignmentIdentityOutput
	ToGroupPolicyAssignmentIdentityOutputWithContext(context.Context) GroupPolicyAssignmentIdentityOutput
}

type GroupPolicyAssignmentIdentityArgs struct {
	// A list of User Managed Identity IDs which should be assigned to the Policy Definition.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID of the Policy Assignment for this Management Group.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID of the Policy Assignment for this Management Group.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` and `UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GroupPolicyAssignmentIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicyAssignmentIdentity)(nil)).Elem()
}

func (i GroupPolicyAssignmentIdentityArgs) ToGroupPolicyAssignmentIdentityOutput() GroupPolicyAssignmentIdentityOutput {
	return i.ToGroupPolicyAssignmentIdentityOutputWithContext(context.Background())
}

func (i GroupPolicyAssignmentIdentityArgs) ToGroupPolicyAssignmentIdentityOutputWithContext(ctx context.Context) GroupPolicyAssignmentIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAssignmentIdentityOutput)
}

func (i GroupPolicyAssignmentIdentityArgs) ToGroupPolicyAssignmentIdentityPtrOutput() GroupPolicyAssignmentIdentityPtrOutput {
	return i.ToGroupPolicyAssignmentIdentityPtrOutputWithContext(context.Background())
}

func (i GroupPolicyAssignmentIdentityArgs) ToGroupPolicyAssignmentIdentityPtrOutputWithContext(ctx context.Context) GroupPolicyAssignmentIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAssignmentIdentityOutput).ToGroupPolicyAssignmentIdentityPtrOutputWithContext(ctx)
}

// GroupPolicyAssignmentIdentityPtrInput is an input type that accepts GroupPolicyAssignmentIdentityArgs, GroupPolicyAssignmentIdentityPtr and GroupPolicyAssignmentIdentityPtrOutput values.
// You can construct a concrete instance of `GroupPolicyAssignmentIdentityPtrInput` via:
//
//          GroupPolicyAssignmentIdentityArgs{...}
//
//  or:
//
//          nil
type GroupPolicyAssignmentIdentityPtrInput interface {
	pulumi.Input

	ToGroupPolicyAssignmentIdentityPtrOutput() GroupPolicyAssignmentIdentityPtrOutput
	ToGroupPolicyAssignmentIdentityPtrOutputWithContext(context.Context) GroupPolicyAssignmentIdentityPtrOutput
}

type groupPolicyAssignmentIdentityPtrType GroupPolicyAssignmentIdentityArgs

func GroupPolicyAssignmentIdentityPtr(v *GroupPolicyAssignmentIdentityArgs) GroupPolicyAssignmentIdentityPtrInput {
	return (*groupPolicyAssignmentIdentityPtrType)(v)
}

func (*groupPolicyAssignmentIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyAssignmentIdentity)(nil)).Elem()
}

func (i *groupPolicyAssignmentIdentityPtrType) ToGroupPolicyAssignmentIdentityPtrOutput() GroupPolicyAssignmentIdentityPtrOutput {
	return i.ToGroupPolicyAssignmentIdentityPtrOutputWithContext(context.Background())
}

func (i *groupPolicyAssignmentIdentityPtrType) ToGroupPolicyAssignmentIdentityPtrOutputWithContext(ctx context.Context) GroupPolicyAssignmentIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAssignmentIdentityPtrOutput)
}

type GroupPolicyAssignmentIdentityOutput struct{ *pulumi.OutputState }

func (GroupPolicyAssignmentIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicyAssignmentIdentity)(nil)).Elem()
}

func (o GroupPolicyAssignmentIdentityOutput) ToGroupPolicyAssignmentIdentityOutput() GroupPolicyAssignmentIdentityOutput {
	return o
}

func (o GroupPolicyAssignmentIdentityOutput) ToGroupPolicyAssignmentIdentityOutputWithContext(ctx context.Context) GroupPolicyAssignmentIdentityOutput {
	return o
}

func (o GroupPolicyAssignmentIdentityOutput) ToGroupPolicyAssignmentIdentityPtrOutput() GroupPolicyAssignmentIdentityPtrOutput {
	return o.ToGroupPolicyAssignmentIdentityPtrOutputWithContext(context.Background())
}

func (o GroupPolicyAssignmentIdentityOutput) ToGroupPolicyAssignmentIdentityPtrOutputWithContext(ctx context.Context) GroupPolicyAssignmentIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupPolicyAssignmentIdentity) *GroupPolicyAssignmentIdentity {
		return &v
	}).(GroupPolicyAssignmentIdentityPtrOutput)
}

// A list of User Managed Identity IDs which should be assigned to the Policy Definition.
func (o GroupPolicyAssignmentIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupPolicyAssignmentIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID of the Policy Assignment for this Management Group.
func (o GroupPolicyAssignmentIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPolicyAssignmentIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID of the Policy Assignment for this Management Group.
func (o GroupPolicyAssignmentIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPolicyAssignmentIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` and `UserAssigned`.
func (o GroupPolicyAssignmentIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GroupPolicyAssignmentIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GroupPolicyAssignmentIdentityPtrOutput struct{ *pulumi.OutputState }

func (GroupPolicyAssignmentIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyAssignmentIdentity)(nil)).Elem()
}

func (o GroupPolicyAssignmentIdentityPtrOutput) ToGroupPolicyAssignmentIdentityPtrOutput() GroupPolicyAssignmentIdentityPtrOutput {
	return o
}

func (o GroupPolicyAssignmentIdentityPtrOutput) ToGroupPolicyAssignmentIdentityPtrOutputWithContext(ctx context.Context) GroupPolicyAssignmentIdentityPtrOutput {
	return o
}

func (o GroupPolicyAssignmentIdentityPtrOutput) Elem() GroupPolicyAssignmentIdentityOutput {
	return o.ApplyT(func(v *GroupPolicyAssignmentIdentity) GroupPolicyAssignmentIdentity {
		if v != nil {
			return *v
		}
		var ret GroupPolicyAssignmentIdentity
		return ret
	}).(GroupPolicyAssignmentIdentityOutput)
}

// A list of User Managed Identity IDs which should be assigned to the Policy Definition.
func (o GroupPolicyAssignmentIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupPolicyAssignmentIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID of the Policy Assignment for this Management Group.
func (o GroupPolicyAssignmentIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicyAssignmentIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID of the Policy Assignment for this Management Group.
func (o GroupPolicyAssignmentIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicyAssignmentIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The Type of Managed Identity which should be added to this Policy Definition. Possible values are `SystemAssigned` and `UserAssigned`.
func (o GroupPolicyAssignmentIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupPolicyAssignmentIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type GroupPolicyAssignmentNonComplianceMessage struct {
	// The non-compliance message text. When assigning policy sets (initiatives), unless `policyDefinitionReferenceId` is specified then this message will be the default for all policies.
	Content string `pulumi:"content"`
	// When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
	PolicyDefinitionReferenceId *string `pulumi:"policyDefinitionReferenceId"`
}

// GroupPolicyAssignmentNonComplianceMessageInput is an input type that accepts GroupPolicyAssignmentNonComplianceMessageArgs and GroupPolicyAssignmentNonComplianceMessageOutput values.
// You can construct a concrete instance of `GroupPolicyAssignmentNonComplianceMessageInput` via:
//
//          GroupPolicyAssignmentNonComplianceMessageArgs{...}
type GroupPolicyAssignmentNonComplianceMessageInput interface {
	pulumi.Input

	ToGroupPolicyAssignmentNonComplianceMessageOutput() GroupPolicyAssignmentNonComplianceMessageOutput
	ToGroupPolicyAssignmentNonComplianceMessageOutputWithContext(context.Context) GroupPolicyAssignmentNonComplianceMessageOutput
}

type GroupPolicyAssignmentNonComplianceMessageArgs struct {
	// The non-compliance message text. When assigning policy sets (initiatives), unless `policyDefinitionReferenceId` is specified then this message will be the default for all policies.
	Content pulumi.StringInput `pulumi:"content"`
	// When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
	PolicyDefinitionReferenceId pulumi.StringPtrInput `pulumi:"policyDefinitionReferenceId"`
}

func (GroupPolicyAssignmentNonComplianceMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicyAssignmentNonComplianceMessage)(nil)).Elem()
}

func (i GroupPolicyAssignmentNonComplianceMessageArgs) ToGroupPolicyAssignmentNonComplianceMessageOutput() GroupPolicyAssignmentNonComplianceMessageOutput {
	return i.ToGroupPolicyAssignmentNonComplianceMessageOutputWithContext(context.Background())
}

func (i GroupPolicyAssignmentNonComplianceMessageArgs) ToGroupPolicyAssignmentNonComplianceMessageOutputWithContext(ctx context.Context) GroupPolicyAssignmentNonComplianceMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAssignmentNonComplianceMessageOutput)
}

// GroupPolicyAssignmentNonComplianceMessageArrayInput is an input type that accepts GroupPolicyAssignmentNonComplianceMessageArray and GroupPolicyAssignmentNonComplianceMessageArrayOutput values.
// You can construct a concrete instance of `GroupPolicyAssignmentNonComplianceMessageArrayInput` via:
//
//          GroupPolicyAssignmentNonComplianceMessageArray{ GroupPolicyAssignmentNonComplianceMessageArgs{...} }
type GroupPolicyAssignmentNonComplianceMessageArrayInput interface {
	pulumi.Input

	ToGroupPolicyAssignmentNonComplianceMessageArrayOutput() GroupPolicyAssignmentNonComplianceMessageArrayOutput
	ToGroupPolicyAssignmentNonComplianceMessageArrayOutputWithContext(context.Context) GroupPolicyAssignmentNonComplianceMessageArrayOutput
}

type GroupPolicyAssignmentNonComplianceMessageArray []GroupPolicyAssignmentNonComplianceMessageInput

func (GroupPolicyAssignmentNonComplianceMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupPolicyAssignmentNonComplianceMessage)(nil)).Elem()
}

func (i GroupPolicyAssignmentNonComplianceMessageArray) ToGroupPolicyAssignmentNonComplianceMessageArrayOutput() GroupPolicyAssignmentNonComplianceMessageArrayOutput {
	return i.ToGroupPolicyAssignmentNonComplianceMessageArrayOutputWithContext(context.Background())
}

func (i GroupPolicyAssignmentNonComplianceMessageArray) ToGroupPolicyAssignmentNonComplianceMessageArrayOutputWithContext(ctx context.Context) GroupPolicyAssignmentNonComplianceMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAssignmentNonComplianceMessageArrayOutput)
}

type GroupPolicyAssignmentNonComplianceMessageOutput struct{ *pulumi.OutputState }

func (GroupPolicyAssignmentNonComplianceMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicyAssignmentNonComplianceMessage)(nil)).Elem()
}

func (o GroupPolicyAssignmentNonComplianceMessageOutput) ToGroupPolicyAssignmentNonComplianceMessageOutput() GroupPolicyAssignmentNonComplianceMessageOutput {
	return o
}

func (o GroupPolicyAssignmentNonComplianceMessageOutput) ToGroupPolicyAssignmentNonComplianceMessageOutputWithContext(ctx context.Context) GroupPolicyAssignmentNonComplianceMessageOutput {
	return o
}

// The non-compliance message text. When assigning policy sets (initiatives), unless `policyDefinitionReferenceId` is specified then this message will be the default for all policies.
func (o GroupPolicyAssignmentNonComplianceMessageOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v GroupPolicyAssignmentNonComplianceMessage) string { return v.Content }).(pulumi.StringOutput)
}

// When assigning policy sets (initiatives), this is the ID of the policy definition that the non-compliance message applies to.
func (o GroupPolicyAssignmentNonComplianceMessageOutput) PolicyDefinitionReferenceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupPolicyAssignmentNonComplianceMessage) *string { return v.PolicyDefinitionReferenceId }).(pulumi.StringPtrOutput)
}

type GroupPolicyAssignmentNonComplianceMessageArrayOutput struct{ *pulumi.OutputState }

func (GroupPolicyAssignmentNonComplianceMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupPolicyAssignmentNonComplianceMessage)(nil)).Elem()
}

func (o GroupPolicyAssignmentNonComplianceMessageArrayOutput) ToGroupPolicyAssignmentNonComplianceMessageArrayOutput() GroupPolicyAssignmentNonComplianceMessageArrayOutput {
	return o
}

func (o GroupPolicyAssignmentNonComplianceMessageArrayOutput) ToGroupPolicyAssignmentNonComplianceMessageArrayOutputWithContext(ctx context.Context) GroupPolicyAssignmentNonComplianceMessageArrayOutput {
	return o
}

func (o GroupPolicyAssignmentNonComplianceMessageArrayOutput) Index(i pulumi.IntInput) GroupPolicyAssignmentNonComplianceMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupPolicyAssignmentNonComplianceMessage {
		return vs[0].([]GroupPolicyAssignmentNonComplianceMessage)[vs[1].(int)]
	}).(GroupPolicyAssignmentNonComplianceMessageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAssignmentIdentityInput)(nil)).Elem(), GroupPolicyAssignmentIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAssignmentIdentityPtrInput)(nil)).Elem(), GroupPolicyAssignmentIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAssignmentNonComplianceMessageInput)(nil)).Elem(), GroupPolicyAssignmentNonComplianceMessageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAssignmentNonComplianceMessageArrayInput)(nil)).Elem(), GroupPolicyAssignmentNonComplianceMessageArray{})
	pulumi.RegisterOutputType(GroupPolicyAssignmentIdentityOutput{})
	pulumi.RegisterOutputType(GroupPolicyAssignmentIdentityPtrOutput{})
	pulumi.RegisterOutputType(GroupPolicyAssignmentNonComplianceMessageOutput{})
	pulumi.RegisterOutputType(GroupPolicyAssignmentNonComplianceMessageArrayOutput{})
}
