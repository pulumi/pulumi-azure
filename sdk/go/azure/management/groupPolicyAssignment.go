// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package management

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Policy Assignment to a Management Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/management"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/policy"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleGroup, err := management.NewGroup(ctx, "exampleGroup", &management.GroupArgs{
// 			DisplayName: pulumi.String("Some Management Group"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleDefinition, err := policy.NewDefinition(ctx, "exampleDefinition", &policy.DefinitionArgs{
// 			PolicyType:        pulumi.String("Custom"),
// 			Mode:              pulumi.String("All"),
// 			ManagementGroupId: exampleGroup.GroupId,
// 			PolicyRule: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v", "	{\n", "    \"if\": {\n", "      \"not\": {\n", "        \"field\": \"location\",\n", "        \"equals\": \"westeurope\"\n", "      }\n", "    },\n", "    \"then\": {\n", "      \"effect\": \"Deny\"\n", "    }\n", "  }\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = management.NewGroupPolicyAssignment(ctx, "exampleGroupPolicyAssignment", &management.GroupPolicyAssignmentArgs{
// 			PolicyDefinitionId: exampleDefinition.ID(),
// 			ManagementGroupId:  exampleGroup.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Management Group Policy Assignments can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:management/groupPolicyAssignment:GroupPolicyAssignment example /providers/Microsoft.Management/managementGroups/group1/providers/Microsoft.Authorization/policyAssignments/assignment1
// ```
type GroupPolicyAssignment struct {
	pulumi.CustomResourceState

	// A description which should be used for this Policy Assignment.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Display Name for this Policy Assignment.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Specifies if this Policy should be enforced or not?
	Enforce pulumi.BoolPtrOutput `pulumi:"enforce"`
	// An `identity` block as defined below.
	Identity GroupPolicyAssignmentIdentityPtrOutput `pulumi:"identity"`
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The ID of the Management Group. Changing this forces a new Policy Assignment to be created.
	ManagementGroupId pulumi.StringOutput `pulumi:"managementGroupId"`
	// A JSON mapping of any Metadata for this Policy.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes pulumi.StringArrayOutput `pulumi:"notScopes"`
	// A JSON mapping of any Parameters for this Policy. Changing this forces a new Management Group Policy Assignment to be created.
	Parameters pulumi.StringPtrOutput `pulumi:"parameters"`
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId pulumi.StringOutput `pulumi:"policyDefinitionId"`
}

// NewGroupPolicyAssignment registers a new resource with the given unique name, arguments, and options.
func NewGroupPolicyAssignment(ctx *pulumi.Context,
	name string, args *GroupPolicyAssignmentArgs, opts ...pulumi.ResourceOption) (*GroupPolicyAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagementGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ManagementGroupId'")
	}
	if args.PolicyDefinitionId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDefinitionId'")
	}
	var resource GroupPolicyAssignment
	err := ctx.RegisterResource("azure:management/groupPolicyAssignment:GroupPolicyAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupPolicyAssignment gets an existing GroupPolicyAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupPolicyAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupPolicyAssignmentState, opts ...pulumi.ResourceOption) (*GroupPolicyAssignment, error) {
	var resource GroupPolicyAssignment
	err := ctx.ReadResource("azure:management/groupPolicyAssignment:GroupPolicyAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupPolicyAssignment resources.
type groupPolicyAssignmentState struct {
	// A description which should be used for this Policy Assignment.
	Description *string `pulumi:"description"`
	// The Display Name for this Policy Assignment.
	DisplayName *string `pulumi:"displayName"`
	// Specifies if this Policy should be enforced or not?
	Enforce *bool `pulumi:"enforce"`
	// An `identity` block as defined below.
	Identity *GroupPolicyAssignmentIdentity `pulumi:"identity"`
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location *string `pulumi:"location"`
	// The ID of the Management Group. Changing this forces a new Policy Assignment to be created.
	ManagementGroupId *string `pulumi:"managementGroupId"`
	// A JSON mapping of any Metadata for this Policy.
	Metadata *string `pulumi:"metadata"`
	// The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created.
	Name *string `pulumi:"name"`
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes []string `pulumi:"notScopes"`
	// A JSON mapping of any Parameters for this Policy. Changing this forces a new Management Group Policy Assignment to be created.
	Parameters *string `pulumi:"parameters"`
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId *string `pulumi:"policyDefinitionId"`
}

type GroupPolicyAssignmentState struct {
	// A description which should be used for this Policy Assignment.
	Description pulumi.StringPtrInput
	// The Display Name for this Policy Assignment.
	DisplayName pulumi.StringPtrInput
	// Specifies if this Policy should be enforced or not?
	Enforce pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity GroupPolicyAssignmentIdentityPtrInput
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location pulumi.StringPtrInput
	// The ID of the Management Group. Changing this forces a new Policy Assignment to be created.
	ManagementGroupId pulumi.StringPtrInput
	// A JSON mapping of any Metadata for this Policy.
	Metadata pulumi.StringPtrInput
	// The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created.
	Name pulumi.StringPtrInput
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes pulumi.StringArrayInput
	// A JSON mapping of any Parameters for this Policy. Changing this forces a new Management Group Policy Assignment to be created.
	Parameters pulumi.StringPtrInput
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId pulumi.StringPtrInput
}

func (GroupPolicyAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPolicyAssignmentState)(nil)).Elem()
}

type groupPolicyAssignmentArgs struct {
	// A description which should be used for this Policy Assignment.
	Description *string `pulumi:"description"`
	// The Display Name for this Policy Assignment.
	DisplayName *string `pulumi:"displayName"`
	// Specifies if this Policy should be enforced or not?
	Enforce *bool `pulumi:"enforce"`
	// An `identity` block as defined below.
	Identity *GroupPolicyAssignmentIdentity `pulumi:"identity"`
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location *string `pulumi:"location"`
	// The ID of the Management Group. Changing this forces a new Policy Assignment to be created.
	ManagementGroupId string `pulumi:"managementGroupId"`
	// A JSON mapping of any Metadata for this Policy.
	Metadata *string `pulumi:"metadata"`
	// The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created.
	Name *string `pulumi:"name"`
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes []string `pulumi:"notScopes"`
	// A JSON mapping of any Parameters for this Policy. Changing this forces a new Management Group Policy Assignment to be created.
	Parameters *string `pulumi:"parameters"`
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId string `pulumi:"policyDefinitionId"`
}

// The set of arguments for constructing a GroupPolicyAssignment resource.
type GroupPolicyAssignmentArgs struct {
	// A description which should be used for this Policy Assignment.
	Description pulumi.StringPtrInput
	// The Display Name for this Policy Assignment.
	DisplayName pulumi.StringPtrInput
	// Specifies if this Policy should be enforced or not?
	Enforce pulumi.BoolPtrInput
	// An `identity` block as defined below.
	Identity GroupPolicyAssignmentIdentityPtrInput
	// The Azure Region where the Policy Assignment should exist. Changing this forces a new Policy Assignment to be created.
	Location pulumi.StringPtrInput
	// The ID of the Management Group. Changing this forces a new Policy Assignment to be created.
	ManagementGroupId pulumi.StringInput
	// A JSON mapping of any Metadata for this Policy.
	Metadata pulumi.StringPtrInput
	// The name which should be used for this Policy Assignment. Changing this forces a new Policy Assignment to be created.
	Name pulumi.StringPtrInput
	// Specifies a list of Resource Scopes (for example a Subscription, or a Resource Group) within this Management Group which are excluded from this Policy.
	NotScopes pulumi.StringArrayInput
	// A JSON mapping of any Parameters for this Policy. Changing this forces a new Management Group Policy Assignment to be created.
	Parameters pulumi.StringPtrInput
	// The ID of the Policy Definition or Policy Definition Set. Changing this forces a new Policy Assignment to be created.
	PolicyDefinitionId pulumi.StringInput
}

func (GroupPolicyAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPolicyAssignmentArgs)(nil)).Elem()
}

type GroupPolicyAssignmentInput interface {
	pulumi.Input

	ToGroupPolicyAssignmentOutput() GroupPolicyAssignmentOutput
	ToGroupPolicyAssignmentOutputWithContext(ctx context.Context) GroupPolicyAssignmentOutput
}

func (*GroupPolicyAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicyAssignment)(nil))
}

func (i *GroupPolicyAssignment) ToGroupPolicyAssignmentOutput() GroupPolicyAssignmentOutput {
	return i.ToGroupPolicyAssignmentOutputWithContext(context.Background())
}

func (i *GroupPolicyAssignment) ToGroupPolicyAssignmentOutputWithContext(ctx context.Context) GroupPolicyAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAssignmentOutput)
}

func (i *GroupPolicyAssignment) ToGroupPolicyAssignmentPtrOutput() GroupPolicyAssignmentPtrOutput {
	return i.ToGroupPolicyAssignmentPtrOutputWithContext(context.Background())
}

func (i *GroupPolicyAssignment) ToGroupPolicyAssignmentPtrOutputWithContext(ctx context.Context) GroupPolicyAssignmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAssignmentPtrOutput)
}

type GroupPolicyAssignmentPtrInput interface {
	pulumi.Input

	ToGroupPolicyAssignmentPtrOutput() GroupPolicyAssignmentPtrOutput
	ToGroupPolicyAssignmentPtrOutputWithContext(ctx context.Context) GroupPolicyAssignmentPtrOutput
}

type groupPolicyAssignmentPtrType GroupPolicyAssignmentArgs

func (*groupPolicyAssignmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyAssignment)(nil))
}

func (i *groupPolicyAssignmentPtrType) ToGroupPolicyAssignmentPtrOutput() GroupPolicyAssignmentPtrOutput {
	return i.ToGroupPolicyAssignmentPtrOutputWithContext(context.Background())
}

func (i *groupPolicyAssignmentPtrType) ToGroupPolicyAssignmentPtrOutputWithContext(ctx context.Context) GroupPolicyAssignmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAssignmentPtrOutput)
}

// GroupPolicyAssignmentArrayInput is an input type that accepts GroupPolicyAssignmentArray and GroupPolicyAssignmentArrayOutput values.
// You can construct a concrete instance of `GroupPolicyAssignmentArrayInput` via:
//
//          GroupPolicyAssignmentArray{ GroupPolicyAssignmentArgs{...} }
type GroupPolicyAssignmentArrayInput interface {
	pulumi.Input

	ToGroupPolicyAssignmentArrayOutput() GroupPolicyAssignmentArrayOutput
	ToGroupPolicyAssignmentArrayOutputWithContext(context.Context) GroupPolicyAssignmentArrayOutput
}

type GroupPolicyAssignmentArray []GroupPolicyAssignmentInput

func (GroupPolicyAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupPolicyAssignment)(nil)).Elem()
}

func (i GroupPolicyAssignmentArray) ToGroupPolicyAssignmentArrayOutput() GroupPolicyAssignmentArrayOutput {
	return i.ToGroupPolicyAssignmentArrayOutputWithContext(context.Background())
}

func (i GroupPolicyAssignmentArray) ToGroupPolicyAssignmentArrayOutputWithContext(ctx context.Context) GroupPolicyAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAssignmentArrayOutput)
}

// GroupPolicyAssignmentMapInput is an input type that accepts GroupPolicyAssignmentMap and GroupPolicyAssignmentMapOutput values.
// You can construct a concrete instance of `GroupPolicyAssignmentMapInput` via:
//
//          GroupPolicyAssignmentMap{ "key": GroupPolicyAssignmentArgs{...} }
type GroupPolicyAssignmentMapInput interface {
	pulumi.Input

	ToGroupPolicyAssignmentMapOutput() GroupPolicyAssignmentMapOutput
	ToGroupPolicyAssignmentMapOutputWithContext(context.Context) GroupPolicyAssignmentMapOutput
}

type GroupPolicyAssignmentMap map[string]GroupPolicyAssignmentInput

func (GroupPolicyAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupPolicyAssignment)(nil)).Elem()
}

func (i GroupPolicyAssignmentMap) ToGroupPolicyAssignmentMapOutput() GroupPolicyAssignmentMapOutput {
	return i.ToGroupPolicyAssignmentMapOutputWithContext(context.Background())
}

func (i GroupPolicyAssignmentMap) ToGroupPolicyAssignmentMapOutputWithContext(ctx context.Context) GroupPolicyAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAssignmentMapOutput)
}

type GroupPolicyAssignmentOutput struct{ *pulumi.OutputState }

func (GroupPolicyAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupPolicyAssignment)(nil))
}

func (o GroupPolicyAssignmentOutput) ToGroupPolicyAssignmentOutput() GroupPolicyAssignmentOutput {
	return o
}

func (o GroupPolicyAssignmentOutput) ToGroupPolicyAssignmentOutputWithContext(ctx context.Context) GroupPolicyAssignmentOutput {
	return o
}

func (o GroupPolicyAssignmentOutput) ToGroupPolicyAssignmentPtrOutput() GroupPolicyAssignmentPtrOutput {
	return o.ToGroupPolicyAssignmentPtrOutputWithContext(context.Background())
}

func (o GroupPolicyAssignmentOutput) ToGroupPolicyAssignmentPtrOutputWithContext(ctx context.Context) GroupPolicyAssignmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupPolicyAssignment) *GroupPolicyAssignment {
		return &v
	}).(GroupPolicyAssignmentPtrOutput)
}

type GroupPolicyAssignmentPtrOutput struct{ *pulumi.OutputState }

func (GroupPolicyAssignmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyAssignment)(nil))
}

func (o GroupPolicyAssignmentPtrOutput) ToGroupPolicyAssignmentPtrOutput() GroupPolicyAssignmentPtrOutput {
	return o
}

func (o GroupPolicyAssignmentPtrOutput) ToGroupPolicyAssignmentPtrOutputWithContext(ctx context.Context) GroupPolicyAssignmentPtrOutput {
	return o
}

func (o GroupPolicyAssignmentPtrOutput) Elem() GroupPolicyAssignmentOutput {
	return o.ApplyT(func(v *GroupPolicyAssignment) GroupPolicyAssignment {
		if v != nil {
			return *v
		}
		var ret GroupPolicyAssignment
		return ret
	}).(GroupPolicyAssignmentOutput)
}

type GroupPolicyAssignmentArrayOutput struct{ *pulumi.OutputState }

func (GroupPolicyAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupPolicyAssignment)(nil))
}

func (o GroupPolicyAssignmentArrayOutput) ToGroupPolicyAssignmentArrayOutput() GroupPolicyAssignmentArrayOutput {
	return o
}

func (o GroupPolicyAssignmentArrayOutput) ToGroupPolicyAssignmentArrayOutputWithContext(ctx context.Context) GroupPolicyAssignmentArrayOutput {
	return o
}

func (o GroupPolicyAssignmentArrayOutput) Index(i pulumi.IntInput) GroupPolicyAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupPolicyAssignment {
		return vs[0].([]GroupPolicyAssignment)[vs[1].(int)]
	}).(GroupPolicyAssignmentOutput)
}

type GroupPolicyAssignmentMapOutput struct{ *pulumi.OutputState }

func (GroupPolicyAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GroupPolicyAssignment)(nil))
}

func (o GroupPolicyAssignmentMapOutput) ToGroupPolicyAssignmentMapOutput() GroupPolicyAssignmentMapOutput {
	return o
}

func (o GroupPolicyAssignmentMapOutput) ToGroupPolicyAssignmentMapOutputWithContext(ctx context.Context) GroupPolicyAssignmentMapOutput {
	return o
}

func (o GroupPolicyAssignmentMapOutput) MapIndex(k pulumi.StringInput) GroupPolicyAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GroupPolicyAssignment {
		return vs[0].(map[string]GroupPolicyAssignment)[vs[1].(string)]
	}).(GroupPolicyAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAssignmentInput)(nil)).Elem(), &GroupPolicyAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAssignmentPtrInput)(nil)).Elem(), &GroupPolicyAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAssignmentArrayInput)(nil)).Elem(), GroupPolicyAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAssignmentMapInput)(nil)).Elem(), GroupPolicyAssignmentMap{})
	pulumi.RegisterOutputType(GroupPolicyAssignmentOutput{})
	pulumi.RegisterOutputType(GroupPolicyAssignmentPtrOutput{})
	pulumi.RegisterOutputType(GroupPolicyAssignmentArrayOutput{})
	pulumi.RegisterOutputType(GroupPolicyAssignmentMapOutput{})
}
