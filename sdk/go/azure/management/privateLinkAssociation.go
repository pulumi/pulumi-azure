// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package management

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Resource Management Private Link Association.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/management"
//	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleClientConfig, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = management.LookupGroup(ctx, &management.LookupGroupArgs{
//				Name: pulumi.StringRef(exampleClientConfig.TenantId),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePrivateLink, err := management.NewPrivateLink(ctx, "examplePrivateLink", &management.PrivateLinkArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = random.NewRandomUuid(ctx, "exampleRandomUuid", nil)
//			if err != nil {
//				return err
//			}
//			_, err = management.NewPrivateLinkAssociation(ctx, "examplePrivateLinkAssociation", &management.PrivateLinkAssociationArgs{
//				ManagementGroupId:               pulumi.Any(azurerm_management_group.Example.Id),
//				ResourceManagementPrivateLinkId: examplePrivateLink.ID(),
//				PublicNetworkAccessEnabled:      pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An existing Private Link Association can be imported into Terraform using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:management/privateLinkAssociation:PrivateLinkAssociation example /providers/Microsoft.Management/managementGroups/00000000-0000-0000-0000-000000000000/providers/Microsoft.Authorization/privateLinkAssociations/00000000-0000-0000-0000-000000000000
//
// ```
type PrivateLinkAssociation struct {
	pulumi.CustomResourceState

	// Specifies the Management Group ID within which this Private Link Association should exist. Changing this forces a new Private Link Association to be created.
	//
	// > **Note:** For now, `managementGroupId` must be the ID of [Root Management Group](https://learn.microsoft.com/en-us/azure/governance/management-groups/overview#root-management-group-for-each-directory).
	ManagementGroupId pulumi.StringOutput `pulumi:"managementGroupId"`
	// Specifies the name of this Private Link Association, which should be a UUID. If `name` is not provided, a UUID will be generated, you should use the `ignoreChanges` attribute to ignore changes to this field. Changing this forces a new Private Link Association to be created.
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/management"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := management.NewPrivateLinkAssociation(ctx, "example", &management.PrivateLinkAssociationArgs{
	// 			ManagementGroupId:               pulumi.Any(azurerm_management_group.Example.Id),
	// 			ResourceManagementPrivateLinkId: pulumi.Any(azurerm_resource_management_private_link.Example.Id),
	// 			PublicNetworkAccessEnabled:      pulumi.Bool(true),
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether public network access is allowed. Changing this forces a new Private Link Association to be created.
	PublicNetworkAccessEnabled pulumi.BoolOutput `pulumi:"publicNetworkAccessEnabled"`
	// The Resource ID of Resource Management Private Link. Changing this forces a new Private Link Association to be created.
	ResourceManagementPrivateLinkId pulumi.StringOutput `pulumi:"resourceManagementPrivateLinkId"`
	// The Tenant ID.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewPrivateLinkAssociation registers a new resource with the given unique name, arguments, and options.
func NewPrivateLinkAssociation(ctx *pulumi.Context,
	name string, args *PrivateLinkAssociationArgs, opts ...pulumi.ResourceOption) (*PrivateLinkAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagementGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ManagementGroupId'")
	}
	if args.PublicNetworkAccessEnabled == nil {
		return nil, errors.New("invalid value for required argument 'PublicNetworkAccessEnabled'")
	}
	if args.ResourceManagementPrivateLinkId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceManagementPrivateLinkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrivateLinkAssociation
	err := ctx.RegisterResource("azure:management/privateLinkAssociation:PrivateLinkAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateLinkAssociation gets an existing PrivateLinkAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateLinkAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivateLinkAssociationState, opts ...pulumi.ResourceOption) (*PrivateLinkAssociation, error) {
	var resource PrivateLinkAssociation
	err := ctx.ReadResource("azure:management/privateLinkAssociation:PrivateLinkAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivateLinkAssociation resources.
type privateLinkAssociationState struct {
	// Specifies the Management Group ID within which this Private Link Association should exist. Changing this forces a new Private Link Association to be created.
	//
	// > **Note:** For now, `managementGroupId` must be the ID of [Root Management Group](https://learn.microsoft.com/en-us/azure/governance/management-groups/overview#root-management-group-for-each-directory).
	ManagementGroupId *string `pulumi:"managementGroupId"`
	// Specifies the name of this Private Link Association, which should be a UUID. If `name` is not provided, a UUID will be generated, you should use the `ignoreChanges` attribute to ignore changes to this field. Changing this forces a new Private Link Association to be created.
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/management"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := management.NewPrivateLinkAssociation(ctx, "example", &management.PrivateLinkAssociationArgs{
	// 			ManagementGroupId:               pulumi.Any(azurerm_management_group.Example.Id),
	// 			ResourceManagementPrivateLinkId: pulumi.Any(azurerm_resource_management_private_link.Example.Id),
	// 			PublicNetworkAccessEnabled:      pulumi.Bool(true),
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name *string `pulumi:"name"`
	// Whether public network access is allowed. Changing this forces a new Private Link Association to be created.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The Resource ID of Resource Management Private Link. Changing this forces a new Private Link Association to be created.
	ResourceManagementPrivateLinkId *string `pulumi:"resourceManagementPrivateLinkId"`
	// The Tenant ID.
	TenantId *string `pulumi:"tenantId"`
}

type PrivateLinkAssociationState struct {
	// Specifies the Management Group ID within which this Private Link Association should exist. Changing this forces a new Private Link Association to be created.
	//
	// > **Note:** For now, `managementGroupId` must be the ID of [Root Management Group](https://learn.microsoft.com/en-us/azure/governance/management-groups/overview#root-management-group-for-each-directory).
	ManagementGroupId pulumi.StringPtrInput
	// Specifies the name of this Private Link Association, which should be a UUID. If `name` is not provided, a UUID will be generated, you should use the `ignoreChanges` attribute to ignore changes to this field. Changing this forces a new Private Link Association to be created.
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/management"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := management.NewPrivateLinkAssociation(ctx, "example", &management.PrivateLinkAssociationArgs{
	// 			ManagementGroupId:               pulumi.Any(azurerm_management_group.Example.Id),
	// 			ResourceManagementPrivateLinkId: pulumi.Any(azurerm_resource_management_private_link.Example.Id),
	// 			PublicNetworkAccessEnabled:      pulumi.Bool(true),
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name pulumi.StringPtrInput
	// Whether public network access is allowed. Changing this forces a new Private Link Association to be created.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The Resource ID of Resource Management Private Link. Changing this forces a new Private Link Association to be created.
	ResourceManagementPrivateLinkId pulumi.StringPtrInput
	// The Tenant ID.
	TenantId pulumi.StringPtrInput
}

func (PrivateLinkAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*privateLinkAssociationState)(nil)).Elem()
}

type privateLinkAssociationArgs struct {
	// Specifies the Management Group ID within which this Private Link Association should exist. Changing this forces a new Private Link Association to be created.
	//
	// > **Note:** For now, `managementGroupId` must be the ID of [Root Management Group](https://learn.microsoft.com/en-us/azure/governance/management-groups/overview#root-management-group-for-each-directory).
	ManagementGroupId string `pulumi:"managementGroupId"`
	// Specifies the name of this Private Link Association, which should be a UUID. If `name` is not provided, a UUID will be generated, you should use the `ignoreChanges` attribute to ignore changes to this field. Changing this forces a new Private Link Association to be created.
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/management"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := management.NewPrivateLinkAssociation(ctx, "example", &management.PrivateLinkAssociationArgs{
	// 			ManagementGroupId:               pulumi.Any(azurerm_management_group.Example.Id),
	// 			ResourceManagementPrivateLinkId: pulumi.Any(azurerm_resource_management_private_link.Example.Id),
	// 			PublicNetworkAccessEnabled:      pulumi.Bool(true),
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name *string `pulumi:"name"`
	// Whether public network access is allowed. Changing this forces a new Private Link Association to be created.
	PublicNetworkAccessEnabled bool `pulumi:"publicNetworkAccessEnabled"`
	// The Resource ID of Resource Management Private Link. Changing this forces a new Private Link Association to be created.
	ResourceManagementPrivateLinkId string `pulumi:"resourceManagementPrivateLinkId"`
}

// The set of arguments for constructing a PrivateLinkAssociation resource.
type PrivateLinkAssociationArgs struct {
	// Specifies the Management Group ID within which this Private Link Association should exist. Changing this forces a new Private Link Association to be created.
	//
	// > **Note:** For now, `managementGroupId` must be the ID of [Root Management Group](https://learn.microsoft.com/en-us/azure/governance/management-groups/overview#root-management-group-for-each-directory).
	ManagementGroupId pulumi.StringInput
	// Specifies the name of this Private Link Association, which should be a UUID. If `name` is not provided, a UUID will be generated, you should use the `ignoreChanges` attribute to ignore changes to this field. Changing this forces a new Private Link Association to be created.
	//
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/management"
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		_, err := management.NewPrivateLinkAssociation(ctx, "example", &management.PrivateLinkAssociationArgs{
	// 			ManagementGroupId:               pulumi.Any(azurerm_management_group.Example.Id),
	// 			ResourceManagementPrivateLinkId: pulumi.Any(azurerm_resource_management_private_link.Example.Id),
	// 			PublicNetworkAccessEnabled:      pulumi.Bool(true),
	// 		})
	// 		if err != nil {
	// 			return err
	// 		}
	// 		return nil
	// 	})
	// }
	// ```
	Name pulumi.StringPtrInput
	// Whether public network access is allowed. Changing this forces a new Private Link Association to be created.
	PublicNetworkAccessEnabled pulumi.BoolInput
	// The Resource ID of Resource Management Private Link. Changing this forces a new Private Link Association to be created.
	ResourceManagementPrivateLinkId pulumi.StringInput
}

func (PrivateLinkAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privateLinkAssociationArgs)(nil)).Elem()
}

type PrivateLinkAssociationInput interface {
	pulumi.Input

	ToPrivateLinkAssociationOutput() PrivateLinkAssociationOutput
	ToPrivateLinkAssociationOutputWithContext(ctx context.Context) PrivateLinkAssociationOutput
}

func (*PrivateLinkAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAssociation)(nil)).Elem()
}

func (i *PrivateLinkAssociation) ToPrivateLinkAssociationOutput() PrivateLinkAssociationOutput {
	return i.ToPrivateLinkAssociationOutputWithContext(context.Background())
}

func (i *PrivateLinkAssociation) ToPrivateLinkAssociationOutputWithContext(ctx context.Context) PrivateLinkAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAssociationOutput)
}

func (i *PrivateLinkAssociation) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAssociation] {
	return pulumix.Output[*PrivateLinkAssociation]{
		OutputState: i.ToPrivateLinkAssociationOutputWithContext(ctx).OutputState,
	}
}

// PrivateLinkAssociationArrayInput is an input type that accepts PrivateLinkAssociationArray and PrivateLinkAssociationArrayOutput values.
// You can construct a concrete instance of `PrivateLinkAssociationArrayInput` via:
//
//	PrivateLinkAssociationArray{ PrivateLinkAssociationArgs{...} }
type PrivateLinkAssociationArrayInput interface {
	pulumi.Input

	ToPrivateLinkAssociationArrayOutput() PrivateLinkAssociationArrayOutput
	ToPrivateLinkAssociationArrayOutputWithContext(context.Context) PrivateLinkAssociationArrayOutput
}

type PrivateLinkAssociationArray []PrivateLinkAssociationInput

func (PrivateLinkAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateLinkAssociation)(nil)).Elem()
}

func (i PrivateLinkAssociationArray) ToPrivateLinkAssociationArrayOutput() PrivateLinkAssociationArrayOutput {
	return i.ToPrivateLinkAssociationArrayOutputWithContext(context.Background())
}

func (i PrivateLinkAssociationArray) ToPrivateLinkAssociationArrayOutputWithContext(ctx context.Context) PrivateLinkAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAssociationArrayOutput)
}

func (i PrivateLinkAssociationArray) ToOutput(ctx context.Context) pulumix.Output[[]*PrivateLinkAssociation] {
	return pulumix.Output[[]*PrivateLinkAssociation]{
		OutputState: i.ToPrivateLinkAssociationArrayOutputWithContext(ctx).OutputState,
	}
}

// PrivateLinkAssociationMapInput is an input type that accepts PrivateLinkAssociationMap and PrivateLinkAssociationMapOutput values.
// You can construct a concrete instance of `PrivateLinkAssociationMapInput` via:
//
//	PrivateLinkAssociationMap{ "key": PrivateLinkAssociationArgs{...} }
type PrivateLinkAssociationMapInput interface {
	pulumi.Input

	ToPrivateLinkAssociationMapOutput() PrivateLinkAssociationMapOutput
	ToPrivateLinkAssociationMapOutputWithContext(context.Context) PrivateLinkAssociationMapOutput
}

type PrivateLinkAssociationMap map[string]PrivateLinkAssociationInput

func (PrivateLinkAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateLinkAssociation)(nil)).Elem()
}

func (i PrivateLinkAssociationMap) ToPrivateLinkAssociationMapOutput() PrivateLinkAssociationMapOutput {
	return i.ToPrivateLinkAssociationMapOutputWithContext(context.Background())
}

func (i PrivateLinkAssociationMap) ToPrivateLinkAssociationMapOutputWithContext(ctx context.Context) PrivateLinkAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkAssociationMapOutput)
}

func (i PrivateLinkAssociationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PrivateLinkAssociation] {
	return pulumix.Output[map[string]*PrivateLinkAssociation]{
		OutputState: i.ToPrivateLinkAssociationMapOutputWithContext(ctx).OutputState,
	}
}

type PrivateLinkAssociationOutput struct{ *pulumi.OutputState }

func (PrivateLinkAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkAssociation)(nil)).Elem()
}

func (o PrivateLinkAssociationOutput) ToPrivateLinkAssociationOutput() PrivateLinkAssociationOutput {
	return o
}

func (o PrivateLinkAssociationOutput) ToPrivateLinkAssociationOutputWithContext(ctx context.Context) PrivateLinkAssociationOutput {
	return o
}

func (o PrivateLinkAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateLinkAssociation] {
	return pulumix.Output[*PrivateLinkAssociation]{
		OutputState: o.OutputState,
	}
}

// Specifies the Management Group ID within which this Private Link Association should exist. Changing this forces a new Private Link Association to be created.
//
// > **Note:** For now, `managementGroupId` must be the ID of [Root Management Group](https://learn.microsoft.com/en-us/azure/governance/management-groups/overview#root-management-group-for-each-directory).
func (o PrivateLinkAssociationOutput) ManagementGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateLinkAssociation) pulumi.StringOutput { return v.ManagementGroupId }).(pulumi.StringOutput)
}

// Specifies the name of this Private Link Association, which should be a UUID. If `name` is not provided, a UUID will be generated, you should use the `ignoreChanges` attribute to ignore changes to this field. Changing this forces a new Private Link Association to be created.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/management"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := management.NewPrivateLinkAssociation(ctx, "example", &management.PrivateLinkAssociationArgs{
//				ManagementGroupId:               pulumi.Any(azurerm_management_group.Example.Id),
//				ResourceManagementPrivateLinkId: pulumi.Any(azurerm_resource_management_private_link.Example.Id),
//				PublicNetworkAccessEnabled:      pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func (o PrivateLinkAssociationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateLinkAssociation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether public network access is allowed. Changing this forces a new Private Link Association to be created.
func (o PrivateLinkAssociationOutput) PublicNetworkAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *PrivateLinkAssociation) pulumi.BoolOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolOutput)
}

// The Resource ID of Resource Management Private Link. Changing this forces a new Private Link Association to be created.
func (o PrivateLinkAssociationOutput) ResourceManagementPrivateLinkId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateLinkAssociation) pulumi.StringOutput { return v.ResourceManagementPrivateLinkId }).(pulumi.StringOutput)
}

// The Tenant ID.
func (o PrivateLinkAssociationOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateLinkAssociation) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type PrivateLinkAssociationArrayOutput struct{ *pulumi.OutputState }

func (PrivateLinkAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateLinkAssociation)(nil)).Elem()
}

func (o PrivateLinkAssociationArrayOutput) ToPrivateLinkAssociationArrayOutput() PrivateLinkAssociationArrayOutput {
	return o
}

func (o PrivateLinkAssociationArrayOutput) ToPrivateLinkAssociationArrayOutputWithContext(ctx context.Context) PrivateLinkAssociationArrayOutput {
	return o
}

func (o PrivateLinkAssociationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PrivateLinkAssociation] {
	return pulumix.Output[[]*PrivateLinkAssociation]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAssociationArrayOutput) Index(i pulumi.IntInput) PrivateLinkAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrivateLinkAssociation {
		return vs[0].([]*PrivateLinkAssociation)[vs[1].(int)]
	}).(PrivateLinkAssociationOutput)
}

type PrivateLinkAssociationMapOutput struct{ *pulumi.OutputState }

func (PrivateLinkAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateLinkAssociation)(nil)).Elem()
}

func (o PrivateLinkAssociationMapOutput) ToPrivateLinkAssociationMapOutput() PrivateLinkAssociationMapOutput {
	return o
}

func (o PrivateLinkAssociationMapOutput) ToPrivateLinkAssociationMapOutputWithContext(ctx context.Context) PrivateLinkAssociationMapOutput {
	return o
}

func (o PrivateLinkAssociationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PrivateLinkAssociation] {
	return pulumix.Output[map[string]*PrivateLinkAssociation]{
		OutputState: o.OutputState,
	}
}

func (o PrivateLinkAssociationMapOutput) MapIndex(k pulumi.StringInput) PrivateLinkAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrivateLinkAssociation {
		return vs[0].(map[string]*PrivateLinkAssociation)[vs[1].(string)]
	}).(PrivateLinkAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAssociationInput)(nil)).Elem(), &PrivateLinkAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAssociationArrayInput)(nil)).Elem(), PrivateLinkAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateLinkAssociationMapInput)(nil)).Elem(), PrivateLinkAssociationMap{})
	pulumi.RegisterOutputType(PrivateLinkAssociationOutput{})
	pulumi.RegisterOutputType(PrivateLinkAssociationArrayOutput{})
	pulumi.RegisterOutputType(PrivateLinkAssociationMapOutput{})
}
