// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package management

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Management Lock which is scoped to a Subscription, Resource Group or Resource.
//
// ## Example Usage
// ### Subscription Level Lock)
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/management"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		current, err := core.GetSubscription(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = management.NewLock(ctx, "subscription_level", &management.LockArgs{
// 			Scope:     pulumi.String(current.Id),
// 			LockLevel: pulumi.String("CanNotDelete"),
// 			Notes:     pulumi.String("Items can't be deleted in this subscription!"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ##Â Example Usage (Resource Group Level Lock)
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/management"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = management.NewLock(ctx, "resource_group_level", &management.LockArgs{
// 			Scope:     example.ID(),
// 			LockLevel: pulumi.String("ReadOnly"),
// 			Notes:     pulumi.String("This Resource Group is Read-Only"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Resource Level Lock)
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/management"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/network"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		examplePublicIp, err := network.NewPublicIp(ctx, "examplePublicIp", &network.PublicIpArgs{
// 			Location:             exampleResourceGroup.Location,
// 			ResourceGroupName:    exampleResourceGroup.Name,
// 			AllocationMethod:     pulumi.String("Static"),
// 			IdleTimeoutInMinutes: pulumi.Int(30),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = management.NewLock(ctx, "public_ip", &management.LockArgs{
// 			Scope:     examplePublicIp.ID(),
// 			LockLevel: pulumi.String("CanNotDelete"),
// 			Notes:     pulumi.String("Locked because it's needed by a third-party"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Management Locks can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:management/lock:Lock lock1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Authorization/locks/lock1
// ```
type Lock struct {
	pulumi.CustomResourceState

	// Specifies the Level to be used for this Lock. Possible values are `CanNotDelete` and `ReadOnly`. Changing this forces a new resource to be created.
	LockLevel pulumi.StringOutput `pulumi:"lockLevel"`
	// Specifies the name of the Management Lock. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies some notes about the lock. Maximum of 512 characters. Changing this forces a new resource to be created.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// Specifies the scope at which the Management Lock should be created. Changing this forces a new resource to be created.
	Scope pulumi.StringOutput `pulumi:"scope"`
}

// NewLock registers a new resource with the given unique name, arguments, and options.
func NewLock(ctx *pulumi.Context,
	name string, args *LockArgs, opts ...pulumi.ResourceOption) (*Lock, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LockLevel == nil {
		return nil, errors.New("invalid value for required argument 'LockLevel'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure:managementresource/manangementLock:ManangementLock"),
		},
	})
	opts = append(opts, aliases)
	var resource Lock
	err := ctx.RegisterResource("azure:management/lock:Lock", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLock gets an existing Lock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LockState, opts ...pulumi.ResourceOption) (*Lock, error) {
	var resource Lock
	err := ctx.ReadResource("azure:management/lock:Lock", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Lock resources.
type lockState struct {
	// Specifies the Level to be used for this Lock. Possible values are `CanNotDelete` and `ReadOnly`. Changing this forces a new resource to be created.
	LockLevel *string `pulumi:"lockLevel"`
	// Specifies the name of the Management Lock. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies some notes about the lock. Maximum of 512 characters. Changing this forces a new resource to be created.
	Notes *string `pulumi:"notes"`
	// Specifies the scope at which the Management Lock should be created. Changing this forces a new resource to be created.
	Scope *string `pulumi:"scope"`
}

type LockState struct {
	// Specifies the Level to be used for this Lock. Possible values are `CanNotDelete` and `ReadOnly`. Changing this forces a new resource to be created.
	LockLevel pulumi.StringPtrInput
	// Specifies the name of the Management Lock. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies some notes about the lock. Maximum of 512 characters. Changing this forces a new resource to be created.
	Notes pulumi.StringPtrInput
	// Specifies the scope at which the Management Lock should be created. Changing this forces a new resource to be created.
	Scope pulumi.StringPtrInput
}

func (LockState) ElementType() reflect.Type {
	return reflect.TypeOf((*lockState)(nil)).Elem()
}

type lockArgs struct {
	// Specifies the Level to be used for this Lock. Possible values are `CanNotDelete` and `ReadOnly`. Changing this forces a new resource to be created.
	LockLevel string `pulumi:"lockLevel"`
	// Specifies the name of the Management Lock. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies some notes about the lock. Maximum of 512 characters. Changing this forces a new resource to be created.
	Notes *string `pulumi:"notes"`
	// Specifies the scope at which the Management Lock should be created. Changing this forces a new resource to be created.
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a Lock resource.
type LockArgs struct {
	// Specifies the Level to be used for this Lock. Possible values are `CanNotDelete` and `ReadOnly`. Changing this forces a new resource to be created.
	LockLevel pulumi.StringInput
	// Specifies the name of the Management Lock. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies some notes about the lock. Maximum of 512 characters. Changing this forces a new resource to be created.
	Notes pulumi.StringPtrInput
	// Specifies the scope at which the Management Lock should be created. Changing this forces a new resource to be created.
	Scope pulumi.StringInput
}

func (LockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lockArgs)(nil)).Elem()
}

type LockInput interface {
	pulumi.Input

	ToLockOutput() LockOutput
	ToLockOutputWithContext(ctx context.Context) LockOutput
}

func (*Lock) ElementType() reflect.Type {
	return reflect.TypeOf((*Lock)(nil))
}

func (i *Lock) ToLockOutput() LockOutput {
	return i.ToLockOutputWithContext(context.Background())
}

func (i *Lock) ToLockOutputWithContext(ctx context.Context) LockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockOutput)
}

func (i *Lock) ToLockPtrOutput() LockPtrOutput {
	return i.ToLockPtrOutputWithContext(context.Background())
}

func (i *Lock) ToLockPtrOutputWithContext(ctx context.Context) LockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockPtrOutput)
}

type LockPtrInput interface {
	pulumi.Input

	ToLockPtrOutput() LockPtrOutput
	ToLockPtrOutputWithContext(ctx context.Context) LockPtrOutput
}

type lockPtrType LockArgs

func (*lockPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Lock)(nil))
}

func (i *lockPtrType) ToLockPtrOutput() LockPtrOutput {
	return i.ToLockPtrOutputWithContext(context.Background())
}

func (i *lockPtrType) ToLockPtrOutputWithContext(ctx context.Context) LockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockPtrOutput)
}

// LockArrayInput is an input type that accepts LockArray and LockArrayOutput values.
// You can construct a concrete instance of `LockArrayInput` via:
//
//          LockArray{ LockArgs{...} }
type LockArrayInput interface {
	pulumi.Input

	ToLockArrayOutput() LockArrayOutput
	ToLockArrayOutputWithContext(context.Context) LockArrayOutput
}

type LockArray []LockInput

func (LockArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Lock)(nil))
}

func (i LockArray) ToLockArrayOutput() LockArrayOutput {
	return i.ToLockArrayOutputWithContext(context.Background())
}

func (i LockArray) ToLockArrayOutputWithContext(ctx context.Context) LockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockArrayOutput)
}

// LockMapInput is an input type that accepts LockMap and LockMapOutput values.
// You can construct a concrete instance of `LockMapInput` via:
//
//          LockMap{ "key": LockArgs{...} }
type LockMapInput interface {
	pulumi.Input

	ToLockMapOutput() LockMapOutput
	ToLockMapOutputWithContext(context.Context) LockMapOutput
}

type LockMap map[string]LockInput

func (LockMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Lock)(nil))
}

func (i LockMap) ToLockMapOutput() LockMapOutput {
	return i.ToLockMapOutputWithContext(context.Background())
}

func (i LockMap) ToLockMapOutputWithContext(ctx context.Context) LockMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LockMapOutput)
}

type LockOutput struct {
	*pulumi.OutputState
}

func (LockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Lock)(nil))
}

func (o LockOutput) ToLockOutput() LockOutput {
	return o
}

func (o LockOutput) ToLockOutputWithContext(ctx context.Context) LockOutput {
	return o
}

func (o LockOutput) ToLockPtrOutput() LockPtrOutput {
	return o.ToLockPtrOutputWithContext(context.Background())
}

func (o LockOutput) ToLockPtrOutputWithContext(ctx context.Context) LockPtrOutput {
	return o.ApplyT(func(v Lock) *Lock {
		return &v
	}).(LockPtrOutput)
}

type LockPtrOutput struct {
	*pulumi.OutputState
}

func (LockPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Lock)(nil))
}

func (o LockPtrOutput) ToLockPtrOutput() LockPtrOutput {
	return o
}

func (o LockPtrOutput) ToLockPtrOutputWithContext(ctx context.Context) LockPtrOutput {
	return o
}

type LockArrayOutput struct{ *pulumi.OutputState }

func (LockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Lock)(nil))
}

func (o LockArrayOutput) ToLockArrayOutput() LockArrayOutput {
	return o
}

func (o LockArrayOutput) ToLockArrayOutputWithContext(ctx context.Context) LockArrayOutput {
	return o
}

func (o LockArrayOutput) Index(i pulumi.IntInput) LockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Lock {
		return vs[0].([]Lock)[vs[1].(int)]
	}).(LockOutput)
}

type LockMapOutput struct{ *pulumi.OutputState }

func (LockMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Lock)(nil))
}

func (o LockMapOutput) ToLockMapOutput() LockMapOutput {
	return o
}

func (o LockMapOutput) ToLockMapOutputWithContext(ctx context.Context) LockMapOutput {
	return o
}

func (o LockMapOutput) MapIndex(k pulumi.StringInput) LockOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Lock {
		return vs[0].(map[string]Lock)[vs[1].(string)]
	}).(LockOutput)
}

func init() {
	pulumi.RegisterOutputType(LockOutput{})
	pulumi.RegisterOutputType(LockPtrOutput{})
	pulumi.RegisterOutputType(LockArrayOutput{})
	pulumi.RegisterOutputType(LockMapOutput{})
}
