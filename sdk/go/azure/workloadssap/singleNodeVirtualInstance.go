// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workloadssap

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an SAP Single Node Virtual Instance with new SAP System.
//
// > **Note:** Before using this resource, it's required to submit the request of registering the Resource Provider with Azure CLI `az provider register --namespace "Microsoft.Workloads"`. The Resource Provider can take a while to register, you can check the status by running `az provider show --namespace "Microsoft.Workloads" --query "registrationState"`. Once this outputs "Registered" the Resource Provider is available for use.
//
// ## Import
//
// SAP Single Node Virtual Instances with new SAP Systems can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:workloadssap/singleNodeVirtualInstance:SingleNodeVirtualInstance example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Workloads/sapVirtualInstances/vis1
// ```
type SingleNodeVirtualInstance struct {
	pulumi.CustomResourceState

	// The Geo-Location where the SAP system is to be created. Changing this forces a new resource to be created.
	AppLocation pulumi.StringOutput `pulumi:"appLocation"`
	// The environment type for the SAP Single Node Virtual Instance. Possible values are `NonProd` and `Prod`. Changing this forces a new resource to be created.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// An `identity` block as defined below.
	Identity SingleNodeVirtualInstanceIdentityPtrOutput `pulumi:"identity"`
	// The Azure Region where the SAP Single Node Virtual Instance should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the managed Resource Group for the SAP Single Node Virtual Instance. Changing this forces a new resource to be created.
	ManagedResourceGroupName pulumi.StringPtrOutput `pulumi:"managedResourceGroupName"`
	// Specifies the name of this SAP Single Node Virtual Instance. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the SAP Single Node Virtual Instance should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The fully qualified domain name for the SAP system. Changing this forces a new resource to be created.
	SapFqdn pulumi.StringOutput `pulumi:"sapFqdn"`
	// The SAP Product type for the SAP Single Node Virtual Instance. Possible values are `ECC`, `Other` and `S4HANA`. Changing this forces a new resource to be created.
	SapProduct pulumi.StringOutput `pulumi:"sapProduct"`
	// A `singleServerConfiguration` block as defined below. Changing this forces a new resource to be created.
	SingleServerConfiguration SingleNodeVirtualInstanceSingleServerConfigurationOutput `pulumi:"singleServerConfiguration"`
	// A mapping of tags which should be assigned to the SAP Single Node Virtual Instance.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewSingleNodeVirtualInstance registers a new resource with the given unique name, arguments, and options.
func NewSingleNodeVirtualInstance(ctx *pulumi.Context,
	name string, args *SingleNodeVirtualInstanceArgs, opts ...pulumi.ResourceOption) (*SingleNodeVirtualInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppLocation == nil {
		return nil, errors.New("invalid value for required argument 'AppLocation'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SapFqdn == nil {
		return nil, errors.New("invalid value for required argument 'SapFqdn'")
	}
	if args.SapProduct == nil {
		return nil, errors.New("invalid value for required argument 'SapProduct'")
	}
	if args.SingleServerConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'SingleServerConfiguration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SingleNodeVirtualInstance
	err := ctx.RegisterResource("azure:workloadssap/singleNodeVirtualInstance:SingleNodeVirtualInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSingleNodeVirtualInstance gets an existing SingleNodeVirtualInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSingleNodeVirtualInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SingleNodeVirtualInstanceState, opts ...pulumi.ResourceOption) (*SingleNodeVirtualInstance, error) {
	var resource SingleNodeVirtualInstance
	err := ctx.ReadResource("azure:workloadssap/singleNodeVirtualInstance:SingleNodeVirtualInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SingleNodeVirtualInstance resources.
type singleNodeVirtualInstanceState struct {
	// The Geo-Location where the SAP system is to be created. Changing this forces a new resource to be created.
	AppLocation *string `pulumi:"appLocation"`
	// The environment type for the SAP Single Node Virtual Instance. Possible values are `NonProd` and `Prod`. Changing this forces a new resource to be created.
	Environment *string `pulumi:"environment"`
	// An `identity` block as defined below.
	Identity *SingleNodeVirtualInstanceIdentity `pulumi:"identity"`
	// The Azure Region where the SAP Single Node Virtual Instance should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the managed Resource Group for the SAP Single Node Virtual Instance. Changing this forces a new resource to be created.
	ManagedResourceGroupName *string `pulumi:"managedResourceGroupName"`
	// Specifies the name of this SAP Single Node Virtual Instance. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the SAP Single Node Virtual Instance should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The fully qualified domain name for the SAP system. Changing this forces a new resource to be created.
	SapFqdn *string `pulumi:"sapFqdn"`
	// The SAP Product type for the SAP Single Node Virtual Instance. Possible values are `ECC`, `Other` and `S4HANA`. Changing this forces a new resource to be created.
	SapProduct *string `pulumi:"sapProduct"`
	// A `singleServerConfiguration` block as defined below. Changing this forces a new resource to be created.
	SingleServerConfiguration *SingleNodeVirtualInstanceSingleServerConfiguration `pulumi:"singleServerConfiguration"`
	// A mapping of tags which should be assigned to the SAP Single Node Virtual Instance.
	Tags map[string]string `pulumi:"tags"`
}

type SingleNodeVirtualInstanceState struct {
	// The Geo-Location where the SAP system is to be created. Changing this forces a new resource to be created.
	AppLocation pulumi.StringPtrInput
	// The environment type for the SAP Single Node Virtual Instance. Possible values are `NonProd` and `Prod`. Changing this forces a new resource to be created.
	Environment pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity SingleNodeVirtualInstanceIdentityPtrInput
	// The Azure Region where the SAP Single Node Virtual Instance should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the managed Resource Group for the SAP Single Node Virtual Instance. Changing this forces a new resource to be created.
	ManagedResourceGroupName pulumi.StringPtrInput
	// Specifies the name of this SAP Single Node Virtual Instance. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the SAP Single Node Virtual Instance should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The fully qualified domain name for the SAP system. Changing this forces a new resource to be created.
	SapFqdn pulumi.StringPtrInput
	// The SAP Product type for the SAP Single Node Virtual Instance. Possible values are `ECC`, `Other` and `S4HANA`. Changing this forces a new resource to be created.
	SapProduct pulumi.StringPtrInput
	// A `singleServerConfiguration` block as defined below. Changing this forces a new resource to be created.
	SingleServerConfiguration SingleNodeVirtualInstanceSingleServerConfigurationPtrInput
	// A mapping of tags which should be assigned to the SAP Single Node Virtual Instance.
	Tags pulumi.StringMapInput
}

func (SingleNodeVirtualInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*singleNodeVirtualInstanceState)(nil)).Elem()
}

type singleNodeVirtualInstanceArgs struct {
	// The Geo-Location where the SAP system is to be created. Changing this forces a new resource to be created.
	AppLocation string `pulumi:"appLocation"`
	// The environment type for the SAP Single Node Virtual Instance. Possible values are `NonProd` and `Prod`. Changing this forces a new resource to be created.
	Environment string `pulumi:"environment"`
	// An `identity` block as defined below.
	Identity *SingleNodeVirtualInstanceIdentity `pulumi:"identity"`
	// The Azure Region where the SAP Single Node Virtual Instance should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the managed Resource Group for the SAP Single Node Virtual Instance. Changing this forces a new resource to be created.
	ManagedResourceGroupName *string `pulumi:"managedResourceGroupName"`
	// Specifies the name of this SAP Single Node Virtual Instance. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the SAP Single Node Virtual Instance should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The fully qualified domain name for the SAP system. Changing this forces a new resource to be created.
	SapFqdn string `pulumi:"sapFqdn"`
	// The SAP Product type for the SAP Single Node Virtual Instance. Possible values are `ECC`, `Other` and `S4HANA`. Changing this forces a new resource to be created.
	SapProduct string `pulumi:"sapProduct"`
	// A `singleServerConfiguration` block as defined below. Changing this forces a new resource to be created.
	SingleServerConfiguration SingleNodeVirtualInstanceSingleServerConfiguration `pulumi:"singleServerConfiguration"`
	// A mapping of tags which should be assigned to the SAP Single Node Virtual Instance.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SingleNodeVirtualInstance resource.
type SingleNodeVirtualInstanceArgs struct {
	// The Geo-Location where the SAP system is to be created. Changing this forces a new resource to be created.
	AppLocation pulumi.StringInput
	// The environment type for the SAP Single Node Virtual Instance. Possible values are `NonProd` and `Prod`. Changing this forces a new resource to be created.
	Environment pulumi.StringInput
	// An `identity` block as defined below.
	Identity SingleNodeVirtualInstanceIdentityPtrInput
	// The Azure Region where the SAP Single Node Virtual Instance should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the managed Resource Group for the SAP Single Node Virtual Instance. Changing this forces a new resource to be created.
	ManagedResourceGroupName pulumi.StringPtrInput
	// Specifies the name of this SAP Single Node Virtual Instance. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the SAP Single Node Virtual Instance should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The fully qualified domain name for the SAP system. Changing this forces a new resource to be created.
	SapFqdn pulumi.StringInput
	// The SAP Product type for the SAP Single Node Virtual Instance. Possible values are `ECC`, `Other` and `S4HANA`. Changing this forces a new resource to be created.
	SapProduct pulumi.StringInput
	// A `singleServerConfiguration` block as defined below. Changing this forces a new resource to be created.
	SingleServerConfiguration SingleNodeVirtualInstanceSingleServerConfigurationInput
	// A mapping of tags which should be assigned to the SAP Single Node Virtual Instance.
	Tags pulumi.StringMapInput
}

func (SingleNodeVirtualInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*singleNodeVirtualInstanceArgs)(nil)).Elem()
}

type SingleNodeVirtualInstanceInput interface {
	pulumi.Input

	ToSingleNodeVirtualInstanceOutput() SingleNodeVirtualInstanceOutput
	ToSingleNodeVirtualInstanceOutputWithContext(ctx context.Context) SingleNodeVirtualInstanceOutput
}

func (*SingleNodeVirtualInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleNodeVirtualInstance)(nil)).Elem()
}

func (i *SingleNodeVirtualInstance) ToSingleNodeVirtualInstanceOutput() SingleNodeVirtualInstanceOutput {
	return i.ToSingleNodeVirtualInstanceOutputWithContext(context.Background())
}

func (i *SingleNodeVirtualInstance) ToSingleNodeVirtualInstanceOutputWithContext(ctx context.Context) SingleNodeVirtualInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleNodeVirtualInstanceOutput)
}

// SingleNodeVirtualInstanceArrayInput is an input type that accepts SingleNodeVirtualInstanceArray and SingleNodeVirtualInstanceArrayOutput values.
// You can construct a concrete instance of `SingleNodeVirtualInstanceArrayInput` via:
//
//	SingleNodeVirtualInstanceArray{ SingleNodeVirtualInstanceArgs{...} }
type SingleNodeVirtualInstanceArrayInput interface {
	pulumi.Input

	ToSingleNodeVirtualInstanceArrayOutput() SingleNodeVirtualInstanceArrayOutput
	ToSingleNodeVirtualInstanceArrayOutputWithContext(context.Context) SingleNodeVirtualInstanceArrayOutput
}

type SingleNodeVirtualInstanceArray []SingleNodeVirtualInstanceInput

func (SingleNodeVirtualInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SingleNodeVirtualInstance)(nil)).Elem()
}

func (i SingleNodeVirtualInstanceArray) ToSingleNodeVirtualInstanceArrayOutput() SingleNodeVirtualInstanceArrayOutput {
	return i.ToSingleNodeVirtualInstanceArrayOutputWithContext(context.Background())
}

func (i SingleNodeVirtualInstanceArray) ToSingleNodeVirtualInstanceArrayOutputWithContext(ctx context.Context) SingleNodeVirtualInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleNodeVirtualInstanceArrayOutput)
}

// SingleNodeVirtualInstanceMapInput is an input type that accepts SingleNodeVirtualInstanceMap and SingleNodeVirtualInstanceMapOutput values.
// You can construct a concrete instance of `SingleNodeVirtualInstanceMapInput` via:
//
//	SingleNodeVirtualInstanceMap{ "key": SingleNodeVirtualInstanceArgs{...} }
type SingleNodeVirtualInstanceMapInput interface {
	pulumi.Input

	ToSingleNodeVirtualInstanceMapOutput() SingleNodeVirtualInstanceMapOutput
	ToSingleNodeVirtualInstanceMapOutputWithContext(context.Context) SingleNodeVirtualInstanceMapOutput
}

type SingleNodeVirtualInstanceMap map[string]SingleNodeVirtualInstanceInput

func (SingleNodeVirtualInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SingleNodeVirtualInstance)(nil)).Elem()
}

func (i SingleNodeVirtualInstanceMap) ToSingleNodeVirtualInstanceMapOutput() SingleNodeVirtualInstanceMapOutput {
	return i.ToSingleNodeVirtualInstanceMapOutputWithContext(context.Background())
}

func (i SingleNodeVirtualInstanceMap) ToSingleNodeVirtualInstanceMapOutputWithContext(ctx context.Context) SingleNodeVirtualInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleNodeVirtualInstanceMapOutput)
}

type SingleNodeVirtualInstanceOutput struct{ *pulumi.OutputState }

func (SingleNodeVirtualInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleNodeVirtualInstance)(nil)).Elem()
}

func (o SingleNodeVirtualInstanceOutput) ToSingleNodeVirtualInstanceOutput() SingleNodeVirtualInstanceOutput {
	return o
}

func (o SingleNodeVirtualInstanceOutput) ToSingleNodeVirtualInstanceOutputWithContext(ctx context.Context) SingleNodeVirtualInstanceOutput {
	return o
}

// The Geo-Location where the SAP system is to be created. Changing this forces a new resource to be created.
func (o SingleNodeVirtualInstanceOutput) AppLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleNodeVirtualInstance) pulumi.StringOutput { return v.AppLocation }).(pulumi.StringOutput)
}

// The environment type for the SAP Single Node Virtual Instance. Possible values are `NonProd` and `Prod`. Changing this forces a new resource to be created.
func (o SingleNodeVirtualInstanceOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleNodeVirtualInstance) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o SingleNodeVirtualInstanceOutput) Identity() SingleNodeVirtualInstanceIdentityPtrOutput {
	return o.ApplyT(func(v *SingleNodeVirtualInstance) SingleNodeVirtualInstanceIdentityPtrOutput { return v.Identity }).(SingleNodeVirtualInstanceIdentityPtrOutput)
}

// The Azure Region where the SAP Single Node Virtual Instance should exist. Changing this forces a new resource to be created.
func (o SingleNodeVirtualInstanceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleNodeVirtualInstance) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the managed Resource Group for the SAP Single Node Virtual Instance. Changing this forces a new resource to be created.
func (o SingleNodeVirtualInstanceOutput) ManagedResourceGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleNodeVirtualInstance) pulumi.StringPtrOutput { return v.ManagedResourceGroupName }).(pulumi.StringPtrOutput)
}

// Specifies the name of this SAP Single Node Virtual Instance. Changing this forces a new resource to be created.
func (o SingleNodeVirtualInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleNodeVirtualInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the SAP Single Node Virtual Instance should exist. Changing this forces a new resource to be created.
func (o SingleNodeVirtualInstanceOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleNodeVirtualInstance) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The fully qualified domain name for the SAP system. Changing this forces a new resource to be created.
func (o SingleNodeVirtualInstanceOutput) SapFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleNodeVirtualInstance) pulumi.StringOutput { return v.SapFqdn }).(pulumi.StringOutput)
}

// The SAP Product type for the SAP Single Node Virtual Instance. Possible values are `ECC`, `Other` and `S4HANA`. Changing this forces a new resource to be created.
func (o SingleNodeVirtualInstanceOutput) SapProduct() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleNodeVirtualInstance) pulumi.StringOutput { return v.SapProduct }).(pulumi.StringOutput)
}

// A `singleServerConfiguration` block as defined below. Changing this forces a new resource to be created.
func (o SingleNodeVirtualInstanceOutput) SingleServerConfiguration() SingleNodeVirtualInstanceSingleServerConfigurationOutput {
	return o.ApplyT(func(v *SingleNodeVirtualInstance) SingleNodeVirtualInstanceSingleServerConfigurationOutput {
		return v.SingleServerConfiguration
	}).(SingleNodeVirtualInstanceSingleServerConfigurationOutput)
}

// A mapping of tags which should be assigned to the SAP Single Node Virtual Instance.
func (o SingleNodeVirtualInstanceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SingleNodeVirtualInstance) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type SingleNodeVirtualInstanceArrayOutput struct{ *pulumi.OutputState }

func (SingleNodeVirtualInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SingleNodeVirtualInstance)(nil)).Elem()
}

func (o SingleNodeVirtualInstanceArrayOutput) ToSingleNodeVirtualInstanceArrayOutput() SingleNodeVirtualInstanceArrayOutput {
	return o
}

func (o SingleNodeVirtualInstanceArrayOutput) ToSingleNodeVirtualInstanceArrayOutputWithContext(ctx context.Context) SingleNodeVirtualInstanceArrayOutput {
	return o
}

func (o SingleNodeVirtualInstanceArrayOutput) Index(i pulumi.IntInput) SingleNodeVirtualInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SingleNodeVirtualInstance {
		return vs[0].([]*SingleNodeVirtualInstance)[vs[1].(int)]
	}).(SingleNodeVirtualInstanceOutput)
}

type SingleNodeVirtualInstanceMapOutput struct{ *pulumi.OutputState }

func (SingleNodeVirtualInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SingleNodeVirtualInstance)(nil)).Elem()
}

func (o SingleNodeVirtualInstanceMapOutput) ToSingleNodeVirtualInstanceMapOutput() SingleNodeVirtualInstanceMapOutput {
	return o
}

func (o SingleNodeVirtualInstanceMapOutput) ToSingleNodeVirtualInstanceMapOutputWithContext(ctx context.Context) SingleNodeVirtualInstanceMapOutput {
	return o
}

func (o SingleNodeVirtualInstanceMapOutput) MapIndex(k pulumi.StringInput) SingleNodeVirtualInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SingleNodeVirtualInstance {
		return vs[0].(map[string]*SingleNodeVirtualInstance)[vs[1].(string)]
	}).(SingleNodeVirtualInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SingleNodeVirtualInstanceInput)(nil)).Elem(), &SingleNodeVirtualInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleNodeVirtualInstanceArrayInput)(nil)).Elem(), SingleNodeVirtualInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleNodeVirtualInstanceMapInput)(nil)).Elem(), SingleNodeVirtualInstanceMap{})
	pulumi.RegisterOutputType(SingleNodeVirtualInstanceOutput{})
	pulumi.RegisterOutputType(SingleNodeVirtualInstanceArrayOutput{})
	pulumi.RegisterOutputType(SingleNodeVirtualInstanceMapOutput{})
}
