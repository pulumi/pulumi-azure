// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package operationalinsights

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Log Analytics (formally Operational Insights) Solution.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/operationalinsights"
// 	"github.com/pulumi/pulumi-random/sdk/v2/go/random"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("westeurope"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = random.NewRandomId(ctx, "workspace", &random.RandomIdArgs{
// 			Keepers: pulumi.StringMap{
// 				"group_name": exampleResourceGroup.Name,
// 			},
// 			ByteLength: pulumi.Int(8),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Sku:               pulumi.String("PerGB2018"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = operationalinsights.NewAnalyticsSolution(ctx, "exampleAnalyticsSolution", &operationalinsights.AnalyticsSolutionArgs{
// 			SolutionName:        pulumi.String("ContainerInsights"),
// 			Location:            exampleResourceGroup.Location,
// 			ResourceGroupName:   exampleResourceGroup.Name,
// 			WorkspaceResourceId: exampleAnalyticsWorkspace.ID(),
// 			WorkspaceName:       exampleAnalyticsWorkspace.Name,
// 			Plan: &operationalinsights.AnalyticsSolutionPlanArgs{
// 				Publisher: pulumi.String("Microsoft"),
// 				Product:   pulumi.String("OMSGallery/ContainerInsights"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Log Analytics Solutions can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:operationalinsights/analyticsSolution:AnalyticsSolution solution1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.OperationsManagement/solutions/solution1
// ```
type AnalyticsSolution struct {
	pulumi.CustomResourceState

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A `plan` block as documented below.
	Plan AnalyticsSolutionPlanOutput `pulumi:"plan"`
	// The name of the resource group in which the Log Analytics solution is created. Changing this forces a new resource to be created. Note: The solution and its related workspace can only exist in the same resource group.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Specifies the name of the solution to be deployed. See [here for options](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-add-solutions).Changing this forces a new resource to be created.
	SolutionName pulumi.StringOutput `pulumi:"solutionName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The full name of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceName pulumi.StringOutput `pulumi:"workspaceName"`
	// The full resource ID of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceResourceId pulumi.StringOutput `pulumi:"workspaceResourceId"`
}

// NewAnalyticsSolution registers a new resource with the given unique name, arguments, and options.
func NewAnalyticsSolution(ctx *pulumi.Context,
	name string, args *AnalyticsSolutionArgs, opts ...pulumi.ResourceOption) (*AnalyticsSolution, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SolutionName == nil {
		return nil, errors.New("invalid value for required argument 'SolutionName'")
	}
	if args.WorkspaceName == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceName'")
	}
	if args.WorkspaceResourceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceResourceId'")
	}
	var resource AnalyticsSolution
	err := ctx.RegisterResource("azure:operationalinsights/analyticsSolution:AnalyticsSolution", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalyticsSolution gets an existing AnalyticsSolution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalyticsSolution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalyticsSolutionState, opts ...pulumi.ResourceOption) (*AnalyticsSolution, error) {
	var resource AnalyticsSolution
	err := ctx.ReadResource("azure:operationalinsights/analyticsSolution:AnalyticsSolution", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnalyticsSolution resources.
type analyticsSolutionState struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A `plan` block as documented below.
	Plan *AnalyticsSolutionPlan `pulumi:"plan"`
	// The name of the resource group in which the Log Analytics solution is created. Changing this forces a new resource to be created. Note: The solution and its related workspace can only exist in the same resource group.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Specifies the name of the solution to be deployed. See [here for options](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-add-solutions).Changing this forces a new resource to be created.
	SolutionName *string `pulumi:"solutionName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The full name of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceName *string `pulumi:"workspaceName"`
	// The full resource ID of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceResourceId *string `pulumi:"workspaceResourceId"`
}

type AnalyticsSolutionState struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A `plan` block as documented below.
	Plan AnalyticsSolutionPlanPtrInput
	// The name of the resource group in which the Log Analytics solution is created. Changing this forces a new resource to be created. Note: The solution and its related workspace can only exist in the same resource group.
	ResourceGroupName pulumi.StringPtrInput
	// Specifies the name of the solution to be deployed. See [here for options](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-add-solutions).Changing this forces a new resource to be created.
	SolutionName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The full name of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceName pulumi.StringPtrInput
	// The full resource ID of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceResourceId pulumi.StringPtrInput
}

func (AnalyticsSolutionState) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsSolutionState)(nil)).Elem()
}

type analyticsSolutionArgs struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A `plan` block as documented below.
	Plan AnalyticsSolutionPlan `pulumi:"plan"`
	// The name of the resource group in which the Log Analytics solution is created. Changing this forces a new resource to be created. Note: The solution and its related workspace can only exist in the same resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the name of the solution to be deployed. See [here for options](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-add-solutions).Changing this forces a new resource to be created.
	SolutionName string `pulumi:"solutionName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The full name of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceName string `pulumi:"workspaceName"`
	// The full resource ID of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceResourceId string `pulumi:"workspaceResourceId"`
}

// The set of arguments for constructing a AnalyticsSolution resource.
type AnalyticsSolutionArgs struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A `plan` block as documented below.
	Plan AnalyticsSolutionPlanInput
	// The name of the resource group in which the Log Analytics solution is created. Changing this forces a new resource to be created. Note: The solution and its related workspace can only exist in the same resource group.
	ResourceGroupName pulumi.StringInput
	// Specifies the name of the solution to be deployed. See [here for options](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-add-solutions).Changing this forces a new resource to be created.
	SolutionName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The full name of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceName pulumi.StringInput
	// The full resource ID of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceResourceId pulumi.StringInput
}

func (AnalyticsSolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsSolutionArgs)(nil)).Elem()
}

type AnalyticsSolutionInput interface {
	pulumi.Input

	ToAnalyticsSolutionOutput() AnalyticsSolutionOutput
	ToAnalyticsSolutionOutputWithContext(ctx context.Context) AnalyticsSolutionOutput
}

func (*AnalyticsSolution) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsSolution)(nil))
}

func (i *AnalyticsSolution) ToAnalyticsSolutionOutput() AnalyticsSolutionOutput {
	return i.ToAnalyticsSolutionOutputWithContext(context.Background())
}

func (i *AnalyticsSolution) ToAnalyticsSolutionOutputWithContext(ctx context.Context) AnalyticsSolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsSolutionOutput)
}

func (i *AnalyticsSolution) ToAnalyticsSolutionPtrOutput() AnalyticsSolutionPtrOutput {
	return i.ToAnalyticsSolutionPtrOutputWithContext(context.Background())
}

func (i *AnalyticsSolution) ToAnalyticsSolutionPtrOutputWithContext(ctx context.Context) AnalyticsSolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsSolutionPtrOutput)
}

type AnalyticsSolutionPtrInput interface {
	pulumi.Input

	ToAnalyticsSolutionPtrOutput() AnalyticsSolutionPtrOutput
	ToAnalyticsSolutionPtrOutputWithContext(ctx context.Context) AnalyticsSolutionPtrOutput
}

type analyticsSolutionPtrType AnalyticsSolutionArgs

func (*analyticsSolutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsSolution)(nil))
}

func (i *analyticsSolutionPtrType) ToAnalyticsSolutionPtrOutput() AnalyticsSolutionPtrOutput {
	return i.ToAnalyticsSolutionPtrOutputWithContext(context.Background())
}

func (i *analyticsSolutionPtrType) ToAnalyticsSolutionPtrOutputWithContext(ctx context.Context) AnalyticsSolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsSolutionPtrOutput)
}

// AnalyticsSolutionArrayInput is an input type that accepts AnalyticsSolutionArray and AnalyticsSolutionArrayOutput values.
// You can construct a concrete instance of `AnalyticsSolutionArrayInput` via:
//
//          AnalyticsSolutionArray{ AnalyticsSolutionArgs{...} }
type AnalyticsSolutionArrayInput interface {
	pulumi.Input

	ToAnalyticsSolutionArrayOutput() AnalyticsSolutionArrayOutput
	ToAnalyticsSolutionArrayOutputWithContext(context.Context) AnalyticsSolutionArrayOutput
}

type AnalyticsSolutionArray []AnalyticsSolutionInput

func (AnalyticsSolutionArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AnalyticsSolution)(nil))
}

func (i AnalyticsSolutionArray) ToAnalyticsSolutionArrayOutput() AnalyticsSolutionArrayOutput {
	return i.ToAnalyticsSolutionArrayOutputWithContext(context.Background())
}

func (i AnalyticsSolutionArray) ToAnalyticsSolutionArrayOutputWithContext(ctx context.Context) AnalyticsSolutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsSolutionArrayOutput)
}

// AnalyticsSolutionMapInput is an input type that accepts AnalyticsSolutionMap and AnalyticsSolutionMapOutput values.
// You can construct a concrete instance of `AnalyticsSolutionMapInput` via:
//
//          AnalyticsSolutionMap{ "key": AnalyticsSolutionArgs{...} }
type AnalyticsSolutionMapInput interface {
	pulumi.Input

	ToAnalyticsSolutionMapOutput() AnalyticsSolutionMapOutput
	ToAnalyticsSolutionMapOutputWithContext(context.Context) AnalyticsSolutionMapOutput
}

type AnalyticsSolutionMap map[string]AnalyticsSolutionInput

func (AnalyticsSolutionMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AnalyticsSolution)(nil))
}

func (i AnalyticsSolutionMap) ToAnalyticsSolutionMapOutput() AnalyticsSolutionMapOutput {
	return i.ToAnalyticsSolutionMapOutputWithContext(context.Background())
}

func (i AnalyticsSolutionMap) ToAnalyticsSolutionMapOutputWithContext(ctx context.Context) AnalyticsSolutionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsSolutionMapOutput)
}

type AnalyticsSolutionOutput struct {
	*pulumi.OutputState
}

func (AnalyticsSolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsSolution)(nil))
}

func (o AnalyticsSolutionOutput) ToAnalyticsSolutionOutput() AnalyticsSolutionOutput {
	return o
}

func (o AnalyticsSolutionOutput) ToAnalyticsSolutionOutputWithContext(ctx context.Context) AnalyticsSolutionOutput {
	return o
}

func (o AnalyticsSolutionOutput) ToAnalyticsSolutionPtrOutput() AnalyticsSolutionPtrOutput {
	return o.ToAnalyticsSolutionPtrOutputWithContext(context.Background())
}

func (o AnalyticsSolutionOutput) ToAnalyticsSolutionPtrOutputWithContext(ctx context.Context) AnalyticsSolutionPtrOutput {
	return o.ApplyT(func(v AnalyticsSolution) *AnalyticsSolution {
		return &v
	}).(AnalyticsSolutionPtrOutput)
}

type AnalyticsSolutionPtrOutput struct {
	*pulumi.OutputState
}

func (AnalyticsSolutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsSolution)(nil))
}

func (o AnalyticsSolutionPtrOutput) ToAnalyticsSolutionPtrOutput() AnalyticsSolutionPtrOutput {
	return o
}

func (o AnalyticsSolutionPtrOutput) ToAnalyticsSolutionPtrOutputWithContext(ctx context.Context) AnalyticsSolutionPtrOutput {
	return o
}

type AnalyticsSolutionArrayOutput struct{ *pulumi.OutputState }

func (AnalyticsSolutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalyticsSolution)(nil))
}

func (o AnalyticsSolutionArrayOutput) ToAnalyticsSolutionArrayOutput() AnalyticsSolutionArrayOutput {
	return o
}

func (o AnalyticsSolutionArrayOutput) ToAnalyticsSolutionArrayOutputWithContext(ctx context.Context) AnalyticsSolutionArrayOutput {
	return o
}

func (o AnalyticsSolutionArrayOutput) Index(i pulumi.IntInput) AnalyticsSolutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalyticsSolution {
		return vs[0].([]AnalyticsSolution)[vs[1].(int)]
	}).(AnalyticsSolutionOutput)
}

type AnalyticsSolutionMapOutput struct{ *pulumi.OutputState }

func (AnalyticsSolutionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AnalyticsSolution)(nil))
}

func (o AnalyticsSolutionMapOutput) ToAnalyticsSolutionMapOutput() AnalyticsSolutionMapOutput {
	return o
}

func (o AnalyticsSolutionMapOutput) ToAnalyticsSolutionMapOutputWithContext(ctx context.Context) AnalyticsSolutionMapOutput {
	return o
}

func (o AnalyticsSolutionMapOutput) MapIndex(k pulumi.StringInput) AnalyticsSolutionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AnalyticsSolution {
		return vs[0].(map[string]AnalyticsSolution)[vs[1].(string)]
	}).(AnalyticsSolutionOutput)
}

func init() {
	pulumi.RegisterOutputType(AnalyticsSolutionOutput{})
	pulumi.RegisterOutputType(AnalyticsSolutionPtrOutput{})
	pulumi.RegisterOutputType(AnalyticsSolutionArrayOutput{})
	pulumi.RegisterOutputType(AnalyticsSolutionMapOutput{})
}
