// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package managementgroups

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Management Group.
//
// !> **Note:** Configuring `subscriptionIds` is not supported when using the `management.GroupSubscriptionAssociation` resource, results will be unpredictable.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/management"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.LookupSubscription(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleParent, err := management.NewGroup(ctx, "exampleParent", &management.GroupArgs{
//				DisplayName: pulumi.String("ParentGroup"),
//				SubscriptionIds: pulumi.StringArray{
//					*pulumi.String(current.SubscriptionId),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = management.NewGroup(ctx, "exampleChild", &management.GroupArgs{
//				DisplayName:             pulumi.String("ChildGroup"),
//				ParentManagementGroupId: exampleParent.ID(),
//				SubscriptionIds: pulumi.StringArray{
//					*pulumi.String(current.SubscriptionId),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Management Groups can be imported using the `management group resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:managementgroups/managementGroup:ManagementGroup example /providers/Microsoft.Management/managementGroups/group1
//
// ```
//
// Deprecated: azure.managementgroups.ManagementGroup has been deprecated in favor of azure.management.Group
type ManagementGroup struct {
	pulumi.CustomResourceState

	// A friendly name for this Management Group. If not specified, this will be the same as the `name`.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The name or UUID for this Management Group, which needs to be unique across your tenant. A new UUID will be generated if not provided. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Parent Management Group.
	ParentManagementGroupId pulumi.StringOutput `pulumi:"parentManagementGroupId"`
	// A list of Subscription GUIDs which should be assigned to the Management Group.
	//
	// > **Note:** To clear all Subscriptions from the Management Group set `subscriptionIds` to an empty list
	SubscriptionIds pulumi.StringArrayOutput `pulumi:"subscriptionIds"`
}

// NewManagementGroup registers a new resource with the given unique name, arguments, and options.
func NewManagementGroup(ctx *pulumi.Context,
	name string, args *ManagementGroupArgs, opts ...pulumi.ResourceOption) (*ManagementGroup, error) {
	if args == nil {
		args = &ManagementGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagementGroup
	err := ctx.RegisterResource("azure:managementgroups/managementGroup:ManagementGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagementGroup gets an existing ManagementGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagementGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagementGroupState, opts ...pulumi.ResourceOption) (*ManagementGroup, error) {
	var resource ManagementGroup
	err := ctx.ReadResource("azure:managementgroups/managementGroup:ManagementGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagementGroup resources.
type managementGroupState struct {
	// A friendly name for this Management Group. If not specified, this will be the same as the `name`.
	DisplayName *string `pulumi:"displayName"`
	// The name or UUID for this Management Group, which needs to be unique across your tenant. A new UUID will be generated if not provided. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Parent Management Group.
	ParentManagementGroupId *string `pulumi:"parentManagementGroupId"`
	// A list of Subscription GUIDs which should be assigned to the Management Group.
	//
	// > **Note:** To clear all Subscriptions from the Management Group set `subscriptionIds` to an empty list
	SubscriptionIds []string `pulumi:"subscriptionIds"`
}

type ManagementGroupState struct {
	// A friendly name for this Management Group. If not specified, this will be the same as the `name`.
	DisplayName pulumi.StringPtrInput
	// The name or UUID for this Management Group, which needs to be unique across your tenant. A new UUID will be generated if not provided. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Parent Management Group.
	ParentManagementGroupId pulumi.StringPtrInput
	// A list of Subscription GUIDs which should be assigned to the Management Group.
	//
	// > **Note:** To clear all Subscriptions from the Management Group set `subscriptionIds` to an empty list
	SubscriptionIds pulumi.StringArrayInput
}

func (ManagementGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*managementGroupState)(nil)).Elem()
}

type managementGroupArgs struct {
	// A friendly name for this Management Group. If not specified, this will be the same as the `name`.
	DisplayName *string `pulumi:"displayName"`
	// The name or UUID for this Management Group, which needs to be unique across your tenant. A new UUID will be generated if not provided. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Parent Management Group.
	ParentManagementGroupId *string `pulumi:"parentManagementGroupId"`
	// A list of Subscription GUIDs which should be assigned to the Management Group.
	//
	// > **Note:** To clear all Subscriptions from the Management Group set `subscriptionIds` to an empty list
	SubscriptionIds []string `pulumi:"subscriptionIds"`
}

// The set of arguments for constructing a ManagementGroup resource.
type ManagementGroupArgs struct {
	// A friendly name for this Management Group. If not specified, this will be the same as the `name`.
	DisplayName pulumi.StringPtrInput
	// The name or UUID for this Management Group, which needs to be unique across your tenant. A new UUID will be generated if not provided. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Parent Management Group.
	ParentManagementGroupId pulumi.StringPtrInput
	// A list of Subscription GUIDs which should be assigned to the Management Group.
	//
	// > **Note:** To clear all Subscriptions from the Management Group set `subscriptionIds` to an empty list
	SubscriptionIds pulumi.StringArrayInput
}

func (ManagementGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managementGroupArgs)(nil)).Elem()
}

type ManagementGroupInput interface {
	pulumi.Input

	ToManagementGroupOutput() ManagementGroupOutput
	ToManagementGroupOutputWithContext(ctx context.Context) ManagementGroupOutput
}

func (*ManagementGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementGroup)(nil)).Elem()
}

func (i *ManagementGroup) ToManagementGroupOutput() ManagementGroupOutput {
	return i.ToManagementGroupOutputWithContext(context.Background())
}

func (i *ManagementGroup) ToManagementGroupOutputWithContext(ctx context.Context) ManagementGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementGroupOutput)
}

// ManagementGroupArrayInput is an input type that accepts ManagementGroupArray and ManagementGroupArrayOutput values.
// You can construct a concrete instance of `ManagementGroupArrayInput` via:
//
//	ManagementGroupArray{ ManagementGroupArgs{...} }
type ManagementGroupArrayInput interface {
	pulumi.Input

	ToManagementGroupArrayOutput() ManagementGroupArrayOutput
	ToManagementGroupArrayOutputWithContext(context.Context) ManagementGroupArrayOutput
}

type ManagementGroupArray []ManagementGroupInput

func (ManagementGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagementGroup)(nil)).Elem()
}

func (i ManagementGroupArray) ToManagementGroupArrayOutput() ManagementGroupArrayOutput {
	return i.ToManagementGroupArrayOutputWithContext(context.Background())
}

func (i ManagementGroupArray) ToManagementGroupArrayOutputWithContext(ctx context.Context) ManagementGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementGroupArrayOutput)
}

// ManagementGroupMapInput is an input type that accepts ManagementGroupMap and ManagementGroupMapOutput values.
// You can construct a concrete instance of `ManagementGroupMapInput` via:
//
//	ManagementGroupMap{ "key": ManagementGroupArgs{...} }
type ManagementGroupMapInput interface {
	pulumi.Input

	ToManagementGroupMapOutput() ManagementGroupMapOutput
	ToManagementGroupMapOutputWithContext(context.Context) ManagementGroupMapOutput
}

type ManagementGroupMap map[string]ManagementGroupInput

func (ManagementGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagementGroup)(nil)).Elem()
}

func (i ManagementGroupMap) ToManagementGroupMapOutput() ManagementGroupMapOutput {
	return i.ToManagementGroupMapOutputWithContext(context.Background())
}

func (i ManagementGroupMap) ToManagementGroupMapOutputWithContext(ctx context.Context) ManagementGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementGroupMapOutput)
}

type ManagementGroupOutput struct{ *pulumi.OutputState }

func (ManagementGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagementGroup)(nil)).Elem()
}

func (o ManagementGroupOutput) ToManagementGroupOutput() ManagementGroupOutput {
	return o
}

func (o ManagementGroupOutput) ToManagementGroupOutputWithContext(ctx context.Context) ManagementGroupOutput {
	return o
}

// A friendly name for this Management Group. If not specified, this will be the same as the `name`.
func (o ManagementGroupOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagementGroup) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The name or UUID for this Management Group, which needs to be unique across your tenant. A new UUID will be generated if not provided. Changing this forces a new resource to be created.
func (o ManagementGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagementGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Parent Management Group.
func (o ManagementGroupOutput) ParentManagementGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagementGroup) pulumi.StringOutput { return v.ParentManagementGroupId }).(pulumi.StringOutput)
}

// A list of Subscription GUIDs which should be assigned to the Management Group.
//
// > **Note:** To clear all Subscriptions from the Management Group set `subscriptionIds` to an empty list
func (o ManagementGroupOutput) SubscriptionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagementGroup) pulumi.StringArrayOutput { return v.SubscriptionIds }).(pulumi.StringArrayOutput)
}

type ManagementGroupArrayOutput struct{ *pulumi.OutputState }

func (ManagementGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagementGroup)(nil)).Elem()
}

func (o ManagementGroupArrayOutput) ToManagementGroupArrayOutput() ManagementGroupArrayOutput {
	return o
}

func (o ManagementGroupArrayOutput) ToManagementGroupArrayOutputWithContext(ctx context.Context) ManagementGroupArrayOutput {
	return o
}

func (o ManagementGroupArrayOutput) Index(i pulumi.IntInput) ManagementGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagementGroup {
		return vs[0].([]*ManagementGroup)[vs[1].(int)]
	}).(ManagementGroupOutput)
}

type ManagementGroupMapOutput struct{ *pulumi.OutputState }

func (ManagementGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagementGroup)(nil)).Elem()
}

func (o ManagementGroupMapOutput) ToManagementGroupMapOutput() ManagementGroupMapOutput {
	return o
}

func (o ManagementGroupMapOutput) ToManagementGroupMapOutputWithContext(ctx context.Context) ManagementGroupMapOutput {
	return o
}

func (o ManagementGroupMapOutput) MapIndex(k pulumi.StringInput) ManagementGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagementGroup {
		return vs[0].(map[string]*ManagementGroup)[vs[1].(string)]
	}).(ManagementGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementGroupInput)(nil)).Elem(), &ManagementGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementGroupArrayInput)(nil)).Elem(), ManagementGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagementGroupMapInput)(nil)).Elem(), ManagementGroupMap{})
	pulumi.RegisterOutputType(ManagementGroupOutput{})
	pulumi.RegisterOutputType(ManagementGroupArrayOutput{})
	pulumi.RegisterOutputType(ManagementGroupMapOutput{})
}
