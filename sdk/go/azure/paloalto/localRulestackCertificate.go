// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package paloalto

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Palo Alto Networks Rulestack Certificate.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/paloalto"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLocalRulestack, err := paloalto.NewLocalRulestack(ctx, "exampleLocalRulestack", &paloalto.LocalRulestackArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = paloalto.NewLocalRulestackCertificate(ctx, "exampleLocalRulestackCertificate", &paloalto.LocalRulestackCertificateArgs{
//				RulestackId: exampleLocalRulestack.ID(),
//				SelfSigned:  pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Palo Alto Networks Rulestack Certificates can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:paloalto/localRulestackCertificate:LocalRulestackCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/myLocalRulestack/certificates/myCertificate
//
// ```
type LocalRulestackCertificate struct {
	pulumi.CustomResourceState

	// The comment for Audit purposes.
	AuditComment pulumi.StringPtrOutput `pulumi:"auditComment"`
	// The description for the Certificate.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The `versionlesId` of the Key Vault Certificate to use. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	KeyVaultCertificateId pulumi.StringPtrOutput `pulumi:"keyVaultCertificateId"`
	// The name which should be used for this Palo Alto Networks Rulestack Certificate.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the TODO. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	RulestackId pulumi.StringOutput `pulumi:"rulestackId"`
	// Should a Self Signed Certificate be used. Defaults to `false`. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	//
	// > **Note:** One and only one of `selfSigned` or `keyVaultCertificateId` must be specified.
	SelfSigned pulumi.BoolPtrOutput `pulumi:"selfSigned"`
}

// NewLocalRulestackCertificate registers a new resource with the given unique name, arguments, and options.
func NewLocalRulestackCertificate(ctx *pulumi.Context,
	name string, args *LocalRulestackCertificateArgs, opts ...pulumi.ResourceOption) (*LocalRulestackCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RulestackId == nil {
		return nil, errors.New("invalid value for required argument 'RulestackId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LocalRulestackCertificate
	err := ctx.RegisterResource("azure:paloalto/localRulestackCertificate:LocalRulestackCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocalRulestackCertificate gets an existing LocalRulestackCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocalRulestackCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocalRulestackCertificateState, opts ...pulumi.ResourceOption) (*LocalRulestackCertificate, error) {
	var resource LocalRulestackCertificate
	err := ctx.ReadResource("azure:paloalto/localRulestackCertificate:LocalRulestackCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocalRulestackCertificate resources.
type localRulestackCertificateState struct {
	// The comment for Audit purposes.
	AuditComment *string `pulumi:"auditComment"`
	// The description for the Certificate.
	Description *string `pulumi:"description"`
	// The `versionlesId` of the Key Vault Certificate to use. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	KeyVaultCertificateId *string `pulumi:"keyVaultCertificateId"`
	// The name which should be used for this Palo Alto Networks Rulestack Certificate.
	Name *string `pulumi:"name"`
	// The ID of the TODO. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	RulestackId *string `pulumi:"rulestackId"`
	// Should a Self Signed Certificate be used. Defaults to `false`. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	//
	// > **Note:** One and only one of `selfSigned` or `keyVaultCertificateId` must be specified.
	SelfSigned *bool `pulumi:"selfSigned"`
}

type LocalRulestackCertificateState struct {
	// The comment for Audit purposes.
	AuditComment pulumi.StringPtrInput
	// The description for the Certificate.
	Description pulumi.StringPtrInput
	// The `versionlesId` of the Key Vault Certificate to use. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	KeyVaultCertificateId pulumi.StringPtrInput
	// The name which should be used for this Palo Alto Networks Rulestack Certificate.
	Name pulumi.StringPtrInput
	// The ID of the TODO. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	RulestackId pulumi.StringPtrInput
	// Should a Self Signed Certificate be used. Defaults to `false`. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	//
	// > **Note:** One and only one of `selfSigned` or `keyVaultCertificateId` must be specified.
	SelfSigned pulumi.BoolPtrInput
}

func (LocalRulestackCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*localRulestackCertificateState)(nil)).Elem()
}

type localRulestackCertificateArgs struct {
	// The comment for Audit purposes.
	AuditComment *string `pulumi:"auditComment"`
	// The description for the Certificate.
	Description *string `pulumi:"description"`
	// The `versionlesId` of the Key Vault Certificate to use. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	KeyVaultCertificateId *string `pulumi:"keyVaultCertificateId"`
	// The name which should be used for this Palo Alto Networks Rulestack Certificate.
	Name *string `pulumi:"name"`
	// The ID of the TODO. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	RulestackId string `pulumi:"rulestackId"`
	// Should a Self Signed Certificate be used. Defaults to `false`. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	//
	// > **Note:** One and only one of `selfSigned` or `keyVaultCertificateId` must be specified.
	SelfSigned *bool `pulumi:"selfSigned"`
}

// The set of arguments for constructing a LocalRulestackCertificate resource.
type LocalRulestackCertificateArgs struct {
	// The comment for Audit purposes.
	AuditComment pulumi.StringPtrInput
	// The description for the Certificate.
	Description pulumi.StringPtrInput
	// The `versionlesId` of the Key Vault Certificate to use. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	KeyVaultCertificateId pulumi.StringPtrInput
	// The name which should be used for this Palo Alto Networks Rulestack Certificate.
	Name pulumi.StringPtrInput
	// The ID of the TODO. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	RulestackId pulumi.StringInput
	// Should a Self Signed Certificate be used. Defaults to `false`. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
	//
	// > **Note:** One and only one of `selfSigned` or `keyVaultCertificateId` must be specified.
	SelfSigned pulumi.BoolPtrInput
}

func (LocalRulestackCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*localRulestackCertificateArgs)(nil)).Elem()
}

type LocalRulestackCertificateInput interface {
	pulumi.Input

	ToLocalRulestackCertificateOutput() LocalRulestackCertificateOutput
	ToLocalRulestackCertificateOutputWithContext(ctx context.Context) LocalRulestackCertificateOutput
}

func (*LocalRulestackCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalRulestackCertificate)(nil)).Elem()
}

func (i *LocalRulestackCertificate) ToLocalRulestackCertificateOutput() LocalRulestackCertificateOutput {
	return i.ToLocalRulestackCertificateOutputWithContext(context.Background())
}

func (i *LocalRulestackCertificate) ToLocalRulestackCertificateOutputWithContext(ctx context.Context) LocalRulestackCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalRulestackCertificateOutput)
}

// LocalRulestackCertificateArrayInput is an input type that accepts LocalRulestackCertificateArray and LocalRulestackCertificateArrayOutput values.
// You can construct a concrete instance of `LocalRulestackCertificateArrayInput` via:
//
//	LocalRulestackCertificateArray{ LocalRulestackCertificateArgs{...} }
type LocalRulestackCertificateArrayInput interface {
	pulumi.Input

	ToLocalRulestackCertificateArrayOutput() LocalRulestackCertificateArrayOutput
	ToLocalRulestackCertificateArrayOutputWithContext(context.Context) LocalRulestackCertificateArrayOutput
}

type LocalRulestackCertificateArray []LocalRulestackCertificateInput

func (LocalRulestackCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocalRulestackCertificate)(nil)).Elem()
}

func (i LocalRulestackCertificateArray) ToLocalRulestackCertificateArrayOutput() LocalRulestackCertificateArrayOutput {
	return i.ToLocalRulestackCertificateArrayOutputWithContext(context.Background())
}

func (i LocalRulestackCertificateArray) ToLocalRulestackCertificateArrayOutputWithContext(ctx context.Context) LocalRulestackCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalRulestackCertificateArrayOutput)
}

// LocalRulestackCertificateMapInput is an input type that accepts LocalRulestackCertificateMap and LocalRulestackCertificateMapOutput values.
// You can construct a concrete instance of `LocalRulestackCertificateMapInput` via:
//
//	LocalRulestackCertificateMap{ "key": LocalRulestackCertificateArgs{...} }
type LocalRulestackCertificateMapInput interface {
	pulumi.Input

	ToLocalRulestackCertificateMapOutput() LocalRulestackCertificateMapOutput
	ToLocalRulestackCertificateMapOutputWithContext(context.Context) LocalRulestackCertificateMapOutput
}

type LocalRulestackCertificateMap map[string]LocalRulestackCertificateInput

func (LocalRulestackCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocalRulestackCertificate)(nil)).Elem()
}

func (i LocalRulestackCertificateMap) ToLocalRulestackCertificateMapOutput() LocalRulestackCertificateMapOutput {
	return i.ToLocalRulestackCertificateMapOutputWithContext(context.Background())
}

func (i LocalRulestackCertificateMap) ToLocalRulestackCertificateMapOutputWithContext(ctx context.Context) LocalRulestackCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalRulestackCertificateMapOutput)
}

type LocalRulestackCertificateOutput struct{ *pulumi.OutputState }

func (LocalRulestackCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalRulestackCertificate)(nil)).Elem()
}

func (o LocalRulestackCertificateOutput) ToLocalRulestackCertificateOutput() LocalRulestackCertificateOutput {
	return o
}

func (o LocalRulestackCertificateOutput) ToLocalRulestackCertificateOutputWithContext(ctx context.Context) LocalRulestackCertificateOutput {
	return o
}

// The comment for Audit purposes.
func (o LocalRulestackCertificateOutput) AuditComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalRulestackCertificate) pulumi.StringPtrOutput { return v.AuditComment }).(pulumi.StringPtrOutput)
}

// The description for the Certificate.
func (o LocalRulestackCertificateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalRulestackCertificate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The `versionlesId` of the Key Vault Certificate to use. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
func (o LocalRulestackCertificateOutput) KeyVaultCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalRulestackCertificate) pulumi.StringPtrOutput { return v.KeyVaultCertificateId }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Palo Alto Networks Rulestack Certificate.
func (o LocalRulestackCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalRulestackCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the TODO. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
func (o LocalRulestackCertificateOutput) RulestackId() pulumi.StringOutput {
	return o.ApplyT(func(v *LocalRulestackCertificate) pulumi.StringOutput { return v.RulestackId }).(pulumi.StringOutput)
}

// Should a Self Signed Certificate be used. Defaults to `false`. Changing this forces a new Palo Alto Networks Rulestack Certificate to be created.
//
// > **Note:** One and only one of `selfSigned` or `keyVaultCertificateId` must be specified.
func (o LocalRulestackCertificateOutput) SelfSigned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LocalRulestackCertificate) pulumi.BoolPtrOutput { return v.SelfSigned }).(pulumi.BoolPtrOutput)
}

type LocalRulestackCertificateArrayOutput struct{ *pulumi.OutputState }

func (LocalRulestackCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocalRulestackCertificate)(nil)).Elem()
}

func (o LocalRulestackCertificateArrayOutput) ToLocalRulestackCertificateArrayOutput() LocalRulestackCertificateArrayOutput {
	return o
}

func (o LocalRulestackCertificateArrayOutput) ToLocalRulestackCertificateArrayOutputWithContext(ctx context.Context) LocalRulestackCertificateArrayOutput {
	return o
}

func (o LocalRulestackCertificateArrayOutput) Index(i pulumi.IntInput) LocalRulestackCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LocalRulestackCertificate {
		return vs[0].([]*LocalRulestackCertificate)[vs[1].(int)]
	}).(LocalRulestackCertificateOutput)
}

type LocalRulestackCertificateMapOutput struct{ *pulumi.OutputState }

func (LocalRulestackCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocalRulestackCertificate)(nil)).Elem()
}

func (o LocalRulestackCertificateMapOutput) ToLocalRulestackCertificateMapOutput() LocalRulestackCertificateMapOutput {
	return o
}

func (o LocalRulestackCertificateMapOutput) ToLocalRulestackCertificateMapOutputWithContext(ctx context.Context) LocalRulestackCertificateMapOutput {
	return o
}

func (o LocalRulestackCertificateMapOutput) MapIndex(k pulumi.StringInput) LocalRulestackCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LocalRulestackCertificate {
		return vs[0].(map[string]*LocalRulestackCertificate)[vs[1].(string)]
	}).(LocalRulestackCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocalRulestackCertificateInput)(nil)).Elem(), &LocalRulestackCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalRulestackCertificateArrayInput)(nil)).Elem(), LocalRulestackCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalRulestackCertificateMapInput)(nil)).Elem(), LocalRulestackCertificateMap{})
	pulumi.RegisterOutputType(LocalRulestackCertificateOutput{})
	pulumi.RegisterOutputType(LocalRulestackCertificateArrayOutput{})
	pulumi.RegisterOutputType(LocalRulestackCertificateMapOutput{})
}
