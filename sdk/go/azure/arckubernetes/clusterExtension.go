// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package arckubernetes

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Arc Kubernetes Cluster Extension.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/base64"
//	"os"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/arckubernetes"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func filebase64OrPanic(path string) pulumi.StringPtrInput {
//		if fileData, err := os.ReadFile(path); err == nil {
//			return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
//		} else {
//			panic(err.Error())
//		}
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleCluster, err := arckubernetes.NewCluster(ctx, "exampleCluster", &arckubernetes.ClusterArgs{
//				ResourceGroupName:         exampleResourceGroup.Name,
//				Location:                  pulumi.String("West Europe"),
//				AgentPublicKeyCertificate: filebase64OrPanic("testdata/public.cer"),
//				Identity: &arckubernetes.ClusterIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//				Tags: pulumi.StringMap{
//					"ENV": pulumi.String("Test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = arckubernetes.NewClusterExtension(ctx, "exampleClusterExtension", &arckubernetes.ClusterExtensionArgs{
//				ClusterId:     exampleCluster.ID(),
//				ExtensionType: pulumi.String("microsoft.flux"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Arc Kubernetes Cluster Extension can be imported using the `resource id` for different `cluster_resource_name`, e.g.
//
// ```sh
//
//	$ pulumi import azure:arckubernetes/clusterExtension:ClusterExtension example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Kubernetes/connectedClusters/cluster1/providers/Microsoft.KubernetesConfiguration/extensions/extension1
//
// ```
type ClusterExtension struct {
	pulumi.CustomResourceState

	// Specifies the Cluster ID. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Configuration settings that are sensitive, as name-value pairs for configuring this extension.
	ConfigurationProtectedSettings pulumi.StringMapOutput `pulumi:"configurationProtectedSettings"`
	// Configuration settings, as name-value pairs for configuring this extension.
	ConfigurationSettings pulumi.StringMapOutput `pulumi:"configurationSettings"`
	// The current version of the extension.
	CurrentVersion pulumi.StringOutput `pulumi:"currentVersion"`
	// Specifies the type of extension. It must be one of the extension types registered with Microsoft.KubernetesConfiguration by the Extension publisher. For more information, please refer to [Available Extensions for Arc-enabled Kubernetes clusters](https://learn.microsoft.com/en-us/azure/azure-arc/kubernetes/extensions-release). Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ExtensionType pulumi.StringOutput `pulumi:"extensionType"`
	// An `identity` block as defined below. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Identity ClusterExtensionIdentityOutput `pulumi:"identity"`
	// Specifies the name which should be used for this Arc Kubernetes Cluster Extension. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Namespace where the extension release must be placed for a cluster scoped extension. If this namespace does not exist, it will be created. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ReleaseNamespace pulumi.StringOutput `pulumi:"releaseNamespace"`
	// The release train used by this extension. Possible values include but are not limited to `Stable`, `Preview`. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ReleaseTrain pulumi.StringOutput `pulumi:"releaseTrain"`
	// Namespace where the extension will be created for a namespace scoped extension. If this namespace does not exist, it will be created. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	TargetNamespace pulumi.StringOutput `pulumi:"targetNamespace"`
	// User-specified version that the extension should pin to. If it is not set, Azure will use the latest version and auto upgrade it. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewClusterExtension registers a new resource with the given unique name, arguments, and options.
func NewClusterExtension(ctx *pulumi.Context,
	name string, args *ClusterExtensionArgs, opts ...pulumi.ResourceOption) (*ClusterExtension, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.ExtensionType == nil {
		return nil, errors.New("invalid value for required argument 'ExtensionType'")
	}
	if args.Identity == nil {
		return nil, errors.New("invalid value for required argument 'Identity'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterExtension
	err := ctx.RegisterResource("azure:arckubernetes/clusterExtension:ClusterExtension", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterExtension gets an existing ClusterExtension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterExtensionState, opts ...pulumi.ResourceOption) (*ClusterExtension, error) {
	var resource ClusterExtension
	err := ctx.ReadResource("azure:arckubernetes/clusterExtension:ClusterExtension", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterExtension resources.
type clusterExtensionState struct {
	// Specifies the Cluster ID. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ClusterId *string `pulumi:"clusterId"`
	// Configuration settings that are sensitive, as name-value pairs for configuring this extension.
	ConfigurationProtectedSettings map[string]string `pulumi:"configurationProtectedSettings"`
	// Configuration settings, as name-value pairs for configuring this extension.
	ConfigurationSettings map[string]string `pulumi:"configurationSettings"`
	// The current version of the extension.
	CurrentVersion *string `pulumi:"currentVersion"`
	// Specifies the type of extension. It must be one of the extension types registered with Microsoft.KubernetesConfiguration by the Extension publisher. For more information, please refer to [Available Extensions for Arc-enabled Kubernetes clusters](https://learn.microsoft.com/en-us/azure/azure-arc/kubernetes/extensions-release). Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ExtensionType *string `pulumi:"extensionType"`
	// An `identity` block as defined below. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Identity *ClusterExtensionIdentity `pulumi:"identity"`
	// Specifies the name which should be used for this Arc Kubernetes Cluster Extension. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Name *string `pulumi:"name"`
	// Namespace where the extension release must be placed for a cluster scoped extension. If this namespace does not exist, it will be created. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ReleaseNamespace *string `pulumi:"releaseNamespace"`
	// The release train used by this extension. Possible values include but are not limited to `Stable`, `Preview`. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ReleaseTrain *string `pulumi:"releaseTrain"`
	// Namespace where the extension will be created for a namespace scoped extension. If this namespace does not exist, it will be created. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	TargetNamespace *string `pulumi:"targetNamespace"`
	// User-specified version that the extension should pin to. If it is not set, Azure will use the latest version and auto upgrade it. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Version *string `pulumi:"version"`
}

type ClusterExtensionState struct {
	// Specifies the Cluster ID. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ClusterId pulumi.StringPtrInput
	// Configuration settings that are sensitive, as name-value pairs for configuring this extension.
	ConfigurationProtectedSettings pulumi.StringMapInput
	// Configuration settings, as name-value pairs for configuring this extension.
	ConfigurationSettings pulumi.StringMapInput
	// The current version of the extension.
	CurrentVersion pulumi.StringPtrInput
	// Specifies the type of extension. It must be one of the extension types registered with Microsoft.KubernetesConfiguration by the Extension publisher. For more information, please refer to [Available Extensions for Arc-enabled Kubernetes clusters](https://learn.microsoft.com/en-us/azure/azure-arc/kubernetes/extensions-release). Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ExtensionType pulumi.StringPtrInput
	// An `identity` block as defined below. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Identity ClusterExtensionIdentityPtrInput
	// Specifies the name which should be used for this Arc Kubernetes Cluster Extension. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Name pulumi.StringPtrInput
	// Namespace where the extension release must be placed for a cluster scoped extension. If this namespace does not exist, it will be created. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ReleaseNamespace pulumi.StringPtrInput
	// The release train used by this extension. Possible values include but are not limited to `Stable`, `Preview`. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ReleaseTrain pulumi.StringPtrInput
	// Namespace where the extension will be created for a namespace scoped extension. If this namespace does not exist, it will be created. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	TargetNamespace pulumi.StringPtrInput
	// User-specified version that the extension should pin to. If it is not set, Azure will use the latest version and auto upgrade it. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Version pulumi.StringPtrInput
}

func (ClusterExtensionState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterExtensionState)(nil)).Elem()
}

type clusterExtensionArgs struct {
	// Specifies the Cluster ID. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ClusterId string `pulumi:"clusterId"`
	// Configuration settings that are sensitive, as name-value pairs for configuring this extension.
	ConfigurationProtectedSettings map[string]string `pulumi:"configurationProtectedSettings"`
	// Configuration settings, as name-value pairs for configuring this extension.
	ConfigurationSettings map[string]string `pulumi:"configurationSettings"`
	// Specifies the type of extension. It must be one of the extension types registered with Microsoft.KubernetesConfiguration by the Extension publisher. For more information, please refer to [Available Extensions for Arc-enabled Kubernetes clusters](https://learn.microsoft.com/en-us/azure/azure-arc/kubernetes/extensions-release). Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ExtensionType string `pulumi:"extensionType"`
	// An `identity` block as defined below. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Identity ClusterExtensionIdentity `pulumi:"identity"`
	// Specifies the name which should be used for this Arc Kubernetes Cluster Extension. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Name *string `pulumi:"name"`
	// Namespace where the extension release must be placed for a cluster scoped extension. If this namespace does not exist, it will be created. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ReleaseNamespace *string `pulumi:"releaseNamespace"`
	// The release train used by this extension. Possible values include but are not limited to `Stable`, `Preview`. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ReleaseTrain *string `pulumi:"releaseTrain"`
	// Namespace where the extension will be created for a namespace scoped extension. If this namespace does not exist, it will be created. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	TargetNamespace *string `pulumi:"targetNamespace"`
	// User-specified version that the extension should pin to. If it is not set, Azure will use the latest version and auto upgrade it. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a ClusterExtension resource.
type ClusterExtensionArgs struct {
	// Specifies the Cluster ID. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ClusterId pulumi.StringInput
	// Configuration settings that are sensitive, as name-value pairs for configuring this extension.
	ConfigurationProtectedSettings pulumi.StringMapInput
	// Configuration settings, as name-value pairs for configuring this extension.
	ConfigurationSettings pulumi.StringMapInput
	// Specifies the type of extension. It must be one of the extension types registered with Microsoft.KubernetesConfiguration by the Extension publisher. For more information, please refer to [Available Extensions for Arc-enabled Kubernetes clusters](https://learn.microsoft.com/en-us/azure/azure-arc/kubernetes/extensions-release). Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ExtensionType pulumi.StringInput
	// An `identity` block as defined below. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Identity ClusterExtensionIdentityInput
	// Specifies the name which should be used for this Arc Kubernetes Cluster Extension. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Name pulumi.StringPtrInput
	// Namespace where the extension release must be placed for a cluster scoped extension. If this namespace does not exist, it will be created. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ReleaseNamespace pulumi.StringPtrInput
	// The release train used by this extension. Possible values include but are not limited to `Stable`, `Preview`. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	ReleaseTrain pulumi.StringPtrInput
	// Namespace where the extension will be created for a namespace scoped extension. If this namespace does not exist, it will be created. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	TargetNamespace pulumi.StringPtrInput
	// User-specified version that the extension should pin to. If it is not set, Azure will use the latest version and auto upgrade it. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
	Version pulumi.StringPtrInput
}

func (ClusterExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterExtensionArgs)(nil)).Elem()
}

type ClusterExtensionInput interface {
	pulumi.Input

	ToClusterExtensionOutput() ClusterExtensionOutput
	ToClusterExtensionOutputWithContext(ctx context.Context) ClusterExtensionOutput
}

func (*ClusterExtension) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterExtension)(nil)).Elem()
}

func (i *ClusterExtension) ToClusterExtensionOutput() ClusterExtensionOutput {
	return i.ToClusterExtensionOutputWithContext(context.Background())
}

func (i *ClusterExtension) ToClusterExtensionOutputWithContext(ctx context.Context) ClusterExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExtensionOutput)
}

// ClusterExtensionArrayInput is an input type that accepts ClusterExtensionArray and ClusterExtensionArrayOutput values.
// You can construct a concrete instance of `ClusterExtensionArrayInput` via:
//
//	ClusterExtensionArray{ ClusterExtensionArgs{...} }
type ClusterExtensionArrayInput interface {
	pulumi.Input

	ToClusterExtensionArrayOutput() ClusterExtensionArrayOutput
	ToClusterExtensionArrayOutputWithContext(context.Context) ClusterExtensionArrayOutput
}

type ClusterExtensionArray []ClusterExtensionInput

func (ClusterExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterExtension)(nil)).Elem()
}

func (i ClusterExtensionArray) ToClusterExtensionArrayOutput() ClusterExtensionArrayOutput {
	return i.ToClusterExtensionArrayOutputWithContext(context.Background())
}

func (i ClusterExtensionArray) ToClusterExtensionArrayOutputWithContext(ctx context.Context) ClusterExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExtensionArrayOutput)
}

// ClusterExtensionMapInput is an input type that accepts ClusterExtensionMap and ClusterExtensionMapOutput values.
// You can construct a concrete instance of `ClusterExtensionMapInput` via:
//
//	ClusterExtensionMap{ "key": ClusterExtensionArgs{...} }
type ClusterExtensionMapInput interface {
	pulumi.Input

	ToClusterExtensionMapOutput() ClusterExtensionMapOutput
	ToClusterExtensionMapOutputWithContext(context.Context) ClusterExtensionMapOutput
}

type ClusterExtensionMap map[string]ClusterExtensionInput

func (ClusterExtensionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterExtension)(nil)).Elem()
}

func (i ClusterExtensionMap) ToClusterExtensionMapOutput() ClusterExtensionMapOutput {
	return i.ToClusterExtensionMapOutputWithContext(context.Background())
}

func (i ClusterExtensionMap) ToClusterExtensionMapOutputWithContext(ctx context.Context) ClusterExtensionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExtensionMapOutput)
}

type ClusterExtensionOutput struct{ *pulumi.OutputState }

func (ClusterExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterExtension)(nil)).Elem()
}

func (o ClusterExtensionOutput) ToClusterExtensionOutput() ClusterExtensionOutput {
	return o
}

func (o ClusterExtensionOutput) ToClusterExtensionOutputWithContext(ctx context.Context) ClusterExtensionOutput {
	return o
}

// Specifies the Cluster ID. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
func (o ClusterExtensionOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterExtension) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Configuration settings that are sensitive, as name-value pairs for configuring this extension.
func (o ClusterExtensionOutput) ConfigurationProtectedSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ClusterExtension) pulumi.StringMapOutput { return v.ConfigurationProtectedSettings }).(pulumi.StringMapOutput)
}

// Configuration settings, as name-value pairs for configuring this extension.
func (o ClusterExtensionOutput) ConfigurationSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ClusterExtension) pulumi.StringMapOutput { return v.ConfigurationSettings }).(pulumi.StringMapOutput)
}

// The current version of the extension.
func (o ClusterExtensionOutput) CurrentVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterExtension) pulumi.StringOutput { return v.CurrentVersion }).(pulumi.StringOutput)
}

// Specifies the type of extension. It must be one of the extension types registered with Microsoft.KubernetesConfiguration by the Extension publisher. For more information, please refer to [Available Extensions for Arc-enabled Kubernetes clusters](https://learn.microsoft.com/en-us/azure/azure-arc/kubernetes/extensions-release). Changing this forces a new Arc Kubernetes Cluster Extension to be created.
func (o ClusterExtensionOutput) ExtensionType() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterExtension) pulumi.StringOutput { return v.ExtensionType }).(pulumi.StringOutput)
}

// An `identity` block as defined below. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
func (o ClusterExtensionOutput) Identity() ClusterExtensionIdentityOutput {
	return o.ApplyT(func(v *ClusterExtension) ClusterExtensionIdentityOutput { return v.Identity }).(ClusterExtensionIdentityOutput)
}

// Specifies the name which should be used for this Arc Kubernetes Cluster Extension. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
func (o ClusterExtensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterExtension) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Namespace where the extension release must be placed for a cluster scoped extension. If this namespace does not exist, it will be created. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
func (o ClusterExtensionOutput) ReleaseNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterExtension) pulumi.StringOutput { return v.ReleaseNamespace }).(pulumi.StringOutput)
}

// The release train used by this extension. Possible values include but are not limited to `Stable`, `Preview`. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
func (o ClusterExtensionOutput) ReleaseTrain() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterExtension) pulumi.StringOutput { return v.ReleaseTrain }).(pulumi.StringOutput)
}

// Namespace where the extension will be created for a namespace scoped extension. If this namespace does not exist, it will be created. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
func (o ClusterExtensionOutput) TargetNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterExtension) pulumi.StringOutput { return v.TargetNamespace }).(pulumi.StringOutput)
}

// User-specified version that the extension should pin to. If it is not set, Azure will use the latest version and auto upgrade it. Changing this forces a new Arc Kubernetes Cluster Extension to be created.
func (o ClusterExtensionOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterExtension) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type ClusterExtensionArrayOutput struct{ *pulumi.OutputState }

func (ClusterExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterExtension)(nil)).Elem()
}

func (o ClusterExtensionArrayOutput) ToClusterExtensionArrayOutput() ClusterExtensionArrayOutput {
	return o
}

func (o ClusterExtensionArrayOutput) ToClusterExtensionArrayOutputWithContext(ctx context.Context) ClusterExtensionArrayOutput {
	return o
}

func (o ClusterExtensionArrayOutput) Index(i pulumi.IntInput) ClusterExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterExtension {
		return vs[0].([]*ClusterExtension)[vs[1].(int)]
	}).(ClusterExtensionOutput)
}

type ClusterExtensionMapOutput struct{ *pulumi.OutputState }

func (ClusterExtensionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterExtension)(nil)).Elem()
}

func (o ClusterExtensionMapOutput) ToClusterExtensionMapOutput() ClusterExtensionMapOutput {
	return o
}

func (o ClusterExtensionMapOutput) ToClusterExtensionMapOutputWithContext(ctx context.Context) ClusterExtensionMapOutput {
	return o
}

func (o ClusterExtensionMapOutput) MapIndex(k pulumi.StringInput) ClusterExtensionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterExtension {
		return vs[0].(map[string]*ClusterExtension)[vs[1].(string)]
	}).(ClusterExtensionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterExtensionInput)(nil)).Elem(), &ClusterExtension{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterExtensionArrayInput)(nil)).Elem(), ClusterExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterExtensionMapInput)(nil)).Elem(), ClusterExtensionMap{})
	pulumi.RegisterOutputType(ClusterExtensionOutput{})
	pulumi.RegisterOutputType(ClusterExtensionArrayOutput{})
	pulumi.RegisterOutputType(ClusterExtensionMapOutput{})
}
