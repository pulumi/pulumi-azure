// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chaosstudio

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Chaos Studio Experiment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	authorization/userAssignedIdentity "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/authorization/userAssignedIdentity"
//	chaosstudio/capability "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/chaosstudio/capability"
//	chaosstudio/experiment "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/chaosstudio/experiment"
//	chaosstudio/target "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/chaosstudio/target"
//	compute/linuxVirtualMachine "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/compute/linuxVirtualMachine"
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	network/networkInterface "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/networkInterface"
//	network/subnet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnet"
//	network/virtualNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetwork"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// example, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "example",
// Location: "westeurope",
// })
// if err != nil {
// return err
// }
// _, err = authorization/userAssignedIdentity.NewUserAssignedIdentity(ctx, "example", &authorization/userAssignedIdentity.UserAssignedIdentityArgs{
// ResourceGroupName: example.Name,
// Location: example.Location,
// Name: "example",
// })
// if err != nil {
// return err
// }
// exampleVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "example", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "example",
// AddressSpaces: []string{
// "10.0.0.0/16",
// },
// Location: example.Location,
// ResourceGroupName: example.Name,
// })
// if err != nil {
// return err
// }
// exampleSubnet, err := network/subnet.NewSubnet(ctx, "example", &network/subnet.SubnetArgs{
// Name: "internal",
// ResourceGroupName: example.Name,
// VirtualNetworkName: exampleVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.0.2.0/24",
// },
// })
// if err != nil {
// return err
// }
// exampleNetworkInterface, err := network/networkInterface.NewNetworkInterface(ctx, "example", &network/networkInterface.NetworkInterfaceArgs{
// Name: "example",
// Location: example.Location,
// ResourceGroupName: example.Name,
// IpConfigurations: []map[string]interface{}{
// map[string]interface{}{
// "name": "example",
// "subnetId": exampleSubnet.Id,
// "privateIpAddressAllocation": "Dynamic",
// },
// },
// })
// if err != nil {
// return err
// }
// exampleLinuxVirtualMachine, err := compute/linuxVirtualMachine.NewLinuxVirtualMachine(ctx, "example", &compute/linuxVirtualMachine.LinuxVirtualMachineArgs{
// Name: "example",
// ResourceGroupName: example.Name,
// Location: example.Location,
// Size: "Standard_F2",
// AdminUsername: "adminuser",
// AdminPassword: "example",
// DisablePasswordAuthentication: false,
// NetworkInterfaceIds: []interface{}{
// exampleNetworkInterface.Id,
// },
// OsDisk: map[string]interface{}{
// "caching": "ReadWrite",
// "storageAccountType": "Standard_LRS",
// },
// SourceImageReference: map[string]interface{}{
// "publisher": "Canonical",
// "offer": "0001-com-ubuntu-server-jammy",
// "sku": "22_04-lts",
// "version": "latest",
// },
// })
// if err != nil {
// return err
// }
// exampleTarget, err := chaosstudio/target.NewTarget(ctx, "example", &chaosstudio/target.TargetArgs{
// Location: example.Location,
// TargetResourceId: exampleLinuxVirtualMachine.Id,
// TargetType: "Microsoft-VirtualMachine",
// })
// if err != nil {
// return err
// }
// exampleCapability, err := chaosstudio/capability.NewCapability(ctx, "example", &chaosstudio/capability.CapabilityArgs{
// ChaosStudioTargetId: exampleTarget.Id,
// CapabilityType: "Shutdown-1.0",
// })
// if err != nil {
// return err
// }
// _, err = chaosstudio/experiment.NewExperiment(ctx, "example", &chaosstudio/experiment.ExperimentArgs{
// Location: example.Location,
// Name: "example",
// ResourceGroupName: example.Name,
// Identity: map[string]interface{}{
// "type": "SystemAssigned",
// },
// Selectors: []map[string]interface{}{
// map[string]interface{}{
// "name": "Selector1",
// "chaosStudioTargetIds": []interface{}{
// exampleTarget.Id,
// },
// },
// },
// Steps: []map[string]interface{}{
// map[string]interface{}{
// "name": "example",
// "branches": []map[string]interface{}{
// map[string]interface{}{
// "name": "example",
// "actions": []map[string]interface{}{
// map[string]interface{}{
// "urn": exampleCapability.CapabilityUrn,
// "selectorName": "Selector1",
// "parameters": map[string]interface{}{
// "abruptShutdown": "false",
// },
// "actionType": "continuous",
// "duration": "PT10M",
// },
// },
// },
// },
// },
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// Chaos Studio Experiments can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:chaosstudio/experiment:Experiment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Chaos/experiments/experiment1
// ```
type Experiment struct {
	pulumi.CustomResourceState

	// A `identity` block as defined below.
	Identity ExperimentIdentityPtrOutput `pulumi:"identity"`
	// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// One or more `selectors` blocks as defined below.
	Selectors ExperimentSelectorArrayOutput `pulumi:"selectors"`
	// One or more `steps` blocks as defined below.
	Steps ExperimentStepArrayOutput `pulumi:"steps"`
}

// NewExperiment registers a new resource with the given unique name, arguments, and options.
func NewExperiment(ctx *pulumi.Context,
	name string, args *ExperimentArgs, opts ...pulumi.ResourceOption) (*Experiment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Selectors == nil {
		return nil, errors.New("invalid value for required argument 'Selectors'")
	}
	if args.Steps == nil {
		return nil, errors.New("invalid value for required argument 'Steps'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Experiment
	err := ctx.RegisterResource("azure:chaosstudio/experiment:Experiment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExperiment gets an existing Experiment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExperiment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExperimentState, opts ...pulumi.ResourceOption) (*Experiment, error) {
	var resource Experiment
	err := ctx.ReadResource("azure:chaosstudio/experiment:Experiment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Experiment resources.
type experimentState struct {
	// A `identity` block as defined below.
	Identity *ExperimentIdentity `pulumi:"identity"`
	// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// One or more `selectors` blocks as defined below.
	Selectors []ExperimentSelector `pulumi:"selectors"`
	// One or more `steps` blocks as defined below.
	Steps []ExperimentStep `pulumi:"steps"`
}

type ExperimentState struct {
	// A `identity` block as defined below.
	Identity ExperimentIdentityPtrInput
	// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	ResourceGroupName pulumi.StringPtrInput
	// One or more `selectors` blocks as defined below.
	Selectors ExperimentSelectorArrayInput
	// One or more `steps` blocks as defined below.
	Steps ExperimentStepArrayInput
}

func (ExperimentState) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentState)(nil)).Elem()
}

type experimentArgs struct {
	// A `identity` block as defined below.
	Identity *ExperimentIdentity `pulumi:"identity"`
	// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// One or more `selectors` blocks as defined below.
	Selectors []ExperimentSelector `pulumi:"selectors"`
	// One or more `steps` blocks as defined below.
	Steps []ExperimentStep `pulumi:"steps"`
}

// The set of arguments for constructing a Experiment resource.
type ExperimentArgs struct {
	// A `identity` block as defined below.
	Identity ExperimentIdentityPtrInput
	// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	ResourceGroupName pulumi.StringInput
	// One or more `selectors` blocks as defined below.
	Selectors ExperimentSelectorArrayInput
	// One or more `steps` blocks as defined below.
	Steps ExperimentStepArrayInput
}

func (ExperimentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentArgs)(nil)).Elem()
}

type ExperimentInput interface {
	pulumi.Input

	ToExperimentOutput() ExperimentOutput
	ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput
}

func (*Experiment) ElementType() reflect.Type {
	return reflect.TypeOf((**Experiment)(nil)).Elem()
}

func (i *Experiment) ToExperimentOutput() ExperimentOutput {
	return i.ToExperimentOutputWithContext(context.Background())
}

func (i *Experiment) ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentOutput)
}

// ExperimentArrayInput is an input type that accepts ExperimentArray and ExperimentArrayOutput values.
// You can construct a concrete instance of `ExperimentArrayInput` via:
//
//	ExperimentArray{ ExperimentArgs{...} }
type ExperimentArrayInput interface {
	pulumi.Input

	ToExperimentArrayOutput() ExperimentArrayOutput
	ToExperimentArrayOutputWithContext(context.Context) ExperimentArrayOutput
}

type ExperimentArray []ExperimentInput

func (ExperimentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Experiment)(nil)).Elem()
}

func (i ExperimentArray) ToExperimentArrayOutput() ExperimentArrayOutput {
	return i.ToExperimentArrayOutputWithContext(context.Background())
}

func (i ExperimentArray) ToExperimentArrayOutputWithContext(ctx context.Context) ExperimentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentArrayOutput)
}

// ExperimentMapInput is an input type that accepts ExperimentMap and ExperimentMapOutput values.
// You can construct a concrete instance of `ExperimentMapInput` via:
//
//	ExperimentMap{ "key": ExperimentArgs{...} }
type ExperimentMapInput interface {
	pulumi.Input

	ToExperimentMapOutput() ExperimentMapOutput
	ToExperimentMapOutputWithContext(context.Context) ExperimentMapOutput
}

type ExperimentMap map[string]ExperimentInput

func (ExperimentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Experiment)(nil)).Elem()
}

func (i ExperimentMap) ToExperimentMapOutput() ExperimentMapOutput {
	return i.ToExperimentMapOutputWithContext(context.Background())
}

func (i ExperimentMap) ToExperimentMapOutputWithContext(ctx context.Context) ExperimentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentMapOutput)
}

type ExperimentOutput struct{ *pulumi.OutputState }

func (ExperimentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Experiment)(nil)).Elem()
}

func (o ExperimentOutput) ToExperimentOutput() ExperimentOutput {
	return o
}

func (o ExperimentOutput) ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput {
	return o
}

// A `identity` block as defined below.
func (o ExperimentOutput) Identity() ExperimentIdentityPtrOutput {
	return o.ApplyT(func(v *Experiment) ExperimentIdentityPtrOutput { return v.Identity }).(ExperimentIdentityPtrOutput)
}

// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
func (o ExperimentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
func (o ExperimentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
func (o ExperimentOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// One or more `selectors` blocks as defined below.
func (o ExperimentOutput) Selectors() ExperimentSelectorArrayOutput {
	return o.ApplyT(func(v *Experiment) ExperimentSelectorArrayOutput { return v.Selectors }).(ExperimentSelectorArrayOutput)
}

// One or more `steps` blocks as defined below.
func (o ExperimentOutput) Steps() ExperimentStepArrayOutput {
	return o.ApplyT(func(v *Experiment) ExperimentStepArrayOutput { return v.Steps }).(ExperimentStepArrayOutput)
}

type ExperimentArrayOutput struct{ *pulumi.OutputState }

func (ExperimentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Experiment)(nil)).Elem()
}

func (o ExperimentArrayOutput) ToExperimentArrayOutput() ExperimentArrayOutput {
	return o
}

func (o ExperimentArrayOutput) ToExperimentArrayOutputWithContext(ctx context.Context) ExperimentArrayOutput {
	return o
}

func (o ExperimentArrayOutput) Index(i pulumi.IntInput) ExperimentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Experiment {
		return vs[0].([]*Experiment)[vs[1].(int)]
	}).(ExperimentOutput)
}

type ExperimentMapOutput struct{ *pulumi.OutputState }

func (ExperimentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Experiment)(nil)).Elem()
}

func (o ExperimentMapOutput) ToExperimentMapOutput() ExperimentMapOutput {
	return o
}

func (o ExperimentMapOutput) ToExperimentMapOutputWithContext(ctx context.Context) ExperimentMapOutput {
	return o
}

func (o ExperimentMapOutput) MapIndex(k pulumi.StringInput) ExperimentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Experiment {
		return vs[0].(map[string]*Experiment)[vs[1].(string)]
	}).(ExperimentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentInput)(nil)).Elem(), &Experiment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentArrayInput)(nil)).Elem(), ExperimentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentMapInput)(nil)).Elem(), ExperimentMap{})
	pulumi.RegisterOutputType(ExperimentOutput{})
	pulumi.RegisterOutputType(ExperimentArrayOutput{})
	pulumi.RegisterOutputType(ExperimentMapOutput{})
}
