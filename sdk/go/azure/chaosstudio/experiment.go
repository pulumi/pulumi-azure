// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chaosstudio

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Chaos Studio Experiment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/chaosstudio"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example"),
//				Location: pulumi.String("westeurope"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authorization.NewUserAssignedIdentity(ctx, "example", &authorization.UserAssignedIdentityArgs{
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				Name:              pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
//				Name: pulumi.String("example"),
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "example", &network.SubnetArgs{
//				Name:               pulumi.String("internal"),
//				ResourceGroupName:  example.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleNetworkInterface, err := network.NewNetworkInterface(ctx, "example", &network.NetworkInterfaceArgs{
//				Name:              pulumi.String("example"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				IpConfigurations: network.NetworkInterfaceIpConfigurationArray{
//					&network.NetworkInterfaceIpConfigurationArgs{
//						Name:                       pulumi.String("example"),
//						SubnetId:                   exampleSubnet.ID(),
//						PrivateIpAddressAllocation: pulumi.String("Dynamic"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleLinuxVirtualMachine, err := compute.NewLinuxVirtualMachine(ctx, "example", &compute.LinuxVirtualMachineArgs{
//				Name:                          pulumi.String("example"),
//				ResourceGroupName:             example.Name,
//				Location:                      example.Location,
//				Size:                          pulumi.String("Standard_F2"),
//				AdminUsername:                 pulumi.String("adminuser"),
//				AdminPassword:                 pulumi.String("example"),
//				DisablePasswordAuthentication: pulumi.Bool(false),
//				NetworkInterfaceIds: pulumi.StringArray{
//					exampleNetworkInterface.ID(),
//				},
//				OsDisk: &compute.LinuxVirtualMachineOsDiskArgs{
//					Caching:            pulumi.String("ReadWrite"),
//					StorageAccountType: pulumi.String("Standard_LRS"),
//				},
//				SourceImageReference: &compute.LinuxVirtualMachineSourceImageReferenceArgs{
//					Publisher: pulumi.String("Canonical"),
//					Offer:     pulumi.String("0001-com-ubuntu-server-jammy"),
//					Sku:       pulumi.String("22_04-lts"),
//					Version:   pulumi.String("latest"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleTarget, err := chaosstudio.NewTarget(ctx, "example", &chaosstudio.TargetArgs{
//				Location:         example.Location,
//				TargetResourceId: exampleLinuxVirtualMachine.ID(),
//				TargetType:       pulumi.String("Microsoft-VirtualMachine"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleCapability, err := chaosstudio.NewCapability(ctx, "example", &chaosstudio.CapabilityArgs{
//				ChaosStudioTargetId: exampleTarget.ID(),
//				CapabilityType:      pulumi.String("Shutdown-1.0"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = chaosstudio.NewExperiment(ctx, "example", &chaosstudio.ExperimentArgs{
//				Location:          example.Location,
//				Name:              pulumi.String("example"),
//				ResourceGroupName: example.Name,
//				Identity: &chaosstudio.ExperimentIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//				Selectors: chaosstudio.ExperimentSelectorArray{
//					&chaosstudio.ExperimentSelectorArgs{
//						Name: pulumi.String("Selector1"),
//						ChaosStudioTargetIds: pulumi.StringArray{
//							exampleTarget.ID(),
//						},
//					},
//				},
//				Steps: chaosstudio.ExperimentStepArray{
//					&chaosstudio.ExperimentStepArgs{
//						Name: pulumi.String("example"),
//						Branches: chaosstudio.ExperimentStepBranchArray{
//							&chaosstudio.ExperimentStepBranchArgs{
//								Name: pulumi.String("example"),
//								Actions: chaosstudio.ExperimentStepBranchActionArray{
//									&chaosstudio.ExperimentStepBranchActionArgs{
//										Urn:          exampleCapability.CapabilityUrn,
//										SelectorName: pulumi.String("Selector1"),
//										Parameters: pulumi.StringMap{
//											"abruptShutdown": pulumi.String("false"),
//										},
//										ActionType: pulumi.String("continuous"),
//										Duration:   pulumi.String("PT10M"),
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.Chaos` - 2023-11-01
//
// ## Import
//
// Chaos Studio Experiments can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:chaosstudio/experiment:Experiment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Chaos/experiments/experiment1
// ```
type Experiment struct {
	pulumi.CustomResourceState

	// A `identity` block as defined below.
	Identity ExperimentIdentityPtrOutput `pulumi:"identity"`
	// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// One or more `selectors` blocks as defined below.
	Selectors ExperimentSelectorArrayOutput `pulumi:"selectors"`
	// One or more `steps` blocks as defined below.
	Steps ExperimentStepArrayOutput `pulumi:"steps"`
}

// NewExperiment registers a new resource with the given unique name, arguments, and options.
func NewExperiment(ctx *pulumi.Context,
	name string, args *ExperimentArgs, opts ...pulumi.ResourceOption) (*Experiment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Selectors == nil {
		return nil, errors.New("invalid value for required argument 'Selectors'")
	}
	if args.Steps == nil {
		return nil, errors.New("invalid value for required argument 'Steps'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Experiment
	err := ctx.RegisterResource("azure:chaosstudio/experiment:Experiment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExperiment gets an existing Experiment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExperiment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExperimentState, opts ...pulumi.ResourceOption) (*Experiment, error) {
	var resource Experiment
	err := ctx.ReadResource("azure:chaosstudio/experiment:Experiment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Experiment resources.
type experimentState struct {
	// A `identity` block as defined below.
	Identity *ExperimentIdentity `pulumi:"identity"`
	// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// One or more `selectors` blocks as defined below.
	Selectors []ExperimentSelector `pulumi:"selectors"`
	// One or more `steps` blocks as defined below.
	Steps []ExperimentStep `pulumi:"steps"`
}

type ExperimentState struct {
	// A `identity` block as defined below.
	Identity ExperimentIdentityPtrInput
	// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	ResourceGroupName pulumi.StringPtrInput
	// One or more `selectors` blocks as defined below.
	Selectors ExperimentSelectorArrayInput
	// One or more `steps` blocks as defined below.
	Steps ExperimentStepArrayInput
}

func (ExperimentState) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentState)(nil)).Elem()
}

type experimentArgs struct {
	// A `identity` block as defined below.
	Identity *ExperimentIdentity `pulumi:"identity"`
	// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// One or more `selectors` blocks as defined below.
	Selectors []ExperimentSelector `pulumi:"selectors"`
	// One or more `steps` blocks as defined below.
	Steps []ExperimentStep `pulumi:"steps"`
}

// The set of arguments for constructing a Experiment resource.
type ExperimentArgs struct {
	// A `identity` block as defined below.
	Identity ExperimentIdentityPtrInput
	// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
	ResourceGroupName pulumi.StringInput
	// One or more `selectors` blocks as defined below.
	Selectors ExperimentSelectorArrayInput
	// One or more `steps` blocks as defined below.
	Steps ExperimentStepArrayInput
}

func (ExperimentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentArgs)(nil)).Elem()
}

type ExperimentInput interface {
	pulumi.Input

	ToExperimentOutput() ExperimentOutput
	ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput
}

func (*Experiment) ElementType() reflect.Type {
	return reflect.TypeOf((**Experiment)(nil)).Elem()
}

func (i *Experiment) ToExperimentOutput() ExperimentOutput {
	return i.ToExperimentOutputWithContext(context.Background())
}

func (i *Experiment) ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentOutput)
}

// ExperimentArrayInput is an input type that accepts ExperimentArray and ExperimentArrayOutput values.
// You can construct a concrete instance of `ExperimentArrayInput` via:
//
//	ExperimentArray{ ExperimentArgs{...} }
type ExperimentArrayInput interface {
	pulumi.Input

	ToExperimentArrayOutput() ExperimentArrayOutput
	ToExperimentArrayOutputWithContext(context.Context) ExperimentArrayOutput
}

type ExperimentArray []ExperimentInput

func (ExperimentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Experiment)(nil)).Elem()
}

func (i ExperimentArray) ToExperimentArrayOutput() ExperimentArrayOutput {
	return i.ToExperimentArrayOutputWithContext(context.Background())
}

func (i ExperimentArray) ToExperimentArrayOutputWithContext(ctx context.Context) ExperimentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentArrayOutput)
}

// ExperimentMapInput is an input type that accepts ExperimentMap and ExperimentMapOutput values.
// You can construct a concrete instance of `ExperimentMapInput` via:
//
//	ExperimentMap{ "key": ExperimentArgs{...} }
type ExperimentMapInput interface {
	pulumi.Input

	ToExperimentMapOutput() ExperimentMapOutput
	ToExperimentMapOutputWithContext(context.Context) ExperimentMapOutput
}

type ExperimentMap map[string]ExperimentInput

func (ExperimentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Experiment)(nil)).Elem()
}

func (i ExperimentMap) ToExperimentMapOutput() ExperimentMapOutput {
	return i.ToExperimentMapOutputWithContext(context.Background())
}

func (i ExperimentMap) ToExperimentMapOutputWithContext(ctx context.Context) ExperimentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentMapOutput)
}

type ExperimentOutput struct{ *pulumi.OutputState }

func (ExperimentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Experiment)(nil)).Elem()
}

func (o ExperimentOutput) ToExperimentOutput() ExperimentOutput {
	return o
}

func (o ExperimentOutput) ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput {
	return o
}

// A `identity` block as defined below.
func (o ExperimentOutput) Identity() ExperimentIdentityPtrOutput {
	return o.ApplyT(func(v *Experiment) ExperimentIdentityPtrOutput { return v.Identity }).(ExperimentIdentityPtrOutput)
}

// The Azure Region where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
func (o ExperimentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Chaos Studio Experiment. Changing this forces a new Chaos Studio Experiment to be created.
func (o ExperimentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Chaos Studio Experiment should exist. Changing this forces a new Chaos Studio Experiment to be created.
func (o ExperimentOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// One or more `selectors` blocks as defined below.
func (o ExperimentOutput) Selectors() ExperimentSelectorArrayOutput {
	return o.ApplyT(func(v *Experiment) ExperimentSelectorArrayOutput { return v.Selectors }).(ExperimentSelectorArrayOutput)
}

// One or more `steps` blocks as defined below.
func (o ExperimentOutput) Steps() ExperimentStepArrayOutput {
	return o.ApplyT(func(v *Experiment) ExperimentStepArrayOutput { return v.Steps }).(ExperimentStepArrayOutput)
}

type ExperimentArrayOutput struct{ *pulumi.OutputState }

func (ExperimentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Experiment)(nil)).Elem()
}

func (o ExperimentArrayOutput) ToExperimentArrayOutput() ExperimentArrayOutput {
	return o
}

func (o ExperimentArrayOutput) ToExperimentArrayOutputWithContext(ctx context.Context) ExperimentArrayOutput {
	return o
}

func (o ExperimentArrayOutput) Index(i pulumi.IntInput) ExperimentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Experiment {
		return vs[0].([]*Experiment)[vs[1].(int)]
	}).(ExperimentOutput)
}

type ExperimentMapOutput struct{ *pulumi.OutputState }

func (ExperimentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Experiment)(nil)).Elem()
}

func (o ExperimentMapOutput) ToExperimentMapOutput() ExperimentMapOutput {
	return o
}

func (o ExperimentMapOutput) ToExperimentMapOutputWithContext(ctx context.Context) ExperimentMapOutput {
	return o
}

func (o ExperimentMapOutput) MapIndex(k pulumi.StringInput) ExperimentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Experiment {
		return vs[0].(map[string]*Experiment)[vs[1].(string)]
	}).(ExperimentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentInput)(nil)).Elem(), &Experiment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentArrayInput)(nil)).Elem(), ExperimentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentMapInput)(nil)).Elem(), ExperimentMap{})
	pulumi.RegisterOutputType(ExperimentOutput{})
	pulumi.RegisterOutputType(ExperimentArrayOutput{})
	pulumi.RegisterOutputType(ExperimentMapOutput{})
}
