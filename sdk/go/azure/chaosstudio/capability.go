// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package chaosstudio

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Chaos Studio Capability.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/chaosstudio"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/containerservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			example, err := containerservice.NewKubernetesCluster(ctx, "example", &containerservice.KubernetesClusterArgs{
//				Name:              pulumi.String("example"),
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				DnsPrefix:         pulumi.String("acctestaksexample"),
//				DefaultNodePool: &containerservice.KubernetesClusterDefaultNodePoolArgs{
//					Name:      pulumi.String("example-value"),
//					NodeCount: pulumi.Int("example-value"),
//					VmSize:    pulumi.String("example-value"),
//				},
//				Identity: &containerservice.KubernetesClusterIdentityArgs{
//					Type: pulumi.String("example-value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleTarget, err := chaosstudio.NewTarget(ctx, "example", &chaosstudio.TargetArgs{
//				Location:         exampleResourceGroup.Location,
//				TargetResourceId: example.ID(),
//				TargetType:       pulumi.String("example-value"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = chaosstudio.NewCapability(ctx, "example", &chaosstudio.CapabilityArgs{
//				CapabilityType:      pulumi.String("example-value"),
//				ChaosStudioTargetId: exampleTarget.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An existing Chaos Studio Target can be imported into Terraform using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:chaosstudio/capability:Capability example /{scope}/providers/Microsoft.Chaos/targets/{targetName}/capabilities/{capabilityName}
// ```
//
// * Where `{scope}` is the ID of the Azure Resource under which the Chaos Studio Target exists. For example `/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/some-resource-group`.
//
// * Where `{targetName}` is the name of the Target. For example `targetValue`.
//
// * Where `{capabilityName}` is the name of the Capability. For example `capabilityName`.
type Capability struct {
	pulumi.CustomResourceState

	// The capability that should be applied to the Chaos Studio Target. For supported values please see this Chaos Studio [Fault Library](https://learn.microsoft.com/azure/chaos-studio/chaos-studio-fault-library). Changing this forces a new Chaos Studio Capability to be created.
	CapabilityType pulumi.StringOutput `pulumi:"capabilityType"`
	// The Unique Resource Name of the Capability.
	CapabilityUrn pulumi.StringOutput `pulumi:"capabilityUrn"`
	// The Chaos Studio Target that the capability should be applied to. Changing this forces a new Chaos Studio Capability to be created.
	ChaosStudioTargetId pulumi.StringOutput `pulumi:"chaosStudioTargetId"`
}

// NewCapability registers a new resource with the given unique name, arguments, and options.
func NewCapability(ctx *pulumi.Context,
	name string, args *CapabilityArgs, opts ...pulumi.ResourceOption) (*Capability, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CapabilityType == nil {
		return nil, errors.New("invalid value for required argument 'CapabilityType'")
	}
	if args.ChaosStudioTargetId == nil {
		return nil, errors.New("invalid value for required argument 'ChaosStudioTargetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Capability
	err := ctx.RegisterResource("azure:chaosstudio/capability:Capability", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCapability gets an existing Capability resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCapability(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CapabilityState, opts ...pulumi.ResourceOption) (*Capability, error) {
	var resource Capability
	err := ctx.ReadResource("azure:chaosstudio/capability:Capability", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Capability resources.
type capabilityState struct {
	// The capability that should be applied to the Chaos Studio Target. For supported values please see this Chaos Studio [Fault Library](https://learn.microsoft.com/azure/chaos-studio/chaos-studio-fault-library). Changing this forces a new Chaos Studio Capability to be created.
	CapabilityType *string `pulumi:"capabilityType"`
	// The Unique Resource Name of the Capability.
	CapabilityUrn *string `pulumi:"capabilityUrn"`
	// The Chaos Studio Target that the capability should be applied to. Changing this forces a new Chaos Studio Capability to be created.
	ChaosStudioTargetId *string `pulumi:"chaosStudioTargetId"`
}

type CapabilityState struct {
	// The capability that should be applied to the Chaos Studio Target. For supported values please see this Chaos Studio [Fault Library](https://learn.microsoft.com/azure/chaos-studio/chaos-studio-fault-library). Changing this forces a new Chaos Studio Capability to be created.
	CapabilityType pulumi.StringPtrInput
	// The Unique Resource Name of the Capability.
	CapabilityUrn pulumi.StringPtrInput
	// The Chaos Studio Target that the capability should be applied to. Changing this forces a new Chaos Studio Capability to be created.
	ChaosStudioTargetId pulumi.StringPtrInput
}

func (CapabilityState) ElementType() reflect.Type {
	return reflect.TypeOf((*capabilityState)(nil)).Elem()
}

type capabilityArgs struct {
	// The capability that should be applied to the Chaos Studio Target. For supported values please see this Chaos Studio [Fault Library](https://learn.microsoft.com/azure/chaos-studio/chaos-studio-fault-library). Changing this forces a new Chaos Studio Capability to be created.
	CapabilityType string `pulumi:"capabilityType"`
	// The Chaos Studio Target that the capability should be applied to. Changing this forces a new Chaos Studio Capability to be created.
	ChaosStudioTargetId string `pulumi:"chaosStudioTargetId"`
}

// The set of arguments for constructing a Capability resource.
type CapabilityArgs struct {
	// The capability that should be applied to the Chaos Studio Target. For supported values please see this Chaos Studio [Fault Library](https://learn.microsoft.com/azure/chaos-studio/chaos-studio-fault-library). Changing this forces a new Chaos Studio Capability to be created.
	CapabilityType pulumi.StringInput
	// The Chaos Studio Target that the capability should be applied to. Changing this forces a new Chaos Studio Capability to be created.
	ChaosStudioTargetId pulumi.StringInput
}

func (CapabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*capabilityArgs)(nil)).Elem()
}

type CapabilityInput interface {
	pulumi.Input

	ToCapabilityOutput() CapabilityOutput
	ToCapabilityOutputWithContext(ctx context.Context) CapabilityOutput
}

func (*Capability) ElementType() reflect.Type {
	return reflect.TypeOf((**Capability)(nil)).Elem()
}

func (i *Capability) ToCapabilityOutput() CapabilityOutput {
	return i.ToCapabilityOutputWithContext(context.Background())
}

func (i *Capability) ToCapabilityOutputWithContext(ctx context.Context) CapabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityOutput)
}

// CapabilityArrayInput is an input type that accepts CapabilityArray and CapabilityArrayOutput values.
// You can construct a concrete instance of `CapabilityArrayInput` via:
//
//	CapabilityArray{ CapabilityArgs{...} }
type CapabilityArrayInput interface {
	pulumi.Input

	ToCapabilityArrayOutput() CapabilityArrayOutput
	ToCapabilityArrayOutputWithContext(context.Context) CapabilityArrayOutput
}

type CapabilityArray []CapabilityInput

func (CapabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Capability)(nil)).Elem()
}

func (i CapabilityArray) ToCapabilityArrayOutput() CapabilityArrayOutput {
	return i.ToCapabilityArrayOutputWithContext(context.Background())
}

func (i CapabilityArray) ToCapabilityArrayOutputWithContext(ctx context.Context) CapabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityArrayOutput)
}

// CapabilityMapInput is an input type that accepts CapabilityMap and CapabilityMapOutput values.
// You can construct a concrete instance of `CapabilityMapInput` via:
//
//	CapabilityMap{ "key": CapabilityArgs{...} }
type CapabilityMapInput interface {
	pulumi.Input

	ToCapabilityMapOutput() CapabilityMapOutput
	ToCapabilityMapOutputWithContext(context.Context) CapabilityMapOutput
}

type CapabilityMap map[string]CapabilityInput

func (CapabilityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Capability)(nil)).Elem()
}

func (i CapabilityMap) ToCapabilityMapOutput() CapabilityMapOutput {
	return i.ToCapabilityMapOutputWithContext(context.Background())
}

func (i CapabilityMap) ToCapabilityMapOutputWithContext(ctx context.Context) CapabilityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapabilityMapOutput)
}

type CapabilityOutput struct{ *pulumi.OutputState }

func (CapabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Capability)(nil)).Elem()
}

func (o CapabilityOutput) ToCapabilityOutput() CapabilityOutput {
	return o
}

func (o CapabilityOutput) ToCapabilityOutputWithContext(ctx context.Context) CapabilityOutput {
	return o
}

// The capability that should be applied to the Chaos Studio Target. For supported values please see this Chaos Studio [Fault Library](https://learn.microsoft.com/azure/chaos-studio/chaos-studio-fault-library). Changing this forces a new Chaos Studio Capability to be created.
func (o CapabilityOutput) CapabilityType() pulumi.StringOutput {
	return o.ApplyT(func(v *Capability) pulumi.StringOutput { return v.CapabilityType }).(pulumi.StringOutput)
}

// The Unique Resource Name of the Capability.
func (o CapabilityOutput) CapabilityUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *Capability) pulumi.StringOutput { return v.CapabilityUrn }).(pulumi.StringOutput)
}

// The Chaos Studio Target that the capability should be applied to. Changing this forces a new Chaos Studio Capability to be created.
func (o CapabilityOutput) ChaosStudioTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Capability) pulumi.StringOutput { return v.ChaosStudioTargetId }).(pulumi.StringOutput)
}

type CapabilityArrayOutput struct{ *pulumi.OutputState }

func (CapabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Capability)(nil)).Elem()
}

func (o CapabilityArrayOutput) ToCapabilityArrayOutput() CapabilityArrayOutput {
	return o
}

func (o CapabilityArrayOutput) ToCapabilityArrayOutputWithContext(ctx context.Context) CapabilityArrayOutput {
	return o
}

func (o CapabilityArrayOutput) Index(i pulumi.IntInput) CapabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Capability {
		return vs[0].([]*Capability)[vs[1].(int)]
	}).(CapabilityOutput)
}

type CapabilityMapOutput struct{ *pulumi.OutputState }

func (CapabilityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Capability)(nil)).Elem()
}

func (o CapabilityMapOutput) ToCapabilityMapOutput() CapabilityMapOutput {
	return o
}

func (o CapabilityMapOutput) ToCapabilityMapOutputWithContext(ctx context.Context) CapabilityMapOutput {
	return o
}

func (o CapabilityMapOutput) MapIndex(k pulumi.StringInput) CapabilityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Capability {
		return vs[0].(map[string]*Capability)[vs[1].(string)]
	}).(CapabilityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityInput)(nil)).Elem(), &Capability{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityArrayInput)(nil)).Elem(), CapabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CapabilityMapInput)(nil)).Elem(), CapabilityMap{})
	pulumi.RegisterOutputType(CapabilityOutput{})
	pulumi.RegisterOutputType(CapabilityArrayOutput{})
	pulumi.RegisterOutputType(CapabilityMapOutput{})
}
