// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redhatopenshift

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a fully managed Azure Red Hat OpenShift Cluster (also known as ARO).
//
// > **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/redhatopenshift"
//	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = azuread.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			exampleApplication, err := azuread.NewApplication(ctx, "example", &azuread.ApplicationArgs{
//				DisplayName: pulumi.String("example-aro"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServicePrincipal, err := azuread.NewServicePrincipal(ctx, "example", &azuread.ServicePrincipalArgs{
//				ClientId: exampleApplication.ClientId,
//			})
//			if err != nil {
//				return err
//			}
//			exampleServicePrincipalPassword, err := azuread.NewServicePrincipalPassword(ctx, "example", &azuread.ServicePrincipalPasswordArgs{
//				ServicePrincipalId: exampleServicePrincipal.ObjectId,
//			})
//			if err != nil {
//				return err
//			}
//			redhatopenshift, err := azuread.LookupServicePrincipal(ctx, &azuread.LookupServicePrincipalArgs{
//				ClientId: pulumi.StringRef("f1dd0a37-89c6-4e07-bcd1-ffd3d43d8875"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West US"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
//				Name: pulumi.String("example-vnet"),
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/22"),
//				},
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			roleNetwork1, err := authorization.NewAssignment(ctx, "role_network1", &authorization.AssignmentArgs{
//				Scope:              exampleVirtualNetwork.ID(),
//				RoleDefinitionName: pulumi.String("Network Contributor"),
//				PrincipalId:        exampleServicePrincipal.ObjectId,
//			})
//			if err != nil {
//				return err
//			}
//			roleNetwork2, err := authorization.NewAssignment(ctx, "role_network2", &authorization.AssignmentArgs{
//				Scope:              exampleVirtualNetwork.ID(),
//				RoleDefinitionName: pulumi.String("Network Contributor"),
//				PrincipalId:        pulumi.String(redhatopenshift.ObjectId),
//			})
//			if err != nil {
//				return err
//			}
//			mainSubnet, err := network.NewSubnet(ctx, "main_subnet", &network.SubnetArgs{
//				Name:               pulumi.String("main-subnet"),
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.0.0/23"),
//				},
//				ServiceEndpoints: pulumi.StringArray{
//					pulumi.String("Microsoft.Storage"),
//					pulumi.String("Microsoft.ContainerRegistry"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			workerSubnet, err := network.NewSubnet(ctx, "worker_subnet", &network.SubnetArgs{
//				Name:               pulumi.String("worker-subnet"),
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/23"),
//				},
//				ServiceEndpoints: pulumi.StringArray{
//					pulumi.String("Microsoft.Storage"),
//					pulumi.String("Microsoft.ContainerRegistry"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleCluster, err := redhatopenshift.NewCluster(ctx, "example", &redhatopenshift.ClusterArgs{
//				Name:              pulumi.String("examplearo"),
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				ClusterProfile: &redhatopenshift.ClusterClusterProfileArgs{
//					Domain:  pulumi.String("aro-example.com"),
//					Version: pulumi.String("4.13.23"),
//				},
//				NetworkProfile: &redhatopenshift.ClusterNetworkProfileArgs{
//					PodCidr:     pulumi.String("10.128.0.0/14"),
//					ServiceCidr: pulumi.String("172.30.0.0/16"),
//				},
//				MainProfile: &redhatopenshift.ClusterMainProfileArgs{
//					VmSize:   pulumi.String("Standard_D8s_v3"),
//					SubnetId: mainSubnet.ID(),
//				},
//				ApiServerProfile: &redhatopenshift.ClusterApiServerProfileArgs{
//					Visibility: pulumi.String("Public"),
//				},
//				IngressProfile: &redhatopenshift.ClusterIngressProfileArgs{
//					Visibility: pulumi.String("Public"),
//				},
//				WorkerProfile: &redhatopenshift.ClusterWorkerProfileArgs{
//					VmSize:     pulumi.String("Standard_D4s_v3"),
//					DiskSizeGb: pulumi.Int(128),
//					NodeCount:  pulumi.Int(3),
//					SubnetId:   workerSubnet.ID(),
//				},
//				ServicePrincipal: &redhatopenshift.ClusterServicePrincipalArgs{
//					ClientId:     exampleApplication.ClientId,
//					ClientSecret: exampleServicePrincipalPassword.Value,
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				roleNetwork1,
//				roleNetwork2,
//			}))
//			if err != nil {
//				return err
//			}
//			ctx.Export("consoleUrl", exampleCluster.ConsoleUrl)
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.RedHatOpenShift` - 2023-09-04
//
// ## Import
//
// Red Hat OpenShift Clusters can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:redhatopenshift/cluster:Cluster cluster1 /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/group1/providers/Microsoft.RedHatOpenShift/openShiftClusters/cluster1
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// An `apiServerProfile` block as defined below. Changing this forces a new resource to be created.
	ApiServerProfile ClusterApiServerProfileOutput `pulumi:"apiServerProfile"`
	// A `clusterProfile` block as defined below. Changing this forces a new resource to be created.
	ClusterProfile ClusterClusterProfileOutput `pulumi:"clusterProfile"`
	// The Red Hat OpenShift cluster console URL.
	ConsoleUrl pulumi.StringOutput `pulumi:"consoleUrl"`
	// An `ingressProfile` block as defined below. Changing this forces a new resource to be created.
	IngressProfile ClusterIngressProfileOutput `pulumi:"ingressProfile"`
	// The location where the Azure Red Hat OpenShift Cluster should be created. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A `mainProfile` block as defined below. Changing this forces a new resource to be created.
	MainProfile ClusterMainProfileOutput `pulumi:"mainProfile"`
	// The name of the Azure Red Hat OpenShift Cluster to create. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `networkProfile` block as defined below. Changing this forces a new resource to be created.
	NetworkProfile ClusterNetworkProfileOutput `pulumi:"networkProfile"`
	// Specifies the Resource Group where the Azure Red Hat OpenShift Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `servicePrincipal` block as defined below.
	ServicePrincipal ClusterServicePrincipalOutput `pulumi:"servicePrincipal"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A `workerProfile` block as defined below. Changing this forces a new resource to be created.
	WorkerProfile ClusterWorkerProfileOutput `pulumi:"workerProfile"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiServerProfile == nil {
		return nil, errors.New("invalid value for required argument 'ApiServerProfile'")
	}
	if args.ClusterProfile == nil {
		return nil, errors.New("invalid value for required argument 'ClusterProfile'")
	}
	if args.IngressProfile == nil {
		return nil, errors.New("invalid value for required argument 'IngressProfile'")
	}
	if args.MainProfile == nil {
		return nil, errors.New("invalid value for required argument 'MainProfile'")
	}
	if args.NetworkProfile == nil {
		return nil, errors.New("invalid value for required argument 'NetworkProfile'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServicePrincipal == nil {
		return nil, errors.New("invalid value for required argument 'ServicePrincipal'")
	}
	if args.WorkerProfile == nil {
		return nil, errors.New("invalid value for required argument 'WorkerProfile'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("azure:redhatopenshift/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("azure:redhatopenshift/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// An `apiServerProfile` block as defined below. Changing this forces a new resource to be created.
	ApiServerProfile *ClusterApiServerProfile `pulumi:"apiServerProfile"`
	// A `clusterProfile` block as defined below. Changing this forces a new resource to be created.
	ClusterProfile *ClusterClusterProfile `pulumi:"clusterProfile"`
	// The Red Hat OpenShift cluster console URL.
	ConsoleUrl *string `pulumi:"consoleUrl"`
	// An `ingressProfile` block as defined below. Changing this forces a new resource to be created.
	IngressProfile *ClusterIngressProfile `pulumi:"ingressProfile"`
	// The location where the Azure Red Hat OpenShift Cluster should be created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A `mainProfile` block as defined below. Changing this forces a new resource to be created.
	MainProfile *ClusterMainProfile `pulumi:"mainProfile"`
	// The name of the Azure Red Hat OpenShift Cluster to create. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `networkProfile` block as defined below. Changing this forces a new resource to be created.
	NetworkProfile *ClusterNetworkProfile `pulumi:"networkProfile"`
	// Specifies the Resource Group where the Azure Red Hat OpenShift Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `servicePrincipal` block as defined below.
	ServicePrincipal *ClusterServicePrincipal `pulumi:"servicePrincipal"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// A `workerProfile` block as defined below. Changing this forces a new resource to be created.
	WorkerProfile *ClusterWorkerProfile `pulumi:"workerProfile"`
}

type ClusterState struct {
	// An `apiServerProfile` block as defined below. Changing this forces a new resource to be created.
	ApiServerProfile ClusterApiServerProfilePtrInput
	// A `clusterProfile` block as defined below. Changing this forces a new resource to be created.
	ClusterProfile ClusterClusterProfilePtrInput
	// The Red Hat OpenShift cluster console URL.
	ConsoleUrl pulumi.StringPtrInput
	// An `ingressProfile` block as defined below. Changing this forces a new resource to be created.
	IngressProfile ClusterIngressProfilePtrInput
	// The location where the Azure Red Hat OpenShift Cluster should be created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A `mainProfile` block as defined below. Changing this forces a new resource to be created.
	MainProfile ClusterMainProfilePtrInput
	// The name of the Azure Red Hat OpenShift Cluster to create. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `networkProfile` block as defined below. Changing this forces a new resource to be created.
	NetworkProfile ClusterNetworkProfilePtrInput
	// Specifies the Resource Group where the Azure Red Hat OpenShift Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `servicePrincipal` block as defined below.
	ServicePrincipal ClusterServicePrincipalPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// A `workerProfile` block as defined below. Changing this forces a new resource to be created.
	WorkerProfile ClusterWorkerProfilePtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// An `apiServerProfile` block as defined below. Changing this forces a new resource to be created.
	ApiServerProfile ClusterApiServerProfile `pulumi:"apiServerProfile"`
	// A `clusterProfile` block as defined below. Changing this forces a new resource to be created.
	ClusterProfile ClusterClusterProfile `pulumi:"clusterProfile"`
	// An `ingressProfile` block as defined below. Changing this forces a new resource to be created.
	IngressProfile ClusterIngressProfile `pulumi:"ingressProfile"`
	// The location where the Azure Red Hat OpenShift Cluster should be created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A `mainProfile` block as defined below. Changing this forces a new resource to be created.
	MainProfile ClusterMainProfile `pulumi:"mainProfile"`
	// The name of the Azure Red Hat OpenShift Cluster to create. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `networkProfile` block as defined below. Changing this forces a new resource to be created.
	NetworkProfile ClusterNetworkProfile `pulumi:"networkProfile"`
	// Specifies the Resource Group where the Azure Red Hat OpenShift Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `servicePrincipal` block as defined below.
	ServicePrincipal ClusterServicePrincipal `pulumi:"servicePrincipal"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// A `workerProfile` block as defined below. Changing this forces a new resource to be created.
	WorkerProfile ClusterWorkerProfile `pulumi:"workerProfile"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// An `apiServerProfile` block as defined below. Changing this forces a new resource to be created.
	ApiServerProfile ClusterApiServerProfileInput
	// A `clusterProfile` block as defined below. Changing this forces a new resource to be created.
	ClusterProfile ClusterClusterProfileInput
	// An `ingressProfile` block as defined below. Changing this forces a new resource to be created.
	IngressProfile ClusterIngressProfileInput
	// The location where the Azure Red Hat OpenShift Cluster should be created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A `mainProfile` block as defined below. Changing this forces a new resource to be created.
	MainProfile ClusterMainProfileInput
	// The name of the Azure Red Hat OpenShift Cluster to create. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `networkProfile` block as defined below. Changing this forces a new resource to be created.
	NetworkProfile ClusterNetworkProfileInput
	// Specifies the Resource Group where the Azure Red Hat OpenShift Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `servicePrincipal` block as defined below.
	ServicePrincipal ClusterServicePrincipalInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// A `workerProfile` block as defined below. Changing this forces a new resource to be created.
	WorkerProfile ClusterWorkerProfileInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// An `apiServerProfile` block as defined below. Changing this forces a new resource to be created.
func (o ClusterOutput) ApiServerProfile() ClusterApiServerProfileOutput {
	return o.ApplyT(func(v *Cluster) ClusterApiServerProfileOutput { return v.ApiServerProfile }).(ClusterApiServerProfileOutput)
}

// A `clusterProfile` block as defined below. Changing this forces a new resource to be created.
func (o ClusterOutput) ClusterProfile() ClusterClusterProfileOutput {
	return o.ApplyT(func(v *Cluster) ClusterClusterProfileOutput { return v.ClusterProfile }).(ClusterClusterProfileOutput)
}

// The Red Hat OpenShift cluster console URL.
func (o ClusterOutput) ConsoleUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ConsoleUrl }).(pulumi.StringOutput)
}

// An `ingressProfile` block as defined below. Changing this forces a new resource to be created.
func (o ClusterOutput) IngressProfile() ClusterIngressProfileOutput {
	return o.ApplyT(func(v *Cluster) ClusterIngressProfileOutput { return v.IngressProfile }).(ClusterIngressProfileOutput)
}

// The location where the Azure Red Hat OpenShift Cluster should be created. Changing this forces a new resource to be created.
func (o ClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A `mainProfile` block as defined below. Changing this forces a new resource to be created.
func (o ClusterOutput) MainProfile() ClusterMainProfileOutput {
	return o.ApplyT(func(v *Cluster) ClusterMainProfileOutput { return v.MainProfile }).(ClusterMainProfileOutput)
}

// The name of the Azure Red Hat OpenShift Cluster to create. Changing this forces a new resource to be created.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `networkProfile` block as defined below. Changing this forces a new resource to be created.
func (o ClusterOutput) NetworkProfile() ClusterNetworkProfileOutput {
	return o.ApplyT(func(v *Cluster) ClusterNetworkProfileOutput { return v.NetworkProfile }).(ClusterNetworkProfileOutput)
}

// Specifies the Resource Group where the Azure Red Hat OpenShift Cluster should exist. Changing this forces a new resource to be created.
func (o ClusterOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `servicePrincipal` block as defined below.
func (o ClusterOutput) ServicePrincipal() ClusterServicePrincipalOutput {
	return o.ApplyT(func(v *Cluster) ClusterServicePrincipalOutput { return v.ServicePrincipal }).(ClusterServicePrincipalOutput)
}

// A mapping of tags to assign to the resource.
func (o ClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A `workerProfile` block as defined below. Changing this forces a new resource to be created.
func (o ClusterOutput) WorkerProfile() ClusterWorkerProfileOutput {
	return o.ApplyT(func(v *Cluster) ClusterWorkerProfileOutput { return v.WorkerProfile }).(ClusterWorkerProfileOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
