// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Batch pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/base64"
// 	"fmt"
// 	"io/ioutil"
//
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/batch"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func filebase64OrPanic(path string) pulumi.StringPtrInput {
// 	if fileData, err := ioutil.ReadFile(path); err == nil {
// 		return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
// 	} else {
// 		panic(err.Error())
// 	}
// }
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("LRS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = batch.NewAccount(ctx, "exampleBatch/accountAccount", &batch.AccountArgs{
// 			ResourceGroupName:  exampleResourceGroup.Name,
// 			Location:           exampleResourceGroup.Location,
// 			PoolAllocationMode: pulumi.String("BatchService"),
// 			StorageAccountId:   exampleAccount.ID(),
// 			Tags: pulumi.StringMap{
// 				"env": pulumi.String("test"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleCertificate, err := batch.NewCertificate(ctx, "exampleCertificate", &batch.CertificateArgs{
// 			ResourceGroupName:   exampleResourceGroup.Name,
// 			AccountName:         exampleBatch / accountAccount.Name,
// 			Certificate:         filebase64OrPanic("certificate.cer"),
// 			Format:              pulumi.String("Cer"),
// 			Thumbprint:          pulumi.String("312d31a79fa0cef49c00f769afc2b73e9f4edf34"),
// 			ThumbprintAlgorithm: pulumi.String("SHA1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = batch.NewPool(ctx, "examplePool", &batch.PoolArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			AccountName:       exampleBatch / accountAccount.Name,
// 			DisplayName:       pulumi.String("Test Acc Pool Auto"),
// 			VmSize:            pulumi.String("Standard_A1"),
// 			NodeAgentSkuId:    pulumi.String("batch.node.ubuntu 20.04"),
// 			AutoScale: &batch.PoolAutoScaleArgs{
// 				EvaluationInterval: pulumi.String("PT15M"),
// 				Formula:            pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v", "      startingNumberOfVMs = 1;\n", "      maxNumberofVMs = 25;\n", "      pendingTaskSamplePercent = ", "$", "PendingTasks.GetSamplePercent(180 * TimeInterval_Second);\n", "      pendingTaskSamples = pendingTaskSamplePercent < 70 ? startingNumberOfVMs : avg(", "$", "PendingTasks.GetSample(180 *   TimeInterval_Second));\n", "      ", "$", "TargetDedicatedNodes=min(maxNumberofVMs, pendingTaskSamples);\n")),
// 			},
// 			StorageImageReference: &batch.PoolStorageImageReferenceArgs{
// 				Publisher: pulumi.String("microsoft-azure-batch"),
// 				Offer:     pulumi.String("ubuntu-server-container"),
// 				Sku:       pulumi.String("20-04-lts"),
// 				Version:   pulumi.String("latest"),
// 			},
// 			ContainerConfiguration: &batch.PoolContainerConfigurationArgs{
// 				Type: pulumi.String("DockerCompatible"),
// 				ContainerRegistries: batch.PoolContainerConfigurationContainerRegistryArray{
// 					&batch.PoolContainerConfigurationContainerRegistryArgs{
// 						RegistryServer: pulumi.String("docker.io"),
// 						UserName:       pulumi.String("login"),
// 						Password:       pulumi.String("apassword"),
// 					},
// 				},
// 			},
// 			StartTask: &batch.PoolStartTaskArgs{
// 				CommandLine:      pulumi.String(fmt.Sprintf("%v%v%v", "echo 'Hello World from ", "$", "env'")),
// 				TaskRetryMaximum: pulumi.Int(1),
// 				WaitForSuccess:   pulumi.Bool(true),
// 				CommonEnvironmentProperties: pulumi.StringMap{
// 					"env": pulumi.String("TEST"),
// 				},
// 				UserIdentity: &batch.PoolStartTaskUserIdentityArgs{
// 					AutoUser: &batch.PoolStartTaskUserIdentityAutoUserArgs{
// 						ElevationLevel: pulumi.String("NonAdmin"),
// 						Scope:          pulumi.String("Task"),
// 					},
// 				},
// 			},
// 			Certificates: batch.PoolCertificateArray{
// 				&batch.PoolCertificateArgs{
// 					Id: exampleCertificate.ID(),
// 					Visibilities: pulumi.StringArray{
// 						pulumi.String("StartTask"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Batch Pools can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:batch/pool:Pool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.Batch/batchAccounts/myBatchAccount1/pools/myBatchPool1
// ```
type Pool struct {
	pulumi.CustomResourceState

	// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// A `autoScale` block that describes the scale settings when using auto scale.
	AutoScale PoolAutoScalePtrOutput `pulumi:"autoScale"`
	// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool.
	Certificates PoolCertificateArrayOutput `pulumi:"certificates"`
	// The container configuration used in the pool's VMs.
	ContainerConfiguration PoolContainerConfigurationPtrOutput `pulumi:"containerConfiguration"`
	// Specifies the display name of the Batch pool.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// A `fixedScale` block that describes the scale settings when using fixed scale.
	FixedScale PoolFixedScalePtrOutput `pulumi:"fixedScale"`
	// An `identity` block as defined below.
	Identity PoolIdentityPtrOutput `pulumi:"identity"`
	// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
	MaxTasksPerNode pulumi.IntPtrOutput `pulumi:"maxTasksPerNode"`
	// A map of custom batch pool metadata.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `networkConfiguration` block that describes the network configurations for the Batch pool.
	NetworkConfiguration PoolNetworkConfigurationPtrOutput `pulumi:"networkConfiguration"`
	// Specifies the Sku of the node agents that will be created in the Batch pool.
	NodeAgentSkuId pulumi.StringOutput `pulumi:"nodeAgentSkuId"`
	// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `startTask` block that describes the start task settings for the Batch pool.
	StartTask                  PoolStartTaskPtrOutput `pulumi:"startTask"`
	StopPendingResizeOperation pulumi.BoolPtrOutput   `pulumi:"stopPendingResizeOperation"`
	// A `storageImageReference` for the virtual machines that will compose the Batch pool.
	StorageImageReference PoolStorageImageReferenceOutput `pulumi:"storageImageReference"`
	// Specifies the size of the VM created in the Batch pool.
	VmSize pulumi.StringOutput `pulumi:"vmSize"`
}

// NewPool registers a new resource with the given unique name, arguments, and options.
func NewPool(ctx *pulumi.Context,
	name string, args *PoolArgs, opts ...pulumi.ResourceOption) (*Pool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.NodeAgentSkuId == nil {
		return nil, errors.New("invalid value for required argument 'NodeAgentSkuId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageImageReference == nil {
		return nil, errors.New("invalid value for required argument 'StorageImageReference'")
	}
	if args.VmSize == nil {
		return nil, errors.New("invalid value for required argument 'VmSize'")
	}
	var resource Pool
	err := ctx.RegisterResource("azure:batch/pool:Pool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPool gets an existing Pool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PoolState, opts ...pulumi.ResourceOption) (*Pool, error) {
	var resource Pool
	err := ctx.ReadResource("azure:batch/pool:Pool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pool resources.
type poolState struct {
	// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
	AccountName *string `pulumi:"accountName"`
	// A `autoScale` block that describes the scale settings when using auto scale.
	AutoScale *PoolAutoScale `pulumi:"autoScale"`
	// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool.
	Certificates []PoolCertificate `pulumi:"certificates"`
	// The container configuration used in the pool's VMs.
	ContainerConfiguration *PoolContainerConfiguration `pulumi:"containerConfiguration"`
	// Specifies the display name of the Batch pool.
	DisplayName *string `pulumi:"displayName"`
	// A `fixedScale` block that describes the scale settings when using fixed scale.
	FixedScale *PoolFixedScale `pulumi:"fixedScale"`
	// An `identity` block as defined below.
	Identity *PoolIdentity `pulumi:"identity"`
	// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
	MaxTasksPerNode *int `pulumi:"maxTasksPerNode"`
	// A map of custom batch pool metadata.
	Metadata map[string]string `pulumi:"metadata"`
	// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `networkConfiguration` block that describes the network configurations for the Batch pool.
	NetworkConfiguration *PoolNetworkConfiguration `pulumi:"networkConfiguration"`
	// Specifies the Sku of the node agents that will be created in the Batch pool.
	NodeAgentSkuId *string `pulumi:"nodeAgentSkuId"`
	// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `startTask` block that describes the start task settings for the Batch pool.
	StartTask                  *PoolStartTask `pulumi:"startTask"`
	StopPendingResizeOperation *bool          `pulumi:"stopPendingResizeOperation"`
	// A `storageImageReference` for the virtual machines that will compose the Batch pool.
	StorageImageReference *PoolStorageImageReference `pulumi:"storageImageReference"`
	// Specifies the size of the VM created in the Batch pool.
	VmSize *string `pulumi:"vmSize"`
}

type PoolState struct {
	// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
	AccountName pulumi.StringPtrInput
	// A `autoScale` block that describes the scale settings when using auto scale.
	AutoScale PoolAutoScalePtrInput
	// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool.
	Certificates PoolCertificateArrayInput
	// The container configuration used in the pool's VMs.
	ContainerConfiguration PoolContainerConfigurationPtrInput
	// Specifies the display name of the Batch pool.
	DisplayName pulumi.StringPtrInput
	// A `fixedScale` block that describes the scale settings when using fixed scale.
	FixedScale PoolFixedScalePtrInput
	// An `identity` block as defined below.
	Identity PoolIdentityPtrInput
	// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
	MaxTasksPerNode pulumi.IntPtrInput
	// A map of custom batch pool metadata.
	Metadata pulumi.StringMapInput
	// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `networkConfiguration` block that describes the network configurations for the Batch pool.
	NetworkConfiguration PoolNetworkConfigurationPtrInput
	// Specifies the Sku of the node agents that will be created in the Batch pool.
	NodeAgentSkuId pulumi.StringPtrInput
	// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `startTask` block that describes the start task settings for the Batch pool.
	StartTask                  PoolStartTaskPtrInput
	StopPendingResizeOperation pulumi.BoolPtrInput
	// A `storageImageReference` for the virtual machines that will compose the Batch pool.
	StorageImageReference PoolStorageImageReferencePtrInput
	// Specifies the size of the VM created in the Batch pool.
	VmSize pulumi.StringPtrInput
}

func (PoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*poolState)(nil)).Elem()
}

type poolArgs struct {
	// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
	AccountName string `pulumi:"accountName"`
	// A `autoScale` block that describes the scale settings when using auto scale.
	AutoScale *PoolAutoScale `pulumi:"autoScale"`
	// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool.
	Certificates []PoolCertificate `pulumi:"certificates"`
	// The container configuration used in the pool's VMs.
	ContainerConfiguration *PoolContainerConfiguration `pulumi:"containerConfiguration"`
	// Specifies the display name of the Batch pool.
	DisplayName *string `pulumi:"displayName"`
	// A `fixedScale` block that describes the scale settings when using fixed scale.
	FixedScale *PoolFixedScale `pulumi:"fixedScale"`
	// An `identity` block as defined below.
	Identity *PoolIdentity `pulumi:"identity"`
	// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
	MaxTasksPerNode *int `pulumi:"maxTasksPerNode"`
	// A map of custom batch pool metadata.
	Metadata map[string]string `pulumi:"metadata"`
	// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `networkConfiguration` block that describes the network configurations for the Batch pool.
	NetworkConfiguration *PoolNetworkConfiguration `pulumi:"networkConfiguration"`
	// Specifies the Sku of the node agents that will be created in the Batch pool.
	NodeAgentSkuId string `pulumi:"nodeAgentSkuId"`
	// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `startTask` block that describes the start task settings for the Batch pool.
	StartTask                  *PoolStartTask `pulumi:"startTask"`
	StopPendingResizeOperation *bool          `pulumi:"stopPendingResizeOperation"`
	// A `storageImageReference` for the virtual machines that will compose the Batch pool.
	StorageImageReference PoolStorageImageReference `pulumi:"storageImageReference"`
	// Specifies the size of the VM created in the Batch pool.
	VmSize string `pulumi:"vmSize"`
}

// The set of arguments for constructing a Pool resource.
type PoolArgs struct {
	// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
	AccountName pulumi.StringInput
	// A `autoScale` block that describes the scale settings when using auto scale.
	AutoScale PoolAutoScalePtrInput
	// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool.
	Certificates PoolCertificateArrayInput
	// The container configuration used in the pool's VMs.
	ContainerConfiguration PoolContainerConfigurationPtrInput
	// Specifies the display name of the Batch pool.
	DisplayName pulumi.StringPtrInput
	// A `fixedScale` block that describes the scale settings when using fixed scale.
	FixedScale PoolFixedScalePtrInput
	// An `identity` block as defined below.
	Identity PoolIdentityPtrInput
	// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
	MaxTasksPerNode pulumi.IntPtrInput
	// A map of custom batch pool metadata.
	Metadata pulumi.StringMapInput
	// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `networkConfiguration` block that describes the network configurations for the Batch pool.
	NetworkConfiguration PoolNetworkConfigurationPtrInput
	// Specifies the Sku of the node agents that will be created in the Batch pool.
	NodeAgentSkuId pulumi.StringInput
	// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `startTask` block that describes the start task settings for the Batch pool.
	StartTask                  PoolStartTaskPtrInput
	StopPendingResizeOperation pulumi.BoolPtrInput
	// A `storageImageReference` for the virtual machines that will compose the Batch pool.
	StorageImageReference PoolStorageImageReferenceInput
	// Specifies the size of the VM created in the Batch pool.
	VmSize pulumi.StringInput
}

func (PoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*poolArgs)(nil)).Elem()
}

type PoolInput interface {
	pulumi.Input

	ToPoolOutput() PoolOutput
	ToPoolOutputWithContext(ctx context.Context) PoolOutput
}

func (*Pool) ElementType() reflect.Type {
	return reflect.TypeOf((**Pool)(nil)).Elem()
}

func (i *Pool) ToPoolOutput() PoolOutput {
	return i.ToPoolOutputWithContext(context.Background())
}

func (i *Pool) ToPoolOutputWithContext(ctx context.Context) PoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolOutput)
}

// PoolArrayInput is an input type that accepts PoolArray and PoolArrayOutput values.
// You can construct a concrete instance of `PoolArrayInput` via:
//
//          PoolArray{ PoolArgs{...} }
type PoolArrayInput interface {
	pulumi.Input

	ToPoolArrayOutput() PoolArrayOutput
	ToPoolArrayOutputWithContext(context.Context) PoolArrayOutput
}

type PoolArray []PoolInput

func (PoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pool)(nil)).Elem()
}

func (i PoolArray) ToPoolArrayOutput() PoolArrayOutput {
	return i.ToPoolArrayOutputWithContext(context.Background())
}

func (i PoolArray) ToPoolArrayOutputWithContext(ctx context.Context) PoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolArrayOutput)
}

// PoolMapInput is an input type that accepts PoolMap and PoolMapOutput values.
// You can construct a concrete instance of `PoolMapInput` via:
//
//          PoolMap{ "key": PoolArgs{...} }
type PoolMapInput interface {
	pulumi.Input

	ToPoolMapOutput() PoolMapOutput
	ToPoolMapOutputWithContext(context.Context) PoolMapOutput
}

type PoolMap map[string]PoolInput

func (PoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pool)(nil)).Elem()
}

func (i PoolMap) ToPoolMapOutput() PoolMapOutput {
	return i.ToPoolMapOutputWithContext(context.Background())
}

func (i PoolMap) ToPoolMapOutputWithContext(ctx context.Context) PoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolMapOutput)
}

type PoolOutput struct{ *pulumi.OutputState }

func (PoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pool)(nil)).Elem()
}

func (o PoolOutput) ToPoolOutput() PoolOutput {
	return o
}

func (o PoolOutput) ToPoolOutputWithContext(ctx context.Context) PoolOutput {
	return o
}

type PoolArrayOutput struct{ *pulumi.OutputState }

func (PoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pool)(nil)).Elem()
}

func (o PoolArrayOutput) ToPoolArrayOutput() PoolArrayOutput {
	return o
}

func (o PoolArrayOutput) ToPoolArrayOutputWithContext(ctx context.Context) PoolArrayOutput {
	return o
}

func (o PoolArrayOutput) Index(i pulumi.IntInput) PoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pool {
		return vs[0].([]*Pool)[vs[1].(int)]
	}).(PoolOutput)
}

type PoolMapOutput struct{ *pulumi.OutputState }

func (PoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pool)(nil)).Elem()
}

func (o PoolMapOutput) ToPoolMapOutput() PoolMapOutput {
	return o
}

func (o PoolMapOutput) ToPoolMapOutputWithContext(ctx context.Context) PoolMapOutput {
	return o
}

func (o PoolMapOutput) MapIndex(k pulumi.StringInput) PoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pool {
		return vs[0].(map[string]*Pool)[vs[1].(string)]
	}).(PoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PoolInput)(nil)).Elem(), &Pool{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolArrayInput)(nil)).Elem(), PoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolMapInput)(nil)).Elem(), PoolMap{})
	pulumi.RegisterOutputType(PoolOutput{})
	pulumi.RegisterOutputType(PoolArrayOutput{})
	pulumi.RegisterOutputType(PoolMapOutput{})
}
