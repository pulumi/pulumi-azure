// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Azure Batch pool.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/batch_pool.html.markdown.
type Pool struct {
	s *pulumi.ResourceState
}

// NewPool registers a new resource with the given unique name, arguments, and options.
func NewPool(ctx *pulumi.Context,
	name string, args *PoolArgs, opts ...pulumi.ResourceOpt) (*Pool, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.NodeAgentSkuId == nil {
		return nil, errors.New("missing required argument 'NodeAgentSkuId'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.StorageImageReference == nil {
		return nil, errors.New("missing required argument 'StorageImageReference'")
	}
	if args == nil || args.VmSize == nil {
		return nil, errors.New("missing required argument 'VmSize'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountName"] = nil
		inputs["autoScale"] = nil
		inputs["certificates"] = nil
		inputs["containerConfiguration"] = nil
		inputs["displayName"] = nil
		inputs["fixedScale"] = nil
		inputs["maxTasksPerNode"] = nil
		inputs["name"] = nil
		inputs["nodeAgentSkuId"] = nil
		inputs["resourceGroupName"] = nil
		inputs["startTask"] = nil
		inputs["stopPendingResizeOperation"] = nil
		inputs["storageImageReference"] = nil
		inputs["vmSize"] = nil
	} else {
		inputs["accountName"] = args.AccountName
		inputs["autoScale"] = args.AutoScale
		inputs["certificates"] = args.Certificates
		inputs["containerConfiguration"] = args.ContainerConfiguration
		inputs["displayName"] = args.DisplayName
		inputs["fixedScale"] = args.FixedScale
		inputs["maxTasksPerNode"] = args.MaxTasksPerNode
		inputs["name"] = args.Name
		inputs["nodeAgentSkuId"] = args.NodeAgentSkuId
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["startTask"] = args.StartTask
		inputs["stopPendingResizeOperation"] = args.StopPendingResizeOperation
		inputs["storageImageReference"] = args.StorageImageReference
		inputs["vmSize"] = args.VmSize
	}
	s, err := ctx.RegisterResource("azure:batch/pool:Pool", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Pool{s: s}, nil
}

// GetPool gets an existing Pool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPool(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PoolState, opts ...pulumi.ResourceOpt) (*Pool, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountName"] = state.AccountName
		inputs["autoScale"] = state.AutoScale
		inputs["certificates"] = state.Certificates
		inputs["containerConfiguration"] = state.ContainerConfiguration
		inputs["displayName"] = state.DisplayName
		inputs["fixedScale"] = state.FixedScale
		inputs["maxTasksPerNode"] = state.MaxTasksPerNode
		inputs["name"] = state.Name
		inputs["nodeAgentSkuId"] = state.NodeAgentSkuId
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["startTask"] = state.StartTask
		inputs["stopPendingResizeOperation"] = state.StopPendingResizeOperation
		inputs["storageImageReference"] = state.StorageImageReference
		inputs["vmSize"] = state.VmSize
	}
	s, err := ctx.ReadResource("azure:batch/pool:Pool", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Pool{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Pool) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Pool) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
func (r *Pool) AccountName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accountName"])
}

// A `auto_scale` block that describes the scale settings when using auto scale.
func (r *Pool) AutoScale() *pulumi.Output {
	return r.s.State["autoScale"]
}

// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool.
func (r *Pool) Certificates() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["certificates"])
}

// The container configuration used in the pool's VMs.
func (r *Pool) ContainerConfiguration() *pulumi.Output {
	return r.s.State["containerConfiguration"]
}

// Specifies the display name of the Batch pool.
func (r *Pool) DisplayName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["displayName"])
}

// A `fixed_scale` block that describes the scale settings when using fixed scale.
func (r *Pool) FixedScale() *pulumi.Output {
	return r.s.State["fixedScale"]
}

// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
func (r *Pool) MaxTasksPerNode() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxTasksPerNode"])
}

// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
func (r *Pool) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Specifies the Sku of the node agents that will be created in the Batch pool.
func (r *Pool) NodeAgentSkuId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nodeAgentSkuId"])
}

// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
func (r *Pool) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// A `start_task` block that describes the start task settings for the Batch pool.
func (r *Pool) StartTask() *pulumi.Output {
	return r.s.State["startTask"]
}

func (r *Pool) StopPendingResizeOperation() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["stopPendingResizeOperation"])
}

// A `storage_image_reference` for the virtual machines that will compose the Batch pool.
func (r *Pool) StorageImageReference() *pulumi.Output {
	return r.s.State["storageImageReference"]
}

// Specifies the size of the VM created in the Batch pool.
func (r *Pool) VmSize() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vmSize"])
}

// Input properties used for looking up and filtering Pool resources.
type PoolState struct {
	// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
	AccountName interface{}
	// A `auto_scale` block that describes the scale settings when using auto scale.
	AutoScale interface{}
	// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool.
	Certificates interface{}
	// The container configuration used in the pool's VMs.
	ContainerConfiguration interface{}
	// Specifies the display name of the Batch pool.
	DisplayName interface{}
	// A `fixed_scale` block that describes the scale settings when using fixed scale.
	FixedScale interface{}
	// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
	MaxTasksPerNode interface{}
	// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the Sku of the node agents that will be created in the Batch pool.
	NodeAgentSkuId interface{}
	// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A `start_task` block that describes the start task settings for the Batch pool.
	StartTask interface{}
	StopPendingResizeOperation interface{}
	// A `storage_image_reference` for the virtual machines that will compose the Batch pool.
	StorageImageReference interface{}
	// Specifies the size of the VM created in the Batch pool.
	VmSize interface{}
}

// The set of arguments for constructing a Pool resource.
type PoolArgs struct {
	// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
	AccountName interface{}
	// A `auto_scale` block that describes the scale settings when using auto scale.
	AutoScale interface{}
	// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool.
	Certificates interface{}
	// The container configuration used in the pool's VMs.
	ContainerConfiguration interface{}
	// Specifies the display name of the Batch pool.
	DisplayName interface{}
	// A `fixed_scale` block that describes the scale settings when using fixed scale.
	FixedScale interface{}
	// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
	MaxTasksPerNode interface{}
	// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the Sku of the node agents that will be created in the Batch pool.
	NodeAgentSkuId interface{}
	// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A `start_task` block that describes the start task settings for the Batch pool.
	StartTask interface{}
	StopPendingResizeOperation interface{}
	// A `storage_image_reference` for the virtual machines that will compose the Batch pool.
	StorageImageReference interface{}
	// Specifies the size of the VM created in the Batch pool.
	VmSize interface{}
}
