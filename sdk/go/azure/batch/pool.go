// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Azure Batch pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/base64"
//	"os"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/batch"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func filebase64OrPanic(path string) pulumi.StringPtrInput {
//		if fileData, err := os.ReadFile(path); err == nil {
//			return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
//		} else {
//			panic(err.Error())
//		}
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = batch.NewAccount(ctx, "exampleBatch/accountAccount", &batch.AccountArgs{
//				ResourceGroupName:                exampleResourceGroup.Name,
//				Location:                         exampleResourceGroup.Location,
//				PoolAllocationMode:               pulumi.String("BatchService"),
//				StorageAccountId:                 exampleAccount.ID(),
//				StorageAccountAuthenticationMode: pulumi.String("StorageKeys"),
//				Tags: pulumi.StringMap{
//					"env": pulumi.String("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleCertificate, err := batch.NewCertificate(ctx, "exampleCertificate", &batch.CertificateArgs{
//				ResourceGroupName:   exampleResourceGroup.Name,
//				AccountName:         exampleBatch / accountAccount.Name,
//				Certificate:         filebase64OrPanic("certificate.cer"),
//				Format:              pulumi.String("Cer"),
//				Thumbprint:          pulumi.String("312d31a79fa0cef49c00f769afc2b73e9f4edf34"),
//				ThumbprintAlgorithm: pulumi.String("SHA1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = batch.NewPool(ctx, "examplePool", &batch.PoolArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				AccountName:       exampleBatch / accountAccount.Name,
//				DisplayName:       pulumi.String("Test Acc Pool Auto"),
//				VmSize:            pulumi.String("Standard_A1"),
//				NodeAgentSkuId:    pulumi.String("batch.node.ubuntu 20.04"),
//				AutoScale: &batch.PoolAutoScaleArgs{
//					EvaluationInterval: pulumi.String("PT15M"),
//					Formula: pulumi.String(`      startingNumberOfVMs = 1;
//	      maxNumberofVMs = 25;
//	      pendingTaskSamplePercent = $PendingTasks.GetSamplePercent(180 * TimeInterval_Second);
//	      pendingTaskSamples = pendingTaskSamplePercent < 70 ? startingNumberOfVMs : avg($PendingTasks.GetSample(180 *   TimeInterval_Second));
//	      $TargetDedicatedNodes=min(maxNumberofVMs, pendingTaskSamples);
//
// `),
//
//				},
//				StorageImageReference: &batch.PoolStorageImageReferenceArgs{
//					Publisher: pulumi.String("microsoft-azure-batch"),
//					Offer:     pulumi.String("ubuntu-server-container"),
//					Sku:       pulumi.String("20-04-lts"),
//					Version:   pulumi.String("latest"),
//				},
//				ContainerConfiguration: &batch.PoolContainerConfigurationArgs{
//					Type: pulumi.String("DockerCompatible"),
//					ContainerRegistries: batch.PoolContainerConfigurationContainerRegistryArray{
//						&batch.PoolContainerConfigurationContainerRegistryArgs{
//							RegistryServer: pulumi.String("docker.io"),
//							UserName:       pulumi.String("login"),
//							Password:       pulumi.String("apassword"),
//						},
//					},
//				},
//				StartTask: &batch.PoolStartTaskArgs{
//					CommandLine:      pulumi.String("echo 'Hello World from $env'"),
//					TaskRetryMaximum: pulumi.Int(1),
//					WaitForSuccess:   pulumi.Bool(true),
//					CommonEnvironmentProperties: pulumi.StringMap{
//						"env": pulumi.String("TEST"),
//					},
//					UserIdentity: &batch.PoolStartTaskUserIdentityArgs{
//						AutoUser: &batch.PoolStartTaskUserIdentityAutoUserArgs{
//							ElevationLevel: pulumi.String("NonAdmin"),
//							Scope:          pulumi.String("Task"),
//						},
//					},
//				},
//				Certificates: batch.PoolCertificateArray{
//					&batch.PoolCertificateArgs{
//						Id:            exampleCertificate.ID(),
//						StoreLocation: pulumi.String("CurrentUser"),
//						Visibilities: pulumi.StringArray{
//							pulumi.String("StartTask"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Batch Pools can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:batch/pool:Pool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.Batch/batchAccounts/myBatchAccount1/pools/myBatchPool1
//
// ```
type Pool struct {
	pulumi.CustomResourceState

	// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// A `autoScale` block that describes the scale settings when using auto scale as defined below.
	AutoScale PoolAutoScalePtrOutput `pulumi:"autoScale"`
	// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool as defined below.
	Certificates PoolCertificateArrayOutput `pulumi:"certificates"`
	// The container configuration used in the pool's VMs. One `containerConfiguration` block as defined below.
	ContainerConfiguration PoolContainerConfigurationPtrOutput `pulumi:"containerConfiguration"`
	// A `dataDisks` block describes the data disk settings as defined below.
	DataDisks PoolDataDiskArrayOutput `pulumi:"dataDisks"`
	// A `diskEncryption` block, as defined below, describes the disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
	DiskEncryptions PoolDiskEncryptionArrayOutput `pulumi:"diskEncryptions"`
	// Specifies the display name of the Batch pool. Changing this forces a new resource to be created.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// An `extensions` block as defined below.
	Extensions PoolExtensionArrayOutput `pulumi:"extensions"`
	// A `fixedScale` block that describes the scale settings when using fixed scale as defined below.
	FixedScale PoolFixedScalePtrOutput `pulumi:"fixedScale"`
	// An `identity` block as defined below.
	Identity PoolIdentityPtrOutput `pulumi:"identity"`
	// Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. Values allowed are `Disabled` and `Enabled`. Defaults to `Enabled`.
	InterNodeCommunication pulumi.StringPtrOutput `pulumi:"interNodeCommunication"`
	// The type of on-premises license to be used when deploying the operating system. This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are: "Windows_Server" - The on-premises license is for Windows Server. "Windows_Client" - The on-premises license is for Windows Client.
	LicenseType pulumi.StringPtrOutput `pulumi:"licenseType"`
	// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
	MaxTasksPerNode pulumi.IntPtrOutput `pulumi:"maxTasksPerNode"`
	// A map of custom batch pool metadata.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// A `mount` block defined as below.
	Mounts PoolMountArrayOutput `pulumi:"mounts"`
	// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `networkConfiguration` block that describes the network configurations for the Batch pool as defined below. Changing this forces a new resource to be created.
	NetworkConfiguration PoolNetworkConfigurationPtrOutput `pulumi:"networkConfiguration"`
	// Specifies the SKU of the node agents that will be created in the Batch pool. Changing this forces a new resource to be created.
	NodeAgentSkuId pulumi.StringOutput `pulumi:"nodeAgentSkuId"`
	// A `nodePlacement` block that describes the placement policy for allocating nodes in the pool as defined below.
	NodePlacements PoolNodePlacementArrayOutput `pulumi:"nodePlacements"`
	// Specifies the ephemeral disk placement for operating system disk for all VMs in the pool. This property can be used by user in the request to choose which location the operating system should be in. e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements> and Linux VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements>. The only possible value is `CacheDisk`.
	OsDiskPlacement pulumi.StringPtrOutput `pulumi:"osDiskPlacement"`
	// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `startTask` block that describes the start task settings for the Batch pool as defined below.
	StartTask PoolStartTaskPtrOutput `pulumi:"startTask"`
	// Whether to stop if there is a pending resize operation on this pool.
	StopPendingResizeOperation pulumi.BoolPtrOutput `pulumi:"stopPendingResizeOperation"`
	// A `storageImageReference` block for the virtual machines that will compose the Batch pool as defined below. Changing this forces a new resource to be created.
	StorageImageReference PoolStorageImageReferenceOutput `pulumi:"storageImageReference"`
	// The desired node communication mode for the pool. Possible values are `Classic`, `Default` and `Simplified`.
	TargetNodeCommunicationMode pulumi.StringPtrOutput `pulumi:"targetNodeCommunicationMode"`
	// A `taskSchedulingPolicy` block that describes how tasks are distributed across compute nodes in a pool as defined below. If not specified, the default is spread as defined below.
	TaskSchedulingPolicies PoolTaskSchedulingPolicyArrayOutput `pulumi:"taskSchedulingPolicies"`
	// A `userAccounts` block that describes the list of user accounts to be created on each node in the pool as defined below.
	UserAccounts PoolUserAccountArrayOutput `pulumi:"userAccounts"`
	// Specifies the size of the VM created in the Batch pool. Changing this forces a new resource to be created.
	VmSize pulumi.StringOutput `pulumi:"vmSize"`
	// A `windows` block that describes the Windows configuration in the pool as defined below.
	//
	// > **NOTE:** For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable `AZ_BATCH_CERTIFICATES_DIR` is supplied to the task to query for this location. For certificates with visibility of `remoteUser`, a `certs` directory is created in the user's home directory (e.g., `/home/{user-name}/certs`) and certificates are placed in that directory.
	//
	// > **Please Note:** `fixedScale` and `autoScale` blocks cannot be used both at the same time.
	Windows PoolWindowArrayOutput `pulumi:"windows"`
}

// NewPool registers a new resource with the given unique name, arguments, and options.
func NewPool(ctx *pulumi.Context,
	name string, args *PoolArgs, opts ...pulumi.ResourceOption) (*Pool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.NodeAgentSkuId == nil {
		return nil, errors.New("invalid value for required argument 'NodeAgentSkuId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageImageReference == nil {
		return nil, errors.New("invalid value for required argument 'StorageImageReference'")
	}
	if args.VmSize == nil {
		return nil, errors.New("invalid value for required argument 'VmSize'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pool
	err := ctx.RegisterResource("azure:batch/pool:Pool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPool gets an existing Pool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PoolState, opts ...pulumi.ResourceOption) (*Pool, error) {
	var resource Pool
	err := ctx.ReadResource("azure:batch/pool:Pool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pool resources.
type poolState struct {
	// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
	AccountName *string `pulumi:"accountName"`
	// A `autoScale` block that describes the scale settings when using auto scale as defined below.
	AutoScale *PoolAutoScale `pulumi:"autoScale"`
	// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool as defined below.
	Certificates []PoolCertificate `pulumi:"certificates"`
	// The container configuration used in the pool's VMs. One `containerConfiguration` block as defined below.
	ContainerConfiguration *PoolContainerConfiguration `pulumi:"containerConfiguration"`
	// A `dataDisks` block describes the data disk settings as defined below.
	DataDisks []PoolDataDisk `pulumi:"dataDisks"`
	// A `diskEncryption` block, as defined below, describes the disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
	DiskEncryptions []PoolDiskEncryption `pulumi:"diskEncryptions"`
	// Specifies the display name of the Batch pool. Changing this forces a new resource to be created.
	DisplayName *string `pulumi:"displayName"`
	// An `extensions` block as defined below.
	Extensions []PoolExtension `pulumi:"extensions"`
	// A `fixedScale` block that describes the scale settings when using fixed scale as defined below.
	FixedScale *PoolFixedScale `pulumi:"fixedScale"`
	// An `identity` block as defined below.
	Identity *PoolIdentity `pulumi:"identity"`
	// Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. Values allowed are `Disabled` and `Enabled`. Defaults to `Enabled`.
	InterNodeCommunication *string `pulumi:"interNodeCommunication"`
	// The type of on-premises license to be used when deploying the operating system. This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are: "Windows_Server" - The on-premises license is for Windows Server. "Windows_Client" - The on-premises license is for Windows Client.
	LicenseType *string `pulumi:"licenseType"`
	// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
	MaxTasksPerNode *int `pulumi:"maxTasksPerNode"`
	// A map of custom batch pool metadata.
	Metadata map[string]string `pulumi:"metadata"`
	// A `mount` block defined as below.
	Mounts []PoolMount `pulumi:"mounts"`
	// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `networkConfiguration` block that describes the network configurations for the Batch pool as defined below. Changing this forces a new resource to be created.
	NetworkConfiguration *PoolNetworkConfiguration `pulumi:"networkConfiguration"`
	// Specifies the SKU of the node agents that will be created in the Batch pool. Changing this forces a new resource to be created.
	NodeAgentSkuId *string `pulumi:"nodeAgentSkuId"`
	// A `nodePlacement` block that describes the placement policy for allocating nodes in the pool as defined below.
	NodePlacements []PoolNodePlacement `pulumi:"nodePlacements"`
	// Specifies the ephemeral disk placement for operating system disk for all VMs in the pool. This property can be used by user in the request to choose which location the operating system should be in. e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements> and Linux VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements>. The only possible value is `CacheDisk`.
	OsDiskPlacement *string `pulumi:"osDiskPlacement"`
	// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `startTask` block that describes the start task settings for the Batch pool as defined below.
	StartTask *PoolStartTask `pulumi:"startTask"`
	// Whether to stop if there is a pending resize operation on this pool.
	StopPendingResizeOperation *bool `pulumi:"stopPendingResizeOperation"`
	// A `storageImageReference` block for the virtual machines that will compose the Batch pool as defined below. Changing this forces a new resource to be created.
	StorageImageReference *PoolStorageImageReference `pulumi:"storageImageReference"`
	// The desired node communication mode for the pool. Possible values are `Classic`, `Default` and `Simplified`.
	TargetNodeCommunicationMode *string `pulumi:"targetNodeCommunicationMode"`
	// A `taskSchedulingPolicy` block that describes how tasks are distributed across compute nodes in a pool as defined below. If not specified, the default is spread as defined below.
	TaskSchedulingPolicies []PoolTaskSchedulingPolicy `pulumi:"taskSchedulingPolicies"`
	// A `userAccounts` block that describes the list of user accounts to be created on each node in the pool as defined below.
	UserAccounts []PoolUserAccount `pulumi:"userAccounts"`
	// Specifies the size of the VM created in the Batch pool. Changing this forces a new resource to be created.
	VmSize *string `pulumi:"vmSize"`
	// A `windows` block that describes the Windows configuration in the pool as defined below.
	//
	// > **NOTE:** For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable `AZ_BATCH_CERTIFICATES_DIR` is supplied to the task to query for this location. For certificates with visibility of `remoteUser`, a `certs` directory is created in the user's home directory (e.g., `/home/{user-name}/certs`) and certificates are placed in that directory.
	//
	// > **Please Note:** `fixedScale` and `autoScale` blocks cannot be used both at the same time.
	Windows []PoolWindow `pulumi:"windows"`
}

type PoolState struct {
	// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
	AccountName pulumi.StringPtrInput
	// A `autoScale` block that describes the scale settings when using auto scale as defined below.
	AutoScale PoolAutoScalePtrInput
	// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool as defined below.
	Certificates PoolCertificateArrayInput
	// The container configuration used in the pool's VMs. One `containerConfiguration` block as defined below.
	ContainerConfiguration PoolContainerConfigurationPtrInput
	// A `dataDisks` block describes the data disk settings as defined below.
	DataDisks PoolDataDiskArrayInput
	// A `diskEncryption` block, as defined below, describes the disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
	DiskEncryptions PoolDiskEncryptionArrayInput
	// Specifies the display name of the Batch pool. Changing this forces a new resource to be created.
	DisplayName pulumi.StringPtrInput
	// An `extensions` block as defined below.
	Extensions PoolExtensionArrayInput
	// A `fixedScale` block that describes the scale settings when using fixed scale as defined below.
	FixedScale PoolFixedScalePtrInput
	// An `identity` block as defined below.
	Identity PoolIdentityPtrInput
	// Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. Values allowed are `Disabled` and `Enabled`. Defaults to `Enabled`.
	InterNodeCommunication pulumi.StringPtrInput
	// The type of on-premises license to be used when deploying the operating system. This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are: "Windows_Server" - The on-premises license is for Windows Server. "Windows_Client" - The on-premises license is for Windows Client.
	LicenseType pulumi.StringPtrInput
	// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
	MaxTasksPerNode pulumi.IntPtrInput
	// A map of custom batch pool metadata.
	Metadata pulumi.StringMapInput
	// A `mount` block defined as below.
	Mounts PoolMountArrayInput
	// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `networkConfiguration` block that describes the network configurations for the Batch pool as defined below. Changing this forces a new resource to be created.
	NetworkConfiguration PoolNetworkConfigurationPtrInput
	// Specifies the SKU of the node agents that will be created in the Batch pool. Changing this forces a new resource to be created.
	NodeAgentSkuId pulumi.StringPtrInput
	// A `nodePlacement` block that describes the placement policy for allocating nodes in the pool as defined below.
	NodePlacements PoolNodePlacementArrayInput
	// Specifies the ephemeral disk placement for operating system disk for all VMs in the pool. This property can be used by user in the request to choose which location the operating system should be in. e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements> and Linux VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements>. The only possible value is `CacheDisk`.
	OsDiskPlacement pulumi.StringPtrInput
	// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `startTask` block that describes the start task settings for the Batch pool as defined below.
	StartTask PoolStartTaskPtrInput
	// Whether to stop if there is a pending resize operation on this pool.
	StopPendingResizeOperation pulumi.BoolPtrInput
	// A `storageImageReference` block for the virtual machines that will compose the Batch pool as defined below. Changing this forces a new resource to be created.
	StorageImageReference PoolStorageImageReferencePtrInput
	// The desired node communication mode for the pool. Possible values are `Classic`, `Default` and `Simplified`.
	TargetNodeCommunicationMode pulumi.StringPtrInput
	// A `taskSchedulingPolicy` block that describes how tasks are distributed across compute nodes in a pool as defined below. If not specified, the default is spread as defined below.
	TaskSchedulingPolicies PoolTaskSchedulingPolicyArrayInput
	// A `userAccounts` block that describes the list of user accounts to be created on each node in the pool as defined below.
	UserAccounts PoolUserAccountArrayInput
	// Specifies the size of the VM created in the Batch pool. Changing this forces a new resource to be created.
	VmSize pulumi.StringPtrInput
	// A `windows` block that describes the Windows configuration in the pool as defined below.
	//
	// > **NOTE:** For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable `AZ_BATCH_CERTIFICATES_DIR` is supplied to the task to query for this location. For certificates with visibility of `remoteUser`, a `certs` directory is created in the user's home directory (e.g., `/home/{user-name}/certs`) and certificates are placed in that directory.
	//
	// > **Please Note:** `fixedScale` and `autoScale` blocks cannot be used both at the same time.
	Windows PoolWindowArrayInput
}

func (PoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*poolState)(nil)).Elem()
}

type poolArgs struct {
	// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
	AccountName string `pulumi:"accountName"`
	// A `autoScale` block that describes the scale settings when using auto scale as defined below.
	AutoScale *PoolAutoScale `pulumi:"autoScale"`
	// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool as defined below.
	Certificates []PoolCertificate `pulumi:"certificates"`
	// The container configuration used in the pool's VMs. One `containerConfiguration` block as defined below.
	ContainerConfiguration *PoolContainerConfiguration `pulumi:"containerConfiguration"`
	// A `dataDisks` block describes the data disk settings as defined below.
	DataDisks []PoolDataDisk `pulumi:"dataDisks"`
	// A `diskEncryption` block, as defined below, describes the disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
	DiskEncryptions []PoolDiskEncryption `pulumi:"diskEncryptions"`
	// Specifies the display name of the Batch pool. Changing this forces a new resource to be created.
	DisplayName *string `pulumi:"displayName"`
	// An `extensions` block as defined below.
	Extensions []PoolExtension `pulumi:"extensions"`
	// A `fixedScale` block that describes the scale settings when using fixed scale as defined below.
	FixedScale *PoolFixedScale `pulumi:"fixedScale"`
	// An `identity` block as defined below.
	Identity *PoolIdentity `pulumi:"identity"`
	// Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. Values allowed are `Disabled` and `Enabled`. Defaults to `Enabled`.
	InterNodeCommunication *string `pulumi:"interNodeCommunication"`
	// The type of on-premises license to be used when deploying the operating system. This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are: "Windows_Server" - The on-premises license is for Windows Server. "Windows_Client" - The on-premises license is for Windows Client.
	LicenseType *string `pulumi:"licenseType"`
	// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
	MaxTasksPerNode *int `pulumi:"maxTasksPerNode"`
	// A map of custom batch pool metadata.
	Metadata map[string]string `pulumi:"metadata"`
	// A `mount` block defined as below.
	Mounts []PoolMount `pulumi:"mounts"`
	// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `networkConfiguration` block that describes the network configurations for the Batch pool as defined below. Changing this forces a new resource to be created.
	NetworkConfiguration *PoolNetworkConfiguration `pulumi:"networkConfiguration"`
	// Specifies the SKU of the node agents that will be created in the Batch pool. Changing this forces a new resource to be created.
	NodeAgentSkuId string `pulumi:"nodeAgentSkuId"`
	// A `nodePlacement` block that describes the placement policy for allocating nodes in the pool as defined below.
	NodePlacements []PoolNodePlacement `pulumi:"nodePlacements"`
	// Specifies the ephemeral disk placement for operating system disk for all VMs in the pool. This property can be used by user in the request to choose which location the operating system should be in. e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements> and Linux VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements>. The only possible value is `CacheDisk`.
	OsDiskPlacement *string `pulumi:"osDiskPlacement"`
	// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `startTask` block that describes the start task settings for the Batch pool as defined below.
	StartTask *PoolStartTask `pulumi:"startTask"`
	// Whether to stop if there is a pending resize operation on this pool.
	StopPendingResizeOperation *bool `pulumi:"stopPendingResizeOperation"`
	// A `storageImageReference` block for the virtual machines that will compose the Batch pool as defined below. Changing this forces a new resource to be created.
	StorageImageReference PoolStorageImageReference `pulumi:"storageImageReference"`
	// The desired node communication mode for the pool. Possible values are `Classic`, `Default` and `Simplified`.
	TargetNodeCommunicationMode *string `pulumi:"targetNodeCommunicationMode"`
	// A `taskSchedulingPolicy` block that describes how tasks are distributed across compute nodes in a pool as defined below. If not specified, the default is spread as defined below.
	TaskSchedulingPolicies []PoolTaskSchedulingPolicy `pulumi:"taskSchedulingPolicies"`
	// A `userAccounts` block that describes the list of user accounts to be created on each node in the pool as defined below.
	UserAccounts []PoolUserAccount `pulumi:"userAccounts"`
	// Specifies the size of the VM created in the Batch pool. Changing this forces a new resource to be created.
	VmSize string `pulumi:"vmSize"`
	// A `windows` block that describes the Windows configuration in the pool as defined below.
	//
	// > **NOTE:** For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable `AZ_BATCH_CERTIFICATES_DIR` is supplied to the task to query for this location. For certificates with visibility of `remoteUser`, a `certs` directory is created in the user's home directory (e.g., `/home/{user-name}/certs`) and certificates are placed in that directory.
	//
	// > **Please Note:** `fixedScale` and `autoScale` blocks cannot be used both at the same time.
	Windows []PoolWindow `pulumi:"windows"`
}

// The set of arguments for constructing a Pool resource.
type PoolArgs struct {
	// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
	AccountName pulumi.StringInput
	// A `autoScale` block that describes the scale settings when using auto scale as defined below.
	AutoScale PoolAutoScalePtrInput
	// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool as defined below.
	Certificates PoolCertificateArrayInput
	// The container configuration used in the pool's VMs. One `containerConfiguration` block as defined below.
	ContainerConfiguration PoolContainerConfigurationPtrInput
	// A `dataDisks` block describes the data disk settings as defined below.
	DataDisks PoolDataDiskArrayInput
	// A `diskEncryption` block, as defined below, describes the disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
	DiskEncryptions PoolDiskEncryptionArrayInput
	// Specifies the display name of the Batch pool. Changing this forces a new resource to be created.
	DisplayName pulumi.StringPtrInput
	// An `extensions` block as defined below.
	Extensions PoolExtensionArrayInput
	// A `fixedScale` block that describes the scale settings when using fixed scale as defined below.
	FixedScale PoolFixedScalePtrInput
	// An `identity` block as defined below.
	Identity PoolIdentityPtrInput
	// Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. Values allowed are `Disabled` and `Enabled`. Defaults to `Enabled`.
	InterNodeCommunication pulumi.StringPtrInput
	// The type of on-premises license to be used when deploying the operating system. This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are: "Windows_Server" - The on-premises license is for Windows Server. "Windows_Client" - The on-premises license is for Windows Client.
	LicenseType pulumi.StringPtrInput
	// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
	MaxTasksPerNode pulumi.IntPtrInput
	// A map of custom batch pool metadata.
	Metadata pulumi.StringMapInput
	// A `mount` block defined as below.
	Mounts PoolMountArrayInput
	// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `networkConfiguration` block that describes the network configurations for the Batch pool as defined below. Changing this forces a new resource to be created.
	NetworkConfiguration PoolNetworkConfigurationPtrInput
	// Specifies the SKU of the node agents that will be created in the Batch pool. Changing this forces a new resource to be created.
	NodeAgentSkuId pulumi.StringInput
	// A `nodePlacement` block that describes the placement policy for allocating nodes in the pool as defined below.
	NodePlacements PoolNodePlacementArrayInput
	// Specifies the ephemeral disk placement for operating system disk for all VMs in the pool. This property can be used by user in the request to choose which location the operating system should be in. e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements> and Linux VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements>. The only possible value is `CacheDisk`.
	OsDiskPlacement pulumi.StringPtrInput
	// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `startTask` block that describes the start task settings for the Batch pool as defined below.
	StartTask PoolStartTaskPtrInput
	// Whether to stop if there is a pending resize operation on this pool.
	StopPendingResizeOperation pulumi.BoolPtrInput
	// A `storageImageReference` block for the virtual machines that will compose the Batch pool as defined below. Changing this forces a new resource to be created.
	StorageImageReference PoolStorageImageReferenceInput
	// The desired node communication mode for the pool. Possible values are `Classic`, `Default` and `Simplified`.
	TargetNodeCommunicationMode pulumi.StringPtrInput
	// A `taskSchedulingPolicy` block that describes how tasks are distributed across compute nodes in a pool as defined below. If not specified, the default is spread as defined below.
	TaskSchedulingPolicies PoolTaskSchedulingPolicyArrayInput
	// A `userAccounts` block that describes the list of user accounts to be created on each node in the pool as defined below.
	UserAccounts PoolUserAccountArrayInput
	// Specifies the size of the VM created in the Batch pool. Changing this forces a new resource to be created.
	VmSize pulumi.StringInput
	// A `windows` block that describes the Windows configuration in the pool as defined below.
	//
	// > **NOTE:** For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable `AZ_BATCH_CERTIFICATES_DIR` is supplied to the task to query for this location. For certificates with visibility of `remoteUser`, a `certs` directory is created in the user's home directory (e.g., `/home/{user-name}/certs`) and certificates are placed in that directory.
	//
	// > **Please Note:** `fixedScale` and `autoScale` blocks cannot be used both at the same time.
	Windows PoolWindowArrayInput
}

func (PoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*poolArgs)(nil)).Elem()
}

type PoolInput interface {
	pulumi.Input

	ToPoolOutput() PoolOutput
	ToPoolOutputWithContext(ctx context.Context) PoolOutput
}

func (*Pool) ElementType() reflect.Type {
	return reflect.TypeOf((**Pool)(nil)).Elem()
}

func (i *Pool) ToPoolOutput() PoolOutput {
	return i.ToPoolOutputWithContext(context.Background())
}

func (i *Pool) ToPoolOutputWithContext(ctx context.Context) PoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolOutput)
}

func (i *Pool) ToOutput(ctx context.Context) pulumix.Output[*Pool] {
	return pulumix.Output[*Pool]{
		OutputState: i.ToPoolOutputWithContext(ctx).OutputState,
	}
}

// PoolArrayInput is an input type that accepts PoolArray and PoolArrayOutput values.
// You can construct a concrete instance of `PoolArrayInput` via:
//
//	PoolArray{ PoolArgs{...} }
type PoolArrayInput interface {
	pulumi.Input

	ToPoolArrayOutput() PoolArrayOutput
	ToPoolArrayOutputWithContext(context.Context) PoolArrayOutput
}

type PoolArray []PoolInput

func (PoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pool)(nil)).Elem()
}

func (i PoolArray) ToPoolArrayOutput() PoolArrayOutput {
	return i.ToPoolArrayOutputWithContext(context.Background())
}

func (i PoolArray) ToPoolArrayOutputWithContext(ctx context.Context) PoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolArrayOutput)
}

func (i PoolArray) ToOutput(ctx context.Context) pulumix.Output[[]*Pool] {
	return pulumix.Output[[]*Pool]{
		OutputState: i.ToPoolArrayOutputWithContext(ctx).OutputState,
	}
}

// PoolMapInput is an input type that accepts PoolMap and PoolMapOutput values.
// You can construct a concrete instance of `PoolMapInput` via:
//
//	PoolMap{ "key": PoolArgs{...} }
type PoolMapInput interface {
	pulumi.Input

	ToPoolMapOutput() PoolMapOutput
	ToPoolMapOutputWithContext(context.Context) PoolMapOutput
}

type PoolMap map[string]PoolInput

func (PoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pool)(nil)).Elem()
}

func (i PoolMap) ToPoolMapOutput() PoolMapOutput {
	return i.ToPoolMapOutputWithContext(context.Background())
}

func (i PoolMap) ToPoolMapOutputWithContext(ctx context.Context) PoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolMapOutput)
}

func (i PoolMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Pool] {
	return pulumix.Output[map[string]*Pool]{
		OutputState: i.ToPoolMapOutputWithContext(ctx).OutputState,
	}
}

type PoolOutput struct{ *pulumi.OutputState }

func (PoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pool)(nil)).Elem()
}

func (o PoolOutput) ToPoolOutput() PoolOutput {
	return o
}

func (o PoolOutput) ToPoolOutputWithContext(ctx context.Context) PoolOutput {
	return o
}

func (o PoolOutput) ToOutput(ctx context.Context) pulumix.Output[*Pool] {
	return pulumix.Output[*Pool]{
		OutputState: o.OutputState,
	}
}

// Specifies the name of the Batch account in which the pool will be created. Changing this forces a new resource to be created.
func (o PoolOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// A `autoScale` block that describes the scale settings when using auto scale as defined below.
func (o PoolOutput) AutoScale() PoolAutoScalePtrOutput {
	return o.ApplyT(func(v *Pool) PoolAutoScalePtrOutput { return v.AutoScale }).(PoolAutoScalePtrOutput)
}

// One or more `certificate` blocks that describe the certificates to be installed on each compute node in the pool as defined below.
func (o PoolOutput) Certificates() PoolCertificateArrayOutput {
	return o.ApplyT(func(v *Pool) PoolCertificateArrayOutput { return v.Certificates }).(PoolCertificateArrayOutput)
}

// The container configuration used in the pool's VMs. One `containerConfiguration` block as defined below.
func (o PoolOutput) ContainerConfiguration() PoolContainerConfigurationPtrOutput {
	return o.ApplyT(func(v *Pool) PoolContainerConfigurationPtrOutput { return v.ContainerConfiguration }).(PoolContainerConfigurationPtrOutput)
}

// A `dataDisks` block describes the data disk settings as defined below.
func (o PoolOutput) DataDisks() PoolDataDiskArrayOutput {
	return o.ApplyT(func(v *Pool) PoolDataDiskArrayOutput { return v.DataDisks }).(PoolDataDiskArrayOutput)
}

// A `diskEncryption` block, as defined below, describes the disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Shared Image Gallery Image.
func (o PoolOutput) DiskEncryptions() PoolDiskEncryptionArrayOutput {
	return o.ApplyT(func(v *Pool) PoolDiskEncryptionArrayOutput { return v.DiskEncryptions }).(PoolDiskEncryptionArrayOutput)
}

// Specifies the display name of the Batch pool. Changing this forces a new resource to be created.
func (o PoolOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// An `extensions` block as defined below.
func (o PoolOutput) Extensions() PoolExtensionArrayOutput {
	return o.ApplyT(func(v *Pool) PoolExtensionArrayOutput { return v.Extensions }).(PoolExtensionArrayOutput)
}

// A `fixedScale` block that describes the scale settings when using fixed scale as defined below.
func (o PoolOutput) FixedScale() PoolFixedScalePtrOutput {
	return o.ApplyT(func(v *Pool) PoolFixedScalePtrOutput { return v.FixedScale }).(PoolFixedScalePtrOutput)
}

// An `identity` block as defined below.
func (o PoolOutput) Identity() PoolIdentityPtrOutput {
	return o.ApplyT(func(v *Pool) PoolIdentityPtrOutput { return v.Identity }).(PoolIdentityPtrOutput)
}

// Whether the pool permits direct communication between nodes. This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. Values allowed are `Disabled` and `Enabled`. Defaults to `Enabled`.
func (o PoolOutput) InterNodeCommunication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringPtrOutput { return v.InterNodeCommunication }).(pulumi.StringPtrOutput)
}

// The type of on-premises license to be used when deploying the operating system. This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are: "Windows_Server" - The on-premises license is for Windows Server. "Windows_Client" - The on-premises license is for Windows Client.
func (o PoolOutput) LicenseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringPtrOutput { return v.LicenseType }).(pulumi.StringPtrOutput)
}

// Specifies the maximum number of tasks that can run concurrently on a single compute node in the pool. Defaults to `1`. Changing this forces a new resource to be created.
func (o PoolOutput) MaxTasksPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.IntPtrOutput { return v.MaxTasksPerNode }).(pulumi.IntPtrOutput)
}

// A map of custom batch pool metadata.
func (o PoolOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// A `mount` block defined as below.
func (o PoolOutput) Mounts() PoolMountArrayOutput {
	return o.ApplyT(func(v *Pool) PoolMountArrayOutput { return v.Mounts }).(PoolMountArrayOutput)
}

// Specifies the name of the Batch pool. Changing this forces a new resource to be created.
func (o PoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `networkConfiguration` block that describes the network configurations for the Batch pool as defined below. Changing this forces a new resource to be created.
func (o PoolOutput) NetworkConfiguration() PoolNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *Pool) PoolNetworkConfigurationPtrOutput { return v.NetworkConfiguration }).(PoolNetworkConfigurationPtrOutput)
}

// Specifies the SKU of the node agents that will be created in the Batch pool. Changing this forces a new resource to be created.
func (o PoolOutput) NodeAgentSkuId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.NodeAgentSkuId }).(pulumi.StringOutput)
}

// A `nodePlacement` block that describes the placement policy for allocating nodes in the pool as defined below.
func (o PoolOutput) NodePlacements() PoolNodePlacementArrayOutput {
	return o.ApplyT(func(v *Pool) PoolNodePlacementArrayOutput { return v.NodePlacements }).(PoolNodePlacementArrayOutput)
}

// Specifies the ephemeral disk placement for operating system disk for all VMs in the pool. This property can be used by user in the request to choose which location the operating system should be in. e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements> and Linux VMs at <https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements>. The only possible value is `CacheDisk`.
func (o PoolOutput) OsDiskPlacement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringPtrOutput { return v.OsDiskPlacement }).(pulumi.StringPtrOutput)
}

// The name of the resource group in which to create the Batch pool. Changing this forces a new resource to be created.
func (o PoolOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `startTask` block that describes the start task settings for the Batch pool as defined below.
func (o PoolOutput) StartTask() PoolStartTaskPtrOutput {
	return o.ApplyT(func(v *Pool) PoolStartTaskPtrOutput { return v.StartTask }).(PoolStartTaskPtrOutput)
}

// Whether to stop if there is a pending resize operation on this pool.
func (o PoolOutput) StopPendingResizeOperation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.BoolPtrOutput { return v.StopPendingResizeOperation }).(pulumi.BoolPtrOutput)
}

// A `storageImageReference` block for the virtual machines that will compose the Batch pool as defined below. Changing this forces a new resource to be created.
func (o PoolOutput) StorageImageReference() PoolStorageImageReferenceOutput {
	return o.ApplyT(func(v *Pool) PoolStorageImageReferenceOutput { return v.StorageImageReference }).(PoolStorageImageReferenceOutput)
}

// The desired node communication mode for the pool. Possible values are `Classic`, `Default` and `Simplified`.
func (o PoolOutput) TargetNodeCommunicationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringPtrOutput { return v.TargetNodeCommunicationMode }).(pulumi.StringPtrOutput)
}

// A `taskSchedulingPolicy` block that describes how tasks are distributed across compute nodes in a pool as defined below. If not specified, the default is spread as defined below.
func (o PoolOutput) TaskSchedulingPolicies() PoolTaskSchedulingPolicyArrayOutput {
	return o.ApplyT(func(v *Pool) PoolTaskSchedulingPolicyArrayOutput { return v.TaskSchedulingPolicies }).(PoolTaskSchedulingPolicyArrayOutput)
}

// A `userAccounts` block that describes the list of user accounts to be created on each node in the pool as defined below.
func (o PoolOutput) UserAccounts() PoolUserAccountArrayOutput {
	return o.ApplyT(func(v *Pool) PoolUserAccountArrayOutput { return v.UserAccounts }).(PoolUserAccountArrayOutput)
}

// Specifies the size of the VM created in the Batch pool. Changing this forces a new resource to be created.
func (o PoolOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.VmSize }).(pulumi.StringOutput)
}

// A `windows` block that describes the Windows configuration in the pool as defined below.
//
// > **NOTE:** For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable `AZ_BATCH_CERTIFICATES_DIR` is supplied to the task to query for this location. For certificates with visibility of `remoteUser`, a `certs` directory is created in the user's home directory (e.g., `/home/{user-name}/certs`) and certificates are placed in that directory.
//
// > **Please Note:** `fixedScale` and `autoScale` blocks cannot be used both at the same time.
func (o PoolOutput) Windows() PoolWindowArrayOutput {
	return o.ApplyT(func(v *Pool) PoolWindowArrayOutput { return v.Windows }).(PoolWindowArrayOutput)
}

type PoolArrayOutput struct{ *pulumi.OutputState }

func (PoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pool)(nil)).Elem()
}

func (o PoolArrayOutput) ToPoolArrayOutput() PoolArrayOutput {
	return o
}

func (o PoolArrayOutput) ToPoolArrayOutputWithContext(ctx context.Context) PoolArrayOutput {
	return o
}

func (o PoolArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Pool] {
	return pulumix.Output[[]*Pool]{
		OutputState: o.OutputState,
	}
}

func (o PoolArrayOutput) Index(i pulumi.IntInput) PoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pool {
		return vs[0].([]*Pool)[vs[1].(int)]
	}).(PoolOutput)
}

type PoolMapOutput struct{ *pulumi.OutputState }

func (PoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pool)(nil)).Elem()
}

func (o PoolMapOutput) ToPoolMapOutput() PoolMapOutput {
	return o
}

func (o PoolMapOutput) ToPoolMapOutputWithContext(ctx context.Context) PoolMapOutput {
	return o
}

func (o PoolMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Pool] {
	return pulumix.Output[map[string]*Pool]{
		OutputState: o.OutputState,
	}
}

func (o PoolMapOutput) MapIndex(k pulumi.StringInput) PoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pool {
		return vs[0].(map[string]*Pool)[vs[1].(string)]
	}).(PoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PoolInput)(nil)).Elem(), &Pool{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolArrayInput)(nil)).Elem(), PoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolMapInput)(nil)).Elem(), PoolMap{})
	pulumi.RegisterOutputType(PoolOutput{})
	pulumi.RegisterOutputType(PoolArrayOutput{})
	pulumi.RegisterOutputType(PoolMapOutput{})
}
