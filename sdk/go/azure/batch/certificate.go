// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a certificate in an Azure Batch account.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/batch_certificate.html.markdown.
type Certificate struct {
	s *pulumi.ResourceState
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOpt) (*Certificate, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.Certificate == nil {
		return nil, errors.New("missing required argument 'Certificate'")
	}
	if args == nil || args.Format == nil {
		return nil, errors.New("missing required argument 'Format'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Thumbprint == nil {
		return nil, errors.New("missing required argument 'Thumbprint'")
	}
	if args == nil || args.ThumbprintAlgorithm == nil {
		return nil, errors.New("missing required argument 'ThumbprintAlgorithm'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountName"] = nil
		inputs["certificate"] = nil
		inputs["format"] = nil
		inputs["password"] = nil
		inputs["resourceGroupName"] = nil
		inputs["thumbprint"] = nil
		inputs["thumbprintAlgorithm"] = nil
	} else {
		inputs["accountName"] = args.AccountName
		inputs["certificate"] = args.Certificate
		inputs["format"] = args.Format
		inputs["password"] = args.Password
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["thumbprint"] = args.Thumbprint
		inputs["thumbprintAlgorithm"] = args.ThumbprintAlgorithm
	}
	inputs["name"] = nil
	inputs["publicData"] = nil
	s, err := ctx.RegisterResource("azure:batch/certificate:Certificate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Certificate{s: s}, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CertificateState, opts ...pulumi.ResourceOpt) (*Certificate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountName"] = state.AccountName
		inputs["certificate"] = state.Certificate
		inputs["format"] = state.Format
		inputs["name"] = state.Name
		inputs["password"] = state.Password
		inputs["publicData"] = state.PublicData
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["thumbprint"] = state.Thumbprint
		inputs["thumbprintAlgorithm"] = state.ThumbprintAlgorithm
	}
	s, err := ctx.ReadResource("azure:batch/certificate:Certificate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Certificate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Certificate) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Certificate) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Specifies the name of the Batch account. Changing this forces a new resource to be created.
func (r *Certificate) AccountName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accountName"])
}

// The base64-encoded contents of the certificate.
func (r *Certificate) Certificate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["certificate"])
}

// The format of the certificate. Possible values are `Cer` or `Pfx`.
func (r *Certificate) Format() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["format"])
}

// The generated name of the certificate.
func (r *Certificate) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The password to access the certificate's private key. This must and can only be specified when `format` is `Pfx`.
func (r *Certificate) Password() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["password"])
}

// The public key of the certificate.
func (r *Certificate) PublicData() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["publicData"])
}

// The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
func (r *Certificate) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The thumbprint of the certificate. At this time the only supported value is 'SHA1'.
func (r *Certificate) Thumbprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["thumbprint"])
}

func (r *Certificate) ThumbprintAlgorithm() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["thumbprintAlgorithm"])
}

// Input properties used for looking up and filtering Certificate resources.
type CertificateState struct {
	// Specifies the name of the Batch account. Changing this forces a new resource to be created.
	AccountName interface{}
	// The base64-encoded contents of the certificate.
	Certificate interface{}
	// The format of the certificate. Possible values are `Cer` or `Pfx`.
	Format interface{}
	// The generated name of the certificate.
	Name interface{}
	// The password to access the certificate's private key. This must and can only be specified when `format` is `Pfx`.
	Password interface{}
	// The public key of the certificate.
	PublicData interface{}
	// The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The thumbprint of the certificate. At this time the only supported value is 'SHA1'.
	Thumbprint interface{}
	ThumbprintAlgorithm interface{}
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Specifies the name of the Batch account. Changing this forces a new resource to be created.
	AccountName interface{}
	// The base64-encoded contents of the certificate.
	Certificate interface{}
	// The format of the certificate. Possible values are `Cer` or `Pfx`.
	Format interface{}
	// The password to access the certificate's private key. This must and can only be specified when `format` is `Pfx`.
	Password interface{}
	// The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The thumbprint of the certificate. At this time the only supported value is 'SHA1'.
	Thumbprint interface{}
	ThumbprintAlgorithm interface{}
}
