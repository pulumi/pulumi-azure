// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nginx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the Dataplane API Key for an Nginx Deployment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/nginx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-rg"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePublicIp, err := network.NewPublicIp(ctx, "example", &network.PublicIpArgs{
//				Name:              pulumi.String("example"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				AllocationMethod:  pulumi.String("Static"),
//				Sku:               pulumi.String("Standard"),
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "example", &network.VirtualNetworkArgs{
//				Name: pulumi.String("example-vnet"),
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "example", &network.SubnetArgs{
//				Name:               pulumi.String("example-subnet"),
//				ResourceGroupName:  example.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//				Delegations: network.SubnetDelegationArray{
//					&network.SubnetDelegationArgs{
//						Name: pulumi.String("delegation"),
//						ServiceDelegation: &network.SubnetDelegationServiceDelegationArgs{
//							Name: pulumi.String("NGINX.NGINXPLUS/nginxDeployments"),
//							Actions: pulumi.StringArray{
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/join/action"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleDeployment, err := nginx.NewDeployment(ctx, "example", &nginx.DeploymentArgs{
//				Name:                    pulumi.String("example-nginx"),
//				ResourceGroupName:       example.Name,
//				Sku:                     pulumi.String("standardv2_Monthly"),
//				Location:                example.Location,
//				AutomaticUpgradeChannel: pulumi.String("stable"),
//				FrontendPublic: &nginx.DeploymentFrontendPublicArgs{
//					IpAddresses: pulumi.StringArray{
//						examplePublicIp.ID(),
//					},
//				},
//				NetworkInterfaces: nginx.DeploymentNetworkInterfaceArray{
//					&nginx.DeploymentNetworkInterfaceArgs{
//						SubnetId: exampleSubnet.ID(),
//					},
//				},
//				Capacity: pulumi.Int(20),
//				Email:    pulumi.String("user@test.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nginx.NewApiKey(ctx, "example", &nginx.ApiKeyArgs{
//				Name:              pulumi.String("example-api-key"),
//				NginxDeploymentId: exampleDeployment.ID(),
//				SecretText:        pulumi.String("727c8642-6807-4254-9d02-ae93bfad21de"),
//				EndDateTime:       pulumi.String("2027-01-01T00:00:00Z"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Nginx.NginxPlus`: 2024-11-01-preview
//
// ## Import
//
// An NGINX Dataplane API Key can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:nginx/apiKey:ApiKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/deploy1/apiKeys/key1
// ```
type ApiKey struct {
	pulumi.CustomResourceState

	// The RFC3339 formatted date-time after which this Dataplane API Key is no longer valid. The maximum value is now+2y.
	EndDateTime pulumi.StringOutput `pulumi:"endDateTime"`
	// The first three characters of the secret text to help identify it in use.
	Hint pulumi.StringOutput `pulumi:"hint"`
	// The name of the NGINX Dataplane API Key. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the NGINX Deployment that the API key is associated with. Changing this forces a new resource to be created.
	NginxDeploymentId pulumi.StringOutput `pulumi:"nginxDeploymentId"`
	// The value used as the Dataplane API Key. The API key requirements can be found in the [NGINXaaS Documentation](https://docs.nginx.com/nginxaas/azure/quickstart/loadbalancer-kubernetes/#create-an-nginxaas-data-plane-api-key).
	SecretText pulumi.StringOutput `pulumi:"secretText"`
}

// NewApiKey registers a new resource with the given unique name, arguments, and options.
func NewApiKey(ctx *pulumi.Context,
	name string, args *ApiKeyArgs, opts ...pulumi.ResourceOption) (*ApiKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndDateTime == nil {
		return nil, errors.New("invalid value for required argument 'EndDateTime'")
	}
	if args.NginxDeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'NginxDeploymentId'")
	}
	if args.SecretText == nil {
		return nil, errors.New("invalid value for required argument 'SecretText'")
	}
	if args.SecretText != nil {
		args.SecretText = pulumi.ToSecret(args.SecretText).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secretText",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiKey
	err := ctx.RegisterResource("azure:nginx/apiKey:ApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiKey gets an existing ApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiKeyState, opts ...pulumi.ResourceOption) (*ApiKey, error) {
	var resource ApiKey
	err := ctx.ReadResource("azure:nginx/apiKey:ApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiKey resources.
type apiKeyState struct {
	// The RFC3339 formatted date-time after which this Dataplane API Key is no longer valid. The maximum value is now+2y.
	EndDateTime *string `pulumi:"endDateTime"`
	// The first three characters of the secret text to help identify it in use.
	Hint *string `pulumi:"hint"`
	// The name of the NGINX Dataplane API Key. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the NGINX Deployment that the API key is associated with. Changing this forces a new resource to be created.
	NginxDeploymentId *string `pulumi:"nginxDeploymentId"`
	// The value used as the Dataplane API Key. The API key requirements can be found in the [NGINXaaS Documentation](https://docs.nginx.com/nginxaas/azure/quickstart/loadbalancer-kubernetes/#create-an-nginxaas-data-plane-api-key).
	SecretText *string `pulumi:"secretText"`
}

type ApiKeyState struct {
	// The RFC3339 formatted date-time after which this Dataplane API Key is no longer valid. The maximum value is now+2y.
	EndDateTime pulumi.StringPtrInput
	// The first three characters of the secret text to help identify it in use.
	Hint pulumi.StringPtrInput
	// The name of the NGINX Dataplane API Key. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the NGINX Deployment that the API key is associated with. Changing this forces a new resource to be created.
	NginxDeploymentId pulumi.StringPtrInput
	// The value used as the Dataplane API Key. The API key requirements can be found in the [NGINXaaS Documentation](https://docs.nginx.com/nginxaas/azure/quickstart/loadbalancer-kubernetes/#create-an-nginxaas-data-plane-api-key).
	SecretText pulumi.StringPtrInput
}

func (ApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiKeyState)(nil)).Elem()
}

type apiKeyArgs struct {
	// The RFC3339 formatted date-time after which this Dataplane API Key is no longer valid. The maximum value is now+2y.
	EndDateTime string `pulumi:"endDateTime"`
	// The name of the NGINX Dataplane API Key. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the NGINX Deployment that the API key is associated with. Changing this forces a new resource to be created.
	NginxDeploymentId string `pulumi:"nginxDeploymentId"`
	// The value used as the Dataplane API Key. The API key requirements can be found in the [NGINXaaS Documentation](https://docs.nginx.com/nginxaas/azure/quickstart/loadbalancer-kubernetes/#create-an-nginxaas-data-plane-api-key).
	SecretText string `pulumi:"secretText"`
}

// The set of arguments for constructing a ApiKey resource.
type ApiKeyArgs struct {
	// The RFC3339 formatted date-time after which this Dataplane API Key is no longer valid. The maximum value is now+2y.
	EndDateTime pulumi.StringInput
	// The name of the NGINX Dataplane API Key. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the NGINX Deployment that the API key is associated with. Changing this forces a new resource to be created.
	NginxDeploymentId pulumi.StringInput
	// The value used as the Dataplane API Key. The API key requirements can be found in the [NGINXaaS Documentation](https://docs.nginx.com/nginxaas/azure/quickstart/loadbalancer-kubernetes/#create-an-nginxaas-data-plane-api-key).
	SecretText pulumi.StringInput
}

func (ApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiKeyArgs)(nil)).Elem()
}

type ApiKeyInput interface {
	pulumi.Input

	ToApiKeyOutput() ApiKeyOutput
	ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput
}

func (*ApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKey)(nil)).Elem()
}

func (i *ApiKey) ToApiKeyOutput() ApiKeyOutput {
	return i.ToApiKeyOutputWithContext(context.Background())
}

func (i *ApiKey) ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyOutput)
}

// ApiKeyArrayInput is an input type that accepts ApiKeyArray and ApiKeyArrayOutput values.
// You can construct a concrete instance of `ApiKeyArrayInput` via:
//
//	ApiKeyArray{ ApiKeyArgs{...} }
type ApiKeyArrayInput interface {
	pulumi.Input

	ToApiKeyArrayOutput() ApiKeyArrayOutput
	ToApiKeyArrayOutputWithContext(context.Context) ApiKeyArrayOutput
}

type ApiKeyArray []ApiKeyInput

func (ApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiKey)(nil)).Elem()
}

func (i ApiKeyArray) ToApiKeyArrayOutput() ApiKeyArrayOutput {
	return i.ToApiKeyArrayOutputWithContext(context.Background())
}

func (i ApiKeyArray) ToApiKeyArrayOutputWithContext(ctx context.Context) ApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyArrayOutput)
}

// ApiKeyMapInput is an input type that accepts ApiKeyMap and ApiKeyMapOutput values.
// You can construct a concrete instance of `ApiKeyMapInput` via:
//
//	ApiKeyMap{ "key": ApiKeyArgs{...} }
type ApiKeyMapInput interface {
	pulumi.Input

	ToApiKeyMapOutput() ApiKeyMapOutput
	ToApiKeyMapOutputWithContext(context.Context) ApiKeyMapOutput
}

type ApiKeyMap map[string]ApiKeyInput

func (ApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiKey)(nil)).Elem()
}

func (i ApiKeyMap) ToApiKeyMapOutput() ApiKeyMapOutput {
	return i.ToApiKeyMapOutputWithContext(context.Background())
}

func (i ApiKeyMap) ToApiKeyMapOutputWithContext(ctx context.Context) ApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyMapOutput)
}

type ApiKeyOutput struct{ *pulumi.OutputState }

func (ApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKey)(nil)).Elem()
}

func (o ApiKeyOutput) ToApiKeyOutput() ApiKeyOutput {
	return o
}

func (o ApiKeyOutput) ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput {
	return o
}

// The RFC3339 formatted date-time after which this Dataplane API Key is no longer valid. The maximum value is now+2y.
func (o ApiKeyOutput) EndDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.EndDateTime }).(pulumi.StringOutput)
}

// The first three characters of the secret text to help identify it in use.
func (o ApiKeyOutput) Hint() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.Hint }).(pulumi.StringOutput)
}

// The name of the NGINX Dataplane API Key. Changing this forces a new resource to be created.
func (o ApiKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the NGINX Deployment that the API key is associated with. Changing this forces a new resource to be created.
func (o ApiKeyOutput) NginxDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.NginxDeploymentId }).(pulumi.StringOutput)
}

// The value used as the Dataplane API Key. The API key requirements can be found in the [NGINXaaS Documentation](https://docs.nginx.com/nginxaas/azure/quickstart/loadbalancer-kubernetes/#create-an-nginxaas-data-plane-api-key).
func (o ApiKeyOutput) SecretText() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.SecretText }).(pulumi.StringOutput)
}

type ApiKeyArrayOutput struct{ *pulumi.OutputState }

func (ApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiKey)(nil)).Elem()
}

func (o ApiKeyArrayOutput) ToApiKeyArrayOutput() ApiKeyArrayOutput {
	return o
}

func (o ApiKeyArrayOutput) ToApiKeyArrayOutputWithContext(ctx context.Context) ApiKeyArrayOutput {
	return o
}

func (o ApiKeyArrayOutput) Index(i pulumi.IntInput) ApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiKey {
		return vs[0].([]*ApiKey)[vs[1].(int)]
	}).(ApiKeyOutput)
}

type ApiKeyMapOutput struct{ *pulumi.OutputState }

func (ApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiKey)(nil)).Elem()
}

func (o ApiKeyMapOutput) ToApiKeyMapOutput() ApiKeyMapOutput {
	return o
}

func (o ApiKeyMapOutput) ToApiKeyMapOutputWithContext(ctx context.Context) ApiKeyMapOutput {
	return o
}

func (o ApiKeyMapOutput) MapIndex(k pulumi.StringInput) ApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiKey {
		return vs[0].(map[string]*ApiKey)[vs[1].(string)]
	}).(ApiKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyInput)(nil)).Elem(), &ApiKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyArrayInput)(nil)).Elem(), ApiKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyMapInput)(nil)).Elem(), ApiKeyMap{})
	pulumi.RegisterOutputType(ApiKeyOutput{})
	pulumi.RegisterOutputType(ApiKeyArrayOutput{})
	pulumi.RegisterOutputType(ApiKeyMapOutput{})
}
