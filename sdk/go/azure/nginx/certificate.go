// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nginx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Certificate for an NGinx Deployment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/base64"
//	"os"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/nginx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func filebase64OrPanic(path string) pulumi.StringPtrInput {
//		if fileData, err := os.ReadFile(path); err == nil {
//			return pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))
//		} else {
//			panic(err.Error())
//		}
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePublicIp, err := network.NewPublicIp(ctx, "examplePublicIp", &network.PublicIpArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				AllocationMethod:  pulumi.String("Static"),
//				Sku:               pulumi.String("Standard"),
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//				Delegations: network.SubnetDelegationArray{
//					&network.SubnetDelegationArgs{
//						Name: pulumi.String("delegation"),
//						ServiceDelegation: &network.SubnetDelegationServiceDelegationArgs{
//							Name: pulumi.String("NGINX.NGINXPLUS/nginxDeployments"),
//							Actions: pulumi.StringArray{
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/join/action"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleDeployment, err := nginx.NewDeployment(ctx, "exampleDeployment", &nginx.DeploymentArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Sku:                    pulumi.String("publicpreview_Monthly_gmz7xq9ge3py"),
//				Location:               exampleResourceGroup.Location,
//				ManagedResourceGroup:   pulumi.String("example"),
//				DiagnoseSupportEnabled: pulumi.Bool(true),
//				FrontendPublic: &nginx.DeploymentFrontendPublicArgs{
//					IpAddresses: pulumi.StringArray{
//						examplePublicIp.ID(),
//					},
//				},
//				NetworkInterfaces: nginx.DeploymentNetworkInterfaceArray{
//					&nginx.DeploymentNetworkInterfaceArgs{
//						SubnetId: exampleSubnet.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				TenantId:          *pulumi.String(current.TenantId),
//				SkuName:           pulumi.String("premium"),
//				AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: *pulumi.String(current.TenantId),
//						ObjectId: *pulumi.String(current.ObjectId),
//						CertificatePermissions: pulumi.StringArray{
//							pulumi.String("Create"),
//							pulumi.String("Delete"),
//							pulumi.String("DeleteIssuers"),
//							pulumi.String("Get"),
//							pulumi.String("GetIssuers"),
//							pulumi.String("Import"),
//							pulumi.String("List"),
//							pulumi.String("ListIssuers"),
//							pulumi.String("ManageContacts"),
//							pulumi.String("ManageIssuers"),
//							pulumi.String("SetIssuers"),
//							pulumi.String("Update"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleCertificate, err := keyvault.NewCertificate(ctx, "exampleCertificate", &keyvault.CertificateArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				Certificate: &keyvault.CertificateCertificateArgs{
//					Contents: filebase64OrPanic("certificate-to-import.pfx"),
//					Password: pulumi.String(""),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nginx.NewCertificate(ctx, "exampleNginx/certificateCertificate", &nginx.CertificateArgs{
//				NginxDeploymentId:      exampleDeployment.ID(),
//				KeyVirtualPath:         pulumi.String("/src/cert/soservermekey.key"),
//				CertificateVirtualPath: pulumi.String("/src/cert/server.cert"),
//				KeyVaultSecretId:       exampleCertificate.SecretId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An Nginx Certificate can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:nginx/certificate:Certificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/deploy1/certificates/cer1
//
// ```
type Certificate struct {
	pulumi.CustomResourceState

	// Specify the path to the cert file of this certificate.
	CertificateVirtualPath pulumi.StringOutput `pulumi:"certificateVirtualPath"`
	// Specify the ID of the Key Vault Secret for this certificate.
	KeyVaultSecretId pulumi.StringOutput `pulumi:"keyVaultSecretId"`
	// Specify the path to the key file of this certificate.
	KeyVirtualPath pulumi.StringOutput `pulumi:"keyVirtualPath"`
	// The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
	NginxDeploymentId pulumi.StringOutput `pulumi:"nginxDeploymentId"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateVirtualPath == nil {
		return nil, errors.New("invalid value for required argument 'CertificateVirtualPath'")
	}
	if args.KeyVaultSecretId == nil {
		return nil, errors.New("invalid value for required argument 'KeyVaultSecretId'")
	}
	if args.KeyVirtualPath == nil {
		return nil, errors.New("invalid value for required argument 'KeyVirtualPath'")
	}
	if args.NginxDeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'NginxDeploymentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certificate
	err := ctx.RegisterResource("azure:nginx/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("azure:nginx/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// Specify the path to the cert file of this certificate.
	CertificateVirtualPath *string `pulumi:"certificateVirtualPath"`
	// Specify the ID of the Key Vault Secret for this certificate.
	KeyVaultSecretId *string `pulumi:"keyVaultSecretId"`
	// Specify the path to the key file of this certificate.
	KeyVirtualPath *string `pulumi:"keyVirtualPath"`
	// The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
	Name *string `pulumi:"name"`
	// The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
	NginxDeploymentId *string `pulumi:"nginxDeploymentId"`
}

type CertificateState struct {
	// Specify the path to the cert file of this certificate.
	CertificateVirtualPath pulumi.StringPtrInput
	// Specify the ID of the Key Vault Secret for this certificate.
	KeyVaultSecretId pulumi.StringPtrInput
	// Specify the path to the key file of this certificate.
	KeyVirtualPath pulumi.StringPtrInput
	// The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
	Name pulumi.StringPtrInput
	// The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
	NginxDeploymentId pulumi.StringPtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// Specify the path to the cert file of this certificate.
	CertificateVirtualPath string `pulumi:"certificateVirtualPath"`
	// Specify the ID of the Key Vault Secret for this certificate.
	KeyVaultSecretId string `pulumi:"keyVaultSecretId"`
	// Specify the path to the key file of this certificate.
	KeyVirtualPath string `pulumi:"keyVirtualPath"`
	// The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
	Name *string `pulumi:"name"`
	// The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
	NginxDeploymentId string `pulumi:"nginxDeploymentId"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Specify the path to the cert file of this certificate.
	CertificateVirtualPath pulumi.StringInput
	// Specify the ID of the Key Vault Secret for this certificate.
	KeyVaultSecretId pulumi.StringInput
	// Specify the path to the key file of this certificate.
	KeyVirtualPath pulumi.StringInput
	// The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
	Name pulumi.StringPtrInput
	// The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
	NginxDeploymentId pulumi.StringInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

// CertificateArrayInput is an input type that accepts CertificateArray and CertificateArrayOutput values.
// You can construct a concrete instance of `CertificateArrayInput` via:
//
//	CertificateArray{ CertificateArgs{...} }
type CertificateArrayInput interface {
	pulumi.Input

	ToCertificateArrayOutput() CertificateArrayOutput
	ToCertificateArrayOutputWithContext(context.Context) CertificateArrayOutput
}

type CertificateArray []CertificateInput

func (CertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (i CertificateArray) ToCertificateArrayOutput() CertificateArrayOutput {
	return i.ToCertificateArrayOutputWithContext(context.Background())
}

func (i CertificateArray) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateArrayOutput)
}

// CertificateMapInput is an input type that accepts CertificateMap and CertificateMapOutput values.
// You can construct a concrete instance of `CertificateMapInput` via:
//
//	CertificateMap{ "key": CertificateArgs{...} }
type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(context.Context) CertificateMapOutput
}

type CertificateMap map[string]CertificateInput

func (CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (i CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

// Specify the path to the cert file of this certificate.
func (o CertificateOutput) CertificateVirtualPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CertificateVirtualPath }).(pulumi.StringOutput)
}

// Specify the ID of the Key Vault Secret for this certificate.
func (o CertificateOutput) KeyVaultSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.KeyVaultSecretId }).(pulumi.StringOutput)
}

// Specify the path to the key file of this certificate.
func (o CertificateOutput) KeyVirtualPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.KeyVirtualPath }).(pulumi.StringOutput)
}

// The name which should be used for this Nginx Certificate. Changing this forces a new Nginx Certificate to be created.
func (o CertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Nginx Deployment that this Certificate should be associated with. Changing this forces a new Nginx Certificate to be created.
func (o CertificateOutput) NginxDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.NginxDeploymentId }).(pulumi.StringOutput)
}

type CertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (o CertificateArrayOutput) ToCertificateArrayOutput() CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) Index(i pulumi.IntInput) CertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].([]*Certificate)[vs[1].(int)]
	}).(CertificateOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) MapIndex(k pulumi.StringInput) CertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].(map[string]*Certificate)[vs[1].(string)]
	}).(CertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateInput)(nil)).Elem(), &Certificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateArrayInput)(nil)).Elem(), CertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapInput)(nil)).Elem(), CertificateMap{})
	pulumi.RegisterOutputType(CertificateOutput{})
	pulumi.RegisterOutputType(CertificateArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
}
