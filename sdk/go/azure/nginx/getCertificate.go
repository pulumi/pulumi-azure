// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nginx

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing NGINX Certificate.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/nginx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := nginx.LookupCertificate(ctx, &nginx.LookupCertificateArgs{
//				Name:              "existing",
//				NginxDeploymentId: exampleAzurermNginxDeployment.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This data source uses the following Azure API Providers:
//
// * `Nginx.NginxPlus` - 2024-11-01-preview
func LookupCertificate(ctx *pulumi.Context, args *LookupCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateResult
	err := ctx.Invoke("azure:nginx/getCertificate:getCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateArgs struct {
	// The name of the NGINX Certificate.
	Name string `pulumi:"name"`
	// The ID of the NGINX Deployment that the certificate is associated with.
	NginxDeploymentId string `pulumi:"nginxDeploymentId"`
}

// A collection of values returned by getCertificate.
type LookupCertificateResult struct {
	// The path to the certificate file of the certificate.
	CertificateVirtualPath string `pulumi:"certificateVirtualPath"`
	// The error code of the certificate error, if any.
	ErrorCode string `pulumi:"errorCode"`
	// The error message of the certificate error, if any.
	ErrorMessage string `pulumi:"errorMessage"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The date/time the certificate was created in Azure Key Vault.
	KeyVaultSecretCreationDate string `pulumi:"keyVaultSecretCreationDate"`
	// The ID of the Key Vault Secret for the certificate.
	KeyVaultSecretId string `pulumi:"keyVaultSecretId"`
	// The version of the certificate.
	KeyVaultSecretVersion string `pulumi:"keyVaultSecretVersion"`
	// The path to the key file of the certificate.
	KeyVirtualPath    string `pulumi:"keyVirtualPath"`
	Name              string `pulumi:"name"`
	NginxDeploymentId string `pulumi:"nginxDeploymentId"`
	// The SHA-1 thumbprint of the certificate.
	Sha1Thumbprint string `pulumi:"sha1Thumbprint"`
}

func LookupCertificateOutput(ctx *pulumi.Context, args LookupCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCertificateResultOutput, error) {
			args := v.(LookupCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure:nginx/getCertificate:getCertificate", args, LookupCertificateResultOutput{}, options).(LookupCertificateResultOutput), nil
		}).(LookupCertificateResultOutput)
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateOutputArgs struct {
	// The name of the NGINX Certificate.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the NGINX Deployment that the certificate is associated with.
	NginxDeploymentId pulumi.StringInput `pulumi:"nginxDeploymentId"`
}

func (LookupCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getCertificate.
type LookupCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateResult)(nil)).Elem()
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutput() LookupCertificateResultOutput {
	return o
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutputWithContext(ctx context.Context) LookupCertificateResultOutput {
	return o
}

// The path to the certificate file of the certificate.
func (o LookupCertificateResultOutput) CertificateVirtualPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateVirtualPath }).(pulumi.StringOutput)
}

// The error code of the certificate error, if any.
func (o LookupCertificateResultOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.ErrorCode }).(pulumi.StringOutput)
}

// The error message of the certificate error, if any.
func (o LookupCertificateResultOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// The date/time the certificate was created in Azure Key Vault.
func (o LookupCertificateResultOutput) KeyVaultSecretCreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.KeyVaultSecretCreationDate }).(pulumi.StringOutput)
}

// The ID of the Key Vault Secret for the certificate.
func (o LookupCertificateResultOutput) KeyVaultSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.KeyVaultSecretId }).(pulumi.StringOutput)
}

// The version of the certificate.
func (o LookupCertificateResultOutput) KeyVaultSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.KeyVaultSecretVersion }).(pulumi.StringOutput)
}

// The path to the key file of the certificate.
func (o LookupCertificateResultOutput) KeyVirtualPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.KeyVirtualPath }).(pulumi.StringOutput)
}

func (o LookupCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupCertificateResultOutput) NginxDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.NginxDeploymentId }).(pulumi.StringOutput)
}

// The SHA-1 thumbprint of the certificate.
func (o LookupCertificateResultOutput) Sha1Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Sha1Thumbprint }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateResultOutput{})
}
