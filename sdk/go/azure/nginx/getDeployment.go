// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nginx

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Nginx Deployment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/nginx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := nginx.LookupDeployment(ctx, &nginx.LookupDeploymentArgs{
//				Name:              "existing",
//				ResourceGroupName: "existing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupDeployment(ctx *pulumi.Context, args *LookupDeploymentArgs, opts ...pulumi.InvokeOption) (*LookupDeploymentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDeploymentResult
	err := ctx.Invoke("azure:nginx/getDeployment:getDeployment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDeployment.
type LookupDeploymentArgs struct {
	// The name of this Nginx Deployment.
	Name string `pulumi:"name"`
	// The name of the Resource Group where the Nginx Deployment exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getDeployment.
type LookupDeploymentResult struct {
	// The number of NGINX capacity units for this Nginx Deployment.
	Capacity int `pulumi:"capacity"`
	// Whether diagnostic settings are enabled.
	DiagnoseSupportEnabled bool `pulumi:"diagnoseSupportEnabled"`
	// Preferred email associated with the Nginx Deployment.
	Email string `pulumi:"email"`
	// A `frontendPrivate` block as defined below.
	FrontendPrivates []GetDeploymentFrontendPrivate `pulumi:"frontendPrivates"`
	// A `frontendPublic` block as defined below.
	FrontendPublics []GetDeploymentFrontendPublic `pulumi:"frontendPublics"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A `identity` block as defined below.
	Identities []GetDeploymentIdentity `pulumi:"identities"`
	// List of public IPs of the Ngix Deployment.
	IpAddress string `pulumi:"ipAddress"`
	// The Azure Region where the Nginx Deployment exists.
	Location string `pulumi:"location"`
	// A `loggingStorageAccount` block as defined below.
	LoggingStorageAccounts []GetDeploymentLoggingStorageAccount `pulumi:"loggingStorageAccounts"`
	// Auto-generated managed resource group for the Nginx Deployment.
	ManagedResourceGroup string `pulumi:"managedResourceGroup"`
	// The account name of the StorageAccount for logging.
	Name string `pulumi:"name"`
	// A `networkInterface` block as defined below.
	NetworkInterfaces []GetDeploymentNetworkInterface `pulumi:"networkInterfaces"`
	// NGINX version of the Nginx Deployment.
	NginxVersion      string `pulumi:"nginxVersion"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the SKU for this Nginx Deployment.
	Sku string `pulumi:"sku"`
	// A mapping of tags assigned to the Nginx Deployment.
	Tags map[string]string `pulumi:"tags"`
}

func LookupDeploymentOutput(ctx *pulumi.Context, args LookupDeploymentOutputArgs, opts ...pulumi.InvokeOption) LookupDeploymentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDeploymentResult, error) {
			args := v.(LookupDeploymentArgs)
			r, err := LookupDeployment(ctx, &args, opts...)
			var s LookupDeploymentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDeploymentResultOutput)
}

// A collection of arguments for invoking getDeployment.
type LookupDeploymentOutputArgs struct {
	// The name of this Nginx Deployment.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Nginx Deployment exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupDeploymentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeploymentArgs)(nil)).Elem()
}

// A collection of values returned by getDeployment.
type LookupDeploymentResultOutput struct{ *pulumi.OutputState }

func (LookupDeploymentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDeploymentResult)(nil)).Elem()
}

func (o LookupDeploymentResultOutput) ToLookupDeploymentResultOutput() LookupDeploymentResultOutput {
	return o
}

func (o LookupDeploymentResultOutput) ToLookupDeploymentResultOutputWithContext(ctx context.Context) LookupDeploymentResultOutput {
	return o
}

// The number of NGINX capacity units for this Nginx Deployment.
func (o LookupDeploymentResultOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDeploymentResult) int { return v.Capacity }).(pulumi.IntOutput)
}

// Whether diagnostic settings are enabled.
func (o LookupDeploymentResultOutput) DiagnoseSupportEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDeploymentResult) bool { return v.DiagnoseSupportEnabled }).(pulumi.BoolOutput)
}

// Preferred email associated with the Nginx Deployment.
func (o LookupDeploymentResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.Email }).(pulumi.StringOutput)
}

// A `frontendPrivate` block as defined below.
func (o LookupDeploymentResultOutput) FrontendPrivates() GetDeploymentFrontendPrivateArrayOutput {
	return o.ApplyT(func(v LookupDeploymentResult) []GetDeploymentFrontendPrivate { return v.FrontendPrivates }).(GetDeploymentFrontendPrivateArrayOutput)
}

// A `frontendPublic` block as defined below.
func (o LookupDeploymentResultOutput) FrontendPublics() GetDeploymentFrontendPublicArrayOutput {
	return o.ApplyT(func(v LookupDeploymentResult) []GetDeploymentFrontendPublic { return v.FrontendPublics }).(GetDeploymentFrontendPublicArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDeploymentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.Id }).(pulumi.StringOutput)
}

// A `identity` block as defined below.
func (o LookupDeploymentResultOutput) Identities() GetDeploymentIdentityArrayOutput {
	return o.ApplyT(func(v LookupDeploymentResult) []GetDeploymentIdentity { return v.Identities }).(GetDeploymentIdentityArrayOutput)
}

// List of public IPs of the Ngix Deployment.
func (o LookupDeploymentResultOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The Azure Region where the Nginx Deployment exists.
func (o LookupDeploymentResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.Location }).(pulumi.StringOutput)
}

// A `loggingStorageAccount` block as defined below.
func (o LookupDeploymentResultOutput) LoggingStorageAccounts() GetDeploymentLoggingStorageAccountArrayOutput {
	return o.ApplyT(func(v LookupDeploymentResult) []GetDeploymentLoggingStorageAccount { return v.LoggingStorageAccounts }).(GetDeploymentLoggingStorageAccountArrayOutput)
}

// Auto-generated managed resource group for the Nginx Deployment.
func (o LookupDeploymentResultOutput) ManagedResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.ManagedResourceGroup }).(pulumi.StringOutput)
}

// The account name of the StorageAccount for logging.
func (o LookupDeploymentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.Name }).(pulumi.StringOutput)
}

// A `networkInterface` block as defined below.
func (o LookupDeploymentResultOutput) NetworkInterfaces() GetDeploymentNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v LookupDeploymentResult) []GetDeploymentNetworkInterface { return v.NetworkInterfaces }).(GetDeploymentNetworkInterfaceArrayOutput)
}

// NGINX version of the Nginx Deployment.
func (o LookupDeploymentResultOutput) NginxVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.NginxVersion }).(pulumi.StringOutput)
}

func (o LookupDeploymentResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Name of the SKU for this Nginx Deployment.
func (o LookupDeploymentResultOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDeploymentResult) string { return v.Sku }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the Nginx Deployment.
func (o LookupDeploymentResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDeploymentResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDeploymentResultOutput{})
}
