// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nginx

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the configuration for a Nginx Deployment.
//
// ## Import
//
// Nginxs can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:nginx/configuration:Configuration example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Nginx.NginxPlus/nginxDeployments/dep1/configurations/default
//
// ```
type Configuration struct {
	pulumi.CustomResourceState

	// One or more `configFile` blocks as defined below.
	ConfigFiles ConfigurationConfigFileArrayOutput `pulumi:"configFiles"`
	// The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
	NginxDeploymentId pulumi.StringOutput `pulumi:"nginxDeploymentId"`
	// Specify the package data for this configuration.
	PackageData pulumi.StringPtrOutput `pulumi:"packageData"`
	// One or more `protectedFile` blocks with sensitive information as defined below. If specified `configFile` must also be specified.
	ProtectedFiles ConfigurationProtectedFileArrayOutput `pulumi:"protectedFiles"`
	// Specify the root file path of this Nginx Configuration.
	RootFile pulumi.StringOutput `pulumi:"rootFile"`
}

// NewConfiguration registers a new resource with the given unique name, arguments, and options.
func NewConfiguration(ctx *pulumi.Context,
	name string, args *ConfigurationArgs, opts ...pulumi.ResourceOption) (*Configuration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NginxDeploymentId == nil {
		return nil, errors.New("invalid value for required argument 'NginxDeploymentId'")
	}
	if args.RootFile == nil {
		return nil, errors.New("invalid value for required argument 'RootFile'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Configuration
	err := ctx.RegisterResource("azure:nginx/configuration:Configuration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfiguration gets an existing Configuration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationState, opts ...pulumi.ResourceOption) (*Configuration, error) {
	var resource Configuration
	err := ctx.ReadResource("azure:nginx/configuration:Configuration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Configuration resources.
type configurationState struct {
	// One or more `configFile` blocks as defined below.
	ConfigFiles []ConfigurationConfigFile `pulumi:"configFiles"`
	// The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
	NginxDeploymentId *string `pulumi:"nginxDeploymentId"`
	// Specify the package data for this configuration.
	PackageData *string `pulumi:"packageData"`
	// One or more `protectedFile` blocks with sensitive information as defined below. If specified `configFile` must also be specified.
	ProtectedFiles []ConfigurationProtectedFile `pulumi:"protectedFiles"`
	// Specify the root file path of this Nginx Configuration.
	RootFile *string `pulumi:"rootFile"`
}

type ConfigurationState struct {
	// One or more `configFile` blocks as defined below.
	ConfigFiles ConfigurationConfigFileArrayInput
	// The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
	NginxDeploymentId pulumi.StringPtrInput
	// Specify the package data for this configuration.
	PackageData pulumi.StringPtrInput
	// One or more `protectedFile` blocks with sensitive information as defined below. If specified `configFile` must also be specified.
	ProtectedFiles ConfigurationProtectedFileArrayInput
	// Specify the root file path of this Nginx Configuration.
	RootFile pulumi.StringPtrInput
}

func (ConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationState)(nil)).Elem()
}

type configurationArgs struct {
	// One or more `configFile` blocks as defined below.
	ConfigFiles []ConfigurationConfigFile `pulumi:"configFiles"`
	// The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
	NginxDeploymentId string `pulumi:"nginxDeploymentId"`
	// Specify the package data for this configuration.
	PackageData *string `pulumi:"packageData"`
	// One or more `protectedFile` blocks with sensitive information as defined below. If specified `configFile` must also be specified.
	ProtectedFiles []ConfigurationProtectedFile `pulumi:"protectedFiles"`
	// Specify the root file path of this Nginx Configuration.
	RootFile string `pulumi:"rootFile"`
}

// The set of arguments for constructing a Configuration resource.
type ConfigurationArgs struct {
	// One or more `configFile` blocks as defined below.
	ConfigFiles ConfigurationConfigFileArrayInput
	// The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
	NginxDeploymentId pulumi.StringInput
	// Specify the package data for this configuration.
	PackageData pulumi.StringPtrInput
	// One or more `protectedFile` blocks with sensitive information as defined below. If specified `configFile` must also be specified.
	ProtectedFiles ConfigurationProtectedFileArrayInput
	// Specify the root file path of this Nginx Configuration.
	RootFile pulumi.StringInput
}

func (ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationArgs)(nil)).Elem()
}

type ConfigurationInput interface {
	pulumi.Input

	ToConfigurationOutput() ConfigurationOutput
	ToConfigurationOutputWithContext(ctx context.Context) ConfigurationOutput
}

func (*Configuration) ElementType() reflect.Type {
	return reflect.TypeOf((**Configuration)(nil)).Elem()
}

func (i *Configuration) ToConfigurationOutput() ConfigurationOutput {
	return i.ToConfigurationOutputWithContext(context.Background())
}

func (i *Configuration) ToConfigurationOutputWithContext(ctx context.Context) ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationOutput)
}

// ConfigurationArrayInput is an input type that accepts ConfigurationArray and ConfigurationArrayOutput values.
// You can construct a concrete instance of `ConfigurationArrayInput` via:
//
//	ConfigurationArray{ ConfigurationArgs{...} }
type ConfigurationArrayInput interface {
	pulumi.Input

	ToConfigurationArrayOutput() ConfigurationArrayOutput
	ToConfigurationArrayOutputWithContext(context.Context) ConfigurationArrayOutput
}

type ConfigurationArray []ConfigurationInput

func (ConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Configuration)(nil)).Elem()
}

func (i ConfigurationArray) ToConfigurationArrayOutput() ConfigurationArrayOutput {
	return i.ToConfigurationArrayOutputWithContext(context.Background())
}

func (i ConfigurationArray) ToConfigurationArrayOutputWithContext(ctx context.Context) ConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationArrayOutput)
}

// ConfigurationMapInput is an input type that accepts ConfigurationMap and ConfigurationMapOutput values.
// You can construct a concrete instance of `ConfigurationMapInput` via:
//
//	ConfigurationMap{ "key": ConfigurationArgs{...} }
type ConfigurationMapInput interface {
	pulumi.Input

	ToConfigurationMapOutput() ConfigurationMapOutput
	ToConfigurationMapOutputWithContext(context.Context) ConfigurationMapOutput
}

type ConfigurationMap map[string]ConfigurationInput

func (ConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Configuration)(nil)).Elem()
}

func (i ConfigurationMap) ToConfigurationMapOutput() ConfigurationMapOutput {
	return i.ToConfigurationMapOutputWithContext(context.Background())
}

func (i ConfigurationMap) ToConfigurationMapOutputWithContext(ctx context.Context) ConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationMapOutput)
}

type ConfigurationOutput struct{ *pulumi.OutputState }

func (ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Configuration)(nil)).Elem()
}

func (o ConfigurationOutput) ToConfigurationOutput() ConfigurationOutput {
	return o
}

func (o ConfigurationOutput) ToConfigurationOutputWithContext(ctx context.Context) ConfigurationOutput {
	return o
}

// One or more `configFile` blocks as defined below.
func (o ConfigurationOutput) ConfigFiles() ConfigurationConfigFileArrayOutput {
	return o.ApplyT(func(v *Configuration) ConfigurationConfigFileArrayOutput { return v.ConfigFiles }).(ConfigurationConfigFileArrayOutput)
}

// The ID of the Nginx Deployment. Changing this forces a new Nginx Configuration to be created.
func (o ConfigurationOutput) NginxDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringOutput { return v.NginxDeploymentId }).(pulumi.StringOutput)
}

// Specify the package data for this configuration.
func (o ConfigurationOutput) PackageData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringPtrOutput { return v.PackageData }).(pulumi.StringPtrOutput)
}

// One or more `protectedFile` blocks with sensitive information as defined below. If specified `configFile` must also be specified.
func (o ConfigurationOutput) ProtectedFiles() ConfigurationProtectedFileArrayOutput {
	return o.ApplyT(func(v *Configuration) ConfigurationProtectedFileArrayOutput { return v.ProtectedFiles }).(ConfigurationProtectedFileArrayOutput)
}

// Specify the root file path of this Nginx Configuration.
func (o ConfigurationOutput) RootFile() pulumi.StringOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringOutput { return v.RootFile }).(pulumi.StringOutput)
}

type ConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Configuration)(nil)).Elem()
}

func (o ConfigurationArrayOutput) ToConfigurationArrayOutput() ConfigurationArrayOutput {
	return o
}

func (o ConfigurationArrayOutput) ToConfigurationArrayOutputWithContext(ctx context.Context) ConfigurationArrayOutput {
	return o
}

func (o ConfigurationArrayOutput) Index(i pulumi.IntInput) ConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Configuration {
		return vs[0].([]*Configuration)[vs[1].(int)]
	}).(ConfigurationOutput)
}

type ConfigurationMapOutput struct{ *pulumi.OutputState }

func (ConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Configuration)(nil)).Elem()
}

func (o ConfigurationMapOutput) ToConfigurationMapOutput() ConfigurationMapOutput {
	return o
}

func (o ConfigurationMapOutput) ToConfigurationMapOutputWithContext(ctx context.Context) ConfigurationMapOutput {
	return o
}

func (o ConfigurationMapOutput) MapIndex(k pulumi.StringInput) ConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Configuration {
		return vs[0].(map[string]*Configuration)[vs[1].(string)]
	}).(ConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationInput)(nil)).Elem(), &Configuration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationArrayInput)(nil)).Elem(), ConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationMapInput)(nil)).Elem(), ConfigurationMap{})
	pulumi.RegisterOutputType(ConfigurationOutput{})
	pulumi.RegisterOutputType(ConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationMapOutput{})
}
