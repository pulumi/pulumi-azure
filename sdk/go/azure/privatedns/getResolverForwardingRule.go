// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package privatedns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about an existing Private DNS Resolver Forwarding Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/privatedns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := privatedns.LookupResolverForwardingRule(ctx, &privatedns.LookupResolverForwardingRuleArgs{
//				DnsForwardingRulesetId: "example-forwarding-rulset-id",
//				Name:                   "example-rule",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupResolverForwardingRule(ctx *pulumi.Context, args *LookupResolverForwardingRuleArgs, opts ...pulumi.InvokeOption) (*LookupResolverForwardingRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResolverForwardingRuleResult
	err := ctx.Invoke("azure:privatedns/getResolverForwardingRule:getResolverForwardingRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getResolverForwardingRule.
type LookupResolverForwardingRuleArgs struct {
	// ID of the Private DNS Resolver Forwarding Ruleset.
	DnsForwardingRulesetId string `pulumi:"dnsForwardingRulesetId"`
	// Name of the Private DNS Resolver Forwarding Rule.
	Name string `pulumi:"name"`
}

// A collection of values returned by getResolverForwardingRule.
type LookupResolverForwardingRuleResult struct {
	DnsForwardingRulesetId string `pulumi:"dnsForwardingRulesetId"`
	// The domain name for the Private DNS Resolver Forwarding Rule.
	DomainName string `pulumi:"domainName"`
	// Is the Private DNS Resolver Forwarding Rule enabled?
	Enabled bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The metadata attached to the Private DNS Resolver Forwarding Rule.
	Metadata map[string]string `pulumi:"metadata"`
	Name     string            `pulumi:"name"`
	// A list of `targetDnsServers` block as defined below.
	TargetDnsServers []GetResolverForwardingRuleTargetDnsServer `pulumi:"targetDnsServers"`
}

func LookupResolverForwardingRuleOutput(ctx *pulumi.Context, args LookupResolverForwardingRuleOutputArgs, opts ...pulumi.InvokeOption) LookupResolverForwardingRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupResolverForwardingRuleResult, error) {
			args := v.(LookupResolverForwardingRuleArgs)
			r, err := LookupResolverForwardingRule(ctx, &args, opts...)
			var s LookupResolverForwardingRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupResolverForwardingRuleResultOutput)
}

// A collection of arguments for invoking getResolverForwardingRule.
type LookupResolverForwardingRuleOutputArgs struct {
	// ID of the Private DNS Resolver Forwarding Ruleset.
	DnsForwardingRulesetId pulumi.StringInput `pulumi:"dnsForwardingRulesetId"`
	// Name of the Private DNS Resolver Forwarding Rule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupResolverForwardingRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverForwardingRuleArgs)(nil)).Elem()
}

// A collection of values returned by getResolverForwardingRule.
type LookupResolverForwardingRuleResultOutput struct{ *pulumi.OutputState }

func (LookupResolverForwardingRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResolverForwardingRuleResult)(nil)).Elem()
}

func (o LookupResolverForwardingRuleResultOutput) ToLookupResolverForwardingRuleResultOutput() LookupResolverForwardingRuleResultOutput {
	return o
}

func (o LookupResolverForwardingRuleResultOutput) ToLookupResolverForwardingRuleResultOutputWithContext(ctx context.Context) LookupResolverForwardingRuleResultOutput {
	return o
}

func (o LookupResolverForwardingRuleResultOutput) DnsForwardingRulesetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverForwardingRuleResult) string { return v.DnsForwardingRulesetId }).(pulumi.StringOutput)
}

// The domain name for the Private DNS Resolver Forwarding Rule.
func (o LookupResolverForwardingRuleResultOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverForwardingRuleResult) string { return v.DomainName }).(pulumi.StringOutput)
}

// Is the Private DNS Resolver Forwarding Rule enabled?
func (o LookupResolverForwardingRuleResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupResolverForwardingRuleResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupResolverForwardingRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverForwardingRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The metadata attached to the Private DNS Resolver Forwarding Rule.
func (o LookupResolverForwardingRuleResultOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupResolverForwardingRuleResult) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o LookupResolverForwardingRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupResolverForwardingRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// A list of `targetDnsServers` block as defined below.
func (o LookupResolverForwardingRuleResultOutput) TargetDnsServers() GetResolverForwardingRuleTargetDnsServerArrayOutput {
	return o.ApplyT(func(v LookupResolverForwardingRuleResult) []GetResolverForwardingRuleTargetDnsServer {
		return v.TargetDnsServers
	}).(GetResolverForwardingRuleTargetDnsServerArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupResolverForwardingRuleResultOutput{})
}
