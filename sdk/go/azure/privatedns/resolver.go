// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package privatedns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Private DNS Resolver.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/privatedns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = privatedns.NewResolver(ctx, "test", &privatedns.ResolverArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				VirtualNetworkId:  exampleVirtualNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DNS Resolver can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:privatedns/resolver:Resolver example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/dnsResolvers/dnsResolver1
//
// ```
type Resolver struct {
	pulumi.CustomResourceState

	// Specifies the Azure Region where the Private DNS Resolver should exist. Changing this forces a new Private DNS Resolver to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name which should be used for this Private DNS Resolver. Changing this forces a new Private DNS Resolver to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the Resource Group where the Private DNS Resolver should exist. Changing this forces a new Private DNS Resolver to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Private DNS Resolver.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The ID of the Virtual Network that is linked to the Private DNS Resolver. Changing this forces a new Private DNS Resolver to be created.
	VirtualNetworkId pulumi.StringOutput `pulumi:"virtualNetworkId"`
}

// NewResolver registers a new resource with the given unique name, arguments, and options.
func NewResolver(ctx *pulumi.Context,
	name string, args *ResolverArgs, opts ...pulumi.ResourceOption) (*Resolver, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VirtualNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualNetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Resolver
	err := ctx.RegisterResource("azure:privatedns/resolver:Resolver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolver gets an existing Resolver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverState, opts ...pulumi.ResourceOption) (*Resolver, error) {
	var resource Resolver
	err := ctx.ReadResource("azure:privatedns/resolver:Resolver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resolver resources.
type resolverState struct {
	// Specifies the Azure Region where the Private DNS Resolver should exist. Changing this forces a new Private DNS Resolver to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Private DNS Resolver. Changing this forces a new Private DNS Resolver to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group where the Private DNS Resolver should exist. Changing this forces a new Private DNS Resolver to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Private DNS Resolver.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the Virtual Network that is linked to the Private DNS Resolver. Changing this forces a new Private DNS Resolver to be created.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
}

type ResolverState struct {
	// Specifies the Azure Region where the Private DNS Resolver should exist. Changing this forces a new Private DNS Resolver to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Private DNS Resolver. Changing this forces a new Private DNS Resolver to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the Private DNS Resolver should exist. Changing this forces a new Private DNS Resolver to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Private DNS Resolver.
	Tags pulumi.StringMapInput
	// The ID of the Virtual Network that is linked to the Private DNS Resolver. Changing this forces a new Private DNS Resolver to be created.
	VirtualNetworkId pulumi.StringPtrInput
}

func (ResolverState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverState)(nil)).Elem()
}

type resolverArgs struct {
	// Specifies the Azure Region where the Private DNS Resolver should exist. Changing this forces a new Private DNS Resolver to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Private DNS Resolver. Changing this forces a new Private DNS Resolver to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group where the Private DNS Resolver should exist. Changing this forces a new Private DNS Resolver to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Private DNS Resolver.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the Virtual Network that is linked to the Private DNS Resolver. Changing this forces a new Private DNS Resolver to be created.
	VirtualNetworkId string `pulumi:"virtualNetworkId"`
}

// The set of arguments for constructing a Resolver resource.
type ResolverArgs struct {
	// Specifies the Azure Region where the Private DNS Resolver should exist. Changing this forces a new Private DNS Resolver to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Private DNS Resolver. Changing this forces a new Private DNS Resolver to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the Private DNS Resolver should exist. Changing this forces a new Private DNS Resolver to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Private DNS Resolver.
	Tags pulumi.StringMapInput
	// The ID of the Virtual Network that is linked to the Private DNS Resolver. Changing this forces a new Private DNS Resolver to be created.
	VirtualNetworkId pulumi.StringInput
}

func (ResolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverArgs)(nil)).Elem()
}

type ResolverInput interface {
	pulumi.Input

	ToResolverOutput() ResolverOutput
	ToResolverOutputWithContext(ctx context.Context) ResolverOutput
}

func (*Resolver) ElementType() reflect.Type {
	return reflect.TypeOf((**Resolver)(nil)).Elem()
}

func (i *Resolver) ToResolverOutput() ResolverOutput {
	return i.ToResolverOutputWithContext(context.Background())
}

func (i *Resolver) ToResolverOutputWithContext(ctx context.Context) ResolverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverOutput)
}

// ResolverArrayInput is an input type that accepts ResolverArray and ResolverArrayOutput values.
// You can construct a concrete instance of `ResolverArrayInput` via:
//
//	ResolverArray{ ResolverArgs{...} }
type ResolverArrayInput interface {
	pulumi.Input

	ToResolverArrayOutput() ResolverArrayOutput
	ToResolverArrayOutputWithContext(context.Context) ResolverArrayOutput
}

type ResolverArray []ResolverInput

func (ResolverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Resolver)(nil)).Elem()
}

func (i ResolverArray) ToResolverArrayOutput() ResolverArrayOutput {
	return i.ToResolverArrayOutputWithContext(context.Background())
}

func (i ResolverArray) ToResolverArrayOutputWithContext(ctx context.Context) ResolverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverArrayOutput)
}

// ResolverMapInput is an input type that accepts ResolverMap and ResolverMapOutput values.
// You can construct a concrete instance of `ResolverMapInput` via:
//
//	ResolverMap{ "key": ResolverArgs{...} }
type ResolverMapInput interface {
	pulumi.Input

	ToResolverMapOutput() ResolverMapOutput
	ToResolverMapOutputWithContext(context.Context) ResolverMapOutput
}

type ResolverMap map[string]ResolverInput

func (ResolverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Resolver)(nil)).Elem()
}

func (i ResolverMap) ToResolverMapOutput() ResolverMapOutput {
	return i.ToResolverMapOutputWithContext(context.Background())
}

func (i ResolverMap) ToResolverMapOutputWithContext(ctx context.Context) ResolverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverMapOutput)
}

type ResolverOutput struct{ *pulumi.OutputState }

func (ResolverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resolver)(nil)).Elem()
}

func (o ResolverOutput) ToResolverOutput() ResolverOutput {
	return o
}

func (o ResolverOutput) ToResolverOutputWithContext(ctx context.Context) ResolverOutput {
	return o
}

// Specifies the Azure Region where the Private DNS Resolver should exist. Changing this forces a new Private DNS Resolver to be created.
func (o ResolverOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name which should be used for this Private DNS Resolver. Changing this forces a new Private DNS Resolver to be created.
func (o ResolverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the Resource Group where the Private DNS Resolver should exist. Changing this forces a new Private DNS Resolver to be created.
func (o ResolverOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Private DNS Resolver.
func (o ResolverOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The ID of the Virtual Network that is linked to the Private DNS Resolver. Changing this forces a new Private DNS Resolver to be created.
func (o ResolverOutput) VirtualNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Resolver) pulumi.StringOutput { return v.VirtualNetworkId }).(pulumi.StringOutput)
}

type ResolverArrayOutput struct{ *pulumi.OutputState }

func (ResolverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Resolver)(nil)).Elem()
}

func (o ResolverArrayOutput) ToResolverArrayOutput() ResolverArrayOutput {
	return o
}

func (o ResolverArrayOutput) ToResolverArrayOutputWithContext(ctx context.Context) ResolverArrayOutput {
	return o
}

func (o ResolverArrayOutput) Index(i pulumi.IntInput) ResolverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Resolver {
		return vs[0].([]*Resolver)[vs[1].(int)]
	}).(ResolverOutput)
}

type ResolverMapOutput struct{ *pulumi.OutputState }

func (ResolverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Resolver)(nil)).Elem()
}

func (o ResolverMapOutput) ToResolverMapOutput() ResolverMapOutput {
	return o
}

func (o ResolverMapOutput) ToResolverMapOutputWithContext(ctx context.Context) ResolverMapOutput {
	return o
}

func (o ResolverMapOutput) MapIndex(k pulumi.StringInput) ResolverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Resolver {
		return vs[0].(map[string]*Resolver)[vs[1].(string)]
	}).(ResolverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverInput)(nil)).Elem(), &Resolver{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverArrayInput)(nil)).Elem(), ResolverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverMapInput)(nil)).Elem(), ResolverMap{})
	pulumi.RegisterOutputType(ResolverOutput{})
	pulumi.RegisterOutputType(ResolverArrayOutput{})
	pulumi.RegisterOutputType(ResolverMapOutput{})
}
