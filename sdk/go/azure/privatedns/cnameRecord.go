// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package privatedns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Enables you to manage DNS CNAME Records within Azure Private DNS.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/privatedns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleZone, err := privatedns.NewZone(ctx, "exampleZone", &privatedns.ZoneArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = privatedns.NewCnameRecord(ctx, "exampleCnameRecord", &privatedns.CnameRecordArgs{
//				ZoneName:          exampleZone.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Ttl:               pulumi.Int(300),
//				Record:            pulumi.String("contoso.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Private DNS CName Records can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:privatedns/cnameRecord:CnameRecord example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/privateDnsZones/zone1/CNAME/myrecord1
//
// ```
type CnameRecord struct {
	pulumi.CustomResourceState

	// The FQDN of the DNS CNAME Record.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The name of the DNS CNAME Record. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The target of the CNAME.
	Record pulumi.StringOutput `pulumi:"record"`
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewCnameRecord registers a new resource with the given unique name, arguments, and options.
func NewCnameRecord(ctx *pulumi.Context,
	name string, args *CnameRecordArgs, opts ...pulumi.ResourceOption) (*CnameRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Record == nil {
		return nil, errors.New("invalid value for required argument 'Record'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	if args.ZoneName == nil {
		return nil, errors.New("invalid value for required argument 'ZoneName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CnameRecord
	err := ctx.RegisterResource("azure:privatedns/cnameRecord:CnameRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCnameRecord gets an existing CnameRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCnameRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CnameRecordState, opts ...pulumi.ResourceOption) (*CnameRecord, error) {
	var resource CnameRecord
	err := ctx.ReadResource("azure:privatedns/cnameRecord:CnameRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CnameRecord resources.
type cnameRecordState struct {
	// The FQDN of the DNS CNAME Record.
	Fqdn *string `pulumi:"fqdn"`
	// The name of the DNS CNAME Record. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The target of the CNAME.
	Record *string `pulumi:"record"`
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl *int `pulumi:"ttl"`
	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName *string `pulumi:"zoneName"`
}

type CnameRecordState struct {
	// The FQDN of the DNS CNAME Record.
	Fqdn pulumi.StringPtrInput
	// The name of the DNS CNAME Record. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The target of the CNAME.
	Record pulumi.StringPtrInput
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntPtrInput
	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringPtrInput
}

func (CnameRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*cnameRecordState)(nil)).Elem()
}

type cnameRecordArgs struct {
	// The name of the DNS CNAME Record. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The target of the CNAME.
	Record string `pulumi:"record"`
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl int `pulumi:"ttl"`
	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName string `pulumi:"zoneName"`
}

// The set of arguments for constructing a CnameRecord resource.
type CnameRecordArgs struct {
	// The name of the DNS CNAME Record. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The target of the CNAME.
	Record pulumi.StringInput
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntInput
	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringInput
}

func (CnameRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cnameRecordArgs)(nil)).Elem()
}

type CnameRecordInput interface {
	pulumi.Input

	ToCnameRecordOutput() CnameRecordOutput
	ToCnameRecordOutputWithContext(ctx context.Context) CnameRecordOutput
}

func (*CnameRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**CnameRecord)(nil)).Elem()
}

func (i *CnameRecord) ToCnameRecordOutput() CnameRecordOutput {
	return i.ToCnameRecordOutputWithContext(context.Background())
}

func (i *CnameRecord) ToCnameRecordOutputWithContext(ctx context.Context) CnameRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordOutput)
}

// CnameRecordArrayInput is an input type that accepts CnameRecordArray and CnameRecordArrayOutput values.
// You can construct a concrete instance of `CnameRecordArrayInput` via:
//
//	CnameRecordArray{ CnameRecordArgs{...} }
type CnameRecordArrayInput interface {
	pulumi.Input

	ToCnameRecordArrayOutput() CnameRecordArrayOutput
	ToCnameRecordArrayOutputWithContext(context.Context) CnameRecordArrayOutput
}

type CnameRecordArray []CnameRecordInput

func (CnameRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CnameRecord)(nil)).Elem()
}

func (i CnameRecordArray) ToCnameRecordArrayOutput() CnameRecordArrayOutput {
	return i.ToCnameRecordArrayOutputWithContext(context.Background())
}

func (i CnameRecordArray) ToCnameRecordArrayOutputWithContext(ctx context.Context) CnameRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordArrayOutput)
}

// CnameRecordMapInput is an input type that accepts CnameRecordMap and CnameRecordMapOutput values.
// You can construct a concrete instance of `CnameRecordMapInput` via:
//
//	CnameRecordMap{ "key": CnameRecordArgs{...} }
type CnameRecordMapInput interface {
	pulumi.Input

	ToCnameRecordMapOutput() CnameRecordMapOutput
	ToCnameRecordMapOutputWithContext(context.Context) CnameRecordMapOutput
}

type CnameRecordMap map[string]CnameRecordInput

func (CnameRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CnameRecord)(nil)).Elem()
}

func (i CnameRecordMap) ToCnameRecordMapOutput() CnameRecordMapOutput {
	return i.ToCnameRecordMapOutputWithContext(context.Background())
}

func (i CnameRecordMap) ToCnameRecordMapOutputWithContext(ctx context.Context) CnameRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CnameRecordMapOutput)
}

type CnameRecordOutput struct{ *pulumi.OutputState }

func (CnameRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CnameRecord)(nil)).Elem()
}

func (o CnameRecordOutput) ToCnameRecordOutput() CnameRecordOutput {
	return o
}

func (o CnameRecordOutput) ToCnameRecordOutputWithContext(ctx context.Context) CnameRecordOutput {
	return o
}

// The FQDN of the DNS CNAME Record.
func (o CnameRecordOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *CnameRecord) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// The name of the DNS CNAME Record. Changing this forces a new resource to be created.
func (o CnameRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CnameRecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The target of the CNAME.
func (o CnameRecordOutput) Record() pulumi.StringOutput {
	return o.ApplyT(func(v *CnameRecord) pulumi.StringOutput { return v.Record }).(pulumi.StringOutput)
}

// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
func (o CnameRecordOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *CnameRecord) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o CnameRecordOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CnameRecord) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The Time To Live (TTL) of the DNS record in seconds.
func (o CnameRecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *CnameRecord) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
func (o CnameRecordOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *CnameRecord) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

type CnameRecordArrayOutput struct{ *pulumi.OutputState }

func (CnameRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CnameRecord)(nil)).Elem()
}

func (o CnameRecordArrayOutput) ToCnameRecordArrayOutput() CnameRecordArrayOutput {
	return o
}

func (o CnameRecordArrayOutput) ToCnameRecordArrayOutputWithContext(ctx context.Context) CnameRecordArrayOutput {
	return o
}

func (o CnameRecordArrayOutput) Index(i pulumi.IntInput) CnameRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CnameRecord {
		return vs[0].([]*CnameRecord)[vs[1].(int)]
	}).(CnameRecordOutput)
}

type CnameRecordMapOutput struct{ *pulumi.OutputState }

func (CnameRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CnameRecord)(nil)).Elem()
}

func (o CnameRecordMapOutput) ToCnameRecordMapOutput() CnameRecordMapOutput {
	return o
}

func (o CnameRecordMapOutput) ToCnameRecordMapOutputWithContext(ctx context.Context) CnameRecordMapOutput {
	return o
}

func (o CnameRecordMapOutput) MapIndex(k pulumi.StringInput) CnameRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CnameRecord {
		return vs[0].(map[string]*CnameRecord)[vs[1].(string)]
	}).(CnameRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CnameRecordInput)(nil)).Elem(), &CnameRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*CnameRecordArrayInput)(nil)).Elem(), CnameRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CnameRecordMapInput)(nil)).Elem(), CnameRecordMap{})
	pulumi.RegisterOutputType(CnameRecordOutput{})
	pulumi.RegisterOutputType(CnameRecordArrayOutput{})
	pulumi.RegisterOutputType(CnameRecordMapOutput{})
}
