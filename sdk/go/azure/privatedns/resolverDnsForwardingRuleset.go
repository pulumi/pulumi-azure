// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package privatedns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Private DNS Resolver Dns Forwarding Ruleset.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/privatedns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("west europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.0.64/28"),
//				},
//				Delegations: network.SubnetDelegationArray{
//					&network.SubnetDelegationArgs{
//						Name: pulumi.String("Microsoft.Network.dnsResolvers"),
//						ServiceDelegation: &network.SubnetDelegationServiceDelegationArgs{
//							Actions: pulumi.StringArray{
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/join/action"),
//							},
//							Name: pulumi.String("Microsoft.Network/dnsResolvers"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleResolver, err := privatedns.NewResolver(ctx, "exampleResolver", &privatedns.ResolverArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				VirtualNetworkId:  exampleVirtualNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleResolverOutboundEndpoint, err := privatedns.NewResolverOutboundEndpoint(ctx, "exampleResolverOutboundEndpoint", &privatedns.ResolverOutboundEndpointArgs{
//				PrivateDnsResolverId: exampleResolver.ID(),
//				Location:             exampleResolver.Location,
//				SubnetId:             exampleSubnet.ID(),
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = privatedns.NewResolverDnsForwardingRuleset(ctx, "exampleResolverDnsForwardingRuleset", &privatedns.ResolverDnsForwardingRulesetArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				PrivateDnsResolverOutboundEndpointIds: pulumi.StringArray{
//					exampleResolverOutboundEndpoint.ID(),
//				},
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Private DNS Resolver Dns Forwarding Ruleset can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:privatedns/resolverDnsForwardingRuleset:ResolverDnsForwardingRuleset example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Network/dnsForwardingRulesets/dnsForwardingRuleset1
//
// ```
type ResolverDnsForwardingRuleset struct {
	pulumi.CustomResourceState

	// Specifies the Azure Region where the Private DNS Resolver Dns Forwarding Ruleset should exist. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name which should be used for this Private DNS Resolver Dns Forwarding Ruleset. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of IDs of the Private DNS Resolver Outbound Endpoint that is linked to the Private DNS Resolver Dns Forwarding Ruleset.
	PrivateDnsResolverOutboundEndpointIds pulumi.StringArrayOutput `pulumi:"privateDnsResolverOutboundEndpointIds"`
	// Specifies the name of the Resource Group where the Private DNS Resolver Dns Forwarding Ruleset should exist. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the Private DNS Resolver Dns Forwarding Ruleset.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewResolverDnsForwardingRuleset registers a new resource with the given unique name, arguments, and options.
func NewResolverDnsForwardingRuleset(ctx *pulumi.Context,
	name string, args *ResolverDnsForwardingRulesetArgs, opts ...pulumi.ResourceOption) (*ResolverDnsForwardingRuleset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivateDnsResolverOutboundEndpointIds == nil {
		return nil, errors.New("invalid value for required argument 'PrivateDnsResolverOutboundEndpointIds'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResolverDnsForwardingRuleset
	err := ctx.RegisterResource("azure:privatedns/resolverDnsForwardingRuleset:ResolverDnsForwardingRuleset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverDnsForwardingRuleset gets an existing ResolverDnsForwardingRuleset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverDnsForwardingRuleset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverDnsForwardingRulesetState, opts ...pulumi.ResourceOption) (*ResolverDnsForwardingRuleset, error) {
	var resource ResolverDnsForwardingRuleset
	err := ctx.ReadResource("azure:privatedns/resolverDnsForwardingRuleset:ResolverDnsForwardingRuleset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverDnsForwardingRuleset resources.
type resolverDnsForwardingRulesetState struct {
	// Specifies the Azure Region where the Private DNS Resolver Dns Forwarding Ruleset should exist. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Private DNS Resolver Dns Forwarding Ruleset. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	Name *string `pulumi:"name"`
	// The list of IDs of the Private DNS Resolver Outbound Endpoint that is linked to the Private DNS Resolver Dns Forwarding Ruleset.
	PrivateDnsResolverOutboundEndpointIds []string `pulumi:"privateDnsResolverOutboundEndpointIds"`
	// Specifies the name of the Resource Group where the Private DNS Resolver Dns Forwarding Ruleset should exist. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the Private DNS Resolver Dns Forwarding Ruleset.
	Tags map[string]string `pulumi:"tags"`
}

type ResolverDnsForwardingRulesetState struct {
	// Specifies the Azure Region where the Private DNS Resolver Dns Forwarding Ruleset should exist. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Private DNS Resolver Dns Forwarding Ruleset. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	Name pulumi.StringPtrInput
	// The list of IDs of the Private DNS Resolver Outbound Endpoint that is linked to the Private DNS Resolver Dns Forwarding Ruleset.
	PrivateDnsResolverOutboundEndpointIds pulumi.StringArrayInput
	// Specifies the name of the Resource Group where the Private DNS Resolver Dns Forwarding Ruleset should exist. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the Private DNS Resolver Dns Forwarding Ruleset.
	Tags pulumi.StringMapInput
}

func (ResolverDnsForwardingRulesetState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverDnsForwardingRulesetState)(nil)).Elem()
}

type resolverDnsForwardingRulesetArgs struct {
	// Specifies the Azure Region where the Private DNS Resolver Dns Forwarding Ruleset should exist. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Private DNS Resolver Dns Forwarding Ruleset. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	Name *string `pulumi:"name"`
	// The list of IDs of the Private DNS Resolver Outbound Endpoint that is linked to the Private DNS Resolver Dns Forwarding Ruleset.
	PrivateDnsResolverOutboundEndpointIds []string `pulumi:"privateDnsResolverOutboundEndpointIds"`
	// Specifies the name of the Resource Group where the Private DNS Resolver Dns Forwarding Ruleset should exist. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the Private DNS Resolver Dns Forwarding Ruleset.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ResolverDnsForwardingRuleset resource.
type ResolverDnsForwardingRulesetArgs struct {
	// Specifies the Azure Region where the Private DNS Resolver Dns Forwarding Ruleset should exist. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Private DNS Resolver Dns Forwarding Ruleset. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	Name pulumi.StringPtrInput
	// The list of IDs of the Private DNS Resolver Outbound Endpoint that is linked to the Private DNS Resolver Dns Forwarding Ruleset.
	PrivateDnsResolverOutboundEndpointIds pulumi.StringArrayInput
	// Specifies the name of the Resource Group where the Private DNS Resolver Dns Forwarding Ruleset should exist. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the Private DNS Resolver Dns Forwarding Ruleset.
	Tags pulumi.StringMapInput
}

func (ResolverDnsForwardingRulesetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverDnsForwardingRulesetArgs)(nil)).Elem()
}

type ResolverDnsForwardingRulesetInput interface {
	pulumi.Input

	ToResolverDnsForwardingRulesetOutput() ResolverDnsForwardingRulesetOutput
	ToResolverDnsForwardingRulesetOutputWithContext(ctx context.Context) ResolverDnsForwardingRulesetOutput
}

func (*ResolverDnsForwardingRuleset) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverDnsForwardingRuleset)(nil)).Elem()
}

func (i *ResolverDnsForwardingRuleset) ToResolverDnsForwardingRulesetOutput() ResolverDnsForwardingRulesetOutput {
	return i.ToResolverDnsForwardingRulesetOutputWithContext(context.Background())
}

func (i *ResolverDnsForwardingRuleset) ToResolverDnsForwardingRulesetOutputWithContext(ctx context.Context) ResolverDnsForwardingRulesetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverDnsForwardingRulesetOutput)
}

// ResolverDnsForwardingRulesetArrayInput is an input type that accepts ResolverDnsForwardingRulesetArray and ResolverDnsForwardingRulesetArrayOutput values.
// You can construct a concrete instance of `ResolverDnsForwardingRulesetArrayInput` via:
//
//	ResolverDnsForwardingRulesetArray{ ResolverDnsForwardingRulesetArgs{...} }
type ResolverDnsForwardingRulesetArrayInput interface {
	pulumi.Input

	ToResolverDnsForwardingRulesetArrayOutput() ResolverDnsForwardingRulesetArrayOutput
	ToResolverDnsForwardingRulesetArrayOutputWithContext(context.Context) ResolverDnsForwardingRulesetArrayOutput
}

type ResolverDnsForwardingRulesetArray []ResolverDnsForwardingRulesetInput

func (ResolverDnsForwardingRulesetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverDnsForwardingRuleset)(nil)).Elem()
}

func (i ResolverDnsForwardingRulesetArray) ToResolverDnsForwardingRulesetArrayOutput() ResolverDnsForwardingRulesetArrayOutput {
	return i.ToResolverDnsForwardingRulesetArrayOutputWithContext(context.Background())
}

func (i ResolverDnsForwardingRulesetArray) ToResolverDnsForwardingRulesetArrayOutputWithContext(ctx context.Context) ResolverDnsForwardingRulesetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverDnsForwardingRulesetArrayOutput)
}

// ResolverDnsForwardingRulesetMapInput is an input type that accepts ResolverDnsForwardingRulesetMap and ResolverDnsForwardingRulesetMapOutput values.
// You can construct a concrete instance of `ResolverDnsForwardingRulesetMapInput` via:
//
//	ResolverDnsForwardingRulesetMap{ "key": ResolverDnsForwardingRulesetArgs{...} }
type ResolverDnsForwardingRulesetMapInput interface {
	pulumi.Input

	ToResolverDnsForwardingRulesetMapOutput() ResolverDnsForwardingRulesetMapOutput
	ToResolverDnsForwardingRulesetMapOutputWithContext(context.Context) ResolverDnsForwardingRulesetMapOutput
}

type ResolverDnsForwardingRulesetMap map[string]ResolverDnsForwardingRulesetInput

func (ResolverDnsForwardingRulesetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverDnsForwardingRuleset)(nil)).Elem()
}

func (i ResolverDnsForwardingRulesetMap) ToResolverDnsForwardingRulesetMapOutput() ResolverDnsForwardingRulesetMapOutput {
	return i.ToResolverDnsForwardingRulesetMapOutputWithContext(context.Background())
}

func (i ResolverDnsForwardingRulesetMap) ToResolverDnsForwardingRulesetMapOutputWithContext(ctx context.Context) ResolverDnsForwardingRulesetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverDnsForwardingRulesetMapOutput)
}

type ResolverDnsForwardingRulesetOutput struct{ *pulumi.OutputState }

func (ResolverDnsForwardingRulesetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverDnsForwardingRuleset)(nil)).Elem()
}

func (o ResolverDnsForwardingRulesetOutput) ToResolverDnsForwardingRulesetOutput() ResolverDnsForwardingRulesetOutput {
	return o
}

func (o ResolverDnsForwardingRulesetOutput) ToResolverDnsForwardingRulesetOutputWithContext(ctx context.Context) ResolverDnsForwardingRulesetOutput {
	return o
}

// Specifies the Azure Region where the Private DNS Resolver Dns Forwarding Ruleset should exist. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
func (o ResolverDnsForwardingRulesetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverDnsForwardingRuleset) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name which should be used for this Private DNS Resolver Dns Forwarding Ruleset. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
func (o ResolverDnsForwardingRulesetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverDnsForwardingRuleset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The list of IDs of the Private DNS Resolver Outbound Endpoint that is linked to the Private DNS Resolver Dns Forwarding Ruleset.
func (o ResolverDnsForwardingRulesetOutput) PrivateDnsResolverOutboundEndpointIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResolverDnsForwardingRuleset) pulumi.StringArrayOutput {
		return v.PrivateDnsResolverOutboundEndpointIds
	}).(pulumi.StringArrayOutput)
}

// Specifies the name of the Resource Group where the Private DNS Resolver Dns Forwarding Ruleset should exist. Changing this forces a new Private DNS Resolver Dns Forwarding Ruleset to be created.
func (o ResolverDnsForwardingRulesetOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverDnsForwardingRuleset) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the Private DNS Resolver Dns Forwarding Ruleset.
func (o ResolverDnsForwardingRulesetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResolverDnsForwardingRuleset) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type ResolverDnsForwardingRulesetArrayOutput struct{ *pulumi.OutputState }

func (ResolverDnsForwardingRulesetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverDnsForwardingRuleset)(nil)).Elem()
}

func (o ResolverDnsForwardingRulesetArrayOutput) ToResolverDnsForwardingRulesetArrayOutput() ResolverDnsForwardingRulesetArrayOutput {
	return o
}

func (o ResolverDnsForwardingRulesetArrayOutput) ToResolverDnsForwardingRulesetArrayOutputWithContext(ctx context.Context) ResolverDnsForwardingRulesetArrayOutput {
	return o
}

func (o ResolverDnsForwardingRulesetArrayOutput) Index(i pulumi.IntInput) ResolverDnsForwardingRulesetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResolverDnsForwardingRuleset {
		return vs[0].([]*ResolverDnsForwardingRuleset)[vs[1].(int)]
	}).(ResolverDnsForwardingRulesetOutput)
}

type ResolverDnsForwardingRulesetMapOutput struct{ *pulumi.OutputState }

func (ResolverDnsForwardingRulesetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverDnsForwardingRuleset)(nil)).Elem()
}

func (o ResolverDnsForwardingRulesetMapOutput) ToResolverDnsForwardingRulesetMapOutput() ResolverDnsForwardingRulesetMapOutput {
	return o
}

func (o ResolverDnsForwardingRulesetMapOutput) ToResolverDnsForwardingRulesetMapOutputWithContext(ctx context.Context) ResolverDnsForwardingRulesetMapOutput {
	return o
}

func (o ResolverDnsForwardingRulesetMapOutput) MapIndex(k pulumi.StringInput) ResolverDnsForwardingRulesetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResolverDnsForwardingRuleset {
		return vs[0].(map[string]*ResolverDnsForwardingRuleset)[vs[1].(string)]
	}).(ResolverDnsForwardingRulesetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverDnsForwardingRulesetInput)(nil)).Elem(), &ResolverDnsForwardingRuleset{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverDnsForwardingRulesetArrayInput)(nil)).Elem(), ResolverDnsForwardingRulesetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverDnsForwardingRulesetMapInput)(nil)).Elem(), ResolverDnsForwardingRulesetMap{})
	pulumi.RegisterOutputType(ResolverDnsForwardingRulesetOutput{})
	pulumi.RegisterOutputType(ResolverDnsForwardingRulesetArrayOutput{})
	pulumi.RegisterOutputType(ResolverDnsForwardingRulesetMapOutput{})
}
