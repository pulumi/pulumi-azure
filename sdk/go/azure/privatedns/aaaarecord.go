// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package privatedns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Enables you to manage DNS AAAA Records within Azure Private DNS.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/privatedns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			testZone, err := privatedns.NewZone(ctx, "testZone", &privatedns.ZoneArgs{
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = privatedns.NewAAAARecord(ctx, "testAAAARecord", &privatedns.AAAARecordArgs{
//				ZoneName:          testZone.Name,
//				ResourceGroupName: example.Name,
//				Ttl:               pulumi.Int(300),
//				Records: pulumi.StringArray{
//					pulumi.String("fd5d:70bc:930e:d008:0000:0000:0000:7334"),
//					pulumi.String("fd5d:70bc:930e:d008::7335"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Private DNS AAAA Records can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:privatedns/aAAARecord:AAAARecord test /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/privateDnsZones/zone1/AAAA/myrecord1
//
// ```
type AAAARecord struct {
	pulumi.CustomResourceState

	// The FQDN of the DNS AAAA Record.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The name of the DNS A Record. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of IPv6 Addresses.
	Records pulumi.StringArrayOutput `pulumi:"records"`
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewAAAARecord registers a new resource with the given unique name, arguments, and options.
func NewAAAARecord(ctx *pulumi.Context,
	name string, args *AAAARecordArgs, opts ...pulumi.ResourceOption) (*AAAARecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Records == nil {
		return nil, errors.New("invalid value for required argument 'Records'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	if args.ZoneName == nil {
		return nil, errors.New("invalid value for required argument 'ZoneName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AAAARecord
	err := ctx.RegisterResource("azure:privatedns/aAAARecord:AAAARecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAAAARecord gets an existing AAAARecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAAAARecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AAAARecordState, opts ...pulumi.ResourceOption) (*AAAARecord, error) {
	var resource AAAARecord
	err := ctx.ReadResource("azure:privatedns/aAAARecord:AAAARecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AAAARecord resources.
type aaaarecordState struct {
	// The FQDN of the DNS AAAA Record.
	Fqdn *string `pulumi:"fqdn"`
	// The name of the DNS A Record. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A list of IPv6 Addresses.
	Records []string `pulumi:"records"`
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl *int `pulumi:"ttl"`
	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName *string `pulumi:"zoneName"`
}

type AAAARecordState struct {
	// The FQDN of the DNS AAAA Record.
	Fqdn pulumi.StringPtrInput
	// The name of the DNS A Record. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A list of IPv6 Addresses.
	Records pulumi.StringArrayInput
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntPtrInput
	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringPtrInput
}

func (AAAARecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*aaaarecordState)(nil)).Elem()
}

type aaaarecordArgs struct {
	// The name of the DNS A Record. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A list of IPv6 Addresses.
	Records []string `pulumi:"records"`
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl int `pulumi:"ttl"`
	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName string `pulumi:"zoneName"`
}

// The set of arguments for constructing a AAAARecord resource.
type AAAARecordArgs struct {
	// The name of the DNS A Record. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A list of IPv6 Addresses.
	Records pulumi.StringArrayInput
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntInput
	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringInput
}

func (AAAARecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aaaarecordArgs)(nil)).Elem()
}

type AAAARecordInput interface {
	pulumi.Input

	ToAAAARecordOutput() AAAARecordOutput
	ToAAAARecordOutputWithContext(ctx context.Context) AAAARecordOutput
}

func (*AAAARecord) ElementType() reflect.Type {
	return reflect.TypeOf((**AAAARecord)(nil)).Elem()
}

func (i *AAAARecord) ToAAAARecordOutput() AAAARecordOutput {
	return i.ToAAAARecordOutputWithContext(context.Background())
}

func (i *AAAARecord) ToAAAARecordOutputWithContext(ctx context.Context) AAAARecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AAAARecordOutput)
}

// AAAARecordArrayInput is an input type that accepts AAAARecordArray and AAAARecordArrayOutput values.
// You can construct a concrete instance of `AAAARecordArrayInput` via:
//
//	AAAARecordArray{ AAAARecordArgs{...} }
type AAAARecordArrayInput interface {
	pulumi.Input

	ToAAAARecordArrayOutput() AAAARecordArrayOutput
	ToAAAARecordArrayOutputWithContext(context.Context) AAAARecordArrayOutput
}

type AAAARecordArray []AAAARecordInput

func (AAAARecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AAAARecord)(nil)).Elem()
}

func (i AAAARecordArray) ToAAAARecordArrayOutput() AAAARecordArrayOutput {
	return i.ToAAAARecordArrayOutputWithContext(context.Background())
}

func (i AAAARecordArray) ToAAAARecordArrayOutputWithContext(ctx context.Context) AAAARecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AAAARecordArrayOutput)
}

// AAAARecordMapInput is an input type that accepts AAAARecordMap and AAAARecordMapOutput values.
// You can construct a concrete instance of `AAAARecordMapInput` via:
//
//	AAAARecordMap{ "key": AAAARecordArgs{...} }
type AAAARecordMapInput interface {
	pulumi.Input

	ToAAAARecordMapOutput() AAAARecordMapOutput
	ToAAAARecordMapOutputWithContext(context.Context) AAAARecordMapOutput
}

type AAAARecordMap map[string]AAAARecordInput

func (AAAARecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AAAARecord)(nil)).Elem()
}

func (i AAAARecordMap) ToAAAARecordMapOutput() AAAARecordMapOutput {
	return i.ToAAAARecordMapOutputWithContext(context.Background())
}

func (i AAAARecordMap) ToAAAARecordMapOutputWithContext(ctx context.Context) AAAARecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AAAARecordMapOutput)
}

type AAAARecordOutput struct{ *pulumi.OutputState }

func (AAAARecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AAAARecord)(nil)).Elem()
}

func (o AAAARecordOutput) ToAAAARecordOutput() AAAARecordOutput {
	return o
}

func (o AAAARecordOutput) ToAAAARecordOutputWithContext(ctx context.Context) AAAARecordOutput {
	return o
}

// The FQDN of the DNS AAAA Record.
func (o AAAARecordOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *AAAARecord) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// The name of the DNS A Record. Changing this forces a new resource to be created.
func (o AAAARecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AAAARecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of IPv6 Addresses.
func (o AAAARecordOutput) Records() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AAAARecord) pulumi.StringArrayOutput { return v.Records }).(pulumi.StringArrayOutput)
}

// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
func (o AAAARecordOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *AAAARecord) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o AAAARecordOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AAAARecord) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The Time To Live (TTL) of the DNS record in seconds.
func (o AAAARecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *AAAARecord) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
func (o AAAARecordOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *AAAARecord) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

type AAAARecordArrayOutput struct{ *pulumi.OutputState }

func (AAAARecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AAAARecord)(nil)).Elem()
}

func (o AAAARecordArrayOutput) ToAAAARecordArrayOutput() AAAARecordArrayOutput {
	return o
}

func (o AAAARecordArrayOutput) ToAAAARecordArrayOutputWithContext(ctx context.Context) AAAARecordArrayOutput {
	return o
}

func (o AAAARecordArrayOutput) Index(i pulumi.IntInput) AAAARecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AAAARecord {
		return vs[0].([]*AAAARecord)[vs[1].(int)]
	}).(AAAARecordOutput)
}

type AAAARecordMapOutput struct{ *pulumi.OutputState }

func (AAAARecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AAAARecord)(nil)).Elem()
}

func (o AAAARecordMapOutput) ToAAAARecordMapOutput() AAAARecordMapOutput {
	return o
}

func (o AAAARecordMapOutput) ToAAAARecordMapOutputWithContext(ctx context.Context) AAAARecordMapOutput {
	return o
}

func (o AAAARecordMapOutput) MapIndex(k pulumi.StringInput) AAAARecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AAAARecord {
		return vs[0].(map[string]*AAAARecord)[vs[1].(string)]
	}).(AAAARecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AAAARecordInput)(nil)).Elem(), &AAAARecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*AAAARecordArrayInput)(nil)).Elem(), AAAARecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AAAARecordMapInput)(nil)).Elem(), AAAARecordMap{})
	pulumi.RegisterOutputType(AAAARecordOutput{})
	pulumi.RegisterOutputType(AAAARecordArrayOutput{})
	pulumi.RegisterOutputType(AAAARecordMapOutput{})
}
