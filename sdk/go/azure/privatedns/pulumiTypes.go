// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package privatedns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type LinkServiceNatIpConfiguration struct {
	// Specifies the name which should be used for the NAT IP Configuration. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
	// Is this is the Primary IP Configuration? Changing this forces a new resource to be created.
	Primary bool `pulumi:"primary"`
	// Specifies a Private Static IP Address for this IP Configuration.
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// The version of the IP Protocol which should be used. At this time the only supported value is `IPv4`. Defaults to `IPv4`.
	PrivateIpAddressVersion *string `pulumi:"privateIpAddressVersion"`
	// Specifies the ID of the Subnet which should be used for the Private Link Service.
	//
	// > **NOTE:** Verify that the Subnet's `enforcePrivateLinkServiceNetworkPolicies` attribute is set to `true`.
	SubnetId string `pulumi:"subnetId"`
}

// LinkServiceNatIpConfigurationInput is an input type that accepts LinkServiceNatIpConfigurationArgs and LinkServiceNatIpConfigurationOutput values.
// You can construct a concrete instance of `LinkServiceNatIpConfigurationInput` via:
//
//	LinkServiceNatIpConfigurationArgs{...}
type LinkServiceNatIpConfigurationInput interface {
	pulumi.Input

	ToLinkServiceNatIpConfigurationOutput() LinkServiceNatIpConfigurationOutput
	ToLinkServiceNatIpConfigurationOutputWithContext(context.Context) LinkServiceNatIpConfigurationOutput
}

type LinkServiceNatIpConfigurationArgs struct {
	// Specifies the name which should be used for the NAT IP Configuration. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Is this is the Primary IP Configuration? Changing this forces a new resource to be created.
	Primary pulumi.BoolInput `pulumi:"primary"`
	// Specifies a Private Static IP Address for this IP Configuration.
	PrivateIpAddress pulumi.StringPtrInput `pulumi:"privateIpAddress"`
	// The version of the IP Protocol which should be used. At this time the only supported value is `IPv4`. Defaults to `IPv4`.
	PrivateIpAddressVersion pulumi.StringPtrInput `pulumi:"privateIpAddressVersion"`
	// Specifies the ID of the Subnet which should be used for the Private Link Service.
	//
	// > **NOTE:** Verify that the Subnet's `enforcePrivateLinkServiceNetworkPolicies` attribute is set to `true`.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (LinkServiceNatIpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkServiceNatIpConfiguration)(nil)).Elem()
}

func (i LinkServiceNatIpConfigurationArgs) ToLinkServiceNatIpConfigurationOutput() LinkServiceNatIpConfigurationOutput {
	return i.ToLinkServiceNatIpConfigurationOutputWithContext(context.Background())
}

func (i LinkServiceNatIpConfigurationArgs) ToLinkServiceNatIpConfigurationOutputWithContext(ctx context.Context) LinkServiceNatIpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkServiceNatIpConfigurationOutput)
}

// LinkServiceNatIpConfigurationArrayInput is an input type that accepts LinkServiceNatIpConfigurationArray and LinkServiceNatIpConfigurationArrayOutput values.
// You can construct a concrete instance of `LinkServiceNatIpConfigurationArrayInput` via:
//
//	LinkServiceNatIpConfigurationArray{ LinkServiceNatIpConfigurationArgs{...} }
type LinkServiceNatIpConfigurationArrayInput interface {
	pulumi.Input

	ToLinkServiceNatIpConfigurationArrayOutput() LinkServiceNatIpConfigurationArrayOutput
	ToLinkServiceNatIpConfigurationArrayOutputWithContext(context.Context) LinkServiceNatIpConfigurationArrayOutput
}

type LinkServiceNatIpConfigurationArray []LinkServiceNatIpConfigurationInput

func (LinkServiceNatIpConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkServiceNatIpConfiguration)(nil)).Elem()
}

func (i LinkServiceNatIpConfigurationArray) ToLinkServiceNatIpConfigurationArrayOutput() LinkServiceNatIpConfigurationArrayOutput {
	return i.ToLinkServiceNatIpConfigurationArrayOutputWithContext(context.Background())
}

func (i LinkServiceNatIpConfigurationArray) ToLinkServiceNatIpConfigurationArrayOutputWithContext(ctx context.Context) LinkServiceNatIpConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkServiceNatIpConfigurationArrayOutput)
}

type LinkServiceNatIpConfigurationOutput struct{ *pulumi.OutputState }

func (LinkServiceNatIpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkServiceNatIpConfiguration)(nil)).Elem()
}

func (o LinkServiceNatIpConfigurationOutput) ToLinkServiceNatIpConfigurationOutput() LinkServiceNatIpConfigurationOutput {
	return o
}

func (o LinkServiceNatIpConfigurationOutput) ToLinkServiceNatIpConfigurationOutputWithContext(ctx context.Context) LinkServiceNatIpConfigurationOutput {
	return o
}

// Specifies the name which should be used for the NAT IP Configuration. Changing this forces a new resource to be created.
func (o LinkServiceNatIpConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LinkServiceNatIpConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

// Is this is the Primary IP Configuration? Changing this forces a new resource to be created.
func (o LinkServiceNatIpConfigurationOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v LinkServiceNatIpConfiguration) bool { return v.Primary }).(pulumi.BoolOutput)
}

// Specifies a Private Static IP Address for this IP Configuration.
func (o LinkServiceNatIpConfigurationOutput) PrivateIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkServiceNatIpConfiguration) *string { return v.PrivateIpAddress }).(pulumi.StringPtrOutput)
}

// The version of the IP Protocol which should be used. At this time the only supported value is `IPv4`. Defaults to `IPv4`.
func (o LinkServiceNatIpConfigurationOutput) PrivateIpAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkServiceNatIpConfiguration) *string { return v.PrivateIpAddressVersion }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the Subnet which should be used for the Private Link Service.
//
// > **NOTE:** Verify that the Subnet's `enforcePrivateLinkServiceNetworkPolicies` attribute is set to `true`.
func (o LinkServiceNatIpConfigurationOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LinkServiceNatIpConfiguration) string { return v.SubnetId }).(pulumi.StringOutput)
}

type LinkServiceNatIpConfigurationArrayOutput struct{ *pulumi.OutputState }

func (LinkServiceNatIpConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkServiceNatIpConfiguration)(nil)).Elem()
}

func (o LinkServiceNatIpConfigurationArrayOutput) ToLinkServiceNatIpConfigurationArrayOutput() LinkServiceNatIpConfigurationArrayOutput {
	return o
}

func (o LinkServiceNatIpConfigurationArrayOutput) ToLinkServiceNatIpConfigurationArrayOutputWithContext(ctx context.Context) LinkServiceNatIpConfigurationArrayOutput {
	return o
}

func (o LinkServiceNatIpConfigurationArrayOutput) Index(i pulumi.IntInput) LinkServiceNatIpConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkServiceNatIpConfiguration {
		return vs[0].([]LinkServiceNatIpConfiguration)[vs[1].(int)]
	}).(LinkServiceNatIpConfigurationOutput)
}

type MxRecordRecord struct {
	// The FQDN of the exchange to MX record points to.
	Exchange string `pulumi:"exchange"`
	// The preference of the MX record.
	Preference int `pulumi:"preference"`
}

// MxRecordRecordInput is an input type that accepts MxRecordRecordArgs and MxRecordRecordOutput values.
// You can construct a concrete instance of `MxRecordRecordInput` via:
//
//	MxRecordRecordArgs{...}
type MxRecordRecordInput interface {
	pulumi.Input

	ToMxRecordRecordOutput() MxRecordRecordOutput
	ToMxRecordRecordOutputWithContext(context.Context) MxRecordRecordOutput
}

type MxRecordRecordArgs struct {
	// The FQDN of the exchange to MX record points to.
	Exchange pulumi.StringInput `pulumi:"exchange"`
	// The preference of the MX record.
	Preference pulumi.IntInput `pulumi:"preference"`
}

func (MxRecordRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecordRecord)(nil)).Elem()
}

func (i MxRecordRecordArgs) ToMxRecordRecordOutput() MxRecordRecordOutput {
	return i.ToMxRecordRecordOutputWithContext(context.Background())
}

func (i MxRecordRecordArgs) ToMxRecordRecordOutputWithContext(ctx context.Context) MxRecordRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordRecordOutput)
}

// MxRecordRecordArrayInput is an input type that accepts MxRecordRecordArray and MxRecordRecordArrayOutput values.
// You can construct a concrete instance of `MxRecordRecordArrayInput` via:
//
//	MxRecordRecordArray{ MxRecordRecordArgs{...} }
type MxRecordRecordArrayInput interface {
	pulumi.Input

	ToMxRecordRecordArrayOutput() MxRecordRecordArrayOutput
	ToMxRecordRecordArrayOutputWithContext(context.Context) MxRecordRecordArrayOutput
}

type MxRecordRecordArray []MxRecordRecordInput

func (MxRecordRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecordRecord)(nil)).Elem()
}

func (i MxRecordRecordArray) ToMxRecordRecordArrayOutput() MxRecordRecordArrayOutput {
	return i.ToMxRecordRecordArrayOutputWithContext(context.Background())
}

func (i MxRecordRecordArray) ToMxRecordRecordArrayOutputWithContext(ctx context.Context) MxRecordRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordRecordArrayOutput)
}

type MxRecordRecordOutput struct{ *pulumi.OutputState }

func (MxRecordRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecordRecord)(nil)).Elem()
}

func (o MxRecordRecordOutput) ToMxRecordRecordOutput() MxRecordRecordOutput {
	return o
}

func (o MxRecordRecordOutput) ToMxRecordRecordOutputWithContext(ctx context.Context) MxRecordRecordOutput {
	return o
}

// The FQDN of the exchange to MX record points to.
func (o MxRecordRecordOutput) Exchange() pulumi.StringOutput {
	return o.ApplyT(func(v MxRecordRecord) string { return v.Exchange }).(pulumi.StringOutput)
}

// The preference of the MX record.
func (o MxRecordRecordOutput) Preference() pulumi.IntOutput {
	return o.ApplyT(func(v MxRecordRecord) int { return v.Preference }).(pulumi.IntOutput)
}

type MxRecordRecordArrayOutput struct{ *pulumi.OutputState }

func (MxRecordRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecordRecord)(nil)).Elem()
}

func (o MxRecordRecordArrayOutput) ToMxRecordRecordArrayOutput() MxRecordRecordArrayOutput {
	return o
}

func (o MxRecordRecordArrayOutput) ToMxRecordRecordArrayOutputWithContext(ctx context.Context) MxRecordRecordArrayOutput {
	return o
}

func (o MxRecordRecordArrayOutput) Index(i pulumi.IntInput) MxRecordRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MxRecordRecord {
		return vs[0].([]MxRecordRecord)[vs[1].(int)]
	}).(MxRecordRecordOutput)
}

type ResolverForwardingRuleTargetDnsServer struct {
	// DNS server IP address.
	IpAddress string `pulumi:"ipAddress"`
	// DNS server port.
	Port *int `pulumi:"port"`
}

// ResolverForwardingRuleTargetDnsServerInput is an input type that accepts ResolverForwardingRuleTargetDnsServerArgs and ResolverForwardingRuleTargetDnsServerOutput values.
// You can construct a concrete instance of `ResolverForwardingRuleTargetDnsServerInput` via:
//
//	ResolverForwardingRuleTargetDnsServerArgs{...}
type ResolverForwardingRuleTargetDnsServerInput interface {
	pulumi.Input

	ToResolverForwardingRuleTargetDnsServerOutput() ResolverForwardingRuleTargetDnsServerOutput
	ToResolverForwardingRuleTargetDnsServerOutputWithContext(context.Context) ResolverForwardingRuleTargetDnsServerOutput
}

type ResolverForwardingRuleTargetDnsServerArgs struct {
	// DNS server IP address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// DNS server port.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ResolverForwardingRuleTargetDnsServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverForwardingRuleTargetDnsServer)(nil)).Elem()
}

func (i ResolverForwardingRuleTargetDnsServerArgs) ToResolverForwardingRuleTargetDnsServerOutput() ResolverForwardingRuleTargetDnsServerOutput {
	return i.ToResolverForwardingRuleTargetDnsServerOutputWithContext(context.Background())
}

func (i ResolverForwardingRuleTargetDnsServerArgs) ToResolverForwardingRuleTargetDnsServerOutputWithContext(ctx context.Context) ResolverForwardingRuleTargetDnsServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverForwardingRuleTargetDnsServerOutput)
}

// ResolverForwardingRuleTargetDnsServerArrayInput is an input type that accepts ResolverForwardingRuleTargetDnsServerArray and ResolverForwardingRuleTargetDnsServerArrayOutput values.
// You can construct a concrete instance of `ResolverForwardingRuleTargetDnsServerArrayInput` via:
//
//	ResolverForwardingRuleTargetDnsServerArray{ ResolverForwardingRuleTargetDnsServerArgs{...} }
type ResolverForwardingRuleTargetDnsServerArrayInput interface {
	pulumi.Input

	ToResolverForwardingRuleTargetDnsServerArrayOutput() ResolverForwardingRuleTargetDnsServerArrayOutput
	ToResolverForwardingRuleTargetDnsServerArrayOutputWithContext(context.Context) ResolverForwardingRuleTargetDnsServerArrayOutput
}

type ResolverForwardingRuleTargetDnsServerArray []ResolverForwardingRuleTargetDnsServerInput

func (ResolverForwardingRuleTargetDnsServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverForwardingRuleTargetDnsServer)(nil)).Elem()
}

func (i ResolverForwardingRuleTargetDnsServerArray) ToResolverForwardingRuleTargetDnsServerArrayOutput() ResolverForwardingRuleTargetDnsServerArrayOutput {
	return i.ToResolverForwardingRuleTargetDnsServerArrayOutputWithContext(context.Background())
}

func (i ResolverForwardingRuleTargetDnsServerArray) ToResolverForwardingRuleTargetDnsServerArrayOutputWithContext(ctx context.Context) ResolverForwardingRuleTargetDnsServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverForwardingRuleTargetDnsServerArrayOutput)
}

type ResolverForwardingRuleTargetDnsServerOutput struct{ *pulumi.OutputState }

func (ResolverForwardingRuleTargetDnsServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverForwardingRuleTargetDnsServer)(nil)).Elem()
}

func (o ResolverForwardingRuleTargetDnsServerOutput) ToResolverForwardingRuleTargetDnsServerOutput() ResolverForwardingRuleTargetDnsServerOutput {
	return o
}

func (o ResolverForwardingRuleTargetDnsServerOutput) ToResolverForwardingRuleTargetDnsServerOutputWithContext(ctx context.Context) ResolverForwardingRuleTargetDnsServerOutput {
	return o
}

// DNS server IP address.
func (o ResolverForwardingRuleTargetDnsServerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverForwardingRuleTargetDnsServer) string { return v.IpAddress }).(pulumi.StringOutput)
}

// DNS server port.
func (o ResolverForwardingRuleTargetDnsServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResolverForwardingRuleTargetDnsServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ResolverForwardingRuleTargetDnsServerArrayOutput struct{ *pulumi.OutputState }

func (ResolverForwardingRuleTargetDnsServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverForwardingRuleTargetDnsServer)(nil)).Elem()
}

func (o ResolverForwardingRuleTargetDnsServerArrayOutput) ToResolverForwardingRuleTargetDnsServerArrayOutput() ResolverForwardingRuleTargetDnsServerArrayOutput {
	return o
}

func (o ResolverForwardingRuleTargetDnsServerArrayOutput) ToResolverForwardingRuleTargetDnsServerArrayOutputWithContext(ctx context.Context) ResolverForwardingRuleTargetDnsServerArrayOutput {
	return o
}

func (o ResolverForwardingRuleTargetDnsServerArrayOutput) Index(i pulumi.IntInput) ResolverForwardingRuleTargetDnsServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverForwardingRuleTargetDnsServer {
		return vs[0].([]ResolverForwardingRuleTargetDnsServer)[vs[1].(int)]
	}).(ResolverForwardingRuleTargetDnsServerOutput)
}

type ResolverInboundEndpointIpConfiguration struct {
	// Private IP address of the IP configuration.
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// Private IP address allocation method. Allowed value is `Dynamic`. Defaults to `Dynamic`.
	PrivateIpAllocationMethod *string `pulumi:"privateIpAllocationMethod"`
	// The subnet ID of the IP configuration.
	SubnetId string `pulumi:"subnetId"`
}

// ResolverInboundEndpointIpConfigurationInput is an input type that accepts ResolverInboundEndpointIpConfigurationArgs and ResolverInboundEndpointIpConfigurationOutput values.
// You can construct a concrete instance of `ResolverInboundEndpointIpConfigurationInput` via:
//
//	ResolverInboundEndpointIpConfigurationArgs{...}
type ResolverInboundEndpointIpConfigurationInput interface {
	pulumi.Input

	ToResolverInboundEndpointIpConfigurationOutput() ResolverInboundEndpointIpConfigurationOutput
	ToResolverInboundEndpointIpConfigurationOutputWithContext(context.Context) ResolverInboundEndpointIpConfigurationOutput
}

type ResolverInboundEndpointIpConfigurationArgs struct {
	// Private IP address of the IP configuration.
	PrivateIpAddress pulumi.StringPtrInput `pulumi:"privateIpAddress"`
	// Private IP address allocation method. Allowed value is `Dynamic`. Defaults to `Dynamic`.
	PrivateIpAllocationMethod pulumi.StringPtrInput `pulumi:"privateIpAllocationMethod"`
	// The subnet ID of the IP configuration.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (ResolverInboundEndpointIpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverInboundEndpointIpConfiguration)(nil)).Elem()
}

func (i ResolverInboundEndpointIpConfigurationArgs) ToResolverInboundEndpointIpConfigurationOutput() ResolverInboundEndpointIpConfigurationOutput {
	return i.ToResolverInboundEndpointIpConfigurationOutputWithContext(context.Background())
}

func (i ResolverInboundEndpointIpConfigurationArgs) ToResolverInboundEndpointIpConfigurationOutputWithContext(ctx context.Context) ResolverInboundEndpointIpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverInboundEndpointIpConfigurationOutput)
}

// ResolverInboundEndpointIpConfigurationArrayInput is an input type that accepts ResolverInboundEndpointIpConfigurationArray and ResolverInboundEndpointIpConfigurationArrayOutput values.
// You can construct a concrete instance of `ResolverInboundEndpointIpConfigurationArrayInput` via:
//
//	ResolverInboundEndpointIpConfigurationArray{ ResolverInboundEndpointIpConfigurationArgs{...} }
type ResolverInboundEndpointIpConfigurationArrayInput interface {
	pulumi.Input

	ToResolverInboundEndpointIpConfigurationArrayOutput() ResolverInboundEndpointIpConfigurationArrayOutput
	ToResolverInboundEndpointIpConfigurationArrayOutputWithContext(context.Context) ResolverInboundEndpointIpConfigurationArrayOutput
}

type ResolverInboundEndpointIpConfigurationArray []ResolverInboundEndpointIpConfigurationInput

func (ResolverInboundEndpointIpConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverInboundEndpointIpConfiguration)(nil)).Elem()
}

func (i ResolverInboundEndpointIpConfigurationArray) ToResolverInboundEndpointIpConfigurationArrayOutput() ResolverInboundEndpointIpConfigurationArrayOutput {
	return i.ToResolverInboundEndpointIpConfigurationArrayOutputWithContext(context.Background())
}

func (i ResolverInboundEndpointIpConfigurationArray) ToResolverInboundEndpointIpConfigurationArrayOutputWithContext(ctx context.Context) ResolverInboundEndpointIpConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverInboundEndpointIpConfigurationArrayOutput)
}

type ResolverInboundEndpointIpConfigurationOutput struct{ *pulumi.OutputState }

func (ResolverInboundEndpointIpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverInboundEndpointIpConfiguration)(nil)).Elem()
}

func (o ResolverInboundEndpointIpConfigurationOutput) ToResolverInboundEndpointIpConfigurationOutput() ResolverInboundEndpointIpConfigurationOutput {
	return o
}

func (o ResolverInboundEndpointIpConfigurationOutput) ToResolverInboundEndpointIpConfigurationOutputWithContext(ctx context.Context) ResolverInboundEndpointIpConfigurationOutput {
	return o
}

// Private IP address of the IP configuration.
func (o ResolverInboundEndpointIpConfigurationOutput) PrivateIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverInboundEndpointIpConfiguration) *string { return v.PrivateIpAddress }).(pulumi.StringPtrOutput)
}

// Private IP address allocation method. Allowed value is `Dynamic`. Defaults to `Dynamic`.
func (o ResolverInboundEndpointIpConfigurationOutput) PrivateIpAllocationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverInboundEndpointIpConfiguration) *string { return v.PrivateIpAllocationMethod }).(pulumi.StringPtrOutput)
}

// The subnet ID of the IP configuration.
func (o ResolverInboundEndpointIpConfigurationOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverInboundEndpointIpConfiguration) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ResolverInboundEndpointIpConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ResolverInboundEndpointIpConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverInboundEndpointIpConfiguration)(nil)).Elem()
}

func (o ResolverInboundEndpointIpConfigurationArrayOutput) ToResolverInboundEndpointIpConfigurationArrayOutput() ResolverInboundEndpointIpConfigurationArrayOutput {
	return o
}

func (o ResolverInboundEndpointIpConfigurationArrayOutput) ToResolverInboundEndpointIpConfigurationArrayOutputWithContext(ctx context.Context) ResolverInboundEndpointIpConfigurationArrayOutput {
	return o
}

func (o ResolverInboundEndpointIpConfigurationArrayOutput) Index(i pulumi.IntInput) ResolverInboundEndpointIpConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverInboundEndpointIpConfiguration {
		return vs[0].([]ResolverInboundEndpointIpConfiguration)[vs[1].(int)]
	}).(ResolverInboundEndpointIpConfigurationOutput)
}

type SRVRecordRecord struct {
	// The Port the service is listening on.
	Port int `pulumi:"port"`
	// The priority of the SRV record.
	Priority int `pulumi:"priority"`
	// The FQDN of the service.
	Target string `pulumi:"target"`
	// The Weight of the SRV record.
	Weight int `pulumi:"weight"`
}

// SRVRecordRecordInput is an input type that accepts SRVRecordRecordArgs and SRVRecordRecordOutput values.
// You can construct a concrete instance of `SRVRecordRecordInput` via:
//
//	SRVRecordRecordArgs{...}
type SRVRecordRecordInput interface {
	pulumi.Input

	ToSRVRecordRecordOutput() SRVRecordRecordOutput
	ToSRVRecordRecordOutputWithContext(context.Context) SRVRecordRecordOutput
}

type SRVRecordRecordArgs struct {
	// The Port the service is listening on.
	Port pulumi.IntInput `pulumi:"port"`
	// The priority of the SRV record.
	Priority pulumi.IntInput `pulumi:"priority"`
	// The FQDN of the service.
	Target pulumi.StringInput `pulumi:"target"`
	// The Weight of the SRV record.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (SRVRecordRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SRVRecordRecord)(nil)).Elem()
}

func (i SRVRecordRecordArgs) ToSRVRecordRecordOutput() SRVRecordRecordOutput {
	return i.ToSRVRecordRecordOutputWithContext(context.Background())
}

func (i SRVRecordRecordArgs) ToSRVRecordRecordOutputWithContext(ctx context.Context) SRVRecordRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SRVRecordRecordOutput)
}

// SRVRecordRecordArrayInput is an input type that accepts SRVRecordRecordArray and SRVRecordRecordArrayOutput values.
// You can construct a concrete instance of `SRVRecordRecordArrayInput` via:
//
//	SRVRecordRecordArray{ SRVRecordRecordArgs{...} }
type SRVRecordRecordArrayInput interface {
	pulumi.Input

	ToSRVRecordRecordArrayOutput() SRVRecordRecordArrayOutput
	ToSRVRecordRecordArrayOutputWithContext(context.Context) SRVRecordRecordArrayOutput
}

type SRVRecordRecordArray []SRVRecordRecordInput

func (SRVRecordRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SRVRecordRecord)(nil)).Elem()
}

func (i SRVRecordRecordArray) ToSRVRecordRecordArrayOutput() SRVRecordRecordArrayOutput {
	return i.ToSRVRecordRecordArrayOutputWithContext(context.Background())
}

func (i SRVRecordRecordArray) ToSRVRecordRecordArrayOutputWithContext(ctx context.Context) SRVRecordRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SRVRecordRecordArrayOutput)
}

type SRVRecordRecordOutput struct{ *pulumi.OutputState }

func (SRVRecordRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SRVRecordRecord)(nil)).Elem()
}

func (o SRVRecordRecordOutput) ToSRVRecordRecordOutput() SRVRecordRecordOutput {
	return o
}

func (o SRVRecordRecordOutput) ToSRVRecordRecordOutputWithContext(ctx context.Context) SRVRecordRecordOutput {
	return o
}

// The Port the service is listening on.
func (o SRVRecordRecordOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v SRVRecordRecord) int { return v.Port }).(pulumi.IntOutput)
}

// The priority of the SRV record.
func (o SRVRecordRecordOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v SRVRecordRecord) int { return v.Priority }).(pulumi.IntOutput)
}

// The FQDN of the service.
func (o SRVRecordRecordOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v SRVRecordRecord) string { return v.Target }).(pulumi.StringOutput)
}

// The Weight of the SRV record.
func (o SRVRecordRecordOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v SRVRecordRecord) int { return v.Weight }).(pulumi.IntOutput)
}

type SRVRecordRecordArrayOutput struct{ *pulumi.OutputState }

func (SRVRecordRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SRVRecordRecord)(nil)).Elem()
}

func (o SRVRecordRecordArrayOutput) ToSRVRecordRecordArrayOutput() SRVRecordRecordArrayOutput {
	return o
}

func (o SRVRecordRecordArrayOutput) ToSRVRecordRecordArrayOutputWithContext(ctx context.Context) SRVRecordRecordArrayOutput {
	return o
}

func (o SRVRecordRecordArrayOutput) Index(i pulumi.IntInput) SRVRecordRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SRVRecordRecord {
		return vs[0].([]SRVRecordRecord)[vs[1].(int)]
	}).(SRVRecordRecordOutput)
}

type TxtRecordRecord struct {
	// The value of the TXT record. Max length: 1024 characters
	Value string `pulumi:"value"`
}

// TxtRecordRecordInput is an input type that accepts TxtRecordRecordArgs and TxtRecordRecordOutput values.
// You can construct a concrete instance of `TxtRecordRecordInput` via:
//
//	TxtRecordRecordArgs{...}
type TxtRecordRecordInput interface {
	pulumi.Input

	ToTxtRecordRecordOutput() TxtRecordRecordOutput
	ToTxtRecordRecordOutputWithContext(context.Context) TxtRecordRecordOutput
}

type TxtRecordRecordArgs struct {
	// The value of the TXT record. Max length: 1024 characters
	Value pulumi.StringInput `pulumi:"value"`
}

func (TxtRecordRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecordRecord)(nil)).Elem()
}

func (i TxtRecordRecordArgs) ToTxtRecordRecordOutput() TxtRecordRecordOutput {
	return i.ToTxtRecordRecordOutputWithContext(context.Background())
}

func (i TxtRecordRecordArgs) ToTxtRecordRecordOutputWithContext(ctx context.Context) TxtRecordRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordRecordOutput)
}

// TxtRecordRecordArrayInput is an input type that accepts TxtRecordRecordArray and TxtRecordRecordArrayOutput values.
// You can construct a concrete instance of `TxtRecordRecordArrayInput` via:
//
//	TxtRecordRecordArray{ TxtRecordRecordArgs{...} }
type TxtRecordRecordArrayInput interface {
	pulumi.Input

	ToTxtRecordRecordArrayOutput() TxtRecordRecordArrayOutput
	ToTxtRecordRecordArrayOutputWithContext(context.Context) TxtRecordRecordArrayOutput
}

type TxtRecordRecordArray []TxtRecordRecordInput

func (TxtRecordRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecordRecord)(nil)).Elem()
}

func (i TxtRecordRecordArray) ToTxtRecordRecordArrayOutput() TxtRecordRecordArrayOutput {
	return i.ToTxtRecordRecordArrayOutputWithContext(context.Background())
}

func (i TxtRecordRecordArray) ToTxtRecordRecordArrayOutputWithContext(ctx context.Context) TxtRecordRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordRecordArrayOutput)
}

type TxtRecordRecordOutput struct{ *pulumi.OutputState }

func (TxtRecordRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecordRecord)(nil)).Elem()
}

func (o TxtRecordRecordOutput) ToTxtRecordRecordOutput() TxtRecordRecordOutput {
	return o
}

func (o TxtRecordRecordOutput) ToTxtRecordRecordOutputWithContext(ctx context.Context) TxtRecordRecordOutput {
	return o
}

// The value of the TXT record. Max length: 1024 characters
func (o TxtRecordRecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v TxtRecordRecord) string { return v.Value }).(pulumi.StringOutput)
}

type TxtRecordRecordArrayOutput struct{ *pulumi.OutputState }

func (TxtRecordRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecordRecord)(nil)).Elem()
}

func (o TxtRecordRecordArrayOutput) ToTxtRecordRecordArrayOutput() TxtRecordRecordArrayOutput {
	return o
}

func (o TxtRecordRecordArrayOutput) ToTxtRecordRecordArrayOutputWithContext(ctx context.Context) TxtRecordRecordArrayOutput {
	return o
}

func (o TxtRecordRecordArrayOutput) Index(i pulumi.IntInput) TxtRecordRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TxtRecordRecord {
		return vs[0].([]TxtRecordRecord)[vs[1].(int)]
	}).(TxtRecordRecordOutput)
}

type ZoneSoaRecord struct {
	// The email contact for the SOA record.
	Email string `pulumi:"email"`
	// The expire time for the SOA record. Defaults to `2419200`.
	ExpireTime *int `pulumi:"expireTime"`
	// The fully qualified domain name of the Record Set.
	Fqdn *string `pulumi:"fqdn"`
	// The domain name of the authoritative name server for the SOA record.
	HostName *string `pulumi:"hostName"`
	// The minimum Time To Live for the SOA record. By convention, it is used to determine the negative caching duration. Defaults to `10`.
	MinimumTtl *int `pulumi:"minimumTtl"`
	// The refresh time for the SOA record. Defaults to `3600`.
	RefreshTime *int `pulumi:"refreshTime"`
	// The retry time for the SOA record. Defaults to `300`.
	RetryTime *int `pulumi:"retryTime"`
	// The serial number for the SOA record.
	SerialNumber *int `pulumi:"serialNumber"`
	// A mapping of tags to assign to the Record Set.
	Tags map[string]string `pulumi:"tags"`
	// The Time To Live of the SOA Record in seconds. Defaults to `3600`.
	Ttl *int `pulumi:"ttl"`
}

// ZoneSoaRecordInput is an input type that accepts ZoneSoaRecordArgs and ZoneSoaRecordOutput values.
// You can construct a concrete instance of `ZoneSoaRecordInput` via:
//
//	ZoneSoaRecordArgs{...}
type ZoneSoaRecordInput interface {
	pulumi.Input

	ToZoneSoaRecordOutput() ZoneSoaRecordOutput
	ToZoneSoaRecordOutputWithContext(context.Context) ZoneSoaRecordOutput
}

type ZoneSoaRecordArgs struct {
	// The email contact for the SOA record.
	Email pulumi.StringInput `pulumi:"email"`
	// The expire time for the SOA record. Defaults to `2419200`.
	ExpireTime pulumi.IntPtrInput `pulumi:"expireTime"`
	// The fully qualified domain name of the Record Set.
	Fqdn pulumi.StringPtrInput `pulumi:"fqdn"`
	// The domain name of the authoritative name server for the SOA record.
	HostName pulumi.StringPtrInput `pulumi:"hostName"`
	// The minimum Time To Live for the SOA record. By convention, it is used to determine the negative caching duration. Defaults to `10`.
	MinimumTtl pulumi.IntPtrInput `pulumi:"minimumTtl"`
	// The refresh time for the SOA record. Defaults to `3600`.
	RefreshTime pulumi.IntPtrInput `pulumi:"refreshTime"`
	// The retry time for the SOA record. Defaults to `300`.
	RetryTime pulumi.IntPtrInput `pulumi:"retryTime"`
	// The serial number for the SOA record.
	SerialNumber pulumi.IntPtrInput `pulumi:"serialNumber"`
	// A mapping of tags to assign to the Record Set.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The Time To Live of the SOA Record in seconds. Defaults to `3600`.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
}

func (ZoneSoaRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneSoaRecord)(nil)).Elem()
}

func (i ZoneSoaRecordArgs) ToZoneSoaRecordOutput() ZoneSoaRecordOutput {
	return i.ToZoneSoaRecordOutputWithContext(context.Background())
}

func (i ZoneSoaRecordArgs) ToZoneSoaRecordOutputWithContext(ctx context.Context) ZoneSoaRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSoaRecordOutput)
}

func (i ZoneSoaRecordArgs) ToZoneSoaRecordPtrOutput() ZoneSoaRecordPtrOutput {
	return i.ToZoneSoaRecordPtrOutputWithContext(context.Background())
}

func (i ZoneSoaRecordArgs) ToZoneSoaRecordPtrOutputWithContext(ctx context.Context) ZoneSoaRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSoaRecordOutput).ToZoneSoaRecordPtrOutputWithContext(ctx)
}

// ZoneSoaRecordPtrInput is an input type that accepts ZoneSoaRecordArgs, ZoneSoaRecordPtr and ZoneSoaRecordPtrOutput values.
// You can construct a concrete instance of `ZoneSoaRecordPtrInput` via:
//
//	        ZoneSoaRecordArgs{...}
//
//	or:
//
//	        nil
type ZoneSoaRecordPtrInput interface {
	pulumi.Input

	ToZoneSoaRecordPtrOutput() ZoneSoaRecordPtrOutput
	ToZoneSoaRecordPtrOutputWithContext(context.Context) ZoneSoaRecordPtrOutput
}

type zoneSoaRecordPtrType ZoneSoaRecordArgs

func ZoneSoaRecordPtr(v *ZoneSoaRecordArgs) ZoneSoaRecordPtrInput {
	return (*zoneSoaRecordPtrType)(v)
}

func (*zoneSoaRecordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneSoaRecord)(nil)).Elem()
}

func (i *zoneSoaRecordPtrType) ToZoneSoaRecordPtrOutput() ZoneSoaRecordPtrOutput {
	return i.ToZoneSoaRecordPtrOutputWithContext(context.Background())
}

func (i *zoneSoaRecordPtrType) ToZoneSoaRecordPtrOutputWithContext(ctx context.Context) ZoneSoaRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSoaRecordPtrOutput)
}

type ZoneSoaRecordOutput struct{ *pulumi.OutputState }

func (ZoneSoaRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneSoaRecord)(nil)).Elem()
}

func (o ZoneSoaRecordOutput) ToZoneSoaRecordOutput() ZoneSoaRecordOutput {
	return o
}

func (o ZoneSoaRecordOutput) ToZoneSoaRecordOutputWithContext(ctx context.Context) ZoneSoaRecordOutput {
	return o
}

func (o ZoneSoaRecordOutput) ToZoneSoaRecordPtrOutput() ZoneSoaRecordPtrOutput {
	return o.ToZoneSoaRecordPtrOutputWithContext(context.Background())
}

func (o ZoneSoaRecordOutput) ToZoneSoaRecordPtrOutputWithContext(ctx context.Context) ZoneSoaRecordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ZoneSoaRecord) *ZoneSoaRecord {
		return &v
	}).(ZoneSoaRecordPtrOutput)
}

// The email contact for the SOA record.
func (o ZoneSoaRecordOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneSoaRecord) string { return v.Email }).(pulumi.StringOutput)
}

// The expire time for the SOA record. Defaults to `2419200`.
func (o ZoneSoaRecordOutput) ExpireTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ZoneSoaRecord) *int { return v.ExpireTime }).(pulumi.IntPtrOutput)
}

// The fully qualified domain name of the Record Set.
func (o ZoneSoaRecordOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZoneSoaRecord) *string { return v.Fqdn }).(pulumi.StringPtrOutput)
}

// The domain name of the authoritative name server for the SOA record.
func (o ZoneSoaRecordOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZoneSoaRecord) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// The minimum Time To Live for the SOA record. By convention, it is used to determine the negative caching duration. Defaults to `10`.
func (o ZoneSoaRecordOutput) MinimumTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ZoneSoaRecord) *int { return v.MinimumTtl }).(pulumi.IntPtrOutput)
}

// The refresh time for the SOA record. Defaults to `3600`.
func (o ZoneSoaRecordOutput) RefreshTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ZoneSoaRecord) *int { return v.RefreshTime }).(pulumi.IntPtrOutput)
}

// The retry time for the SOA record. Defaults to `300`.
func (o ZoneSoaRecordOutput) RetryTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ZoneSoaRecord) *int { return v.RetryTime }).(pulumi.IntPtrOutput)
}

// The serial number for the SOA record.
func (o ZoneSoaRecordOutput) SerialNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ZoneSoaRecord) *int { return v.SerialNumber }).(pulumi.IntPtrOutput)
}

// A mapping of tags to assign to the Record Set.
func (o ZoneSoaRecordOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ZoneSoaRecord) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The Time To Live of the SOA Record in seconds. Defaults to `3600`.
func (o ZoneSoaRecordOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ZoneSoaRecord) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type ZoneSoaRecordPtrOutput struct{ *pulumi.OutputState }

func (ZoneSoaRecordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneSoaRecord)(nil)).Elem()
}

func (o ZoneSoaRecordPtrOutput) ToZoneSoaRecordPtrOutput() ZoneSoaRecordPtrOutput {
	return o
}

func (o ZoneSoaRecordPtrOutput) ToZoneSoaRecordPtrOutputWithContext(ctx context.Context) ZoneSoaRecordPtrOutput {
	return o
}

func (o ZoneSoaRecordPtrOutput) Elem() ZoneSoaRecordOutput {
	return o.ApplyT(func(v *ZoneSoaRecord) ZoneSoaRecord {
		if v != nil {
			return *v
		}
		var ret ZoneSoaRecord
		return ret
	}).(ZoneSoaRecordOutput)
}

// The email contact for the SOA record.
func (o ZoneSoaRecordPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZoneSoaRecord) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// The expire time for the SOA record. Defaults to `2419200`.
func (o ZoneSoaRecordPtrOutput) ExpireTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZoneSoaRecord) *int {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.IntPtrOutput)
}

// The fully qualified domain name of the Record Set.
func (o ZoneSoaRecordPtrOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZoneSoaRecord) *string {
		if v == nil {
			return nil
		}
		return v.Fqdn
	}).(pulumi.StringPtrOutput)
}

// The domain name of the authoritative name server for the SOA record.
func (o ZoneSoaRecordPtrOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZoneSoaRecord) *string {
		if v == nil {
			return nil
		}
		return v.HostName
	}).(pulumi.StringPtrOutput)
}

// The minimum Time To Live for the SOA record. By convention, it is used to determine the negative caching duration. Defaults to `10`.
func (o ZoneSoaRecordPtrOutput) MinimumTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZoneSoaRecord) *int {
		if v == nil {
			return nil
		}
		return v.MinimumTtl
	}).(pulumi.IntPtrOutput)
}

// The refresh time for the SOA record. Defaults to `3600`.
func (o ZoneSoaRecordPtrOutput) RefreshTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZoneSoaRecord) *int {
		if v == nil {
			return nil
		}
		return v.RefreshTime
	}).(pulumi.IntPtrOutput)
}

// The retry time for the SOA record. Defaults to `300`.
func (o ZoneSoaRecordPtrOutput) RetryTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZoneSoaRecord) *int {
		if v == nil {
			return nil
		}
		return v.RetryTime
	}).(pulumi.IntPtrOutput)
}

// The serial number for the SOA record.
func (o ZoneSoaRecordPtrOutput) SerialNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZoneSoaRecord) *int {
		if v == nil {
			return nil
		}
		return v.SerialNumber
	}).(pulumi.IntPtrOutput)
}

// A mapping of tags to assign to the Record Set.
func (o ZoneSoaRecordPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ZoneSoaRecord) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The Time To Live of the SOA Record in seconds. Defaults to `3600`.
func (o ZoneSoaRecordPtrOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZoneSoaRecord) *int {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(pulumi.IntPtrOutput)
}

type GetMxRecordRecord struct {
	// The mail server responsible for the domain covered by the MX record.
	Exchange string `pulumi:"exchange"`
	// String representing the "preference” value of the MX records. Records with lower preference value take priority.
	Preference int `pulumi:"preference"`
}

// GetMxRecordRecordInput is an input type that accepts GetMxRecordRecordArgs and GetMxRecordRecordOutput values.
// You can construct a concrete instance of `GetMxRecordRecordInput` via:
//
//	GetMxRecordRecordArgs{...}
type GetMxRecordRecordInput interface {
	pulumi.Input

	ToGetMxRecordRecordOutput() GetMxRecordRecordOutput
	ToGetMxRecordRecordOutputWithContext(context.Context) GetMxRecordRecordOutput
}

type GetMxRecordRecordArgs struct {
	// The mail server responsible for the domain covered by the MX record.
	Exchange pulumi.StringInput `pulumi:"exchange"`
	// String representing the "preference” value of the MX records. Records with lower preference value take priority.
	Preference pulumi.IntInput `pulumi:"preference"`
}

func (GetMxRecordRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMxRecordRecord)(nil)).Elem()
}

func (i GetMxRecordRecordArgs) ToGetMxRecordRecordOutput() GetMxRecordRecordOutput {
	return i.ToGetMxRecordRecordOutputWithContext(context.Background())
}

func (i GetMxRecordRecordArgs) ToGetMxRecordRecordOutputWithContext(ctx context.Context) GetMxRecordRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMxRecordRecordOutput)
}

// GetMxRecordRecordArrayInput is an input type that accepts GetMxRecordRecordArray and GetMxRecordRecordArrayOutput values.
// You can construct a concrete instance of `GetMxRecordRecordArrayInput` via:
//
//	GetMxRecordRecordArray{ GetMxRecordRecordArgs{...} }
type GetMxRecordRecordArrayInput interface {
	pulumi.Input

	ToGetMxRecordRecordArrayOutput() GetMxRecordRecordArrayOutput
	ToGetMxRecordRecordArrayOutputWithContext(context.Context) GetMxRecordRecordArrayOutput
}

type GetMxRecordRecordArray []GetMxRecordRecordInput

func (GetMxRecordRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMxRecordRecord)(nil)).Elem()
}

func (i GetMxRecordRecordArray) ToGetMxRecordRecordArrayOutput() GetMxRecordRecordArrayOutput {
	return i.ToGetMxRecordRecordArrayOutputWithContext(context.Background())
}

func (i GetMxRecordRecordArray) ToGetMxRecordRecordArrayOutputWithContext(ctx context.Context) GetMxRecordRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMxRecordRecordArrayOutput)
}

type GetMxRecordRecordOutput struct{ *pulumi.OutputState }

func (GetMxRecordRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMxRecordRecord)(nil)).Elem()
}

func (o GetMxRecordRecordOutput) ToGetMxRecordRecordOutput() GetMxRecordRecordOutput {
	return o
}

func (o GetMxRecordRecordOutput) ToGetMxRecordRecordOutputWithContext(ctx context.Context) GetMxRecordRecordOutput {
	return o
}

// The mail server responsible for the domain covered by the MX record.
func (o GetMxRecordRecordOutput) Exchange() pulumi.StringOutput {
	return o.ApplyT(func(v GetMxRecordRecord) string { return v.Exchange }).(pulumi.StringOutput)
}

// String representing the "preference” value of the MX records. Records with lower preference value take priority.
func (o GetMxRecordRecordOutput) Preference() pulumi.IntOutput {
	return o.ApplyT(func(v GetMxRecordRecord) int { return v.Preference }).(pulumi.IntOutput)
}

type GetMxRecordRecordArrayOutput struct{ *pulumi.OutputState }

func (GetMxRecordRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMxRecordRecord)(nil)).Elem()
}

func (o GetMxRecordRecordArrayOutput) ToGetMxRecordRecordArrayOutput() GetMxRecordRecordArrayOutput {
	return o
}

func (o GetMxRecordRecordArrayOutput) ToGetMxRecordRecordArrayOutputWithContext(ctx context.Context) GetMxRecordRecordArrayOutput {
	return o
}

func (o GetMxRecordRecordArrayOutput) Index(i pulumi.IntInput) GetMxRecordRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMxRecordRecord {
		return vs[0].([]GetMxRecordRecord)[vs[1].(int)]
	}).(GetMxRecordRecordOutput)
}

type GetResolverForwardingRuleTargetDnsServer struct {
	// The DNS server IP address.
	IpAddress string `pulumi:"ipAddress"`
	// The DNS server port.
	Port int `pulumi:"port"`
}

// GetResolverForwardingRuleTargetDnsServerInput is an input type that accepts GetResolverForwardingRuleTargetDnsServerArgs and GetResolverForwardingRuleTargetDnsServerOutput values.
// You can construct a concrete instance of `GetResolverForwardingRuleTargetDnsServerInput` via:
//
//	GetResolverForwardingRuleTargetDnsServerArgs{...}
type GetResolverForwardingRuleTargetDnsServerInput interface {
	pulumi.Input

	ToGetResolverForwardingRuleTargetDnsServerOutput() GetResolverForwardingRuleTargetDnsServerOutput
	ToGetResolverForwardingRuleTargetDnsServerOutputWithContext(context.Context) GetResolverForwardingRuleTargetDnsServerOutput
}

type GetResolverForwardingRuleTargetDnsServerArgs struct {
	// The DNS server IP address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The DNS server port.
	Port pulumi.IntInput `pulumi:"port"`
}

func (GetResolverForwardingRuleTargetDnsServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverForwardingRuleTargetDnsServer)(nil)).Elem()
}

func (i GetResolverForwardingRuleTargetDnsServerArgs) ToGetResolverForwardingRuleTargetDnsServerOutput() GetResolverForwardingRuleTargetDnsServerOutput {
	return i.ToGetResolverForwardingRuleTargetDnsServerOutputWithContext(context.Background())
}

func (i GetResolverForwardingRuleTargetDnsServerArgs) ToGetResolverForwardingRuleTargetDnsServerOutputWithContext(ctx context.Context) GetResolverForwardingRuleTargetDnsServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverForwardingRuleTargetDnsServerOutput)
}

// GetResolverForwardingRuleTargetDnsServerArrayInput is an input type that accepts GetResolverForwardingRuleTargetDnsServerArray and GetResolverForwardingRuleTargetDnsServerArrayOutput values.
// You can construct a concrete instance of `GetResolverForwardingRuleTargetDnsServerArrayInput` via:
//
//	GetResolverForwardingRuleTargetDnsServerArray{ GetResolverForwardingRuleTargetDnsServerArgs{...} }
type GetResolverForwardingRuleTargetDnsServerArrayInput interface {
	pulumi.Input

	ToGetResolverForwardingRuleTargetDnsServerArrayOutput() GetResolverForwardingRuleTargetDnsServerArrayOutput
	ToGetResolverForwardingRuleTargetDnsServerArrayOutputWithContext(context.Context) GetResolverForwardingRuleTargetDnsServerArrayOutput
}

type GetResolverForwardingRuleTargetDnsServerArray []GetResolverForwardingRuleTargetDnsServerInput

func (GetResolverForwardingRuleTargetDnsServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverForwardingRuleTargetDnsServer)(nil)).Elem()
}

func (i GetResolverForwardingRuleTargetDnsServerArray) ToGetResolverForwardingRuleTargetDnsServerArrayOutput() GetResolverForwardingRuleTargetDnsServerArrayOutput {
	return i.ToGetResolverForwardingRuleTargetDnsServerArrayOutputWithContext(context.Background())
}

func (i GetResolverForwardingRuleTargetDnsServerArray) ToGetResolverForwardingRuleTargetDnsServerArrayOutputWithContext(ctx context.Context) GetResolverForwardingRuleTargetDnsServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverForwardingRuleTargetDnsServerArrayOutput)
}

type GetResolverForwardingRuleTargetDnsServerOutput struct{ *pulumi.OutputState }

func (GetResolverForwardingRuleTargetDnsServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverForwardingRuleTargetDnsServer)(nil)).Elem()
}

func (o GetResolverForwardingRuleTargetDnsServerOutput) ToGetResolverForwardingRuleTargetDnsServerOutput() GetResolverForwardingRuleTargetDnsServerOutput {
	return o
}

func (o GetResolverForwardingRuleTargetDnsServerOutput) ToGetResolverForwardingRuleTargetDnsServerOutputWithContext(ctx context.Context) GetResolverForwardingRuleTargetDnsServerOutput {
	return o
}

// The DNS server IP address.
func (o GetResolverForwardingRuleTargetDnsServerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverForwardingRuleTargetDnsServer) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The DNS server port.
func (o GetResolverForwardingRuleTargetDnsServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetResolverForwardingRuleTargetDnsServer) int { return v.Port }).(pulumi.IntOutput)
}

type GetResolverForwardingRuleTargetDnsServerArrayOutput struct{ *pulumi.OutputState }

func (GetResolverForwardingRuleTargetDnsServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverForwardingRuleTargetDnsServer)(nil)).Elem()
}

func (o GetResolverForwardingRuleTargetDnsServerArrayOutput) ToGetResolverForwardingRuleTargetDnsServerArrayOutput() GetResolverForwardingRuleTargetDnsServerArrayOutput {
	return o
}

func (o GetResolverForwardingRuleTargetDnsServerArrayOutput) ToGetResolverForwardingRuleTargetDnsServerArrayOutputWithContext(ctx context.Context) GetResolverForwardingRuleTargetDnsServerArrayOutput {
	return o
}

func (o GetResolverForwardingRuleTargetDnsServerArrayOutput) Index(i pulumi.IntInput) GetResolverForwardingRuleTargetDnsServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverForwardingRuleTargetDnsServer {
		return vs[0].([]GetResolverForwardingRuleTargetDnsServer)[vs[1].(int)]
	}).(GetResolverForwardingRuleTargetDnsServerOutput)
}

type GetResolverInboundEndpointIpConfiguration struct {
	// The private IP address of the IP configuration.
	PrivateIpAddress string `pulumi:"privateIpAddress"`
	// The private IP address allocation method.
	PrivateIpAllocationMethod string `pulumi:"privateIpAllocationMethod"`
	// The subnet ID of the IP configuration.
	SubnetId string `pulumi:"subnetId"`
}

// GetResolverInboundEndpointIpConfigurationInput is an input type that accepts GetResolverInboundEndpointIpConfigurationArgs and GetResolverInboundEndpointIpConfigurationOutput values.
// You can construct a concrete instance of `GetResolverInboundEndpointIpConfigurationInput` via:
//
//	GetResolverInboundEndpointIpConfigurationArgs{...}
type GetResolverInboundEndpointIpConfigurationInput interface {
	pulumi.Input

	ToGetResolverInboundEndpointIpConfigurationOutput() GetResolverInboundEndpointIpConfigurationOutput
	ToGetResolverInboundEndpointIpConfigurationOutputWithContext(context.Context) GetResolverInboundEndpointIpConfigurationOutput
}

type GetResolverInboundEndpointIpConfigurationArgs struct {
	// The private IP address of the IP configuration.
	PrivateIpAddress pulumi.StringInput `pulumi:"privateIpAddress"`
	// The private IP address allocation method.
	PrivateIpAllocationMethod pulumi.StringInput `pulumi:"privateIpAllocationMethod"`
	// The subnet ID of the IP configuration.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (GetResolverInboundEndpointIpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverInboundEndpointIpConfiguration)(nil)).Elem()
}

func (i GetResolverInboundEndpointIpConfigurationArgs) ToGetResolverInboundEndpointIpConfigurationOutput() GetResolverInboundEndpointIpConfigurationOutput {
	return i.ToGetResolverInboundEndpointIpConfigurationOutputWithContext(context.Background())
}

func (i GetResolverInboundEndpointIpConfigurationArgs) ToGetResolverInboundEndpointIpConfigurationOutputWithContext(ctx context.Context) GetResolverInboundEndpointIpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverInboundEndpointIpConfigurationOutput)
}

// GetResolverInboundEndpointIpConfigurationArrayInput is an input type that accepts GetResolverInboundEndpointIpConfigurationArray and GetResolverInboundEndpointIpConfigurationArrayOutput values.
// You can construct a concrete instance of `GetResolverInboundEndpointIpConfigurationArrayInput` via:
//
//	GetResolverInboundEndpointIpConfigurationArray{ GetResolverInboundEndpointIpConfigurationArgs{...} }
type GetResolverInboundEndpointIpConfigurationArrayInput interface {
	pulumi.Input

	ToGetResolverInboundEndpointIpConfigurationArrayOutput() GetResolverInboundEndpointIpConfigurationArrayOutput
	ToGetResolverInboundEndpointIpConfigurationArrayOutputWithContext(context.Context) GetResolverInboundEndpointIpConfigurationArrayOutput
}

type GetResolverInboundEndpointIpConfigurationArray []GetResolverInboundEndpointIpConfigurationInput

func (GetResolverInboundEndpointIpConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverInboundEndpointIpConfiguration)(nil)).Elem()
}

func (i GetResolverInboundEndpointIpConfigurationArray) ToGetResolverInboundEndpointIpConfigurationArrayOutput() GetResolverInboundEndpointIpConfigurationArrayOutput {
	return i.ToGetResolverInboundEndpointIpConfigurationArrayOutputWithContext(context.Background())
}

func (i GetResolverInboundEndpointIpConfigurationArray) ToGetResolverInboundEndpointIpConfigurationArrayOutputWithContext(ctx context.Context) GetResolverInboundEndpointIpConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverInboundEndpointIpConfigurationArrayOutput)
}

type GetResolverInboundEndpointIpConfigurationOutput struct{ *pulumi.OutputState }

func (GetResolverInboundEndpointIpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverInboundEndpointIpConfiguration)(nil)).Elem()
}

func (o GetResolverInboundEndpointIpConfigurationOutput) ToGetResolverInboundEndpointIpConfigurationOutput() GetResolverInboundEndpointIpConfigurationOutput {
	return o
}

func (o GetResolverInboundEndpointIpConfigurationOutput) ToGetResolverInboundEndpointIpConfigurationOutputWithContext(ctx context.Context) GetResolverInboundEndpointIpConfigurationOutput {
	return o
}

// The private IP address of the IP configuration.
func (o GetResolverInboundEndpointIpConfigurationOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverInboundEndpointIpConfiguration) string { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

// The private IP address allocation method.
func (o GetResolverInboundEndpointIpConfigurationOutput) PrivateIpAllocationMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverInboundEndpointIpConfiguration) string { return v.PrivateIpAllocationMethod }).(pulumi.StringOutput)
}

// The subnet ID of the IP configuration.
func (o GetResolverInboundEndpointIpConfigurationOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverInboundEndpointIpConfiguration) string { return v.SubnetId }).(pulumi.StringOutput)
}

type GetResolverInboundEndpointIpConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetResolverInboundEndpointIpConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverInboundEndpointIpConfiguration)(nil)).Elem()
}

func (o GetResolverInboundEndpointIpConfigurationArrayOutput) ToGetResolverInboundEndpointIpConfigurationArrayOutput() GetResolverInboundEndpointIpConfigurationArrayOutput {
	return o
}

func (o GetResolverInboundEndpointIpConfigurationArrayOutput) ToGetResolverInboundEndpointIpConfigurationArrayOutputWithContext(ctx context.Context) GetResolverInboundEndpointIpConfigurationArrayOutput {
	return o
}

func (o GetResolverInboundEndpointIpConfigurationArrayOutput) Index(i pulumi.IntInput) GetResolverInboundEndpointIpConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverInboundEndpointIpConfiguration {
		return vs[0].([]GetResolverInboundEndpointIpConfiguration)[vs[1].(int)]
	}).(GetResolverInboundEndpointIpConfigurationOutput)
}

type GetSrvRecordRecord struct {
	// Port the service is listening on.
	Port int `pulumi:"port"`
	// Priority of the SRV record.
	Priority int `pulumi:"priority"`
	// FQDN of the service.
	Target string `pulumi:"target"`
	// Weight of the SRV record.
	Weight int `pulumi:"weight"`
}

// GetSrvRecordRecordInput is an input type that accepts GetSrvRecordRecordArgs and GetSrvRecordRecordOutput values.
// You can construct a concrete instance of `GetSrvRecordRecordInput` via:
//
//	GetSrvRecordRecordArgs{...}
type GetSrvRecordRecordInput interface {
	pulumi.Input

	ToGetSrvRecordRecordOutput() GetSrvRecordRecordOutput
	ToGetSrvRecordRecordOutputWithContext(context.Context) GetSrvRecordRecordOutput
}

type GetSrvRecordRecordArgs struct {
	// Port the service is listening on.
	Port pulumi.IntInput `pulumi:"port"`
	// Priority of the SRV record.
	Priority pulumi.IntInput `pulumi:"priority"`
	// FQDN of the service.
	Target pulumi.StringInput `pulumi:"target"`
	// Weight of the SRV record.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (GetSrvRecordRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSrvRecordRecord)(nil)).Elem()
}

func (i GetSrvRecordRecordArgs) ToGetSrvRecordRecordOutput() GetSrvRecordRecordOutput {
	return i.ToGetSrvRecordRecordOutputWithContext(context.Background())
}

func (i GetSrvRecordRecordArgs) ToGetSrvRecordRecordOutputWithContext(ctx context.Context) GetSrvRecordRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSrvRecordRecordOutput)
}

// GetSrvRecordRecordArrayInput is an input type that accepts GetSrvRecordRecordArray and GetSrvRecordRecordArrayOutput values.
// You can construct a concrete instance of `GetSrvRecordRecordArrayInput` via:
//
//	GetSrvRecordRecordArray{ GetSrvRecordRecordArgs{...} }
type GetSrvRecordRecordArrayInput interface {
	pulumi.Input

	ToGetSrvRecordRecordArrayOutput() GetSrvRecordRecordArrayOutput
	ToGetSrvRecordRecordArrayOutputWithContext(context.Context) GetSrvRecordRecordArrayOutput
}

type GetSrvRecordRecordArray []GetSrvRecordRecordInput

func (GetSrvRecordRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSrvRecordRecord)(nil)).Elem()
}

func (i GetSrvRecordRecordArray) ToGetSrvRecordRecordArrayOutput() GetSrvRecordRecordArrayOutput {
	return i.ToGetSrvRecordRecordArrayOutputWithContext(context.Background())
}

func (i GetSrvRecordRecordArray) ToGetSrvRecordRecordArrayOutputWithContext(ctx context.Context) GetSrvRecordRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSrvRecordRecordArrayOutput)
}

type GetSrvRecordRecordOutput struct{ *pulumi.OutputState }

func (GetSrvRecordRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSrvRecordRecord)(nil)).Elem()
}

func (o GetSrvRecordRecordOutput) ToGetSrvRecordRecordOutput() GetSrvRecordRecordOutput {
	return o
}

func (o GetSrvRecordRecordOutput) ToGetSrvRecordRecordOutputWithContext(ctx context.Context) GetSrvRecordRecordOutput {
	return o
}

// Port the service is listening on.
func (o GetSrvRecordRecordOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetSrvRecordRecord) int { return v.Port }).(pulumi.IntOutput)
}

// Priority of the SRV record.
func (o GetSrvRecordRecordOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetSrvRecordRecord) int { return v.Priority }).(pulumi.IntOutput)
}

// FQDN of the service.
func (o GetSrvRecordRecordOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v GetSrvRecordRecord) string { return v.Target }).(pulumi.StringOutput)
}

// Weight of the SRV record.
func (o GetSrvRecordRecordOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetSrvRecordRecord) int { return v.Weight }).(pulumi.IntOutput)
}

type GetSrvRecordRecordArrayOutput struct{ *pulumi.OutputState }

func (GetSrvRecordRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSrvRecordRecord)(nil)).Elem()
}

func (o GetSrvRecordRecordArrayOutput) ToGetSrvRecordRecordArrayOutput() GetSrvRecordRecordArrayOutput {
	return o
}

func (o GetSrvRecordRecordArrayOutput) ToGetSrvRecordRecordArrayOutputWithContext(ctx context.Context) GetSrvRecordRecordArrayOutput {
	return o
}

func (o GetSrvRecordRecordArrayOutput) Index(i pulumi.IntInput) GetSrvRecordRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSrvRecordRecord {
		return vs[0].([]GetSrvRecordRecord)[vs[1].(int)]
	}).(GetSrvRecordRecordOutput)
}

type GetTxtRecordRecord struct {
	// The value of the record. Max length: 1024 characters
	Value string `pulumi:"value"`
}

// GetTxtRecordRecordInput is an input type that accepts GetTxtRecordRecordArgs and GetTxtRecordRecordOutput values.
// You can construct a concrete instance of `GetTxtRecordRecordInput` via:
//
//	GetTxtRecordRecordArgs{...}
type GetTxtRecordRecordInput interface {
	pulumi.Input

	ToGetTxtRecordRecordOutput() GetTxtRecordRecordOutput
	ToGetTxtRecordRecordOutputWithContext(context.Context) GetTxtRecordRecordOutput
}

type GetTxtRecordRecordArgs struct {
	// The value of the record. Max length: 1024 characters
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetTxtRecordRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTxtRecordRecord)(nil)).Elem()
}

func (i GetTxtRecordRecordArgs) ToGetTxtRecordRecordOutput() GetTxtRecordRecordOutput {
	return i.ToGetTxtRecordRecordOutputWithContext(context.Background())
}

func (i GetTxtRecordRecordArgs) ToGetTxtRecordRecordOutputWithContext(ctx context.Context) GetTxtRecordRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTxtRecordRecordOutput)
}

// GetTxtRecordRecordArrayInput is an input type that accepts GetTxtRecordRecordArray and GetTxtRecordRecordArrayOutput values.
// You can construct a concrete instance of `GetTxtRecordRecordArrayInput` via:
//
//	GetTxtRecordRecordArray{ GetTxtRecordRecordArgs{...} }
type GetTxtRecordRecordArrayInput interface {
	pulumi.Input

	ToGetTxtRecordRecordArrayOutput() GetTxtRecordRecordArrayOutput
	ToGetTxtRecordRecordArrayOutputWithContext(context.Context) GetTxtRecordRecordArrayOutput
}

type GetTxtRecordRecordArray []GetTxtRecordRecordInput

func (GetTxtRecordRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTxtRecordRecord)(nil)).Elem()
}

func (i GetTxtRecordRecordArray) ToGetTxtRecordRecordArrayOutput() GetTxtRecordRecordArrayOutput {
	return i.ToGetTxtRecordRecordArrayOutputWithContext(context.Background())
}

func (i GetTxtRecordRecordArray) ToGetTxtRecordRecordArrayOutputWithContext(ctx context.Context) GetTxtRecordRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTxtRecordRecordArrayOutput)
}

type GetTxtRecordRecordOutput struct{ *pulumi.OutputState }

func (GetTxtRecordRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTxtRecordRecord)(nil)).Elem()
}

func (o GetTxtRecordRecordOutput) ToGetTxtRecordRecordOutput() GetTxtRecordRecordOutput {
	return o
}

func (o GetTxtRecordRecordOutput) ToGetTxtRecordRecordOutputWithContext(ctx context.Context) GetTxtRecordRecordOutput {
	return o
}

// The value of the record. Max length: 1024 characters
func (o GetTxtRecordRecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetTxtRecordRecord) string { return v.Value }).(pulumi.StringOutput)
}

type GetTxtRecordRecordArrayOutput struct{ *pulumi.OutputState }

func (GetTxtRecordRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTxtRecordRecord)(nil)).Elem()
}

func (o GetTxtRecordRecordArrayOutput) ToGetTxtRecordRecordArrayOutput() GetTxtRecordRecordArrayOutput {
	return o
}

func (o GetTxtRecordRecordArrayOutput) ToGetTxtRecordRecordArrayOutputWithContext(ctx context.Context) GetTxtRecordRecordArrayOutput {
	return o
}

func (o GetTxtRecordRecordArrayOutput) Index(i pulumi.IntInput) GetTxtRecordRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTxtRecordRecord {
		return vs[0].([]GetTxtRecordRecord)[vs[1].(int)]
	}).(GetTxtRecordRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkServiceNatIpConfigurationInput)(nil)).Elem(), LinkServiceNatIpConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkServiceNatIpConfigurationArrayInput)(nil)).Elem(), LinkServiceNatIpConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MxRecordRecordInput)(nil)).Elem(), MxRecordRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MxRecordRecordArrayInput)(nil)).Elem(), MxRecordRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverForwardingRuleTargetDnsServerInput)(nil)).Elem(), ResolverForwardingRuleTargetDnsServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverForwardingRuleTargetDnsServerArrayInput)(nil)).Elem(), ResolverForwardingRuleTargetDnsServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverInboundEndpointIpConfigurationInput)(nil)).Elem(), ResolverInboundEndpointIpConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverInboundEndpointIpConfigurationArrayInput)(nil)).Elem(), ResolverInboundEndpointIpConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SRVRecordRecordInput)(nil)).Elem(), SRVRecordRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SRVRecordRecordArrayInput)(nil)).Elem(), SRVRecordRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TxtRecordRecordInput)(nil)).Elem(), TxtRecordRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TxtRecordRecordArrayInput)(nil)).Elem(), TxtRecordRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneSoaRecordInput)(nil)).Elem(), ZoneSoaRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneSoaRecordPtrInput)(nil)).Elem(), ZoneSoaRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMxRecordRecordInput)(nil)).Elem(), GetMxRecordRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMxRecordRecordArrayInput)(nil)).Elem(), GetMxRecordRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverForwardingRuleTargetDnsServerInput)(nil)).Elem(), GetResolverForwardingRuleTargetDnsServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverForwardingRuleTargetDnsServerArrayInput)(nil)).Elem(), GetResolverForwardingRuleTargetDnsServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverInboundEndpointIpConfigurationInput)(nil)).Elem(), GetResolverInboundEndpointIpConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverInboundEndpointIpConfigurationArrayInput)(nil)).Elem(), GetResolverInboundEndpointIpConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSrvRecordRecordInput)(nil)).Elem(), GetSrvRecordRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSrvRecordRecordArrayInput)(nil)).Elem(), GetSrvRecordRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTxtRecordRecordInput)(nil)).Elem(), GetTxtRecordRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTxtRecordRecordArrayInput)(nil)).Elem(), GetTxtRecordRecordArray{})
	pulumi.RegisterOutputType(LinkServiceNatIpConfigurationOutput{})
	pulumi.RegisterOutputType(LinkServiceNatIpConfigurationArrayOutput{})
	pulumi.RegisterOutputType(MxRecordRecordOutput{})
	pulumi.RegisterOutputType(MxRecordRecordArrayOutput{})
	pulumi.RegisterOutputType(ResolverForwardingRuleTargetDnsServerOutput{})
	pulumi.RegisterOutputType(ResolverForwardingRuleTargetDnsServerArrayOutput{})
	pulumi.RegisterOutputType(ResolverInboundEndpointIpConfigurationOutput{})
	pulumi.RegisterOutputType(ResolverInboundEndpointIpConfigurationArrayOutput{})
	pulumi.RegisterOutputType(SRVRecordRecordOutput{})
	pulumi.RegisterOutputType(SRVRecordRecordArrayOutput{})
	pulumi.RegisterOutputType(TxtRecordRecordOutput{})
	pulumi.RegisterOutputType(TxtRecordRecordArrayOutput{})
	pulumi.RegisterOutputType(ZoneSoaRecordOutput{})
	pulumi.RegisterOutputType(ZoneSoaRecordPtrOutput{})
	pulumi.RegisterOutputType(GetMxRecordRecordOutput{})
	pulumi.RegisterOutputType(GetMxRecordRecordArrayOutput{})
	pulumi.RegisterOutputType(GetResolverForwardingRuleTargetDnsServerOutput{})
	pulumi.RegisterOutputType(GetResolverForwardingRuleTargetDnsServerArrayOutput{})
	pulumi.RegisterOutputType(GetResolverInboundEndpointIpConfigurationOutput{})
	pulumi.RegisterOutputType(GetResolverInboundEndpointIpConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetSrvRecordRecordOutput{})
	pulumi.RegisterOutputType(GetSrvRecordRecordArrayOutput{})
	pulumi.RegisterOutputType(GetTxtRecordRecordOutput{})
	pulumi.RegisterOutputType(GetTxtRecordRecordArrayOutput{})
}
