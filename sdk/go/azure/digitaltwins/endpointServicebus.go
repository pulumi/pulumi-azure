// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitaltwins

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Digital Twins Service Bus Endpoint.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/digitaltwins"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/servicebus"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleInstance, err := digitaltwins.NewInstance(ctx, "exampleInstance", &digitaltwins.InstanceArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			exampleNamespace, err := servicebus.NewNamespace(ctx, "exampleNamespace", &servicebus.NamespaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleTopic, err := servicebus.NewTopic(ctx, "exampleTopic", &servicebus.TopicArgs{
//				NamespaceId: exampleNamespace.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleTopicAuthorizationRule, err := servicebus.NewTopicAuthorizationRule(ctx, "exampleTopicAuthorizationRule", &servicebus.TopicAuthorizationRuleArgs{
//				TopicId: exampleTopic.ID(),
//				Listen:  pulumi.Bool(false),
//				Send:    pulumi.Bool(true),
//				Manage:  pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = digitaltwins.NewEndpointServicebus(ctx, "exampleEndpointServicebus", &digitaltwins.EndpointServicebusArgs{
//				DigitalTwinsId:                      exampleInstance.ID(),
//				ServicebusPrimaryConnectionString:   exampleTopicAuthorizationRule.PrimaryConnectionString,
//				ServicebusSecondaryConnectionString: exampleTopicAuthorizationRule.SecondaryConnectionString,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Digital Twins Service Bus Endpoints can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:digitaltwins/endpointServicebus:EndpointServicebus example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DigitalTwins/digitalTwinsInstances/dt1/endpoints/ep1
//
// ```
type EndpointServicebus struct {
	pulumi.CustomResourceState

	// The storage secret of the dead-lettering, whose format is `https://<storageAccountname>.blob.core.windows.net/<containerName>?<SASToken>`. When an endpoint can't deliver an event within a certain time period or after trying to deliver the event a certain number of times, it can send the undelivered event to a storage account.
	DeadLetterStorageSecret pulumi.StringPtrOutput `pulumi:"deadLetterStorageSecret"`
	// The ID of the Digital Twins Instance. Changing this forces a new Digital Twins Service Bus Endpoint to be created.
	DigitalTwinsId pulumi.StringOutput `pulumi:"digitalTwinsId"`
	// The name which should be used for this Digital Twins Service Bus Endpoint. Changing this forces a new Digital Twins Service Bus Endpoint to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The primary connection string of the Service Bus Topic Authorization Rule with a minimum of `send` permission. .
	ServicebusPrimaryConnectionString pulumi.StringOutput `pulumi:"servicebusPrimaryConnectionString"`
	// The secondary connection string of the Service Bus Topic Authorization Rule with a minimum of `send` permission.
	ServicebusSecondaryConnectionString pulumi.StringOutput `pulumi:"servicebusSecondaryConnectionString"`
}

// NewEndpointServicebus registers a new resource with the given unique name, arguments, and options.
func NewEndpointServicebus(ctx *pulumi.Context,
	name string, args *EndpointServicebusArgs, opts ...pulumi.ResourceOption) (*EndpointServicebus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DigitalTwinsId == nil {
		return nil, errors.New("invalid value for required argument 'DigitalTwinsId'")
	}
	if args.ServicebusPrimaryConnectionString == nil {
		return nil, errors.New("invalid value for required argument 'ServicebusPrimaryConnectionString'")
	}
	if args.ServicebusSecondaryConnectionString == nil {
		return nil, errors.New("invalid value for required argument 'ServicebusSecondaryConnectionString'")
	}
	if args.DeadLetterStorageSecret != nil {
		args.DeadLetterStorageSecret = pulumi.ToSecret(args.DeadLetterStorageSecret).(pulumi.StringPtrInput)
	}
	if args.ServicebusPrimaryConnectionString != nil {
		args.ServicebusPrimaryConnectionString = pulumi.ToSecret(args.ServicebusPrimaryConnectionString).(pulumi.StringInput)
	}
	if args.ServicebusSecondaryConnectionString != nil {
		args.ServicebusSecondaryConnectionString = pulumi.ToSecret(args.ServicebusSecondaryConnectionString).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"deadLetterStorageSecret",
		"servicebusPrimaryConnectionString",
		"servicebusSecondaryConnectionString",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EndpointServicebus
	err := ctx.RegisterResource("azure:digitaltwins/endpointServicebus:EndpointServicebus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpointServicebus gets an existing EndpointServicebus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointServicebus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointServicebusState, opts ...pulumi.ResourceOption) (*EndpointServicebus, error) {
	var resource EndpointServicebus
	err := ctx.ReadResource("azure:digitaltwins/endpointServicebus:EndpointServicebus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndpointServicebus resources.
type endpointServicebusState struct {
	// The storage secret of the dead-lettering, whose format is `https://<storageAccountname>.blob.core.windows.net/<containerName>?<SASToken>`. When an endpoint can't deliver an event within a certain time period or after trying to deliver the event a certain number of times, it can send the undelivered event to a storage account.
	DeadLetterStorageSecret *string `pulumi:"deadLetterStorageSecret"`
	// The ID of the Digital Twins Instance. Changing this forces a new Digital Twins Service Bus Endpoint to be created.
	DigitalTwinsId *string `pulumi:"digitalTwinsId"`
	// The name which should be used for this Digital Twins Service Bus Endpoint. Changing this forces a new Digital Twins Service Bus Endpoint to be created.
	Name *string `pulumi:"name"`
	// The primary connection string of the Service Bus Topic Authorization Rule with a minimum of `send` permission. .
	ServicebusPrimaryConnectionString *string `pulumi:"servicebusPrimaryConnectionString"`
	// The secondary connection string of the Service Bus Topic Authorization Rule with a minimum of `send` permission.
	ServicebusSecondaryConnectionString *string `pulumi:"servicebusSecondaryConnectionString"`
}

type EndpointServicebusState struct {
	// The storage secret of the dead-lettering, whose format is `https://<storageAccountname>.blob.core.windows.net/<containerName>?<SASToken>`. When an endpoint can't deliver an event within a certain time period or after trying to deliver the event a certain number of times, it can send the undelivered event to a storage account.
	DeadLetterStorageSecret pulumi.StringPtrInput
	// The ID of the Digital Twins Instance. Changing this forces a new Digital Twins Service Bus Endpoint to be created.
	DigitalTwinsId pulumi.StringPtrInput
	// The name which should be used for this Digital Twins Service Bus Endpoint. Changing this forces a new Digital Twins Service Bus Endpoint to be created.
	Name pulumi.StringPtrInput
	// The primary connection string of the Service Bus Topic Authorization Rule with a minimum of `send` permission. .
	ServicebusPrimaryConnectionString pulumi.StringPtrInput
	// The secondary connection string of the Service Bus Topic Authorization Rule with a minimum of `send` permission.
	ServicebusSecondaryConnectionString pulumi.StringPtrInput
}

func (EndpointServicebusState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointServicebusState)(nil)).Elem()
}

type endpointServicebusArgs struct {
	// The storage secret of the dead-lettering, whose format is `https://<storageAccountname>.blob.core.windows.net/<containerName>?<SASToken>`. When an endpoint can't deliver an event within a certain time period or after trying to deliver the event a certain number of times, it can send the undelivered event to a storage account.
	DeadLetterStorageSecret *string `pulumi:"deadLetterStorageSecret"`
	// The ID of the Digital Twins Instance. Changing this forces a new Digital Twins Service Bus Endpoint to be created.
	DigitalTwinsId string `pulumi:"digitalTwinsId"`
	// The name which should be used for this Digital Twins Service Bus Endpoint. Changing this forces a new Digital Twins Service Bus Endpoint to be created.
	Name *string `pulumi:"name"`
	// The primary connection string of the Service Bus Topic Authorization Rule with a minimum of `send` permission. .
	ServicebusPrimaryConnectionString string `pulumi:"servicebusPrimaryConnectionString"`
	// The secondary connection string of the Service Bus Topic Authorization Rule with a minimum of `send` permission.
	ServicebusSecondaryConnectionString string `pulumi:"servicebusSecondaryConnectionString"`
}

// The set of arguments for constructing a EndpointServicebus resource.
type EndpointServicebusArgs struct {
	// The storage secret of the dead-lettering, whose format is `https://<storageAccountname>.blob.core.windows.net/<containerName>?<SASToken>`. When an endpoint can't deliver an event within a certain time period or after trying to deliver the event a certain number of times, it can send the undelivered event to a storage account.
	DeadLetterStorageSecret pulumi.StringPtrInput
	// The ID of the Digital Twins Instance. Changing this forces a new Digital Twins Service Bus Endpoint to be created.
	DigitalTwinsId pulumi.StringInput
	// The name which should be used for this Digital Twins Service Bus Endpoint. Changing this forces a new Digital Twins Service Bus Endpoint to be created.
	Name pulumi.StringPtrInput
	// The primary connection string of the Service Bus Topic Authorization Rule with a minimum of `send` permission. .
	ServicebusPrimaryConnectionString pulumi.StringInput
	// The secondary connection string of the Service Bus Topic Authorization Rule with a minimum of `send` permission.
	ServicebusSecondaryConnectionString pulumi.StringInput
}

func (EndpointServicebusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointServicebusArgs)(nil)).Elem()
}

type EndpointServicebusInput interface {
	pulumi.Input

	ToEndpointServicebusOutput() EndpointServicebusOutput
	ToEndpointServicebusOutputWithContext(ctx context.Context) EndpointServicebusOutput
}

func (*EndpointServicebus) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointServicebus)(nil)).Elem()
}

func (i *EndpointServicebus) ToEndpointServicebusOutput() EndpointServicebusOutput {
	return i.ToEndpointServicebusOutputWithContext(context.Background())
}

func (i *EndpointServicebus) ToEndpointServicebusOutputWithContext(ctx context.Context) EndpointServicebusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointServicebusOutput)
}

// EndpointServicebusArrayInput is an input type that accepts EndpointServicebusArray and EndpointServicebusArrayOutput values.
// You can construct a concrete instance of `EndpointServicebusArrayInput` via:
//
//	EndpointServicebusArray{ EndpointServicebusArgs{...} }
type EndpointServicebusArrayInput interface {
	pulumi.Input

	ToEndpointServicebusArrayOutput() EndpointServicebusArrayOutput
	ToEndpointServicebusArrayOutputWithContext(context.Context) EndpointServicebusArrayOutput
}

type EndpointServicebusArray []EndpointServicebusInput

func (EndpointServicebusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndpointServicebus)(nil)).Elem()
}

func (i EndpointServicebusArray) ToEndpointServicebusArrayOutput() EndpointServicebusArrayOutput {
	return i.ToEndpointServicebusArrayOutputWithContext(context.Background())
}

func (i EndpointServicebusArray) ToEndpointServicebusArrayOutputWithContext(ctx context.Context) EndpointServicebusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointServicebusArrayOutput)
}

// EndpointServicebusMapInput is an input type that accepts EndpointServicebusMap and EndpointServicebusMapOutput values.
// You can construct a concrete instance of `EndpointServicebusMapInput` via:
//
//	EndpointServicebusMap{ "key": EndpointServicebusArgs{...} }
type EndpointServicebusMapInput interface {
	pulumi.Input

	ToEndpointServicebusMapOutput() EndpointServicebusMapOutput
	ToEndpointServicebusMapOutputWithContext(context.Context) EndpointServicebusMapOutput
}

type EndpointServicebusMap map[string]EndpointServicebusInput

func (EndpointServicebusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndpointServicebus)(nil)).Elem()
}

func (i EndpointServicebusMap) ToEndpointServicebusMapOutput() EndpointServicebusMapOutput {
	return i.ToEndpointServicebusMapOutputWithContext(context.Background())
}

func (i EndpointServicebusMap) ToEndpointServicebusMapOutputWithContext(ctx context.Context) EndpointServicebusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointServicebusMapOutput)
}

type EndpointServicebusOutput struct{ *pulumi.OutputState }

func (EndpointServicebusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointServicebus)(nil)).Elem()
}

func (o EndpointServicebusOutput) ToEndpointServicebusOutput() EndpointServicebusOutput {
	return o
}

func (o EndpointServicebusOutput) ToEndpointServicebusOutputWithContext(ctx context.Context) EndpointServicebusOutput {
	return o
}

// The storage secret of the dead-lettering, whose format is `https://<storageAccountname>.blob.core.windows.net/<containerName>?<SASToken>`. When an endpoint can't deliver an event within a certain time period or after trying to deliver the event a certain number of times, it can send the undelivered event to a storage account.
func (o EndpointServicebusOutput) DeadLetterStorageSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointServicebus) pulumi.StringPtrOutput { return v.DeadLetterStorageSecret }).(pulumi.StringPtrOutput)
}

// The ID of the Digital Twins Instance. Changing this forces a new Digital Twins Service Bus Endpoint to be created.
func (o EndpointServicebusOutput) DigitalTwinsId() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointServicebus) pulumi.StringOutput { return v.DigitalTwinsId }).(pulumi.StringOutput)
}

// The name which should be used for this Digital Twins Service Bus Endpoint. Changing this forces a new Digital Twins Service Bus Endpoint to be created.
func (o EndpointServicebusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointServicebus) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The primary connection string of the Service Bus Topic Authorization Rule with a minimum of `send` permission. .
func (o EndpointServicebusOutput) ServicebusPrimaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointServicebus) pulumi.StringOutput { return v.ServicebusPrimaryConnectionString }).(pulumi.StringOutput)
}

// The secondary connection string of the Service Bus Topic Authorization Rule with a minimum of `send` permission.
func (o EndpointServicebusOutput) ServicebusSecondaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *EndpointServicebus) pulumi.StringOutput { return v.ServicebusSecondaryConnectionString }).(pulumi.StringOutput)
}

type EndpointServicebusArrayOutput struct{ *pulumi.OutputState }

func (EndpointServicebusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndpointServicebus)(nil)).Elem()
}

func (o EndpointServicebusArrayOutput) ToEndpointServicebusArrayOutput() EndpointServicebusArrayOutput {
	return o
}

func (o EndpointServicebusArrayOutput) ToEndpointServicebusArrayOutputWithContext(ctx context.Context) EndpointServicebusArrayOutput {
	return o
}

func (o EndpointServicebusArrayOutput) Index(i pulumi.IntInput) EndpointServicebusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EndpointServicebus {
		return vs[0].([]*EndpointServicebus)[vs[1].(int)]
	}).(EndpointServicebusOutput)
}

type EndpointServicebusMapOutput struct{ *pulumi.OutputState }

func (EndpointServicebusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndpointServicebus)(nil)).Elem()
}

func (o EndpointServicebusMapOutput) ToEndpointServicebusMapOutput() EndpointServicebusMapOutput {
	return o
}

func (o EndpointServicebusMapOutput) ToEndpointServicebusMapOutputWithContext(ctx context.Context) EndpointServicebusMapOutput {
	return o
}

func (o EndpointServicebusMapOutput) MapIndex(k pulumi.StringInput) EndpointServicebusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EndpointServicebus {
		return vs[0].(map[string]*EndpointServicebus)[vs[1].(string)]
	}).(EndpointServicebusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointServicebusInput)(nil)).Elem(), &EndpointServicebus{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointServicebusArrayInput)(nil)).Elem(), EndpointServicebusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointServicebusMapInput)(nil)).Elem(), EndpointServicebusMap{})
	pulumi.RegisterOutputType(EndpointServicebusOutput{})
	pulumi.RegisterOutputType(EndpointServicebusArrayOutput{})
	pulumi.RegisterOutputType(EndpointServicebusMapOutput{})
}
