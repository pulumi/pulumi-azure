// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Elasticsearch resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/elasticcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := elasticcloud.LookupElasticsearch(ctx, &elasticcloud.LookupElasticsearchArgs{
//				Name:              "my-elastic-search",
//				ResourceGroupName: "example-resources",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("elasticsearchEndpoint", example.ElasticsearchServiceUrl)
//			ctx.Export("kibanaEndpoint", example.KibanaServiceUrl)
//			return nil
//		})
//	}
//
// ```
func LookupElasticsearch(ctx *pulumi.Context, args *LookupElasticsearchArgs, opts ...pulumi.InvokeOption) (*LookupElasticsearchResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupElasticsearchResult
	err := ctx.Invoke("azure:elasticcloud/getElasticsearch:getElasticsearch", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getElasticsearch.
type LookupElasticsearchArgs struct {
	// A `logs` block as defined below.
	Logs []GetElasticsearchLog `pulumi:"logs"`
	// The name of the Elasticsearch resource.
	Name string `pulumi:"name"`
	// The name of the resource group in which the Elasticsearch exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getElasticsearch.
type LookupElasticsearchResult struct {
	// The ID of the Deployment within Elastic Cloud.
	ElasticCloudDeploymentId string `pulumi:"elasticCloudDeploymentId"`
	// The Email Address which is associated with this Elasticsearch account.
	ElasticCloudEmailAddress string `pulumi:"elasticCloudEmailAddress"`
	// The Default URL used for Single Sign On (SSO) to Elastic Cloud.
	ElasticCloudSsoDefaultUrl string `pulumi:"elasticCloudSsoDefaultUrl"`
	// The ID of the User Account within Elastic Cloud.
	ElasticCloudUserId string `pulumi:"elasticCloudUserId"`
	// The URL to the Elasticsearch Service associated with this Elasticsearch.
	ElasticsearchServiceUrl string `pulumi:"elasticsearchServiceUrl"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The URL to the Kibana Dashboard associated with this Elasticsearch.
	KibanaServiceUrl string `pulumi:"kibanaServiceUrl"`
	// The URI used for SSO to the Kibana Dashboard associated with this Elasticsearch.
	KibanaSsoUri string `pulumi:"kibanaSsoUri"`
	// The Azure Region in which this Elasticsearch exists.
	Location string `pulumi:"location"`
	// A `logs` block as defined below.
	Logs []GetElasticsearchLog `pulumi:"logs"`
	// Specifies if monitoring is enabled on this Elasticsearch or not.
	MonitoringEnabled bool `pulumi:"monitoringEnabled"`
	// The name (key) of the Tag which should be filtered.
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the SKU used for this Elasticsearch.
	SkuName string `pulumi:"skuName"`
	// A mapping of tags assigned to the Elasticsearch.
	Tags map[string]string `pulumi:"tags"`
}

func LookupElasticsearchOutput(ctx *pulumi.Context, args LookupElasticsearchOutputArgs, opts ...pulumi.InvokeOption) LookupElasticsearchResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupElasticsearchResult, error) {
			args := v.(LookupElasticsearchArgs)
			r, err := LookupElasticsearch(ctx, &args, opts...)
			var s LookupElasticsearchResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupElasticsearchResultOutput)
}

// A collection of arguments for invoking getElasticsearch.
type LookupElasticsearchOutputArgs struct {
	// A `logs` block as defined below.
	Logs GetElasticsearchLogArrayInput `pulumi:"logs"`
	// The name of the Elasticsearch resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which the Elasticsearch exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupElasticsearchOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupElasticsearchArgs)(nil)).Elem()
}

// A collection of values returned by getElasticsearch.
type LookupElasticsearchResultOutput struct{ *pulumi.OutputState }

func (LookupElasticsearchResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupElasticsearchResult)(nil)).Elem()
}

func (o LookupElasticsearchResultOutput) ToLookupElasticsearchResultOutput() LookupElasticsearchResultOutput {
	return o
}

func (o LookupElasticsearchResultOutput) ToLookupElasticsearchResultOutputWithContext(ctx context.Context) LookupElasticsearchResultOutput {
	return o
}

// The ID of the Deployment within Elastic Cloud.
func (o LookupElasticsearchResultOutput) ElasticCloudDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) string { return v.ElasticCloudDeploymentId }).(pulumi.StringOutput)
}

// The Email Address which is associated with this Elasticsearch account.
func (o LookupElasticsearchResultOutput) ElasticCloudEmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) string { return v.ElasticCloudEmailAddress }).(pulumi.StringOutput)
}

// The Default URL used for Single Sign On (SSO) to Elastic Cloud.
func (o LookupElasticsearchResultOutput) ElasticCloudSsoDefaultUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) string { return v.ElasticCloudSsoDefaultUrl }).(pulumi.StringOutput)
}

// The ID of the User Account within Elastic Cloud.
func (o LookupElasticsearchResultOutput) ElasticCloudUserId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) string { return v.ElasticCloudUserId }).(pulumi.StringOutput)
}

// The URL to the Elasticsearch Service associated with this Elasticsearch.
func (o LookupElasticsearchResultOutput) ElasticsearchServiceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) string { return v.ElasticsearchServiceUrl }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupElasticsearchResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) string { return v.Id }).(pulumi.StringOutput)
}

// The URL to the Kibana Dashboard associated with this Elasticsearch.
func (o LookupElasticsearchResultOutput) KibanaServiceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) string { return v.KibanaServiceUrl }).(pulumi.StringOutput)
}

// The URI used for SSO to the Kibana Dashboard associated with this Elasticsearch.
func (o LookupElasticsearchResultOutput) KibanaSsoUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) string { return v.KibanaSsoUri }).(pulumi.StringOutput)
}

// The Azure Region in which this Elasticsearch exists.
func (o LookupElasticsearchResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) string { return v.Location }).(pulumi.StringOutput)
}

// A `logs` block as defined below.
func (o LookupElasticsearchResultOutput) Logs() GetElasticsearchLogArrayOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) []GetElasticsearchLog { return v.Logs }).(GetElasticsearchLogArrayOutput)
}

// Specifies if monitoring is enabled on this Elasticsearch or not.
func (o LookupElasticsearchResultOutput) MonitoringEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) bool { return v.MonitoringEnabled }).(pulumi.BoolOutput)
}

// The name (key) of the Tag which should be filtered.
func (o LookupElasticsearchResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupElasticsearchResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The name of the SKU used for this Elasticsearch.
func (o LookupElasticsearchResultOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) string { return v.SkuName }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the Elasticsearch.
func (o LookupElasticsearchResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupElasticsearchResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupElasticsearchResultOutput{})
}
