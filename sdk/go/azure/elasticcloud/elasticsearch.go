// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elasticcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Elasticsearch in Elastic Cloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/elasticcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testResourceGroup, err := core.NewResourceGroup(ctx, "testResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = elasticcloud.NewElasticsearch(ctx, "testElasticsearch", &elasticcloud.ElasticsearchArgs{
//				ResourceGroupName:        testResourceGroup.Name,
//				Location:                 testResourceGroup.Location,
//				SkuName:                  pulumi.String("ess-consumption-2024_Monthly"),
//				ElasticCloudEmailAddress: pulumi.String("user@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Elasticsearch's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:elasticcloud/elasticsearch:Elasticsearch example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Elastic/monitors/monitor1
//
// ```
type Elasticsearch struct {
	pulumi.CustomResourceState

	// The ID of the Deployment within Elastic Cloud.
	ElasticCloudDeploymentId pulumi.StringOutput `pulumi:"elasticCloudDeploymentId"`
	// Specifies the Email Address which should be associated with this Elasticsearch account. Changing this forces a new Elasticsearch to be created.
	ElasticCloudEmailAddress pulumi.StringOutput `pulumi:"elasticCloudEmailAddress"`
	// The Default URL used for Single Sign On (SSO) to Elastic Cloud.
	ElasticCloudSsoDefaultUrl pulumi.StringOutput `pulumi:"elasticCloudSsoDefaultUrl"`
	// The ID of the User Account within Elastic Cloud.
	ElasticCloudUserId pulumi.StringOutput `pulumi:"elasticCloudUserId"`
	// The URL to the Elasticsearch Service associated with this Elasticsearch.
	ElasticsearchServiceUrl pulumi.StringOutput `pulumi:"elasticsearchServiceUrl"`
	// The URL to the Kibana Dashboard associated with this Elasticsearch.
	KibanaServiceUrl pulumi.StringOutput `pulumi:"kibanaServiceUrl"`
	// The URI used for SSO to the Kibana Dashboard associated with this Elasticsearch.
	KibanaSsoUri pulumi.StringOutput `pulumi:"kibanaSsoUri"`
	// The Azure Region where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A `logs` block as defined below.
	Logs ElasticsearchLogsOutput `pulumi:"logs"`
	// Specifies if the Elasticsearch should have monitoring configured? Defaults to `true`. Changing this forces a new Elasticsearch to be created.
	MonitoringEnabled pulumi.BoolPtrOutput `pulumi:"monitoringEnabled"`
	// The name which should be used for this Elasticsearch resource. Changing this forces a new Elasticsearch to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Specifies the name of the SKU for this Elasticsearch. Changing this forces a new Elasticsearch to be created.
	//
	// > **NOTE:** The SKU depends on the Elasticsearch Plans available for your account and is a combination of PlanID_Term.
	// Ex: If the plan ID is "planXYZ" and term is "Yearly", the SKU will be "planXYZ_Yearly".
	// You may find your eligible plans [here](https://portal.azure.com/#view/Microsoft_Azure_Marketplace/GalleryItemDetailsBladeNopdl/id/elastic.ec-azure-pp) or in the online documentation [here](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/elastic.ec-azure-pp?tab=PlansAndPrice) for more details or in case of any issues with the SKU.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the Elasticsearch resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewElasticsearch registers a new resource with the given unique name, arguments, and options.
func NewElasticsearch(ctx *pulumi.Context,
	name string, args *ElasticsearchArgs, opts ...pulumi.ResourceOption) (*Elasticsearch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ElasticCloudEmailAddress == nil {
		return nil, errors.New("invalid value for required argument 'ElasticCloudEmailAddress'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Elasticsearch
	err := ctx.RegisterResource("azure:elasticcloud/elasticsearch:Elasticsearch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearch gets an existing Elasticsearch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchState, opts ...pulumi.ResourceOption) (*Elasticsearch, error) {
	var resource Elasticsearch
	err := ctx.ReadResource("azure:elasticcloud/elasticsearch:Elasticsearch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Elasticsearch resources.
type elasticsearchState struct {
	// The ID of the Deployment within Elastic Cloud.
	ElasticCloudDeploymentId *string `pulumi:"elasticCloudDeploymentId"`
	// Specifies the Email Address which should be associated with this Elasticsearch account. Changing this forces a new Elasticsearch to be created.
	ElasticCloudEmailAddress *string `pulumi:"elasticCloudEmailAddress"`
	// The Default URL used for Single Sign On (SSO) to Elastic Cloud.
	ElasticCloudSsoDefaultUrl *string `pulumi:"elasticCloudSsoDefaultUrl"`
	// The ID of the User Account within Elastic Cloud.
	ElasticCloudUserId *string `pulumi:"elasticCloudUserId"`
	// The URL to the Elasticsearch Service associated with this Elasticsearch.
	ElasticsearchServiceUrl *string `pulumi:"elasticsearchServiceUrl"`
	// The URL to the Kibana Dashboard associated with this Elasticsearch.
	KibanaServiceUrl *string `pulumi:"kibanaServiceUrl"`
	// The URI used for SSO to the Kibana Dashboard associated with this Elasticsearch.
	KibanaSsoUri *string `pulumi:"kibanaSsoUri"`
	// The Azure Region where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
	Location *string `pulumi:"location"`
	// A `logs` block as defined below.
	Logs *ElasticsearchLogs `pulumi:"logs"`
	// Specifies if the Elasticsearch should have monitoring configured? Defaults to `true`. Changing this forces a new Elasticsearch to be created.
	MonitoringEnabled *bool `pulumi:"monitoringEnabled"`
	// The name which should be used for this Elasticsearch resource. Changing this forces a new Elasticsearch to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Specifies the name of the SKU for this Elasticsearch. Changing this forces a new Elasticsearch to be created.
	//
	// > **NOTE:** The SKU depends on the Elasticsearch Plans available for your account and is a combination of PlanID_Term.
	// Ex: If the plan ID is "planXYZ" and term is "Yearly", the SKU will be "planXYZ_Yearly".
	// You may find your eligible plans [here](https://portal.azure.com/#view/Microsoft_Azure_Marketplace/GalleryItemDetailsBladeNopdl/id/elastic.ec-azure-pp) or in the online documentation [here](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/elastic.ec-azure-pp?tab=PlansAndPrice) for more details or in case of any issues with the SKU.
	SkuName *string `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the Elasticsearch resource.
	Tags map[string]string `pulumi:"tags"`
}

type ElasticsearchState struct {
	// The ID of the Deployment within Elastic Cloud.
	ElasticCloudDeploymentId pulumi.StringPtrInput
	// Specifies the Email Address which should be associated with this Elasticsearch account. Changing this forces a new Elasticsearch to be created.
	ElasticCloudEmailAddress pulumi.StringPtrInput
	// The Default URL used for Single Sign On (SSO) to Elastic Cloud.
	ElasticCloudSsoDefaultUrl pulumi.StringPtrInput
	// The ID of the User Account within Elastic Cloud.
	ElasticCloudUserId pulumi.StringPtrInput
	// The URL to the Elasticsearch Service associated with this Elasticsearch.
	ElasticsearchServiceUrl pulumi.StringPtrInput
	// The URL to the Kibana Dashboard associated with this Elasticsearch.
	KibanaServiceUrl pulumi.StringPtrInput
	// The URI used for SSO to the Kibana Dashboard associated with this Elasticsearch.
	KibanaSsoUri pulumi.StringPtrInput
	// The Azure Region where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
	Location pulumi.StringPtrInput
	// A `logs` block as defined below.
	Logs ElasticsearchLogsPtrInput
	// Specifies if the Elasticsearch should have monitoring configured? Defaults to `true`. Changing this forces a new Elasticsearch to be created.
	MonitoringEnabled pulumi.BoolPtrInput
	// The name which should be used for this Elasticsearch resource. Changing this forces a new Elasticsearch to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Specifies the name of the SKU for this Elasticsearch. Changing this forces a new Elasticsearch to be created.
	//
	// > **NOTE:** The SKU depends on the Elasticsearch Plans available for your account and is a combination of PlanID_Term.
	// Ex: If the plan ID is "planXYZ" and term is "Yearly", the SKU will be "planXYZ_Yearly".
	// You may find your eligible plans [here](https://portal.azure.com/#view/Microsoft_Azure_Marketplace/GalleryItemDetailsBladeNopdl/id/elastic.ec-azure-pp) or in the online documentation [here](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/elastic.ec-azure-pp?tab=PlansAndPrice) for more details or in case of any issues with the SKU.
	SkuName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Elasticsearch resource.
	Tags pulumi.StringMapInput
}

func (ElasticsearchState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchState)(nil)).Elem()
}

type elasticsearchArgs struct {
	// Specifies the Email Address which should be associated with this Elasticsearch account. Changing this forces a new Elasticsearch to be created.
	ElasticCloudEmailAddress string `pulumi:"elasticCloudEmailAddress"`
	// The Azure Region where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
	Location *string `pulumi:"location"`
	// A `logs` block as defined below.
	Logs *ElasticsearchLogs `pulumi:"logs"`
	// Specifies if the Elasticsearch should have monitoring configured? Defaults to `true`. Changing this forces a new Elasticsearch to be created.
	MonitoringEnabled *bool `pulumi:"monitoringEnabled"`
	// The name which should be used for this Elasticsearch resource. Changing this forces a new Elasticsearch to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the name of the SKU for this Elasticsearch. Changing this forces a new Elasticsearch to be created.
	//
	// > **NOTE:** The SKU depends on the Elasticsearch Plans available for your account and is a combination of PlanID_Term.
	// Ex: If the plan ID is "planXYZ" and term is "Yearly", the SKU will be "planXYZ_Yearly".
	// You may find your eligible plans [here](https://portal.azure.com/#view/Microsoft_Azure_Marketplace/GalleryItemDetailsBladeNopdl/id/elastic.ec-azure-pp) or in the online documentation [here](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/elastic.ec-azure-pp?tab=PlansAndPrice) for more details or in case of any issues with the SKU.
	SkuName string `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the Elasticsearch resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Elasticsearch resource.
type ElasticsearchArgs struct {
	// Specifies the Email Address which should be associated with this Elasticsearch account. Changing this forces a new Elasticsearch to be created.
	ElasticCloudEmailAddress pulumi.StringInput
	// The Azure Region where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
	Location pulumi.StringPtrInput
	// A `logs` block as defined below.
	Logs ElasticsearchLogsPtrInput
	// Specifies if the Elasticsearch should have monitoring configured? Defaults to `true`. Changing this forces a new Elasticsearch to be created.
	MonitoringEnabled pulumi.BoolPtrInput
	// The name which should be used for this Elasticsearch resource. Changing this forces a new Elasticsearch to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
	ResourceGroupName pulumi.StringInput
	// Specifies the name of the SKU for this Elasticsearch. Changing this forces a new Elasticsearch to be created.
	//
	// > **NOTE:** The SKU depends on the Elasticsearch Plans available for your account and is a combination of PlanID_Term.
	// Ex: If the plan ID is "planXYZ" and term is "Yearly", the SKU will be "planXYZ_Yearly".
	// You may find your eligible plans [here](https://portal.azure.com/#view/Microsoft_Azure_Marketplace/GalleryItemDetailsBladeNopdl/id/elastic.ec-azure-pp) or in the online documentation [here](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/elastic.ec-azure-pp?tab=PlansAndPrice) for more details or in case of any issues with the SKU.
	SkuName pulumi.StringInput
	// A mapping of tags which should be assigned to the Elasticsearch resource.
	Tags pulumi.StringMapInput
}

func (ElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchArgs)(nil)).Elem()
}

type ElasticsearchInput interface {
	pulumi.Input

	ToElasticsearchOutput() ElasticsearchOutput
	ToElasticsearchOutputWithContext(ctx context.Context) ElasticsearchOutput
}

func (*Elasticsearch) ElementType() reflect.Type {
	return reflect.TypeOf((**Elasticsearch)(nil)).Elem()
}

func (i *Elasticsearch) ToElasticsearchOutput() ElasticsearchOutput {
	return i.ToElasticsearchOutputWithContext(context.Background())
}

func (i *Elasticsearch) ToElasticsearchOutputWithContext(ctx context.Context) ElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchOutput)
}

func (i *Elasticsearch) ToOutput(ctx context.Context) pulumix.Output[*Elasticsearch] {
	return pulumix.Output[*Elasticsearch]{
		OutputState: i.ToElasticsearchOutputWithContext(ctx).OutputState,
	}
}

// ElasticsearchArrayInput is an input type that accepts ElasticsearchArray and ElasticsearchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchArrayInput` via:
//
//	ElasticsearchArray{ ElasticsearchArgs{...} }
type ElasticsearchArrayInput interface {
	pulumi.Input

	ToElasticsearchArrayOutput() ElasticsearchArrayOutput
	ToElasticsearchArrayOutputWithContext(context.Context) ElasticsearchArrayOutput
}

type ElasticsearchArray []ElasticsearchInput

func (ElasticsearchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Elasticsearch)(nil)).Elem()
}

func (i ElasticsearchArray) ToElasticsearchArrayOutput() ElasticsearchArrayOutput {
	return i.ToElasticsearchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchArray) ToElasticsearchArrayOutputWithContext(ctx context.Context) ElasticsearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchArrayOutput)
}

func (i ElasticsearchArray) ToOutput(ctx context.Context) pulumix.Output[[]*Elasticsearch] {
	return pulumix.Output[[]*Elasticsearch]{
		OutputState: i.ToElasticsearchArrayOutputWithContext(ctx).OutputState,
	}
}

// ElasticsearchMapInput is an input type that accepts ElasticsearchMap and ElasticsearchMapOutput values.
// You can construct a concrete instance of `ElasticsearchMapInput` via:
//
//	ElasticsearchMap{ "key": ElasticsearchArgs{...} }
type ElasticsearchMapInput interface {
	pulumi.Input

	ToElasticsearchMapOutput() ElasticsearchMapOutput
	ToElasticsearchMapOutputWithContext(context.Context) ElasticsearchMapOutput
}

type ElasticsearchMap map[string]ElasticsearchInput

func (ElasticsearchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Elasticsearch)(nil)).Elem()
}

func (i ElasticsearchMap) ToElasticsearchMapOutput() ElasticsearchMapOutput {
	return i.ToElasticsearchMapOutputWithContext(context.Background())
}

func (i ElasticsearchMap) ToElasticsearchMapOutputWithContext(ctx context.Context) ElasticsearchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchMapOutput)
}

func (i ElasticsearchMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Elasticsearch] {
	return pulumix.Output[map[string]*Elasticsearch]{
		OutputState: i.ToElasticsearchMapOutputWithContext(ctx).OutputState,
	}
}

type ElasticsearchOutput struct{ *pulumi.OutputState }

func (ElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Elasticsearch)(nil)).Elem()
}

func (o ElasticsearchOutput) ToElasticsearchOutput() ElasticsearchOutput {
	return o
}

func (o ElasticsearchOutput) ToElasticsearchOutputWithContext(ctx context.Context) ElasticsearchOutput {
	return o
}

func (o ElasticsearchOutput) ToOutput(ctx context.Context) pulumix.Output[*Elasticsearch] {
	return pulumix.Output[*Elasticsearch]{
		OutputState: o.OutputState,
	}
}

// The ID of the Deployment within Elastic Cloud.
func (o ElasticsearchOutput) ElasticCloudDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.StringOutput { return v.ElasticCloudDeploymentId }).(pulumi.StringOutput)
}

// Specifies the Email Address which should be associated with this Elasticsearch account. Changing this forces a new Elasticsearch to be created.
func (o ElasticsearchOutput) ElasticCloudEmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.StringOutput { return v.ElasticCloudEmailAddress }).(pulumi.StringOutput)
}

// The Default URL used for Single Sign On (SSO) to Elastic Cloud.
func (o ElasticsearchOutput) ElasticCloudSsoDefaultUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.StringOutput { return v.ElasticCloudSsoDefaultUrl }).(pulumi.StringOutput)
}

// The ID of the User Account within Elastic Cloud.
func (o ElasticsearchOutput) ElasticCloudUserId() pulumi.StringOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.StringOutput { return v.ElasticCloudUserId }).(pulumi.StringOutput)
}

// The URL to the Elasticsearch Service associated with this Elasticsearch.
func (o ElasticsearchOutput) ElasticsearchServiceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.StringOutput { return v.ElasticsearchServiceUrl }).(pulumi.StringOutput)
}

// The URL to the Kibana Dashboard associated with this Elasticsearch.
func (o ElasticsearchOutput) KibanaServiceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.StringOutput { return v.KibanaServiceUrl }).(pulumi.StringOutput)
}

// The URI used for SSO to the Kibana Dashboard associated with this Elasticsearch.
func (o ElasticsearchOutput) KibanaSsoUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.StringOutput { return v.KibanaSsoUri }).(pulumi.StringOutput)
}

// The Azure Region where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
func (o ElasticsearchOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A `logs` block as defined below.
func (o ElasticsearchOutput) Logs() ElasticsearchLogsOutput {
	return o.ApplyT(func(v *Elasticsearch) ElasticsearchLogsOutput { return v.Logs }).(ElasticsearchLogsOutput)
}

// Specifies if the Elasticsearch should have monitoring configured? Defaults to `true`. Changing this forces a new Elasticsearch to be created.
func (o ElasticsearchOutput) MonitoringEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.BoolPtrOutput { return v.MonitoringEnabled }).(pulumi.BoolPtrOutput)
}

// The name which should be used for this Elasticsearch resource. Changing this forces a new Elasticsearch to be created.
func (o ElasticsearchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Elasticsearch resource should exist. Changing this forces a new Elasticsearch to be created.
func (o ElasticsearchOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Specifies the name of the SKU for this Elasticsearch. Changing this forces a new Elasticsearch to be created.
//
// > **NOTE:** The SKU depends on the Elasticsearch Plans available for your account and is a combination of PlanID_Term.
// Ex: If the plan ID is "planXYZ" and term is "Yearly", the SKU will be "planXYZ_Yearly".
// You may find your eligible plans [here](https://portal.azure.com/#view/Microsoft_Azure_Marketplace/GalleryItemDetailsBladeNopdl/id/elastic.ec-azure-pp) or in the online documentation [here](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/elastic.ec-azure-pp?tab=PlansAndPrice) for more details or in case of any issues with the SKU.
func (o ElasticsearchOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.StringOutput { return v.SkuName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Elasticsearch resource.
func (o ElasticsearchOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type ElasticsearchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Elasticsearch)(nil)).Elem()
}

func (o ElasticsearchArrayOutput) ToElasticsearchArrayOutput() ElasticsearchArrayOutput {
	return o
}

func (o ElasticsearchArrayOutput) ToElasticsearchArrayOutputWithContext(ctx context.Context) ElasticsearchArrayOutput {
	return o
}

func (o ElasticsearchArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Elasticsearch] {
	return pulumix.Output[[]*Elasticsearch]{
		OutputState: o.OutputState,
	}
}

func (o ElasticsearchArrayOutput) Index(i pulumi.IntInput) ElasticsearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Elasticsearch {
		return vs[0].([]*Elasticsearch)[vs[1].(int)]
	}).(ElasticsearchOutput)
}

type ElasticsearchMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Elasticsearch)(nil)).Elem()
}

func (o ElasticsearchMapOutput) ToElasticsearchMapOutput() ElasticsearchMapOutput {
	return o
}

func (o ElasticsearchMapOutput) ToElasticsearchMapOutputWithContext(ctx context.Context) ElasticsearchMapOutput {
	return o
}

func (o ElasticsearchMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Elasticsearch] {
	return pulumix.Output[map[string]*Elasticsearch]{
		OutputState: o.OutputState,
	}
}

func (o ElasticsearchMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Elasticsearch {
		return vs[0].(map[string]*Elasticsearch)[vs[1].(string)]
	}).(ElasticsearchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchInput)(nil)).Elem(), &Elasticsearch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchArrayInput)(nil)).Elem(), ElasticsearchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchMapInput)(nil)).Elem(), ElasticsearchMap{})
	pulumi.RegisterOutputType(ElasticsearchOutput{})
	pulumi.RegisterOutputType(ElasticsearchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchMapOutput{})
}
