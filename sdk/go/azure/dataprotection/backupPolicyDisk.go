// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataprotection

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Backup Policy Disk.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/dataprotection"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleBackupVault, err := dataprotection.NewBackupVault(ctx, "exampleBackupVault", &dataprotection.BackupVaultArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				DatastoreType:     pulumi.String("VaultStore"),
//				Redundancy:        pulumi.String("LocallyRedundant"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dataprotection.NewBackupPolicyDisk(ctx, "exampleBackupPolicyDisk", &dataprotection.BackupPolicyDiskArgs{
//				VaultId: exampleBackupVault.ID(),
//				BackupRepeatingTimeIntervals: pulumi.StringArray{
//					pulumi.String("R/2021-05-19T06:33:16+00:00/PT4H"),
//				},
//				DefaultRetentionDuration: pulumi.String("P7D"),
//				TimeZone:                 pulumi.String("W. Europe Standard Time"),
//				RetentionRules: dataprotection.BackupPolicyDiskRetentionRuleArray{
//					&dataprotection.BackupPolicyDiskRetentionRuleArgs{
//						Name:     pulumi.String("Daily"),
//						Duration: pulumi.String("P7D"),
//						Priority: pulumi.Int(25),
//						Criteria: &dataprotection.BackupPolicyDiskRetentionRuleCriteriaArgs{
//							AbsoluteCriteria: pulumi.String("FirstOfDay"),
//						},
//					},
//					&dataprotection.BackupPolicyDiskRetentionRuleArgs{
//						Name:     pulumi.String("Weekly"),
//						Duration: pulumi.String("P7D"),
//						Priority: pulumi.Int(20),
//						Criteria: &dataprotection.BackupPolicyDiskRetentionRuleCriteriaArgs{
//							AbsoluteCriteria: pulumi.String("FirstOfWeek"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Backup Policy Disks can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:dataprotection/backupPolicyDisk:BackupPolicyDisk example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1/backupPolicies/backupPolicy1
//
// ```
type BackupPolicyDisk struct {
	pulumi.CustomResourceState

	// Specifies a list of repeating time interval. It should follow `ISO 8601` repeating time interval . Changing this forces a new Backup Policy Disk to be created.
	BackupRepeatingTimeIntervals pulumi.StringArrayOutput `pulumi:"backupRepeatingTimeIntervals"`
	// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Disk to be created.
	DefaultRetentionDuration pulumi.StringOutput `pulumi:"defaultRetentionDuration"`
	// The name which should be used for this Backup Policy Disk. Changing this forces a new Backup Policy Disk to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy Disk to be created.
	RetentionRules BackupPolicyDiskRetentionRuleArrayOutput `pulumi:"retentionRules"`
	// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Disk to be created.
	TimeZone pulumi.StringPtrOutput `pulumi:"timeZone"`
	// The ID of the Backup Vault within which the Backup Policy Disk should exist. Changing this forces a new Backup Policy Disk to be created.
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
}

// NewBackupPolicyDisk registers a new resource with the given unique name, arguments, and options.
func NewBackupPolicyDisk(ctx *pulumi.Context,
	name string, args *BackupPolicyDiskArgs, opts ...pulumi.ResourceOption) (*BackupPolicyDisk, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupRepeatingTimeIntervals == nil {
		return nil, errors.New("invalid value for required argument 'BackupRepeatingTimeIntervals'")
	}
	if args.DefaultRetentionDuration == nil {
		return nil, errors.New("invalid value for required argument 'DefaultRetentionDuration'")
	}
	if args.VaultId == nil {
		return nil, errors.New("invalid value for required argument 'VaultId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupPolicyDisk
	err := ctx.RegisterResource("azure:dataprotection/backupPolicyDisk:BackupPolicyDisk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupPolicyDisk gets an existing BackupPolicyDisk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupPolicyDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupPolicyDiskState, opts ...pulumi.ResourceOption) (*BackupPolicyDisk, error) {
	var resource BackupPolicyDisk
	err := ctx.ReadResource("azure:dataprotection/backupPolicyDisk:BackupPolicyDisk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupPolicyDisk resources.
type backupPolicyDiskState struct {
	// Specifies a list of repeating time interval. It should follow `ISO 8601` repeating time interval . Changing this forces a new Backup Policy Disk to be created.
	BackupRepeatingTimeIntervals []string `pulumi:"backupRepeatingTimeIntervals"`
	// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Disk to be created.
	DefaultRetentionDuration *string `pulumi:"defaultRetentionDuration"`
	// The name which should be used for this Backup Policy Disk. Changing this forces a new Backup Policy Disk to be created.
	Name *string `pulumi:"name"`
	// One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy Disk to be created.
	RetentionRules []BackupPolicyDiskRetentionRule `pulumi:"retentionRules"`
	// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Disk to be created.
	TimeZone *string `pulumi:"timeZone"`
	// The ID of the Backup Vault within which the Backup Policy Disk should exist. Changing this forces a new Backup Policy Disk to be created.
	VaultId *string `pulumi:"vaultId"`
}

type BackupPolicyDiskState struct {
	// Specifies a list of repeating time interval. It should follow `ISO 8601` repeating time interval . Changing this forces a new Backup Policy Disk to be created.
	BackupRepeatingTimeIntervals pulumi.StringArrayInput
	// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Disk to be created.
	DefaultRetentionDuration pulumi.StringPtrInput
	// The name which should be used for this Backup Policy Disk. Changing this forces a new Backup Policy Disk to be created.
	Name pulumi.StringPtrInput
	// One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy Disk to be created.
	RetentionRules BackupPolicyDiskRetentionRuleArrayInput
	// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Disk to be created.
	TimeZone pulumi.StringPtrInput
	// The ID of the Backup Vault within which the Backup Policy Disk should exist. Changing this forces a new Backup Policy Disk to be created.
	VaultId pulumi.StringPtrInput
}

func (BackupPolicyDiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPolicyDiskState)(nil)).Elem()
}

type backupPolicyDiskArgs struct {
	// Specifies a list of repeating time interval. It should follow `ISO 8601` repeating time interval . Changing this forces a new Backup Policy Disk to be created.
	BackupRepeatingTimeIntervals []string `pulumi:"backupRepeatingTimeIntervals"`
	// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Disk to be created.
	DefaultRetentionDuration string `pulumi:"defaultRetentionDuration"`
	// The name which should be used for this Backup Policy Disk. Changing this forces a new Backup Policy Disk to be created.
	Name *string `pulumi:"name"`
	// One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy Disk to be created.
	RetentionRules []BackupPolicyDiskRetentionRule `pulumi:"retentionRules"`
	// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Disk to be created.
	TimeZone *string `pulumi:"timeZone"`
	// The ID of the Backup Vault within which the Backup Policy Disk should exist. Changing this forces a new Backup Policy Disk to be created.
	VaultId string `pulumi:"vaultId"`
}

// The set of arguments for constructing a BackupPolicyDisk resource.
type BackupPolicyDiskArgs struct {
	// Specifies a list of repeating time interval. It should follow `ISO 8601` repeating time interval . Changing this forces a new Backup Policy Disk to be created.
	BackupRepeatingTimeIntervals pulumi.StringArrayInput
	// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Disk to be created.
	DefaultRetentionDuration pulumi.StringInput
	// The name which should be used for this Backup Policy Disk. Changing this forces a new Backup Policy Disk to be created.
	Name pulumi.StringPtrInput
	// One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy Disk to be created.
	RetentionRules BackupPolicyDiskRetentionRuleArrayInput
	// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Disk to be created.
	TimeZone pulumi.StringPtrInput
	// The ID of the Backup Vault within which the Backup Policy Disk should exist. Changing this forces a new Backup Policy Disk to be created.
	VaultId pulumi.StringInput
}

func (BackupPolicyDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPolicyDiskArgs)(nil)).Elem()
}

type BackupPolicyDiskInput interface {
	pulumi.Input

	ToBackupPolicyDiskOutput() BackupPolicyDiskOutput
	ToBackupPolicyDiskOutputWithContext(ctx context.Context) BackupPolicyDiskOutput
}

func (*BackupPolicyDisk) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPolicyDisk)(nil)).Elem()
}

func (i *BackupPolicyDisk) ToBackupPolicyDiskOutput() BackupPolicyDiskOutput {
	return i.ToBackupPolicyDiskOutputWithContext(context.Background())
}

func (i *BackupPolicyDisk) ToBackupPolicyDiskOutputWithContext(ctx context.Context) BackupPolicyDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPolicyDiskOutput)
}

// BackupPolicyDiskArrayInput is an input type that accepts BackupPolicyDiskArray and BackupPolicyDiskArrayOutput values.
// You can construct a concrete instance of `BackupPolicyDiskArrayInput` via:
//
//	BackupPolicyDiskArray{ BackupPolicyDiskArgs{...} }
type BackupPolicyDiskArrayInput interface {
	pulumi.Input

	ToBackupPolicyDiskArrayOutput() BackupPolicyDiskArrayOutput
	ToBackupPolicyDiskArrayOutputWithContext(context.Context) BackupPolicyDiskArrayOutput
}

type BackupPolicyDiskArray []BackupPolicyDiskInput

func (BackupPolicyDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPolicyDisk)(nil)).Elem()
}

func (i BackupPolicyDiskArray) ToBackupPolicyDiskArrayOutput() BackupPolicyDiskArrayOutput {
	return i.ToBackupPolicyDiskArrayOutputWithContext(context.Background())
}

func (i BackupPolicyDiskArray) ToBackupPolicyDiskArrayOutputWithContext(ctx context.Context) BackupPolicyDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPolicyDiskArrayOutput)
}

// BackupPolicyDiskMapInput is an input type that accepts BackupPolicyDiskMap and BackupPolicyDiskMapOutput values.
// You can construct a concrete instance of `BackupPolicyDiskMapInput` via:
//
//	BackupPolicyDiskMap{ "key": BackupPolicyDiskArgs{...} }
type BackupPolicyDiskMapInput interface {
	pulumi.Input

	ToBackupPolicyDiskMapOutput() BackupPolicyDiskMapOutput
	ToBackupPolicyDiskMapOutputWithContext(context.Context) BackupPolicyDiskMapOutput
}

type BackupPolicyDiskMap map[string]BackupPolicyDiskInput

func (BackupPolicyDiskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPolicyDisk)(nil)).Elem()
}

func (i BackupPolicyDiskMap) ToBackupPolicyDiskMapOutput() BackupPolicyDiskMapOutput {
	return i.ToBackupPolicyDiskMapOutputWithContext(context.Background())
}

func (i BackupPolicyDiskMap) ToBackupPolicyDiskMapOutputWithContext(ctx context.Context) BackupPolicyDiskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPolicyDiskMapOutput)
}

type BackupPolicyDiskOutput struct{ *pulumi.OutputState }

func (BackupPolicyDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPolicyDisk)(nil)).Elem()
}

func (o BackupPolicyDiskOutput) ToBackupPolicyDiskOutput() BackupPolicyDiskOutput {
	return o
}

func (o BackupPolicyDiskOutput) ToBackupPolicyDiskOutputWithContext(ctx context.Context) BackupPolicyDiskOutput {
	return o
}

// Specifies a list of repeating time interval. It should follow `ISO 8601` repeating time interval . Changing this forces a new Backup Policy Disk to be created.
func (o BackupPolicyDiskOutput) BackupRepeatingTimeIntervals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackupPolicyDisk) pulumi.StringArrayOutput { return v.BackupRepeatingTimeIntervals }).(pulumi.StringArrayOutput)
}

// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy Disk to be created.
func (o BackupPolicyDiskOutput) DefaultRetentionDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPolicyDisk) pulumi.StringOutput { return v.DefaultRetentionDuration }).(pulumi.StringOutput)
}

// The name which should be used for this Backup Policy Disk. Changing this forces a new Backup Policy Disk to be created.
func (o BackupPolicyDiskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPolicyDisk) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy Disk to be created.
func (o BackupPolicyDiskOutput) RetentionRules() BackupPolicyDiskRetentionRuleArrayOutput {
	return o.ApplyT(func(v *BackupPolicyDisk) BackupPolicyDiskRetentionRuleArrayOutput { return v.RetentionRules }).(BackupPolicyDiskRetentionRuleArrayOutput)
}

// Specifies the Time Zone which should be used by the backup schedule. Changing this forces a new Backup Policy Disk to be created.
func (o BackupPolicyDiskOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupPolicyDisk) pulumi.StringPtrOutput { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// The ID of the Backup Vault within which the Backup Policy Disk should exist. Changing this forces a new Backup Policy Disk to be created.
func (o BackupPolicyDiskOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPolicyDisk) pulumi.StringOutput { return v.VaultId }).(pulumi.StringOutput)
}

type BackupPolicyDiskArrayOutput struct{ *pulumi.OutputState }

func (BackupPolicyDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPolicyDisk)(nil)).Elem()
}

func (o BackupPolicyDiskArrayOutput) ToBackupPolicyDiskArrayOutput() BackupPolicyDiskArrayOutput {
	return o
}

func (o BackupPolicyDiskArrayOutput) ToBackupPolicyDiskArrayOutputWithContext(ctx context.Context) BackupPolicyDiskArrayOutput {
	return o
}

func (o BackupPolicyDiskArrayOutput) Index(i pulumi.IntInput) BackupPolicyDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupPolicyDisk {
		return vs[0].([]*BackupPolicyDisk)[vs[1].(int)]
	}).(BackupPolicyDiskOutput)
}

type BackupPolicyDiskMapOutput struct{ *pulumi.OutputState }

func (BackupPolicyDiskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPolicyDisk)(nil)).Elem()
}

func (o BackupPolicyDiskMapOutput) ToBackupPolicyDiskMapOutput() BackupPolicyDiskMapOutput {
	return o
}

func (o BackupPolicyDiskMapOutput) ToBackupPolicyDiskMapOutputWithContext(ctx context.Context) BackupPolicyDiskMapOutput {
	return o
}

func (o BackupPolicyDiskMapOutput) MapIndex(k pulumi.StringInput) BackupPolicyDiskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupPolicyDisk {
		return vs[0].(map[string]*BackupPolicyDisk)[vs[1].(string)]
	}).(BackupPolicyDiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPolicyDiskInput)(nil)).Elem(), &BackupPolicyDisk{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPolicyDiskArrayInput)(nil)).Elem(), BackupPolicyDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPolicyDiskMapInput)(nil)).Elem(), BackupPolicyDiskMap{})
	pulumi.RegisterOutputType(BackupPolicyDiskOutput{})
	pulumi.RegisterOutputType(BackupPolicyDiskArrayOutput{})
	pulumi.RegisterOutputType(BackupPolicyDiskMapOutput{})
}
