// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataprotection

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Backup Instance to back up Disk.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/compute"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/dataprotection"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleManagedDisk, err := compute.NewManagedDisk(ctx, "exampleManagedDisk", &compute.ManagedDiskArgs{
//				Location:           exampleResourceGroup.Location,
//				ResourceGroupName:  exampleResourceGroup.Name,
//				StorageAccountType: pulumi.String("Standard_LRS"),
//				CreateOption:       pulumi.String("Empty"),
//				DiskSizeGb:         pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			exampleBackupVault, err := dataprotection.NewBackupVault(ctx, "exampleBackupVault", &dataprotection.BackupVaultArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				DatastoreType:     pulumi.String("VaultStore"),
//				Redundancy:        pulumi.String("LocallyRedundant"),
//				Identity: &dataprotection.BackupVaultIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authorization.NewAssignment(ctx, "example1", &authorization.AssignmentArgs{
//				Scope:              exampleResourceGroup.ID(),
//				RoleDefinitionName: pulumi.String("Disk Snapshot Contributor"),
//				PrincipalId: exampleBackupVault.Identity.ApplyT(func(identity dataprotection.BackupVaultIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authorization.NewAssignment(ctx, "example2", &authorization.AssignmentArgs{
//				Scope:              exampleManagedDisk.ID(),
//				RoleDefinitionName: pulumi.String("Disk Backup Reader"),
//				PrincipalId: exampleBackupVault.Identity.ApplyT(func(identity dataprotection.BackupVaultIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput),
//			})
//			if err != nil {
//				return err
//			}
//			exampleBackupPolicyDisk, err := dataprotection.NewBackupPolicyDisk(ctx, "exampleBackupPolicyDisk", &dataprotection.BackupPolicyDiskArgs{
//				VaultId: exampleBackupVault.ID(),
//				BackupRepeatingTimeIntervals: pulumi.StringArray{
//					pulumi.String("R/2021-05-19T06:33:16+00:00/PT4H"),
//				},
//				DefaultRetentionDuration: pulumi.String("P7D"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dataprotection.NewBackupInstanceDisk(ctx, "exampleBackupInstanceDisk", &dataprotection.BackupInstanceDiskArgs{
//				Location:                  exampleBackupVault.Location,
//				VaultId:                   exampleBackupVault.ID(),
//				DiskId:                    exampleManagedDisk.ID(),
//				SnapshotResourceGroupName: exampleResourceGroup.Name,
//				BackupPolicyId:            exampleBackupPolicyDisk.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Backup Instance Disks can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:dataprotection/backupInstanceDisk:BackupInstanceDisk example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1/backupInstances/backupInstance1
//
// ```
type BackupInstanceDisk struct {
	pulumi.CustomResourceState

	// The ID of the Backup Policy.
	BackupPolicyId pulumi.StringOutput `pulumi:"backupPolicyId"`
	// The ID of the source Disk. Changing this forces a new Backup Instance Disk to be created.
	DiskId pulumi.StringOutput `pulumi:"diskId"`
	// The Azure Region where the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Backup Instance Disk. Changing this forces a new Backup Instance Disk to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where snapshots are stored. Changing this forces a new Backup Instance Disk to be created.
	SnapshotResourceGroupName pulumi.StringOutput `pulumi:"snapshotResourceGroupName"`
	// The ID of the Backup Vault within which the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
}

// NewBackupInstanceDisk registers a new resource with the given unique name, arguments, and options.
func NewBackupInstanceDisk(ctx *pulumi.Context,
	name string, args *BackupInstanceDiskArgs, opts ...pulumi.ResourceOption) (*BackupInstanceDisk, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'BackupPolicyId'")
	}
	if args.DiskId == nil {
		return nil, errors.New("invalid value for required argument 'DiskId'")
	}
	if args.SnapshotResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'SnapshotResourceGroupName'")
	}
	if args.VaultId == nil {
		return nil, errors.New("invalid value for required argument 'VaultId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupInstanceDisk
	err := ctx.RegisterResource("azure:dataprotection/backupInstanceDisk:BackupInstanceDisk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupInstanceDisk gets an existing BackupInstanceDisk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupInstanceDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupInstanceDiskState, opts ...pulumi.ResourceOption) (*BackupInstanceDisk, error) {
	var resource BackupInstanceDisk
	err := ctx.ReadResource("azure:dataprotection/backupInstanceDisk:BackupInstanceDisk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupInstanceDisk resources.
type backupInstanceDiskState struct {
	// The ID of the Backup Policy.
	BackupPolicyId *string `pulumi:"backupPolicyId"`
	// The ID of the source Disk. Changing this forces a new Backup Instance Disk to be created.
	DiskId *string `pulumi:"diskId"`
	// The Azure Region where the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Backup Instance Disk. Changing this forces a new Backup Instance Disk to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where snapshots are stored. Changing this forces a new Backup Instance Disk to be created.
	SnapshotResourceGroupName *string `pulumi:"snapshotResourceGroupName"`
	// The ID of the Backup Vault within which the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	VaultId *string `pulumi:"vaultId"`
}

type BackupInstanceDiskState struct {
	// The ID of the Backup Policy.
	BackupPolicyId pulumi.StringPtrInput
	// The ID of the source Disk. Changing this forces a new Backup Instance Disk to be created.
	DiskId pulumi.StringPtrInput
	// The Azure Region where the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Backup Instance Disk. Changing this forces a new Backup Instance Disk to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where snapshots are stored. Changing this forces a new Backup Instance Disk to be created.
	SnapshotResourceGroupName pulumi.StringPtrInput
	// The ID of the Backup Vault within which the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	VaultId pulumi.StringPtrInput
}

func (BackupInstanceDiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupInstanceDiskState)(nil)).Elem()
}

type backupInstanceDiskArgs struct {
	// The ID of the Backup Policy.
	BackupPolicyId string `pulumi:"backupPolicyId"`
	// The ID of the source Disk. Changing this forces a new Backup Instance Disk to be created.
	DiskId string `pulumi:"diskId"`
	// The Azure Region where the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Backup Instance Disk. Changing this forces a new Backup Instance Disk to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where snapshots are stored. Changing this forces a new Backup Instance Disk to be created.
	SnapshotResourceGroupName string `pulumi:"snapshotResourceGroupName"`
	// The ID of the Backup Vault within which the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	VaultId string `pulumi:"vaultId"`
}

// The set of arguments for constructing a BackupInstanceDisk resource.
type BackupInstanceDiskArgs struct {
	// The ID of the Backup Policy.
	BackupPolicyId pulumi.StringInput
	// The ID of the source Disk. Changing this forces a new Backup Instance Disk to be created.
	DiskId pulumi.StringInput
	// The Azure Region where the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Backup Instance Disk. Changing this forces a new Backup Instance Disk to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where snapshots are stored. Changing this forces a new Backup Instance Disk to be created.
	SnapshotResourceGroupName pulumi.StringInput
	// The ID of the Backup Vault within which the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
	VaultId pulumi.StringInput
}

func (BackupInstanceDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupInstanceDiskArgs)(nil)).Elem()
}

type BackupInstanceDiskInput interface {
	pulumi.Input

	ToBackupInstanceDiskOutput() BackupInstanceDiskOutput
	ToBackupInstanceDiskOutputWithContext(ctx context.Context) BackupInstanceDiskOutput
}

func (*BackupInstanceDisk) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupInstanceDisk)(nil)).Elem()
}

func (i *BackupInstanceDisk) ToBackupInstanceDiskOutput() BackupInstanceDiskOutput {
	return i.ToBackupInstanceDiskOutputWithContext(context.Background())
}

func (i *BackupInstanceDisk) ToBackupInstanceDiskOutputWithContext(ctx context.Context) BackupInstanceDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInstanceDiskOutput)
}

// BackupInstanceDiskArrayInput is an input type that accepts BackupInstanceDiskArray and BackupInstanceDiskArrayOutput values.
// You can construct a concrete instance of `BackupInstanceDiskArrayInput` via:
//
//	BackupInstanceDiskArray{ BackupInstanceDiskArgs{...} }
type BackupInstanceDiskArrayInput interface {
	pulumi.Input

	ToBackupInstanceDiskArrayOutput() BackupInstanceDiskArrayOutput
	ToBackupInstanceDiskArrayOutputWithContext(context.Context) BackupInstanceDiskArrayOutput
}

type BackupInstanceDiskArray []BackupInstanceDiskInput

func (BackupInstanceDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupInstanceDisk)(nil)).Elem()
}

func (i BackupInstanceDiskArray) ToBackupInstanceDiskArrayOutput() BackupInstanceDiskArrayOutput {
	return i.ToBackupInstanceDiskArrayOutputWithContext(context.Background())
}

func (i BackupInstanceDiskArray) ToBackupInstanceDiskArrayOutputWithContext(ctx context.Context) BackupInstanceDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInstanceDiskArrayOutput)
}

// BackupInstanceDiskMapInput is an input type that accepts BackupInstanceDiskMap and BackupInstanceDiskMapOutput values.
// You can construct a concrete instance of `BackupInstanceDiskMapInput` via:
//
//	BackupInstanceDiskMap{ "key": BackupInstanceDiskArgs{...} }
type BackupInstanceDiskMapInput interface {
	pulumi.Input

	ToBackupInstanceDiskMapOutput() BackupInstanceDiskMapOutput
	ToBackupInstanceDiskMapOutputWithContext(context.Context) BackupInstanceDiskMapOutput
}

type BackupInstanceDiskMap map[string]BackupInstanceDiskInput

func (BackupInstanceDiskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupInstanceDisk)(nil)).Elem()
}

func (i BackupInstanceDiskMap) ToBackupInstanceDiskMapOutput() BackupInstanceDiskMapOutput {
	return i.ToBackupInstanceDiskMapOutputWithContext(context.Background())
}

func (i BackupInstanceDiskMap) ToBackupInstanceDiskMapOutputWithContext(ctx context.Context) BackupInstanceDiskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInstanceDiskMapOutput)
}

type BackupInstanceDiskOutput struct{ *pulumi.OutputState }

func (BackupInstanceDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupInstanceDisk)(nil)).Elem()
}

func (o BackupInstanceDiskOutput) ToBackupInstanceDiskOutput() BackupInstanceDiskOutput {
	return o
}

func (o BackupInstanceDiskOutput) ToBackupInstanceDiskOutputWithContext(ctx context.Context) BackupInstanceDiskOutput {
	return o
}

// The ID of the Backup Policy.
func (o BackupInstanceDiskOutput) BackupPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupInstanceDisk) pulumi.StringOutput { return v.BackupPolicyId }).(pulumi.StringOutput)
}

// The ID of the source Disk. Changing this forces a new Backup Instance Disk to be created.
func (o BackupInstanceDiskOutput) DiskId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupInstanceDisk) pulumi.StringOutput { return v.DiskId }).(pulumi.StringOutput)
}

// The Azure Region where the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
func (o BackupInstanceDiskOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupInstanceDisk) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Backup Instance Disk. Changing this forces a new Backup Instance Disk to be created.
func (o BackupInstanceDiskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupInstanceDisk) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where snapshots are stored. Changing this forces a new Backup Instance Disk to be created.
func (o BackupInstanceDiskOutput) SnapshotResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupInstanceDisk) pulumi.StringOutput { return v.SnapshotResourceGroupName }).(pulumi.StringOutput)
}

// The ID of the Backup Vault within which the Backup Instance Disk should exist. Changing this forces a new Backup Instance Disk to be created.
func (o BackupInstanceDiskOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupInstanceDisk) pulumi.StringOutput { return v.VaultId }).(pulumi.StringOutput)
}

type BackupInstanceDiskArrayOutput struct{ *pulumi.OutputState }

func (BackupInstanceDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupInstanceDisk)(nil)).Elem()
}

func (o BackupInstanceDiskArrayOutput) ToBackupInstanceDiskArrayOutput() BackupInstanceDiskArrayOutput {
	return o
}

func (o BackupInstanceDiskArrayOutput) ToBackupInstanceDiskArrayOutputWithContext(ctx context.Context) BackupInstanceDiskArrayOutput {
	return o
}

func (o BackupInstanceDiskArrayOutput) Index(i pulumi.IntInput) BackupInstanceDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupInstanceDisk {
		return vs[0].([]*BackupInstanceDisk)[vs[1].(int)]
	}).(BackupInstanceDiskOutput)
}

type BackupInstanceDiskMapOutput struct{ *pulumi.OutputState }

func (BackupInstanceDiskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupInstanceDisk)(nil)).Elem()
}

func (o BackupInstanceDiskMapOutput) ToBackupInstanceDiskMapOutput() BackupInstanceDiskMapOutput {
	return o
}

func (o BackupInstanceDiskMapOutput) ToBackupInstanceDiskMapOutputWithContext(ctx context.Context) BackupInstanceDiskMapOutput {
	return o
}

func (o BackupInstanceDiskMapOutput) MapIndex(k pulumi.StringInput) BackupInstanceDiskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupInstanceDisk {
		return vs[0].(map[string]*BackupInstanceDisk)[vs[1].(string)]
	}).(BackupInstanceDiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupInstanceDiskInput)(nil)).Elem(), &BackupInstanceDisk{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupInstanceDiskArrayInput)(nil)).Elem(), BackupInstanceDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupInstanceDiskMapInput)(nil)).Elem(), BackupInstanceDiskMap{})
	pulumi.RegisterOutputType(BackupInstanceDiskOutput{})
	pulumi.RegisterOutputType(BackupInstanceDiskArrayOutput{})
	pulumi.RegisterOutputType(BackupInstanceDiskMapOutput{})
}
