// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataprotection

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Backup Policy to back up PostgreSQL.
//
// ## Import
//
// Backup Policy PostgreSQL's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:dataprotection/backupPolicyPostgresql:BackupPolicyPostgresql example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1/backupPolicies/backupPolicy1
//
// ```
type BackupPolicyPostgresql struct {
	pulumi.CustomResourceState

	// Specifies a list of repeating time interval. It supports weekly back. It should follow `ISO 8601` repeating time interval. Changing this forces a new Backup Policy PostgreSQL to be created.
	BackupRepeatingTimeIntervals pulumi.StringArrayOutput `pulumi:"backupRepeatingTimeIntervals"`
	// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy PostgreSQL to be created.
	DefaultRetentionDuration pulumi.StringOutput `pulumi:"defaultRetentionDuration"`
	// The name which should be used for this Backup Policy PostgreSQL. Changing this forces a new Backup Policy PostgreSQL to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy PostgreSQL to be created.
	RetentionRules BackupPolicyPostgresqlRetentionRuleArrayOutput `pulumi:"retentionRules"`
	// The name of the Backup Vault where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
	VaultName pulumi.StringOutput `pulumi:"vaultName"`
}

// NewBackupPolicyPostgresql registers a new resource with the given unique name, arguments, and options.
func NewBackupPolicyPostgresql(ctx *pulumi.Context,
	name string, args *BackupPolicyPostgresqlArgs, opts ...pulumi.ResourceOption) (*BackupPolicyPostgresql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupRepeatingTimeIntervals == nil {
		return nil, errors.New("invalid value for required argument 'BackupRepeatingTimeIntervals'")
	}
	if args.DefaultRetentionDuration == nil {
		return nil, errors.New("invalid value for required argument 'DefaultRetentionDuration'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VaultName == nil {
		return nil, errors.New("invalid value for required argument 'VaultName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupPolicyPostgresql
	err := ctx.RegisterResource("azure:dataprotection/backupPolicyPostgresql:BackupPolicyPostgresql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupPolicyPostgresql gets an existing BackupPolicyPostgresql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupPolicyPostgresql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupPolicyPostgresqlState, opts ...pulumi.ResourceOption) (*BackupPolicyPostgresql, error) {
	var resource BackupPolicyPostgresql
	err := ctx.ReadResource("azure:dataprotection/backupPolicyPostgresql:BackupPolicyPostgresql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupPolicyPostgresql resources.
type backupPolicyPostgresqlState struct {
	// Specifies a list of repeating time interval. It supports weekly back. It should follow `ISO 8601` repeating time interval. Changing this forces a new Backup Policy PostgreSQL to be created.
	BackupRepeatingTimeIntervals []string `pulumi:"backupRepeatingTimeIntervals"`
	// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy PostgreSQL to be created.
	DefaultRetentionDuration *string `pulumi:"defaultRetentionDuration"`
	// The name which should be used for this Backup Policy PostgreSQL. Changing this forces a new Backup Policy PostgreSQL to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy PostgreSQL to be created.
	RetentionRules []BackupPolicyPostgresqlRetentionRule `pulumi:"retentionRules"`
	// The name of the Backup Vault where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
	VaultName *string `pulumi:"vaultName"`
}

type BackupPolicyPostgresqlState struct {
	// Specifies a list of repeating time interval. It supports weekly back. It should follow `ISO 8601` repeating time interval. Changing this forces a new Backup Policy PostgreSQL to be created.
	BackupRepeatingTimeIntervals pulumi.StringArrayInput
	// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy PostgreSQL to be created.
	DefaultRetentionDuration pulumi.StringPtrInput
	// The name which should be used for this Backup Policy PostgreSQL. Changing this forces a new Backup Policy PostgreSQL to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
	ResourceGroupName pulumi.StringPtrInput
	// One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy PostgreSQL to be created.
	RetentionRules BackupPolicyPostgresqlRetentionRuleArrayInput
	// The name of the Backup Vault where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
	VaultName pulumi.StringPtrInput
}

func (BackupPolicyPostgresqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPolicyPostgresqlState)(nil)).Elem()
}

type backupPolicyPostgresqlArgs struct {
	// Specifies a list of repeating time interval. It supports weekly back. It should follow `ISO 8601` repeating time interval. Changing this forces a new Backup Policy PostgreSQL to be created.
	BackupRepeatingTimeIntervals []string `pulumi:"backupRepeatingTimeIntervals"`
	// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy PostgreSQL to be created.
	DefaultRetentionDuration string `pulumi:"defaultRetentionDuration"`
	// The name which should be used for this Backup Policy PostgreSQL. Changing this forces a new Backup Policy PostgreSQL to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy PostgreSQL to be created.
	RetentionRules []BackupPolicyPostgresqlRetentionRule `pulumi:"retentionRules"`
	// The name of the Backup Vault where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
	VaultName string `pulumi:"vaultName"`
}

// The set of arguments for constructing a BackupPolicyPostgresql resource.
type BackupPolicyPostgresqlArgs struct {
	// Specifies a list of repeating time interval. It supports weekly back. It should follow `ISO 8601` repeating time interval. Changing this forces a new Backup Policy PostgreSQL to be created.
	BackupRepeatingTimeIntervals pulumi.StringArrayInput
	// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy PostgreSQL to be created.
	DefaultRetentionDuration pulumi.StringInput
	// The name which should be used for this Backup Policy PostgreSQL. Changing this forces a new Backup Policy PostgreSQL to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
	ResourceGroupName pulumi.StringInput
	// One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy PostgreSQL to be created.
	RetentionRules BackupPolicyPostgresqlRetentionRuleArrayInput
	// The name of the Backup Vault where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
	VaultName pulumi.StringInput
}

func (BackupPolicyPostgresqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPolicyPostgresqlArgs)(nil)).Elem()
}

type BackupPolicyPostgresqlInput interface {
	pulumi.Input

	ToBackupPolicyPostgresqlOutput() BackupPolicyPostgresqlOutput
	ToBackupPolicyPostgresqlOutputWithContext(ctx context.Context) BackupPolicyPostgresqlOutput
}

func (*BackupPolicyPostgresql) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPolicyPostgresql)(nil)).Elem()
}

func (i *BackupPolicyPostgresql) ToBackupPolicyPostgresqlOutput() BackupPolicyPostgresqlOutput {
	return i.ToBackupPolicyPostgresqlOutputWithContext(context.Background())
}

func (i *BackupPolicyPostgresql) ToBackupPolicyPostgresqlOutputWithContext(ctx context.Context) BackupPolicyPostgresqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPolicyPostgresqlOutput)
}

func (i *BackupPolicyPostgresql) ToOutput(ctx context.Context) pulumix.Output[*BackupPolicyPostgresql] {
	return pulumix.Output[*BackupPolicyPostgresql]{
		OutputState: i.ToBackupPolicyPostgresqlOutputWithContext(ctx).OutputState,
	}
}

// BackupPolicyPostgresqlArrayInput is an input type that accepts BackupPolicyPostgresqlArray and BackupPolicyPostgresqlArrayOutput values.
// You can construct a concrete instance of `BackupPolicyPostgresqlArrayInput` via:
//
//	BackupPolicyPostgresqlArray{ BackupPolicyPostgresqlArgs{...} }
type BackupPolicyPostgresqlArrayInput interface {
	pulumi.Input

	ToBackupPolicyPostgresqlArrayOutput() BackupPolicyPostgresqlArrayOutput
	ToBackupPolicyPostgresqlArrayOutputWithContext(context.Context) BackupPolicyPostgresqlArrayOutput
}

type BackupPolicyPostgresqlArray []BackupPolicyPostgresqlInput

func (BackupPolicyPostgresqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPolicyPostgresql)(nil)).Elem()
}

func (i BackupPolicyPostgresqlArray) ToBackupPolicyPostgresqlArrayOutput() BackupPolicyPostgresqlArrayOutput {
	return i.ToBackupPolicyPostgresqlArrayOutputWithContext(context.Background())
}

func (i BackupPolicyPostgresqlArray) ToBackupPolicyPostgresqlArrayOutputWithContext(ctx context.Context) BackupPolicyPostgresqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPolicyPostgresqlArrayOutput)
}

func (i BackupPolicyPostgresqlArray) ToOutput(ctx context.Context) pulumix.Output[[]*BackupPolicyPostgresql] {
	return pulumix.Output[[]*BackupPolicyPostgresql]{
		OutputState: i.ToBackupPolicyPostgresqlArrayOutputWithContext(ctx).OutputState,
	}
}

// BackupPolicyPostgresqlMapInput is an input type that accepts BackupPolicyPostgresqlMap and BackupPolicyPostgresqlMapOutput values.
// You can construct a concrete instance of `BackupPolicyPostgresqlMapInput` via:
//
//	BackupPolicyPostgresqlMap{ "key": BackupPolicyPostgresqlArgs{...} }
type BackupPolicyPostgresqlMapInput interface {
	pulumi.Input

	ToBackupPolicyPostgresqlMapOutput() BackupPolicyPostgresqlMapOutput
	ToBackupPolicyPostgresqlMapOutputWithContext(context.Context) BackupPolicyPostgresqlMapOutput
}

type BackupPolicyPostgresqlMap map[string]BackupPolicyPostgresqlInput

func (BackupPolicyPostgresqlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPolicyPostgresql)(nil)).Elem()
}

func (i BackupPolicyPostgresqlMap) ToBackupPolicyPostgresqlMapOutput() BackupPolicyPostgresqlMapOutput {
	return i.ToBackupPolicyPostgresqlMapOutputWithContext(context.Background())
}

func (i BackupPolicyPostgresqlMap) ToBackupPolicyPostgresqlMapOutputWithContext(ctx context.Context) BackupPolicyPostgresqlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPolicyPostgresqlMapOutput)
}

func (i BackupPolicyPostgresqlMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*BackupPolicyPostgresql] {
	return pulumix.Output[map[string]*BackupPolicyPostgresql]{
		OutputState: i.ToBackupPolicyPostgresqlMapOutputWithContext(ctx).OutputState,
	}
}

type BackupPolicyPostgresqlOutput struct{ *pulumi.OutputState }

func (BackupPolicyPostgresqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPolicyPostgresql)(nil)).Elem()
}

func (o BackupPolicyPostgresqlOutput) ToBackupPolicyPostgresqlOutput() BackupPolicyPostgresqlOutput {
	return o
}

func (o BackupPolicyPostgresqlOutput) ToBackupPolicyPostgresqlOutputWithContext(ctx context.Context) BackupPolicyPostgresqlOutput {
	return o
}

func (o BackupPolicyPostgresqlOutput) ToOutput(ctx context.Context) pulumix.Output[*BackupPolicyPostgresql] {
	return pulumix.Output[*BackupPolicyPostgresql]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of repeating time interval. It supports weekly back. It should follow `ISO 8601` repeating time interval. Changing this forces a new Backup Policy PostgreSQL to be created.
func (o BackupPolicyPostgresqlOutput) BackupRepeatingTimeIntervals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackupPolicyPostgresql) pulumi.StringArrayOutput { return v.BackupRepeatingTimeIntervals }).(pulumi.StringArrayOutput)
}

// The duration of default retention rule. It should follow `ISO 8601` duration format. Changing this forces a new Backup Policy PostgreSQL to be created.
func (o BackupPolicyPostgresqlOutput) DefaultRetentionDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPolicyPostgresql) pulumi.StringOutput { return v.DefaultRetentionDuration }).(pulumi.StringOutput)
}

// The name which should be used for this Backup Policy PostgreSQL. Changing this forces a new Backup Policy PostgreSQL to be created.
func (o BackupPolicyPostgresqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPolicyPostgresql) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
func (o BackupPolicyPostgresqlOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPolicyPostgresql) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// One or more `retentionRule` blocks as defined below. Changing this forces a new Backup Policy PostgreSQL to be created.
func (o BackupPolicyPostgresqlOutput) RetentionRules() BackupPolicyPostgresqlRetentionRuleArrayOutput {
	return o.ApplyT(func(v *BackupPolicyPostgresql) BackupPolicyPostgresqlRetentionRuleArrayOutput {
		return v.RetentionRules
	}).(BackupPolicyPostgresqlRetentionRuleArrayOutput)
}

// The name of the Backup Vault where the Backup Policy PostgreSQL should exist. Changing this forces a new Backup Policy PostgreSQL to be created.
func (o BackupPolicyPostgresqlOutput) VaultName() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPolicyPostgresql) pulumi.StringOutput { return v.VaultName }).(pulumi.StringOutput)
}

type BackupPolicyPostgresqlArrayOutput struct{ *pulumi.OutputState }

func (BackupPolicyPostgresqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPolicyPostgresql)(nil)).Elem()
}

func (o BackupPolicyPostgresqlArrayOutput) ToBackupPolicyPostgresqlArrayOutput() BackupPolicyPostgresqlArrayOutput {
	return o
}

func (o BackupPolicyPostgresqlArrayOutput) ToBackupPolicyPostgresqlArrayOutputWithContext(ctx context.Context) BackupPolicyPostgresqlArrayOutput {
	return o
}

func (o BackupPolicyPostgresqlArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*BackupPolicyPostgresql] {
	return pulumix.Output[[]*BackupPolicyPostgresql]{
		OutputState: o.OutputState,
	}
}

func (o BackupPolicyPostgresqlArrayOutput) Index(i pulumi.IntInput) BackupPolicyPostgresqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupPolicyPostgresql {
		return vs[0].([]*BackupPolicyPostgresql)[vs[1].(int)]
	}).(BackupPolicyPostgresqlOutput)
}

type BackupPolicyPostgresqlMapOutput struct{ *pulumi.OutputState }

func (BackupPolicyPostgresqlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPolicyPostgresql)(nil)).Elem()
}

func (o BackupPolicyPostgresqlMapOutput) ToBackupPolicyPostgresqlMapOutput() BackupPolicyPostgresqlMapOutput {
	return o
}

func (o BackupPolicyPostgresqlMapOutput) ToBackupPolicyPostgresqlMapOutputWithContext(ctx context.Context) BackupPolicyPostgresqlMapOutput {
	return o
}

func (o BackupPolicyPostgresqlMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*BackupPolicyPostgresql] {
	return pulumix.Output[map[string]*BackupPolicyPostgresql]{
		OutputState: o.OutputState,
	}
}

func (o BackupPolicyPostgresqlMapOutput) MapIndex(k pulumi.StringInput) BackupPolicyPostgresqlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupPolicyPostgresql {
		return vs[0].(map[string]*BackupPolicyPostgresql)[vs[1].(string)]
	}).(BackupPolicyPostgresqlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPolicyPostgresqlInput)(nil)).Elem(), &BackupPolicyPostgresql{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPolicyPostgresqlArrayInput)(nil)).Elem(), BackupPolicyPostgresqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPolicyPostgresqlMapInput)(nil)).Elem(), BackupPolicyPostgresqlMap{})
	pulumi.RegisterOutputType(BackupPolicyPostgresqlOutput{})
	pulumi.RegisterOutputType(BackupPolicyPostgresqlArrayOutput{})
	pulumi.RegisterOutputType(BackupPolicyPostgresqlMapOutput{})
}
