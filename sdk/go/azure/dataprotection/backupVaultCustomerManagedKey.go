// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataprotection

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Backup Vault Customer Managed Key.
//
// !> **Note:** It is not possible to remove the Customer Managed Key from the Backup Vault once it's been added. To remove the Customer Managed Key, the parent Data Protection Backup Vault must be deleted and recreated.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/dataprotection"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleBackupVault, err := dataprotection.NewBackupVault(ctx, "example", &dataprotection.BackupVaultArgs{
//				Name:              pulumi.String("example-backup-vault"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				DatastoreType:     pulumi.String("VaultStore"),
//				Redundancy:        pulumi.String("LocallyRedundant"),
//				Identity: &dataprotection.BackupVaultIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
//				Name:                     pulumi.String("example-key-vault"),
//				Location:                 example.Location,
//				ResourceGroupName:        example.Name,
//				EnabledForDiskEncryption: pulumi.Bool(true),
//				TenantId:                 pulumi.String(current.TenantId),
//				SoftDeleteRetentionDays:  pulumi.Int(7),
//				PurgeProtectionEnabled:   pulumi.Bool(true),
//				SkuName:                  pulumi.String("standard"),
//				AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: pulumi.String(current.TenantId),
//						ObjectId: pulumi.String(current.ObjectId),
//						KeyPermissions: pulumi.StringArray{
//							pulumi.String("Create"),
//							pulumi.String("Decrypt"),
//							pulumi.String("Encrypt"),
//							pulumi.String("Delete"),
//							pulumi.String("Get"),
//							pulumi.String("List"),
//							pulumi.String("Purge"),
//							pulumi.String("UnwrapKey"),
//							pulumi.String("WrapKey"),
//							pulumi.String("Verify"),
//							pulumi.String("GetRotationPolicy"),
//						},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Set"),
//						},
//					},
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: exampleBackupVault.Identity.ApplyT(func(identity dataprotection.BackupVaultIdentity) (*string, error) {
//							return &identity.TenantId, nil
//						}).(pulumi.StringPtrOutput),
//						ObjectId: exampleBackupVault.Identity.ApplyT(func(identity dataprotection.BackupVaultIdentity) (*string, error) {
//							return &identity.PrincipalId, nil
//						}).(pulumi.StringPtrOutput),
//						KeyPermissions: pulumi.StringArray{
//							pulumi.String("Create"),
//							pulumi.String("Decrypt"),
//							pulumi.String("Encrypt"),
//							pulumi.String("Delete"),
//							pulumi.String("Get"),
//							pulumi.String("List"),
//							pulumi.String("Purge"),
//							pulumi.String("UnwrapKey"),
//							pulumi.String("WrapKey"),
//							pulumi.String("Verify"),
//							pulumi.String("GetRotationPolicy"),
//						},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Set"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleKey, err := keyvault.NewKey(ctx, "example", &keyvault.KeyArgs{
//				Name:       pulumi.String("example-key"),
//				KeyVaultId: exampleKeyVault.ID(),
//				KeyType:    pulumi.String("RSA"),
//				KeySize:    pulumi.Int(2048),
//				KeyOpts: pulumi.StringArray{
//					pulumi.String("decrypt"),
//					pulumi.String("encrypt"),
//					pulumi.String("sign"),
//					pulumi.String("unwrapKey"),
//					pulumi.String("verify"),
//					pulumi.String("wrapKey"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dataprotection.NewBackupVaultCustomerManagedKey(ctx, "example", &dataprotection.BackupVaultCustomerManagedKeyArgs{
//				DataProtectionBackupVaultId: exampleBackupVault.ID(),
//				KeyVaultKeyId:               exampleKey.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.DataProtection`: 2024-04-01
//
// ## Import
//
// Backup Vault Customer Managed Keys can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:dataprotection/backupVaultCustomerManagedKey:BackupVaultCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1
// ```
type BackupVaultCustomerManagedKey struct {
	pulumi.CustomResourceState

	// The ID of the Backup Vault. Changing this forces a new resource to be created.
	DataProtectionBackupVaultId pulumi.StringOutput `pulumi:"dataProtectionBackupVaultId"`
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Backup Vault.
	KeyVaultKeyId pulumi.StringOutput `pulumi:"keyVaultKeyId"`
}

// NewBackupVaultCustomerManagedKey registers a new resource with the given unique name, arguments, and options.
func NewBackupVaultCustomerManagedKey(ctx *pulumi.Context,
	name string, args *BackupVaultCustomerManagedKeyArgs, opts ...pulumi.ResourceOption) (*BackupVaultCustomerManagedKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataProtectionBackupVaultId == nil {
		return nil, errors.New("invalid value for required argument 'DataProtectionBackupVaultId'")
	}
	if args.KeyVaultKeyId == nil {
		return nil, errors.New("invalid value for required argument 'KeyVaultKeyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupVaultCustomerManagedKey
	err := ctx.RegisterResource("azure:dataprotection/backupVaultCustomerManagedKey:BackupVaultCustomerManagedKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupVaultCustomerManagedKey gets an existing BackupVaultCustomerManagedKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupVaultCustomerManagedKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupVaultCustomerManagedKeyState, opts ...pulumi.ResourceOption) (*BackupVaultCustomerManagedKey, error) {
	var resource BackupVaultCustomerManagedKey
	err := ctx.ReadResource("azure:dataprotection/backupVaultCustomerManagedKey:BackupVaultCustomerManagedKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupVaultCustomerManagedKey resources.
type backupVaultCustomerManagedKeyState struct {
	// The ID of the Backup Vault. Changing this forces a new resource to be created.
	DataProtectionBackupVaultId *string `pulumi:"dataProtectionBackupVaultId"`
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Backup Vault.
	KeyVaultKeyId *string `pulumi:"keyVaultKeyId"`
}

type BackupVaultCustomerManagedKeyState struct {
	// The ID of the Backup Vault. Changing this forces a new resource to be created.
	DataProtectionBackupVaultId pulumi.StringPtrInput
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Backup Vault.
	KeyVaultKeyId pulumi.StringPtrInput
}

func (BackupVaultCustomerManagedKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupVaultCustomerManagedKeyState)(nil)).Elem()
}

type backupVaultCustomerManagedKeyArgs struct {
	// The ID of the Backup Vault. Changing this forces a new resource to be created.
	DataProtectionBackupVaultId string `pulumi:"dataProtectionBackupVaultId"`
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Backup Vault.
	KeyVaultKeyId string `pulumi:"keyVaultKeyId"`
}

// The set of arguments for constructing a BackupVaultCustomerManagedKey resource.
type BackupVaultCustomerManagedKeyArgs struct {
	// The ID of the Backup Vault. Changing this forces a new resource to be created.
	DataProtectionBackupVaultId pulumi.StringInput
	// The ID of the Key Vault Key which should be used to Encrypt the data in this Backup Vault.
	KeyVaultKeyId pulumi.StringInput
}

func (BackupVaultCustomerManagedKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupVaultCustomerManagedKeyArgs)(nil)).Elem()
}

type BackupVaultCustomerManagedKeyInput interface {
	pulumi.Input

	ToBackupVaultCustomerManagedKeyOutput() BackupVaultCustomerManagedKeyOutput
	ToBackupVaultCustomerManagedKeyOutputWithContext(ctx context.Context) BackupVaultCustomerManagedKeyOutput
}

func (*BackupVaultCustomerManagedKey) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupVaultCustomerManagedKey)(nil)).Elem()
}

func (i *BackupVaultCustomerManagedKey) ToBackupVaultCustomerManagedKeyOutput() BackupVaultCustomerManagedKeyOutput {
	return i.ToBackupVaultCustomerManagedKeyOutputWithContext(context.Background())
}

func (i *BackupVaultCustomerManagedKey) ToBackupVaultCustomerManagedKeyOutputWithContext(ctx context.Context) BackupVaultCustomerManagedKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupVaultCustomerManagedKeyOutput)
}

// BackupVaultCustomerManagedKeyArrayInput is an input type that accepts BackupVaultCustomerManagedKeyArray and BackupVaultCustomerManagedKeyArrayOutput values.
// You can construct a concrete instance of `BackupVaultCustomerManagedKeyArrayInput` via:
//
//	BackupVaultCustomerManagedKeyArray{ BackupVaultCustomerManagedKeyArgs{...} }
type BackupVaultCustomerManagedKeyArrayInput interface {
	pulumi.Input

	ToBackupVaultCustomerManagedKeyArrayOutput() BackupVaultCustomerManagedKeyArrayOutput
	ToBackupVaultCustomerManagedKeyArrayOutputWithContext(context.Context) BackupVaultCustomerManagedKeyArrayOutput
}

type BackupVaultCustomerManagedKeyArray []BackupVaultCustomerManagedKeyInput

func (BackupVaultCustomerManagedKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupVaultCustomerManagedKey)(nil)).Elem()
}

func (i BackupVaultCustomerManagedKeyArray) ToBackupVaultCustomerManagedKeyArrayOutput() BackupVaultCustomerManagedKeyArrayOutput {
	return i.ToBackupVaultCustomerManagedKeyArrayOutputWithContext(context.Background())
}

func (i BackupVaultCustomerManagedKeyArray) ToBackupVaultCustomerManagedKeyArrayOutputWithContext(ctx context.Context) BackupVaultCustomerManagedKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupVaultCustomerManagedKeyArrayOutput)
}

// BackupVaultCustomerManagedKeyMapInput is an input type that accepts BackupVaultCustomerManagedKeyMap and BackupVaultCustomerManagedKeyMapOutput values.
// You can construct a concrete instance of `BackupVaultCustomerManagedKeyMapInput` via:
//
//	BackupVaultCustomerManagedKeyMap{ "key": BackupVaultCustomerManagedKeyArgs{...} }
type BackupVaultCustomerManagedKeyMapInput interface {
	pulumi.Input

	ToBackupVaultCustomerManagedKeyMapOutput() BackupVaultCustomerManagedKeyMapOutput
	ToBackupVaultCustomerManagedKeyMapOutputWithContext(context.Context) BackupVaultCustomerManagedKeyMapOutput
}

type BackupVaultCustomerManagedKeyMap map[string]BackupVaultCustomerManagedKeyInput

func (BackupVaultCustomerManagedKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupVaultCustomerManagedKey)(nil)).Elem()
}

func (i BackupVaultCustomerManagedKeyMap) ToBackupVaultCustomerManagedKeyMapOutput() BackupVaultCustomerManagedKeyMapOutput {
	return i.ToBackupVaultCustomerManagedKeyMapOutputWithContext(context.Background())
}

func (i BackupVaultCustomerManagedKeyMap) ToBackupVaultCustomerManagedKeyMapOutputWithContext(ctx context.Context) BackupVaultCustomerManagedKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupVaultCustomerManagedKeyMapOutput)
}

type BackupVaultCustomerManagedKeyOutput struct{ *pulumi.OutputState }

func (BackupVaultCustomerManagedKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupVaultCustomerManagedKey)(nil)).Elem()
}

func (o BackupVaultCustomerManagedKeyOutput) ToBackupVaultCustomerManagedKeyOutput() BackupVaultCustomerManagedKeyOutput {
	return o
}

func (o BackupVaultCustomerManagedKeyOutput) ToBackupVaultCustomerManagedKeyOutputWithContext(ctx context.Context) BackupVaultCustomerManagedKeyOutput {
	return o
}

// The ID of the Backup Vault. Changing this forces a new resource to be created.
func (o BackupVaultCustomerManagedKeyOutput) DataProtectionBackupVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVaultCustomerManagedKey) pulumi.StringOutput { return v.DataProtectionBackupVaultId }).(pulumi.StringOutput)
}

// The ID of the Key Vault Key which should be used to Encrypt the data in this Backup Vault.
func (o BackupVaultCustomerManagedKeyOutput) KeyVaultKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupVaultCustomerManagedKey) pulumi.StringOutput { return v.KeyVaultKeyId }).(pulumi.StringOutput)
}

type BackupVaultCustomerManagedKeyArrayOutput struct{ *pulumi.OutputState }

func (BackupVaultCustomerManagedKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupVaultCustomerManagedKey)(nil)).Elem()
}

func (o BackupVaultCustomerManagedKeyArrayOutput) ToBackupVaultCustomerManagedKeyArrayOutput() BackupVaultCustomerManagedKeyArrayOutput {
	return o
}

func (o BackupVaultCustomerManagedKeyArrayOutput) ToBackupVaultCustomerManagedKeyArrayOutputWithContext(ctx context.Context) BackupVaultCustomerManagedKeyArrayOutput {
	return o
}

func (o BackupVaultCustomerManagedKeyArrayOutput) Index(i pulumi.IntInput) BackupVaultCustomerManagedKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupVaultCustomerManagedKey {
		return vs[0].([]*BackupVaultCustomerManagedKey)[vs[1].(int)]
	}).(BackupVaultCustomerManagedKeyOutput)
}

type BackupVaultCustomerManagedKeyMapOutput struct{ *pulumi.OutputState }

func (BackupVaultCustomerManagedKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupVaultCustomerManagedKey)(nil)).Elem()
}

func (o BackupVaultCustomerManagedKeyMapOutput) ToBackupVaultCustomerManagedKeyMapOutput() BackupVaultCustomerManagedKeyMapOutput {
	return o
}

func (o BackupVaultCustomerManagedKeyMapOutput) ToBackupVaultCustomerManagedKeyMapOutputWithContext(ctx context.Context) BackupVaultCustomerManagedKeyMapOutput {
	return o
}

func (o BackupVaultCustomerManagedKeyMapOutput) MapIndex(k pulumi.StringInput) BackupVaultCustomerManagedKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupVaultCustomerManagedKey {
		return vs[0].(map[string]*BackupVaultCustomerManagedKey)[vs[1].(string)]
	}).(BackupVaultCustomerManagedKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupVaultCustomerManagedKeyInput)(nil)).Elem(), &BackupVaultCustomerManagedKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupVaultCustomerManagedKeyArrayInput)(nil)).Elem(), BackupVaultCustomerManagedKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupVaultCustomerManagedKeyMapInput)(nil)).Elem(), BackupVaultCustomerManagedKeyMap{})
	pulumi.RegisterOutputType(BackupVaultCustomerManagedKeyOutput{})
	pulumi.RegisterOutputType(BackupVaultCustomerManagedKeyArrayOutput{})
	pulumi.RegisterOutputType(BackupVaultCustomerManagedKeyMapOutput{})
}
