// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dataprotection

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Backup Instance to back up PostgreSQL.
//
// > **Note**: Before using this resource, there are some prerequisite permissions for configure backup and restore. See more details from https://docs.microsoft.com/en-us/azure/backup/backup-azure-database-postgresql#prerequisite-permissions-for-configure-backup-and-restore.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/dataprotection"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/postgresql"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		rg, err := core.NewResourceGroup(ctx, "rg", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleServer, err := postgresql.NewServer(ctx, "exampleServer", &postgresql.ServerArgs{
// 			Location:                   pulumi.Any(azurerm_resource_group.Example.Location),
// 			ResourceGroupName:          pulumi.Any(azurerm_resource_group.Example.Name),
// 			SkuName:                    pulumi.String("B_Gen5_2"),
// 			StorageMb:                  pulumi.Int(5120),
// 			BackupRetentionDays:        pulumi.Int(7),
// 			GeoRedundantBackupEnabled:  pulumi.Bool(false),
// 			AutoGrowEnabled:            pulumi.Bool(true),
// 			AdministratorLogin:         pulumi.String("psqladminun"),
// 			AdministratorLoginPassword: pulumi.String("H@Sh1CoR3!"),
// 			Version:                    pulumi.String("9.5"),
// 			SslEnforcementEnabled:      pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleDatabase, err := postgresql.NewDatabase(ctx, "exampleDatabase", &postgresql.DatabaseArgs{
// 			ResourceGroupName: pulumi.Any(azurerm_resource_group.Example.Name),
// 			ServerName:        exampleServer.Name,
// 			Charset:           pulumi.String("UTF8"),
// 			Collation:         pulumi.String("English_United States.1252"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleBackupVault, err := dataprotection.NewBackupVault(ctx, "exampleBackupVault", &dataprotection.BackupVaultArgs{
// 			ResourceGroupName: rg.Name,
// 			Location:          rg.Location,
// 			DatastoreType:     pulumi.String("VaultStore"),
// 			Redundancy:        pulumi.String("LocallyRedundant"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleBackupPolicyPostgresql, err := dataprotection.NewBackupPolicyPostgresql(ctx, "exampleBackupPolicyPostgresql", &dataprotection.BackupPolicyPostgresqlArgs{
// 			ResourceGroupName: rg.Name,
// 			VaultName:         exampleBackupVault.Name,
// 			BackupRepeatingTimeIntervals: pulumi.StringArray{
// 				pulumi.String("R/2021-05-23T02:30:00+00:00/P1W"),
// 			},
// 			DefaultRetentionDuration: pulumi.String("P4M"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = dataprotection.NewBackupInstancePostgresql(ctx, "exampleBackupInstancePostgresql", &dataprotection.BackupInstancePostgresqlArgs{
// 			Location:       rg.Location,
// 			VaultId:        exampleBackupVault.ID(),
// 			DatabaseId:     exampleDatabase.ID(),
// 			BackupPolicyId: exampleBackupPolicyPostgresql.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Backup Instance PostgreSQL can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:dataprotection/backupInstancePostgresql:BackupInstancePostgresql example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1/backupInstances/backupInstance1
// ```
type BackupInstancePostgresql struct {
	pulumi.CustomResourceState

	// The ID of the Backup Policy.
	BackupPolicyId pulumi.StringOutput `pulumi:"backupPolicyId"`
	// The ID of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// The location of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Backup Instance PostgreSQL. Changing this forces a new Backup Instance PostgreSQL to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Backup Vault within which the PostgreSQL Backup Instance should exist. Changing this forces a new Backup Instance PostgreSQL to be created.
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
}

// NewBackupInstancePostgresql registers a new resource with the given unique name, arguments, and options.
func NewBackupInstancePostgresql(ctx *pulumi.Context,
	name string, args *BackupInstancePostgresqlArgs, opts ...pulumi.ResourceOption) (*BackupInstancePostgresql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'BackupPolicyId'")
	}
	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.VaultId == nil {
		return nil, errors.New("invalid value for required argument 'VaultId'")
	}
	var resource BackupInstancePostgresql
	err := ctx.RegisterResource("azure:dataprotection/backupInstancePostgresql:BackupInstancePostgresql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupInstancePostgresql gets an existing BackupInstancePostgresql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupInstancePostgresql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupInstancePostgresqlState, opts ...pulumi.ResourceOption) (*BackupInstancePostgresql, error) {
	var resource BackupInstancePostgresql
	err := ctx.ReadResource("azure:dataprotection/backupInstancePostgresql:BackupInstancePostgresql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupInstancePostgresql resources.
type backupInstancePostgresqlState struct {
	// The ID of the Backup Policy.
	BackupPolicyId *string `pulumi:"backupPolicyId"`
	// The ID of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
	DatabaseId *string `pulumi:"databaseId"`
	// The location of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Backup Instance PostgreSQL. Changing this forces a new Backup Instance PostgreSQL to be created.
	Name *string `pulumi:"name"`
	// The ID of the Backup Vault within which the PostgreSQL Backup Instance should exist. Changing this forces a new Backup Instance PostgreSQL to be created.
	VaultId *string `pulumi:"vaultId"`
}

type BackupInstancePostgresqlState struct {
	// The ID of the Backup Policy.
	BackupPolicyId pulumi.StringPtrInput
	// The ID of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
	DatabaseId pulumi.StringPtrInput
	// The location of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Backup Instance PostgreSQL. Changing this forces a new Backup Instance PostgreSQL to be created.
	Name pulumi.StringPtrInput
	// The ID of the Backup Vault within which the PostgreSQL Backup Instance should exist. Changing this forces a new Backup Instance PostgreSQL to be created.
	VaultId pulumi.StringPtrInput
}

func (BackupInstancePostgresqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupInstancePostgresqlState)(nil)).Elem()
}

type backupInstancePostgresqlArgs struct {
	// The ID of the Backup Policy.
	BackupPolicyId string `pulumi:"backupPolicyId"`
	// The ID of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
	DatabaseId string `pulumi:"databaseId"`
	// The location of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Backup Instance PostgreSQL. Changing this forces a new Backup Instance PostgreSQL to be created.
	Name *string `pulumi:"name"`
	// The ID of the Backup Vault within which the PostgreSQL Backup Instance should exist. Changing this forces a new Backup Instance PostgreSQL to be created.
	VaultId string `pulumi:"vaultId"`
}

// The set of arguments for constructing a BackupInstancePostgresql resource.
type BackupInstancePostgresqlArgs struct {
	// The ID of the Backup Policy.
	BackupPolicyId pulumi.StringInput
	// The ID of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
	DatabaseId pulumi.StringInput
	// The location of the source database. Changing this forces a new Backup Instance PostgreSQL to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Backup Instance PostgreSQL. Changing this forces a new Backup Instance PostgreSQL to be created.
	Name pulumi.StringPtrInput
	// The ID of the Backup Vault within which the PostgreSQL Backup Instance should exist. Changing this forces a new Backup Instance PostgreSQL to be created.
	VaultId pulumi.StringInput
}

func (BackupInstancePostgresqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupInstancePostgresqlArgs)(nil)).Elem()
}

type BackupInstancePostgresqlInput interface {
	pulumi.Input

	ToBackupInstancePostgresqlOutput() BackupInstancePostgresqlOutput
	ToBackupInstancePostgresqlOutputWithContext(ctx context.Context) BackupInstancePostgresqlOutput
}

func (*BackupInstancePostgresql) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupInstancePostgresql)(nil))
}

func (i *BackupInstancePostgresql) ToBackupInstancePostgresqlOutput() BackupInstancePostgresqlOutput {
	return i.ToBackupInstancePostgresqlOutputWithContext(context.Background())
}

func (i *BackupInstancePostgresql) ToBackupInstancePostgresqlOutputWithContext(ctx context.Context) BackupInstancePostgresqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInstancePostgresqlOutput)
}

func (i *BackupInstancePostgresql) ToBackupInstancePostgresqlPtrOutput() BackupInstancePostgresqlPtrOutput {
	return i.ToBackupInstancePostgresqlPtrOutputWithContext(context.Background())
}

func (i *BackupInstancePostgresql) ToBackupInstancePostgresqlPtrOutputWithContext(ctx context.Context) BackupInstancePostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInstancePostgresqlPtrOutput)
}

type BackupInstancePostgresqlPtrInput interface {
	pulumi.Input

	ToBackupInstancePostgresqlPtrOutput() BackupInstancePostgresqlPtrOutput
	ToBackupInstancePostgresqlPtrOutputWithContext(ctx context.Context) BackupInstancePostgresqlPtrOutput
}

type backupInstancePostgresqlPtrType BackupInstancePostgresqlArgs

func (*backupInstancePostgresqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupInstancePostgresql)(nil))
}

func (i *backupInstancePostgresqlPtrType) ToBackupInstancePostgresqlPtrOutput() BackupInstancePostgresqlPtrOutput {
	return i.ToBackupInstancePostgresqlPtrOutputWithContext(context.Background())
}

func (i *backupInstancePostgresqlPtrType) ToBackupInstancePostgresqlPtrOutputWithContext(ctx context.Context) BackupInstancePostgresqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInstancePostgresqlPtrOutput)
}

// BackupInstancePostgresqlArrayInput is an input type that accepts BackupInstancePostgresqlArray and BackupInstancePostgresqlArrayOutput values.
// You can construct a concrete instance of `BackupInstancePostgresqlArrayInput` via:
//
//          BackupInstancePostgresqlArray{ BackupInstancePostgresqlArgs{...} }
type BackupInstancePostgresqlArrayInput interface {
	pulumi.Input

	ToBackupInstancePostgresqlArrayOutput() BackupInstancePostgresqlArrayOutput
	ToBackupInstancePostgresqlArrayOutputWithContext(context.Context) BackupInstancePostgresqlArrayOutput
}

type BackupInstancePostgresqlArray []BackupInstancePostgresqlInput

func (BackupInstancePostgresqlArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*BackupInstancePostgresql)(nil))
}

func (i BackupInstancePostgresqlArray) ToBackupInstancePostgresqlArrayOutput() BackupInstancePostgresqlArrayOutput {
	return i.ToBackupInstancePostgresqlArrayOutputWithContext(context.Background())
}

func (i BackupInstancePostgresqlArray) ToBackupInstancePostgresqlArrayOutputWithContext(ctx context.Context) BackupInstancePostgresqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInstancePostgresqlArrayOutput)
}

// BackupInstancePostgresqlMapInput is an input type that accepts BackupInstancePostgresqlMap and BackupInstancePostgresqlMapOutput values.
// You can construct a concrete instance of `BackupInstancePostgresqlMapInput` via:
//
//          BackupInstancePostgresqlMap{ "key": BackupInstancePostgresqlArgs{...} }
type BackupInstancePostgresqlMapInput interface {
	pulumi.Input

	ToBackupInstancePostgresqlMapOutput() BackupInstancePostgresqlMapOutput
	ToBackupInstancePostgresqlMapOutputWithContext(context.Context) BackupInstancePostgresqlMapOutput
}

type BackupInstancePostgresqlMap map[string]BackupInstancePostgresqlInput

func (BackupInstancePostgresqlMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*BackupInstancePostgresql)(nil))
}

func (i BackupInstancePostgresqlMap) ToBackupInstancePostgresqlMapOutput() BackupInstancePostgresqlMapOutput {
	return i.ToBackupInstancePostgresqlMapOutputWithContext(context.Background())
}

func (i BackupInstancePostgresqlMap) ToBackupInstancePostgresqlMapOutputWithContext(ctx context.Context) BackupInstancePostgresqlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInstancePostgresqlMapOutput)
}

type BackupInstancePostgresqlOutput struct {
	*pulumi.OutputState
}

func (BackupInstancePostgresqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupInstancePostgresql)(nil))
}

func (o BackupInstancePostgresqlOutput) ToBackupInstancePostgresqlOutput() BackupInstancePostgresqlOutput {
	return o
}

func (o BackupInstancePostgresqlOutput) ToBackupInstancePostgresqlOutputWithContext(ctx context.Context) BackupInstancePostgresqlOutput {
	return o
}

func (o BackupInstancePostgresqlOutput) ToBackupInstancePostgresqlPtrOutput() BackupInstancePostgresqlPtrOutput {
	return o.ToBackupInstancePostgresqlPtrOutputWithContext(context.Background())
}

func (o BackupInstancePostgresqlOutput) ToBackupInstancePostgresqlPtrOutputWithContext(ctx context.Context) BackupInstancePostgresqlPtrOutput {
	return o.ApplyT(func(v BackupInstancePostgresql) *BackupInstancePostgresql {
		return &v
	}).(BackupInstancePostgresqlPtrOutput)
}

type BackupInstancePostgresqlPtrOutput struct {
	*pulumi.OutputState
}

func (BackupInstancePostgresqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupInstancePostgresql)(nil))
}

func (o BackupInstancePostgresqlPtrOutput) ToBackupInstancePostgresqlPtrOutput() BackupInstancePostgresqlPtrOutput {
	return o
}

func (o BackupInstancePostgresqlPtrOutput) ToBackupInstancePostgresqlPtrOutputWithContext(ctx context.Context) BackupInstancePostgresqlPtrOutput {
	return o
}

type BackupInstancePostgresqlArrayOutput struct{ *pulumi.OutputState }

func (BackupInstancePostgresqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupInstancePostgresql)(nil))
}

func (o BackupInstancePostgresqlArrayOutput) ToBackupInstancePostgresqlArrayOutput() BackupInstancePostgresqlArrayOutput {
	return o
}

func (o BackupInstancePostgresqlArrayOutput) ToBackupInstancePostgresqlArrayOutputWithContext(ctx context.Context) BackupInstancePostgresqlArrayOutput {
	return o
}

func (o BackupInstancePostgresqlArrayOutput) Index(i pulumi.IntInput) BackupInstancePostgresqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupInstancePostgresql {
		return vs[0].([]BackupInstancePostgresql)[vs[1].(int)]
	}).(BackupInstancePostgresqlOutput)
}

type BackupInstancePostgresqlMapOutput struct{ *pulumi.OutputState }

func (BackupInstancePostgresqlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BackupInstancePostgresql)(nil))
}

func (o BackupInstancePostgresqlMapOutput) ToBackupInstancePostgresqlMapOutput() BackupInstancePostgresqlMapOutput {
	return o
}

func (o BackupInstancePostgresqlMapOutput) ToBackupInstancePostgresqlMapOutputWithContext(ctx context.Context) BackupInstancePostgresqlMapOutput {
	return o
}

func (o BackupInstancePostgresqlMapOutput) MapIndex(k pulumi.StringInput) BackupInstancePostgresqlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) BackupInstancePostgresql {
		return vs[0].(map[string]BackupInstancePostgresql)[vs[1].(string)]
	}).(BackupInstancePostgresqlOutput)
}

func init() {
	pulumi.RegisterOutputType(BackupInstancePostgresqlOutput{})
	pulumi.RegisterOutputType(BackupInstancePostgresqlPtrOutput{})
	pulumi.RegisterOutputType(BackupInstancePostgresqlArrayOutput{})
	pulumi.RegisterOutputType(BackupInstancePostgresqlMapOutput{})
}
