// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dataprotection

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Backup Instance to back up a Kubernetes Cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/containerservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/dataprotection"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			snap, err := core.NewResourceGroup(ctx, "snap", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-snap"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleBackupVault, err := dataprotection.NewBackupVault(ctx, "example", &dataprotection.BackupVaultArgs{
//				Name:              pulumi.String("example"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				DatastoreType:     pulumi.String("VaultStore"),
//				Redundancy:        pulumi.String("LocallyRedundant"),
//				Identity: &dataprotection.BackupVaultIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleKubernetesCluster, err := containerservice.NewKubernetesCluster(ctx, "example", &containerservice.KubernetesClusterArgs{
//				Name:              pulumi.String("example"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				DnsPrefix:         pulumi.String("dns"),
//				DefaultNodePool: &containerservice.KubernetesClusterDefaultNodePoolArgs{
//					Name:                 pulumi.String("default"),
//					NodeCount:            pulumi.Int(1),
//					VmSize:               pulumi.String("Standard_DS2_v2"),
//					EnableHostEncryption: pulumi.Bool(true),
//				},
//				Identity: &containerservice.KubernetesClusterIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = containerservice.NewClusterTrustedAccessRoleBinding(ctx, "aks_cluster_trusted_access", &containerservice.ClusterTrustedAccessRoleBindingArgs{
//				KubernetesClusterId: exampleKubernetesCluster.ID(),
//				Name:                pulumi.String("example"),
//				Roles: pulumi.StringArray{
//					pulumi.String("Microsoft.DataProtection/backupVaults/backup-operator"),
//				},
//				SourceResourceId: exampleBackupVault.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "example", &storage.AccountArgs{
//				Name:                   pulumi.String("example"),
//				ResourceGroupName:      example.Name,
//				Location:               example.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleContainer, err := storage.NewContainer(ctx, "example", &storage.ContainerArgs{
//				Name:                pulumi.String("example"),
//				StorageAccountName:  exampleAccount.Name,
//				ContainerAccessType: pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKubernetesClusterExtension, err := containerservice.NewKubernetesClusterExtension(ctx, "example", &containerservice.KubernetesClusterExtensionArgs{
//				Name:             pulumi.String("example"),
//				ClusterId:        exampleKubernetesCluster.ID(),
//				ExtensionType:    pulumi.String("Microsoft.DataProtection.Kubernetes"),
//				ReleaseTrain:     pulumi.String("stable"),
//				ReleaseNamespace: pulumi.String("dataprotection-microsoft"),
//				ConfigurationSettings: pulumi.StringMap{
//					"configuration.backupStorageLocation.bucket":                exampleContainer.Name,
//					"configuration.backupStorageLocation.config.resourceGroup":  example.Name,
//					"configuration.backupStorageLocation.config.storageAccount": exampleAccount.Name,
//					"configuration.backupStorageLocation.config.subscriptionId": pulumi.String(current.SubscriptionId),
//					"credentials.tenantId":                                      pulumi.String(current.TenantId),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			testExtensionAndStorageAccountPermission, err := authorization.NewAssignment(ctx, "test_extension_and_storage_account_permission", &authorization.AssignmentArgs{
//				Scope:              exampleAccount.ID(),
//				RoleDefinitionName: pulumi.String("Storage Account Contributor"),
//				PrincipalId: pulumi.String(exampleKubernetesClusterExtension.AksAssignedIdentities.ApplyT(func(aksAssignedIdentities []containerservice.KubernetesClusterExtensionAksAssignedIdentity) (*string, error) {
//					return &aksAssignedIdentities[0].PrincipalId, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			testVaultMsiReadOnCluster, err := authorization.NewAssignment(ctx, "test_vault_msi_read_on_cluster", &authorization.AssignmentArgs{
//				Scope:              exampleKubernetesCluster.ID(),
//				RoleDefinitionName: pulumi.String("Reader"),
//				PrincipalId: pulumi.String(exampleBackupVault.Identity.ApplyT(func(identity dataprotection.BackupVaultIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			testVaultMsiReadOnSnapRg, err := authorization.NewAssignment(ctx, "test_vault_msi_read_on_snap_rg", &authorization.AssignmentArgs{
//				Scope:              snap.ID(),
//				RoleDefinitionName: pulumi.String("Reader"),
//				PrincipalId: pulumi.String(exampleBackupVault.Identity.ApplyT(func(identity dataprotection.BackupVaultIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			testVaultMsiSnapshotContributorOnSnapRg, err := authorization.NewAssignment(ctx, "test_vault_msi_snapshot_contributor_on_snap_rg", &authorization.AssignmentArgs{
//				Scope:              snap.ID(),
//				RoleDefinitionName: pulumi.String("Disk Snapshot Contributor"),
//				PrincipalId: pulumi.String(exampleBackupVault.Identity.ApplyT(func(identity dataprotection.BackupVaultIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			testVaultDataOperatorOnSnapRg, err := authorization.NewAssignment(ctx, "test_vault_data_operator_on_snap_rg", &authorization.AssignmentArgs{
//				Scope:              snap.ID(),
//				RoleDefinitionName: pulumi.String("Data Operator for Managed Disks"),
//				PrincipalId: pulumi.String(exampleBackupVault.Identity.ApplyT(func(identity dataprotection.BackupVaultIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			testVaultDataContributorOnStorage, err := authorization.NewAssignment(ctx, "test_vault_data_contributor_on_storage", &authorization.AssignmentArgs{
//				Scope:              exampleAccount.ID(),
//				RoleDefinitionName: pulumi.String("Storage Blob Data Contributor"),
//				PrincipalId: pulumi.String(exampleBackupVault.Identity.ApplyT(func(identity dataprotection.BackupVaultIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			testClusterMsiContributorOnSnapRg, err := authorization.NewAssignment(ctx, "test_cluster_msi_contributor_on_snap_rg", &authorization.AssignmentArgs{
//				Scope:              snap.ID(),
//				RoleDefinitionName: pulumi.String("Contributor"),
//				PrincipalId: pulumi.String(exampleKubernetesCluster.Identity.ApplyT(func(identity containerservice.KubernetesClusterIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput)),
//			})
//			if err != nil {
//				return err
//			}
//			exampleBackupPolicyKubernetesCluster, err := dataprotection.NewBackupPolicyKubernetesCluster(ctx, "example", &dataprotection.BackupPolicyKubernetesClusterArgs{
//				Name:              pulumi.String("example"),
//				ResourceGroupName: example.Name,
//				VaultName:         exampleBackupVault.Name,
//				BackupRepeatingTimeIntervals: pulumi.StringArray{
//					pulumi.String("R/2023-05-23T02:30:00+00:00/P1W"),
//				},
//				RetentionRules: dataprotection.BackupPolicyKubernetesClusterRetentionRuleArray{
//					&dataprotection.BackupPolicyKubernetesClusterRetentionRuleArgs{
//						Name:     pulumi.String("Daily"),
//						Priority: pulumi.Int(25),
//						LifeCycles: dataprotection.BackupPolicyKubernetesClusterRetentionRuleLifeCycleArray{
//							&dataprotection.BackupPolicyKubernetesClusterRetentionRuleLifeCycleArgs{
//								Duration:      pulumi.String("P84D"),
//								DataStoreType: pulumi.String("OperationalStore"),
//							},
//						},
//						Criteria: &dataprotection.BackupPolicyKubernetesClusterRetentionRuleCriteriaArgs{
//							DaysOfWeeks: pulumi.StringArray{
//								pulumi.String("Thursday"),
//							},
//							MonthsOfYears: pulumi.StringArray{
//								pulumi.String("November"),
//							},
//							WeeksOfMonths: pulumi.StringArray{
//								pulumi.String("First"),
//							},
//							ScheduledBackupTimes: pulumi.StringArray{
//								pulumi.String("2023-05-23T02:30:00Z"),
//							},
//						},
//					},
//				},
//				DefaultRetentionRule: &dataprotection.BackupPolicyKubernetesClusterDefaultRetentionRuleArgs{
//					LifeCycles: dataprotection.BackupPolicyKubernetesClusterDefaultRetentionRuleLifeCycleArray{
//						&dataprotection.BackupPolicyKubernetesClusterDefaultRetentionRuleLifeCycleArgs{
//							Duration:      pulumi.String("P14D"),
//							DataStoreType: pulumi.String("OperationalStore"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dataprotection.NewBackupInstanceKubernetesCluster(ctx, "example", &dataprotection.BackupInstanceKubernetesClusterArgs{
//				Name:                      pulumi.String("example"),
//				Location:                  example.Location,
//				VaultId:                   exampleBackupVault.ID(),
//				KubernetesClusterId:       exampleKubernetesCluster.ID(),
//				SnapshotResourceGroupName: snap.Name,
//				BackupPolicyId:            exampleBackupPolicyKubernetesCluster.ID(),
//				BackupDatasourceParameters: &dataprotection.BackupInstanceKubernetesClusterBackupDatasourceParametersArgs{
//					ExcludedNamespaces: pulumi.StringArray{
//						pulumi.String("test-excluded-namespaces"),
//					},
//					ExcludedResourceTypes: pulumi.StringArray{
//						pulumi.String("exvolumesnapshotcontents.snapshot.storage.k8s.io"),
//					},
//					ClusterScopedResourcesEnabled: pulumi.Bool(true),
//					IncludedNamespaces: pulumi.StringArray{
//						pulumi.String("test-included-namespaces"),
//					},
//					IncludedResourceTypes: pulumi.StringArray{
//						pulumi.String("involumesnapshotcontents.snapshot.storage.k8s.io"),
//					},
//					LabelSelectors: pulumi.StringArray{
//						pulumi.String("kubernetes.io/metadata.name:test"),
//					},
//					VolumeSnapshotEnabled: pulumi.Bool(true),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				testExtensionAndStorageAccountPermission,
//				testVaultMsiReadOnCluster,
//				testVaultMsiReadOnSnapRg,
//				testClusterMsiContributorOnSnapRg,
//				testVaultMsiSnapshotContributorOnSnapRg,
//				testVaultDataOperatorOnSnapRg,
//				testVaultDataContributorOnStorage,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Backup Instance Kubernetes Cluster can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:dataprotection/backupInstanceKubernetesCluster:BackupInstanceKubernetesCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataProtection/backupVaults/vault1/backupInstances/backupInstance1
// ```
type BackupInstanceKubernetesCluster struct {
	pulumi.CustomResourceState

	// A `backupDatasourceParameters` block as defined below.
	BackupDatasourceParameters BackupInstanceKubernetesClusterBackupDatasourceParametersPtrOutput `pulumi:"backupDatasourceParameters"`
	// The ID of the Backup Policy. Changing this forces a new resource to be created.
	BackupPolicyId pulumi.StringOutput `pulumi:"backupPolicyId"`
	// The ID of the Kubernetes Cluster. Changing this forces a new resource to be created.
	KubernetesClusterId pulumi.StringOutput `pulumi:"kubernetesClusterId"`
	// The location of the Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where snapshots are stored. Changing this forces a new resource to be created.
	SnapshotResourceGroupName pulumi.StringOutput `pulumi:"snapshotResourceGroupName"`
	// The ID of the Backup Vault within which the Backup Instance Kubernetes Cluster should exist. Changing this forces a new resource to be created.
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
}

// NewBackupInstanceKubernetesCluster registers a new resource with the given unique name, arguments, and options.
func NewBackupInstanceKubernetesCluster(ctx *pulumi.Context,
	name string, args *BackupInstanceKubernetesClusterArgs, opts ...pulumi.ResourceOption) (*BackupInstanceKubernetesCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'BackupPolicyId'")
	}
	if args.KubernetesClusterId == nil {
		return nil, errors.New("invalid value for required argument 'KubernetesClusterId'")
	}
	if args.SnapshotResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'SnapshotResourceGroupName'")
	}
	if args.VaultId == nil {
		return nil, errors.New("invalid value for required argument 'VaultId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupInstanceKubernetesCluster
	err := ctx.RegisterResource("azure:dataprotection/backupInstanceKubernetesCluster:BackupInstanceKubernetesCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupInstanceKubernetesCluster gets an existing BackupInstanceKubernetesCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupInstanceKubernetesCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupInstanceKubernetesClusterState, opts ...pulumi.ResourceOption) (*BackupInstanceKubernetesCluster, error) {
	var resource BackupInstanceKubernetesCluster
	err := ctx.ReadResource("azure:dataprotection/backupInstanceKubernetesCluster:BackupInstanceKubernetesCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupInstanceKubernetesCluster resources.
type backupInstanceKubernetesClusterState struct {
	// A `backupDatasourceParameters` block as defined below.
	BackupDatasourceParameters *BackupInstanceKubernetesClusterBackupDatasourceParameters `pulumi:"backupDatasourceParameters"`
	// The ID of the Backup Policy. Changing this forces a new resource to be created.
	BackupPolicyId *string `pulumi:"backupPolicyId"`
	// The ID of the Kubernetes Cluster. Changing this forces a new resource to be created.
	KubernetesClusterId *string `pulumi:"kubernetesClusterId"`
	// The location of the Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where snapshots are stored. Changing this forces a new resource to be created.
	SnapshotResourceGroupName *string `pulumi:"snapshotResourceGroupName"`
	// The ID of the Backup Vault within which the Backup Instance Kubernetes Cluster should exist. Changing this forces a new resource to be created.
	VaultId *string `pulumi:"vaultId"`
}

type BackupInstanceKubernetesClusterState struct {
	// A `backupDatasourceParameters` block as defined below.
	BackupDatasourceParameters BackupInstanceKubernetesClusterBackupDatasourceParametersPtrInput
	// The ID of the Backup Policy. Changing this forces a new resource to be created.
	BackupPolicyId pulumi.StringPtrInput
	// The ID of the Kubernetes Cluster. Changing this forces a new resource to be created.
	KubernetesClusterId pulumi.StringPtrInput
	// The location of the Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where snapshots are stored. Changing this forces a new resource to be created.
	SnapshotResourceGroupName pulumi.StringPtrInput
	// The ID of the Backup Vault within which the Backup Instance Kubernetes Cluster should exist. Changing this forces a new resource to be created.
	VaultId pulumi.StringPtrInput
}

func (BackupInstanceKubernetesClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupInstanceKubernetesClusterState)(nil)).Elem()
}

type backupInstanceKubernetesClusterArgs struct {
	// A `backupDatasourceParameters` block as defined below.
	BackupDatasourceParameters *BackupInstanceKubernetesClusterBackupDatasourceParameters `pulumi:"backupDatasourceParameters"`
	// The ID of the Backup Policy. Changing this forces a new resource to be created.
	BackupPolicyId string `pulumi:"backupPolicyId"`
	// The ID of the Kubernetes Cluster. Changing this forces a new resource to be created.
	KubernetesClusterId string `pulumi:"kubernetesClusterId"`
	// The location of the Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where snapshots are stored. Changing this forces a new resource to be created.
	SnapshotResourceGroupName string `pulumi:"snapshotResourceGroupName"`
	// The ID of the Backup Vault within which the Backup Instance Kubernetes Cluster should exist. Changing this forces a new resource to be created.
	VaultId string `pulumi:"vaultId"`
}

// The set of arguments for constructing a BackupInstanceKubernetesCluster resource.
type BackupInstanceKubernetesClusterArgs struct {
	// A `backupDatasourceParameters` block as defined below.
	BackupDatasourceParameters BackupInstanceKubernetesClusterBackupDatasourceParametersPtrInput
	// The ID of the Backup Policy. Changing this forces a new resource to be created.
	BackupPolicyId pulumi.StringInput
	// The ID of the Kubernetes Cluster. Changing this forces a new resource to be created.
	KubernetesClusterId pulumi.StringInput
	// The location of the Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where snapshots are stored. Changing this forces a new resource to be created.
	SnapshotResourceGroupName pulumi.StringInput
	// The ID of the Backup Vault within which the Backup Instance Kubernetes Cluster should exist. Changing this forces a new resource to be created.
	VaultId pulumi.StringInput
}

func (BackupInstanceKubernetesClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupInstanceKubernetesClusterArgs)(nil)).Elem()
}

type BackupInstanceKubernetesClusterInput interface {
	pulumi.Input

	ToBackupInstanceKubernetesClusterOutput() BackupInstanceKubernetesClusterOutput
	ToBackupInstanceKubernetesClusterOutputWithContext(ctx context.Context) BackupInstanceKubernetesClusterOutput
}

func (*BackupInstanceKubernetesCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupInstanceKubernetesCluster)(nil)).Elem()
}

func (i *BackupInstanceKubernetesCluster) ToBackupInstanceKubernetesClusterOutput() BackupInstanceKubernetesClusterOutput {
	return i.ToBackupInstanceKubernetesClusterOutputWithContext(context.Background())
}

func (i *BackupInstanceKubernetesCluster) ToBackupInstanceKubernetesClusterOutputWithContext(ctx context.Context) BackupInstanceKubernetesClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInstanceKubernetesClusterOutput)
}

// BackupInstanceKubernetesClusterArrayInput is an input type that accepts BackupInstanceKubernetesClusterArray and BackupInstanceKubernetesClusterArrayOutput values.
// You can construct a concrete instance of `BackupInstanceKubernetesClusterArrayInput` via:
//
//	BackupInstanceKubernetesClusterArray{ BackupInstanceKubernetesClusterArgs{...} }
type BackupInstanceKubernetesClusterArrayInput interface {
	pulumi.Input

	ToBackupInstanceKubernetesClusterArrayOutput() BackupInstanceKubernetesClusterArrayOutput
	ToBackupInstanceKubernetesClusterArrayOutputWithContext(context.Context) BackupInstanceKubernetesClusterArrayOutput
}

type BackupInstanceKubernetesClusterArray []BackupInstanceKubernetesClusterInput

func (BackupInstanceKubernetesClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupInstanceKubernetesCluster)(nil)).Elem()
}

func (i BackupInstanceKubernetesClusterArray) ToBackupInstanceKubernetesClusterArrayOutput() BackupInstanceKubernetesClusterArrayOutput {
	return i.ToBackupInstanceKubernetesClusterArrayOutputWithContext(context.Background())
}

func (i BackupInstanceKubernetesClusterArray) ToBackupInstanceKubernetesClusterArrayOutputWithContext(ctx context.Context) BackupInstanceKubernetesClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInstanceKubernetesClusterArrayOutput)
}

// BackupInstanceKubernetesClusterMapInput is an input type that accepts BackupInstanceKubernetesClusterMap and BackupInstanceKubernetesClusterMapOutput values.
// You can construct a concrete instance of `BackupInstanceKubernetesClusterMapInput` via:
//
//	BackupInstanceKubernetesClusterMap{ "key": BackupInstanceKubernetesClusterArgs{...} }
type BackupInstanceKubernetesClusterMapInput interface {
	pulumi.Input

	ToBackupInstanceKubernetesClusterMapOutput() BackupInstanceKubernetesClusterMapOutput
	ToBackupInstanceKubernetesClusterMapOutputWithContext(context.Context) BackupInstanceKubernetesClusterMapOutput
}

type BackupInstanceKubernetesClusterMap map[string]BackupInstanceKubernetesClusterInput

func (BackupInstanceKubernetesClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupInstanceKubernetesCluster)(nil)).Elem()
}

func (i BackupInstanceKubernetesClusterMap) ToBackupInstanceKubernetesClusterMapOutput() BackupInstanceKubernetesClusterMapOutput {
	return i.ToBackupInstanceKubernetesClusterMapOutputWithContext(context.Background())
}

func (i BackupInstanceKubernetesClusterMap) ToBackupInstanceKubernetesClusterMapOutputWithContext(ctx context.Context) BackupInstanceKubernetesClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupInstanceKubernetesClusterMapOutput)
}

type BackupInstanceKubernetesClusterOutput struct{ *pulumi.OutputState }

func (BackupInstanceKubernetesClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupInstanceKubernetesCluster)(nil)).Elem()
}

func (o BackupInstanceKubernetesClusterOutput) ToBackupInstanceKubernetesClusterOutput() BackupInstanceKubernetesClusterOutput {
	return o
}

func (o BackupInstanceKubernetesClusterOutput) ToBackupInstanceKubernetesClusterOutputWithContext(ctx context.Context) BackupInstanceKubernetesClusterOutput {
	return o
}

// A `backupDatasourceParameters` block as defined below.
func (o BackupInstanceKubernetesClusterOutput) BackupDatasourceParameters() BackupInstanceKubernetesClusterBackupDatasourceParametersPtrOutput {
	return o.ApplyT(func(v *BackupInstanceKubernetesCluster) BackupInstanceKubernetesClusterBackupDatasourceParametersPtrOutput {
		return v.BackupDatasourceParameters
	}).(BackupInstanceKubernetesClusterBackupDatasourceParametersPtrOutput)
}

// The ID of the Backup Policy. Changing this forces a new resource to be created.
func (o BackupInstanceKubernetesClusterOutput) BackupPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupInstanceKubernetesCluster) pulumi.StringOutput { return v.BackupPolicyId }).(pulumi.StringOutput)
}

// The ID of the Kubernetes Cluster. Changing this forces a new resource to be created.
func (o BackupInstanceKubernetesClusterOutput) KubernetesClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupInstanceKubernetesCluster) pulumi.StringOutput { return v.KubernetesClusterId }).(pulumi.StringOutput)
}

// The location of the Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
func (o BackupInstanceKubernetesClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupInstanceKubernetesCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Backup Instance Kubernetes Cluster. Changing this forces a new resource to be created.
func (o BackupInstanceKubernetesClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupInstanceKubernetesCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where snapshots are stored. Changing this forces a new resource to be created.
func (o BackupInstanceKubernetesClusterOutput) SnapshotResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupInstanceKubernetesCluster) pulumi.StringOutput { return v.SnapshotResourceGroupName }).(pulumi.StringOutput)
}

// The ID of the Backup Vault within which the Backup Instance Kubernetes Cluster should exist. Changing this forces a new resource to be created.
func (o BackupInstanceKubernetesClusterOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupInstanceKubernetesCluster) pulumi.StringOutput { return v.VaultId }).(pulumi.StringOutput)
}

type BackupInstanceKubernetesClusterArrayOutput struct{ *pulumi.OutputState }

func (BackupInstanceKubernetesClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupInstanceKubernetesCluster)(nil)).Elem()
}

func (o BackupInstanceKubernetesClusterArrayOutput) ToBackupInstanceKubernetesClusterArrayOutput() BackupInstanceKubernetesClusterArrayOutput {
	return o
}

func (o BackupInstanceKubernetesClusterArrayOutput) ToBackupInstanceKubernetesClusterArrayOutputWithContext(ctx context.Context) BackupInstanceKubernetesClusterArrayOutput {
	return o
}

func (o BackupInstanceKubernetesClusterArrayOutput) Index(i pulumi.IntInput) BackupInstanceKubernetesClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupInstanceKubernetesCluster {
		return vs[0].([]*BackupInstanceKubernetesCluster)[vs[1].(int)]
	}).(BackupInstanceKubernetesClusterOutput)
}

type BackupInstanceKubernetesClusterMapOutput struct{ *pulumi.OutputState }

func (BackupInstanceKubernetesClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupInstanceKubernetesCluster)(nil)).Elem()
}

func (o BackupInstanceKubernetesClusterMapOutput) ToBackupInstanceKubernetesClusterMapOutput() BackupInstanceKubernetesClusterMapOutput {
	return o
}

func (o BackupInstanceKubernetesClusterMapOutput) ToBackupInstanceKubernetesClusterMapOutputWithContext(ctx context.Context) BackupInstanceKubernetesClusterMapOutput {
	return o
}

func (o BackupInstanceKubernetesClusterMapOutput) MapIndex(k pulumi.StringInput) BackupInstanceKubernetesClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupInstanceKubernetesCluster {
		return vs[0].(map[string]*BackupInstanceKubernetesCluster)[vs[1].(string)]
	}).(BackupInstanceKubernetesClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupInstanceKubernetesClusterInput)(nil)).Elem(), &BackupInstanceKubernetesCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupInstanceKubernetesClusterArrayInput)(nil)).Elem(), BackupInstanceKubernetesClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupInstanceKubernetesClusterMapInput)(nil)).Elem(), BackupInstanceKubernetesClusterMap{})
	pulumi.RegisterOutputType(BackupInstanceKubernetesClusterOutput{})
	pulumi.RegisterOutputType(BackupInstanceKubernetesClusterArrayOutput{})
	pulumi.RegisterOutputType(BackupInstanceKubernetesClusterMapOutput{})
}
