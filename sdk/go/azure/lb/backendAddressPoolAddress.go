// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Backend Address within a Backend Address Pool.
//
// > **Note:** Backend Addresses can only be added to a `Standard` SKU Load Balancer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/lb"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleVirtualNetwork, err := network.LookupVirtualNetwork(ctx, &network.LookupVirtualNetworkArgs{
//				Name:              "example-network",
//				ResourceGroupName: "example-resources",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleLB, err := lb.GetLB(ctx, &lb.GetLBArgs{
//				Name:              "example-lb",
//				ResourceGroupName: "example-resources",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleBackendAddressPool, err := lb.LookupBackendAddressPool(ctx, &lb.LookupBackendAddressPoolArgs{
//				Name:           "first",
//				LoadbalancerId: exampleLB.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = lb.NewBackendAddressPoolAddress(ctx, "exampleBackendAddressPoolAddress", &lb.BackendAddressPoolAddressArgs{
//				BackendAddressPoolId: *pulumi.String(exampleBackendAddressPool.Id),
//				VirtualNetworkId:     *pulumi.String(exampleVirtualNetwork.Id),
//				IpAddress:            pulumi.String("10.0.0.1"),
//			})
//			if err != nil {
//				return err
//			}
//			backend_pool_cr, err := lb.LookupBackendAddressPool(ctx, &lb.LookupBackendAddressPoolArgs{
//				Name:           "globalLBBackendPool",
//				LoadbalancerId: exampleLB.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = lb.NewBackendAddressPoolAddress(ctx, "example-1", &lb.BackendAddressPoolAddressArgs{
//				BackendAddressPoolId:            *pulumi.String(backend_pool_cr.Id),
//				BackendAddressIpConfigurationId: pulumi.Any(azurerm_lb.BackendLbR1.Frontend_ip_configuration[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = lb.NewBackendAddressPoolAddress(ctx, "example-2", &lb.BackendAddressPoolAddressArgs{
//				BackendAddressPoolId:            *pulumi.String(backend_pool_cr.Id),
//				BackendAddressIpConfigurationId: pulumi.Any(azurerm_lb.BackendLbR2.Frontend_ip_configuration[0].Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Backend Address Pool Addresses can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/loadBalancer1/backendAddressPools/backendAddressPool1/addresses/address1
//
// ```
type BackendAddressPoolAddress struct {
	pulumi.CustomResourceState

	// The ip config ID of the regional load balancer that's added to the global load balancer's backend address pool.
	//
	// > **Note:** For cross-region load balancer, please append the name of the load balancers, virtual machines, and other resources in each region with a -R1 and -R2.
	BackendAddressIpConfigurationId pulumi.StringPtrOutput `pulumi:"backendAddressIpConfigurationId"`
	// The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
	BackendAddressPoolId pulumi.StringOutput `pulumi:"backendAddressPoolId"`
	// A list of `inboundNatRulePortMapping` block as defined below.
	InboundNatRulePortMappings BackendAddressPoolAddressInboundNatRulePortMappingArrayOutput `pulumi:"inboundNatRulePortMappings"`
	// The Static IP Address which should be allocated to this Backend Address Pool.
	IpAddress pulumi.StringPtrOutput `pulumi:"ipAddress"`
	// The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Virtual Network within which the Backend Address Pool should exist.
	VirtualNetworkId pulumi.StringPtrOutput `pulumi:"virtualNetworkId"`
}

// NewBackendAddressPoolAddress registers a new resource with the given unique name, arguments, and options.
func NewBackendAddressPoolAddress(ctx *pulumi.Context,
	name string, args *BackendAddressPoolAddressArgs, opts ...pulumi.ResourceOption) (*BackendAddressPoolAddress, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackendAddressPoolId == nil {
		return nil, errors.New("invalid value for required argument 'BackendAddressPoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackendAddressPoolAddress
	err := ctx.RegisterResource("azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendAddressPoolAddress gets an existing BackendAddressPoolAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendAddressPoolAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendAddressPoolAddressState, opts ...pulumi.ResourceOption) (*BackendAddressPoolAddress, error) {
	var resource BackendAddressPoolAddress
	err := ctx.ReadResource("azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendAddressPoolAddress resources.
type backendAddressPoolAddressState struct {
	// The ip config ID of the regional load balancer that's added to the global load balancer's backend address pool.
	//
	// > **Note:** For cross-region load balancer, please append the name of the load balancers, virtual machines, and other resources in each region with a -R1 and -R2.
	BackendAddressIpConfigurationId *string `pulumi:"backendAddressIpConfigurationId"`
	// The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
	BackendAddressPoolId *string `pulumi:"backendAddressPoolId"`
	// A list of `inboundNatRulePortMapping` block as defined below.
	InboundNatRulePortMappings []BackendAddressPoolAddressInboundNatRulePortMapping `pulumi:"inboundNatRulePortMappings"`
	// The Static IP Address which should be allocated to this Backend Address Pool.
	IpAddress *string `pulumi:"ipAddress"`
	// The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
	Name *string `pulumi:"name"`
	// The ID of the Virtual Network within which the Backend Address Pool should exist.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
}

type BackendAddressPoolAddressState struct {
	// The ip config ID of the regional load balancer that's added to the global load balancer's backend address pool.
	//
	// > **Note:** For cross-region load balancer, please append the name of the load balancers, virtual machines, and other resources in each region with a -R1 and -R2.
	BackendAddressIpConfigurationId pulumi.StringPtrInput
	// The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
	BackendAddressPoolId pulumi.StringPtrInput
	// A list of `inboundNatRulePortMapping` block as defined below.
	InboundNatRulePortMappings BackendAddressPoolAddressInboundNatRulePortMappingArrayInput
	// The Static IP Address which should be allocated to this Backend Address Pool.
	IpAddress pulumi.StringPtrInput
	// The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
	Name pulumi.StringPtrInput
	// The ID of the Virtual Network within which the Backend Address Pool should exist.
	VirtualNetworkId pulumi.StringPtrInput
}

func (BackendAddressPoolAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendAddressPoolAddressState)(nil)).Elem()
}

type backendAddressPoolAddressArgs struct {
	// The ip config ID of the regional load balancer that's added to the global load balancer's backend address pool.
	//
	// > **Note:** For cross-region load balancer, please append the name of the load balancers, virtual machines, and other resources in each region with a -R1 and -R2.
	BackendAddressIpConfigurationId *string `pulumi:"backendAddressIpConfigurationId"`
	// The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
	BackendAddressPoolId string `pulumi:"backendAddressPoolId"`
	// The Static IP Address which should be allocated to this Backend Address Pool.
	IpAddress *string `pulumi:"ipAddress"`
	// The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
	Name *string `pulumi:"name"`
	// The ID of the Virtual Network within which the Backend Address Pool should exist.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
}

// The set of arguments for constructing a BackendAddressPoolAddress resource.
type BackendAddressPoolAddressArgs struct {
	// The ip config ID of the regional load balancer that's added to the global load balancer's backend address pool.
	//
	// > **Note:** For cross-region load balancer, please append the name of the load balancers, virtual machines, and other resources in each region with a -R1 and -R2.
	BackendAddressIpConfigurationId pulumi.StringPtrInput
	// The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
	BackendAddressPoolId pulumi.StringInput
	// The Static IP Address which should be allocated to this Backend Address Pool.
	IpAddress pulumi.StringPtrInput
	// The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
	Name pulumi.StringPtrInput
	// The ID of the Virtual Network within which the Backend Address Pool should exist.
	VirtualNetworkId pulumi.StringPtrInput
}

func (BackendAddressPoolAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendAddressPoolAddressArgs)(nil)).Elem()
}

type BackendAddressPoolAddressInput interface {
	pulumi.Input

	ToBackendAddressPoolAddressOutput() BackendAddressPoolAddressOutput
	ToBackendAddressPoolAddressOutputWithContext(ctx context.Context) BackendAddressPoolAddressOutput
}

func (*BackendAddressPoolAddress) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendAddressPoolAddress)(nil)).Elem()
}

func (i *BackendAddressPoolAddress) ToBackendAddressPoolAddressOutput() BackendAddressPoolAddressOutput {
	return i.ToBackendAddressPoolAddressOutputWithContext(context.Background())
}

func (i *BackendAddressPoolAddress) ToBackendAddressPoolAddressOutputWithContext(ctx context.Context) BackendAddressPoolAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendAddressPoolAddressOutput)
}

// BackendAddressPoolAddressArrayInput is an input type that accepts BackendAddressPoolAddressArray and BackendAddressPoolAddressArrayOutput values.
// You can construct a concrete instance of `BackendAddressPoolAddressArrayInput` via:
//
//	BackendAddressPoolAddressArray{ BackendAddressPoolAddressArgs{...} }
type BackendAddressPoolAddressArrayInput interface {
	pulumi.Input

	ToBackendAddressPoolAddressArrayOutput() BackendAddressPoolAddressArrayOutput
	ToBackendAddressPoolAddressArrayOutputWithContext(context.Context) BackendAddressPoolAddressArrayOutput
}

type BackendAddressPoolAddressArray []BackendAddressPoolAddressInput

func (BackendAddressPoolAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendAddressPoolAddress)(nil)).Elem()
}

func (i BackendAddressPoolAddressArray) ToBackendAddressPoolAddressArrayOutput() BackendAddressPoolAddressArrayOutput {
	return i.ToBackendAddressPoolAddressArrayOutputWithContext(context.Background())
}

func (i BackendAddressPoolAddressArray) ToBackendAddressPoolAddressArrayOutputWithContext(ctx context.Context) BackendAddressPoolAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendAddressPoolAddressArrayOutput)
}

// BackendAddressPoolAddressMapInput is an input type that accepts BackendAddressPoolAddressMap and BackendAddressPoolAddressMapOutput values.
// You can construct a concrete instance of `BackendAddressPoolAddressMapInput` via:
//
//	BackendAddressPoolAddressMap{ "key": BackendAddressPoolAddressArgs{...} }
type BackendAddressPoolAddressMapInput interface {
	pulumi.Input

	ToBackendAddressPoolAddressMapOutput() BackendAddressPoolAddressMapOutput
	ToBackendAddressPoolAddressMapOutputWithContext(context.Context) BackendAddressPoolAddressMapOutput
}

type BackendAddressPoolAddressMap map[string]BackendAddressPoolAddressInput

func (BackendAddressPoolAddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendAddressPoolAddress)(nil)).Elem()
}

func (i BackendAddressPoolAddressMap) ToBackendAddressPoolAddressMapOutput() BackendAddressPoolAddressMapOutput {
	return i.ToBackendAddressPoolAddressMapOutputWithContext(context.Background())
}

func (i BackendAddressPoolAddressMap) ToBackendAddressPoolAddressMapOutputWithContext(ctx context.Context) BackendAddressPoolAddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendAddressPoolAddressMapOutput)
}

type BackendAddressPoolAddressOutput struct{ *pulumi.OutputState }

func (BackendAddressPoolAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendAddressPoolAddress)(nil)).Elem()
}

func (o BackendAddressPoolAddressOutput) ToBackendAddressPoolAddressOutput() BackendAddressPoolAddressOutput {
	return o
}

func (o BackendAddressPoolAddressOutput) ToBackendAddressPoolAddressOutputWithContext(ctx context.Context) BackendAddressPoolAddressOutput {
	return o
}

// The ip config ID of the regional load balancer that's added to the global load balancer's backend address pool.
//
// > **Note:** For cross-region load balancer, please append the name of the load balancers, virtual machines, and other resources in each region with a -R1 and -R2.
func (o BackendAddressPoolAddressOutput) BackendAddressIpConfigurationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendAddressPoolAddress) pulumi.StringPtrOutput { return v.BackendAddressIpConfigurationId }).(pulumi.StringPtrOutput)
}

// The ID of the Backend Address Pool. Changing this forces a new Backend Address Pool Address to be created.
func (o BackendAddressPoolAddressOutput) BackendAddressPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendAddressPoolAddress) pulumi.StringOutput { return v.BackendAddressPoolId }).(pulumi.StringOutput)
}

// A list of `inboundNatRulePortMapping` block as defined below.
func (o BackendAddressPoolAddressOutput) InboundNatRulePortMappings() BackendAddressPoolAddressInboundNatRulePortMappingArrayOutput {
	return o.ApplyT(func(v *BackendAddressPoolAddress) BackendAddressPoolAddressInboundNatRulePortMappingArrayOutput {
		return v.InboundNatRulePortMappings
	}).(BackendAddressPoolAddressInboundNatRulePortMappingArrayOutput)
}

// The Static IP Address which should be allocated to this Backend Address Pool.
func (o BackendAddressPoolAddressOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendAddressPoolAddress) pulumi.StringPtrOutput { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Backend Address Pool Address. Changing this forces a new Backend Address Pool Address to be created.
func (o BackendAddressPoolAddressOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendAddressPoolAddress) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Virtual Network within which the Backend Address Pool should exist.
func (o BackendAddressPoolAddressOutput) VirtualNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendAddressPoolAddress) pulumi.StringPtrOutput { return v.VirtualNetworkId }).(pulumi.StringPtrOutput)
}

type BackendAddressPoolAddressArrayOutput struct{ *pulumi.OutputState }

func (BackendAddressPoolAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendAddressPoolAddress)(nil)).Elem()
}

func (o BackendAddressPoolAddressArrayOutput) ToBackendAddressPoolAddressArrayOutput() BackendAddressPoolAddressArrayOutput {
	return o
}

func (o BackendAddressPoolAddressArrayOutput) ToBackendAddressPoolAddressArrayOutputWithContext(ctx context.Context) BackendAddressPoolAddressArrayOutput {
	return o
}

func (o BackendAddressPoolAddressArrayOutput) Index(i pulumi.IntInput) BackendAddressPoolAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendAddressPoolAddress {
		return vs[0].([]*BackendAddressPoolAddress)[vs[1].(int)]
	}).(BackendAddressPoolAddressOutput)
}

type BackendAddressPoolAddressMapOutput struct{ *pulumi.OutputState }

func (BackendAddressPoolAddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendAddressPoolAddress)(nil)).Elem()
}

func (o BackendAddressPoolAddressMapOutput) ToBackendAddressPoolAddressMapOutput() BackendAddressPoolAddressMapOutput {
	return o
}

func (o BackendAddressPoolAddressMapOutput) ToBackendAddressPoolAddressMapOutputWithContext(ctx context.Context) BackendAddressPoolAddressMapOutput {
	return o
}

func (o BackendAddressPoolAddressMapOutput) MapIndex(k pulumi.StringInput) BackendAddressPoolAddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendAddressPoolAddress {
		return vs[0].(map[string]*BackendAddressPoolAddress)[vs[1].(string)]
	}).(BackendAddressPoolAddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendAddressPoolAddressInput)(nil)).Elem(), &BackendAddressPoolAddress{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendAddressPoolAddressArrayInput)(nil)).Elem(), BackendAddressPoolAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendAddressPoolAddressMapInput)(nil)).Elem(), BackendAddressPoolAddressMap{})
	pulumi.RegisterOutputType(BackendAddressPoolAddressOutput{})
	pulumi.RegisterOutputType(BackendAddressPoolAddressArrayOutput{})
	pulumi.RegisterOutputType(BackendAddressPoolAddressMapOutput{})
}
