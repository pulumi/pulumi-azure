// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package lb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type LoadBalancerFrontendIpConfiguration struct {
	// The id of the Frontend IP Configuration.
	Id *string `pulumi:"id"`
	InboundNatRules []string `pulumi:"inboundNatRules"`
	LoadBalancerRules []string `pulumi:"loadBalancerRules"`
	// Specifies the name of the frontend ip configuration.
	Name string `pulumi:"name"`
	OutboundRules []string `pulumi:"outboundRules"`
	// Private IP Address to assign to the Load Balancer. The last one and first four IPs in any range are reserved and cannot be manually assigned.
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// The allocation method for the Private IP Address used by this Load Balancer. Possible values as `Dynamic` and `Static`.
	PrivateIpAddressAllocation *string `pulumi:"privateIpAddressAllocation"`
	// The version of IP that the Private IP Address is. Possible values are `IPv4` or `IPv6`.
	PrivateIpAddressVersion *string `pulumi:"privateIpAddressVersion"`
	// The ID of a Public IP Address which should be associated with the Load Balancer.
	PublicIpAddressId *string `pulumi:"publicIpAddressId"`
	// The ID of a Public IP Prefix which should be associated with the Load Balancer. Public IP Prefix can only be used with outbound rules.
	PublicIpPrefixId *string `pulumi:"publicIpPrefixId"`
	// The ID of the Subnet which should be associated with the IP Configuration.
	SubnetId *string `pulumi:"subnetId"`
	// A list of Availability Zones which the Load Balancer's IP Addresses should be created in.
	Zones *string `pulumi:"zones"`
}

type LoadBalancerFrontendIpConfigurationInput interface {
	pulumi.Input

	ToLoadBalancerFrontendIpConfigurationOutput() LoadBalancerFrontendIpConfigurationOutput
	ToLoadBalancerFrontendIpConfigurationOutputWithContext(context.Context) LoadBalancerFrontendIpConfigurationOutput
}

type LoadBalancerFrontendIpConfigurationArgs struct {
	// The id of the Frontend IP Configuration.
	Id pulumi.StringPtrInput `pulumi:"id"`
	InboundNatRules pulumi.StringArrayInput `pulumi:"inboundNatRules"`
	LoadBalancerRules pulumi.StringArrayInput `pulumi:"loadBalancerRules"`
	// Specifies the name of the frontend ip configuration.
	Name pulumi.StringInput `pulumi:"name"`
	OutboundRules pulumi.StringArrayInput `pulumi:"outboundRules"`
	// Private IP Address to assign to the Load Balancer. The last one and first four IPs in any range are reserved and cannot be manually assigned.
	PrivateIpAddress pulumi.StringPtrInput `pulumi:"privateIpAddress"`
	// The allocation method for the Private IP Address used by this Load Balancer. Possible values as `Dynamic` and `Static`.
	PrivateIpAddressAllocation pulumi.StringPtrInput `pulumi:"privateIpAddressAllocation"`
	// The version of IP that the Private IP Address is. Possible values are `IPv4` or `IPv6`.
	PrivateIpAddressVersion pulumi.StringPtrInput `pulumi:"privateIpAddressVersion"`
	// The ID of a Public IP Address which should be associated with the Load Balancer.
	PublicIpAddressId pulumi.StringPtrInput `pulumi:"publicIpAddressId"`
	// The ID of a Public IP Prefix which should be associated with the Load Balancer. Public IP Prefix can only be used with outbound rules.
	PublicIpPrefixId pulumi.StringPtrInput `pulumi:"publicIpPrefixId"`
	// The ID of the Subnet which should be associated with the IP Configuration.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// A list of Availability Zones which the Load Balancer's IP Addresses should be created in.
	Zones pulumi.StringPtrInput `pulumi:"zones"`
}

func (LoadBalancerFrontendIpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerFrontendIpConfiguration)(nil)).Elem()
}

func (i LoadBalancerFrontendIpConfigurationArgs) ToLoadBalancerFrontendIpConfigurationOutput() LoadBalancerFrontendIpConfigurationOutput {
	return i.ToLoadBalancerFrontendIpConfigurationOutputWithContext(context.Background())
}

func (i LoadBalancerFrontendIpConfigurationArgs) ToLoadBalancerFrontendIpConfigurationOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerFrontendIpConfigurationOutput)
}

type LoadBalancerFrontendIpConfigurationArrayInput interface {
	pulumi.Input

	ToLoadBalancerFrontendIpConfigurationArrayOutput() LoadBalancerFrontendIpConfigurationArrayOutput
	ToLoadBalancerFrontendIpConfigurationArrayOutputWithContext(context.Context) LoadBalancerFrontendIpConfigurationArrayOutput
}

type LoadBalancerFrontendIpConfigurationArray []LoadBalancerFrontendIpConfigurationInput

func (LoadBalancerFrontendIpConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerFrontendIpConfiguration)(nil)).Elem()
}

func (i LoadBalancerFrontendIpConfigurationArray) ToLoadBalancerFrontendIpConfigurationArrayOutput() LoadBalancerFrontendIpConfigurationArrayOutput {
	return i.ToLoadBalancerFrontendIpConfigurationArrayOutputWithContext(context.Background())
}

func (i LoadBalancerFrontendIpConfigurationArray) ToLoadBalancerFrontendIpConfigurationArrayOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerFrontendIpConfigurationArrayOutput)
}

type LoadBalancerFrontendIpConfigurationOutput struct { *pulumi.OutputState }

func (LoadBalancerFrontendIpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerFrontendIpConfiguration)(nil)).Elem()
}

func (o LoadBalancerFrontendIpConfigurationOutput) ToLoadBalancerFrontendIpConfigurationOutput() LoadBalancerFrontendIpConfigurationOutput {
	return o
}

func (o LoadBalancerFrontendIpConfigurationOutput) ToLoadBalancerFrontendIpConfigurationOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationOutput {
	return o
}

// The id of the Frontend IP Configuration.
func (o LoadBalancerFrontendIpConfigurationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LoadBalancerFrontendIpConfiguration) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o LoadBalancerFrontendIpConfigurationOutput) InboundNatRules() pulumi.StringArrayOutput {
	return o.ApplyT(func (v LoadBalancerFrontendIpConfiguration) []string { return v.InboundNatRules }).(pulumi.StringArrayOutput)
}

func (o LoadBalancerFrontendIpConfigurationOutput) LoadBalancerRules() pulumi.StringArrayOutput {
	return o.ApplyT(func (v LoadBalancerFrontendIpConfiguration) []string { return v.LoadBalancerRules }).(pulumi.StringArrayOutput)
}

// Specifies the name of the frontend ip configuration.
func (o LoadBalancerFrontendIpConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v LoadBalancerFrontendIpConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

func (o LoadBalancerFrontendIpConfigurationOutput) OutboundRules() pulumi.StringArrayOutput {
	return o.ApplyT(func (v LoadBalancerFrontendIpConfiguration) []string { return v.OutboundRules }).(pulumi.StringArrayOutput)
}

// Private IP Address to assign to the Load Balancer. The last one and first four IPs in any range are reserved and cannot be manually assigned.
func (o LoadBalancerFrontendIpConfigurationOutput) PrivateIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LoadBalancerFrontendIpConfiguration) *string { return v.PrivateIpAddress }).(pulumi.StringPtrOutput)
}

// The allocation method for the Private IP Address used by this Load Balancer. Possible values as `Dynamic` and `Static`.
func (o LoadBalancerFrontendIpConfigurationOutput) PrivateIpAddressAllocation() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LoadBalancerFrontendIpConfiguration) *string { return v.PrivateIpAddressAllocation }).(pulumi.StringPtrOutput)
}

// The version of IP that the Private IP Address is. Possible values are `IPv4` or `IPv6`.
func (o LoadBalancerFrontendIpConfigurationOutput) PrivateIpAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LoadBalancerFrontendIpConfiguration) *string { return v.PrivateIpAddressVersion }).(pulumi.StringPtrOutput)
}

// The ID of a Public IP Address which should be associated with the Load Balancer.
func (o LoadBalancerFrontendIpConfigurationOutput) PublicIpAddressId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LoadBalancerFrontendIpConfiguration) *string { return v.PublicIpAddressId }).(pulumi.StringPtrOutput)
}

// The ID of a Public IP Prefix which should be associated with the Load Balancer. Public IP Prefix can only be used with outbound rules.
func (o LoadBalancerFrontendIpConfigurationOutput) PublicIpPrefixId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LoadBalancerFrontendIpConfiguration) *string { return v.PublicIpPrefixId }).(pulumi.StringPtrOutput)
}

// The ID of the Subnet which should be associated with the IP Configuration.
func (o LoadBalancerFrontendIpConfigurationOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LoadBalancerFrontendIpConfiguration) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// A list of Availability Zones which the Load Balancer's IP Addresses should be created in.
func (o LoadBalancerFrontendIpConfigurationOutput) Zones() pulumi.StringPtrOutput {
	return o.ApplyT(func (v LoadBalancerFrontendIpConfiguration) *string { return v.Zones }).(pulumi.StringPtrOutput)
}

type LoadBalancerFrontendIpConfigurationArrayOutput struct { *pulumi.OutputState}

func (LoadBalancerFrontendIpConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerFrontendIpConfiguration)(nil)).Elem()
}

func (o LoadBalancerFrontendIpConfigurationArrayOutput) ToLoadBalancerFrontendIpConfigurationArrayOutput() LoadBalancerFrontendIpConfigurationArrayOutput {
	return o
}

func (o LoadBalancerFrontendIpConfigurationArrayOutput) ToLoadBalancerFrontendIpConfigurationArrayOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationArrayOutput {
	return o
}

func (o LoadBalancerFrontendIpConfigurationArrayOutput) Index(i pulumi.IntInput) LoadBalancerFrontendIpConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) LoadBalancerFrontendIpConfiguration {
		return vs[0].([]LoadBalancerFrontendIpConfiguration)[vs[1].(int)]
	}).(LoadBalancerFrontendIpConfigurationOutput)
}

type OutboundRuleFrontendIpConfiguration struct {
	// The ID of the Load Balancer Outbound Rule.
	Id *string `pulumi:"id"`
	// Specifies the name of the Outbound Rule. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
}

type OutboundRuleFrontendIpConfigurationInput interface {
	pulumi.Input

	ToOutboundRuleFrontendIpConfigurationOutput() OutboundRuleFrontendIpConfigurationOutput
	ToOutboundRuleFrontendIpConfigurationOutputWithContext(context.Context) OutboundRuleFrontendIpConfigurationOutput
}

type OutboundRuleFrontendIpConfigurationArgs struct {
	// The ID of the Load Balancer Outbound Rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the name of the Outbound Rule. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
}

func (OutboundRuleFrontendIpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutboundRuleFrontendIpConfiguration)(nil)).Elem()
}

func (i OutboundRuleFrontendIpConfigurationArgs) ToOutboundRuleFrontendIpConfigurationOutput() OutboundRuleFrontendIpConfigurationOutput {
	return i.ToOutboundRuleFrontendIpConfigurationOutputWithContext(context.Background())
}

func (i OutboundRuleFrontendIpConfigurationArgs) ToOutboundRuleFrontendIpConfigurationOutputWithContext(ctx context.Context) OutboundRuleFrontendIpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutboundRuleFrontendIpConfigurationOutput)
}

type OutboundRuleFrontendIpConfigurationArrayInput interface {
	pulumi.Input

	ToOutboundRuleFrontendIpConfigurationArrayOutput() OutboundRuleFrontendIpConfigurationArrayOutput
	ToOutboundRuleFrontendIpConfigurationArrayOutputWithContext(context.Context) OutboundRuleFrontendIpConfigurationArrayOutput
}

type OutboundRuleFrontendIpConfigurationArray []OutboundRuleFrontendIpConfigurationInput

func (OutboundRuleFrontendIpConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutboundRuleFrontendIpConfiguration)(nil)).Elem()
}

func (i OutboundRuleFrontendIpConfigurationArray) ToOutboundRuleFrontendIpConfigurationArrayOutput() OutboundRuleFrontendIpConfigurationArrayOutput {
	return i.ToOutboundRuleFrontendIpConfigurationArrayOutputWithContext(context.Background())
}

func (i OutboundRuleFrontendIpConfigurationArray) ToOutboundRuleFrontendIpConfigurationArrayOutputWithContext(ctx context.Context) OutboundRuleFrontendIpConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutboundRuleFrontendIpConfigurationArrayOutput)
}

type OutboundRuleFrontendIpConfigurationOutput struct { *pulumi.OutputState }

func (OutboundRuleFrontendIpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutboundRuleFrontendIpConfiguration)(nil)).Elem()
}

func (o OutboundRuleFrontendIpConfigurationOutput) ToOutboundRuleFrontendIpConfigurationOutput() OutboundRuleFrontendIpConfigurationOutput {
	return o
}

func (o OutboundRuleFrontendIpConfigurationOutput) ToOutboundRuleFrontendIpConfigurationOutputWithContext(ctx context.Context) OutboundRuleFrontendIpConfigurationOutput {
	return o
}

// The ID of the Load Balancer Outbound Rule.
func (o OutboundRuleFrontendIpConfigurationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func (v OutboundRuleFrontendIpConfiguration) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Outbound Rule. Changing this forces a new resource to be created.
func (o OutboundRuleFrontendIpConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v OutboundRuleFrontendIpConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

type OutboundRuleFrontendIpConfigurationArrayOutput struct { *pulumi.OutputState}

func (OutboundRuleFrontendIpConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutboundRuleFrontendIpConfiguration)(nil)).Elem()
}

func (o OutboundRuleFrontendIpConfigurationArrayOutput) ToOutboundRuleFrontendIpConfigurationArrayOutput() OutboundRuleFrontendIpConfigurationArrayOutput {
	return o
}

func (o OutboundRuleFrontendIpConfigurationArrayOutput) ToOutboundRuleFrontendIpConfigurationArrayOutputWithContext(ctx context.Context) OutboundRuleFrontendIpConfigurationArrayOutput {
	return o
}

func (o OutboundRuleFrontendIpConfigurationArrayOutput) Index(i pulumi.IntInput) OutboundRuleFrontendIpConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) OutboundRuleFrontendIpConfiguration {
		return vs[0].([]OutboundRuleFrontendIpConfiguration)[vs[1].(int)]
	}).(OutboundRuleFrontendIpConfigurationOutput)
}

type GetBackendAddressPoolBackendIpConfiguration struct {
	// The ID of the Backend Address Pool.
	Id string `pulumi:"id"`
}

type GetBackendAddressPoolBackendIpConfigurationInput interface {
	pulumi.Input

	ToGetBackendAddressPoolBackendIpConfigurationOutput() GetBackendAddressPoolBackendIpConfigurationOutput
	ToGetBackendAddressPoolBackendIpConfigurationOutputWithContext(context.Context) GetBackendAddressPoolBackendIpConfigurationOutput
}

type GetBackendAddressPoolBackendIpConfigurationArgs struct {
	// The ID of the Backend Address Pool.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetBackendAddressPoolBackendIpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendAddressPoolBackendIpConfiguration)(nil)).Elem()
}

func (i GetBackendAddressPoolBackendIpConfigurationArgs) ToGetBackendAddressPoolBackendIpConfigurationOutput() GetBackendAddressPoolBackendIpConfigurationOutput {
	return i.ToGetBackendAddressPoolBackendIpConfigurationOutputWithContext(context.Background())
}

func (i GetBackendAddressPoolBackendIpConfigurationArgs) ToGetBackendAddressPoolBackendIpConfigurationOutputWithContext(ctx context.Context) GetBackendAddressPoolBackendIpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendAddressPoolBackendIpConfigurationOutput)
}

type GetBackendAddressPoolBackendIpConfigurationArrayInput interface {
	pulumi.Input

	ToGetBackendAddressPoolBackendIpConfigurationArrayOutput() GetBackendAddressPoolBackendIpConfigurationArrayOutput
	ToGetBackendAddressPoolBackendIpConfigurationArrayOutputWithContext(context.Context) GetBackendAddressPoolBackendIpConfigurationArrayOutput
}

type GetBackendAddressPoolBackendIpConfigurationArray []GetBackendAddressPoolBackendIpConfigurationInput

func (GetBackendAddressPoolBackendIpConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendAddressPoolBackendIpConfiguration)(nil)).Elem()
}

func (i GetBackendAddressPoolBackendIpConfigurationArray) ToGetBackendAddressPoolBackendIpConfigurationArrayOutput() GetBackendAddressPoolBackendIpConfigurationArrayOutput {
	return i.ToGetBackendAddressPoolBackendIpConfigurationArrayOutputWithContext(context.Background())
}

func (i GetBackendAddressPoolBackendIpConfigurationArray) ToGetBackendAddressPoolBackendIpConfigurationArrayOutputWithContext(ctx context.Context) GetBackendAddressPoolBackendIpConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendAddressPoolBackendIpConfigurationArrayOutput)
}

type GetBackendAddressPoolBackendIpConfigurationOutput struct { *pulumi.OutputState }

func (GetBackendAddressPoolBackendIpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendAddressPoolBackendIpConfiguration)(nil)).Elem()
}

func (o GetBackendAddressPoolBackendIpConfigurationOutput) ToGetBackendAddressPoolBackendIpConfigurationOutput() GetBackendAddressPoolBackendIpConfigurationOutput {
	return o
}

func (o GetBackendAddressPoolBackendIpConfigurationOutput) ToGetBackendAddressPoolBackendIpConfigurationOutputWithContext(ctx context.Context) GetBackendAddressPoolBackendIpConfigurationOutput {
	return o
}

// The ID of the Backend Address Pool.
func (o GetBackendAddressPoolBackendIpConfigurationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func (v GetBackendAddressPoolBackendIpConfiguration) string { return v.Id }).(pulumi.StringOutput)
}

type GetBackendAddressPoolBackendIpConfigurationArrayOutput struct { *pulumi.OutputState}

func (GetBackendAddressPoolBackendIpConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendAddressPoolBackendIpConfiguration)(nil)).Elem()
}

func (o GetBackendAddressPoolBackendIpConfigurationArrayOutput) ToGetBackendAddressPoolBackendIpConfigurationArrayOutput() GetBackendAddressPoolBackendIpConfigurationArrayOutput {
	return o
}

func (o GetBackendAddressPoolBackendIpConfigurationArrayOutput) ToGetBackendAddressPoolBackendIpConfigurationArrayOutputWithContext(ctx context.Context) GetBackendAddressPoolBackendIpConfigurationArrayOutput {
	return o
}

func (o GetBackendAddressPoolBackendIpConfigurationArrayOutput) Index(i pulumi.IntInput) GetBackendAddressPoolBackendIpConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) GetBackendAddressPoolBackendIpConfiguration {
		return vs[0].([]GetBackendAddressPoolBackendIpConfiguration)[vs[1].(int)]
	}).(GetBackendAddressPoolBackendIpConfigurationOutput)
}

type GetLBFrontendIpConfiguration struct {
	// The id of the Frontend IP Configuration.
	Id string `pulumi:"id"`
	// Specifies the name of the Load Balancer.
	Name string `pulumi:"name"`
	// Private IP Address to assign to the Load Balancer.
	PrivateIpAddress string `pulumi:"privateIpAddress"`
	// The allocation method for the Private IP Address used by this Load Balancer.
	PrivateIpAddressAllocation string `pulumi:"privateIpAddressAllocation"`
	// The Private IP Address Version, either `IPv4` or `IPv6`.
	PrivateIpAddressVersion string `pulumi:"privateIpAddressVersion"`
	// The ID of a  Public IP Address which is associated with this Load Balancer.
	PublicIpAddressId string `pulumi:"publicIpAddressId"`
	// The ID of the Subnet which is associated with the IP Configuration.
	SubnetId string `pulumi:"subnetId"`
	// A list of Availability Zones which the Load Balancer's IP Addresses should be created in.
	Zones []string `pulumi:"zones"`
}

type GetLBFrontendIpConfigurationInput interface {
	pulumi.Input

	ToGetLBFrontendIpConfigurationOutput() GetLBFrontendIpConfigurationOutput
	ToGetLBFrontendIpConfigurationOutputWithContext(context.Context) GetLBFrontendIpConfigurationOutput
}

type GetLBFrontendIpConfigurationArgs struct {
	// The id of the Frontend IP Configuration.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the name of the Load Balancer.
	Name pulumi.StringInput `pulumi:"name"`
	// Private IP Address to assign to the Load Balancer.
	PrivateIpAddress pulumi.StringInput `pulumi:"privateIpAddress"`
	// The allocation method for the Private IP Address used by this Load Balancer.
	PrivateIpAddressAllocation pulumi.StringInput `pulumi:"privateIpAddressAllocation"`
	// The Private IP Address Version, either `IPv4` or `IPv6`.
	PrivateIpAddressVersion pulumi.StringInput `pulumi:"privateIpAddressVersion"`
	// The ID of a  Public IP Address which is associated with this Load Balancer.
	PublicIpAddressId pulumi.StringInput `pulumi:"publicIpAddressId"`
	// The ID of the Subnet which is associated with the IP Configuration.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// A list of Availability Zones which the Load Balancer's IP Addresses should be created in.
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (GetLBFrontendIpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBFrontendIpConfiguration)(nil)).Elem()
}

func (i GetLBFrontendIpConfigurationArgs) ToGetLBFrontendIpConfigurationOutput() GetLBFrontendIpConfigurationOutput {
	return i.ToGetLBFrontendIpConfigurationOutputWithContext(context.Background())
}

func (i GetLBFrontendIpConfigurationArgs) ToGetLBFrontendIpConfigurationOutputWithContext(ctx context.Context) GetLBFrontendIpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBFrontendIpConfigurationOutput)
}

type GetLBFrontendIpConfigurationArrayInput interface {
	pulumi.Input

	ToGetLBFrontendIpConfigurationArrayOutput() GetLBFrontendIpConfigurationArrayOutput
	ToGetLBFrontendIpConfigurationArrayOutputWithContext(context.Context) GetLBFrontendIpConfigurationArrayOutput
}

type GetLBFrontendIpConfigurationArray []GetLBFrontendIpConfigurationInput

func (GetLBFrontendIpConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBFrontendIpConfiguration)(nil)).Elem()
}

func (i GetLBFrontendIpConfigurationArray) ToGetLBFrontendIpConfigurationArrayOutput() GetLBFrontendIpConfigurationArrayOutput {
	return i.ToGetLBFrontendIpConfigurationArrayOutputWithContext(context.Background())
}

func (i GetLBFrontendIpConfigurationArray) ToGetLBFrontendIpConfigurationArrayOutputWithContext(ctx context.Context) GetLBFrontendIpConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBFrontendIpConfigurationArrayOutput)
}

type GetLBFrontendIpConfigurationOutput struct { *pulumi.OutputState }

func (GetLBFrontendIpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBFrontendIpConfiguration)(nil)).Elem()
}

func (o GetLBFrontendIpConfigurationOutput) ToGetLBFrontendIpConfigurationOutput() GetLBFrontendIpConfigurationOutput {
	return o
}

func (o GetLBFrontendIpConfigurationOutput) ToGetLBFrontendIpConfigurationOutputWithContext(ctx context.Context) GetLBFrontendIpConfigurationOutput {
	return o
}

// The id of the Frontend IP Configuration.
func (o GetLBFrontendIpConfigurationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func (v GetLBFrontendIpConfiguration) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the name of the Load Balancer.
func (o GetLBFrontendIpConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v GetLBFrontendIpConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

// Private IP Address to assign to the Load Balancer.
func (o GetLBFrontendIpConfigurationOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func (v GetLBFrontendIpConfiguration) string { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

// The allocation method for the Private IP Address used by this Load Balancer.
func (o GetLBFrontendIpConfigurationOutput) PrivateIpAddressAllocation() pulumi.StringOutput {
	return o.ApplyT(func (v GetLBFrontendIpConfiguration) string { return v.PrivateIpAddressAllocation }).(pulumi.StringOutput)
}

// The Private IP Address Version, either `IPv4` or `IPv6`.
func (o GetLBFrontendIpConfigurationOutput) PrivateIpAddressVersion() pulumi.StringOutput {
	return o.ApplyT(func (v GetLBFrontendIpConfiguration) string { return v.PrivateIpAddressVersion }).(pulumi.StringOutput)
}

// The ID of a  Public IP Address which is associated with this Load Balancer.
func (o GetLBFrontendIpConfigurationOutput) PublicIpAddressId() pulumi.StringOutput {
	return o.ApplyT(func (v GetLBFrontendIpConfiguration) string { return v.PublicIpAddressId }).(pulumi.StringOutput)
}

// The ID of the Subnet which is associated with the IP Configuration.
func (o GetLBFrontendIpConfigurationOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func (v GetLBFrontendIpConfiguration) string { return v.SubnetId }).(pulumi.StringOutput)
}

// A list of Availability Zones which the Load Balancer's IP Addresses should be created in.
func (o GetLBFrontendIpConfigurationOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func (v GetLBFrontendIpConfiguration) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type GetLBFrontendIpConfigurationArrayOutput struct { *pulumi.OutputState}

func (GetLBFrontendIpConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBFrontendIpConfiguration)(nil)).Elem()
}

func (o GetLBFrontendIpConfigurationArrayOutput) ToGetLBFrontendIpConfigurationArrayOutput() GetLBFrontendIpConfigurationArrayOutput {
	return o
}

func (o GetLBFrontendIpConfigurationArrayOutput) ToGetLBFrontendIpConfigurationArrayOutputWithContext(ctx context.Context) GetLBFrontendIpConfigurationArrayOutput {
	return o
}

func (o GetLBFrontendIpConfigurationArrayOutput) Index(i pulumi.IntInput) GetLBFrontendIpConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) GetLBFrontendIpConfiguration {
		return vs[0].([]GetLBFrontendIpConfiguration)[vs[1].(int)]
	}).(GetLBFrontendIpConfigurationOutput)
}

func init() {
	pulumi.RegisterOutputType(LoadBalancerFrontendIpConfigurationOutput{})
	pulumi.RegisterOutputType(LoadBalancerFrontendIpConfigurationArrayOutput{})
	pulumi.RegisterOutputType(OutboundRuleFrontendIpConfigurationOutput{})
	pulumi.RegisterOutputType(OutboundRuleFrontendIpConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetBackendAddressPoolBackendIpConfigurationOutput{})
	pulumi.RegisterOutputType(GetBackendAddressPoolBackendIpConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetLBFrontendIpConfigurationOutput{})
	pulumi.RegisterOutputType(GetLBFrontendIpConfigurationArrayOutput{})
}
