// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BackendAddressPoolBackendAddress struct {
	IpAddress string `pulumi:"ipAddress"`
	// Specifies the name of the Backend Address Pool.
	Name             string `pulumi:"name"`
	VirtualNetworkId string `pulumi:"virtualNetworkId"`
}

// BackendAddressPoolBackendAddressInput is an input type that accepts BackendAddressPoolBackendAddressArgs and BackendAddressPoolBackendAddressOutput values.
// You can construct a concrete instance of `BackendAddressPoolBackendAddressInput` via:
//
//          BackendAddressPoolBackendAddressArgs{...}
type BackendAddressPoolBackendAddressInput interface {
	pulumi.Input

	ToBackendAddressPoolBackendAddressOutput() BackendAddressPoolBackendAddressOutput
	ToBackendAddressPoolBackendAddressOutputWithContext(context.Context) BackendAddressPoolBackendAddressOutput
}

type BackendAddressPoolBackendAddressArgs struct {
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Specifies the name of the Backend Address Pool.
	Name             pulumi.StringInput `pulumi:"name"`
	VirtualNetworkId pulumi.StringInput `pulumi:"virtualNetworkId"`
}

func (BackendAddressPoolBackendAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendAddressPoolBackendAddress)(nil)).Elem()
}

func (i BackendAddressPoolBackendAddressArgs) ToBackendAddressPoolBackendAddressOutput() BackendAddressPoolBackendAddressOutput {
	return i.ToBackendAddressPoolBackendAddressOutputWithContext(context.Background())
}

func (i BackendAddressPoolBackendAddressArgs) ToBackendAddressPoolBackendAddressOutputWithContext(ctx context.Context) BackendAddressPoolBackendAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendAddressPoolBackendAddressOutput)
}

// BackendAddressPoolBackendAddressArrayInput is an input type that accepts BackendAddressPoolBackendAddressArray and BackendAddressPoolBackendAddressArrayOutput values.
// You can construct a concrete instance of `BackendAddressPoolBackendAddressArrayInput` via:
//
//          BackendAddressPoolBackendAddressArray{ BackendAddressPoolBackendAddressArgs{...} }
type BackendAddressPoolBackendAddressArrayInput interface {
	pulumi.Input

	ToBackendAddressPoolBackendAddressArrayOutput() BackendAddressPoolBackendAddressArrayOutput
	ToBackendAddressPoolBackendAddressArrayOutputWithContext(context.Context) BackendAddressPoolBackendAddressArrayOutput
}

type BackendAddressPoolBackendAddressArray []BackendAddressPoolBackendAddressInput

func (BackendAddressPoolBackendAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendAddressPoolBackendAddress)(nil)).Elem()
}

func (i BackendAddressPoolBackendAddressArray) ToBackendAddressPoolBackendAddressArrayOutput() BackendAddressPoolBackendAddressArrayOutput {
	return i.ToBackendAddressPoolBackendAddressArrayOutputWithContext(context.Background())
}

func (i BackendAddressPoolBackendAddressArray) ToBackendAddressPoolBackendAddressArrayOutputWithContext(ctx context.Context) BackendAddressPoolBackendAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendAddressPoolBackendAddressArrayOutput)
}

type BackendAddressPoolBackendAddressOutput struct{ *pulumi.OutputState }

func (BackendAddressPoolBackendAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendAddressPoolBackendAddress)(nil)).Elem()
}

func (o BackendAddressPoolBackendAddressOutput) ToBackendAddressPoolBackendAddressOutput() BackendAddressPoolBackendAddressOutput {
	return o
}

func (o BackendAddressPoolBackendAddressOutput) ToBackendAddressPoolBackendAddressOutputWithContext(ctx context.Context) BackendAddressPoolBackendAddressOutput {
	return o
}

func (o BackendAddressPoolBackendAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v BackendAddressPoolBackendAddress) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Specifies the name of the Backend Address Pool.
func (o BackendAddressPoolBackendAddressOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BackendAddressPoolBackendAddress) string { return v.Name }).(pulumi.StringOutput)
}

func (o BackendAddressPoolBackendAddressOutput) VirtualNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v BackendAddressPoolBackendAddress) string { return v.VirtualNetworkId }).(pulumi.StringOutput)
}

type BackendAddressPoolBackendAddressArrayOutput struct{ *pulumi.OutputState }

func (BackendAddressPoolBackendAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendAddressPoolBackendAddress)(nil)).Elem()
}

func (o BackendAddressPoolBackendAddressArrayOutput) ToBackendAddressPoolBackendAddressArrayOutput() BackendAddressPoolBackendAddressArrayOutput {
	return o
}

func (o BackendAddressPoolBackendAddressArrayOutput) ToBackendAddressPoolBackendAddressArrayOutputWithContext(ctx context.Context) BackendAddressPoolBackendAddressArrayOutput {
	return o
}

func (o BackendAddressPoolBackendAddressArrayOutput) Index(i pulumi.IntInput) BackendAddressPoolBackendAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendAddressPoolBackendAddress {
		return vs[0].([]BackendAddressPoolBackendAddress)[vs[1].(int)]
	}).(BackendAddressPoolBackendAddressOutput)
}

type LoadBalancerFrontendIpConfiguration struct {
	// The id of the Frontend IP Configuration.
	Id *string `pulumi:"id"`
	// The list of IDs of inbound rules that use this frontend IP.
	InboundNatRules []string `pulumi:"inboundNatRules"`
	// The list of IDs of load balancing rules that use this frontend IP.
	LoadBalancerRules []string `pulumi:"loadBalancerRules"`
	// Specifies the name of the frontend ip configuration.
	Name string `pulumi:"name"`
	// The list of IDs outbound rules that use this frontend IP.
	OutboundRules []string `pulumi:"outboundRules"`
	// Private IP Address to assign to the Load Balancer. The last one and first four IPs in any range are reserved and cannot be manually assigned.
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
	// The allocation method for the Private IP Address used by this Load Balancer. Possible values as `Dynamic` and `Static`.
	PrivateIpAddressAllocation *string `pulumi:"privateIpAddressAllocation"`
	// The version of IP that the Private IP Address is. Possible values are `IPv4` or `IPv6`.
	PrivateIpAddressVersion *string `pulumi:"privateIpAddressVersion"`
	// The ID of a Public IP Address which should be associated with the Load Balancer.
	PublicIpAddressId *string `pulumi:"publicIpAddressId"`
	// The ID of a Public IP Prefix which should be associated with the Load Balancer. Public IP Prefix can only be used with outbound rules.
	PublicIpPrefixId *string `pulumi:"publicIpPrefixId"`
	// The ID of the Subnet which should be associated with the IP Configuration.
	SubnetId *string `pulumi:"subnetId"`
	// A list of Availability Zones which the Load Balancer's IP Addresses should be created in.
	Zones *string `pulumi:"zones"`
}

// LoadBalancerFrontendIpConfigurationInput is an input type that accepts LoadBalancerFrontendIpConfigurationArgs and LoadBalancerFrontendIpConfigurationOutput values.
// You can construct a concrete instance of `LoadBalancerFrontendIpConfigurationInput` via:
//
//          LoadBalancerFrontendIpConfigurationArgs{...}
type LoadBalancerFrontendIpConfigurationInput interface {
	pulumi.Input

	ToLoadBalancerFrontendIpConfigurationOutput() LoadBalancerFrontendIpConfigurationOutput
	ToLoadBalancerFrontendIpConfigurationOutputWithContext(context.Context) LoadBalancerFrontendIpConfigurationOutput
}

type LoadBalancerFrontendIpConfigurationArgs struct {
	// The id of the Frontend IP Configuration.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The list of IDs of inbound rules that use this frontend IP.
	InboundNatRules pulumi.StringArrayInput `pulumi:"inboundNatRules"`
	// The list of IDs of load balancing rules that use this frontend IP.
	LoadBalancerRules pulumi.StringArrayInput `pulumi:"loadBalancerRules"`
	// Specifies the name of the frontend ip configuration.
	Name pulumi.StringInput `pulumi:"name"`
	// The list of IDs outbound rules that use this frontend IP.
	OutboundRules pulumi.StringArrayInput `pulumi:"outboundRules"`
	// Private IP Address to assign to the Load Balancer. The last one and first four IPs in any range are reserved and cannot be manually assigned.
	PrivateIpAddress pulumi.StringPtrInput `pulumi:"privateIpAddress"`
	// The allocation method for the Private IP Address used by this Load Balancer. Possible values as `Dynamic` and `Static`.
	PrivateIpAddressAllocation pulumi.StringPtrInput `pulumi:"privateIpAddressAllocation"`
	// The version of IP that the Private IP Address is. Possible values are `IPv4` or `IPv6`.
	PrivateIpAddressVersion pulumi.StringPtrInput `pulumi:"privateIpAddressVersion"`
	// The ID of a Public IP Address which should be associated with the Load Balancer.
	PublicIpAddressId pulumi.StringPtrInput `pulumi:"publicIpAddressId"`
	// The ID of a Public IP Prefix which should be associated with the Load Balancer. Public IP Prefix can only be used with outbound rules.
	PublicIpPrefixId pulumi.StringPtrInput `pulumi:"publicIpPrefixId"`
	// The ID of the Subnet which should be associated with the IP Configuration.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// A list of Availability Zones which the Load Balancer's IP Addresses should be created in.
	Zones pulumi.StringPtrInput `pulumi:"zones"`
}

func (LoadBalancerFrontendIpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerFrontendIpConfiguration)(nil)).Elem()
}

func (i LoadBalancerFrontendIpConfigurationArgs) ToLoadBalancerFrontendIpConfigurationOutput() LoadBalancerFrontendIpConfigurationOutput {
	return i.ToLoadBalancerFrontendIpConfigurationOutputWithContext(context.Background())
}

func (i LoadBalancerFrontendIpConfigurationArgs) ToLoadBalancerFrontendIpConfigurationOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerFrontendIpConfigurationOutput)
}

// LoadBalancerFrontendIpConfigurationArrayInput is an input type that accepts LoadBalancerFrontendIpConfigurationArray and LoadBalancerFrontendIpConfigurationArrayOutput values.
// You can construct a concrete instance of `LoadBalancerFrontendIpConfigurationArrayInput` via:
//
//          LoadBalancerFrontendIpConfigurationArray{ LoadBalancerFrontendIpConfigurationArgs{...} }
type LoadBalancerFrontendIpConfigurationArrayInput interface {
	pulumi.Input

	ToLoadBalancerFrontendIpConfigurationArrayOutput() LoadBalancerFrontendIpConfigurationArrayOutput
	ToLoadBalancerFrontendIpConfigurationArrayOutputWithContext(context.Context) LoadBalancerFrontendIpConfigurationArrayOutput
}

type LoadBalancerFrontendIpConfigurationArray []LoadBalancerFrontendIpConfigurationInput

func (LoadBalancerFrontendIpConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerFrontendIpConfiguration)(nil)).Elem()
}

func (i LoadBalancerFrontendIpConfigurationArray) ToLoadBalancerFrontendIpConfigurationArrayOutput() LoadBalancerFrontendIpConfigurationArrayOutput {
	return i.ToLoadBalancerFrontendIpConfigurationArrayOutputWithContext(context.Background())
}

func (i LoadBalancerFrontendIpConfigurationArray) ToLoadBalancerFrontendIpConfigurationArrayOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerFrontendIpConfigurationArrayOutput)
}

type LoadBalancerFrontendIpConfigurationOutput struct{ *pulumi.OutputState }

func (LoadBalancerFrontendIpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerFrontendIpConfiguration)(nil)).Elem()
}

func (o LoadBalancerFrontendIpConfigurationOutput) ToLoadBalancerFrontendIpConfigurationOutput() LoadBalancerFrontendIpConfigurationOutput {
	return o
}

func (o LoadBalancerFrontendIpConfigurationOutput) ToLoadBalancerFrontendIpConfigurationOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationOutput {
	return o
}

// The id of the Frontend IP Configuration.
func (o LoadBalancerFrontendIpConfigurationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfiguration) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The list of IDs of inbound rules that use this frontend IP.
func (o LoadBalancerFrontendIpConfigurationOutput) InboundNatRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfiguration) []string { return v.InboundNatRules }).(pulumi.StringArrayOutput)
}

// The list of IDs of load balancing rules that use this frontend IP.
func (o LoadBalancerFrontendIpConfigurationOutput) LoadBalancerRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfiguration) []string { return v.LoadBalancerRules }).(pulumi.StringArrayOutput)
}

// Specifies the name of the frontend ip configuration.
func (o LoadBalancerFrontendIpConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

// The list of IDs outbound rules that use this frontend IP.
func (o LoadBalancerFrontendIpConfigurationOutput) OutboundRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfiguration) []string { return v.OutboundRules }).(pulumi.StringArrayOutput)
}

// Private IP Address to assign to the Load Balancer. The last one and first four IPs in any range are reserved and cannot be manually assigned.
func (o LoadBalancerFrontendIpConfigurationOutput) PrivateIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfiguration) *string { return v.PrivateIpAddress }).(pulumi.StringPtrOutput)
}

// The allocation method for the Private IP Address used by this Load Balancer. Possible values as `Dynamic` and `Static`.
func (o LoadBalancerFrontendIpConfigurationOutput) PrivateIpAddressAllocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfiguration) *string { return v.PrivateIpAddressAllocation }).(pulumi.StringPtrOutput)
}

// The version of IP that the Private IP Address is. Possible values are `IPv4` or `IPv6`.
func (o LoadBalancerFrontendIpConfigurationOutput) PrivateIpAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfiguration) *string { return v.PrivateIpAddressVersion }).(pulumi.StringPtrOutput)
}

// The ID of a Public IP Address which should be associated with the Load Balancer.
func (o LoadBalancerFrontendIpConfigurationOutput) PublicIpAddressId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfiguration) *string { return v.PublicIpAddressId }).(pulumi.StringPtrOutput)
}

// The ID of a Public IP Prefix which should be associated with the Load Balancer. Public IP Prefix can only be used with outbound rules.
func (o LoadBalancerFrontendIpConfigurationOutput) PublicIpPrefixId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfiguration) *string { return v.PublicIpPrefixId }).(pulumi.StringPtrOutput)
}

// The ID of the Subnet which should be associated with the IP Configuration.
func (o LoadBalancerFrontendIpConfigurationOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfiguration) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// A list of Availability Zones which the Load Balancer's IP Addresses should be created in.
func (o LoadBalancerFrontendIpConfigurationOutput) Zones() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerFrontendIpConfiguration) *string { return v.Zones }).(pulumi.StringPtrOutput)
}

type LoadBalancerFrontendIpConfigurationArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerFrontendIpConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerFrontendIpConfiguration)(nil)).Elem()
}

func (o LoadBalancerFrontendIpConfigurationArrayOutput) ToLoadBalancerFrontendIpConfigurationArrayOutput() LoadBalancerFrontendIpConfigurationArrayOutput {
	return o
}

func (o LoadBalancerFrontendIpConfigurationArrayOutput) ToLoadBalancerFrontendIpConfigurationArrayOutputWithContext(ctx context.Context) LoadBalancerFrontendIpConfigurationArrayOutput {
	return o
}

func (o LoadBalancerFrontendIpConfigurationArrayOutput) Index(i pulumi.IntInput) LoadBalancerFrontendIpConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerFrontendIpConfiguration {
		return vs[0].([]LoadBalancerFrontendIpConfiguration)[vs[1].(int)]
	}).(LoadBalancerFrontendIpConfigurationOutput)
}

type OutboundRuleFrontendIpConfiguration struct {
	// The ID of the Load Balancer Outbound Rule.
	Id *string `pulumi:"id"`
	// The name of the Frontend IP Configuration.
	Name string `pulumi:"name"`
}

// OutboundRuleFrontendIpConfigurationInput is an input type that accepts OutboundRuleFrontendIpConfigurationArgs and OutboundRuleFrontendIpConfigurationOutput values.
// You can construct a concrete instance of `OutboundRuleFrontendIpConfigurationInput` via:
//
//          OutboundRuleFrontendIpConfigurationArgs{...}
type OutboundRuleFrontendIpConfigurationInput interface {
	pulumi.Input

	ToOutboundRuleFrontendIpConfigurationOutput() OutboundRuleFrontendIpConfigurationOutput
	ToOutboundRuleFrontendIpConfigurationOutputWithContext(context.Context) OutboundRuleFrontendIpConfigurationOutput
}

type OutboundRuleFrontendIpConfigurationArgs struct {
	// The ID of the Load Balancer Outbound Rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the Frontend IP Configuration.
	Name pulumi.StringInput `pulumi:"name"`
}

func (OutboundRuleFrontendIpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutboundRuleFrontendIpConfiguration)(nil)).Elem()
}

func (i OutboundRuleFrontendIpConfigurationArgs) ToOutboundRuleFrontendIpConfigurationOutput() OutboundRuleFrontendIpConfigurationOutput {
	return i.ToOutboundRuleFrontendIpConfigurationOutputWithContext(context.Background())
}

func (i OutboundRuleFrontendIpConfigurationArgs) ToOutboundRuleFrontendIpConfigurationOutputWithContext(ctx context.Context) OutboundRuleFrontendIpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutboundRuleFrontendIpConfigurationOutput)
}

// OutboundRuleFrontendIpConfigurationArrayInput is an input type that accepts OutboundRuleFrontendIpConfigurationArray and OutboundRuleFrontendIpConfigurationArrayOutput values.
// You can construct a concrete instance of `OutboundRuleFrontendIpConfigurationArrayInput` via:
//
//          OutboundRuleFrontendIpConfigurationArray{ OutboundRuleFrontendIpConfigurationArgs{...} }
type OutboundRuleFrontendIpConfigurationArrayInput interface {
	pulumi.Input

	ToOutboundRuleFrontendIpConfigurationArrayOutput() OutboundRuleFrontendIpConfigurationArrayOutput
	ToOutboundRuleFrontendIpConfigurationArrayOutputWithContext(context.Context) OutboundRuleFrontendIpConfigurationArrayOutput
}

type OutboundRuleFrontendIpConfigurationArray []OutboundRuleFrontendIpConfigurationInput

func (OutboundRuleFrontendIpConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutboundRuleFrontendIpConfiguration)(nil)).Elem()
}

func (i OutboundRuleFrontendIpConfigurationArray) ToOutboundRuleFrontendIpConfigurationArrayOutput() OutboundRuleFrontendIpConfigurationArrayOutput {
	return i.ToOutboundRuleFrontendIpConfigurationArrayOutputWithContext(context.Background())
}

func (i OutboundRuleFrontendIpConfigurationArray) ToOutboundRuleFrontendIpConfigurationArrayOutputWithContext(ctx context.Context) OutboundRuleFrontendIpConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutboundRuleFrontendIpConfigurationArrayOutput)
}

type OutboundRuleFrontendIpConfigurationOutput struct{ *pulumi.OutputState }

func (OutboundRuleFrontendIpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutboundRuleFrontendIpConfiguration)(nil)).Elem()
}

func (o OutboundRuleFrontendIpConfigurationOutput) ToOutboundRuleFrontendIpConfigurationOutput() OutboundRuleFrontendIpConfigurationOutput {
	return o
}

func (o OutboundRuleFrontendIpConfigurationOutput) ToOutboundRuleFrontendIpConfigurationOutputWithContext(ctx context.Context) OutboundRuleFrontendIpConfigurationOutput {
	return o
}

// The ID of the Load Balancer Outbound Rule.
func (o OutboundRuleFrontendIpConfigurationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutboundRuleFrontendIpConfiguration) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the Frontend IP Configuration.
func (o OutboundRuleFrontendIpConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OutboundRuleFrontendIpConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

type OutboundRuleFrontendIpConfigurationArrayOutput struct{ *pulumi.OutputState }

func (OutboundRuleFrontendIpConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutboundRuleFrontendIpConfiguration)(nil)).Elem()
}

func (o OutboundRuleFrontendIpConfigurationArrayOutput) ToOutboundRuleFrontendIpConfigurationArrayOutput() OutboundRuleFrontendIpConfigurationArrayOutput {
	return o
}

func (o OutboundRuleFrontendIpConfigurationArrayOutput) ToOutboundRuleFrontendIpConfigurationArrayOutputWithContext(ctx context.Context) OutboundRuleFrontendIpConfigurationArrayOutput {
	return o
}

func (o OutboundRuleFrontendIpConfigurationArrayOutput) Index(i pulumi.IntInput) OutboundRuleFrontendIpConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OutboundRuleFrontendIpConfiguration {
		return vs[0].([]OutboundRuleFrontendIpConfiguration)[vs[1].(int)]
	}).(OutboundRuleFrontendIpConfigurationOutput)
}

type GetBackendAddressPoolBackendAddress struct {
	// The Static IP address for this Load Balancer within the Virtual Network.
	IpAddress string `pulumi:"ipAddress"`
	// Specifies the name of the Backend Address Pool.
	Name string `pulumi:"name"`
	// The ID of the Virtual Network where the Backend Address of the Load Balancer exists.
	VirtualNetworkId string `pulumi:"virtualNetworkId"`
}

// GetBackendAddressPoolBackendAddressInput is an input type that accepts GetBackendAddressPoolBackendAddressArgs and GetBackendAddressPoolBackendAddressOutput values.
// You can construct a concrete instance of `GetBackendAddressPoolBackendAddressInput` via:
//
//          GetBackendAddressPoolBackendAddressArgs{...}
type GetBackendAddressPoolBackendAddressInput interface {
	pulumi.Input

	ToGetBackendAddressPoolBackendAddressOutput() GetBackendAddressPoolBackendAddressOutput
	ToGetBackendAddressPoolBackendAddressOutputWithContext(context.Context) GetBackendAddressPoolBackendAddressOutput
}

type GetBackendAddressPoolBackendAddressArgs struct {
	// The Static IP address for this Load Balancer within the Virtual Network.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Specifies the name of the Backend Address Pool.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the Virtual Network where the Backend Address of the Load Balancer exists.
	VirtualNetworkId pulumi.StringInput `pulumi:"virtualNetworkId"`
}

func (GetBackendAddressPoolBackendAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendAddressPoolBackendAddress)(nil)).Elem()
}

func (i GetBackendAddressPoolBackendAddressArgs) ToGetBackendAddressPoolBackendAddressOutput() GetBackendAddressPoolBackendAddressOutput {
	return i.ToGetBackendAddressPoolBackendAddressOutputWithContext(context.Background())
}

func (i GetBackendAddressPoolBackendAddressArgs) ToGetBackendAddressPoolBackendAddressOutputWithContext(ctx context.Context) GetBackendAddressPoolBackendAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendAddressPoolBackendAddressOutput)
}

// GetBackendAddressPoolBackendAddressArrayInput is an input type that accepts GetBackendAddressPoolBackendAddressArray and GetBackendAddressPoolBackendAddressArrayOutput values.
// You can construct a concrete instance of `GetBackendAddressPoolBackendAddressArrayInput` via:
//
//          GetBackendAddressPoolBackendAddressArray{ GetBackendAddressPoolBackendAddressArgs{...} }
type GetBackendAddressPoolBackendAddressArrayInput interface {
	pulumi.Input

	ToGetBackendAddressPoolBackendAddressArrayOutput() GetBackendAddressPoolBackendAddressArrayOutput
	ToGetBackendAddressPoolBackendAddressArrayOutputWithContext(context.Context) GetBackendAddressPoolBackendAddressArrayOutput
}

type GetBackendAddressPoolBackendAddressArray []GetBackendAddressPoolBackendAddressInput

func (GetBackendAddressPoolBackendAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendAddressPoolBackendAddress)(nil)).Elem()
}

func (i GetBackendAddressPoolBackendAddressArray) ToGetBackendAddressPoolBackendAddressArrayOutput() GetBackendAddressPoolBackendAddressArrayOutput {
	return i.ToGetBackendAddressPoolBackendAddressArrayOutputWithContext(context.Background())
}

func (i GetBackendAddressPoolBackendAddressArray) ToGetBackendAddressPoolBackendAddressArrayOutputWithContext(ctx context.Context) GetBackendAddressPoolBackendAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendAddressPoolBackendAddressArrayOutput)
}

type GetBackendAddressPoolBackendAddressOutput struct{ *pulumi.OutputState }

func (GetBackendAddressPoolBackendAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendAddressPoolBackendAddress)(nil)).Elem()
}

func (o GetBackendAddressPoolBackendAddressOutput) ToGetBackendAddressPoolBackendAddressOutput() GetBackendAddressPoolBackendAddressOutput {
	return o
}

func (o GetBackendAddressPoolBackendAddressOutput) ToGetBackendAddressPoolBackendAddressOutputWithContext(ctx context.Context) GetBackendAddressPoolBackendAddressOutput {
	return o
}

// The Static IP address for this Load Balancer within the Virtual Network.
func (o GetBackendAddressPoolBackendAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendAddressPoolBackendAddress) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Specifies the name of the Backend Address Pool.
func (o GetBackendAddressPoolBackendAddressOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendAddressPoolBackendAddress) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Virtual Network where the Backend Address of the Load Balancer exists.
func (o GetBackendAddressPoolBackendAddressOutput) VirtualNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendAddressPoolBackendAddress) string { return v.VirtualNetworkId }).(pulumi.StringOutput)
}

type GetBackendAddressPoolBackendAddressArrayOutput struct{ *pulumi.OutputState }

func (GetBackendAddressPoolBackendAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendAddressPoolBackendAddress)(nil)).Elem()
}

func (o GetBackendAddressPoolBackendAddressArrayOutput) ToGetBackendAddressPoolBackendAddressArrayOutput() GetBackendAddressPoolBackendAddressArrayOutput {
	return o
}

func (o GetBackendAddressPoolBackendAddressArrayOutput) ToGetBackendAddressPoolBackendAddressArrayOutputWithContext(ctx context.Context) GetBackendAddressPoolBackendAddressArrayOutput {
	return o
}

func (o GetBackendAddressPoolBackendAddressArrayOutput) Index(i pulumi.IntInput) GetBackendAddressPoolBackendAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendAddressPoolBackendAddress {
		return vs[0].([]GetBackendAddressPoolBackendAddress)[vs[1].(int)]
	}).(GetBackendAddressPoolBackendAddressOutput)
}

type GetBackendAddressPoolBackendIpConfiguration struct {
	// The ID of the Backend Address Pool.
	Id string `pulumi:"id"`
}

// GetBackendAddressPoolBackendIpConfigurationInput is an input type that accepts GetBackendAddressPoolBackendIpConfigurationArgs and GetBackendAddressPoolBackendIpConfigurationOutput values.
// You can construct a concrete instance of `GetBackendAddressPoolBackendIpConfigurationInput` via:
//
//          GetBackendAddressPoolBackendIpConfigurationArgs{...}
type GetBackendAddressPoolBackendIpConfigurationInput interface {
	pulumi.Input

	ToGetBackendAddressPoolBackendIpConfigurationOutput() GetBackendAddressPoolBackendIpConfigurationOutput
	ToGetBackendAddressPoolBackendIpConfigurationOutputWithContext(context.Context) GetBackendAddressPoolBackendIpConfigurationOutput
}

type GetBackendAddressPoolBackendIpConfigurationArgs struct {
	// The ID of the Backend Address Pool.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetBackendAddressPoolBackendIpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendAddressPoolBackendIpConfiguration)(nil)).Elem()
}

func (i GetBackendAddressPoolBackendIpConfigurationArgs) ToGetBackendAddressPoolBackendIpConfigurationOutput() GetBackendAddressPoolBackendIpConfigurationOutput {
	return i.ToGetBackendAddressPoolBackendIpConfigurationOutputWithContext(context.Background())
}

func (i GetBackendAddressPoolBackendIpConfigurationArgs) ToGetBackendAddressPoolBackendIpConfigurationOutputWithContext(ctx context.Context) GetBackendAddressPoolBackendIpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendAddressPoolBackendIpConfigurationOutput)
}

// GetBackendAddressPoolBackendIpConfigurationArrayInput is an input type that accepts GetBackendAddressPoolBackendIpConfigurationArray and GetBackendAddressPoolBackendIpConfigurationArrayOutput values.
// You can construct a concrete instance of `GetBackendAddressPoolBackendIpConfigurationArrayInput` via:
//
//          GetBackendAddressPoolBackendIpConfigurationArray{ GetBackendAddressPoolBackendIpConfigurationArgs{...} }
type GetBackendAddressPoolBackendIpConfigurationArrayInput interface {
	pulumi.Input

	ToGetBackendAddressPoolBackendIpConfigurationArrayOutput() GetBackendAddressPoolBackendIpConfigurationArrayOutput
	ToGetBackendAddressPoolBackendIpConfigurationArrayOutputWithContext(context.Context) GetBackendAddressPoolBackendIpConfigurationArrayOutput
}

type GetBackendAddressPoolBackendIpConfigurationArray []GetBackendAddressPoolBackendIpConfigurationInput

func (GetBackendAddressPoolBackendIpConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendAddressPoolBackendIpConfiguration)(nil)).Elem()
}

func (i GetBackendAddressPoolBackendIpConfigurationArray) ToGetBackendAddressPoolBackendIpConfigurationArrayOutput() GetBackendAddressPoolBackendIpConfigurationArrayOutput {
	return i.ToGetBackendAddressPoolBackendIpConfigurationArrayOutputWithContext(context.Background())
}

func (i GetBackendAddressPoolBackendIpConfigurationArray) ToGetBackendAddressPoolBackendIpConfigurationArrayOutputWithContext(ctx context.Context) GetBackendAddressPoolBackendIpConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackendAddressPoolBackendIpConfigurationArrayOutput)
}

type GetBackendAddressPoolBackendIpConfigurationOutput struct{ *pulumi.OutputState }

func (GetBackendAddressPoolBackendIpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackendAddressPoolBackendIpConfiguration)(nil)).Elem()
}

func (o GetBackendAddressPoolBackendIpConfigurationOutput) ToGetBackendAddressPoolBackendIpConfigurationOutput() GetBackendAddressPoolBackendIpConfigurationOutput {
	return o
}

func (o GetBackendAddressPoolBackendIpConfigurationOutput) ToGetBackendAddressPoolBackendIpConfigurationOutputWithContext(ctx context.Context) GetBackendAddressPoolBackendIpConfigurationOutput {
	return o
}

// The ID of the Backend Address Pool.
func (o GetBackendAddressPoolBackendIpConfigurationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackendAddressPoolBackendIpConfiguration) string { return v.Id }).(pulumi.StringOutput)
}

type GetBackendAddressPoolBackendIpConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetBackendAddressPoolBackendIpConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackendAddressPoolBackendIpConfiguration)(nil)).Elem()
}

func (o GetBackendAddressPoolBackendIpConfigurationArrayOutput) ToGetBackendAddressPoolBackendIpConfigurationArrayOutput() GetBackendAddressPoolBackendIpConfigurationArrayOutput {
	return o
}

func (o GetBackendAddressPoolBackendIpConfigurationArrayOutput) ToGetBackendAddressPoolBackendIpConfigurationArrayOutputWithContext(ctx context.Context) GetBackendAddressPoolBackendIpConfigurationArrayOutput {
	return o
}

func (o GetBackendAddressPoolBackendIpConfigurationArrayOutput) Index(i pulumi.IntInput) GetBackendAddressPoolBackendIpConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackendAddressPoolBackendIpConfiguration {
		return vs[0].([]GetBackendAddressPoolBackendIpConfiguration)[vs[1].(int)]
	}).(GetBackendAddressPoolBackendIpConfigurationOutput)
}

type GetLBFrontendIpConfiguration struct {
	// The id of the Frontend IP Configuration.
	Id string `pulumi:"id"`
	// Specifies the name of the Load Balancer.
	Name string `pulumi:"name"`
	// Private IP Address to assign to the Load Balancer.
	PrivateIpAddress string `pulumi:"privateIpAddress"`
	// The allocation method for the Private IP Address used by this Load Balancer.
	PrivateIpAddressAllocation string `pulumi:"privateIpAddressAllocation"`
	// The Private IP Address Version, either `IPv4` or `IPv6`.
	PrivateIpAddressVersion string `pulumi:"privateIpAddressVersion"`
	// The ID of a  Public IP Address which is associated with this Load Balancer.
	PublicIpAddressId string `pulumi:"publicIpAddressId"`
	// The ID of the Subnet which is associated with the IP Configuration.
	SubnetId string `pulumi:"subnetId"`
	// A list of Availability Zones which the Load Balancer's IP Addresses should be created in.
	Zones []string `pulumi:"zones"`
}

// GetLBFrontendIpConfigurationInput is an input type that accepts GetLBFrontendIpConfigurationArgs and GetLBFrontendIpConfigurationOutput values.
// You can construct a concrete instance of `GetLBFrontendIpConfigurationInput` via:
//
//          GetLBFrontendIpConfigurationArgs{...}
type GetLBFrontendIpConfigurationInput interface {
	pulumi.Input

	ToGetLBFrontendIpConfigurationOutput() GetLBFrontendIpConfigurationOutput
	ToGetLBFrontendIpConfigurationOutputWithContext(context.Context) GetLBFrontendIpConfigurationOutput
}

type GetLBFrontendIpConfigurationArgs struct {
	// The id of the Frontend IP Configuration.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the name of the Load Balancer.
	Name pulumi.StringInput `pulumi:"name"`
	// Private IP Address to assign to the Load Balancer.
	PrivateIpAddress pulumi.StringInput `pulumi:"privateIpAddress"`
	// The allocation method for the Private IP Address used by this Load Balancer.
	PrivateIpAddressAllocation pulumi.StringInput `pulumi:"privateIpAddressAllocation"`
	// The Private IP Address Version, either `IPv4` or `IPv6`.
	PrivateIpAddressVersion pulumi.StringInput `pulumi:"privateIpAddressVersion"`
	// The ID of a  Public IP Address which is associated with this Load Balancer.
	PublicIpAddressId pulumi.StringInput `pulumi:"publicIpAddressId"`
	// The ID of the Subnet which is associated with the IP Configuration.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// A list of Availability Zones which the Load Balancer's IP Addresses should be created in.
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (GetLBFrontendIpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBFrontendIpConfiguration)(nil)).Elem()
}

func (i GetLBFrontendIpConfigurationArgs) ToGetLBFrontendIpConfigurationOutput() GetLBFrontendIpConfigurationOutput {
	return i.ToGetLBFrontendIpConfigurationOutputWithContext(context.Background())
}

func (i GetLBFrontendIpConfigurationArgs) ToGetLBFrontendIpConfigurationOutputWithContext(ctx context.Context) GetLBFrontendIpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBFrontendIpConfigurationOutput)
}

// GetLBFrontendIpConfigurationArrayInput is an input type that accepts GetLBFrontendIpConfigurationArray and GetLBFrontendIpConfigurationArrayOutput values.
// You can construct a concrete instance of `GetLBFrontendIpConfigurationArrayInput` via:
//
//          GetLBFrontendIpConfigurationArray{ GetLBFrontendIpConfigurationArgs{...} }
type GetLBFrontendIpConfigurationArrayInput interface {
	pulumi.Input

	ToGetLBFrontendIpConfigurationArrayOutput() GetLBFrontendIpConfigurationArrayOutput
	ToGetLBFrontendIpConfigurationArrayOutputWithContext(context.Context) GetLBFrontendIpConfigurationArrayOutput
}

type GetLBFrontendIpConfigurationArray []GetLBFrontendIpConfigurationInput

func (GetLBFrontendIpConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBFrontendIpConfiguration)(nil)).Elem()
}

func (i GetLBFrontendIpConfigurationArray) ToGetLBFrontendIpConfigurationArrayOutput() GetLBFrontendIpConfigurationArrayOutput {
	return i.ToGetLBFrontendIpConfigurationArrayOutputWithContext(context.Background())
}

func (i GetLBFrontendIpConfigurationArray) ToGetLBFrontendIpConfigurationArrayOutputWithContext(ctx context.Context) GetLBFrontendIpConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLBFrontendIpConfigurationArrayOutput)
}

type GetLBFrontendIpConfigurationOutput struct{ *pulumi.OutputState }

func (GetLBFrontendIpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLBFrontendIpConfiguration)(nil)).Elem()
}

func (o GetLBFrontendIpConfigurationOutput) ToGetLBFrontendIpConfigurationOutput() GetLBFrontendIpConfigurationOutput {
	return o
}

func (o GetLBFrontendIpConfigurationOutput) ToGetLBFrontendIpConfigurationOutputWithContext(ctx context.Context) GetLBFrontendIpConfigurationOutput {
	return o
}

// The id of the Frontend IP Configuration.
func (o GetLBFrontendIpConfigurationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBFrontendIpConfiguration) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the name of the Load Balancer.
func (o GetLBFrontendIpConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBFrontendIpConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

// Private IP Address to assign to the Load Balancer.
func (o GetLBFrontendIpConfigurationOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBFrontendIpConfiguration) string { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

// The allocation method for the Private IP Address used by this Load Balancer.
func (o GetLBFrontendIpConfigurationOutput) PrivateIpAddressAllocation() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBFrontendIpConfiguration) string { return v.PrivateIpAddressAllocation }).(pulumi.StringOutput)
}

// The Private IP Address Version, either `IPv4` or `IPv6`.
func (o GetLBFrontendIpConfigurationOutput) PrivateIpAddressVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBFrontendIpConfiguration) string { return v.PrivateIpAddressVersion }).(pulumi.StringOutput)
}

// The ID of a  Public IP Address which is associated with this Load Balancer.
func (o GetLBFrontendIpConfigurationOutput) PublicIpAddressId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBFrontendIpConfiguration) string { return v.PublicIpAddressId }).(pulumi.StringOutput)
}

// The ID of the Subnet which is associated with the IP Configuration.
func (o GetLBFrontendIpConfigurationOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLBFrontendIpConfiguration) string { return v.SubnetId }).(pulumi.StringOutput)
}

// A list of Availability Zones which the Load Balancer's IP Addresses should be created in.
func (o GetLBFrontendIpConfigurationOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLBFrontendIpConfiguration) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type GetLBFrontendIpConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetLBFrontendIpConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLBFrontendIpConfiguration)(nil)).Elem()
}

func (o GetLBFrontendIpConfigurationArrayOutput) ToGetLBFrontendIpConfigurationArrayOutput() GetLBFrontendIpConfigurationArrayOutput {
	return o
}

func (o GetLBFrontendIpConfigurationArrayOutput) ToGetLBFrontendIpConfigurationArrayOutputWithContext(ctx context.Context) GetLBFrontendIpConfigurationArrayOutput {
	return o
}

func (o GetLBFrontendIpConfigurationArrayOutput) Index(i pulumi.IntInput) GetLBFrontendIpConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLBFrontendIpConfiguration {
		return vs[0].([]GetLBFrontendIpConfiguration)[vs[1].(int)]
	}).(GetLBFrontendIpConfigurationOutput)
}

func init() {
	pulumi.RegisterOutputType(BackendAddressPoolBackendAddressOutput{})
	pulumi.RegisterOutputType(BackendAddressPoolBackendAddressArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerFrontendIpConfigurationOutput{})
	pulumi.RegisterOutputType(LoadBalancerFrontendIpConfigurationArrayOutput{})
	pulumi.RegisterOutputType(OutboundRuleFrontendIpConfigurationOutput{})
	pulumi.RegisterOutputType(OutboundRuleFrontendIpConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetBackendAddressPoolBackendAddressOutput{})
	pulumi.RegisterOutputType(GetBackendAddressPoolBackendAddressArrayOutput{})
	pulumi.RegisterOutputType(GetBackendAddressPoolBackendIpConfigurationOutput{})
	pulumi.RegisterOutputType(GetBackendAddressPoolBackendIpConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetLBFrontendIpConfigurationOutput{})
	pulumi.RegisterOutputType(GetLBFrontendIpConfigurationArrayOutput{})
}
