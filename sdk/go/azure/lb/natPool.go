// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Create a LoadBalancer NAT pool.
// 
// ~> **NOTE** When using this resource, the LoadBalancer needs to have a FrontEnd IP Configuration Attached
type NatPool struct {
	s *pulumi.ResourceState
}

// NewNatPool registers a new resource with the given unique name, arguments, and options.
func NewNatPool(ctx *pulumi.Context,
	name string, args *NatPoolArgs, opts ...pulumi.ResourceOpt) (*NatPool, error) {
	if args == nil || args.BackendPort == nil {
		return nil, errors.New("missing required argument 'BackendPort'")
	}
	if args == nil || args.FrontendIpConfigurationName == nil {
		return nil, errors.New("missing required argument 'FrontendIpConfigurationName'")
	}
	if args == nil || args.FrontendPortEnd == nil {
		return nil, errors.New("missing required argument 'FrontendPortEnd'")
	}
	if args == nil || args.FrontendPortStart == nil {
		return nil, errors.New("missing required argument 'FrontendPortStart'")
	}
	if args == nil || args.LoadbalancerId == nil {
		return nil, errors.New("missing required argument 'LoadbalancerId'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backendPort"] = nil
		inputs["frontendIpConfigurationName"] = nil
		inputs["frontendPortEnd"] = nil
		inputs["frontendPortStart"] = nil
		inputs["loadbalancerId"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["protocol"] = nil
		inputs["resourceGroupName"] = nil
	} else {
		inputs["backendPort"] = args.BackendPort
		inputs["frontendIpConfigurationName"] = args.FrontendIpConfigurationName
		inputs["frontendPortEnd"] = args.FrontendPortEnd
		inputs["frontendPortStart"] = args.FrontendPortStart
		inputs["loadbalancerId"] = args.LoadbalancerId
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["protocol"] = args.Protocol
		inputs["resourceGroupName"] = args.ResourceGroupName
	}
	inputs["frontendIpConfigurationId"] = nil
	s, err := ctx.RegisterResource("azure:lb/natPool:NatPool", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NatPool{s: s}, nil
}

// GetNatPool gets an existing NatPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatPool(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NatPoolState, opts ...pulumi.ResourceOpt) (*NatPool, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backendPort"] = state.BackendPort
		inputs["frontendIpConfigurationId"] = state.FrontendIpConfigurationId
		inputs["frontendIpConfigurationName"] = state.FrontendIpConfigurationName
		inputs["frontendPortEnd"] = state.FrontendPortEnd
		inputs["frontendPortStart"] = state.FrontendPortStart
		inputs["loadbalancerId"] = state.LoadbalancerId
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["protocol"] = state.Protocol
		inputs["resourceGroupName"] = state.ResourceGroupName
	}
	s, err := ctx.ReadResource("azure:lb/natPool:NatPool", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NatPool{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NatPool) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NatPool) ID() *pulumi.IDOutput {
	return r.s.ID
}

// The port used for the internal endpoint. Possible values range between 1 and 65535, inclusive.
func (r *NatPool) BackendPort() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["backendPort"])
}

func (r *NatPool) FrontendIpConfigurationId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["frontendIpConfigurationId"])
}

// The name of the frontend IP configuration exposing this rule.
func (r *NatPool) FrontendIpConfigurationName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["frontendIpConfigurationName"])
}

// The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with this Load Balancer. Possible values range between 1 and 65534, inclusive.
func (r *NatPool) FrontendPortEnd() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["frontendPortEnd"])
}

// The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with this Load Balancer. Possible values range between 1 and 65534, inclusive.
func (r *NatPool) FrontendPortStart() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["frontendPortStart"])
}

// The ID of the LoadBalancer in which to create the NAT pool.
func (r *NatPool) LoadbalancerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loadbalancerId"])
}

func (r *NatPool) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// Specifies the name of the NAT pool.
func (r *NatPool) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The transport protocol for the external endpoint. Possible values are `Udp` or `Tcp`.
func (r *NatPool) Protocol() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["protocol"])
}

// The name of the resource group in which to create the resource.
func (r *NatPool) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Input properties used for looking up and filtering NatPool resources.
type NatPoolState struct {
	// The port used for the internal endpoint. Possible values range between 1 and 65535, inclusive.
	BackendPort interface{}
	FrontendIpConfigurationId interface{}
	// The name of the frontend IP configuration exposing this rule.
	FrontendIpConfigurationName interface{}
	// The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with this Load Balancer. Possible values range between 1 and 65534, inclusive.
	FrontendPortEnd interface{}
	// The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with this Load Balancer. Possible values range between 1 and 65534, inclusive.
	FrontendPortStart interface{}
	// The ID of the LoadBalancer in which to create the NAT pool.
	LoadbalancerId interface{}
	Location interface{}
	// Specifies the name of the NAT pool.
	Name interface{}
	// The transport protocol for the external endpoint. Possible values are `Udp` or `Tcp`.
	Protocol interface{}
	// The name of the resource group in which to create the resource.
	ResourceGroupName interface{}
}

// The set of arguments for constructing a NatPool resource.
type NatPoolArgs struct {
	// The port used for the internal endpoint. Possible values range between 1 and 65535, inclusive.
	BackendPort interface{}
	// The name of the frontend IP configuration exposing this rule.
	FrontendIpConfigurationName interface{}
	// The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with this Load Balancer. Possible values range between 1 and 65534, inclusive.
	FrontendPortEnd interface{}
	// The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with this Load Balancer. Possible values range between 1 and 65534, inclusive.
	FrontendPortStart interface{}
	// The ID of the LoadBalancer in which to create the NAT pool.
	LoadbalancerId interface{}
	Location interface{}
	// Specifies the name of the NAT pool.
	Name interface{}
	// The transport protocol for the external endpoint. Possible values are `Udp` or `Tcp`.
	Protocol interface{}
	// The name of the resource group in which to create the resource.
	ResourceGroupName interface{}
}
