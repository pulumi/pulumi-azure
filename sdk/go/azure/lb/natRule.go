// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Load Balancer NAT Rule. 
// 
// > **NOTE:** This resource cannot be used with with virtual machine scale sets, instead use the `lb.NatPool` resource.
// 
// > **NOTE** When using this resource, the Load Balancer needs to have a FrontEnd IP Configuration Attached
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/lb_nat_rule.html.markdown.
type NatRule struct {
	s *pulumi.ResourceState
}

// NewNatRule registers a new resource with the given unique name, arguments, and options.
func NewNatRule(ctx *pulumi.Context,
	name string, args *NatRuleArgs, opts ...pulumi.ResourceOpt) (*NatRule, error) {
	if args == nil || args.BackendPort == nil {
		return nil, errors.New("missing required argument 'BackendPort'")
	}
	if args == nil || args.FrontendIpConfigurationName == nil {
		return nil, errors.New("missing required argument 'FrontendIpConfigurationName'")
	}
	if args == nil || args.FrontendPort == nil {
		return nil, errors.New("missing required argument 'FrontendPort'")
	}
	if args == nil || args.LoadbalancerId == nil {
		return nil, errors.New("missing required argument 'LoadbalancerId'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backendPort"] = nil
		inputs["enableFloatingIp"] = nil
		inputs["frontendIpConfigurationName"] = nil
		inputs["frontendPort"] = nil
		inputs["loadbalancerId"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["protocol"] = nil
		inputs["resourceGroupName"] = nil
	} else {
		inputs["backendPort"] = args.BackendPort
		inputs["enableFloatingIp"] = args.EnableFloatingIp
		inputs["frontendIpConfigurationName"] = args.FrontendIpConfigurationName
		inputs["frontendPort"] = args.FrontendPort
		inputs["loadbalancerId"] = args.LoadbalancerId
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["protocol"] = args.Protocol
		inputs["resourceGroupName"] = args.ResourceGroupName
	}
	inputs["backendIpConfigurationId"] = nil
	inputs["frontendIpConfigurationId"] = nil
	s, err := ctx.RegisterResource("azure:lb/natRule:NatRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NatRule{s: s}, nil
}

// GetNatRule gets an existing NatRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NatRuleState, opts ...pulumi.ResourceOpt) (*NatRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backendIpConfigurationId"] = state.BackendIpConfigurationId
		inputs["backendPort"] = state.BackendPort
		inputs["enableFloatingIp"] = state.EnableFloatingIp
		inputs["frontendIpConfigurationId"] = state.FrontendIpConfigurationId
		inputs["frontendIpConfigurationName"] = state.FrontendIpConfigurationName
		inputs["frontendPort"] = state.FrontendPort
		inputs["loadbalancerId"] = state.LoadbalancerId
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["protocol"] = state.Protocol
		inputs["resourceGroupName"] = state.ResourceGroupName
	}
	s, err := ctx.ReadResource("azure:lb/natRule:NatRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NatRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NatRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NatRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *NatRule) BackendIpConfigurationId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["backendIpConfigurationId"])
}

// The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
func (r *NatRule) BackendPort() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["backendPort"])
}

// Enables the Floating IP Capacity, required to configure a SQL AlwaysOn Availability Group.
func (r *NatRule) EnableFloatingIp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableFloatingIp"])
}

func (r *NatRule) FrontendIpConfigurationId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["frontendIpConfigurationId"])
}

// The name of the frontend IP configuration exposing this rule.
func (r *NatRule) FrontendIpConfigurationName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["frontendIpConfigurationName"])
}

// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
func (r *NatRule) FrontendPort() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["frontendPort"])
}

// The ID of the Load Balancer in which to create the NAT Rule.
func (r *NatRule) LoadbalancerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loadbalancerId"])
}

func (r *NatRule) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// Specifies the name of the NAT Rule.
func (r *NatRule) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
func (r *NatRule) Protocol() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["protocol"])
}

// The name of the resource group in which to create the resource.
func (r *NatRule) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Input properties used for looking up and filtering NatRule resources.
type NatRuleState struct {
	BackendIpConfigurationId interface{}
	// The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
	BackendPort interface{}
	// Enables the Floating IP Capacity, required to configure a SQL AlwaysOn Availability Group.
	EnableFloatingIp interface{}
	FrontendIpConfigurationId interface{}
	// The name of the frontend IP configuration exposing this rule.
	FrontendIpConfigurationName interface{}
	// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
	FrontendPort interface{}
	// The ID of the Load Balancer in which to create the NAT Rule.
	LoadbalancerId interface{}
	Location interface{}
	// Specifies the name of the NAT Rule.
	Name interface{}
	// The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
	Protocol interface{}
	// The name of the resource group in which to create the resource.
	ResourceGroupName interface{}
}

// The set of arguments for constructing a NatRule resource.
type NatRuleArgs struct {
	// The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
	BackendPort interface{}
	// Enables the Floating IP Capacity, required to configure a SQL AlwaysOn Availability Group.
	EnableFloatingIp interface{}
	// The name of the frontend IP configuration exposing this rule.
	FrontendIpConfigurationName interface{}
	// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
	FrontendPort interface{}
	// The ID of the Load Balancer in which to create the NAT Rule.
	LoadbalancerId interface{}
	Location interface{}
	// Specifies the name of the NAT Rule.
	Name interface{}
	// The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
	Protocol interface{}
	// The name of the resource group in which to create the resource.
	ResourceGroupName interface{}
}
