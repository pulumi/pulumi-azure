// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Load Balancer NAT Rule.
//
// > **NOTE:** This resource cannot be used with with virtual machine scale sets, instead use the `lb.NatPool` resource.
//
// > **NOTE** When using this resource, the Load Balancer needs to have a FrontEnd IP Configuration Attached
//
// ## Import
//
// Load Balancer NAT Rules can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:lb/natRule:NatRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/loadBalancers/lb1/inboundNatRules/rule1
//
// ```
type NatRule struct {
	pulumi.CustomResourceState

	// Specifies a reference to backendAddressPool resource.
	BackendAddressPoolId     pulumi.StringPtrOutput `pulumi:"backendAddressPoolId"`
	BackendIpConfigurationId pulumi.StringOutput    `pulumi:"backendIpConfigurationId"`
	// The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
	BackendPort pulumi.IntOutput `pulumi:"backendPort"`
	// Are the Floating IPs enabled for this Load Balancer Rule? A "floating” IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
	EnableFloatingIp pulumi.BoolOutput `pulumi:"enableFloatingIp"`
	// Is TCP Reset enabled for this Load Balancer Rule?
	EnableTcpReset            pulumi.BoolPtrOutput `pulumi:"enableTcpReset"`
	FrontendIpConfigurationId pulumi.StringOutput  `pulumi:"frontendIpConfigurationId"`
	// The name of the frontend IP configuration exposing this rule.
	FrontendIpConfigurationName pulumi.StringOutput `pulumi:"frontendIpConfigurationName"`
	// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
	FrontendPort pulumi.IntPtrOutput `pulumi:"frontendPort"`
	// The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
	FrontendPortEnd pulumi.IntPtrOutput `pulumi:"frontendPortEnd"`
	// The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
	FrontendPortStart pulumi.IntPtrOutput `pulumi:"frontendPortStart"`
	// Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
	IdleTimeoutInMinutes pulumi.IntOutput `pulumi:"idleTimeoutInMinutes"`
	// The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
	LoadbalancerId pulumi.StringOutput `pulumi:"loadbalancerId"`
	// Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewNatRule registers a new resource with the given unique name, arguments, and options.
func NewNatRule(ctx *pulumi.Context,
	name string, args *NatRuleArgs, opts ...pulumi.ResourceOption) (*NatRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackendPort == nil {
		return nil, errors.New("invalid value for required argument 'BackendPort'")
	}
	if args.FrontendIpConfigurationName == nil {
		return nil, errors.New("invalid value for required argument 'FrontendIpConfigurationName'")
	}
	if args.LoadbalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadbalancerId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatRule
	err := ctx.RegisterResource("azure:lb/natRule:NatRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatRule gets an existing NatRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatRuleState, opts ...pulumi.ResourceOption) (*NatRule, error) {
	var resource NatRule
	err := ctx.ReadResource("azure:lb/natRule:NatRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatRule resources.
type natRuleState struct {
	// Specifies a reference to backendAddressPool resource.
	BackendAddressPoolId     *string `pulumi:"backendAddressPoolId"`
	BackendIpConfigurationId *string `pulumi:"backendIpConfigurationId"`
	// The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
	BackendPort *int `pulumi:"backendPort"`
	// Are the Floating IPs enabled for this Load Balancer Rule? A "floating” IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
	EnableFloatingIp *bool `pulumi:"enableFloatingIp"`
	// Is TCP Reset enabled for this Load Balancer Rule?
	EnableTcpReset            *bool   `pulumi:"enableTcpReset"`
	FrontendIpConfigurationId *string `pulumi:"frontendIpConfigurationId"`
	// The name of the frontend IP configuration exposing this rule.
	FrontendIpConfigurationName *string `pulumi:"frontendIpConfigurationName"`
	// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
	FrontendPort *int `pulumi:"frontendPort"`
	// The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
	FrontendPortEnd *int `pulumi:"frontendPortEnd"`
	// The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
	FrontendPortStart *int `pulumi:"frontendPortStart"`
	// Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
	IdleTimeoutInMinutes *int `pulumi:"idleTimeoutInMinutes"`
	// The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
	LoadbalancerId *string `pulumi:"loadbalancerId"`
	// Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
	Protocol *string `pulumi:"protocol"`
	// The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type NatRuleState struct {
	// Specifies a reference to backendAddressPool resource.
	BackendAddressPoolId     pulumi.StringPtrInput
	BackendIpConfigurationId pulumi.StringPtrInput
	// The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
	BackendPort pulumi.IntPtrInput
	// Are the Floating IPs enabled for this Load Balancer Rule? A "floating” IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
	EnableFloatingIp pulumi.BoolPtrInput
	// Is TCP Reset enabled for this Load Balancer Rule?
	EnableTcpReset            pulumi.BoolPtrInput
	FrontendIpConfigurationId pulumi.StringPtrInput
	// The name of the frontend IP configuration exposing this rule.
	FrontendIpConfigurationName pulumi.StringPtrInput
	// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
	FrontendPort pulumi.IntPtrInput
	// The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
	FrontendPortEnd pulumi.IntPtrInput
	// The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
	FrontendPortStart pulumi.IntPtrInput
	// Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
	IdleTimeoutInMinutes pulumi.IntPtrInput
	// The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
	LoadbalancerId pulumi.StringPtrInput
	// Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
	Protocol pulumi.StringPtrInput
	// The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (NatRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*natRuleState)(nil)).Elem()
}

type natRuleArgs struct {
	// Specifies a reference to backendAddressPool resource.
	BackendAddressPoolId *string `pulumi:"backendAddressPoolId"`
	// The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
	BackendPort int `pulumi:"backendPort"`
	// Are the Floating IPs enabled for this Load Balancer Rule? A "floating” IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
	EnableFloatingIp *bool `pulumi:"enableFloatingIp"`
	// Is TCP Reset enabled for this Load Balancer Rule?
	EnableTcpReset *bool `pulumi:"enableTcpReset"`
	// The name of the frontend IP configuration exposing this rule.
	FrontendIpConfigurationName string `pulumi:"frontendIpConfigurationName"`
	// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
	FrontendPort *int `pulumi:"frontendPort"`
	// The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
	FrontendPortEnd *int `pulumi:"frontendPortEnd"`
	// The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
	FrontendPortStart *int `pulumi:"frontendPortStart"`
	// Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
	IdleTimeoutInMinutes *int `pulumi:"idleTimeoutInMinutes"`
	// The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
	LoadbalancerId string `pulumi:"loadbalancerId"`
	// Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
	Protocol string `pulumi:"protocol"`
	// The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a NatRule resource.
type NatRuleArgs struct {
	// Specifies a reference to backendAddressPool resource.
	BackendAddressPoolId pulumi.StringPtrInput
	// The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
	BackendPort pulumi.IntInput
	// Are the Floating IPs enabled for this Load Balancer Rule? A "floating” IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
	EnableFloatingIp pulumi.BoolPtrInput
	// Is TCP Reset enabled for this Load Balancer Rule?
	EnableTcpReset pulumi.BoolPtrInput
	// The name of the frontend IP configuration exposing this rule.
	FrontendIpConfigurationName pulumi.StringInput
	// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
	FrontendPort pulumi.IntPtrInput
	// The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
	FrontendPortEnd pulumi.IntPtrInput
	// The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
	FrontendPortStart pulumi.IntPtrInput
	// Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
	IdleTimeoutInMinutes pulumi.IntPtrInput
	// The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
	LoadbalancerId pulumi.StringInput
	// Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
	Protocol pulumi.StringInput
	// The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
}

func (NatRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natRuleArgs)(nil)).Elem()
}

type NatRuleInput interface {
	pulumi.Input

	ToNatRuleOutput() NatRuleOutput
	ToNatRuleOutputWithContext(ctx context.Context) NatRuleOutput
}

func (*NatRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NatRule)(nil)).Elem()
}

func (i *NatRule) ToNatRuleOutput() NatRuleOutput {
	return i.ToNatRuleOutputWithContext(context.Background())
}

func (i *NatRule) ToNatRuleOutputWithContext(ctx context.Context) NatRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatRuleOutput)
}

// NatRuleArrayInput is an input type that accepts NatRuleArray and NatRuleArrayOutput values.
// You can construct a concrete instance of `NatRuleArrayInput` via:
//
//	NatRuleArray{ NatRuleArgs{...} }
type NatRuleArrayInput interface {
	pulumi.Input

	ToNatRuleArrayOutput() NatRuleArrayOutput
	ToNatRuleArrayOutputWithContext(context.Context) NatRuleArrayOutput
}

type NatRuleArray []NatRuleInput

func (NatRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatRule)(nil)).Elem()
}

func (i NatRuleArray) ToNatRuleArrayOutput() NatRuleArrayOutput {
	return i.ToNatRuleArrayOutputWithContext(context.Background())
}

func (i NatRuleArray) ToNatRuleArrayOutputWithContext(ctx context.Context) NatRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatRuleArrayOutput)
}

// NatRuleMapInput is an input type that accepts NatRuleMap and NatRuleMapOutput values.
// You can construct a concrete instance of `NatRuleMapInput` via:
//
//	NatRuleMap{ "key": NatRuleArgs{...} }
type NatRuleMapInput interface {
	pulumi.Input

	ToNatRuleMapOutput() NatRuleMapOutput
	ToNatRuleMapOutputWithContext(context.Context) NatRuleMapOutput
}

type NatRuleMap map[string]NatRuleInput

func (NatRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatRule)(nil)).Elem()
}

func (i NatRuleMap) ToNatRuleMapOutput() NatRuleMapOutput {
	return i.ToNatRuleMapOutputWithContext(context.Background())
}

func (i NatRuleMap) ToNatRuleMapOutputWithContext(ctx context.Context) NatRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatRuleMapOutput)
}

type NatRuleOutput struct{ *pulumi.OutputState }

func (NatRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatRule)(nil)).Elem()
}

func (o NatRuleOutput) ToNatRuleOutput() NatRuleOutput {
	return o
}

func (o NatRuleOutput) ToNatRuleOutputWithContext(ctx context.Context) NatRuleOutput {
	return o
}

// Specifies a reference to backendAddressPool resource.
func (o NatRuleOutput) BackendAddressPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatRule) pulumi.StringPtrOutput { return v.BackendAddressPoolId }).(pulumi.StringPtrOutput)
}

func (o NatRuleOutput) BackendIpConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatRule) pulumi.StringOutput { return v.BackendIpConfigurationId }).(pulumi.StringOutput)
}

// The port used for internal connections on the endpoint. Possible values range between 1 and 65535, inclusive.
func (o NatRuleOutput) BackendPort() pulumi.IntOutput {
	return o.ApplyT(func(v *NatRule) pulumi.IntOutput { return v.BackendPort }).(pulumi.IntOutput)
}

// Are the Floating IPs enabled for this Load Balancer Rule? A "floating” IP is reassigned to a secondary server in case the primary server fails. Required to configure a SQL AlwaysOn Availability Group. Defaults to `false`.
func (o NatRuleOutput) EnableFloatingIp() pulumi.BoolOutput {
	return o.ApplyT(func(v *NatRule) pulumi.BoolOutput { return v.EnableFloatingIp }).(pulumi.BoolOutput)
}

// Is TCP Reset enabled for this Load Balancer Rule?
func (o NatRuleOutput) EnableTcpReset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NatRule) pulumi.BoolPtrOutput { return v.EnableTcpReset }).(pulumi.BoolPtrOutput)
}

func (o NatRuleOutput) FrontendIpConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatRule) pulumi.StringOutput { return v.FrontendIpConfigurationId }).(pulumi.StringOutput)
}

// The name of the frontend IP configuration exposing this rule.
func (o NatRuleOutput) FrontendIpConfigurationName() pulumi.StringOutput {
	return o.ApplyT(func(v *NatRule) pulumi.StringOutput { return v.FrontendIpConfigurationName }).(pulumi.StringOutput)
}

// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 1 and 65534, inclusive.
func (o NatRuleOutput) FrontendPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NatRule) pulumi.IntPtrOutput { return v.FrontendPort }).(pulumi.IntPtrOutput)
}

// The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
func (o NatRuleOutput) FrontendPortEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NatRule) pulumi.IntPtrOutput { return v.FrontendPortEnd }).(pulumi.IntPtrOutput)
}

// The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534, inclusive.
func (o NatRuleOutput) FrontendPortStart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NatRule) pulumi.IntPtrOutput { return v.FrontendPortStart }).(pulumi.IntPtrOutput)
}

// Specifies the idle timeout in minutes for TCP connections. Valid values are between `4` and `30` minutes. Defaults to `4` minutes.
func (o NatRuleOutput) IdleTimeoutInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v *NatRule) pulumi.IntOutput { return v.IdleTimeoutInMinutes }).(pulumi.IntOutput)
}

// The ID of the Load Balancer in which to create the NAT Rule. Changing this forces a new resource to be created.
func (o NatRuleOutput) LoadbalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatRule) pulumi.StringOutput { return v.LoadbalancerId }).(pulumi.StringOutput)
}

// Specifies the name of the NAT Rule. Changing this forces a new resource to be created.
func (o NatRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NatRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The transport protocol for the external endpoint. Possible values are `Udp`, `Tcp` or `All`.
func (o NatRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *NatRule) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the resource. Changing this forces a new resource to be created.
func (o NatRuleOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *NatRule) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type NatRuleArrayOutput struct{ *pulumi.OutputState }

func (NatRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatRule)(nil)).Elem()
}

func (o NatRuleArrayOutput) ToNatRuleArrayOutput() NatRuleArrayOutput {
	return o
}

func (o NatRuleArrayOutput) ToNatRuleArrayOutputWithContext(ctx context.Context) NatRuleArrayOutput {
	return o
}

func (o NatRuleArrayOutput) Index(i pulumi.IntInput) NatRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NatRule {
		return vs[0].([]*NatRule)[vs[1].(int)]
	}).(NatRuleOutput)
}

type NatRuleMapOutput struct{ *pulumi.OutputState }

func (NatRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatRule)(nil)).Elem()
}

func (o NatRuleMapOutput) ToNatRuleMapOutput() NatRuleMapOutput {
	return o
}

func (o NatRuleMapOutput) ToNatRuleMapOutputWithContext(ctx context.Context) NatRuleMapOutput {
	return o
}

func (o NatRuleMapOutput) MapIndex(k pulumi.StringInput) NatRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NatRule {
		return vs[0].(map[string]*NatRule)[vs[1].(string)]
	}).(NatRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatRuleInput)(nil)).Elem(), &NatRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatRuleArrayInput)(nil)).Elem(), NatRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatRuleMapInput)(nil)).Elem(), NatRuleMap{})
	pulumi.RegisterOutputType(NatRuleOutput{})
	pulumi.RegisterOutputType(NatRuleArrayOutput{})
	pulumi.RegisterOutputType(NatRuleMapOutput{})
}
