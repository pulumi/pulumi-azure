// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package armmsi

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Federated Identity Credential.
//
// ## Import
//
// An existing Federated Identity Credential can be imported into Terraform using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:armmsi/federatedIdentityCredential:FederatedIdentityCredential example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{parentIdentityName}/federatedIdentityCredentials/{resourceName}
//
// ```
type FederatedIdentityCredential struct {
	pulumi.CustomResourceState

	// Specifies the audience for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Audience pulumi.StringOutput `pulumi:"audience"`
	// Specifies the issuer of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// Specifies the name of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies parent ID of User Assigned Identity for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	ParentId pulumi.StringOutput `pulumi:"parentId"`
	// Specifies the name of the Resource Group within which this Federated Identity Credential should exist. Changing this forces a new Federated Identity Credential to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Specifies the subject for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Subject pulumi.StringOutput `pulumi:"subject"`
}

// NewFederatedIdentityCredential registers a new resource with the given unique name, arguments, and options.
func NewFederatedIdentityCredential(ctx *pulumi.Context,
	name string, args *FederatedIdentityCredentialArgs, opts ...pulumi.ResourceOption) (*FederatedIdentityCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Audience == nil {
		return nil, errors.New("invalid value for required argument 'Audience'")
	}
	if args.Issuer == nil {
		return nil, errors.New("invalid value for required argument 'Issuer'")
	}
	if args.ParentId == nil {
		return nil, errors.New("invalid value for required argument 'ParentId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Subject == nil {
		return nil, errors.New("invalid value for required argument 'Subject'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FederatedIdentityCredential
	err := ctx.RegisterResource("azure:armmsi/federatedIdentityCredential:FederatedIdentityCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFederatedIdentityCredential gets an existing FederatedIdentityCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFederatedIdentityCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FederatedIdentityCredentialState, opts ...pulumi.ResourceOption) (*FederatedIdentityCredential, error) {
	var resource FederatedIdentityCredential
	err := ctx.ReadResource("azure:armmsi/federatedIdentityCredential:FederatedIdentityCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FederatedIdentityCredential resources.
type federatedIdentityCredentialState struct {
	// Specifies the audience for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Audience *string `pulumi:"audience"`
	// Specifies the issuer of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Issuer *string `pulumi:"issuer"`
	// Specifies the name of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Name *string `pulumi:"name"`
	// Specifies parent ID of User Assigned Identity for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	ParentId *string `pulumi:"parentId"`
	// Specifies the name of the Resource Group within which this Federated Identity Credential should exist. Changing this forces a new Federated Identity Credential to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Specifies the subject for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Subject *string `pulumi:"subject"`
}

type FederatedIdentityCredentialState struct {
	// Specifies the audience for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Audience pulumi.StringPtrInput
	// Specifies the issuer of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Issuer pulumi.StringPtrInput
	// Specifies the name of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Name pulumi.StringPtrInput
	// Specifies parent ID of User Assigned Identity for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	ParentId pulumi.StringPtrInput
	// Specifies the name of the Resource Group within which this Federated Identity Credential should exist. Changing this forces a new Federated Identity Credential to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Specifies the subject for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Subject pulumi.StringPtrInput
}

func (FederatedIdentityCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*federatedIdentityCredentialState)(nil)).Elem()
}

type federatedIdentityCredentialArgs struct {
	// Specifies the audience for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Audience string `pulumi:"audience"`
	// Specifies the issuer of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Issuer string `pulumi:"issuer"`
	// Specifies the name of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Name *string `pulumi:"name"`
	// Specifies parent ID of User Assigned Identity for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	ParentId string `pulumi:"parentId"`
	// Specifies the name of the Resource Group within which this Federated Identity Credential should exist. Changing this forces a new Federated Identity Credential to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the subject for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Subject string `pulumi:"subject"`
}

// The set of arguments for constructing a FederatedIdentityCredential resource.
type FederatedIdentityCredentialArgs struct {
	// Specifies the audience for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Audience pulumi.StringInput
	// Specifies the issuer of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Issuer pulumi.StringInput
	// Specifies the name of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Name pulumi.StringPtrInput
	// Specifies parent ID of User Assigned Identity for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	ParentId pulumi.StringInput
	// Specifies the name of the Resource Group within which this Federated Identity Credential should exist. Changing this forces a new Federated Identity Credential to be created.
	ResourceGroupName pulumi.StringInput
	// Specifies the subject for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
	Subject pulumi.StringInput
}

func (FederatedIdentityCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*federatedIdentityCredentialArgs)(nil)).Elem()
}

type FederatedIdentityCredentialInput interface {
	pulumi.Input

	ToFederatedIdentityCredentialOutput() FederatedIdentityCredentialOutput
	ToFederatedIdentityCredentialOutputWithContext(ctx context.Context) FederatedIdentityCredentialOutput
}

func (*FederatedIdentityCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedIdentityCredential)(nil)).Elem()
}

func (i *FederatedIdentityCredential) ToFederatedIdentityCredentialOutput() FederatedIdentityCredentialOutput {
	return i.ToFederatedIdentityCredentialOutputWithContext(context.Background())
}

func (i *FederatedIdentityCredential) ToFederatedIdentityCredentialOutputWithContext(ctx context.Context) FederatedIdentityCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedIdentityCredentialOutput)
}

// FederatedIdentityCredentialArrayInput is an input type that accepts FederatedIdentityCredentialArray and FederatedIdentityCredentialArrayOutput values.
// You can construct a concrete instance of `FederatedIdentityCredentialArrayInput` via:
//
//	FederatedIdentityCredentialArray{ FederatedIdentityCredentialArgs{...} }
type FederatedIdentityCredentialArrayInput interface {
	pulumi.Input

	ToFederatedIdentityCredentialArrayOutput() FederatedIdentityCredentialArrayOutput
	ToFederatedIdentityCredentialArrayOutputWithContext(context.Context) FederatedIdentityCredentialArrayOutput
}

type FederatedIdentityCredentialArray []FederatedIdentityCredentialInput

func (FederatedIdentityCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FederatedIdentityCredential)(nil)).Elem()
}

func (i FederatedIdentityCredentialArray) ToFederatedIdentityCredentialArrayOutput() FederatedIdentityCredentialArrayOutput {
	return i.ToFederatedIdentityCredentialArrayOutputWithContext(context.Background())
}

func (i FederatedIdentityCredentialArray) ToFederatedIdentityCredentialArrayOutputWithContext(ctx context.Context) FederatedIdentityCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedIdentityCredentialArrayOutput)
}

// FederatedIdentityCredentialMapInput is an input type that accepts FederatedIdentityCredentialMap and FederatedIdentityCredentialMapOutput values.
// You can construct a concrete instance of `FederatedIdentityCredentialMapInput` via:
//
//	FederatedIdentityCredentialMap{ "key": FederatedIdentityCredentialArgs{...} }
type FederatedIdentityCredentialMapInput interface {
	pulumi.Input

	ToFederatedIdentityCredentialMapOutput() FederatedIdentityCredentialMapOutput
	ToFederatedIdentityCredentialMapOutputWithContext(context.Context) FederatedIdentityCredentialMapOutput
}

type FederatedIdentityCredentialMap map[string]FederatedIdentityCredentialInput

func (FederatedIdentityCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FederatedIdentityCredential)(nil)).Elem()
}

func (i FederatedIdentityCredentialMap) ToFederatedIdentityCredentialMapOutput() FederatedIdentityCredentialMapOutput {
	return i.ToFederatedIdentityCredentialMapOutputWithContext(context.Background())
}

func (i FederatedIdentityCredentialMap) ToFederatedIdentityCredentialMapOutputWithContext(ctx context.Context) FederatedIdentityCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedIdentityCredentialMapOutput)
}

type FederatedIdentityCredentialOutput struct{ *pulumi.OutputState }

func (FederatedIdentityCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedIdentityCredential)(nil)).Elem()
}

func (o FederatedIdentityCredentialOutput) ToFederatedIdentityCredentialOutput() FederatedIdentityCredentialOutput {
	return o
}

func (o FederatedIdentityCredentialOutput) ToFederatedIdentityCredentialOutputWithContext(ctx context.Context) FederatedIdentityCredentialOutput {
	return o
}

// Specifies the audience for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
func (o FederatedIdentityCredentialOutput) Audience() pulumi.StringOutput {
	return o.ApplyT(func(v *FederatedIdentityCredential) pulumi.StringOutput { return v.Audience }).(pulumi.StringOutput)
}

// Specifies the issuer of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
func (o FederatedIdentityCredentialOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *FederatedIdentityCredential) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

// Specifies the name of this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
func (o FederatedIdentityCredentialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FederatedIdentityCredential) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies parent ID of User Assigned Identity for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
func (o FederatedIdentityCredentialOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v *FederatedIdentityCredential) pulumi.StringOutput { return v.ParentId }).(pulumi.StringOutput)
}

// Specifies the name of the Resource Group within which this Federated Identity Credential should exist. Changing this forces a new Federated Identity Credential to be created.
func (o FederatedIdentityCredentialOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *FederatedIdentityCredential) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Specifies the subject for this Federated Identity Credential. Changing this forces a new Federated Identity Credential to be created.
func (o FederatedIdentityCredentialOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *FederatedIdentityCredential) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

type FederatedIdentityCredentialArrayOutput struct{ *pulumi.OutputState }

func (FederatedIdentityCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FederatedIdentityCredential)(nil)).Elem()
}

func (o FederatedIdentityCredentialArrayOutput) ToFederatedIdentityCredentialArrayOutput() FederatedIdentityCredentialArrayOutput {
	return o
}

func (o FederatedIdentityCredentialArrayOutput) ToFederatedIdentityCredentialArrayOutputWithContext(ctx context.Context) FederatedIdentityCredentialArrayOutput {
	return o
}

func (o FederatedIdentityCredentialArrayOutput) Index(i pulumi.IntInput) FederatedIdentityCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FederatedIdentityCredential {
		return vs[0].([]*FederatedIdentityCredential)[vs[1].(int)]
	}).(FederatedIdentityCredentialOutput)
}

type FederatedIdentityCredentialMapOutput struct{ *pulumi.OutputState }

func (FederatedIdentityCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FederatedIdentityCredential)(nil)).Elem()
}

func (o FederatedIdentityCredentialMapOutput) ToFederatedIdentityCredentialMapOutput() FederatedIdentityCredentialMapOutput {
	return o
}

func (o FederatedIdentityCredentialMapOutput) ToFederatedIdentityCredentialMapOutputWithContext(ctx context.Context) FederatedIdentityCredentialMapOutput {
	return o
}

func (o FederatedIdentityCredentialMapOutput) MapIndex(k pulumi.StringInput) FederatedIdentityCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FederatedIdentityCredential {
		return vs[0].(map[string]*FederatedIdentityCredential)[vs[1].(string)]
	}).(FederatedIdentityCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedIdentityCredentialInput)(nil)).Elem(), &FederatedIdentityCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedIdentityCredentialArrayInput)(nil)).Elem(), FederatedIdentityCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedIdentityCredentialMapInput)(nil)).Elem(), FederatedIdentityCredentialMap{})
	pulumi.RegisterOutputType(FederatedIdentityCredentialOutput{})
	pulumi.RegisterOutputType(FederatedIdentityCredentialArrayOutput{})
	pulumi.RegisterOutputType(FederatedIdentityCredentialMapOutput{})
}
