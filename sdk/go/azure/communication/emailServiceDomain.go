// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package communication

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Email Communication Service Domain.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/communication"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleEmailService, err := communication.NewEmailService(ctx, "example", &communication.EmailServiceArgs{
//				Name:              pulumi.String("example-emailcommunicationservice"),
//				ResourceGroupName: example.Name,
//				DataLocation:      pulumi.String("United States"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = communication.NewEmailServiceDomain(ctx, "example", &communication.EmailServiceDomainArgs{
//				Name:             pulumi.String("AzureManagedDomain"),
//				EmailServiceId:   exampleEmailService.ID(),
//				DomainManagement: pulumi.String("AzureManaged"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.Communication` - 2023-03-31
//
// ## Import
//
// Communication Services can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:communication/emailServiceDomain:EmailServiceDomain example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Communication/emailServices/emailCommunicationService1/domains/domain1
// ```
type EmailServiceDomain struct {
	pulumi.CustomResourceState

	// Describes how a Domains resource is being managed. Possible values are `AzureManaged`, `CustomerManaged`, `CustomerManagedInExchangeOnline`. Changing this forces a new Email Communication Service to be created.
	DomainManagement pulumi.StringOutput `pulumi:"domainManagement"`
	// The resource ID of the Email Communication Service where the Domain belongs to. Changing this forces a new Email Communication Service to be created.
	EmailServiceId pulumi.StringOutput `pulumi:"emailServiceId"`
	// P2 sender domain that is displayed to the email recipients [RFC 5322].
	FromSenderDomain pulumi.StringOutput `pulumi:"fromSenderDomain"`
	// P1 sender domain that is present on the email envelope [RFC 5321].
	MailFromSenderDomain pulumi.StringOutput `pulumi:"mailFromSenderDomain"`
	// The name of the Email Communication Service resource. If `domainManagement` is `AzureManaged`, the name must be `AzureManagedDomain`. Changing this forces a new Email Communication Service to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A mapping of tags which should be assigned to the Email Communication Service.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Describes user engagement tracking is enabled or disabled. Defaults to `false`.
	UserEngagementTrackingEnabled pulumi.BoolPtrOutput `pulumi:"userEngagementTrackingEnabled"`
	// (Optional) An `verificationRecords` block as defined below.
	VerificationRecords EmailServiceDomainVerificationRecordArrayOutput `pulumi:"verificationRecords"`
}

// NewEmailServiceDomain registers a new resource with the given unique name, arguments, and options.
func NewEmailServiceDomain(ctx *pulumi.Context,
	name string, args *EmailServiceDomainArgs, opts ...pulumi.ResourceOption) (*EmailServiceDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainManagement == nil {
		return nil, errors.New("invalid value for required argument 'DomainManagement'")
	}
	if args.EmailServiceId == nil {
		return nil, errors.New("invalid value for required argument 'EmailServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EmailServiceDomain
	err := ctx.RegisterResource("azure:communication/emailServiceDomain:EmailServiceDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailServiceDomain gets an existing EmailServiceDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailServiceDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailServiceDomainState, opts ...pulumi.ResourceOption) (*EmailServiceDomain, error) {
	var resource EmailServiceDomain
	err := ctx.ReadResource("azure:communication/emailServiceDomain:EmailServiceDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailServiceDomain resources.
type emailServiceDomainState struct {
	// Describes how a Domains resource is being managed. Possible values are `AzureManaged`, `CustomerManaged`, `CustomerManagedInExchangeOnline`. Changing this forces a new Email Communication Service to be created.
	DomainManagement *string `pulumi:"domainManagement"`
	// The resource ID of the Email Communication Service where the Domain belongs to. Changing this forces a new Email Communication Service to be created.
	EmailServiceId *string `pulumi:"emailServiceId"`
	// P2 sender domain that is displayed to the email recipients [RFC 5322].
	FromSenderDomain *string `pulumi:"fromSenderDomain"`
	// P1 sender domain that is present on the email envelope [RFC 5321].
	MailFromSenderDomain *string `pulumi:"mailFromSenderDomain"`
	// The name of the Email Communication Service resource. If `domainManagement` is `AzureManaged`, the name must be `AzureManagedDomain`. Changing this forces a new Email Communication Service to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the Email Communication Service.
	Tags map[string]string `pulumi:"tags"`
	// Describes user engagement tracking is enabled or disabled. Defaults to `false`.
	UserEngagementTrackingEnabled *bool `pulumi:"userEngagementTrackingEnabled"`
	// (Optional) An `verificationRecords` block as defined below.
	VerificationRecords []EmailServiceDomainVerificationRecord `pulumi:"verificationRecords"`
}

type EmailServiceDomainState struct {
	// Describes how a Domains resource is being managed. Possible values are `AzureManaged`, `CustomerManaged`, `CustomerManagedInExchangeOnline`. Changing this forces a new Email Communication Service to be created.
	DomainManagement pulumi.StringPtrInput
	// The resource ID of the Email Communication Service where the Domain belongs to. Changing this forces a new Email Communication Service to be created.
	EmailServiceId pulumi.StringPtrInput
	// P2 sender domain that is displayed to the email recipients [RFC 5322].
	FromSenderDomain pulumi.StringPtrInput
	// P1 sender domain that is present on the email envelope [RFC 5321].
	MailFromSenderDomain pulumi.StringPtrInput
	// The name of the Email Communication Service resource. If `domainManagement` is `AzureManaged`, the name must be `AzureManagedDomain`. Changing this forces a new Email Communication Service to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Email Communication Service.
	Tags pulumi.StringMapInput
	// Describes user engagement tracking is enabled or disabled. Defaults to `false`.
	UserEngagementTrackingEnabled pulumi.BoolPtrInput
	// (Optional) An `verificationRecords` block as defined below.
	VerificationRecords EmailServiceDomainVerificationRecordArrayInput
}

func (EmailServiceDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailServiceDomainState)(nil)).Elem()
}

type emailServiceDomainArgs struct {
	// Describes how a Domains resource is being managed. Possible values are `AzureManaged`, `CustomerManaged`, `CustomerManagedInExchangeOnline`. Changing this forces a new Email Communication Service to be created.
	DomainManagement string `pulumi:"domainManagement"`
	// The resource ID of the Email Communication Service where the Domain belongs to. Changing this forces a new Email Communication Service to be created.
	EmailServiceId string `pulumi:"emailServiceId"`
	// The name of the Email Communication Service resource. If `domainManagement` is `AzureManaged`, the name must be `AzureManagedDomain`. Changing this forces a new Email Communication Service to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the Email Communication Service.
	Tags map[string]string `pulumi:"tags"`
	// Describes user engagement tracking is enabled or disabled. Defaults to `false`.
	UserEngagementTrackingEnabled *bool `pulumi:"userEngagementTrackingEnabled"`
}

// The set of arguments for constructing a EmailServiceDomain resource.
type EmailServiceDomainArgs struct {
	// Describes how a Domains resource is being managed. Possible values are `AzureManaged`, `CustomerManaged`, `CustomerManagedInExchangeOnline`. Changing this forces a new Email Communication Service to be created.
	DomainManagement pulumi.StringInput
	// The resource ID of the Email Communication Service where the Domain belongs to. Changing this forces a new Email Communication Service to be created.
	EmailServiceId pulumi.StringInput
	// The name of the Email Communication Service resource. If `domainManagement` is `AzureManaged`, the name must be `AzureManagedDomain`. Changing this forces a new Email Communication Service to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Email Communication Service.
	Tags pulumi.StringMapInput
	// Describes user engagement tracking is enabled or disabled. Defaults to `false`.
	UserEngagementTrackingEnabled pulumi.BoolPtrInput
}

func (EmailServiceDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailServiceDomainArgs)(nil)).Elem()
}

type EmailServiceDomainInput interface {
	pulumi.Input

	ToEmailServiceDomainOutput() EmailServiceDomainOutput
	ToEmailServiceDomainOutputWithContext(ctx context.Context) EmailServiceDomainOutput
}

func (*EmailServiceDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailServiceDomain)(nil)).Elem()
}

func (i *EmailServiceDomain) ToEmailServiceDomainOutput() EmailServiceDomainOutput {
	return i.ToEmailServiceDomainOutputWithContext(context.Background())
}

func (i *EmailServiceDomain) ToEmailServiceDomainOutputWithContext(ctx context.Context) EmailServiceDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailServiceDomainOutput)
}

// EmailServiceDomainArrayInput is an input type that accepts EmailServiceDomainArray and EmailServiceDomainArrayOutput values.
// You can construct a concrete instance of `EmailServiceDomainArrayInput` via:
//
//	EmailServiceDomainArray{ EmailServiceDomainArgs{...} }
type EmailServiceDomainArrayInput interface {
	pulumi.Input

	ToEmailServiceDomainArrayOutput() EmailServiceDomainArrayOutput
	ToEmailServiceDomainArrayOutputWithContext(context.Context) EmailServiceDomainArrayOutput
}

type EmailServiceDomainArray []EmailServiceDomainInput

func (EmailServiceDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailServiceDomain)(nil)).Elem()
}

func (i EmailServiceDomainArray) ToEmailServiceDomainArrayOutput() EmailServiceDomainArrayOutput {
	return i.ToEmailServiceDomainArrayOutputWithContext(context.Background())
}

func (i EmailServiceDomainArray) ToEmailServiceDomainArrayOutputWithContext(ctx context.Context) EmailServiceDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailServiceDomainArrayOutput)
}

// EmailServiceDomainMapInput is an input type that accepts EmailServiceDomainMap and EmailServiceDomainMapOutput values.
// You can construct a concrete instance of `EmailServiceDomainMapInput` via:
//
//	EmailServiceDomainMap{ "key": EmailServiceDomainArgs{...} }
type EmailServiceDomainMapInput interface {
	pulumi.Input

	ToEmailServiceDomainMapOutput() EmailServiceDomainMapOutput
	ToEmailServiceDomainMapOutputWithContext(context.Context) EmailServiceDomainMapOutput
}

type EmailServiceDomainMap map[string]EmailServiceDomainInput

func (EmailServiceDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailServiceDomain)(nil)).Elem()
}

func (i EmailServiceDomainMap) ToEmailServiceDomainMapOutput() EmailServiceDomainMapOutput {
	return i.ToEmailServiceDomainMapOutputWithContext(context.Background())
}

func (i EmailServiceDomainMap) ToEmailServiceDomainMapOutputWithContext(ctx context.Context) EmailServiceDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailServiceDomainMapOutput)
}

type EmailServiceDomainOutput struct{ *pulumi.OutputState }

func (EmailServiceDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailServiceDomain)(nil)).Elem()
}

func (o EmailServiceDomainOutput) ToEmailServiceDomainOutput() EmailServiceDomainOutput {
	return o
}

func (o EmailServiceDomainOutput) ToEmailServiceDomainOutputWithContext(ctx context.Context) EmailServiceDomainOutput {
	return o
}

// Describes how a Domains resource is being managed. Possible values are `AzureManaged`, `CustomerManaged`, `CustomerManagedInExchangeOnline`. Changing this forces a new Email Communication Service to be created.
func (o EmailServiceDomainOutput) DomainManagement() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailServiceDomain) pulumi.StringOutput { return v.DomainManagement }).(pulumi.StringOutput)
}

// The resource ID of the Email Communication Service where the Domain belongs to. Changing this forces a new Email Communication Service to be created.
func (o EmailServiceDomainOutput) EmailServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailServiceDomain) pulumi.StringOutput { return v.EmailServiceId }).(pulumi.StringOutput)
}

// P2 sender domain that is displayed to the email recipients [RFC 5322].
func (o EmailServiceDomainOutput) FromSenderDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailServiceDomain) pulumi.StringOutput { return v.FromSenderDomain }).(pulumi.StringOutput)
}

// P1 sender domain that is present on the email envelope [RFC 5321].
func (o EmailServiceDomainOutput) MailFromSenderDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailServiceDomain) pulumi.StringOutput { return v.MailFromSenderDomain }).(pulumi.StringOutput)
}

// The name of the Email Communication Service resource. If `domainManagement` is `AzureManaged`, the name must be `AzureManagedDomain`. Changing this forces a new Email Communication Service to be created.
func (o EmailServiceDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailServiceDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Email Communication Service.
func (o EmailServiceDomainOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EmailServiceDomain) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Describes user engagement tracking is enabled or disabled. Defaults to `false`.
func (o EmailServiceDomainOutput) UserEngagementTrackingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmailServiceDomain) pulumi.BoolPtrOutput { return v.UserEngagementTrackingEnabled }).(pulumi.BoolPtrOutput)
}

// (Optional) An `verificationRecords` block as defined below.
func (o EmailServiceDomainOutput) VerificationRecords() EmailServiceDomainVerificationRecordArrayOutput {
	return o.ApplyT(func(v *EmailServiceDomain) EmailServiceDomainVerificationRecordArrayOutput {
		return v.VerificationRecords
	}).(EmailServiceDomainVerificationRecordArrayOutput)
}

type EmailServiceDomainArrayOutput struct{ *pulumi.OutputState }

func (EmailServiceDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailServiceDomain)(nil)).Elem()
}

func (o EmailServiceDomainArrayOutput) ToEmailServiceDomainArrayOutput() EmailServiceDomainArrayOutput {
	return o
}

func (o EmailServiceDomainArrayOutput) ToEmailServiceDomainArrayOutputWithContext(ctx context.Context) EmailServiceDomainArrayOutput {
	return o
}

func (o EmailServiceDomainArrayOutput) Index(i pulumi.IntInput) EmailServiceDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailServiceDomain {
		return vs[0].([]*EmailServiceDomain)[vs[1].(int)]
	}).(EmailServiceDomainOutput)
}

type EmailServiceDomainMapOutput struct{ *pulumi.OutputState }

func (EmailServiceDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailServiceDomain)(nil)).Elem()
}

func (o EmailServiceDomainMapOutput) ToEmailServiceDomainMapOutput() EmailServiceDomainMapOutput {
	return o
}

func (o EmailServiceDomainMapOutput) ToEmailServiceDomainMapOutputWithContext(ctx context.Context) EmailServiceDomainMapOutput {
	return o
}

func (o EmailServiceDomainMapOutput) MapIndex(k pulumi.StringInput) EmailServiceDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailServiceDomain {
		return vs[0].(map[string]*EmailServiceDomain)[vs[1].(string)]
	}).(EmailServiceDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailServiceDomainInput)(nil)).Elem(), &EmailServiceDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailServiceDomainArrayInput)(nil)).Elem(), EmailServiceDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailServiceDomainMapInput)(nil)).Elem(), EmailServiceDomainMap{})
	pulumi.RegisterOutputType(EmailServiceDomainOutput{})
	pulumi.RegisterOutputType(EmailServiceDomainArrayOutput{})
	pulumi.RegisterOutputType(EmailServiceDomainMapOutput{})
}
