// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an EventHub Namespace.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/eventhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventhub.NewEventHubNamespace(ctx, "exampleEventHubNamespace", &eventhub.EventHubNamespaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Standard"),
//				Capacity:          pulumi.Int(2),
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EventHub Namespaces can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:eventhub/eventHubNamespace:EventHubNamespace namespace1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventHub/namespaces/namespace1
//
// ```
type EventHubNamespace struct {
	pulumi.CustomResourceState

	// Is Auto Inflate enabled for the EventHub Namespace?
	AutoInflateEnabled pulumi.BoolPtrOutput `pulumi:"autoInflateEnabled"`
	// Specifies the Capacity / Throughput Units for a `Standard` SKU namespace. Default capacity has a maximum of `2`, but can be increased in blocks of 2 on a committed purchase basis. Defaults to `1`.
	Capacity pulumi.IntPtrOutput `pulumi:"capacity"`
	// Specifies the ID of the EventHub Dedicated Cluster where this Namespace should created. Changing this forces a new resource to be created.
	DedicatedClusterId pulumi.StringPtrOutput `pulumi:"dedicatedClusterId"`
	// The primary connection string for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryConnectionString pulumi.StringOutput `pulumi:"defaultPrimaryConnectionString"`
	// The alias of the primary connection string for the authorization rule `RootManageSharedAccessKey`, which is generated when disaster recovery is enabled.
	DefaultPrimaryConnectionStringAlias pulumi.StringOutput `pulumi:"defaultPrimaryConnectionStringAlias"`
	// The primary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryKey pulumi.StringOutput `pulumi:"defaultPrimaryKey"`
	// The secondary connection string for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryConnectionString pulumi.StringOutput `pulumi:"defaultSecondaryConnectionString"`
	// The alias of the secondary connection string for the authorization rule `RootManageSharedAccessKey`, which is generated when disaster recovery is enabled.
	DefaultSecondaryConnectionStringAlias pulumi.StringOutput `pulumi:"defaultSecondaryConnectionStringAlias"`
	// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryKey pulumi.StringOutput `pulumi:"defaultSecondaryKey"`
	// An `identity` block as defined below.
	Identity EventHubNamespaceIdentityPtrOutput `pulumi:"identity"`
	// Is SAS authentication enabled for the EventHub Namespace? Defaults to `true`.
	LocalAuthenticationEnabled pulumi.BoolPtrOutput `pulumi:"localAuthenticationEnabled"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the maximum number of throughput units when Auto Inflate is Enabled. Valid values range from `1` - `20`.
	MaximumThroughputUnits pulumi.IntOutput `pulumi:"maximumThroughputUnits"`
	// The minimum supported TLS version for this EventHub Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
	MinimumTlsVersion pulumi.StringOutput `pulumi:"minimumTlsVersion"`
	// Specifies the name of the EventHub Namespace resource. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `networkRulesets` block as defined below.
	NetworkRulesets EventHubNamespaceNetworkRulesetsOutput `pulumi:"networkRulesets"`
	// Is public network access enabled for the EventHub Namespace? Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// The name of the resource group in which to create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Defines which tier to use. Valid options are `Basic`, `Standard`, and `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
	Sku pulumi.StringOutput `pulumi:"sku"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies if the EventHub Namespace should be Zone Redundant (created across Availability Zones). Changing this forces a new resource to be created. Defaults to `false`.
	//
	// > **Note:** For eventhub premium namespace, `zoneRedundant` is computed by api based on the availability zone feature in each region. User's input will be overridden. Please explicitly sets the property to `true` when creating the premium namespace in a region that supports availability zone since the default value is `false` in 3.0 provider.
	ZoneRedundant pulumi.BoolPtrOutput `pulumi:"zoneRedundant"`
}

// NewEventHubNamespace registers a new resource with the given unique name, arguments, and options.
func NewEventHubNamespace(ctx *pulumi.Context,
	name string, args *EventHubNamespaceArgs, opts ...pulumi.ResourceOption) (*EventHubNamespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"defaultPrimaryConnectionString",
		"defaultPrimaryConnectionStringAlias",
		"defaultPrimaryKey",
		"defaultSecondaryConnectionString",
		"defaultSecondaryConnectionStringAlias",
		"defaultSecondaryKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventHubNamespace
	err := ctx.RegisterResource("azure:eventhub/eventHubNamespace:EventHubNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventHubNamespace gets an existing EventHubNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventHubNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventHubNamespaceState, opts ...pulumi.ResourceOption) (*EventHubNamespace, error) {
	var resource EventHubNamespace
	err := ctx.ReadResource("azure:eventhub/eventHubNamespace:EventHubNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventHubNamespace resources.
type eventHubNamespaceState struct {
	// Is Auto Inflate enabled for the EventHub Namespace?
	AutoInflateEnabled *bool `pulumi:"autoInflateEnabled"`
	// Specifies the Capacity / Throughput Units for a `Standard` SKU namespace. Default capacity has a maximum of `2`, but can be increased in blocks of 2 on a committed purchase basis. Defaults to `1`.
	Capacity *int `pulumi:"capacity"`
	// Specifies the ID of the EventHub Dedicated Cluster where this Namespace should created. Changing this forces a new resource to be created.
	DedicatedClusterId *string `pulumi:"dedicatedClusterId"`
	// The primary connection string for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryConnectionString *string `pulumi:"defaultPrimaryConnectionString"`
	// The alias of the primary connection string for the authorization rule `RootManageSharedAccessKey`, which is generated when disaster recovery is enabled.
	DefaultPrimaryConnectionStringAlias *string `pulumi:"defaultPrimaryConnectionStringAlias"`
	// The primary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryKey *string `pulumi:"defaultPrimaryKey"`
	// The secondary connection string for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryConnectionString *string `pulumi:"defaultSecondaryConnectionString"`
	// The alias of the secondary connection string for the authorization rule `RootManageSharedAccessKey`, which is generated when disaster recovery is enabled.
	DefaultSecondaryConnectionStringAlias *string `pulumi:"defaultSecondaryConnectionStringAlias"`
	// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryKey *string `pulumi:"defaultSecondaryKey"`
	// An `identity` block as defined below.
	Identity *EventHubNamespaceIdentity `pulumi:"identity"`
	// Is SAS authentication enabled for the EventHub Namespace? Defaults to `true`.
	LocalAuthenticationEnabled *bool `pulumi:"localAuthenticationEnabled"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the maximum number of throughput units when Auto Inflate is Enabled. Valid values range from `1` - `20`.
	MaximumThroughputUnits *int `pulumi:"maximumThroughputUnits"`
	// The minimum supported TLS version for this EventHub Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
	MinimumTlsVersion *string `pulumi:"minimumTlsVersion"`
	// Specifies the name of the EventHub Namespace resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `networkRulesets` block as defined below.
	NetworkRulesets *EventHubNamespaceNetworkRulesets `pulumi:"networkRulesets"`
	// Is public network access enabled for the EventHub Namespace? Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the resource group in which to create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Defines which tier to use. Valid options are `Basic`, `Standard`, and `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
	Sku *string `pulumi:"sku"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies if the EventHub Namespace should be Zone Redundant (created across Availability Zones). Changing this forces a new resource to be created. Defaults to `false`.
	//
	// > **Note:** For eventhub premium namespace, `zoneRedundant` is computed by api based on the availability zone feature in each region. User's input will be overridden. Please explicitly sets the property to `true` when creating the premium namespace in a region that supports availability zone since the default value is `false` in 3.0 provider.
	ZoneRedundant *bool `pulumi:"zoneRedundant"`
}

type EventHubNamespaceState struct {
	// Is Auto Inflate enabled for the EventHub Namespace?
	AutoInflateEnabled pulumi.BoolPtrInput
	// Specifies the Capacity / Throughput Units for a `Standard` SKU namespace. Default capacity has a maximum of `2`, but can be increased in blocks of 2 on a committed purchase basis. Defaults to `1`.
	Capacity pulumi.IntPtrInput
	// Specifies the ID of the EventHub Dedicated Cluster where this Namespace should created. Changing this forces a new resource to be created.
	DedicatedClusterId pulumi.StringPtrInput
	// The primary connection string for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryConnectionString pulumi.StringPtrInput
	// The alias of the primary connection string for the authorization rule `RootManageSharedAccessKey`, which is generated when disaster recovery is enabled.
	DefaultPrimaryConnectionStringAlias pulumi.StringPtrInput
	// The primary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryKey pulumi.StringPtrInput
	// The secondary connection string for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryConnectionString pulumi.StringPtrInput
	// The alias of the secondary connection string for the authorization rule `RootManageSharedAccessKey`, which is generated when disaster recovery is enabled.
	DefaultSecondaryConnectionStringAlias pulumi.StringPtrInput
	// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryKey pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity EventHubNamespaceIdentityPtrInput
	// Is SAS authentication enabled for the EventHub Namespace? Defaults to `true`.
	LocalAuthenticationEnabled pulumi.BoolPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the maximum number of throughput units when Auto Inflate is Enabled. Valid values range from `1` - `20`.
	MaximumThroughputUnits pulumi.IntPtrInput
	// The minimum supported TLS version for this EventHub Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
	MinimumTlsVersion pulumi.StringPtrInput
	// Specifies the name of the EventHub Namespace resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `networkRulesets` block as defined below.
	NetworkRulesets EventHubNamespaceNetworkRulesetsPtrInput
	// Is public network access enabled for the EventHub Namespace? Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the resource group in which to create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Defines which tier to use. Valid options are `Basic`, `Standard`, and `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
	Sku pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Specifies if the EventHub Namespace should be Zone Redundant (created across Availability Zones). Changing this forces a new resource to be created. Defaults to `false`.
	//
	// > **Note:** For eventhub premium namespace, `zoneRedundant` is computed by api based on the availability zone feature in each region. User's input will be overridden. Please explicitly sets the property to `true` when creating the premium namespace in a region that supports availability zone since the default value is `false` in 3.0 provider.
	ZoneRedundant pulumi.BoolPtrInput
}

func (EventHubNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHubNamespaceState)(nil)).Elem()
}

type eventHubNamespaceArgs struct {
	// Is Auto Inflate enabled for the EventHub Namespace?
	AutoInflateEnabled *bool `pulumi:"autoInflateEnabled"`
	// Specifies the Capacity / Throughput Units for a `Standard` SKU namespace. Default capacity has a maximum of `2`, but can be increased in blocks of 2 on a committed purchase basis. Defaults to `1`.
	Capacity *int `pulumi:"capacity"`
	// Specifies the ID of the EventHub Dedicated Cluster where this Namespace should created. Changing this forces a new resource to be created.
	DedicatedClusterId *string `pulumi:"dedicatedClusterId"`
	// An `identity` block as defined below.
	Identity *EventHubNamespaceIdentity `pulumi:"identity"`
	// Is SAS authentication enabled for the EventHub Namespace? Defaults to `true`.
	LocalAuthenticationEnabled *bool `pulumi:"localAuthenticationEnabled"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the maximum number of throughput units when Auto Inflate is Enabled. Valid values range from `1` - `20`.
	MaximumThroughputUnits *int `pulumi:"maximumThroughputUnits"`
	// The minimum supported TLS version for this EventHub Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
	MinimumTlsVersion *string `pulumi:"minimumTlsVersion"`
	// Specifies the name of the EventHub Namespace resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `networkRulesets` block as defined below.
	NetworkRulesets *EventHubNamespaceNetworkRulesets `pulumi:"networkRulesets"`
	// Is public network access enabled for the EventHub Namespace? Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the resource group in which to create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Defines which tier to use. Valid options are `Basic`, `Standard`, and `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
	Sku string `pulumi:"sku"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies if the EventHub Namespace should be Zone Redundant (created across Availability Zones). Changing this forces a new resource to be created. Defaults to `false`.
	//
	// > **Note:** For eventhub premium namespace, `zoneRedundant` is computed by api based on the availability zone feature in each region. User's input will be overridden. Please explicitly sets the property to `true` when creating the premium namespace in a region that supports availability zone since the default value is `false` in 3.0 provider.
	ZoneRedundant *bool `pulumi:"zoneRedundant"`
}

// The set of arguments for constructing a EventHubNamespace resource.
type EventHubNamespaceArgs struct {
	// Is Auto Inflate enabled for the EventHub Namespace?
	AutoInflateEnabled pulumi.BoolPtrInput
	// Specifies the Capacity / Throughput Units for a `Standard` SKU namespace. Default capacity has a maximum of `2`, but can be increased in blocks of 2 on a committed purchase basis. Defaults to `1`.
	Capacity pulumi.IntPtrInput
	// Specifies the ID of the EventHub Dedicated Cluster where this Namespace should created. Changing this forces a new resource to be created.
	DedicatedClusterId pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity EventHubNamespaceIdentityPtrInput
	// Is SAS authentication enabled for the EventHub Namespace? Defaults to `true`.
	LocalAuthenticationEnabled pulumi.BoolPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the maximum number of throughput units when Auto Inflate is Enabled. Valid values range from `1` - `20`.
	MaximumThroughputUnits pulumi.IntPtrInput
	// The minimum supported TLS version for this EventHub Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
	MinimumTlsVersion pulumi.StringPtrInput
	// Specifies the name of the EventHub Namespace resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `networkRulesets` block as defined below.
	NetworkRulesets EventHubNamespaceNetworkRulesetsPtrInput
	// Is public network access enabled for the EventHub Namespace? Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the resource group in which to create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Defines which tier to use. Valid options are `Basic`, `Standard`, and `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
	Sku pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Specifies if the EventHub Namespace should be Zone Redundant (created across Availability Zones). Changing this forces a new resource to be created. Defaults to `false`.
	//
	// > **Note:** For eventhub premium namespace, `zoneRedundant` is computed by api based on the availability zone feature in each region. User's input will be overridden. Please explicitly sets the property to `true` when creating the premium namespace in a region that supports availability zone since the default value is `false` in 3.0 provider.
	ZoneRedundant pulumi.BoolPtrInput
}

func (EventHubNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHubNamespaceArgs)(nil)).Elem()
}

type EventHubNamespaceInput interface {
	pulumi.Input

	ToEventHubNamespaceOutput() EventHubNamespaceOutput
	ToEventHubNamespaceOutputWithContext(ctx context.Context) EventHubNamespaceOutput
}

func (*EventHubNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubNamespace)(nil)).Elem()
}

func (i *EventHubNamespace) ToEventHubNamespaceOutput() EventHubNamespaceOutput {
	return i.ToEventHubNamespaceOutputWithContext(context.Background())
}

func (i *EventHubNamespace) ToEventHubNamespaceOutputWithContext(ctx context.Context) EventHubNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceOutput)
}

// EventHubNamespaceArrayInput is an input type that accepts EventHubNamespaceArray and EventHubNamespaceArrayOutput values.
// You can construct a concrete instance of `EventHubNamespaceArrayInput` via:
//
//	EventHubNamespaceArray{ EventHubNamespaceArgs{...} }
type EventHubNamespaceArrayInput interface {
	pulumi.Input

	ToEventHubNamespaceArrayOutput() EventHubNamespaceArrayOutput
	ToEventHubNamespaceArrayOutputWithContext(context.Context) EventHubNamespaceArrayOutput
}

type EventHubNamespaceArray []EventHubNamespaceInput

func (EventHubNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventHubNamespace)(nil)).Elem()
}

func (i EventHubNamespaceArray) ToEventHubNamespaceArrayOutput() EventHubNamespaceArrayOutput {
	return i.ToEventHubNamespaceArrayOutputWithContext(context.Background())
}

func (i EventHubNamespaceArray) ToEventHubNamespaceArrayOutputWithContext(ctx context.Context) EventHubNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceArrayOutput)
}

// EventHubNamespaceMapInput is an input type that accepts EventHubNamespaceMap and EventHubNamespaceMapOutput values.
// You can construct a concrete instance of `EventHubNamespaceMapInput` via:
//
//	EventHubNamespaceMap{ "key": EventHubNamespaceArgs{...} }
type EventHubNamespaceMapInput interface {
	pulumi.Input

	ToEventHubNamespaceMapOutput() EventHubNamespaceMapOutput
	ToEventHubNamespaceMapOutputWithContext(context.Context) EventHubNamespaceMapOutput
}

type EventHubNamespaceMap map[string]EventHubNamespaceInput

func (EventHubNamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventHubNamespace)(nil)).Elem()
}

func (i EventHubNamespaceMap) ToEventHubNamespaceMapOutput() EventHubNamespaceMapOutput {
	return i.ToEventHubNamespaceMapOutputWithContext(context.Background())
}

func (i EventHubNamespaceMap) ToEventHubNamespaceMapOutputWithContext(ctx context.Context) EventHubNamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceMapOutput)
}

type EventHubNamespaceOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubNamespace)(nil)).Elem()
}

func (o EventHubNamespaceOutput) ToEventHubNamespaceOutput() EventHubNamespaceOutput {
	return o
}

func (o EventHubNamespaceOutput) ToEventHubNamespaceOutputWithContext(ctx context.Context) EventHubNamespaceOutput {
	return o
}

// Is Auto Inflate enabled for the EventHub Namespace?
func (o EventHubNamespaceOutput) AutoInflateEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.BoolPtrOutput { return v.AutoInflateEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the Capacity / Throughput Units for a `Standard` SKU namespace. Default capacity has a maximum of `2`, but can be increased in blocks of 2 on a committed purchase basis. Defaults to `1`.
func (o EventHubNamespaceOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.IntPtrOutput { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Specifies the ID of the EventHub Dedicated Cluster where this Namespace should created. Changing this forces a new resource to be created.
func (o EventHubNamespaceOutput) DedicatedClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.StringPtrOutput { return v.DedicatedClusterId }).(pulumi.StringPtrOutput)
}

// The primary connection string for the authorization rule `RootManageSharedAccessKey`.
func (o EventHubNamespaceOutput) DefaultPrimaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.StringOutput { return v.DefaultPrimaryConnectionString }).(pulumi.StringOutput)
}

// The alias of the primary connection string for the authorization rule `RootManageSharedAccessKey`, which is generated when disaster recovery is enabled.
func (o EventHubNamespaceOutput) DefaultPrimaryConnectionStringAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.StringOutput { return v.DefaultPrimaryConnectionStringAlias }).(pulumi.StringOutput)
}

// The primary access key for the authorization rule `RootManageSharedAccessKey`.
func (o EventHubNamespaceOutput) DefaultPrimaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.StringOutput { return v.DefaultPrimaryKey }).(pulumi.StringOutput)
}

// The secondary connection string for the authorization rule `RootManageSharedAccessKey`.
func (o EventHubNamespaceOutput) DefaultSecondaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.StringOutput { return v.DefaultSecondaryConnectionString }).(pulumi.StringOutput)
}

// The alias of the secondary connection string for the authorization rule `RootManageSharedAccessKey`, which is generated when disaster recovery is enabled.
func (o EventHubNamespaceOutput) DefaultSecondaryConnectionStringAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.StringOutput { return v.DefaultSecondaryConnectionStringAlias }).(pulumi.StringOutput)
}

// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
func (o EventHubNamespaceOutput) DefaultSecondaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.StringOutput { return v.DefaultSecondaryKey }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o EventHubNamespaceOutput) Identity() EventHubNamespaceIdentityPtrOutput {
	return o.ApplyT(func(v *EventHubNamespace) EventHubNamespaceIdentityPtrOutput { return v.Identity }).(EventHubNamespaceIdentityPtrOutput)
}

// Is SAS authentication enabled for the EventHub Namespace? Defaults to `true`.
func (o EventHubNamespaceOutput) LocalAuthenticationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.BoolPtrOutput { return v.LocalAuthenticationEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o EventHubNamespaceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the maximum number of throughput units when Auto Inflate is Enabled. Valid values range from `1` - `20`.
func (o EventHubNamespaceOutput) MaximumThroughputUnits() pulumi.IntOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.IntOutput { return v.MaximumThroughputUnits }).(pulumi.IntOutput)
}

// The minimum supported TLS version for this EventHub Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
func (o EventHubNamespaceOutput) MinimumTlsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.StringOutput { return v.MinimumTlsVersion }).(pulumi.StringOutput)
}

// Specifies the name of the EventHub Namespace resource. Changing this forces a new resource to be created.
func (o EventHubNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `networkRulesets` block as defined below.
func (o EventHubNamespaceOutput) NetworkRulesets() EventHubNamespaceNetworkRulesetsOutput {
	return o.ApplyT(func(v *EventHubNamespace) EventHubNamespaceNetworkRulesetsOutput { return v.NetworkRulesets }).(EventHubNamespaceNetworkRulesetsOutput)
}

// Is public network access enabled for the EventHub Namespace? Defaults to `true`.
func (o EventHubNamespaceOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the resource group in which to create the namespace. Changing this forces a new resource to be created.
func (o EventHubNamespaceOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Defines which tier to use. Valid options are `Basic`, `Standard`, and `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
func (o EventHubNamespaceOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.StringOutput { return v.Sku }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o EventHubNamespaceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies if the EventHub Namespace should be Zone Redundant (created across Availability Zones). Changing this forces a new resource to be created. Defaults to `false`.
//
// > **Note:** For eventhub premium namespace, `zoneRedundant` is computed by api based on the availability zone feature in each region. User's input will be overridden. Please explicitly sets the property to `true` when creating the premium namespace in a region that supports availability zone since the default value is `false` in 3.0 provider.
func (o EventHubNamespaceOutput) ZoneRedundant() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventHubNamespace) pulumi.BoolPtrOutput { return v.ZoneRedundant }).(pulumi.BoolPtrOutput)
}

type EventHubNamespaceArrayOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventHubNamespace)(nil)).Elem()
}

func (o EventHubNamespaceArrayOutput) ToEventHubNamespaceArrayOutput() EventHubNamespaceArrayOutput {
	return o
}

func (o EventHubNamespaceArrayOutput) ToEventHubNamespaceArrayOutputWithContext(ctx context.Context) EventHubNamespaceArrayOutput {
	return o
}

func (o EventHubNamespaceArrayOutput) Index(i pulumi.IntInput) EventHubNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventHubNamespace {
		return vs[0].([]*EventHubNamespace)[vs[1].(int)]
	}).(EventHubNamespaceOutput)
}

type EventHubNamespaceMapOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventHubNamespace)(nil)).Elem()
}

func (o EventHubNamespaceMapOutput) ToEventHubNamespaceMapOutput() EventHubNamespaceMapOutput {
	return o
}

func (o EventHubNamespaceMapOutput) ToEventHubNamespaceMapOutputWithContext(ctx context.Context) EventHubNamespaceMapOutput {
	return o
}

func (o EventHubNamespaceMapOutput) MapIndex(k pulumi.StringInput) EventHubNamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventHubNamespace {
		return vs[0].(map[string]*EventHubNamespace)[vs[1].(string)]
	}).(EventHubNamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubNamespaceInput)(nil)).Elem(), &EventHubNamespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubNamespaceArrayInput)(nil)).Elem(), EventHubNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubNamespaceMapInput)(nil)).Elem(), EventHubNamespaceMap{})
	pulumi.RegisterOutputType(EventHubNamespaceOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceArrayOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceMapOutput{})
}
