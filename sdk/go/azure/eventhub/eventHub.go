// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Event Hubs as a nested resource within a Event Hubs namespace.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/eventhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleEventHubNamespace, err := eventhub.NewEventHubNamespace(ctx, "exampleEventHubNamespace", &eventhub.EventHubNamespaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Standard"),
//				Capacity:          pulumi.Int(1),
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventhub.NewEventHub(ctx, "exampleEventHub", &eventhub.EventHubArgs{
//				NamespaceName:     exampleEventHubNamespace.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PartitionCount:    pulumi.Int(2),
//				MessageRetention:  pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EventHubs can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:eventhub/eventHub:EventHub eventhub1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventHub/namespaces/namespace1/eventhubs/eventhub1
//
// ```
type EventHub struct {
	pulumi.CustomResourceState

	// A `captureDescription` block as defined below.
	CaptureDescription EventHubCaptureDescriptionPtrOutput `pulumi:"captureDescription"`
	// Specifies the number of days to retain the events for this Event Hub.
	//
	// > **Note:** When using a dedicated Event Hubs cluster, maximum value of `messageRetention` is 90 days. When using a shared parent EventHub Namespace, maximum value is 7 days; or 1 day when using a Basic SKU for the shared parent EventHub Namespace.
	MessageRetention pulumi.IntOutput `pulumi:"messageRetention"`
	// Specifies the name of the EventHub resource. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`
	// Specifies the current number of shards on the Event Hub.
	//
	// > **Note:** `partitionCount` cannot be changed unless Eventhub Namespace SKU is `Premium` and cannot be decreased.
	//
	// > **Note:** When using a dedicated Event Hubs cluster, maximum value of `partitionCount` is 1024. When using a shared parent EventHub Namespace, maximum value is 32.
	PartitionCount pulumi.IntOutput `pulumi:"partitionCount"`
	// The identifiers for partitions created for Event Hubs.
	PartitionIds pulumi.StringArrayOutput `pulumi:"partitionIds"`
	// The name of the resource group in which the EventHub's parent Namespace exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Specifies the status of the Event Hub resource. Possible values are `Active`, `Disabled` and `SendDisabled`. Defaults to `Active`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewEventHub registers a new resource with the given unique name, arguments, and options.
func NewEventHub(ctx *pulumi.Context,
	name string, args *EventHubArgs, opts ...pulumi.ResourceOption) (*EventHub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MessageRetention == nil {
		return nil, errors.New("invalid value for required argument 'MessageRetention'")
	}
	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.PartitionCount == nil {
		return nil, errors.New("invalid value for required argument 'PartitionCount'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventHub
	err := ctx.RegisterResource("azure:eventhub/eventHub:EventHub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventHub gets an existing EventHub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventHubState, opts ...pulumi.ResourceOption) (*EventHub, error) {
	var resource EventHub
	err := ctx.ReadResource("azure:eventhub/eventHub:EventHub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventHub resources.
type eventHubState struct {
	// A `captureDescription` block as defined below.
	CaptureDescription *EventHubCaptureDescription `pulumi:"captureDescription"`
	// Specifies the number of days to retain the events for this Event Hub.
	//
	// > **Note:** When using a dedicated Event Hubs cluster, maximum value of `messageRetention` is 90 days. When using a shared parent EventHub Namespace, maximum value is 7 days; or 1 day when using a Basic SKU for the shared parent EventHub Namespace.
	MessageRetention *int `pulumi:"messageRetention"`
	// Specifies the name of the EventHub resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.
	NamespaceName *string `pulumi:"namespaceName"`
	// Specifies the current number of shards on the Event Hub.
	//
	// > **Note:** `partitionCount` cannot be changed unless Eventhub Namespace SKU is `Premium` and cannot be decreased.
	//
	// > **Note:** When using a dedicated Event Hubs cluster, maximum value of `partitionCount` is 1024. When using a shared parent EventHub Namespace, maximum value is 32.
	PartitionCount *int `pulumi:"partitionCount"`
	// The identifiers for partitions created for Event Hubs.
	PartitionIds []string `pulumi:"partitionIds"`
	// The name of the resource group in which the EventHub's parent Namespace exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Specifies the status of the Event Hub resource. Possible values are `Active`, `Disabled` and `SendDisabled`. Defaults to `Active`.
	Status *string `pulumi:"status"`
}

type EventHubState struct {
	// A `captureDescription` block as defined below.
	CaptureDescription EventHubCaptureDescriptionPtrInput
	// Specifies the number of days to retain the events for this Event Hub.
	//
	// > **Note:** When using a dedicated Event Hubs cluster, maximum value of `messageRetention` is 90 days. When using a shared parent EventHub Namespace, maximum value is 7 days; or 1 day when using a Basic SKU for the shared parent EventHub Namespace.
	MessageRetention pulumi.IntPtrInput
	// Specifies the name of the EventHub resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.
	NamespaceName pulumi.StringPtrInput
	// Specifies the current number of shards on the Event Hub.
	//
	// > **Note:** `partitionCount` cannot be changed unless Eventhub Namespace SKU is `Premium` and cannot be decreased.
	//
	// > **Note:** When using a dedicated Event Hubs cluster, maximum value of `partitionCount` is 1024. When using a shared parent EventHub Namespace, maximum value is 32.
	PartitionCount pulumi.IntPtrInput
	// The identifiers for partitions created for Event Hubs.
	PartitionIds pulumi.StringArrayInput
	// The name of the resource group in which the EventHub's parent Namespace exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Specifies the status of the Event Hub resource. Possible values are `Active`, `Disabled` and `SendDisabled`. Defaults to `Active`.
	Status pulumi.StringPtrInput
}

func (EventHubState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHubState)(nil)).Elem()
}

type eventHubArgs struct {
	// A `captureDescription` block as defined below.
	CaptureDescription *EventHubCaptureDescription `pulumi:"captureDescription"`
	// Specifies the number of days to retain the events for this Event Hub.
	//
	// > **Note:** When using a dedicated Event Hubs cluster, maximum value of `messageRetention` is 90 days. When using a shared parent EventHub Namespace, maximum value is 7 days; or 1 day when using a Basic SKU for the shared parent EventHub Namespace.
	MessageRetention int `pulumi:"messageRetention"`
	// Specifies the name of the EventHub resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.
	NamespaceName string `pulumi:"namespaceName"`
	// Specifies the current number of shards on the Event Hub.
	//
	// > **Note:** `partitionCount` cannot be changed unless Eventhub Namespace SKU is `Premium` and cannot be decreased.
	//
	// > **Note:** When using a dedicated Event Hubs cluster, maximum value of `partitionCount` is 1024. When using a shared parent EventHub Namespace, maximum value is 32.
	PartitionCount int `pulumi:"partitionCount"`
	// The name of the resource group in which the EventHub's parent Namespace exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the status of the Event Hub resource. Possible values are `Active`, `Disabled` and `SendDisabled`. Defaults to `Active`.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a EventHub resource.
type EventHubArgs struct {
	// A `captureDescription` block as defined below.
	CaptureDescription EventHubCaptureDescriptionPtrInput
	// Specifies the number of days to retain the events for this Event Hub.
	//
	// > **Note:** When using a dedicated Event Hubs cluster, maximum value of `messageRetention` is 90 days. When using a shared parent EventHub Namespace, maximum value is 7 days; or 1 day when using a Basic SKU for the shared parent EventHub Namespace.
	MessageRetention pulumi.IntInput
	// Specifies the name of the EventHub resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.
	NamespaceName pulumi.StringInput
	// Specifies the current number of shards on the Event Hub.
	//
	// > **Note:** `partitionCount` cannot be changed unless Eventhub Namespace SKU is `Premium` and cannot be decreased.
	//
	// > **Note:** When using a dedicated Event Hubs cluster, maximum value of `partitionCount` is 1024. When using a shared parent EventHub Namespace, maximum value is 32.
	PartitionCount pulumi.IntInput
	// The name of the resource group in which the EventHub's parent Namespace exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Specifies the status of the Event Hub resource. Possible values are `Active`, `Disabled` and `SendDisabled`. Defaults to `Active`.
	Status pulumi.StringPtrInput
}

func (EventHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventHubArgs)(nil)).Elem()
}

type EventHubInput interface {
	pulumi.Input

	ToEventHubOutput() EventHubOutput
	ToEventHubOutputWithContext(ctx context.Context) EventHubOutput
}

func (*EventHub) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHub)(nil)).Elem()
}

func (i *EventHub) ToEventHubOutput() EventHubOutput {
	return i.ToEventHubOutputWithContext(context.Background())
}

func (i *EventHub) ToEventHubOutputWithContext(ctx context.Context) EventHubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubOutput)
}

// EventHubArrayInput is an input type that accepts EventHubArray and EventHubArrayOutput values.
// You can construct a concrete instance of `EventHubArrayInput` via:
//
//	EventHubArray{ EventHubArgs{...} }
type EventHubArrayInput interface {
	pulumi.Input

	ToEventHubArrayOutput() EventHubArrayOutput
	ToEventHubArrayOutputWithContext(context.Context) EventHubArrayOutput
}

type EventHubArray []EventHubInput

func (EventHubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventHub)(nil)).Elem()
}

func (i EventHubArray) ToEventHubArrayOutput() EventHubArrayOutput {
	return i.ToEventHubArrayOutputWithContext(context.Background())
}

func (i EventHubArray) ToEventHubArrayOutputWithContext(ctx context.Context) EventHubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubArrayOutput)
}

// EventHubMapInput is an input type that accepts EventHubMap and EventHubMapOutput values.
// You can construct a concrete instance of `EventHubMapInput` via:
//
//	EventHubMap{ "key": EventHubArgs{...} }
type EventHubMapInput interface {
	pulumi.Input

	ToEventHubMapOutput() EventHubMapOutput
	ToEventHubMapOutputWithContext(context.Context) EventHubMapOutput
}

type EventHubMap map[string]EventHubInput

func (EventHubMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventHub)(nil)).Elem()
}

func (i EventHubMap) ToEventHubMapOutput() EventHubMapOutput {
	return i.ToEventHubMapOutputWithContext(context.Background())
}

func (i EventHubMap) ToEventHubMapOutputWithContext(ctx context.Context) EventHubMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubMapOutput)
}

type EventHubOutput struct{ *pulumi.OutputState }

func (EventHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHub)(nil)).Elem()
}

func (o EventHubOutput) ToEventHubOutput() EventHubOutput {
	return o
}

func (o EventHubOutput) ToEventHubOutputWithContext(ctx context.Context) EventHubOutput {
	return o
}

// A `captureDescription` block as defined below.
func (o EventHubOutput) CaptureDescription() EventHubCaptureDescriptionPtrOutput {
	return o.ApplyT(func(v *EventHub) EventHubCaptureDescriptionPtrOutput { return v.CaptureDescription }).(EventHubCaptureDescriptionPtrOutput)
}

// Specifies the number of days to retain the events for this Event Hub.
//
// > **Note:** When using a dedicated Event Hubs cluster, maximum value of `messageRetention` is 90 days. When using a shared parent EventHub Namespace, maximum value is 7 days; or 1 day when using a Basic SKU for the shared parent EventHub Namespace.
func (o EventHubOutput) MessageRetention() pulumi.IntOutput {
	return o.ApplyT(func(v *EventHub) pulumi.IntOutput { return v.MessageRetention }).(pulumi.IntOutput)
}

// Specifies the name of the EventHub resource. Changing this forces a new resource to be created.
func (o EventHubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHub) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the EventHub Namespace. Changing this forces a new resource to be created.
func (o EventHubOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHub) pulumi.StringOutput { return v.NamespaceName }).(pulumi.StringOutput)
}

// Specifies the current number of shards on the Event Hub.
//
// > **Note:** `partitionCount` cannot be changed unless Eventhub Namespace SKU is `Premium` and cannot be decreased.
//
// > **Note:** When using a dedicated Event Hubs cluster, maximum value of `partitionCount` is 1024. When using a shared parent EventHub Namespace, maximum value is 32.
func (o EventHubOutput) PartitionCount() pulumi.IntOutput {
	return o.ApplyT(func(v *EventHub) pulumi.IntOutput { return v.PartitionCount }).(pulumi.IntOutput)
}

// The identifiers for partitions created for Event Hubs.
func (o EventHubOutput) PartitionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventHub) pulumi.StringArrayOutput { return v.PartitionIds }).(pulumi.StringArrayOutput)
}

// The name of the resource group in which the EventHub's parent Namespace exists. Changing this forces a new resource to be created.
func (o EventHubOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventHub) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Specifies the status of the Event Hub resource. Possible values are `Active`, `Disabled` and `SendDisabled`. Defaults to `Active`.
func (o EventHubOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHub) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

type EventHubArrayOutput struct{ *pulumi.OutputState }

func (EventHubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventHub)(nil)).Elem()
}

func (o EventHubArrayOutput) ToEventHubArrayOutput() EventHubArrayOutput {
	return o
}

func (o EventHubArrayOutput) ToEventHubArrayOutputWithContext(ctx context.Context) EventHubArrayOutput {
	return o
}

func (o EventHubArrayOutput) Index(i pulumi.IntInput) EventHubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventHub {
		return vs[0].([]*EventHub)[vs[1].(int)]
	}).(EventHubOutput)
}

type EventHubMapOutput struct{ *pulumi.OutputState }

func (EventHubMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventHub)(nil)).Elem()
}

func (o EventHubMapOutput) ToEventHubMapOutput() EventHubMapOutput {
	return o
}

func (o EventHubMapOutput) ToEventHubMapOutputWithContext(ctx context.Context) EventHubMapOutput {
	return o
}

func (o EventHubMapOutput) MapIndex(k pulumi.StringInput) EventHubOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventHub {
		return vs[0].(map[string]*EventHub)[vs[1].(string)]
	}).(EventHubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubInput)(nil)).Elem(), &EventHub{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubArrayInput)(nil)).Elem(), EventHubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubMapInput)(nil)).Elem(), EventHubMap{})
	pulumi.RegisterOutputType(EventHubOutput{})
	pulumi.RegisterOutputType(EventHubArrayOutput{})
	pulumi.RegisterOutputType(EventHubMapOutput{})
}
