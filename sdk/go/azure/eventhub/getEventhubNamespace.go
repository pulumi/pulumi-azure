// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing EventHub Namespace.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/eventhub"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := eventhub.LookupNamespace(ctx, &eventhub.LookupNamespaceArgs{
// 			Name:              "search-eventhubns",
// 			ResourceGroupName: "search-service",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("eventhubNamespaceId", example.Id)
// 		return nil
// 	})
// }
// ```
//
// Deprecated: azure.eventhub.getEventhubNamespace has been deprecated in favor of azure.eventhub.getNamespace
func GetEventhubNamespace(ctx *pulumi.Context, args *GetEventhubNamespaceArgs, opts ...pulumi.InvokeOption) (*GetEventhubNamespaceResult, error) {
	var rv GetEventhubNamespaceResult
	err := ctx.Invoke("azure:eventhub/getEventhubNamespace:getEventhubNamespace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEventhubNamespace.
type GetEventhubNamespaceArgs struct {
	// The name of the EventHub Namespace.
	Name string `pulumi:"name"`
	// The Name of the Resource Group where the EventHub Namespace exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getEventhubNamespace.
type GetEventhubNamespaceResult struct {
	// Is Auto Inflate enabled for the EventHub Namespace?
	AutoInflateEnabled bool `pulumi:"autoInflateEnabled"`
	// The Capacity / Throughput Units for a `Standard` SKU namespace.
	Capacity int `pulumi:"capacity"`
	// The ID of the EventHub Dedicated Cluster where this Namespace exists.
	DedicatedClusterId string `pulumi:"dedicatedClusterId"`
	// The primary connection string for the authorization
	// rule `RootManageSharedAccessKey`.
	DefaultPrimaryConnectionString string `pulumi:"defaultPrimaryConnectionString"`
	// The alias of the primary connection string for the authorization
	// rule `RootManageSharedAccessKey`.
	DefaultPrimaryConnectionStringAlias string `pulumi:"defaultPrimaryConnectionStringAlias"`
	// The primary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryKey string `pulumi:"defaultPrimaryKey"`
	// The secondary connection string for the
	// authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryConnectionString string `pulumi:"defaultSecondaryConnectionString"`
	// The alias of the secondary connection string for the
	// authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryConnectionStringAlias string `pulumi:"defaultSecondaryConnectionStringAlias"`
	// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryKey string `pulumi:"defaultSecondaryKey"`
	// The provider-assigned unique ID for this managed resource.
	Id           string `pulumi:"id"`
	KafkaEnabled bool   `pulumi:"kafkaEnabled"`
	// The Azure location where the EventHub Namespace exists
	Location string `pulumi:"location"`
	// Specifies the maximum number of throughput units when Auto Inflate is Enabled.
	MaximumThroughputUnits int    `pulumi:"maximumThroughputUnits"`
	Name                   string `pulumi:"name"`
	ResourceGroupName      string `pulumi:"resourceGroupName"`
	// Defines which tier to use.
	Sku string `pulumi:"sku"`
	// A mapping of tags to assign to the EventHub Namespace.
	Tags map[string]string `pulumi:"tags"`
	// Is this EventHub Namespace deployed across Availability Zones?
	ZoneRedundant bool `pulumi:"zoneRedundant"`
}

func GetEventhubNamespaceOutput(ctx *pulumi.Context, args GetEventhubNamespaceOutputArgs, opts ...pulumi.InvokeOption) GetEventhubNamespaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetEventhubNamespaceResult, error) {
			args := v.(GetEventhubNamespaceArgs)
			r, err := GetEventhubNamespace(ctx, &args, opts...)
			return *r, err
		}).(GetEventhubNamespaceResultOutput)
}

// A collection of arguments for invoking getEventhubNamespace.
type GetEventhubNamespaceOutputArgs struct {
	// The name of the EventHub Namespace.
	Name pulumi.StringInput `pulumi:"name"`
	// The Name of the Resource Group where the EventHub Namespace exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (GetEventhubNamespaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventhubNamespaceArgs)(nil)).Elem()
}

// A collection of values returned by getEventhubNamespace.
type GetEventhubNamespaceResultOutput struct{ *pulumi.OutputState }

func (GetEventhubNamespaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventhubNamespaceResult)(nil)).Elem()
}

func (o GetEventhubNamespaceResultOutput) ToGetEventhubNamespaceResultOutput() GetEventhubNamespaceResultOutput {
	return o
}

func (o GetEventhubNamespaceResultOutput) ToGetEventhubNamespaceResultOutputWithContext(ctx context.Context) GetEventhubNamespaceResultOutput {
	return o
}

// Is Auto Inflate enabled for the EventHub Namespace?
func (o GetEventhubNamespaceResultOutput) AutoInflateEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) bool { return v.AutoInflateEnabled }).(pulumi.BoolOutput)
}

// The Capacity / Throughput Units for a `Standard` SKU namespace.
func (o GetEventhubNamespaceResultOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) int { return v.Capacity }).(pulumi.IntOutput)
}

// The ID of the EventHub Dedicated Cluster where this Namespace exists.
func (o GetEventhubNamespaceResultOutput) DedicatedClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) string { return v.DedicatedClusterId }).(pulumi.StringOutput)
}

// The primary connection string for the authorization
// rule `RootManageSharedAccessKey`.
func (o GetEventhubNamespaceResultOutput) DefaultPrimaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) string { return v.DefaultPrimaryConnectionString }).(pulumi.StringOutput)
}

// The alias of the primary connection string for the authorization
// rule `RootManageSharedAccessKey`.
func (o GetEventhubNamespaceResultOutput) DefaultPrimaryConnectionStringAlias() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) string { return v.DefaultPrimaryConnectionStringAlias }).(pulumi.StringOutput)
}

// The primary access key for the authorization rule `RootManageSharedAccessKey`.
func (o GetEventhubNamespaceResultOutput) DefaultPrimaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) string { return v.DefaultPrimaryKey }).(pulumi.StringOutput)
}

// The secondary connection string for the
// authorization rule `RootManageSharedAccessKey`.
func (o GetEventhubNamespaceResultOutput) DefaultSecondaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) string { return v.DefaultSecondaryConnectionString }).(pulumi.StringOutput)
}

// The alias of the secondary connection string for the
// authorization rule `RootManageSharedAccessKey`.
func (o GetEventhubNamespaceResultOutput) DefaultSecondaryConnectionStringAlias() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) string { return v.DefaultSecondaryConnectionStringAlias }).(pulumi.StringOutput)
}

// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
func (o GetEventhubNamespaceResultOutput) DefaultSecondaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) string { return v.DefaultSecondaryKey }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetEventhubNamespaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetEventhubNamespaceResultOutput) KafkaEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) bool { return v.KafkaEnabled }).(pulumi.BoolOutput)
}

// The Azure location where the EventHub Namespace exists
func (o GetEventhubNamespaceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) string { return v.Location }).(pulumi.StringOutput)
}

// Specifies the maximum number of throughput units when Auto Inflate is Enabled.
func (o GetEventhubNamespaceResultOutput) MaximumThroughputUnits() pulumi.IntOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) int { return v.MaximumThroughputUnits }).(pulumi.IntOutput)
}

func (o GetEventhubNamespaceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetEventhubNamespaceResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Defines which tier to use.
func (o GetEventhubNamespaceResultOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) string { return v.Sku }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the EventHub Namespace.
func (o GetEventhubNamespaceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Is this EventHub Namespace deployed across Availability Zones?
func (o GetEventhubNamespaceResultOutput) ZoneRedundant() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEventhubNamespaceResult) bool { return v.ZoneRedundant }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(GetEventhubNamespaceResultOutput{})
}
