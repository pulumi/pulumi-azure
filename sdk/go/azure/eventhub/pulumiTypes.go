// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type DomainIdentity struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Event Grid Domain.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned`
	//
	// > **NOTE:** When `type` is set to `SystemAssigned`, The assigned `principalId` and `tenantId` can be retrieved after the Event Grid Domain has been created. More details are available below.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Event Grid Domain. Possible values are `SystemAssigned`, `UserAssigned`.
	Type string `pulumi:"type"`
}

// DomainIdentityInput is an input type that accepts DomainIdentityArgs and DomainIdentityOutput values.
// You can construct a concrete instance of `DomainIdentityInput` via:
//
//	DomainIdentityArgs{...}
type DomainIdentityInput interface {
	pulumi.Input

	ToDomainIdentityOutput() DomainIdentityOutput
	ToDomainIdentityOutputWithContext(context.Context) DomainIdentityOutput
}

type DomainIdentityArgs struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Event Grid Domain.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned`
	//
	// > **NOTE:** When `type` is set to `SystemAssigned`, The assigned `principalId` and `tenantId` can be retrieved after the Event Grid Domain has been created. More details are available below.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Event Grid Domain. Possible values are `SystemAssigned`, `UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DomainIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainIdentity)(nil)).Elem()
}

func (i DomainIdentityArgs) ToDomainIdentityOutput() DomainIdentityOutput {
	return i.ToDomainIdentityOutputWithContext(context.Background())
}

func (i DomainIdentityArgs) ToDomainIdentityOutputWithContext(ctx context.Context) DomainIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainIdentityOutput)
}

func (i DomainIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[DomainIdentity] {
	return pulumix.Output[DomainIdentity]{
		OutputState: i.ToDomainIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i DomainIdentityArgs) ToDomainIdentityPtrOutput() DomainIdentityPtrOutput {
	return i.ToDomainIdentityPtrOutputWithContext(context.Background())
}

func (i DomainIdentityArgs) ToDomainIdentityPtrOutputWithContext(ctx context.Context) DomainIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainIdentityOutput).ToDomainIdentityPtrOutputWithContext(ctx)
}

// DomainIdentityPtrInput is an input type that accepts DomainIdentityArgs, DomainIdentityPtr and DomainIdentityPtrOutput values.
// You can construct a concrete instance of `DomainIdentityPtrInput` via:
//
//	        DomainIdentityArgs{...}
//
//	or:
//
//	        nil
type DomainIdentityPtrInput interface {
	pulumi.Input

	ToDomainIdentityPtrOutput() DomainIdentityPtrOutput
	ToDomainIdentityPtrOutputWithContext(context.Context) DomainIdentityPtrOutput
}

type domainIdentityPtrType DomainIdentityArgs

func DomainIdentityPtr(v *DomainIdentityArgs) DomainIdentityPtrInput {
	return (*domainIdentityPtrType)(v)
}

func (*domainIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainIdentity)(nil)).Elem()
}

func (i *domainIdentityPtrType) ToDomainIdentityPtrOutput() DomainIdentityPtrOutput {
	return i.ToDomainIdentityPtrOutputWithContext(context.Background())
}

func (i *domainIdentityPtrType) ToDomainIdentityPtrOutputWithContext(ctx context.Context) DomainIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainIdentityPtrOutput)
}

func (i *domainIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainIdentity] {
	return pulumix.Output[*DomainIdentity]{
		OutputState: i.ToDomainIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

type DomainIdentityOutput struct{ *pulumi.OutputState }

func (DomainIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainIdentity)(nil)).Elem()
}

func (o DomainIdentityOutput) ToDomainIdentityOutput() DomainIdentityOutput {
	return o
}

func (o DomainIdentityOutput) ToDomainIdentityOutputWithContext(ctx context.Context) DomainIdentityOutput {
	return o
}

func (o DomainIdentityOutput) ToDomainIdentityPtrOutput() DomainIdentityPtrOutput {
	return o.ToDomainIdentityPtrOutputWithContext(context.Background())
}

func (o DomainIdentityOutput) ToDomainIdentityPtrOutputWithContext(ctx context.Context) DomainIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainIdentity) *DomainIdentity {
		return &v
	}).(DomainIdentityPtrOutput)
}

func (o DomainIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[DomainIdentity] {
	return pulumix.Output[DomainIdentity]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Event Grid Domain.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned`
//
// > **NOTE:** When `type` is set to `SystemAssigned`, The assigned `principalId` and `tenantId` can be retrieved after the Event Grid Domain has been created. More details are available below.
func (o DomainIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o DomainIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o DomainIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Event Grid Domain. Possible values are `SystemAssigned`, `UserAssigned`.
func (o DomainIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DomainIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type DomainIdentityPtrOutput struct{ *pulumi.OutputState }

func (DomainIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainIdentity)(nil)).Elem()
}

func (o DomainIdentityPtrOutput) ToDomainIdentityPtrOutput() DomainIdentityPtrOutput {
	return o
}

func (o DomainIdentityPtrOutput) ToDomainIdentityPtrOutputWithContext(ctx context.Context) DomainIdentityPtrOutput {
	return o
}

func (o DomainIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainIdentity] {
	return pulumix.Output[*DomainIdentity]{
		OutputState: o.OutputState,
	}
}

func (o DomainIdentityPtrOutput) Elem() DomainIdentityOutput {
	return o.ApplyT(func(v *DomainIdentity) DomainIdentity {
		if v != nil {
			return *v
		}
		var ret DomainIdentity
		return ret
	}).(DomainIdentityOutput)
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Event Grid Domain.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned`
//
// > **NOTE:** When `type` is set to `SystemAssigned`, The assigned `principalId` and `tenantId` can be retrieved after the Event Grid Domain has been created. More details are available below.
func (o DomainIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o DomainIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o DomainIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Event Grid Domain. Possible values are `SystemAssigned`, `UserAssigned`.
func (o DomainIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type DomainInboundIpRule struct {
	// The action to take when the rule is matched. Possible values are `Allow`. Defaults to `Allow`.
	Action *string `pulumi:"action"`
	// The IP mask (CIDR) to match on.
	IpMask string `pulumi:"ipMask"`
}

// DomainInboundIpRuleInput is an input type that accepts DomainInboundIpRuleArgs and DomainInboundIpRuleOutput values.
// You can construct a concrete instance of `DomainInboundIpRuleInput` via:
//
//	DomainInboundIpRuleArgs{...}
type DomainInboundIpRuleInput interface {
	pulumi.Input

	ToDomainInboundIpRuleOutput() DomainInboundIpRuleOutput
	ToDomainInboundIpRuleOutputWithContext(context.Context) DomainInboundIpRuleOutput
}

type DomainInboundIpRuleArgs struct {
	// The action to take when the rule is matched. Possible values are `Allow`. Defaults to `Allow`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// The IP mask (CIDR) to match on.
	IpMask pulumi.StringInput `pulumi:"ipMask"`
}

func (DomainInboundIpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInboundIpRule)(nil)).Elem()
}

func (i DomainInboundIpRuleArgs) ToDomainInboundIpRuleOutput() DomainInboundIpRuleOutput {
	return i.ToDomainInboundIpRuleOutputWithContext(context.Background())
}

func (i DomainInboundIpRuleArgs) ToDomainInboundIpRuleOutputWithContext(ctx context.Context) DomainInboundIpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInboundIpRuleOutput)
}

func (i DomainInboundIpRuleArgs) ToOutput(ctx context.Context) pulumix.Output[DomainInboundIpRule] {
	return pulumix.Output[DomainInboundIpRule]{
		OutputState: i.ToDomainInboundIpRuleOutputWithContext(ctx).OutputState,
	}
}

// DomainInboundIpRuleArrayInput is an input type that accepts DomainInboundIpRuleArray and DomainInboundIpRuleArrayOutput values.
// You can construct a concrete instance of `DomainInboundIpRuleArrayInput` via:
//
//	DomainInboundIpRuleArray{ DomainInboundIpRuleArgs{...} }
type DomainInboundIpRuleArrayInput interface {
	pulumi.Input

	ToDomainInboundIpRuleArrayOutput() DomainInboundIpRuleArrayOutput
	ToDomainInboundIpRuleArrayOutputWithContext(context.Context) DomainInboundIpRuleArrayOutput
}

type DomainInboundIpRuleArray []DomainInboundIpRuleInput

func (DomainInboundIpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainInboundIpRule)(nil)).Elem()
}

func (i DomainInboundIpRuleArray) ToDomainInboundIpRuleArrayOutput() DomainInboundIpRuleArrayOutput {
	return i.ToDomainInboundIpRuleArrayOutputWithContext(context.Background())
}

func (i DomainInboundIpRuleArray) ToDomainInboundIpRuleArrayOutputWithContext(ctx context.Context) DomainInboundIpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInboundIpRuleArrayOutput)
}

func (i DomainInboundIpRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]DomainInboundIpRule] {
	return pulumix.Output[[]DomainInboundIpRule]{
		OutputState: i.ToDomainInboundIpRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type DomainInboundIpRuleOutput struct{ *pulumi.OutputState }

func (DomainInboundIpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInboundIpRule)(nil)).Elem()
}

func (o DomainInboundIpRuleOutput) ToDomainInboundIpRuleOutput() DomainInboundIpRuleOutput {
	return o
}

func (o DomainInboundIpRuleOutput) ToDomainInboundIpRuleOutputWithContext(ctx context.Context) DomainInboundIpRuleOutput {
	return o
}

func (o DomainInboundIpRuleOutput) ToOutput(ctx context.Context) pulumix.Output[DomainInboundIpRule] {
	return pulumix.Output[DomainInboundIpRule]{
		OutputState: o.OutputState,
	}
}

// The action to take when the rule is matched. Possible values are `Allow`. Defaults to `Allow`.
func (o DomainInboundIpRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInboundIpRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The IP mask (CIDR) to match on.
func (o DomainInboundIpRuleOutput) IpMask() pulumi.StringOutput {
	return o.ApplyT(func(v DomainInboundIpRule) string { return v.IpMask }).(pulumi.StringOutput)
}

type DomainInboundIpRuleArrayOutput struct{ *pulumi.OutputState }

func (DomainInboundIpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainInboundIpRule)(nil)).Elem()
}

func (o DomainInboundIpRuleArrayOutput) ToDomainInboundIpRuleArrayOutput() DomainInboundIpRuleArrayOutput {
	return o
}

func (o DomainInboundIpRuleArrayOutput) ToDomainInboundIpRuleArrayOutputWithContext(ctx context.Context) DomainInboundIpRuleArrayOutput {
	return o
}

func (o DomainInboundIpRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DomainInboundIpRule] {
	return pulumix.Output[[]DomainInboundIpRule]{
		OutputState: o.OutputState,
	}
}

func (o DomainInboundIpRuleArrayOutput) Index(i pulumi.IntInput) DomainInboundIpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainInboundIpRule {
		return vs[0].([]DomainInboundIpRule)[vs[1].(int)]
	}).(DomainInboundIpRuleOutput)
}

type DomainInputMappingDefaultValues struct {
	// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion *string `pulumi:"dataVersion"`
	// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType *string `pulumi:"eventType"`
	// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject *string `pulumi:"subject"`
}

// DomainInputMappingDefaultValuesInput is an input type that accepts DomainInputMappingDefaultValuesArgs and DomainInputMappingDefaultValuesOutput values.
// You can construct a concrete instance of `DomainInputMappingDefaultValuesInput` via:
//
//	DomainInputMappingDefaultValuesArgs{...}
type DomainInputMappingDefaultValuesInput interface {
	pulumi.Input

	ToDomainInputMappingDefaultValuesOutput() DomainInputMappingDefaultValuesOutput
	ToDomainInputMappingDefaultValuesOutputWithContext(context.Context) DomainInputMappingDefaultValuesOutput
}

type DomainInputMappingDefaultValuesArgs struct {
	// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion pulumi.StringPtrInput `pulumi:"dataVersion"`
	// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
}

func (DomainInputMappingDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingDefaultValues)(nil)).Elem()
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesOutput() DomainInputMappingDefaultValuesOutput {
	return i.ToDomainInputMappingDefaultValuesOutputWithContext(context.Background())
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingDefaultValuesOutput)
}

func (i DomainInputMappingDefaultValuesArgs) ToOutput(ctx context.Context) pulumix.Output[DomainInputMappingDefaultValues] {
	return pulumix.Output[DomainInputMappingDefaultValues]{
		OutputState: i.ToDomainInputMappingDefaultValuesOutputWithContext(ctx).OutputState,
	}
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return i.ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingDefaultValuesOutput).ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx)
}

// DomainInputMappingDefaultValuesPtrInput is an input type that accepts DomainInputMappingDefaultValuesArgs, DomainInputMappingDefaultValuesPtr and DomainInputMappingDefaultValuesPtrOutput values.
// You can construct a concrete instance of `DomainInputMappingDefaultValuesPtrInput` via:
//
//	        DomainInputMappingDefaultValuesArgs{...}
//
//	or:
//
//	        nil
type DomainInputMappingDefaultValuesPtrInput interface {
	pulumi.Input

	ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput
	ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Context) DomainInputMappingDefaultValuesPtrOutput
}

type domainInputMappingDefaultValuesPtrType DomainInputMappingDefaultValuesArgs

func DomainInputMappingDefaultValuesPtr(v *DomainInputMappingDefaultValuesArgs) DomainInputMappingDefaultValuesPtrInput {
	return (*domainInputMappingDefaultValuesPtrType)(v)
}

func (*domainInputMappingDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingDefaultValues)(nil)).Elem()
}

func (i *domainInputMappingDefaultValuesPtrType) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return i.ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *domainInputMappingDefaultValuesPtrType) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingDefaultValuesPtrOutput)
}

func (i *domainInputMappingDefaultValuesPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainInputMappingDefaultValues] {
	return pulumix.Output[*DomainInputMappingDefaultValues]{
		OutputState: i.ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx).OutputState,
	}
}

type DomainInputMappingDefaultValuesOutput struct{ *pulumi.OutputState }

func (DomainInputMappingDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingDefaultValues)(nil)).Elem()
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesOutput() DomainInputMappingDefaultValuesOutput {
	return o
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesOutput {
	return o
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return o.ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainInputMappingDefaultValues) *DomainInputMappingDefaultValues {
		return &v
	}).(DomainInputMappingDefaultValuesPtrOutput)
}

func (o DomainInputMappingDefaultValuesOutput) ToOutput(ctx context.Context) pulumix.Output[DomainInputMappingDefaultValues] {
	return pulumix.Output[DomainInputMappingDefaultValues]{
		OutputState: o.OutputState,
	}
}

// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type DomainInputMappingDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (DomainInputMappingDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingDefaultValues)(nil)).Elem()
}

func (o DomainInputMappingDefaultValuesPtrOutput) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return o
}

func (o DomainInputMappingDefaultValuesPtrOutput) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return o
}

func (o DomainInputMappingDefaultValuesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainInputMappingDefaultValues] {
	return pulumix.Output[*DomainInputMappingDefaultValues]{
		OutputState: o.OutputState,
	}
}

func (o DomainInputMappingDefaultValuesPtrOutput) Elem() DomainInputMappingDefaultValuesOutput {
	return o.ApplyT(func(v *DomainInputMappingDefaultValues) DomainInputMappingDefaultValues {
		if v != nil {
			return *v
		}
		var ret DomainInputMappingDefaultValues
		return ret
	}).(DomainInputMappingDefaultValuesOutput)
}

// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesPtrOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(pulumi.StringPtrOutput)
}

type DomainInputMappingFields struct {
	// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion *string `pulumi:"dataVersion"`
	// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventTime *string `pulumi:"eventTime"`
	// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType *string `pulumi:"eventType"`
	// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Id *string `pulumi:"id"`
	// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject *string `pulumi:"subject"`
	// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Topic *string `pulumi:"topic"`
}

// DomainInputMappingFieldsInput is an input type that accepts DomainInputMappingFieldsArgs and DomainInputMappingFieldsOutput values.
// You can construct a concrete instance of `DomainInputMappingFieldsInput` via:
//
//	DomainInputMappingFieldsArgs{...}
type DomainInputMappingFieldsInput interface {
	pulumi.Input

	ToDomainInputMappingFieldsOutput() DomainInputMappingFieldsOutput
	ToDomainInputMappingFieldsOutputWithContext(context.Context) DomainInputMappingFieldsOutput
}

type DomainInputMappingFieldsArgs struct {
	// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion pulumi.StringPtrInput `pulumi:"dataVersion"`
	// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventTime pulumi.StringPtrInput `pulumi:"eventTime"`
	// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
	// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (DomainInputMappingFieldsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingFields)(nil)).Elem()
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsOutput() DomainInputMappingFieldsOutput {
	return i.ToDomainInputMappingFieldsOutputWithContext(context.Background())
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsOutputWithContext(ctx context.Context) DomainInputMappingFieldsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingFieldsOutput)
}

func (i DomainInputMappingFieldsArgs) ToOutput(ctx context.Context) pulumix.Output[DomainInputMappingFields] {
	return pulumix.Output[DomainInputMappingFields]{
		OutputState: i.ToDomainInputMappingFieldsOutputWithContext(ctx).OutputState,
	}
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return i.ToDomainInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingFieldsOutput).ToDomainInputMappingFieldsPtrOutputWithContext(ctx)
}

// DomainInputMappingFieldsPtrInput is an input type that accepts DomainInputMappingFieldsArgs, DomainInputMappingFieldsPtr and DomainInputMappingFieldsPtrOutput values.
// You can construct a concrete instance of `DomainInputMappingFieldsPtrInput` via:
//
//	        DomainInputMappingFieldsArgs{...}
//
//	or:
//
//	        nil
type DomainInputMappingFieldsPtrInput interface {
	pulumi.Input

	ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput
	ToDomainInputMappingFieldsPtrOutputWithContext(context.Context) DomainInputMappingFieldsPtrOutput
}

type domainInputMappingFieldsPtrType DomainInputMappingFieldsArgs

func DomainInputMappingFieldsPtr(v *DomainInputMappingFieldsArgs) DomainInputMappingFieldsPtrInput {
	return (*domainInputMappingFieldsPtrType)(v)
}

func (*domainInputMappingFieldsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingFields)(nil)).Elem()
}

func (i *domainInputMappingFieldsPtrType) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return i.ToDomainInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (i *domainInputMappingFieldsPtrType) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingFieldsPtrOutput)
}

func (i *domainInputMappingFieldsPtrType) ToOutput(ctx context.Context) pulumix.Output[*DomainInputMappingFields] {
	return pulumix.Output[*DomainInputMappingFields]{
		OutputState: i.ToDomainInputMappingFieldsPtrOutputWithContext(ctx).OutputState,
	}
}

type DomainInputMappingFieldsOutput struct{ *pulumi.OutputState }

func (DomainInputMappingFieldsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingFields)(nil)).Elem()
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsOutput() DomainInputMappingFieldsOutput {
	return o
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsOutputWithContext(ctx context.Context) DomainInputMappingFieldsOutput {
	return o
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return o.ToDomainInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainInputMappingFields) *DomainInputMappingFields {
		return &v
	}).(DomainInputMappingFieldsPtrOutput)
}

func (o DomainInputMappingFieldsOutput) ToOutput(ctx context.Context) pulumix.Output[DomainInputMappingFields] {
	return pulumix.Output[DomainInputMappingFields]{
		OutputState: o.OutputState,
	}
}

// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.EventTime }).(pulumi.StringPtrOutput)
}

// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type DomainInputMappingFieldsPtrOutput struct{ *pulumi.OutputState }

func (DomainInputMappingFieldsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingFields)(nil)).Elem()
}

func (o DomainInputMappingFieldsPtrOutput) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return o
}

func (o DomainInputMappingFieldsPtrOutput) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return o
}

func (o DomainInputMappingFieldsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DomainInputMappingFields] {
	return pulumix.Output[*DomainInputMappingFields]{
		OutputState: o.OutputState,
	}
}

func (o DomainInputMappingFieldsPtrOutput) Elem() DomainInputMappingFieldsOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) DomainInputMappingFields {
		if v != nil {
			return *v
		}
		var ret DomainInputMappingFields
		return ret
	}).(DomainInputMappingFieldsOutput)
}

// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.EventTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(pulumi.StringPtrOutput)
}

// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

type EventGridTopicIdentity struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Event Grid Topic.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned`
	//
	// > **NOTE:** When `type` is set to `SystemAssigned`, The assigned `principalId` and `tenantId` can be retrieved after the Event Grid Topic has been created. More details are available below.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Event Grid Topic. Possible values are `SystemAssigned`, `UserAssigned`.
	Type string `pulumi:"type"`
}

// EventGridTopicIdentityInput is an input type that accepts EventGridTopicIdentityArgs and EventGridTopicIdentityOutput values.
// You can construct a concrete instance of `EventGridTopicIdentityInput` via:
//
//	EventGridTopicIdentityArgs{...}
type EventGridTopicIdentityInput interface {
	pulumi.Input

	ToEventGridTopicIdentityOutput() EventGridTopicIdentityOutput
	ToEventGridTopicIdentityOutputWithContext(context.Context) EventGridTopicIdentityOutput
}

type EventGridTopicIdentityArgs struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Event Grid Topic.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned`
	//
	// > **NOTE:** When `type` is set to `SystemAssigned`, The assigned `principalId` and `tenantId` can be retrieved after the Event Grid Topic has been created. More details are available below.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Event Grid Topic. Possible values are `SystemAssigned`, `UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (EventGridTopicIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridTopicIdentity)(nil)).Elem()
}

func (i EventGridTopicIdentityArgs) ToEventGridTopicIdentityOutput() EventGridTopicIdentityOutput {
	return i.ToEventGridTopicIdentityOutputWithContext(context.Background())
}

func (i EventGridTopicIdentityArgs) ToEventGridTopicIdentityOutputWithContext(ctx context.Context) EventGridTopicIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicIdentityOutput)
}

func (i EventGridTopicIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[EventGridTopicIdentity] {
	return pulumix.Output[EventGridTopicIdentity]{
		OutputState: i.ToEventGridTopicIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i EventGridTopicIdentityArgs) ToEventGridTopicIdentityPtrOutput() EventGridTopicIdentityPtrOutput {
	return i.ToEventGridTopicIdentityPtrOutputWithContext(context.Background())
}

func (i EventGridTopicIdentityArgs) ToEventGridTopicIdentityPtrOutputWithContext(ctx context.Context) EventGridTopicIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicIdentityOutput).ToEventGridTopicIdentityPtrOutputWithContext(ctx)
}

// EventGridTopicIdentityPtrInput is an input type that accepts EventGridTopicIdentityArgs, EventGridTopicIdentityPtr and EventGridTopicIdentityPtrOutput values.
// You can construct a concrete instance of `EventGridTopicIdentityPtrInput` via:
//
//	        EventGridTopicIdentityArgs{...}
//
//	or:
//
//	        nil
type EventGridTopicIdentityPtrInput interface {
	pulumi.Input

	ToEventGridTopicIdentityPtrOutput() EventGridTopicIdentityPtrOutput
	ToEventGridTopicIdentityPtrOutputWithContext(context.Context) EventGridTopicIdentityPtrOutput
}

type eventGridTopicIdentityPtrType EventGridTopicIdentityArgs

func EventGridTopicIdentityPtr(v *EventGridTopicIdentityArgs) EventGridTopicIdentityPtrInput {
	return (*eventGridTopicIdentityPtrType)(v)
}

func (*eventGridTopicIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridTopicIdentity)(nil)).Elem()
}

func (i *eventGridTopicIdentityPtrType) ToEventGridTopicIdentityPtrOutput() EventGridTopicIdentityPtrOutput {
	return i.ToEventGridTopicIdentityPtrOutputWithContext(context.Background())
}

func (i *eventGridTopicIdentityPtrType) ToEventGridTopicIdentityPtrOutputWithContext(ctx context.Context) EventGridTopicIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicIdentityPtrOutput)
}

func (i *eventGridTopicIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventGridTopicIdentity] {
	return pulumix.Output[*EventGridTopicIdentity]{
		OutputState: i.ToEventGridTopicIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

type EventGridTopicIdentityOutput struct{ *pulumi.OutputState }

func (EventGridTopicIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridTopicIdentity)(nil)).Elem()
}

func (o EventGridTopicIdentityOutput) ToEventGridTopicIdentityOutput() EventGridTopicIdentityOutput {
	return o
}

func (o EventGridTopicIdentityOutput) ToEventGridTopicIdentityOutputWithContext(ctx context.Context) EventGridTopicIdentityOutput {
	return o
}

func (o EventGridTopicIdentityOutput) ToEventGridTopicIdentityPtrOutput() EventGridTopicIdentityPtrOutput {
	return o.ToEventGridTopicIdentityPtrOutputWithContext(context.Background())
}

func (o EventGridTopicIdentityOutput) ToEventGridTopicIdentityPtrOutputWithContext(ctx context.Context) EventGridTopicIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventGridTopicIdentity) *EventGridTopicIdentity {
		return &v
	}).(EventGridTopicIdentityPtrOutput)
}

func (o EventGridTopicIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[EventGridTopicIdentity] {
	return pulumix.Output[EventGridTopicIdentity]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Event Grid Topic.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned`
//
// > **NOTE:** When `type` is set to `SystemAssigned`, The assigned `principalId` and `tenantId` can be retrieved after the Event Grid Topic has been created. More details are available below.
func (o EventGridTopicIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventGridTopicIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o EventGridTopicIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o EventGridTopicIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Event Grid Topic. Possible values are `SystemAssigned`, `UserAssigned`.
func (o EventGridTopicIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventGridTopicIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type EventGridTopicIdentityPtrOutput struct{ *pulumi.OutputState }

func (EventGridTopicIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridTopicIdentity)(nil)).Elem()
}

func (o EventGridTopicIdentityPtrOutput) ToEventGridTopicIdentityPtrOutput() EventGridTopicIdentityPtrOutput {
	return o
}

func (o EventGridTopicIdentityPtrOutput) ToEventGridTopicIdentityPtrOutputWithContext(ctx context.Context) EventGridTopicIdentityPtrOutput {
	return o
}

func (o EventGridTopicIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventGridTopicIdentity] {
	return pulumix.Output[*EventGridTopicIdentity]{
		OutputState: o.OutputState,
	}
}

func (o EventGridTopicIdentityPtrOutput) Elem() EventGridTopicIdentityOutput {
	return o.ApplyT(func(v *EventGridTopicIdentity) EventGridTopicIdentity {
		if v != nil {
			return *v
		}
		var ret EventGridTopicIdentity
		return ret
	}).(EventGridTopicIdentityOutput)
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this Event Grid Topic.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned`
//
// > **NOTE:** When `type` is set to `SystemAssigned`, The assigned `principalId` and `tenantId` can be retrieved after the Event Grid Topic has been created. More details are available below.
func (o EventGridTopicIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventGridTopicIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o EventGridTopicIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o EventGridTopicIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Event Grid Topic. Possible values are `SystemAssigned`, `UserAssigned`.
func (o EventGridTopicIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type EventGridTopicInboundIpRule struct {
	// The action to take when the rule is matched. Possible values are `Allow`. Defaults to `Allow`.
	Action *string `pulumi:"action"`
	// The IP mask (CIDR) to match on.
	IpMask string `pulumi:"ipMask"`
}

// EventGridTopicInboundIpRuleInput is an input type that accepts EventGridTopicInboundIpRuleArgs and EventGridTopicInboundIpRuleOutput values.
// You can construct a concrete instance of `EventGridTopicInboundIpRuleInput` via:
//
//	EventGridTopicInboundIpRuleArgs{...}
type EventGridTopicInboundIpRuleInput interface {
	pulumi.Input

	ToEventGridTopicInboundIpRuleOutput() EventGridTopicInboundIpRuleOutput
	ToEventGridTopicInboundIpRuleOutputWithContext(context.Context) EventGridTopicInboundIpRuleOutput
}

type EventGridTopicInboundIpRuleArgs struct {
	// The action to take when the rule is matched. Possible values are `Allow`. Defaults to `Allow`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// The IP mask (CIDR) to match on.
	IpMask pulumi.StringInput `pulumi:"ipMask"`
}

func (EventGridTopicInboundIpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridTopicInboundIpRule)(nil)).Elem()
}

func (i EventGridTopicInboundIpRuleArgs) ToEventGridTopicInboundIpRuleOutput() EventGridTopicInboundIpRuleOutput {
	return i.ToEventGridTopicInboundIpRuleOutputWithContext(context.Background())
}

func (i EventGridTopicInboundIpRuleArgs) ToEventGridTopicInboundIpRuleOutputWithContext(ctx context.Context) EventGridTopicInboundIpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInboundIpRuleOutput)
}

func (i EventGridTopicInboundIpRuleArgs) ToOutput(ctx context.Context) pulumix.Output[EventGridTopicInboundIpRule] {
	return pulumix.Output[EventGridTopicInboundIpRule]{
		OutputState: i.ToEventGridTopicInboundIpRuleOutputWithContext(ctx).OutputState,
	}
}

// EventGridTopicInboundIpRuleArrayInput is an input type that accepts EventGridTopicInboundIpRuleArray and EventGridTopicInboundIpRuleArrayOutput values.
// You can construct a concrete instance of `EventGridTopicInboundIpRuleArrayInput` via:
//
//	EventGridTopicInboundIpRuleArray{ EventGridTopicInboundIpRuleArgs{...} }
type EventGridTopicInboundIpRuleArrayInput interface {
	pulumi.Input

	ToEventGridTopicInboundIpRuleArrayOutput() EventGridTopicInboundIpRuleArrayOutput
	ToEventGridTopicInboundIpRuleArrayOutputWithContext(context.Context) EventGridTopicInboundIpRuleArrayOutput
}

type EventGridTopicInboundIpRuleArray []EventGridTopicInboundIpRuleInput

func (EventGridTopicInboundIpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventGridTopicInboundIpRule)(nil)).Elem()
}

func (i EventGridTopicInboundIpRuleArray) ToEventGridTopicInboundIpRuleArrayOutput() EventGridTopicInboundIpRuleArrayOutput {
	return i.ToEventGridTopicInboundIpRuleArrayOutputWithContext(context.Background())
}

func (i EventGridTopicInboundIpRuleArray) ToEventGridTopicInboundIpRuleArrayOutputWithContext(ctx context.Context) EventGridTopicInboundIpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInboundIpRuleArrayOutput)
}

func (i EventGridTopicInboundIpRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]EventGridTopicInboundIpRule] {
	return pulumix.Output[[]EventGridTopicInboundIpRule]{
		OutputState: i.ToEventGridTopicInboundIpRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type EventGridTopicInboundIpRuleOutput struct{ *pulumi.OutputState }

func (EventGridTopicInboundIpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridTopicInboundIpRule)(nil)).Elem()
}

func (o EventGridTopicInboundIpRuleOutput) ToEventGridTopicInboundIpRuleOutput() EventGridTopicInboundIpRuleOutput {
	return o
}

func (o EventGridTopicInboundIpRuleOutput) ToEventGridTopicInboundIpRuleOutputWithContext(ctx context.Context) EventGridTopicInboundIpRuleOutput {
	return o
}

func (o EventGridTopicInboundIpRuleOutput) ToOutput(ctx context.Context) pulumix.Output[EventGridTopicInboundIpRule] {
	return pulumix.Output[EventGridTopicInboundIpRule]{
		OutputState: o.OutputState,
	}
}

// The action to take when the rule is matched. Possible values are `Allow`. Defaults to `Allow`.
func (o EventGridTopicInboundIpRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInboundIpRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The IP mask (CIDR) to match on.
func (o EventGridTopicInboundIpRuleOutput) IpMask() pulumi.StringOutput {
	return o.ApplyT(func(v EventGridTopicInboundIpRule) string { return v.IpMask }).(pulumi.StringOutput)
}

type EventGridTopicInboundIpRuleArrayOutput struct{ *pulumi.OutputState }

func (EventGridTopicInboundIpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventGridTopicInboundIpRule)(nil)).Elem()
}

func (o EventGridTopicInboundIpRuleArrayOutput) ToEventGridTopicInboundIpRuleArrayOutput() EventGridTopicInboundIpRuleArrayOutput {
	return o
}

func (o EventGridTopicInboundIpRuleArrayOutput) ToEventGridTopicInboundIpRuleArrayOutputWithContext(ctx context.Context) EventGridTopicInboundIpRuleArrayOutput {
	return o
}

func (o EventGridTopicInboundIpRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventGridTopicInboundIpRule] {
	return pulumix.Output[[]EventGridTopicInboundIpRule]{
		OutputState: o.OutputState,
	}
}

func (o EventGridTopicInboundIpRuleArrayOutput) Index(i pulumi.IntInput) EventGridTopicInboundIpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventGridTopicInboundIpRule {
		return vs[0].([]EventGridTopicInboundIpRule)[vs[1].(int)]
	}).(EventGridTopicInboundIpRuleOutput)
}

type EventGridTopicInputMappingDefaultValues struct {
	// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion *string `pulumi:"dataVersion"`
	// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType *string `pulumi:"eventType"`
	// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject *string `pulumi:"subject"`
}

// EventGridTopicInputMappingDefaultValuesInput is an input type that accepts EventGridTopicInputMappingDefaultValuesArgs and EventGridTopicInputMappingDefaultValuesOutput values.
// You can construct a concrete instance of `EventGridTopicInputMappingDefaultValuesInput` via:
//
//	EventGridTopicInputMappingDefaultValuesArgs{...}
type EventGridTopicInputMappingDefaultValuesInput interface {
	pulumi.Input

	ToEventGridTopicInputMappingDefaultValuesOutput() EventGridTopicInputMappingDefaultValuesOutput
	ToEventGridTopicInputMappingDefaultValuesOutputWithContext(context.Context) EventGridTopicInputMappingDefaultValuesOutput
}

type EventGridTopicInputMappingDefaultValuesArgs struct {
	// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion pulumi.StringPtrInput `pulumi:"dataVersion"`
	// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
}

func (EventGridTopicInputMappingDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridTopicInputMappingDefaultValues)(nil)).Elem()
}

func (i EventGridTopicInputMappingDefaultValuesArgs) ToEventGridTopicInputMappingDefaultValuesOutput() EventGridTopicInputMappingDefaultValuesOutput {
	return i.ToEventGridTopicInputMappingDefaultValuesOutputWithContext(context.Background())
}

func (i EventGridTopicInputMappingDefaultValuesArgs) ToEventGridTopicInputMappingDefaultValuesOutputWithContext(ctx context.Context) EventGridTopicInputMappingDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInputMappingDefaultValuesOutput)
}

func (i EventGridTopicInputMappingDefaultValuesArgs) ToOutput(ctx context.Context) pulumix.Output[EventGridTopicInputMappingDefaultValues] {
	return pulumix.Output[EventGridTopicInputMappingDefaultValues]{
		OutputState: i.ToEventGridTopicInputMappingDefaultValuesOutputWithContext(ctx).OutputState,
	}
}

func (i EventGridTopicInputMappingDefaultValuesArgs) ToEventGridTopicInputMappingDefaultValuesPtrOutput() EventGridTopicInputMappingDefaultValuesPtrOutput {
	return i.ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (i EventGridTopicInputMappingDefaultValuesArgs) ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInputMappingDefaultValuesOutput).ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(ctx)
}

// EventGridTopicInputMappingDefaultValuesPtrInput is an input type that accepts EventGridTopicInputMappingDefaultValuesArgs, EventGridTopicInputMappingDefaultValuesPtr and EventGridTopicInputMappingDefaultValuesPtrOutput values.
// You can construct a concrete instance of `EventGridTopicInputMappingDefaultValuesPtrInput` via:
//
//	        EventGridTopicInputMappingDefaultValuesArgs{...}
//
//	or:
//
//	        nil
type EventGridTopicInputMappingDefaultValuesPtrInput interface {
	pulumi.Input

	ToEventGridTopicInputMappingDefaultValuesPtrOutput() EventGridTopicInputMappingDefaultValuesPtrOutput
	ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(context.Context) EventGridTopicInputMappingDefaultValuesPtrOutput
}

type eventGridTopicInputMappingDefaultValuesPtrType EventGridTopicInputMappingDefaultValuesArgs

func EventGridTopicInputMappingDefaultValuesPtr(v *EventGridTopicInputMappingDefaultValuesArgs) EventGridTopicInputMappingDefaultValuesPtrInput {
	return (*eventGridTopicInputMappingDefaultValuesPtrType)(v)
}

func (*eventGridTopicInputMappingDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridTopicInputMappingDefaultValues)(nil)).Elem()
}

func (i *eventGridTopicInputMappingDefaultValuesPtrType) ToEventGridTopicInputMappingDefaultValuesPtrOutput() EventGridTopicInputMappingDefaultValuesPtrOutput {
	return i.ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *eventGridTopicInputMappingDefaultValuesPtrType) ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInputMappingDefaultValuesPtrOutput)
}

func (i *eventGridTopicInputMappingDefaultValuesPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventGridTopicInputMappingDefaultValues] {
	return pulumix.Output[*EventGridTopicInputMappingDefaultValues]{
		OutputState: i.ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(ctx).OutputState,
	}
}

type EventGridTopicInputMappingDefaultValuesOutput struct{ *pulumi.OutputState }

func (EventGridTopicInputMappingDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridTopicInputMappingDefaultValues)(nil)).Elem()
}

func (o EventGridTopicInputMappingDefaultValuesOutput) ToEventGridTopicInputMappingDefaultValuesOutput() EventGridTopicInputMappingDefaultValuesOutput {
	return o
}

func (o EventGridTopicInputMappingDefaultValuesOutput) ToEventGridTopicInputMappingDefaultValuesOutputWithContext(ctx context.Context) EventGridTopicInputMappingDefaultValuesOutput {
	return o
}

func (o EventGridTopicInputMappingDefaultValuesOutput) ToEventGridTopicInputMappingDefaultValuesPtrOutput() EventGridTopicInputMappingDefaultValuesPtrOutput {
	return o.ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (o EventGridTopicInputMappingDefaultValuesOutput) ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingDefaultValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventGridTopicInputMappingDefaultValues) *EventGridTopicInputMappingDefaultValues {
		return &v
	}).(EventGridTopicInputMappingDefaultValuesPtrOutput)
}

func (o EventGridTopicInputMappingDefaultValuesOutput) ToOutput(ctx context.Context) pulumix.Output[EventGridTopicInputMappingDefaultValues] {
	return pulumix.Output[EventGridTopicInputMappingDefaultValues]{
		OutputState: o.OutputState,
	}
}

// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingDefaultValuesOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingDefaultValues) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingDefaultValuesOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingDefaultValues) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingDefaultValuesOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingDefaultValues) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type EventGridTopicInputMappingDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (EventGridTopicInputMappingDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridTopicInputMappingDefaultValues)(nil)).Elem()
}

func (o EventGridTopicInputMappingDefaultValuesPtrOutput) ToEventGridTopicInputMappingDefaultValuesPtrOutput() EventGridTopicInputMappingDefaultValuesPtrOutput {
	return o
}

func (o EventGridTopicInputMappingDefaultValuesPtrOutput) ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingDefaultValuesPtrOutput {
	return o
}

func (o EventGridTopicInputMappingDefaultValuesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventGridTopicInputMappingDefaultValues] {
	return pulumix.Output[*EventGridTopicInputMappingDefaultValues]{
		OutputState: o.OutputState,
	}
}

func (o EventGridTopicInputMappingDefaultValuesPtrOutput) Elem() EventGridTopicInputMappingDefaultValuesOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingDefaultValues) EventGridTopicInputMappingDefaultValues {
		if v != nil {
			return *v
		}
		var ret EventGridTopicInputMappingDefaultValues
		return ret
	}).(EventGridTopicInputMappingDefaultValuesOutput)
}

// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingDefaultValuesPtrOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingDefaultValuesPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingDefaultValuesPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(pulumi.StringPtrOutput)
}

type EventGridTopicInputMappingFields struct {
	// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion *string `pulumi:"dataVersion"`
	// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventTime *string `pulumi:"eventTime"`
	// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType *string `pulumi:"eventType"`
	// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Id *string `pulumi:"id"`
	// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject *string `pulumi:"subject"`
	// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Topic *string `pulumi:"topic"`
}

// EventGridTopicInputMappingFieldsInput is an input type that accepts EventGridTopicInputMappingFieldsArgs and EventGridTopicInputMappingFieldsOutput values.
// You can construct a concrete instance of `EventGridTopicInputMappingFieldsInput` via:
//
//	EventGridTopicInputMappingFieldsArgs{...}
type EventGridTopicInputMappingFieldsInput interface {
	pulumi.Input

	ToEventGridTopicInputMappingFieldsOutput() EventGridTopicInputMappingFieldsOutput
	ToEventGridTopicInputMappingFieldsOutputWithContext(context.Context) EventGridTopicInputMappingFieldsOutput
}

type EventGridTopicInputMappingFieldsArgs struct {
	// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion pulumi.StringPtrInput `pulumi:"dataVersion"`
	// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventTime pulumi.StringPtrInput `pulumi:"eventTime"`
	// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
	// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (EventGridTopicInputMappingFieldsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridTopicInputMappingFields)(nil)).Elem()
}

func (i EventGridTopicInputMappingFieldsArgs) ToEventGridTopicInputMappingFieldsOutput() EventGridTopicInputMappingFieldsOutput {
	return i.ToEventGridTopicInputMappingFieldsOutputWithContext(context.Background())
}

func (i EventGridTopicInputMappingFieldsArgs) ToEventGridTopicInputMappingFieldsOutputWithContext(ctx context.Context) EventGridTopicInputMappingFieldsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInputMappingFieldsOutput)
}

func (i EventGridTopicInputMappingFieldsArgs) ToOutput(ctx context.Context) pulumix.Output[EventGridTopicInputMappingFields] {
	return pulumix.Output[EventGridTopicInputMappingFields]{
		OutputState: i.ToEventGridTopicInputMappingFieldsOutputWithContext(ctx).OutputState,
	}
}

func (i EventGridTopicInputMappingFieldsArgs) ToEventGridTopicInputMappingFieldsPtrOutput() EventGridTopicInputMappingFieldsPtrOutput {
	return i.ToEventGridTopicInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (i EventGridTopicInputMappingFieldsArgs) ToEventGridTopicInputMappingFieldsPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingFieldsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInputMappingFieldsOutput).ToEventGridTopicInputMappingFieldsPtrOutputWithContext(ctx)
}

// EventGridTopicInputMappingFieldsPtrInput is an input type that accepts EventGridTopicInputMappingFieldsArgs, EventGridTopicInputMappingFieldsPtr and EventGridTopicInputMappingFieldsPtrOutput values.
// You can construct a concrete instance of `EventGridTopicInputMappingFieldsPtrInput` via:
//
//	        EventGridTopicInputMappingFieldsArgs{...}
//
//	or:
//
//	        nil
type EventGridTopicInputMappingFieldsPtrInput interface {
	pulumi.Input

	ToEventGridTopicInputMappingFieldsPtrOutput() EventGridTopicInputMappingFieldsPtrOutput
	ToEventGridTopicInputMappingFieldsPtrOutputWithContext(context.Context) EventGridTopicInputMappingFieldsPtrOutput
}

type eventGridTopicInputMappingFieldsPtrType EventGridTopicInputMappingFieldsArgs

func EventGridTopicInputMappingFieldsPtr(v *EventGridTopicInputMappingFieldsArgs) EventGridTopicInputMappingFieldsPtrInput {
	return (*eventGridTopicInputMappingFieldsPtrType)(v)
}

func (*eventGridTopicInputMappingFieldsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridTopicInputMappingFields)(nil)).Elem()
}

func (i *eventGridTopicInputMappingFieldsPtrType) ToEventGridTopicInputMappingFieldsPtrOutput() EventGridTopicInputMappingFieldsPtrOutput {
	return i.ToEventGridTopicInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (i *eventGridTopicInputMappingFieldsPtrType) ToEventGridTopicInputMappingFieldsPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingFieldsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInputMappingFieldsPtrOutput)
}

func (i *eventGridTopicInputMappingFieldsPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventGridTopicInputMappingFields] {
	return pulumix.Output[*EventGridTopicInputMappingFields]{
		OutputState: i.ToEventGridTopicInputMappingFieldsPtrOutputWithContext(ctx).OutputState,
	}
}

type EventGridTopicInputMappingFieldsOutput struct{ *pulumi.OutputState }

func (EventGridTopicInputMappingFieldsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridTopicInputMappingFields)(nil)).Elem()
}

func (o EventGridTopicInputMappingFieldsOutput) ToEventGridTopicInputMappingFieldsOutput() EventGridTopicInputMappingFieldsOutput {
	return o
}

func (o EventGridTopicInputMappingFieldsOutput) ToEventGridTopicInputMappingFieldsOutputWithContext(ctx context.Context) EventGridTopicInputMappingFieldsOutput {
	return o
}

func (o EventGridTopicInputMappingFieldsOutput) ToEventGridTopicInputMappingFieldsPtrOutput() EventGridTopicInputMappingFieldsPtrOutput {
	return o.ToEventGridTopicInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (o EventGridTopicInputMappingFieldsOutput) ToEventGridTopicInputMappingFieldsPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingFieldsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventGridTopicInputMappingFields) *EventGridTopicInputMappingFields {
		return &v
	}).(EventGridTopicInputMappingFieldsPtrOutput)
}

func (o EventGridTopicInputMappingFieldsOutput) ToOutput(ctx context.Context) pulumix.Output[EventGridTopicInputMappingFields] {
	return pulumix.Output[EventGridTopicInputMappingFields]{
		OutputState: o.OutputState,
	}
}

// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingFields) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingFields) *string { return v.EventTime }).(pulumi.StringPtrOutput)
}

// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingFields) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingFields) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingFields) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingFields) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type EventGridTopicInputMappingFieldsPtrOutput struct{ *pulumi.OutputState }

func (EventGridTopicInputMappingFieldsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridTopicInputMappingFields)(nil)).Elem()
}

func (o EventGridTopicInputMappingFieldsPtrOutput) ToEventGridTopicInputMappingFieldsPtrOutput() EventGridTopicInputMappingFieldsPtrOutput {
	return o
}

func (o EventGridTopicInputMappingFieldsPtrOutput) ToEventGridTopicInputMappingFieldsPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingFieldsPtrOutput {
	return o
}

func (o EventGridTopicInputMappingFieldsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventGridTopicInputMappingFields] {
	return pulumix.Output[*EventGridTopicInputMappingFields]{
		OutputState: o.OutputState,
	}
}

func (o EventGridTopicInputMappingFieldsPtrOutput) Elem() EventGridTopicInputMappingFieldsOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingFields) EventGridTopicInputMappingFields {
		if v != nil {
			return *v
		}
		var ret EventGridTopicInputMappingFields
		return ret
	}).(EventGridTopicInputMappingFieldsOutput)
}

// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsPtrOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsPtrOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.EventTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(pulumi.StringPtrOutput)
}

// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

type EventHubCaptureDescription struct {
	// A `destination` block as defined below.
	Destination EventHubCaptureDescriptionDestination `pulumi:"destination"`
	// Specifies if the Capture Description is Enabled.
	Enabled bool `pulumi:"enabled"`
	// Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
	Encoding string `pulumi:"encoding"`
	// Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
	// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000` bytes. Defaults to `314572800` bytes.
	SizeLimitInBytes *int `pulumi:"sizeLimitInBytes"`
	// Specifies if empty files should not be emitted if no events occur during the Capture time window. Defaults to `false`.
	SkipEmptyArchives *bool `pulumi:"skipEmptyArchives"`
}

// EventHubCaptureDescriptionInput is an input type that accepts EventHubCaptureDescriptionArgs and EventHubCaptureDescriptionOutput values.
// You can construct a concrete instance of `EventHubCaptureDescriptionInput` via:
//
//	EventHubCaptureDescriptionArgs{...}
type EventHubCaptureDescriptionInput interface {
	pulumi.Input

	ToEventHubCaptureDescriptionOutput() EventHubCaptureDescriptionOutput
	ToEventHubCaptureDescriptionOutputWithContext(context.Context) EventHubCaptureDescriptionOutput
}

type EventHubCaptureDescriptionArgs struct {
	// A `destination` block as defined below.
	Destination EventHubCaptureDescriptionDestinationInput `pulumi:"destination"`
	// Specifies if the Capture Description is Enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
	Encoding pulumi.StringInput `pulumi:"encoding"`
	// Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
	// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000` bytes. Defaults to `314572800` bytes.
	SizeLimitInBytes pulumi.IntPtrInput `pulumi:"sizeLimitInBytes"`
	// Specifies if empty files should not be emitted if no events occur during the Capture time window. Defaults to `false`.
	SkipEmptyArchives pulumi.BoolPtrInput `pulumi:"skipEmptyArchives"`
}

func (EventHubCaptureDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubCaptureDescription)(nil)).Elem()
}

func (i EventHubCaptureDescriptionArgs) ToEventHubCaptureDescriptionOutput() EventHubCaptureDescriptionOutput {
	return i.ToEventHubCaptureDescriptionOutputWithContext(context.Background())
}

func (i EventHubCaptureDescriptionArgs) ToEventHubCaptureDescriptionOutputWithContext(ctx context.Context) EventHubCaptureDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionOutput)
}

func (i EventHubCaptureDescriptionArgs) ToOutput(ctx context.Context) pulumix.Output[EventHubCaptureDescription] {
	return pulumix.Output[EventHubCaptureDescription]{
		OutputState: i.ToEventHubCaptureDescriptionOutputWithContext(ctx).OutputState,
	}
}

func (i EventHubCaptureDescriptionArgs) ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput {
	return i.ToEventHubCaptureDescriptionPtrOutputWithContext(context.Background())
}

func (i EventHubCaptureDescriptionArgs) ToEventHubCaptureDescriptionPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionOutput).ToEventHubCaptureDescriptionPtrOutputWithContext(ctx)
}

// EventHubCaptureDescriptionPtrInput is an input type that accepts EventHubCaptureDescriptionArgs, EventHubCaptureDescriptionPtr and EventHubCaptureDescriptionPtrOutput values.
// You can construct a concrete instance of `EventHubCaptureDescriptionPtrInput` via:
//
//	        EventHubCaptureDescriptionArgs{...}
//
//	or:
//
//	        nil
type EventHubCaptureDescriptionPtrInput interface {
	pulumi.Input

	ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput
	ToEventHubCaptureDescriptionPtrOutputWithContext(context.Context) EventHubCaptureDescriptionPtrOutput
}

type eventHubCaptureDescriptionPtrType EventHubCaptureDescriptionArgs

func EventHubCaptureDescriptionPtr(v *EventHubCaptureDescriptionArgs) EventHubCaptureDescriptionPtrInput {
	return (*eventHubCaptureDescriptionPtrType)(v)
}

func (*eventHubCaptureDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubCaptureDescription)(nil)).Elem()
}

func (i *eventHubCaptureDescriptionPtrType) ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput {
	return i.ToEventHubCaptureDescriptionPtrOutputWithContext(context.Background())
}

func (i *eventHubCaptureDescriptionPtrType) ToEventHubCaptureDescriptionPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionPtrOutput)
}

func (i *eventHubCaptureDescriptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventHubCaptureDescription] {
	return pulumix.Output[*EventHubCaptureDescription]{
		OutputState: i.ToEventHubCaptureDescriptionPtrOutputWithContext(ctx).OutputState,
	}
}

type EventHubCaptureDescriptionOutput struct{ *pulumi.OutputState }

func (EventHubCaptureDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubCaptureDescription)(nil)).Elem()
}

func (o EventHubCaptureDescriptionOutput) ToEventHubCaptureDescriptionOutput() EventHubCaptureDescriptionOutput {
	return o
}

func (o EventHubCaptureDescriptionOutput) ToEventHubCaptureDescriptionOutputWithContext(ctx context.Context) EventHubCaptureDescriptionOutput {
	return o
}

func (o EventHubCaptureDescriptionOutput) ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput {
	return o.ToEventHubCaptureDescriptionPtrOutputWithContext(context.Background())
}

func (o EventHubCaptureDescriptionOutput) ToEventHubCaptureDescriptionPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventHubCaptureDescription) *EventHubCaptureDescription {
		return &v
	}).(EventHubCaptureDescriptionPtrOutput)
}

func (o EventHubCaptureDescriptionOutput) ToOutput(ctx context.Context) pulumix.Output[EventHubCaptureDescription] {
	return pulumix.Output[EventHubCaptureDescription]{
		OutputState: o.OutputState,
	}
}

// A `destination` block as defined below.
func (o EventHubCaptureDescriptionOutput) Destination() EventHubCaptureDescriptionDestinationOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) EventHubCaptureDescriptionDestination { return v.Destination }).(EventHubCaptureDescriptionDestinationOutput)
}

// Specifies if the Capture Description is Enabled.
func (o EventHubCaptureDescriptionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
func (o EventHubCaptureDescriptionOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) string { return v.Encoding }).(pulumi.StringOutput)
}

// Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
func (o EventHubCaptureDescriptionOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000` bytes. Defaults to `314572800` bytes.
func (o EventHubCaptureDescriptionOutput) SizeLimitInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) *int { return v.SizeLimitInBytes }).(pulumi.IntPtrOutput)
}

// Specifies if empty files should not be emitted if no events occur during the Capture time window. Defaults to `false`.
func (o EventHubCaptureDescriptionOutput) SkipEmptyArchives() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) *bool { return v.SkipEmptyArchives }).(pulumi.BoolPtrOutput)
}

type EventHubCaptureDescriptionPtrOutput struct{ *pulumi.OutputState }

func (EventHubCaptureDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubCaptureDescription)(nil)).Elem()
}

func (o EventHubCaptureDescriptionPtrOutput) ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput {
	return o
}

func (o EventHubCaptureDescriptionPtrOutput) ToEventHubCaptureDescriptionPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionPtrOutput {
	return o
}

func (o EventHubCaptureDescriptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventHubCaptureDescription] {
	return pulumix.Output[*EventHubCaptureDescription]{
		OutputState: o.OutputState,
	}
}

func (o EventHubCaptureDescriptionPtrOutput) Elem() EventHubCaptureDescriptionOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) EventHubCaptureDescription {
		if v != nil {
			return *v
		}
		var ret EventHubCaptureDescription
		return ret
	}).(EventHubCaptureDescriptionOutput)
}

// A `destination` block as defined below.
func (o EventHubCaptureDescriptionPtrOutput) Destination() EventHubCaptureDescriptionDestinationPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) *EventHubCaptureDescriptionDestination {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(EventHubCaptureDescriptionDestinationPtrOutput)
}

// Specifies if the Capture Description is Enabled.
func (o EventHubCaptureDescriptionPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
func (o EventHubCaptureDescriptionPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) *string {
		if v == nil {
			return nil
		}
		return &v.Encoding
	}).(pulumi.StringPtrOutput)
}

// Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
func (o EventHubCaptureDescriptionPtrOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) *int {
		if v == nil {
			return nil
		}
		return v.IntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000` bytes. Defaults to `314572800` bytes.
func (o EventHubCaptureDescriptionPtrOutput) SizeLimitInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) *int {
		if v == nil {
			return nil
		}
		return v.SizeLimitInBytes
	}).(pulumi.IntPtrOutput)
}

// Specifies if empty files should not be emitted if no events occur during the Capture time window. Defaults to `false`.
func (o EventHubCaptureDescriptionPtrOutput) SkipEmptyArchives() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) *bool {
		if v == nil {
			return nil
		}
		return v.SkipEmptyArchives
	}).(pulumi.BoolPtrOutput)
}

type EventHubCaptureDescriptionDestination struct {
	// The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
	ArchiveNameFormat string `pulumi:"archiveNameFormat"`
	// The name of the Container within the Blob Storage Account where messages should be archived.
	BlobContainerName string `pulumi:"blobContainerName"`
	// The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
	//
	// > At this time it's only possible to Capture EventHub messages to Blob Storage. There's [a Feature Request for the Azure SDK to add support for Capturing messages to Azure Data Lake here](https://github.com/Azure/azure-rest-api-specs/issues/2255).
	Name string `pulumi:"name"`
	// The ID of the Blob Storage Account where messages should be archived.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// EventHubCaptureDescriptionDestinationInput is an input type that accepts EventHubCaptureDescriptionDestinationArgs and EventHubCaptureDescriptionDestinationOutput values.
// You can construct a concrete instance of `EventHubCaptureDescriptionDestinationInput` via:
//
//	EventHubCaptureDescriptionDestinationArgs{...}
type EventHubCaptureDescriptionDestinationInput interface {
	pulumi.Input

	ToEventHubCaptureDescriptionDestinationOutput() EventHubCaptureDescriptionDestinationOutput
	ToEventHubCaptureDescriptionDestinationOutputWithContext(context.Context) EventHubCaptureDescriptionDestinationOutput
}

type EventHubCaptureDescriptionDestinationArgs struct {
	// The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
	ArchiveNameFormat pulumi.StringInput `pulumi:"archiveNameFormat"`
	// The name of the Container within the Blob Storage Account where messages should be archived.
	BlobContainerName pulumi.StringInput `pulumi:"blobContainerName"`
	// The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
	//
	// > At this time it's only possible to Capture EventHub messages to Blob Storage. There's [a Feature Request for the Azure SDK to add support for Capturing messages to Azure Data Lake here](https://github.com/Azure/azure-rest-api-specs/issues/2255).
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the Blob Storage Account where messages should be archived.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (EventHubCaptureDescriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubCaptureDescriptionDestination)(nil)).Elem()
}

func (i EventHubCaptureDescriptionDestinationArgs) ToEventHubCaptureDescriptionDestinationOutput() EventHubCaptureDescriptionDestinationOutput {
	return i.ToEventHubCaptureDescriptionDestinationOutputWithContext(context.Background())
}

func (i EventHubCaptureDescriptionDestinationArgs) ToEventHubCaptureDescriptionDestinationOutputWithContext(ctx context.Context) EventHubCaptureDescriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionDestinationOutput)
}

func (i EventHubCaptureDescriptionDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[EventHubCaptureDescriptionDestination] {
	return pulumix.Output[EventHubCaptureDescriptionDestination]{
		OutputState: i.ToEventHubCaptureDescriptionDestinationOutputWithContext(ctx).OutputState,
	}
}

func (i EventHubCaptureDescriptionDestinationArgs) ToEventHubCaptureDescriptionDestinationPtrOutput() EventHubCaptureDescriptionDestinationPtrOutput {
	return i.ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(context.Background())
}

func (i EventHubCaptureDescriptionDestinationArgs) ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionDestinationOutput).ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(ctx)
}

// EventHubCaptureDescriptionDestinationPtrInput is an input type that accepts EventHubCaptureDescriptionDestinationArgs, EventHubCaptureDescriptionDestinationPtr and EventHubCaptureDescriptionDestinationPtrOutput values.
// You can construct a concrete instance of `EventHubCaptureDescriptionDestinationPtrInput` via:
//
//	        EventHubCaptureDescriptionDestinationArgs{...}
//
//	or:
//
//	        nil
type EventHubCaptureDescriptionDestinationPtrInput interface {
	pulumi.Input

	ToEventHubCaptureDescriptionDestinationPtrOutput() EventHubCaptureDescriptionDestinationPtrOutput
	ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(context.Context) EventHubCaptureDescriptionDestinationPtrOutput
}

type eventHubCaptureDescriptionDestinationPtrType EventHubCaptureDescriptionDestinationArgs

func EventHubCaptureDescriptionDestinationPtr(v *EventHubCaptureDescriptionDestinationArgs) EventHubCaptureDescriptionDestinationPtrInput {
	return (*eventHubCaptureDescriptionDestinationPtrType)(v)
}

func (*eventHubCaptureDescriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubCaptureDescriptionDestination)(nil)).Elem()
}

func (i *eventHubCaptureDescriptionDestinationPtrType) ToEventHubCaptureDescriptionDestinationPtrOutput() EventHubCaptureDescriptionDestinationPtrOutput {
	return i.ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *eventHubCaptureDescriptionDestinationPtrType) ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionDestinationPtrOutput)
}

func (i *eventHubCaptureDescriptionDestinationPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventHubCaptureDescriptionDestination] {
	return pulumix.Output[*EventHubCaptureDescriptionDestination]{
		OutputState: i.ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(ctx).OutputState,
	}
}

type EventHubCaptureDescriptionDestinationOutput struct{ *pulumi.OutputState }

func (EventHubCaptureDescriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubCaptureDescriptionDestination)(nil)).Elem()
}

func (o EventHubCaptureDescriptionDestinationOutput) ToEventHubCaptureDescriptionDestinationOutput() EventHubCaptureDescriptionDestinationOutput {
	return o
}

func (o EventHubCaptureDescriptionDestinationOutput) ToEventHubCaptureDescriptionDestinationOutputWithContext(ctx context.Context) EventHubCaptureDescriptionDestinationOutput {
	return o
}

func (o EventHubCaptureDescriptionDestinationOutput) ToEventHubCaptureDescriptionDestinationPtrOutput() EventHubCaptureDescriptionDestinationPtrOutput {
	return o.ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(context.Background())
}

func (o EventHubCaptureDescriptionDestinationOutput) ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventHubCaptureDescriptionDestination) *EventHubCaptureDescriptionDestination {
		return &v
	}).(EventHubCaptureDescriptionDestinationPtrOutput)
}

func (o EventHubCaptureDescriptionDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[EventHubCaptureDescriptionDestination] {
	return pulumix.Output[EventHubCaptureDescriptionDestination]{
		OutputState: o.OutputState,
	}
}

// The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
func (o EventHubCaptureDescriptionDestinationOutput) ArchiveNameFormat() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescriptionDestination) string { return v.ArchiveNameFormat }).(pulumi.StringOutput)
}

// The name of the Container within the Blob Storage Account where messages should be archived.
func (o EventHubCaptureDescriptionDestinationOutput) BlobContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescriptionDestination) string { return v.BlobContainerName }).(pulumi.StringOutput)
}

// The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
//
// > At this time it's only possible to Capture EventHub messages to Blob Storage. There's [a Feature Request for the Azure SDK to add support for Capturing messages to Azure Data Lake here](https://github.com/Azure/azure-rest-api-specs/issues/2255).
func (o EventHubCaptureDescriptionDestinationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescriptionDestination) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Blob Storage Account where messages should be archived.
func (o EventHubCaptureDescriptionDestinationOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescriptionDestination) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type EventHubCaptureDescriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (EventHubCaptureDescriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubCaptureDescriptionDestination)(nil)).Elem()
}

func (o EventHubCaptureDescriptionDestinationPtrOutput) ToEventHubCaptureDescriptionDestinationPtrOutput() EventHubCaptureDescriptionDestinationPtrOutput {
	return o
}

func (o EventHubCaptureDescriptionDestinationPtrOutput) ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionDestinationPtrOutput {
	return o
}

func (o EventHubCaptureDescriptionDestinationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventHubCaptureDescriptionDestination] {
	return pulumix.Output[*EventHubCaptureDescriptionDestination]{
		OutputState: o.OutputState,
	}
}

func (o EventHubCaptureDescriptionDestinationPtrOutput) Elem() EventHubCaptureDescriptionDestinationOutput {
	return o.ApplyT(func(v *EventHubCaptureDescriptionDestination) EventHubCaptureDescriptionDestination {
		if v != nil {
			return *v
		}
		var ret EventHubCaptureDescriptionDestination
		return ret
	}).(EventHubCaptureDescriptionDestinationOutput)
}

// The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
func (o EventHubCaptureDescriptionDestinationPtrOutput) ArchiveNameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.ArchiveNameFormat
	}).(pulumi.StringPtrOutput)
}

// The name of the Container within the Blob Storage Account where messages should be archived.
func (o EventHubCaptureDescriptionDestinationPtrOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.BlobContainerName
	}).(pulumi.StringPtrOutput)
}

// The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
//
// > At this time it's only possible to Capture EventHub messages to Blob Storage. There's [a Feature Request for the Azure SDK to add support for Capturing messages to Azure Data Lake here](https://github.com/Azure/azure-rest-api-specs/issues/2255).
func (o EventHubCaptureDescriptionDestinationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The ID of the Blob Storage Account where messages should be archived.
func (o EventHubCaptureDescriptionDestinationPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

type EventHubNamespaceIdentity struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this EventHub namespace.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	//
	// > **Note:** Due to the limitation of the current Azure API, once an EventHub Namespace has been assigned an identity, it cannot be removed.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Event Hub Namespace. Possible values are `SystemAssigned` or `UserAssigned`.
	Type string `pulumi:"type"`
}

// EventHubNamespaceIdentityInput is an input type that accepts EventHubNamespaceIdentityArgs and EventHubNamespaceIdentityOutput values.
// You can construct a concrete instance of `EventHubNamespaceIdentityInput` via:
//
//	EventHubNamespaceIdentityArgs{...}
type EventHubNamespaceIdentityInput interface {
	pulumi.Input

	ToEventHubNamespaceIdentityOutput() EventHubNamespaceIdentityOutput
	ToEventHubNamespaceIdentityOutputWithContext(context.Context) EventHubNamespaceIdentityOutput
}

type EventHubNamespaceIdentityArgs struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this EventHub namespace.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	//
	// > **Note:** Due to the limitation of the current Azure API, once an EventHub Namespace has been assigned an identity, it cannot be removed.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Event Hub Namespace. Possible values are `SystemAssigned` or `UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (EventHubNamespaceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceIdentity)(nil)).Elem()
}

func (i EventHubNamespaceIdentityArgs) ToEventHubNamespaceIdentityOutput() EventHubNamespaceIdentityOutput {
	return i.ToEventHubNamespaceIdentityOutputWithContext(context.Background())
}

func (i EventHubNamespaceIdentityArgs) ToEventHubNamespaceIdentityOutputWithContext(ctx context.Context) EventHubNamespaceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceIdentityOutput)
}

func (i EventHubNamespaceIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[EventHubNamespaceIdentity] {
	return pulumix.Output[EventHubNamespaceIdentity]{
		OutputState: i.ToEventHubNamespaceIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i EventHubNamespaceIdentityArgs) ToEventHubNamespaceIdentityPtrOutput() EventHubNamespaceIdentityPtrOutput {
	return i.ToEventHubNamespaceIdentityPtrOutputWithContext(context.Background())
}

func (i EventHubNamespaceIdentityArgs) ToEventHubNamespaceIdentityPtrOutputWithContext(ctx context.Context) EventHubNamespaceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceIdentityOutput).ToEventHubNamespaceIdentityPtrOutputWithContext(ctx)
}

// EventHubNamespaceIdentityPtrInput is an input type that accepts EventHubNamespaceIdentityArgs, EventHubNamespaceIdentityPtr and EventHubNamespaceIdentityPtrOutput values.
// You can construct a concrete instance of `EventHubNamespaceIdentityPtrInput` via:
//
//	        EventHubNamespaceIdentityArgs{...}
//
//	or:
//
//	        nil
type EventHubNamespaceIdentityPtrInput interface {
	pulumi.Input

	ToEventHubNamespaceIdentityPtrOutput() EventHubNamespaceIdentityPtrOutput
	ToEventHubNamespaceIdentityPtrOutputWithContext(context.Context) EventHubNamespaceIdentityPtrOutput
}

type eventHubNamespaceIdentityPtrType EventHubNamespaceIdentityArgs

func EventHubNamespaceIdentityPtr(v *EventHubNamespaceIdentityArgs) EventHubNamespaceIdentityPtrInput {
	return (*eventHubNamespaceIdentityPtrType)(v)
}

func (*eventHubNamespaceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubNamespaceIdentity)(nil)).Elem()
}

func (i *eventHubNamespaceIdentityPtrType) ToEventHubNamespaceIdentityPtrOutput() EventHubNamespaceIdentityPtrOutput {
	return i.ToEventHubNamespaceIdentityPtrOutputWithContext(context.Background())
}

func (i *eventHubNamespaceIdentityPtrType) ToEventHubNamespaceIdentityPtrOutputWithContext(ctx context.Context) EventHubNamespaceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceIdentityPtrOutput)
}

func (i *eventHubNamespaceIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventHubNamespaceIdentity] {
	return pulumix.Output[*EventHubNamespaceIdentity]{
		OutputState: i.ToEventHubNamespaceIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

type EventHubNamespaceIdentityOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceIdentity)(nil)).Elem()
}

func (o EventHubNamespaceIdentityOutput) ToEventHubNamespaceIdentityOutput() EventHubNamespaceIdentityOutput {
	return o
}

func (o EventHubNamespaceIdentityOutput) ToEventHubNamespaceIdentityOutputWithContext(ctx context.Context) EventHubNamespaceIdentityOutput {
	return o
}

func (o EventHubNamespaceIdentityOutput) ToEventHubNamespaceIdentityPtrOutput() EventHubNamespaceIdentityPtrOutput {
	return o.ToEventHubNamespaceIdentityPtrOutputWithContext(context.Background())
}

func (o EventHubNamespaceIdentityOutput) ToEventHubNamespaceIdentityPtrOutputWithContext(ctx context.Context) EventHubNamespaceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventHubNamespaceIdentity) *EventHubNamespaceIdentity {
		return &v
	}).(EventHubNamespaceIdentityPtrOutput)
}

func (o EventHubNamespaceIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[EventHubNamespaceIdentity] {
	return pulumix.Output[EventHubNamespaceIdentity]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this EventHub namespace.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
//
// > **Note:** Due to the limitation of the current Azure API, once an EventHub Namespace has been assigned an identity, it cannot be removed.
func (o EventHubNamespaceIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventHubNamespaceIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o EventHubNamespaceIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o EventHubNamespaceIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Event Hub Namespace. Possible values are `SystemAssigned` or `UserAssigned`.
func (o EventHubNamespaceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubNamespaceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type EventHubNamespaceIdentityPtrOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubNamespaceIdentity)(nil)).Elem()
}

func (o EventHubNamespaceIdentityPtrOutput) ToEventHubNamespaceIdentityPtrOutput() EventHubNamespaceIdentityPtrOutput {
	return o
}

func (o EventHubNamespaceIdentityPtrOutput) ToEventHubNamespaceIdentityPtrOutputWithContext(ctx context.Context) EventHubNamespaceIdentityPtrOutput {
	return o
}

func (o EventHubNamespaceIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventHubNamespaceIdentity] {
	return pulumix.Output[*EventHubNamespaceIdentity]{
		OutputState: o.OutputState,
	}
}

func (o EventHubNamespaceIdentityPtrOutput) Elem() EventHubNamespaceIdentityOutput {
	return o.ApplyT(func(v *EventHubNamespaceIdentity) EventHubNamespaceIdentity {
		if v != nil {
			return *v
		}
		var ret EventHubNamespaceIdentity
		return ret
	}).(EventHubNamespaceIdentityOutput)
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this EventHub namespace.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
//
// > **Note:** Due to the limitation of the current Azure API, once an EventHub Namespace has been assigned an identity, it cannot be removed.
func (o EventHubNamespaceIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventHubNamespaceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o EventHubNamespaceIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubNamespaceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o EventHubNamespaceIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubNamespaceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Event Hub Namespace. Possible values are `SystemAssigned` or `UserAssigned`.
func (o EventHubNamespaceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubNamespaceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type EventHubNamespaceNetworkRulesets struct {
	// The default action to take when a rule is not matched. Possible values are `Allow` and `Deny`.
	DefaultAction string `pulumi:"defaultAction"`
	// One or more `ipRule` blocks as defined below.
	IpRules []EventHubNamespaceNetworkRulesetsIpRule `pulumi:"ipRules"`
	// Is public network access enabled for the EventHub Namespace? Defaults to `true`.
	//
	// > **Note:** The public network access setting at the network rule sets level should be the same as it's at the namespace level.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// Whether Trusted Microsoft Services are allowed to bypass firewall.
	TrustedServiceAccessEnabled *bool `pulumi:"trustedServiceAccessEnabled"`
	// One or more `virtualNetworkRule` blocks as defined below.
	VirtualNetworkRules []EventHubNamespaceNetworkRulesetsVirtualNetworkRule `pulumi:"virtualNetworkRules"`
}

// EventHubNamespaceNetworkRulesetsInput is an input type that accepts EventHubNamespaceNetworkRulesetsArgs and EventHubNamespaceNetworkRulesetsOutput values.
// You can construct a concrete instance of `EventHubNamespaceNetworkRulesetsInput` via:
//
//	EventHubNamespaceNetworkRulesetsArgs{...}
type EventHubNamespaceNetworkRulesetsInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsOutput() EventHubNamespaceNetworkRulesetsOutput
	ToEventHubNamespaceNetworkRulesetsOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsOutput
}

type EventHubNamespaceNetworkRulesetsArgs struct {
	// The default action to take when a rule is not matched. Possible values are `Allow` and `Deny`.
	DefaultAction pulumi.StringInput `pulumi:"defaultAction"`
	// One or more `ipRule` blocks as defined below.
	IpRules EventHubNamespaceNetworkRulesetsIpRuleArrayInput `pulumi:"ipRules"`
	// Is public network access enabled for the EventHub Namespace? Defaults to `true`.
	//
	// > **Note:** The public network access setting at the network rule sets level should be the same as it's at the namespace level.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput `pulumi:"publicNetworkAccessEnabled"`
	// Whether Trusted Microsoft Services are allowed to bypass firewall.
	TrustedServiceAccessEnabled pulumi.BoolPtrInput `pulumi:"trustedServiceAccessEnabled"`
	// One or more `virtualNetworkRule` blocks as defined below.
	VirtualNetworkRules EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayInput `pulumi:"virtualNetworkRules"`
}

func (EventHubNamespaceNetworkRulesetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesets)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsArgs) ToEventHubNamespaceNetworkRulesetsOutput() EventHubNamespaceNetworkRulesetsOutput {
	return i.ToEventHubNamespaceNetworkRulesetsOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsArgs) ToEventHubNamespaceNetworkRulesetsOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsOutput)
}

func (i EventHubNamespaceNetworkRulesetsArgs) ToOutput(ctx context.Context) pulumix.Output[EventHubNamespaceNetworkRulesets] {
	return pulumix.Output[EventHubNamespaceNetworkRulesets]{
		OutputState: i.ToEventHubNamespaceNetworkRulesetsOutputWithContext(ctx).OutputState,
	}
}

func (i EventHubNamespaceNetworkRulesetsArgs) ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput {
	return i.ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsArgs) ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsOutput).ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx)
}

// EventHubNamespaceNetworkRulesetsPtrInput is an input type that accepts EventHubNamespaceNetworkRulesetsArgs, EventHubNamespaceNetworkRulesetsPtr and EventHubNamespaceNetworkRulesetsPtrOutput values.
// You can construct a concrete instance of `EventHubNamespaceNetworkRulesetsPtrInput` via:
//
//	        EventHubNamespaceNetworkRulesetsArgs{...}
//
//	or:
//
//	        nil
type EventHubNamespaceNetworkRulesetsPtrInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput
	ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsPtrOutput
}

type eventHubNamespaceNetworkRulesetsPtrType EventHubNamespaceNetworkRulesetsArgs

func EventHubNamespaceNetworkRulesetsPtr(v *EventHubNamespaceNetworkRulesetsArgs) EventHubNamespaceNetworkRulesetsPtrInput {
	return (*eventHubNamespaceNetworkRulesetsPtrType)(v)
}

func (*eventHubNamespaceNetworkRulesetsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubNamespaceNetworkRulesets)(nil)).Elem()
}

func (i *eventHubNamespaceNetworkRulesetsPtrType) ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput {
	return i.ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(context.Background())
}

func (i *eventHubNamespaceNetworkRulesetsPtrType) ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsPtrOutput)
}

func (i *eventHubNamespaceNetworkRulesetsPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventHubNamespaceNetworkRulesets] {
	return pulumix.Output[*EventHubNamespaceNetworkRulesets]{
		OutputState: i.ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx).OutputState,
	}
}

type EventHubNamespaceNetworkRulesetsOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesets)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsOutput) ToEventHubNamespaceNetworkRulesetsOutput() EventHubNamespaceNetworkRulesetsOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsOutput) ToEventHubNamespaceNetworkRulesetsOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsOutput) ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput {
	return o.ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(context.Background())
}

func (o EventHubNamespaceNetworkRulesetsOutput) ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventHubNamespaceNetworkRulesets) *EventHubNamespaceNetworkRulesets {
		return &v
	}).(EventHubNamespaceNetworkRulesetsPtrOutput)
}

func (o EventHubNamespaceNetworkRulesetsOutput) ToOutput(ctx context.Context) pulumix.Output[EventHubNamespaceNetworkRulesets] {
	return pulumix.Output[EventHubNamespaceNetworkRulesets]{
		OutputState: o.OutputState,
	}
}

// The default action to take when a rule is not matched. Possible values are `Allow` and `Deny`.
func (o EventHubNamespaceNetworkRulesetsOutput) DefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) string { return v.DefaultAction }).(pulumi.StringOutput)
}

// One or more `ipRule` blocks as defined below.
func (o EventHubNamespaceNetworkRulesetsOutput) IpRules() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) []EventHubNamespaceNetworkRulesetsIpRule { return v.IpRules }).(EventHubNamespaceNetworkRulesetsIpRuleArrayOutput)
}

// Is public network access enabled for the EventHub Namespace? Defaults to `true`.
//
// > **Note:** The public network access setting at the network rule sets level should be the same as it's at the namespace level.
func (o EventHubNamespaceNetworkRulesetsOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) *bool { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// Whether Trusted Microsoft Services are allowed to bypass firewall.
func (o EventHubNamespaceNetworkRulesetsOutput) TrustedServiceAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) *bool { return v.TrustedServiceAccessEnabled }).(pulumi.BoolPtrOutput)
}

// One or more `virtualNetworkRule` blocks as defined below.
func (o EventHubNamespaceNetworkRulesetsOutput) VirtualNetworkRules() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) []EventHubNamespaceNetworkRulesetsVirtualNetworkRule {
		return v.VirtualNetworkRules
	}).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput)
}

type EventHubNamespaceNetworkRulesetsPtrOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubNamespaceNetworkRulesets)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsPtrOutput) ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsPtrOutput) ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsPtrOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventHubNamespaceNetworkRulesets] {
	return pulumix.Output[*EventHubNamespaceNetworkRulesets]{
		OutputState: o.OutputState,
	}
}

func (o EventHubNamespaceNetworkRulesetsPtrOutput) Elem() EventHubNamespaceNetworkRulesetsOutput {
	return o.ApplyT(func(v *EventHubNamespaceNetworkRulesets) EventHubNamespaceNetworkRulesets {
		if v != nil {
			return *v
		}
		var ret EventHubNamespaceNetworkRulesets
		return ret
	}).(EventHubNamespaceNetworkRulesetsOutput)
}

// The default action to take when a rule is not matched. Possible values are `Allow` and `Deny`.
func (o EventHubNamespaceNetworkRulesetsPtrOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubNamespaceNetworkRulesets) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultAction
	}).(pulumi.StringPtrOutput)
}

// One or more `ipRule` blocks as defined below.
func (o EventHubNamespaceNetworkRulesetsPtrOutput) IpRules() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return o.ApplyT(func(v *EventHubNamespaceNetworkRulesets) []EventHubNamespaceNetworkRulesetsIpRule {
		if v == nil {
			return nil
		}
		return v.IpRules
	}).(EventHubNamespaceNetworkRulesetsIpRuleArrayOutput)
}

// Is public network access enabled for the EventHub Namespace? Defaults to `true`.
//
// > **Note:** The public network access setting at the network rule sets level should be the same as it's at the namespace level.
func (o EventHubNamespaceNetworkRulesetsPtrOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventHubNamespaceNetworkRulesets) *bool {
		if v == nil {
			return nil
		}
		return v.PublicNetworkAccessEnabled
	}).(pulumi.BoolPtrOutput)
}

// Whether Trusted Microsoft Services are allowed to bypass firewall.
func (o EventHubNamespaceNetworkRulesetsPtrOutput) TrustedServiceAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventHubNamespaceNetworkRulesets) *bool {
		if v == nil {
			return nil
		}
		return v.TrustedServiceAccessEnabled
	}).(pulumi.BoolPtrOutput)
}

// One or more `virtualNetworkRule` blocks as defined below.
func (o EventHubNamespaceNetworkRulesetsPtrOutput) VirtualNetworkRules() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return o.ApplyT(func(v *EventHubNamespaceNetworkRulesets) []EventHubNamespaceNetworkRulesetsVirtualNetworkRule {
		if v == nil {
			return nil
		}
		return v.VirtualNetworkRules
	}).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput)
}

type EventHubNamespaceNetworkRulesetsIpRule struct {
	// The action to take when the rule is matched. Possible values are `Allow`. Defaults to `Allow`.
	Action *string `pulumi:"action"`
	// The IP mask to match on.
	IpMask string `pulumi:"ipMask"`
}

// EventHubNamespaceNetworkRulesetsIpRuleInput is an input type that accepts EventHubNamespaceNetworkRulesetsIpRuleArgs and EventHubNamespaceNetworkRulesetsIpRuleOutput values.
// You can construct a concrete instance of `EventHubNamespaceNetworkRulesetsIpRuleInput` via:
//
//	EventHubNamespaceNetworkRulesetsIpRuleArgs{...}
type EventHubNamespaceNetworkRulesetsIpRuleInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsIpRuleOutput() EventHubNamespaceNetworkRulesetsIpRuleOutput
	ToEventHubNamespaceNetworkRulesetsIpRuleOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsIpRuleOutput
}

type EventHubNamespaceNetworkRulesetsIpRuleArgs struct {
	// The action to take when the rule is matched. Possible values are `Allow`. Defaults to `Allow`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// The IP mask to match on.
	IpMask pulumi.StringInput `pulumi:"ipMask"`
}

func (EventHubNamespaceNetworkRulesetsIpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesetsIpRule)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsIpRuleArgs) ToEventHubNamespaceNetworkRulesetsIpRuleOutput() EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return i.ToEventHubNamespaceNetworkRulesetsIpRuleOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsIpRuleArgs) ToEventHubNamespaceNetworkRulesetsIpRuleOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsIpRuleOutput)
}

func (i EventHubNamespaceNetworkRulesetsIpRuleArgs) ToOutput(ctx context.Context) pulumix.Output[EventHubNamespaceNetworkRulesetsIpRule] {
	return pulumix.Output[EventHubNamespaceNetworkRulesetsIpRule]{
		OutputState: i.ToEventHubNamespaceNetworkRulesetsIpRuleOutputWithContext(ctx).OutputState,
	}
}

// EventHubNamespaceNetworkRulesetsIpRuleArrayInput is an input type that accepts EventHubNamespaceNetworkRulesetsIpRuleArray and EventHubNamespaceNetworkRulesetsIpRuleArrayOutput values.
// You can construct a concrete instance of `EventHubNamespaceNetworkRulesetsIpRuleArrayInput` via:
//
//	EventHubNamespaceNetworkRulesetsIpRuleArray{ EventHubNamespaceNetworkRulesetsIpRuleArgs{...} }
type EventHubNamespaceNetworkRulesetsIpRuleArrayInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutput() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput
	ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsIpRuleArrayOutput
}

type EventHubNamespaceNetworkRulesetsIpRuleArray []EventHubNamespaceNetworkRulesetsIpRuleInput

func (EventHubNamespaceNetworkRulesetsIpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubNamespaceNetworkRulesetsIpRule)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsIpRuleArray) ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutput() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return i.ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsIpRuleArray) ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsIpRuleArrayOutput)
}

func (i EventHubNamespaceNetworkRulesetsIpRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]EventHubNamespaceNetworkRulesetsIpRule] {
	return pulumix.Output[[]EventHubNamespaceNetworkRulesetsIpRule]{
		OutputState: i.ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type EventHubNamespaceNetworkRulesetsIpRuleOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsIpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesetsIpRule)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsIpRuleOutput) ToEventHubNamespaceNetworkRulesetsIpRuleOutput() EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsIpRuleOutput) ToEventHubNamespaceNetworkRulesetsIpRuleOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsIpRuleOutput) ToOutput(ctx context.Context) pulumix.Output[EventHubNamespaceNetworkRulesetsIpRule] {
	return pulumix.Output[EventHubNamespaceNetworkRulesetsIpRule]{
		OutputState: o.OutputState,
	}
}

// The action to take when the rule is matched. Possible values are `Allow`. Defaults to `Allow`.
func (o EventHubNamespaceNetworkRulesetsIpRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesetsIpRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The IP mask to match on.
func (o EventHubNamespaceNetworkRulesetsIpRuleOutput) IpMask() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesetsIpRule) string { return v.IpMask }).(pulumi.StringOutput)
}

type EventHubNamespaceNetworkRulesetsIpRuleArrayOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsIpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubNamespaceNetworkRulesetsIpRule)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsIpRuleArrayOutput) ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutput() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsIpRuleArrayOutput) ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsIpRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventHubNamespaceNetworkRulesetsIpRule] {
	return pulumix.Output[[]EventHubNamespaceNetworkRulesetsIpRule]{
		OutputState: o.OutputState,
	}
}

func (o EventHubNamespaceNetworkRulesetsIpRuleArrayOutput) Index(i pulumi.IntInput) EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubNamespaceNetworkRulesetsIpRule {
		return vs[0].([]EventHubNamespaceNetworkRulesetsIpRule)[vs[1].(int)]
	}).(EventHubNamespaceNetworkRulesetsIpRuleOutput)
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRule struct {
	// Are missing virtual network service endpoints ignored?
	IgnoreMissingVirtualNetworkServiceEndpoint *bool `pulumi:"ignoreMissingVirtualNetworkServiceEndpoint"`
	// The id of the subnet to match on.
	SubnetId string `pulumi:"subnetId"`
}

// EventHubNamespaceNetworkRulesetsVirtualNetworkRuleInput is an input type that accepts EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs and EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput values.
// You can construct a concrete instance of `EventHubNamespaceNetworkRulesetsVirtualNetworkRuleInput` via:
//
//	EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs{...}
type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput
	ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs struct {
	// Are missing virtual network service endpoints ignored?
	IgnoreMissingVirtualNetworkServiceEndpoint pulumi.BoolPtrInput `pulumi:"ignoreMissingVirtualNetworkServiceEndpoint"`
	// The id of the subnet to match on.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesetsVirtualNetworkRule)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return i.ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput)
}

func (i EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs) ToOutput(ctx context.Context) pulumix.Output[EventHubNamespaceNetworkRulesetsVirtualNetworkRule] {
	return pulumix.Output[EventHubNamespaceNetworkRulesetsVirtualNetworkRule]{
		OutputState: i.ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutputWithContext(ctx).OutputState,
	}
}

// EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayInput is an input type that accepts EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray and EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput values.
// You can construct a concrete instance of `EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayInput` via:
//
//	EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray{ EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs{...} }
type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput
	ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray []EventHubNamespaceNetworkRulesetsVirtualNetworkRuleInput

func (EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubNamespaceNetworkRulesetsVirtualNetworkRule)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return i.ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput)
}

func (i EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]EventHubNamespaceNetworkRulesetsVirtualNetworkRule] {
	return pulumix.Output[[]EventHubNamespaceNetworkRulesetsVirtualNetworkRule]{
		OutputState: i.ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesetsVirtualNetworkRule)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) ToOutput(ctx context.Context) pulumix.Output[EventHubNamespaceNetworkRulesetsVirtualNetworkRule] {
	return pulumix.Output[EventHubNamespaceNetworkRulesetsVirtualNetworkRule]{
		OutputState: o.OutputState,
	}
}

// Are missing virtual network service endpoints ignored?
func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) IgnoreMissingVirtualNetworkServiceEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesetsVirtualNetworkRule) *bool {
		return v.IgnoreMissingVirtualNetworkServiceEndpoint
	}).(pulumi.BoolPtrOutput)
}

// The id of the subnet to match on.
func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesetsVirtualNetworkRule) string { return v.SubnetId }).(pulumi.StringOutput)
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubNamespaceNetworkRulesetsVirtualNetworkRule)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventHubNamespaceNetworkRulesetsVirtualNetworkRule] {
	return pulumix.Output[[]EventHubNamespaceNetworkRulesetsVirtualNetworkRule]{
		OutputState: o.OutputState,
	}
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput) Index(i pulumi.IntInput) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubNamespaceNetworkRulesetsVirtualNetworkRule {
		return vs[0].([]EventHubNamespaceNetworkRulesetsVirtualNetworkRule)[vs[1].(int)]
	}).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput)
}

type EventSubscriptionAdvancedFilter struct {
	// Compares a value of an event using a single boolean value.
	BoolEquals []EventSubscriptionAdvancedFilterBoolEqual `pulumi:"boolEquals"`
	// Evaluates if a value of an event isn't NULL or undefined.
	IsNotNulls []EventSubscriptionAdvancedFilterIsNotNull `pulumi:"isNotNulls"`
	// Evaluates if a value of an event is NULL or undefined.
	//
	// Each nested block consists of a key and a value(s) element.
	IsNullOrUndefineds []EventSubscriptionAdvancedFilterIsNullOrUndefined `pulumi:"isNullOrUndefineds"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThanOrEquals []EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual `pulumi:"numberGreaterThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThans []EventSubscriptionAdvancedFilterNumberGreaterThan `pulumi:"numberGreaterThans"`
	// Compares a value of an event using multiple floating point number ranges.
	NumberInRanges []EventSubscriptionAdvancedFilterNumberInRange `pulumi:"numberInRanges"`
	// Compares a value of an event using multiple floating point numbers.
	NumberIns []EventSubscriptionAdvancedFilterNumberIn `pulumi:"numberIns"`
	// Compares a value of an event using a single floating point number.
	NumberLessThanOrEquals []EventSubscriptionAdvancedFilterNumberLessThanOrEqual `pulumi:"numberLessThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberLessThans []EventSubscriptionAdvancedFilterNumberLessThan `pulumi:"numberLessThans"`
	// Compares a value of an event using multiple floating point number ranges.
	NumberNotInRanges []EventSubscriptionAdvancedFilterNumberNotInRange `pulumi:"numberNotInRanges"`
	// Compares a value of an event using multiple floating point numbers.
	NumberNotIns []EventSubscriptionAdvancedFilterNumberNotIn `pulumi:"numberNotIns"`
	// Compares a value of an event using multiple string values.
	StringBeginsWiths []EventSubscriptionAdvancedFilterStringBeginsWith `pulumi:"stringBeginsWiths"`
	// Compares a value of an event using multiple string values.
	StringContains []EventSubscriptionAdvancedFilterStringContain `pulumi:"stringContains"`
	// Compares a value of an event using multiple string values.
	StringEndsWiths []EventSubscriptionAdvancedFilterStringEndsWith `pulumi:"stringEndsWiths"`
	// Compares a value of an event using multiple string values.
	StringIns []EventSubscriptionAdvancedFilterStringIn `pulumi:"stringIns"`
	// Compares a value of an event using multiple string values.
	StringNotBeginsWiths []EventSubscriptionAdvancedFilterStringNotBeginsWith `pulumi:"stringNotBeginsWiths"`
	// Compares a value of an event using multiple string values.
	StringNotContains []EventSubscriptionAdvancedFilterStringNotContain `pulumi:"stringNotContains"`
	// Compares a value of an event using multiple string values.
	StringNotEndsWiths []EventSubscriptionAdvancedFilterStringNotEndsWith `pulumi:"stringNotEndsWiths"`
	// Compares a value of an event using multiple string values.
	StringNotIns []EventSubscriptionAdvancedFilterStringNotIn `pulumi:"stringNotIns"`
}

// EventSubscriptionAdvancedFilterInput is an input type that accepts EventSubscriptionAdvancedFilterArgs and EventSubscriptionAdvancedFilterOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterInput` via:
//
//	EventSubscriptionAdvancedFilterArgs{...}
type EventSubscriptionAdvancedFilterInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterOutput() EventSubscriptionAdvancedFilterOutput
	ToEventSubscriptionAdvancedFilterOutputWithContext(context.Context) EventSubscriptionAdvancedFilterOutput
}

type EventSubscriptionAdvancedFilterArgs struct {
	// Compares a value of an event using a single boolean value.
	BoolEquals EventSubscriptionAdvancedFilterBoolEqualArrayInput `pulumi:"boolEquals"`
	// Evaluates if a value of an event isn't NULL or undefined.
	IsNotNulls EventSubscriptionAdvancedFilterIsNotNullArrayInput `pulumi:"isNotNulls"`
	// Evaluates if a value of an event is NULL or undefined.
	//
	// Each nested block consists of a key and a value(s) element.
	IsNullOrUndefineds EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayInput `pulumi:"isNullOrUndefineds"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThanOrEquals EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput `pulumi:"numberGreaterThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThans EventSubscriptionAdvancedFilterNumberGreaterThanArrayInput `pulumi:"numberGreaterThans"`
	// Compares a value of an event using multiple floating point number ranges.
	NumberInRanges EventSubscriptionAdvancedFilterNumberInRangeArrayInput `pulumi:"numberInRanges"`
	// Compares a value of an event using multiple floating point numbers.
	NumberIns EventSubscriptionAdvancedFilterNumberInArrayInput `pulumi:"numberIns"`
	// Compares a value of an event using a single floating point number.
	NumberLessThanOrEquals EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput `pulumi:"numberLessThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberLessThans EventSubscriptionAdvancedFilterNumberLessThanArrayInput `pulumi:"numberLessThans"`
	// Compares a value of an event using multiple floating point number ranges.
	NumberNotInRanges EventSubscriptionAdvancedFilterNumberNotInRangeArrayInput `pulumi:"numberNotInRanges"`
	// Compares a value of an event using multiple floating point numbers.
	NumberNotIns EventSubscriptionAdvancedFilterNumberNotInArrayInput `pulumi:"numberNotIns"`
	// Compares a value of an event using multiple string values.
	StringBeginsWiths EventSubscriptionAdvancedFilterStringBeginsWithArrayInput `pulumi:"stringBeginsWiths"`
	// Compares a value of an event using multiple string values.
	StringContains EventSubscriptionAdvancedFilterStringContainArrayInput `pulumi:"stringContains"`
	// Compares a value of an event using multiple string values.
	StringEndsWiths EventSubscriptionAdvancedFilterStringEndsWithArrayInput `pulumi:"stringEndsWiths"`
	// Compares a value of an event using multiple string values.
	StringIns EventSubscriptionAdvancedFilterStringInArrayInput `pulumi:"stringIns"`
	// Compares a value of an event using multiple string values.
	StringNotBeginsWiths EventSubscriptionAdvancedFilterStringNotBeginsWithArrayInput `pulumi:"stringNotBeginsWiths"`
	// Compares a value of an event using multiple string values.
	StringNotContains EventSubscriptionAdvancedFilterStringNotContainArrayInput `pulumi:"stringNotContains"`
	// Compares a value of an event using multiple string values.
	StringNotEndsWiths EventSubscriptionAdvancedFilterStringNotEndsWithArrayInput `pulumi:"stringNotEndsWiths"`
	// Compares a value of an event using multiple string values.
	StringNotIns EventSubscriptionAdvancedFilterStringNotInArrayInput `pulumi:"stringNotIns"`
}

func (EventSubscriptionAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterArgs) ToEventSubscriptionAdvancedFilterOutput() EventSubscriptionAdvancedFilterOutput {
	return i.ToEventSubscriptionAdvancedFilterOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterArgs) ToEventSubscriptionAdvancedFilterOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterOutput)
}

func (i EventSubscriptionAdvancedFilterArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilter] {
	return pulumix.Output[EventSubscriptionAdvancedFilter]{
		OutputState: i.ToEventSubscriptionAdvancedFilterOutputWithContext(ctx).OutputState,
	}
}

func (i EventSubscriptionAdvancedFilterArgs) ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput {
	return i.ToEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterArgs) ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterOutput).ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx)
}

// EventSubscriptionAdvancedFilterPtrInput is an input type that accepts EventSubscriptionAdvancedFilterArgs, EventSubscriptionAdvancedFilterPtr and EventSubscriptionAdvancedFilterPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterPtrInput` via:
//
//	        EventSubscriptionAdvancedFilterArgs{...}
//
//	or:
//
//	        nil
type EventSubscriptionAdvancedFilterPtrInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput
	ToEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Context) EventSubscriptionAdvancedFilterPtrOutput
}

type eventSubscriptionAdvancedFilterPtrType EventSubscriptionAdvancedFilterArgs

func EventSubscriptionAdvancedFilterPtr(v *EventSubscriptionAdvancedFilterArgs) EventSubscriptionAdvancedFilterPtrInput {
	return (*eventSubscriptionAdvancedFilterPtrType)(v)
}

func (*eventSubscriptionAdvancedFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (i *eventSubscriptionAdvancedFilterPtrType) ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput {
	return i.ToEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionAdvancedFilterPtrType) ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterPtrOutput)
}

func (i *eventSubscriptionAdvancedFilterPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionAdvancedFilter] {
	return pulumix.Output[*EventSubscriptionAdvancedFilter]{
		OutputState: i.ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterOutput) ToEventSubscriptionAdvancedFilterOutput() EventSubscriptionAdvancedFilterOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterOutput) ToEventSubscriptionAdvancedFilterOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterOutput) ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput {
	return o.ToEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionAdvancedFilterOutput) ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSubscriptionAdvancedFilter) *EventSubscriptionAdvancedFilter {
		return &v
	}).(EventSubscriptionAdvancedFilterPtrOutput)
}

func (o EventSubscriptionAdvancedFilterOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilter] {
	return pulumix.Output[EventSubscriptionAdvancedFilter]{
		OutputState: o.OutputState,
	}
}

// Compares a value of an event using a single boolean value.
func (o EventSubscriptionAdvancedFilterOutput) BoolEquals() EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterBoolEqual {
		return v.BoolEquals
	}).(EventSubscriptionAdvancedFilterBoolEqualArrayOutput)
}

// Evaluates if a value of an event isn't NULL or undefined.
func (o EventSubscriptionAdvancedFilterOutput) IsNotNulls() EventSubscriptionAdvancedFilterIsNotNullArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterIsNotNull {
		return v.IsNotNulls
	}).(EventSubscriptionAdvancedFilterIsNotNullArrayOutput)
}

// Evaluates if a value of an event is NULL or undefined.
//
// Each nested block consists of a key and a value(s) element.
func (o EventSubscriptionAdvancedFilterOutput) IsNullOrUndefineds() EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterIsNullOrUndefined {
		return v.IsNullOrUndefineds
	}).(EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterOutput) NumberGreaterThanOrEquals() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual {
		return v.NumberGreaterThanOrEquals
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterOutput) NumberGreaterThans() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberGreaterThan {
		return v.NumberGreaterThans
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput)
}

// Compares a value of an event using multiple floating point number ranges.
func (o EventSubscriptionAdvancedFilterOutput) NumberInRanges() EventSubscriptionAdvancedFilterNumberInRangeArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberInRange {
		return v.NumberInRanges
	}).(EventSubscriptionAdvancedFilterNumberInRangeArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o EventSubscriptionAdvancedFilterOutput) NumberIns() EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberIn { return v.NumberIns }).(EventSubscriptionAdvancedFilterNumberInArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterOutput) NumberLessThanOrEquals() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberLessThanOrEqual {
		return v.NumberLessThanOrEquals
	}).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterOutput) NumberLessThans() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberLessThan {
		return v.NumberLessThans
	}).(EventSubscriptionAdvancedFilterNumberLessThanArrayOutput)
}

// Compares a value of an event using multiple floating point number ranges.
func (o EventSubscriptionAdvancedFilterOutput) NumberNotInRanges() EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberNotInRange {
		return v.NumberNotInRanges
	}).(EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o EventSubscriptionAdvancedFilterOutput) NumberNotIns() EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberNotIn {
		return v.NumberNotIns
	}).(EventSubscriptionAdvancedFilterNumberNotInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringBeginsWiths() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringBeginsWith {
		return v.StringBeginsWiths
	}).(EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringContains() EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringContain {
		return v.StringContains
	}).(EventSubscriptionAdvancedFilterStringContainArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringEndsWiths() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringEndsWith {
		return v.StringEndsWiths
	}).(EventSubscriptionAdvancedFilterStringEndsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringIns() EventSubscriptionAdvancedFilterStringInArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringIn { return v.StringIns }).(EventSubscriptionAdvancedFilterStringInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringNotBeginsWiths() EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringNotBeginsWith {
		return v.StringNotBeginsWiths
	}).(EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringNotContains() EventSubscriptionAdvancedFilterStringNotContainArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringNotContain {
		return v.StringNotContains
	}).(EventSubscriptionAdvancedFilterStringNotContainArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringNotEndsWiths() EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringNotEndsWith {
		return v.StringNotEndsWiths
	}).(EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringNotIns() EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringNotIn {
		return v.StringNotIns
	}).(EventSubscriptionAdvancedFilterStringNotInArrayOutput)
}

type EventSubscriptionAdvancedFilterPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterPtrOutput) ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterPtrOutput) ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterPtrOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionAdvancedFilter] {
	return pulumix.Output[*EventSubscriptionAdvancedFilter]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterPtrOutput) Elem() EventSubscriptionAdvancedFilterOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) EventSubscriptionAdvancedFilter {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionAdvancedFilter
		return ret
	}).(EventSubscriptionAdvancedFilterOutput)
}

// Compares a value of an event using a single boolean value.
func (o EventSubscriptionAdvancedFilterPtrOutput) BoolEquals() EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterBoolEqual {
		if v == nil {
			return nil
		}
		return v.BoolEquals
	}).(EventSubscriptionAdvancedFilterBoolEqualArrayOutput)
}

// Evaluates if a value of an event isn't NULL or undefined.
func (o EventSubscriptionAdvancedFilterPtrOutput) IsNotNulls() EventSubscriptionAdvancedFilterIsNotNullArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterIsNotNull {
		if v == nil {
			return nil
		}
		return v.IsNotNulls
	}).(EventSubscriptionAdvancedFilterIsNotNullArrayOutput)
}

// Evaluates if a value of an event is NULL or undefined.
//
// Each nested block consists of a key and a value(s) element.
func (o EventSubscriptionAdvancedFilterPtrOutput) IsNullOrUndefineds() EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterIsNullOrUndefined {
		if v == nil {
			return nil
		}
		return v.IsNullOrUndefineds
	}).(EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberGreaterThanOrEquals() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual {
		if v == nil {
			return nil
		}
		return v.NumberGreaterThanOrEquals
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberGreaterThans() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberGreaterThan {
		if v == nil {
			return nil
		}
		return v.NumberGreaterThans
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput)
}

// Compares a value of an event using multiple floating point number ranges.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberInRanges() EventSubscriptionAdvancedFilterNumberInRangeArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberInRange {
		if v == nil {
			return nil
		}
		return v.NumberInRanges
	}).(EventSubscriptionAdvancedFilterNumberInRangeArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberIns() EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberIn {
		if v == nil {
			return nil
		}
		return v.NumberIns
	}).(EventSubscriptionAdvancedFilterNumberInArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberLessThanOrEquals() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberLessThanOrEqual {
		if v == nil {
			return nil
		}
		return v.NumberLessThanOrEquals
	}).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberLessThans() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberLessThan {
		if v == nil {
			return nil
		}
		return v.NumberLessThans
	}).(EventSubscriptionAdvancedFilterNumberLessThanArrayOutput)
}

// Compares a value of an event using multiple floating point number ranges.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberNotInRanges() EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberNotInRange {
		if v == nil {
			return nil
		}
		return v.NumberNotInRanges
	}).(EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberNotIns() EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberNotIn {
		if v == nil {
			return nil
		}
		return v.NumberNotIns
	}).(EventSubscriptionAdvancedFilterNumberNotInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringBeginsWiths() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringBeginsWith {
		if v == nil {
			return nil
		}
		return v.StringBeginsWiths
	}).(EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringContains() EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringContain {
		if v == nil {
			return nil
		}
		return v.StringContains
	}).(EventSubscriptionAdvancedFilterStringContainArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringEndsWiths() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringEndsWith {
		if v == nil {
			return nil
		}
		return v.StringEndsWiths
	}).(EventSubscriptionAdvancedFilterStringEndsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringIns() EventSubscriptionAdvancedFilterStringInArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringIn {
		if v == nil {
			return nil
		}
		return v.StringIns
	}).(EventSubscriptionAdvancedFilterStringInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringNotBeginsWiths() EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringNotBeginsWith {
		if v == nil {
			return nil
		}
		return v.StringNotBeginsWiths
	}).(EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringNotContains() EventSubscriptionAdvancedFilterStringNotContainArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringNotContain {
		if v == nil {
			return nil
		}
		return v.StringNotContains
	}).(EventSubscriptionAdvancedFilterStringNotContainArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringNotEndsWiths() EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringNotEndsWith {
		if v == nil {
			return nil
		}
		return v.StringNotEndsWiths
	}).(EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringNotIns() EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringNotIn {
		if v == nil {
			return nil
		}
		return v.StringNotIns
	}).(EventSubscriptionAdvancedFilterStringNotInArrayOutput)
}

type EventSubscriptionAdvancedFilterBoolEqual struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	//
	// OR
	Value bool `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterBoolEqualInput is an input type that accepts EventSubscriptionAdvancedFilterBoolEqualArgs and EventSubscriptionAdvancedFilterBoolEqualOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterBoolEqualInput` via:
//
//	EventSubscriptionAdvancedFilterBoolEqualArgs{...}
type EventSubscriptionAdvancedFilterBoolEqualInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterBoolEqualOutput() EventSubscriptionAdvancedFilterBoolEqualOutput
	ToEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(context.Context) EventSubscriptionAdvancedFilterBoolEqualOutput
}

type EventSubscriptionAdvancedFilterBoolEqualArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	//
	// OR
	Value pulumi.BoolInput `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterBoolEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterBoolEqualArgs) ToEventSubscriptionAdvancedFilterBoolEqualOutput() EventSubscriptionAdvancedFilterBoolEqualOutput {
	return i.ToEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterBoolEqualArgs) ToEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterBoolEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterBoolEqualOutput)
}

func (i EventSubscriptionAdvancedFilterBoolEqualArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterBoolEqual] {
	return pulumix.Output[EventSubscriptionAdvancedFilterBoolEqual]{
		OutputState: i.ToEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterBoolEqualArrayInput is an input type that accepts EventSubscriptionAdvancedFilterBoolEqualArray and EventSubscriptionAdvancedFilterBoolEqualArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterBoolEqualArrayInput` via:
//
//	EventSubscriptionAdvancedFilterBoolEqualArray{ EventSubscriptionAdvancedFilterBoolEqualArgs{...} }
type EventSubscriptionAdvancedFilterBoolEqualArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterBoolEqualArrayOutput() EventSubscriptionAdvancedFilterBoolEqualArrayOutput
	ToEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterBoolEqualArrayOutput
}

type EventSubscriptionAdvancedFilterBoolEqualArray []EventSubscriptionAdvancedFilterBoolEqualInput

func (EventSubscriptionAdvancedFilterBoolEqualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterBoolEqualArray) ToEventSubscriptionAdvancedFilterBoolEqualArrayOutput() EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterBoolEqualArray) ToEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterBoolEqualArrayOutput)
}

func (i EventSubscriptionAdvancedFilterBoolEqualArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterBoolEqual] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterBoolEqual]{
		OutputState: i.ToEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterBoolEqualOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterBoolEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterBoolEqualOutput) ToEventSubscriptionAdvancedFilterBoolEqualOutput() EventSubscriptionAdvancedFilterBoolEqualOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterBoolEqualOutput) ToEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterBoolEqualOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterBoolEqualOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterBoolEqual] {
	return pulumix.Output[EventSubscriptionAdvancedFilterBoolEqual]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterBoolEqualOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterBoolEqual) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
//
// OR
func (o EventSubscriptionAdvancedFilterBoolEqualOutput) Value() pulumi.BoolOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterBoolEqual) bool { return v.Value }).(pulumi.BoolOutput)
}

type EventSubscriptionAdvancedFilterBoolEqualArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterBoolEqualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterBoolEqualArrayOutput) ToEventSubscriptionAdvancedFilterBoolEqualArrayOutput() EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterBoolEqualArrayOutput) ToEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterBoolEqualArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterBoolEqual] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterBoolEqual]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterBoolEqualArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterBoolEqualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterBoolEqual {
		return vs[0].([]EventSubscriptionAdvancedFilterBoolEqual)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterBoolEqualOutput)
}

type EventSubscriptionAdvancedFilterIsNotNull struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
}

// EventSubscriptionAdvancedFilterIsNotNullInput is an input type that accepts EventSubscriptionAdvancedFilterIsNotNullArgs and EventSubscriptionAdvancedFilterIsNotNullOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterIsNotNullInput` via:
//
//	EventSubscriptionAdvancedFilterIsNotNullArgs{...}
type EventSubscriptionAdvancedFilterIsNotNullInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterIsNotNullOutput() EventSubscriptionAdvancedFilterIsNotNullOutput
	ToEventSubscriptionAdvancedFilterIsNotNullOutputWithContext(context.Context) EventSubscriptionAdvancedFilterIsNotNullOutput
}

type EventSubscriptionAdvancedFilterIsNotNullArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
}

func (EventSubscriptionAdvancedFilterIsNotNullArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterIsNotNull)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterIsNotNullArgs) ToEventSubscriptionAdvancedFilterIsNotNullOutput() EventSubscriptionAdvancedFilterIsNotNullOutput {
	return i.ToEventSubscriptionAdvancedFilterIsNotNullOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterIsNotNullArgs) ToEventSubscriptionAdvancedFilterIsNotNullOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterIsNotNullOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterIsNotNullOutput)
}

func (i EventSubscriptionAdvancedFilterIsNotNullArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterIsNotNull] {
	return pulumix.Output[EventSubscriptionAdvancedFilterIsNotNull]{
		OutputState: i.ToEventSubscriptionAdvancedFilterIsNotNullOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterIsNotNullArrayInput is an input type that accepts EventSubscriptionAdvancedFilterIsNotNullArray and EventSubscriptionAdvancedFilterIsNotNullArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterIsNotNullArrayInput` via:
//
//	EventSubscriptionAdvancedFilterIsNotNullArray{ EventSubscriptionAdvancedFilterIsNotNullArgs{...} }
type EventSubscriptionAdvancedFilterIsNotNullArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterIsNotNullArrayOutput() EventSubscriptionAdvancedFilterIsNotNullArrayOutput
	ToEventSubscriptionAdvancedFilterIsNotNullArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterIsNotNullArrayOutput
}

type EventSubscriptionAdvancedFilterIsNotNullArray []EventSubscriptionAdvancedFilterIsNotNullInput

func (EventSubscriptionAdvancedFilterIsNotNullArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterIsNotNull)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterIsNotNullArray) ToEventSubscriptionAdvancedFilterIsNotNullArrayOutput() EventSubscriptionAdvancedFilterIsNotNullArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterIsNotNullArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterIsNotNullArray) ToEventSubscriptionAdvancedFilterIsNotNullArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterIsNotNullArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterIsNotNullArrayOutput)
}

func (i EventSubscriptionAdvancedFilterIsNotNullArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterIsNotNull] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterIsNotNull]{
		OutputState: i.ToEventSubscriptionAdvancedFilterIsNotNullArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterIsNotNullOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterIsNotNullOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterIsNotNull)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterIsNotNullOutput) ToEventSubscriptionAdvancedFilterIsNotNullOutput() EventSubscriptionAdvancedFilterIsNotNullOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterIsNotNullOutput) ToEventSubscriptionAdvancedFilterIsNotNullOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterIsNotNullOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterIsNotNullOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterIsNotNull] {
	return pulumix.Output[EventSubscriptionAdvancedFilterIsNotNull]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterIsNotNullOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterIsNotNull) string { return v.Key }).(pulumi.StringOutput)
}

type EventSubscriptionAdvancedFilterIsNotNullArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterIsNotNullArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterIsNotNull)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterIsNotNullArrayOutput) ToEventSubscriptionAdvancedFilterIsNotNullArrayOutput() EventSubscriptionAdvancedFilterIsNotNullArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterIsNotNullArrayOutput) ToEventSubscriptionAdvancedFilterIsNotNullArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterIsNotNullArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterIsNotNullArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterIsNotNull] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterIsNotNull]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterIsNotNullArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterIsNotNullOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterIsNotNull {
		return vs[0].([]EventSubscriptionAdvancedFilterIsNotNull)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterIsNotNullOutput)
}

type EventSubscriptionAdvancedFilterIsNullOrUndefined struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
}

// EventSubscriptionAdvancedFilterIsNullOrUndefinedInput is an input type that accepts EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs and EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterIsNullOrUndefinedInput` via:
//
//	EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs{...}
type EventSubscriptionAdvancedFilterIsNullOrUndefinedInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterIsNullOrUndefinedOutput() EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput
	ToEventSubscriptionAdvancedFilterIsNullOrUndefinedOutputWithContext(context.Context) EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput
}

type EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
}

func (EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterIsNullOrUndefined)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs) ToEventSubscriptionAdvancedFilterIsNullOrUndefinedOutput() EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput {
	return i.ToEventSubscriptionAdvancedFilterIsNullOrUndefinedOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs) ToEventSubscriptionAdvancedFilterIsNullOrUndefinedOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput)
}

func (i EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterIsNullOrUndefined] {
	return pulumix.Output[EventSubscriptionAdvancedFilterIsNullOrUndefined]{
		OutputState: i.ToEventSubscriptionAdvancedFilterIsNullOrUndefinedOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayInput is an input type that accepts EventSubscriptionAdvancedFilterIsNullOrUndefinedArray and EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayInput` via:
//
//	EventSubscriptionAdvancedFilterIsNullOrUndefinedArray{ EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs{...} }
type EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput() EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput
	ToEventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput
}

type EventSubscriptionAdvancedFilterIsNullOrUndefinedArray []EventSubscriptionAdvancedFilterIsNullOrUndefinedInput

func (EventSubscriptionAdvancedFilterIsNullOrUndefinedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterIsNullOrUndefined)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterIsNullOrUndefinedArray) ToEventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput() EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterIsNullOrUndefinedArray) ToEventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput)
}

func (i EventSubscriptionAdvancedFilterIsNullOrUndefinedArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterIsNullOrUndefined] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterIsNullOrUndefined]{
		OutputState: i.ToEventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterIsNullOrUndefined)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput) ToEventSubscriptionAdvancedFilterIsNullOrUndefinedOutput() EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput) ToEventSubscriptionAdvancedFilterIsNullOrUndefinedOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterIsNullOrUndefined] {
	return pulumix.Output[EventSubscriptionAdvancedFilterIsNullOrUndefined]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterIsNullOrUndefined) string { return v.Key }).(pulumi.StringOutput)
}

type EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterIsNullOrUndefined)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput) ToEventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput() EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput) ToEventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterIsNullOrUndefined] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterIsNullOrUndefined]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterIsNullOrUndefined {
		return vs[0].([]EventSubscriptionAdvancedFilterIsNullOrUndefined)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput)
}

type EventSubscriptionAdvancedFilterNumberGreaterThan struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	//
	// OR
	Value float64 `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterNumberGreaterThanInput is an input type that accepts EventSubscriptionAdvancedFilterNumberGreaterThanArgs and EventSubscriptionAdvancedFilterNumberGreaterThanOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberGreaterThanInput` via:
//
//	EventSubscriptionAdvancedFilterNumberGreaterThanArgs{...}
type EventSubscriptionAdvancedFilterNumberGreaterThanInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberGreaterThanOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOutput
	ToEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOutput
}

type EventSubscriptionAdvancedFilterNumberGreaterThanArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	//
	// OR
	Value pulumi.Float64Input `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterNumberGreaterThanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanArgs) ToEventSubscriptionAdvancedFilterNumberGreaterThanOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanArgs) ToEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberGreaterThanOutput)
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberGreaterThan] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberGreaterThan]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterNumberGreaterThanArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberGreaterThanArray and EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberGreaterThanArrayInput` via:
//
//	EventSubscriptionAdvancedFilterNumberGreaterThanArray{ EventSubscriptionAdvancedFilterNumberGreaterThanArgs{...} }
type EventSubscriptionAdvancedFilterNumberGreaterThanArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput
	ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput
}

type EventSubscriptionAdvancedFilterNumberGreaterThanArray []EventSubscriptionAdvancedFilterNumberGreaterThanInput

func (EventSubscriptionAdvancedFilterNumberGreaterThanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanArray) ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanArray) ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput)
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberGreaterThan] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberGreaterThan]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberGreaterThanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberGreaterThan] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberGreaterThan]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberGreaterThanOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberGreaterThan) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
//
// OR
func (o EventSubscriptionAdvancedFilterNumberGreaterThanOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberGreaterThan) float64 { return v.Value }).(pulumi.Float64Output)
}

type EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberGreaterThan] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberGreaterThan]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberGreaterThan {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberGreaterThan)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanOutput)
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	//
	// OR
	Value float64 `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput is an input type that accepts EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs and EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput` via:
//
//	EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs{...}
type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput
	ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	//
	// OR
	Value pulumi.Float64Input `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput)
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray and EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput` via:
//
//	EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray{ EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs{...} }
type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput
	ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray []EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput

func (EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput)
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
//
// OR
func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual) float64 { return v.Value }).(pulumi.Float64Output)
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput)
}

type EventSubscriptionAdvancedFilterNumberIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values []float64 `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterNumberInInput is an input type that accepts EventSubscriptionAdvancedFilterNumberInArgs and EventSubscriptionAdvancedFilterNumberInOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberInInput` via:
//
//	EventSubscriptionAdvancedFilterNumberInArgs{...}
type EventSubscriptionAdvancedFilterNumberInInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberInOutput() EventSubscriptionAdvancedFilterNumberInOutput
	ToEventSubscriptionAdvancedFilterNumberInOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberInOutput
}

type EventSubscriptionAdvancedFilterNumberInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterNumberInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberInArgs) ToEventSubscriptionAdvancedFilterNumberInOutput() EventSubscriptionAdvancedFilterNumberInOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberInOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberInArgs) ToEventSubscriptionAdvancedFilterNumberInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberInOutput)
}

func (i EventSubscriptionAdvancedFilterNumberInArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberIn] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberIn]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberInOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterNumberInArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberInArray and EventSubscriptionAdvancedFilterNumberInArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberInArrayInput` via:
//
//	EventSubscriptionAdvancedFilterNumberInArray{ EventSubscriptionAdvancedFilterNumberInArgs{...} }
type EventSubscriptionAdvancedFilterNumberInArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberInArrayOutput() EventSubscriptionAdvancedFilterNumberInArrayOutput
	ToEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberInArrayOutput
}

type EventSubscriptionAdvancedFilterNumberInArray []EventSubscriptionAdvancedFilterNumberInInput

func (EventSubscriptionAdvancedFilterNumberInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberInArray) ToEventSubscriptionAdvancedFilterNumberInArrayOutput() EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberInArray) ToEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberInArrayOutput)
}

func (i EventSubscriptionAdvancedFilterNumberInArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberIn] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberIn]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterNumberInOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberInOutput) ToEventSubscriptionAdvancedFilterNumberInOutput() EventSubscriptionAdvancedFilterNumberInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberInOutput) ToEventSubscriptionAdvancedFilterNumberInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberInOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberIn] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberIn]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
//
// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
func (o EventSubscriptionAdvancedFilterNumberInOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberIn) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberInArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberInArrayOutput) ToEventSubscriptionAdvancedFilterNumberInArrayOutput() EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberInArrayOutput) ToEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberInArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberIn] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberIn]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterNumberInArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberIn {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberIn)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberInOutput)
}

type EventSubscriptionAdvancedFilterNumberInRange struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values [][]float64 `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterNumberInRangeInput is an input type that accepts EventSubscriptionAdvancedFilterNumberInRangeArgs and EventSubscriptionAdvancedFilterNumberInRangeOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberInRangeInput` via:
//
//	EventSubscriptionAdvancedFilterNumberInRangeArgs{...}
type EventSubscriptionAdvancedFilterNumberInRangeInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberInRangeOutput() EventSubscriptionAdvancedFilterNumberInRangeOutput
	ToEventSubscriptionAdvancedFilterNumberInRangeOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberInRangeOutput
}

type EventSubscriptionAdvancedFilterNumberInRangeArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values pulumi.Float64ArrayArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterNumberInRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberInRange)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberInRangeArgs) ToEventSubscriptionAdvancedFilterNumberInRangeOutput() EventSubscriptionAdvancedFilterNumberInRangeOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberInRangeOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberInRangeArgs) ToEventSubscriptionAdvancedFilterNumberInRangeOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberInRangeOutput)
}

func (i EventSubscriptionAdvancedFilterNumberInRangeArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberInRange] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberInRange]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberInRangeOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterNumberInRangeArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberInRangeArray and EventSubscriptionAdvancedFilterNumberInRangeArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberInRangeArrayInput` via:
//
//	EventSubscriptionAdvancedFilterNumberInRangeArray{ EventSubscriptionAdvancedFilterNumberInRangeArgs{...} }
type EventSubscriptionAdvancedFilterNumberInRangeArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberInRangeArrayOutput() EventSubscriptionAdvancedFilterNumberInRangeArrayOutput
	ToEventSubscriptionAdvancedFilterNumberInRangeArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberInRangeArrayOutput
}

type EventSubscriptionAdvancedFilterNumberInRangeArray []EventSubscriptionAdvancedFilterNumberInRangeInput

func (EventSubscriptionAdvancedFilterNumberInRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberInRange)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberInRangeArray) ToEventSubscriptionAdvancedFilterNumberInRangeArrayOutput() EventSubscriptionAdvancedFilterNumberInRangeArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberInRangeArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberInRangeArray) ToEventSubscriptionAdvancedFilterNumberInRangeArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberInRangeArrayOutput)
}

func (i EventSubscriptionAdvancedFilterNumberInRangeArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberInRange] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberInRange]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberInRangeArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterNumberInRangeOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberInRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberInRange)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberInRangeOutput) ToEventSubscriptionAdvancedFilterNumberInRangeOutput() EventSubscriptionAdvancedFilterNumberInRangeOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberInRangeOutput) ToEventSubscriptionAdvancedFilterNumberInRangeOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInRangeOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberInRangeOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberInRange] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberInRange]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberInRangeOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberInRange) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
//
// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
func (o EventSubscriptionAdvancedFilterNumberInRangeOutput) Values() pulumi.Float64ArrayArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberInRange) [][]float64 { return v.Values }).(pulumi.Float64ArrayArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberInRangeArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberInRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberInRange)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberInRangeArrayOutput) ToEventSubscriptionAdvancedFilterNumberInRangeArrayOutput() EventSubscriptionAdvancedFilterNumberInRangeArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberInRangeArrayOutput) ToEventSubscriptionAdvancedFilterNumberInRangeArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInRangeArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberInRangeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberInRange] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberInRange]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterNumberInRangeArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberInRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberInRange {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberInRange)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberInRangeOutput)
}

type EventSubscriptionAdvancedFilterNumberLessThan struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	//
	// OR
	Value float64 `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterNumberLessThanInput is an input type that accepts EventSubscriptionAdvancedFilterNumberLessThanArgs and EventSubscriptionAdvancedFilterNumberLessThanOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberLessThanInput` via:
//
//	EventSubscriptionAdvancedFilterNumberLessThanArgs{...}
type EventSubscriptionAdvancedFilterNumberLessThanInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberLessThanOutput() EventSubscriptionAdvancedFilterNumberLessThanOutput
	ToEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberLessThanOutput
}

type EventSubscriptionAdvancedFilterNumberLessThanArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	//
	// OR
	Value pulumi.Float64Input `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterNumberLessThanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberLessThanArgs) ToEventSubscriptionAdvancedFilterNumberLessThanOutput() EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberLessThanArgs) ToEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberLessThanOutput)
}

func (i EventSubscriptionAdvancedFilterNumberLessThanArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberLessThan] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberLessThan]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterNumberLessThanArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberLessThanArray and EventSubscriptionAdvancedFilterNumberLessThanArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberLessThanArrayInput` via:
//
//	EventSubscriptionAdvancedFilterNumberLessThanArray{ EventSubscriptionAdvancedFilterNumberLessThanArgs{...} }
type EventSubscriptionAdvancedFilterNumberLessThanArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput
	ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberLessThanArrayOutput
}

type EventSubscriptionAdvancedFilterNumberLessThanArray []EventSubscriptionAdvancedFilterNumberLessThanInput

func (EventSubscriptionAdvancedFilterNumberLessThanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberLessThanArray) ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberLessThanArray) ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberLessThanArrayOutput)
}

func (i EventSubscriptionAdvancedFilterNumberLessThanArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberLessThan] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberLessThan]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterNumberLessThanOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberLessThanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOutput() EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberLessThan] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberLessThan]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberLessThanOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberLessThan) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
//
// OR
func (o EventSubscriptionAdvancedFilterNumberLessThanOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberLessThan) float64 { return v.Value }).(pulumi.Float64Output)
}

type EventSubscriptionAdvancedFilterNumberLessThanArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberLessThanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberLessThanArrayOutput) ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanArrayOutput) ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberLessThan] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberLessThan]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterNumberLessThanArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberLessThan {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberLessThan)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberLessThanOutput)
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqual struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	//
	// OR
	Value float64 `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterNumberLessThanOrEqualInput is an input type that accepts EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs and EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberLessThanOrEqualInput` via:
//
//	EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs{...}
type EventSubscriptionAdvancedFilterNumberLessThanOrEqualInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput
	ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	//
	// OR
	Value pulumi.Float64Input `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput)
}

func (i EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberLessThanOrEqual] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberLessThanOrEqual]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray and EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput` via:
//
//	EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray{ EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs{...} }
type EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput
	ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray []EventSubscriptionAdvancedFilterNumberLessThanOrEqualInput

func (EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput)
}

func (i EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberLessThanOrEqual] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberLessThanOrEqual]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberLessThanOrEqual] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberLessThanOrEqual]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberLessThanOrEqual) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
//
// OR
func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberLessThanOrEqual) float64 { return v.Value }).(pulumi.Float64Output)
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberLessThanOrEqual] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberLessThanOrEqual]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberLessThanOrEqual {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberLessThanOrEqual)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput)
}

type EventSubscriptionAdvancedFilterNumberNotIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values []float64 `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterNumberNotInInput is an input type that accepts EventSubscriptionAdvancedFilterNumberNotInArgs and EventSubscriptionAdvancedFilterNumberNotInOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberNotInInput` via:
//
//	EventSubscriptionAdvancedFilterNumberNotInArgs{...}
type EventSubscriptionAdvancedFilterNumberNotInInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberNotInOutput() EventSubscriptionAdvancedFilterNumberNotInOutput
	ToEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberNotInOutput
}

type EventSubscriptionAdvancedFilterNumberNotInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterNumberNotInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberNotInArgs) ToEventSubscriptionAdvancedFilterNumberNotInOutput() EventSubscriptionAdvancedFilterNumberNotInOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberNotInArgs) ToEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberNotInOutput)
}

func (i EventSubscriptionAdvancedFilterNumberNotInArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberNotIn] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberNotIn]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterNumberNotInArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberNotInArray and EventSubscriptionAdvancedFilterNumberNotInArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberNotInArrayInput` via:
//
//	EventSubscriptionAdvancedFilterNumberNotInArray{ EventSubscriptionAdvancedFilterNumberNotInArgs{...} }
type EventSubscriptionAdvancedFilterNumberNotInArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberNotInArrayOutput() EventSubscriptionAdvancedFilterNumberNotInArrayOutput
	ToEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberNotInArrayOutput
}

type EventSubscriptionAdvancedFilterNumberNotInArray []EventSubscriptionAdvancedFilterNumberNotInInput

func (EventSubscriptionAdvancedFilterNumberNotInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberNotInArray) ToEventSubscriptionAdvancedFilterNumberNotInArrayOutput() EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberNotInArray) ToEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberNotInArrayOutput)
}

func (i EventSubscriptionAdvancedFilterNumberNotInArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberNotIn] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberNotIn]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterNumberNotInOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberNotInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberNotInOutput) ToEventSubscriptionAdvancedFilterNumberNotInOutput() EventSubscriptionAdvancedFilterNumberNotInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberNotInOutput) ToEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberNotInOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberNotIn] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberNotIn]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberNotInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberNotIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
//
// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
func (o EventSubscriptionAdvancedFilterNumberNotInOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberNotIn) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberNotInArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberNotInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberNotInArrayOutput) ToEventSubscriptionAdvancedFilterNumberNotInArrayOutput() EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberNotInArrayOutput) ToEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberNotInArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberNotIn] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberNotIn]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterNumberNotInArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberNotInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberNotIn {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberNotIn)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberNotInOutput)
}

type EventSubscriptionAdvancedFilterNumberNotInRange struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values [][]float64 `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterNumberNotInRangeInput is an input type that accepts EventSubscriptionAdvancedFilterNumberNotInRangeArgs and EventSubscriptionAdvancedFilterNumberNotInRangeOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberNotInRangeInput` via:
//
//	EventSubscriptionAdvancedFilterNumberNotInRangeArgs{...}
type EventSubscriptionAdvancedFilterNumberNotInRangeInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberNotInRangeOutput() EventSubscriptionAdvancedFilterNumberNotInRangeOutput
	ToEventSubscriptionAdvancedFilterNumberNotInRangeOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberNotInRangeOutput
}

type EventSubscriptionAdvancedFilterNumberNotInRangeArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values pulumi.Float64ArrayArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterNumberNotInRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberNotInRange)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberNotInRangeArgs) ToEventSubscriptionAdvancedFilterNumberNotInRangeOutput() EventSubscriptionAdvancedFilterNumberNotInRangeOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberNotInRangeOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberNotInRangeArgs) ToEventSubscriptionAdvancedFilterNumberNotInRangeOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberNotInRangeOutput)
}

func (i EventSubscriptionAdvancedFilterNumberNotInRangeArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberNotInRange] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberNotInRange]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberNotInRangeOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterNumberNotInRangeArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberNotInRangeArray and EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberNotInRangeArrayInput` via:
//
//	EventSubscriptionAdvancedFilterNumberNotInRangeArray{ EventSubscriptionAdvancedFilterNumberNotInRangeArgs{...} }
type EventSubscriptionAdvancedFilterNumberNotInRangeArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput() EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput
	ToEventSubscriptionAdvancedFilterNumberNotInRangeArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput
}

type EventSubscriptionAdvancedFilterNumberNotInRangeArray []EventSubscriptionAdvancedFilterNumberNotInRangeInput

func (EventSubscriptionAdvancedFilterNumberNotInRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberNotInRange)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberNotInRangeArray) ToEventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput() EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberNotInRangeArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberNotInRangeArray) ToEventSubscriptionAdvancedFilterNumberNotInRangeArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput)
}

func (i EventSubscriptionAdvancedFilterNumberNotInRangeArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberNotInRange] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberNotInRange]{
		OutputState: i.ToEventSubscriptionAdvancedFilterNumberNotInRangeArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterNumberNotInRangeOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberNotInRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberNotInRange)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberNotInRangeOutput) ToEventSubscriptionAdvancedFilterNumberNotInRangeOutput() EventSubscriptionAdvancedFilterNumberNotInRangeOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberNotInRangeOutput) ToEventSubscriptionAdvancedFilterNumberNotInRangeOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInRangeOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberNotInRangeOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterNumberNotInRange] {
	return pulumix.Output[EventSubscriptionAdvancedFilterNumberNotInRange]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberNotInRangeOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberNotInRange) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
//
// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
func (o EventSubscriptionAdvancedFilterNumberNotInRangeOutput) Values() pulumi.Float64ArrayArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberNotInRange) [][]float64 { return v.Values }).(pulumi.Float64ArrayArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberNotInRange)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput) ToEventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput() EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput) ToEventSubscriptionAdvancedFilterNumberNotInRangeArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterNumberNotInRange] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterNumberNotInRange]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberNotInRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberNotInRange {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberNotInRange)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberNotInRangeOutput)
}

type EventSubscriptionAdvancedFilterStringBeginsWith struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringBeginsWithInput is an input type that accepts EventSubscriptionAdvancedFilterStringBeginsWithArgs and EventSubscriptionAdvancedFilterStringBeginsWithOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringBeginsWithInput` via:
//
//	EventSubscriptionAdvancedFilterStringBeginsWithArgs{...}
type EventSubscriptionAdvancedFilterStringBeginsWithInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringBeginsWithOutput() EventSubscriptionAdvancedFilterStringBeginsWithOutput
	ToEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringBeginsWithOutput
}

type EventSubscriptionAdvancedFilterStringBeginsWithArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringBeginsWithArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringBeginsWithArgs) ToEventSubscriptionAdvancedFilterStringBeginsWithOutput() EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return i.ToEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringBeginsWithArgs) ToEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringBeginsWithOutput)
}

func (i EventSubscriptionAdvancedFilterStringBeginsWithArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringBeginsWith] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringBeginsWith]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterStringBeginsWithArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringBeginsWithArray and EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringBeginsWithArrayInput` via:
//
//	EventSubscriptionAdvancedFilterStringBeginsWithArray{ EventSubscriptionAdvancedFilterStringBeginsWithArgs{...} }
type EventSubscriptionAdvancedFilterStringBeginsWithArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput
	ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput
}

type EventSubscriptionAdvancedFilterStringBeginsWithArray []EventSubscriptionAdvancedFilterStringBeginsWithInput

func (EventSubscriptionAdvancedFilterStringBeginsWithArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringBeginsWithArray) ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringBeginsWithArray) ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput)
}

func (i EventSubscriptionAdvancedFilterStringBeginsWithArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringBeginsWith] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringBeginsWith]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterStringBeginsWithOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringBeginsWithOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithOutput) ToEventSubscriptionAdvancedFilterStringBeginsWithOutput() EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithOutput) ToEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringBeginsWith] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringBeginsWith]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringBeginsWithOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringBeginsWith) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
//
// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
func (o EventSubscriptionAdvancedFilterStringBeginsWithOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringBeginsWith) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringBeginsWith] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringBeginsWith]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringBeginsWith {
		return vs[0].([]EventSubscriptionAdvancedFilterStringBeginsWith)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringBeginsWithOutput)
}

type EventSubscriptionAdvancedFilterStringContain struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringContainInput is an input type that accepts EventSubscriptionAdvancedFilterStringContainArgs and EventSubscriptionAdvancedFilterStringContainOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringContainInput` via:
//
//	EventSubscriptionAdvancedFilterStringContainArgs{...}
type EventSubscriptionAdvancedFilterStringContainInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringContainOutput() EventSubscriptionAdvancedFilterStringContainOutput
	ToEventSubscriptionAdvancedFilterStringContainOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringContainOutput
}

type EventSubscriptionAdvancedFilterStringContainArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringContainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringContainArgs) ToEventSubscriptionAdvancedFilterStringContainOutput() EventSubscriptionAdvancedFilterStringContainOutput {
	return i.ToEventSubscriptionAdvancedFilterStringContainOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringContainArgs) ToEventSubscriptionAdvancedFilterStringContainOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringContainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringContainOutput)
}

func (i EventSubscriptionAdvancedFilterStringContainArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringContain] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringContain]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringContainOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterStringContainArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringContainArray and EventSubscriptionAdvancedFilterStringContainArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringContainArrayInput` via:
//
//	EventSubscriptionAdvancedFilterStringContainArray{ EventSubscriptionAdvancedFilterStringContainArgs{...} }
type EventSubscriptionAdvancedFilterStringContainArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringContainArrayOutput() EventSubscriptionAdvancedFilterStringContainArrayOutput
	ToEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringContainArrayOutput
}

type EventSubscriptionAdvancedFilterStringContainArray []EventSubscriptionAdvancedFilterStringContainInput

func (EventSubscriptionAdvancedFilterStringContainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringContainArray) ToEventSubscriptionAdvancedFilterStringContainArrayOutput() EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringContainArray) ToEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringContainArrayOutput)
}

func (i EventSubscriptionAdvancedFilterStringContainArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringContain] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringContain]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterStringContainOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringContainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringContainOutput) ToEventSubscriptionAdvancedFilterStringContainOutput() EventSubscriptionAdvancedFilterStringContainOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringContainOutput) ToEventSubscriptionAdvancedFilterStringContainOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringContainOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringContainOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringContain] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringContain]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringContainOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringContain) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
//
// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
func (o EventSubscriptionAdvancedFilterStringContainOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringContain) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringContainArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringContainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringContainArrayOutput) ToEventSubscriptionAdvancedFilterStringContainArrayOutput() EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringContainArrayOutput) ToEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringContainArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringContain] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringContain]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterStringContainArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringContainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringContain {
		return vs[0].([]EventSubscriptionAdvancedFilterStringContain)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringContainOutput)
}

type EventSubscriptionAdvancedFilterStringEndsWith struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringEndsWithInput is an input type that accepts EventSubscriptionAdvancedFilterStringEndsWithArgs and EventSubscriptionAdvancedFilterStringEndsWithOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringEndsWithInput` via:
//
//	EventSubscriptionAdvancedFilterStringEndsWithArgs{...}
type EventSubscriptionAdvancedFilterStringEndsWithInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringEndsWithOutput() EventSubscriptionAdvancedFilterStringEndsWithOutput
	ToEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringEndsWithOutput
}

type EventSubscriptionAdvancedFilterStringEndsWithArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringEndsWithArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringEndsWithArgs) ToEventSubscriptionAdvancedFilterStringEndsWithOutput() EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return i.ToEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringEndsWithArgs) ToEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringEndsWithOutput)
}

func (i EventSubscriptionAdvancedFilterStringEndsWithArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringEndsWith] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringEndsWith]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterStringEndsWithArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringEndsWithArray and EventSubscriptionAdvancedFilterStringEndsWithArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringEndsWithArrayInput` via:
//
//	EventSubscriptionAdvancedFilterStringEndsWithArray{ EventSubscriptionAdvancedFilterStringEndsWithArgs{...} }
type EventSubscriptionAdvancedFilterStringEndsWithArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutput() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput
	ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringEndsWithArrayOutput
}

type EventSubscriptionAdvancedFilterStringEndsWithArray []EventSubscriptionAdvancedFilterStringEndsWithInput

func (EventSubscriptionAdvancedFilterStringEndsWithArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringEndsWithArray) ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutput() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringEndsWithArray) ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringEndsWithArrayOutput)
}

func (i EventSubscriptionAdvancedFilterStringEndsWithArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringEndsWith] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringEndsWith]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterStringEndsWithOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringEndsWithOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringEndsWithOutput) ToEventSubscriptionAdvancedFilterStringEndsWithOutput() EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringEndsWithOutput) ToEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringEndsWithOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringEndsWith] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringEndsWith]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringEndsWithOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringEndsWith) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
//
// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
func (o EventSubscriptionAdvancedFilterStringEndsWithOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringEndsWith) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringEndsWithArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringEndsWithArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringEndsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutput() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringEndsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringEndsWithArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringEndsWith] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringEndsWith]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterStringEndsWithArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringEndsWith {
		return vs[0].([]EventSubscriptionAdvancedFilterStringEndsWith)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringEndsWithOutput)
}

type EventSubscriptionAdvancedFilterStringIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringInInput is an input type that accepts EventSubscriptionAdvancedFilterStringInArgs and EventSubscriptionAdvancedFilterStringInOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringInInput` via:
//
//	EventSubscriptionAdvancedFilterStringInArgs{...}
type EventSubscriptionAdvancedFilterStringInInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringInOutput() EventSubscriptionAdvancedFilterStringInOutput
	ToEventSubscriptionAdvancedFilterStringInOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringInOutput
}

type EventSubscriptionAdvancedFilterStringInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringInArgs) ToEventSubscriptionAdvancedFilterStringInOutput() EventSubscriptionAdvancedFilterStringInOutput {
	return i.ToEventSubscriptionAdvancedFilterStringInOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringInArgs) ToEventSubscriptionAdvancedFilterStringInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringInOutput)
}

func (i EventSubscriptionAdvancedFilterStringInArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringIn] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringIn]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringInOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterStringInArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringInArray and EventSubscriptionAdvancedFilterStringInArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringInArrayInput` via:
//
//	EventSubscriptionAdvancedFilterStringInArray{ EventSubscriptionAdvancedFilterStringInArgs{...} }
type EventSubscriptionAdvancedFilterStringInArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringInArrayOutput() EventSubscriptionAdvancedFilterStringInArrayOutput
	ToEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringInArrayOutput
}

type EventSubscriptionAdvancedFilterStringInArray []EventSubscriptionAdvancedFilterStringInInput

func (EventSubscriptionAdvancedFilterStringInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringInArray) ToEventSubscriptionAdvancedFilterStringInArrayOutput() EventSubscriptionAdvancedFilterStringInArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringInArray) ToEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringInArrayOutput)
}

func (i EventSubscriptionAdvancedFilterStringInArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringIn] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringIn]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterStringInOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringInOutput) ToEventSubscriptionAdvancedFilterStringInOutput() EventSubscriptionAdvancedFilterStringInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringInOutput) ToEventSubscriptionAdvancedFilterStringInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringInOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringIn] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringIn]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
//
// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
func (o EventSubscriptionAdvancedFilterStringInOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringIn) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringInArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringInArrayOutput) ToEventSubscriptionAdvancedFilterStringInArrayOutput() EventSubscriptionAdvancedFilterStringInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringInArrayOutput) ToEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringInArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringIn] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringIn]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterStringInArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringIn {
		return vs[0].([]EventSubscriptionAdvancedFilterStringIn)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringInOutput)
}

type EventSubscriptionAdvancedFilterStringNotBeginsWith struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringNotBeginsWithInput is an input type that accepts EventSubscriptionAdvancedFilterStringNotBeginsWithArgs and EventSubscriptionAdvancedFilterStringNotBeginsWithOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringNotBeginsWithInput` via:
//
//	EventSubscriptionAdvancedFilterStringNotBeginsWithArgs{...}
type EventSubscriptionAdvancedFilterStringNotBeginsWithInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringNotBeginsWithOutput() EventSubscriptionAdvancedFilterStringNotBeginsWithOutput
	ToEventSubscriptionAdvancedFilterStringNotBeginsWithOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringNotBeginsWithOutput
}

type EventSubscriptionAdvancedFilterStringNotBeginsWithArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringNotBeginsWithArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotBeginsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringNotBeginsWithArgs) ToEventSubscriptionAdvancedFilterStringNotBeginsWithOutput() EventSubscriptionAdvancedFilterStringNotBeginsWithOutput {
	return i.ToEventSubscriptionAdvancedFilterStringNotBeginsWithOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringNotBeginsWithArgs) ToEventSubscriptionAdvancedFilterStringNotBeginsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotBeginsWithOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringNotBeginsWithOutput)
}

func (i EventSubscriptionAdvancedFilterStringNotBeginsWithArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringNotBeginsWith] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringNotBeginsWith]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringNotBeginsWithOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterStringNotBeginsWithArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringNotBeginsWithArray and EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringNotBeginsWithArrayInput` via:
//
//	EventSubscriptionAdvancedFilterStringNotBeginsWithArray{ EventSubscriptionAdvancedFilterStringNotBeginsWithArgs{...} }
type EventSubscriptionAdvancedFilterStringNotBeginsWithArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput() EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput
	ToEventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput
}

type EventSubscriptionAdvancedFilterStringNotBeginsWithArray []EventSubscriptionAdvancedFilterStringNotBeginsWithInput

func (EventSubscriptionAdvancedFilterStringNotBeginsWithArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringNotBeginsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringNotBeginsWithArray) ToEventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput() EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringNotBeginsWithArray) ToEventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput)
}

func (i EventSubscriptionAdvancedFilterStringNotBeginsWithArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotBeginsWith] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotBeginsWith]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterStringNotBeginsWithOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringNotBeginsWithOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotBeginsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringNotBeginsWithOutput) ToEventSubscriptionAdvancedFilterStringNotBeginsWithOutput() EventSubscriptionAdvancedFilterStringNotBeginsWithOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotBeginsWithOutput) ToEventSubscriptionAdvancedFilterStringNotBeginsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotBeginsWithOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotBeginsWithOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringNotBeginsWith] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringNotBeginsWith]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringNotBeginsWithOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringNotBeginsWith) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
//
// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
func (o EventSubscriptionAdvancedFilterStringNotBeginsWithOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringNotBeginsWith) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringNotBeginsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput() EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotBeginsWith] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotBeginsWith]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringNotBeginsWithOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringNotBeginsWith {
		return vs[0].([]EventSubscriptionAdvancedFilterStringNotBeginsWith)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringNotBeginsWithOutput)
}

type EventSubscriptionAdvancedFilterStringNotContain struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringNotContainInput is an input type that accepts EventSubscriptionAdvancedFilterStringNotContainArgs and EventSubscriptionAdvancedFilterStringNotContainOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringNotContainInput` via:
//
//	EventSubscriptionAdvancedFilterStringNotContainArgs{...}
type EventSubscriptionAdvancedFilterStringNotContainInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringNotContainOutput() EventSubscriptionAdvancedFilterStringNotContainOutput
	ToEventSubscriptionAdvancedFilterStringNotContainOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringNotContainOutput
}

type EventSubscriptionAdvancedFilterStringNotContainArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringNotContainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotContain)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringNotContainArgs) ToEventSubscriptionAdvancedFilterStringNotContainOutput() EventSubscriptionAdvancedFilterStringNotContainOutput {
	return i.ToEventSubscriptionAdvancedFilterStringNotContainOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringNotContainArgs) ToEventSubscriptionAdvancedFilterStringNotContainOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotContainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringNotContainOutput)
}

func (i EventSubscriptionAdvancedFilterStringNotContainArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringNotContain] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringNotContain]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringNotContainOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterStringNotContainArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringNotContainArray and EventSubscriptionAdvancedFilterStringNotContainArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringNotContainArrayInput` via:
//
//	EventSubscriptionAdvancedFilterStringNotContainArray{ EventSubscriptionAdvancedFilterStringNotContainArgs{...} }
type EventSubscriptionAdvancedFilterStringNotContainArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringNotContainArrayOutput() EventSubscriptionAdvancedFilterStringNotContainArrayOutput
	ToEventSubscriptionAdvancedFilterStringNotContainArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringNotContainArrayOutput
}

type EventSubscriptionAdvancedFilterStringNotContainArray []EventSubscriptionAdvancedFilterStringNotContainInput

func (EventSubscriptionAdvancedFilterStringNotContainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringNotContain)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringNotContainArray) ToEventSubscriptionAdvancedFilterStringNotContainArrayOutput() EventSubscriptionAdvancedFilterStringNotContainArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringNotContainArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringNotContainArray) ToEventSubscriptionAdvancedFilterStringNotContainArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotContainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringNotContainArrayOutput)
}

func (i EventSubscriptionAdvancedFilterStringNotContainArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotContain] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotContain]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringNotContainArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterStringNotContainOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringNotContainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotContain)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringNotContainOutput) ToEventSubscriptionAdvancedFilterStringNotContainOutput() EventSubscriptionAdvancedFilterStringNotContainOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotContainOutput) ToEventSubscriptionAdvancedFilterStringNotContainOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotContainOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotContainOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringNotContain] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringNotContain]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringNotContainOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringNotContain) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
//
// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
func (o EventSubscriptionAdvancedFilterStringNotContainOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringNotContain) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringNotContainArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringNotContainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringNotContain)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringNotContainArrayOutput) ToEventSubscriptionAdvancedFilterStringNotContainArrayOutput() EventSubscriptionAdvancedFilterStringNotContainArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotContainArrayOutput) ToEventSubscriptionAdvancedFilterStringNotContainArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotContainArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotContainArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotContain] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotContain]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterStringNotContainArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringNotContainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringNotContain {
		return vs[0].([]EventSubscriptionAdvancedFilterStringNotContain)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringNotContainOutput)
}

type EventSubscriptionAdvancedFilterStringNotEndsWith struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringNotEndsWithInput is an input type that accepts EventSubscriptionAdvancedFilterStringNotEndsWithArgs and EventSubscriptionAdvancedFilterStringNotEndsWithOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringNotEndsWithInput` via:
//
//	EventSubscriptionAdvancedFilterStringNotEndsWithArgs{...}
type EventSubscriptionAdvancedFilterStringNotEndsWithInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringNotEndsWithOutput() EventSubscriptionAdvancedFilterStringNotEndsWithOutput
	ToEventSubscriptionAdvancedFilterStringNotEndsWithOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringNotEndsWithOutput
}

type EventSubscriptionAdvancedFilterStringNotEndsWithArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringNotEndsWithArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotEndsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringNotEndsWithArgs) ToEventSubscriptionAdvancedFilterStringNotEndsWithOutput() EventSubscriptionAdvancedFilterStringNotEndsWithOutput {
	return i.ToEventSubscriptionAdvancedFilterStringNotEndsWithOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringNotEndsWithArgs) ToEventSubscriptionAdvancedFilterStringNotEndsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotEndsWithOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringNotEndsWithOutput)
}

func (i EventSubscriptionAdvancedFilterStringNotEndsWithArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringNotEndsWith] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringNotEndsWith]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringNotEndsWithOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterStringNotEndsWithArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringNotEndsWithArray and EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringNotEndsWithArrayInput` via:
//
//	EventSubscriptionAdvancedFilterStringNotEndsWithArray{ EventSubscriptionAdvancedFilterStringNotEndsWithArgs{...} }
type EventSubscriptionAdvancedFilterStringNotEndsWithArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput() EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput
	ToEventSubscriptionAdvancedFilterStringNotEndsWithArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput
}

type EventSubscriptionAdvancedFilterStringNotEndsWithArray []EventSubscriptionAdvancedFilterStringNotEndsWithInput

func (EventSubscriptionAdvancedFilterStringNotEndsWithArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringNotEndsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringNotEndsWithArray) ToEventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput() EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringNotEndsWithArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringNotEndsWithArray) ToEventSubscriptionAdvancedFilterStringNotEndsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput)
}

func (i EventSubscriptionAdvancedFilterStringNotEndsWithArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotEndsWith] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotEndsWith]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringNotEndsWithArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterStringNotEndsWithOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringNotEndsWithOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotEndsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringNotEndsWithOutput) ToEventSubscriptionAdvancedFilterStringNotEndsWithOutput() EventSubscriptionAdvancedFilterStringNotEndsWithOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotEndsWithOutput) ToEventSubscriptionAdvancedFilterStringNotEndsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotEndsWithOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotEndsWithOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringNotEndsWith] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringNotEndsWith]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringNotEndsWithOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringNotEndsWith) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
//
// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
func (o EventSubscriptionAdvancedFilterStringNotEndsWithOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringNotEndsWith) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringNotEndsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput() EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringNotEndsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotEndsWith] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotEndsWith]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringNotEndsWithOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringNotEndsWith {
		return vs[0].([]EventSubscriptionAdvancedFilterStringNotEndsWith)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringNotEndsWithOutput)
}

type EventSubscriptionAdvancedFilterStringNotIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringNotInInput is an input type that accepts EventSubscriptionAdvancedFilterStringNotInArgs and EventSubscriptionAdvancedFilterStringNotInOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringNotInInput` via:
//
//	EventSubscriptionAdvancedFilterStringNotInArgs{...}
type EventSubscriptionAdvancedFilterStringNotInInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringNotInOutput() EventSubscriptionAdvancedFilterStringNotInOutput
	ToEventSubscriptionAdvancedFilterStringNotInOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringNotInOutput
}

type EventSubscriptionAdvancedFilterStringNotInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	//
	// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringNotInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringNotInArgs) ToEventSubscriptionAdvancedFilterStringNotInOutput() EventSubscriptionAdvancedFilterStringNotInOutput {
	return i.ToEventSubscriptionAdvancedFilterStringNotInOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringNotInArgs) ToEventSubscriptionAdvancedFilterStringNotInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringNotInOutput)
}

func (i EventSubscriptionAdvancedFilterStringNotInArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringNotIn] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringNotIn]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringNotInOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionAdvancedFilterStringNotInArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringNotInArray and EventSubscriptionAdvancedFilterStringNotInArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringNotInArrayInput` via:
//
//	EventSubscriptionAdvancedFilterStringNotInArray{ EventSubscriptionAdvancedFilterStringNotInArgs{...} }
type EventSubscriptionAdvancedFilterStringNotInArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringNotInArrayOutput() EventSubscriptionAdvancedFilterStringNotInArrayOutput
	ToEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringNotInArrayOutput
}

type EventSubscriptionAdvancedFilterStringNotInArray []EventSubscriptionAdvancedFilterStringNotInInput

func (EventSubscriptionAdvancedFilterStringNotInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringNotInArray) ToEventSubscriptionAdvancedFilterStringNotInArrayOutput() EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringNotInArray) ToEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringNotInArrayOutput)
}

func (i EventSubscriptionAdvancedFilterStringNotInArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotIn] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotIn]{
		OutputState: i.ToEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAdvancedFilterStringNotInOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringNotInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringNotInOutput) ToEventSubscriptionAdvancedFilterStringNotInOutput() EventSubscriptionAdvancedFilterStringNotInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotInOutput) ToEventSubscriptionAdvancedFilterStringNotInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotInOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAdvancedFilterStringNotIn] {
	return pulumix.Output[EventSubscriptionAdvancedFilterStringNotIn]{
		OutputState: o.OutputState,
	}
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringNotInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringNotIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
//
// > **NOTE:** A maximum of total number of advanced filter values allowed on event subscription is 25.
func (o EventSubscriptionAdvancedFilterStringNotInOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringNotIn) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringNotInArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringNotInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringNotInArrayOutput) ToEventSubscriptionAdvancedFilterStringNotInArrayOutput() EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotInArrayOutput) ToEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotInArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotIn] {
	return pulumix.Output[[]EventSubscriptionAdvancedFilterStringNotIn]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAdvancedFilterStringNotInArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringNotInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringNotIn {
		return vs[0].([]EventSubscriptionAdvancedFilterStringNotIn)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringNotInOutput)
}

type EventSubscriptionAzureFunctionEndpoint struct {
	// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
	FunctionId string `pulumi:"functionId"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
}

// EventSubscriptionAzureFunctionEndpointInput is an input type that accepts EventSubscriptionAzureFunctionEndpointArgs and EventSubscriptionAzureFunctionEndpointOutput values.
// You can construct a concrete instance of `EventSubscriptionAzureFunctionEndpointInput` via:
//
//	EventSubscriptionAzureFunctionEndpointArgs{...}
type EventSubscriptionAzureFunctionEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionAzureFunctionEndpointOutput() EventSubscriptionAzureFunctionEndpointOutput
	ToEventSubscriptionAzureFunctionEndpointOutputWithContext(context.Context) EventSubscriptionAzureFunctionEndpointOutput
}

type EventSubscriptionAzureFunctionEndpointArgs struct {
	// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
	FunctionId pulumi.StringInput `pulumi:"functionId"`
	// Maximum number of events per batch.
	MaxEventsPerBatch pulumi.IntPtrInput `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes pulumi.IntPtrInput `pulumi:"preferredBatchSizeInKilobytes"`
}

func (EventSubscriptionAzureFunctionEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (i EventSubscriptionAzureFunctionEndpointArgs) ToEventSubscriptionAzureFunctionEndpointOutput() EventSubscriptionAzureFunctionEndpointOutput {
	return i.ToEventSubscriptionAzureFunctionEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionAzureFunctionEndpointArgs) ToEventSubscriptionAzureFunctionEndpointOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAzureFunctionEndpointOutput)
}

func (i EventSubscriptionAzureFunctionEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAzureFunctionEndpoint] {
	return pulumix.Output[EventSubscriptionAzureFunctionEndpoint]{
		OutputState: i.ToEventSubscriptionAzureFunctionEndpointOutputWithContext(ctx).OutputState,
	}
}

func (i EventSubscriptionAzureFunctionEndpointArgs) ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput {
	return i.ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionAzureFunctionEndpointArgs) ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAzureFunctionEndpointOutput).ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx)
}

// EventSubscriptionAzureFunctionEndpointPtrInput is an input type that accepts EventSubscriptionAzureFunctionEndpointArgs, EventSubscriptionAzureFunctionEndpointPtr and EventSubscriptionAzureFunctionEndpointPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionAzureFunctionEndpointPtrInput` via:
//
//	        EventSubscriptionAzureFunctionEndpointArgs{...}
//
//	or:
//
//	        nil
type EventSubscriptionAzureFunctionEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput
	ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput
}

type eventSubscriptionAzureFunctionEndpointPtrType EventSubscriptionAzureFunctionEndpointArgs

func EventSubscriptionAzureFunctionEndpointPtr(v *EventSubscriptionAzureFunctionEndpointArgs) EventSubscriptionAzureFunctionEndpointPtrInput {
	return (*eventSubscriptionAzureFunctionEndpointPtrType)(v)
}

func (*eventSubscriptionAzureFunctionEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionAzureFunctionEndpointPtrType) ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput {
	return i.ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionAzureFunctionEndpointPtrType) ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAzureFunctionEndpointPtrOutput)
}

func (i *eventSubscriptionAzureFunctionEndpointPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionAzureFunctionEndpoint] {
	return pulumix.Output[*EventSubscriptionAzureFunctionEndpoint]{
		OutputState: i.ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionAzureFunctionEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAzureFunctionEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (o EventSubscriptionAzureFunctionEndpointOutput) ToEventSubscriptionAzureFunctionEndpointOutput() EventSubscriptionAzureFunctionEndpointOutput {
	return o
}

func (o EventSubscriptionAzureFunctionEndpointOutput) ToEventSubscriptionAzureFunctionEndpointOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointOutput {
	return o
}

func (o EventSubscriptionAzureFunctionEndpointOutput) ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput {
	return o.ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionAzureFunctionEndpointOutput) ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSubscriptionAzureFunctionEndpoint) *EventSubscriptionAzureFunctionEndpoint {
		return &v
	}).(EventSubscriptionAzureFunctionEndpointPtrOutput)
}

func (o EventSubscriptionAzureFunctionEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionAzureFunctionEndpoint] {
	return pulumix.Output[EventSubscriptionAzureFunctionEndpoint]{
		OutputState: o.OutputState,
	}
}

// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
func (o EventSubscriptionAzureFunctionEndpointOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAzureFunctionEndpoint) string { return v.FunctionId }).(pulumi.StringOutput)
}

// Maximum number of events per batch.
func (o EventSubscriptionAzureFunctionEndpointOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSubscriptionAzureFunctionEndpoint) *int { return v.MaxEventsPerBatch }).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o EventSubscriptionAzureFunctionEndpointOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSubscriptionAzureFunctionEndpoint) *int { return v.PreferredBatchSizeInKilobytes }).(pulumi.IntPtrOutput)
}

type EventSubscriptionAzureFunctionEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAzureFunctionEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (o EventSubscriptionAzureFunctionEndpointPtrOutput) ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput {
	return o
}

func (o EventSubscriptionAzureFunctionEndpointPtrOutput) ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput {
	return o
}

func (o EventSubscriptionAzureFunctionEndpointPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionAzureFunctionEndpoint] {
	return pulumix.Output[*EventSubscriptionAzureFunctionEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionAzureFunctionEndpointPtrOutput) Elem() EventSubscriptionAzureFunctionEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionAzureFunctionEndpoint) EventSubscriptionAzureFunctionEndpoint {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionAzureFunctionEndpoint
		return ret
	}).(EventSubscriptionAzureFunctionEndpointOutput)
}

// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
func (o EventSubscriptionAzureFunctionEndpointPtrOutput) FunctionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionAzureFunctionEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.FunctionId
	}).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o EventSubscriptionAzureFunctionEndpointPtrOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionAzureFunctionEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.MaxEventsPerBatch
	}).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o EventSubscriptionAzureFunctionEndpointPtrOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionAzureFunctionEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.PreferredBatchSizeInKilobytes
	}).(pulumi.IntPtrOutput)
}

type EventSubscriptionDeadLetterIdentity struct {
	// Specifies the type of Managed Service Identity that is used for dead lettering. Allowed value is `SystemAssigned`, `UserAssigned`.
	Type string `pulumi:"type"`
	// The user identity associated with the resource.
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// EventSubscriptionDeadLetterIdentityInput is an input type that accepts EventSubscriptionDeadLetterIdentityArgs and EventSubscriptionDeadLetterIdentityOutput values.
// You can construct a concrete instance of `EventSubscriptionDeadLetterIdentityInput` via:
//
//	EventSubscriptionDeadLetterIdentityArgs{...}
type EventSubscriptionDeadLetterIdentityInput interface {
	pulumi.Input

	ToEventSubscriptionDeadLetterIdentityOutput() EventSubscriptionDeadLetterIdentityOutput
	ToEventSubscriptionDeadLetterIdentityOutputWithContext(context.Context) EventSubscriptionDeadLetterIdentityOutput
}

type EventSubscriptionDeadLetterIdentityArgs struct {
	// Specifies the type of Managed Service Identity that is used for dead lettering. Allowed value is `SystemAssigned`, `UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
	// The user identity associated with the resource.
	UserAssignedIdentity pulumi.StringPtrInput `pulumi:"userAssignedIdentity"`
}

func (EventSubscriptionDeadLetterIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDeadLetterIdentity)(nil)).Elem()
}

func (i EventSubscriptionDeadLetterIdentityArgs) ToEventSubscriptionDeadLetterIdentityOutput() EventSubscriptionDeadLetterIdentityOutput {
	return i.ToEventSubscriptionDeadLetterIdentityOutputWithContext(context.Background())
}

func (i EventSubscriptionDeadLetterIdentityArgs) ToEventSubscriptionDeadLetterIdentityOutputWithContext(ctx context.Context) EventSubscriptionDeadLetterIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDeadLetterIdentityOutput)
}

func (i EventSubscriptionDeadLetterIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionDeadLetterIdentity] {
	return pulumix.Output[EventSubscriptionDeadLetterIdentity]{
		OutputState: i.ToEventSubscriptionDeadLetterIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i EventSubscriptionDeadLetterIdentityArgs) ToEventSubscriptionDeadLetterIdentityPtrOutput() EventSubscriptionDeadLetterIdentityPtrOutput {
	return i.ToEventSubscriptionDeadLetterIdentityPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionDeadLetterIdentityArgs) ToEventSubscriptionDeadLetterIdentityPtrOutputWithContext(ctx context.Context) EventSubscriptionDeadLetterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDeadLetterIdentityOutput).ToEventSubscriptionDeadLetterIdentityPtrOutputWithContext(ctx)
}

// EventSubscriptionDeadLetterIdentityPtrInput is an input type that accepts EventSubscriptionDeadLetterIdentityArgs, EventSubscriptionDeadLetterIdentityPtr and EventSubscriptionDeadLetterIdentityPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionDeadLetterIdentityPtrInput` via:
//
//	        EventSubscriptionDeadLetterIdentityArgs{...}
//
//	or:
//
//	        nil
type EventSubscriptionDeadLetterIdentityPtrInput interface {
	pulumi.Input

	ToEventSubscriptionDeadLetterIdentityPtrOutput() EventSubscriptionDeadLetterIdentityPtrOutput
	ToEventSubscriptionDeadLetterIdentityPtrOutputWithContext(context.Context) EventSubscriptionDeadLetterIdentityPtrOutput
}

type eventSubscriptionDeadLetterIdentityPtrType EventSubscriptionDeadLetterIdentityArgs

func EventSubscriptionDeadLetterIdentityPtr(v *EventSubscriptionDeadLetterIdentityArgs) EventSubscriptionDeadLetterIdentityPtrInput {
	return (*eventSubscriptionDeadLetterIdentityPtrType)(v)
}

func (*eventSubscriptionDeadLetterIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDeadLetterIdentity)(nil)).Elem()
}

func (i *eventSubscriptionDeadLetterIdentityPtrType) ToEventSubscriptionDeadLetterIdentityPtrOutput() EventSubscriptionDeadLetterIdentityPtrOutput {
	return i.ToEventSubscriptionDeadLetterIdentityPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionDeadLetterIdentityPtrType) ToEventSubscriptionDeadLetterIdentityPtrOutputWithContext(ctx context.Context) EventSubscriptionDeadLetterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDeadLetterIdentityPtrOutput)
}

func (i *eventSubscriptionDeadLetterIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionDeadLetterIdentity] {
	return pulumix.Output[*EventSubscriptionDeadLetterIdentity]{
		OutputState: i.ToEventSubscriptionDeadLetterIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionDeadLetterIdentityOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDeadLetterIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDeadLetterIdentity)(nil)).Elem()
}

func (o EventSubscriptionDeadLetterIdentityOutput) ToEventSubscriptionDeadLetterIdentityOutput() EventSubscriptionDeadLetterIdentityOutput {
	return o
}

func (o EventSubscriptionDeadLetterIdentityOutput) ToEventSubscriptionDeadLetterIdentityOutputWithContext(ctx context.Context) EventSubscriptionDeadLetterIdentityOutput {
	return o
}

func (o EventSubscriptionDeadLetterIdentityOutput) ToEventSubscriptionDeadLetterIdentityPtrOutput() EventSubscriptionDeadLetterIdentityPtrOutput {
	return o.ToEventSubscriptionDeadLetterIdentityPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionDeadLetterIdentityOutput) ToEventSubscriptionDeadLetterIdentityPtrOutputWithContext(ctx context.Context) EventSubscriptionDeadLetterIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSubscriptionDeadLetterIdentity) *EventSubscriptionDeadLetterIdentity {
		return &v
	}).(EventSubscriptionDeadLetterIdentityPtrOutput)
}

func (o EventSubscriptionDeadLetterIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionDeadLetterIdentity] {
	return pulumix.Output[EventSubscriptionDeadLetterIdentity]{
		OutputState: o.OutputState,
	}
}

// Specifies the type of Managed Service Identity that is used for dead lettering. Allowed value is `SystemAssigned`, `UserAssigned`.
func (o EventSubscriptionDeadLetterIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionDeadLetterIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The user identity associated with the resource.
func (o EventSubscriptionDeadLetterIdentityOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionDeadLetterIdentity) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type EventSubscriptionDeadLetterIdentityPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDeadLetterIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDeadLetterIdentity)(nil)).Elem()
}

func (o EventSubscriptionDeadLetterIdentityPtrOutput) ToEventSubscriptionDeadLetterIdentityPtrOutput() EventSubscriptionDeadLetterIdentityPtrOutput {
	return o
}

func (o EventSubscriptionDeadLetterIdentityPtrOutput) ToEventSubscriptionDeadLetterIdentityPtrOutputWithContext(ctx context.Context) EventSubscriptionDeadLetterIdentityPtrOutput {
	return o
}

func (o EventSubscriptionDeadLetterIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionDeadLetterIdentity] {
	return pulumix.Output[*EventSubscriptionDeadLetterIdentity]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionDeadLetterIdentityPtrOutput) Elem() EventSubscriptionDeadLetterIdentityOutput {
	return o.ApplyT(func(v *EventSubscriptionDeadLetterIdentity) EventSubscriptionDeadLetterIdentity {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionDeadLetterIdentity
		return ret
	}).(EventSubscriptionDeadLetterIdentityOutput)
}

// Specifies the type of Managed Service Identity that is used for dead lettering. Allowed value is `SystemAssigned`, `UserAssigned`.
func (o EventSubscriptionDeadLetterIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionDeadLetterIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The user identity associated with the resource.
func (o EventSubscriptionDeadLetterIdentityPtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionDeadLetterIdentity) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionDeliveryIdentity struct {
	// Specifies the type of Managed Service Identity that is used for event delivery. Allowed value is `SystemAssigned`, `UserAssigned`.
	Type string `pulumi:"type"`
	// The user identity associated with the resource.
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// EventSubscriptionDeliveryIdentityInput is an input type that accepts EventSubscriptionDeliveryIdentityArgs and EventSubscriptionDeliveryIdentityOutput values.
// You can construct a concrete instance of `EventSubscriptionDeliveryIdentityInput` via:
//
//	EventSubscriptionDeliveryIdentityArgs{...}
type EventSubscriptionDeliveryIdentityInput interface {
	pulumi.Input

	ToEventSubscriptionDeliveryIdentityOutput() EventSubscriptionDeliveryIdentityOutput
	ToEventSubscriptionDeliveryIdentityOutputWithContext(context.Context) EventSubscriptionDeliveryIdentityOutput
}

type EventSubscriptionDeliveryIdentityArgs struct {
	// Specifies the type of Managed Service Identity that is used for event delivery. Allowed value is `SystemAssigned`, `UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
	// The user identity associated with the resource.
	UserAssignedIdentity pulumi.StringPtrInput `pulumi:"userAssignedIdentity"`
}

func (EventSubscriptionDeliveryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDeliveryIdentity)(nil)).Elem()
}

func (i EventSubscriptionDeliveryIdentityArgs) ToEventSubscriptionDeliveryIdentityOutput() EventSubscriptionDeliveryIdentityOutput {
	return i.ToEventSubscriptionDeliveryIdentityOutputWithContext(context.Background())
}

func (i EventSubscriptionDeliveryIdentityArgs) ToEventSubscriptionDeliveryIdentityOutputWithContext(ctx context.Context) EventSubscriptionDeliveryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDeliveryIdentityOutput)
}

func (i EventSubscriptionDeliveryIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionDeliveryIdentity] {
	return pulumix.Output[EventSubscriptionDeliveryIdentity]{
		OutputState: i.ToEventSubscriptionDeliveryIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i EventSubscriptionDeliveryIdentityArgs) ToEventSubscriptionDeliveryIdentityPtrOutput() EventSubscriptionDeliveryIdentityPtrOutput {
	return i.ToEventSubscriptionDeliveryIdentityPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionDeliveryIdentityArgs) ToEventSubscriptionDeliveryIdentityPtrOutputWithContext(ctx context.Context) EventSubscriptionDeliveryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDeliveryIdentityOutput).ToEventSubscriptionDeliveryIdentityPtrOutputWithContext(ctx)
}

// EventSubscriptionDeliveryIdentityPtrInput is an input type that accepts EventSubscriptionDeliveryIdentityArgs, EventSubscriptionDeliveryIdentityPtr and EventSubscriptionDeliveryIdentityPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionDeliveryIdentityPtrInput` via:
//
//	        EventSubscriptionDeliveryIdentityArgs{...}
//
//	or:
//
//	        nil
type EventSubscriptionDeliveryIdentityPtrInput interface {
	pulumi.Input

	ToEventSubscriptionDeliveryIdentityPtrOutput() EventSubscriptionDeliveryIdentityPtrOutput
	ToEventSubscriptionDeliveryIdentityPtrOutputWithContext(context.Context) EventSubscriptionDeliveryIdentityPtrOutput
}

type eventSubscriptionDeliveryIdentityPtrType EventSubscriptionDeliveryIdentityArgs

func EventSubscriptionDeliveryIdentityPtr(v *EventSubscriptionDeliveryIdentityArgs) EventSubscriptionDeliveryIdentityPtrInput {
	return (*eventSubscriptionDeliveryIdentityPtrType)(v)
}

func (*eventSubscriptionDeliveryIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDeliveryIdentity)(nil)).Elem()
}

func (i *eventSubscriptionDeliveryIdentityPtrType) ToEventSubscriptionDeliveryIdentityPtrOutput() EventSubscriptionDeliveryIdentityPtrOutput {
	return i.ToEventSubscriptionDeliveryIdentityPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionDeliveryIdentityPtrType) ToEventSubscriptionDeliveryIdentityPtrOutputWithContext(ctx context.Context) EventSubscriptionDeliveryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDeliveryIdentityPtrOutput)
}

func (i *eventSubscriptionDeliveryIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionDeliveryIdentity] {
	return pulumix.Output[*EventSubscriptionDeliveryIdentity]{
		OutputState: i.ToEventSubscriptionDeliveryIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionDeliveryIdentityOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDeliveryIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDeliveryIdentity)(nil)).Elem()
}

func (o EventSubscriptionDeliveryIdentityOutput) ToEventSubscriptionDeliveryIdentityOutput() EventSubscriptionDeliveryIdentityOutput {
	return o
}

func (o EventSubscriptionDeliveryIdentityOutput) ToEventSubscriptionDeliveryIdentityOutputWithContext(ctx context.Context) EventSubscriptionDeliveryIdentityOutput {
	return o
}

func (o EventSubscriptionDeliveryIdentityOutput) ToEventSubscriptionDeliveryIdentityPtrOutput() EventSubscriptionDeliveryIdentityPtrOutput {
	return o.ToEventSubscriptionDeliveryIdentityPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionDeliveryIdentityOutput) ToEventSubscriptionDeliveryIdentityPtrOutputWithContext(ctx context.Context) EventSubscriptionDeliveryIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSubscriptionDeliveryIdentity) *EventSubscriptionDeliveryIdentity {
		return &v
	}).(EventSubscriptionDeliveryIdentityPtrOutput)
}

func (o EventSubscriptionDeliveryIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionDeliveryIdentity] {
	return pulumix.Output[EventSubscriptionDeliveryIdentity]{
		OutputState: o.OutputState,
	}
}

// Specifies the type of Managed Service Identity that is used for event delivery. Allowed value is `SystemAssigned`, `UserAssigned`.
func (o EventSubscriptionDeliveryIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionDeliveryIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The user identity associated with the resource.
func (o EventSubscriptionDeliveryIdentityOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionDeliveryIdentity) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type EventSubscriptionDeliveryIdentityPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDeliveryIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionDeliveryIdentity)(nil)).Elem()
}

func (o EventSubscriptionDeliveryIdentityPtrOutput) ToEventSubscriptionDeliveryIdentityPtrOutput() EventSubscriptionDeliveryIdentityPtrOutput {
	return o
}

func (o EventSubscriptionDeliveryIdentityPtrOutput) ToEventSubscriptionDeliveryIdentityPtrOutputWithContext(ctx context.Context) EventSubscriptionDeliveryIdentityPtrOutput {
	return o
}

func (o EventSubscriptionDeliveryIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionDeliveryIdentity] {
	return pulumix.Output[*EventSubscriptionDeliveryIdentity]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionDeliveryIdentityPtrOutput) Elem() EventSubscriptionDeliveryIdentityOutput {
	return o.ApplyT(func(v *EventSubscriptionDeliveryIdentity) EventSubscriptionDeliveryIdentity {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionDeliveryIdentity
		return ret
	}).(EventSubscriptionDeliveryIdentityOutput)
}

// Specifies the type of Managed Service Identity that is used for event delivery. Allowed value is `SystemAssigned`, `UserAssigned`.
func (o EventSubscriptionDeliveryIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionDeliveryIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The user identity associated with the resource.
func (o EventSubscriptionDeliveryIdentityPtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionDeliveryIdentity) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionDeliveryProperty struct {
	// The name of the header to send on to the destination
	HeaderName string `pulumi:"headerName"`
	// True if the `value` is a secret and should be protected, otherwise false. If True, then this value won't be returned from Azure API calls
	Secret *bool `pulumi:"secret"`
	// If the `type` is `Dynamic`, then provide the payload field to be used as the value. Valid source fields differ by subscription type.
	SourceField *string `pulumi:"sourceField"`
	// Either `Static` or `Dynamic`
	Type string `pulumi:"type"`
	// If the `type` is `Static`, then provide the value to use
	Value *string `pulumi:"value"`
}

// EventSubscriptionDeliveryPropertyInput is an input type that accepts EventSubscriptionDeliveryPropertyArgs and EventSubscriptionDeliveryPropertyOutput values.
// You can construct a concrete instance of `EventSubscriptionDeliveryPropertyInput` via:
//
//	EventSubscriptionDeliveryPropertyArgs{...}
type EventSubscriptionDeliveryPropertyInput interface {
	pulumi.Input

	ToEventSubscriptionDeliveryPropertyOutput() EventSubscriptionDeliveryPropertyOutput
	ToEventSubscriptionDeliveryPropertyOutputWithContext(context.Context) EventSubscriptionDeliveryPropertyOutput
}

type EventSubscriptionDeliveryPropertyArgs struct {
	// The name of the header to send on to the destination
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// True if the `value` is a secret and should be protected, otherwise false. If True, then this value won't be returned from Azure API calls
	Secret pulumi.BoolPtrInput `pulumi:"secret"`
	// If the `type` is `Dynamic`, then provide the payload field to be used as the value. Valid source fields differ by subscription type.
	SourceField pulumi.StringPtrInput `pulumi:"sourceField"`
	// Either `Static` or `Dynamic`
	Type pulumi.StringInput `pulumi:"type"`
	// If the `type` is `Static`, then provide the value to use
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EventSubscriptionDeliveryPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDeliveryProperty)(nil)).Elem()
}

func (i EventSubscriptionDeliveryPropertyArgs) ToEventSubscriptionDeliveryPropertyOutput() EventSubscriptionDeliveryPropertyOutput {
	return i.ToEventSubscriptionDeliveryPropertyOutputWithContext(context.Background())
}

func (i EventSubscriptionDeliveryPropertyArgs) ToEventSubscriptionDeliveryPropertyOutputWithContext(ctx context.Context) EventSubscriptionDeliveryPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDeliveryPropertyOutput)
}

func (i EventSubscriptionDeliveryPropertyArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionDeliveryProperty] {
	return pulumix.Output[EventSubscriptionDeliveryProperty]{
		OutputState: i.ToEventSubscriptionDeliveryPropertyOutputWithContext(ctx).OutputState,
	}
}

// EventSubscriptionDeliveryPropertyArrayInput is an input type that accepts EventSubscriptionDeliveryPropertyArray and EventSubscriptionDeliveryPropertyArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionDeliveryPropertyArrayInput` via:
//
//	EventSubscriptionDeliveryPropertyArray{ EventSubscriptionDeliveryPropertyArgs{...} }
type EventSubscriptionDeliveryPropertyArrayInput interface {
	pulumi.Input

	ToEventSubscriptionDeliveryPropertyArrayOutput() EventSubscriptionDeliveryPropertyArrayOutput
	ToEventSubscriptionDeliveryPropertyArrayOutputWithContext(context.Context) EventSubscriptionDeliveryPropertyArrayOutput
}

type EventSubscriptionDeliveryPropertyArray []EventSubscriptionDeliveryPropertyInput

func (EventSubscriptionDeliveryPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionDeliveryProperty)(nil)).Elem()
}

func (i EventSubscriptionDeliveryPropertyArray) ToEventSubscriptionDeliveryPropertyArrayOutput() EventSubscriptionDeliveryPropertyArrayOutput {
	return i.ToEventSubscriptionDeliveryPropertyArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionDeliveryPropertyArray) ToEventSubscriptionDeliveryPropertyArrayOutputWithContext(ctx context.Context) EventSubscriptionDeliveryPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionDeliveryPropertyArrayOutput)
}

func (i EventSubscriptionDeliveryPropertyArray) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionDeliveryProperty] {
	return pulumix.Output[[]EventSubscriptionDeliveryProperty]{
		OutputState: i.ToEventSubscriptionDeliveryPropertyArrayOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionDeliveryPropertyOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDeliveryPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionDeliveryProperty)(nil)).Elem()
}

func (o EventSubscriptionDeliveryPropertyOutput) ToEventSubscriptionDeliveryPropertyOutput() EventSubscriptionDeliveryPropertyOutput {
	return o
}

func (o EventSubscriptionDeliveryPropertyOutput) ToEventSubscriptionDeliveryPropertyOutputWithContext(ctx context.Context) EventSubscriptionDeliveryPropertyOutput {
	return o
}

func (o EventSubscriptionDeliveryPropertyOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionDeliveryProperty] {
	return pulumix.Output[EventSubscriptionDeliveryProperty]{
		OutputState: o.OutputState,
	}
}

// The name of the header to send on to the destination
func (o EventSubscriptionDeliveryPropertyOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionDeliveryProperty) string { return v.HeaderName }).(pulumi.StringOutput)
}

// True if the `value` is a secret and should be protected, otherwise false. If True, then this value won't be returned from Azure API calls
func (o EventSubscriptionDeliveryPropertyOutput) Secret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionDeliveryProperty) *bool { return v.Secret }).(pulumi.BoolPtrOutput)
}

// If the `type` is `Dynamic`, then provide the payload field to be used as the value. Valid source fields differ by subscription type.
func (o EventSubscriptionDeliveryPropertyOutput) SourceField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionDeliveryProperty) *string { return v.SourceField }).(pulumi.StringPtrOutput)
}

// Either `Static` or `Dynamic`
func (o EventSubscriptionDeliveryPropertyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionDeliveryProperty) string { return v.Type }).(pulumi.StringOutput)
}

// If the `type` is `Static`, then provide the value to use
func (o EventSubscriptionDeliveryPropertyOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionDeliveryProperty) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EventSubscriptionDeliveryPropertyArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionDeliveryPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionDeliveryProperty)(nil)).Elem()
}

func (o EventSubscriptionDeliveryPropertyArrayOutput) ToEventSubscriptionDeliveryPropertyArrayOutput() EventSubscriptionDeliveryPropertyArrayOutput {
	return o
}

func (o EventSubscriptionDeliveryPropertyArrayOutput) ToEventSubscriptionDeliveryPropertyArrayOutputWithContext(ctx context.Context) EventSubscriptionDeliveryPropertyArrayOutput {
	return o
}

func (o EventSubscriptionDeliveryPropertyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventSubscriptionDeliveryProperty] {
	return pulumix.Output[[]EventSubscriptionDeliveryProperty]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionDeliveryPropertyArrayOutput) Index(i pulumi.IntInput) EventSubscriptionDeliveryPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionDeliveryProperty {
		return vs[0].([]EventSubscriptionDeliveryProperty)[vs[1].(int)]
	}).(EventSubscriptionDeliveryPropertyOutput)
}

type EventSubscriptionRetryPolicy struct {
	// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. See [official documentation](https://docs.microsoft.com/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
	EventTimeToLive int `pulumi:"eventTimeToLive"`
	// Specifies the maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts int `pulumi:"maxDeliveryAttempts"`
}

// EventSubscriptionRetryPolicyInput is an input type that accepts EventSubscriptionRetryPolicyArgs and EventSubscriptionRetryPolicyOutput values.
// You can construct a concrete instance of `EventSubscriptionRetryPolicyInput` via:
//
//	EventSubscriptionRetryPolicyArgs{...}
type EventSubscriptionRetryPolicyInput interface {
	pulumi.Input

	ToEventSubscriptionRetryPolicyOutput() EventSubscriptionRetryPolicyOutput
	ToEventSubscriptionRetryPolicyOutputWithContext(context.Context) EventSubscriptionRetryPolicyOutput
}

type EventSubscriptionRetryPolicyArgs struct {
	// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. See [official documentation](https://docs.microsoft.com/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
	EventTimeToLive pulumi.IntInput `pulumi:"eventTimeToLive"`
	// Specifies the maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts pulumi.IntInput `pulumi:"maxDeliveryAttempts"`
}

func (EventSubscriptionRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyOutput() EventSubscriptionRetryPolicyOutput {
	return i.ToEventSubscriptionRetryPolicyOutputWithContext(context.Background())
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionRetryPolicyOutput)
}

func (i EventSubscriptionRetryPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionRetryPolicy] {
	return pulumix.Output[EventSubscriptionRetryPolicy]{
		OutputState: i.ToEventSubscriptionRetryPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return i.ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionRetryPolicyOutput).ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx)
}

// EventSubscriptionRetryPolicyPtrInput is an input type that accepts EventSubscriptionRetryPolicyArgs, EventSubscriptionRetryPolicyPtr and EventSubscriptionRetryPolicyPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionRetryPolicyPtrInput` via:
//
//	        EventSubscriptionRetryPolicyArgs{...}
//
//	or:
//
//	        nil
type EventSubscriptionRetryPolicyPtrInput interface {
	pulumi.Input

	ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput
	ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Context) EventSubscriptionRetryPolicyPtrOutput
}

type eventSubscriptionRetryPolicyPtrType EventSubscriptionRetryPolicyArgs

func EventSubscriptionRetryPolicyPtr(v *EventSubscriptionRetryPolicyArgs) EventSubscriptionRetryPolicyPtrInput {
	return (*eventSubscriptionRetryPolicyPtrType)(v)
}

func (*eventSubscriptionRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (i *eventSubscriptionRetryPolicyPtrType) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return i.ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionRetryPolicyPtrType) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionRetryPolicyPtrOutput)
}

func (i *eventSubscriptionRetryPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionRetryPolicy] {
	return pulumix.Output[*EventSubscriptionRetryPolicy]{
		OutputState: i.ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionRetryPolicyOutput struct{ *pulumi.OutputState }

func (EventSubscriptionRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyOutput() EventSubscriptionRetryPolicyOutput {
	return o
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyOutput {
	return o
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return o.ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSubscriptionRetryPolicy) *EventSubscriptionRetryPolicy {
		return &v
	}).(EventSubscriptionRetryPolicyPtrOutput)
}

func (o EventSubscriptionRetryPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionRetryPolicy] {
	return pulumix.Output[EventSubscriptionRetryPolicy]{
		OutputState: o.OutputState,
	}
}

// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. See [official documentation](https://docs.microsoft.com/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
func (o EventSubscriptionRetryPolicyOutput) EventTimeToLive() pulumi.IntOutput {
	return o.ApplyT(func(v EventSubscriptionRetryPolicy) int { return v.EventTimeToLive }).(pulumi.IntOutput)
}

// Specifies the maximum number of delivery retry attempts for events.
func (o EventSubscriptionRetryPolicyOutput) MaxDeliveryAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v EventSubscriptionRetryPolicy) int { return v.MaxDeliveryAttempts }).(pulumi.IntOutput)
}

type EventSubscriptionRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (o EventSubscriptionRetryPolicyPtrOutput) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return o
}

func (o EventSubscriptionRetryPolicyPtrOutput) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return o
}

func (o EventSubscriptionRetryPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionRetryPolicy] {
	return pulumix.Output[*EventSubscriptionRetryPolicy]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionRetryPolicyPtrOutput) Elem() EventSubscriptionRetryPolicyOutput {
	return o.ApplyT(func(v *EventSubscriptionRetryPolicy) EventSubscriptionRetryPolicy {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionRetryPolicy
		return ret
	}).(EventSubscriptionRetryPolicyOutput)
}

// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. See [official documentation](https://docs.microsoft.com/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
func (o EventSubscriptionRetryPolicyPtrOutput) EventTimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.EventTimeToLive
	}).(pulumi.IntPtrOutput)
}

// Specifies the maximum number of delivery retry attempts for events.
func (o EventSubscriptionRetryPolicyPtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

type EventSubscriptionStorageBlobDeadLetterDestination struct {
	// Specifies the id of the storage account id where the storage blob is located.
	StorageAccountId string `pulumi:"storageAccountId"`
	// Specifies the name of the Storage blob container that is the destination of the deadletter events.
	StorageBlobContainerName string `pulumi:"storageBlobContainerName"`
}

// EventSubscriptionStorageBlobDeadLetterDestinationInput is an input type that accepts EventSubscriptionStorageBlobDeadLetterDestinationArgs and EventSubscriptionStorageBlobDeadLetterDestinationOutput values.
// You can construct a concrete instance of `EventSubscriptionStorageBlobDeadLetterDestinationInput` via:
//
//	EventSubscriptionStorageBlobDeadLetterDestinationArgs{...}
type EventSubscriptionStorageBlobDeadLetterDestinationInput interface {
	pulumi.Input

	ToEventSubscriptionStorageBlobDeadLetterDestinationOutput() EventSubscriptionStorageBlobDeadLetterDestinationOutput
	ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(context.Context) EventSubscriptionStorageBlobDeadLetterDestinationOutput
}

type EventSubscriptionStorageBlobDeadLetterDestinationArgs struct {
	// Specifies the id of the storage account id where the storage blob is located.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
	// Specifies the name of the Storage blob container that is the destination of the deadletter events.
	StorageBlobContainerName pulumi.StringInput `pulumi:"storageBlobContainerName"`
}

func (EventSubscriptionStorageBlobDeadLetterDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationOutput() EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return i.ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageBlobDeadLetterDestinationOutput)
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionStorageBlobDeadLetterDestination] {
	return pulumix.Output[EventSubscriptionStorageBlobDeadLetterDestination]{
		OutputState: i.ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(ctx).OutputState,
	}
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return i.ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageBlobDeadLetterDestinationOutput).ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx)
}

// EventSubscriptionStorageBlobDeadLetterDestinationPtrInput is an input type that accepts EventSubscriptionStorageBlobDeadLetterDestinationArgs, EventSubscriptionStorageBlobDeadLetterDestinationPtr and EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionStorageBlobDeadLetterDestinationPtrInput` via:
//
//	        EventSubscriptionStorageBlobDeadLetterDestinationArgs{...}
//
//	or:
//
//	        nil
type EventSubscriptionStorageBlobDeadLetterDestinationPtrInput interface {
	pulumi.Input

	ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput
	ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput
}

type eventSubscriptionStorageBlobDeadLetterDestinationPtrType EventSubscriptionStorageBlobDeadLetterDestinationArgs

func EventSubscriptionStorageBlobDeadLetterDestinationPtr(v *EventSubscriptionStorageBlobDeadLetterDestinationArgs) EventSubscriptionStorageBlobDeadLetterDestinationPtrInput {
	return (*eventSubscriptionStorageBlobDeadLetterDestinationPtrType)(v)
}

func (*eventSubscriptionStorageBlobDeadLetterDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i *eventSubscriptionStorageBlobDeadLetterDestinationPtrType) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return i.ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionStorageBlobDeadLetterDestinationPtrType) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput)
}

func (i *eventSubscriptionStorageBlobDeadLetterDestinationPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionStorageBlobDeadLetterDestination] {
	return pulumix.Output[*EventSubscriptionStorageBlobDeadLetterDestination]{
		OutputState: i.ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionStorageBlobDeadLetterDestinationOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageBlobDeadLetterDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationOutput() EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o.ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSubscriptionStorageBlobDeadLetterDestination) *EventSubscriptionStorageBlobDeadLetterDestination {
		return &v
	}).(EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput)
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionStorageBlobDeadLetterDestination] {
	return pulumix.Output[EventSubscriptionStorageBlobDeadLetterDestination]{
		OutputState: o.OutputState,
	}
}

// Specifies the id of the storage account id where the storage blob is located.
func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageBlobDeadLetterDestination) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

// Specifies the name of the Storage blob container that is the destination of the deadletter events.
func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) StorageBlobContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageBlobDeadLetterDestination) string { return v.StorageBlobContainerName }).(pulumi.StringOutput)
}

type EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionStorageBlobDeadLetterDestination] {
	return pulumix.Output[*EventSubscriptionStorageBlobDeadLetterDestination]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) Elem() EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageBlobDeadLetterDestination) EventSubscriptionStorageBlobDeadLetterDestination {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionStorageBlobDeadLetterDestination
		return ret
	}).(EventSubscriptionStorageBlobDeadLetterDestinationOutput)
}

// Specifies the id of the storage account id where the storage blob is located.
func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageBlobDeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the Storage blob container that is the destination of the deadletter events.
func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) StorageBlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageBlobDeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return &v.StorageBlobContainerName
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionStorageQueueEndpoint struct {
	// Storage queue message time to live in seconds.
	QueueMessageTimeToLiveInSeconds *int `pulumi:"queueMessageTimeToLiveInSeconds"`
	// Specifies the name of the storage queue where the Event Subscription will receive events.
	QueueName string `pulumi:"queueName"`
	// Specifies the id of the storage account id where the storage queue is located.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// EventSubscriptionStorageQueueEndpointInput is an input type that accepts EventSubscriptionStorageQueueEndpointArgs and EventSubscriptionStorageQueueEndpointOutput values.
// You can construct a concrete instance of `EventSubscriptionStorageQueueEndpointInput` via:
//
//	EventSubscriptionStorageQueueEndpointArgs{...}
type EventSubscriptionStorageQueueEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionStorageQueueEndpointOutput() EventSubscriptionStorageQueueEndpointOutput
	ToEventSubscriptionStorageQueueEndpointOutputWithContext(context.Context) EventSubscriptionStorageQueueEndpointOutput
}

type EventSubscriptionStorageQueueEndpointArgs struct {
	// Storage queue message time to live in seconds.
	QueueMessageTimeToLiveInSeconds pulumi.IntPtrInput `pulumi:"queueMessageTimeToLiveInSeconds"`
	// Specifies the name of the storage queue where the Event Subscription will receive events.
	QueueName pulumi.StringInput `pulumi:"queueName"`
	// Specifies the id of the storage account id where the storage queue is located.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (EventSubscriptionStorageQueueEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointOutput() EventSubscriptionStorageQueueEndpointOutput {
	return i.ToEventSubscriptionStorageQueueEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageQueueEndpointOutput)
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionStorageQueueEndpoint] {
	return pulumix.Output[EventSubscriptionStorageQueueEndpoint]{
		OutputState: i.ToEventSubscriptionStorageQueueEndpointOutputWithContext(ctx).OutputState,
	}
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return i.ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageQueueEndpointOutput).ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx)
}

// EventSubscriptionStorageQueueEndpointPtrInput is an input type that accepts EventSubscriptionStorageQueueEndpointArgs, EventSubscriptionStorageQueueEndpointPtr and EventSubscriptionStorageQueueEndpointPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionStorageQueueEndpointPtrInput` via:
//
//	        EventSubscriptionStorageQueueEndpointArgs{...}
//
//	or:
//
//	        nil
type EventSubscriptionStorageQueueEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput
	ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Context) EventSubscriptionStorageQueueEndpointPtrOutput
}

type eventSubscriptionStorageQueueEndpointPtrType EventSubscriptionStorageQueueEndpointArgs

func EventSubscriptionStorageQueueEndpointPtr(v *EventSubscriptionStorageQueueEndpointArgs) EventSubscriptionStorageQueueEndpointPtrInput {
	return (*eventSubscriptionStorageQueueEndpointPtrType)(v)
}

func (*eventSubscriptionStorageQueueEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionStorageQueueEndpointPtrType) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return i.ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionStorageQueueEndpointPtrType) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageQueueEndpointPtrOutput)
}

func (i *eventSubscriptionStorageQueueEndpointPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionStorageQueueEndpoint] {
	return pulumix.Output[*EventSubscriptionStorageQueueEndpoint]{
		OutputState: i.ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionStorageQueueEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageQueueEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointOutput() EventSubscriptionStorageQueueEndpointOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return o.ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSubscriptionStorageQueueEndpoint) *EventSubscriptionStorageQueueEndpoint {
		return &v
	}).(EventSubscriptionStorageQueueEndpointPtrOutput)
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionStorageQueueEndpoint] {
	return pulumix.Output[EventSubscriptionStorageQueueEndpoint]{
		OutputState: o.OutputState,
	}
}

// Storage queue message time to live in seconds.
func (o EventSubscriptionStorageQueueEndpointOutput) QueueMessageTimeToLiveInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSubscriptionStorageQueueEndpoint) *int { return v.QueueMessageTimeToLiveInSeconds }).(pulumi.IntPtrOutput)
}

// Specifies the name of the storage queue where the Event Subscription will receive events.
func (o EventSubscriptionStorageQueueEndpointOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageQueueEndpoint) string { return v.QueueName }).(pulumi.StringOutput)
}

// Specifies the id of the storage account id where the storage queue is located.
func (o EventSubscriptionStorageQueueEndpointOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageQueueEndpoint) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type EventSubscriptionStorageQueueEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageQueueEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (o EventSubscriptionStorageQueueEndpointPtrOutput) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointPtrOutput) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionStorageQueueEndpoint] {
	return pulumix.Output[*EventSubscriptionStorageQueueEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionStorageQueueEndpointPtrOutput) Elem() EventSubscriptionStorageQueueEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageQueueEndpoint) EventSubscriptionStorageQueueEndpoint {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionStorageQueueEndpoint
		return ret
	}).(EventSubscriptionStorageQueueEndpointOutput)
}

// Storage queue message time to live in seconds.
func (o EventSubscriptionStorageQueueEndpointPtrOutput) QueueMessageTimeToLiveInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageQueueEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.QueueMessageTimeToLiveInSeconds
	}).(pulumi.IntPtrOutput)
}

// Specifies the name of the storage queue where the Event Subscription will receive events.
func (o EventSubscriptionStorageQueueEndpointPtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageQueueEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.QueueName
	}).(pulumi.StringPtrOutput)
}

// Specifies the id of the storage account id where the storage queue is located.
func (o EventSubscriptionStorageQueueEndpointPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageQueueEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionSubjectFilter struct {
	// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value
	CaseSensitive *bool `pulumi:"caseSensitive"`
	// A string to filter events for an event subscription based on a resource path prefix.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// A string to filter events for an event subscription based on a resource path suffix.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// EventSubscriptionSubjectFilterInput is an input type that accepts EventSubscriptionSubjectFilterArgs and EventSubscriptionSubjectFilterOutput values.
// You can construct a concrete instance of `EventSubscriptionSubjectFilterInput` via:
//
//	EventSubscriptionSubjectFilterArgs{...}
type EventSubscriptionSubjectFilterInput interface {
	pulumi.Input

	ToEventSubscriptionSubjectFilterOutput() EventSubscriptionSubjectFilterOutput
	ToEventSubscriptionSubjectFilterOutputWithContext(context.Context) EventSubscriptionSubjectFilterOutput
}

type EventSubscriptionSubjectFilterArgs struct {
	// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value
	CaseSensitive pulumi.BoolPtrInput `pulumi:"caseSensitive"`
	// A string to filter events for an event subscription based on a resource path prefix.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// A string to filter events for an event subscription based on a resource path suffix.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

func (EventSubscriptionSubjectFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterOutput() EventSubscriptionSubjectFilterOutput {
	return i.ToEventSubscriptionSubjectFilterOutputWithContext(context.Background())
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionSubjectFilterOutput)
}

func (i EventSubscriptionSubjectFilterArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionSubjectFilter] {
	return pulumix.Output[EventSubscriptionSubjectFilter]{
		OutputState: i.ToEventSubscriptionSubjectFilterOutputWithContext(ctx).OutputState,
	}
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return i.ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionSubjectFilterOutput).ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx)
}

// EventSubscriptionSubjectFilterPtrInput is an input type that accepts EventSubscriptionSubjectFilterArgs, EventSubscriptionSubjectFilterPtr and EventSubscriptionSubjectFilterPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionSubjectFilterPtrInput` via:
//
//	        EventSubscriptionSubjectFilterArgs{...}
//
//	or:
//
//	        nil
type EventSubscriptionSubjectFilterPtrInput interface {
	pulumi.Input

	ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput
	ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Context) EventSubscriptionSubjectFilterPtrOutput
}

type eventSubscriptionSubjectFilterPtrType EventSubscriptionSubjectFilterArgs

func EventSubscriptionSubjectFilterPtr(v *EventSubscriptionSubjectFilterArgs) EventSubscriptionSubjectFilterPtrInput {
	return (*eventSubscriptionSubjectFilterPtrType)(v)
}

func (*eventSubscriptionSubjectFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (i *eventSubscriptionSubjectFilterPtrType) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return i.ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionSubjectFilterPtrType) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionSubjectFilterPtrOutput)
}

func (i *eventSubscriptionSubjectFilterPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionSubjectFilter] {
	return pulumix.Output[*EventSubscriptionSubjectFilter]{
		OutputState: i.ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionSubjectFilterOutput struct{ *pulumi.OutputState }

func (EventSubscriptionSubjectFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterOutput() EventSubscriptionSubjectFilterOutput {
	return o
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterOutput {
	return o
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return o.ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSubscriptionSubjectFilter) *EventSubscriptionSubjectFilter {
		return &v
	}).(EventSubscriptionSubjectFilterPtrOutput)
}

func (o EventSubscriptionSubjectFilterOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionSubjectFilter] {
	return pulumix.Output[EventSubscriptionSubjectFilter]{
		OutputState: o.OutputState,
	}
}

// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value
func (o EventSubscriptionSubjectFilterOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *bool { return v.CaseSensitive }).(pulumi.BoolPtrOutput)
}

// A string to filter events for an event subscription based on a resource path prefix.
func (o EventSubscriptionSubjectFilterOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// A string to filter events for an event subscription based on a resource path suffix.
func (o EventSubscriptionSubjectFilterOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionSubjectFilterPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionSubjectFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (o EventSubscriptionSubjectFilterPtrOutput) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return o
}

func (o EventSubscriptionSubjectFilterPtrOutput) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return o
}

func (o EventSubscriptionSubjectFilterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionSubjectFilter] {
	return pulumix.Output[*EventSubscriptionSubjectFilter]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionSubjectFilterPtrOutput) Elem() EventSubscriptionSubjectFilterOutput {
	return o.ApplyT(func(v *EventSubscriptionSubjectFilter) EventSubscriptionSubjectFilter {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionSubjectFilter
		return ret
	}).(EventSubscriptionSubjectFilterOutput)
}

// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value
func (o EventSubscriptionSubjectFilterPtrOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionSubjectFilter) *bool {
		if v == nil {
			return nil
		}
		return v.CaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// A string to filter events for an event subscription based on a resource path prefix.
func (o EventSubscriptionSubjectFilterPtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionSubjectFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// A string to filter events for an event subscription based on a resource path suffix.
func (o EventSubscriptionSubjectFilterPtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionSubjectFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionWebhookEndpoint struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryAppIdOrUri *string `pulumi:"activeDirectoryAppIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryTenantId *string `pulumi:"activeDirectoryTenantId"`
	// The base url of the webhook where the Event Subscription will receive events.
	BaseUrl *string `pulumi:"baseUrl"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
	// Specifies the url of the webhook where the Event Subscription will receive events.
	Url string `pulumi:"url"`
}

// EventSubscriptionWebhookEndpointInput is an input type that accepts EventSubscriptionWebhookEndpointArgs and EventSubscriptionWebhookEndpointOutput values.
// You can construct a concrete instance of `EventSubscriptionWebhookEndpointInput` via:
//
//	EventSubscriptionWebhookEndpointArgs{...}
type EventSubscriptionWebhookEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionWebhookEndpointOutput() EventSubscriptionWebhookEndpointOutput
	ToEventSubscriptionWebhookEndpointOutputWithContext(context.Context) EventSubscriptionWebhookEndpointOutput
}

type EventSubscriptionWebhookEndpointArgs struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryAppIdOrUri pulumi.StringPtrInput `pulumi:"activeDirectoryAppIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryTenantId pulumi.StringPtrInput `pulumi:"activeDirectoryTenantId"`
	// The base url of the webhook where the Event Subscription will receive events.
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// Maximum number of events per batch.
	MaxEventsPerBatch pulumi.IntPtrInput `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes pulumi.IntPtrInput `pulumi:"preferredBatchSizeInKilobytes"`
	// Specifies the url of the webhook where the Event Subscription will receive events.
	Url pulumi.StringInput `pulumi:"url"`
}

func (EventSubscriptionWebhookEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointOutput() EventSubscriptionWebhookEndpointOutput {
	return i.ToEventSubscriptionWebhookEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionWebhookEndpointOutput)
}

func (i EventSubscriptionWebhookEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionWebhookEndpoint] {
	return pulumix.Output[EventSubscriptionWebhookEndpoint]{
		OutputState: i.ToEventSubscriptionWebhookEndpointOutputWithContext(ctx).OutputState,
	}
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return i.ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionWebhookEndpointOutput).ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx)
}

// EventSubscriptionWebhookEndpointPtrInput is an input type that accepts EventSubscriptionWebhookEndpointArgs, EventSubscriptionWebhookEndpointPtr and EventSubscriptionWebhookEndpointPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionWebhookEndpointPtrInput` via:
//
//	        EventSubscriptionWebhookEndpointArgs{...}
//
//	or:
//
//	        nil
type EventSubscriptionWebhookEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput
	ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Context) EventSubscriptionWebhookEndpointPtrOutput
}

type eventSubscriptionWebhookEndpointPtrType EventSubscriptionWebhookEndpointArgs

func EventSubscriptionWebhookEndpointPtr(v *EventSubscriptionWebhookEndpointArgs) EventSubscriptionWebhookEndpointPtrInput {
	return (*eventSubscriptionWebhookEndpointPtrType)(v)
}

func (*eventSubscriptionWebhookEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionWebhookEndpointPtrType) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return i.ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionWebhookEndpointPtrType) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionWebhookEndpointPtrOutput)
}

func (i *eventSubscriptionWebhookEndpointPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionWebhookEndpoint] {
	return pulumix.Output[*EventSubscriptionWebhookEndpoint]{
		OutputState: i.ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx).OutputState,
	}
}

type EventSubscriptionWebhookEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionWebhookEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointOutput() EventSubscriptionWebhookEndpointOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return o.ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventSubscriptionWebhookEndpoint) *EventSubscriptionWebhookEndpoint {
		return &v
	}).(EventSubscriptionWebhookEndpointPtrOutput)
}

func (o EventSubscriptionWebhookEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[EventSubscriptionWebhookEndpoint] {
	return pulumix.Output[EventSubscriptionWebhookEndpoint]{
		OutputState: o.OutputState,
	}
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o EventSubscriptionWebhookEndpointOutput) ActiveDirectoryAppIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *string { return v.ActiveDirectoryAppIdOrUri }).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o EventSubscriptionWebhookEndpointOutput) ActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *string { return v.ActiveDirectoryTenantId }).(pulumi.StringPtrOutput)
}

// The base url of the webhook where the Event Subscription will receive events.
func (o EventSubscriptionWebhookEndpointOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o EventSubscriptionWebhookEndpointOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *int { return v.MaxEventsPerBatch }).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o EventSubscriptionWebhookEndpointOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *int { return v.PreferredBatchSizeInKilobytes }).(pulumi.IntPtrOutput)
}

// Specifies the url of the webhook where the Event Subscription will receive events.
func (o EventSubscriptionWebhookEndpointOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) string { return v.Url }).(pulumi.StringOutput)
}

type EventSubscriptionWebhookEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionWebhookEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (o EventSubscriptionWebhookEndpointPtrOutput) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointPtrOutput) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventSubscriptionWebhookEndpoint] {
	return pulumix.Output[*EventSubscriptionWebhookEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o EventSubscriptionWebhookEndpointPtrOutput) Elem() EventSubscriptionWebhookEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) EventSubscriptionWebhookEndpoint {
		if v != nil {
			return *v
		}
		var ret EventSubscriptionWebhookEndpoint
		return ret
	}).(EventSubscriptionWebhookEndpointOutput)
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o EventSubscriptionWebhookEndpointPtrOutput) ActiveDirectoryAppIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryAppIdOrUri
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o EventSubscriptionWebhookEndpointPtrOutput) ActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryTenantId
	}).(pulumi.StringPtrOutput)
}

// The base url of the webhook where the Event Subscription will receive events.
func (o EventSubscriptionWebhookEndpointPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o EventSubscriptionWebhookEndpointPtrOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.MaxEventsPerBatch
	}).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o EventSubscriptionWebhookEndpointPtrOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.PreferredBatchSizeInKilobytes
	}).(pulumi.IntPtrOutput)
}

// Specifies the url of the webhook where the Event Subscription will receive events.
func (o EventSubscriptionWebhookEndpointPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type NamespaceCustomerManagedKeyType struct {
	// The ID of the User Assigned Identity that has access to the key.
	IdentityId string `pulumi:"identityId"`
	// Used to specify whether enable Infrastructure Encryption (Double Encryption). Changing this forces a new resource to be created.
	InfrastructureEncryptionEnabled *bool `pulumi:"infrastructureEncryptionEnabled"`
	// The ID of the Key Vault Key which should be used to Encrypt the data in this ServiceBus Namespace.
	KeyVaultKeyId string `pulumi:"keyVaultKeyId"`
}

// NamespaceCustomerManagedKeyTypeInput is an input type that accepts NamespaceCustomerManagedKeyTypeArgs and NamespaceCustomerManagedKeyTypeOutput values.
// You can construct a concrete instance of `NamespaceCustomerManagedKeyTypeInput` via:
//
//	NamespaceCustomerManagedKeyTypeArgs{...}
type NamespaceCustomerManagedKeyTypeInput interface {
	pulumi.Input

	ToNamespaceCustomerManagedKeyTypeOutput() NamespaceCustomerManagedKeyTypeOutput
	ToNamespaceCustomerManagedKeyTypeOutputWithContext(context.Context) NamespaceCustomerManagedKeyTypeOutput
}

type NamespaceCustomerManagedKeyTypeArgs struct {
	// The ID of the User Assigned Identity that has access to the key.
	IdentityId pulumi.StringInput `pulumi:"identityId"`
	// Used to specify whether enable Infrastructure Encryption (Double Encryption). Changing this forces a new resource to be created.
	InfrastructureEncryptionEnabled pulumi.BoolPtrInput `pulumi:"infrastructureEncryptionEnabled"`
	// The ID of the Key Vault Key which should be used to Encrypt the data in this ServiceBus Namespace.
	KeyVaultKeyId pulumi.StringInput `pulumi:"keyVaultKeyId"`
}

func (NamespaceCustomerManagedKeyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceCustomerManagedKeyType)(nil)).Elem()
}

func (i NamespaceCustomerManagedKeyTypeArgs) ToNamespaceCustomerManagedKeyTypeOutput() NamespaceCustomerManagedKeyTypeOutput {
	return i.ToNamespaceCustomerManagedKeyTypeOutputWithContext(context.Background())
}

func (i NamespaceCustomerManagedKeyTypeArgs) ToNamespaceCustomerManagedKeyTypeOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCustomerManagedKeyTypeOutput)
}

func (i NamespaceCustomerManagedKeyTypeArgs) ToOutput(ctx context.Context) pulumix.Output[NamespaceCustomerManagedKeyType] {
	return pulumix.Output[NamespaceCustomerManagedKeyType]{
		OutputState: i.ToNamespaceCustomerManagedKeyTypeOutputWithContext(ctx).OutputState,
	}
}

func (i NamespaceCustomerManagedKeyTypeArgs) ToNamespaceCustomerManagedKeyTypePtrOutput() NamespaceCustomerManagedKeyTypePtrOutput {
	return i.ToNamespaceCustomerManagedKeyTypePtrOutputWithContext(context.Background())
}

func (i NamespaceCustomerManagedKeyTypeArgs) ToNamespaceCustomerManagedKeyTypePtrOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCustomerManagedKeyTypeOutput).ToNamespaceCustomerManagedKeyTypePtrOutputWithContext(ctx)
}

// NamespaceCustomerManagedKeyTypePtrInput is an input type that accepts NamespaceCustomerManagedKeyTypeArgs, NamespaceCustomerManagedKeyTypePtr and NamespaceCustomerManagedKeyTypePtrOutput values.
// You can construct a concrete instance of `NamespaceCustomerManagedKeyTypePtrInput` via:
//
//	        NamespaceCustomerManagedKeyTypeArgs{...}
//
//	or:
//
//	        nil
type NamespaceCustomerManagedKeyTypePtrInput interface {
	pulumi.Input

	ToNamespaceCustomerManagedKeyTypePtrOutput() NamespaceCustomerManagedKeyTypePtrOutput
	ToNamespaceCustomerManagedKeyTypePtrOutputWithContext(context.Context) NamespaceCustomerManagedKeyTypePtrOutput
}

type namespaceCustomerManagedKeyTypePtrType NamespaceCustomerManagedKeyTypeArgs

func NamespaceCustomerManagedKeyTypePtr(v *NamespaceCustomerManagedKeyTypeArgs) NamespaceCustomerManagedKeyTypePtrInput {
	return (*namespaceCustomerManagedKeyTypePtrType)(v)
}

func (*namespaceCustomerManagedKeyTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceCustomerManagedKeyType)(nil)).Elem()
}

func (i *namespaceCustomerManagedKeyTypePtrType) ToNamespaceCustomerManagedKeyTypePtrOutput() NamespaceCustomerManagedKeyTypePtrOutput {
	return i.ToNamespaceCustomerManagedKeyTypePtrOutputWithContext(context.Background())
}

func (i *namespaceCustomerManagedKeyTypePtrType) ToNamespaceCustomerManagedKeyTypePtrOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCustomerManagedKeyTypePtrOutput)
}

func (i *namespaceCustomerManagedKeyTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*NamespaceCustomerManagedKeyType] {
	return pulumix.Output[*NamespaceCustomerManagedKeyType]{
		OutputState: i.ToNamespaceCustomerManagedKeyTypePtrOutputWithContext(ctx).OutputState,
	}
}

type NamespaceCustomerManagedKeyTypeOutput struct{ *pulumi.OutputState }

func (NamespaceCustomerManagedKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceCustomerManagedKeyType)(nil)).Elem()
}

func (o NamespaceCustomerManagedKeyTypeOutput) ToNamespaceCustomerManagedKeyTypeOutput() NamespaceCustomerManagedKeyTypeOutput {
	return o
}

func (o NamespaceCustomerManagedKeyTypeOutput) ToNamespaceCustomerManagedKeyTypeOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyTypeOutput {
	return o
}

func (o NamespaceCustomerManagedKeyTypeOutput) ToNamespaceCustomerManagedKeyTypePtrOutput() NamespaceCustomerManagedKeyTypePtrOutput {
	return o.ToNamespaceCustomerManagedKeyTypePtrOutputWithContext(context.Background())
}

func (o NamespaceCustomerManagedKeyTypeOutput) ToNamespaceCustomerManagedKeyTypePtrOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceCustomerManagedKeyType) *NamespaceCustomerManagedKeyType {
		return &v
	}).(NamespaceCustomerManagedKeyTypePtrOutput)
}

func (o NamespaceCustomerManagedKeyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[NamespaceCustomerManagedKeyType] {
	return pulumix.Output[NamespaceCustomerManagedKeyType]{
		OutputState: o.OutputState,
	}
}

// The ID of the User Assigned Identity that has access to the key.
func (o NamespaceCustomerManagedKeyTypeOutput) IdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceCustomerManagedKeyType) string { return v.IdentityId }).(pulumi.StringOutput)
}

// Used to specify whether enable Infrastructure Encryption (Double Encryption). Changing this forces a new resource to be created.
func (o NamespaceCustomerManagedKeyTypeOutput) InfrastructureEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NamespaceCustomerManagedKeyType) *bool { return v.InfrastructureEncryptionEnabled }).(pulumi.BoolPtrOutput)
}

// The ID of the Key Vault Key which should be used to Encrypt the data in this ServiceBus Namespace.
func (o NamespaceCustomerManagedKeyTypeOutput) KeyVaultKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceCustomerManagedKeyType) string { return v.KeyVaultKeyId }).(pulumi.StringOutput)
}

type NamespaceCustomerManagedKeyTypePtrOutput struct{ *pulumi.OutputState }

func (NamespaceCustomerManagedKeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceCustomerManagedKeyType)(nil)).Elem()
}

func (o NamespaceCustomerManagedKeyTypePtrOutput) ToNamespaceCustomerManagedKeyTypePtrOutput() NamespaceCustomerManagedKeyTypePtrOutput {
	return o
}

func (o NamespaceCustomerManagedKeyTypePtrOutput) ToNamespaceCustomerManagedKeyTypePtrOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyTypePtrOutput {
	return o
}

func (o NamespaceCustomerManagedKeyTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NamespaceCustomerManagedKeyType] {
	return pulumix.Output[*NamespaceCustomerManagedKeyType]{
		OutputState: o.OutputState,
	}
}

func (o NamespaceCustomerManagedKeyTypePtrOutput) Elem() NamespaceCustomerManagedKeyTypeOutput {
	return o.ApplyT(func(v *NamespaceCustomerManagedKeyType) NamespaceCustomerManagedKeyType {
		if v != nil {
			return *v
		}
		var ret NamespaceCustomerManagedKeyType
		return ret
	}).(NamespaceCustomerManagedKeyTypeOutput)
}

// The ID of the User Assigned Identity that has access to the key.
func (o NamespaceCustomerManagedKeyTypePtrOutput) IdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceCustomerManagedKeyType) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityId
	}).(pulumi.StringPtrOutput)
}

// Used to specify whether enable Infrastructure Encryption (Double Encryption). Changing this forces a new resource to be created.
func (o NamespaceCustomerManagedKeyTypePtrOutput) InfrastructureEncryptionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NamespaceCustomerManagedKeyType) *bool {
		if v == nil {
			return nil
		}
		return v.InfrastructureEncryptionEnabled
	}).(pulumi.BoolPtrOutput)
}

// The ID of the Key Vault Key which should be used to Encrypt the data in this ServiceBus Namespace.
func (o NamespaceCustomerManagedKeyTypePtrOutput) KeyVaultKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceCustomerManagedKeyType) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultKeyId
	}).(pulumi.StringPtrOutput)
}

type NamespaceIdentity struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this ServiceBus namespace.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this ServiceBus Namespace.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this ServiceBus Namespace.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this ServiceBus Namespace. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
	Type string `pulumi:"type"`
}

// NamespaceIdentityInput is an input type that accepts NamespaceIdentityArgs and NamespaceIdentityOutput values.
// You can construct a concrete instance of `NamespaceIdentityInput` via:
//
//	NamespaceIdentityArgs{...}
type NamespaceIdentityInput interface {
	pulumi.Input

	ToNamespaceIdentityOutput() NamespaceIdentityOutput
	ToNamespaceIdentityOutputWithContext(context.Context) NamespaceIdentityOutput
}

type NamespaceIdentityArgs struct {
	// Specifies a list of User Assigned Managed Identity IDs to be assigned to this ServiceBus namespace.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID for the Service Principal associated with the Managed Service Identity of this ServiceBus Namespace.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID for the Service Principal associated with the Managed Service Identity of this ServiceBus Namespace.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this ServiceBus Namespace. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
	Type pulumi.StringInput `pulumi:"type"`
}

func (NamespaceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceIdentity)(nil)).Elem()
}

func (i NamespaceIdentityArgs) ToNamespaceIdentityOutput() NamespaceIdentityOutput {
	return i.ToNamespaceIdentityOutputWithContext(context.Background())
}

func (i NamespaceIdentityArgs) ToNamespaceIdentityOutputWithContext(ctx context.Context) NamespaceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIdentityOutput)
}

func (i NamespaceIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[NamespaceIdentity] {
	return pulumix.Output[NamespaceIdentity]{
		OutputState: i.ToNamespaceIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i NamespaceIdentityArgs) ToNamespaceIdentityPtrOutput() NamespaceIdentityPtrOutput {
	return i.ToNamespaceIdentityPtrOutputWithContext(context.Background())
}

func (i NamespaceIdentityArgs) ToNamespaceIdentityPtrOutputWithContext(ctx context.Context) NamespaceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIdentityOutput).ToNamespaceIdentityPtrOutputWithContext(ctx)
}

// NamespaceIdentityPtrInput is an input type that accepts NamespaceIdentityArgs, NamespaceIdentityPtr and NamespaceIdentityPtrOutput values.
// You can construct a concrete instance of `NamespaceIdentityPtrInput` via:
//
//	        NamespaceIdentityArgs{...}
//
//	or:
//
//	        nil
type NamespaceIdentityPtrInput interface {
	pulumi.Input

	ToNamespaceIdentityPtrOutput() NamespaceIdentityPtrOutput
	ToNamespaceIdentityPtrOutputWithContext(context.Context) NamespaceIdentityPtrOutput
}

type namespaceIdentityPtrType NamespaceIdentityArgs

func NamespaceIdentityPtr(v *NamespaceIdentityArgs) NamespaceIdentityPtrInput {
	return (*namespaceIdentityPtrType)(v)
}

func (*namespaceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceIdentity)(nil)).Elem()
}

func (i *namespaceIdentityPtrType) ToNamespaceIdentityPtrOutput() NamespaceIdentityPtrOutput {
	return i.ToNamespaceIdentityPtrOutputWithContext(context.Background())
}

func (i *namespaceIdentityPtrType) ToNamespaceIdentityPtrOutputWithContext(ctx context.Context) NamespaceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceIdentityPtrOutput)
}

func (i *namespaceIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*NamespaceIdentity] {
	return pulumix.Output[*NamespaceIdentity]{
		OutputState: i.ToNamespaceIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

type NamespaceIdentityOutput struct{ *pulumi.OutputState }

func (NamespaceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceIdentity)(nil)).Elem()
}

func (o NamespaceIdentityOutput) ToNamespaceIdentityOutput() NamespaceIdentityOutput {
	return o
}

func (o NamespaceIdentityOutput) ToNamespaceIdentityOutputWithContext(ctx context.Context) NamespaceIdentityOutput {
	return o
}

func (o NamespaceIdentityOutput) ToNamespaceIdentityPtrOutput() NamespaceIdentityPtrOutput {
	return o.ToNamespaceIdentityPtrOutputWithContext(context.Background())
}

func (o NamespaceIdentityOutput) ToNamespaceIdentityPtrOutputWithContext(ctx context.Context) NamespaceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceIdentity) *NamespaceIdentity {
		return &v
	}).(NamespaceIdentityPtrOutput)
}

func (o NamespaceIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[NamespaceIdentity] {
	return pulumix.Output[NamespaceIdentity]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this ServiceBus namespace.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o NamespaceIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamespaceIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this ServiceBus Namespace.
func (o NamespaceIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Managed Service Identity of this ServiceBus Namespace.
func (o NamespaceIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this ServiceBus Namespace. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
func (o NamespaceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type NamespaceIdentityPtrOutput struct{ *pulumi.OutputState }

func (NamespaceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceIdentity)(nil)).Elem()
}

func (o NamespaceIdentityPtrOutput) ToNamespaceIdentityPtrOutput() NamespaceIdentityPtrOutput {
	return o
}

func (o NamespaceIdentityPtrOutput) ToNamespaceIdentityPtrOutputWithContext(ctx context.Context) NamespaceIdentityPtrOutput {
	return o
}

func (o NamespaceIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NamespaceIdentity] {
	return pulumix.Output[*NamespaceIdentity]{
		OutputState: o.OutputState,
	}
}

func (o NamespaceIdentityPtrOutput) Elem() NamespaceIdentityOutput {
	return o.ApplyT(func(v *NamespaceIdentity) NamespaceIdentity {
		if v != nil {
			return *v
		}
		var ret NamespaceIdentity
		return ret
	}).(NamespaceIdentityOutput)
}

// Specifies a list of User Assigned Managed Identity IDs to be assigned to this ServiceBus namespace.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned` or `SystemAssigned, UserAssigned`.
func (o NamespaceIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NamespaceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID for the Service Principal associated with the Managed Service Identity of this ServiceBus Namespace.
func (o NamespaceIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID for the Service Principal associated with the Managed Service Identity of this ServiceBus Namespace.
func (o NamespaceIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this ServiceBus Namespace. Possible values are `SystemAssigned`, `UserAssigned`, `SystemAssigned, UserAssigned` (to enable both).
func (o NamespaceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type NamespaceNetworkRuleSet struct {
	// Specifies the default action for the Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Allow`.
	DefaultAction *string `pulumi:"defaultAction"`
	// One or more IP Addresses, or CIDR Blocks which should be able to access the ServiceBus Namespace.
	IpRules []string `pulumi:"ipRules"`
	// One or more `networkRules` blocks as defined below.
	NetworkRules []NamespaceNetworkRuleSetNetworkRule `pulumi:"networkRules"`
	// Whether to allow traffic over public network. Possible values are `true` and `false`. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// Are Azure Services that are known and trusted for this resource type are allowed to bypass firewall configuration? See [Trusted Microsoft Services](https://github.com/MicrosoftDocs/azure-docs/blob/master/articles/service-bus-messaging/includes/service-bus-trusted-services.md)
	TrustedServicesAllowed *bool `pulumi:"trustedServicesAllowed"`
}

// NamespaceNetworkRuleSetInput is an input type that accepts NamespaceNetworkRuleSetArgs and NamespaceNetworkRuleSetOutput values.
// You can construct a concrete instance of `NamespaceNetworkRuleSetInput` via:
//
//	NamespaceNetworkRuleSetArgs{...}
type NamespaceNetworkRuleSetInput interface {
	pulumi.Input

	ToNamespaceNetworkRuleSetOutput() NamespaceNetworkRuleSetOutput
	ToNamespaceNetworkRuleSetOutputWithContext(context.Context) NamespaceNetworkRuleSetOutput
}

type NamespaceNetworkRuleSetArgs struct {
	// Specifies the default action for the Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Allow`.
	DefaultAction pulumi.StringPtrInput `pulumi:"defaultAction"`
	// One or more IP Addresses, or CIDR Blocks which should be able to access the ServiceBus Namespace.
	IpRules pulumi.StringArrayInput `pulumi:"ipRules"`
	// One or more `networkRules` blocks as defined below.
	NetworkRules NamespaceNetworkRuleSetNetworkRuleArrayInput `pulumi:"networkRules"`
	// Whether to allow traffic over public network. Possible values are `true` and `false`. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput `pulumi:"publicNetworkAccessEnabled"`
	// Are Azure Services that are known and trusted for this resource type are allowed to bypass firewall configuration? See [Trusted Microsoft Services](https://github.com/MicrosoftDocs/azure-docs/blob/master/articles/service-bus-messaging/includes/service-bus-trusted-services.md)
	TrustedServicesAllowed pulumi.BoolPtrInput `pulumi:"trustedServicesAllowed"`
}

func (NamespaceNetworkRuleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceNetworkRuleSet)(nil)).Elem()
}

func (i NamespaceNetworkRuleSetArgs) ToNamespaceNetworkRuleSetOutput() NamespaceNetworkRuleSetOutput {
	return i.ToNamespaceNetworkRuleSetOutputWithContext(context.Background())
}

func (i NamespaceNetworkRuleSetArgs) ToNamespaceNetworkRuleSetOutputWithContext(ctx context.Context) NamespaceNetworkRuleSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceNetworkRuleSetOutput)
}

func (i NamespaceNetworkRuleSetArgs) ToOutput(ctx context.Context) pulumix.Output[NamespaceNetworkRuleSet] {
	return pulumix.Output[NamespaceNetworkRuleSet]{
		OutputState: i.ToNamespaceNetworkRuleSetOutputWithContext(ctx).OutputState,
	}
}

func (i NamespaceNetworkRuleSetArgs) ToNamespaceNetworkRuleSetPtrOutput() NamespaceNetworkRuleSetPtrOutput {
	return i.ToNamespaceNetworkRuleSetPtrOutputWithContext(context.Background())
}

func (i NamespaceNetworkRuleSetArgs) ToNamespaceNetworkRuleSetPtrOutputWithContext(ctx context.Context) NamespaceNetworkRuleSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceNetworkRuleSetOutput).ToNamespaceNetworkRuleSetPtrOutputWithContext(ctx)
}

// NamespaceNetworkRuleSetPtrInput is an input type that accepts NamespaceNetworkRuleSetArgs, NamespaceNetworkRuleSetPtr and NamespaceNetworkRuleSetPtrOutput values.
// You can construct a concrete instance of `NamespaceNetworkRuleSetPtrInput` via:
//
//	        NamespaceNetworkRuleSetArgs{...}
//
//	or:
//
//	        nil
type NamespaceNetworkRuleSetPtrInput interface {
	pulumi.Input

	ToNamespaceNetworkRuleSetPtrOutput() NamespaceNetworkRuleSetPtrOutput
	ToNamespaceNetworkRuleSetPtrOutputWithContext(context.Context) NamespaceNetworkRuleSetPtrOutput
}

type namespaceNetworkRuleSetPtrType NamespaceNetworkRuleSetArgs

func NamespaceNetworkRuleSetPtr(v *NamespaceNetworkRuleSetArgs) NamespaceNetworkRuleSetPtrInput {
	return (*namespaceNetworkRuleSetPtrType)(v)
}

func (*namespaceNetworkRuleSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceNetworkRuleSet)(nil)).Elem()
}

func (i *namespaceNetworkRuleSetPtrType) ToNamespaceNetworkRuleSetPtrOutput() NamespaceNetworkRuleSetPtrOutput {
	return i.ToNamespaceNetworkRuleSetPtrOutputWithContext(context.Background())
}

func (i *namespaceNetworkRuleSetPtrType) ToNamespaceNetworkRuleSetPtrOutputWithContext(ctx context.Context) NamespaceNetworkRuleSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceNetworkRuleSetPtrOutput)
}

func (i *namespaceNetworkRuleSetPtrType) ToOutput(ctx context.Context) pulumix.Output[*NamespaceNetworkRuleSet] {
	return pulumix.Output[*NamespaceNetworkRuleSet]{
		OutputState: i.ToNamespaceNetworkRuleSetPtrOutputWithContext(ctx).OutputState,
	}
}

type NamespaceNetworkRuleSetOutput struct{ *pulumi.OutputState }

func (NamespaceNetworkRuleSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceNetworkRuleSet)(nil)).Elem()
}

func (o NamespaceNetworkRuleSetOutput) ToNamespaceNetworkRuleSetOutput() NamespaceNetworkRuleSetOutput {
	return o
}

func (o NamespaceNetworkRuleSetOutput) ToNamespaceNetworkRuleSetOutputWithContext(ctx context.Context) NamespaceNetworkRuleSetOutput {
	return o
}

func (o NamespaceNetworkRuleSetOutput) ToNamespaceNetworkRuleSetPtrOutput() NamespaceNetworkRuleSetPtrOutput {
	return o.ToNamespaceNetworkRuleSetPtrOutputWithContext(context.Background())
}

func (o NamespaceNetworkRuleSetOutput) ToNamespaceNetworkRuleSetPtrOutputWithContext(ctx context.Context) NamespaceNetworkRuleSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NamespaceNetworkRuleSet) *NamespaceNetworkRuleSet {
		return &v
	}).(NamespaceNetworkRuleSetPtrOutput)
}

func (o NamespaceNetworkRuleSetOutput) ToOutput(ctx context.Context) pulumix.Output[NamespaceNetworkRuleSet] {
	return pulumix.Output[NamespaceNetworkRuleSet]{
		OutputState: o.OutputState,
	}
}

// Specifies the default action for the Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Allow`.
func (o NamespaceNetworkRuleSetOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamespaceNetworkRuleSet) *string { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// One or more IP Addresses, or CIDR Blocks which should be able to access the ServiceBus Namespace.
func (o NamespaceNetworkRuleSetOutput) IpRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NamespaceNetworkRuleSet) []string { return v.IpRules }).(pulumi.StringArrayOutput)
}

// One or more `networkRules` blocks as defined below.
func (o NamespaceNetworkRuleSetOutput) NetworkRules() NamespaceNetworkRuleSetNetworkRuleArrayOutput {
	return o.ApplyT(func(v NamespaceNetworkRuleSet) []NamespaceNetworkRuleSetNetworkRule { return v.NetworkRules }).(NamespaceNetworkRuleSetNetworkRuleArrayOutput)
}

// Whether to allow traffic over public network. Possible values are `true` and `false`. Defaults to `true`.
func (o NamespaceNetworkRuleSetOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NamespaceNetworkRuleSet) *bool { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// Are Azure Services that are known and trusted for this resource type are allowed to bypass firewall configuration? See [Trusted Microsoft Services](https://github.com/MicrosoftDocs/azure-docs/blob/master/articles/service-bus-messaging/includes/service-bus-trusted-services.md)
func (o NamespaceNetworkRuleSetOutput) TrustedServicesAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NamespaceNetworkRuleSet) *bool { return v.TrustedServicesAllowed }).(pulumi.BoolPtrOutput)
}

type NamespaceNetworkRuleSetPtrOutput struct{ *pulumi.OutputState }

func (NamespaceNetworkRuleSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceNetworkRuleSet)(nil)).Elem()
}

func (o NamespaceNetworkRuleSetPtrOutput) ToNamespaceNetworkRuleSetPtrOutput() NamespaceNetworkRuleSetPtrOutput {
	return o
}

func (o NamespaceNetworkRuleSetPtrOutput) ToNamespaceNetworkRuleSetPtrOutputWithContext(ctx context.Context) NamespaceNetworkRuleSetPtrOutput {
	return o
}

func (o NamespaceNetworkRuleSetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NamespaceNetworkRuleSet] {
	return pulumix.Output[*NamespaceNetworkRuleSet]{
		OutputState: o.OutputState,
	}
}

func (o NamespaceNetworkRuleSetPtrOutput) Elem() NamespaceNetworkRuleSetOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) NamespaceNetworkRuleSet {
		if v != nil {
			return *v
		}
		var ret NamespaceNetworkRuleSet
		return ret
	}).(NamespaceNetworkRuleSetOutput)
}

// Specifies the default action for the Network Rule Set. Possible values are `Allow` and `Deny`. Defaults to `Allow`.
func (o NamespaceNetworkRuleSetPtrOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) *string {
		if v == nil {
			return nil
		}
		return v.DefaultAction
	}).(pulumi.StringPtrOutput)
}

// One or more IP Addresses, or CIDR Blocks which should be able to access the ServiceBus Namespace.
func (o NamespaceNetworkRuleSetPtrOutput) IpRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) []string {
		if v == nil {
			return nil
		}
		return v.IpRules
	}).(pulumi.StringArrayOutput)
}

// One or more `networkRules` blocks as defined below.
func (o NamespaceNetworkRuleSetPtrOutput) NetworkRules() NamespaceNetworkRuleSetNetworkRuleArrayOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) []NamespaceNetworkRuleSetNetworkRule {
		if v == nil {
			return nil
		}
		return v.NetworkRules
	}).(NamespaceNetworkRuleSetNetworkRuleArrayOutput)
}

// Whether to allow traffic over public network. Possible values are `true` and `false`. Defaults to `true`.
func (o NamespaceNetworkRuleSetPtrOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) *bool {
		if v == nil {
			return nil
		}
		return v.PublicNetworkAccessEnabled
	}).(pulumi.BoolPtrOutput)
}

// Are Azure Services that are known and trusted for this resource type are allowed to bypass firewall configuration? See [Trusted Microsoft Services](https://github.com/MicrosoftDocs/azure-docs/blob/master/articles/service-bus-messaging/includes/service-bus-trusted-services.md)
func (o NamespaceNetworkRuleSetPtrOutput) TrustedServicesAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NamespaceNetworkRuleSet) *bool {
		if v == nil {
			return nil
		}
		return v.TrustedServicesAllowed
	}).(pulumi.BoolPtrOutput)
}

type NamespaceNetworkRuleSetNetworkRule struct {
	// Should the ServiceBus Namespace Network Rule Set ignore missing Virtual Network Service Endpoint option in the Subnet? Defaults to `false`.
	IgnoreMissingVnetServiceEndpoint *bool `pulumi:"ignoreMissingVnetServiceEndpoint"`
	// The Subnet ID which should be able to access this ServiceBus Namespace.
	SubnetId string `pulumi:"subnetId"`
}

// NamespaceNetworkRuleSetNetworkRuleInput is an input type that accepts NamespaceNetworkRuleSetNetworkRuleArgs and NamespaceNetworkRuleSetNetworkRuleOutput values.
// You can construct a concrete instance of `NamespaceNetworkRuleSetNetworkRuleInput` via:
//
//	NamespaceNetworkRuleSetNetworkRuleArgs{...}
type NamespaceNetworkRuleSetNetworkRuleInput interface {
	pulumi.Input

	ToNamespaceNetworkRuleSetNetworkRuleOutput() NamespaceNetworkRuleSetNetworkRuleOutput
	ToNamespaceNetworkRuleSetNetworkRuleOutputWithContext(context.Context) NamespaceNetworkRuleSetNetworkRuleOutput
}

type NamespaceNetworkRuleSetNetworkRuleArgs struct {
	// Should the ServiceBus Namespace Network Rule Set ignore missing Virtual Network Service Endpoint option in the Subnet? Defaults to `false`.
	IgnoreMissingVnetServiceEndpoint pulumi.BoolPtrInput `pulumi:"ignoreMissingVnetServiceEndpoint"`
	// The Subnet ID which should be able to access this ServiceBus Namespace.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (NamespaceNetworkRuleSetNetworkRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceNetworkRuleSetNetworkRule)(nil)).Elem()
}

func (i NamespaceNetworkRuleSetNetworkRuleArgs) ToNamespaceNetworkRuleSetNetworkRuleOutput() NamespaceNetworkRuleSetNetworkRuleOutput {
	return i.ToNamespaceNetworkRuleSetNetworkRuleOutputWithContext(context.Background())
}

func (i NamespaceNetworkRuleSetNetworkRuleArgs) ToNamespaceNetworkRuleSetNetworkRuleOutputWithContext(ctx context.Context) NamespaceNetworkRuleSetNetworkRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceNetworkRuleSetNetworkRuleOutput)
}

func (i NamespaceNetworkRuleSetNetworkRuleArgs) ToOutput(ctx context.Context) pulumix.Output[NamespaceNetworkRuleSetNetworkRule] {
	return pulumix.Output[NamespaceNetworkRuleSetNetworkRule]{
		OutputState: i.ToNamespaceNetworkRuleSetNetworkRuleOutputWithContext(ctx).OutputState,
	}
}

// NamespaceNetworkRuleSetNetworkRuleArrayInput is an input type that accepts NamespaceNetworkRuleSetNetworkRuleArray and NamespaceNetworkRuleSetNetworkRuleArrayOutput values.
// You can construct a concrete instance of `NamespaceNetworkRuleSetNetworkRuleArrayInput` via:
//
//	NamespaceNetworkRuleSetNetworkRuleArray{ NamespaceNetworkRuleSetNetworkRuleArgs{...} }
type NamespaceNetworkRuleSetNetworkRuleArrayInput interface {
	pulumi.Input

	ToNamespaceNetworkRuleSetNetworkRuleArrayOutput() NamespaceNetworkRuleSetNetworkRuleArrayOutput
	ToNamespaceNetworkRuleSetNetworkRuleArrayOutputWithContext(context.Context) NamespaceNetworkRuleSetNetworkRuleArrayOutput
}

type NamespaceNetworkRuleSetNetworkRuleArray []NamespaceNetworkRuleSetNetworkRuleInput

func (NamespaceNetworkRuleSetNetworkRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceNetworkRuleSetNetworkRule)(nil)).Elem()
}

func (i NamespaceNetworkRuleSetNetworkRuleArray) ToNamespaceNetworkRuleSetNetworkRuleArrayOutput() NamespaceNetworkRuleSetNetworkRuleArrayOutput {
	return i.ToNamespaceNetworkRuleSetNetworkRuleArrayOutputWithContext(context.Background())
}

func (i NamespaceNetworkRuleSetNetworkRuleArray) ToNamespaceNetworkRuleSetNetworkRuleArrayOutputWithContext(ctx context.Context) NamespaceNetworkRuleSetNetworkRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceNetworkRuleSetNetworkRuleArrayOutput)
}

func (i NamespaceNetworkRuleSetNetworkRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]NamespaceNetworkRuleSetNetworkRule] {
	return pulumix.Output[[]NamespaceNetworkRuleSetNetworkRule]{
		OutputState: i.ToNamespaceNetworkRuleSetNetworkRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type NamespaceNetworkRuleSetNetworkRuleOutput struct{ *pulumi.OutputState }

func (NamespaceNetworkRuleSetNetworkRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceNetworkRuleSetNetworkRule)(nil)).Elem()
}

func (o NamespaceNetworkRuleSetNetworkRuleOutput) ToNamespaceNetworkRuleSetNetworkRuleOutput() NamespaceNetworkRuleSetNetworkRuleOutput {
	return o
}

func (o NamespaceNetworkRuleSetNetworkRuleOutput) ToNamespaceNetworkRuleSetNetworkRuleOutputWithContext(ctx context.Context) NamespaceNetworkRuleSetNetworkRuleOutput {
	return o
}

func (o NamespaceNetworkRuleSetNetworkRuleOutput) ToOutput(ctx context.Context) pulumix.Output[NamespaceNetworkRuleSetNetworkRule] {
	return pulumix.Output[NamespaceNetworkRuleSetNetworkRule]{
		OutputState: o.OutputState,
	}
}

// Should the ServiceBus Namespace Network Rule Set ignore missing Virtual Network Service Endpoint option in the Subnet? Defaults to `false`.
func (o NamespaceNetworkRuleSetNetworkRuleOutput) IgnoreMissingVnetServiceEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NamespaceNetworkRuleSetNetworkRule) *bool { return v.IgnoreMissingVnetServiceEndpoint }).(pulumi.BoolPtrOutput)
}

// The Subnet ID which should be able to access this ServiceBus Namespace.
func (o NamespaceNetworkRuleSetNetworkRuleOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceNetworkRuleSetNetworkRule) string { return v.SubnetId }).(pulumi.StringOutput)
}

type NamespaceNetworkRuleSetNetworkRuleArrayOutput struct{ *pulumi.OutputState }

func (NamespaceNetworkRuleSetNetworkRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceNetworkRuleSetNetworkRule)(nil)).Elem()
}

func (o NamespaceNetworkRuleSetNetworkRuleArrayOutput) ToNamespaceNetworkRuleSetNetworkRuleArrayOutput() NamespaceNetworkRuleSetNetworkRuleArrayOutput {
	return o
}

func (o NamespaceNetworkRuleSetNetworkRuleArrayOutput) ToNamespaceNetworkRuleSetNetworkRuleArrayOutputWithContext(ctx context.Context) NamespaceNetworkRuleSetNetworkRuleArrayOutput {
	return o
}

func (o NamespaceNetworkRuleSetNetworkRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NamespaceNetworkRuleSetNetworkRule] {
	return pulumix.Output[[]NamespaceNetworkRuleSetNetworkRule]{
		OutputState: o.OutputState,
	}
}

func (o NamespaceNetworkRuleSetNetworkRuleArrayOutput) Index(i pulumi.IntInput) NamespaceNetworkRuleSetNetworkRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespaceNetworkRuleSetNetworkRule {
		return vs[0].([]NamespaceNetworkRuleSetNetworkRule)[vs[1].(int)]
	}).(NamespaceNetworkRuleSetNetworkRuleOutput)
}

type SubscriptionClientScopedSubscription struct {
	// Specifies the Client ID of the application that created the client-scoped subscription. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Client ID can be null or empty, but it must match the client ID set on the JMS client application. From the Azure Service Bus perspective, a null client ID and an empty client id have the same behavior. If the client ID is set to null or empty, it is only accessible to client applications whose client ID is also set to null or empty.
	ClientId *string `pulumi:"clientId"`
	// Whether the client scoped subscription is durable. This property can only be controlled from the application side.
	IsClientScopedSubscriptionDurable *bool `pulumi:"isClientScopedSubscriptionDurable"`
	// Whether the client scoped subscription is shareable. Defaults to `true` Changing this forces a new resource to be created.
	IsClientScopedSubscriptionShareable *bool `pulumi:"isClientScopedSubscriptionShareable"`
}

// SubscriptionClientScopedSubscriptionInput is an input type that accepts SubscriptionClientScopedSubscriptionArgs and SubscriptionClientScopedSubscriptionOutput values.
// You can construct a concrete instance of `SubscriptionClientScopedSubscriptionInput` via:
//
//	SubscriptionClientScopedSubscriptionArgs{...}
type SubscriptionClientScopedSubscriptionInput interface {
	pulumi.Input

	ToSubscriptionClientScopedSubscriptionOutput() SubscriptionClientScopedSubscriptionOutput
	ToSubscriptionClientScopedSubscriptionOutputWithContext(context.Context) SubscriptionClientScopedSubscriptionOutput
}

type SubscriptionClientScopedSubscriptionArgs struct {
	// Specifies the Client ID of the application that created the client-scoped subscription. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Client ID can be null or empty, but it must match the client ID set on the JMS client application. From the Azure Service Bus perspective, a null client ID and an empty client id have the same behavior. If the client ID is set to null or empty, it is only accessible to client applications whose client ID is also set to null or empty.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Whether the client scoped subscription is durable. This property can only be controlled from the application side.
	IsClientScopedSubscriptionDurable pulumi.BoolPtrInput `pulumi:"isClientScopedSubscriptionDurable"`
	// Whether the client scoped subscription is shareable. Defaults to `true` Changing this forces a new resource to be created.
	IsClientScopedSubscriptionShareable pulumi.BoolPtrInput `pulumi:"isClientScopedSubscriptionShareable"`
}

func (SubscriptionClientScopedSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionClientScopedSubscription)(nil)).Elem()
}

func (i SubscriptionClientScopedSubscriptionArgs) ToSubscriptionClientScopedSubscriptionOutput() SubscriptionClientScopedSubscriptionOutput {
	return i.ToSubscriptionClientScopedSubscriptionOutputWithContext(context.Background())
}

func (i SubscriptionClientScopedSubscriptionArgs) ToSubscriptionClientScopedSubscriptionOutputWithContext(ctx context.Context) SubscriptionClientScopedSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionClientScopedSubscriptionOutput)
}

func (i SubscriptionClientScopedSubscriptionArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionClientScopedSubscription] {
	return pulumix.Output[SubscriptionClientScopedSubscription]{
		OutputState: i.ToSubscriptionClientScopedSubscriptionOutputWithContext(ctx).OutputState,
	}
}

func (i SubscriptionClientScopedSubscriptionArgs) ToSubscriptionClientScopedSubscriptionPtrOutput() SubscriptionClientScopedSubscriptionPtrOutput {
	return i.ToSubscriptionClientScopedSubscriptionPtrOutputWithContext(context.Background())
}

func (i SubscriptionClientScopedSubscriptionArgs) ToSubscriptionClientScopedSubscriptionPtrOutputWithContext(ctx context.Context) SubscriptionClientScopedSubscriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionClientScopedSubscriptionOutput).ToSubscriptionClientScopedSubscriptionPtrOutputWithContext(ctx)
}

// SubscriptionClientScopedSubscriptionPtrInput is an input type that accepts SubscriptionClientScopedSubscriptionArgs, SubscriptionClientScopedSubscriptionPtr and SubscriptionClientScopedSubscriptionPtrOutput values.
// You can construct a concrete instance of `SubscriptionClientScopedSubscriptionPtrInput` via:
//
//	        SubscriptionClientScopedSubscriptionArgs{...}
//
//	or:
//
//	        nil
type SubscriptionClientScopedSubscriptionPtrInput interface {
	pulumi.Input

	ToSubscriptionClientScopedSubscriptionPtrOutput() SubscriptionClientScopedSubscriptionPtrOutput
	ToSubscriptionClientScopedSubscriptionPtrOutputWithContext(context.Context) SubscriptionClientScopedSubscriptionPtrOutput
}

type subscriptionClientScopedSubscriptionPtrType SubscriptionClientScopedSubscriptionArgs

func SubscriptionClientScopedSubscriptionPtr(v *SubscriptionClientScopedSubscriptionArgs) SubscriptionClientScopedSubscriptionPtrInput {
	return (*subscriptionClientScopedSubscriptionPtrType)(v)
}

func (*subscriptionClientScopedSubscriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionClientScopedSubscription)(nil)).Elem()
}

func (i *subscriptionClientScopedSubscriptionPtrType) ToSubscriptionClientScopedSubscriptionPtrOutput() SubscriptionClientScopedSubscriptionPtrOutput {
	return i.ToSubscriptionClientScopedSubscriptionPtrOutputWithContext(context.Background())
}

func (i *subscriptionClientScopedSubscriptionPtrType) ToSubscriptionClientScopedSubscriptionPtrOutputWithContext(ctx context.Context) SubscriptionClientScopedSubscriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionClientScopedSubscriptionPtrOutput)
}

func (i *subscriptionClientScopedSubscriptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionClientScopedSubscription] {
	return pulumix.Output[*SubscriptionClientScopedSubscription]{
		OutputState: i.ToSubscriptionClientScopedSubscriptionPtrOutputWithContext(ctx).OutputState,
	}
}

type SubscriptionClientScopedSubscriptionOutput struct{ *pulumi.OutputState }

func (SubscriptionClientScopedSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionClientScopedSubscription)(nil)).Elem()
}

func (o SubscriptionClientScopedSubscriptionOutput) ToSubscriptionClientScopedSubscriptionOutput() SubscriptionClientScopedSubscriptionOutput {
	return o
}

func (o SubscriptionClientScopedSubscriptionOutput) ToSubscriptionClientScopedSubscriptionOutputWithContext(ctx context.Context) SubscriptionClientScopedSubscriptionOutput {
	return o
}

func (o SubscriptionClientScopedSubscriptionOutput) ToSubscriptionClientScopedSubscriptionPtrOutput() SubscriptionClientScopedSubscriptionPtrOutput {
	return o.ToSubscriptionClientScopedSubscriptionPtrOutputWithContext(context.Background())
}

func (o SubscriptionClientScopedSubscriptionOutput) ToSubscriptionClientScopedSubscriptionPtrOutputWithContext(ctx context.Context) SubscriptionClientScopedSubscriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionClientScopedSubscription) *SubscriptionClientScopedSubscription {
		return &v
	}).(SubscriptionClientScopedSubscriptionPtrOutput)
}

func (o SubscriptionClientScopedSubscriptionOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionClientScopedSubscription] {
	return pulumix.Output[SubscriptionClientScopedSubscription]{
		OutputState: o.OutputState,
	}
}

// Specifies the Client ID of the application that created the client-scoped subscription. Changing this forces a new resource to be created.
//
// > **NOTE:** Client ID can be null or empty, but it must match the client ID set on the JMS client application. From the Azure Service Bus perspective, a null client ID and an empty client id have the same behavior. If the client ID is set to null or empty, it is only accessible to client applications whose client ID is also set to null or empty.
func (o SubscriptionClientScopedSubscriptionOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionClientScopedSubscription) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Whether the client scoped subscription is durable. This property can only be controlled from the application side.
func (o SubscriptionClientScopedSubscriptionOutput) IsClientScopedSubscriptionDurable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionClientScopedSubscription) *bool { return v.IsClientScopedSubscriptionDurable }).(pulumi.BoolPtrOutput)
}

// Whether the client scoped subscription is shareable. Defaults to `true` Changing this forces a new resource to be created.
func (o SubscriptionClientScopedSubscriptionOutput) IsClientScopedSubscriptionShareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubscriptionClientScopedSubscription) *bool { return v.IsClientScopedSubscriptionShareable }).(pulumi.BoolPtrOutput)
}

type SubscriptionClientScopedSubscriptionPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionClientScopedSubscriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionClientScopedSubscription)(nil)).Elem()
}

func (o SubscriptionClientScopedSubscriptionPtrOutput) ToSubscriptionClientScopedSubscriptionPtrOutput() SubscriptionClientScopedSubscriptionPtrOutput {
	return o
}

func (o SubscriptionClientScopedSubscriptionPtrOutput) ToSubscriptionClientScopedSubscriptionPtrOutputWithContext(ctx context.Context) SubscriptionClientScopedSubscriptionPtrOutput {
	return o
}

func (o SubscriptionClientScopedSubscriptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionClientScopedSubscription] {
	return pulumix.Output[*SubscriptionClientScopedSubscription]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionClientScopedSubscriptionPtrOutput) Elem() SubscriptionClientScopedSubscriptionOutput {
	return o.ApplyT(func(v *SubscriptionClientScopedSubscription) SubscriptionClientScopedSubscription {
		if v != nil {
			return *v
		}
		var ret SubscriptionClientScopedSubscription
		return ret
	}).(SubscriptionClientScopedSubscriptionOutput)
}

// Specifies the Client ID of the application that created the client-scoped subscription. Changing this forces a new resource to be created.
//
// > **NOTE:** Client ID can be null or empty, but it must match the client ID set on the JMS client application. From the Azure Service Bus perspective, a null client ID and an empty client id have the same behavior. If the client ID is set to null or empty, it is only accessible to client applications whose client ID is also set to null or empty.
func (o SubscriptionClientScopedSubscriptionPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionClientScopedSubscription) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Whether the client scoped subscription is durable. This property can only be controlled from the application side.
func (o SubscriptionClientScopedSubscriptionPtrOutput) IsClientScopedSubscriptionDurable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionClientScopedSubscription) *bool {
		if v == nil {
			return nil
		}
		return v.IsClientScopedSubscriptionDurable
	}).(pulumi.BoolPtrOutput)
}

// Whether the client scoped subscription is shareable. Defaults to `true` Changing this forces a new resource to be created.
func (o SubscriptionClientScopedSubscriptionPtrOutput) IsClientScopedSubscriptionShareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionClientScopedSubscription) *bool {
		if v == nil {
			return nil
		}
		return v.IsClientScopedSubscriptionShareable
	}).(pulumi.BoolPtrOutput)
}

type SubscriptionRuleCorrelationFilter struct {
	// Content type of the message.
	ContentType *string `pulumi:"contentType"`
	// Identifier of the correlation.
	CorrelationId *string `pulumi:"correlationId"`
	// Application specific label.
	Label *string `pulumi:"label"`
	// Identifier of the message.
	MessageId *string `pulumi:"messageId"`
	// A list of user defined properties to be included in the filter. Specified as a map of name/value pairs.
	//
	// > **NOTE:** When creating a subscription rule of type `CorrelationFilter` at least one property must be set in the `correlationFilter` block.
	Properties map[string]string `pulumi:"properties"`
	// Address of the queue to reply to.
	ReplyTo *string `pulumi:"replyTo"`
	// Session identifier to reply to.
	ReplyToSessionId *string `pulumi:"replyToSessionId"`
	// Session identifier.
	SessionId *string `pulumi:"sessionId"`
	// Address to send to.
	To *string `pulumi:"to"`
}

// SubscriptionRuleCorrelationFilterInput is an input type that accepts SubscriptionRuleCorrelationFilterArgs and SubscriptionRuleCorrelationFilterOutput values.
// You can construct a concrete instance of `SubscriptionRuleCorrelationFilterInput` via:
//
//	SubscriptionRuleCorrelationFilterArgs{...}
type SubscriptionRuleCorrelationFilterInput interface {
	pulumi.Input

	ToSubscriptionRuleCorrelationFilterOutput() SubscriptionRuleCorrelationFilterOutput
	ToSubscriptionRuleCorrelationFilterOutputWithContext(context.Context) SubscriptionRuleCorrelationFilterOutput
}

type SubscriptionRuleCorrelationFilterArgs struct {
	// Content type of the message.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// Identifier of the correlation.
	CorrelationId pulumi.StringPtrInput `pulumi:"correlationId"`
	// Application specific label.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Identifier of the message.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// A list of user defined properties to be included in the filter. Specified as a map of name/value pairs.
	//
	// > **NOTE:** When creating a subscription rule of type `CorrelationFilter` at least one property must be set in the `correlationFilter` block.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Address of the queue to reply to.
	ReplyTo pulumi.StringPtrInput `pulumi:"replyTo"`
	// Session identifier to reply to.
	ReplyToSessionId pulumi.StringPtrInput `pulumi:"replyToSessionId"`
	// Session identifier.
	SessionId pulumi.StringPtrInput `pulumi:"sessionId"`
	// Address to send to.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (SubscriptionRuleCorrelationFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionRuleCorrelationFilter)(nil)).Elem()
}

func (i SubscriptionRuleCorrelationFilterArgs) ToSubscriptionRuleCorrelationFilterOutput() SubscriptionRuleCorrelationFilterOutput {
	return i.ToSubscriptionRuleCorrelationFilterOutputWithContext(context.Background())
}

func (i SubscriptionRuleCorrelationFilterArgs) ToSubscriptionRuleCorrelationFilterOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRuleCorrelationFilterOutput)
}

func (i SubscriptionRuleCorrelationFilterArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionRuleCorrelationFilter] {
	return pulumix.Output[SubscriptionRuleCorrelationFilter]{
		OutputState: i.ToSubscriptionRuleCorrelationFilterOutputWithContext(ctx).OutputState,
	}
}

func (i SubscriptionRuleCorrelationFilterArgs) ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput {
	return i.ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(context.Background())
}

func (i SubscriptionRuleCorrelationFilterArgs) ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRuleCorrelationFilterOutput).ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx)
}

// SubscriptionRuleCorrelationFilterPtrInput is an input type that accepts SubscriptionRuleCorrelationFilterArgs, SubscriptionRuleCorrelationFilterPtr and SubscriptionRuleCorrelationFilterPtrOutput values.
// You can construct a concrete instance of `SubscriptionRuleCorrelationFilterPtrInput` via:
//
//	        SubscriptionRuleCorrelationFilterArgs{...}
//
//	or:
//
//	        nil
type SubscriptionRuleCorrelationFilterPtrInput interface {
	pulumi.Input

	ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput
	ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(context.Context) SubscriptionRuleCorrelationFilterPtrOutput
}

type subscriptionRuleCorrelationFilterPtrType SubscriptionRuleCorrelationFilterArgs

func SubscriptionRuleCorrelationFilterPtr(v *SubscriptionRuleCorrelationFilterArgs) SubscriptionRuleCorrelationFilterPtrInput {
	return (*subscriptionRuleCorrelationFilterPtrType)(v)
}

func (*subscriptionRuleCorrelationFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionRuleCorrelationFilter)(nil)).Elem()
}

func (i *subscriptionRuleCorrelationFilterPtrType) ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput {
	return i.ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(context.Background())
}

func (i *subscriptionRuleCorrelationFilterPtrType) ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRuleCorrelationFilterPtrOutput)
}

func (i *subscriptionRuleCorrelationFilterPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionRuleCorrelationFilter] {
	return pulumix.Output[*SubscriptionRuleCorrelationFilter]{
		OutputState: i.ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx).OutputState,
	}
}

type SubscriptionRuleCorrelationFilterOutput struct{ *pulumi.OutputState }

func (SubscriptionRuleCorrelationFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionRuleCorrelationFilter)(nil)).Elem()
}

func (o SubscriptionRuleCorrelationFilterOutput) ToSubscriptionRuleCorrelationFilterOutput() SubscriptionRuleCorrelationFilterOutput {
	return o
}

func (o SubscriptionRuleCorrelationFilterOutput) ToSubscriptionRuleCorrelationFilterOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterOutput {
	return o
}

func (o SubscriptionRuleCorrelationFilterOutput) ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput {
	return o.ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(context.Background())
}

func (o SubscriptionRuleCorrelationFilterOutput) ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionRuleCorrelationFilter) *SubscriptionRuleCorrelationFilter {
		return &v
	}).(SubscriptionRuleCorrelationFilterPtrOutput)
}

func (o SubscriptionRuleCorrelationFilterOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionRuleCorrelationFilter] {
	return pulumix.Output[SubscriptionRuleCorrelationFilter]{
		OutputState: o.OutputState,
	}
}

// Content type of the message.
func (o SubscriptionRuleCorrelationFilterOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Identifier of the correlation.
func (o SubscriptionRuleCorrelationFilterOutput) CorrelationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.CorrelationId }).(pulumi.StringPtrOutput)
}

// Application specific label.
func (o SubscriptionRuleCorrelationFilterOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Identifier of the message.
func (o SubscriptionRuleCorrelationFilterOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// A list of user defined properties to be included in the filter. Specified as a map of name/value pairs.
//
// > **NOTE:** When creating a subscription rule of type `CorrelationFilter` at least one property must be set in the `correlationFilter` block.
func (o SubscriptionRuleCorrelationFilterOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Address of the queue to reply to.
func (o SubscriptionRuleCorrelationFilterOutput) ReplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.ReplyTo }).(pulumi.StringPtrOutput)
}

// Session identifier to reply to.
func (o SubscriptionRuleCorrelationFilterOutput) ReplyToSessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.ReplyToSessionId }).(pulumi.StringPtrOutput)
}

// Session identifier.
func (o SubscriptionRuleCorrelationFilterOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.SessionId }).(pulumi.StringPtrOutput)
}

// Address to send to.
func (o SubscriptionRuleCorrelationFilterOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.To }).(pulumi.StringPtrOutput)
}

type SubscriptionRuleCorrelationFilterPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionRuleCorrelationFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionRuleCorrelationFilter)(nil)).Elem()
}

func (o SubscriptionRuleCorrelationFilterPtrOutput) ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput {
	return o
}

func (o SubscriptionRuleCorrelationFilterPtrOutput) ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterPtrOutput {
	return o
}

func (o SubscriptionRuleCorrelationFilterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionRuleCorrelationFilter] {
	return pulumix.Output[*SubscriptionRuleCorrelationFilter]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionRuleCorrelationFilterPtrOutput) Elem() SubscriptionRuleCorrelationFilterOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) SubscriptionRuleCorrelationFilter {
		if v != nil {
			return *v
		}
		var ret SubscriptionRuleCorrelationFilter
		return ret
	}).(SubscriptionRuleCorrelationFilterOutput)
}

// Content type of the message.
func (o SubscriptionRuleCorrelationFilterPtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(pulumi.StringPtrOutput)
}

// Identifier of the correlation.
func (o SubscriptionRuleCorrelationFilterPtrOutput) CorrelationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.CorrelationId
	}).(pulumi.StringPtrOutput)
}

// Application specific label.
func (o SubscriptionRuleCorrelationFilterPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Identifier of the message.
func (o SubscriptionRuleCorrelationFilterPtrOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.MessageId
	}).(pulumi.StringPtrOutput)
}

// A list of user defined properties to be included in the filter. Specified as a map of name/value pairs.
//
// > **NOTE:** When creating a subscription rule of type `CorrelationFilter` at least one property must be set in the `correlationFilter` block.
func (o SubscriptionRuleCorrelationFilterPtrOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) map[string]string {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.StringMapOutput)
}

// Address of the queue to reply to.
func (o SubscriptionRuleCorrelationFilterPtrOutput) ReplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.ReplyTo
	}).(pulumi.StringPtrOutput)
}

// Session identifier to reply to.
func (o SubscriptionRuleCorrelationFilterPtrOutput) ReplyToSessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.ReplyToSessionId
	}).(pulumi.StringPtrOutput)
}

// Session identifier.
func (o SubscriptionRuleCorrelationFilterPtrOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.SessionId
	}).(pulumi.StringPtrOutput)
}

// Address to send to.
func (o SubscriptionRuleCorrelationFilterPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainIdentityInput)(nil)).Elem(), DomainIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainIdentityPtrInput)(nil)).Elem(), DomainIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInboundIpRuleInput)(nil)).Elem(), DomainInboundIpRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInboundIpRuleArrayInput)(nil)).Elem(), DomainInboundIpRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInputMappingDefaultValuesInput)(nil)).Elem(), DomainInputMappingDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInputMappingDefaultValuesPtrInput)(nil)).Elem(), DomainInputMappingDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInputMappingFieldsInput)(nil)).Elem(), DomainInputMappingFieldsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInputMappingFieldsPtrInput)(nil)).Elem(), DomainInputMappingFieldsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventGridTopicIdentityInput)(nil)).Elem(), EventGridTopicIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventGridTopicIdentityPtrInput)(nil)).Elem(), EventGridTopicIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventGridTopicInboundIpRuleInput)(nil)).Elem(), EventGridTopicInboundIpRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventGridTopicInboundIpRuleArrayInput)(nil)).Elem(), EventGridTopicInboundIpRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventGridTopicInputMappingDefaultValuesInput)(nil)).Elem(), EventGridTopicInputMappingDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventGridTopicInputMappingDefaultValuesPtrInput)(nil)).Elem(), EventGridTopicInputMappingDefaultValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventGridTopicInputMappingFieldsInput)(nil)).Elem(), EventGridTopicInputMappingFieldsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventGridTopicInputMappingFieldsPtrInput)(nil)).Elem(), EventGridTopicInputMappingFieldsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubCaptureDescriptionInput)(nil)).Elem(), EventHubCaptureDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubCaptureDescriptionPtrInput)(nil)).Elem(), EventHubCaptureDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubCaptureDescriptionDestinationInput)(nil)).Elem(), EventHubCaptureDescriptionDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubCaptureDescriptionDestinationPtrInput)(nil)).Elem(), EventHubCaptureDescriptionDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubNamespaceIdentityInput)(nil)).Elem(), EventHubNamespaceIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubNamespaceIdentityPtrInput)(nil)).Elem(), EventHubNamespaceIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubNamespaceNetworkRulesetsInput)(nil)).Elem(), EventHubNamespaceNetworkRulesetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubNamespaceNetworkRulesetsPtrInput)(nil)).Elem(), EventHubNamespaceNetworkRulesetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubNamespaceNetworkRulesetsIpRuleInput)(nil)).Elem(), EventHubNamespaceNetworkRulesetsIpRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubNamespaceNetworkRulesetsIpRuleArrayInput)(nil)).Elem(), EventHubNamespaceNetworkRulesetsIpRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubNamespaceNetworkRulesetsVirtualNetworkRuleInput)(nil)).Elem(), EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayInput)(nil)).Elem(), EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterInput)(nil)).Elem(), EventSubscriptionAdvancedFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterPtrInput)(nil)).Elem(), EventSubscriptionAdvancedFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterBoolEqualInput)(nil)).Elem(), EventSubscriptionAdvancedFilterBoolEqualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterBoolEqualArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterBoolEqualArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterIsNotNullInput)(nil)).Elem(), EventSubscriptionAdvancedFilterIsNotNullArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterIsNotNullArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterIsNotNullArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterIsNullOrUndefinedInput)(nil)).Elem(), EventSubscriptionAdvancedFilterIsNullOrUndefinedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterIsNullOrUndefinedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThanInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberGreaterThanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThanArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberGreaterThanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberInInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberInArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberInArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberInArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberInRangeInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberInRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberInRangeArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberInRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThanInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberLessThanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThanArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberLessThanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThanOrEqualInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberNotInInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberNotInArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberNotInArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberNotInArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberNotInRangeInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberNotInRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberNotInRangeArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterNumberNotInRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringBeginsWithInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringBeginsWithArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringBeginsWithArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringBeginsWithArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringContainInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringContainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringContainArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringContainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringEndsWithInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringEndsWithArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringEndsWithArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringEndsWithArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringInInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringInArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringInArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringInArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotBeginsWithInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringNotBeginsWithArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotBeginsWithArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringNotBeginsWithArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotContainInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringNotContainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotContainArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringNotContainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotEndsWithInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringNotEndsWithArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotEndsWithArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringNotEndsWithArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotInInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringNotInArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotInArrayInput)(nil)).Elem(), EventSubscriptionAdvancedFilterStringNotInArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAzureFunctionEndpointInput)(nil)).Elem(), EventSubscriptionAzureFunctionEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionAzureFunctionEndpointPtrInput)(nil)).Elem(), EventSubscriptionAzureFunctionEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionDeadLetterIdentityInput)(nil)).Elem(), EventSubscriptionDeadLetterIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionDeadLetterIdentityPtrInput)(nil)).Elem(), EventSubscriptionDeadLetterIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionDeliveryIdentityInput)(nil)).Elem(), EventSubscriptionDeliveryIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionDeliveryIdentityPtrInput)(nil)).Elem(), EventSubscriptionDeliveryIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionDeliveryPropertyInput)(nil)).Elem(), EventSubscriptionDeliveryPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionDeliveryPropertyArrayInput)(nil)).Elem(), EventSubscriptionDeliveryPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionRetryPolicyInput)(nil)).Elem(), EventSubscriptionRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionRetryPolicyPtrInput)(nil)).Elem(), EventSubscriptionRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionStorageBlobDeadLetterDestinationInput)(nil)).Elem(), EventSubscriptionStorageBlobDeadLetterDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionStorageBlobDeadLetterDestinationPtrInput)(nil)).Elem(), EventSubscriptionStorageBlobDeadLetterDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionStorageQueueEndpointInput)(nil)).Elem(), EventSubscriptionStorageQueueEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionStorageQueueEndpointPtrInput)(nil)).Elem(), EventSubscriptionStorageQueueEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionSubjectFilterInput)(nil)).Elem(), EventSubscriptionSubjectFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionSubjectFilterPtrInput)(nil)).Elem(), EventSubscriptionSubjectFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionWebhookEndpointInput)(nil)).Elem(), EventSubscriptionWebhookEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSubscriptionWebhookEndpointPtrInput)(nil)).Elem(), EventSubscriptionWebhookEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceCustomerManagedKeyTypeInput)(nil)).Elem(), NamespaceCustomerManagedKeyTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceCustomerManagedKeyTypePtrInput)(nil)).Elem(), NamespaceCustomerManagedKeyTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceIdentityInput)(nil)).Elem(), NamespaceIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceIdentityPtrInput)(nil)).Elem(), NamespaceIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceNetworkRuleSetInput)(nil)).Elem(), NamespaceNetworkRuleSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceNetworkRuleSetPtrInput)(nil)).Elem(), NamespaceNetworkRuleSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceNetworkRuleSetNetworkRuleInput)(nil)).Elem(), NamespaceNetworkRuleSetNetworkRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceNetworkRuleSetNetworkRuleArrayInput)(nil)).Elem(), NamespaceNetworkRuleSetNetworkRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionClientScopedSubscriptionInput)(nil)).Elem(), SubscriptionClientScopedSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionClientScopedSubscriptionPtrInput)(nil)).Elem(), SubscriptionClientScopedSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionRuleCorrelationFilterInput)(nil)).Elem(), SubscriptionRuleCorrelationFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionRuleCorrelationFilterPtrInput)(nil)).Elem(), SubscriptionRuleCorrelationFilterArgs{})
	pulumi.RegisterOutputType(DomainIdentityOutput{})
	pulumi.RegisterOutputType(DomainIdentityPtrOutput{})
	pulumi.RegisterOutputType(DomainInboundIpRuleOutput{})
	pulumi.RegisterOutputType(DomainInboundIpRuleArrayOutput{})
	pulumi.RegisterOutputType(DomainInputMappingDefaultValuesOutput{})
	pulumi.RegisterOutputType(DomainInputMappingDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(DomainInputMappingFieldsOutput{})
	pulumi.RegisterOutputType(DomainInputMappingFieldsPtrOutput{})
	pulumi.RegisterOutputType(EventGridTopicIdentityOutput{})
	pulumi.RegisterOutputType(EventGridTopicIdentityPtrOutput{})
	pulumi.RegisterOutputType(EventGridTopicInboundIpRuleOutput{})
	pulumi.RegisterOutputType(EventGridTopicInboundIpRuleArrayOutput{})
	pulumi.RegisterOutputType(EventGridTopicInputMappingDefaultValuesOutput{})
	pulumi.RegisterOutputType(EventGridTopicInputMappingDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(EventGridTopicInputMappingFieldsOutput{})
	pulumi.RegisterOutputType(EventGridTopicInputMappingFieldsPtrOutput{})
	pulumi.RegisterOutputType(EventHubCaptureDescriptionOutput{})
	pulumi.RegisterOutputType(EventHubCaptureDescriptionPtrOutput{})
	pulumi.RegisterOutputType(EventHubCaptureDescriptionDestinationOutput{})
	pulumi.RegisterOutputType(EventHubCaptureDescriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceIdentityOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceIdentityPtrOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsPtrOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsIpRuleOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsIpRuleArrayOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterBoolEqualOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterBoolEqualArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterIsNotNullOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterIsNotNullArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterIsNullOrUndefinedOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterIsNullOrUndefinedArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberGreaterThanOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberInOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberInArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberInRangeOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberInRangeArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberLessThanOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberLessThanArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberNotInOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberNotInArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberNotInRangeOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberNotInRangeArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringBeginsWithOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringContainOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringContainArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringEndsWithOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringEndsWithArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringInOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringInArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringNotBeginsWithOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringNotBeginsWithArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringNotContainOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringNotContainArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringNotEndsWithOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringNotEndsWithArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringNotInOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringNotInArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAzureFunctionEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAzureFunctionEndpointPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDeadLetterIdentityOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDeadLetterIdentityPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDeliveryIdentityOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDeliveryIdentityPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDeliveryPropertyOutput{})
	pulumi.RegisterOutputType(EventSubscriptionDeliveryPropertyArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionRetryPolicyOutput{})
	pulumi.RegisterOutputType(EventSubscriptionRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageBlobDeadLetterDestinationOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageQueueEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageQueueEndpointPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionSubjectFilterOutput{})
	pulumi.RegisterOutputType(EventSubscriptionSubjectFilterPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionWebhookEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionWebhookEndpointPtrOutput{})
	pulumi.RegisterOutputType(NamespaceCustomerManagedKeyTypeOutput{})
	pulumi.RegisterOutputType(NamespaceCustomerManagedKeyTypePtrOutput{})
	pulumi.RegisterOutputType(NamespaceIdentityOutput{})
	pulumi.RegisterOutputType(NamespaceIdentityPtrOutput{})
	pulumi.RegisterOutputType(NamespaceNetworkRuleSetOutput{})
	pulumi.RegisterOutputType(NamespaceNetworkRuleSetPtrOutput{})
	pulumi.RegisterOutputType(NamespaceNetworkRuleSetNetworkRuleOutput{})
	pulumi.RegisterOutputType(NamespaceNetworkRuleSetNetworkRuleArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionClientScopedSubscriptionOutput{})
	pulumi.RegisterOutputType(SubscriptionClientScopedSubscriptionPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionRuleCorrelationFilterOutput{})
	pulumi.RegisterOutputType(SubscriptionRuleCorrelationFilterPtrOutput{})
}
