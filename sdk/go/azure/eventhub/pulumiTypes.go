// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package eventhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type DomainInputMappingDefaultValues struct {
	// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion *string `pulumi:"dataVersion"`
	// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType *string `pulumi:"eventType"`
	// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject *string `pulumi:"subject"`
}

type DomainInputMappingDefaultValuesInput interface {
	pulumi.Input

	ToDomainInputMappingDefaultValuesOutput() DomainInputMappingDefaultValuesOutput
	ToDomainInputMappingDefaultValuesOutputWithContext(context.Context) DomainInputMappingDefaultValuesOutput
}

type DomainInputMappingDefaultValuesArgs struct {
	// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion pulumi.StringPtrInput `pulumi:"dataVersion"`
	// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
}

func (DomainInputMappingDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingDefaultValues)(nil)).Elem()
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesOutput() DomainInputMappingDefaultValuesOutput {
	return i.ToDomainInputMappingDefaultValuesOutputWithContext(context.Background())
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingDefaultValuesOutput)
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return i.ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingDefaultValuesOutput).ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx)
}

type DomainInputMappingDefaultValuesPtrInput interface {
	pulumi.Input

	ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput
	ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Context) DomainInputMappingDefaultValuesPtrOutput
}

type domainInputMappingDefaultValuesPtrType DomainInputMappingDefaultValuesArgs

func DomainInputMappingDefaultValuesPtr(v *DomainInputMappingDefaultValuesArgs) DomainInputMappingDefaultValuesPtrInput {
	return (*domainInputMappingDefaultValuesPtrType)(v)
}

func (*domainInputMappingDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingDefaultValues)(nil)).Elem()
}

func (i *domainInputMappingDefaultValuesPtrType) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return i.ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *domainInputMappingDefaultValuesPtrType) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingDefaultValuesPtrOutput)
}

type DomainInputMappingDefaultValuesOutput struct{ *pulumi.OutputState }

func (DomainInputMappingDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingDefaultValues)(nil)).Elem()
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesOutput() DomainInputMappingDefaultValuesOutput {
	return o
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesOutput {
	return o
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return o.ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *DomainInputMappingDefaultValues {
		return &v
	}).(DomainInputMappingDefaultValuesPtrOutput)
}

// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type DomainInputMappingDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (DomainInputMappingDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingDefaultValues)(nil)).Elem()
}

func (o DomainInputMappingDefaultValuesPtrOutput) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return o
}

func (o DomainInputMappingDefaultValuesPtrOutput) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return o
}

func (o DomainInputMappingDefaultValuesPtrOutput) Elem() DomainInputMappingDefaultValuesOutput {
	return o.ApplyT(func(v *DomainInputMappingDefaultValues) DomainInputMappingDefaultValues { return *v }).(DomainInputMappingDefaultValuesOutput)
}

// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesPtrOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type DomainInputMappingFields struct {
	// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion *string `pulumi:"dataVersion"`
	// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventTime *string `pulumi:"eventTime"`
	// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType *string `pulumi:"eventType"`
	// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Id *string `pulumi:"id"`
	// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject *string `pulumi:"subject"`
	// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Topic *string `pulumi:"topic"`
}

type DomainInputMappingFieldsInput interface {
	pulumi.Input

	ToDomainInputMappingFieldsOutput() DomainInputMappingFieldsOutput
	ToDomainInputMappingFieldsOutputWithContext(context.Context) DomainInputMappingFieldsOutput
}

type DomainInputMappingFieldsArgs struct {
	// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion pulumi.StringPtrInput `pulumi:"dataVersion"`
	// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventTime pulumi.StringPtrInput `pulumi:"eventTime"`
	// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
	// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (DomainInputMappingFieldsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingFields)(nil)).Elem()
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsOutput() DomainInputMappingFieldsOutput {
	return i.ToDomainInputMappingFieldsOutputWithContext(context.Background())
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsOutputWithContext(ctx context.Context) DomainInputMappingFieldsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingFieldsOutput)
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return i.ToDomainInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingFieldsOutput).ToDomainInputMappingFieldsPtrOutputWithContext(ctx)
}

type DomainInputMappingFieldsPtrInput interface {
	pulumi.Input

	ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput
	ToDomainInputMappingFieldsPtrOutputWithContext(context.Context) DomainInputMappingFieldsPtrOutput
}

type domainInputMappingFieldsPtrType DomainInputMappingFieldsArgs

func DomainInputMappingFieldsPtr(v *DomainInputMappingFieldsArgs) DomainInputMappingFieldsPtrInput {
	return (*domainInputMappingFieldsPtrType)(v)
}

func (*domainInputMappingFieldsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingFields)(nil)).Elem()
}

func (i *domainInputMappingFieldsPtrType) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return i.ToDomainInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (i *domainInputMappingFieldsPtrType) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingFieldsPtrOutput)
}

type DomainInputMappingFieldsOutput struct{ *pulumi.OutputState }

func (DomainInputMappingFieldsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingFields)(nil)).Elem()
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsOutput() DomainInputMappingFieldsOutput {
	return o
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsOutputWithContext(ctx context.Context) DomainInputMappingFieldsOutput {
	return o
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return o.ToDomainInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *DomainInputMappingFields {
		return &v
	}).(DomainInputMappingFieldsPtrOutput)
}

// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.EventTime }).(pulumi.StringPtrOutput)
}

// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type DomainInputMappingFieldsPtrOutput struct{ *pulumi.OutputState }

func (DomainInputMappingFieldsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingFields)(nil)).Elem()
}

func (o DomainInputMappingFieldsPtrOutput) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return o
}

func (o DomainInputMappingFieldsPtrOutput) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return o
}

func (o DomainInputMappingFieldsPtrOutput) Elem() DomainInputMappingFieldsOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) DomainInputMappingFields { return *v }).(DomainInputMappingFieldsOutput)
}

// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.EventTime }).(pulumi.StringPtrOutput)
}

// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type EventHubCaptureDescription struct {
	// A `destination` block as defined below.
	Destination EventHubCaptureDescriptionDestination `pulumi:"destination"`
	// Specifies if the Capture Description is Enabled.
	Enabled bool `pulumi:"enabled"`
	// Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
	Encoding string `pulumi:"encoding"`
	// Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
	// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000`  bytes. Defaults to `314572800` bytes.
	SizeLimitInBytes *int `pulumi:"sizeLimitInBytes"`
	// Specifies if empty files should not be emitted if no events occur during the Capture time window.  Defaults to `false`.
	SkipEmptyArchives *bool `pulumi:"skipEmptyArchives"`
}

type EventHubCaptureDescriptionInput interface {
	pulumi.Input

	ToEventHubCaptureDescriptionOutput() EventHubCaptureDescriptionOutput
	ToEventHubCaptureDescriptionOutputWithContext(context.Context) EventHubCaptureDescriptionOutput
}

type EventHubCaptureDescriptionArgs struct {
	// A `destination` block as defined below.
	Destination EventHubCaptureDescriptionDestinationInput `pulumi:"destination"`
	// Specifies if the Capture Description is Enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
	Encoding pulumi.StringInput `pulumi:"encoding"`
	// Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
	// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000`  bytes. Defaults to `314572800` bytes.
	SizeLimitInBytes pulumi.IntPtrInput `pulumi:"sizeLimitInBytes"`
	// Specifies if empty files should not be emitted if no events occur during the Capture time window.  Defaults to `false`.
	SkipEmptyArchives pulumi.BoolPtrInput `pulumi:"skipEmptyArchives"`
}

func (EventHubCaptureDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubCaptureDescription)(nil)).Elem()
}

func (i EventHubCaptureDescriptionArgs) ToEventHubCaptureDescriptionOutput() EventHubCaptureDescriptionOutput {
	return i.ToEventHubCaptureDescriptionOutputWithContext(context.Background())
}

func (i EventHubCaptureDescriptionArgs) ToEventHubCaptureDescriptionOutputWithContext(ctx context.Context) EventHubCaptureDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionOutput)
}

func (i EventHubCaptureDescriptionArgs) ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput {
	return i.ToEventHubCaptureDescriptionPtrOutputWithContext(context.Background())
}

func (i EventHubCaptureDescriptionArgs) ToEventHubCaptureDescriptionPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionOutput).ToEventHubCaptureDescriptionPtrOutputWithContext(ctx)
}

type EventHubCaptureDescriptionPtrInput interface {
	pulumi.Input

	ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput
	ToEventHubCaptureDescriptionPtrOutputWithContext(context.Context) EventHubCaptureDescriptionPtrOutput
}

type eventHubCaptureDescriptionPtrType EventHubCaptureDescriptionArgs

func EventHubCaptureDescriptionPtr(v *EventHubCaptureDescriptionArgs) EventHubCaptureDescriptionPtrInput {
	return (*eventHubCaptureDescriptionPtrType)(v)
}

func (*eventHubCaptureDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubCaptureDescription)(nil)).Elem()
}

func (i *eventHubCaptureDescriptionPtrType) ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput {
	return i.ToEventHubCaptureDescriptionPtrOutputWithContext(context.Background())
}

func (i *eventHubCaptureDescriptionPtrType) ToEventHubCaptureDescriptionPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionPtrOutput)
}

type EventHubCaptureDescriptionOutput struct{ *pulumi.OutputState }

func (EventHubCaptureDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubCaptureDescription)(nil)).Elem()
}

func (o EventHubCaptureDescriptionOutput) ToEventHubCaptureDescriptionOutput() EventHubCaptureDescriptionOutput {
	return o
}

func (o EventHubCaptureDescriptionOutput) ToEventHubCaptureDescriptionOutputWithContext(ctx context.Context) EventHubCaptureDescriptionOutput {
	return o
}

func (o EventHubCaptureDescriptionOutput) ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput {
	return o.ToEventHubCaptureDescriptionPtrOutputWithContext(context.Background())
}

func (o EventHubCaptureDescriptionOutput) ToEventHubCaptureDescriptionPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) *EventHubCaptureDescription {
		return &v
	}).(EventHubCaptureDescriptionPtrOutput)
}

// A `destination` block as defined below.
func (o EventHubCaptureDescriptionOutput) Destination() EventHubCaptureDescriptionDestinationOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) EventHubCaptureDescriptionDestination { return v.Destination }).(EventHubCaptureDescriptionDestinationOutput)
}

// Specifies if the Capture Description is Enabled.
func (o EventHubCaptureDescriptionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
func (o EventHubCaptureDescriptionOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) string { return v.Encoding }).(pulumi.StringOutput)
}

// Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
func (o EventHubCaptureDescriptionOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000`  bytes. Defaults to `314572800` bytes.
func (o EventHubCaptureDescriptionOutput) SizeLimitInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) *int { return v.SizeLimitInBytes }).(pulumi.IntPtrOutput)
}

// Specifies if empty files should not be emitted if no events occur during the Capture time window.  Defaults to `false`.
func (o EventHubCaptureDescriptionOutput) SkipEmptyArchives() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) *bool { return v.SkipEmptyArchives }).(pulumi.BoolPtrOutput)
}

type EventHubCaptureDescriptionPtrOutput struct{ *pulumi.OutputState }

func (EventHubCaptureDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubCaptureDescription)(nil)).Elem()
}

func (o EventHubCaptureDescriptionPtrOutput) ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput {
	return o
}

func (o EventHubCaptureDescriptionPtrOutput) ToEventHubCaptureDescriptionPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionPtrOutput {
	return o
}

func (o EventHubCaptureDescriptionPtrOutput) Elem() EventHubCaptureDescriptionOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) EventHubCaptureDescription { return *v }).(EventHubCaptureDescriptionOutput)
}

// A `destination` block as defined below.
func (o EventHubCaptureDescriptionPtrOutput) Destination() EventHubCaptureDescriptionDestinationOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) EventHubCaptureDescriptionDestination { return v.Destination }).(EventHubCaptureDescriptionDestinationOutput)
}

// Specifies if the Capture Description is Enabled.
func (o EventHubCaptureDescriptionPtrOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
func (o EventHubCaptureDescriptionPtrOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) string { return v.Encoding }).(pulumi.StringOutput)
}

// Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
func (o EventHubCaptureDescriptionPtrOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000`  bytes. Defaults to `314572800` bytes.
func (o EventHubCaptureDescriptionPtrOutput) SizeLimitInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) *int { return v.SizeLimitInBytes }).(pulumi.IntPtrOutput)
}

// Specifies if empty files should not be emitted if no events occur during the Capture time window.  Defaults to `false`.
func (o EventHubCaptureDescriptionPtrOutput) SkipEmptyArchives() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) *bool { return v.SkipEmptyArchives }).(pulumi.BoolPtrOutput)
}

type EventHubCaptureDescriptionDestination struct {
	// The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
	ArchiveNameFormat string `pulumi:"archiveNameFormat"`
	// The name of the Container within the Blob Storage Account where messages should be archived.
	BlobContainerName string `pulumi:"blobContainerName"`
	// The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
	Name string `pulumi:"name"`
	// The ID of the Blob Storage Account where messages should be archived.
	StorageAccountId string `pulumi:"storageAccountId"`
}

type EventHubCaptureDescriptionDestinationInput interface {
	pulumi.Input

	ToEventHubCaptureDescriptionDestinationOutput() EventHubCaptureDescriptionDestinationOutput
	ToEventHubCaptureDescriptionDestinationOutputWithContext(context.Context) EventHubCaptureDescriptionDestinationOutput
}

type EventHubCaptureDescriptionDestinationArgs struct {
	// The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
	ArchiveNameFormat pulumi.StringInput `pulumi:"archiveNameFormat"`
	// The name of the Container within the Blob Storage Account where messages should be archived.
	BlobContainerName pulumi.StringInput `pulumi:"blobContainerName"`
	// The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the Blob Storage Account where messages should be archived.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (EventHubCaptureDescriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubCaptureDescriptionDestination)(nil)).Elem()
}

func (i EventHubCaptureDescriptionDestinationArgs) ToEventHubCaptureDescriptionDestinationOutput() EventHubCaptureDescriptionDestinationOutput {
	return i.ToEventHubCaptureDescriptionDestinationOutputWithContext(context.Background())
}

func (i EventHubCaptureDescriptionDestinationArgs) ToEventHubCaptureDescriptionDestinationOutputWithContext(ctx context.Context) EventHubCaptureDescriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionDestinationOutput)
}

type EventHubCaptureDescriptionDestinationOutput struct{ *pulumi.OutputState }

func (EventHubCaptureDescriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubCaptureDescriptionDestination)(nil)).Elem()
}

func (o EventHubCaptureDescriptionDestinationOutput) ToEventHubCaptureDescriptionDestinationOutput() EventHubCaptureDescriptionDestinationOutput {
	return o
}

func (o EventHubCaptureDescriptionDestinationOutput) ToEventHubCaptureDescriptionDestinationOutputWithContext(ctx context.Context) EventHubCaptureDescriptionDestinationOutput {
	return o
}

// The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
func (o EventHubCaptureDescriptionDestinationOutput) ArchiveNameFormat() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescriptionDestination) string { return v.ArchiveNameFormat }).(pulumi.StringOutput)
}

// The name of the Container within the Blob Storage Account where messages should be archived.
func (o EventHubCaptureDescriptionDestinationOutput) BlobContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescriptionDestination) string { return v.BlobContainerName }).(pulumi.StringOutput)
}

// The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
func (o EventHubCaptureDescriptionDestinationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescriptionDestination) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Blob Storage Account where messages should be archived.
func (o EventHubCaptureDescriptionDestinationOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescriptionDestination) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type EventHubNamespaceNetworkRulesets struct {
	// The default action to take when a rule is not matched. Possible values are `Allow` and `Deny`.
	DefaultAction string `pulumi:"defaultAction"`
	// One or more `ipRule` blocks as defined below.
	IpRules []EventHubNamespaceNetworkRulesetsIpRule `pulumi:"ipRules"`
	// One or more `virtualNetworkRule` blocks as defined below.
	VirtualNetworkRules []EventHubNamespaceNetworkRulesetsVirtualNetworkRule `pulumi:"virtualNetworkRules"`
}

type EventHubNamespaceNetworkRulesetsInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsOutput() EventHubNamespaceNetworkRulesetsOutput
	ToEventHubNamespaceNetworkRulesetsOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsOutput
}

type EventHubNamespaceNetworkRulesetsArgs struct {
	// The default action to take when a rule is not matched. Possible values are `Allow` and `Deny`.
	DefaultAction pulumi.StringInput `pulumi:"defaultAction"`
	// One or more `ipRule` blocks as defined below.
	IpRules EventHubNamespaceNetworkRulesetsIpRuleArrayInput `pulumi:"ipRules"`
	// One or more `virtualNetworkRule` blocks as defined below.
	VirtualNetworkRules EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayInput `pulumi:"virtualNetworkRules"`
}

func (EventHubNamespaceNetworkRulesetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesets)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsArgs) ToEventHubNamespaceNetworkRulesetsOutput() EventHubNamespaceNetworkRulesetsOutput {
	return i.ToEventHubNamespaceNetworkRulesetsOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsArgs) ToEventHubNamespaceNetworkRulesetsOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsOutput)
}

func (i EventHubNamespaceNetworkRulesetsArgs) ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput {
	return i.ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsArgs) ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsOutput).ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx)
}

type EventHubNamespaceNetworkRulesetsPtrInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput
	ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsPtrOutput
}

type eventHubNamespaceNetworkRulesetsPtrType EventHubNamespaceNetworkRulesetsArgs

func EventHubNamespaceNetworkRulesetsPtr(v *EventHubNamespaceNetworkRulesetsArgs) EventHubNamespaceNetworkRulesetsPtrInput {
	return (*eventHubNamespaceNetworkRulesetsPtrType)(v)
}

func (*eventHubNamespaceNetworkRulesetsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubNamespaceNetworkRulesets)(nil)).Elem()
}

func (i *eventHubNamespaceNetworkRulesetsPtrType) ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput {
	return i.ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(context.Background())
}

func (i *eventHubNamespaceNetworkRulesetsPtrType) ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsPtrOutput)
}

type EventHubNamespaceNetworkRulesetsOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesets)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsOutput) ToEventHubNamespaceNetworkRulesetsOutput() EventHubNamespaceNetworkRulesetsOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsOutput) ToEventHubNamespaceNetworkRulesetsOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsOutput) ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput {
	return o.ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(context.Background())
}

func (o EventHubNamespaceNetworkRulesetsOutput) ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) *EventHubNamespaceNetworkRulesets {
		return &v
	}).(EventHubNamespaceNetworkRulesetsPtrOutput)
}

// The default action to take when a rule is not matched. Possible values are `Allow` and `Deny`.
func (o EventHubNamespaceNetworkRulesetsOutput) DefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) string { return v.DefaultAction }).(pulumi.StringOutput)
}

// One or more `ipRule` blocks as defined below.
func (o EventHubNamespaceNetworkRulesetsOutput) IpRules() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) []EventHubNamespaceNetworkRulesetsIpRule { return v.IpRules }).(EventHubNamespaceNetworkRulesetsIpRuleArrayOutput)
}

// One or more `virtualNetworkRule` blocks as defined below.
func (o EventHubNamespaceNetworkRulesetsOutput) VirtualNetworkRules() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) []EventHubNamespaceNetworkRulesetsVirtualNetworkRule {
		return v.VirtualNetworkRules
	}).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput)
}

type EventHubNamespaceNetworkRulesetsPtrOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubNamespaceNetworkRulesets)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsPtrOutput) ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsPtrOutput) ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsPtrOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsPtrOutput) Elem() EventHubNamespaceNetworkRulesetsOutput {
	return o.ApplyT(func(v *EventHubNamespaceNetworkRulesets) EventHubNamespaceNetworkRulesets { return *v }).(EventHubNamespaceNetworkRulesetsOutput)
}

// The default action to take when a rule is not matched. Possible values are `Allow` and `Deny`.
func (o EventHubNamespaceNetworkRulesetsPtrOutput) DefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) string { return v.DefaultAction }).(pulumi.StringOutput)
}

// One or more `ipRule` blocks as defined below.
func (o EventHubNamespaceNetworkRulesetsPtrOutput) IpRules() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) []EventHubNamespaceNetworkRulesetsIpRule { return v.IpRules }).(EventHubNamespaceNetworkRulesetsIpRuleArrayOutput)
}

// One or more `virtualNetworkRule` blocks as defined below.
func (o EventHubNamespaceNetworkRulesetsPtrOutput) VirtualNetworkRules() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) []EventHubNamespaceNetworkRulesetsVirtualNetworkRule {
		return v.VirtualNetworkRules
	}).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput)
}

type EventHubNamespaceNetworkRulesetsIpRule struct {
	// The action to take when the rule is  matched. Possible values are `Allow`.
	Action *string `pulumi:"action"`
	// The ip mask to match on.
	IpMask string `pulumi:"ipMask"`
}

type EventHubNamespaceNetworkRulesetsIpRuleInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsIpRuleOutput() EventHubNamespaceNetworkRulesetsIpRuleOutput
	ToEventHubNamespaceNetworkRulesetsIpRuleOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsIpRuleOutput
}

type EventHubNamespaceNetworkRulesetsIpRuleArgs struct {
	// The action to take when the rule is  matched. Possible values are `Allow`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// The ip mask to match on.
	IpMask pulumi.StringInput `pulumi:"ipMask"`
}

func (EventHubNamespaceNetworkRulesetsIpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesetsIpRule)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsIpRuleArgs) ToEventHubNamespaceNetworkRulesetsIpRuleOutput() EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return i.ToEventHubNamespaceNetworkRulesetsIpRuleOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsIpRuleArgs) ToEventHubNamespaceNetworkRulesetsIpRuleOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsIpRuleOutput)
}

type EventHubNamespaceNetworkRulesetsIpRuleArrayInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutput() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput
	ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsIpRuleArrayOutput
}

type EventHubNamespaceNetworkRulesetsIpRuleArray []EventHubNamespaceNetworkRulesetsIpRuleInput

func (EventHubNamespaceNetworkRulesetsIpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubNamespaceNetworkRulesetsIpRule)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsIpRuleArray) ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutput() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return i.ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsIpRuleArray) ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsIpRuleArrayOutput)
}

type EventHubNamespaceNetworkRulesetsIpRuleOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsIpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesetsIpRule)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsIpRuleOutput) ToEventHubNamespaceNetworkRulesetsIpRuleOutput() EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsIpRuleOutput) ToEventHubNamespaceNetworkRulesetsIpRuleOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return o
}

// The action to take when the rule is  matched. Possible values are `Allow`.
func (o EventHubNamespaceNetworkRulesetsIpRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesetsIpRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The ip mask to match on.
func (o EventHubNamespaceNetworkRulesetsIpRuleOutput) IpMask() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesetsIpRule) string { return v.IpMask }).(pulumi.StringOutput)
}

type EventHubNamespaceNetworkRulesetsIpRuleArrayOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsIpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubNamespaceNetworkRulesetsIpRule)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsIpRuleArrayOutput) ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutput() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsIpRuleArrayOutput) ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsIpRuleArrayOutput) Index(i pulumi.IntInput) EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubNamespaceNetworkRulesetsIpRule {
		return vs[0].([]EventHubNamespaceNetworkRulesetsIpRule)[vs[1].(int)]
	}).(EventHubNamespaceNetworkRulesetsIpRuleOutput)
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRule struct {
	// Are missing virtual network service endpoints ignored? Defaults to `false`.
	IgnoreMissingVirtualNetworkServiceEndpoint *bool `pulumi:"ignoreMissingVirtualNetworkServiceEndpoint"`
	// The id of the subnet to match on.
	SubnetId string `pulumi:"subnetId"`
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput
	ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs struct {
	// Are missing virtual network service endpoints ignored? Defaults to `false`.
	IgnoreMissingVirtualNetworkServiceEndpoint pulumi.BoolPtrInput `pulumi:"ignoreMissingVirtualNetworkServiceEndpoint"`
	// The id of the subnet to match on.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesetsVirtualNetworkRule)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return i.ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput)
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput
	ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray []EventHubNamespaceNetworkRulesetsVirtualNetworkRuleInput

func (EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubNamespaceNetworkRulesetsVirtualNetworkRule)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return i.ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput)
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesetsVirtualNetworkRule)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return o
}

// Are missing virtual network service endpoints ignored? Defaults to `false`.
func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) IgnoreMissingVirtualNetworkServiceEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesetsVirtualNetworkRule) *bool {
		return v.IgnoreMissingVirtualNetworkServiceEndpoint
	}).(pulumi.BoolPtrOutput)
}

// The id of the subnet to match on.
func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesetsVirtualNetworkRule) string { return v.SubnetId }).(pulumi.StringOutput)
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubNamespaceNetworkRulesetsVirtualNetworkRule)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput) Index(i pulumi.IntInput) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubNamespaceNetworkRulesetsVirtualNetworkRule {
		return vs[0].([]EventHubNamespaceNetworkRulesetsVirtualNetworkRule)[vs[1].(int)]
	}).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput)
}

type EventSubscriptionEventhubEndpoint struct {
	// Specifies the id of the eventhub where the Event Subscription will receive events.
	EventhubId string `pulumi:"eventhubId"`
}

type EventSubscriptionEventhubEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionEventhubEndpointOutput() EventSubscriptionEventhubEndpointOutput
	ToEventSubscriptionEventhubEndpointOutputWithContext(context.Context) EventSubscriptionEventhubEndpointOutput
}

type EventSubscriptionEventhubEndpointArgs struct {
	// Specifies the id of the eventhub where the Event Subscription will receive events.
	EventhubId pulumi.StringInput `pulumi:"eventhubId"`
}

func (EventSubscriptionEventhubEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionEventhubEndpoint)(nil)).Elem()
}

func (i EventSubscriptionEventhubEndpointArgs) ToEventSubscriptionEventhubEndpointOutput() EventSubscriptionEventhubEndpointOutput {
	return i.ToEventSubscriptionEventhubEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionEventhubEndpointArgs) ToEventSubscriptionEventhubEndpointOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionEventhubEndpointOutput)
}

func (i EventSubscriptionEventhubEndpointArgs) ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput {
	return i.ToEventSubscriptionEventhubEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionEventhubEndpointArgs) ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionEventhubEndpointOutput).ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx)
}

type EventSubscriptionEventhubEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput
	ToEventSubscriptionEventhubEndpointPtrOutputWithContext(context.Context) EventSubscriptionEventhubEndpointPtrOutput
}

type eventSubscriptionEventhubEndpointPtrType EventSubscriptionEventhubEndpointArgs

func EventSubscriptionEventhubEndpointPtr(v *EventSubscriptionEventhubEndpointArgs) EventSubscriptionEventhubEndpointPtrInput {
	return (*eventSubscriptionEventhubEndpointPtrType)(v)
}

func (*eventSubscriptionEventhubEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionEventhubEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionEventhubEndpointPtrType) ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput {
	return i.ToEventSubscriptionEventhubEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionEventhubEndpointPtrType) ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionEventhubEndpointPtrOutput)
}

type EventSubscriptionEventhubEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionEventhubEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionEventhubEndpoint)(nil)).Elem()
}

func (o EventSubscriptionEventhubEndpointOutput) ToEventSubscriptionEventhubEndpointOutput() EventSubscriptionEventhubEndpointOutput {
	return o
}

func (o EventSubscriptionEventhubEndpointOutput) ToEventSubscriptionEventhubEndpointOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointOutput {
	return o
}

func (o EventSubscriptionEventhubEndpointOutput) ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput {
	return o.ToEventSubscriptionEventhubEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionEventhubEndpointOutput) ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionEventhubEndpoint) *EventSubscriptionEventhubEndpoint {
		return &v
	}).(EventSubscriptionEventhubEndpointPtrOutput)
}

// Specifies the id of the eventhub where the Event Subscription will receive events.
func (o EventSubscriptionEventhubEndpointOutput) EventhubId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionEventhubEndpoint) string { return v.EventhubId }).(pulumi.StringOutput)
}

type EventSubscriptionEventhubEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionEventhubEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionEventhubEndpoint)(nil)).Elem()
}

func (o EventSubscriptionEventhubEndpointPtrOutput) ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput {
	return o
}

func (o EventSubscriptionEventhubEndpointPtrOutput) ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointPtrOutput {
	return o
}

func (o EventSubscriptionEventhubEndpointPtrOutput) Elem() EventSubscriptionEventhubEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionEventhubEndpoint) EventSubscriptionEventhubEndpoint { return *v }).(EventSubscriptionEventhubEndpointOutput)
}

// Specifies the id of the eventhub where the Event Subscription will receive events.
func (o EventSubscriptionEventhubEndpointPtrOutput) EventhubId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionEventhubEndpoint) string { return v.EventhubId }).(pulumi.StringOutput)
}

type EventSubscriptionHybridConnectionEndpoint struct {
	// Specifies the id of the hybrid connection where the Event Subscription will receive events.
	HybridConnectionId string `pulumi:"hybridConnectionId"`
}

type EventSubscriptionHybridConnectionEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionHybridConnectionEndpointOutput() EventSubscriptionHybridConnectionEndpointOutput
	ToEventSubscriptionHybridConnectionEndpointOutputWithContext(context.Context) EventSubscriptionHybridConnectionEndpointOutput
}

type EventSubscriptionHybridConnectionEndpointArgs struct {
	// Specifies the id of the hybrid connection where the Event Subscription will receive events.
	HybridConnectionId pulumi.StringInput `pulumi:"hybridConnectionId"`
}

func (EventSubscriptionHybridConnectionEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionHybridConnectionEndpoint)(nil)).Elem()
}

func (i EventSubscriptionHybridConnectionEndpointArgs) ToEventSubscriptionHybridConnectionEndpointOutput() EventSubscriptionHybridConnectionEndpointOutput {
	return i.ToEventSubscriptionHybridConnectionEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionHybridConnectionEndpointArgs) ToEventSubscriptionHybridConnectionEndpointOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionHybridConnectionEndpointOutput)
}

func (i EventSubscriptionHybridConnectionEndpointArgs) ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput {
	return i.ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionHybridConnectionEndpointArgs) ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionHybridConnectionEndpointOutput).ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx)
}

type EventSubscriptionHybridConnectionEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput
	ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput
}

type eventSubscriptionHybridConnectionEndpointPtrType EventSubscriptionHybridConnectionEndpointArgs

func EventSubscriptionHybridConnectionEndpointPtr(v *EventSubscriptionHybridConnectionEndpointArgs) EventSubscriptionHybridConnectionEndpointPtrInput {
	return (*eventSubscriptionHybridConnectionEndpointPtrType)(v)
}

func (*eventSubscriptionHybridConnectionEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionHybridConnectionEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionHybridConnectionEndpointPtrType) ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput {
	return i.ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionHybridConnectionEndpointPtrType) ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionHybridConnectionEndpointPtrOutput)
}

type EventSubscriptionHybridConnectionEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionHybridConnectionEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionHybridConnectionEndpoint)(nil)).Elem()
}

func (o EventSubscriptionHybridConnectionEndpointOutput) ToEventSubscriptionHybridConnectionEndpointOutput() EventSubscriptionHybridConnectionEndpointOutput {
	return o
}

func (o EventSubscriptionHybridConnectionEndpointOutput) ToEventSubscriptionHybridConnectionEndpointOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointOutput {
	return o
}

func (o EventSubscriptionHybridConnectionEndpointOutput) ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput {
	return o.ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionHybridConnectionEndpointOutput) ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionHybridConnectionEndpoint) *EventSubscriptionHybridConnectionEndpoint {
		return &v
	}).(EventSubscriptionHybridConnectionEndpointPtrOutput)
}

// Specifies the id of the hybrid connection where the Event Subscription will receive events.
func (o EventSubscriptionHybridConnectionEndpointOutput) HybridConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionHybridConnectionEndpoint) string { return v.HybridConnectionId }).(pulumi.StringOutput)
}

type EventSubscriptionHybridConnectionEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionHybridConnectionEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionHybridConnectionEndpoint)(nil)).Elem()
}

func (o EventSubscriptionHybridConnectionEndpointPtrOutput) ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput {
	return o
}

func (o EventSubscriptionHybridConnectionEndpointPtrOutput) ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput {
	return o
}

func (o EventSubscriptionHybridConnectionEndpointPtrOutput) Elem() EventSubscriptionHybridConnectionEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionHybridConnectionEndpoint) EventSubscriptionHybridConnectionEndpoint {
		return *v
	}).(EventSubscriptionHybridConnectionEndpointOutput)
}

// Specifies the id of the hybrid connection where the Event Subscription will receive events.
func (o EventSubscriptionHybridConnectionEndpointPtrOutput) HybridConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionHybridConnectionEndpoint) string { return v.HybridConnectionId }).(pulumi.StringOutput)
}

type EventSubscriptionRetryPolicy struct {
	// Specifies the time to live (in minutes) for events.
	EventTimeToLive int `pulumi:"eventTimeToLive"`
	// Specifies the maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts int `pulumi:"maxDeliveryAttempts"`
}

type EventSubscriptionRetryPolicyInput interface {
	pulumi.Input

	ToEventSubscriptionRetryPolicyOutput() EventSubscriptionRetryPolicyOutput
	ToEventSubscriptionRetryPolicyOutputWithContext(context.Context) EventSubscriptionRetryPolicyOutput
}

type EventSubscriptionRetryPolicyArgs struct {
	// Specifies the time to live (in minutes) for events.
	EventTimeToLive pulumi.IntInput `pulumi:"eventTimeToLive"`
	// Specifies the maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts pulumi.IntInput `pulumi:"maxDeliveryAttempts"`
}

func (EventSubscriptionRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyOutput() EventSubscriptionRetryPolicyOutput {
	return i.ToEventSubscriptionRetryPolicyOutputWithContext(context.Background())
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionRetryPolicyOutput)
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return i.ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionRetryPolicyOutput).ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx)
}

type EventSubscriptionRetryPolicyPtrInput interface {
	pulumi.Input

	ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput
	ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Context) EventSubscriptionRetryPolicyPtrOutput
}

type eventSubscriptionRetryPolicyPtrType EventSubscriptionRetryPolicyArgs

func EventSubscriptionRetryPolicyPtr(v *EventSubscriptionRetryPolicyArgs) EventSubscriptionRetryPolicyPtrInput {
	return (*eventSubscriptionRetryPolicyPtrType)(v)
}

func (*eventSubscriptionRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (i *eventSubscriptionRetryPolicyPtrType) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return i.ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionRetryPolicyPtrType) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionRetryPolicyPtrOutput)
}

type EventSubscriptionRetryPolicyOutput struct{ *pulumi.OutputState }

func (EventSubscriptionRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyOutput() EventSubscriptionRetryPolicyOutput {
	return o
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyOutput {
	return o
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return o.ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return o.ApplyT(func(v EventSubscriptionRetryPolicy) *EventSubscriptionRetryPolicy {
		return &v
	}).(EventSubscriptionRetryPolicyPtrOutput)
}

// Specifies the time to live (in minutes) for events.
func (o EventSubscriptionRetryPolicyOutput) EventTimeToLive() pulumi.IntOutput {
	return o.ApplyT(func(v EventSubscriptionRetryPolicy) int { return v.EventTimeToLive }).(pulumi.IntOutput)
}

// Specifies the maximum number of delivery retry attempts for events.
func (o EventSubscriptionRetryPolicyOutput) MaxDeliveryAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v EventSubscriptionRetryPolicy) int { return v.MaxDeliveryAttempts }).(pulumi.IntOutput)
}

type EventSubscriptionRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (o EventSubscriptionRetryPolicyPtrOutput) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return o
}

func (o EventSubscriptionRetryPolicyPtrOutput) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return o
}

func (o EventSubscriptionRetryPolicyPtrOutput) Elem() EventSubscriptionRetryPolicyOutput {
	return o.ApplyT(func(v *EventSubscriptionRetryPolicy) EventSubscriptionRetryPolicy { return *v }).(EventSubscriptionRetryPolicyOutput)
}

// Specifies the time to live (in minutes) for events.
func (o EventSubscriptionRetryPolicyPtrOutput) EventTimeToLive() pulumi.IntOutput {
	return o.ApplyT(func(v EventSubscriptionRetryPolicy) int { return v.EventTimeToLive }).(pulumi.IntOutput)
}

// Specifies the maximum number of delivery retry attempts for events.
func (o EventSubscriptionRetryPolicyPtrOutput) MaxDeliveryAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v EventSubscriptionRetryPolicy) int { return v.MaxDeliveryAttempts }).(pulumi.IntOutput)
}

type EventSubscriptionStorageBlobDeadLetterDestination struct {
	// Specifies the id of the storage account id where the storage blob is located.
	StorageAccountId string `pulumi:"storageAccountId"`
	// Specifies the name of the Storage blob container that is the destination of the deadletter events
	StorageBlobContainerName string `pulumi:"storageBlobContainerName"`
}

type EventSubscriptionStorageBlobDeadLetterDestinationInput interface {
	pulumi.Input

	ToEventSubscriptionStorageBlobDeadLetterDestinationOutput() EventSubscriptionStorageBlobDeadLetterDestinationOutput
	ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(context.Context) EventSubscriptionStorageBlobDeadLetterDestinationOutput
}

type EventSubscriptionStorageBlobDeadLetterDestinationArgs struct {
	// Specifies the id of the storage account id where the storage blob is located.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
	// Specifies the name of the Storage blob container that is the destination of the deadletter events
	StorageBlobContainerName pulumi.StringInput `pulumi:"storageBlobContainerName"`
}

func (EventSubscriptionStorageBlobDeadLetterDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationOutput() EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return i.ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageBlobDeadLetterDestinationOutput)
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return i.ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageBlobDeadLetterDestinationOutput).ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx)
}

type EventSubscriptionStorageBlobDeadLetterDestinationPtrInput interface {
	pulumi.Input

	ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput
	ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput
}

type eventSubscriptionStorageBlobDeadLetterDestinationPtrType EventSubscriptionStorageBlobDeadLetterDestinationArgs

func EventSubscriptionStorageBlobDeadLetterDestinationPtr(v *EventSubscriptionStorageBlobDeadLetterDestinationArgs) EventSubscriptionStorageBlobDeadLetterDestinationPtrInput {
	return (*eventSubscriptionStorageBlobDeadLetterDestinationPtrType)(v)
}

func (*eventSubscriptionStorageBlobDeadLetterDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i *eventSubscriptionStorageBlobDeadLetterDestinationPtrType) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return i.ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionStorageBlobDeadLetterDestinationPtrType) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput)
}

type EventSubscriptionStorageBlobDeadLetterDestinationOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageBlobDeadLetterDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationOutput() EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o.ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o.ApplyT(func(v EventSubscriptionStorageBlobDeadLetterDestination) *EventSubscriptionStorageBlobDeadLetterDestination {
		return &v
	}).(EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput)
}

// Specifies the id of the storage account id where the storage blob is located.
func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageBlobDeadLetterDestination) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

// Specifies the name of the Storage blob container that is the destination of the deadletter events
func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) StorageBlobContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageBlobDeadLetterDestination) string { return v.StorageBlobContainerName }).(pulumi.StringOutput)
}

type EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) Elem() EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageBlobDeadLetterDestination) EventSubscriptionStorageBlobDeadLetterDestination {
		return *v
	}).(EventSubscriptionStorageBlobDeadLetterDestinationOutput)
}

// Specifies the id of the storage account id where the storage blob is located.
func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageBlobDeadLetterDestination) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

// Specifies the name of the Storage blob container that is the destination of the deadletter events
func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) StorageBlobContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageBlobDeadLetterDestination) string { return v.StorageBlobContainerName }).(pulumi.StringOutput)
}

type EventSubscriptionStorageQueueEndpoint struct {
	// Specifies the name of the storage queue where the Event Subscriptio will receive events.
	QueueName string `pulumi:"queueName"`
	// Specifies the id of the storage account id where the storage queue is located.
	StorageAccountId string `pulumi:"storageAccountId"`
}

type EventSubscriptionStorageQueueEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionStorageQueueEndpointOutput() EventSubscriptionStorageQueueEndpointOutput
	ToEventSubscriptionStorageQueueEndpointOutputWithContext(context.Context) EventSubscriptionStorageQueueEndpointOutput
}

type EventSubscriptionStorageQueueEndpointArgs struct {
	// Specifies the name of the storage queue where the Event Subscriptio will receive events.
	QueueName pulumi.StringInput `pulumi:"queueName"`
	// Specifies the id of the storage account id where the storage queue is located.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (EventSubscriptionStorageQueueEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointOutput() EventSubscriptionStorageQueueEndpointOutput {
	return i.ToEventSubscriptionStorageQueueEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageQueueEndpointOutput)
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return i.ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageQueueEndpointOutput).ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx)
}

type EventSubscriptionStorageQueueEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput
	ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Context) EventSubscriptionStorageQueueEndpointPtrOutput
}

type eventSubscriptionStorageQueueEndpointPtrType EventSubscriptionStorageQueueEndpointArgs

func EventSubscriptionStorageQueueEndpointPtr(v *EventSubscriptionStorageQueueEndpointArgs) EventSubscriptionStorageQueueEndpointPtrInput {
	return (*eventSubscriptionStorageQueueEndpointPtrType)(v)
}

func (*eventSubscriptionStorageQueueEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionStorageQueueEndpointPtrType) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return i.ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionStorageQueueEndpointPtrType) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageQueueEndpointPtrOutput)
}

type EventSubscriptionStorageQueueEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageQueueEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointOutput() EventSubscriptionStorageQueueEndpointOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return o.ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionStorageQueueEndpoint) *EventSubscriptionStorageQueueEndpoint {
		return &v
	}).(EventSubscriptionStorageQueueEndpointPtrOutput)
}

// Specifies the name of the storage queue where the Event Subscriptio will receive events.
func (o EventSubscriptionStorageQueueEndpointOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageQueueEndpoint) string { return v.QueueName }).(pulumi.StringOutput)
}

// Specifies the id of the storage account id where the storage queue is located.
func (o EventSubscriptionStorageQueueEndpointOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageQueueEndpoint) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type EventSubscriptionStorageQueueEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageQueueEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (o EventSubscriptionStorageQueueEndpointPtrOutput) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointPtrOutput) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointPtrOutput) Elem() EventSubscriptionStorageQueueEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageQueueEndpoint) EventSubscriptionStorageQueueEndpoint { return *v }).(EventSubscriptionStorageQueueEndpointOutput)
}

// Specifies the name of the storage queue where the Event Subscriptio will receive events.
func (o EventSubscriptionStorageQueueEndpointPtrOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageQueueEndpoint) string { return v.QueueName }).(pulumi.StringOutput)
}

// Specifies the id of the storage account id where the storage queue is located.
func (o EventSubscriptionStorageQueueEndpointPtrOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageQueueEndpoint) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type EventSubscriptionSubjectFilter struct {
	// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
	CaseSensitive *bool `pulumi:"caseSensitive"`
	// A string to filter events for an event subscription based on a resource path prefix.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// A string to filter events for an event subscription based on a resource path suffix.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

type EventSubscriptionSubjectFilterInput interface {
	pulumi.Input

	ToEventSubscriptionSubjectFilterOutput() EventSubscriptionSubjectFilterOutput
	ToEventSubscriptionSubjectFilterOutputWithContext(context.Context) EventSubscriptionSubjectFilterOutput
}

type EventSubscriptionSubjectFilterArgs struct {
	// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
	CaseSensitive pulumi.BoolPtrInput `pulumi:"caseSensitive"`
	// A string to filter events for an event subscription based on a resource path prefix.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// A string to filter events for an event subscription based on a resource path suffix.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

func (EventSubscriptionSubjectFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterOutput() EventSubscriptionSubjectFilterOutput {
	return i.ToEventSubscriptionSubjectFilterOutputWithContext(context.Background())
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionSubjectFilterOutput)
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return i.ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionSubjectFilterOutput).ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx)
}

type EventSubscriptionSubjectFilterPtrInput interface {
	pulumi.Input

	ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput
	ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Context) EventSubscriptionSubjectFilterPtrOutput
}

type eventSubscriptionSubjectFilterPtrType EventSubscriptionSubjectFilterArgs

func EventSubscriptionSubjectFilterPtr(v *EventSubscriptionSubjectFilterArgs) EventSubscriptionSubjectFilterPtrInput {
	return (*eventSubscriptionSubjectFilterPtrType)(v)
}

func (*eventSubscriptionSubjectFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (i *eventSubscriptionSubjectFilterPtrType) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return i.ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionSubjectFilterPtrType) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionSubjectFilterPtrOutput)
}

type EventSubscriptionSubjectFilterOutput struct{ *pulumi.OutputState }

func (EventSubscriptionSubjectFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterOutput() EventSubscriptionSubjectFilterOutput {
	return o
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterOutput {
	return o
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return o.ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *EventSubscriptionSubjectFilter {
		return &v
	}).(EventSubscriptionSubjectFilterPtrOutput)
}

// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
func (o EventSubscriptionSubjectFilterOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *bool { return v.CaseSensitive }).(pulumi.BoolPtrOutput)
}

// A string to filter events for an event subscription based on a resource path prefix.
func (o EventSubscriptionSubjectFilterOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// A string to filter events for an event subscription based on a resource path suffix.
func (o EventSubscriptionSubjectFilterOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionSubjectFilterPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionSubjectFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (o EventSubscriptionSubjectFilterPtrOutput) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return o
}

func (o EventSubscriptionSubjectFilterPtrOutput) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return o
}

func (o EventSubscriptionSubjectFilterPtrOutput) Elem() EventSubscriptionSubjectFilterOutput {
	return o.ApplyT(func(v *EventSubscriptionSubjectFilter) EventSubscriptionSubjectFilter { return *v }).(EventSubscriptionSubjectFilterOutput)
}

// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
func (o EventSubscriptionSubjectFilterPtrOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *bool { return v.CaseSensitive }).(pulumi.BoolPtrOutput)
}

// A string to filter events for an event subscription based on a resource path prefix.
func (o EventSubscriptionSubjectFilterPtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// A string to filter events for an event subscription based on a resource path suffix.
func (o EventSubscriptionSubjectFilterPtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionWebhookEndpoint struct {
	// Specifies the url of the webhook where the Event Subscription will receive events.
	Url string `pulumi:"url"`
}

type EventSubscriptionWebhookEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionWebhookEndpointOutput() EventSubscriptionWebhookEndpointOutput
	ToEventSubscriptionWebhookEndpointOutputWithContext(context.Context) EventSubscriptionWebhookEndpointOutput
}

type EventSubscriptionWebhookEndpointArgs struct {
	// Specifies the url of the webhook where the Event Subscription will receive events.
	Url pulumi.StringInput `pulumi:"url"`
}

func (EventSubscriptionWebhookEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointOutput() EventSubscriptionWebhookEndpointOutput {
	return i.ToEventSubscriptionWebhookEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionWebhookEndpointOutput)
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return i.ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionWebhookEndpointOutput).ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx)
}

type EventSubscriptionWebhookEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput
	ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Context) EventSubscriptionWebhookEndpointPtrOutput
}

type eventSubscriptionWebhookEndpointPtrType EventSubscriptionWebhookEndpointArgs

func EventSubscriptionWebhookEndpointPtr(v *EventSubscriptionWebhookEndpointArgs) EventSubscriptionWebhookEndpointPtrInput {
	return (*eventSubscriptionWebhookEndpointPtrType)(v)
}

func (*eventSubscriptionWebhookEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionWebhookEndpointPtrType) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return i.ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionWebhookEndpointPtrType) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionWebhookEndpointPtrOutput)
}

type EventSubscriptionWebhookEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionWebhookEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointOutput() EventSubscriptionWebhookEndpointOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return o.ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *EventSubscriptionWebhookEndpoint {
		return &v
	}).(EventSubscriptionWebhookEndpointPtrOutput)
}

// Specifies the url of the webhook where the Event Subscription will receive events.
func (o EventSubscriptionWebhookEndpointOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) string { return v.Url }).(pulumi.StringOutput)
}

type EventSubscriptionWebhookEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionWebhookEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (o EventSubscriptionWebhookEndpointPtrOutput) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointPtrOutput) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointPtrOutput) Elem() EventSubscriptionWebhookEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) EventSubscriptionWebhookEndpoint { return *v }).(EventSubscriptionWebhookEndpointOutput)
}

// Specifies the url of the webhook where the Event Subscription will receive events.
func (o EventSubscriptionWebhookEndpointPtrOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) string { return v.Url }).(pulumi.StringOutput)
}

type SubscriptionRuleCorrelationFilter struct {
	// Content type of the message.
	ContentType *string `pulumi:"contentType"`
	// Identifier of the correlation.
	CorrelationId *string `pulumi:"correlationId"`
	// Application specific label.
	Label *string `pulumi:"label"`
	// Identifier of the message.
	MessageId *string `pulumi:"messageId"`
	// Address of the queue to reply to.
	ReplyTo *string `pulumi:"replyTo"`
	// Session identifier to reply to.
	ReplyToSessionId *string `pulumi:"replyToSessionId"`
	// Session identifier.
	SessionId *string `pulumi:"sessionId"`
	// Address to send to.
	To *string `pulumi:"to"`
}

type SubscriptionRuleCorrelationFilterInput interface {
	pulumi.Input

	ToSubscriptionRuleCorrelationFilterOutput() SubscriptionRuleCorrelationFilterOutput
	ToSubscriptionRuleCorrelationFilterOutputWithContext(context.Context) SubscriptionRuleCorrelationFilterOutput
}

type SubscriptionRuleCorrelationFilterArgs struct {
	// Content type of the message.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// Identifier of the correlation.
	CorrelationId pulumi.StringPtrInput `pulumi:"correlationId"`
	// Application specific label.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Identifier of the message.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// Address of the queue to reply to.
	ReplyTo pulumi.StringPtrInput `pulumi:"replyTo"`
	// Session identifier to reply to.
	ReplyToSessionId pulumi.StringPtrInput `pulumi:"replyToSessionId"`
	// Session identifier.
	SessionId pulumi.StringPtrInput `pulumi:"sessionId"`
	// Address to send to.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (SubscriptionRuleCorrelationFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionRuleCorrelationFilter)(nil)).Elem()
}

func (i SubscriptionRuleCorrelationFilterArgs) ToSubscriptionRuleCorrelationFilterOutput() SubscriptionRuleCorrelationFilterOutput {
	return i.ToSubscriptionRuleCorrelationFilterOutputWithContext(context.Background())
}

func (i SubscriptionRuleCorrelationFilterArgs) ToSubscriptionRuleCorrelationFilterOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRuleCorrelationFilterOutput)
}

func (i SubscriptionRuleCorrelationFilterArgs) ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput {
	return i.ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(context.Background())
}

func (i SubscriptionRuleCorrelationFilterArgs) ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRuleCorrelationFilterOutput).ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx)
}

type SubscriptionRuleCorrelationFilterPtrInput interface {
	pulumi.Input

	ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput
	ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(context.Context) SubscriptionRuleCorrelationFilterPtrOutput
}

type subscriptionRuleCorrelationFilterPtrType SubscriptionRuleCorrelationFilterArgs

func SubscriptionRuleCorrelationFilterPtr(v *SubscriptionRuleCorrelationFilterArgs) SubscriptionRuleCorrelationFilterPtrInput {
	return (*subscriptionRuleCorrelationFilterPtrType)(v)
}

func (*subscriptionRuleCorrelationFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionRuleCorrelationFilter)(nil)).Elem()
}

func (i *subscriptionRuleCorrelationFilterPtrType) ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput {
	return i.ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(context.Background())
}

func (i *subscriptionRuleCorrelationFilterPtrType) ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRuleCorrelationFilterPtrOutput)
}

type SubscriptionRuleCorrelationFilterOutput struct{ *pulumi.OutputState }

func (SubscriptionRuleCorrelationFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionRuleCorrelationFilter)(nil)).Elem()
}

func (o SubscriptionRuleCorrelationFilterOutput) ToSubscriptionRuleCorrelationFilterOutput() SubscriptionRuleCorrelationFilterOutput {
	return o
}

func (o SubscriptionRuleCorrelationFilterOutput) ToSubscriptionRuleCorrelationFilterOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterOutput {
	return o
}

func (o SubscriptionRuleCorrelationFilterOutput) ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput {
	return o.ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(context.Background())
}

func (o SubscriptionRuleCorrelationFilterOutput) ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *SubscriptionRuleCorrelationFilter {
		return &v
	}).(SubscriptionRuleCorrelationFilterPtrOutput)
}

// Content type of the message.
func (o SubscriptionRuleCorrelationFilterOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Identifier of the correlation.
func (o SubscriptionRuleCorrelationFilterOutput) CorrelationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.CorrelationId }).(pulumi.StringPtrOutput)
}

// Application specific label.
func (o SubscriptionRuleCorrelationFilterOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Identifier of the message.
func (o SubscriptionRuleCorrelationFilterOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// Address of the queue to reply to.
func (o SubscriptionRuleCorrelationFilterOutput) ReplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.ReplyTo }).(pulumi.StringPtrOutput)
}

// Session identifier to reply to.
func (o SubscriptionRuleCorrelationFilterOutput) ReplyToSessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.ReplyToSessionId }).(pulumi.StringPtrOutput)
}

// Session identifier.
func (o SubscriptionRuleCorrelationFilterOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.SessionId }).(pulumi.StringPtrOutput)
}

// Address to send to.
func (o SubscriptionRuleCorrelationFilterOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.To }).(pulumi.StringPtrOutput)
}

type SubscriptionRuleCorrelationFilterPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionRuleCorrelationFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionRuleCorrelationFilter)(nil)).Elem()
}

func (o SubscriptionRuleCorrelationFilterPtrOutput) ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput {
	return o
}

func (o SubscriptionRuleCorrelationFilterPtrOutput) ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterPtrOutput {
	return o
}

func (o SubscriptionRuleCorrelationFilterPtrOutput) Elem() SubscriptionRuleCorrelationFilterOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) SubscriptionRuleCorrelationFilter { return *v }).(SubscriptionRuleCorrelationFilterOutput)
}

// Content type of the message.
func (o SubscriptionRuleCorrelationFilterPtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Identifier of the correlation.
func (o SubscriptionRuleCorrelationFilterPtrOutput) CorrelationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.CorrelationId }).(pulumi.StringPtrOutput)
}

// Application specific label.
func (o SubscriptionRuleCorrelationFilterPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Identifier of the message.
func (o SubscriptionRuleCorrelationFilterPtrOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// Address of the queue to reply to.
func (o SubscriptionRuleCorrelationFilterPtrOutput) ReplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.ReplyTo }).(pulumi.StringPtrOutput)
}

// Session identifier to reply to.
func (o SubscriptionRuleCorrelationFilterPtrOutput) ReplyToSessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.ReplyToSessionId }).(pulumi.StringPtrOutput)
}

// Session identifier.
func (o SubscriptionRuleCorrelationFilterPtrOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.SessionId }).(pulumi.StringPtrOutput)
}

// Address to send to.
func (o SubscriptionRuleCorrelationFilterPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.To }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DomainInputMappingDefaultValuesOutput{})
	pulumi.RegisterOutputType(DomainInputMappingDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(DomainInputMappingFieldsOutput{})
	pulumi.RegisterOutputType(DomainInputMappingFieldsPtrOutput{})
	pulumi.RegisterOutputType(EventHubCaptureDescriptionOutput{})
	pulumi.RegisterOutputType(EventHubCaptureDescriptionPtrOutput{})
	pulumi.RegisterOutputType(EventHubCaptureDescriptionDestinationOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsPtrOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsIpRuleOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsIpRuleArrayOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionEventhubEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionEventhubEndpointPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionHybridConnectionEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionHybridConnectionEndpointPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionRetryPolicyOutput{})
	pulumi.RegisterOutputType(EventSubscriptionRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageBlobDeadLetterDestinationOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageQueueEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageQueueEndpointPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionSubjectFilterOutput{})
	pulumi.RegisterOutputType(EventSubscriptionSubjectFilterPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionWebhookEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionWebhookEndpointPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionRuleCorrelationFilterOutput{})
	pulumi.RegisterOutputType(SubscriptionRuleCorrelationFilterPtrOutput{})
}
