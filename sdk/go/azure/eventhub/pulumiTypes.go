// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DomainInboundIpRule struct {
	// The action to take when the rule is matched. Possible values are `Allow`.
	Action *string `pulumi:"action"`
	// The ip mask (CIDR) to match on.
	IpMask string `pulumi:"ipMask"`
}

// DomainInboundIpRuleInput is an input type that accepts DomainInboundIpRuleArgs and DomainInboundIpRuleOutput values.
// You can construct a concrete instance of `DomainInboundIpRuleInput` via:
//
//          DomainInboundIpRuleArgs{...}
type DomainInboundIpRuleInput interface {
	pulumi.Input

	ToDomainInboundIpRuleOutput() DomainInboundIpRuleOutput
	ToDomainInboundIpRuleOutputWithContext(context.Context) DomainInboundIpRuleOutput
}

type DomainInboundIpRuleArgs struct {
	// The action to take when the rule is matched. Possible values are `Allow`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// The ip mask (CIDR) to match on.
	IpMask pulumi.StringInput `pulumi:"ipMask"`
}

func (DomainInboundIpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInboundIpRule)(nil)).Elem()
}

func (i DomainInboundIpRuleArgs) ToDomainInboundIpRuleOutput() DomainInboundIpRuleOutput {
	return i.ToDomainInboundIpRuleOutputWithContext(context.Background())
}

func (i DomainInboundIpRuleArgs) ToDomainInboundIpRuleOutputWithContext(ctx context.Context) DomainInboundIpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInboundIpRuleOutput)
}

// DomainInboundIpRuleArrayInput is an input type that accepts DomainInboundIpRuleArray and DomainInboundIpRuleArrayOutput values.
// You can construct a concrete instance of `DomainInboundIpRuleArrayInput` via:
//
//          DomainInboundIpRuleArray{ DomainInboundIpRuleArgs{...} }
type DomainInboundIpRuleArrayInput interface {
	pulumi.Input

	ToDomainInboundIpRuleArrayOutput() DomainInboundIpRuleArrayOutput
	ToDomainInboundIpRuleArrayOutputWithContext(context.Context) DomainInboundIpRuleArrayOutput
}

type DomainInboundIpRuleArray []DomainInboundIpRuleInput

func (DomainInboundIpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainInboundIpRule)(nil)).Elem()
}

func (i DomainInboundIpRuleArray) ToDomainInboundIpRuleArrayOutput() DomainInboundIpRuleArrayOutput {
	return i.ToDomainInboundIpRuleArrayOutputWithContext(context.Background())
}

func (i DomainInboundIpRuleArray) ToDomainInboundIpRuleArrayOutputWithContext(ctx context.Context) DomainInboundIpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInboundIpRuleArrayOutput)
}

type DomainInboundIpRuleOutput struct{ *pulumi.OutputState }

func (DomainInboundIpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInboundIpRule)(nil)).Elem()
}

func (o DomainInboundIpRuleOutput) ToDomainInboundIpRuleOutput() DomainInboundIpRuleOutput {
	return o
}

func (o DomainInboundIpRuleOutput) ToDomainInboundIpRuleOutputWithContext(ctx context.Context) DomainInboundIpRuleOutput {
	return o
}

// The action to take when the rule is matched. Possible values are `Allow`.
func (o DomainInboundIpRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInboundIpRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The ip mask (CIDR) to match on.
func (o DomainInboundIpRuleOutput) IpMask() pulumi.StringOutput {
	return o.ApplyT(func(v DomainInboundIpRule) string { return v.IpMask }).(pulumi.StringOutput)
}

type DomainInboundIpRuleArrayOutput struct{ *pulumi.OutputState }

func (DomainInboundIpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainInboundIpRule)(nil)).Elem()
}

func (o DomainInboundIpRuleArrayOutput) ToDomainInboundIpRuleArrayOutput() DomainInboundIpRuleArrayOutput {
	return o
}

func (o DomainInboundIpRuleArrayOutput) ToDomainInboundIpRuleArrayOutputWithContext(ctx context.Context) DomainInboundIpRuleArrayOutput {
	return o
}

func (o DomainInboundIpRuleArrayOutput) Index(i pulumi.IntInput) DomainInboundIpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainInboundIpRule {
		return vs[0].([]DomainInboundIpRule)[vs[1].(int)]
	}).(DomainInboundIpRuleOutput)
}

type DomainInputMappingDefaultValues struct {
	// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion *string `pulumi:"dataVersion"`
	// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType *string `pulumi:"eventType"`
	// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject *string `pulumi:"subject"`
}

// DomainInputMappingDefaultValuesInput is an input type that accepts DomainInputMappingDefaultValuesArgs and DomainInputMappingDefaultValuesOutput values.
// You can construct a concrete instance of `DomainInputMappingDefaultValuesInput` via:
//
//          DomainInputMappingDefaultValuesArgs{...}
type DomainInputMappingDefaultValuesInput interface {
	pulumi.Input

	ToDomainInputMappingDefaultValuesOutput() DomainInputMappingDefaultValuesOutput
	ToDomainInputMappingDefaultValuesOutputWithContext(context.Context) DomainInputMappingDefaultValuesOutput
}

type DomainInputMappingDefaultValuesArgs struct {
	// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion pulumi.StringPtrInput `pulumi:"dataVersion"`
	// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
}

func (DomainInputMappingDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingDefaultValues)(nil)).Elem()
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesOutput() DomainInputMappingDefaultValuesOutput {
	return i.ToDomainInputMappingDefaultValuesOutputWithContext(context.Background())
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingDefaultValuesOutput)
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return i.ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingDefaultValuesOutput).ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx)
}

// DomainInputMappingDefaultValuesPtrInput is an input type that accepts DomainInputMappingDefaultValuesArgs, DomainInputMappingDefaultValuesPtr and DomainInputMappingDefaultValuesPtrOutput values.
// You can construct a concrete instance of `DomainInputMappingDefaultValuesPtrInput` via:
//
//          DomainInputMappingDefaultValuesArgs{...}
//
//  or:
//
//          nil
type DomainInputMappingDefaultValuesPtrInput interface {
	pulumi.Input

	ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput
	ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Context) DomainInputMappingDefaultValuesPtrOutput
}

type domainInputMappingDefaultValuesPtrType DomainInputMappingDefaultValuesArgs

func DomainInputMappingDefaultValuesPtr(v *DomainInputMappingDefaultValuesArgs) DomainInputMappingDefaultValuesPtrInput {
	return (*domainInputMappingDefaultValuesPtrType)(v)
}

func (*domainInputMappingDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingDefaultValues)(nil)).Elem()
}

func (i *domainInputMappingDefaultValuesPtrType) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return i.ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *domainInputMappingDefaultValuesPtrType) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingDefaultValuesPtrOutput)
}

type DomainInputMappingDefaultValuesOutput struct{ *pulumi.OutputState }

func (DomainInputMappingDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingDefaultValues)(nil)).Elem()
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesOutput() DomainInputMappingDefaultValuesOutput {
	return o
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesOutput {
	return o
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return o.ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *DomainInputMappingDefaultValues {
		return &v
	}).(DomainInputMappingDefaultValuesPtrOutput)
}

// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type DomainInputMappingDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (DomainInputMappingDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingDefaultValues)(nil)).Elem()
}

func (o DomainInputMappingDefaultValuesPtrOutput) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return o
}

func (o DomainInputMappingDefaultValuesPtrOutput) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return o
}

func (o DomainInputMappingDefaultValuesPtrOutput) Elem() DomainInputMappingDefaultValuesOutput {
	return o.ApplyT(func(v *DomainInputMappingDefaultValues) DomainInputMappingDefaultValues { return *v }).(DomainInputMappingDefaultValuesOutput)
}

// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesPtrOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(pulumi.StringPtrOutput)
}

type DomainInputMappingFields struct {
	// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion *string `pulumi:"dataVersion"`
	// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventTime *string `pulumi:"eventTime"`
	// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType *string `pulumi:"eventType"`
	// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Id *string `pulumi:"id"`
	// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject *string `pulumi:"subject"`
	// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Topic *string `pulumi:"topic"`
}

// DomainInputMappingFieldsInput is an input type that accepts DomainInputMappingFieldsArgs and DomainInputMappingFieldsOutput values.
// You can construct a concrete instance of `DomainInputMappingFieldsInput` via:
//
//          DomainInputMappingFieldsArgs{...}
type DomainInputMappingFieldsInput interface {
	pulumi.Input

	ToDomainInputMappingFieldsOutput() DomainInputMappingFieldsOutput
	ToDomainInputMappingFieldsOutputWithContext(context.Context) DomainInputMappingFieldsOutput
}

type DomainInputMappingFieldsArgs struct {
	// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion pulumi.StringPtrInput `pulumi:"dataVersion"`
	// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventTime pulumi.StringPtrInput `pulumi:"eventTime"`
	// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
	// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (DomainInputMappingFieldsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingFields)(nil)).Elem()
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsOutput() DomainInputMappingFieldsOutput {
	return i.ToDomainInputMappingFieldsOutputWithContext(context.Background())
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsOutputWithContext(ctx context.Context) DomainInputMappingFieldsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingFieldsOutput)
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return i.ToDomainInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingFieldsOutput).ToDomainInputMappingFieldsPtrOutputWithContext(ctx)
}

// DomainInputMappingFieldsPtrInput is an input type that accepts DomainInputMappingFieldsArgs, DomainInputMappingFieldsPtr and DomainInputMappingFieldsPtrOutput values.
// You can construct a concrete instance of `DomainInputMappingFieldsPtrInput` via:
//
//          DomainInputMappingFieldsArgs{...}
//
//  or:
//
//          nil
type DomainInputMappingFieldsPtrInput interface {
	pulumi.Input

	ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput
	ToDomainInputMappingFieldsPtrOutputWithContext(context.Context) DomainInputMappingFieldsPtrOutput
}

type domainInputMappingFieldsPtrType DomainInputMappingFieldsArgs

func DomainInputMappingFieldsPtr(v *DomainInputMappingFieldsArgs) DomainInputMappingFieldsPtrInput {
	return (*domainInputMappingFieldsPtrType)(v)
}

func (*domainInputMappingFieldsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingFields)(nil)).Elem()
}

func (i *domainInputMappingFieldsPtrType) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return i.ToDomainInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (i *domainInputMappingFieldsPtrType) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingFieldsPtrOutput)
}

type DomainInputMappingFieldsOutput struct{ *pulumi.OutputState }

func (DomainInputMappingFieldsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingFields)(nil)).Elem()
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsOutput() DomainInputMappingFieldsOutput {
	return o
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsOutputWithContext(ctx context.Context) DomainInputMappingFieldsOutput {
	return o
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return o.ToDomainInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *DomainInputMappingFields {
		return &v
	}).(DomainInputMappingFieldsPtrOutput)
}

// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.EventTime }).(pulumi.StringPtrOutput)
}

// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type DomainInputMappingFieldsPtrOutput struct{ *pulumi.OutputState }

func (DomainInputMappingFieldsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingFields)(nil)).Elem()
}

func (o DomainInputMappingFieldsPtrOutput) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return o
}

func (o DomainInputMappingFieldsPtrOutput) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return o
}

func (o DomainInputMappingFieldsPtrOutput) Elem() DomainInputMappingFieldsOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) DomainInputMappingFields { return *v }).(DomainInputMappingFieldsOutput)
}

// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.EventTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(pulumi.StringPtrOutput)
}

// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

type EventGridTopicInboundIpRule struct {
	// The action to take when the rule is matched. Possible values are `Allow`.
	Action *string `pulumi:"action"`
	// The ip mask (CIDR) to match on.
	IpMask string `pulumi:"ipMask"`
}

// EventGridTopicInboundIpRuleInput is an input type that accepts EventGridTopicInboundIpRuleArgs and EventGridTopicInboundIpRuleOutput values.
// You can construct a concrete instance of `EventGridTopicInboundIpRuleInput` via:
//
//          EventGridTopicInboundIpRuleArgs{...}
type EventGridTopicInboundIpRuleInput interface {
	pulumi.Input

	ToEventGridTopicInboundIpRuleOutput() EventGridTopicInboundIpRuleOutput
	ToEventGridTopicInboundIpRuleOutputWithContext(context.Context) EventGridTopicInboundIpRuleOutput
}

type EventGridTopicInboundIpRuleArgs struct {
	// The action to take when the rule is matched. Possible values are `Allow`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// The ip mask (CIDR) to match on.
	IpMask pulumi.StringInput `pulumi:"ipMask"`
}

func (EventGridTopicInboundIpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridTopicInboundIpRule)(nil)).Elem()
}

func (i EventGridTopicInboundIpRuleArgs) ToEventGridTopicInboundIpRuleOutput() EventGridTopicInboundIpRuleOutput {
	return i.ToEventGridTopicInboundIpRuleOutputWithContext(context.Background())
}

func (i EventGridTopicInboundIpRuleArgs) ToEventGridTopicInboundIpRuleOutputWithContext(ctx context.Context) EventGridTopicInboundIpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInboundIpRuleOutput)
}

// EventGridTopicInboundIpRuleArrayInput is an input type that accepts EventGridTopicInboundIpRuleArray and EventGridTopicInboundIpRuleArrayOutput values.
// You can construct a concrete instance of `EventGridTopicInboundIpRuleArrayInput` via:
//
//          EventGridTopicInboundIpRuleArray{ EventGridTopicInboundIpRuleArgs{...} }
type EventGridTopicInboundIpRuleArrayInput interface {
	pulumi.Input

	ToEventGridTopicInboundIpRuleArrayOutput() EventGridTopicInboundIpRuleArrayOutput
	ToEventGridTopicInboundIpRuleArrayOutputWithContext(context.Context) EventGridTopicInboundIpRuleArrayOutput
}

type EventGridTopicInboundIpRuleArray []EventGridTopicInboundIpRuleInput

func (EventGridTopicInboundIpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventGridTopicInboundIpRule)(nil)).Elem()
}

func (i EventGridTopicInboundIpRuleArray) ToEventGridTopicInboundIpRuleArrayOutput() EventGridTopicInboundIpRuleArrayOutput {
	return i.ToEventGridTopicInboundIpRuleArrayOutputWithContext(context.Background())
}

func (i EventGridTopicInboundIpRuleArray) ToEventGridTopicInboundIpRuleArrayOutputWithContext(ctx context.Context) EventGridTopicInboundIpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInboundIpRuleArrayOutput)
}

type EventGridTopicInboundIpRuleOutput struct{ *pulumi.OutputState }

func (EventGridTopicInboundIpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridTopicInboundIpRule)(nil)).Elem()
}

func (o EventGridTopicInboundIpRuleOutput) ToEventGridTopicInboundIpRuleOutput() EventGridTopicInboundIpRuleOutput {
	return o
}

func (o EventGridTopicInboundIpRuleOutput) ToEventGridTopicInboundIpRuleOutputWithContext(ctx context.Context) EventGridTopicInboundIpRuleOutput {
	return o
}

// The action to take when the rule is matched. Possible values are `Allow`.
func (o EventGridTopicInboundIpRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInboundIpRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The ip mask (CIDR) to match on.
func (o EventGridTopicInboundIpRuleOutput) IpMask() pulumi.StringOutput {
	return o.ApplyT(func(v EventGridTopicInboundIpRule) string { return v.IpMask }).(pulumi.StringOutput)
}

type EventGridTopicInboundIpRuleArrayOutput struct{ *pulumi.OutputState }

func (EventGridTopicInboundIpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventGridTopicInboundIpRule)(nil)).Elem()
}

func (o EventGridTopicInboundIpRuleArrayOutput) ToEventGridTopicInboundIpRuleArrayOutput() EventGridTopicInboundIpRuleArrayOutput {
	return o
}

func (o EventGridTopicInboundIpRuleArrayOutput) ToEventGridTopicInboundIpRuleArrayOutputWithContext(ctx context.Context) EventGridTopicInboundIpRuleArrayOutput {
	return o
}

func (o EventGridTopicInboundIpRuleArrayOutput) Index(i pulumi.IntInput) EventGridTopicInboundIpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventGridTopicInboundIpRule {
		return vs[0].([]EventGridTopicInboundIpRule)[vs[1].(int)]
	}).(EventGridTopicInboundIpRuleOutput)
}

type EventGridTopicInputMappingDefaultValues struct {
	// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion *string `pulumi:"dataVersion"`
	// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType *string `pulumi:"eventType"`
	// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject *string `pulumi:"subject"`
}

// EventGridTopicInputMappingDefaultValuesInput is an input type that accepts EventGridTopicInputMappingDefaultValuesArgs and EventGridTopicInputMappingDefaultValuesOutput values.
// You can construct a concrete instance of `EventGridTopicInputMappingDefaultValuesInput` via:
//
//          EventGridTopicInputMappingDefaultValuesArgs{...}
type EventGridTopicInputMappingDefaultValuesInput interface {
	pulumi.Input

	ToEventGridTopicInputMappingDefaultValuesOutput() EventGridTopicInputMappingDefaultValuesOutput
	ToEventGridTopicInputMappingDefaultValuesOutputWithContext(context.Context) EventGridTopicInputMappingDefaultValuesOutput
}

type EventGridTopicInputMappingDefaultValuesArgs struct {
	// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion pulumi.StringPtrInput `pulumi:"dataVersion"`
	// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
}

func (EventGridTopicInputMappingDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridTopicInputMappingDefaultValues)(nil)).Elem()
}

func (i EventGridTopicInputMappingDefaultValuesArgs) ToEventGridTopicInputMappingDefaultValuesOutput() EventGridTopicInputMappingDefaultValuesOutput {
	return i.ToEventGridTopicInputMappingDefaultValuesOutputWithContext(context.Background())
}

func (i EventGridTopicInputMappingDefaultValuesArgs) ToEventGridTopicInputMappingDefaultValuesOutputWithContext(ctx context.Context) EventGridTopicInputMappingDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInputMappingDefaultValuesOutput)
}

func (i EventGridTopicInputMappingDefaultValuesArgs) ToEventGridTopicInputMappingDefaultValuesPtrOutput() EventGridTopicInputMappingDefaultValuesPtrOutput {
	return i.ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (i EventGridTopicInputMappingDefaultValuesArgs) ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInputMappingDefaultValuesOutput).ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(ctx)
}

// EventGridTopicInputMappingDefaultValuesPtrInput is an input type that accepts EventGridTopicInputMappingDefaultValuesArgs, EventGridTopicInputMappingDefaultValuesPtr and EventGridTopicInputMappingDefaultValuesPtrOutput values.
// You can construct a concrete instance of `EventGridTopicInputMappingDefaultValuesPtrInput` via:
//
//          EventGridTopicInputMappingDefaultValuesArgs{...}
//
//  or:
//
//          nil
type EventGridTopicInputMappingDefaultValuesPtrInput interface {
	pulumi.Input

	ToEventGridTopicInputMappingDefaultValuesPtrOutput() EventGridTopicInputMappingDefaultValuesPtrOutput
	ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(context.Context) EventGridTopicInputMappingDefaultValuesPtrOutput
}

type eventGridTopicInputMappingDefaultValuesPtrType EventGridTopicInputMappingDefaultValuesArgs

func EventGridTopicInputMappingDefaultValuesPtr(v *EventGridTopicInputMappingDefaultValuesArgs) EventGridTopicInputMappingDefaultValuesPtrInput {
	return (*eventGridTopicInputMappingDefaultValuesPtrType)(v)
}

func (*eventGridTopicInputMappingDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridTopicInputMappingDefaultValues)(nil)).Elem()
}

func (i *eventGridTopicInputMappingDefaultValuesPtrType) ToEventGridTopicInputMappingDefaultValuesPtrOutput() EventGridTopicInputMappingDefaultValuesPtrOutput {
	return i.ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *eventGridTopicInputMappingDefaultValuesPtrType) ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInputMappingDefaultValuesPtrOutput)
}

type EventGridTopicInputMappingDefaultValuesOutput struct{ *pulumi.OutputState }

func (EventGridTopicInputMappingDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridTopicInputMappingDefaultValues)(nil)).Elem()
}

func (o EventGridTopicInputMappingDefaultValuesOutput) ToEventGridTopicInputMappingDefaultValuesOutput() EventGridTopicInputMappingDefaultValuesOutput {
	return o
}

func (o EventGridTopicInputMappingDefaultValuesOutput) ToEventGridTopicInputMappingDefaultValuesOutputWithContext(ctx context.Context) EventGridTopicInputMappingDefaultValuesOutput {
	return o
}

func (o EventGridTopicInputMappingDefaultValuesOutput) ToEventGridTopicInputMappingDefaultValuesPtrOutput() EventGridTopicInputMappingDefaultValuesPtrOutput {
	return o.ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (o EventGridTopicInputMappingDefaultValuesOutput) ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingDefaultValuesPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingDefaultValues) *EventGridTopicInputMappingDefaultValues {
		return &v
	}).(EventGridTopicInputMappingDefaultValuesPtrOutput)
}

// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingDefaultValuesOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingDefaultValues) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingDefaultValuesOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingDefaultValues) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingDefaultValuesOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingDefaultValues) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type EventGridTopicInputMappingDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (EventGridTopicInputMappingDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridTopicInputMappingDefaultValues)(nil)).Elem()
}

func (o EventGridTopicInputMappingDefaultValuesPtrOutput) ToEventGridTopicInputMappingDefaultValuesPtrOutput() EventGridTopicInputMappingDefaultValuesPtrOutput {
	return o
}

func (o EventGridTopicInputMappingDefaultValuesPtrOutput) ToEventGridTopicInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingDefaultValuesPtrOutput {
	return o
}

func (o EventGridTopicInputMappingDefaultValuesPtrOutput) Elem() EventGridTopicInputMappingDefaultValuesOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingDefaultValues) EventGridTopicInputMappingDefaultValues { return *v }).(EventGridTopicInputMappingDefaultValuesOutput)
}

// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingDefaultValuesPtrOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingDefaultValuesPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingDefaultValuesPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(pulumi.StringPtrOutput)
}

type EventGridTopicInputMappingFields struct {
	// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion *string `pulumi:"dataVersion"`
	// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventTime *string `pulumi:"eventTime"`
	// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType *string `pulumi:"eventType"`
	// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Id *string `pulumi:"id"`
	// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject *string `pulumi:"subject"`
	// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Topic *string `pulumi:"topic"`
}

// EventGridTopicInputMappingFieldsInput is an input type that accepts EventGridTopicInputMappingFieldsArgs and EventGridTopicInputMappingFieldsOutput values.
// You can construct a concrete instance of `EventGridTopicInputMappingFieldsInput` via:
//
//          EventGridTopicInputMappingFieldsArgs{...}
type EventGridTopicInputMappingFieldsInput interface {
	pulumi.Input

	ToEventGridTopicInputMappingFieldsOutput() EventGridTopicInputMappingFieldsOutput
	ToEventGridTopicInputMappingFieldsOutputWithContext(context.Context) EventGridTopicInputMappingFieldsOutput
}

type EventGridTopicInputMappingFieldsArgs struct {
	// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion pulumi.StringPtrInput `pulumi:"dataVersion"`
	// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventTime pulumi.StringPtrInput `pulumi:"eventTime"`
	// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
	// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (EventGridTopicInputMappingFieldsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridTopicInputMappingFields)(nil)).Elem()
}

func (i EventGridTopicInputMappingFieldsArgs) ToEventGridTopicInputMappingFieldsOutput() EventGridTopicInputMappingFieldsOutput {
	return i.ToEventGridTopicInputMappingFieldsOutputWithContext(context.Background())
}

func (i EventGridTopicInputMappingFieldsArgs) ToEventGridTopicInputMappingFieldsOutputWithContext(ctx context.Context) EventGridTopicInputMappingFieldsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInputMappingFieldsOutput)
}

func (i EventGridTopicInputMappingFieldsArgs) ToEventGridTopicInputMappingFieldsPtrOutput() EventGridTopicInputMappingFieldsPtrOutput {
	return i.ToEventGridTopicInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (i EventGridTopicInputMappingFieldsArgs) ToEventGridTopicInputMappingFieldsPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingFieldsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInputMappingFieldsOutput).ToEventGridTopicInputMappingFieldsPtrOutputWithContext(ctx)
}

// EventGridTopicInputMappingFieldsPtrInput is an input type that accepts EventGridTopicInputMappingFieldsArgs, EventGridTopicInputMappingFieldsPtr and EventGridTopicInputMappingFieldsPtrOutput values.
// You can construct a concrete instance of `EventGridTopicInputMappingFieldsPtrInput` via:
//
//          EventGridTopicInputMappingFieldsArgs{...}
//
//  or:
//
//          nil
type EventGridTopicInputMappingFieldsPtrInput interface {
	pulumi.Input

	ToEventGridTopicInputMappingFieldsPtrOutput() EventGridTopicInputMappingFieldsPtrOutput
	ToEventGridTopicInputMappingFieldsPtrOutputWithContext(context.Context) EventGridTopicInputMappingFieldsPtrOutput
}

type eventGridTopicInputMappingFieldsPtrType EventGridTopicInputMappingFieldsArgs

func EventGridTopicInputMappingFieldsPtr(v *EventGridTopicInputMappingFieldsArgs) EventGridTopicInputMappingFieldsPtrInput {
	return (*eventGridTopicInputMappingFieldsPtrType)(v)
}

func (*eventGridTopicInputMappingFieldsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridTopicInputMappingFields)(nil)).Elem()
}

func (i *eventGridTopicInputMappingFieldsPtrType) ToEventGridTopicInputMappingFieldsPtrOutput() EventGridTopicInputMappingFieldsPtrOutput {
	return i.ToEventGridTopicInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (i *eventGridTopicInputMappingFieldsPtrType) ToEventGridTopicInputMappingFieldsPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingFieldsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGridTopicInputMappingFieldsPtrOutput)
}

type EventGridTopicInputMappingFieldsOutput struct{ *pulumi.OutputState }

func (EventGridTopicInputMappingFieldsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridTopicInputMappingFields)(nil)).Elem()
}

func (o EventGridTopicInputMappingFieldsOutput) ToEventGridTopicInputMappingFieldsOutput() EventGridTopicInputMappingFieldsOutput {
	return o
}

func (o EventGridTopicInputMappingFieldsOutput) ToEventGridTopicInputMappingFieldsOutputWithContext(ctx context.Context) EventGridTopicInputMappingFieldsOutput {
	return o
}

func (o EventGridTopicInputMappingFieldsOutput) ToEventGridTopicInputMappingFieldsPtrOutput() EventGridTopicInputMappingFieldsPtrOutput {
	return o.ToEventGridTopicInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (o EventGridTopicInputMappingFieldsOutput) ToEventGridTopicInputMappingFieldsPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingFieldsPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingFields) *EventGridTopicInputMappingFields {
		return &v
	}).(EventGridTopicInputMappingFieldsPtrOutput)
}

// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingFields) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingFields) *string { return v.EventTime }).(pulumi.StringPtrOutput)
}

// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingFields) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingFields) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingFields) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGridTopicInputMappingFields) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type EventGridTopicInputMappingFieldsPtrOutput struct{ *pulumi.OutputState }

func (EventGridTopicInputMappingFieldsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridTopicInputMappingFields)(nil)).Elem()
}

func (o EventGridTopicInputMappingFieldsPtrOutput) ToEventGridTopicInputMappingFieldsPtrOutput() EventGridTopicInputMappingFieldsPtrOutput {
	return o
}

func (o EventGridTopicInputMappingFieldsPtrOutput) ToEventGridTopicInputMappingFieldsPtrOutputWithContext(ctx context.Context) EventGridTopicInputMappingFieldsPtrOutput {
	return o
}

func (o EventGridTopicInputMappingFieldsPtrOutput) Elem() EventGridTopicInputMappingFieldsOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingFields) EventGridTopicInputMappingFields { return *v }).(EventGridTopicInputMappingFieldsOutput)
}

// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsPtrOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsPtrOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.EventTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(pulumi.StringPtrOutput)
}

// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o EventGridTopicInputMappingFieldsPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGridTopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

type EventHubCaptureDescription struct {
	// A `destination` block as defined below.
	Destination EventHubCaptureDescriptionDestination `pulumi:"destination"`
	// Specifies if the Capture Description is Enabled.
	Enabled bool `pulumi:"enabled"`
	// Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
	Encoding string `pulumi:"encoding"`
	// Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
	// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000`  bytes. Defaults to `314572800` bytes.
	SizeLimitInBytes *int `pulumi:"sizeLimitInBytes"`
	// Specifies if empty files should not be emitted if no events occur during the Capture time window.  Defaults to `false`.
	SkipEmptyArchives *bool `pulumi:"skipEmptyArchives"`
}

// EventHubCaptureDescriptionInput is an input type that accepts EventHubCaptureDescriptionArgs and EventHubCaptureDescriptionOutput values.
// You can construct a concrete instance of `EventHubCaptureDescriptionInput` via:
//
//          EventHubCaptureDescriptionArgs{...}
type EventHubCaptureDescriptionInput interface {
	pulumi.Input

	ToEventHubCaptureDescriptionOutput() EventHubCaptureDescriptionOutput
	ToEventHubCaptureDescriptionOutputWithContext(context.Context) EventHubCaptureDescriptionOutput
}

type EventHubCaptureDescriptionArgs struct {
	// A `destination` block as defined below.
	Destination EventHubCaptureDescriptionDestinationInput `pulumi:"destination"`
	// Specifies if the Capture Description is Enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
	Encoding pulumi.StringInput `pulumi:"encoding"`
	// Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
	IntervalInSeconds pulumi.IntPtrInput `pulumi:"intervalInSeconds"`
	// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000`  bytes. Defaults to `314572800` bytes.
	SizeLimitInBytes pulumi.IntPtrInput `pulumi:"sizeLimitInBytes"`
	// Specifies if empty files should not be emitted if no events occur during the Capture time window.  Defaults to `false`.
	SkipEmptyArchives pulumi.BoolPtrInput `pulumi:"skipEmptyArchives"`
}

func (EventHubCaptureDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubCaptureDescription)(nil)).Elem()
}

func (i EventHubCaptureDescriptionArgs) ToEventHubCaptureDescriptionOutput() EventHubCaptureDescriptionOutput {
	return i.ToEventHubCaptureDescriptionOutputWithContext(context.Background())
}

func (i EventHubCaptureDescriptionArgs) ToEventHubCaptureDescriptionOutputWithContext(ctx context.Context) EventHubCaptureDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionOutput)
}

func (i EventHubCaptureDescriptionArgs) ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput {
	return i.ToEventHubCaptureDescriptionPtrOutputWithContext(context.Background())
}

func (i EventHubCaptureDescriptionArgs) ToEventHubCaptureDescriptionPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionOutput).ToEventHubCaptureDescriptionPtrOutputWithContext(ctx)
}

// EventHubCaptureDescriptionPtrInput is an input type that accepts EventHubCaptureDescriptionArgs, EventHubCaptureDescriptionPtr and EventHubCaptureDescriptionPtrOutput values.
// You can construct a concrete instance of `EventHubCaptureDescriptionPtrInput` via:
//
//          EventHubCaptureDescriptionArgs{...}
//
//  or:
//
//          nil
type EventHubCaptureDescriptionPtrInput interface {
	pulumi.Input

	ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput
	ToEventHubCaptureDescriptionPtrOutputWithContext(context.Context) EventHubCaptureDescriptionPtrOutput
}

type eventHubCaptureDescriptionPtrType EventHubCaptureDescriptionArgs

func EventHubCaptureDescriptionPtr(v *EventHubCaptureDescriptionArgs) EventHubCaptureDescriptionPtrInput {
	return (*eventHubCaptureDescriptionPtrType)(v)
}

func (*eventHubCaptureDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubCaptureDescription)(nil)).Elem()
}

func (i *eventHubCaptureDescriptionPtrType) ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput {
	return i.ToEventHubCaptureDescriptionPtrOutputWithContext(context.Background())
}

func (i *eventHubCaptureDescriptionPtrType) ToEventHubCaptureDescriptionPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionPtrOutput)
}

type EventHubCaptureDescriptionOutput struct{ *pulumi.OutputState }

func (EventHubCaptureDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubCaptureDescription)(nil)).Elem()
}

func (o EventHubCaptureDescriptionOutput) ToEventHubCaptureDescriptionOutput() EventHubCaptureDescriptionOutput {
	return o
}

func (o EventHubCaptureDescriptionOutput) ToEventHubCaptureDescriptionOutputWithContext(ctx context.Context) EventHubCaptureDescriptionOutput {
	return o
}

func (o EventHubCaptureDescriptionOutput) ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput {
	return o.ToEventHubCaptureDescriptionPtrOutputWithContext(context.Background())
}

func (o EventHubCaptureDescriptionOutput) ToEventHubCaptureDescriptionPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) *EventHubCaptureDescription {
		return &v
	}).(EventHubCaptureDescriptionPtrOutput)
}

// A `destination` block as defined below.
func (o EventHubCaptureDescriptionOutput) Destination() EventHubCaptureDescriptionDestinationOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) EventHubCaptureDescriptionDestination { return v.Destination }).(EventHubCaptureDescriptionDestinationOutput)
}

// Specifies if the Capture Description is Enabled.
func (o EventHubCaptureDescriptionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
func (o EventHubCaptureDescriptionOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) string { return v.Encoding }).(pulumi.StringOutput)
}

// Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
func (o EventHubCaptureDescriptionOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) *int { return v.IntervalInSeconds }).(pulumi.IntPtrOutput)
}

// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000`  bytes. Defaults to `314572800` bytes.
func (o EventHubCaptureDescriptionOutput) SizeLimitInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) *int { return v.SizeLimitInBytes }).(pulumi.IntPtrOutput)
}

// Specifies if empty files should not be emitted if no events occur during the Capture time window.  Defaults to `false`.
func (o EventHubCaptureDescriptionOutput) SkipEmptyArchives() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescription) *bool { return v.SkipEmptyArchives }).(pulumi.BoolPtrOutput)
}

type EventHubCaptureDescriptionPtrOutput struct{ *pulumi.OutputState }

func (EventHubCaptureDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubCaptureDescription)(nil)).Elem()
}

func (o EventHubCaptureDescriptionPtrOutput) ToEventHubCaptureDescriptionPtrOutput() EventHubCaptureDescriptionPtrOutput {
	return o
}

func (o EventHubCaptureDescriptionPtrOutput) ToEventHubCaptureDescriptionPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionPtrOutput {
	return o
}

func (o EventHubCaptureDescriptionPtrOutput) Elem() EventHubCaptureDescriptionOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) EventHubCaptureDescription { return *v }).(EventHubCaptureDescriptionOutput)
}

// A `destination` block as defined below.
func (o EventHubCaptureDescriptionPtrOutput) Destination() EventHubCaptureDescriptionDestinationPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) *EventHubCaptureDescriptionDestination {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(EventHubCaptureDescriptionDestinationPtrOutput)
}

// Specifies if the Capture Description is Enabled.
func (o EventHubCaptureDescriptionPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the Encoding used for the Capture Description. Possible values are `Avro` and `AvroDeflate`.
func (o EventHubCaptureDescriptionPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) *string {
		if v == nil {
			return nil
		}
		return &v.Encoding
	}).(pulumi.StringPtrOutput)
}

// Specifies the time interval in seconds at which the capture will happen. Values can be between `60` and `900` seconds. Defaults to `300` seconds.
func (o EventHubCaptureDescriptionPtrOutput) IntervalInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) *int {
		if v == nil {
			return nil
		}
		return v.IntervalInSeconds
	}).(pulumi.IntPtrOutput)
}

// Specifies the amount of data built up in your EventHub before a Capture Operation occurs. Value should be between `10485760` and `524288000`  bytes. Defaults to `314572800` bytes.
func (o EventHubCaptureDescriptionPtrOutput) SizeLimitInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) *int {
		if v == nil {
			return nil
		}
		return v.SizeLimitInBytes
	}).(pulumi.IntPtrOutput)
}

// Specifies if empty files should not be emitted if no events occur during the Capture time window.  Defaults to `false`.
func (o EventHubCaptureDescriptionPtrOutput) SkipEmptyArchives() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescription) *bool {
		if v == nil {
			return nil
		}
		return v.SkipEmptyArchives
	}).(pulumi.BoolPtrOutput)
}

type EventHubCaptureDescriptionDestination struct {
	// The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
	ArchiveNameFormat string `pulumi:"archiveNameFormat"`
	// The name of the Container within the Blob Storage Account where messages should be archived.
	BlobContainerName string `pulumi:"blobContainerName"`
	// The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
	Name string `pulumi:"name"`
	// The ID of the Blob Storage Account where messages should be archived.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// EventHubCaptureDescriptionDestinationInput is an input type that accepts EventHubCaptureDescriptionDestinationArgs and EventHubCaptureDescriptionDestinationOutput values.
// You can construct a concrete instance of `EventHubCaptureDescriptionDestinationInput` via:
//
//          EventHubCaptureDescriptionDestinationArgs{...}
type EventHubCaptureDescriptionDestinationInput interface {
	pulumi.Input

	ToEventHubCaptureDescriptionDestinationOutput() EventHubCaptureDescriptionDestinationOutput
	ToEventHubCaptureDescriptionDestinationOutputWithContext(context.Context) EventHubCaptureDescriptionDestinationOutput
}

type EventHubCaptureDescriptionDestinationArgs struct {
	// The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
	ArchiveNameFormat pulumi.StringInput `pulumi:"archiveNameFormat"`
	// The name of the Container within the Blob Storage Account where messages should be archived.
	BlobContainerName pulumi.StringInput `pulumi:"blobContainerName"`
	// The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the Blob Storage Account where messages should be archived.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (EventHubCaptureDescriptionDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubCaptureDescriptionDestination)(nil)).Elem()
}

func (i EventHubCaptureDescriptionDestinationArgs) ToEventHubCaptureDescriptionDestinationOutput() EventHubCaptureDescriptionDestinationOutput {
	return i.ToEventHubCaptureDescriptionDestinationOutputWithContext(context.Background())
}

func (i EventHubCaptureDescriptionDestinationArgs) ToEventHubCaptureDescriptionDestinationOutputWithContext(ctx context.Context) EventHubCaptureDescriptionDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionDestinationOutput)
}

func (i EventHubCaptureDescriptionDestinationArgs) ToEventHubCaptureDescriptionDestinationPtrOutput() EventHubCaptureDescriptionDestinationPtrOutput {
	return i.ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(context.Background())
}

func (i EventHubCaptureDescriptionDestinationArgs) ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionDestinationOutput).ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(ctx)
}

// EventHubCaptureDescriptionDestinationPtrInput is an input type that accepts EventHubCaptureDescriptionDestinationArgs, EventHubCaptureDescriptionDestinationPtr and EventHubCaptureDescriptionDestinationPtrOutput values.
// You can construct a concrete instance of `EventHubCaptureDescriptionDestinationPtrInput` via:
//
//          EventHubCaptureDescriptionDestinationArgs{...}
//
//  or:
//
//          nil
type EventHubCaptureDescriptionDestinationPtrInput interface {
	pulumi.Input

	ToEventHubCaptureDescriptionDestinationPtrOutput() EventHubCaptureDescriptionDestinationPtrOutput
	ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(context.Context) EventHubCaptureDescriptionDestinationPtrOutput
}

type eventHubCaptureDescriptionDestinationPtrType EventHubCaptureDescriptionDestinationArgs

func EventHubCaptureDescriptionDestinationPtr(v *EventHubCaptureDescriptionDestinationArgs) EventHubCaptureDescriptionDestinationPtrInput {
	return (*eventHubCaptureDescriptionDestinationPtrType)(v)
}

func (*eventHubCaptureDescriptionDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubCaptureDescriptionDestination)(nil)).Elem()
}

func (i *eventHubCaptureDescriptionDestinationPtrType) ToEventHubCaptureDescriptionDestinationPtrOutput() EventHubCaptureDescriptionDestinationPtrOutput {
	return i.ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(context.Background())
}

func (i *eventHubCaptureDescriptionDestinationPtrType) ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubCaptureDescriptionDestinationPtrOutput)
}

type EventHubCaptureDescriptionDestinationOutput struct{ *pulumi.OutputState }

func (EventHubCaptureDescriptionDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubCaptureDescriptionDestination)(nil)).Elem()
}

func (o EventHubCaptureDescriptionDestinationOutput) ToEventHubCaptureDescriptionDestinationOutput() EventHubCaptureDescriptionDestinationOutput {
	return o
}

func (o EventHubCaptureDescriptionDestinationOutput) ToEventHubCaptureDescriptionDestinationOutputWithContext(ctx context.Context) EventHubCaptureDescriptionDestinationOutput {
	return o
}

func (o EventHubCaptureDescriptionDestinationOutput) ToEventHubCaptureDescriptionDestinationPtrOutput() EventHubCaptureDescriptionDestinationPtrOutput {
	return o.ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(context.Background())
}

func (o EventHubCaptureDescriptionDestinationOutput) ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionDestinationPtrOutput {
	return o.ApplyT(func(v EventHubCaptureDescriptionDestination) *EventHubCaptureDescriptionDestination {
		return &v
	}).(EventHubCaptureDescriptionDestinationPtrOutput)
}

// The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
func (o EventHubCaptureDescriptionDestinationOutput) ArchiveNameFormat() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescriptionDestination) string { return v.ArchiveNameFormat }).(pulumi.StringOutput)
}

// The name of the Container within the Blob Storage Account where messages should be archived.
func (o EventHubCaptureDescriptionDestinationOutput) BlobContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescriptionDestination) string { return v.BlobContainerName }).(pulumi.StringOutput)
}

// The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
func (o EventHubCaptureDescriptionDestinationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescriptionDestination) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Blob Storage Account where messages should be archived.
func (o EventHubCaptureDescriptionDestinationOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubCaptureDescriptionDestination) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type EventHubCaptureDescriptionDestinationPtrOutput struct{ *pulumi.OutputState }

func (EventHubCaptureDescriptionDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubCaptureDescriptionDestination)(nil)).Elem()
}

func (o EventHubCaptureDescriptionDestinationPtrOutput) ToEventHubCaptureDescriptionDestinationPtrOutput() EventHubCaptureDescriptionDestinationPtrOutput {
	return o
}

func (o EventHubCaptureDescriptionDestinationPtrOutput) ToEventHubCaptureDescriptionDestinationPtrOutputWithContext(ctx context.Context) EventHubCaptureDescriptionDestinationPtrOutput {
	return o
}

func (o EventHubCaptureDescriptionDestinationPtrOutput) Elem() EventHubCaptureDescriptionDestinationOutput {
	return o.ApplyT(func(v *EventHubCaptureDescriptionDestination) EventHubCaptureDescriptionDestination { return *v }).(EventHubCaptureDescriptionDestinationOutput)
}

// The Blob naming convention for archiving. e.g. `{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}`. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
func (o EventHubCaptureDescriptionDestinationPtrOutput) ArchiveNameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.ArchiveNameFormat
	}).(pulumi.StringPtrOutput)
}

// The name of the Container within the Blob Storage Account where messages should be archived.
func (o EventHubCaptureDescriptionDestinationPtrOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.BlobContainerName
	}).(pulumi.StringPtrOutput)
}

// The Name of the Destination where the capture should take place. At this time the only supported value is `EventHubArchive.AzureBlockBlob`.
func (o EventHubCaptureDescriptionDestinationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The ID of the Blob Storage Account where messages should be archived.
func (o EventHubCaptureDescriptionDestinationPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubCaptureDescriptionDestination) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

type EventHubNamespaceIdentity struct {
	// The Client ID of the Service Principal assigned to this EventHub Namespace.
	PrincipalId *string `pulumi:"principalId"`
	// The ID of the Tenant the Service Principal is assigned in.
	TenantId *string `pulumi:"tenantId"`
	// The Type of Identity which should be used for this EventHub Namespace. At this time the only possible value is `SystemAssigned`.
	Type string `pulumi:"type"`
}

// EventHubNamespaceIdentityInput is an input type that accepts EventHubNamespaceIdentityArgs and EventHubNamespaceIdentityOutput values.
// You can construct a concrete instance of `EventHubNamespaceIdentityInput` via:
//
//          EventHubNamespaceIdentityArgs{...}
type EventHubNamespaceIdentityInput interface {
	pulumi.Input

	ToEventHubNamespaceIdentityOutput() EventHubNamespaceIdentityOutput
	ToEventHubNamespaceIdentityOutputWithContext(context.Context) EventHubNamespaceIdentityOutput
}

type EventHubNamespaceIdentityArgs struct {
	// The Client ID of the Service Principal assigned to this EventHub Namespace.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The ID of the Tenant the Service Principal is assigned in.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The Type of Identity which should be used for this EventHub Namespace. At this time the only possible value is `SystemAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (EventHubNamespaceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceIdentity)(nil)).Elem()
}

func (i EventHubNamespaceIdentityArgs) ToEventHubNamespaceIdentityOutput() EventHubNamespaceIdentityOutput {
	return i.ToEventHubNamespaceIdentityOutputWithContext(context.Background())
}

func (i EventHubNamespaceIdentityArgs) ToEventHubNamespaceIdentityOutputWithContext(ctx context.Context) EventHubNamespaceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceIdentityOutput)
}

func (i EventHubNamespaceIdentityArgs) ToEventHubNamespaceIdentityPtrOutput() EventHubNamespaceIdentityPtrOutput {
	return i.ToEventHubNamespaceIdentityPtrOutputWithContext(context.Background())
}

func (i EventHubNamespaceIdentityArgs) ToEventHubNamespaceIdentityPtrOutputWithContext(ctx context.Context) EventHubNamespaceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceIdentityOutput).ToEventHubNamespaceIdentityPtrOutputWithContext(ctx)
}

// EventHubNamespaceIdentityPtrInput is an input type that accepts EventHubNamespaceIdentityArgs, EventHubNamespaceIdentityPtr and EventHubNamespaceIdentityPtrOutput values.
// You can construct a concrete instance of `EventHubNamespaceIdentityPtrInput` via:
//
//          EventHubNamespaceIdentityArgs{...}
//
//  or:
//
//          nil
type EventHubNamespaceIdentityPtrInput interface {
	pulumi.Input

	ToEventHubNamespaceIdentityPtrOutput() EventHubNamespaceIdentityPtrOutput
	ToEventHubNamespaceIdentityPtrOutputWithContext(context.Context) EventHubNamespaceIdentityPtrOutput
}

type eventHubNamespaceIdentityPtrType EventHubNamespaceIdentityArgs

func EventHubNamespaceIdentityPtr(v *EventHubNamespaceIdentityArgs) EventHubNamespaceIdentityPtrInput {
	return (*eventHubNamespaceIdentityPtrType)(v)
}

func (*eventHubNamespaceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubNamespaceIdentity)(nil)).Elem()
}

func (i *eventHubNamespaceIdentityPtrType) ToEventHubNamespaceIdentityPtrOutput() EventHubNamespaceIdentityPtrOutput {
	return i.ToEventHubNamespaceIdentityPtrOutputWithContext(context.Background())
}

func (i *eventHubNamespaceIdentityPtrType) ToEventHubNamespaceIdentityPtrOutputWithContext(ctx context.Context) EventHubNamespaceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceIdentityPtrOutput)
}

type EventHubNamespaceIdentityOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceIdentity)(nil)).Elem()
}

func (o EventHubNamespaceIdentityOutput) ToEventHubNamespaceIdentityOutput() EventHubNamespaceIdentityOutput {
	return o
}

func (o EventHubNamespaceIdentityOutput) ToEventHubNamespaceIdentityOutputWithContext(ctx context.Context) EventHubNamespaceIdentityOutput {
	return o
}

func (o EventHubNamespaceIdentityOutput) ToEventHubNamespaceIdentityPtrOutput() EventHubNamespaceIdentityPtrOutput {
	return o.ToEventHubNamespaceIdentityPtrOutputWithContext(context.Background())
}

func (o EventHubNamespaceIdentityOutput) ToEventHubNamespaceIdentityPtrOutputWithContext(ctx context.Context) EventHubNamespaceIdentityPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceIdentity) *EventHubNamespaceIdentity {
		return &v
	}).(EventHubNamespaceIdentityPtrOutput)
}

// The Client ID of the Service Principal assigned to this EventHub Namespace.
func (o EventHubNamespaceIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The ID of the Tenant the Service Principal is assigned in.
func (o EventHubNamespaceIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The Type of Identity which should be used for this EventHub Namespace. At this time the only possible value is `SystemAssigned`.
func (o EventHubNamespaceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubNamespaceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type EventHubNamespaceIdentityPtrOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubNamespaceIdentity)(nil)).Elem()
}

func (o EventHubNamespaceIdentityPtrOutput) ToEventHubNamespaceIdentityPtrOutput() EventHubNamespaceIdentityPtrOutput {
	return o
}

func (o EventHubNamespaceIdentityPtrOutput) ToEventHubNamespaceIdentityPtrOutputWithContext(ctx context.Context) EventHubNamespaceIdentityPtrOutput {
	return o
}

func (o EventHubNamespaceIdentityPtrOutput) Elem() EventHubNamespaceIdentityOutput {
	return o.ApplyT(func(v *EventHubNamespaceIdentity) EventHubNamespaceIdentity { return *v }).(EventHubNamespaceIdentityOutput)
}

// The Client ID of the Service Principal assigned to this EventHub Namespace.
func (o EventHubNamespaceIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubNamespaceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The ID of the Tenant the Service Principal is assigned in.
func (o EventHubNamespaceIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubNamespaceIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The Type of Identity which should be used for this EventHub Namespace. At this time the only possible value is `SystemAssigned`.
func (o EventHubNamespaceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubNamespaceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type EventHubNamespaceNetworkRulesets struct {
	// The default action to take when a rule is not matched. Possible values are `Allow` and `Deny`. Defaults to `Deny`.
	DefaultAction string `pulumi:"defaultAction"`
	// One or more `ipRule` blocks as defined below.
	IpRules []EventHubNamespaceNetworkRulesetsIpRule `pulumi:"ipRules"`
	// Whether Trusted Microsoft Services are allowed to bypass firewall.
	TrustedServiceAccessEnabled *bool `pulumi:"trustedServiceAccessEnabled"`
	// One or more `virtualNetworkRule` blocks as defined below.
	VirtualNetworkRules []EventHubNamespaceNetworkRulesetsVirtualNetworkRule `pulumi:"virtualNetworkRules"`
}

// EventHubNamespaceNetworkRulesetsInput is an input type that accepts EventHubNamespaceNetworkRulesetsArgs and EventHubNamespaceNetworkRulesetsOutput values.
// You can construct a concrete instance of `EventHubNamespaceNetworkRulesetsInput` via:
//
//          EventHubNamespaceNetworkRulesetsArgs{...}
type EventHubNamespaceNetworkRulesetsInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsOutput() EventHubNamespaceNetworkRulesetsOutput
	ToEventHubNamespaceNetworkRulesetsOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsOutput
}

type EventHubNamespaceNetworkRulesetsArgs struct {
	// The default action to take when a rule is not matched. Possible values are `Allow` and `Deny`. Defaults to `Deny`.
	DefaultAction pulumi.StringInput `pulumi:"defaultAction"`
	// One or more `ipRule` blocks as defined below.
	IpRules EventHubNamespaceNetworkRulesetsIpRuleArrayInput `pulumi:"ipRules"`
	// Whether Trusted Microsoft Services are allowed to bypass firewall.
	TrustedServiceAccessEnabled pulumi.BoolPtrInput `pulumi:"trustedServiceAccessEnabled"`
	// One or more `virtualNetworkRule` blocks as defined below.
	VirtualNetworkRules EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayInput `pulumi:"virtualNetworkRules"`
}

func (EventHubNamespaceNetworkRulesetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesets)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsArgs) ToEventHubNamespaceNetworkRulesetsOutput() EventHubNamespaceNetworkRulesetsOutput {
	return i.ToEventHubNamespaceNetworkRulesetsOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsArgs) ToEventHubNamespaceNetworkRulesetsOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsOutput)
}

func (i EventHubNamespaceNetworkRulesetsArgs) ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput {
	return i.ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsArgs) ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsOutput).ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx)
}

// EventHubNamespaceNetworkRulesetsPtrInput is an input type that accepts EventHubNamespaceNetworkRulesetsArgs, EventHubNamespaceNetworkRulesetsPtr and EventHubNamespaceNetworkRulesetsPtrOutput values.
// You can construct a concrete instance of `EventHubNamespaceNetworkRulesetsPtrInput` via:
//
//          EventHubNamespaceNetworkRulesetsArgs{...}
//
//  or:
//
//          nil
type EventHubNamespaceNetworkRulesetsPtrInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput
	ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsPtrOutput
}

type eventHubNamespaceNetworkRulesetsPtrType EventHubNamespaceNetworkRulesetsArgs

func EventHubNamespaceNetworkRulesetsPtr(v *EventHubNamespaceNetworkRulesetsArgs) EventHubNamespaceNetworkRulesetsPtrInput {
	return (*eventHubNamespaceNetworkRulesetsPtrType)(v)
}

func (*eventHubNamespaceNetworkRulesetsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubNamespaceNetworkRulesets)(nil)).Elem()
}

func (i *eventHubNamespaceNetworkRulesetsPtrType) ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput {
	return i.ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(context.Background())
}

func (i *eventHubNamespaceNetworkRulesetsPtrType) ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsPtrOutput)
}

type EventHubNamespaceNetworkRulesetsOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesets)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsOutput) ToEventHubNamespaceNetworkRulesetsOutput() EventHubNamespaceNetworkRulesetsOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsOutput) ToEventHubNamespaceNetworkRulesetsOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsOutput) ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput {
	return o.ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(context.Background())
}

func (o EventHubNamespaceNetworkRulesetsOutput) ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) *EventHubNamespaceNetworkRulesets {
		return &v
	}).(EventHubNamespaceNetworkRulesetsPtrOutput)
}

// The default action to take when a rule is not matched. Possible values are `Allow` and `Deny`. Defaults to `Deny`.
func (o EventHubNamespaceNetworkRulesetsOutput) DefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) string { return v.DefaultAction }).(pulumi.StringOutput)
}

// One or more `ipRule` blocks as defined below.
func (o EventHubNamespaceNetworkRulesetsOutput) IpRules() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) []EventHubNamespaceNetworkRulesetsIpRule { return v.IpRules }).(EventHubNamespaceNetworkRulesetsIpRuleArrayOutput)
}

// Whether Trusted Microsoft Services are allowed to bypass firewall.
func (o EventHubNamespaceNetworkRulesetsOutput) TrustedServiceAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) *bool { return v.TrustedServiceAccessEnabled }).(pulumi.BoolPtrOutput)
}

// One or more `virtualNetworkRule` blocks as defined below.
func (o EventHubNamespaceNetworkRulesetsOutput) VirtualNetworkRules() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesets) []EventHubNamespaceNetworkRulesetsVirtualNetworkRule {
		return v.VirtualNetworkRules
	}).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput)
}

type EventHubNamespaceNetworkRulesetsPtrOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubNamespaceNetworkRulesets)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsPtrOutput) ToEventHubNamespaceNetworkRulesetsPtrOutput() EventHubNamespaceNetworkRulesetsPtrOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsPtrOutput) ToEventHubNamespaceNetworkRulesetsPtrOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsPtrOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsPtrOutput) Elem() EventHubNamespaceNetworkRulesetsOutput {
	return o.ApplyT(func(v *EventHubNamespaceNetworkRulesets) EventHubNamespaceNetworkRulesets { return *v }).(EventHubNamespaceNetworkRulesetsOutput)
}

// The default action to take when a rule is not matched. Possible values are `Allow` and `Deny`. Defaults to `Deny`.
func (o EventHubNamespaceNetworkRulesetsPtrOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubNamespaceNetworkRulesets) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultAction
	}).(pulumi.StringPtrOutput)
}

// One or more `ipRule` blocks as defined below.
func (o EventHubNamespaceNetworkRulesetsPtrOutput) IpRules() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return o.ApplyT(func(v *EventHubNamespaceNetworkRulesets) []EventHubNamespaceNetworkRulesetsIpRule {
		if v == nil {
			return nil
		}
		return v.IpRules
	}).(EventHubNamespaceNetworkRulesetsIpRuleArrayOutput)
}

// Whether Trusted Microsoft Services are allowed to bypass firewall.
func (o EventHubNamespaceNetworkRulesetsPtrOutput) TrustedServiceAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventHubNamespaceNetworkRulesets) *bool {
		if v == nil {
			return nil
		}
		return v.TrustedServiceAccessEnabled
	}).(pulumi.BoolPtrOutput)
}

// One or more `virtualNetworkRule` blocks as defined below.
func (o EventHubNamespaceNetworkRulesetsPtrOutput) VirtualNetworkRules() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return o.ApplyT(func(v *EventHubNamespaceNetworkRulesets) []EventHubNamespaceNetworkRulesetsVirtualNetworkRule {
		if v == nil {
			return nil
		}
		return v.VirtualNetworkRules
	}).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput)
}

type EventHubNamespaceNetworkRulesetsIpRule struct {
	// The action to take when the rule is matched. Possible values are `Allow`.
	Action *string `pulumi:"action"`
	// The ip mask to match on.
	IpMask string `pulumi:"ipMask"`
}

// EventHubNamespaceNetworkRulesetsIpRuleInput is an input type that accepts EventHubNamespaceNetworkRulesetsIpRuleArgs and EventHubNamespaceNetworkRulesetsIpRuleOutput values.
// You can construct a concrete instance of `EventHubNamespaceNetworkRulesetsIpRuleInput` via:
//
//          EventHubNamespaceNetworkRulesetsIpRuleArgs{...}
type EventHubNamespaceNetworkRulesetsIpRuleInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsIpRuleOutput() EventHubNamespaceNetworkRulesetsIpRuleOutput
	ToEventHubNamespaceNetworkRulesetsIpRuleOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsIpRuleOutput
}

type EventHubNamespaceNetworkRulesetsIpRuleArgs struct {
	// The action to take when the rule is matched. Possible values are `Allow`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// The ip mask to match on.
	IpMask pulumi.StringInput `pulumi:"ipMask"`
}

func (EventHubNamespaceNetworkRulesetsIpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesetsIpRule)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsIpRuleArgs) ToEventHubNamespaceNetworkRulesetsIpRuleOutput() EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return i.ToEventHubNamespaceNetworkRulesetsIpRuleOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsIpRuleArgs) ToEventHubNamespaceNetworkRulesetsIpRuleOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsIpRuleOutput)
}

// EventHubNamespaceNetworkRulesetsIpRuleArrayInput is an input type that accepts EventHubNamespaceNetworkRulesetsIpRuleArray and EventHubNamespaceNetworkRulesetsIpRuleArrayOutput values.
// You can construct a concrete instance of `EventHubNamespaceNetworkRulesetsIpRuleArrayInput` via:
//
//          EventHubNamespaceNetworkRulesetsIpRuleArray{ EventHubNamespaceNetworkRulesetsIpRuleArgs{...} }
type EventHubNamespaceNetworkRulesetsIpRuleArrayInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutput() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput
	ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsIpRuleArrayOutput
}

type EventHubNamespaceNetworkRulesetsIpRuleArray []EventHubNamespaceNetworkRulesetsIpRuleInput

func (EventHubNamespaceNetworkRulesetsIpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubNamespaceNetworkRulesetsIpRule)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsIpRuleArray) ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutput() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return i.ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsIpRuleArray) ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsIpRuleArrayOutput)
}

type EventHubNamespaceNetworkRulesetsIpRuleOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsIpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesetsIpRule)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsIpRuleOutput) ToEventHubNamespaceNetworkRulesetsIpRuleOutput() EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsIpRuleOutput) ToEventHubNamespaceNetworkRulesetsIpRuleOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return o
}

// The action to take when the rule is matched. Possible values are `Allow`.
func (o EventHubNamespaceNetworkRulesetsIpRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesetsIpRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The ip mask to match on.
func (o EventHubNamespaceNetworkRulesetsIpRuleOutput) IpMask() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesetsIpRule) string { return v.IpMask }).(pulumi.StringOutput)
}

type EventHubNamespaceNetworkRulesetsIpRuleArrayOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsIpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubNamespaceNetworkRulesetsIpRule)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsIpRuleArrayOutput) ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutput() EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsIpRuleArrayOutput) ToEventHubNamespaceNetworkRulesetsIpRuleArrayOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsIpRuleArrayOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsIpRuleArrayOutput) Index(i pulumi.IntInput) EventHubNamespaceNetworkRulesetsIpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubNamespaceNetworkRulesetsIpRule {
		return vs[0].([]EventHubNamespaceNetworkRulesetsIpRule)[vs[1].(int)]
	}).(EventHubNamespaceNetworkRulesetsIpRuleOutput)
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRule struct {
	// Are missing virtual network service endpoints ignored? Defaults to `false`.
	IgnoreMissingVirtualNetworkServiceEndpoint *bool `pulumi:"ignoreMissingVirtualNetworkServiceEndpoint"`
	// The id of the subnet to match on.
	SubnetId string `pulumi:"subnetId"`
}

// EventHubNamespaceNetworkRulesetsVirtualNetworkRuleInput is an input type that accepts EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs and EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput values.
// You can construct a concrete instance of `EventHubNamespaceNetworkRulesetsVirtualNetworkRuleInput` via:
//
//          EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs{...}
type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput
	ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs struct {
	// Are missing virtual network service endpoints ignored? Defaults to `false`.
	IgnoreMissingVirtualNetworkServiceEndpoint pulumi.BoolPtrInput `pulumi:"ignoreMissingVirtualNetworkServiceEndpoint"`
	// The id of the subnet to match on.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesetsVirtualNetworkRule)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return i.ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput)
}

// EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayInput is an input type that accepts EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray and EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput values.
// You can construct a concrete instance of `EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayInput` via:
//
//          EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray{ EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArgs{...} }
type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayInput interface {
	pulumi.Input

	ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput
	ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutputWithContext(context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray []EventHubNamespaceNetworkRulesetsVirtualNetworkRuleInput

func (EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubNamespaceNetworkRulesetsVirtualNetworkRule)(nil)).Elem()
}

func (i EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return i.ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutputWithContext(context.Background())
}

func (i EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArray) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput)
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubNamespaceNetworkRulesetsVirtualNetworkRule)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return o
}

// Are missing virtual network service endpoints ignored? Defaults to `false`.
func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) IgnoreMissingVirtualNetworkServiceEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesetsVirtualNetworkRule) *bool {
		return v.IgnoreMissingVirtualNetworkServiceEndpoint
	}).(pulumi.BoolPtrOutput)
}

// The id of the subnet to match on.
func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubNamespaceNetworkRulesetsVirtualNetworkRule) string { return v.SubnetId }).(pulumi.StringOutput)
}

type EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput struct{ *pulumi.OutputState }

func (EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubNamespaceNetworkRulesetsVirtualNetworkRule)(nil)).Elem()
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput() EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput) ToEventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutputWithContext(ctx context.Context) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput {
	return o
}

func (o EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput) Index(i pulumi.IntInput) EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubNamespaceNetworkRulesetsVirtualNetworkRule {
		return vs[0].([]EventHubNamespaceNetworkRulesetsVirtualNetworkRule)[vs[1].(int)]
	}).(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput)
}

type EventSubscriptionAdvancedFilter struct {
	// Compares a value of an event using a single boolean value.
	BoolEquals []EventSubscriptionAdvancedFilterBoolEqual `pulumi:"boolEquals"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThanOrEquals []EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual `pulumi:"numberGreaterThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThans []EventSubscriptionAdvancedFilterNumberGreaterThan `pulumi:"numberGreaterThans"`
	// Compares a value of an event using multiple floating point numbers.
	NumberIns []EventSubscriptionAdvancedFilterNumberIn `pulumi:"numberIns"`
	// Compares a value of an event using a single floating point number.
	NumberLessThanOrEquals []EventSubscriptionAdvancedFilterNumberLessThanOrEqual `pulumi:"numberLessThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberLessThans []EventSubscriptionAdvancedFilterNumberLessThan `pulumi:"numberLessThans"`
	// Compares a value of an event using multiple floating point numbers.
	NumberNotIns []EventSubscriptionAdvancedFilterNumberNotIn `pulumi:"numberNotIns"`
	// Compares a value of an event using multiple string values.
	StringBeginsWiths []EventSubscriptionAdvancedFilterStringBeginsWith `pulumi:"stringBeginsWiths"`
	// Compares a value of an event using multiple string values.
	StringContains []EventSubscriptionAdvancedFilterStringContain `pulumi:"stringContains"`
	// Compares a value of an event using multiple string values.
	StringEndsWiths []EventSubscriptionAdvancedFilterStringEndsWith `pulumi:"stringEndsWiths"`
	// Compares a value of an event using multiple string values.
	StringIns []EventSubscriptionAdvancedFilterStringIn `pulumi:"stringIns"`
	// Compares a value of an event using multiple string values.
	StringNotIns []EventSubscriptionAdvancedFilterStringNotIn `pulumi:"stringNotIns"`
}

// EventSubscriptionAdvancedFilterInput is an input type that accepts EventSubscriptionAdvancedFilterArgs and EventSubscriptionAdvancedFilterOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterInput` via:
//
//          EventSubscriptionAdvancedFilterArgs{...}
type EventSubscriptionAdvancedFilterInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterOutput() EventSubscriptionAdvancedFilterOutput
	ToEventSubscriptionAdvancedFilterOutputWithContext(context.Context) EventSubscriptionAdvancedFilterOutput
}

type EventSubscriptionAdvancedFilterArgs struct {
	// Compares a value of an event using a single boolean value.
	BoolEquals EventSubscriptionAdvancedFilterBoolEqualArrayInput `pulumi:"boolEquals"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThanOrEquals EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput `pulumi:"numberGreaterThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThans EventSubscriptionAdvancedFilterNumberGreaterThanArrayInput `pulumi:"numberGreaterThans"`
	// Compares a value of an event using multiple floating point numbers.
	NumberIns EventSubscriptionAdvancedFilterNumberInArrayInput `pulumi:"numberIns"`
	// Compares a value of an event using a single floating point number.
	NumberLessThanOrEquals EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput `pulumi:"numberLessThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberLessThans EventSubscriptionAdvancedFilterNumberLessThanArrayInput `pulumi:"numberLessThans"`
	// Compares a value of an event using multiple floating point numbers.
	NumberNotIns EventSubscriptionAdvancedFilterNumberNotInArrayInput `pulumi:"numberNotIns"`
	// Compares a value of an event using multiple string values.
	StringBeginsWiths EventSubscriptionAdvancedFilterStringBeginsWithArrayInput `pulumi:"stringBeginsWiths"`
	// Compares a value of an event using multiple string values.
	StringContains EventSubscriptionAdvancedFilterStringContainArrayInput `pulumi:"stringContains"`
	// Compares a value of an event using multiple string values.
	StringEndsWiths EventSubscriptionAdvancedFilterStringEndsWithArrayInput `pulumi:"stringEndsWiths"`
	// Compares a value of an event using multiple string values.
	StringIns EventSubscriptionAdvancedFilterStringInArrayInput `pulumi:"stringIns"`
	// Compares a value of an event using multiple string values.
	StringNotIns EventSubscriptionAdvancedFilterStringNotInArrayInput `pulumi:"stringNotIns"`
}

func (EventSubscriptionAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterArgs) ToEventSubscriptionAdvancedFilterOutput() EventSubscriptionAdvancedFilterOutput {
	return i.ToEventSubscriptionAdvancedFilterOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterArgs) ToEventSubscriptionAdvancedFilterOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterOutput)
}

func (i EventSubscriptionAdvancedFilterArgs) ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput {
	return i.ToEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterArgs) ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterOutput).ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx)
}

// EventSubscriptionAdvancedFilterPtrInput is an input type that accepts EventSubscriptionAdvancedFilterArgs, EventSubscriptionAdvancedFilterPtr and EventSubscriptionAdvancedFilterPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterPtrInput` via:
//
//          EventSubscriptionAdvancedFilterArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionAdvancedFilterPtrInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput
	ToEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Context) EventSubscriptionAdvancedFilterPtrOutput
}

type eventSubscriptionAdvancedFilterPtrType EventSubscriptionAdvancedFilterArgs

func EventSubscriptionAdvancedFilterPtr(v *EventSubscriptionAdvancedFilterArgs) EventSubscriptionAdvancedFilterPtrInput {
	return (*eventSubscriptionAdvancedFilterPtrType)(v)
}

func (*eventSubscriptionAdvancedFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (i *eventSubscriptionAdvancedFilterPtrType) ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput {
	return i.ToEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionAdvancedFilterPtrType) ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterPtrOutput)
}

type EventSubscriptionAdvancedFilterOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterOutput) ToEventSubscriptionAdvancedFilterOutput() EventSubscriptionAdvancedFilterOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterOutput) ToEventSubscriptionAdvancedFilterOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterOutput) ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput {
	return o.ToEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionAdvancedFilterOutput) ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterPtrOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) *EventSubscriptionAdvancedFilter {
		return &v
	}).(EventSubscriptionAdvancedFilterPtrOutput)
}

// Compares a value of an event using a single boolean value.
func (o EventSubscriptionAdvancedFilterOutput) BoolEquals() EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterBoolEqual {
		return v.BoolEquals
	}).(EventSubscriptionAdvancedFilterBoolEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterOutput) NumberGreaterThanOrEquals() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual {
		return v.NumberGreaterThanOrEquals
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterOutput) NumberGreaterThans() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberGreaterThan {
		return v.NumberGreaterThans
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o EventSubscriptionAdvancedFilterOutput) NumberIns() EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberIn { return v.NumberIns }).(EventSubscriptionAdvancedFilterNumberInArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterOutput) NumberLessThanOrEquals() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberLessThanOrEqual {
		return v.NumberLessThanOrEquals
	}).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterOutput) NumberLessThans() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberLessThan {
		return v.NumberLessThans
	}).(EventSubscriptionAdvancedFilterNumberLessThanArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o EventSubscriptionAdvancedFilterOutput) NumberNotIns() EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberNotIn {
		return v.NumberNotIns
	}).(EventSubscriptionAdvancedFilterNumberNotInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringBeginsWiths() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringBeginsWith {
		return v.StringBeginsWiths
	}).(EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringContains() EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringContain {
		return v.StringContains
	}).(EventSubscriptionAdvancedFilterStringContainArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringEndsWiths() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringEndsWith {
		return v.StringEndsWiths
	}).(EventSubscriptionAdvancedFilterStringEndsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringIns() EventSubscriptionAdvancedFilterStringInArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringIn { return v.StringIns }).(EventSubscriptionAdvancedFilterStringInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringNotIns() EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringNotIn {
		return v.StringNotIns
	}).(EventSubscriptionAdvancedFilterStringNotInArrayOutput)
}

type EventSubscriptionAdvancedFilterPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterPtrOutput) ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterPtrOutput) ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterPtrOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterPtrOutput) Elem() EventSubscriptionAdvancedFilterOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) EventSubscriptionAdvancedFilter { return *v }).(EventSubscriptionAdvancedFilterOutput)
}

// Compares a value of an event using a single boolean value.
func (o EventSubscriptionAdvancedFilterPtrOutput) BoolEquals() EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterBoolEqual {
		if v == nil {
			return nil
		}
		return v.BoolEquals
	}).(EventSubscriptionAdvancedFilterBoolEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberGreaterThanOrEquals() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual {
		if v == nil {
			return nil
		}
		return v.NumberGreaterThanOrEquals
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberGreaterThans() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberGreaterThan {
		if v == nil {
			return nil
		}
		return v.NumberGreaterThans
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberIns() EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberIn {
		if v == nil {
			return nil
		}
		return v.NumberIns
	}).(EventSubscriptionAdvancedFilterNumberInArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberLessThanOrEquals() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberLessThanOrEqual {
		if v == nil {
			return nil
		}
		return v.NumberLessThanOrEquals
	}).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberLessThans() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberLessThan {
		if v == nil {
			return nil
		}
		return v.NumberLessThans
	}).(EventSubscriptionAdvancedFilterNumberLessThanArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberNotIns() EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberNotIn {
		if v == nil {
			return nil
		}
		return v.NumberNotIns
	}).(EventSubscriptionAdvancedFilterNumberNotInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringBeginsWiths() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringBeginsWith {
		if v == nil {
			return nil
		}
		return v.StringBeginsWiths
	}).(EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringContains() EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringContain {
		if v == nil {
			return nil
		}
		return v.StringContains
	}).(EventSubscriptionAdvancedFilterStringContainArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringEndsWiths() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringEndsWith {
		if v == nil {
			return nil
		}
		return v.StringEndsWiths
	}).(EventSubscriptionAdvancedFilterStringEndsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringIns() EventSubscriptionAdvancedFilterStringInArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringIn {
		if v == nil {
			return nil
		}
		return v.StringIns
	}).(EventSubscriptionAdvancedFilterStringInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringNotIns() EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringNotIn {
		if v == nil {
			return nil
		}
		return v.StringNotIns
	}).(EventSubscriptionAdvancedFilterStringNotInArrayOutput)
}

type EventSubscriptionAdvancedFilterBoolEqual struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value bool `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterBoolEqualInput is an input type that accepts EventSubscriptionAdvancedFilterBoolEqualArgs and EventSubscriptionAdvancedFilterBoolEqualOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterBoolEqualInput` via:
//
//          EventSubscriptionAdvancedFilterBoolEqualArgs{...}
type EventSubscriptionAdvancedFilterBoolEqualInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterBoolEqualOutput() EventSubscriptionAdvancedFilterBoolEqualOutput
	ToEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(context.Context) EventSubscriptionAdvancedFilterBoolEqualOutput
}

type EventSubscriptionAdvancedFilterBoolEqualArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.BoolInput `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterBoolEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterBoolEqualArgs) ToEventSubscriptionAdvancedFilterBoolEqualOutput() EventSubscriptionAdvancedFilterBoolEqualOutput {
	return i.ToEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterBoolEqualArgs) ToEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterBoolEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterBoolEqualOutput)
}

// EventSubscriptionAdvancedFilterBoolEqualArrayInput is an input type that accepts EventSubscriptionAdvancedFilterBoolEqualArray and EventSubscriptionAdvancedFilterBoolEqualArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterBoolEqualArrayInput` via:
//
//          EventSubscriptionAdvancedFilterBoolEqualArray{ EventSubscriptionAdvancedFilterBoolEqualArgs{...} }
type EventSubscriptionAdvancedFilterBoolEqualArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterBoolEqualArrayOutput() EventSubscriptionAdvancedFilterBoolEqualArrayOutput
	ToEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterBoolEqualArrayOutput
}

type EventSubscriptionAdvancedFilterBoolEqualArray []EventSubscriptionAdvancedFilterBoolEqualInput

func (EventSubscriptionAdvancedFilterBoolEqualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterBoolEqualArray) ToEventSubscriptionAdvancedFilterBoolEqualArrayOutput() EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterBoolEqualArray) ToEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterBoolEqualArrayOutput)
}

type EventSubscriptionAdvancedFilterBoolEqualOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterBoolEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterBoolEqualOutput) ToEventSubscriptionAdvancedFilterBoolEqualOutput() EventSubscriptionAdvancedFilterBoolEqualOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterBoolEqualOutput) ToEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterBoolEqualOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterBoolEqualOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterBoolEqual) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o EventSubscriptionAdvancedFilterBoolEqualOutput) Value() pulumi.BoolOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterBoolEqual) bool { return v.Value }).(pulumi.BoolOutput)
}

type EventSubscriptionAdvancedFilterBoolEqualArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterBoolEqualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterBoolEqualArrayOutput) ToEventSubscriptionAdvancedFilterBoolEqualArrayOutput() EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterBoolEqualArrayOutput) ToEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterBoolEqualArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterBoolEqualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterBoolEqual {
		return vs[0].([]EventSubscriptionAdvancedFilterBoolEqual)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterBoolEqualOutput)
}

type EventSubscriptionAdvancedFilterNumberGreaterThan struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value float64 `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterNumberGreaterThanInput is an input type that accepts EventSubscriptionAdvancedFilterNumberGreaterThanArgs and EventSubscriptionAdvancedFilterNumberGreaterThanOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberGreaterThanInput` via:
//
//          EventSubscriptionAdvancedFilterNumberGreaterThanArgs{...}
type EventSubscriptionAdvancedFilterNumberGreaterThanInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberGreaterThanOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOutput
	ToEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOutput
}

type EventSubscriptionAdvancedFilterNumberGreaterThanArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterNumberGreaterThanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanArgs) ToEventSubscriptionAdvancedFilterNumberGreaterThanOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanArgs) ToEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberGreaterThanOutput)
}

// EventSubscriptionAdvancedFilterNumberGreaterThanArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberGreaterThanArray and EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberGreaterThanArrayInput` via:
//
//          EventSubscriptionAdvancedFilterNumberGreaterThanArray{ EventSubscriptionAdvancedFilterNumberGreaterThanArgs{...} }
type EventSubscriptionAdvancedFilterNumberGreaterThanArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput
	ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput
}

type EventSubscriptionAdvancedFilterNumberGreaterThanArray []EventSubscriptionAdvancedFilterNumberGreaterThanInput

func (EventSubscriptionAdvancedFilterNumberGreaterThanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanArray) ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanArray) ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberGreaterThanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberGreaterThanOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberGreaterThan) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o EventSubscriptionAdvancedFilterNumberGreaterThanOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberGreaterThan) float64 { return v.Value }).(pulumi.Float64Output)
}

type EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberGreaterThan {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberGreaterThan)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanOutput)
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value float64 `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput is an input type that accepts EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs and EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput` via:
//
//          EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs{...}
type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput
	ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput)
}

// EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray and EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput` via:
//
//          EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray{ EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs{...} }
type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput
	ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray []EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput

func (EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual) float64 { return v.Value }).(pulumi.Float64Output)
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput)
}

type EventSubscriptionAdvancedFilterNumberIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []float64 `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterNumberInInput is an input type that accepts EventSubscriptionAdvancedFilterNumberInArgs and EventSubscriptionAdvancedFilterNumberInOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberInInput` via:
//
//          EventSubscriptionAdvancedFilterNumberInArgs{...}
type EventSubscriptionAdvancedFilterNumberInInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberInOutput() EventSubscriptionAdvancedFilterNumberInOutput
	ToEventSubscriptionAdvancedFilterNumberInOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberInOutput
}

type EventSubscriptionAdvancedFilterNumberInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterNumberInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberInArgs) ToEventSubscriptionAdvancedFilterNumberInOutput() EventSubscriptionAdvancedFilterNumberInOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberInOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberInArgs) ToEventSubscriptionAdvancedFilterNumberInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberInOutput)
}

// EventSubscriptionAdvancedFilterNumberInArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberInArray and EventSubscriptionAdvancedFilterNumberInArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberInArrayInput` via:
//
//          EventSubscriptionAdvancedFilterNumberInArray{ EventSubscriptionAdvancedFilterNumberInArgs{...} }
type EventSubscriptionAdvancedFilterNumberInArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberInArrayOutput() EventSubscriptionAdvancedFilterNumberInArrayOutput
	ToEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberInArrayOutput
}

type EventSubscriptionAdvancedFilterNumberInArray []EventSubscriptionAdvancedFilterNumberInInput

func (EventSubscriptionAdvancedFilterNumberInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberInArray) ToEventSubscriptionAdvancedFilterNumberInArrayOutput() EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberInArray) ToEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberInArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberInOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberInOutput) ToEventSubscriptionAdvancedFilterNumberInOutput() EventSubscriptionAdvancedFilterNumberInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberInOutput) ToEventSubscriptionAdvancedFilterNumberInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o EventSubscriptionAdvancedFilterNumberInOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberIn) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberInArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberInArrayOutput) ToEventSubscriptionAdvancedFilterNumberInArrayOutput() EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberInArrayOutput) ToEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberInArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberIn {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberIn)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberInOutput)
}

type EventSubscriptionAdvancedFilterNumberLessThan struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value float64 `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterNumberLessThanInput is an input type that accepts EventSubscriptionAdvancedFilterNumberLessThanArgs and EventSubscriptionAdvancedFilterNumberLessThanOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberLessThanInput` via:
//
//          EventSubscriptionAdvancedFilterNumberLessThanArgs{...}
type EventSubscriptionAdvancedFilterNumberLessThanInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberLessThanOutput() EventSubscriptionAdvancedFilterNumberLessThanOutput
	ToEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberLessThanOutput
}

type EventSubscriptionAdvancedFilterNumberLessThanArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterNumberLessThanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberLessThanArgs) ToEventSubscriptionAdvancedFilterNumberLessThanOutput() EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberLessThanArgs) ToEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberLessThanOutput)
}

// EventSubscriptionAdvancedFilterNumberLessThanArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberLessThanArray and EventSubscriptionAdvancedFilterNumberLessThanArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberLessThanArrayInput` via:
//
//          EventSubscriptionAdvancedFilterNumberLessThanArray{ EventSubscriptionAdvancedFilterNumberLessThanArgs{...} }
type EventSubscriptionAdvancedFilterNumberLessThanArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput
	ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberLessThanArrayOutput
}

type EventSubscriptionAdvancedFilterNumberLessThanArray []EventSubscriptionAdvancedFilterNumberLessThanInput

func (EventSubscriptionAdvancedFilterNumberLessThanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberLessThanArray) ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberLessThanArray) ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberLessThanArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberLessThanOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberLessThanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOutput() EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberLessThanOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberLessThan) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o EventSubscriptionAdvancedFilterNumberLessThanOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberLessThan) float64 { return v.Value }).(pulumi.Float64Output)
}

type EventSubscriptionAdvancedFilterNumberLessThanArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberLessThanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberLessThanArrayOutput) ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanArrayOutput) ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberLessThan {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberLessThan)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberLessThanOutput)
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqual struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value float64 `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterNumberLessThanOrEqualInput is an input type that accepts EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs and EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberLessThanOrEqualInput` via:
//
//          EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs{...}
type EventSubscriptionAdvancedFilterNumberLessThanOrEqualInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput
	ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput)
}

// EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray and EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput` via:
//
//          EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray{ EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs{...} }
type EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput
	ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray []EventSubscriptionAdvancedFilterNumberLessThanOrEqualInput

func (EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberLessThanOrEqual) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberLessThanOrEqual) float64 { return v.Value }).(pulumi.Float64Output)
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberLessThanOrEqual {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberLessThanOrEqual)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput)
}

type EventSubscriptionAdvancedFilterNumberNotIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []float64 `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterNumberNotInInput is an input type that accepts EventSubscriptionAdvancedFilterNumberNotInArgs and EventSubscriptionAdvancedFilterNumberNotInOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberNotInInput` via:
//
//          EventSubscriptionAdvancedFilterNumberNotInArgs{...}
type EventSubscriptionAdvancedFilterNumberNotInInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberNotInOutput() EventSubscriptionAdvancedFilterNumberNotInOutput
	ToEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberNotInOutput
}

type EventSubscriptionAdvancedFilterNumberNotInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterNumberNotInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberNotInArgs) ToEventSubscriptionAdvancedFilterNumberNotInOutput() EventSubscriptionAdvancedFilterNumberNotInOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberNotInArgs) ToEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberNotInOutput)
}

// EventSubscriptionAdvancedFilterNumberNotInArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberNotInArray and EventSubscriptionAdvancedFilterNumberNotInArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberNotInArrayInput` via:
//
//          EventSubscriptionAdvancedFilterNumberNotInArray{ EventSubscriptionAdvancedFilterNumberNotInArgs{...} }
type EventSubscriptionAdvancedFilterNumberNotInArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberNotInArrayOutput() EventSubscriptionAdvancedFilterNumberNotInArrayOutput
	ToEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberNotInArrayOutput
}

type EventSubscriptionAdvancedFilterNumberNotInArray []EventSubscriptionAdvancedFilterNumberNotInInput

func (EventSubscriptionAdvancedFilterNumberNotInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberNotInArray) ToEventSubscriptionAdvancedFilterNumberNotInArrayOutput() EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberNotInArray) ToEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberNotInArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberNotInOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberNotInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberNotInOutput) ToEventSubscriptionAdvancedFilterNumberNotInOutput() EventSubscriptionAdvancedFilterNumberNotInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberNotInOutput) ToEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberNotInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberNotIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o EventSubscriptionAdvancedFilterNumberNotInOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberNotIn) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberNotInArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberNotInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberNotInArrayOutput) ToEventSubscriptionAdvancedFilterNumberNotInArrayOutput() EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberNotInArrayOutput) ToEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberNotInArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberNotInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberNotIn {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberNotIn)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberNotInOutput)
}

type EventSubscriptionAdvancedFilterStringBeginsWith struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringBeginsWithInput is an input type that accepts EventSubscriptionAdvancedFilterStringBeginsWithArgs and EventSubscriptionAdvancedFilterStringBeginsWithOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringBeginsWithInput` via:
//
//          EventSubscriptionAdvancedFilterStringBeginsWithArgs{...}
type EventSubscriptionAdvancedFilterStringBeginsWithInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringBeginsWithOutput() EventSubscriptionAdvancedFilterStringBeginsWithOutput
	ToEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringBeginsWithOutput
}

type EventSubscriptionAdvancedFilterStringBeginsWithArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringBeginsWithArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringBeginsWithArgs) ToEventSubscriptionAdvancedFilterStringBeginsWithOutput() EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return i.ToEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringBeginsWithArgs) ToEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringBeginsWithOutput)
}

// EventSubscriptionAdvancedFilterStringBeginsWithArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringBeginsWithArray and EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringBeginsWithArrayInput` via:
//
//          EventSubscriptionAdvancedFilterStringBeginsWithArray{ EventSubscriptionAdvancedFilterStringBeginsWithArgs{...} }
type EventSubscriptionAdvancedFilterStringBeginsWithArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput
	ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput
}

type EventSubscriptionAdvancedFilterStringBeginsWithArray []EventSubscriptionAdvancedFilterStringBeginsWithInput

func (EventSubscriptionAdvancedFilterStringBeginsWithArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringBeginsWithArray) ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringBeginsWithArray) ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput)
}

type EventSubscriptionAdvancedFilterStringBeginsWithOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringBeginsWithOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithOutput) ToEventSubscriptionAdvancedFilterStringBeginsWithOutput() EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithOutput) ToEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringBeginsWithOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringBeginsWith) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o EventSubscriptionAdvancedFilterStringBeginsWithOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringBeginsWith) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringBeginsWith {
		return vs[0].([]EventSubscriptionAdvancedFilterStringBeginsWith)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringBeginsWithOutput)
}

type EventSubscriptionAdvancedFilterStringContain struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringContainInput is an input type that accepts EventSubscriptionAdvancedFilterStringContainArgs and EventSubscriptionAdvancedFilterStringContainOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringContainInput` via:
//
//          EventSubscriptionAdvancedFilterStringContainArgs{...}
type EventSubscriptionAdvancedFilterStringContainInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringContainOutput() EventSubscriptionAdvancedFilterStringContainOutput
	ToEventSubscriptionAdvancedFilterStringContainOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringContainOutput
}

type EventSubscriptionAdvancedFilterStringContainArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringContainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringContainArgs) ToEventSubscriptionAdvancedFilterStringContainOutput() EventSubscriptionAdvancedFilterStringContainOutput {
	return i.ToEventSubscriptionAdvancedFilterStringContainOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringContainArgs) ToEventSubscriptionAdvancedFilterStringContainOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringContainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringContainOutput)
}

// EventSubscriptionAdvancedFilterStringContainArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringContainArray and EventSubscriptionAdvancedFilterStringContainArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringContainArrayInput` via:
//
//          EventSubscriptionAdvancedFilterStringContainArray{ EventSubscriptionAdvancedFilterStringContainArgs{...} }
type EventSubscriptionAdvancedFilterStringContainArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringContainArrayOutput() EventSubscriptionAdvancedFilterStringContainArrayOutput
	ToEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringContainArrayOutput
}

type EventSubscriptionAdvancedFilterStringContainArray []EventSubscriptionAdvancedFilterStringContainInput

func (EventSubscriptionAdvancedFilterStringContainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringContainArray) ToEventSubscriptionAdvancedFilterStringContainArrayOutput() EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringContainArray) ToEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringContainArrayOutput)
}

type EventSubscriptionAdvancedFilterStringContainOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringContainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringContainOutput) ToEventSubscriptionAdvancedFilterStringContainOutput() EventSubscriptionAdvancedFilterStringContainOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringContainOutput) ToEventSubscriptionAdvancedFilterStringContainOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringContainOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringContainOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringContain) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o EventSubscriptionAdvancedFilterStringContainOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringContain) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringContainArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringContainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringContainArrayOutput) ToEventSubscriptionAdvancedFilterStringContainArrayOutput() EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringContainArrayOutput) ToEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringContainArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringContainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringContain {
		return vs[0].([]EventSubscriptionAdvancedFilterStringContain)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringContainOutput)
}

type EventSubscriptionAdvancedFilterStringEndsWith struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringEndsWithInput is an input type that accepts EventSubscriptionAdvancedFilterStringEndsWithArgs and EventSubscriptionAdvancedFilterStringEndsWithOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringEndsWithInput` via:
//
//          EventSubscriptionAdvancedFilterStringEndsWithArgs{...}
type EventSubscriptionAdvancedFilterStringEndsWithInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringEndsWithOutput() EventSubscriptionAdvancedFilterStringEndsWithOutput
	ToEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringEndsWithOutput
}

type EventSubscriptionAdvancedFilterStringEndsWithArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringEndsWithArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringEndsWithArgs) ToEventSubscriptionAdvancedFilterStringEndsWithOutput() EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return i.ToEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringEndsWithArgs) ToEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringEndsWithOutput)
}

// EventSubscriptionAdvancedFilterStringEndsWithArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringEndsWithArray and EventSubscriptionAdvancedFilterStringEndsWithArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringEndsWithArrayInput` via:
//
//          EventSubscriptionAdvancedFilterStringEndsWithArray{ EventSubscriptionAdvancedFilterStringEndsWithArgs{...} }
type EventSubscriptionAdvancedFilterStringEndsWithArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutput() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput
	ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringEndsWithArrayOutput
}

type EventSubscriptionAdvancedFilterStringEndsWithArray []EventSubscriptionAdvancedFilterStringEndsWithInput

func (EventSubscriptionAdvancedFilterStringEndsWithArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringEndsWithArray) ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutput() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringEndsWithArray) ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringEndsWithArrayOutput)
}

type EventSubscriptionAdvancedFilterStringEndsWithOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringEndsWithOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringEndsWithOutput) ToEventSubscriptionAdvancedFilterStringEndsWithOutput() EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringEndsWithOutput) ToEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringEndsWithOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringEndsWith) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o EventSubscriptionAdvancedFilterStringEndsWithOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringEndsWith) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringEndsWithArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringEndsWithArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringEndsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutput() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringEndsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringEndsWithArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringEndsWith {
		return vs[0].([]EventSubscriptionAdvancedFilterStringEndsWith)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringEndsWithOutput)
}

type EventSubscriptionAdvancedFilterStringIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringInInput is an input type that accepts EventSubscriptionAdvancedFilterStringInArgs and EventSubscriptionAdvancedFilterStringInOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringInInput` via:
//
//          EventSubscriptionAdvancedFilterStringInArgs{...}
type EventSubscriptionAdvancedFilterStringInInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringInOutput() EventSubscriptionAdvancedFilterStringInOutput
	ToEventSubscriptionAdvancedFilterStringInOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringInOutput
}

type EventSubscriptionAdvancedFilterStringInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringInArgs) ToEventSubscriptionAdvancedFilterStringInOutput() EventSubscriptionAdvancedFilterStringInOutput {
	return i.ToEventSubscriptionAdvancedFilterStringInOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringInArgs) ToEventSubscriptionAdvancedFilterStringInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringInOutput)
}

// EventSubscriptionAdvancedFilterStringInArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringInArray and EventSubscriptionAdvancedFilterStringInArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringInArrayInput` via:
//
//          EventSubscriptionAdvancedFilterStringInArray{ EventSubscriptionAdvancedFilterStringInArgs{...} }
type EventSubscriptionAdvancedFilterStringInArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringInArrayOutput() EventSubscriptionAdvancedFilterStringInArrayOutput
	ToEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringInArrayOutput
}

type EventSubscriptionAdvancedFilterStringInArray []EventSubscriptionAdvancedFilterStringInInput

func (EventSubscriptionAdvancedFilterStringInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringInArray) ToEventSubscriptionAdvancedFilterStringInArrayOutput() EventSubscriptionAdvancedFilterStringInArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringInArray) ToEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringInArrayOutput)
}

type EventSubscriptionAdvancedFilterStringInOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringInOutput) ToEventSubscriptionAdvancedFilterStringInOutput() EventSubscriptionAdvancedFilterStringInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringInOutput) ToEventSubscriptionAdvancedFilterStringInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringInOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o EventSubscriptionAdvancedFilterStringInOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringIn) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringInArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringInArrayOutput) ToEventSubscriptionAdvancedFilterStringInArrayOutput() EventSubscriptionAdvancedFilterStringInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringInArrayOutput) ToEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringInArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringIn {
		return vs[0].([]EventSubscriptionAdvancedFilterStringIn)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringInOutput)
}

type EventSubscriptionAdvancedFilterStringNotIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringNotInInput is an input type that accepts EventSubscriptionAdvancedFilterStringNotInArgs and EventSubscriptionAdvancedFilterStringNotInOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringNotInInput` via:
//
//          EventSubscriptionAdvancedFilterStringNotInArgs{...}
type EventSubscriptionAdvancedFilterStringNotInInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringNotInOutput() EventSubscriptionAdvancedFilterStringNotInOutput
	ToEventSubscriptionAdvancedFilterStringNotInOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringNotInOutput
}

type EventSubscriptionAdvancedFilterStringNotInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringNotInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringNotInArgs) ToEventSubscriptionAdvancedFilterStringNotInOutput() EventSubscriptionAdvancedFilterStringNotInOutput {
	return i.ToEventSubscriptionAdvancedFilterStringNotInOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringNotInArgs) ToEventSubscriptionAdvancedFilterStringNotInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringNotInOutput)
}

// EventSubscriptionAdvancedFilterStringNotInArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringNotInArray and EventSubscriptionAdvancedFilterStringNotInArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringNotInArrayInput` via:
//
//          EventSubscriptionAdvancedFilterStringNotInArray{ EventSubscriptionAdvancedFilterStringNotInArgs{...} }
type EventSubscriptionAdvancedFilterStringNotInArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringNotInArrayOutput() EventSubscriptionAdvancedFilterStringNotInArrayOutput
	ToEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringNotInArrayOutput
}

type EventSubscriptionAdvancedFilterStringNotInArray []EventSubscriptionAdvancedFilterStringNotInInput

func (EventSubscriptionAdvancedFilterStringNotInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringNotInArray) ToEventSubscriptionAdvancedFilterStringNotInArrayOutput() EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringNotInArray) ToEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringNotInArrayOutput)
}

type EventSubscriptionAdvancedFilterStringNotInOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringNotInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringNotInOutput) ToEventSubscriptionAdvancedFilterStringNotInOutput() EventSubscriptionAdvancedFilterStringNotInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotInOutput) ToEventSubscriptionAdvancedFilterStringNotInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotInOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringNotInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringNotIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o EventSubscriptionAdvancedFilterStringNotInOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringNotIn) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringNotInArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringNotInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringNotInArrayOutput) ToEventSubscriptionAdvancedFilterStringNotInArrayOutput() EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotInArrayOutput) ToEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotInArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringNotInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringNotIn {
		return vs[0].([]EventSubscriptionAdvancedFilterStringNotIn)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringNotInOutput)
}

type EventSubscriptionAzureFunctionEndpoint struct {
	// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
	FunctionId string `pulumi:"functionId"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
}

// EventSubscriptionAzureFunctionEndpointInput is an input type that accepts EventSubscriptionAzureFunctionEndpointArgs and EventSubscriptionAzureFunctionEndpointOutput values.
// You can construct a concrete instance of `EventSubscriptionAzureFunctionEndpointInput` via:
//
//          EventSubscriptionAzureFunctionEndpointArgs{...}
type EventSubscriptionAzureFunctionEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionAzureFunctionEndpointOutput() EventSubscriptionAzureFunctionEndpointOutput
	ToEventSubscriptionAzureFunctionEndpointOutputWithContext(context.Context) EventSubscriptionAzureFunctionEndpointOutput
}

type EventSubscriptionAzureFunctionEndpointArgs struct {
	// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
	FunctionId pulumi.StringInput `pulumi:"functionId"`
	// Maximum number of events per batch.
	MaxEventsPerBatch pulumi.IntPtrInput `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes pulumi.IntPtrInput `pulumi:"preferredBatchSizeInKilobytes"`
}

func (EventSubscriptionAzureFunctionEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (i EventSubscriptionAzureFunctionEndpointArgs) ToEventSubscriptionAzureFunctionEndpointOutput() EventSubscriptionAzureFunctionEndpointOutput {
	return i.ToEventSubscriptionAzureFunctionEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionAzureFunctionEndpointArgs) ToEventSubscriptionAzureFunctionEndpointOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAzureFunctionEndpointOutput)
}

func (i EventSubscriptionAzureFunctionEndpointArgs) ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput {
	return i.ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionAzureFunctionEndpointArgs) ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAzureFunctionEndpointOutput).ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx)
}

// EventSubscriptionAzureFunctionEndpointPtrInput is an input type that accepts EventSubscriptionAzureFunctionEndpointArgs, EventSubscriptionAzureFunctionEndpointPtr and EventSubscriptionAzureFunctionEndpointPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionAzureFunctionEndpointPtrInput` via:
//
//          EventSubscriptionAzureFunctionEndpointArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionAzureFunctionEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput
	ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput
}

type eventSubscriptionAzureFunctionEndpointPtrType EventSubscriptionAzureFunctionEndpointArgs

func EventSubscriptionAzureFunctionEndpointPtr(v *EventSubscriptionAzureFunctionEndpointArgs) EventSubscriptionAzureFunctionEndpointPtrInput {
	return (*eventSubscriptionAzureFunctionEndpointPtrType)(v)
}

func (*eventSubscriptionAzureFunctionEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionAzureFunctionEndpointPtrType) ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput {
	return i.ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionAzureFunctionEndpointPtrType) ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAzureFunctionEndpointPtrOutput)
}

type EventSubscriptionAzureFunctionEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAzureFunctionEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (o EventSubscriptionAzureFunctionEndpointOutput) ToEventSubscriptionAzureFunctionEndpointOutput() EventSubscriptionAzureFunctionEndpointOutput {
	return o
}

func (o EventSubscriptionAzureFunctionEndpointOutput) ToEventSubscriptionAzureFunctionEndpointOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointOutput {
	return o
}

func (o EventSubscriptionAzureFunctionEndpointOutput) ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput {
	return o.ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionAzureFunctionEndpointOutput) ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionAzureFunctionEndpoint) *EventSubscriptionAzureFunctionEndpoint {
		return &v
	}).(EventSubscriptionAzureFunctionEndpointPtrOutput)
}

// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
func (o EventSubscriptionAzureFunctionEndpointOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAzureFunctionEndpoint) string { return v.FunctionId }).(pulumi.StringOutput)
}

// Maximum number of events per batch.
func (o EventSubscriptionAzureFunctionEndpointOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSubscriptionAzureFunctionEndpoint) *int { return v.MaxEventsPerBatch }).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o EventSubscriptionAzureFunctionEndpointOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSubscriptionAzureFunctionEndpoint) *int { return v.PreferredBatchSizeInKilobytes }).(pulumi.IntPtrOutput)
}

type EventSubscriptionAzureFunctionEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAzureFunctionEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (o EventSubscriptionAzureFunctionEndpointPtrOutput) ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput {
	return o
}

func (o EventSubscriptionAzureFunctionEndpointPtrOutput) ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput {
	return o
}

func (o EventSubscriptionAzureFunctionEndpointPtrOutput) Elem() EventSubscriptionAzureFunctionEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionAzureFunctionEndpoint) EventSubscriptionAzureFunctionEndpoint { return *v }).(EventSubscriptionAzureFunctionEndpointOutput)
}

// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
func (o EventSubscriptionAzureFunctionEndpointPtrOutput) FunctionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionAzureFunctionEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.FunctionId
	}).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o EventSubscriptionAzureFunctionEndpointPtrOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionAzureFunctionEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.MaxEventsPerBatch
	}).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o EventSubscriptionAzureFunctionEndpointPtrOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionAzureFunctionEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.PreferredBatchSizeInKilobytes
	}).(pulumi.IntPtrOutput)
}

type EventSubscriptionEventhubEndpoint struct {
	// Specifies the id of the eventhub where the Event Subscription will receive events.
	EventhubId *string `pulumi:"eventhubId"`
}

// EventSubscriptionEventhubEndpointInput is an input type that accepts EventSubscriptionEventhubEndpointArgs and EventSubscriptionEventhubEndpointOutput values.
// You can construct a concrete instance of `EventSubscriptionEventhubEndpointInput` via:
//
//          EventSubscriptionEventhubEndpointArgs{...}
type EventSubscriptionEventhubEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionEventhubEndpointOutput() EventSubscriptionEventhubEndpointOutput
	ToEventSubscriptionEventhubEndpointOutputWithContext(context.Context) EventSubscriptionEventhubEndpointOutput
}

type EventSubscriptionEventhubEndpointArgs struct {
	// Specifies the id of the eventhub where the Event Subscription will receive events.
	EventhubId pulumi.StringPtrInput `pulumi:"eventhubId"`
}

func (EventSubscriptionEventhubEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionEventhubEndpoint)(nil)).Elem()
}

func (i EventSubscriptionEventhubEndpointArgs) ToEventSubscriptionEventhubEndpointOutput() EventSubscriptionEventhubEndpointOutput {
	return i.ToEventSubscriptionEventhubEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionEventhubEndpointArgs) ToEventSubscriptionEventhubEndpointOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionEventhubEndpointOutput)
}

func (i EventSubscriptionEventhubEndpointArgs) ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput {
	return i.ToEventSubscriptionEventhubEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionEventhubEndpointArgs) ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionEventhubEndpointOutput).ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx)
}

// EventSubscriptionEventhubEndpointPtrInput is an input type that accepts EventSubscriptionEventhubEndpointArgs, EventSubscriptionEventhubEndpointPtr and EventSubscriptionEventhubEndpointPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionEventhubEndpointPtrInput` via:
//
//          EventSubscriptionEventhubEndpointArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionEventhubEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput
	ToEventSubscriptionEventhubEndpointPtrOutputWithContext(context.Context) EventSubscriptionEventhubEndpointPtrOutput
}

type eventSubscriptionEventhubEndpointPtrType EventSubscriptionEventhubEndpointArgs

func EventSubscriptionEventhubEndpointPtr(v *EventSubscriptionEventhubEndpointArgs) EventSubscriptionEventhubEndpointPtrInput {
	return (*eventSubscriptionEventhubEndpointPtrType)(v)
}

func (*eventSubscriptionEventhubEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionEventhubEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionEventhubEndpointPtrType) ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput {
	return i.ToEventSubscriptionEventhubEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionEventhubEndpointPtrType) ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionEventhubEndpointPtrOutput)
}

type EventSubscriptionEventhubEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionEventhubEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionEventhubEndpoint)(nil)).Elem()
}

func (o EventSubscriptionEventhubEndpointOutput) ToEventSubscriptionEventhubEndpointOutput() EventSubscriptionEventhubEndpointOutput {
	return o
}

func (o EventSubscriptionEventhubEndpointOutput) ToEventSubscriptionEventhubEndpointOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointOutput {
	return o
}

func (o EventSubscriptionEventhubEndpointOutput) ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput {
	return o.ToEventSubscriptionEventhubEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionEventhubEndpointOutput) ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionEventhubEndpoint) *EventSubscriptionEventhubEndpoint {
		return &v
	}).(EventSubscriptionEventhubEndpointPtrOutput)
}

// Specifies the id of the eventhub where the Event Subscription will receive events.
func (o EventSubscriptionEventhubEndpointOutput) EventhubId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionEventhubEndpoint) *string { return v.EventhubId }).(pulumi.StringPtrOutput)
}

type EventSubscriptionEventhubEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionEventhubEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionEventhubEndpoint)(nil)).Elem()
}

func (o EventSubscriptionEventhubEndpointPtrOutput) ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput {
	return o
}

func (o EventSubscriptionEventhubEndpointPtrOutput) ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointPtrOutput {
	return o
}

func (o EventSubscriptionEventhubEndpointPtrOutput) Elem() EventSubscriptionEventhubEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionEventhubEndpoint) EventSubscriptionEventhubEndpoint { return *v }).(EventSubscriptionEventhubEndpointOutput)
}

// Specifies the id of the eventhub where the Event Subscription will receive events.
func (o EventSubscriptionEventhubEndpointPtrOutput) EventhubId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionEventhubEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.EventhubId
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionHybridConnectionEndpoint struct {
	// Specifies the id of the hybrid connection where the Event Subscription will receive events.
	HybridConnectionId *string `pulumi:"hybridConnectionId"`
}

// EventSubscriptionHybridConnectionEndpointInput is an input type that accepts EventSubscriptionHybridConnectionEndpointArgs and EventSubscriptionHybridConnectionEndpointOutput values.
// You can construct a concrete instance of `EventSubscriptionHybridConnectionEndpointInput` via:
//
//          EventSubscriptionHybridConnectionEndpointArgs{...}
type EventSubscriptionHybridConnectionEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionHybridConnectionEndpointOutput() EventSubscriptionHybridConnectionEndpointOutput
	ToEventSubscriptionHybridConnectionEndpointOutputWithContext(context.Context) EventSubscriptionHybridConnectionEndpointOutput
}

type EventSubscriptionHybridConnectionEndpointArgs struct {
	// Specifies the id of the hybrid connection where the Event Subscription will receive events.
	HybridConnectionId pulumi.StringPtrInput `pulumi:"hybridConnectionId"`
}

func (EventSubscriptionHybridConnectionEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionHybridConnectionEndpoint)(nil)).Elem()
}

func (i EventSubscriptionHybridConnectionEndpointArgs) ToEventSubscriptionHybridConnectionEndpointOutput() EventSubscriptionHybridConnectionEndpointOutput {
	return i.ToEventSubscriptionHybridConnectionEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionHybridConnectionEndpointArgs) ToEventSubscriptionHybridConnectionEndpointOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionHybridConnectionEndpointOutput)
}

func (i EventSubscriptionHybridConnectionEndpointArgs) ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput {
	return i.ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionHybridConnectionEndpointArgs) ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionHybridConnectionEndpointOutput).ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx)
}

// EventSubscriptionHybridConnectionEndpointPtrInput is an input type that accepts EventSubscriptionHybridConnectionEndpointArgs, EventSubscriptionHybridConnectionEndpointPtr and EventSubscriptionHybridConnectionEndpointPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionHybridConnectionEndpointPtrInput` via:
//
//          EventSubscriptionHybridConnectionEndpointArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionHybridConnectionEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput
	ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput
}

type eventSubscriptionHybridConnectionEndpointPtrType EventSubscriptionHybridConnectionEndpointArgs

func EventSubscriptionHybridConnectionEndpointPtr(v *EventSubscriptionHybridConnectionEndpointArgs) EventSubscriptionHybridConnectionEndpointPtrInput {
	return (*eventSubscriptionHybridConnectionEndpointPtrType)(v)
}

func (*eventSubscriptionHybridConnectionEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionHybridConnectionEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionHybridConnectionEndpointPtrType) ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput {
	return i.ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionHybridConnectionEndpointPtrType) ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionHybridConnectionEndpointPtrOutput)
}

type EventSubscriptionHybridConnectionEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionHybridConnectionEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionHybridConnectionEndpoint)(nil)).Elem()
}

func (o EventSubscriptionHybridConnectionEndpointOutput) ToEventSubscriptionHybridConnectionEndpointOutput() EventSubscriptionHybridConnectionEndpointOutput {
	return o
}

func (o EventSubscriptionHybridConnectionEndpointOutput) ToEventSubscriptionHybridConnectionEndpointOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointOutput {
	return o
}

func (o EventSubscriptionHybridConnectionEndpointOutput) ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput {
	return o.ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionHybridConnectionEndpointOutput) ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionHybridConnectionEndpoint) *EventSubscriptionHybridConnectionEndpoint {
		return &v
	}).(EventSubscriptionHybridConnectionEndpointPtrOutput)
}

// Specifies the id of the hybrid connection where the Event Subscription will receive events.
func (o EventSubscriptionHybridConnectionEndpointOutput) HybridConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionHybridConnectionEndpoint) *string { return v.HybridConnectionId }).(pulumi.StringPtrOutput)
}

type EventSubscriptionHybridConnectionEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionHybridConnectionEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionHybridConnectionEndpoint)(nil)).Elem()
}

func (o EventSubscriptionHybridConnectionEndpointPtrOutput) ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput {
	return o
}

func (o EventSubscriptionHybridConnectionEndpointPtrOutput) ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput {
	return o
}

func (o EventSubscriptionHybridConnectionEndpointPtrOutput) Elem() EventSubscriptionHybridConnectionEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionHybridConnectionEndpoint) EventSubscriptionHybridConnectionEndpoint {
		return *v
	}).(EventSubscriptionHybridConnectionEndpointOutput)
}

// Specifies the id of the hybrid connection where the Event Subscription will receive events.
func (o EventSubscriptionHybridConnectionEndpointPtrOutput) HybridConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionHybridConnectionEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.HybridConnectionId
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionRetryPolicy struct {
	// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. Defaults to `1440`. See [official documentation](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
	EventTimeToLive int `pulumi:"eventTimeToLive"`
	// Specifies the maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts int `pulumi:"maxDeliveryAttempts"`
}

// EventSubscriptionRetryPolicyInput is an input type that accepts EventSubscriptionRetryPolicyArgs and EventSubscriptionRetryPolicyOutput values.
// You can construct a concrete instance of `EventSubscriptionRetryPolicyInput` via:
//
//          EventSubscriptionRetryPolicyArgs{...}
type EventSubscriptionRetryPolicyInput interface {
	pulumi.Input

	ToEventSubscriptionRetryPolicyOutput() EventSubscriptionRetryPolicyOutput
	ToEventSubscriptionRetryPolicyOutputWithContext(context.Context) EventSubscriptionRetryPolicyOutput
}

type EventSubscriptionRetryPolicyArgs struct {
	// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. Defaults to `1440`. See [official documentation](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
	EventTimeToLive pulumi.IntInput `pulumi:"eventTimeToLive"`
	// Specifies the maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts pulumi.IntInput `pulumi:"maxDeliveryAttempts"`
}

func (EventSubscriptionRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyOutput() EventSubscriptionRetryPolicyOutput {
	return i.ToEventSubscriptionRetryPolicyOutputWithContext(context.Background())
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionRetryPolicyOutput)
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return i.ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionRetryPolicyOutput).ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx)
}

// EventSubscriptionRetryPolicyPtrInput is an input type that accepts EventSubscriptionRetryPolicyArgs, EventSubscriptionRetryPolicyPtr and EventSubscriptionRetryPolicyPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionRetryPolicyPtrInput` via:
//
//          EventSubscriptionRetryPolicyArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionRetryPolicyPtrInput interface {
	pulumi.Input

	ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput
	ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Context) EventSubscriptionRetryPolicyPtrOutput
}

type eventSubscriptionRetryPolicyPtrType EventSubscriptionRetryPolicyArgs

func EventSubscriptionRetryPolicyPtr(v *EventSubscriptionRetryPolicyArgs) EventSubscriptionRetryPolicyPtrInput {
	return (*eventSubscriptionRetryPolicyPtrType)(v)
}

func (*eventSubscriptionRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (i *eventSubscriptionRetryPolicyPtrType) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return i.ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionRetryPolicyPtrType) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionRetryPolicyPtrOutput)
}

type EventSubscriptionRetryPolicyOutput struct{ *pulumi.OutputState }

func (EventSubscriptionRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyOutput() EventSubscriptionRetryPolicyOutput {
	return o
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyOutput {
	return o
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return o.ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return o.ApplyT(func(v EventSubscriptionRetryPolicy) *EventSubscriptionRetryPolicy {
		return &v
	}).(EventSubscriptionRetryPolicyPtrOutput)
}

// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. Defaults to `1440`. See [official documentation](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
func (o EventSubscriptionRetryPolicyOutput) EventTimeToLive() pulumi.IntOutput {
	return o.ApplyT(func(v EventSubscriptionRetryPolicy) int { return v.EventTimeToLive }).(pulumi.IntOutput)
}

// Specifies the maximum number of delivery retry attempts for events.
func (o EventSubscriptionRetryPolicyOutput) MaxDeliveryAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v EventSubscriptionRetryPolicy) int { return v.MaxDeliveryAttempts }).(pulumi.IntOutput)
}

type EventSubscriptionRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (o EventSubscriptionRetryPolicyPtrOutput) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return o
}

func (o EventSubscriptionRetryPolicyPtrOutput) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return o
}

func (o EventSubscriptionRetryPolicyPtrOutput) Elem() EventSubscriptionRetryPolicyOutput {
	return o.ApplyT(func(v *EventSubscriptionRetryPolicy) EventSubscriptionRetryPolicy { return *v }).(EventSubscriptionRetryPolicyOutput)
}

// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. Defaults to `1440`. See [official documentation](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
func (o EventSubscriptionRetryPolicyPtrOutput) EventTimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.EventTimeToLive
	}).(pulumi.IntPtrOutput)
}

// Specifies the maximum number of delivery retry attempts for events.
func (o EventSubscriptionRetryPolicyPtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

type EventSubscriptionStorageBlobDeadLetterDestination struct {
	// Specifies the id of the storage account id where the storage blob is located.
	StorageAccountId string `pulumi:"storageAccountId"`
	// Specifies the name of the Storage blob container that is the destination of the deadletter events.
	StorageBlobContainerName string `pulumi:"storageBlobContainerName"`
}

// EventSubscriptionStorageBlobDeadLetterDestinationInput is an input type that accepts EventSubscriptionStorageBlobDeadLetterDestinationArgs and EventSubscriptionStorageBlobDeadLetterDestinationOutput values.
// You can construct a concrete instance of `EventSubscriptionStorageBlobDeadLetterDestinationInput` via:
//
//          EventSubscriptionStorageBlobDeadLetterDestinationArgs{...}
type EventSubscriptionStorageBlobDeadLetterDestinationInput interface {
	pulumi.Input

	ToEventSubscriptionStorageBlobDeadLetterDestinationOutput() EventSubscriptionStorageBlobDeadLetterDestinationOutput
	ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(context.Context) EventSubscriptionStorageBlobDeadLetterDestinationOutput
}

type EventSubscriptionStorageBlobDeadLetterDestinationArgs struct {
	// Specifies the id of the storage account id where the storage blob is located.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
	// Specifies the name of the Storage blob container that is the destination of the deadletter events.
	StorageBlobContainerName pulumi.StringInput `pulumi:"storageBlobContainerName"`
}

func (EventSubscriptionStorageBlobDeadLetterDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationOutput() EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return i.ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageBlobDeadLetterDestinationOutput)
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return i.ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageBlobDeadLetterDestinationOutput).ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx)
}

// EventSubscriptionStorageBlobDeadLetterDestinationPtrInput is an input type that accepts EventSubscriptionStorageBlobDeadLetterDestinationArgs, EventSubscriptionStorageBlobDeadLetterDestinationPtr and EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionStorageBlobDeadLetterDestinationPtrInput` via:
//
//          EventSubscriptionStorageBlobDeadLetterDestinationArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionStorageBlobDeadLetterDestinationPtrInput interface {
	pulumi.Input

	ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput
	ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput
}

type eventSubscriptionStorageBlobDeadLetterDestinationPtrType EventSubscriptionStorageBlobDeadLetterDestinationArgs

func EventSubscriptionStorageBlobDeadLetterDestinationPtr(v *EventSubscriptionStorageBlobDeadLetterDestinationArgs) EventSubscriptionStorageBlobDeadLetterDestinationPtrInput {
	return (*eventSubscriptionStorageBlobDeadLetterDestinationPtrType)(v)
}

func (*eventSubscriptionStorageBlobDeadLetterDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i *eventSubscriptionStorageBlobDeadLetterDestinationPtrType) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return i.ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionStorageBlobDeadLetterDestinationPtrType) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput)
}

type EventSubscriptionStorageBlobDeadLetterDestinationOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageBlobDeadLetterDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationOutput() EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o.ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o.ApplyT(func(v EventSubscriptionStorageBlobDeadLetterDestination) *EventSubscriptionStorageBlobDeadLetterDestination {
		return &v
	}).(EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput)
}

// Specifies the id of the storage account id where the storage blob is located.
func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageBlobDeadLetterDestination) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

// Specifies the name of the Storage blob container that is the destination of the deadletter events.
func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) StorageBlobContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageBlobDeadLetterDestination) string { return v.StorageBlobContainerName }).(pulumi.StringOutput)
}

type EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) Elem() EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageBlobDeadLetterDestination) EventSubscriptionStorageBlobDeadLetterDestination {
		return *v
	}).(EventSubscriptionStorageBlobDeadLetterDestinationOutput)
}

// Specifies the id of the storage account id where the storage blob is located.
func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageBlobDeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the Storage blob container that is the destination of the deadletter events.
func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) StorageBlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageBlobDeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return &v.StorageBlobContainerName
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionStorageQueueEndpoint struct {
	// Specifies the name of the storage queue where the Event Subscription will receive events.
	QueueName string `pulumi:"queueName"`
	// Specifies the id of the storage account id where the storage queue is located.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// EventSubscriptionStorageQueueEndpointInput is an input type that accepts EventSubscriptionStorageQueueEndpointArgs and EventSubscriptionStorageQueueEndpointOutput values.
// You can construct a concrete instance of `EventSubscriptionStorageQueueEndpointInput` via:
//
//          EventSubscriptionStorageQueueEndpointArgs{...}
type EventSubscriptionStorageQueueEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionStorageQueueEndpointOutput() EventSubscriptionStorageQueueEndpointOutput
	ToEventSubscriptionStorageQueueEndpointOutputWithContext(context.Context) EventSubscriptionStorageQueueEndpointOutput
}

type EventSubscriptionStorageQueueEndpointArgs struct {
	// Specifies the name of the storage queue where the Event Subscription will receive events.
	QueueName pulumi.StringInput `pulumi:"queueName"`
	// Specifies the id of the storage account id where the storage queue is located.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (EventSubscriptionStorageQueueEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointOutput() EventSubscriptionStorageQueueEndpointOutput {
	return i.ToEventSubscriptionStorageQueueEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageQueueEndpointOutput)
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return i.ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageQueueEndpointOutput).ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx)
}

// EventSubscriptionStorageQueueEndpointPtrInput is an input type that accepts EventSubscriptionStorageQueueEndpointArgs, EventSubscriptionStorageQueueEndpointPtr and EventSubscriptionStorageQueueEndpointPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionStorageQueueEndpointPtrInput` via:
//
//          EventSubscriptionStorageQueueEndpointArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionStorageQueueEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput
	ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Context) EventSubscriptionStorageQueueEndpointPtrOutput
}

type eventSubscriptionStorageQueueEndpointPtrType EventSubscriptionStorageQueueEndpointArgs

func EventSubscriptionStorageQueueEndpointPtr(v *EventSubscriptionStorageQueueEndpointArgs) EventSubscriptionStorageQueueEndpointPtrInput {
	return (*eventSubscriptionStorageQueueEndpointPtrType)(v)
}

func (*eventSubscriptionStorageQueueEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionStorageQueueEndpointPtrType) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return i.ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionStorageQueueEndpointPtrType) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageQueueEndpointPtrOutput)
}

type EventSubscriptionStorageQueueEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageQueueEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointOutput() EventSubscriptionStorageQueueEndpointOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return o.ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionStorageQueueEndpoint) *EventSubscriptionStorageQueueEndpoint {
		return &v
	}).(EventSubscriptionStorageQueueEndpointPtrOutput)
}

// Specifies the name of the storage queue where the Event Subscription will receive events.
func (o EventSubscriptionStorageQueueEndpointOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageQueueEndpoint) string { return v.QueueName }).(pulumi.StringOutput)
}

// Specifies the id of the storage account id where the storage queue is located.
func (o EventSubscriptionStorageQueueEndpointOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageQueueEndpoint) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type EventSubscriptionStorageQueueEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageQueueEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (o EventSubscriptionStorageQueueEndpointPtrOutput) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointPtrOutput) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointPtrOutput) Elem() EventSubscriptionStorageQueueEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageQueueEndpoint) EventSubscriptionStorageQueueEndpoint { return *v }).(EventSubscriptionStorageQueueEndpointOutput)
}

// Specifies the name of the storage queue where the Event Subscription will receive events.
func (o EventSubscriptionStorageQueueEndpointPtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageQueueEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.QueueName
	}).(pulumi.StringPtrOutput)
}

// Specifies the id of the storage account id where the storage queue is located.
func (o EventSubscriptionStorageQueueEndpointPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageQueueEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionSubjectFilter struct {
	// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
	CaseSensitive *bool `pulumi:"caseSensitive"`
	// A string to filter events for an event subscription based on a resource path prefix.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// A string to filter events for an event subscription based on a resource path suffix.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// EventSubscriptionSubjectFilterInput is an input type that accepts EventSubscriptionSubjectFilterArgs and EventSubscriptionSubjectFilterOutput values.
// You can construct a concrete instance of `EventSubscriptionSubjectFilterInput` via:
//
//          EventSubscriptionSubjectFilterArgs{...}
type EventSubscriptionSubjectFilterInput interface {
	pulumi.Input

	ToEventSubscriptionSubjectFilterOutput() EventSubscriptionSubjectFilterOutput
	ToEventSubscriptionSubjectFilterOutputWithContext(context.Context) EventSubscriptionSubjectFilterOutput
}

type EventSubscriptionSubjectFilterArgs struct {
	// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
	CaseSensitive pulumi.BoolPtrInput `pulumi:"caseSensitive"`
	// A string to filter events for an event subscription based on a resource path prefix.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// A string to filter events for an event subscription based on a resource path suffix.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

func (EventSubscriptionSubjectFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterOutput() EventSubscriptionSubjectFilterOutput {
	return i.ToEventSubscriptionSubjectFilterOutputWithContext(context.Background())
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionSubjectFilterOutput)
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return i.ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionSubjectFilterOutput).ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx)
}

// EventSubscriptionSubjectFilterPtrInput is an input type that accepts EventSubscriptionSubjectFilterArgs, EventSubscriptionSubjectFilterPtr and EventSubscriptionSubjectFilterPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionSubjectFilterPtrInput` via:
//
//          EventSubscriptionSubjectFilterArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionSubjectFilterPtrInput interface {
	pulumi.Input

	ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput
	ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Context) EventSubscriptionSubjectFilterPtrOutput
}

type eventSubscriptionSubjectFilterPtrType EventSubscriptionSubjectFilterArgs

func EventSubscriptionSubjectFilterPtr(v *EventSubscriptionSubjectFilterArgs) EventSubscriptionSubjectFilterPtrInput {
	return (*eventSubscriptionSubjectFilterPtrType)(v)
}

func (*eventSubscriptionSubjectFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (i *eventSubscriptionSubjectFilterPtrType) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return i.ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionSubjectFilterPtrType) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionSubjectFilterPtrOutput)
}

type EventSubscriptionSubjectFilterOutput struct{ *pulumi.OutputState }

func (EventSubscriptionSubjectFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterOutput() EventSubscriptionSubjectFilterOutput {
	return o
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterOutput {
	return o
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return o.ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *EventSubscriptionSubjectFilter {
		return &v
	}).(EventSubscriptionSubjectFilterPtrOutput)
}

// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
func (o EventSubscriptionSubjectFilterOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *bool { return v.CaseSensitive }).(pulumi.BoolPtrOutput)
}

// A string to filter events for an event subscription based on a resource path prefix.
func (o EventSubscriptionSubjectFilterOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// A string to filter events for an event subscription based on a resource path suffix.
func (o EventSubscriptionSubjectFilterOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionSubjectFilterPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionSubjectFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (o EventSubscriptionSubjectFilterPtrOutput) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return o
}

func (o EventSubscriptionSubjectFilterPtrOutput) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return o
}

func (o EventSubscriptionSubjectFilterPtrOutput) Elem() EventSubscriptionSubjectFilterOutput {
	return o.ApplyT(func(v *EventSubscriptionSubjectFilter) EventSubscriptionSubjectFilter { return *v }).(EventSubscriptionSubjectFilterOutput)
}

// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
func (o EventSubscriptionSubjectFilterPtrOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionSubjectFilter) *bool {
		if v == nil {
			return nil
		}
		return v.CaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// A string to filter events for an event subscription based on a resource path prefix.
func (o EventSubscriptionSubjectFilterPtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionSubjectFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// A string to filter events for an event subscription based on a resource path suffix.
func (o EventSubscriptionSubjectFilterPtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionSubjectFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionWebhookEndpoint struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryAppIdOrUri *string `pulumi:"activeDirectoryAppIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryTenantId *string `pulumi:"activeDirectoryTenantId"`
	// The base url of the webhook where the Event Subscription will receive events.
	BaseUrl *string `pulumi:"baseUrl"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
	// Specifies the url of the webhook where the Event Subscription will receive events.
	Url string `pulumi:"url"`
}

// EventSubscriptionWebhookEndpointInput is an input type that accepts EventSubscriptionWebhookEndpointArgs and EventSubscriptionWebhookEndpointOutput values.
// You can construct a concrete instance of `EventSubscriptionWebhookEndpointInput` via:
//
//          EventSubscriptionWebhookEndpointArgs{...}
type EventSubscriptionWebhookEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionWebhookEndpointOutput() EventSubscriptionWebhookEndpointOutput
	ToEventSubscriptionWebhookEndpointOutputWithContext(context.Context) EventSubscriptionWebhookEndpointOutput
}

type EventSubscriptionWebhookEndpointArgs struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryAppIdOrUri pulumi.StringPtrInput `pulumi:"activeDirectoryAppIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryTenantId pulumi.StringPtrInput `pulumi:"activeDirectoryTenantId"`
	// The base url of the webhook where the Event Subscription will receive events.
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// Maximum number of events per batch.
	MaxEventsPerBatch pulumi.IntPtrInput `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes pulumi.IntPtrInput `pulumi:"preferredBatchSizeInKilobytes"`
	// Specifies the url of the webhook where the Event Subscription will receive events.
	Url pulumi.StringInput `pulumi:"url"`
}

func (EventSubscriptionWebhookEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointOutput() EventSubscriptionWebhookEndpointOutput {
	return i.ToEventSubscriptionWebhookEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionWebhookEndpointOutput)
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return i.ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionWebhookEndpointOutput).ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx)
}

// EventSubscriptionWebhookEndpointPtrInput is an input type that accepts EventSubscriptionWebhookEndpointArgs, EventSubscriptionWebhookEndpointPtr and EventSubscriptionWebhookEndpointPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionWebhookEndpointPtrInput` via:
//
//          EventSubscriptionWebhookEndpointArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionWebhookEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput
	ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Context) EventSubscriptionWebhookEndpointPtrOutput
}

type eventSubscriptionWebhookEndpointPtrType EventSubscriptionWebhookEndpointArgs

func EventSubscriptionWebhookEndpointPtr(v *EventSubscriptionWebhookEndpointArgs) EventSubscriptionWebhookEndpointPtrInput {
	return (*eventSubscriptionWebhookEndpointPtrType)(v)
}

func (*eventSubscriptionWebhookEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionWebhookEndpointPtrType) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return i.ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionWebhookEndpointPtrType) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionWebhookEndpointPtrOutput)
}

type EventSubscriptionWebhookEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionWebhookEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointOutput() EventSubscriptionWebhookEndpointOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return o.ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *EventSubscriptionWebhookEndpoint {
		return &v
	}).(EventSubscriptionWebhookEndpointPtrOutput)
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o EventSubscriptionWebhookEndpointOutput) ActiveDirectoryAppIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *string { return v.ActiveDirectoryAppIdOrUri }).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o EventSubscriptionWebhookEndpointOutput) ActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *string { return v.ActiveDirectoryTenantId }).(pulumi.StringPtrOutput)
}

// The base url of the webhook where the Event Subscription will receive events.
func (o EventSubscriptionWebhookEndpointOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o EventSubscriptionWebhookEndpointOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *int { return v.MaxEventsPerBatch }).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o EventSubscriptionWebhookEndpointOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *int { return v.PreferredBatchSizeInKilobytes }).(pulumi.IntPtrOutput)
}

// Specifies the url of the webhook where the Event Subscription will receive events.
func (o EventSubscriptionWebhookEndpointOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) string { return v.Url }).(pulumi.StringOutput)
}

type EventSubscriptionWebhookEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionWebhookEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (o EventSubscriptionWebhookEndpointPtrOutput) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointPtrOutput) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointPtrOutput) Elem() EventSubscriptionWebhookEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) EventSubscriptionWebhookEndpoint { return *v }).(EventSubscriptionWebhookEndpointOutput)
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o EventSubscriptionWebhookEndpointPtrOutput) ActiveDirectoryAppIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryAppIdOrUri
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o EventSubscriptionWebhookEndpointPtrOutput) ActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryTenantId
	}).(pulumi.StringPtrOutput)
}

// The base url of the webhook where the Event Subscription will receive events.
func (o EventSubscriptionWebhookEndpointPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o EventSubscriptionWebhookEndpointPtrOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.MaxEventsPerBatch
	}).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o EventSubscriptionWebhookEndpointPtrOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.PreferredBatchSizeInKilobytes
	}).(pulumi.IntPtrOutput)
}

// Specifies the url of the webhook where the Event Subscription will receive events.
func (o EventSubscriptionWebhookEndpointPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type SubscriptionRuleCorrelationFilter struct {
	// Content type of the message.
	ContentType *string `pulumi:"contentType"`
	// Identifier of the correlation.
	CorrelationId *string `pulumi:"correlationId"`
	// Application specific label.
	Label *string `pulumi:"label"`
	// Identifier of the message.
	MessageId *string `pulumi:"messageId"`
	// A list of user defined properties to be included in the filter. Specified as a map of name/value pairs.
	Properties map[string]string `pulumi:"properties"`
	// Address of the queue to reply to.
	ReplyTo *string `pulumi:"replyTo"`
	// Session identifier to reply to.
	ReplyToSessionId *string `pulumi:"replyToSessionId"`
	// Session identifier.
	SessionId *string `pulumi:"sessionId"`
	// Address to send to.
	To *string `pulumi:"to"`
}

// SubscriptionRuleCorrelationFilterInput is an input type that accepts SubscriptionRuleCorrelationFilterArgs and SubscriptionRuleCorrelationFilterOutput values.
// You can construct a concrete instance of `SubscriptionRuleCorrelationFilterInput` via:
//
//          SubscriptionRuleCorrelationFilterArgs{...}
type SubscriptionRuleCorrelationFilterInput interface {
	pulumi.Input

	ToSubscriptionRuleCorrelationFilterOutput() SubscriptionRuleCorrelationFilterOutput
	ToSubscriptionRuleCorrelationFilterOutputWithContext(context.Context) SubscriptionRuleCorrelationFilterOutput
}

type SubscriptionRuleCorrelationFilterArgs struct {
	// Content type of the message.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// Identifier of the correlation.
	CorrelationId pulumi.StringPtrInput `pulumi:"correlationId"`
	// Application specific label.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Identifier of the message.
	MessageId pulumi.StringPtrInput `pulumi:"messageId"`
	// A list of user defined properties to be included in the filter. Specified as a map of name/value pairs.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Address of the queue to reply to.
	ReplyTo pulumi.StringPtrInput `pulumi:"replyTo"`
	// Session identifier to reply to.
	ReplyToSessionId pulumi.StringPtrInput `pulumi:"replyToSessionId"`
	// Session identifier.
	SessionId pulumi.StringPtrInput `pulumi:"sessionId"`
	// Address to send to.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (SubscriptionRuleCorrelationFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionRuleCorrelationFilter)(nil)).Elem()
}

func (i SubscriptionRuleCorrelationFilterArgs) ToSubscriptionRuleCorrelationFilterOutput() SubscriptionRuleCorrelationFilterOutput {
	return i.ToSubscriptionRuleCorrelationFilterOutputWithContext(context.Background())
}

func (i SubscriptionRuleCorrelationFilterArgs) ToSubscriptionRuleCorrelationFilterOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRuleCorrelationFilterOutput)
}

func (i SubscriptionRuleCorrelationFilterArgs) ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput {
	return i.ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(context.Background())
}

func (i SubscriptionRuleCorrelationFilterArgs) ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRuleCorrelationFilterOutput).ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx)
}

// SubscriptionRuleCorrelationFilterPtrInput is an input type that accepts SubscriptionRuleCorrelationFilterArgs, SubscriptionRuleCorrelationFilterPtr and SubscriptionRuleCorrelationFilterPtrOutput values.
// You can construct a concrete instance of `SubscriptionRuleCorrelationFilterPtrInput` via:
//
//          SubscriptionRuleCorrelationFilterArgs{...}
//
//  or:
//
//          nil
type SubscriptionRuleCorrelationFilterPtrInput interface {
	pulumi.Input

	ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput
	ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(context.Context) SubscriptionRuleCorrelationFilterPtrOutput
}

type subscriptionRuleCorrelationFilterPtrType SubscriptionRuleCorrelationFilterArgs

func SubscriptionRuleCorrelationFilterPtr(v *SubscriptionRuleCorrelationFilterArgs) SubscriptionRuleCorrelationFilterPtrInput {
	return (*subscriptionRuleCorrelationFilterPtrType)(v)
}

func (*subscriptionRuleCorrelationFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionRuleCorrelationFilter)(nil)).Elem()
}

func (i *subscriptionRuleCorrelationFilterPtrType) ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput {
	return i.ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(context.Background())
}

func (i *subscriptionRuleCorrelationFilterPtrType) ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionRuleCorrelationFilterPtrOutput)
}

type SubscriptionRuleCorrelationFilterOutput struct{ *pulumi.OutputState }

func (SubscriptionRuleCorrelationFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionRuleCorrelationFilter)(nil)).Elem()
}

func (o SubscriptionRuleCorrelationFilterOutput) ToSubscriptionRuleCorrelationFilterOutput() SubscriptionRuleCorrelationFilterOutput {
	return o
}

func (o SubscriptionRuleCorrelationFilterOutput) ToSubscriptionRuleCorrelationFilterOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterOutput {
	return o
}

func (o SubscriptionRuleCorrelationFilterOutput) ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput {
	return o.ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(context.Background())
}

func (o SubscriptionRuleCorrelationFilterOutput) ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *SubscriptionRuleCorrelationFilter {
		return &v
	}).(SubscriptionRuleCorrelationFilterPtrOutput)
}

// Content type of the message.
func (o SubscriptionRuleCorrelationFilterOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Identifier of the correlation.
func (o SubscriptionRuleCorrelationFilterOutput) CorrelationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.CorrelationId }).(pulumi.StringPtrOutput)
}

// Application specific label.
func (o SubscriptionRuleCorrelationFilterOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Identifier of the message.
func (o SubscriptionRuleCorrelationFilterOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.MessageId }).(pulumi.StringPtrOutput)
}

// A list of user defined properties to be included in the filter. Specified as a map of name/value pairs.
func (o SubscriptionRuleCorrelationFilterOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Address of the queue to reply to.
func (o SubscriptionRuleCorrelationFilterOutput) ReplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.ReplyTo }).(pulumi.StringPtrOutput)
}

// Session identifier to reply to.
func (o SubscriptionRuleCorrelationFilterOutput) ReplyToSessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.ReplyToSessionId }).(pulumi.StringPtrOutput)
}

// Session identifier.
func (o SubscriptionRuleCorrelationFilterOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.SessionId }).(pulumi.StringPtrOutput)
}

// Address to send to.
func (o SubscriptionRuleCorrelationFilterOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRuleCorrelationFilter) *string { return v.To }).(pulumi.StringPtrOutput)
}

type SubscriptionRuleCorrelationFilterPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionRuleCorrelationFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionRuleCorrelationFilter)(nil)).Elem()
}

func (o SubscriptionRuleCorrelationFilterPtrOutput) ToSubscriptionRuleCorrelationFilterPtrOutput() SubscriptionRuleCorrelationFilterPtrOutput {
	return o
}

func (o SubscriptionRuleCorrelationFilterPtrOutput) ToSubscriptionRuleCorrelationFilterPtrOutputWithContext(ctx context.Context) SubscriptionRuleCorrelationFilterPtrOutput {
	return o
}

func (o SubscriptionRuleCorrelationFilterPtrOutput) Elem() SubscriptionRuleCorrelationFilterOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) SubscriptionRuleCorrelationFilter { return *v }).(SubscriptionRuleCorrelationFilterOutput)
}

// Content type of the message.
func (o SubscriptionRuleCorrelationFilterPtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.ContentType
	}).(pulumi.StringPtrOutput)
}

// Identifier of the correlation.
func (o SubscriptionRuleCorrelationFilterPtrOutput) CorrelationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.CorrelationId
	}).(pulumi.StringPtrOutput)
}

// Application specific label.
func (o SubscriptionRuleCorrelationFilterPtrOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.Label
	}).(pulumi.StringPtrOutput)
}

// Identifier of the message.
func (o SubscriptionRuleCorrelationFilterPtrOutput) MessageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.MessageId
	}).(pulumi.StringPtrOutput)
}

// A list of user defined properties to be included in the filter. Specified as a map of name/value pairs.
func (o SubscriptionRuleCorrelationFilterPtrOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) map[string]string {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.StringMapOutput)
}

// Address of the queue to reply to.
func (o SubscriptionRuleCorrelationFilterPtrOutput) ReplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.ReplyTo
	}).(pulumi.StringPtrOutput)
}

// Session identifier to reply to.
func (o SubscriptionRuleCorrelationFilterPtrOutput) ReplyToSessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.ReplyToSessionId
	}).(pulumi.StringPtrOutput)
}

// Session identifier.
func (o SubscriptionRuleCorrelationFilterPtrOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.SessionId
	}).(pulumi.StringPtrOutput)
}

// Address to send to.
func (o SubscriptionRuleCorrelationFilterPtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionRuleCorrelationFilter) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DomainInboundIpRuleOutput{})
	pulumi.RegisterOutputType(DomainInboundIpRuleArrayOutput{})
	pulumi.RegisterOutputType(DomainInputMappingDefaultValuesOutput{})
	pulumi.RegisterOutputType(DomainInputMappingDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(DomainInputMappingFieldsOutput{})
	pulumi.RegisterOutputType(DomainInputMappingFieldsPtrOutput{})
	pulumi.RegisterOutputType(EventGridTopicInboundIpRuleOutput{})
	pulumi.RegisterOutputType(EventGridTopicInboundIpRuleArrayOutput{})
	pulumi.RegisterOutputType(EventGridTopicInputMappingDefaultValuesOutput{})
	pulumi.RegisterOutputType(EventGridTopicInputMappingDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(EventGridTopicInputMappingFieldsOutput{})
	pulumi.RegisterOutputType(EventGridTopicInputMappingFieldsPtrOutput{})
	pulumi.RegisterOutputType(EventHubCaptureDescriptionOutput{})
	pulumi.RegisterOutputType(EventHubCaptureDescriptionPtrOutput{})
	pulumi.RegisterOutputType(EventHubCaptureDescriptionDestinationOutput{})
	pulumi.RegisterOutputType(EventHubCaptureDescriptionDestinationPtrOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceIdentityOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceIdentityPtrOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsPtrOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsIpRuleOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsIpRuleArrayOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleOutput{})
	pulumi.RegisterOutputType(EventHubNamespaceNetworkRulesetsVirtualNetworkRuleArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterBoolEqualOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterBoolEqualArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberGreaterThanOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberInOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberInArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberLessThanOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberLessThanArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberNotInOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberNotInArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringBeginsWithOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringContainOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringContainArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringEndsWithOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringEndsWithArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringInOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringInArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringNotInOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringNotInArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAzureFunctionEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAzureFunctionEndpointPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionEventhubEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionEventhubEndpointPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionHybridConnectionEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionHybridConnectionEndpointPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionRetryPolicyOutput{})
	pulumi.RegisterOutputType(EventSubscriptionRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageBlobDeadLetterDestinationOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageQueueEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageQueueEndpointPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionSubjectFilterOutput{})
	pulumi.RegisterOutputType(EventSubscriptionSubjectFilterPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionWebhookEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionWebhookEndpointPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionRuleCorrelationFilterOutput{})
	pulumi.RegisterOutputType(SubscriptionRuleCorrelationFilterPtrOutput{})
}
