// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a new ServiceBus Topic authorization Rule within a ServiceBus Topic.
type TopicAuthorizationRule struct {
	s *pulumi.ResourceState
}

// NewTopicAuthorizationRule registers a new resource with the given unique name, arguments, and options.
func NewTopicAuthorizationRule(ctx *pulumi.Context,
	name string, args *TopicAuthorizationRuleArgs, opts ...pulumi.ResourceOpt) (*TopicAuthorizationRule, error) {
	if args == nil || args.NamespaceName == nil {
		return nil, errors.New("missing required argument 'NamespaceName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.TopicName == nil {
		return nil, errors.New("missing required argument 'TopicName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["listen"] = nil
		inputs["manage"] = nil
		inputs["name"] = nil
		inputs["namespaceName"] = nil
		inputs["resourceGroupName"] = nil
		inputs["send"] = nil
		inputs["topicName"] = nil
	} else {
		inputs["listen"] = args.Listen
		inputs["manage"] = args.Manage
		inputs["name"] = args.Name
		inputs["namespaceName"] = args.NamespaceName
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["send"] = args.Send
		inputs["topicName"] = args.TopicName
	}
	inputs["primaryConnectionString"] = nil
	inputs["primaryKey"] = nil
	inputs["secondaryConnectionString"] = nil
	inputs["secondaryKey"] = nil
	s, err := ctx.RegisterResource("azure:eventhub/topicAuthorizationRule:TopicAuthorizationRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &TopicAuthorizationRule{s: s}, nil
}

// GetTopicAuthorizationRule gets an existing TopicAuthorizationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicAuthorizationRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TopicAuthorizationRuleState, opts ...pulumi.ResourceOpt) (*TopicAuthorizationRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["listen"] = state.Listen
		inputs["manage"] = state.Manage
		inputs["name"] = state.Name
		inputs["namespaceName"] = state.NamespaceName
		inputs["primaryConnectionString"] = state.PrimaryConnectionString
		inputs["primaryKey"] = state.PrimaryKey
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["secondaryConnectionString"] = state.SecondaryConnectionString
		inputs["secondaryKey"] = state.SecondaryKey
		inputs["send"] = state.Send
		inputs["topicName"] = state.TopicName
	}
	s, err := ctx.ReadResource("azure:eventhub/topicAuthorizationRule:TopicAuthorizationRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &TopicAuthorizationRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *TopicAuthorizationRule) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *TopicAuthorizationRule) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Does this Authorization Rule have permissions to Listen to the ServiceBus Topic? Defaults to `false`.
func (r *TopicAuthorizationRule) Listen() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["listen"])
}

// Does this Authorization Rule have permissions to Manage to the ServiceBus Topic? When this property is `true` - both `listen` and `send` must be too. Defaults to `false`.
func (r *TopicAuthorizationRule) Manage() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["manage"])
}

// Specifies the name of the erviceBus Topic Authorization Rule resource. Changing this forces a new resource to be created.
func (r *TopicAuthorizationRule) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Specifies the name of the ServiceBus Namespace. Changing this forces a new resource to be created.
func (r *TopicAuthorizationRule) NamespaceName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["namespaceName"])
}

// The Primary Connection String for the ServiceBus Topic authorization Rule.
func (r *TopicAuthorizationRule) PrimaryConnectionString() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["primaryConnectionString"])
}

// The Primary Key for the ServiceBus Topic authorization Rule.
func (r *TopicAuthorizationRule) PrimaryKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["primaryKey"])
}

// The name of the resource group in which the ServiceBus Namespace exists. Changing this forces a new resource to be created.
func (r *TopicAuthorizationRule) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The Secondary Connection String for the ServiceBus Topic authorization Rule.
func (r *TopicAuthorizationRule) SecondaryConnectionString() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["secondaryConnectionString"])
}

// The Secondary Key for the ServiceBus Topic authorization Rule.
func (r *TopicAuthorizationRule) SecondaryKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["secondaryKey"])
}

// Does this Authorization Rule have permissions to Send to the ServiceBus Topic? Defaults to `false`.
func (r *TopicAuthorizationRule) Send() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["send"])
}

// Specifies the name of the ServiceBus Topic. Changing this forces a new resource to be created.
func (r *TopicAuthorizationRule) TopicName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["topicName"])
}

// Input properties used for looking up and filtering TopicAuthorizationRule resources.
type TopicAuthorizationRuleState struct {
	// Does this Authorization Rule have permissions to Listen to the ServiceBus Topic? Defaults to `false`.
	Listen interface{}
	// Does this Authorization Rule have permissions to Manage to the ServiceBus Topic? When this property is `true` - both `listen` and `send` must be too. Defaults to `false`.
	Manage interface{}
	// Specifies the name of the erviceBus Topic Authorization Rule resource. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the name of the ServiceBus Namespace. Changing this forces a new resource to be created.
	NamespaceName interface{}
	// The Primary Connection String for the ServiceBus Topic authorization Rule.
	PrimaryConnectionString interface{}
	// The Primary Key for the ServiceBus Topic authorization Rule.
	PrimaryKey interface{}
	// The name of the resource group in which the ServiceBus Namespace exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The Secondary Connection String for the ServiceBus Topic authorization Rule.
	SecondaryConnectionString interface{}
	// The Secondary Key for the ServiceBus Topic authorization Rule.
	SecondaryKey interface{}
	// Does this Authorization Rule have permissions to Send to the ServiceBus Topic? Defaults to `false`.
	Send interface{}
	// Specifies the name of the ServiceBus Topic. Changing this forces a new resource to be created.
	TopicName interface{}
}

// The set of arguments for constructing a TopicAuthorizationRule resource.
type TopicAuthorizationRuleArgs struct {
	// Does this Authorization Rule have permissions to Listen to the ServiceBus Topic? Defaults to `false`.
	Listen interface{}
	// Does this Authorization Rule have permissions to Manage to the ServiceBus Topic? When this property is `true` - both `listen` and `send` must be too. Defaults to `false`.
	Manage interface{}
	// Specifies the name of the erviceBus Topic Authorization Rule resource. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the name of the ServiceBus Namespace. Changing this forces a new resource to be created.
	NamespaceName interface{}
	// The name of the resource group in which the ServiceBus Namespace exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Does this Authorization Rule have permissions to Send to the ServiceBus Topic? Defaults to `false`.
	Send interface{}
	// Specifies the name of the ServiceBus Topic. Changing this forces a new resource to be created.
	TopicName interface{}
}
