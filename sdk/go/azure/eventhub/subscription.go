// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manage a ServiceBus Subscription.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/servicebus_subscription.html.markdown.
type Subscription struct {
	s *pulumi.ResourceState
}

// NewSubscription registers a new resource with the given unique name, arguments, and options.
func NewSubscription(ctx *pulumi.Context,
	name string, args *SubscriptionArgs, opts ...pulumi.ResourceOpt) (*Subscription, error) {
	if args == nil || args.MaxDeliveryCount == nil {
		return nil, errors.New("missing required argument 'MaxDeliveryCount'")
	}
	if args == nil || args.NamespaceName == nil {
		return nil, errors.New("missing required argument 'NamespaceName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.TopicName == nil {
		return nil, errors.New("missing required argument 'TopicName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoDeleteOnIdle"] = nil
		inputs["deadLetteringOnFilterEvaluationExceptions"] = nil
		inputs["deadLetteringOnMessageExpiration"] = nil
		inputs["defaultMessageTtl"] = nil
		inputs["enableBatchedOperations"] = nil
		inputs["forwardTo"] = nil
		inputs["location"] = nil
		inputs["lockDuration"] = nil
		inputs["maxDeliveryCount"] = nil
		inputs["name"] = nil
		inputs["namespaceName"] = nil
		inputs["requiresSession"] = nil
		inputs["resourceGroupName"] = nil
		inputs["topicName"] = nil
	} else {
		inputs["autoDeleteOnIdle"] = args.AutoDeleteOnIdle
		inputs["deadLetteringOnFilterEvaluationExceptions"] = args.DeadLetteringOnFilterEvaluationExceptions
		inputs["deadLetteringOnMessageExpiration"] = args.DeadLetteringOnMessageExpiration
		inputs["defaultMessageTtl"] = args.DefaultMessageTtl
		inputs["enableBatchedOperations"] = args.EnableBatchedOperations
		inputs["forwardTo"] = args.ForwardTo
		inputs["location"] = args.Location
		inputs["lockDuration"] = args.LockDuration
		inputs["maxDeliveryCount"] = args.MaxDeliveryCount
		inputs["name"] = args.Name
		inputs["namespaceName"] = args.NamespaceName
		inputs["requiresSession"] = args.RequiresSession
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["topicName"] = args.TopicName
	}
	s, err := ctx.RegisterResource("azure:eventhub/subscription:Subscription", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subscription{s: s}, nil
}

// GetSubscription gets an existing Subscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscription(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SubscriptionState, opts ...pulumi.ResourceOpt) (*Subscription, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["autoDeleteOnIdle"] = state.AutoDeleteOnIdle
		inputs["deadLetteringOnFilterEvaluationExceptions"] = state.DeadLetteringOnFilterEvaluationExceptions
		inputs["deadLetteringOnMessageExpiration"] = state.DeadLetteringOnMessageExpiration
		inputs["defaultMessageTtl"] = state.DefaultMessageTtl
		inputs["enableBatchedOperations"] = state.EnableBatchedOperations
		inputs["forwardTo"] = state.ForwardTo
		inputs["location"] = state.Location
		inputs["lockDuration"] = state.LockDuration
		inputs["maxDeliveryCount"] = state.MaxDeliveryCount
		inputs["name"] = state.Name
		inputs["namespaceName"] = state.NamespaceName
		inputs["requiresSession"] = state.RequiresSession
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["topicName"] = state.TopicName
	}
	s, err := ctx.ReadResource("azure:eventhub/subscription:Subscription", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subscription{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Subscription) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Subscription) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The idle interval after which the
// Subscription is automatically deleted, minimum of 5 minutes. Provided in the
// TimeSpan format.
func (r *Subscription) AutoDeleteOnIdle() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["autoDeleteOnIdle"])
}

func (r *Subscription) DeadLetteringOnFilterEvaluationExceptions() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["deadLetteringOnFilterEvaluationExceptions"])
}

// Boolean flag which controls
// whether the Subscription has dead letter support when a message expires. Defaults
// to false.
func (r *Subscription) DeadLetteringOnMessageExpiration() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["deadLetteringOnMessageExpiration"])
}

// The TTL of messages sent to this Subscription
// if no TTL value is set on the message itself. Provided in the TimeSpan
// format.
func (r *Subscription) DefaultMessageTtl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultMessageTtl"])
}

// Boolean flag which controls whether the
// Subscription supports batched operations. Defaults to false.
func (r *Subscription) EnableBatchedOperations() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableBatchedOperations"])
}

// The name of a Queue or Topic to automatically forward 
// messages to.
func (r *Subscription) ForwardTo() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["forwardTo"])
}

// Specifies the supported Azure location where the resource exists.
// Changing this forces a new resource to be created.
func (r *Subscription) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// The lock duration for the subscription, maximum
// supported value is 5 minutes. Defaults to 1 minute.
func (r *Subscription) LockDuration() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lockDuration"])
}

// The maximum number of deliveries.
func (r *Subscription) MaxDeliveryCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxDeliveryCount"])
}

// Specifies the name of the ServiceBus Subscription resource.
// Changing this forces a new resource to be created.
func (r *Subscription) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The name of the ServiceBus Namespace to create
// this Subscription in. Changing this forces a new resource to be created.
func (r *Subscription) NamespaceName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["namespaceName"])
}

// Boolean flag which controls whether this Subscription
// supports the concept of a session. Defaults to false. Changing this forces a
// new resource to be created.
func (r *Subscription) RequiresSession() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["requiresSession"])
}

// The name of the resource group in which to
// create the namespace. Changing this forces a new resource to be created.
func (r *Subscription) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The name of the ServiceBus Topic to create
// this Subscription in. Changing this forces a new resource to be created.
func (r *Subscription) TopicName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["topicName"])
}

// Input properties used for looking up and filtering Subscription resources.
type SubscriptionState struct {
	// The idle interval after which the
	// Subscription is automatically deleted, minimum of 5 minutes. Provided in the
	// TimeSpan format.
	AutoDeleteOnIdle interface{}
	DeadLetteringOnFilterEvaluationExceptions interface{}
	// Boolean flag which controls
	// whether the Subscription has dead letter support when a message expires. Defaults
	// to false.
	DeadLetteringOnMessageExpiration interface{}
	// The TTL of messages sent to this Subscription
	// if no TTL value is set on the message itself. Provided in the TimeSpan
	// format.
	DefaultMessageTtl interface{}
	// Boolean flag which controls whether the
	// Subscription supports batched operations. Defaults to false.
	EnableBatchedOperations interface{}
	// The name of a Queue or Topic to automatically forward 
	// messages to.
	ForwardTo interface{}
	// Specifies the supported Azure location where the resource exists.
	// Changing this forces a new resource to be created.
	Location interface{}
	// The lock duration for the subscription, maximum
	// supported value is 5 minutes. Defaults to 1 minute.
	LockDuration interface{}
	// The maximum number of deliveries.
	MaxDeliveryCount interface{}
	// Specifies the name of the ServiceBus Subscription resource.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The name of the ServiceBus Namespace to create
	// this Subscription in. Changing this forces a new resource to be created.
	NamespaceName interface{}
	// Boolean flag which controls whether this Subscription
	// supports the concept of a session. Defaults to false. Changing this forces a
	// new resource to be created.
	RequiresSession interface{}
	// The name of the resource group in which to
	// create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The name of the ServiceBus Topic to create
	// this Subscription in. Changing this forces a new resource to be created.
	TopicName interface{}
}

// The set of arguments for constructing a Subscription resource.
type SubscriptionArgs struct {
	// The idle interval after which the
	// Subscription is automatically deleted, minimum of 5 minutes. Provided in the
	// TimeSpan format.
	AutoDeleteOnIdle interface{}
	DeadLetteringOnFilterEvaluationExceptions interface{}
	// Boolean flag which controls
	// whether the Subscription has dead letter support when a message expires. Defaults
	// to false.
	DeadLetteringOnMessageExpiration interface{}
	// The TTL of messages sent to this Subscription
	// if no TTL value is set on the message itself. Provided in the TimeSpan
	// format.
	DefaultMessageTtl interface{}
	// Boolean flag which controls whether the
	// Subscription supports batched operations. Defaults to false.
	EnableBatchedOperations interface{}
	// The name of a Queue or Topic to automatically forward 
	// messages to.
	ForwardTo interface{}
	// Specifies the supported Azure location where the resource exists.
	// Changing this forces a new resource to be created.
	Location interface{}
	// The lock duration for the subscription, maximum
	// supported value is 5 minutes. Defaults to 1 minute.
	LockDuration interface{}
	// The maximum number of deliveries.
	MaxDeliveryCount interface{}
	// Specifies the name of the ServiceBus Subscription resource.
	// Changing this forces a new resource to be created.
	Name interface{}
	// The name of the ServiceBus Namespace to create
	// this Subscription in. Changing this forces a new resource to be created.
	NamespaceName interface{}
	// Boolean flag which controls whether this Subscription
	// supports the concept of a session. Defaults to false. Changing this forces a
	// new resource to be created.
	RequiresSession interface{}
	// The name of the resource group in which to
	// create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The name of the ServiceBus Topic to create
	// this Subscription in. Changing this forces a new resource to be created.
	TopicName interface{}
}
