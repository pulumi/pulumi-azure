// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a ServiceBus Namespace.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/servicebus"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = servicebus.NewNamespace(ctx, "exampleNamespace", &servicebus.NamespaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Standard"),
//				Tags: pulumi.StringMap{
//					"source": pulumi.String("example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Service Bus Namespace can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:eventhub/namespace:Namespace example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ServiceBus/namespaces/sbns1
//
// ```
//
// Deprecated: azure.eventhub.Namespace has been deprecated in favor of azure.servicebus.Namespace
type Namespace struct {
	pulumi.CustomResourceState

	// Specifies the capacity. When `sku` is `Premium`, capacity can be `1`, `2`, `4`, `8` or `16`. When `sku` is `Basic` or `Standard`, capacity can be `0` only.
	Capacity pulumi.IntPtrOutput `pulumi:"capacity"`
	// An `customerManagedKey` block as defined below.
	CustomerManagedKey NamespaceCustomerManagedKeyTypePtrOutput `pulumi:"customerManagedKey"`
	// The primary connection string for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryConnectionString pulumi.StringOutput `pulumi:"defaultPrimaryConnectionString"`
	// The primary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryKey pulumi.StringOutput `pulumi:"defaultPrimaryKey"`
	// The secondary connection string for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryConnectionString pulumi.StringOutput `pulumi:"defaultSecondaryConnectionString"`
	// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryKey pulumi.StringOutput `pulumi:"defaultSecondaryKey"`
	// The URL to access the ServiceBus Namespace.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// An `identity` block as defined below.
	Identity NamespaceIdentityPtrOutput `pulumi:"identity"`
	// Whether or not SAS authentication is enabled for the Service Bus namespace. Defaults to `true`.
	LocalAuthEnabled pulumi.BoolPtrOutput `pulumi:"localAuthEnabled"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The minimum supported TLS version for this Service Bus Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
	MinimumTlsVersion pulumi.StringOutput `pulumi:"minimumTlsVersion"`
	// Specifies the name of the ServiceBus Namespace resource . Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// An `networkRuleSet` block as defined below.
	NetworkRuleSet NamespaceNetworkRuleSetOutput `pulumi:"networkRuleSet"`
	// Is public network access enabled for the Service Bus Namespace? Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// The name of the resource group in which to Changing this forces a new resource to be created.
	// create the namespace.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Defines which tier to use. Options are `Basic`, `Standard` or `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
	Sku pulumi.StringOutput `pulumi:"sku"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Whether or not this resource is zone redundant. `sku` needs to be `Premium`. Changing this forces a new resource to be created.
	ZoneRedundant pulumi.BoolPtrOutput `pulumi:"zoneRedundant"`
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOption) (*Namespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"defaultPrimaryConnectionString",
		"defaultPrimaryKey",
		"defaultSecondaryConnectionString",
		"defaultSecondaryKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Namespace
	err := ctx.RegisterResource("azure:eventhub/namespace:Namespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceState, opts ...pulumi.ResourceOption) (*Namespace, error) {
	var resource Namespace
	err := ctx.ReadResource("azure:eventhub/namespace:Namespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Namespace resources.
type namespaceState struct {
	// Specifies the capacity. When `sku` is `Premium`, capacity can be `1`, `2`, `4`, `8` or `16`. When `sku` is `Basic` or `Standard`, capacity can be `0` only.
	Capacity *int `pulumi:"capacity"`
	// An `customerManagedKey` block as defined below.
	CustomerManagedKey *NamespaceCustomerManagedKeyType `pulumi:"customerManagedKey"`
	// The primary connection string for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryConnectionString *string `pulumi:"defaultPrimaryConnectionString"`
	// The primary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryKey *string `pulumi:"defaultPrimaryKey"`
	// The secondary connection string for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryConnectionString *string `pulumi:"defaultSecondaryConnectionString"`
	// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryKey *string `pulumi:"defaultSecondaryKey"`
	// The URL to access the ServiceBus Namespace.
	Endpoint *string `pulumi:"endpoint"`
	// An `identity` block as defined below.
	Identity *NamespaceIdentity `pulumi:"identity"`
	// Whether or not SAS authentication is enabled for the Service Bus namespace. Defaults to `true`.
	LocalAuthEnabled *bool `pulumi:"localAuthEnabled"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The minimum supported TLS version for this Service Bus Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
	MinimumTlsVersion *string `pulumi:"minimumTlsVersion"`
	// Specifies the name of the ServiceBus Namespace resource . Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// An `networkRuleSet` block as defined below.
	NetworkRuleSet *NamespaceNetworkRuleSet `pulumi:"networkRuleSet"`
	// Is public network access enabled for the Service Bus Namespace? Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the resource group in which to Changing this forces a new resource to be created.
	// create the namespace.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Defines which tier to use. Options are `Basic`, `Standard` or `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
	Sku *string `pulumi:"sku"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Whether or not this resource is zone redundant. `sku` needs to be `Premium`. Changing this forces a new resource to be created.
	ZoneRedundant *bool `pulumi:"zoneRedundant"`
}

type NamespaceState struct {
	// Specifies the capacity. When `sku` is `Premium`, capacity can be `1`, `2`, `4`, `8` or `16`. When `sku` is `Basic` or `Standard`, capacity can be `0` only.
	Capacity pulumi.IntPtrInput
	// An `customerManagedKey` block as defined below.
	CustomerManagedKey NamespaceCustomerManagedKeyTypePtrInput
	// The primary connection string for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryConnectionString pulumi.StringPtrInput
	// The primary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryKey pulumi.StringPtrInput
	// The secondary connection string for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryConnectionString pulumi.StringPtrInput
	// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryKey pulumi.StringPtrInput
	// The URL to access the ServiceBus Namespace.
	Endpoint pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity NamespaceIdentityPtrInput
	// Whether or not SAS authentication is enabled for the Service Bus namespace. Defaults to `true`.
	LocalAuthEnabled pulumi.BoolPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The minimum supported TLS version for this Service Bus Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
	MinimumTlsVersion pulumi.StringPtrInput
	// Specifies the name of the ServiceBus Namespace resource . Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// An `networkRuleSet` block as defined below.
	NetworkRuleSet NamespaceNetworkRuleSetPtrInput
	// Is public network access enabled for the Service Bus Namespace? Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the resource group in which to Changing this forces a new resource to be created.
	// create the namespace.
	ResourceGroupName pulumi.StringPtrInput
	// Defines which tier to use. Options are `Basic`, `Standard` or `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
	Sku pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Whether or not this resource is zone redundant. `sku` needs to be `Premium`. Changing this forces a new resource to be created.
	ZoneRedundant pulumi.BoolPtrInput
}

func (NamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceState)(nil)).Elem()
}

type namespaceArgs struct {
	// Specifies the capacity. When `sku` is `Premium`, capacity can be `1`, `2`, `4`, `8` or `16`. When `sku` is `Basic` or `Standard`, capacity can be `0` only.
	Capacity *int `pulumi:"capacity"`
	// An `customerManagedKey` block as defined below.
	CustomerManagedKey *NamespaceCustomerManagedKeyType `pulumi:"customerManagedKey"`
	// An `identity` block as defined below.
	Identity *NamespaceIdentity `pulumi:"identity"`
	// Whether or not SAS authentication is enabled for the Service Bus namespace. Defaults to `true`.
	LocalAuthEnabled *bool `pulumi:"localAuthEnabled"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The minimum supported TLS version for this Service Bus Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
	MinimumTlsVersion *string `pulumi:"minimumTlsVersion"`
	// Specifies the name of the ServiceBus Namespace resource . Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// An `networkRuleSet` block as defined below.
	NetworkRuleSet *NamespaceNetworkRuleSet `pulumi:"networkRuleSet"`
	// Is public network access enabled for the Service Bus Namespace? Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// The name of the resource group in which to Changing this forces a new resource to be created.
	// create the namespace.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Defines which tier to use. Options are `Basic`, `Standard` or `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
	Sku string `pulumi:"sku"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Whether or not this resource is zone redundant. `sku` needs to be `Premium`. Changing this forces a new resource to be created.
	ZoneRedundant *bool `pulumi:"zoneRedundant"`
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// Specifies the capacity. When `sku` is `Premium`, capacity can be `1`, `2`, `4`, `8` or `16`. When `sku` is `Basic` or `Standard`, capacity can be `0` only.
	Capacity pulumi.IntPtrInput
	// An `customerManagedKey` block as defined below.
	CustomerManagedKey NamespaceCustomerManagedKeyTypePtrInput
	// An `identity` block as defined below.
	Identity NamespaceIdentityPtrInput
	// Whether or not SAS authentication is enabled for the Service Bus namespace. Defaults to `true`.
	LocalAuthEnabled pulumi.BoolPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The minimum supported TLS version for this Service Bus Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
	MinimumTlsVersion pulumi.StringPtrInput
	// Specifies the name of the ServiceBus Namespace resource . Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// An `networkRuleSet` block as defined below.
	NetworkRuleSet NamespaceNetworkRuleSetPtrInput
	// Is public network access enabled for the Service Bus Namespace? Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// The name of the resource group in which to Changing this forces a new resource to be created.
	// create the namespace.
	ResourceGroupName pulumi.StringInput
	// Defines which tier to use. Options are `Basic`, `Standard` or `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
	Sku pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Whether or not this resource is zone redundant. `sku` needs to be `Premium`. Changing this forces a new resource to be created.
	ZoneRedundant pulumi.BoolPtrInput
}

func (NamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceArgs)(nil)).Elem()
}

type NamespaceInput interface {
	pulumi.Input

	ToNamespaceOutput() NamespaceOutput
	ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput
}

func (*Namespace) ElementType() reflect.Type {
	return reflect.TypeOf((**Namespace)(nil)).Elem()
}

func (i *Namespace) ToNamespaceOutput() NamespaceOutput {
	return i.ToNamespaceOutputWithContext(context.Background())
}

func (i *Namespace) ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceOutput)
}

// NamespaceArrayInput is an input type that accepts NamespaceArray and NamespaceArrayOutput values.
// You can construct a concrete instance of `NamespaceArrayInput` via:
//
//	NamespaceArray{ NamespaceArgs{...} }
type NamespaceArrayInput interface {
	pulumi.Input

	ToNamespaceArrayOutput() NamespaceArrayOutput
	ToNamespaceArrayOutputWithContext(context.Context) NamespaceArrayOutput
}

type NamespaceArray []NamespaceInput

func (NamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Namespace)(nil)).Elem()
}

func (i NamespaceArray) ToNamespaceArrayOutput() NamespaceArrayOutput {
	return i.ToNamespaceArrayOutputWithContext(context.Background())
}

func (i NamespaceArray) ToNamespaceArrayOutputWithContext(ctx context.Context) NamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceArrayOutput)
}

// NamespaceMapInput is an input type that accepts NamespaceMap and NamespaceMapOutput values.
// You can construct a concrete instance of `NamespaceMapInput` via:
//
//	NamespaceMap{ "key": NamespaceArgs{...} }
type NamespaceMapInput interface {
	pulumi.Input

	ToNamespaceMapOutput() NamespaceMapOutput
	ToNamespaceMapOutputWithContext(context.Context) NamespaceMapOutput
}

type NamespaceMap map[string]NamespaceInput

func (NamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Namespace)(nil)).Elem()
}

func (i NamespaceMap) ToNamespaceMapOutput() NamespaceMapOutput {
	return i.ToNamespaceMapOutputWithContext(context.Background())
}

func (i NamespaceMap) ToNamespaceMapOutputWithContext(ctx context.Context) NamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceMapOutput)
}

type NamespaceOutput struct{ *pulumi.OutputState }

func (NamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Namespace)(nil)).Elem()
}

func (o NamespaceOutput) ToNamespaceOutput() NamespaceOutput {
	return o
}

func (o NamespaceOutput) ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput {
	return o
}

// Specifies the capacity. When `sku` is `Premium`, capacity can be `1`, `2`, `4`, `8` or `16`. When `sku` is `Basic` or `Standard`, capacity can be `0` only.
func (o NamespaceOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Namespace) pulumi.IntPtrOutput { return v.Capacity }).(pulumi.IntPtrOutput)
}

// An `customerManagedKey` block as defined below.
func (o NamespaceOutput) CustomerManagedKey() NamespaceCustomerManagedKeyTypePtrOutput {
	return o.ApplyT(func(v *Namespace) NamespaceCustomerManagedKeyTypePtrOutput { return v.CustomerManagedKey }).(NamespaceCustomerManagedKeyTypePtrOutput)
}

// The primary connection string for the authorization rule `RootManageSharedAccessKey`.
func (o NamespaceOutput) DefaultPrimaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.DefaultPrimaryConnectionString }).(pulumi.StringOutput)
}

// The primary access key for the authorization rule `RootManageSharedAccessKey`.
func (o NamespaceOutput) DefaultPrimaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.DefaultPrimaryKey }).(pulumi.StringOutput)
}

// The secondary connection string for the authorization rule `RootManageSharedAccessKey`.
func (o NamespaceOutput) DefaultSecondaryConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.DefaultSecondaryConnectionString }).(pulumi.StringOutput)
}

// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
func (o NamespaceOutput) DefaultSecondaryKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.DefaultSecondaryKey }).(pulumi.StringOutput)
}

// The URL to access the ServiceBus Namespace.
func (o NamespaceOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o NamespaceOutput) Identity() NamespaceIdentityPtrOutput {
	return o.ApplyT(func(v *Namespace) NamespaceIdentityPtrOutput { return v.Identity }).(NamespaceIdentityPtrOutput)
}

// Whether or not SAS authentication is enabled for the Service Bus namespace. Defaults to `true`.
func (o NamespaceOutput) LocalAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Namespace) pulumi.BoolPtrOutput { return v.LocalAuthEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o NamespaceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The minimum supported TLS version for this Service Bus Namespace. Valid values are: `1.0`, `1.1` and `1.2`. The current default minimum TLS version is `1.2`.
func (o NamespaceOutput) MinimumTlsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.MinimumTlsVersion }).(pulumi.StringOutput)
}

// Specifies the name of the ServiceBus Namespace resource . Changing this forces a new resource to be created.
func (o NamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An `networkRuleSet` block as defined below.
func (o NamespaceOutput) NetworkRuleSet() NamespaceNetworkRuleSetOutput {
	return o.ApplyT(func(v *Namespace) NamespaceNetworkRuleSetOutput { return v.NetworkRuleSet }).(NamespaceNetworkRuleSetOutput)
}

// Is public network access enabled for the Service Bus Namespace? Defaults to `true`.
func (o NamespaceOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Namespace) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the resource group in which to Changing this forces a new resource to be created.
// create the namespace.
func (o NamespaceOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Defines which tier to use. Options are `Basic`, `Standard` or `Premium`. Please note that setting this field to `Premium` will force the creation of a new resource.
func (o NamespaceOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.Sku }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o NamespaceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Whether or not this resource is zone redundant. `sku` needs to be `Premium`. Changing this forces a new resource to be created.
func (o NamespaceOutput) ZoneRedundant() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Namespace) pulumi.BoolPtrOutput { return v.ZoneRedundant }).(pulumi.BoolPtrOutput)
}

type NamespaceArrayOutput struct{ *pulumi.OutputState }

func (NamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Namespace)(nil)).Elem()
}

func (o NamespaceArrayOutput) ToNamespaceArrayOutput() NamespaceArrayOutput {
	return o
}

func (o NamespaceArrayOutput) ToNamespaceArrayOutputWithContext(ctx context.Context) NamespaceArrayOutput {
	return o
}

func (o NamespaceArrayOutput) Index(i pulumi.IntInput) NamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Namespace {
		return vs[0].([]*Namespace)[vs[1].(int)]
	}).(NamespaceOutput)
}

type NamespaceMapOutput struct{ *pulumi.OutputState }

func (NamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Namespace)(nil)).Elem()
}

func (o NamespaceMapOutput) ToNamespaceMapOutput() NamespaceMapOutput {
	return o
}

func (o NamespaceMapOutput) ToNamespaceMapOutputWithContext(ctx context.Context) NamespaceMapOutput {
	return o
}

func (o NamespaceMapOutput) MapIndex(k pulumi.StringInput) NamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Namespace {
		return vs[0].(map[string]*Namespace)[vs[1].(string)]
	}).(NamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceInput)(nil)).Elem(), &Namespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceArrayInput)(nil)).Elem(), NamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceMapInput)(nil)).Elem(), NamespaceMap{})
	pulumi.RegisterOutputType(NamespaceOutput{})
	pulumi.RegisterOutputType(NamespaceArrayOutput{})
	pulumi.RegisterOutputType(NamespaceMapOutput{})
}
