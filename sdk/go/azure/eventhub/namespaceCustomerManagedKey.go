// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Customer Managed Key for a EventHub Namespace.
//
// ## Import
//
// Customer Managed Keys for a EventHub Namespace can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:eventhub/namespaceCustomerManagedKey:NamespaceCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventHub/namespaces/namespace1
// ```
type NamespaceCustomerManagedKey struct {
	pulumi.CustomResourceState

	// The ID of the EventHub Namespace. Changing this forces a new resource to be created.
	EventhubNamespaceId pulumi.StringOutput `pulumi:"eventhubNamespaceId"`
	// The list of keys of Key Vault.
	KeyVaultKeyIds pulumi.StringArrayOutput `pulumi:"keyVaultKeyIds"`
}

// NewNamespaceCustomerManagedKey registers a new resource with the given unique name, arguments, and options.
func NewNamespaceCustomerManagedKey(ctx *pulumi.Context,
	name string, args *NamespaceCustomerManagedKeyArgs, opts ...pulumi.ResourceOption) (*NamespaceCustomerManagedKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventhubNamespaceId == nil {
		return nil, errors.New("invalid value for required argument 'EventhubNamespaceId'")
	}
	if args.KeyVaultKeyIds == nil {
		return nil, errors.New("invalid value for required argument 'KeyVaultKeyIds'")
	}
	var resource NamespaceCustomerManagedKey
	err := ctx.RegisterResource("azure:eventhub/namespaceCustomerManagedKey:NamespaceCustomerManagedKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespaceCustomerManagedKey gets an existing NamespaceCustomerManagedKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespaceCustomerManagedKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceCustomerManagedKeyState, opts ...pulumi.ResourceOption) (*NamespaceCustomerManagedKey, error) {
	var resource NamespaceCustomerManagedKey
	err := ctx.ReadResource("azure:eventhub/namespaceCustomerManagedKey:NamespaceCustomerManagedKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NamespaceCustomerManagedKey resources.
type namespaceCustomerManagedKeyState struct {
	// The ID of the EventHub Namespace. Changing this forces a new resource to be created.
	EventhubNamespaceId *string `pulumi:"eventhubNamespaceId"`
	// The list of keys of Key Vault.
	KeyVaultKeyIds []string `pulumi:"keyVaultKeyIds"`
}

type NamespaceCustomerManagedKeyState struct {
	// The ID of the EventHub Namespace. Changing this forces a new resource to be created.
	EventhubNamespaceId pulumi.StringPtrInput
	// The list of keys of Key Vault.
	KeyVaultKeyIds pulumi.StringArrayInput
}

func (NamespaceCustomerManagedKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceCustomerManagedKeyState)(nil)).Elem()
}

type namespaceCustomerManagedKeyArgs struct {
	// The ID of the EventHub Namespace. Changing this forces a new resource to be created.
	EventhubNamespaceId string `pulumi:"eventhubNamespaceId"`
	// The list of keys of Key Vault.
	KeyVaultKeyIds []string `pulumi:"keyVaultKeyIds"`
}

// The set of arguments for constructing a NamespaceCustomerManagedKey resource.
type NamespaceCustomerManagedKeyArgs struct {
	// The ID of the EventHub Namespace. Changing this forces a new resource to be created.
	EventhubNamespaceId pulumi.StringInput
	// The list of keys of Key Vault.
	KeyVaultKeyIds pulumi.StringArrayInput
}

func (NamespaceCustomerManagedKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceCustomerManagedKeyArgs)(nil)).Elem()
}

type NamespaceCustomerManagedKeyInput interface {
	pulumi.Input

	ToNamespaceCustomerManagedKeyOutput() NamespaceCustomerManagedKeyOutput
	ToNamespaceCustomerManagedKeyOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyOutput
}

func (*NamespaceCustomerManagedKey) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceCustomerManagedKey)(nil))
}

func (i *NamespaceCustomerManagedKey) ToNamespaceCustomerManagedKeyOutput() NamespaceCustomerManagedKeyOutput {
	return i.ToNamespaceCustomerManagedKeyOutputWithContext(context.Background())
}

func (i *NamespaceCustomerManagedKey) ToNamespaceCustomerManagedKeyOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCustomerManagedKeyOutput)
}

func (i *NamespaceCustomerManagedKey) ToNamespaceCustomerManagedKeyPtrOutput() NamespaceCustomerManagedKeyPtrOutput {
	return i.ToNamespaceCustomerManagedKeyPtrOutputWithContext(context.Background())
}

func (i *NamespaceCustomerManagedKey) ToNamespaceCustomerManagedKeyPtrOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCustomerManagedKeyPtrOutput)
}

type NamespaceCustomerManagedKeyPtrInput interface {
	pulumi.Input

	ToNamespaceCustomerManagedKeyPtrOutput() NamespaceCustomerManagedKeyPtrOutput
	ToNamespaceCustomerManagedKeyPtrOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyPtrOutput
}

type namespaceCustomerManagedKeyPtrType NamespaceCustomerManagedKeyArgs

func (*namespaceCustomerManagedKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceCustomerManagedKey)(nil))
}

func (i *namespaceCustomerManagedKeyPtrType) ToNamespaceCustomerManagedKeyPtrOutput() NamespaceCustomerManagedKeyPtrOutput {
	return i.ToNamespaceCustomerManagedKeyPtrOutputWithContext(context.Background())
}

func (i *namespaceCustomerManagedKeyPtrType) ToNamespaceCustomerManagedKeyPtrOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCustomerManagedKeyPtrOutput)
}

// NamespaceCustomerManagedKeyArrayInput is an input type that accepts NamespaceCustomerManagedKeyArray and NamespaceCustomerManagedKeyArrayOutput values.
// You can construct a concrete instance of `NamespaceCustomerManagedKeyArrayInput` via:
//
//          NamespaceCustomerManagedKeyArray{ NamespaceCustomerManagedKeyArgs{...} }
type NamespaceCustomerManagedKeyArrayInput interface {
	pulumi.Input

	ToNamespaceCustomerManagedKeyArrayOutput() NamespaceCustomerManagedKeyArrayOutput
	ToNamespaceCustomerManagedKeyArrayOutputWithContext(context.Context) NamespaceCustomerManagedKeyArrayOutput
}

type NamespaceCustomerManagedKeyArray []NamespaceCustomerManagedKeyInput

func (NamespaceCustomerManagedKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*NamespaceCustomerManagedKey)(nil))
}

func (i NamespaceCustomerManagedKeyArray) ToNamespaceCustomerManagedKeyArrayOutput() NamespaceCustomerManagedKeyArrayOutput {
	return i.ToNamespaceCustomerManagedKeyArrayOutputWithContext(context.Background())
}

func (i NamespaceCustomerManagedKeyArray) ToNamespaceCustomerManagedKeyArrayOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCustomerManagedKeyArrayOutput)
}

// NamespaceCustomerManagedKeyMapInput is an input type that accepts NamespaceCustomerManagedKeyMap and NamespaceCustomerManagedKeyMapOutput values.
// You can construct a concrete instance of `NamespaceCustomerManagedKeyMapInput` via:
//
//          NamespaceCustomerManagedKeyMap{ "key": NamespaceCustomerManagedKeyArgs{...} }
type NamespaceCustomerManagedKeyMapInput interface {
	pulumi.Input

	ToNamespaceCustomerManagedKeyMapOutput() NamespaceCustomerManagedKeyMapOutput
	ToNamespaceCustomerManagedKeyMapOutputWithContext(context.Context) NamespaceCustomerManagedKeyMapOutput
}

type NamespaceCustomerManagedKeyMap map[string]NamespaceCustomerManagedKeyInput

func (NamespaceCustomerManagedKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*NamespaceCustomerManagedKey)(nil))
}

func (i NamespaceCustomerManagedKeyMap) ToNamespaceCustomerManagedKeyMapOutput() NamespaceCustomerManagedKeyMapOutput {
	return i.ToNamespaceCustomerManagedKeyMapOutputWithContext(context.Background())
}

func (i NamespaceCustomerManagedKeyMap) ToNamespaceCustomerManagedKeyMapOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceCustomerManagedKeyMapOutput)
}

type NamespaceCustomerManagedKeyOutput struct {
	*pulumi.OutputState
}

func (NamespaceCustomerManagedKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceCustomerManagedKey)(nil))
}

func (o NamespaceCustomerManagedKeyOutput) ToNamespaceCustomerManagedKeyOutput() NamespaceCustomerManagedKeyOutput {
	return o
}

func (o NamespaceCustomerManagedKeyOutput) ToNamespaceCustomerManagedKeyOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyOutput {
	return o
}

func (o NamespaceCustomerManagedKeyOutput) ToNamespaceCustomerManagedKeyPtrOutput() NamespaceCustomerManagedKeyPtrOutput {
	return o.ToNamespaceCustomerManagedKeyPtrOutputWithContext(context.Background())
}

func (o NamespaceCustomerManagedKeyOutput) ToNamespaceCustomerManagedKeyPtrOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyPtrOutput {
	return o.ApplyT(func(v NamespaceCustomerManagedKey) *NamespaceCustomerManagedKey {
		return &v
	}).(NamespaceCustomerManagedKeyPtrOutput)
}

type NamespaceCustomerManagedKeyPtrOutput struct {
	*pulumi.OutputState
}

func (NamespaceCustomerManagedKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NamespaceCustomerManagedKey)(nil))
}

func (o NamespaceCustomerManagedKeyPtrOutput) ToNamespaceCustomerManagedKeyPtrOutput() NamespaceCustomerManagedKeyPtrOutput {
	return o
}

func (o NamespaceCustomerManagedKeyPtrOutput) ToNamespaceCustomerManagedKeyPtrOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyPtrOutput {
	return o
}

type NamespaceCustomerManagedKeyArrayOutput struct{ *pulumi.OutputState }

func (NamespaceCustomerManagedKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespaceCustomerManagedKey)(nil))
}

func (o NamespaceCustomerManagedKeyArrayOutput) ToNamespaceCustomerManagedKeyArrayOutput() NamespaceCustomerManagedKeyArrayOutput {
	return o
}

func (o NamespaceCustomerManagedKeyArrayOutput) ToNamespaceCustomerManagedKeyArrayOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyArrayOutput {
	return o
}

func (o NamespaceCustomerManagedKeyArrayOutput) Index(i pulumi.IntInput) NamespaceCustomerManagedKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespaceCustomerManagedKey {
		return vs[0].([]NamespaceCustomerManagedKey)[vs[1].(int)]
	}).(NamespaceCustomerManagedKeyOutput)
}

type NamespaceCustomerManagedKeyMapOutput struct{ *pulumi.OutputState }

func (NamespaceCustomerManagedKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NamespaceCustomerManagedKey)(nil))
}

func (o NamespaceCustomerManagedKeyMapOutput) ToNamespaceCustomerManagedKeyMapOutput() NamespaceCustomerManagedKeyMapOutput {
	return o
}

func (o NamespaceCustomerManagedKeyMapOutput) ToNamespaceCustomerManagedKeyMapOutputWithContext(ctx context.Context) NamespaceCustomerManagedKeyMapOutput {
	return o
}

func (o NamespaceCustomerManagedKeyMapOutput) MapIndex(k pulumi.StringInput) NamespaceCustomerManagedKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NamespaceCustomerManagedKey {
		return vs[0].(map[string]NamespaceCustomerManagedKey)[vs[1].(string)]
	}).(NamespaceCustomerManagedKeyOutput)
}

func init() {
	pulumi.RegisterOutputType(NamespaceCustomerManagedKeyOutput{})
	pulumi.RegisterOutputType(NamespaceCustomerManagedKeyPtrOutput{})
	pulumi.RegisterOutputType(NamespaceCustomerManagedKeyArrayOutput{})
	pulumi.RegisterOutputType(NamespaceCustomerManagedKeyMapOutput{})
}
