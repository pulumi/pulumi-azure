// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing EventHub.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/eventhub"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := eventhub.LookupEventHub(ctx, &eventhub.LookupEventHubArgs{
//				Name:              "search-eventhub",
//				ResourceGroupName: "search-service",
//				NamespaceName:     "search-eventhubns",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("eventhubId", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupEventHub(ctx *pulumi.Context, args *LookupEventHubArgs, opts ...pulumi.InvokeOption) (*LookupEventHubResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	invokeOpts, optsErr := pulumi.NewInvokeOptions(opts...)
	if optsErr != nil {
		return &LookupEventHubResult{}, optsErr
	}
	if len(invokeOpts.DependsOn) > 0 {
		return &LookupEventHubResult{}, errors.New("DependsOn is not supported for direct form invoke LookupEventHub, use LookupEventHubOutput instead")
	}
	if len(invokeOpts.DependsOnInputs) > 0 {
		return &LookupEventHubResult{}, errors.New("DependsOnInputs is not supported for direct form invoke LookupEventHub, use LookupEventHubOutput instead")
	}
	var rv LookupEventHubResult
	err := ctx.Invoke("azure:eventhub/getEventHub:getEventHub", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEventHub.
type LookupEventHubArgs struct {
	// The name of this EventHub.
	Name string `pulumi:"name"`
	// The name of the EventHub Namespace where the EventHub exists.
	NamespaceName string `pulumi:"namespaceName"`
	// The name of the Resource Group where the EventHub exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getEventHub.
type LookupEventHubResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id            string `pulumi:"id"`
	Name          string `pulumi:"name"`
	NamespaceName string `pulumi:"namespaceName"`
	// The number of partitions in the EventHub.
	PartitionCount int `pulumi:"partitionCount"`
	// The identifiers for the partitions of this EventHub.
	PartitionIds      []string `pulumi:"partitionIds"`
	ResourceGroupName string   `pulumi:"resourceGroupName"`
}

func LookupEventHubOutput(ctx *pulumi.Context, args LookupEventHubOutputArgs, opts ...pulumi.InvokeOption) LookupEventHubResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEventHubResultOutput, error) {
			args := v.(LookupEventHubArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupEventHubResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("azure:eventhub/getEventHub:getEventHub", args, &rv, "", opts...)
			if err != nil {
				return LookupEventHubResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupEventHubResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(LookupEventHubResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupEventHubResultOutput), nil
			}
			return output, nil
		}).(LookupEventHubResultOutput)
}

// A collection of arguments for invoking getEventHub.
type LookupEventHubOutputArgs struct {
	// The name of this EventHub.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the EventHub Namespace where the EventHub exists.
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// The name of the Resource Group where the EventHub exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupEventHubOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventHubArgs)(nil)).Elem()
}

// A collection of values returned by getEventHub.
type LookupEventHubResultOutput struct{ *pulumi.OutputState }

func (LookupEventHubResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEventHubResult)(nil)).Elem()
}

func (o LookupEventHubResultOutput) ToLookupEventHubResultOutput() LookupEventHubResultOutput {
	return o
}

func (o LookupEventHubResultOutput) ToLookupEventHubResultOutputWithContext(ctx context.Context) LookupEventHubResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupEventHubResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventHubResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupEventHubResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventHubResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupEventHubResultOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventHubResult) string { return v.NamespaceName }).(pulumi.StringOutput)
}

// The number of partitions in the EventHub.
func (o LookupEventHubResultOutput) PartitionCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEventHubResult) int { return v.PartitionCount }).(pulumi.IntOutput)
}

// The identifiers for the partitions of this EventHub.
func (o LookupEventHubResultOutput) PartitionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEventHubResult) []string { return v.PartitionIds }).(pulumi.StringArrayOutput)
}

func (o LookupEventHubResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEventHubResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEventHubResultOutput{})
}
