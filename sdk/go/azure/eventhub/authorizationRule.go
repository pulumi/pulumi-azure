// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Event Hubs authorization Rule within an Event Hub.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/eventhub_authorization_rule.html.markdown.
type AuthorizationRule struct {
	s *pulumi.ResourceState
}

// NewAuthorizationRule registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationRule(ctx *pulumi.Context,
	name string, args *AuthorizationRuleArgs, opts ...pulumi.ResourceOpt) (*AuthorizationRule, error) {
	if args == nil || args.EventhubName == nil {
		return nil, errors.New("missing required argument 'EventhubName'")
	}
	if args == nil || args.NamespaceName == nil {
		return nil, errors.New("missing required argument 'NamespaceName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["eventhubName"] = nil
		inputs["listen"] = nil
		inputs["location"] = nil
		inputs["manage"] = nil
		inputs["name"] = nil
		inputs["namespaceName"] = nil
		inputs["resourceGroupName"] = nil
		inputs["send"] = nil
	} else {
		inputs["eventhubName"] = args.EventhubName
		inputs["listen"] = args.Listen
		inputs["location"] = args.Location
		inputs["manage"] = args.Manage
		inputs["name"] = args.Name
		inputs["namespaceName"] = args.NamespaceName
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["send"] = args.Send
	}
	inputs["primaryConnectionString"] = nil
	inputs["primaryKey"] = nil
	inputs["secondaryConnectionString"] = nil
	inputs["secondaryKey"] = nil
	s, err := ctx.RegisterResource("azure:eventhub/authorizationRule:AuthorizationRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthorizationRule{s: s}, nil
}

// GetAuthorizationRule gets an existing AuthorizationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AuthorizationRuleState, opts ...pulumi.ResourceOpt) (*AuthorizationRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["eventhubName"] = state.EventhubName
		inputs["listen"] = state.Listen
		inputs["location"] = state.Location
		inputs["manage"] = state.Manage
		inputs["name"] = state.Name
		inputs["namespaceName"] = state.NamespaceName
		inputs["primaryConnectionString"] = state.PrimaryConnectionString
		inputs["primaryKey"] = state.PrimaryKey
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["secondaryConnectionString"] = state.SecondaryConnectionString
		inputs["secondaryKey"] = state.SecondaryKey
		inputs["send"] = state.Send
	}
	s, err := ctx.ReadResource("azure:eventhub/authorizationRule:AuthorizationRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AuthorizationRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AuthorizationRule) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AuthorizationRule) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Specifies the name of the EventHub. Changing this forces a new resource to be created.
func (r *AuthorizationRule) EventhubName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["eventhubName"])
}

// Does this Authorization Rule have permissions to Listen to the Event Hub? Defaults to `false`.
func (r *AuthorizationRule) Listen() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["listen"])
}

func (r *AuthorizationRule) Location() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["location"])
}

// Does this Authorization Rule have permissions to Manage to the Event Hub? When this property is `true` - both `listen` and `send` must be too. Defaults to `false`.
func (r *AuthorizationRule) Manage() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["manage"])
}

// Specifies the name of the EventHub Authorization Rule resource. Changing this forces a new resource to be created.
func (r *AuthorizationRule) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Specifies the name of the grandparent EventHub Namespace. Changing this forces a new resource to be created.
func (r *AuthorizationRule) NamespaceName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["namespaceName"])
}

// The Primary Connection String for the Event Hubs authorization Rule.
func (r *AuthorizationRule) PrimaryConnectionString() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["primaryConnectionString"])
}

// The Primary Key for the Event Hubs authorization Rule.
func (r *AuthorizationRule) PrimaryKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["primaryKey"])
}

// The name of the resource group in which the EventHub Namespace exists. Changing this forces a new resource to be created.
func (r *AuthorizationRule) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The Secondary Connection String for the Event Hubs authorization Rule.
func (r *AuthorizationRule) SecondaryConnectionString() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["secondaryConnectionString"])
}

// The Secondary Key for the Event Hubs authorization Rule.
func (r *AuthorizationRule) SecondaryKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["secondaryKey"])
}

// Does this Authorization Rule have permissions to Send to the Event Hub? Defaults to `false`.
func (r *AuthorizationRule) Send() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["send"])
}

// Input properties used for looking up and filtering AuthorizationRule resources.
type AuthorizationRuleState struct {
	// Specifies the name of the EventHub. Changing this forces a new resource to be created.
	EventhubName interface{}
	// Does this Authorization Rule have permissions to Listen to the Event Hub? Defaults to `false`.
	Listen interface{}
	Location interface{}
	// Does this Authorization Rule have permissions to Manage to the Event Hub? When this property is `true` - both `listen` and `send` must be too. Defaults to `false`.
	Manage interface{}
	// Specifies the name of the EventHub Authorization Rule resource. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the name of the grandparent EventHub Namespace. Changing this forces a new resource to be created.
	NamespaceName interface{}
	// The Primary Connection String for the Event Hubs authorization Rule.
	PrimaryConnectionString interface{}
	// The Primary Key for the Event Hubs authorization Rule.
	PrimaryKey interface{}
	// The name of the resource group in which the EventHub Namespace exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The Secondary Connection String for the Event Hubs authorization Rule.
	SecondaryConnectionString interface{}
	// The Secondary Key for the Event Hubs authorization Rule.
	SecondaryKey interface{}
	// Does this Authorization Rule have permissions to Send to the Event Hub? Defaults to `false`.
	Send interface{}
}

// The set of arguments for constructing a AuthorizationRule resource.
type AuthorizationRuleArgs struct {
	// Specifies the name of the EventHub. Changing this forces a new resource to be created.
	EventhubName interface{}
	// Does this Authorization Rule have permissions to Listen to the Event Hub? Defaults to `false`.
	Listen interface{}
	Location interface{}
	// Does this Authorization Rule have permissions to Manage to the Event Hub? When this property is `true` - both `listen` and `send` must be too. Defaults to `false`.
	Manage interface{}
	// Specifies the name of the EventHub Authorization Rule resource. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the name of the grandparent EventHub Namespace. Changing this forces a new resource to be created.
	NamespaceName interface{}
	// The name of the resource group in which the EventHub Namespace exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Does this Authorization Rule have permissions to Send to the Event Hub? Defaults to `false`.
	Send interface{}
}
