// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventgrid

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Event Grid System Topic.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/eventgrid"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("staging"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventgrid.NewSystemTopic(ctx, "exampleSystemTopic", &eventgrid.SystemTopicArgs{
//				ResourceGroupName:   exampleResourceGroup.Name,
//				Location:            exampleResourceGroup.Location,
//				SourceArmResourceId: exampleAccount.ID(),
//				TopicType:           pulumi.String("Microsoft.Storage.StorageAccounts"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Event Grid System Topic can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:eventgrid/systemTopic:SystemTopic example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventGrid/systemTopics/systemTopic1
//
// ```
type SystemTopic struct {
	pulumi.CustomResourceState

	// An `identity` block as defined below.
	Identity SystemTopicIdentityPtrOutput `pulumi:"identity"`
	// The Azure Region where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The Metric ARM Resource ID of the Event Grid System Topic.
	MetricArmResourceId pulumi.StringOutput `pulumi:"metricArmResourceId"`
	// The name which should be used for this Event Grid System Topic. Changing this forces a new Event Grid System Topic to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The ID of the Event Grid System Topic ARM Source. Changing this forces a new Event Grid System Topic to be created.
	SourceArmResourceId pulumi.StringOutput `pulumi:"sourceArmResourceId"`
	// A mapping of tags which should be assigned to the Event Grid System Topic.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The Topic Type of the Event Grid System Topic. The topic type is validated by Azure and there may be additional topic types beyond the following: `Microsoft.AppConfiguration.ConfigurationStores`, `Microsoft.Communication.CommunicationServices`, `Microsoft.ContainerRegistry.Registries`, `Microsoft.Devices.IoTHubs`, `Microsoft.EventGrid.Domains`, `Microsoft.EventGrid.Topics`, `Microsoft.Eventhub.Namespaces`, `Microsoft.KeyVault.vaults`, `Microsoft.MachineLearningServices.Workspaces`, `Microsoft.Maps.Accounts`, `Microsoft.Media.MediaServices`, `Microsoft.Resources.ResourceGroups`, `Microsoft.Resources.Subscriptions`, `Microsoft.ServiceBus.Namespaces`, `Microsoft.SignalRService.SignalR`, `Microsoft.Storage.StorageAccounts`, `Microsoft.Web.ServerFarms` and `Microsoft.Web.Sites`. Changing this forces a new Event Grid System Topic to be created.
	//
	// > **NOTE:** Some `topicType`s (e.g. **Microsoft.Resources.Subscriptions**) requires location to be set to `Global` instead of a real location like `West US`.
	//
	// > **NOTE:** You can use Azure CLI to get a full list of the available topic types: `az eventgrid topic-type  list --output json | grep -w id`
	TopicType pulumi.StringOutput `pulumi:"topicType"`
}

// NewSystemTopic registers a new resource with the given unique name, arguments, and options.
func NewSystemTopic(ctx *pulumi.Context,
	name string, args *SystemTopicArgs, opts ...pulumi.ResourceOption) (*SystemTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SourceArmResourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceArmResourceId'")
	}
	if args.TopicType == nil {
		return nil, errors.New("invalid value for required argument 'TopicType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemTopic
	err := ctx.RegisterResource("azure:eventgrid/systemTopic:SystemTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemTopic gets an existing SystemTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemTopicState, opts ...pulumi.ResourceOption) (*SystemTopic, error) {
	var resource SystemTopic
	err := ctx.ReadResource("azure:eventgrid/systemTopic:SystemTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemTopic resources.
type systemTopicState struct {
	// An `identity` block as defined below.
	Identity *SystemTopicIdentity `pulumi:"identity"`
	// The Azure Region where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	Location *string `pulumi:"location"`
	// The Metric ARM Resource ID of the Event Grid System Topic.
	MetricArmResourceId *string `pulumi:"metricArmResourceId"`
	// The name which should be used for this Event Grid System Topic. Changing this forces a new Event Grid System Topic to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The ID of the Event Grid System Topic ARM Source. Changing this forces a new Event Grid System Topic to be created.
	SourceArmResourceId *string `pulumi:"sourceArmResourceId"`
	// A mapping of tags which should be assigned to the Event Grid System Topic.
	Tags map[string]string `pulumi:"tags"`
	// The Topic Type of the Event Grid System Topic. The topic type is validated by Azure and there may be additional topic types beyond the following: `Microsoft.AppConfiguration.ConfigurationStores`, `Microsoft.Communication.CommunicationServices`, `Microsoft.ContainerRegistry.Registries`, `Microsoft.Devices.IoTHubs`, `Microsoft.EventGrid.Domains`, `Microsoft.EventGrid.Topics`, `Microsoft.Eventhub.Namespaces`, `Microsoft.KeyVault.vaults`, `Microsoft.MachineLearningServices.Workspaces`, `Microsoft.Maps.Accounts`, `Microsoft.Media.MediaServices`, `Microsoft.Resources.ResourceGroups`, `Microsoft.Resources.Subscriptions`, `Microsoft.ServiceBus.Namespaces`, `Microsoft.SignalRService.SignalR`, `Microsoft.Storage.StorageAccounts`, `Microsoft.Web.ServerFarms` and `Microsoft.Web.Sites`. Changing this forces a new Event Grid System Topic to be created.
	//
	// > **NOTE:** Some `topicType`s (e.g. **Microsoft.Resources.Subscriptions**) requires location to be set to `Global` instead of a real location like `West US`.
	//
	// > **NOTE:** You can use Azure CLI to get a full list of the available topic types: `az eventgrid topic-type  list --output json | grep -w id`
	TopicType *string `pulumi:"topicType"`
}

type SystemTopicState struct {
	// An `identity` block as defined below.
	Identity SystemTopicIdentityPtrInput
	// The Azure Region where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	Location pulumi.StringPtrInput
	// The Metric ARM Resource ID of the Event Grid System Topic.
	MetricArmResourceId pulumi.StringPtrInput
	// The name which should be used for this Event Grid System Topic. Changing this forces a new Event Grid System Topic to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The ID of the Event Grid System Topic ARM Source. Changing this forces a new Event Grid System Topic to be created.
	SourceArmResourceId pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Event Grid System Topic.
	Tags pulumi.StringMapInput
	// The Topic Type of the Event Grid System Topic. The topic type is validated by Azure and there may be additional topic types beyond the following: `Microsoft.AppConfiguration.ConfigurationStores`, `Microsoft.Communication.CommunicationServices`, `Microsoft.ContainerRegistry.Registries`, `Microsoft.Devices.IoTHubs`, `Microsoft.EventGrid.Domains`, `Microsoft.EventGrid.Topics`, `Microsoft.Eventhub.Namespaces`, `Microsoft.KeyVault.vaults`, `Microsoft.MachineLearningServices.Workspaces`, `Microsoft.Maps.Accounts`, `Microsoft.Media.MediaServices`, `Microsoft.Resources.ResourceGroups`, `Microsoft.Resources.Subscriptions`, `Microsoft.ServiceBus.Namespaces`, `Microsoft.SignalRService.SignalR`, `Microsoft.Storage.StorageAccounts`, `Microsoft.Web.ServerFarms` and `Microsoft.Web.Sites`. Changing this forces a new Event Grid System Topic to be created.
	//
	// > **NOTE:** Some `topicType`s (e.g. **Microsoft.Resources.Subscriptions**) requires location to be set to `Global` instead of a real location like `West US`.
	//
	// > **NOTE:** You can use Azure CLI to get a full list of the available topic types: `az eventgrid topic-type  list --output json | grep -w id`
	TopicType pulumi.StringPtrInput
}

func (SystemTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemTopicState)(nil)).Elem()
}

type systemTopicArgs struct {
	// An `identity` block as defined below.
	Identity *SystemTopicIdentity `pulumi:"identity"`
	// The Azure Region where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Event Grid System Topic. Changing this forces a new Event Grid System Topic to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The ID of the Event Grid System Topic ARM Source. Changing this forces a new Event Grid System Topic to be created.
	SourceArmResourceId string `pulumi:"sourceArmResourceId"`
	// A mapping of tags which should be assigned to the Event Grid System Topic.
	Tags map[string]string `pulumi:"tags"`
	// The Topic Type of the Event Grid System Topic. The topic type is validated by Azure and there may be additional topic types beyond the following: `Microsoft.AppConfiguration.ConfigurationStores`, `Microsoft.Communication.CommunicationServices`, `Microsoft.ContainerRegistry.Registries`, `Microsoft.Devices.IoTHubs`, `Microsoft.EventGrid.Domains`, `Microsoft.EventGrid.Topics`, `Microsoft.Eventhub.Namespaces`, `Microsoft.KeyVault.vaults`, `Microsoft.MachineLearningServices.Workspaces`, `Microsoft.Maps.Accounts`, `Microsoft.Media.MediaServices`, `Microsoft.Resources.ResourceGroups`, `Microsoft.Resources.Subscriptions`, `Microsoft.ServiceBus.Namespaces`, `Microsoft.SignalRService.SignalR`, `Microsoft.Storage.StorageAccounts`, `Microsoft.Web.ServerFarms` and `Microsoft.Web.Sites`. Changing this forces a new Event Grid System Topic to be created.
	//
	// > **NOTE:** Some `topicType`s (e.g. **Microsoft.Resources.Subscriptions**) requires location to be set to `Global` instead of a real location like `West US`.
	//
	// > **NOTE:** You can use Azure CLI to get a full list of the available topic types: `az eventgrid topic-type  list --output json | grep -w id`
	TopicType string `pulumi:"topicType"`
}

// The set of arguments for constructing a SystemTopic resource.
type SystemTopicArgs struct {
	// An `identity` block as defined below.
	Identity SystemTopicIdentityPtrInput
	// The Azure Region where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Event Grid System Topic. Changing this forces a new Event Grid System Topic to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	ResourceGroupName pulumi.StringInput
	// The ID of the Event Grid System Topic ARM Source. Changing this forces a new Event Grid System Topic to be created.
	SourceArmResourceId pulumi.StringInput
	// A mapping of tags which should be assigned to the Event Grid System Topic.
	Tags pulumi.StringMapInput
	// The Topic Type of the Event Grid System Topic. The topic type is validated by Azure and there may be additional topic types beyond the following: `Microsoft.AppConfiguration.ConfigurationStores`, `Microsoft.Communication.CommunicationServices`, `Microsoft.ContainerRegistry.Registries`, `Microsoft.Devices.IoTHubs`, `Microsoft.EventGrid.Domains`, `Microsoft.EventGrid.Topics`, `Microsoft.Eventhub.Namespaces`, `Microsoft.KeyVault.vaults`, `Microsoft.MachineLearningServices.Workspaces`, `Microsoft.Maps.Accounts`, `Microsoft.Media.MediaServices`, `Microsoft.Resources.ResourceGroups`, `Microsoft.Resources.Subscriptions`, `Microsoft.ServiceBus.Namespaces`, `Microsoft.SignalRService.SignalR`, `Microsoft.Storage.StorageAccounts`, `Microsoft.Web.ServerFarms` and `Microsoft.Web.Sites`. Changing this forces a new Event Grid System Topic to be created.
	//
	// > **NOTE:** Some `topicType`s (e.g. **Microsoft.Resources.Subscriptions**) requires location to be set to `Global` instead of a real location like `West US`.
	//
	// > **NOTE:** You can use Azure CLI to get a full list of the available topic types: `az eventgrid topic-type  list --output json | grep -w id`
	TopicType pulumi.StringInput
}

func (SystemTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemTopicArgs)(nil)).Elem()
}

type SystemTopicInput interface {
	pulumi.Input

	ToSystemTopicOutput() SystemTopicOutput
	ToSystemTopicOutputWithContext(ctx context.Context) SystemTopicOutput
}

func (*SystemTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopic)(nil)).Elem()
}

func (i *SystemTopic) ToSystemTopicOutput() SystemTopicOutput {
	return i.ToSystemTopicOutputWithContext(context.Background())
}

func (i *SystemTopic) ToSystemTopicOutputWithContext(ctx context.Context) SystemTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicOutput)
}

// SystemTopicArrayInput is an input type that accepts SystemTopicArray and SystemTopicArrayOutput values.
// You can construct a concrete instance of `SystemTopicArrayInput` via:
//
//	SystemTopicArray{ SystemTopicArgs{...} }
type SystemTopicArrayInput interface {
	pulumi.Input

	ToSystemTopicArrayOutput() SystemTopicArrayOutput
	ToSystemTopicArrayOutputWithContext(context.Context) SystemTopicArrayOutput
}

type SystemTopicArray []SystemTopicInput

func (SystemTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemTopic)(nil)).Elem()
}

func (i SystemTopicArray) ToSystemTopicArrayOutput() SystemTopicArrayOutput {
	return i.ToSystemTopicArrayOutputWithContext(context.Background())
}

func (i SystemTopicArray) ToSystemTopicArrayOutputWithContext(ctx context.Context) SystemTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicArrayOutput)
}

// SystemTopicMapInput is an input type that accepts SystemTopicMap and SystemTopicMapOutput values.
// You can construct a concrete instance of `SystemTopicMapInput` via:
//
//	SystemTopicMap{ "key": SystemTopicArgs{...} }
type SystemTopicMapInput interface {
	pulumi.Input

	ToSystemTopicMapOutput() SystemTopicMapOutput
	ToSystemTopicMapOutputWithContext(context.Context) SystemTopicMapOutput
}

type SystemTopicMap map[string]SystemTopicInput

func (SystemTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemTopic)(nil)).Elem()
}

func (i SystemTopicMap) ToSystemTopicMapOutput() SystemTopicMapOutput {
	return i.ToSystemTopicMapOutputWithContext(context.Background())
}

func (i SystemTopicMap) ToSystemTopicMapOutputWithContext(ctx context.Context) SystemTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicMapOutput)
}

type SystemTopicOutput struct{ *pulumi.OutputState }

func (SystemTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopic)(nil)).Elem()
}

func (o SystemTopicOutput) ToSystemTopicOutput() SystemTopicOutput {
	return o
}

func (o SystemTopicOutput) ToSystemTopicOutputWithContext(ctx context.Context) SystemTopicOutput {
	return o
}

// An `identity` block as defined below.
func (o SystemTopicOutput) Identity() SystemTopicIdentityPtrOutput {
	return o.ApplyT(func(v *SystemTopic) SystemTopicIdentityPtrOutput { return v.Identity }).(SystemTopicIdentityPtrOutput)
}

// The Azure Region where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
func (o SystemTopicOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemTopic) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The Metric ARM Resource ID of the Event Grid System Topic.
func (o SystemTopicOutput) MetricArmResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemTopic) pulumi.StringOutput { return v.MetricArmResourceId }).(pulumi.StringOutput)
}

// The name which should be used for this Event Grid System Topic. Changing this forces a new Event Grid System Topic to be created.
func (o SystemTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
func (o SystemTopicOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemTopic) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The ID of the Event Grid System Topic ARM Source. Changing this forces a new Event Grid System Topic to be created.
func (o SystemTopicOutput) SourceArmResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemTopic) pulumi.StringOutput { return v.SourceArmResourceId }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Event Grid System Topic.
func (o SystemTopicOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SystemTopic) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The Topic Type of the Event Grid System Topic. The topic type is validated by Azure and there may be additional topic types beyond the following: `Microsoft.AppConfiguration.ConfigurationStores`, `Microsoft.Communication.CommunicationServices`, `Microsoft.ContainerRegistry.Registries`, `Microsoft.Devices.IoTHubs`, `Microsoft.EventGrid.Domains`, `Microsoft.EventGrid.Topics`, `Microsoft.Eventhub.Namespaces`, `Microsoft.KeyVault.vaults`, `Microsoft.MachineLearningServices.Workspaces`, `Microsoft.Maps.Accounts`, `Microsoft.Media.MediaServices`, `Microsoft.Resources.ResourceGroups`, `Microsoft.Resources.Subscriptions`, `Microsoft.ServiceBus.Namespaces`, `Microsoft.SignalRService.SignalR`, `Microsoft.Storage.StorageAccounts`, `Microsoft.Web.ServerFarms` and `Microsoft.Web.Sites`. Changing this forces a new Event Grid System Topic to be created.
//
// > **NOTE:** Some `topicType`s (e.g. **Microsoft.Resources.Subscriptions**) requires location to be set to `Global` instead of a real location like `West US`.
//
// > **NOTE:** You can use Azure CLI to get a full list of the available topic types: `az eventgrid topic-type  list --output json | grep -w id`
func (o SystemTopicOutput) TopicType() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemTopic) pulumi.StringOutput { return v.TopicType }).(pulumi.StringOutput)
}

type SystemTopicArrayOutput struct{ *pulumi.OutputState }

func (SystemTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemTopic)(nil)).Elem()
}

func (o SystemTopicArrayOutput) ToSystemTopicArrayOutput() SystemTopicArrayOutput {
	return o
}

func (o SystemTopicArrayOutput) ToSystemTopicArrayOutputWithContext(ctx context.Context) SystemTopicArrayOutput {
	return o
}

func (o SystemTopicArrayOutput) Index(i pulumi.IntInput) SystemTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemTopic {
		return vs[0].([]*SystemTopic)[vs[1].(int)]
	}).(SystemTopicOutput)
}

type SystemTopicMapOutput struct{ *pulumi.OutputState }

func (SystemTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemTopic)(nil)).Elem()
}

func (o SystemTopicMapOutput) ToSystemTopicMapOutput() SystemTopicMapOutput {
	return o
}

func (o SystemTopicMapOutput) ToSystemTopicMapOutputWithContext(ctx context.Context) SystemTopicMapOutput {
	return o
}

func (o SystemTopicMapOutput) MapIndex(k pulumi.StringInput) SystemTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemTopic {
		return vs[0].(map[string]*SystemTopic)[vs[1].(string)]
	}).(SystemTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemTopicInput)(nil)).Elem(), &SystemTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemTopicArrayInput)(nil)).Elem(), SystemTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemTopicMapInput)(nil)).Elem(), SystemTopicMap{})
	pulumi.RegisterOutputType(SystemTopicOutput{})
	pulumi.RegisterOutputType(SystemTopicArrayOutput{})
	pulumi.RegisterOutputType(SystemTopicMapOutput{})
}
