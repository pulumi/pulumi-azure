// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eventgrid

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages an Event Grid System Topic.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/eventgrid"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("LRS"),
// 			Tags: pulumi.StringMap{
// 				"environment": pulumi.String("staging"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = eventgrid.NewSystemTopic(ctx, "exampleSystemTopic", &eventgrid.SystemTopicArgs{
// 			ResourceGroupName:   exampleResourceGroup.Name,
// 			Location:            exampleResourceGroup.Location,
// 			SourceArmResourceId: exampleAccount.ID(),
// 			TopicType:           pulumi.String("Microsoft.Storage.StorageAccounts"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Event Grid System Topic can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:eventgrid/systemTopic:SystemTopic example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventGrid/systemTopics/systemTopic1
// ```
type SystemTopic struct {
	pulumi.CustomResourceState

	// The Azure Region where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The Metric ARM Resource ID of the Event Grid System Topic.
	MetricArmResourceId pulumi.StringOutput `pulumi:"metricArmResourceId"`
	// The name which should be used for this Event Grid System Topic. Changing this forces a new Event Grid System Topic to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The ID of the Event Grid System Topic ARM Source. Changing this forces a new Event Grid System Topic to be created.
	SourceArmResourceId pulumi.StringOutput `pulumi:"sourceArmResourceId"`
	// A mapping of tags which should be assigned to the Event Grid System Topic.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The Topic Type of the Event Grid System Topic. Possible values are: `Microsoft.AppConfiguration.ConfigurationStores`, `Microsoft.Communication.CommunicationServices`
	// , `Microsoft.ContainerRegistry.Registries`, `Microsoft.Devices.IoTHubs`, `Microsoft.EventGrid.Domains`, `Microsoft.EventGrid.Topics`, `Microsoft.Eventhub.Namespaces`, `Microsoft.KeyVault.vaults`, `Microsoft.MachineLearningServices.Workspaces`, `Microsoft.Maps.Accounts`, `Microsoft.Media.MediaServices`, `Microsoft.Resources.ResourceGroups`, `Microsoft.Resources.Subscriptions`, `Microsoft.ServiceBus.Namespaces`, `Microsoft.SignalRService.SignalR`, `Microsoft.Storage.StorageAccounts`, `Microsoft.Web.ServerFarms` and `Microsoft.Web.Sites`. Changing this forces a new Event Grid System Topic to be created.
	TopicType pulumi.StringOutput `pulumi:"topicType"`
}

// NewSystemTopic registers a new resource with the given unique name, arguments, and options.
func NewSystemTopic(ctx *pulumi.Context,
	name string, args *SystemTopicArgs, opts ...pulumi.ResourceOption) (*SystemTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SourceArmResourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceArmResourceId'")
	}
	if args.TopicType == nil {
		return nil, errors.New("invalid value for required argument 'TopicType'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure:eventgrid/getSystemTopic:getSystemTopic"),
		},
	})
	opts = append(opts, aliases)
	var resource SystemTopic
	err := ctx.RegisterResource("azure:eventgrid/systemTopic:SystemTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemTopic gets an existing SystemTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemTopicState, opts ...pulumi.ResourceOption) (*SystemTopic, error) {
	var resource SystemTopic
	err := ctx.ReadResource("azure:eventgrid/systemTopic:SystemTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemTopic resources.
type systemTopicState struct {
	// The Azure Region where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	Location *string `pulumi:"location"`
	// The Metric ARM Resource ID of the Event Grid System Topic.
	MetricArmResourceId *string `pulumi:"metricArmResourceId"`
	// The name which should be used for this Event Grid System Topic. Changing this forces a new Event Grid System Topic to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The ID of the Event Grid System Topic ARM Source. Changing this forces a new Event Grid System Topic to be created.
	SourceArmResourceId *string `pulumi:"sourceArmResourceId"`
	// A mapping of tags which should be assigned to the Event Grid System Topic.
	Tags map[string]string `pulumi:"tags"`
	// The Topic Type of the Event Grid System Topic. Possible values are: `Microsoft.AppConfiguration.ConfigurationStores`, `Microsoft.Communication.CommunicationServices`
	// , `Microsoft.ContainerRegistry.Registries`, `Microsoft.Devices.IoTHubs`, `Microsoft.EventGrid.Domains`, `Microsoft.EventGrid.Topics`, `Microsoft.Eventhub.Namespaces`, `Microsoft.KeyVault.vaults`, `Microsoft.MachineLearningServices.Workspaces`, `Microsoft.Maps.Accounts`, `Microsoft.Media.MediaServices`, `Microsoft.Resources.ResourceGroups`, `Microsoft.Resources.Subscriptions`, `Microsoft.ServiceBus.Namespaces`, `Microsoft.SignalRService.SignalR`, `Microsoft.Storage.StorageAccounts`, `Microsoft.Web.ServerFarms` and `Microsoft.Web.Sites`. Changing this forces a new Event Grid System Topic to be created.
	TopicType *string `pulumi:"topicType"`
}

type SystemTopicState struct {
	// The Azure Region where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	Location pulumi.StringPtrInput
	// The Metric ARM Resource ID of the Event Grid System Topic.
	MetricArmResourceId pulumi.StringPtrInput
	// The name which should be used for this Event Grid System Topic. Changing this forces a new Event Grid System Topic to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The ID of the Event Grid System Topic ARM Source. Changing this forces a new Event Grid System Topic to be created.
	SourceArmResourceId pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Event Grid System Topic.
	Tags pulumi.StringMapInput
	// The Topic Type of the Event Grid System Topic. Possible values are: `Microsoft.AppConfiguration.ConfigurationStores`, `Microsoft.Communication.CommunicationServices`
	// , `Microsoft.ContainerRegistry.Registries`, `Microsoft.Devices.IoTHubs`, `Microsoft.EventGrid.Domains`, `Microsoft.EventGrid.Topics`, `Microsoft.Eventhub.Namespaces`, `Microsoft.KeyVault.vaults`, `Microsoft.MachineLearningServices.Workspaces`, `Microsoft.Maps.Accounts`, `Microsoft.Media.MediaServices`, `Microsoft.Resources.ResourceGroups`, `Microsoft.Resources.Subscriptions`, `Microsoft.ServiceBus.Namespaces`, `Microsoft.SignalRService.SignalR`, `Microsoft.Storage.StorageAccounts`, `Microsoft.Web.ServerFarms` and `Microsoft.Web.Sites`. Changing this forces a new Event Grid System Topic to be created.
	TopicType pulumi.StringPtrInput
}

func (SystemTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemTopicState)(nil)).Elem()
}

type systemTopicArgs struct {
	// The Azure Region where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Event Grid System Topic. Changing this forces a new Event Grid System Topic to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The ID of the Event Grid System Topic ARM Source. Changing this forces a new Event Grid System Topic to be created.
	SourceArmResourceId string `pulumi:"sourceArmResourceId"`
	// A mapping of tags which should be assigned to the Event Grid System Topic.
	Tags map[string]string `pulumi:"tags"`
	// The Topic Type of the Event Grid System Topic. Possible values are: `Microsoft.AppConfiguration.ConfigurationStores`, `Microsoft.Communication.CommunicationServices`
	// , `Microsoft.ContainerRegistry.Registries`, `Microsoft.Devices.IoTHubs`, `Microsoft.EventGrid.Domains`, `Microsoft.EventGrid.Topics`, `Microsoft.Eventhub.Namespaces`, `Microsoft.KeyVault.vaults`, `Microsoft.MachineLearningServices.Workspaces`, `Microsoft.Maps.Accounts`, `Microsoft.Media.MediaServices`, `Microsoft.Resources.ResourceGroups`, `Microsoft.Resources.Subscriptions`, `Microsoft.ServiceBus.Namespaces`, `Microsoft.SignalRService.SignalR`, `Microsoft.Storage.StorageAccounts`, `Microsoft.Web.ServerFarms` and `Microsoft.Web.Sites`. Changing this forces a new Event Grid System Topic to be created.
	TopicType string `pulumi:"topicType"`
}

// The set of arguments for constructing a SystemTopic resource.
type SystemTopicArgs struct {
	// The Azure Region where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Event Grid System Topic. Changing this forces a new Event Grid System Topic to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Event Grid System Topic should exist. Changing this forces a new Event Grid System Topic to be created.
	ResourceGroupName pulumi.StringInput
	// The ID of the Event Grid System Topic ARM Source. Changing this forces a new Event Grid System Topic to be created.
	SourceArmResourceId pulumi.StringInput
	// A mapping of tags which should be assigned to the Event Grid System Topic.
	Tags pulumi.StringMapInput
	// The Topic Type of the Event Grid System Topic. Possible values are: `Microsoft.AppConfiguration.ConfigurationStores`, `Microsoft.Communication.CommunicationServices`
	// , `Microsoft.ContainerRegistry.Registries`, `Microsoft.Devices.IoTHubs`, `Microsoft.EventGrid.Domains`, `Microsoft.EventGrid.Topics`, `Microsoft.Eventhub.Namespaces`, `Microsoft.KeyVault.vaults`, `Microsoft.MachineLearningServices.Workspaces`, `Microsoft.Maps.Accounts`, `Microsoft.Media.MediaServices`, `Microsoft.Resources.ResourceGroups`, `Microsoft.Resources.Subscriptions`, `Microsoft.ServiceBus.Namespaces`, `Microsoft.SignalRService.SignalR`, `Microsoft.Storage.StorageAccounts`, `Microsoft.Web.ServerFarms` and `Microsoft.Web.Sites`. Changing this forces a new Event Grid System Topic to be created.
	TopicType pulumi.StringInput
}

func (SystemTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemTopicArgs)(nil)).Elem()
}

type SystemTopicInput interface {
	pulumi.Input

	ToSystemTopicOutput() SystemTopicOutput
	ToSystemTopicOutputWithContext(ctx context.Context) SystemTopicOutput
}

func (*SystemTopic) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopic)(nil))
}

func (i *SystemTopic) ToSystemTopicOutput() SystemTopicOutput {
	return i.ToSystemTopicOutputWithContext(context.Background())
}

func (i *SystemTopic) ToSystemTopicOutputWithContext(ctx context.Context) SystemTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicOutput)
}

func (i *SystemTopic) ToSystemTopicPtrOutput() SystemTopicPtrOutput {
	return i.ToSystemTopicPtrOutputWithContext(context.Background())
}

func (i *SystemTopic) ToSystemTopicPtrOutputWithContext(ctx context.Context) SystemTopicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicPtrOutput)
}

type SystemTopicPtrInput interface {
	pulumi.Input

	ToSystemTopicPtrOutput() SystemTopicPtrOutput
	ToSystemTopicPtrOutputWithContext(ctx context.Context) SystemTopicPtrOutput
}

type systemTopicPtrType SystemTopicArgs

func (*systemTopicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopic)(nil))
}

func (i *systemTopicPtrType) ToSystemTopicPtrOutput() SystemTopicPtrOutput {
	return i.ToSystemTopicPtrOutputWithContext(context.Background())
}

func (i *systemTopicPtrType) ToSystemTopicPtrOutputWithContext(ctx context.Context) SystemTopicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicPtrOutput)
}

// SystemTopicArrayInput is an input type that accepts SystemTopicArray and SystemTopicArrayOutput values.
// You can construct a concrete instance of `SystemTopicArrayInput` via:
//
//          SystemTopicArray{ SystemTopicArgs{...} }
type SystemTopicArrayInput interface {
	pulumi.Input

	ToSystemTopicArrayOutput() SystemTopicArrayOutput
	ToSystemTopicArrayOutputWithContext(context.Context) SystemTopicArrayOutput
}

type SystemTopicArray []SystemTopicInput

func (SystemTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SystemTopic)(nil))
}

func (i SystemTopicArray) ToSystemTopicArrayOutput() SystemTopicArrayOutput {
	return i.ToSystemTopicArrayOutputWithContext(context.Background())
}

func (i SystemTopicArray) ToSystemTopicArrayOutputWithContext(ctx context.Context) SystemTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicArrayOutput)
}

// SystemTopicMapInput is an input type that accepts SystemTopicMap and SystemTopicMapOutput values.
// You can construct a concrete instance of `SystemTopicMapInput` via:
//
//          SystemTopicMap{ "key": SystemTopicArgs{...} }
type SystemTopicMapInput interface {
	pulumi.Input

	ToSystemTopicMapOutput() SystemTopicMapOutput
	ToSystemTopicMapOutputWithContext(context.Context) SystemTopicMapOutput
}

type SystemTopicMap map[string]SystemTopicInput

func (SystemTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SystemTopic)(nil))
}

func (i SystemTopicMap) ToSystemTopicMapOutput() SystemTopicMapOutput {
	return i.ToSystemTopicMapOutputWithContext(context.Background())
}

func (i SystemTopicMap) ToSystemTopicMapOutputWithContext(ctx context.Context) SystemTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicMapOutput)
}

type SystemTopicOutput struct {
	*pulumi.OutputState
}

func (SystemTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopic)(nil))
}

func (o SystemTopicOutput) ToSystemTopicOutput() SystemTopicOutput {
	return o
}

func (o SystemTopicOutput) ToSystemTopicOutputWithContext(ctx context.Context) SystemTopicOutput {
	return o
}

func (o SystemTopicOutput) ToSystemTopicPtrOutput() SystemTopicPtrOutput {
	return o.ToSystemTopicPtrOutputWithContext(context.Background())
}

func (o SystemTopicOutput) ToSystemTopicPtrOutputWithContext(ctx context.Context) SystemTopicPtrOutput {
	return o.ApplyT(func(v SystemTopic) *SystemTopic {
		return &v
	}).(SystemTopicPtrOutput)
}

type SystemTopicPtrOutput struct {
	*pulumi.OutputState
}

func (SystemTopicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopic)(nil))
}

func (o SystemTopicPtrOutput) ToSystemTopicPtrOutput() SystemTopicPtrOutput {
	return o
}

func (o SystemTopicPtrOutput) ToSystemTopicPtrOutputWithContext(ctx context.Context) SystemTopicPtrOutput {
	return o
}

type SystemTopicArrayOutput struct{ *pulumi.OutputState }

func (SystemTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopic)(nil))
}

func (o SystemTopicArrayOutput) ToSystemTopicArrayOutput() SystemTopicArrayOutput {
	return o
}

func (o SystemTopicArrayOutput) ToSystemTopicArrayOutputWithContext(ctx context.Context) SystemTopicArrayOutput {
	return o
}

func (o SystemTopicArrayOutput) Index(i pulumi.IntInput) SystemTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemTopic {
		return vs[0].([]SystemTopic)[vs[1].(int)]
	}).(SystemTopicOutput)
}

type SystemTopicMapOutput struct{ *pulumi.OutputState }

func (SystemTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SystemTopic)(nil))
}

func (o SystemTopicMapOutput) ToSystemTopicMapOutput() SystemTopicMapOutput {
	return o
}

func (o SystemTopicMapOutput) ToSystemTopicMapOutputWithContext(ctx context.Context) SystemTopicMapOutput {
	return o
}

func (o SystemTopicMapOutput) MapIndex(k pulumi.StringInput) SystemTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SystemTopic {
		return vs[0].(map[string]SystemTopic)[vs[1].(string)]
	}).(SystemTopicOutput)
}

func init() {
	pulumi.RegisterOutputType(SystemTopicOutput{})
	pulumi.RegisterOutputType(SystemTopicPtrOutput{})
	pulumi.RegisterOutputType(SystemTopicArrayOutput{})
	pulumi.RegisterOutputType(SystemTopicMapOutput{})
}
