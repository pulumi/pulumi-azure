// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventgrid

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing EventGrid Partner Registration
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/eventgrid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := eventgrid.LookupPartnerRegistration(ctx, &eventgrid.LookupPartnerRegistrationArgs{
//				Name:              "my-eventgrid-partner-registration",
//				ResourceGroupName: "example-resources",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("eventgridPartnerRegistrationId", example.PartnerRegistrationId)
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This data source uses the following Azure API Providers:
//
// * `Microsoft.EventGrid` - 2025-02-15
func LookupPartnerRegistration(ctx *pulumi.Context, args *LookupPartnerRegistrationArgs, opts ...pulumi.InvokeOption) (*LookupPartnerRegistrationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPartnerRegistrationResult
	err := ctx.Invoke("azure:eventgrid/getPartnerRegistration:getPartnerRegistration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPartnerRegistration.
type LookupPartnerRegistrationArgs struct {
	// The name of the EventGrid Partner Registration resource.
	Name string `pulumi:"name"`
	// The name of the resource group in which the EventGrid Partner Registration exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getPartnerRegistration.
type LookupPartnerRegistrationResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// The immutable id of the corresponding partner registration.
	PartnerRegistrationId string `pulumi:"partnerRegistrationId"`
	ResourceGroupName     string `pulumi:"resourceGroupName"`
	// A mapping of tags which are assigned to the EventGrid Partner Registration.
	Tags map[string]string `pulumi:"tags"`
}

func LookupPartnerRegistrationOutput(ctx *pulumi.Context, args LookupPartnerRegistrationOutputArgs, opts ...pulumi.InvokeOption) LookupPartnerRegistrationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPartnerRegistrationResultOutput, error) {
			args := v.(LookupPartnerRegistrationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure:eventgrid/getPartnerRegistration:getPartnerRegistration", args, LookupPartnerRegistrationResultOutput{}, options).(LookupPartnerRegistrationResultOutput), nil
		}).(LookupPartnerRegistrationResultOutput)
}

// A collection of arguments for invoking getPartnerRegistration.
type LookupPartnerRegistrationOutputArgs struct {
	// The name of the EventGrid Partner Registration resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which the EventGrid Partner Registration exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupPartnerRegistrationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPartnerRegistrationArgs)(nil)).Elem()
}

// A collection of values returned by getPartnerRegistration.
type LookupPartnerRegistrationResultOutput struct{ *pulumi.OutputState }

func (LookupPartnerRegistrationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPartnerRegistrationResult)(nil)).Elem()
}

func (o LookupPartnerRegistrationResultOutput) ToLookupPartnerRegistrationResultOutput() LookupPartnerRegistrationResultOutput {
	return o
}

func (o LookupPartnerRegistrationResultOutput) ToLookupPartnerRegistrationResultOutputWithContext(ctx context.Context) LookupPartnerRegistrationResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPartnerRegistrationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartnerRegistrationResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPartnerRegistrationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartnerRegistrationResult) string { return v.Name }).(pulumi.StringOutput)
}

// The immutable id of the corresponding partner registration.
func (o LookupPartnerRegistrationResultOutput) PartnerRegistrationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartnerRegistrationResult) string { return v.PartnerRegistrationId }).(pulumi.StringOutput)
}

func (o LookupPartnerRegistrationResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartnerRegistrationResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which are assigned to the EventGrid Partner Registration.
func (o LookupPartnerRegistrationResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupPartnerRegistrationResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPartnerRegistrationResultOutput{})
}
