// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventgrid

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an EventGrid Partner Registration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/eventgrid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventgrid.NewPartnerRegistration(ctx, "example", &eventgrid.PartnerRegistrationArgs{
//				Name:              pulumi.String("example-partner-registration"),
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.EventGrid` - 2022-06-15
//
// ## Import
//
// EventGrid Partner Registrations can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:eventgrid/partnerRegistration:PartnerRegistration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.EventGrid/partnerRegistrations/example
// ```
type PartnerRegistration struct {
	pulumi.CustomResourceState

	// The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The immutable id of the corresponding partner registration.
	PartnerRegistrationId pulumi.StringOutput `pulumi:"partnerRegistrationId"`
	// The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the EventGrid Partner Registration.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewPartnerRegistration registers a new resource with the given unique name, arguments, and options.
func NewPartnerRegistration(ctx *pulumi.Context,
	name string, args *PartnerRegistrationArgs, opts ...pulumi.ResourceOption) (*PartnerRegistration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PartnerRegistration
	err := ctx.RegisterResource("azure:eventgrid/partnerRegistration:PartnerRegistration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartnerRegistration gets an existing PartnerRegistration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartnerRegistration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartnerRegistrationState, opts ...pulumi.ResourceOption) (*PartnerRegistration, error) {
	var resource PartnerRegistration
	err := ctx.ReadResource("azure:eventgrid/partnerRegistration:PartnerRegistration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PartnerRegistration resources.
type partnerRegistrationState struct {
	// The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
	Name *string `pulumi:"name"`
	// The immutable id of the corresponding partner registration.
	PartnerRegistrationId *string `pulumi:"partnerRegistrationId"`
	// The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the EventGrid Partner Registration.
	Tags map[string]string `pulumi:"tags"`
}

type PartnerRegistrationState struct {
	// The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
	Name pulumi.StringPtrInput
	// The immutable id of the corresponding partner registration.
	PartnerRegistrationId pulumi.StringPtrInput
	// The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the EventGrid Partner Registration.
	Tags pulumi.StringMapInput
}

func (PartnerRegistrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*partnerRegistrationState)(nil)).Elem()
}

type partnerRegistrationArgs struct {
	// The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the EventGrid Partner Registration.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a PartnerRegistration resource.
type PartnerRegistrationArgs struct {
	// The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the EventGrid Partner Registration.
	Tags pulumi.StringMapInput
}

func (PartnerRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partnerRegistrationArgs)(nil)).Elem()
}

type PartnerRegistrationInput interface {
	pulumi.Input

	ToPartnerRegistrationOutput() PartnerRegistrationOutput
	ToPartnerRegistrationOutputWithContext(ctx context.Context) PartnerRegistrationOutput
}

func (*PartnerRegistration) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerRegistration)(nil)).Elem()
}

func (i *PartnerRegistration) ToPartnerRegistrationOutput() PartnerRegistrationOutput {
	return i.ToPartnerRegistrationOutputWithContext(context.Background())
}

func (i *PartnerRegistration) ToPartnerRegistrationOutputWithContext(ctx context.Context) PartnerRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerRegistrationOutput)
}

// PartnerRegistrationArrayInput is an input type that accepts PartnerRegistrationArray and PartnerRegistrationArrayOutput values.
// You can construct a concrete instance of `PartnerRegistrationArrayInput` via:
//
//	PartnerRegistrationArray{ PartnerRegistrationArgs{...} }
type PartnerRegistrationArrayInput interface {
	pulumi.Input

	ToPartnerRegistrationArrayOutput() PartnerRegistrationArrayOutput
	ToPartnerRegistrationArrayOutputWithContext(context.Context) PartnerRegistrationArrayOutput
}

type PartnerRegistrationArray []PartnerRegistrationInput

func (PartnerRegistrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartnerRegistration)(nil)).Elem()
}

func (i PartnerRegistrationArray) ToPartnerRegistrationArrayOutput() PartnerRegistrationArrayOutput {
	return i.ToPartnerRegistrationArrayOutputWithContext(context.Background())
}

func (i PartnerRegistrationArray) ToPartnerRegistrationArrayOutputWithContext(ctx context.Context) PartnerRegistrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerRegistrationArrayOutput)
}

// PartnerRegistrationMapInput is an input type that accepts PartnerRegistrationMap and PartnerRegistrationMapOutput values.
// You can construct a concrete instance of `PartnerRegistrationMapInput` via:
//
//	PartnerRegistrationMap{ "key": PartnerRegistrationArgs{...} }
type PartnerRegistrationMapInput interface {
	pulumi.Input

	ToPartnerRegistrationMapOutput() PartnerRegistrationMapOutput
	ToPartnerRegistrationMapOutputWithContext(context.Context) PartnerRegistrationMapOutput
}

type PartnerRegistrationMap map[string]PartnerRegistrationInput

func (PartnerRegistrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartnerRegistration)(nil)).Elem()
}

func (i PartnerRegistrationMap) ToPartnerRegistrationMapOutput() PartnerRegistrationMapOutput {
	return i.ToPartnerRegistrationMapOutputWithContext(context.Background())
}

func (i PartnerRegistrationMap) ToPartnerRegistrationMapOutputWithContext(ctx context.Context) PartnerRegistrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerRegistrationMapOutput)
}

type PartnerRegistrationOutput struct{ *pulumi.OutputState }

func (PartnerRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerRegistration)(nil)).Elem()
}

func (o PartnerRegistrationOutput) ToPartnerRegistrationOutput() PartnerRegistrationOutput {
	return o
}

func (o PartnerRegistrationOutput) ToPartnerRegistrationOutputWithContext(ctx context.Context) PartnerRegistrationOutput {
	return o
}

// The name which should be used for this EventGrid Partner Registration. Changing this forces a new EventGrid Partner Registration to be created.
func (o PartnerRegistrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerRegistration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The immutable id of the corresponding partner registration.
func (o PartnerRegistrationOutput) PartnerRegistrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerRegistration) pulumi.StringOutput { return v.PartnerRegistrationId }).(pulumi.StringOutput)
}

// The name of the Resource Group where the EventGrid Partner Registration should exist. Changing this forces a new EventGrid Partner Registration to be created.
func (o PartnerRegistrationOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerRegistration) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the EventGrid Partner Registration.
func (o PartnerRegistrationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PartnerRegistration) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type PartnerRegistrationArrayOutput struct{ *pulumi.OutputState }

func (PartnerRegistrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartnerRegistration)(nil)).Elem()
}

func (o PartnerRegistrationArrayOutput) ToPartnerRegistrationArrayOutput() PartnerRegistrationArrayOutput {
	return o
}

func (o PartnerRegistrationArrayOutput) ToPartnerRegistrationArrayOutputWithContext(ctx context.Context) PartnerRegistrationArrayOutput {
	return o
}

func (o PartnerRegistrationArrayOutput) Index(i pulumi.IntInput) PartnerRegistrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PartnerRegistration {
		return vs[0].([]*PartnerRegistration)[vs[1].(int)]
	}).(PartnerRegistrationOutput)
}

type PartnerRegistrationMapOutput struct{ *pulumi.OutputState }

func (PartnerRegistrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartnerRegistration)(nil)).Elem()
}

func (o PartnerRegistrationMapOutput) ToPartnerRegistrationMapOutput() PartnerRegistrationMapOutput {
	return o
}

func (o PartnerRegistrationMapOutput) ToPartnerRegistrationMapOutputWithContext(ctx context.Context) PartnerRegistrationMapOutput {
	return o
}

func (o PartnerRegistrationMapOutput) MapIndex(k pulumi.StringInput) PartnerRegistrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PartnerRegistration {
		return vs[0].(map[string]*PartnerRegistration)[vs[1].(string)]
	}).(PartnerRegistrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerRegistrationInput)(nil)).Elem(), &PartnerRegistration{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerRegistrationArrayInput)(nil)).Elem(), PartnerRegistrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerRegistrationMapInput)(nil)).Elem(), PartnerRegistrationMap{})
	pulumi.RegisterOutputType(PartnerRegistrationOutput{})
	pulumi.RegisterOutputType(PartnerRegistrationArrayOutput{})
	pulumi.RegisterOutputType(PartnerRegistrationMapOutput{})
}
