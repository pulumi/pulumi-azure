// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventgrid

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Event Grid Partner Configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/eventgrid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventgrid.NewPartnerConfiguration(ctx, "example", &eventgrid.PartnerConfigurationArgs{
//				ResourceGroupName:                  example.Name,
//				DefaultMaximumExpirationTimeInDays: pulumi.Int(14),
//				PartnerAuthorizations: eventgrid.PartnerConfigurationPartnerAuthorizationArray{
//					&eventgrid.PartnerConfigurationPartnerAuthorizationArgs{
//						PartnerRegistrationId:            pulumi.String("804a11ca-ce9b-4158-8e94-3c8dc7a072ec"),
//						PartnerName:                      pulumi.String("Auth0"),
//						AuthorizationExpirationTimeInUtc: pulumi.String("2025-02-05T00:00:00Z"),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.EventGrid` - 2025-02-15
//
// ## Import
//
// Event Grid Partner Configurations can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:eventgrid/partnerConfiguration:PartnerConfiguration example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1
// ```
type PartnerConfiguration struct {
	pulumi.CustomResourceState

	// Time used to validate the authorization expiration time for each authorized partner. Defaults to `7`.
	DefaultMaximumExpirationTimeInDays pulumi.IntPtrOutput `pulumi:"defaultMaximumExpirationTimeInDays"`
	// One or more `partnerAuthorization` blocks as defined below.
	PartnerAuthorizations PartnerConfigurationPartnerAuthorizationArrayOutput `pulumi:"partnerAuthorizations"`
	// The name of the Resource Group where the Event Grid Partner Configuration should exist. Changing this forces a new Event Grid Partner Configuration to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Event Grid Partner Configuration.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewPartnerConfiguration registers a new resource with the given unique name, arguments, and options.
func NewPartnerConfiguration(ctx *pulumi.Context,
	name string, args *PartnerConfigurationArgs, opts ...pulumi.ResourceOption) (*PartnerConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PartnerConfiguration
	err := ctx.RegisterResource("azure:eventgrid/partnerConfiguration:PartnerConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartnerConfiguration gets an existing PartnerConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartnerConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartnerConfigurationState, opts ...pulumi.ResourceOption) (*PartnerConfiguration, error) {
	var resource PartnerConfiguration
	err := ctx.ReadResource("azure:eventgrid/partnerConfiguration:PartnerConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PartnerConfiguration resources.
type partnerConfigurationState struct {
	// Time used to validate the authorization expiration time for each authorized partner. Defaults to `7`.
	DefaultMaximumExpirationTimeInDays *int `pulumi:"defaultMaximumExpirationTimeInDays"`
	// One or more `partnerAuthorization` blocks as defined below.
	PartnerAuthorizations []PartnerConfigurationPartnerAuthorization `pulumi:"partnerAuthorizations"`
	// The name of the Resource Group where the Event Grid Partner Configuration should exist. Changing this forces a new Event Grid Partner Configuration to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Event Grid Partner Configuration.
	Tags map[string]string `pulumi:"tags"`
}

type PartnerConfigurationState struct {
	// Time used to validate the authorization expiration time for each authorized partner. Defaults to `7`.
	DefaultMaximumExpirationTimeInDays pulumi.IntPtrInput
	// One or more `partnerAuthorization` blocks as defined below.
	PartnerAuthorizations PartnerConfigurationPartnerAuthorizationArrayInput
	// The name of the Resource Group where the Event Grid Partner Configuration should exist. Changing this forces a new Event Grid Partner Configuration to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Event Grid Partner Configuration.
	Tags pulumi.StringMapInput
}

func (PartnerConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*partnerConfigurationState)(nil)).Elem()
}

type partnerConfigurationArgs struct {
	// Time used to validate the authorization expiration time for each authorized partner. Defaults to `7`.
	DefaultMaximumExpirationTimeInDays *int `pulumi:"defaultMaximumExpirationTimeInDays"`
	// One or more `partnerAuthorization` blocks as defined below.
	PartnerAuthorizations []PartnerConfigurationPartnerAuthorization `pulumi:"partnerAuthorizations"`
	// The name of the Resource Group where the Event Grid Partner Configuration should exist. Changing this forces a new Event Grid Partner Configuration to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Event Grid Partner Configuration.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a PartnerConfiguration resource.
type PartnerConfigurationArgs struct {
	// Time used to validate the authorization expiration time for each authorized partner. Defaults to `7`.
	DefaultMaximumExpirationTimeInDays pulumi.IntPtrInput
	// One or more `partnerAuthorization` blocks as defined below.
	PartnerAuthorizations PartnerConfigurationPartnerAuthorizationArrayInput
	// The name of the Resource Group where the Event Grid Partner Configuration should exist. Changing this forces a new Event Grid Partner Configuration to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Event Grid Partner Configuration.
	Tags pulumi.StringMapInput
}

func (PartnerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partnerConfigurationArgs)(nil)).Elem()
}

type PartnerConfigurationInput interface {
	pulumi.Input

	ToPartnerConfigurationOutput() PartnerConfigurationOutput
	ToPartnerConfigurationOutputWithContext(ctx context.Context) PartnerConfigurationOutput
}

func (*PartnerConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerConfiguration)(nil)).Elem()
}

func (i *PartnerConfiguration) ToPartnerConfigurationOutput() PartnerConfigurationOutput {
	return i.ToPartnerConfigurationOutputWithContext(context.Background())
}

func (i *PartnerConfiguration) ToPartnerConfigurationOutputWithContext(ctx context.Context) PartnerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerConfigurationOutput)
}

// PartnerConfigurationArrayInput is an input type that accepts PartnerConfigurationArray and PartnerConfigurationArrayOutput values.
// You can construct a concrete instance of `PartnerConfigurationArrayInput` via:
//
//	PartnerConfigurationArray{ PartnerConfigurationArgs{...} }
type PartnerConfigurationArrayInput interface {
	pulumi.Input

	ToPartnerConfigurationArrayOutput() PartnerConfigurationArrayOutput
	ToPartnerConfigurationArrayOutputWithContext(context.Context) PartnerConfigurationArrayOutput
}

type PartnerConfigurationArray []PartnerConfigurationInput

func (PartnerConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartnerConfiguration)(nil)).Elem()
}

func (i PartnerConfigurationArray) ToPartnerConfigurationArrayOutput() PartnerConfigurationArrayOutput {
	return i.ToPartnerConfigurationArrayOutputWithContext(context.Background())
}

func (i PartnerConfigurationArray) ToPartnerConfigurationArrayOutputWithContext(ctx context.Context) PartnerConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerConfigurationArrayOutput)
}

// PartnerConfigurationMapInput is an input type that accepts PartnerConfigurationMap and PartnerConfigurationMapOutput values.
// You can construct a concrete instance of `PartnerConfigurationMapInput` via:
//
//	PartnerConfigurationMap{ "key": PartnerConfigurationArgs{...} }
type PartnerConfigurationMapInput interface {
	pulumi.Input

	ToPartnerConfigurationMapOutput() PartnerConfigurationMapOutput
	ToPartnerConfigurationMapOutputWithContext(context.Context) PartnerConfigurationMapOutput
}

type PartnerConfigurationMap map[string]PartnerConfigurationInput

func (PartnerConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartnerConfiguration)(nil)).Elem()
}

func (i PartnerConfigurationMap) ToPartnerConfigurationMapOutput() PartnerConfigurationMapOutput {
	return i.ToPartnerConfigurationMapOutputWithContext(context.Background())
}

func (i PartnerConfigurationMap) ToPartnerConfigurationMapOutputWithContext(ctx context.Context) PartnerConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerConfigurationMapOutput)
}

type PartnerConfigurationOutput struct{ *pulumi.OutputState }

func (PartnerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerConfiguration)(nil)).Elem()
}

func (o PartnerConfigurationOutput) ToPartnerConfigurationOutput() PartnerConfigurationOutput {
	return o
}

func (o PartnerConfigurationOutput) ToPartnerConfigurationOutputWithContext(ctx context.Context) PartnerConfigurationOutput {
	return o
}

// Time used to validate the authorization expiration time for each authorized partner. Defaults to `7`.
func (o PartnerConfigurationOutput) DefaultMaximumExpirationTimeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PartnerConfiguration) pulumi.IntPtrOutput { return v.DefaultMaximumExpirationTimeInDays }).(pulumi.IntPtrOutput)
}

// One or more `partnerAuthorization` blocks as defined below.
func (o PartnerConfigurationOutput) PartnerAuthorizations() PartnerConfigurationPartnerAuthorizationArrayOutput {
	return o.ApplyT(func(v *PartnerConfiguration) PartnerConfigurationPartnerAuthorizationArrayOutput {
		return v.PartnerAuthorizations
	}).(PartnerConfigurationPartnerAuthorizationArrayOutput)
}

// The name of the Resource Group where the Event Grid Partner Configuration should exist. Changing this forces a new Event Grid Partner Configuration to be created.
func (o PartnerConfigurationOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerConfiguration) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Event Grid Partner Configuration.
func (o PartnerConfigurationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PartnerConfiguration) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type PartnerConfigurationArrayOutput struct{ *pulumi.OutputState }

func (PartnerConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartnerConfiguration)(nil)).Elem()
}

func (o PartnerConfigurationArrayOutput) ToPartnerConfigurationArrayOutput() PartnerConfigurationArrayOutput {
	return o
}

func (o PartnerConfigurationArrayOutput) ToPartnerConfigurationArrayOutputWithContext(ctx context.Context) PartnerConfigurationArrayOutput {
	return o
}

func (o PartnerConfigurationArrayOutput) Index(i pulumi.IntInput) PartnerConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PartnerConfiguration {
		return vs[0].([]*PartnerConfiguration)[vs[1].(int)]
	}).(PartnerConfigurationOutput)
}

type PartnerConfigurationMapOutput struct{ *pulumi.OutputState }

func (PartnerConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartnerConfiguration)(nil)).Elem()
}

func (o PartnerConfigurationMapOutput) ToPartnerConfigurationMapOutput() PartnerConfigurationMapOutput {
	return o
}

func (o PartnerConfigurationMapOutput) ToPartnerConfigurationMapOutputWithContext(ctx context.Context) PartnerConfigurationMapOutput {
	return o
}

func (o PartnerConfigurationMapOutput) MapIndex(k pulumi.StringInput) PartnerConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PartnerConfiguration {
		return vs[0].(map[string]*PartnerConfiguration)[vs[1].(string)]
	}).(PartnerConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerConfigurationInput)(nil)).Elem(), &PartnerConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerConfigurationArrayInput)(nil)).Elem(), PartnerConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerConfigurationMapInput)(nil)).Elem(), PartnerConfigurationMap{})
	pulumi.RegisterOutputType(PartnerConfigurationOutput{})
	pulumi.RegisterOutputType(PartnerConfigurationArrayOutput{})
	pulumi.RegisterOutputType(PartnerConfigurationMapOutput{})
}
