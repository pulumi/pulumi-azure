// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventgrid

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Event Grid Partner Namespace.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/eventgrid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePartnerRegistration, err := eventgrid.NewPartnerRegistration(ctx, "example", &eventgrid.PartnerRegistrationArgs{
//				Name:              pulumi.String("example-partner-registration"),
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eventgrid.NewPartnerNamespace(ctx, "example", &eventgrid.PartnerNamespaceArgs{
//				Name:                  pulumi.String("example-partner-namespace"),
//				Location:              example.Location,
//				ResourceGroupName:     example.Name,
//				PartnerRegistrationId: examplePartnerRegistration.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.EventGrid` - 2025-02-15
//
// ## Import
//
// Event Grid Partner Namespaces can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:eventgrid/partnerNamespace:PartnerNamespace example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.EventGrid/partnerNamespaces/example
// ```
type PartnerNamespace struct {
	pulumi.CustomResourceState

	// The endpoint for the Event Grid Partner Namespace.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// One or more `inboundIpRule` blocks as defined below.
	InboundIpRules PartnerNamespaceInboundIpRuleArrayOutput `pulumi:"inboundIpRules"`
	// Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
	LocalAuthenticationEnabled pulumi.BoolPtrOutput `pulumi:"localAuthenticationEnabled"`
	// Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
	PartnerRegistrationId pulumi.StringOutput `pulumi:"partnerRegistrationId"`
	// The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
	PartnerTopicRoutingMode pulumi.StringPtrOutput `pulumi:"partnerTopicRoutingMode"`
	// Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
	PublicNetworkAccess pulumi.StringPtrOutput `pulumi:"publicNetworkAccess"`
	// The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Event Grid Partner Namespace.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewPartnerNamespace registers a new resource with the given unique name, arguments, and options.
func NewPartnerNamespace(ctx *pulumi.Context,
	name string, args *PartnerNamespaceArgs, opts ...pulumi.ResourceOption) (*PartnerNamespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PartnerRegistrationId == nil {
		return nil, errors.New("invalid value for required argument 'PartnerRegistrationId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PartnerNamespace
	err := ctx.RegisterResource("azure:eventgrid/partnerNamespace:PartnerNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartnerNamespace gets an existing PartnerNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartnerNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartnerNamespaceState, opts ...pulumi.ResourceOption) (*PartnerNamespace, error) {
	var resource PartnerNamespace
	err := ctx.ReadResource("azure:eventgrid/partnerNamespace:PartnerNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PartnerNamespace resources.
type partnerNamespaceState struct {
	// The endpoint for the Event Grid Partner Namespace.
	Endpoint *string `pulumi:"endpoint"`
	// One or more `inboundIpRule` blocks as defined below.
	InboundIpRules []PartnerNamespaceInboundIpRule `pulumi:"inboundIpRules"`
	// Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
	LocalAuthenticationEnabled *bool `pulumi:"localAuthenticationEnabled"`
	// Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
	Name *string `pulumi:"name"`
	// The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
	PartnerRegistrationId *string `pulumi:"partnerRegistrationId"`
	// The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
	PartnerTopicRoutingMode *string `pulumi:"partnerTopicRoutingMode"`
	// Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Event Grid Partner Namespace.
	Tags map[string]string `pulumi:"tags"`
}

type PartnerNamespaceState struct {
	// The endpoint for the Event Grid Partner Namespace.
	Endpoint pulumi.StringPtrInput
	// One or more `inboundIpRule` blocks as defined below.
	InboundIpRules PartnerNamespaceInboundIpRuleArrayInput
	// Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
	LocalAuthenticationEnabled pulumi.BoolPtrInput
	// Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
	Name pulumi.StringPtrInput
	// The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
	PartnerRegistrationId pulumi.StringPtrInput
	// The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
	PartnerTopicRoutingMode pulumi.StringPtrInput
	// Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
	PublicNetworkAccess pulumi.StringPtrInput
	// The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Event Grid Partner Namespace.
	Tags pulumi.StringMapInput
}

func (PartnerNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*partnerNamespaceState)(nil)).Elem()
}

type partnerNamespaceArgs struct {
	// One or more `inboundIpRule` blocks as defined below.
	InboundIpRules []PartnerNamespaceInboundIpRule `pulumi:"inboundIpRules"`
	// Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
	LocalAuthenticationEnabled *bool `pulumi:"localAuthenticationEnabled"`
	// Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
	Name *string `pulumi:"name"`
	// The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
	PartnerRegistrationId string `pulumi:"partnerRegistrationId"`
	// The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
	PartnerTopicRoutingMode *string `pulumi:"partnerTopicRoutingMode"`
	// Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Event Grid Partner Namespace.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a PartnerNamespace resource.
type PartnerNamespaceArgs struct {
	// One or more `inboundIpRule` blocks as defined below.
	InboundIpRules PartnerNamespaceInboundIpRuleArrayInput
	// Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
	LocalAuthenticationEnabled pulumi.BoolPtrInput
	// Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
	Name pulumi.StringPtrInput
	// The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
	PartnerRegistrationId pulumi.StringInput
	// The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
	PartnerTopicRoutingMode pulumi.StringPtrInput
	// Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
	PublicNetworkAccess pulumi.StringPtrInput
	// The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Event Grid Partner Namespace.
	Tags pulumi.StringMapInput
}

func (PartnerNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partnerNamespaceArgs)(nil)).Elem()
}

type PartnerNamespaceInput interface {
	pulumi.Input

	ToPartnerNamespaceOutput() PartnerNamespaceOutput
	ToPartnerNamespaceOutputWithContext(ctx context.Context) PartnerNamespaceOutput
}

func (*PartnerNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerNamespace)(nil)).Elem()
}

func (i *PartnerNamespace) ToPartnerNamespaceOutput() PartnerNamespaceOutput {
	return i.ToPartnerNamespaceOutputWithContext(context.Background())
}

func (i *PartnerNamespace) ToPartnerNamespaceOutputWithContext(ctx context.Context) PartnerNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerNamespaceOutput)
}

// PartnerNamespaceArrayInput is an input type that accepts PartnerNamespaceArray and PartnerNamespaceArrayOutput values.
// You can construct a concrete instance of `PartnerNamespaceArrayInput` via:
//
//	PartnerNamespaceArray{ PartnerNamespaceArgs{...} }
type PartnerNamespaceArrayInput interface {
	pulumi.Input

	ToPartnerNamespaceArrayOutput() PartnerNamespaceArrayOutput
	ToPartnerNamespaceArrayOutputWithContext(context.Context) PartnerNamespaceArrayOutput
}

type PartnerNamespaceArray []PartnerNamespaceInput

func (PartnerNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartnerNamespace)(nil)).Elem()
}

func (i PartnerNamespaceArray) ToPartnerNamespaceArrayOutput() PartnerNamespaceArrayOutput {
	return i.ToPartnerNamespaceArrayOutputWithContext(context.Background())
}

func (i PartnerNamespaceArray) ToPartnerNamespaceArrayOutputWithContext(ctx context.Context) PartnerNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerNamespaceArrayOutput)
}

// PartnerNamespaceMapInput is an input type that accepts PartnerNamespaceMap and PartnerNamespaceMapOutput values.
// You can construct a concrete instance of `PartnerNamespaceMapInput` via:
//
//	PartnerNamespaceMap{ "key": PartnerNamespaceArgs{...} }
type PartnerNamespaceMapInput interface {
	pulumi.Input

	ToPartnerNamespaceMapOutput() PartnerNamespaceMapOutput
	ToPartnerNamespaceMapOutputWithContext(context.Context) PartnerNamespaceMapOutput
}

type PartnerNamespaceMap map[string]PartnerNamespaceInput

func (PartnerNamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartnerNamespace)(nil)).Elem()
}

func (i PartnerNamespaceMap) ToPartnerNamespaceMapOutput() PartnerNamespaceMapOutput {
	return i.ToPartnerNamespaceMapOutputWithContext(context.Background())
}

func (i PartnerNamespaceMap) ToPartnerNamespaceMapOutputWithContext(ctx context.Context) PartnerNamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerNamespaceMapOutput)
}

type PartnerNamespaceOutput struct{ *pulumi.OutputState }

func (PartnerNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerNamespace)(nil)).Elem()
}

func (o PartnerNamespaceOutput) ToPartnerNamespaceOutput() PartnerNamespaceOutput {
	return o
}

func (o PartnerNamespaceOutput) ToPartnerNamespaceOutputWithContext(ctx context.Context) PartnerNamespaceOutput {
	return o
}

// The endpoint for the Event Grid Partner Namespace.
func (o PartnerNamespaceOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerNamespace) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// One or more `inboundIpRule` blocks as defined below.
func (o PartnerNamespaceOutput) InboundIpRules() PartnerNamespaceInboundIpRuleArrayOutput {
	return o.ApplyT(func(v *PartnerNamespace) PartnerNamespaceInboundIpRuleArrayOutput { return v.InboundIpRules }).(PartnerNamespaceInboundIpRuleArrayOutput)
}

// Whether local authentication methods are enabled for the Event Grid Partner Namespace. Defaults to `true`.
func (o PartnerNamespaceOutput) LocalAuthenticationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PartnerNamespace) pulumi.BoolPtrOutput { return v.LocalAuthenticationEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the Azure Region where the Event Grid Partner Namespace exists. Changing this forces a new resource to be created.
func (o PartnerNamespaceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerNamespace) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Event Grid Partner Namespace. Changing this forces a new Event Grid Partner Namespace to be created.
func (o PartnerNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerNamespace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource Id of the Event Grid Partner Registration that this namespace is associated with. Changing this forces a new Event Grid Partner Namespace to be created.
func (o PartnerNamespaceOutput) PartnerRegistrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerNamespace) pulumi.StringOutput { return v.PartnerRegistrationId }).(pulumi.StringOutput)
}

// The partner topic routing mode. Possible values are `ChannelNameHeader` and `SourceEventAttribute`. Defaults to `ChannelNameHeader`. Changing this forces a new Event Grid Partner Namespace to be created.
func (o PartnerNamespaceOutput) PartnerTopicRoutingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerNamespace) pulumi.StringPtrOutput { return v.PartnerTopicRoutingMode }).(pulumi.StringPtrOutput)
}

// Whether or not public network access is allowed for this server. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled`.
func (o PartnerNamespaceOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PartnerNamespace) pulumi.StringPtrOutput { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// The name of the Resource Group where the Event Grid Partner Namespace should exist. Changing this forces a new Event Grid Partner Namespace to be created.
func (o PartnerNamespaceOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerNamespace) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Event Grid Partner Namespace.
func (o PartnerNamespaceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PartnerNamespace) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type PartnerNamespaceArrayOutput struct{ *pulumi.OutputState }

func (PartnerNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartnerNamespace)(nil)).Elem()
}

func (o PartnerNamespaceArrayOutput) ToPartnerNamespaceArrayOutput() PartnerNamespaceArrayOutput {
	return o
}

func (o PartnerNamespaceArrayOutput) ToPartnerNamespaceArrayOutputWithContext(ctx context.Context) PartnerNamespaceArrayOutput {
	return o
}

func (o PartnerNamespaceArrayOutput) Index(i pulumi.IntInput) PartnerNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PartnerNamespace {
		return vs[0].([]*PartnerNamespace)[vs[1].(int)]
	}).(PartnerNamespaceOutput)
}

type PartnerNamespaceMapOutput struct{ *pulumi.OutputState }

func (PartnerNamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartnerNamespace)(nil)).Elem()
}

func (o PartnerNamespaceMapOutput) ToPartnerNamespaceMapOutput() PartnerNamespaceMapOutput {
	return o
}

func (o PartnerNamespaceMapOutput) ToPartnerNamespaceMapOutputWithContext(ctx context.Context) PartnerNamespaceMapOutput {
	return o
}

func (o PartnerNamespaceMapOutput) MapIndex(k pulumi.StringInput) PartnerNamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PartnerNamespace {
		return vs[0].(map[string]*PartnerNamespace)[vs[1].(string)]
	}).(PartnerNamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerNamespaceInput)(nil)).Elem(), &PartnerNamespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerNamespaceArrayInput)(nil)).Elem(), PartnerNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerNamespaceMapInput)(nil)).Elem(), PartnerNamespaceMap{})
	pulumi.RegisterOutputType(PartnerNamespaceOutput{})
	pulumi.RegisterOutputType(PartnerNamespaceArrayOutput{})
	pulumi.RegisterOutputType(PartnerNamespaceMapOutput{})
}
