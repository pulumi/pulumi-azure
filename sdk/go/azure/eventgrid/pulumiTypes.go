// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eventgrid

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DomainInboundIpRule struct {
	// The action to take when the rule is matched. Possible values are `Allow`.
	Action *string `pulumi:"action"`
	// The ip mask (CIDR) to match on.
	IpMask string `pulumi:"ipMask"`
}

// DomainInboundIpRuleInput is an input type that accepts DomainInboundIpRuleArgs and DomainInboundIpRuleOutput values.
// You can construct a concrete instance of `DomainInboundIpRuleInput` via:
//
//          DomainInboundIpRuleArgs{...}
type DomainInboundIpRuleInput interface {
	pulumi.Input

	ToDomainInboundIpRuleOutput() DomainInboundIpRuleOutput
	ToDomainInboundIpRuleOutputWithContext(context.Context) DomainInboundIpRuleOutput
}

type DomainInboundIpRuleArgs struct {
	// The action to take when the rule is matched. Possible values are `Allow`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// The ip mask (CIDR) to match on.
	IpMask pulumi.StringInput `pulumi:"ipMask"`
}

func (DomainInboundIpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInboundIpRule)(nil)).Elem()
}

func (i DomainInboundIpRuleArgs) ToDomainInboundIpRuleOutput() DomainInboundIpRuleOutput {
	return i.ToDomainInboundIpRuleOutputWithContext(context.Background())
}

func (i DomainInboundIpRuleArgs) ToDomainInboundIpRuleOutputWithContext(ctx context.Context) DomainInboundIpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInboundIpRuleOutput)
}

// DomainInboundIpRuleArrayInput is an input type that accepts DomainInboundIpRuleArray and DomainInboundIpRuleArrayOutput values.
// You can construct a concrete instance of `DomainInboundIpRuleArrayInput` via:
//
//          DomainInboundIpRuleArray{ DomainInboundIpRuleArgs{...} }
type DomainInboundIpRuleArrayInput interface {
	pulumi.Input

	ToDomainInboundIpRuleArrayOutput() DomainInboundIpRuleArrayOutput
	ToDomainInboundIpRuleArrayOutputWithContext(context.Context) DomainInboundIpRuleArrayOutput
}

type DomainInboundIpRuleArray []DomainInboundIpRuleInput

func (DomainInboundIpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainInboundIpRule)(nil)).Elem()
}

func (i DomainInboundIpRuleArray) ToDomainInboundIpRuleArrayOutput() DomainInboundIpRuleArrayOutput {
	return i.ToDomainInboundIpRuleArrayOutputWithContext(context.Background())
}

func (i DomainInboundIpRuleArray) ToDomainInboundIpRuleArrayOutputWithContext(ctx context.Context) DomainInboundIpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInboundIpRuleArrayOutput)
}

type DomainInboundIpRuleOutput struct{ *pulumi.OutputState }

func (DomainInboundIpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInboundIpRule)(nil)).Elem()
}

func (o DomainInboundIpRuleOutput) ToDomainInboundIpRuleOutput() DomainInboundIpRuleOutput {
	return o
}

func (o DomainInboundIpRuleOutput) ToDomainInboundIpRuleOutputWithContext(ctx context.Context) DomainInboundIpRuleOutput {
	return o
}

// The action to take when the rule is matched. Possible values are `Allow`.
func (o DomainInboundIpRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInboundIpRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The ip mask (CIDR) to match on.
func (o DomainInboundIpRuleOutput) IpMask() pulumi.StringOutput {
	return o.ApplyT(func(v DomainInboundIpRule) string { return v.IpMask }).(pulumi.StringOutput)
}

type DomainInboundIpRuleArrayOutput struct{ *pulumi.OutputState }

func (DomainInboundIpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DomainInboundIpRule)(nil)).Elem()
}

func (o DomainInboundIpRuleArrayOutput) ToDomainInboundIpRuleArrayOutput() DomainInboundIpRuleArrayOutput {
	return o
}

func (o DomainInboundIpRuleArrayOutput) ToDomainInboundIpRuleArrayOutputWithContext(ctx context.Context) DomainInboundIpRuleArrayOutput {
	return o
}

func (o DomainInboundIpRuleArrayOutput) Index(i pulumi.IntInput) DomainInboundIpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DomainInboundIpRule {
		return vs[0].([]DomainInboundIpRule)[vs[1].(int)]
	}).(DomainInboundIpRuleOutput)
}

type DomainInputMappingDefaultValues struct {
	// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion *string `pulumi:"dataVersion"`
	// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType *string `pulumi:"eventType"`
	// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject *string `pulumi:"subject"`
}

// DomainInputMappingDefaultValuesInput is an input type that accepts DomainInputMappingDefaultValuesArgs and DomainInputMappingDefaultValuesOutput values.
// You can construct a concrete instance of `DomainInputMappingDefaultValuesInput` via:
//
//          DomainInputMappingDefaultValuesArgs{...}
type DomainInputMappingDefaultValuesInput interface {
	pulumi.Input

	ToDomainInputMappingDefaultValuesOutput() DomainInputMappingDefaultValuesOutput
	ToDomainInputMappingDefaultValuesOutputWithContext(context.Context) DomainInputMappingDefaultValuesOutput
}

type DomainInputMappingDefaultValuesArgs struct {
	// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion pulumi.StringPtrInput `pulumi:"dataVersion"`
	// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
}

func (DomainInputMappingDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingDefaultValues)(nil)).Elem()
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesOutput() DomainInputMappingDefaultValuesOutput {
	return i.ToDomainInputMappingDefaultValuesOutputWithContext(context.Background())
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingDefaultValuesOutput)
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return i.ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (i DomainInputMappingDefaultValuesArgs) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingDefaultValuesOutput).ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx)
}

// DomainInputMappingDefaultValuesPtrInput is an input type that accepts DomainInputMappingDefaultValuesArgs, DomainInputMappingDefaultValuesPtr and DomainInputMappingDefaultValuesPtrOutput values.
// You can construct a concrete instance of `DomainInputMappingDefaultValuesPtrInput` via:
//
//          DomainInputMappingDefaultValuesArgs{...}
//
//  or:
//
//          nil
type DomainInputMappingDefaultValuesPtrInput interface {
	pulumi.Input

	ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput
	ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Context) DomainInputMappingDefaultValuesPtrOutput
}

type domainInputMappingDefaultValuesPtrType DomainInputMappingDefaultValuesArgs

func DomainInputMappingDefaultValuesPtr(v *DomainInputMappingDefaultValuesArgs) DomainInputMappingDefaultValuesPtrInput {
	return (*domainInputMappingDefaultValuesPtrType)(v)
}

func (*domainInputMappingDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingDefaultValues)(nil)).Elem()
}

func (i *domainInputMappingDefaultValuesPtrType) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return i.ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *domainInputMappingDefaultValuesPtrType) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingDefaultValuesPtrOutput)
}

type DomainInputMappingDefaultValuesOutput struct{ *pulumi.OutputState }

func (DomainInputMappingDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingDefaultValues)(nil)).Elem()
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesOutput() DomainInputMappingDefaultValuesOutput {
	return o
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesOutput {
	return o
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return o.ToDomainInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (o DomainInputMappingDefaultValuesOutput) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *DomainInputMappingDefaultValues {
		return &v
	}).(DomainInputMappingDefaultValuesPtrOutput)
}

// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingDefaultValues) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type DomainInputMappingDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (DomainInputMappingDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingDefaultValues)(nil)).Elem()
}

func (o DomainInputMappingDefaultValuesPtrOutput) ToDomainInputMappingDefaultValuesPtrOutput() DomainInputMappingDefaultValuesPtrOutput {
	return o
}

func (o DomainInputMappingDefaultValuesPtrOutput) ToDomainInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) DomainInputMappingDefaultValuesPtrOutput {
	return o
}

func (o DomainInputMappingDefaultValuesPtrOutput) Elem() DomainInputMappingDefaultValuesOutput {
	return o.ApplyT(func(v *DomainInputMappingDefaultValues) DomainInputMappingDefaultValues { return *v }).(DomainInputMappingDefaultValuesOutput)
}

// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesPtrOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingDefaultValuesPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(pulumi.StringPtrOutput)
}

type DomainInputMappingFields struct {
	// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion *string `pulumi:"dataVersion"`
	// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventTime *string `pulumi:"eventTime"`
	// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType *string `pulumi:"eventType"`
	// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Id *string `pulumi:"id"`
	// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject *string `pulumi:"subject"`
	// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Topic *string `pulumi:"topic"`
}

// DomainInputMappingFieldsInput is an input type that accepts DomainInputMappingFieldsArgs and DomainInputMappingFieldsOutput values.
// You can construct a concrete instance of `DomainInputMappingFieldsInput` via:
//
//          DomainInputMappingFieldsArgs{...}
type DomainInputMappingFieldsInput interface {
	pulumi.Input

	ToDomainInputMappingFieldsOutput() DomainInputMappingFieldsOutput
	ToDomainInputMappingFieldsOutputWithContext(context.Context) DomainInputMappingFieldsOutput
}

type DomainInputMappingFieldsArgs struct {
	// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion pulumi.StringPtrInput `pulumi:"dataVersion"`
	// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventTime pulumi.StringPtrInput `pulumi:"eventTime"`
	// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
	// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (DomainInputMappingFieldsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingFields)(nil)).Elem()
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsOutput() DomainInputMappingFieldsOutput {
	return i.ToDomainInputMappingFieldsOutputWithContext(context.Background())
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsOutputWithContext(ctx context.Context) DomainInputMappingFieldsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingFieldsOutput)
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return i.ToDomainInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (i DomainInputMappingFieldsArgs) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingFieldsOutput).ToDomainInputMappingFieldsPtrOutputWithContext(ctx)
}

// DomainInputMappingFieldsPtrInput is an input type that accepts DomainInputMappingFieldsArgs, DomainInputMappingFieldsPtr and DomainInputMappingFieldsPtrOutput values.
// You can construct a concrete instance of `DomainInputMappingFieldsPtrInput` via:
//
//          DomainInputMappingFieldsArgs{...}
//
//  or:
//
//          nil
type DomainInputMappingFieldsPtrInput interface {
	pulumi.Input

	ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput
	ToDomainInputMappingFieldsPtrOutputWithContext(context.Context) DomainInputMappingFieldsPtrOutput
}

type domainInputMappingFieldsPtrType DomainInputMappingFieldsArgs

func DomainInputMappingFieldsPtr(v *DomainInputMappingFieldsArgs) DomainInputMappingFieldsPtrInput {
	return (*domainInputMappingFieldsPtrType)(v)
}

func (*domainInputMappingFieldsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingFields)(nil)).Elem()
}

func (i *domainInputMappingFieldsPtrType) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return i.ToDomainInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (i *domainInputMappingFieldsPtrType) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainInputMappingFieldsPtrOutput)
}

type DomainInputMappingFieldsOutput struct{ *pulumi.OutputState }

func (DomainInputMappingFieldsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainInputMappingFields)(nil)).Elem()
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsOutput() DomainInputMappingFieldsOutput {
	return o
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsOutputWithContext(ctx context.Context) DomainInputMappingFieldsOutput {
	return o
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return o.ToDomainInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (o DomainInputMappingFieldsOutput) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *DomainInputMappingFields {
		return &v
	}).(DomainInputMappingFieldsPtrOutput)
}

// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.EventTime }).(pulumi.StringPtrOutput)
}

// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainInputMappingFields) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type DomainInputMappingFieldsPtrOutput struct{ *pulumi.OutputState }

func (DomainInputMappingFieldsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainInputMappingFields)(nil)).Elem()
}

func (o DomainInputMappingFieldsPtrOutput) ToDomainInputMappingFieldsPtrOutput() DomainInputMappingFieldsPtrOutput {
	return o
}

func (o DomainInputMappingFieldsPtrOutput) ToDomainInputMappingFieldsPtrOutputWithContext(ctx context.Context) DomainInputMappingFieldsPtrOutput {
	return o
}

func (o DomainInputMappingFieldsPtrOutput) Elem() DomainInputMappingFieldsOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) DomainInputMappingFields { return *v }).(DomainInputMappingFieldsOutput)
}

// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.EventTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(pulumi.StringPtrOutput)
}

// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o DomainInputMappingFieldsPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionAdvancedFilter struct {
	// Compares a value of an event using a single boolean value.
	BoolEquals []EventSubscriptionAdvancedFilterBoolEqual `pulumi:"boolEquals"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThanOrEquals []EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual `pulumi:"numberGreaterThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThans []EventSubscriptionAdvancedFilterNumberGreaterThan `pulumi:"numberGreaterThans"`
	// Compares a value of an event using multiple floating point numbers.
	NumberIns []EventSubscriptionAdvancedFilterNumberIn `pulumi:"numberIns"`
	// Compares a value of an event using a single floating point number.
	NumberLessThanOrEquals []EventSubscriptionAdvancedFilterNumberLessThanOrEqual `pulumi:"numberLessThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberLessThans []EventSubscriptionAdvancedFilterNumberLessThan `pulumi:"numberLessThans"`
	// Compares a value of an event using multiple floating point numbers.
	NumberNotIns []EventSubscriptionAdvancedFilterNumberNotIn `pulumi:"numberNotIns"`
	// Compares a value of an event using multiple string values.
	StringBeginsWiths []EventSubscriptionAdvancedFilterStringBeginsWith `pulumi:"stringBeginsWiths"`
	// Compares a value of an event using multiple string values.
	StringContains []EventSubscriptionAdvancedFilterStringContain `pulumi:"stringContains"`
	// Compares a value of an event using multiple string values.
	StringEndsWiths []EventSubscriptionAdvancedFilterStringEndsWith `pulumi:"stringEndsWiths"`
	// Compares a value of an event using multiple string values.
	StringIns []EventSubscriptionAdvancedFilterStringIn `pulumi:"stringIns"`
	// Compares a value of an event using multiple string values.
	StringNotIns []EventSubscriptionAdvancedFilterStringNotIn `pulumi:"stringNotIns"`
}

// EventSubscriptionAdvancedFilterInput is an input type that accepts EventSubscriptionAdvancedFilterArgs and EventSubscriptionAdvancedFilterOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterInput` via:
//
//          EventSubscriptionAdvancedFilterArgs{...}
type EventSubscriptionAdvancedFilterInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterOutput() EventSubscriptionAdvancedFilterOutput
	ToEventSubscriptionAdvancedFilterOutputWithContext(context.Context) EventSubscriptionAdvancedFilterOutput
}

type EventSubscriptionAdvancedFilterArgs struct {
	// Compares a value of an event using a single boolean value.
	BoolEquals EventSubscriptionAdvancedFilterBoolEqualArrayInput `pulumi:"boolEquals"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThanOrEquals EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput `pulumi:"numberGreaterThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThans EventSubscriptionAdvancedFilterNumberGreaterThanArrayInput `pulumi:"numberGreaterThans"`
	// Compares a value of an event using multiple floating point numbers.
	NumberIns EventSubscriptionAdvancedFilterNumberInArrayInput `pulumi:"numberIns"`
	// Compares a value of an event using a single floating point number.
	NumberLessThanOrEquals EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput `pulumi:"numberLessThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberLessThans EventSubscriptionAdvancedFilterNumberLessThanArrayInput `pulumi:"numberLessThans"`
	// Compares a value of an event using multiple floating point numbers.
	NumberNotIns EventSubscriptionAdvancedFilterNumberNotInArrayInput `pulumi:"numberNotIns"`
	// Compares a value of an event using multiple string values.
	StringBeginsWiths EventSubscriptionAdvancedFilterStringBeginsWithArrayInput `pulumi:"stringBeginsWiths"`
	// Compares a value of an event using multiple string values.
	StringContains EventSubscriptionAdvancedFilterStringContainArrayInput `pulumi:"stringContains"`
	// Compares a value of an event using multiple string values.
	StringEndsWiths EventSubscriptionAdvancedFilterStringEndsWithArrayInput `pulumi:"stringEndsWiths"`
	// Compares a value of an event using multiple string values.
	StringIns EventSubscriptionAdvancedFilterStringInArrayInput `pulumi:"stringIns"`
	// Compares a value of an event using multiple string values.
	StringNotIns EventSubscriptionAdvancedFilterStringNotInArrayInput `pulumi:"stringNotIns"`
}

func (EventSubscriptionAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterArgs) ToEventSubscriptionAdvancedFilterOutput() EventSubscriptionAdvancedFilterOutput {
	return i.ToEventSubscriptionAdvancedFilterOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterArgs) ToEventSubscriptionAdvancedFilterOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterOutput)
}

func (i EventSubscriptionAdvancedFilterArgs) ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput {
	return i.ToEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterArgs) ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterOutput).ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx)
}

// EventSubscriptionAdvancedFilterPtrInput is an input type that accepts EventSubscriptionAdvancedFilterArgs, EventSubscriptionAdvancedFilterPtr and EventSubscriptionAdvancedFilterPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterPtrInput` via:
//
//          EventSubscriptionAdvancedFilterArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionAdvancedFilterPtrInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput
	ToEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Context) EventSubscriptionAdvancedFilterPtrOutput
}

type eventSubscriptionAdvancedFilterPtrType EventSubscriptionAdvancedFilterArgs

func EventSubscriptionAdvancedFilterPtr(v *EventSubscriptionAdvancedFilterArgs) EventSubscriptionAdvancedFilterPtrInput {
	return (*eventSubscriptionAdvancedFilterPtrType)(v)
}

func (*eventSubscriptionAdvancedFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (i *eventSubscriptionAdvancedFilterPtrType) ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput {
	return i.ToEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionAdvancedFilterPtrType) ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterPtrOutput)
}

type EventSubscriptionAdvancedFilterOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterOutput) ToEventSubscriptionAdvancedFilterOutput() EventSubscriptionAdvancedFilterOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterOutput) ToEventSubscriptionAdvancedFilterOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterOutput) ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput {
	return o.ToEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionAdvancedFilterOutput) ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterPtrOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) *EventSubscriptionAdvancedFilter {
		return &v
	}).(EventSubscriptionAdvancedFilterPtrOutput)
}

// Compares a value of an event using a single boolean value.
func (o EventSubscriptionAdvancedFilterOutput) BoolEquals() EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterBoolEqual {
		return v.BoolEquals
	}).(EventSubscriptionAdvancedFilterBoolEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterOutput) NumberGreaterThanOrEquals() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual {
		return v.NumberGreaterThanOrEquals
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterOutput) NumberGreaterThans() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberGreaterThan {
		return v.NumberGreaterThans
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o EventSubscriptionAdvancedFilterOutput) NumberIns() EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberIn { return v.NumberIns }).(EventSubscriptionAdvancedFilterNumberInArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterOutput) NumberLessThanOrEquals() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberLessThanOrEqual {
		return v.NumberLessThanOrEquals
	}).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterOutput) NumberLessThans() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberLessThan {
		return v.NumberLessThans
	}).(EventSubscriptionAdvancedFilterNumberLessThanArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o EventSubscriptionAdvancedFilterOutput) NumberNotIns() EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberNotIn {
		return v.NumberNotIns
	}).(EventSubscriptionAdvancedFilterNumberNotInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringBeginsWiths() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringBeginsWith {
		return v.StringBeginsWiths
	}).(EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringContains() EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringContain {
		return v.StringContains
	}).(EventSubscriptionAdvancedFilterStringContainArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringEndsWiths() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringEndsWith {
		return v.StringEndsWiths
	}).(EventSubscriptionAdvancedFilterStringEndsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringIns() EventSubscriptionAdvancedFilterStringInArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringIn { return v.StringIns }).(EventSubscriptionAdvancedFilterStringInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterOutput) StringNotIns() EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringNotIn {
		return v.StringNotIns
	}).(EventSubscriptionAdvancedFilterStringNotInArrayOutput)
}

type EventSubscriptionAdvancedFilterPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterPtrOutput) ToEventSubscriptionAdvancedFilterPtrOutput() EventSubscriptionAdvancedFilterPtrOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterPtrOutput) ToEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterPtrOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterPtrOutput) Elem() EventSubscriptionAdvancedFilterOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) EventSubscriptionAdvancedFilter { return *v }).(EventSubscriptionAdvancedFilterOutput)
}

// Compares a value of an event using a single boolean value.
func (o EventSubscriptionAdvancedFilterPtrOutput) BoolEquals() EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterBoolEqual {
		if v == nil {
			return nil
		}
		return v.BoolEquals
	}).(EventSubscriptionAdvancedFilterBoolEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberGreaterThanOrEquals() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual {
		if v == nil {
			return nil
		}
		return v.NumberGreaterThanOrEquals
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberGreaterThans() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberGreaterThan {
		if v == nil {
			return nil
		}
		return v.NumberGreaterThans
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberIns() EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberIn {
		if v == nil {
			return nil
		}
		return v.NumberIns
	}).(EventSubscriptionAdvancedFilterNumberInArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberLessThanOrEquals() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberLessThanOrEqual {
		if v == nil {
			return nil
		}
		return v.NumberLessThanOrEquals
	}).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberLessThans() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberLessThan {
		if v == nil {
			return nil
		}
		return v.NumberLessThans
	}).(EventSubscriptionAdvancedFilterNumberLessThanArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o EventSubscriptionAdvancedFilterPtrOutput) NumberNotIns() EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterNumberNotIn {
		if v == nil {
			return nil
		}
		return v.NumberNotIns
	}).(EventSubscriptionAdvancedFilterNumberNotInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringBeginsWiths() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringBeginsWith {
		if v == nil {
			return nil
		}
		return v.StringBeginsWiths
	}).(EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringContains() EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringContain {
		if v == nil {
			return nil
		}
		return v.StringContains
	}).(EventSubscriptionAdvancedFilterStringContainArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringEndsWiths() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringEndsWith {
		if v == nil {
			return nil
		}
		return v.StringEndsWiths
	}).(EventSubscriptionAdvancedFilterStringEndsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringIns() EventSubscriptionAdvancedFilterStringInArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringIn {
		if v == nil {
			return nil
		}
		return v.StringIns
	}).(EventSubscriptionAdvancedFilterStringInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o EventSubscriptionAdvancedFilterPtrOutput) StringNotIns() EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o.ApplyT(func(v *EventSubscriptionAdvancedFilter) []EventSubscriptionAdvancedFilterStringNotIn {
		if v == nil {
			return nil
		}
		return v.StringNotIns
	}).(EventSubscriptionAdvancedFilterStringNotInArrayOutput)
}

type EventSubscriptionAdvancedFilterBoolEqual struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value bool `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterBoolEqualInput is an input type that accepts EventSubscriptionAdvancedFilterBoolEqualArgs and EventSubscriptionAdvancedFilterBoolEqualOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterBoolEqualInput` via:
//
//          EventSubscriptionAdvancedFilterBoolEqualArgs{...}
type EventSubscriptionAdvancedFilterBoolEqualInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterBoolEqualOutput() EventSubscriptionAdvancedFilterBoolEqualOutput
	ToEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(context.Context) EventSubscriptionAdvancedFilterBoolEqualOutput
}

type EventSubscriptionAdvancedFilterBoolEqualArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.BoolInput `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterBoolEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterBoolEqualArgs) ToEventSubscriptionAdvancedFilterBoolEqualOutput() EventSubscriptionAdvancedFilterBoolEqualOutput {
	return i.ToEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterBoolEqualArgs) ToEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterBoolEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterBoolEqualOutput)
}

// EventSubscriptionAdvancedFilterBoolEqualArrayInput is an input type that accepts EventSubscriptionAdvancedFilterBoolEqualArray and EventSubscriptionAdvancedFilterBoolEqualArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterBoolEqualArrayInput` via:
//
//          EventSubscriptionAdvancedFilterBoolEqualArray{ EventSubscriptionAdvancedFilterBoolEqualArgs{...} }
type EventSubscriptionAdvancedFilterBoolEqualArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterBoolEqualArrayOutput() EventSubscriptionAdvancedFilterBoolEqualArrayOutput
	ToEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterBoolEqualArrayOutput
}

type EventSubscriptionAdvancedFilterBoolEqualArray []EventSubscriptionAdvancedFilterBoolEqualInput

func (EventSubscriptionAdvancedFilterBoolEqualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterBoolEqualArray) ToEventSubscriptionAdvancedFilterBoolEqualArrayOutput() EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterBoolEqualArray) ToEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterBoolEqualArrayOutput)
}

type EventSubscriptionAdvancedFilterBoolEqualOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterBoolEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterBoolEqualOutput) ToEventSubscriptionAdvancedFilterBoolEqualOutput() EventSubscriptionAdvancedFilterBoolEqualOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterBoolEqualOutput) ToEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterBoolEqualOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterBoolEqualOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterBoolEqual) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o EventSubscriptionAdvancedFilterBoolEqualOutput) Value() pulumi.BoolOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterBoolEqual) bool { return v.Value }).(pulumi.BoolOutput)
}

type EventSubscriptionAdvancedFilterBoolEqualArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterBoolEqualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterBoolEqualArrayOutput) ToEventSubscriptionAdvancedFilterBoolEqualArrayOutput() EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterBoolEqualArrayOutput) ToEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterBoolEqualArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterBoolEqualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterBoolEqual {
		return vs[0].([]EventSubscriptionAdvancedFilterBoolEqual)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterBoolEqualOutput)
}

type EventSubscriptionAdvancedFilterNumberGreaterThan struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value float64 `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterNumberGreaterThanInput is an input type that accepts EventSubscriptionAdvancedFilterNumberGreaterThanArgs and EventSubscriptionAdvancedFilterNumberGreaterThanOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberGreaterThanInput` via:
//
//          EventSubscriptionAdvancedFilterNumberGreaterThanArgs{...}
type EventSubscriptionAdvancedFilterNumberGreaterThanInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberGreaterThanOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOutput
	ToEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOutput
}

type EventSubscriptionAdvancedFilterNumberGreaterThanArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterNumberGreaterThanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanArgs) ToEventSubscriptionAdvancedFilterNumberGreaterThanOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanArgs) ToEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberGreaterThanOutput)
}

// EventSubscriptionAdvancedFilterNumberGreaterThanArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberGreaterThanArray and EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberGreaterThanArrayInput` via:
//
//          EventSubscriptionAdvancedFilterNumberGreaterThanArray{ EventSubscriptionAdvancedFilterNumberGreaterThanArgs{...} }
type EventSubscriptionAdvancedFilterNumberGreaterThanArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput
	ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput
}

type EventSubscriptionAdvancedFilterNumberGreaterThanArray []EventSubscriptionAdvancedFilterNumberGreaterThanInput

func (EventSubscriptionAdvancedFilterNumberGreaterThanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanArray) ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanArray) ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberGreaterThanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberGreaterThanOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberGreaterThan) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o EventSubscriptionAdvancedFilterNumberGreaterThanOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberGreaterThan) float64 { return v.Value }).(pulumi.Float64Output)
}

type EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberGreaterThan {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberGreaterThan)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanOutput)
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value float64 `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput is an input type that accepts EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs and EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput` via:
//
//          EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs{...}
type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput
	ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput)
}

// EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray and EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput` via:
//
//          EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray{ EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs{...} }
type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput
	ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray []EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput

func (EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual) float64 { return v.Value }).(pulumi.Float64Output)
}

type EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) ToEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput)
}

type EventSubscriptionAdvancedFilterNumberIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []float64 `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterNumberInInput is an input type that accepts EventSubscriptionAdvancedFilterNumberInArgs and EventSubscriptionAdvancedFilterNumberInOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberInInput` via:
//
//          EventSubscriptionAdvancedFilterNumberInArgs{...}
type EventSubscriptionAdvancedFilterNumberInInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberInOutput() EventSubscriptionAdvancedFilterNumberInOutput
	ToEventSubscriptionAdvancedFilterNumberInOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberInOutput
}

type EventSubscriptionAdvancedFilterNumberInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterNumberInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberInArgs) ToEventSubscriptionAdvancedFilterNumberInOutput() EventSubscriptionAdvancedFilterNumberInOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberInOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberInArgs) ToEventSubscriptionAdvancedFilterNumberInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberInOutput)
}

// EventSubscriptionAdvancedFilterNumberInArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberInArray and EventSubscriptionAdvancedFilterNumberInArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberInArrayInput` via:
//
//          EventSubscriptionAdvancedFilterNumberInArray{ EventSubscriptionAdvancedFilterNumberInArgs{...} }
type EventSubscriptionAdvancedFilterNumberInArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberInArrayOutput() EventSubscriptionAdvancedFilterNumberInArrayOutput
	ToEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberInArrayOutput
}

type EventSubscriptionAdvancedFilterNumberInArray []EventSubscriptionAdvancedFilterNumberInInput

func (EventSubscriptionAdvancedFilterNumberInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberInArray) ToEventSubscriptionAdvancedFilterNumberInArrayOutput() EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberInArray) ToEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberInArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberInOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberInOutput) ToEventSubscriptionAdvancedFilterNumberInOutput() EventSubscriptionAdvancedFilterNumberInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberInOutput) ToEventSubscriptionAdvancedFilterNumberInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o EventSubscriptionAdvancedFilterNumberInOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberIn) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberInArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberInArrayOutput) ToEventSubscriptionAdvancedFilterNumberInArrayOutput() EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberInArrayOutput) ToEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberInArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberIn {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberIn)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberInOutput)
}

type EventSubscriptionAdvancedFilterNumberLessThan struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value float64 `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterNumberLessThanInput is an input type that accepts EventSubscriptionAdvancedFilterNumberLessThanArgs and EventSubscriptionAdvancedFilterNumberLessThanOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberLessThanInput` via:
//
//          EventSubscriptionAdvancedFilterNumberLessThanArgs{...}
type EventSubscriptionAdvancedFilterNumberLessThanInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberLessThanOutput() EventSubscriptionAdvancedFilterNumberLessThanOutput
	ToEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberLessThanOutput
}

type EventSubscriptionAdvancedFilterNumberLessThanArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterNumberLessThanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberLessThanArgs) ToEventSubscriptionAdvancedFilterNumberLessThanOutput() EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberLessThanArgs) ToEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberLessThanOutput)
}

// EventSubscriptionAdvancedFilterNumberLessThanArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberLessThanArray and EventSubscriptionAdvancedFilterNumberLessThanArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberLessThanArrayInput` via:
//
//          EventSubscriptionAdvancedFilterNumberLessThanArray{ EventSubscriptionAdvancedFilterNumberLessThanArgs{...} }
type EventSubscriptionAdvancedFilterNumberLessThanArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput
	ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberLessThanArrayOutput
}

type EventSubscriptionAdvancedFilterNumberLessThanArray []EventSubscriptionAdvancedFilterNumberLessThanInput

func (EventSubscriptionAdvancedFilterNumberLessThanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberLessThanArray) ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberLessThanArray) ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberLessThanArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberLessThanOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberLessThanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOutput() EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberLessThanOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberLessThan) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o EventSubscriptionAdvancedFilterNumberLessThanOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberLessThan) float64 { return v.Value }).(pulumi.Float64Output)
}

type EventSubscriptionAdvancedFilterNumberLessThanArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberLessThanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberLessThanArrayOutput) ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanArrayOutput) ToEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberLessThanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberLessThan {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberLessThan)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberLessThanOutput)
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqual struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value float64 `pulumi:"value"`
}

// EventSubscriptionAdvancedFilterNumberLessThanOrEqualInput is an input type that accepts EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs and EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberLessThanOrEqualInput` via:
//
//          EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs{...}
type EventSubscriptionAdvancedFilterNumberLessThanOrEqualInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput
	ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput)
}

// EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray and EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput` via:
//
//          EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray{ EventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs{...} }
type EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput
	ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray []EventSubscriptionAdvancedFilterNumberLessThanOrEqualInput

func (EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberLessThanOrEqualArray) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberLessThanOrEqual) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberLessThanOrEqual) float64 { return v.Value }).(pulumi.Float64Output)
}

type EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput() EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) ToEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberLessThanOrEqual {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberLessThanOrEqual)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput)
}

type EventSubscriptionAdvancedFilterNumberNotIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []float64 `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterNumberNotInInput is an input type that accepts EventSubscriptionAdvancedFilterNumberNotInArgs and EventSubscriptionAdvancedFilterNumberNotInOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberNotInInput` via:
//
//          EventSubscriptionAdvancedFilterNumberNotInArgs{...}
type EventSubscriptionAdvancedFilterNumberNotInInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberNotInOutput() EventSubscriptionAdvancedFilterNumberNotInOutput
	ToEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberNotInOutput
}

type EventSubscriptionAdvancedFilterNumberNotInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterNumberNotInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberNotInArgs) ToEventSubscriptionAdvancedFilterNumberNotInOutput() EventSubscriptionAdvancedFilterNumberNotInOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberNotInArgs) ToEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberNotInOutput)
}

// EventSubscriptionAdvancedFilterNumberNotInArrayInput is an input type that accepts EventSubscriptionAdvancedFilterNumberNotInArray and EventSubscriptionAdvancedFilterNumberNotInArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterNumberNotInArrayInput` via:
//
//          EventSubscriptionAdvancedFilterNumberNotInArray{ EventSubscriptionAdvancedFilterNumberNotInArgs{...} }
type EventSubscriptionAdvancedFilterNumberNotInArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterNumberNotInArrayOutput() EventSubscriptionAdvancedFilterNumberNotInArrayOutput
	ToEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterNumberNotInArrayOutput
}

type EventSubscriptionAdvancedFilterNumberNotInArray []EventSubscriptionAdvancedFilterNumberNotInInput

func (EventSubscriptionAdvancedFilterNumberNotInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterNumberNotInArray) ToEventSubscriptionAdvancedFilterNumberNotInArrayOutput() EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterNumberNotInArray) ToEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterNumberNotInArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberNotInOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberNotInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberNotInOutput) ToEventSubscriptionAdvancedFilterNumberNotInOutput() EventSubscriptionAdvancedFilterNumberNotInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberNotInOutput) ToEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterNumberNotInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberNotIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o EventSubscriptionAdvancedFilterNumberNotInOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterNumberNotIn) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

type EventSubscriptionAdvancedFilterNumberNotInArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterNumberNotInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterNumberNotInArrayOutput) ToEventSubscriptionAdvancedFilterNumberNotInArrayOutput() EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberNotInArrayOutput) ToEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterNumberNotInArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterNumberNotInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterNumberNotIn {
		return vs[0].([]EventSubscriptionAdvancedFilterNumberNotIn)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterNumberNotInOutput)
}

type EventSubscriptionAdvancedFilterStringBeginsWith struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringBeginsWithInput is an input type that accepts EventSubscriptionAdvancedFilterStringBeginsWithArgs and EventSubscriptionAdvancedFilterStringBeginsWithOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringBeginsWithInput` via:
//
//          EventSubscriptionAdvancedFilterStringBeginsWithArgs{...}
type EventSubscriptionAdvancedFilterStringBeginsWithInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringBeginsWithOutput() EventSubscriptionAdvancedFilterStringBeginsWithOutput
	ToEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringBeginsWithOutput
}

type EventSubscriptionAdvancedFilterStringBeginsWithArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringBeginsWithArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringBeginsWithArgs) ToEventSubscriptionAdvancedFilterStringBeginsWithOutput() EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return i.ToEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringBeginsWithArgs) ToEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringBeginsWithOutput)
}

// EventSubscriptionAdvancedFilterStringBeginsWithArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringBeginsWithArray and EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringBeginsWithArrayInput` via:
//
//          EventSubscriptionAdvancedFilterStringBeginsWithArray{ EventSubscriptionAdvancedFilterStringBeginsWithArgs{...} }
type EventSubscriptionAdvancedFilterStringBeginsWithArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput
	ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput
}

type EventSubscriptionAdvancedFilterStringBeginsWithArray []EventSubscriptionAdvancedFilterStringBeginsWithInput

func (EventSubscriptionAdvancedFilterStringBeginsWithArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringBeginsWithArray) ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringBeginsWithArray) ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput)
}

type EventSubscriptionAdvancedFilterStringBeginsWithOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringBeginsWithOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithOutput) ToEventSubscriptionAdvancedFilterStringBeginsWithOutput() EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithOutput) ToEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringBeginsWithOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringBeginsWith) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o EventSubscriptionAdvancedFilterStringBeginsWithOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringBeginsWith) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput() EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringBeginsWith {
		return vs[0].([]EventSubscriptionAdvancedFilterStringBeginsWith)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringBeginsWithOutput)
}

type EventSubscriptionAdvancedFilterStringContain struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringContainInput is an input type that accepts EventSubscriptionAdvancedFilterStringContainArgs and EventSubscriptionAdvancedFilterStringContainOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringContainInput` via:
//
//          EventSubscriptionAdvancedFilterStringContainArgs{...}
type EventSubscriptionAdvancedFilterStringContainInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringContainOutput() EventSubscriptionAdvancedFilterStringContainOutput
	ToEventSubscriptionAdvancedFilterStringContainOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringContainOutput
}

type EventSubscriptionAdvancedFilterStringContainArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringContainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringContainArgs) ToEventSubscriptionAdvancedFilterStringContainOutput() EventSubscriptionAdvancedFilterStringContainOutput {
	return i.ToEventSubscriptionAdvancedFilterStringContainOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringContainArgs) ToEventSubscriptionAdvancedFilterStringContainOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringContainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringContainOutput)
}

// EventSubscriptionAdvancedFilterStringContainArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringContainArray and EventSubscriptionAdvancedFilterStringContainArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringContainArrayInput` via:
//
//          EventSubscriptionAdvancedFilterStringContainArray{ EventSubscriptionAdvancedFilterStringContainArgs{...} }
type EventSubscriptionAdvancedFilterStringContainArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringContainArrayOutput() EventSubscriptionAdvancedFilterStringContainArrayOutput
	ToEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringContainArrayOutput
}

type EventSubscriptionAdvancedFilterStringContainArray []EventSubscriptionAdvancedFilterStringContainInput

func (EventSubscriptionAdvancedFilterStringContainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringContainArray) ToEventSubscriptionAdvancedFilterStringContainArrayOutput() EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringContainArray) ToEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringContainArrayOutput)
}

type EventSubscriptionAdvancedFilterStringContainOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringContainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringContainOutput) ToEventSubscriptionAdvancedFilterStringContainOutput() EventSubscriptionAdvancedFilterStringContainOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringContainOutput) ToEventSubscriptionAdvancedFilterStringContainOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringContainOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringContainOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringContain) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o EventSubscriptionAdvancedFilterStringContainOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringContain) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringContainArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringContainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringContainArrayOutput) ToEventSubscriptionAdvancedFilterStringContainArrayOutput() EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringContainArrayOutput) ToEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringContainArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringContainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringContain {
		return vs[0].([]EventSubscriptionAdvancedFilterStringContain)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringContainOutput)
}

type EventSubscriptionAdvancedFilterStringEndsWith struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringEndsWithInput is an input type that accepts EventSubscriptionAdvancedFilterStringEndsWithArgs and EventSubscriptionAdvancedFilterStringEndsWithOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringEndsWithInput` via:
//
//          EventSubscriptionAdvancedFilterStringEndsWithArgs{...}
type EventSubscriptionAdvancedFilterStringEndsWithInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringEndsWithOutput() EventSubscriptionAdvancedFilterStringEndsWithOutput
	ToEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringEndsWithOutput
}

type EventSubscriptionAdvancedFilterStringEndsWithArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringEndsWithArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringEndsWithArgs) ToEventSubscriptionAdvancedFilterStringEndsWithOutput() EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return i.ToEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringEndsWithArgs) ToEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringEndsWithOutput)
}

// EventSubscriptionAdvancedFilterStringEndsWithArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringEndsWithArray and EventSubscriptionAdvancedFilterStringEndsWithArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringEndsWithArrayInput` via:
//
//          EventSubscriptionAdvancedFilterStringEndsWithArray{ EventSubscriptionAdvancedFilterStringEndsWithArgs{...} }
type EventSubscriptionAdvancedFilterStringEndsWithArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutput() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput
	ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringEndsWithArrayOutput
}

type EventSubscriptionAdvancedFilterStringEndsWithArray []EventSubscriptionAdvancedFilterStringEndsWithInput

func (EventSubscriptionAdvancedFilterStringEndsWithArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringEndsWithArray) ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutput() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringEndsWithArray) ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringEndsWithArrayOutput)
}

type EventSubscriptionAdvancedFilterStringEndsWithOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringEndsWithOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringEndsWithOutput) ToEventSubscriptionAdvancedFilterStringEndsWithOutput() EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringEndsWithOutput) ToEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringEndsWithOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringEndsWith) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o EventSubscriptionAdvancedFilterStringEndsWithOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringEndsWith) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringEndsWithArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringEndsWithArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringEndsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutput() EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringEndsWithArrayOutput) ToEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringEndsWithArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringEndsWithOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringEndsWith {
		return vs[0].([]EventSubscriptionAdvancedFilterStringEndsWith)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringEndsWithOutput)
}

type EventSubscriptionAdvancedFilterStringIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringInInput is an input type that accepts EventSubscriptionAdvancedFilterStringInArgs and EventSubscriptionAdvancedFilterStringInOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringInInput` via:
//
//          EventSubscriptionAdvancedFilterStringInArgs{...}
type EventSubscriptionAdvancedFilterStringInInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringInOutput() EventSubscriptionAdvancedFilterStringInOutput
	ToEventSubscriptionAdvancedFilterStringInOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringInOutput
}

type EventSubscriptionAdvancedFilterStringInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringInArgs) ToEventSubscriptionAdvancedFilterStringInOutput() EventSubscriptionAdvancedFilterStringInOutput {
	return i.ToEventSubscriptionAdvancedFilterStringInOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringInArgs) ToEventSubscriptionAdvancedFilterStringInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringInOutput)
}

// EventSubscriptionAdvancedFilterStringInArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringInArray and EventSubscriptionAdvancedFilterStringInArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringInArrayInput` via:
//
//          EventSubscriptionAdvancedFilterStringInArray{ EventSubscriptionAdvancedFilterStringInArgs{...} }
type EventSubscriptionAdvancedFilterStringInArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringInArrayOutput() EventSubscriptionAdvancedFilterStringInArrayOutput
	ToEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringInArrayOutput
}

type EventSubscriptionAdvancedFilterStringInArray []EventSubscriptionAdvancedFilterStringInInput

func (EventSubscriptionAdvancedFilterStringInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringInArray) ToEventSubscriptionAdvancedFilterStringInArrayOutput() EventSubscriptionAdvancedFilterStringInArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringInArray) ToEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringInArrayOutput)
}

type EventSubscriptionAdvancedFilterStringInOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringInOutput) ToEventSubscriptionAdvancedFilterStringInOutput() EventSubscriptionAdvancedFilterStringInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringInOutput) ToEventSubscriptionAdvancedFilterStringInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringInOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o EventSubscriptionAdvancedFilterStringInOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringIn) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringInArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringInArrayOutput) ToEventSubscriptionAdvancedFilterStringInArrayOutput() EventSubscriptionAdvancedFilterStringInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringInArrayOutput) ToEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringInArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringIn {
		return vs[0].([]EventSubscriptionAdvancedFilterStringIn)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringInOutput)
}

type EventSubscriptionAdvancedFilterStringNotIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// EventSubscriptionAdvancedFilterStringNotInInput is an input type that accepts EventSubscriptionAdvancedFilterStringNotInArgs and EventSubscriptionAdvancedFilterStringNotInOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringNotInInput` via:
//
//          EventSubscriptionAdvancedFilterStringNotInArgs{...}
type EventSubscriptionAdvancedFilterStringNotInInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringNotInOutput() EventSubscriptionAdvancedFilterStringNotInOutput
	ToEventSubscriptionAdvancedFilterStringNotInOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringNotInOutput
}

type EventSubscriptionAdvancedFilterStringNotInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (EventSubscriptionAdvancedFilterStringNotInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringNotInArgs) ToEventSubscriptionAdvancedFilterStringNotInOutput() EventSubscriptionAdvancedFilterStringNotInOutput {
	return i.ToEventSubscriptionAdvancedFilterStringNotInOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringNotInArgs) ToEventSubscriptionAdvancedFilterStringNotInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringNotInOutput)
}

// EventSubscriptionAdvancedFilterStringNotInArrayInput is an input type that accepts EventSubscriptionAdvancedFilterStringNotInArray and EventSubscriptionAdvancedFilterStringNotInArrayOutput values.
// You can construct a concrete instance of `EventSubscriptionAdvancedFilterStringNotInArrayInput` via:
//
//          EventSubscriptionAdvancedFilterStringNotInArray{ EventSubscriptionAdvancedFilterStringNotInArgs{...} }
type EventSubscriptionAdvancedFilterStringNotInArrayInput interface {
	pulumi.Input

	ToEventSubscriptionAdvancedFilterStringNotInArrayOutput() EventSubscriptionAdvancedFilterStringNotInArrayOutput
	ToEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(context.Context) EventSubscriptionAdvancedFilterStringNotInArrayOutput
}

type EventSubscriptionAdvancedFilterStringNotInArray []EventSubscriptionAdvancedFilterStringNotInInput

func (EventSubscriptionAdvancedFilterStringNotInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (i EventSubscriptionAdvancedFilterStringNotInArray) ToEventSubscriptionAdvancedFilterStringNotInArrayOutput() EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return i.ToEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(context.Background())
}

func (i EventSubscriptionAdvancedFilterStringNotInArray) ToEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAdvancedFilterStringNotInArrayOutput)
}

type EventSubscriptionAdvancedFilterStringNotInOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringNotInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringNotInOutput) ToEventSubscriptionAdvancedFilterStringNotInOutput() EventSubscriptionAdvancedFilterStringNotInOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotInOutput) ToEventSubscriptionAdvancedFilterStringNotInOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotInOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o EventSubscriptionAdvancedFilterStringNotInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringNotIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o EventSubscriptionAdvancedFilterStringNotInOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventSubscriptionAdvancedFilterStringNotIn) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type EventSubscriptionAdvancedFilterStringNotInArrayOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAdvancedFilterStringNotInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (o EventSubscriptionAdvancedFilterStringNotInArrayOutput) ToEventSubscriptionAdvancedFilterStringNotInArrayOutput() EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotInArrayOutput) ToEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(ctx context.Context) EventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o
}

func (o EventSubscriptionAdvancedFilterStringNotInArrayOutput) Index(i pulumi.IntInput) EventSubscriptionAdvancedFilterStringNotInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSubscriptionAdvancedFilterStringNotIn {
		return vs[0].([]EventSubscriptionAdvancedFilterStringNotIn)[vs[1].(int)]
	}).(EventSubscriptionAdvancedFilterStringNotInOutput)
}

type EventSubscriptionAzureFunctionEndpoint struct {
	// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
	FunctionId string `pulumi:"functionId"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
}

// EventSubscriptionAzureFunctionEndpointInput is an input type that accepts EventSubscriptionAzureFunctionEndpointArgs and EventSubscriptionAzureFunctionEndpointOutput values.
// You can construct a concrete instance of `EventSubscriptionAzureFunctionEndpointInput` via:
//
//          EventSubscriptionAzureFunctionEndpointArgs{...}
type EventSubscriptionAzureFunctionEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionAzureFunctionEndpointOutput() EventSubscriptionAzureFunctionEndpointOutput
	ToEventSubscriptionAzureFunctionEndpointOutputWithContext(context.Context) EventSubscriptionAzureFunctionEndpointOutput
}

type EventSubscriptionAzureFunctionEndpointArgs struct {
	// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
	FunctionId pulumi.StringInput `pulumi:"functionId"`
	// Maximum number of events per batch.
	MaxEventsPerBatch pulumi.IntPtrInput `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes pulumi.IntPtrInput `pulumi:"preferredBatchSizeInKilobytes"`
}

func (EventSubscriptionAzureFunctionEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (i EventSubscriptionAzureFunctionEndpointArgs) ToEventSubscriptionAzureFunctionEndpointOutput() EventSubscriptionAzureFunctionEndpointOutput {
	return i.ToEventSubscriptionAzureFunctionEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionAzureFunctionEndpointArgs) ToEventSubscriptionAzureFunctionEndpointOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAzureFunctionEndpointOutput)
}

func (i EventSubscriptionAzureFunctionEndpointArgs) ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput {
	return i.ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionAzureFunctionEndpointArgs) ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAzureFunctionEndpointOutput).ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx)
}

// EventSubscriptionAzureFunctionEndpointPtrInput is an input type that accepts EventSubscriptionAzureFunctionEndpointArgs, EventSubscriptionAzureFunctionEndpointPtr and EventSubscriptionAzureFunctionEndpointPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionAzureFunctionEndpointPtrInput` via:
//
//          EventSubscriptionAzureFunctionEndpointArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionAzureFunctionEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput
	ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput
}

type eventSubscriptionAzureFunctionEndpointPtrType EventSubscriptionAzureFunctionEndpointArgs

func EventSubscriptionAzureFunctionEndpointPtr(v *EventSubscriptionAzureFunctionEndpointArgs) EventSubscriptionAzureFunctionEndpointPtrInput {
	return (*eventSubscriptionAzureFunctionEndpointPtrType)(v)
}

func (*eventSubscriptionAzureFunctionEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionAzureFunctionEndpointPtrType) ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput {
	return i.ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionAzureFunctionEndpointPtrType) ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionAzureFunctionEndpointPtrOutput)
}

type EventSubscriptionAzureFunctionEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAzureFunctionEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (o EventSubscriptionAzureFunctionEndpointOutput) ToEventSubscriptionAzureFunctionEndpointOutput() EventSubscriptionAzureFunctionEndpointOutput {
	return o
}

func (o EventSubscriptionAzureFunctionEndpointOutput) ToEventSubscriptionAzureFunctionEndpointOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointOutput {
	return o
}

func (o EventSubscriptionAzureFunctionEndpointOutput) ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput {
	return o.ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionAzureFunctionEndpointOutput) ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionAzureFunctionEndpoint) *EventSubscriptionAzureFunctionEndpoint {
		return &v
	}).(EventSubscriptionAzureFunctionEndpointPtrOutput)
}

// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
func (o EventSubscriptionAzureFunctionEndpointOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionAzureFunctionEndpoint) string { return v.FunctionId }).(pulumi.StringOutput)
}

// Maximum number of events per batch.
func (o EventSubscriptionAzureFunctionEndpointOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSubscriptionAzureFunctionEndpoint) *int { return v.MaxEventsPerBatch }).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o EventSubscriptionAzureFunctionEndpointOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSubscriptionAzureFunctionEndpoint) *int { return v.PreferredBatchSizeInKilobytes }).(pulumi.IntPtrOutput)
}

type EventSubscriptionAzureFunctionEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionAzureFunctionEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (o EventSubscriptionAzureFunctionEndpointPtrOutput) ToEventSubscriptionAzureFunctionEndpointPtrOutput() EventSubscriptionAzureFunctionEndpointPtrOutput {
	return o
}

func (o EventSubscriptionAzureFunctionEndpointPtrOutput) ToEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionAzureFunctionEndpointPtrOutput {
	return o
}

func (o EventSubscriptionAzureFunctionEndpointPtrOutput) Elem() EventSubscriptionAzureFunctionEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionAzureFunctionEndpoint) EventSubscriptionAzureFunctionEndpoint { return *v }).(EventSubscriptionAzureFunctionEndpointOutput)
}

// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
func (o EventSubscriptionAzureFunctionEndpointPtrOutput) FunctionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionAzureFunctionEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.FunctionId
	}).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o EventSubscriptionAzureFunctionEndpointPtrOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionAzureFunctionEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.MaxEventsPerBatch
	}).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o EventSubscriptionAzureFunctionEndpointPtrOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionAzureFunctionEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.PreferredBatchSizeInKilobytes
	}).(pulumi.IntPtrOutput)
}

type EventSubscriptionEventhubEndpoint struct {
	// Specifies the id of the eventhub where the Event Subscription will receive events.
	EventhubId *string `pulumi:"eventhubId"`
}

// EventSubscriptionEventhubEndpointInput is an input type that accepts EventSubscriptionEventhubEndpointArgs and EventSubscriptionEventhubEndpointOutput values.
// You can construct a concrete instance of `EventSubscriptionEventhubEndpointInput` via:
//
//          EventSubscriptionEventhubEndpointArgs{...}
type EventSubscriptionEventhubEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionEventhubEndpointOutput() EventSubscriptionEventhubEndpointOutput
	ToEventSubscriptionEventhubEndpointOutputWithContext(context.Context) EventSubscriptionEventhubEndpointOutput
}

type EventSubscriptionEventhubEndpointArgs struct {
	// Specifies the id of the eventhub where the Event Subscription will receive events.
	EventhubId pulumi.StringPtrInput `pulumi:"eventhubId"`
}

func (EventSubscriptionEventhubEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionEventhubEndpoint)(nil)).Elem()
}

func (i EventSubscriptionEventhubEndpointArgs) ToEventSubscriptionEventhubEndpointOutput() EventSubscriptionEventhubEndpointOutput {
	return i.ToEventSubscriptionEventhubEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionEventhubEndpointArgs) ToEventSubscriptionEventhubEndpointOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionEventhubEndpointOutput)
}

func (i EventSubscriptionEventhubEndpointArgs) ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput {
	return i.ToEventSubscriptionEventhubEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionEventhubEndpointArgs) ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionEventhubEndpointOutput).ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx)
}

// EventSubscriptionEventhubEndpointPtrInput is an input type that accepts EventSubscriptionEventhubEndpointArgs, EventSubscriptionEventhubEndpointPtr and EventSubscriptionEventhubEndpointPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionEventhubEndpointPtrInput` via:
//
//          EventSubscriptionEventhubEndpointArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionEventhubEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput
	ToEventSubscriptionEventhubEndpointPtrOutputWithContext(context.Context) EventSubscriptionEventhubEndpointPtrOutput
}

type eventSubscriptionEventhubEndpointPtrType EventSubscriptionEventhubEndpointArgs

func EventSubscriptionEventhubEndpointPtr(v *EventSubscriptionEventhubEndpointArgs) EventSubscriptionEventhubEndpointPtrInput {
	return (*eventSubscriptionEventhubEndpointPtrType)(v)
}

func (*eventSubscriptionEventhubEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionEventhubEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionEventhubEndpointPtrType) ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput {
	return i.ToEventSubscriptionEventhubEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionEventhubEndpointPtrType) ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionEventhubEndpointPtrOutput)
}

type EventSubscriptionEventhubEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionEventhubEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionEventhubEndpoint)(nil)).Elem()
}

func (o EventSubscriptionEventhubEndpointOutput) ToEventSubscriptionEventhubEndpointOutput() EventSubscriptionEventhubEndpointOutput {
	return o
}

func (o EventSubscriptionEventhubEndpointOutput) ToEventSubscriptionEventhubEndpointOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointOutput {
	return o
}

func (o EventSubscriptionEventhubEndpointOutput) ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput {
	return o.ToEventSubscriptionEventhubEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionEventhubEndpointOutput) ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionEventhubEndpoint) *EventSubscriptionEventhubEndpoint {
		return &v
	}).(EventSubscriptionEventhubEndpointPtrOutput)
}

// Specifies the id of the eventhub where the Event Subscription will receive events.
func (o EventSubscriptionEventhubEndpointOutput) EventhubId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionEventhubEndpoint) *string { return v.EventhubId }).(pulumi.StringPtrOutput)
}

type EventSubscriptionEventhubEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionEventhubEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionEventhubEndpoint)(nil)).Elem()
}

func (o EventSubscriptionEventhubEndpointPtrOutput) ToEventSubscriptionEventhubEndpointPtrOutput() EventSubscriptionEventhubEndpointPtrOutput {
	return o
}

func (o EventSubscriptionEventhubEndpointPtrOutput) ToEventSubscriptionEventhubEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionEventhubEndpointPtrOutput {
	return o
}

func (o EventSubscriptionEventhubEndpointPtrOutput) Elem() EventSubscriptionEventhubEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionEventhubEndpoint) EventSubscriptionEventhubEndpoint { return *v }).(EventSubscriptionEventhubEndpointOutput)
}

// Specifies the id of the eventhub where the Event Subscription will receive events.
func (o EventSubscriptionEventhubEndpointPtrOutput) EventhubId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionEventhubEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.EventhubId
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionHybridConnectionEndpoint struct {
	// Specifies the id of the hybrid connection where the Event Subscription will receive events.
	HybridConnectionId *string `pulumi:"hybridConnectionId"`
}

// EventSubscriptionHybridConnectionEndpointInput is an input type that accepts EventSubscriptionHybridConnectionEndpointArgs and EventSubscriptionHybridConnectionEndpointOutput values.
// You can construct a concrete instance of `EventSubscriptionHybridConnectionEndpointInput` via:
//
//          EventSubscriptionHybridConnectionEndpointArgs{...}
type EventSubscriptionHybridConnectionEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionHybridConnectionEndpointOutput() EventSubscriptionHybridConnectionEndpointOutput
	ToEventSubscriptionHybridConnectionEndpointOutputWithContext(context.Context) EventSubscriptionHybridConnectionEndpointOutput
}

type EventSubscriptionHybridConnectionEndpointArgs struct {
	// Specifies the id of the hybrid connection where the Event Subscription will receive events.
	HybridConnectionId pulumi.StringPtrInput `pulumi:"hybridConnectionId"`
}

func (EventSubscriptionHybridConnectionEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionHybridConnectionEndpoint)(nil)).Elem()
}

func (i EventSubscriptionHybridConnectionEndpointArgs) ToEventSubscriptionHybridConnectionEndpointOutput() EventSubscriptionHybridConnectionEndpointOutput {
	return i.ToEventSubscriptionHybridConnectionEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionHybridConnectionEndpointArgs) ToEventSubscriptionHybridConnectionEndpointOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionHybridConnectionEndpointOutput)
}

func (i EventSubscriptionHybridConnectionEndpointArgs) ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput {
	return i.ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionHybridConnectionEndpointArgs) ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionHybridConnectionEndpointOutput).ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx)
}

// EventSubscriptionHybridConnectionEndpointPtrInput is an input type that accepts EventSubscriptionHybridConnectionEndpointArgs, EventSubscriptionHybridConnectionEndpointPtr and EventSubscriptionHybridConnectionEndpointPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionHybridConnectionEndpointPtrInput` via:
//
//          EventSubscriptionHybridConnectionEndpointArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionHybridConnectionEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput
	ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput
}

type eventSubscriptionHybridConnectionEndpointPtrType EventSubscriptionHybridConnectionEndpointArgs

func EventSubscriptionHybridConnectionEndpointPtr(v *EventSubscriptionHybridConnectionEndpointArgs) EventSubscriptionHybridConnectionEndpointPtrInput {
	return (*eventSubscriptionHybridConnectionEndpointPtrType)(v)
}

func (*eventSubscriptionHybridConnectionEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionHybridConnectionEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionHybridConnectionEndpointPtrType) ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput {
	return i.ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionHybridConnectionEndpointPtrType) ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionHybridConnectionEndpointPtrOutput)
}

type EventSubscriptionHybridConnectionEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionHybridConnectionEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionHybridConnectionEndpoint)(nil)).Elem()
}

func (o EventSubscriptionHybridConnectionEndpointOutput) ToEventSubscriptionHybridConnectionEndpointOutput() EventSubscriptionHybridConnectionEndpointOutput {
	return o
}

func (o EventSubscriptionHybridConnectionEndpointOutput) ToEventSubscriptionHybridConnectionEndpointOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointOutput {
	return o
}

func (o EventSubscriptionHybridConnectionEndpointOutput) ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput {
	return o.ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionHybridConnectionEndpointOutput) ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionHybridConnectionEndpoint) *EventSubscriptionHybridConnectionEndpoint {
		return &v
	}).(EventSubscriptionHybridConnectionEndpointPtrOutput)
}

// Specifies the id of the hybrid connection where the Event Subscription will receive events.
func (o EventSubscriptionHybridConnectionEndpointOutput) HybridConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionHybridConnectionEndpoint) *string { return v.HybridConnectionId }).(pulumi.StringPtrOutput)
}

type EventSubscriptionHybridConnectionEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionHybridConnectionEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionHybridConnectionEndpoint)(nil)).Elem()
}

func (o EventSubscriptionHybridConnectionEndpointPtrOutput) ToEventSubscriptionHybridConnectionEndpointPtrOutput() EventSubscriptionHybridConnectionEndpointPtrOutput {
	return o
}

func (o EventSubscriptionHybridConnectionEndpointPtrOutput) ToEventSubscriptionHybridConnectionEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionHybridConnectionEndpointPtrOutput {
	return o
}

func (o EventSubscriptionHybridConnectionEndpointPtrOutput) Elem() EventSubscriptionHybridConnectionEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionHybridConnectionEndpoint) EventSubscriptionHybridConnectionEndpoint {
		return *v
	}).(EventSubscriptionHybridConnectionEndpointOutput)
}

// Specifies the id of the hybrid connection where the Event Subscription will receive events.
func (o EventSubscriptionHybridConnectionEndpointPtrOutput) HybridConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionHybridConnectionEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.HybridConnectionId
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionRetryPolicy struct {
	// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. Defaults to `1440`. See [official documentation](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
	EventTimeToLive int `pulumi:"eventTimeToLive"`
	// Specifies the maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts int `pulumi:"maxDeliveryAttempts"`
}

// EventSubscriptionRetryPolicyInput is an input type that accepts EventSubscriptionRetryPolicyArgs and EventSubscriptionRetryPolicyOutput values.
// You can construct a concrete instance of `EventSubscriptionRetryPolicyInput` via:
//
//          EventSubscriptionRetryPolicyArgs{...}
type EventSubscriptionRetryPolicyInput interface {
	pulumi.Input

	ToEventSubscriptionRetryPolicyOutput() EventSubscriptionRetryPolicyOutput
	ToEventSubscriptionRetryPolicyOutputWithContext(context.Context) EventSubscriptionRetryPolicyOutput
}

type EventSubscriptionRetryPolicyArgs struct {
	// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. Defaults to `1440`. See [official documentation](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
	EventTimeToLive pulumi.IntInput `pulumi:"eventTimeToLive"`
	// Specifies the maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts pulumi.IntInput `pulumi:"maxDeliveryAttempts"`
}

func (EventSubscriptionRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyOutput() EventSubscriptionRetryPolicyOutput {
	return i.ToEventSubscriptionRetryPolicyOutputWithContext(context.Background())
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionRetryPolicyOutput)
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return i.ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionRetryPolicyArgs) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionRetryPolicyOutput).ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx)
}

// EventSubscriptionRetryPolicyPtrInput is an input type that accepts EventSubscriptionRetryPolicyArgs, EventSubscriptionRetryPolicyPtr and EventSubscriptionRetryPolicyPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionRetryPolicyPtrInput` via:
//
//          EventSubscriptionRetryPolicyArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionRetryPolicyPtrInput interface {
	pulumi.Input

	ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput
	ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Context) EventSubscriptionRetryPolicyPtrOutput
}

type eventSubscriptionRetryPolicyPtrType EventSubscriptionRetryPolicyArgs

func EventSubscriptionRetryPolicyPtr(v *EventSubscriptionRetryPolicyArgs) EventSubscriptionRetryPolicyPtrInput {
	return (*eventSubscriptionRetryPolicyPtrType)(v)
}

func (*eventSubscriptionRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (i *eventSubscriptionRetryPolicyPtrType) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return i.ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionRetryPolicyPtrType) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionRetryPolicyPtrOutput)
}

type EventSubscriptionRetryPolicyOutput struct{ *pulumi.OutputState }

func (EventSubscriptionRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyOutput() EventSubscriptionRetryPolicyOutput {
	return o
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyOutput {
	return o
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return o.ToEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionRetryPolicyOutput) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return o.ApplyT(func(v EventSubscriptionRetryPolicy) *EventSubscriptionRetryPolicy {
		return &v
	}).(EventSubscriptionRetryPolicyPtrOutput)
}

// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. Defaults to `1440`. See [official documentation](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
func (o EventSubscriptionRetryPolicyOutput) EventTimeToLive() pulumi.IntOutput {
	return o.ApplyT(func(v EventSubscriptionRetryPolicy) int { return v.EventTimeToLive }).(pulumi.IntOutput)
}

// Specifies the maximum number of delivery retry attempts for events.
func (o EventSubscriptionRetryPolicyOutput) MaxDeliveryAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v EventSubscriptionRetryPolicy) int { return v.MaxDeliveryAttempts }).(pulumi.IntOutput)
}

type EventSubscriptionRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionRetryPolicy)(nil)).Elem()
}

func (o EventSubscriptionRetryPolicyPtrOutput) ToEventSubscriptionRetryPolicyPtrOutput() EventSubscriptionRetryPolicyPtrOutput {
	return o
}

func (o EventSubscriptionRetryPolicyPtrOutput) ToEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) EventSubscriptionRetryPolicyPtrOutput {
	return o
}

func (o EventSubscriptionRetryPolicyPtrOutput) Elem() EventSubscriptionRetryPolicyOutput {
	return o.ApplyT(func(v *EventSubscriptionRetryPolicy) EventSubscriptionRetryPolicy { return *v }).(EventSubscriptionRetryPolicyOutput)
}

// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. Defaults to `1440`. See [official documentation](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
func (o EventSubscriptionRetryPolicyPtrOutput) EventTimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.EventTimeToLive
	}).(pulumi.IntPtrOutput)
}

// Specifies the maximum number of delivery retry attempts for events.
func (o EventSubscriptionRetryPolicyPtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

type EventSubscriptionStorageBlobDeadLetterDestination struct {
	// Specifies the id of the storage account id where the storage blob is located.
	StorageAccountId string `pulumi:"storageAccountId"`
	// Specifies the name of the Storage blob container that is the destination of the deadletter events.
	StorageBlobContainerName string `pulumi:"storageBlobContainerName"`
}

// EventSubscriptionStorageBlobDeadLetterDestinationInput is an input type that accepts EventSubscriptionStorageBlobDeadLetterDestinationArgs and EventSubscriptionStorageBlobDeadLetterDestinationOutput values.
// You can construct a concrete instance of `EventSubscriptionStorageBlobDeadLetterDestinationInput` via:
//
//          EventSubscriptionStorageBlobDeadLetterDestinationArgs{...}
type EventSubscriptionStorageBlobDeadLetterDestinationInput interface {
	pulumi.Input

	ToEventSubscriptionStorageBlobDeadLetterDestinationOutput() EventSubscriptionStorageBlobDeadLetterDestinationOutput
	ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(context.Context) EventSubscriptionStorageBlobDeadLetterDestinationOutput
}

type EventSubscriptionStorageBlobDeadLetterDestinationArgs struct {
	// Specifies the id of the storage account id where the storage blob is located.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
	// Specifies the name of the Storage blob container that is the destination of the deadletter events.
	StorageBlobContainerName pulumi.StringInput `pulumi:"storageBlobContainerName"`
}

func (EventSubscriptionStorageBlobDeadLetterDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationOutput() EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return i.ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageBlobDeadLetterDestinationOutput)
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return i.ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageBlobDeadLetterDestinationArgs) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageBlobDeadLetterDestinationOutput).ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx)
}

// EventSubscriptionStorageBlobDeadLetterDestinationPtrInput is an input type that accepts EventSubscriptionStorageBlobDeadLetterDestinationArgs, EventSubscriptionStorageBlobDeadLetterDestinationPtr and EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionStorageBlobDeadLetterDestinationPtrInput` via:
//
//          EventSubscriptionStorageBlobDeadLetterDestinationArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionStorageBlobDeadLetterDestinationPtrInput interface {
	pulumi.Input

	ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput
	ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput
}

type eventSubscriptionStorageBlobDeadLetterDestinationPtrType EventSubscriptionStorageBlobDeadLetterDestinationArgs

func EventSubscriptionStorageBlobDeadLetterDestinationPtr(v *EventSubscriptionStorageBlobDeadLetterDestinationArgs) EventSubscriptionStorageBlobDeadLetterDestinationPtrInput {
	return (*eventSubscriptionStorageBlobDeadLetterDestinationPtrType)(v)
}

func (*eventSubscriptionStorageBlobDeadLetterDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i *eventSubscriptionStorageBlobDeadLetterDestinationPtrType) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return i.ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionStorageBlobDeadLetterDestinationPtrType) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput)
}

type EventSubscriptionStorageBlobDeadLetterDestinationOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageBlobDeadLetterDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationOutput() EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o.ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o.ApplyT(func(v EventSubscriptionStorageBlobDeadLetterDestination) *EventSubscriptionStorageBlobDeadLetterDestination {
		return &v
	}).(EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput)
}

// Specifies the id of the storage account id where the storage blob is located.
func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageBlobDeadLetterDestination) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

// Specifies the name of the Storage blob container that is the destination of the deadletter events.
func (o EventSubscriptionStorageBlobDeadLetterDestinationOutput) StorageBlobContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageBlobDeadLetterDestination) string { return v.StorageBlobContainerName }).(pulumi.StringOutput)
}

type EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ToEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o
}

func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) Elem() EventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageBlobDeadLetterDestination) EventSubscriptionStorageBlobDeadLetterDestination {
		return *v
	}).(EventSubscriptionStorageBlobDeadLetterDestinationOutput)
}

// Specifies the id of the storage account id where the storage blob is located.
func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageBlobDeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the Storage blob container that is the destination of the deadletter events.
func (o EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) StorageBlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageBlobDeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return &v.StorageBlobContainerName
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionStorageQueueEndpoint struct {
	// Specifies the name of the storage queue where the Event Subscription will receive events.
	QueueName string `pulumi:"queueName"`
	// Specifies the id of the storage account id where the storage queue is located.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// EventSubscriptionStorageQueueEndpointInput is an input type that accepts EventSubscriptionStorageQueueEndpointArgs and EventSubscriptionStorageQueueEndpointOutput values.
// You can construct a concrete instance of `EventSubscriptionStorageQueueEndpointInput` via:
//
//          EventSubscriptionStorageQueueEndpointArgs{...}
type EventSubscriptionStorageQueueEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionStorageQueueEndpointOutput() EventSubscriptionStorageQueueEndpointOutput
	ToEventSubscriptionStorageQueueEndpointOutputWithContext(context.Context) EventSubscriptionStorageQueueEndpointOutput
}

type EventSubscriptionStorageQueueEndpointArgs struct {
	// Specifies the name of the storage queue where the Event Subscription will receive events.
	QueueName pulumi.StringInput `pulumi:"queueName"`
	// Specifies the id of the storage account id where the storage queue is located.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (EventSubscriptionStorageQueueEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointOutput() EventSubscriptionStorageQueueEndpointOutput {
	return i.ToEventSubscriptionStorageQueueEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageQueueEndpointOutput)
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return i.ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionStorageQueueEndpointArgs) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageQueueEndpointOutput).ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx)
}

// EventSubscriptionStorageQueueEndpointPtrInput is an input type that accepts EventSubscriptionStorageQueueEndpointArgs, EventSubscriptionStorageQueueEndpointPtr and EventSubscriptionStorageQueueEndpointPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionStorageQueueEndpointPtrInput` via:
//
//          EventSubscriptionStorageQueueEndpointArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionStorageQueueEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput
	ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Context) EventSubscriptionStorageQueueEndpointPtrOutput
}

type eventSubscriptionStorageQueueEndpointPtrType EventSubscriptionStorageQueueEndpointArgs

func EventSubscriptionStorageQueueEndpointPtr(v *EventSubscriptionStorageQueueEndpointArgs) EventSubscriptionStorageQueueEndpointPtrInput {
	return (*eventSubscriptionStorageQueueEndpointPtrType)(v)
}

func (*eventSubscriptionStorageQueueEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionStorageQueueEndpointPtrType) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return i.ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionStorageQueueEndpointPtrType) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionStorageQueueEndpointPtrOutput)
}

type EventSubscriptionStorageQueueEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageQueueEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointOutput() EventSubscriptionStorageQueueEndpointOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return o.ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionStorageQueueEndpointOutput) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionStorageQueueEndpoint) *EventSubscriptionStorageQueueEndpoint {
		return &v
	}).(EventSubscriptionStorageQueueEndpointPtrOutput)
}

// Specifies the name of the storage queue where the Event Subscription will receive events.
func (o EventSubscriptionStorageQueueEndpointOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageQueueEndpoint) string { return v.QueueName }).(pulumi.StringOutput)
}

// Specifies the id of the storage account id where the storage queue is located.
func (o EventSubscriptionStorageQueueEndpointOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionStorageQueueEndpoint) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type EventSubscriptionStorageQueueEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionStorageQueueEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (o EventSubscriptionStorageQueueEndpointPtrOutput) ToEventSubscriptionStorageQueueEndpointPtrOutput() EventSubscriptionStorageQueueEndpointPtrOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointPtrOutput) ToEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionStorageQueueEndpointPtrOutput {
	return o
}

func (o EventSubscriptionStorageQueueEndpointPtrOutput) Elem() EventSubscriptionStorageQueueEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageQueueEndpoint) EventSubscriptionStorageQueueEndpoint { return *v }).(EventSubscriptionStorageQueueEndpointOutput)
}

// Specifies the name of the storage queue where the Event Subscription will receive events.
func (o EventSubscriptionStorageQueueEndpointPtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageQueueEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.QueueName
	}).(pulumi.StringPtrOutput)
}

// Specifies the id of the storage account id where the storage queue is located.
func (o EventSubscriptionStorageQueueEndpointPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionStorageQueueEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionSubjectFilter struct {
	// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
	CaseSensitive *bool `pulumi:"caseSensitive"`
	// A string to filter events for an event subscription based on a resource path prefix.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// A string to filter events for an event subscription based on a resource path suffix.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// EventSubscriptionSubjectFilterInput is an input type that accepts EventSubscriptionSubjectFilterArgs and EventSubscriptionSubjectFilterOutput values.
// You can construct a concrete instance of `EventSubscriptionSubjectFilterInput` via:
//
//          EventSubscriptionSubjectFilterArgs{...}
type EventSubscriptionSubjectFilterInput interface {
	pulumi.Input

	ToEventSubscriptionSubjectFilterOutput() EventSubscriptionSubjectFilterOutput
	ToEventSubscriptionSubjectFilterOutputWithContext(context.Context) EventSubscriptionSubjectFilterOutput
}

type EventSubscriptionSubjectFilterArgs struct {
	// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
	CaseSensitive pulumi.BoolPtrInput `pulumi:"caseSensitive"`
	// A string to filter events for an event subscription based on a resource path prefix.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// A string to filter events for an event subscription based on a resource path suffix.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

func (EventSubscriptionSubjectFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterOutput() EventSubscriptionSubjectFilterOutput {
	return i.ToEventSubscriptionSubjectFilterOutputWithContext(context.Background())
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionSubjectFilterOutput)
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return i.ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionSubjectFilterArgs) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionSubjectFilterOutput).ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx)
}

// EventSubscriptionSubjectFilterPtrInput is an input type that accepts EventSubscriptionSubjectFilterArgs, EventSubscriptionSubjectFilterPtr and EventSubscriptionSubjectFilterPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionSubjectFilterPtrInput` via:
//
//          EventSubscriptionSubjectFilterArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionSubjectFilterPtrInput interface {
	pulumi.Input

	ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput
	ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Context) EventSubscriptionSubjectFilterPtrOutput
}

type eventSubscriptionSubjectFilterPtrType EventSubscriptionSubjectFilterArgs

func EventSubscriptionSubjectFilterPtr(v *EventSubscriptionSubjectFilterArgs) EventSubscriptionSubjectFilterPtrInput {
	return (*eventSubscriptionSubjectFilterPtrType)(v)
}

func (*eventSubscriptionSubjectFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (i *eventSubscriptionSubjectFilterPtrType) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return i.ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionSubjectFilterPtrType) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionSubjectFilterPtrOutput)
}

type EventSubscriptionSubjectFilterOutput struct{ *pulumi.OutputState }

func (EventSubscriptionSubjectFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterOutput() EventSubscriptionSubjectFilterOutput {
	return o
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterOutput {
	return o
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return o.ToEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionSubjectFilterOutput) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *EventSubscriptionSubjectFilter {
		return &v
	}).(EventSubscriptionSubjectFilterPtrOutput)
}

// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
func (o EventSubscriptionSubjectFilterOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *bool { return v.CaseSensitive }).(pulumi.BoolPtrOutput)
}

// A string to filter events for an event subscription based on a resource path prefix.
func (o EventSubscriptionSubjectFilterOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// A string to filter events for an event subscription based on a resource path suffix.
func (o EventSubscriptionSubjectFilterOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionSubjectFilter) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type EventSubscriptionSubjectFilterPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionSubjectFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionSubjectFilter)(nil)).Elem()
}

func (o EventSubscriptionSubjectFilterPtrOutput) ToEventSubscriptionSubjectFilterPtrOutput() EventSubscriptionSubjectFilterPtrOutput {
	return o
}

func (o EventSubscriptionSubjectFilterPtrOutput) ToEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) EventSubscriptionSubjectFilterPtrOutput {
	return o
}

func (o EventSubscriptionSubjectFilterPtrOutput) Elem() EventSubscriptionSubjectFilterOutput {
	return o.ApplyT(func(v *EventSubscriptionSubjectFilter) EventSubscriptionSubjectFilter { return *v }).(EventSubscriptionSubjectFilterOutput)
}

// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
func (o EventSubscriptionSubjectFilterPtrOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionSubjectFilter) *bool {
		if v == nil {
			return nil
		}
		return v.CaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// A string to filter events for an event subscription based on a resource path prefix.
func (o EventSubscriptionSubjectFilterPtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionSubjectFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// A string to filter events for an event subscription based on a resource path suffix.
func (o EventSubscriptionSubjectFilterPtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionSubjectFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

type EventSubscriptionWebhookEndpoint struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryAppIdOrUri *string `pulumi:"activeDirectoryAppIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryTenantId *string `pulumi:"activeDirectoryTenantId"`
	// The base url of the webhook where the Event Subscription will receive events.
	BaseUrl *string `pulumi:"baseUrl"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
	// Specifies the url of the webhook where the Event Subscription will receive events.
	Url string `pulumi:"url"`
}

// EventSubscriptionWebhookEndpointInput is an input type that accepts EventSubscriptionWebhookEndpointArgs and EventSubscriptionWebhookEndpointOutput values.
// You can construct a concrete instance of `EventSubscriptionWebhookEndpointInput` via:
//
//          EventSubscriptionWebhookEndpointArgs{...}
type EventSubscriptionWebhookEndpointInput interface {
	pulumi.Input

	ToEventSubscriptionWebhookEndpointOutput() EventSubscriptionWebhookEndpointOutput
	ToEventSubscriptionWebhookEndpointOutputWithContext(context.Context) EventSubscriptionWebhookEndpointOutput
}

type EventSubscriptionWebhookEndpointArgs struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryAppIdOrUri pulumi.StringPtrInput `pulumi:"activeDirectoryAppIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryTenantId pulumi.StringPtrInput `pulumi:"activeDirectoryTenantId"`
	// The base url of the webhook where the Event Subscription will receive events.
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// Maximum number of events per batch.
	MaxEventsPerBatch pulumi.IntPtrInput `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes pulumi.IntPtrInput `pulumi:"preferredBatchSizeInKilobytes"`
	// Specifies the url of the webhook where the Event Subscription will receive events.
	Url pulumi.StringInput `pulumi:"url"`
}

func (EventSubscriptionWebhookEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointOutput() EventSubscriptionWebhookEndpointOutput {
	return i.ToEventSubscriptionWebhookEndpointOutputWithContext(context.Background())
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionWebhookEndpointOutput)
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return i.ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (i EventSubscriptionWebhookEndpointArgs) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionWebhookEndpointOutput).ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx)
}

// EventSubscriptionWebhookEndpointPtrInput is an input type that accepts EventSubscriptionWebhookEndpointArgs, EventSubscriptionWebhookEndpointPtr and EventSubscriptionWebhookEndpointPtrOutput values.
// You can construct a concrete instance of `EventSubscriptionWebhookEndpointPtrInput` via:
//
//          EventSubscriptionWebhookEndpointArgs{...}
//
//  or:
//
//          nil
type EventSubscriptionWebhookEndpointPtrInput interface {
	pulumi.Input

	ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput
	ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Context) EventSubscriptionWebhookEndpointPtrOutput
}

type eventSubscriptionWebhookEndpointPtrType EventSubscriptionWebhookEndpointArgs

func EventSubscriptionWebhookEndpointPtr(v *EventSubscriptionWebhookEndpointArgs) EventSubscriptionWebhookEndpointPtrInput {
	return (*eventSubscriptionWebhookEndpointPtrType)(v)
}

func (*eventSubscriptionWebhookEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (i *eventSubscriptionWebhookEndpointPtrType) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return i.ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (i *eventSubscriptionWebhookEndpointPtrType) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSubscriptionWebhookEndpointPtrOutput)
}

type EventSubscriptionWebhookEndpointOutput struct{ *pulumi.OutputState }

func (EventSubscriptionWebhookEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointOutput() EventSubscriptionWebhookEndpointOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return o.ToEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (o EventSubscriptionWebhookEndpointOutput) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *EventSubscriptionWebhookEndpoint {
		return &v
	}).(EventSubscriptionWebhookEndpointPtrOutput)
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o EventSubscriptionWebhookEndpointOutput) ActiveDirectoryAppIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *string { return v.ActiveDirectoryAppIdOrUri }).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o EventSubscriptionWebhookEndpointOutput) ActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *string { return v.ActiveDirectoryTenantId }).(pulumi.StringPtrOutput)
}

// The base url of the webhook where the Event Subscription will receive events.
func (o EventSubscriptionWebhookEndpointOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o EventSubscriptionWebhookEndpointOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *int { return v.MaxEventsPerBatch }).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o EventSubscriptionWebhookEndpointOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) *int { return v.PreferredBatchSizeInKilobytes }).(pulumi.IntPtrOutput)
}

// Specifies the url of the webhook where the Event Subscription will receive events.
func (o EventSubscriptionWebhookEndpointOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v EventSubscriptionWebhookEndpoint) string { return v.Url }).(pulumi.StringOutput)
}

type EventSubscriptionWebhookEndpointPtrOutput struct{ *pulumi.OutputState }

func (EventSubscriptionWebhookEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (o EventSubscriptionWebhookEndpointPtrOutput) ToEventSubscriptionWebhookEndpointPtrOutput() EventSubscriptionWebhookEndpointPtrOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointPtrOutput) ToEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) EventSubscriptionWebhookEndpointPtrOutput {
	return o
}

func (o EventSubscriptionWebhookEndpointPtrOutput) Elem() EventSubscriptionWebhookEndpointOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) EventSubscriptionWebhookEndpoint { return *v }).(EventSubscriptionWebhookEndpointOutput)
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o EventSubscriptionWebhookEndpointPtrOutput) ActiveDirectoryAppIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryAppIdOrUri
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o EventSubscriptionWebhookEndpointPtrOutput) ActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryTenantId
	}).(pulumi.StringPtrOutput)
}

// The base url of the webhook where the Event Subscription will receive events.
func (o EventSubscriptionWebhookEndpointPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o EventSubscriptionWebhookEndpointPtrOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.MaxEventsPerBatch
	}).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o EventSubscriptionWebhookEndpointPtrOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.PreferredBatchSizeInKilobytes
	}).(pulumi.IntPtrOutput)
}

// Specifies the url of the webhook where the Event Subscription will receive events.
func (o EventSubscriptionWebhookEndpointPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type SystemTopicEventSubscriptionAdvancedFilter struct {
	// Compares a value of an event using a single boolean value.
	BoolEquals []SystemTopicEventSubscriptionAdvancedFilterBoolEqual `pulumi:"boolEquals"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThanOrEquals []SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqual `pulumi:"numberGreaterThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThans []SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThan `pulumi:"numberGreaterThans"`
	// Compares a value of an event using multiple floating point numbers.
	NumberIns []SystemTopicEventSubscriptionAdvancedFilterNumberIn `pulumi:"numberIns"`
	// Compares a value of an event using a single floating point number.
	NumberLessThanOrEquals []SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqual `pulumi:"numberLessThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberLessThans []SystemTopicEventSubscriptionAdvancedFilterNumberLessThan `pulumi:"numberLessThans"`
	// Compares a value of an event using multiple floating point numbers.
	NumberNotIns []SystemTopicEventSubscriptionAdvancedFilterNumberNotIn `pulumi:"numberNotIns"`
	// Compares a value of an event using multiple string values.
	StringBeginsWiths []SystemTopicEventSubscriptionAdvancedFilterStringBeginsWith `pulumi:"stringBeginsWiths"`
	// Compares a value of an event using multiple string values.
	StringContains []SystemTopicEventSubscriptionAdvancedFilterStringContain `pulumi:"stringContains"`
	// Compares a value of an event using multiple string values.
	StringEndsWiths []SystemTopicEventSubscriptionAdvancedFilterStringEndsWith `pulumi:"stringEndsWiths"`
	// Compares a value of an event using multiple string values.
	StringIns []SystemTopicEventSubscriptionAdvancedFilterStringIn `pulumi:"stringIns"`
	// Compares a value of an event using multiple string values.
	StringNotIns []SystemTopicEventSubscriptionAdvancedFilterStringNotIn `pulumi:"stringNotIns"`
}

// SystemTopicEventSubscriptionAdvancedFilterInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterArgs and SystemTopicEventSubscriptionAdvancedFilterOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterArgs{...}
type SystemTopicEventSubscriptionAdvancedFilterInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterOutput() SystemTopicEventSubscriptionAdvancedFilterOutput
	ToSystemTopicEventSubscriptionAdvancedFilterOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterOutput
}

type SystemTopicEventSubscriptionAdvancedFilterArgs struct {
	// Compares a value of an event using a single boolean value.
	BoolEquals SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayInput `pulumi:"boolEquals"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThanOrEquals SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput `pulumi:"numberGreaterThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberGreaterThans SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayInput `pulumi:"numberGreaterThans"`
	// Compares a value of an event using multiple floating point numbers.
	NumberIns SystemTopicEventSubscriptionAdvancedFilterNumberInArrayInput `pulumi:"numberIns"`
	// Compares a value of an event using a single floating point number.
	NumberLessThanOrEquals SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput `pulumi:"numberLessThanOrEquals"`
	// Compares a value of an event using a single floating point number.
	NumberLessThans SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayInput `pulumi:"numberLessThans"`
	// Compares a value of an event using multiple floating point numbers.
	NumberNotIns SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayInput `pulumi:"numberNotIns"`
	// Compares a value of an event using multiple string values.
	StringBeginsWiths SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayInput `pulumi:"stringBeginsWiths"`
	// Compares a value of an event using multiple string values.
	StringContains SystemTopicEventSubscriptionAdvancedFilterStringContainArrayInput `pulumi:"stringContains"`
	// Compares a value of an event using multiple string values.
	StringEndsWiths SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayInput `pulumi:"stringEndsWiths"`
	// Compares a value of an event using multiple string values.
	StringIns SystemTopicEventSubscriptionAdvancedFilterStringInArrayInput `pulumi:"stringIns"`
	// Compares a value of an event using multiple string values.
	StringNotIns SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayInput `pulumi:"stringNotIns"`
}

func (SystemTopicEventSubscriptionAdvancedFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterArgs) ToSystemTopicEventSubscriptionAdvancedFilterOutput() SystemTopicEventSubscriptionAdvancedFilterOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterArgs) ToSystemTopicEventSubscriptionAdvancedFilterOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterOutput)
}

func (i SystemTopicEventSubscriptionAdvancedFilterArgs) ToSystemTopicEventSubscriptionAdvancedFilterPtrOutput() SystemTopicEventSubscriptionAdvancedFilterPtrOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterArgs) ToSystemTopicEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterOutput).ToSystemTopicEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx)
}

// SystemTopicEventSubscriptionAdvancedFilterPtrInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterArgs, SystemTopicEventSubscriptionAdvancedFilterPtr and SystemTopicEventSubscriptionAdvancedFilterPtrOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterPtrInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterArgs{...}
//
//  or:
//
//          nil
type SystemTopicEventSubscriptionAdvancedFilterPtrInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterPtrOutput() SystemTopicEventSubscriptionAdvancedFilterPtrOutput
	ToSystemTopicEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterPtrOutput
}

type systemTopicEventSubscriptionAdvancedFilterPtrType SystemTopicEventSubscriptionAdvancedFilterArgs

func SystemTopicEventSubscriptionAdvancedFilterPtr(v *SystemTopicEventSubscriptionAdvancedFilterArgs) SystemTopicEventSubscriptionAdvancedFilterPtrInput {
	return (*systemTopicEventSubscriptionAdvancedFilterPtrType)(v)
}

func (*systemTopicEventSubscriptionAdvancedFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopicEventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (i *systemTopicEventSubscriptionAdvancedFilterPtrType) ToSystemTopicEventSubscriptionAdvancedFilterPtrOutput() SystemTopicEventSubscriptionAdvancedFilterPtrOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Background())
}

func (i *systemTopicEventSubscriptionAdvancedFilterPtrType) ToSystemTopicEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterPtrOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterOutput) ToSystemTopicEventSubscriptionAdvancedFilterOutput() SystemTopicEventSubscriptionAdvancedFilterOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterOutput) ToSystemTopicEventSubscriptionAdvancedFilterOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterOutput) ToSystemTopicEventSubscriptionAdvancedFilterPtrOutput() SystemTopicEventSubscriptionAdvancedFilterPtrOutput {
	return o.ToSystemTopicEventSubscriptionAdvancedFilterPtrOutputWithContext(context.Background())
}

func (o SystemTopicEventSubscriptionAdvancedFilterOutput) ToSystemTopicEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilter) *SystemTopicEventSubscriptionAdvancedFilter {
		return &v
	}).(SystemTopicEventSubscriptionAdvancedFilterPtrOutput)
}

// Compares a value of an event using a single boolean value.
func (o SystemTopicEventSubscriptionAdvancedFilterOutput) BoolEquals() SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterBoolEqual {
		return v.BoolEquals
	}).(SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o SystemTopicEventSubscriptionAdvancedFilterOutput) NumberGreaterThanOrEquals() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqual {
		return v.NumberGreaterThanOrEquals
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o SystemTopicEventSubscriptionAdvancedFilterOutput) NumberGreaterThans() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThan {
		return v.NumberGreaterThans
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o SystemTopicEventSubscriptionAdvancedFilterOutput) NumberIns() SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterNumberIn {
		return v.NumberIns
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o SystemTopicEventSubscriptionAdvancedFilterOutput) NumberLessThanOrEquals() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqual {
		return v.NumberLessThanOrEquals
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o SystemTopicEventSubscriptionAdvancedFilterOutput) NumberLessThans() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterNumberLessThan {
		return v.NumberLessThans
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o SystemTopicEventSubscriptionAdvancedFilterOutput) NumberNotIns() SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterNumberNotIn {
		return v.NumberNotIns
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o SystemTopicEventSubscriptionAdvancedFilterOutput) StringBeginsWiths() SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterStringBeginsWith {
		return v.StringBeginsWiths
	}).(SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o SystemTopicEventSubscriptionAdvancedFilterOutput) StringContains() SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterStringContain {
		return v.StringContains
	}).(SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o SystemTopicEventSubscriptionAdvancedFilterOutput) StringEndsWiths() SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterStringEndsWith {
		return v.StringEndsWiths
	}).(SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o SystemTopicEventSubscriptionAdvancedFilterOutput) StringIns() SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterStringIn {
		return v.StringIns
	}).(SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o SystemTopicEventSubscriptionAdvancedFilterOutput) StringNotIns() SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterStringNotIn {
		return v.StringNotIns
	}).(SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterPtrOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopicEventSubscriptionAdvancedFilter)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) ToSystemTopicEventSubscriptionAdvancedFilterPtrOutput() SystemTopicEventSubscriptionAdvancedFilterPtrOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) ToSystemTopicEventSubscriptionAdvancedFilterPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterPtrOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) Elem() SystemTopicEventSubscriptionAdvancedFilterOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAdvancedFilter) SystemTopicEventSubscriptionAdvancedFilter {
		return *v
	}).(SystemTopicEventSubscriptionAdvancedFilterOutput)
}

// Compares a value of an event using a single boolean value.
func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) BoolEquals() SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterBoolEqual {
		if v == nil {
			return nil
		}
		return v.BoolEquals
	}).(SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) NumberGreaterThanOrEquals() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqual {
		if v == nil {
			return nil
		}
		return v.NumberGreaterThanOrEquals
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) NumberGreaterThans() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThan {
		if v == nil {
			return nil
		}
		return v.NumberGreaterThans
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) NumberIns() SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterNumberIn {
		if v == nil {
			return nil
		}
		return v.NumberIns
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) NumberLessThanOrEquals() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqual {
		if v == nil {
			return nil
		}
		return v.NumberLessThanOrEquals
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput)
}

// Compares a value of an event using a single floating point number.
func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) NumberLessThans() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterNumberLessThan {
		if v == nil {
			return nil
		}
		return v.NumberLessThans
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput)
}

// Compares a value of an event using multiple floating point numbers.
func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) NumberNotIns() SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterNumberNotIn {
		if v == nil {
			return nil
		}
		return v.NumberNotIns
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) StringBeginsWiths() SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterStringBeginsWith {
		if v == nil {
			return nil
		}
		return v.StringBeginsWiths
	}).(SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) StringContains() SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterStringContain {
		if v == nil {
			return nil
		}
		return v.StringContains
	}).(SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) StringEndsWiths() SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterStringEndsWith {
		if v == nil {
			return nil
		}
		return v.StringEndsWiths
	}).(SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) StringIns() SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterStringIn {
		if v == nil {
			return nil
		}
		return v.StringIns
	}).(SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput)
}

// Compares a value of an event using multiple string values.
func (o SystemTopicEventSubscriptionAdvancedFilterPtrOutput) StringNotIns() SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAdvancedFilter) []SystemTopicEventSubscriptionAdvancedFilterStringNotIn {
		if v == nil {
			return nil
		}
		return v.StringNotIns
	}).(SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterBoolEqual struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value bool `pulumi:"value"`
}

// SystemTopicEventSubscriptionAdvancedFilterBoolEqualInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterBoolEqualArgs and SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterBoolEqualInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterBoolEqualArgs{...}
type SystemTopicEventSubscriptionAdvancedFilterBoolEqualInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput() SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput
	ToSystemTopicEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput
}

type SystemTopicEventSubscriptionAdvancedFilterBoolEqualArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.BoolInput `pulumi:"value"`
}

func (SystemTopicEventSubscriptionAdvancedFilterBoolEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterBoolEqualArgs) ToSystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput() SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterBoolEqualArgs) ToSystemTopicEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput)
}

// SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterBoolEqualArray and SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterBoolEqualArray{ SystemTopicEventSubscriptionAdvancedFilterBoolEqualArgs{...} }
type SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput() SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput
	ToSystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput
}

type SystemTopicEventSubscriptionAdvancedFilterBoolEqualArray []SystemTopicEventSubscriptionAdvancedFilterBoolEqualInput

func (SystemTopicEventSubscriptionAdvancedFilterBoolEqualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterBoolEqualArray) ToSystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput() SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterBoolEqualArray) ToSystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput) ToSystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput() SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput) ToSystemTopicEventSubscriptionAdvancedFilterBoolEqualOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterBoolEqual) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput) Value() pulumi.BoolOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterBoolEqual) bool { return v.Value }).(pulumi.BoolOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterBoolEqual)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput() SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput) Index(i pulumi.IntInput) SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemTopicEventSubscriptionAdvancedFilterBoolEqual {
		return vs[0].([]SystemTopicEventSubscriptionAdvancedFilterBoolEqual)[vs[1].(int)]
	}).(SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThan struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value float64 `pulumi:"value"`
}

// SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArgs and SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArgs{...}
type SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput
	ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput
}

type SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArgs) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArgs) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput)
}

// SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArray and SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArray{ SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArgs{...} }
type SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput
	ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput
}

type SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArray []SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanInput

func (SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArray) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArray) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThan) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThan) float64 { return v.Value }).(pulumi.Float64Output)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThan)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput) Index(i pulumi.IntInput) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThan {
		return vs[0].([]SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThan)[vs[1].(int)]
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqual struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value float64 `pulumi:"value"`
}

// SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs and SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs{...}
type SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput
	ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput
}

type SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput)
}

// SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray and SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray{ SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArgs{...} }
type SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput
	ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput
}

type SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray []SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualInput

func (SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArray) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqual) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqual) float64 { return v.Value }).(pulumi.Float64Output)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput) Index(i pulumi.IntInput) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqual {
		return vs[0].([]SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqual)[vs[1].(int)]
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []float64 `pulumi:"values"`
}

// SystemTopicEventSubscriptionAdvancedFilterNumberInInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterNumberInArgs and SystemTopicEventSubscriptionAdvancedFilterNumberInOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterNumberInInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterNumberInArgs{...}
type SystemTopicEventSubscriptionAdvancedFilterNumberInInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterNumberInOutput() SystemTopicEventSubscriptionAdvancedFilterNumberInOutput
	ToSystemTopicEventSubscriptionAdvancedFilterNumberInOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberInOutput
}

type SystemTopicEventSubscriptionAdvancedFilterNumberInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (SystemTopicEventSubscriptionAdvancedFilterNumberInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberInArgs) ToSystemTopicEventSubscriptionAdvancedFilterNumberInOutput() SystemTopicEventSubscriptionAdvancedFilterNumberInOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterNumberInOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberInArgs) ToSystemTopicEventSubscriptionAdvancedFilterNumberInOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterNumberInOutput)
}

// SystemTopicEventSubscriptionAdvancedFilterNumberInArrayInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterNumberInArray and SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterNumberInArrayInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterNumberInArray{ SystemTopicEventSubscriptionAdvancedFilterNumberInArgs{...} }
type SystemTopicEventSubscriptionAdvancedFilterNumberInArrayInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput
	ToSystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput
}

type SystemTopicEventSubscriptionAdvancedFilterNumberInArray []SystemTopicEventSubscriptionAdvancedFilterNumberInInput

func (SystemTopicEventSubscriptionAdvancedFilterNumberInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberInArray) ToSystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberInArray) ToSystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberInOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterNumberInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberInOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberInOutput() SystemTopicEventSubscriptionAdvancedFilterNumberInOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberInOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberInOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberInOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o SystemTopicEventSubscriptionAdvancedFilterNumberInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterNumberIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o SystemTopicEventSubscriptionAdvancedFilterNumberInOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterNumberIn) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterNumberIn)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput) Index(i pulumi.IntInput) SystemTopicEventSubscriptionAdvancedFilterNumberInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemTopicEventSubscriptionAdvancedFilterNumberIn {
		return vs[0].([]SystemTopicEventSubscriptionAdvancedFilterNumberIn)[vs[1].(int)]
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberInOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberLessThan struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value float64 `pulumi:"value"`
}

// SystemTopicEventSubscriptionAdvancedFilterNumberLessThanInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArgs and SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterNumberLessThanInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArgs{...}
type SystemTopicEventSubscriptionAdvancedFilterNumberLessThanInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput
	ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput
}

type SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArgs) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArgs) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput)
}

// SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArray and SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArray{ SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArgs{...} }
type SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput
	ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput
}

type SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArray []SystemTopicEventSubscriptionAdvancedFilterNumberLessThanInput

func (SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArray) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArray) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterNumberLessThan) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterNumberLessThan) float64 { return v.Value }).(pulumi.Float64Output)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterNumberLessThan)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput) Index(i pulumi.IntInput) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemTopicEventSubscriptionAdvancedFilterNumberLessThan {
		return vs[0].([]SystemTopicEventSubscriptionAdvancedFilterNumberLessThan)[vs[1].(int)]
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqual struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value float64 `pulumi:"value"`
}

// SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs and SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs{...}
type SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput
	ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput
}

type SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies a single value to compare to when using a single value operator.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput)
}

// SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArray and SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArray{ SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArgs{...} }
type SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput
	ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput
}

type SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArray []SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualInput

func (SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArray) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArray) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqual) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies a single value to compare to when using a single value operator.
func (o SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqual) float64 { return v.Value }).(pulumi.Float64Output)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqual)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput) Index(i pulumi.IntInput) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqual {
		return vs[0].([]SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqual)[vs[1].(int)]
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberNotIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []float64 `pulumi:"values"`
}

// SystemTopicEventSubscriptionAdvancedFilterNumberNotInInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterNumberNotInArgs and SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterNumberNotInInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterNumberNotInArgs{...}
type SystemTopicEventSubscriptionAdvancedFilterNumberNotInInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput() SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput
	ToSystemTopicEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput
}

type SystemTopicEventSubscriptionAdvancedFilterNumberNotInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.Float64ArrayInput `pulumi:"values"`
}

func (SystemTopicEventSubscriptionAdvancedFilterNumberNotInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberNotInArgs) ToSystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput() SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberNotInArgs) ToSystemTopicEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput)
}

// SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterNumberNotInArray and SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterNumberNotInArray{ SystemTopicEventSubscriptionAdvancedFilterNumberNotInArgs{...} }
type SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput
	ToSystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput
}

type SystemTopicEventSubscriptionAdvancedFilterNumberNotInArray []SystemTopicEventSubscriptionAdvancedFilterNumberNotInInput

func (SystemTopicEventSubscriptionAdvancedFilterNumberNotInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberNotInArray) ToSystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterNumberNotInArray) ToSystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput() SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberNotInOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterNumberNotIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput) Values() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterNumberNotIn) []float64 { return v.Values }).(pulumi.Float64ArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterNumberNotIn)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput() SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput) Index(i pulumi.IntInput) SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemTopicEventSubscriptionAdvancedFilterNumberNotIn {
		return vs[0].([]SystemTopicEventSubscriptionAdvancedFilterNumberNotIn)[vs[1].(int)]
	}).(SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringBeginsWith struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArgs and SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArgs{...}
type SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput() SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput
	ToSystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput
}

type SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArgs) ToSystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput() SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArgs) ToSystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput)
}

// SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArray and SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArray{ SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArgs{...} }
type SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput
	ToSystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput
}

type SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArray []SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithInput

func (SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArray) ToSystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArray) ToSystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput() SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterStringBeginsWith) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterStringBeginsWith) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterStringBeginsWith)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput) Index(i pulumi.IntInput) SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemTopicEventSubscriptionAdvancedFilterStringBeginsWith {
		return vs[0].([]SystemTopicEventSubscriptionAdvancedFilterStringBeginsWith)[vs[1].(int)]
	}).(SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringContain struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// SystemTopicEventSubscriptionAdvancedFilterStringContainInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterStringContainArgs and SystemTopicEventSubscriptionAdvancedFilterStringContainOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterStringContainInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterStringContainArgs{...}
type SystemTopicEventSubscriptionAdvancedFilterStringContainInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterStringContainOutput() SystemTopicEventSubscriptionAdvancedFilterStringContainOutput
	ToSystemTopicEventSubscriptionAdvancedFilterStringContainOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterStringContainOutput
}

type SystemTopicEventSubscriptionAdvancedFilterStringContainArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SystemTopicEventSubscriptionAdvancedFilterStringContainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringContainArgs) ToSystemTopicEventSubscriptionAdvancedFilterStringContainOutput() SystemTopicEventSubscriptionAdvancedFilterStringContainOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterStringContainOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringContainArgs) ToSystemTopicEventSubscriptionAdvancedFilterStringContainOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringContainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterStringContainOutput)
}

// SystemTopicEventSubscriptionAdvancedFilterStringContainArrayInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterStringContainArray and SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterStringContainArrayInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterStringContainArray{ SystemTopicEventSubscriptionAdvancedFilterStringContainArgs{...} }
type SystemTopicEventSubscriptionAdvancedFilterStringContainArrayInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput
	ToSystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput
}

type SystemTopicEventSubscriptionAdvancedFilterStringContainArray []SystemTopicEventSubscriptionAdvancedFilterStringContainInput

func (SystemTopicEventSubscriptionAdvancedFilterStringContainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringContainArray) ToSystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringContainArray) ToSystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringContainOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterStringContainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringContainOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringContainOutput() SystemTopicEventSubscriptionAdvancedFilterStringContainOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringContainOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringContainOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringContainOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o SystemTopicEventSubscriptionAdvancedFilterStringContainOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterStringContain) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o SystemTopicEventSubscriptionAdvancedFilterStringContainOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterStringContain) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterStringContain)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput) Index(i pulumi.IntInput) SystemTopicEventSubscriptionAdvancedFilterStringContainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemTopicEventSubscriptionAdvancedFilterStringContain {
		return vs[0].([]SystemTopicEventSubscriptionAdvancedFilterStringContain)[vs[1].(int)]
	}).(SystemTopicEventSubscriptionAdvancedFilterStringContainOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringEndsWith struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// SystemTopicEventSubscriptionAdvancedFilterStringEndsWithInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArgs and SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterStringEndsWithInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArgs{...}
type SystemTopicEventSubscriptionAdvancedFilterStringEndsWithInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput() SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput
	ToSystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput
}

type SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArgs) ToSystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput() SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArgs) ToSystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput)
}

// SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArray and SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArray{ SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArgs{...} }
type SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput
	ToSystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput
}

type SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArray []SystemTopicEventSubscriptionAdvancedFilterStringEndsWithInput

func (SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArray) ToSystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArray) ToSystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput() SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterStringEndsWith) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterStringEndsWith) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterStringEndsWith)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput) Index(i pulumi.IntInput) SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemTopicEventSubscriptionAdvancedFilterStringEndsWith {
		return vs[0].([]SystemTopicEventSubscriptionAdvancedFilterStringEndsWith)[vs[1].(int)]
	}).(SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// SystemTopicEventSubscriptionAdvancedFilterStringInInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterStringInArgs and SystemTopicEventSubscriptionAdvancedFilterStringInOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterStringInInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterStringInArgs{...}
type SystemTopicEventSubscriptionAdvancedFilterStringInInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterStringInOutput() SystemTopicEventSubscriptionAdvancedFilterStringInOutput
	ToSystemTopicEventSubscriptionAdvancedFilterStringInOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterStringInOutput
}

type SystemTopicEventSubscriptionAdvancedFilterStringInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SystemTopicEventSubscriptionAdvancedFilterStringInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringInArgs) ToSystemTopicEventSubscriptionAdvancedFilterStringInOutput() SystemTopicEventSubscriptionAdvancedFilterStringInOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterStringInOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringInArgs) ToSystemTopicEventSubscriptionAdvancedFilterStringInOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterStringInOutput)
}

// SystemTopicEventSubscriptionAdvancedFilterStringInArrayInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterStringInArray and SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterStringInArrayInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterStringInArray{ SystemTopicEventSubscriptionAdvancedFilterStringInArgs{...} }
type SystemTopicEventSubscriptionAdvancedFilterStringInArrayInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput
	ToSystemTopicEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput
}

type SystemTopicEventSubscriptionAdvancedFilterStringInArray []SystemTopicEventSubscriptionAdvancedFilterStringInInput

func (SystemTopicEventSubscriptionAdvancedFilterStringInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringInArray) ToSystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringInArray) ToSystemTopicEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringInOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterStringInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringInOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringInOutput() SystemTopicEventSubscriptionAdvancedFilterStringInOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringInOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringInOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringInOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o SystemTopicEventSubscriptionAdvancedFilterStringInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterStringIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o SystemTopicEventSubscriptionAdvancedFilterStringInOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterStringIn) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterStringIn)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringInArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput) Index(i pulumi.IntInput) SystemTopicEventSubscriptionAdvancedFilterStringInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemTopicEventSubscriptionAdvancedFilterStringIn {
		return vs[0].([]SystemTopicEventSubscriptionAdvancedFilterStringIn)[vs[1].(int)]
	}).(SystemTopicEventSubscriptionAdvancedFilterStringInOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringNotIn struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key string `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values []string `pulumi:"values"`
}

// SystemTopicEventSubscriptionAdvancedFilterStringNotInInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterStringNotInArgs and SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterStringNotInInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterStringNotInArgs{...}
type SystemTopicEventSubscriptionAdvancedFilterStringNotInInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterStringNotInOutput() SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput
	ToSystemTopicEventSubscriptionAdvancedFilterStringNotInOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput
}

type SystemTopicEventSubscriptionAdvancedFilterStringNotInArgs struct {
	// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
	Key pulumi.StringInput `pulumi:"key"`
	// Specifies an array of values to compare to when using a multiple values operator.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SystemTopicEventSubscriptionAdvancedFilterStringNotInArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringNotInArgs) ToSystemTopicEventSubscriptionAdvancedFilterStringNotInOutput() SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterStringNotInOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringNotInArgs) ToSystemTopicEventSubscriptionAdvancedFilterStringNotInOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput)
}

// SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayInput is an input type that accepts SystemTopicEventSubscriptionAdvancedFilterStringNotInArray and SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayInput` via:
//
//          SystemTopicEventSubscriptionAdvancedFilterStringNotInArray{ SystemTopicEventSubscriptionAdvancedFilterStringNotInArgs{...} }
type SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput
	ToSystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(context.Context) SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput
}

type SystemTopicEventSubscriptionAdvancedFilterStringNotInArray []SystemTopicEventSubscriptionAdvancedFilterStringNotInInput

func (SystemTopicEventSubscriptionAdvancedFilterStringNotInArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringNotInArray) ToSystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return i.ToSystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAdvancedFilterStringNotInArray) ToSystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringNotInOutput() SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringNotInOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput {
	return o
}

// Specifies the field within the event data that you want to use for filtering. Type of the field can be a number, boolean, or string.
func (o SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterStringNotIn) string { return v.Key }).(pulumi.StringOutput)
}

// Specifies an array of values to compare to when using a multiple values operator.
func (o SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAdvancedFilterStringNotIn) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemTopicEventSubscriptionAdvancedFilterStringNotIn)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput() SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput) ToSystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput {
	return o
}

func (o SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput) Index(i pulumi.IntInput) SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemTopicEventSubscriptionAdvancedFilterStringNotIn {
		return vs[0].([]SystemTopicEventSubscriptionAdvancedFilterStringNotIn)[vs[1].(int)]
	}).(SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput)
}

type SystemTopicEventSubscriptionAzureFunctionEndpoint struct {
	// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
	FunctionId string `pulumi:"functionId"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
}

// SystemTopicEventSubscriptionAzureFunctionEndpointInput is an input type that accepts SystemTopicEventSubscriptionAzureFunctionEndpointArgs and SystemTopicEventSubscriptionAzureFunctionEndpointOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAzureFunctionEndpointInput` via:
//
//          SystemTopicEventSubscriptionAzureFunctionEndpointArgs{...}
type SystemTopicEventSubscriptionAzureFunctionEndpointInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAzureFunctionEndpointOutput() SystemTopicEventSubscriptionAzureFunctionEndpointOutput
	ToSystemTopicEventSubscriptionAzureFunctionEndpointOutputWithContext(context.Context) SystemTopicEventSubscriptionAzureFunctionEndpointOutput
}

type SystemTopicEventSubscriptionAzureFunctionEndpointArgs struct {
	// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
	FunctionId pulumi.StringInput `pulumi:"functionId"`
	// Maximum number of events per batch.
	MaxEventsPerBatch pulumi.IntPtrInput `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes pulumi.IntPtrInput `pulumi:"preferredBatchSizeInKilobytes"`
}

func (SystemTopicEventSubscriptionAzureFunctionEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionAzureFunctionEndpointArgs) ToSystemTopicEventSubscriptionAzureFunctionEndpointOutput() SystemTopicEventSubscriptionAzureFunctionEndpointOutput {
	return i.ToSystemTopicEventSubscriptionAzureFunctionEndpointOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAzureFunctionEndpointArgs) ToSystemTopicEventSubscriptionAzureFunctionEndpointOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAzureFunctionEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAzureFunctionEndpointOutput)
}

func (i SystemTopicEventSubscriptionAzureFunctionEndpointArgs) ToSystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput() SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput {
	return i.ToSystemTopicEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionAzureFunctionEndpointArgs) ToSystemTopicEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAzureFunctionEndpointOutput).ToSystemTopicEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx)
}

// SystemTopicEventSubscriptionAzureFunctionEndpointPtrInput is an input type that accepts SystemTopicEventSubscriptionAzureFunctionEndpointArgs, SystemTopicEventSubscriptionAzureFunctionEndpointPtr and SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionAzureFunctionEndpointPtrInput` via:
//
//          SystemTopicEventSubscriptionAzureFunctionEndpointArgs{...}
//
//  or:
//
//          nil
type SystemTopicEventSubscriptionAzureFunctionEndpointPtrInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput() SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput
	ToSystemTopicEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Context) SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput
}

type systemTopicEventSubscriptionAzureFunctionEndpointPtrType SystemTopicEventSubscriptionAzureFunctionEndpointArgs

func SystemTopicEventSubscriptionAzureFunctionEndpointPtr(v *SystemTopicEventSubscriptionAzureFunctionEndpointArgs) SystemTopicEventSubscriptionAzureFunctionEndpointPtrInput {
	return (*systemTopicEventSubscriptionAzureFunctionEndpointPtrType)(v)
}

func (*systemTopicEventSubscriptionAzureFunctionEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopicEventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (i *systemTopicEventSubscriptionAzureFunctionEndpointPtrType) ToSystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput() SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput {
	return i.ToSystemTopicEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Background())
}

func (i *systemTopicEventSubscriptionAzureFunctionEndpointPtrType) ToSystemTopicEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput)
}

type SystemTopicEventSubscriptionAzureFunctionEndpointOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAzureFunctionEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAzureFunctionEndpointOutput) ToSystemTopicEventSubscriptionAzureFunctionEndpointOutput() SystemTopicEventSubscriptionAzureFunctionEndpointOutput {
	return o
}

func (o SystemTopicEventSubscriptionAzureFunctionEndpointOutput) ToSystemTopicEventSubscriptionAzureFunctionEndpointOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAzureFunctionEndpointOutput {
	return o
}

func (o SystemTopicEventSubscriptionAzureFunctionEndpointOutput) ToSystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput() SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput {
	return o.ToSystemTopicEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(context.Background())
}

func (o SystemTopicEventSubscriptionAzureFunctionEndpointOutput) ToSystemTopicEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAzureFunctionEndpoint) *SystemTopicEventSubscriptionAzureFunctionEndpoint {
		return &v
	}).(SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput)
}

// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
func (o SystemTopicEventSubscriptionAzureFunctionEndpointOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAzureFunctionEndpoint) string { return v.FunctionId }).(pulumi.StringOutput)
}

// Maximum number of events per batch.
func (o SystemTopicEventSubscriptionAzureFunctionEndpointOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAzureFunctionEndpoint) *int { return v.MaxEventsPerBatch }).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o SystemTopicEventSubscriptionAzureFunctionEndpointOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionAzureFunctionEndpoint) *int { return v.PreferredBatchSizeInKilobytes }).(pulumi.IntPtrOutput)
}

type SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopicEventSubscriptionAzureFunctionEndpoint)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput) ToSystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput() SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput {
	return o
}

func (o SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput) ToSystemTopicEventSubscriptionAzureFunctionEndpointPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput {
	return o
}

func (o SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput) Elem() SystemTopicEventSubscriptionAzureFunctionEndpointOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAzureFunctionEndpoint) SystemTopicEventSubscriptionAzureFunctionEndpoint {
		return *v
	}).(SystemTopicEventSubscriptionAzureFunctionEndpointOutput)
}

// Specifies the ID of the Function where the Event Subscription will receive events. This must be the functions ID in format {function_app.id}/functions/{name}.
func (o SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput) FunctionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAzureFunctionEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.FunctionId
	}).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAzureFunctionEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.MaxEventsPerBatch
	}).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionAzureFunctionEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.PreferredBatchSizeInKilobytes
	}).(pulumi.IntPtrOutput)
}

type SystemTopicEventSubscriptionRetryPolicy struct {
	// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. Defaults to `1440`. See [official documentation](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
	EventTimeToLive int `pulumi:"eventTimeToLive"`
	// Specifies the maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts int `pulumi:"maxDeliveryAttempts"`
}

// SystemTopicEventSubscriptionRetryPolicyInput is an input type that accepts SystemTopicEventSubscriptionRetryPolicyArgs and SystemTopicEventSubscriptionRetryPolicyOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionRetryPolicyInput` via:
//
//          SystemTopicEventSubscriptionRetryPolicyArgs{...}
type SystemTopicEventSubscriptionRetryPolicyInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionRetryPolicyOutput() SystemTopicEventSubscriptionRetryPolicyOutput
	ToSystemTopicEventSubscriptionRetryPolicyOutputWithContext(context.Context) SystemTopicEventSubscriptionRetryPolicyOutput
}

type SystemTopicEventSubscriptionRetryPolicyArgs struct {
	// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. Defaults to `1440`. See [official documentation](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
	EventTimeToLive pulumi.IntInput `pulumi:"eventTimeToLive"`
	// Specifies the maximum number of delivery retry attempts for events.
	MaxDeliveryAttempts pulumi.IntInput `pulumi:"maxDeliveryAttempts"`
}

func (SystemTopicEventSubscriptionRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionRetryPolicy)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionRetryPolicyArgs) ToSystemTopicEventSubscriptionRetryPolicyOutput() SystemTopicEventSubscriptionRetryPolicyOutput {
	return i.ToSystemTopicEventSubscriptionRetryPolicyOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionRetryPolicyArgs) ToSystemTopicEventSubscriptionRetryPolicyOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionRetryPolicyOutput)
}

func (i SystemTopicEventSubscriptionRetryPolicyArgs) ToSystemTopicEventSubscriptionRetryPolicyPtrOutput() SystemTopicEventSubscriptionRetryPolicyPtrOutput {
	return i.ToSystemTopicEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionRetryPolicyArgs) ToSystemTopicEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionRetryPolicyOutput).ToSystemTopicEventSubscriptionRetryPolicyPtrOutputWithContext(ctx)
}

// SystemTopicEventSubscriptionRetryPolicyPtrInput is an input type that accepts SystemTopicEventSubscriptionRetryPolicyArgs, SystemTopicEventSubscriptionRetryPolicyPtr and SystemTopicEventSubscriptionRetryPolicyPtrOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionRetryPolicyPtrInput` via:
//
//          SystemTopicEventSubscriptionRetryPolicyArgs{...}
//
//  or:
//
//          nil
type SystemTopicEventSubscriptionRetryPolicyPtrInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionRetryPolicyPtrOutput() SystemTopicEventSubscriptionRetryPolicyPtrOutput
	ToSystemTopicEventSubscriptionRetryPolicyPtrOutputWithContext(context.Context) SystemTopicEventSubscriptionRetryPolicyPtrOutput
}

type systemTopicEventSubscriptionRetryPolicyPtrType SystemTopicEventSubscriptionRetryPolicyArgs

func SystemTopicEventSubscriptionRetryPolicyPtr(v *SystemTopicEventSubscriptionRetryPolicyArgs) SystemTopicEventSubscriptionRetryPolicyPtrInput {
	return (*systemTopicEventSubscriptionRetryPolicyPtrType)(v)
}

func (*systemTopicEventSubscriptionRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopicEventSubscriptionRetryPolicy)(nil)).Elem()
}

func (i *systemTopicEventSubscriptionRetryPolicyPtrType) ToSystemTopicEventSubscriptionRetryPolicyPtrOutput() SystemTopicEventSubscriptionRetryPolicyPtrOutput {
	return i.ToSystemTopicEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *systemTopicEventSubscriptionRetryPolicyPtrType) ToSystemTopicEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionRetryPolicyPtrOutput)
}

type SystemTopicEventSubscriptionRetryPolicyOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionRetryPolicy)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionRetryPolicyOutput) ToSystemTopicEventSubscriptionRetryPolicyOutput() SystemTopicEventSubscriptionRetryPolicyOutput {
	return o
}

func (o SystemTopicEventSubscriptionRetryPolicyOutput) ToSystemTopicEventSubscriptionRetryPolicyOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionRetryPolicyOutput {
	return o
}

func (o SystemTopicEventSubscriptionRetryPolicyOutput) ToSystemTopicEventSubscriptionRetryPolicyPtrOutput() SystemTopicEventSubscriptionRetryPolicyPtrOutput {
	return o.ToSystemTopicEventSubscriptionRetryPolicyPtrOutputWithContext(context.Background())
}

func (o SystemTopicEventSubscriptionRetryPolicyOutput) ToSystemTopicEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionRetryPolicyPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionRetryPolicy) *SystemTopicEventSubscriptionRetryPolicy {
		return &v
	}).(SystemTopicEventSubscriptionRetryPolicyPtrOutput)
}

// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. Defaults to `1440`. See [official documentation](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
func (o SystemTopicEventSubscriptionRetryPolicyOutput) EventTimeToLive() pulumi.IntOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionRetryPolicy) int { return v.EventTimeToLive }).(pulumi.IntOutput)
}

// Specifies the maximum number of delivery retry attempts for events.
func (o SystemTopicEventSubscriptionRetryPolicyOutput) MaxDeliveryAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionRetryPolicy) int { return v.MaxDeliveryAttempts }).(pulumi.IntOutput)
}

type SystemTopicEventSubscriptionRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopicEventSubscriptionRetryPolicy)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionRetryPolicyPtrOutput) ToSystemTopicEventSubscriptionRetryPolicyPtrOutput() SystemTopicEventSubscriptionRetryPolicyPtrOutput {
	return o
}

func (o SystemTopicEventSubscriptionRetryPolicyPtrOutput) ToSystemTopicEventSubscriptionRetryPolicyPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionRetryPolicyPtrOutput {
	return o
}

func (o SystemTopicEventSubscriptionRetryPolicyPtrOutput) Elem() SystemTopicEventSubscriptionRetryPolicyOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionRetryPolicy) SystemTopicEventSubscriptionRetryPolicy { return *v }).(SystemTopicEventSubscriptionRetryPolicyOutput)
}

// Specifies the time to live (in minutes) for events. Supported range is `1` to `1440`. Defaults to `1440`. See [official documentation](https://docs.microsoft.com/en-us/azure/event-grid/manage-event-delivery#set-retry-policy) for more details.
func (o SystemTopicEventSubscriptionRetryPolicyPtrOutput) EventTimeToLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.EventTimeToLive
	}).(pulumi.IntPtrOutput)
}

// Specifies the maximum number of delivery retry attempts for events.
func (o SystemTopicEventSubscriptionRetryPolicyPtrOutput) MaxDeliveryAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.MaxDeliveryAttempts
	}).(pulumi.IntPtrOutput)
}

type SystemTopicEventSubscriptionStorageBlobDeadLetterDestination struct {
	// Specifies the id of the storage account id where the storage blob is located.
	StorageAccountId string `pulumi:"storageAccountId"`
	// Specifies the name of the Storage blob container that is the destination of the deadletter events.
	StorageBlobContainerName string `pulumi:"storageBlobContainerName"`
}

// SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationInput is an input type that accepts SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationArgs and SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationInput` via:
//
//          SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationArgs{...}
type SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput() SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput
	ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(context.Context) SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput
}

type SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationArgs struct {
	// Specifies the id of the storage account id where the storage blob is located.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
	// Specifies the name of the Storage blob container that is the destination of the deadletter events.
	StorageBlobContainerName pulumi.StringInput `pulumi:"storageBlobContainerName"`
}

func (SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationArgs) ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput() SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return i.ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationArgs) ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput)
}

func (i SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationArgs) ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return i.ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationArgs) ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput).ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx)
}

// SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrInput is an input type that accepts SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationArgs, SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtr and SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrInput` via:
//
//          SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationArgs{...}
//
//  or:
//
//          nil
type SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput
	ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Context) SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput
}

type systemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrType SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationArgs

func SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtr(v *SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationArgs) SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrInput {
	return (*systemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrType)(v)
}

func (*systemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopicEventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (i *systemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrType) ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return i.ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (i *systemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrType) ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput)
}

type SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput) ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput() SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o
}

func (o SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput) ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o
}

func (o SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput) ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o.ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(context.Background())
}

func (o SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput) ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionStorageBlobDeadLetterDestination) *SystemTopicEventSubscriptionStorageBlobDeadLetterDestination {
		return &v
	}).(SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput)
}

// Specifies the id of the storage account id where the storage blob is located.
func (o SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionStorageBlobDeadLetterDestination) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

// Specifies the name of the Storage blob container that is the destination of the deadletter events.
func (o SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput) StorageBlobContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionStorageBlobDeadLetterDestination) string {
		return v.StorageBlobContainerName
	}).(pulumi.StringOutput)
}

type SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopicEventSubscriptionStorageBlobDeadLetterDestination)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput() SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o
}

func (o SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) ToSystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput {
	return o
}

func (o SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) Elem() SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionStorageBlobDeadLetterDestination) SystemTopicEventSubscriptionStorageBlobDeadLetterDestination {
		return *v
	}).(SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput)
}

// Specifies the id of the storage account id where the storage blob is located.
func (o SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionStorageBlobDeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the Storage blob container that is the destination of the deadletter events.
func (o SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput) StorageBlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionStorageBlobDeadLetterDestination) *string {
		if v == nil {
			return nil
		}
		return &v.StorageBlobContainerName
	}).(pulumi.StringPtrOutput)
}

type SystemTopicEventSubscriptionStorageQueueEndpoint struct {
	// Specifies the name of the storage queue where the Event Subscription will receive events.
	QueueName string `pulumi:"queueName"`
	// Specifies the id of the storage account id where the storage queue is located.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// SystemTopicEventSubscriptionStorageQueueEndpointInput is an input type that accepts SystemTopicEventSubscriptionStorageQueueEndpointArgs and SystemTopicEventSubscriptionStorageQueueEndpointOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionStorageQueueEndpointInput` via:
//
//          SystemTopicEventSubscriptionStorageQueueEndpointArgs{...}
type SystemTopicEventSubscriptionStorageQueueEndpointInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionStorageQueueEndpointOutput() SystemTopicEventSubscriptionStorageQueueEndpointOutput
	ToSystemTopicEventSubscriptionStorageQueueEndpointOutputWithContext(context.Context) SystemTopicEventSubscriptionStorageQueueEndpointOutput
}

type SystemTopicEventSubscriptionStorageQueueEndpointArgs struct {
	// Specifies the name of the storage queue where the Event Subscription will receive events.
	QueueName pulumi.StringInput `pulumi:"queueName"`
	// Specifies the id of the storage account id where the storage queue is located.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (SystemTopicEventSubscriptionStorageQueueEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionStorageQueueEndpointArgs) ToSystemTopicEventSubscriptionStorageQueueEndpointOutput() SystemTopicEventSubscriptionStorageQueueEndpointOutput {
	return i.ToSystemTopicEventSubscriptionStorageQueueEndpointOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionStorageQueueEndpointArgs) ToSystemTopicEventSubscriptionStorageQueueEndpointOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionStorageQueueEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionStorageQueueEndpointOutput)
}

func (i SystemTopicEventSubscriptionStorageQueueEndpointArgs) ToSystemTopicEventSubscriptionStorageQueueEndpointPtrOutput() SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput {
	return i.ToSystemTopicEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionStorageQueueEndpointArgs) ToSystemTopicEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionStorageQueueEndpointOutput).ToSystemTopicEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx)
}

// SystemTopicEventSubscriptionStorageQueueEndpointPtrInput is an input type that accepts SystemTopicEventSubscriptionStorageQueueEndpointArgs, SystemTopicEventSubscriptionStorageQueueEndpointPtr and SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionStorageQueueEndpointPtrInput` via:
//
//          SystemTopicEventSubscriptionStorageQueueEndpointArgs{...}
//
//  or:
//
//          nil
type SystemTopicEventSubscriptionStorageQueueEndpointPtrInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionStorageQueueEndpointPtrOutput() SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput
	ToSystemTopicEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Context) SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput
}

type systemTopicEventSubscriptionStorageQueueEndpointPtrType SystemTopicEventSubscriptionStorageQueueEndpointArgs

func SystemTopicEventSubscriptionStorageQueueEndpointPtr(v *SystemTopicEventSubscriptionStorageQueueEndpointArgs) SystemTopicEventSubscriptionStorageQueueEndpointPtrInput {
	return (*systemTopicEventSubscriptionStorageQueueEndpointPtrType)(v)
}

func (*systemTopicEventSubscriptionStorageQueueEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopicEventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (i *systemTopicEventSubscriptionStorageQueueEndpointPtrType) ToSystemTopicEventSubscriptionStorageQueueEndpointPtrOutput() SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput {
	return i.ToSystemTopicEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (i *systemTopicEventSubscriptionStorageQueueEndpointPtrType) ToSystemTopicEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput)
}

type SystemTopicEventSubscriptionStorageQueueEndpointOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionStorageQueueEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionStorageQueueEndpointOutput) ToSystemTopicEventSubscriptionStorageQueueEndpointOutput() SystemTopicEventSubscriptionStorageQueueEndpointOutput {
	return o
}

func (o SystemTopicEventSubscriptionStorageQueueEndpointOutput) ToSystemTopicEventSubscriptionStorageQueueEndpointOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionStorageQueueEndpointOutput {
	return o
}

func (o SystemTopicEventSubscriptionStorageQueueEndpointOutput) ToSystemTopicEventSubscriptionStorageQueueEndpointPtrOutput() SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput {
	return o.ToSystemTopicEventSubscriptionStorageQueueEndpointPtrOutputWithContext(context.Background())
}

func (o SystemTopicEventSubscriptionStorageQueueEndpointOutput) ToSystemTopicEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionStorageQueueEndpoint) *SystemTopicEventSubscriptionStorageQueueEndpoint {
		return &v
	}).(SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput)
}

// Specifies the name of the storage queue where the Event Subscription will receive events.
func (o SystemTopicEventSubscriptionStorageQueueEndpointOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionStorageQueueEndpoint) string { return v.QueueName }).(pulumi.StringOutput)
}

// Specifies the id of the storage account id where the storage queue is located.
func (o SystemTopicEventSubscriptionStorageQueueEndpointOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionStorageQueueEndpoint) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopicEventSubscriptionStorageQueueEndpoint)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput) ToSystemTopicEventSubscriptionStorageQueueEndpointPtrOutput() SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput {
	return o
}

func (o SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput) ToSystemTopicEventSubscriptionStorageQueueEndpointPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput {
	return o
}

func (o SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput) Elem() SystemTopicEventSubscriptionStorageQueueEndpointOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionStorageQueueEndpoint) SystemTopicEventSubscriptionStorageQueueEndpoint {
		return *v
	}).(SystemTopicEventSubscriptionStorageQueueEndpointOutput)
}

// Specifies the name of the storage queue where the Event Subscription will receive events.
func (o SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionStorageQueueEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.QueueName
	}).(pulumi.StringPtrOutput)
}

// Specifies the id of the storage account id where the storage queue is located.
func (o SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionStorageQueueEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

type SystemTopicEventSubscriptionSubjectFilter struct {
	// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
	CaseSensitive *bool `pulumi:"caseSensitive"`
	// A string to filter events for an event subscription based on a resource path prefix.
	SubjectBeginsWith *string `pulumi:"subjectBeginsWith"`
	// A string to filter events for an event subscription based on a resource path suffix.
	SubjectEndsWith *string `pulumi:"subjectEndsWith"`
}

// SystemTopicEventSubscriptionSubjectFilterInput is an input type that accepts SystemTopicEventSubscriptionSubjectFilterArgs and SystemTopicEventSubscriptionSubjectFilterOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionSubjectFilterInput` via:
//
//          SystemTopicEventSubscriptionSubjectFilterArgs{...}
type SystemTopicEventSubscriptionSubjectFilterInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionSubjectFilterOutput() SystemTopicEventSubscriptionSubjectFilterOutput
	ToSystemTopicEventSubscriptionSubjectFilterOutputWithContext(context.Context) SystemTopicEventSubscriptionSubjectFilterOutput
}

type SystemTopicEventSubscriptionSubjectFilterArgs struct {
	// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
	CaseSensitive pulumi.BoolPtrInput `pulumi:"caseSensitive"`
	// A string to filter events for an event subscription based on a resource path prefix.
	SubjectBeginsWith pulumi.StringPtrInput `pulumi:"subjectBeginsWith"`
	// A string to filter events for an event subscription based on a resource path suffix.
	SubjectEndsWith pulumi.StringPtrInput `pulumi:"subjectEndsWith"`
}

func (SystemTopicEventSubscriptionSubjectFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionSubjectFilter)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionSubjectFilterArgs) ToSystemTopicEventSubscriptionSubjectFilterOutput() SystemTopicEventSubscriptionSubjectFilterOutput {
	return i.ToSystemTopicEventSubscriptionSubjectFilterOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionSubjectFilterArgs) ToSystemTopicEventSubscriptionSubjectFilterOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionSubjectFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionSubjectFilterOutput)
}

func (i SystemTopicEventSubscriptionSubjectFilterArgs) ToSystemTopicEventSubscriptionSubjectFilterPtrOutput() SystemTopicEventSubscriptionSubjectFilterPtrOutput {
	return i.ToSystemTopicEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionSubjectFilterArgs) ToSystemTopicEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionSubjectFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionSubjectFilterOutput).ToSystemTopicEventSubscriptionSubjectFilterPtrOutputWithContext(ctx)
}

// SystemTopicEventSubscriptionSubjectFilterPtrInput is an input type that accepts SystemTopicEventSubscriptionSubjectFilterArgs, SystemTopicEventSubscriptionSubjectFilterPtr and SystemTopicEventSubscriptionSubjectFilterPtrOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionSubjectFilterPtrInput` via:
//
//          SystemTopicEventSubscriptionSubjectFilterArgs{...}
//
//  or:
//
//          nil
type SystemTopicEventSubscriptionSubjectFilterPtrInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionSubjectFilterPtrOutput() SystemTopicEventSubscriptionSubjectFilterPtrOutput
	ToSystemTopicEventSubscriptionSubjectFilterPtrOutputWithContext(context.Context) SystemTopicEventSubscriptionSubjectFilterPtrOutput
}

type systemTopicEventSubscriptionSubjectFilterPtrType SystemTopicEventSubscriptionSubjectFilterArgs

func SystemTopicEventSubscriptionSubjectFilterPtr(v *SystemTopicEventSubscriptionSubjectFilterArgs) SystemTopicEventSubscriptionSubjectFilterPtrInput {
	return (*systemTopicEventSubscriptionSubjectFilterPtrType)(v)
}

func (*systemTopicEventSubscriptionSubjectFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopicEventSubscriptionSubjectFilter)(nil)).Elem()
}

func (i *systemTopicEventSubscriptionSubjectFilterPtrType) ToSystemTopicEventSubscriptionSubjectFilterPtrOutput() SystemTopicEventSubscriptionSubjectFilterPtrOutput {
	return i.ToSystemTopicEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (i *systemTopicEventSubscriptionSubjectFilterPtrType) ToSystemTopicEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionSubjectFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionSubjectFilterPtrOutput)
}

type SystemTopicEventSubscriptionSubjectFilterOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionSubjectFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionSubjectFilter)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionSubjectFilterOutput) ToSystemTopicEventSubscriptionSubjectFilterOutput() SystemTopicEventSubscriptionSubjectFilterOutput {
	return o
}

func (o SystemTopicEventSubscriptionSubjectFilterOutput) ToSystemTopicEventSubscriptionSubjectFilterOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionSubjectFilterOutput {
	return o
}

func (o SystemTopicEventSubscriptionSubjectFilterOutput) ToSystemTopicEventSubscriptionSubjectFilterPtrOutput() SystemTopicEventSubscriptionSubjectFilterPtrOutput {
	return o.ToSystemTopicEventSubscriptionSubjectFilterPtrOutputWithContext(context.Background())
}

func (o SystemTopicEventSubscriptionSubjectFilterOutput) ToSystemTopicEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionSubjectFilterPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionSubjectFilter) *SystemTopicEventSubscriptionSubjectFilter {
		return &v
	}).(SystemTopicEventSubscriptionSubjectFilterPtrOutput)
}

// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
func (o SystemTopicEventSubscriptionSubjectFilterOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionSubjectFilter) *bool { return v.CaseSensitive }).(pulumi.BoolPtrOutput)
}

// A string to filter events for an event subscription based on a resource path prefix.
func (o SystemTopicEventSubscriptionSubjectFilterOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionSubjectFilter) *string { return v.SubjectBeginsWith }).(pulumi.StringPtrOutput)
}

// A string to filter events for an event subscription based on a resource path suffix.
func (o SystemTopicEventSubscriptionSubjectFilterOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionSubjectFilter) *string { return v.SubjectEndsWith }).(pulumi.StringPtrOutput)
}

type SystemTopicEventSubscriptionSubjectFilterPtrOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionSubjectFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopicEventSubscriptionSubjectFilter)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionSubjectFilterPtrOutput) ToSystemTopicEventSubscriptionSubjectFilterPtrOutput() SystemTopicEventSubscriptionSubjectFilterPtrOutput {
	return o
}

func (o SystemTopicEventSubscriptionSubjectFilterPtrOutput) ToSystemTopicEventSubscriptionSubjectFilterPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionSubjectFilterPtrOutput {
	return o
}

func (o SystemTopicEventSubscriptionSubjectFilterPtrOutput) Elem() SystemTopicEventSubscriptionSubjectFilterOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionSubjectFilter) SystemTopicEventSubscriptionSubjectFilter {
		return *v
	}).(SystemTopicEventSubscriptionSubjectFilterOutput)
}

// Specifies if `subjectBeginsWith` and `subjectEndsWith` case sensitive. This value defaults to `false`.
func (o SystemTopicEventSubscriptionSubjectFilterPtrOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionSubjectFilter) *bool {
		if v == nil {
			return nil
		}
		return v.CaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// A string to filter events for an event subscription based on a resource path prefix.
func (o SystemTopicEventSubscriptionSubjectFilterPtrOutput) SubjectBeginsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionSubjectFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectBeginsWith
	}).(pulumi.StringPtrOutput)
}

// A string to filter events for an event subscription based on a resource path suffix.
func (o SystemTopicEventSubscriptionSubjectFilterPtrOutput) SubjectEndsWith() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionSubjectFilter) *string {
		if v == nil {
			return nil
		}
		return v.SubjectEndsWith
	}).(pulumi.StringPtrOutput)
}

type SystemTopicEventSubscriptionWebhookEndpoint struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryAppIdOrUri *string `pulumi:"activeDirectoryAppIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryTenantId *string `pulumi:"activeDirectoryTenantId"`
	// The base url of the webhook where the Event Subscription will receive events.
	BaseUrl *string `pulumi:"baseUrl"`
	// Maximum number of events per batch.
	MaxEventsPerBatch *int `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes *int `pulumi:"preferredBatchSizeInKilobytes"`
	// Specifies the url of the webhook where the Event Subscription will receive events.
	Url string `pulumi:"url"`
}

// SystemTopicEventSubscriptionWebhookEndpointInput is an input type that accepts SystemTopicEventSubscriptionWebhookEndpointArgs and SystemTopicEventSubscriptionWebhookEndpointOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionWebhookEndpointInput` via:
//
//          SystemTopicEventSubscriptionWebhookEndpointArgs{...}
type SystemTopicEventSubscriptionWebhookEndpointInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionWebhookEndpointOutput() SystemTopicEventSubscriptionWebhookEndpointOutput
	ToSystemTopicEventSubscriptionWebhookEndpointOutputWithContext(context.Context) SystemTopicEventSubscriptionWebhookEndpointOutput
}

type SystemTopicEventSubscriptionWebhookEndpointArgs struct {
	// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryAppIdOrUri pulumi.StringPtrInput `pulumi:"activeDirectoryAppIdOrUri"`
	// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
	ActiveDirectoryTenantId pulumi.StringPtrInput `pulumi:"activeDirectoryTenantId"`
	// The base url of the webhook where the Event Subscription will receive events.
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// Maximum number of events per batch.
	MaxEventsPerBatch pulumi.IntPtrInput `pulumi:"maxEventsPerBatch"`
	// Preferred batch size in Kilobytes.
	PreferredBatchSizeInKilobytes pulumi.IntPtrInput `pulumi:"preferredBatchSizeInKilobytes"`
	// Specifies the url of the webhook where the Event Subscription will receive events.
	Url pulumi.StringInput `pulumi:"url"`
}

func (SystemTopicEventSubscriptionWebhookEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (i SystemTopicEventSubscriptionWebhookEndpointArgs) ToSystemTopicEventSubscriptionWebhookEndpointOutput() SystemTopicEventSubscriptionWebhookEndpointOutput {
	return i.ToSystemTopicEventSubscriptionWebhookEndpointOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionWebhookEndpointArgs) ToSystemTopicEventSubscriptionWebhookEndpointOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionWebhookEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionWebhookEndpointOutput)
}

func (i SystemTopicEventSubscriptionWebhookEndpointArgs) ToSystemTopicEventSubscriptionWebhookEndpointPtrOutput() SystemTopicEventSubscriptionWebhookEndpointPtrOutput {
	return i.ToSystemTopicEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (i SystemTopicEventSubscriptionWebhookEndpointArgs) ToSystemTopicEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionWebhookEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionWebhookEndpointOutput).ToSystemTopicEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx)
}

// SystemTopicEventSubscriptionWebhookEndpointPtrInput is an input type that accepts SystemTopicEventSubscriptionWebhookEndpointArgs, SystemTopicEventSubscriptionWebhookEndpointPtr and SystemTopicEventSubscriptionWebhookEndpointPtrOutput values.
// You can construct a concrete instance of `SystemTopicEventSubscriptionWebhookEndpointPtrInput` via:
//
//          SystemTopicEventSubscriptionWebhookEndpointArgs{...}
//
//  or:
//
//          nil
type SystemTopicEventSubscriptionWebhookEndpointPtrInput interface {
	pulumi.Input

	ToSystemTopicEventSubscriptionWebhookEndpointPtrOutput() SystemTopicEventSubscriptionWebhookEndpointPtrOutput
	ToSystemTopicEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Context) SystemTopicEventSubscriptionWebhookEndpointPtrOutput
}

type systemTopicEventSubscriptionWebhookEndpointPtrType SystemTopicEventSubscriptionWebhookEndpointArgs

func SystemTopicEventSubscriptionWebhookEndpointPtr(v *SystemTopicEventSubscriptionWebhookEndpointArgs) SystemTopicEventSubscriptionWebhookEndpointPtrInput {
	return (*systemTopicEventSubscriptionWebhookEndpointPtrType)(v)
}

func (*systemTopicEventSubscriptionWebhookEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopicEventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (i *systemTopicEventSubscriptionWebhookEndpointPtrType) ToSystemTopicEventSubscriptionWebhookEndpointPtrOutput() SystemTopicEventSubscriptionWebhookEndpointPtrOutput {
	return i.ToSystemTopicEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (i *systemTopicEventSubscriptionWebhookEndpointPtrType) ToSystemTopicEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionWebhookEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemTopicEventSubscriptionWebhookEndpointPtrOutput)
}

type SystemTopicEventSubscriptionWebhookEndpointOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionWebhookEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemTopicEventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionWebhookEndpointOutput) ToSystemTopicEventSubscriptionWebhookEndpointOutput() SystemTopicEventSubscriptionWebhookEndpointOutput {
	return o
}

func (o SystemTopicEventSubscriptionWebhookEndpointOutput) ToSystemTopicEventSubscriptionWebhookEndpointOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionWebhookEndpointOutput {
	return o
}

func (o SystemTopicEventSubscriptionWebhookEndpointOutput) ToSystemTopicEventSubscriptionWebhookEndpointPtrOutput() SystemTopicEventSubscriptionWebhookEndpointPtrOutput {
	return o.ToSystemTopicEventSubscriptionWebhookEndpointPtrOutputWithContext(context.Background())
}

func (o SystemTopicEventSubscriptionWebhookEndpointOutput) ToSystemTopicEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionWebhookEndpointPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionWebhookEndpoint) *SystemTopicEventSubscriptionWebhookEndpoint {
		return &v
	}).(SystemTopicEventSubscriptionWebhookEndpointPtrOutput)
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o SystemTopicEventSubscriptionWebhookEndpointOutput) ActiveDirectoryAppIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionWebhookEndpoint) *string { return v.ActiveDirectoryAppIdOrUri }).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o SystemTopicEventSubscriptionWebhookEndpointOutput) ActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionWebhookEndpoint) *string { return v.ActiveDirectoryTenantId }).(pulumi.StringPtrOutput)
}

// The base url of the webhook where the Event Subscription will receive events.
func (o SystemTopicEventSubscriptionWebhookEndpointOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionWebhookEndpoint) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o SystemTopicEventSubscriptionWebhookEndpointOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionWebhookEndpoint) *int { return v.MaxEventsPerBatch }).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o SystemTopicEventSubscriptionWebhookEndpointOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionWebhookEndpoint) *int { return v.PreferredBatchSizeInKilobytes }).(pulumi.IntPtrOutput)
}

// Specifies the url of the webhook where the Event Subscription will receive events.
func (o SystemTopicEventSubscriptionWebhookEndpointOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SystemTopicEventSubscriptionWebhookEndpoint) string { return v.Url }).(pulumi.StringOutput)
}

type SystemTopicEventSubscriptionWebhookEndpointPtrOutput struct{ *pulumi.OutputState }

func (SystemTopicEventSubscriptionWebhookEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemTopicEventSubscriptionWebhookEndpoint)(nil)).Elem()
}

func (o SystemTopicEventSubscriptionWebhookEndpointPtrOutput) ToSystemTopicEventSubscriptionWebhookEndpointPtrOutput() SystemTopicEventSubscriptionWebhookEndpointPtrOutput {
	return o
}

func (o SystemTopicEventSubscriptionWebhookEndpointPtrOutput) ToSystemTopicEventSubscriptionWebhookEndpointPtrOutputWithContext(ctx context.Context) SystemTopicEventSubscriptionWebhookEndpointPtrOutput {
	return o
}

func (o SystemTopicEventSubscriptionWebhookEndpointPtrOutput) Elem() SystemTopicEventSubscriptionWebhookEndpointOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionWebhookEndpoint) SystemTopicEventSubscriptionWebhookEndpoint {
		return *v
	}).(SystemTopicEventSubscriptionWebhookEndpointOutput)
}

// The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
func (o SystemTopicEventSubscriptionWebhookEndpointPtrOutput) ActiveDirectoryAppIdOrUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryAppIdOrUri
	}).(pulumi.StringPtrOutput)
}

// The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
func (o SystemTopicEventSubscriptionWebhookEndpointPtrOutput) ActiveDirectoryTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryTenantId
	}).(pulumi.StringPtrOutput)
}

// The base url of the webhook where the Event Subscription will receive events.
func (o SystemTopicEventSubscriptionWebhookEndpointPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// Maximum number of events per batch.
func (o SystemTopicEventSubscriptionWebhookEndpointPtrOutput) MaxEventsPerBatch() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionWebhookEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.MaxEventsPerBatch
	}).(pulumi.IntPtrOutput)
}

// Preferred batch size in Kilobytes.
func (o SystemTopicEventSubscriptionWebhookEndpointPtrOutput) PreferredBatchSizeInKilobytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionWebhookEndpoint) *int {
		if v == nil {
			return nil
		}
		return v.PreferredBatchSizeInKilobytes
	}).(pulumi.IntPtrOutput)
}

// Specifies the url of the webhook where the Event Subscription will receive events.
func (o SystemTopicEventSubscriptionWebhookEndpointPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemTopicEventSubscriptionWebhookEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type TopicInboundIpRule struct {
	// The action to take when the rule is matched. Possible values are `Allow`.
	Action *string `pulumi:"action"`
	// The ip mask (CIDR) to match on.
	IpMask string `pulumi:"ipMask"`
}

// TopicInboundIpRuleInput is an input type that accepts TopicInboundIpRuleArgs and TopicInboundIpRuleOutput values.
// You can construct a concrete instance of `TopicInboundIpRuleInput` via:
//
//          TopicInboundIpRuleArgs{...}
type TopicInboundIpRuleInput interface {
	pulumi.Input

	ToTopicInboundIpRuleOutput() TopicInboundIpRuleOutput
	ToTopicInboundIpRuleOutputWithContext(context.Context) TopicInboundIpRuleOutput
}

type TopicInboundIpRuleArgs struct {
	// The action to take when the rule is matched. Possible values are `Allow`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// The ip mask (CIDR) to match on.
	IpMask pulumi.StringInput `pulumi:"ipMask"`
}

func (TopicInboundIpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicInboundIpRule)(nil)).Elem()
}

func (i TopicInboundIpRuleArgs) ToTopicInboundIpRuleOutput() TopicInboundIpRuleOutput {
	return i.ToTopicInboundIpRuleOutputWithContext(context.Background())
}

func (i TopicInboundIpRuleArgs) ToTopicInboundIpRuleOutputWithContext(ctx context.Context) TopicInboundIpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicInboundIpRuleOutput)
}

// TopicInboundIpRuleArrayInput is an input type that accepts TopicInboundIpRuleArray and TopicInboundIpRuleArrayOutput values.
// You can construct a concrete instance of `TopicInboundIpRuleArrayInput` via:
//
//          TopicInboundIpRuleArray{ TopicInboundIpRuleArgs{...} }
type TopicInboundIpRuleArrayInput interface {
	pulumi.Input

	ToTopicInboundIpRuleArrayOutput() TopicInboundIpRuleArrayOutput
	ToTopicInboundIpRuleArrayOutputWithContext(context.Context) TopicInboundIpRuleArrayOutput
}

type TopicInboundIpRuleArray []TopicInboundIpRuleInput

func (TopicInboundIpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicInboundIpRule)(nil)).Elem()
}

func (i TopicInboundIpRuleArray) ToTopicInboundIpRuleArrayOutput() TopicInboundIpRuleArrayOutput {
	return i.ToTopicInboundIpRuleArrayOutputWithContext(context.Background())
}

func (i TopicInboundIpRuleArray) ToTopicInboundIpRuleArrayOutputWithContext(ctx context.Context) TopicInboundIpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicInboundIpRuleArrayOutput)
}

type TopicInboundIpRuleOutput struct{ *pulumi.OutputState }

func (TopicInboundIpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicInboundIpRule)(nil)).Elem()
}

func (o TopicInboundIpRuleOutput) ToTopicInboundIpRuleOutput() TopicInboundIpRuleOutput {
	return o
}

func (o TopicInboundIpRuleOutput) ToTopicInboundIpRuleOutputWithContext(ctx context.Context) TopicInboundIpRuleOutput {
	return o
}

// The action to take when the rule is matched. Possible values are `Allow`.
func (o TopicInboundIpRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicInboundIpRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The ip mask (CIDR) to match on.
func (o TopicInboundIpRuleOutput) IpMask() pulumi.StringOutput {
	return o.ApplyT(func(v TopicInboundIpRule) string { return v.IpMask }).(pulumi.StringOutput)
}

type TopicInboundIpRuleArrayOutput struct{ *pulumi.OutputState }

func (TopicInboundIpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicInboundIpRule)(nil)).Elem()
}

func (o TopicInboundIpRuleArrayOutput) ToTopicInboundIpRuleArrayOutput() TopicInboundIpRuleArrayOutput {
	return o
}

func (o TopicInboundIpRuleArrayOutput) ToTopicInboundIpRuleArrayOutputWithContext(ctx context.Context) TopicInboundIpRuleArrayOutput {
	return o
}

func (o TopicInboundIpRuleArrayOutput) Index(i pulumi.IntInput) TopicInboundIpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicInboundIpRule {
		return vs[0].([]TopicInboundIpRule)[vs[1].(int)]
	}).(TopicInboundIpRuleOutput)
}

type TopicInputMappingDefaultValues struct {
	// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion *string `pulumi:"dataVersion"`
	// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType *string `pulumi:"eventType"`
	// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject *string `pulumi:"subject"`
}

// TopicInputMappingDefaultValuesInput is an input type that accepts TopicInputMappingDefaultValuesArgs and TopicInputMappingDefaultValuesOutput values.
// You can construct a concrete instance of `TopicInputMappingDefaultValuesInput` via:
//
//          TopicInputMappingDefaultValuesArgs{...}
type TopicInputMappingDefaultValuesInput interface {
	pulumi.Input

	ToTopicInputMappingDefaultValuesOutput() TopicInputMappingDefaultValuesOutput
	ToTopicInputMappingDefaultValuesOutputWithContext(context.Context) TopicInputMappingDefaultValuesOutput
}

type TopicInputMappingDefaultValuesArgs struct {
	// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion pulumi.StringPtrInput `pulumi:"dataVersion"`
	// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
}

func (TopicInputMappingDefaultValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicInputMappingDefaultValues)(nil)).Elem()
}

func (i TopicInputMappingDefaultValuesArgs) ToTopicInputMappingDefaultValuesOutput() TopicInputMappingDefaultValuesOutput {
	return i.ToTopicInputMappingDefaultValuesOutputWithContext(context.Background())
}

func (i TopicInputMappingDefaultValuesArgs) ToTopicInputMappingDefaultValuesOutputWithContext(ctx context.Context) TopicInputMappingDefaultValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicInputMappingDefaultValuesOutput)
}

func (i TopicInputMappingDefaultValuesArgs) ToTopicInputMappingDefaultValuesPtrOutput() TopicInputMappingDefaultValuesPtrOutput {
	return i.ToTopicInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (i TopicInputMappingDefaultValuesArgs) ToTopicInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) TopicInputMappingDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicInputMappingDefaultValuesOutput).ToTopicInputMappingDefaultValuesPtrOutputWithContext(ctx)
}

// TopicInputMappingDefaultValuesPtrInput is an input type that accepts TopicInputMappingDefaultValuesArgs, TopicInputMappingDefaultValuesPtr and TopicInputMappingDefaultValuesPtrOutput values.
// You can construct a concrete instance of `TopicInputMappingDefaultValuesPtrInput` via:
//
//          TopicInputMappingDefaultValuesArgs{...}
//
//  or:
//
//          nil
type TopicInputMappingDefaultValuesPtrInput interface {
	pulumi.Input

	ToTopicInputMappingDefaultValuesPtrOutput() TopicInputMappingDefaultValuesPtrOutput
	ToTopicInputMappingDefaultValuesPtrOutputWithContext(context.Context) TopicInputMappingDefaultValuesPtrOutput
}

type topicInputMappingDefaultValuesPtrType TopicInputMappingDefaultValuesArgs

func TopicInputMappingDefaultValuesPtr(v *TopicInputMappingDefaultValuesArgs) TopicInputMappingDefaultValuesPtrInput {
	return (*topicInputMappingDefaultValuesPtrType)(v)
}

func (*topicInputMappingDefaultValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicInputMappingDefaultValues)(nil)).Elem()
}

func (i *topicInputMappingDefaultValuesPtrType) ToTopicInputMappingDefaultValuesPtrOutput() TopicInputMappingDefaultValuesPtrOutput {
	return i.ToTopicInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (i *topicInputMappingDefaultValuesPtrType) ToTopicInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) TopicInputMappingDefaultValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicInputMappingDefaultValuesPtrOutput)
}

type TopicInputMappingDefaultValuesOutput struct{ *pulumi.OutputState }

func (TopicInputMappingDefaultValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicInputMappingDefaultValues)(nil)).Elem()
}

func (o TopicInputMappingDefaultValuesOutput) ToTopicInputMappingDefaultValuesOutput() TopicInputMappingDefaultValuesOutput {
	return o
}

func (o TopicInputMappingDefaultValuesOutput) ToTopicInputMappingDefaultValuesOutputWithContext(ctx context.Context) TopicInputMappingDefaultValuesOutput {
	return o
}

func (o TopicInputMappingDefaultValuesOutput) ToTopicInputMappingDefaultValuesPtrOutput() TopicInputMappingDefaultValuesPtrOutput {
	return o.ToTopicInputMappingDefaultValuesPtrOutputWithContext(context.Background())
}

func (o TopicInputMappingDefaultValuesOutput) ToTopicInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) TopicInputMappingDefaultValuesPtrOutput {
	return o.ApplyT(func(v TopicInputMappingDefaultValues) *TopicInputMappingDefaultValues {
		return &v
	}).(TopicInputMappingDefaultValuesPtrOutput)
}

// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingDefaultValuesOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicInputMappingDefaultValues) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingDefaultValuesOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicInputMappingDefaultValues) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingDefaultValuesOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicInputMappingDefaultValues) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type TopicInputMappingDefaultValuesPtrOutput struct{ *pulumi.OutputState }

func (TopicInputMappingDefaultValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicInputMappingDefaultValues)(nil)).Elem()
}

func (o TopicInputMappingDefaultValuesPtrOutput) ToTopicInputMappingDefaultValuesPtrOutput() TopicInputMappingDefaultValuesPtrOutput {
	return o
}

func (o TopicInputMappingDefaultValuesPtrOutput) ToTopicInputMappingDefaultValuesPtrOutputWithContext(ctx context.Context) TopicInputMappingDefaultValuesPtrOutput {
	return o
}

func (o TopicInputMappingDefaultValuesPtrOutput) Elem() TopicInputMappingDefaultValuesOutput {
	return o.ApplyT(func(v *TopicInputMappingDefaultValues) TopicInputMappingDefaultValues { return *v }).(TopicInputMappingDefaultValuesOutput)
}

// Specifies the default data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingDefaultValuesPtrOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the default event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingDefaultValuesPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies the default subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingDefaultValuesPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicInputMappingDefaultValues) *string {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(pulumi.StringPtrOutput)
}

type TopicInputMappingFields struct {
	// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion *string `pulumi:"dataVersion"`
	// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventTime *string `pulumi:"eventTime"`
	// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType *string `pulumi:"eventType"`
	// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Id *string `pulumi:"id"`
	// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject *string `pulumi:"subject"`
	// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Topic *string `pulumi:"topic"`
}

// TopicInputMappingFieldsInput is an input type that accepts TopicInputMappingFieldsArgs and TopicInputMappingFieldsOutput values.
// You can construct a concrete instance of `TopicInputMappingFieldsInput` via:
//
//          TopicInputMappingFieldsArgs{...}
type TopicInputMappingFieldsInput interface {
	pulumi.Input

	ToTopicInputMappingFieldsOutput() TopicInputMappingFieldsOutput
	ToTopicInputMappingFieldsOutputWithContext(context.Context) TopicInputMappingFieldsOutput
}

type TopicInputMappingFieldsArgs struct {
	// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	DataVersion pulumi.StringPtrInput `pulumi:"dataVersion"`
	// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventTime pulumi.StringPtrInput `pulumi:"eventTime"`
	// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
	// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (TopicInputMappingFieldsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicInputMappingFields)(nil)).Elem()
}

func (i TopicInputMappingFieldsArgs) ToTopicInputMappingFieldsOutput() TopicInputMappingFieldsOutput {
	return i.ToTopicInputMappingFieldsOutputWithContext(context.Background())
}

func (i TopicInputMappingFieldsArgs) ToTopicInputMappingFieldsOutputWithContext(ctx context.Context) TopicInputMappingFieldsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicInputMappingFieldsOutput)
}

func (i TopicInputMappingFieldsArgs) ToTopicInputMappingFieldsPtrOutput() TopicInputMappingFieldsPtrOutput {
	return i.ToTopicInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (i TopicInputMappingFieldsArgs) ToTopicInputMappingFieldsPtrOutputWithContext(ctx context.Context) TopicInputMappingFieldsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicInputMappingFieldsOutput).ToTopicInputMappingFieldsPtrOutputWithContext(ctx)
}

// TopicInputMappingFieldsPtrInput is an input type that accepts TopicInputMappingFieldsArgs, TopicInputMappingFieldsPtr and TopicInputMappingFieldsPtrOutput values.
// You can construct a concrete instance of `TopicInputMappingFieldsPtrInput` via:
//
//          TopicInputMappingFieldsArgs{...}
//
//  or:
//
//          nil
type TopicInputMappingFieldsPtrInput interface {
	pulumi.Input

	ToTopicInputMappingFieldsPtrOutput() TopicInputMappingFieldsPtrOutput
	ToTopicInputMappingFieldsPtrOutputWithContext(context.Context) TopicInputMappingFieldsPtrOutput
}

type topicInputMappingFieldsPtrType TopicInputMappingFieldsArgs

func TopicInputMappingFieldsPtr(v *TopicInputMappingFieldsArgs) TopicInputMappingFieldsPtrInput {
	return (*topicInputMappingFieldsPtrType)(v)
}

func (*topicInputMappingFieldsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicInputMappingFields)(nil)).Elem()
}

func (i *topicInputMappingFieldsPtrType) ToTopicInputMappingFieldsPtrOutput() TopicInputMappingFieldsPtrOutput {
	return i.ToTopicInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (i *topicInputMappingFieldsPtrType) ToTopicInputMappingFieldsPtrOutputWithContext(ctx context.Context) TopicInputMappingFieldsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicInputMappingFieldsPtrOutput)
}

type TopicInputMappingFieldsOutput struct{ *pulumi.OutputState }

func (TopicInputMappingFieldsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicInputMappingFields)(nil)).Elem()
}

func (o TopicInputMappingFieldsOutput) ToTopicInputMappingFieldsOutput() TopicInputMappingFieldsOutput {
	return o
}

func (o TopicInputMappingFieldsOutput) ToTopicInputMappingFieldsOutputWithContext(ctx context.Context) TopicInputMappingFieldsOutput {
	return o
}

func (o TopicInputMappingFieldsOutput) ToTopicInputMappingFieldsPtrOutput() TopicInputMappingFieldsPtrOutput {
	return o.ToTopicInputMappingFieldsPtrOutputWithContext(context.Background())
}

func (o TopicInputMappingFieldsOutput) ToTopicInputMappingFieldsPtrOutputWithContext(ctx context.Context) TopicInputMappingFieldsPtrOutput {
	return o.ApplyT(func(v TopicInputMappingFields) *TopicInputMappingFields {
		return &v
	}).(TopicInputMappingFieldsPtrOutput)
}

// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingFieldsOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicInputMappingFields) *string { return v.DataVersion }).(pulumi.StringPtrOutput)
}

// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingFieldsOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicInputMappingFields) *string { return v.EventTime }).(pulumi.StringPtrOutput)
}

// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingFieldsOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicInputMappingFields) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingFieldsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicInputMappingFields) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingFieldsOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicInputMappingFields) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingFieldsOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicInputMappingFields) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type TopicInputMappingFieldsPtrOutput struct{ *pulumi.OutputState }

func (TopicInputMappingFieldsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicInputMappingFields)(nil)).Elem()
}

func (o TopicInputMappingFieldsPtrOutput) ToTopicInputMappingFieldsPtrOutput() TopicInputMappingFieldsPtrOutput {
	return o
}

func (o TopicInputMappingFieldsPtrOutput) ToTopicInputMappingFieldsPtrOutputWithContext(ctx context.Context) TopicInputMappingFieldsPtrOutput {
	return o
}

func (o TopicInputMappingFieldsPtrOutput) Elem() TopicInputMappingFieldsOutput {
	return o.ApplyT(func(v *TopicInputMappingFields) TopicInputMappingFields { return *v }).(TopicInputMappingFieldsOutput)
}

// Specifies the data version of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingFieldsPtrOutput) DataVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.DataVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the event time of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingFieldsPtrOutput) EventTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.EventTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the event type of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingFieldsPtrOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.EventType
	}).(pulumi.StringPtrOutput)
}

// Specifies the id of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingFieldsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the subject of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingFieldsPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(pulumi.StringPtrOutput)
}

// Specifies the topic of the EventGrid Event to associate with the domain. Changing this forces a new resource to be created.
func (o TopicInputMappingFieldsPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicInputMappingFields) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DomainInboundIpRuleOutput{})
	pulumi.RegisterOutputType(DomainInboundIpRuleArrayOutput{})
	pulumi.RegisterOutputType(DomainInputMappingDefaultValuesOutput{})
	pulumi.RegisterOutputType(DomainInputMappingDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(DomainInputMappingFieldsOutput{})
	pulumi.RegisterOutputType(DomainInputMappingFieldsPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterBoolEqualOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterBoolEqualArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberGreaterThanOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberInOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberInArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberLessThanOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberLessThanArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberNotInOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterNumberNotInArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringBeginsWithOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringBeginsWithArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringContainOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringContainArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringEndsWithOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringEndsWithArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringInOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringInArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringNotInOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAdvancedFilterStringNotInArrayOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAzureFunctionEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionAzureFunctionEndpointPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionEventhubEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionEventhubEndpointPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionHybridConnectionEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionHybridConnectionEndpointPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionRetryPolicyOutput{})
	pulumi.RegisterOutputType(EventSubscriptionRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageBlobDeadLetterDestinationOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageBlobDeadLetterDestinationPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageQueueEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionStorageQueueEndpointPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionSubjectFilterOutput{})
	pulumi.RegisterOutputType(EventSubscriptionSubjectFilterPtrOutput{})
	pulumi.RegisterOutputType(EventSubscriptionWebhookEndpointOutput{})
	pulumi.RegisterOutputType(EventSubscriptionWebhookEndpointPtrOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterPtrOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterBoolEqualOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterBoolEqualArrayOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanArrayOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterNumberGreaterThanOrEqualArrayOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterNumberInOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterNumberInArrayOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterNumberLessThanArrayOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterNumberLessThanOrEqualArrayOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterNumberNotInOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterNumberNotInArrayOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterStringBeginsWithArrayOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterStringContainOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterStringContainArrayOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterStringEndsWithOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterStringEndsWithArrayOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterStringInOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterStringInArrayOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterStringNotInOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAdvancedFilterStringNotInArrayOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAzureFunctionEndpointOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionAzureFunctionEndpointPtrOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionRetryPolicyOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionStorageBlobDeadLetterDestinationPtrOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionStorageQueueEndpointOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionStorageQueueEndpointPtrOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionSubjectFilterOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionSubjectFilterPtrOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionWebhookEndpointOutput{})
	pulumi.RegisterOutputType(SystemTopicEventSubscriptionWebhookEndpointPtrOutput{})
	pulumi.RegisterOutputType(TopicInboundIpRuleOutput{})
	pulumi.RegisterOutputType(TopicInboundIpRuleArrayOutput{})
	pulumi.RegisterOutputType(TopicInputMappingDefaultValuesOutput{})
	pulumi.RegisterOutputType(TopicInputMappingDefaultValuesPtrOutput{})
	pulumi.RegisterOutputType(TopicInputMappingFieldsOutput{})
	pulumi.RegisterOutputType(TopicInputMappingFieldsPtrOutput{})
}
