// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventgrid

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Event Grid Partner Namespace
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/eventgrid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := eventgrid.LookupPartnerNamespace(ctx, &eventgrid.LookupPartnerNamespaceArgs{
//				Name:              "my-eventgrid-partner-namespace",
//				ResourceGroupName: "example-resources",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("eventgridPartnerNamespaceEndpoint", example.Endpoint)
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This data source uses the following Azure API Providers:
//
// * `Microsoft.EventGrid` - 2022-06-15
func LookupPartnerNamespace(ctx *pulumi.Context, args *LookupPartnerNamespaceArgs, opts ...pulumi.InvokeOption) (*LookupPartnerNamespaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPartnerNamespaceResult
	err := ctx.Invoke("azure:eventgrid/getPartnerNamespace:getPartnerNamespace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPartnerNamespace.
type LookupPartnerNamespaceArgs struct {
	// The name of the Event Grid Partner Namespace resource.
	Name string `pulumi:"name"`
	// The name of the resource group in which the Event Grid Partner Namespace exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getPartnerNamespace.
type LookupPartnerNamespaceResult struct {
	// The endpoint for the Event Grid Partner Namespace.
	Endpoint string `pulumi:"endpoint"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// One or more `inboundIpRule` blocks as defined below.
	InboundIpRules []GetPartnerNamespaceInboundIpRule `pulumi:"inboundIpRules"`
	// Whether local authentication methods are enabled for the Event Grid Partner Namespace.
	LocalAuthenticationEnabled bool `pulumi:"localAuthenticationEnabled"`
	// The Azure Region where the Event Grid Partner Namespace exists.
	Location string `pulumi:"location"`
	Name     string `pulumi:"name"`
	// The resource Id of the partner registration associated with this Event Grid Partner Namespace.
	PartnerRegistrationId string `pulumi:"partnerRegistrationId"`
	// The partner topic routing mode.
	PartnerTopicRoutingMode string `pulumi:"partnerTopicRoutingMode"`
	// Whether or not public network access is allowed for this server.
	PublicNetworkAccess string `pulumi:"publicNetworkAccess"`
	ResourceGroupName   string `pulumi:"resourceGroupName"`
	// A mapping of tags which are assigned to the Event Grid Partner Namespace.
	Tags map[string]string `pulumi:"tags"`
}

func LookupPartnerNamespaceOutput(ctx *pulumi.Context, args LookupPartnerNamespaceOutputArgs, opts ...pulumi.InvokeOption) LookupPartnerNamespaceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPartnerNamespaceResultOutput, error) {
			args := v.(LookupPartnerNamespaceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure:eventgrid/getPartnerNamespace:getPartnerNamespace", args, LookupPartnerNamespaceResultOutput{}, options).(LookupPartnerNamespaceResultOutput), nil
		}).(LookupPartnerNamespaceResultOutput)
}

// A collection of arguments for invoking getPartnerNamespace.
type LookupPartnerNamespaceOutputArgs struct {
	// The name of the Event Grid Partner Namespace resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which the Event Grid Partner Namespace exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupPartnerNamespaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPartnerNamespaceArgs)(nil)).Elem()
}

// A collection of values returned by getPartnerNamespace.
type LookupPartnerNamespaceResultOutput struct{ *pulumi.OutputState }

func (LookupPartnerNamespaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPartnerNamespaceResult)(nil)).Elem()
}

func (o LookupPartnerNamespaceResultOutput) ToLookupPartnerNamespaceResultOutput() LookupPartnerNamespaceResultOutput {
	return o
}

func (o LookupPartnerNamespaceResultOutput) ToLookupPartnerNamespaceResultOutputWithContext(ctx context.Context) LookupPartnerNamespaceResultOutput {
	return o
}

// The endpoint for the Event Grid Partner Namespace.
func (o LookupPartnerNamespaceResultOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartnerNamespaceResult) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPartnerNamespaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartnerNamespaceResult) string { return v.Id }).(pulumi.StringOutput)
}

// One or more `inboundIpRule` blocks as defined below.
func (o LookupPartnerNamespaceResultOutput) InboundIpRules() GetPartnerNamespaceInboundIpRuleArrayOutput {
	return o.ApplyT(func(v LookupPartnerNamespaceResult) []GetPartnerNamespaceInboundIpRule { return v.InboundIpRules }).(GetPartnerNamespaceInboundIpRuleArrayOutput)
}

// Whether local authentication methods are enabled for the Event Grid Partner Namespace.
func (o LookupPartnerNamespaceResultOutput) LocalAuthenticationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPartnerNamespaceResult) bool { return v.LocalAuthenticationEnabled }).(pulumi.BoolOutput)
}

// The Azure Region where the Event Grid Partner Namespace exists.
func (o LookupPartnerNamespaceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartnerNamespaceResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupPartnerNamespaceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartnerNamespaceResult) string { return v.Name }).(pulumi.StringOutput)
}

// The resource Id of the partner registration associated with this Event Grid Partner Namespace.
func (o LookupPartnerNamespaceResultOutput) PartnerRegistrationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartnerNamespaceResult) string { return v.PartnerRegistrationId }).(pulumi.StringOutput)
}

// The partner topic routing mode.
func (o LookupPartnerNamespaceResultOutput) PartnerTopicRoutingMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartnerNamespaceResult) string { return v.PartnerTopicRoutingMode }).(pulumi.StringOutput)
}

// Whether or not public network access is allowed for this server.
func (o LookupPartnerNamespaceResultOutput) PublicNetworkAccess() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartnerNamespaceResult) string { return v.PublicNetworkAccess }).(pulumi.StringOutput)
}

func (o LookupPartnerNamespaceResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartnerNamespaceResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which are assigned to the Event Grid Partner Namespace.
func (o LookupPartnerNamespaceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupPartnerNamespaceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPartnerNamespaceResultOutput{})
}
