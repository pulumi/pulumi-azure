// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eventgrid

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing EventGrid Domain Topic
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/eventgrid"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := eventgrid.LookupDomainTopic(ctx, &eventgrid.LookupDomainTopicArgs{
//				Name:              "my-eventgrid-domain-topic",
//				ResourceGroupName: "example-resources",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDomainTopic(ctx *pulumi.Context, args *LookupDomainTopicArgs, opts ...pulumi.InvokeOption) (*LookupDomainTopicResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDomainTopicResult
	err := ctx.Invoke("azure:eventgrid/getDomainTopic:getDomainTopic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDomainTopic.
type LookupDomainTopicArgs struct {
	// The name of the EventGrid Domain Topic domain.
	DomainName string `pulumi:"domainName"`
	// The name of the EventGrid Domain Topic resource.
	Name string `pulumi:"name"`
	// The name of the resource group in which the EventGrid Domain Topic exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getDomainTopic.
type LookupDomainTopicResult struct {
	// The EventGrid Domain Topic Domain name.
	DomainName string `pulumi:"domainName"`
	// The provider-assigned unique ID for this managed resource.
	Id                string `pulumi:"id"`
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

func LookupDomainTopicOutput(ctx *pulumi.Context, args LookupDomainTopicOutputArgs, opts ...pulumi.InvokeOption) LookupDomainTopicResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDomainTopicResult, error) {
			args := v.(LookupDomainTopicArgs)
			r, err := LookupDomainTopic(ctx, &args, opts...)
			var s LookupDomainTopicResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDomainTopicResultOutput)
}

// A collection of arguments for invoking getDomainTopic.
type LookupDomainTopicOutputArgs struct {
	// The name of the EventGrid Domain Topic domain.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// The name of the EventGrid Domain Topic resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which the EventGrid Domain Topic exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupDomainTopicOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainTopicArgs)(nil)).Elem()
}

// A collection of values returned by getDomainTopic.
type LookupDomainTopicResultOutput struct{ *pulumi.OutputState }

func (LookupDomainTopicResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainTopicResult)(nil)).Elem()
}

func (o LookupDomainTopicResultOutput) ToLookupDomainTopicResultOutput() LookupDomainTopicResultOutput {
	return o
}

func (o LookupDomainTopicResultOutput) ToLookupDomainTopicResultOutputWithContext(ctx context.Context) LookupDomainTopicResultOutput {
	return o
}

// The EventGrid Domain Topic Domain name.
func (o LookupDomainTopicResultOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainTopicResult) string { return v.DomainName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDomainTopicResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainTopicResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDomainTopicResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainTopicResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDomainTopicResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainTopicResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDomainTopicResultOutput{})
}
