// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a Data Factory Service Principal credential resource. These resources are used by Data Factory to access data sources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/datafactory"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("westeurope"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "example", &datafactory.FactoryArgs{
//				Name:              pulumi.String("example"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
//				Name:                    pulumi.String("example"),
//				Location:                example.Location,
//				ResourceGroupName:       example.Name,
//				TenantId:                pulumi.String(current.TenantId),
//				SkuName:                 pulumi.String("premium"),
//				SoftDeleteRetentionDays: pulumi.Int(7),
//				AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: pulumi.String(current.TenantId),
//						ObjectId: pulumi.String(current.ObjectId),
//						KeyPermissions: pulumi.StringArray{
//							pulumi.String("Create"),
//							pulumi.String("Get"),
//						},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Set"),
//							pulumi.String("Get"),
//							pulumi.String("Delete"),
//							pulumi.String("Purge"),
//							pulumi.String("Recover"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSecret, err := keyvault.NewSecret(ctx, "example", &keyvault.SecretArgs{
//				Name:       pulumi.String("example"),
//				Value:      pulumi.String("example-secret"),
//				KeyVaultId: exampleKeyVault.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLinkedServiceKeyVault, err := datafactory.NewLinkedServiceKeyVault(ctx, "example", &datafactory.LinkedServiceKeyVaultArgs{
//				Name:          pulumi.String("example"),
//				DataFactoryId: exampleFactory.ID(),
//				KeyVaultId:    exampleKeyVault.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewCredentialServicePrincipal(ctx, "example", &datafactory.CredentialServicePrincipalArgs{
//				Name:               pulumi.String("example"),
//				Description:        pulumi.String("example description"),
//				DataFactoryId:      exampleFactory.ID(),
//				TenantId:           pulumi.String(current.TenantId),
//				ServicePrincipalId: pulumi.String(current.ClientId),
//				ServicePrincipalKey: &datafactory.CredentialServicePrincipalServicePrincipalKeyArgs{
//					LinkedServiceName: exampleLinkedServiceKeyVault.Name,
//					SecretName:        exampleSecret.Name,
//					SecretVersion:     exampleSecret.Version,
//				},
//				Annotations: pulumi.StringArray{
//					pulumi.String("1"),
//					pulumi.String("2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.DataFactory`: 2018-06-01
//
// ## Import
//
// Data Factory Credentials can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:datafactory/credentialServicePrincipal:CredentialServicePrincipal example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-resources/providers/Microsoft.DataFactory/factories/example/credentials/credential1
// ```
type CredentialServicePrincipal struct {
	pulumi.CustomResourceState

	// List of tags that can be used for describing the Data Factory Credential.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The description for the Data Factory Credential.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the name of the Credential. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Client ID of the Service Principal.
	ServicePrincipalId pulumi.StringOutput `pulumi:"servicePrincipalId"`
	// A `servicePrincipalKey` block as defined below.
	ServicePrincipalKey CredentialServicePrincipalServicePrincipalKeyPtrOutput `pulumi:"servicePrincipalKey"`
	// The Tenant ID of the Service Principal.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewCredentialServicePrincipal registers a new resource with the given unique name, arguments, and options.
func NewCredentialServicePrincipal(ctx *pulumi.Context,
	name string, args *CredentialServicePrincipalArgs, opts ...pulumi.ResourceOption) (*CredentialServicePrincipal, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	if args.ServicePrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'ServicePrincipalId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CredentialServicePrincipal
	err := ctx.RegisterResource("azure:datafactory/credentialServicePrincipal:CredentialServicePrincipal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCredentialServicePrincipal gets an existing CredentialServicePrincipal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCredentialServicePrincipal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CredentialServicePrincipalState, opts ...pulumi.ResourceOption) (*CredentialServicePrincipal, error) {
	var resource CredentialServicePrincipal
	err := ctx.ReadResource("azure:datafactory/credentialServicePrincipal:CredentialServicePrincipal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CredentialServicePrincipal resources.
type credentialServicePrincipalState struct {
	// List of tags that can be used for describing the Data Factory Credential.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Credential.
	Description *string `pulumi:"description"`
	// Specifies the name of the Credential. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The Client ID of the Service Principal.
	ServicePrincipalId *string `pulumi:"servicePrincipalId"`
	// A `servicePrincipalKey` block as defined below.
	ServicePrincipalKey *CredentialServicePrincipalServicePrincipalKey `pulumi:"servicePrincipalKey"`
	// The Tenant ID of the Service Principal.
	TenantId *string `pulumi:"tenantId"`
}

type CredentialServicePrincipalState struct {
	// List of tags that can be used for describing the Data Factory Credential.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The description for the Data Factory Credential.
	Description pulumi.StringPtrInput
	// Specifies the name of the Credential. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The Client ID of the Service Principal.
	ServicePrincipalId pulumi.StringPtrInput
	// A `servicePrincipalKey` block as defined below.
	ServicePrincipalKey CredentialServicePrincipalServicePrincipalKeyPtrInput
	// The Tenant ID of the Service Principal.
	TenantId pulumi.StringPtrInput
}

func (CredentialServicePrincipalState) ElementType() reflect.Type {
	return reflect.TypeOf((*credentialServicePrincipalState)(nil)).Elem()
}

type credentialServicePrincipalArgs struct {
	// List of tags that can be used for describing the Data Factory Credential.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Credential.
	Description *string `pulumi:"description"`
	// Specifies the name of the Credential. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The Client ID of the Service Principal.
	ServicePrincipalId string `pulumi:"servicePrincipalId"`
	// A `servicePrincipalKey` block as defined below.
	ServicePrincipalKey *CredentialServicePrincipalServicePrincipalKey `pulumi:"servicePrincipalKey"`
	// The Tenant ID of the Service Principal.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a CredentialServicePrincipal resource.
type CredentialServicePrincipalArgs struct {
	// List of tags that can be used for describing the Data Factory Credential.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// The description for the Data Factory Credential.
	Description pulumi.StringPtrInput
	// Specifies the name of the Credential. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The Client ID of the Service Principal.
	ServicePrincipalId pulumi.StringInput
	// A `servicePrincipalKey` block as defined below.
	ServicePrincipalKey CredentialServicePrincipalServicePrincipalKeyPtrInput
	// The Tenant ID of the Service Principal.
	TenantId pulumi.StringInput
}

func (CredentialServicePrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*credentialServicePrincipalArgs)(nil)).Elem()
}

type CredentialServicePrincipalInput interface {
	pulumi.Input

	ToCredentialServicePrincipalOutput() CredentialServicePrincipalOutput
	ToCredentialServicePrincipalOutputWithContext(ctx context.Context) CredentialServicePrincipalOutput
}

func (*CredentialServicePrincipal) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialServicePrincipal)(nil)).Elem()
}

func (i *CredentialServicePrincipal) ToCredentialServicePrincipalOutput() CredentialServicePrincipalOutput {
	return i.ToCredentialServicePrincipalOutputWithContext(context.Background())
}

func (i *CredentialServicePrincipal) ToCredentialServicePrincipalOutputWithContext(ctx context.Context) CredentialServicePrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialServicePrincipalOutput)
}

// CredentialServicePrincipalArrayInput is an input type that accepts CredentialServicePrincipalArray and CredentialServicePrincipalArrayOutput values.
// You can construct a concrete instance of `CredentialServicePrincipalArrayInput` via:
//
//	CredentialServicePrincipalArray{ CredentialServicePrincipalArgs{...} }
type CredentialServicePrincipalArrayInput interface {
	pulumi.Input

	ToCredentialServicePrincipalArrayOutput() CredentialServicePrincipalArrayOutput
	ToCredentialServicePrincipalArrayOutputWithContext(context.Context) CredentialServicePrincipalArrayOutput
}

type CredentialServicePrincipalArray []CredentialServicePrincipalInput

func (CredentialServicePrincipalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CredentialServicePrincipal)(nil)).Elem()
}

func (i CredentialServicePrincipalArray) ToCredentialServicePrincipalArrayOutput() CredentialServicePrincipalArrayOutput {
	return i.ToCredentialServicePrincipalArrayOutputWithContext(context.Background())
}

func (i CredentialServicePrincipalArray) ToCredentialServicePrincipalArrayOutputWithContext(ctx context.Context) CredentialServicePrincipalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialServicePrincipalArrayOutput)
}

// CredentialServicePrincipalMapInput is an input type that accepts CredentialServicePrincipalMap and CredentialServicePrincipalMapOutput values.
// You can construct a concrete instance of `CredentialServicePrincipalMapInput` via:
//
//	CredentialServicePrincipalMap{ "key": CredentialServicePrincipalArgs{...} }
type CredentialServicePrincipalMapInput interface {
	pulumi.Input

	ToCredentialServicePrincipalMapOutput() CredentialServicePrincipalMapOutput
	ToCredentialServicePrincipalMapOutputWithContext(context.Context) CredentialServicePrincipalMapOutput
}

type CredentialServicePrincipalMap map[string]CredentialServicePrincipalInput

func (CredentialServicePrincipalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CredentialServicePrincipal)(nil)).Elem()
}

func (i CredentialServicePrincipalMap) ToCredentialServicePrincipalMapOutput() CredentialServicePrincipalMapOutput {
	return i.ToCredentialServicePrincipalMapOutputWithContext(context.Background())
}

func (i CredentialServicePrincipalMap) ToCredentialServicePrincipalMapOutputWithContext(ctx context.Context) CredentialServicePrincipalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialServicePrincipalMapOutput)
}

type CredentialServicePrincipalOutput struct{ *pulumi.OutputState }

func (CredentialServicePrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialServicePrincipal)(nil)).Elem()
}

func (o CredentialServicePrincipalOutput) ToCredentialServicePrincipalOutput() CredentialServicePrincipalOutput {
	return o
}

func (o CredentialServicePrincipalOutput) ToCredentialServicePrincipalOutputWithContext(ctx context.Context) CredentialServicePrincipalOutput {
	return o
}

// List of tags that can be used for describing the Data Factory Credential.
func (o CredentialServicePrincipalOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CredentialServicePrincipal) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
func (o CredentialServicePrincipalOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialServicePrincipal) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The description for the Data Factory Credential.
func (o CredentialServicePrincipalOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialServicePrincipal) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Credential. Changing this forces a new resource to be created.
func (o CredentialServicePrincipalOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialServicePrincipal) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Client ID of the Service Principal.
func (o CredentialServicePrincipalOutput) ServicePrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialServicePrincipal) pulumi.StringOutput { return v.ServicePrincipalId }).(pulumi.StringOutput)
}

// A `servicePrincipalKey` block as defined below.
func (o CredentialServicePrincipalOutput) ServicePrincipalKey() CredentialServicePrincipalServicePrincipalKeyPtrOutput {
	return o.ApplyT(func(v *CredentialServicePrincipal) CredentialServicePrincipalServicePrincipalKeyPtrOutput {
		return v.ServicePrincipalKey
	}).(CredentialServicePrincipalServicePrincipalKeyPtrOutput)
}

// The Tenant ID of the Service Principal.
func (o CredentialServicePrincipalOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialServicePrincipal) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type CredentialServicePrincipalArrayOutput struct{ *pulumi.OutputState }

func (CredentialServicePrincipalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CredentialServicePrincipal)(nil)).Elem()
}

func (o CredentialServicePrincipalArrayOutput) ToCredentialServicePrincipalArrayOutput() CredentialServicePrincipalArrayOutput {
	return o
}

func (o CredentialServicePrincipalArrayOutput) ToCredentialServicePrincipalArrayOutputWithContext(ctx context.Context) CredentialServicePrincipalArrayOutput {
	return o
}

func (o CredentialServicePrincipalArrayOutput) Index(i pulumi.IntInput) CredentialServicePrincipalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CredentialServicePrincipal {
		return vs[0].([]*CredentialServicePrincipal)[vs[1].(int)]
	}).(CredentialServicePrincipalOutput)
}

type CredentialServicePrincipalMapOutput struct{ *pulumi.OutputState }

func (CredentialServicePrincipalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CredentialServicePrincipal)(nil)).Elem()
}

func (o CredentialServicePrincipalMapOutput) ToCredentialServicePrincipalMapOutput() CredentialServicePrincipalMapOutput {
	return o
}

func (o CredentialServicePrincipalMapOutput) ToCredentialServicePrincipalMapOutputWithContext(ctx context.Context) CredentialServicePrincipalMapOutput {
	return o
}

func (o CredentialServicePrincipalMapOutput) MapIndex(k pulumi.StringInput) CredentialServicePrincipalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CredentialServicePrincipal {
		return vs[0].(map[string]*CredentialServicePrincipal)[vs[1].(string)]
	}).(CredentialServicePrincipalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialServicePrincipalInput)(nil)).Elem(), &CredentialServicePrincipal{})
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialServicePrincipalArrayInput)(nil)).Elem(), CredentialServicePrincipalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialServicePrincipalMapInput)(nil)).Elem(), CredentialServicePrincipalMap{})
	pulumi.RegisterOutputType(CredentialServicePrincipalOutput{})
	pulumi.RegisterOutputType(CredentialServicePrincipalArrayOutput{})
	pulumi.RegisterOutputType(CredentialServicePrincipalMapOutput{})
}
