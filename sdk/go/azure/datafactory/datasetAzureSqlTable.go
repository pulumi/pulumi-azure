// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure SQL Table Dataset inside an Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleLinkedServiceAzureSqlDatabase, err := datafactory.NewLinkedServiceAzureSqlDatabase(ctx, "exampleLinkedServiceAzureSqlDatabase", &datafactory.LinkedServiceAzureSqlDatabaseArgs{
//				DataFactoryId:    exampleFactory.ID(),
//				ConnectionString: pulumi.String("Integrated Security=False;Data Source=test;Initial Catalog=test;Initial Catalog=test;User ID=test;Password=test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewDatasetAzureSqlTable(ctx, "exampleDatasetAzureSqlTable", &datafactory.DatasetAzureSqlTableArgs{
//				DataFactoryId:   exampleFactory.ID(),
//				LinkedServiceId: exampleLinkedServiceAzureSqlDatabase.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Factory Azure SQL Table Datasets can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datafactory/datasetAzureSqlTable:DatasetAzureSqlTable example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/datasets/example
//
// ```
type DatasetAzureSqlTable struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Dataset Azure SQL Table.
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Dataset Azure SQL Table.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The description for the Data Factory Dataset Azure SQL Table.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// The Data Factory Linked Service ID in which to associate the Dataset with.
	LinkedServiceId pulumi.StringOutput `pulumi:"linkedServiceId"`
	// Specifies the name of the Data Factory Dataset Azure SQL Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Dataset Azure SQL Table.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// The schema name of the table in the Azure SQL Database.
	Schema pulumi.StringPtrOutput `pulumi:"schema"`
	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetAzureSqlTableSchemaColumnArrayOutput `pulumi:"schemaColumns"`
	// The table name of the table in the Azure SQL Database.
	Table pulumi.StringPtrOutput `pulumi:"table"`
}

// NewDatasetAzureSqlTable registers a new resource with the given unique name, arguments, and options.
func NewDatasetAzureSqlTable(ctx *pulumi.Context,
	name string, args *DatasetAzureSqlTableArgs, opts ...pulumi.ResourceOption) (*DatasetAzureSqlTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	if args.LinkedServiceId == nil {
		return nil, errors.New("invalid value for required argument 'LinkedServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatasetAzureSqlTable
	err := ctx.RegisterResource("azure:datafactory/datasetAzureSqlTable:DatasetAzureSqlTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetAzureSqlTable gets an existing DatasetAzureSqlTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetAzureSqlTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetAzureSqlTableState, opts ...pulumi.ResourceOption) (*DatasetAzureSqlTable, error) {
	var resource DatasetAzureSqlTable
	err := ctx.ReadResource("azure:datafactory/datasetAzureSqlTable:DatasetAzureSqlTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetAzureSqlTable resources.
type datasetAzureSqlTableState struct {
	// A map of additional properties to associate with the Data Factory Dataset Azure SQL Table.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Dataset Azure SQL Table.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Dataset Azure SQL Table.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder *string `pulumi:"folder"`
	// The Data Factory Linked Service ID in which to associate the Dataset with.
	LinkedServiceId *string `pulumi:"linkedServiceId"`
	// Specifies the name of the Data Factory Dataset Azure SQL Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Dataset Azure SQL Table.
	Parameters map[string]string `pulumi:"parameters"`
	// The schema name of the table in the Azure SQL Database.
	Schema *string `pulumi:"schema"`
	// A `schemaColumn` block as defined below.
	SchemaColumns []DatasetAzureSqlTableSchemaColumn `pulumi:"schemaColumns"`
	// The table name of the table in the Azure SQL Database.
	Table *string `pulumi:"table"`
}

type DatasetAzureSqlTableState struct {
	// A map of additional properties to associate with the Data Factory Dataset Azure SQL Table.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Dataset Azure SQL Table.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The description for the Data Factory Dataset Azure SQL Table.
	Description pulumi.StringPtrInput
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringPtrInput
	// The Data Factory Linked Service ID in which to associate the Dataset with.
	LinkedServiceId pulumi.StringPtrInput
	// Specifies the name of the Data Factory Dataset Azure SQL Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Dataset Azure SQL Table.
	Parameters pulumi.StringMapInput
	// The schema name of the table in the Azure SQL Database.
	Schema pulumi.StringPtrInput
	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetAzureSqlTableSchemaColumnArrayInput
	// The table name of the table in the Azure SQL Database.
	Table pulumi.StringPtrInput
}

func (DatasetAzureSqlTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetAzureSqlTableState)(nil)).Elem()
}

type datasetAzureSqlTableArgs struct {
	// A map of additional properties to associate with the Data Factory Dataset Azure SQL Table.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Dataset Azure SQL Table.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Dataset Azure SQL Table.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder *string `pulumi:"folder"`
	// The Data Factory Linked Service ID in which to associate the Dataset with.
	LinkedServiceId string `pulumi:"linkedServiceId"`
	// Specifies the name of the Data Factory Dataset Azure SQL Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Dataset Azure SQL Table.
	Parameters map[string]string `pulumi:"parameters"`
	// The schema name of the table in the Azure SQL Database.
	Schema *string `pulumi:"schema"`
	// A `schemaColumn` block as defined below.
	SchemaColumns []DatasetAzureSqlTableSchemaColumn `pulumi:"schemaColumns"`
	// The table name of the table in the Azure SQL Database.
	Table *string `pulumi:"table"`
}

// The set of arguments for constructing a DatasetAzureSqlTable resource.
type DatasetAzureSqlTableArgs struct {
	// A map of additional properties to associate with the Data Factory Dataset Azure SQL Table.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Dataset Azure SQL Table.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// The description for the Data Factory Dataset Azure SQL Table.
	Description pulumi.StringPtrInput
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringPtrInput
	// The Data Factory Linked Service ID in which to associate the Dataset with.
	LinkedServiceId pulumi.StringInput
	// Specifies the name of the Data Factory Dataset Azure SQL Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Dataset Azure SQL Table.
	Parameters pulumi.StringMapInput
	// The schema name of the table in the Azure SQL Database.
	Schema pulumi.StringPtrInput
	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetAzureSqlTableSchemaColumnArrayInput
	// The table name of the table in the Azure SQL Database.
	Table pulumi.StringPtrInput
}

func (DatasetAzureSqlTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetAzureSqlTableArgs)(nil)).Elem()
}

type DatasetAzureSqlTableInput interface {
	pulumi.Input

	ToDatasetAzureSqlTableOutput() DatasetAzureSqlTableOutput
	ToDatasetAzureSqlTableOutputWithContext(ctx context.Context) DatasetAzureSqlTableOutput
}

func (*DatasetAzureSqlTable) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAzureSqlTable)(nil)).Elem()
}

func (i *DatasetAzureSqlTable) ToDatasetAzureSqlTableOutput() DatasetAzureSqlTableOutput {
	return i.ToDatasetAzureSqlTableOutputWithContext(context.Background())
}

func (i *DatasetAzureSqlTable) ToDatasetAzureSqlTableOutputWithContext(ctx context.Context) DatasetAzureSqlTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAzureSqlTableOutput)
}

// DatasetAzureSqlTableArrayInput is an input type that accepts DatasetAzureSqlTableArray and DatasetAzureSqlTableArrayOutput values.
// You can construct a concrete instance of `DatasetAzureSqlTableArrayInput` via:
//
//	DatasetAzureSqlTableArray{ DatasetAzureSqlTableArgs{...} }
type DatasetAzureSqlTableArrayInput interface {
	pulumi.Input

	ToDatasetAzureSqlTableArrayOutput() DatasetAzureSqlTableArrayOutput
	ToDatasetAzureSqlTableArrayOutputWithContext(context.Context) DatasetAzureSqlTableArrayOutput
}

type DatasetAzureSqlTableArray []DatasetAzureSqlTableInput

func (DatasetAzureSqlTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetAzureSqlTable)(nil)).Elem()
}

func (i DatasetAzureSqlTableArray) ToDatasetAzureSqlTableArrayOutput() DatasetAzureSqlTableArrayOutput {
	return i.ToDatasetAzureSqlTableArrayOutputWithContext(context.Background())
}

func (i DatasetAzureSqlTableArray) ToDatasetAzureSqlTableArrayOutputWithContext(ctx context.Context) DatasetAzureSqlTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAzureSqlTableArrayOutput)
}

// DatasetAzureSqlTableMapInput is an input type that accepts DatasetAzureSqlTableMap and DatasetAzureSqlTableMapOutput values.
// You can construct a concrete instance of `DatasetAzureSqlTableMapInput` via:
//
//	DatasetAzureSqlTableMap{ "key": DatasetAzureSqlTableArgs{...} }
type DatasetAzureSqlTableMapInput interface {
	pulumi.Input

	ToDatasetAzureSqlTableMapOutput() DatasetAzureSqlTableMapOutput
	ToDatasetAzureSqlTableMapOutputWithContext(context.Context) DatasetAzureSqlTableMapOutput
}

type DatasetAzureSqlTableMap map[string]DatasetAzureSqlTableInput

func (DatasetAzureSqlTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetAzureSqlTable)(nil)).Elem()
}

func (i DatasetAzureSqlTableMap) ToDatasetAzureSqlTableMapOutput() DatasetAzureSqlTableMapOutput {
	return i.ToDatasetAzureSqlTableMapOutputWithContext(context.Background())
}

func (i DatasetAzureSqlTableMap) ToDatasetAzureSqlTableMapOutputWithContext(ctx context.Context) DatasetAzureSqlTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAzureSqlTableMapOutput)
}

type DatasetAzureSqlTableOutput struct{ *pulumi.OutputState }

func (DatasetAzureSqlTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAzureSqlTable)(nil)).Elem()
}

func (o DatasetAzureSqlTableOutput) ToDatasetAzureSqlTableOutput() DatasetAzureSqlTableOutput {
	return o
}

func (o DatasetAzureSqlTableOutput) ToDatasetAzureSqlTableOutputWithContext(ctx context.Context) DatasetAzureSqlTableOutput {
	return o
}

// A map of additional properties to associate with the Data Factory Dataset Azure SQL Table.
func (o DatasetAzureSqlTableOutput) AdditionalProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatasetAzureSqlTable) pulumi.StringMapOutput { return v.AdditionalProperties }).(pulumi.StringMapOutput)
}

// List of tags that can be used for describing the Data Factory Dataset Azure SQL Table.
func (o DatasetAzureSqlTableOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatasetAzureSqlTable) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
func (o DatasetAzureSqlTableOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetAzureSqlTable) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The description for the Data Factory Dataset Azure SQL Table.
func (o DatasetAzureSqlTableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAzureSqlTable) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
func (o DatasetAzureSqlTableOutput) Folder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAzureSqlTable) pulumi.StringPtrOutput { return v.Folder }).(pulumi.StringPtrOutput)
}

// The Data Factory Linked Service ID in which to associate the Dataset with.
func (o DatasetAzureSqlTableOutput) LinkedServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetAzureSqlTable) pulumi.StringOutput { return v.LinkedServiceId }).(pulumi.StringOutput)
}

// Specifies the name of the Data Factory Dataset Azure SQL Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
func (o DatasetAzureSqlTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetAzureSqlTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of parameters to associate with the Data Factory Dataset Azure SQL Table.
func (o DatasetAzureSqlTableOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatasetAzureSqlTable) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// The schema name of the table in the Azure SQL Database.
func (o DatasetAzureSqlTableOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAzureSqlTable) pulumi.StringPtrOutput { return v.Schema }).(pulumi.StringPtrOutput)
}

// A `schemaColumn` block as defined below.
func (o DatasetAzureSqlTableOutput) SchemaColumns() DatasetAzureSqlTableSchemaColumnArrayOutput {
	return o.ApplyT(func(v *DatasetAzureSqlTable) DatasetAzureSqlTableSchemaColumnArrayOutput { return v.SchemaColumns }).(DatasetAzureSqlTableSchemaColumnArrayOutput)
}

// The table name of the table in the Azure SQL Database.
func (o DatasetAzureSqlTableOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetAzureSqlTable) pulumi.StringPtrOutput { return v.Table }).(pulumi.StringPtrOutput)
}

type DatasetAzureSqlTableArrayOutput struct{ *pulumi.OutputState }

func (DatasetAzureSqlTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetAzureSqlTable)(nil)).Elem()
}

func (o DatasetAzureSqlTableArrayOutput) ToDatasetAzureSqlTableArrayOutput() DatasetAzureSqlTableArrayOutput {
	return o
}

func (o DatasetAzureSqlTableArrayOutput) ToDatasetAzureSqlTableArrayOutputWithContext(ctx context.Context) DatasetAzureSqlTableArrayOutput {
	return o
}

func (o DatasetAzureSqlTableArrayOutput) Index(i pulumi.IntInput) DatasetAzureSqlTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatasetAzureSqlTable {
		return vs[0].([]*DatasetAzureSqlTable)[vs[1].(int)]
	}).(DatasetAzureSqlTableOutput)
}

type DatasetAzureSqlTableMapOutput struct{ *pulumi.OutputState }

func (DatasetAzureSqlTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetAzureSqlTable)(nil)).Elem()
}

func (o DatasetAzureSqlTableMapOutput) ToDatasetAzureSqlTableMapOutput() DatasetAzureSqlTableMapOutput {
	return o
}

func (o DatasetAzureSqlTableMapOutput) ToDatasetAzureSqlTableMapOutputWithContext(ctx context.Context) DatasetAzureSqlTableMapOutput {
	return o
}

func (o DatasetAzureSqlTableMapOutput) MapIndex(k pulumi.StringInput) DatasetAzureSqlTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatasetAzureSqlTable {
		return vs[0].(map[string]*DatasetAzureSqlTable)[vs[1].(string)]
	}).(DatasetAzureSqlTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAzureSqlTableInput)(nil)).Elem(), &DatasetAzureSqlTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAzureSqlTableArrayInput)(nil)).Elem(), DatasetAzureSqlTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAzureSqlTableMapInput)(nil)).Elem(), DatasetAzureSqlTableMap{})
	pulumi.RegisterOutputType(DatasetAzureSqlTableOutput{})
	pulumi.RegisterOutputType(DatasetAzureSqlTableArrayOutput{})
	pulumi.RegisterOutputType(DatasetAzureSqlTableMapOutput{})
}
