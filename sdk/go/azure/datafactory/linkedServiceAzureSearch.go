// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linked Service (connection) between Azure Search Service and Azure Data Factory.
//
// ## Import
//
// Data Factory Linked Service's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datafactory/linkedServiceAzureSearch:LinkedServiceAzureSearch example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
//
// ```
type LinkedServiceAzureSearch struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Search Linked Service:
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The encrypted credential to connect to Azure Search Service.
	EncryptedCredential pulumi.StringOutput `pulumi:"encryptedCredential"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrOutput `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// The key of the Azure Search Service.
	SearchServiceKey pulumi.StringOutput `pulumi:"searchServiceKey"`
	// The URL of the Search Service endpoint (e.g. <https://{searchServiceName}.search.windows.net>).
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewLinkedServiceAzureSearch registers a new resource with the given unique name, arguments, and options.
func NewLinkedServiceAzureSearch(ctx *pulumi.Context,
	name string, args *LinkedServiceAzureSearchArgs, opts ...pulumi.ResourceOption) (*LinkedServiceAzureSearch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	if args.SearchServiceKey == nil {
		return nil, errors.New("invalid value for required argument 'SearchServiceKey'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LinkedServiceAzureSearch
	err := ctx.RegisterResource("azure:datafactory/linkedServiceAzureSearch:LinkedServiceAzureSearch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedServiceAzureSearch gets an existing LinkedServiceAzureSearch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedServiceAzureSearch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedServiceAzureSearchState, opts ...pulumi.ResourceOption) (*LinkedServiceAzureSearch, error) {
	var resource LinkedServiceAzureSearch
	err := ctx.ReadResource("azure:datafactory/linkedServiceAzureSearch:LinkedServiceAzureSearch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedServiceAzureSearch resources.
type linkedServiceAzureSearchState struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Search Linked Service:
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description *string `pulumi:"description"`
	// The encrypted credential to connect to Azure Search Service.
	EncryptedCredential *string `pulumi:"encryptedCredential"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters map[string]string `pulumi:"parameters"`
	// The key of the Azure Search Service.
	SearchServiceKey *string `pulumi:"searchServiceKey"`
	// The URL of the Search Service endpoint (e.g. <https://{searchServiceName}.search.windows.net>).
	Url *string `pulumi:"url"`
}

type LinkedServiceAzureSearchState struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Search Linked Service:
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrInput
	// The encrypted credential to connect to Azure Search Service.
	EncryptedCredential pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrInput
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapInput
	// The key of the Azure Search Service.
	SearchServiceKey pulumi.StringPtrInput
	// The URL of the Search Service endpoint (e.g. <https://{searchServiceName}.search.windows.net>).
	Url pulumi.StringPtrInput
}

func (LinkedServiceAzureSearchState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceAzureSearchState)(nil)).Elem()
}

type linkedServiceAzureSearchArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Search Linked Service:
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters map[string]string `pulumi:"parameters"`
	// The key of the Azure Search Service.
	SearchServiceKey string `pulumi:"searchServiceKey"`
	// The URL of the Search Service endpoint (e.g. <https://{searchServiceName}.search.windows.net>).
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a LinkedServiceAzureSearch resource.
type LinkedServiceAzureSearchArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Search Linked Service:
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrInput
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapInput
	// The key of the Azure Search Service.
	SearchServiceKey pulumi.StringInput
	// The URL of the Search Service endpoint (e.g. <https://{searchServiceName}.search.windows.net>).
	Url pulumi.StringInput
}

func (LinkedServiceAzureSearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceAzureSearchArgs)(nil)).Elem()
}

type LinkedServiceAzureSearchInput interface {
	pulumi.Input

	ToLinkedServiceAzureSearchOutput() LinkedServiceAzureSearchOutput
	ToLinkedServiceAzureSearchOutputWithContext(ctx context.Context) LinkedServiceAzureSearchOutput
}

func (*LinkedServiceAzureSearch) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceAzureSearch)(nil)).Elem()
}

func (i *LinkedServiceAzureSearch) ToLinkedServiceAzureSearchOutput() LinkedServiceAzureSearchOutput {
	return i.ToLinkedServiceAzureSearchOutputWithContext(context.Background())
}

func (i *LinkedServiceAzureSearch) ToLinkedServiceAzureSearchOutputWithContext(ctx context.Context) LinkedServiceAzureSearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceAzureSearchOutput)
}

// LinkedServiceAzureSearchArrayInput is an input type that accepts LinkedServiceAzureSearchArray and LinkedServiceAzureSearchArrayOutput values.
// You can construct a concrete instance of `LinkedServiceAzureSearchArrayInput` via:
//
//	LinkedServiceAzureSearchArray{ LinkedServiceAzureSearchArgs{...} }
type LinkedServiceAzureSearchArrayInput interface {
	pulumi.Input

	ToLinkedServiceAzureSearchArrayOutput() LinkedServiceAzureSearchArrayOutput
	ToLinkedServiceAzureSearchArrayOutputWithContext(context.Context) LinkedServiceAzureSearchArrayOutput
}

type LinkedServiceAzureSearchArray []LinkedServiceAzureSearchInput

func (LinkedServiceAzureSearchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceAzureSearch)(nil)).Elem()
}

func (i LinkedServiceAzureSearchArray) ToLinkedServiceAzureSearchArrayOutput() LinkedServiceAzureSearchArrayOutput {
	return i.ToLinkedServiceAzureSearchArrayOutputWithContext(context.Background())
}

func (i LinkedServiceAzureSearchArray) ToLinkedServiceAzureSearchArrayOutputWithContext(ctx context.Context) LinkedServiceAzureSearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceAzureSearchArrayOutput)
}

// LinkedServiceAzureSearchMapInput is an input type that accepts LinkedServiceAzureSearchMap and LinkedServiceAzureSearchMapOutput values.
// You can construct a concrete instance of `LinkedServiceAzureSearchMapInput` via:
//
//	LinkedServiceAzureSearchMap{ "key": LinkedServiceAzureSearchArgs{...} }
type LinkedServiceAzureSearchMapInput interface {
	pulumi.Input

	ToLinkedServiceAzureSearchMapOutput() LinkedServiceAzureSearchMapOutput
	ToLinkedServiceAzureSearchMapOutputWithContext(context.Context) LinkedServiceAzureSearchMapOutput
}

type LinkedServiceAzureSearchMap map[string]LinkedServiceAzureSearchInput

func (LinkedServiceAzureSearchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceAzureSearch)(nil)).Elem()
}

func (i LinkedServiceAzureSearchMap) ToLinkedServiceAzureSearchMapOutput() LinkedServiceAzureSearchMapOutput {
	return i.ToLinkedServiceAzureSearchMapOutputWithContext(context.Background())
}

func (i LinkedServiceAzureSearchMap) ToLinkedServiceAzureSearchMapOutputWithContext(ctx context.Context) LinkedServiceAzureSearchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceAzureSearchMapOutput)
}

type LinkedServiceAzureSearchOutput struct{ *pulumi.OutputState }

func (LinkedServiceAzureSearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceAzureSearch)(nil)).Elem()
}

func (o LinkedServiceAzureSearchOutput) ToLinkedServiceAzureSearchOutput() LinkedServiceAzureSearchOutput {
	return o
}

func (o LinkedServiceAzureSearchOutput) ToLinkedServiceAzureSearchOutputWithContext(ctx context.Context) LinkedServiceAzureSearchOutput {
	return o
}

// A map of additional properties to associate with the Data Factory Linked Service.
//
// The following supported arguments are specific to Azure Search Linked Service:
func (o LinkedServiceAzureSearchOutput) AdditionalProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSearch) pulumi.StringMapOutput { return v.AdditionalProperties }).(pulumi.StringMapOutput)
}

// List of tags that can be used for describing the Data Factory Linked Service.
func (o LinkedServiceAzureSearchOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSearch) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
func (o LinkedServiceAzureSearchOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSearch) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The description for the Data Factory Linked Service.
func (o LinkedServiceAzureSearchOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSearch) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The encrypted credential to connect to Azure Search Service.
func (o LinkedServiceAzureSearchOutput) EncryptedCredential() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSearch) pulumi.StringOutput { return v.EncryptedCredential }).(pulumi.StringOutput)
}

// The integration runtime reference to associate with the Data Factory Linked Service.
func (o LinkedServiceAzureSearchOutput) IntegrationRuntimeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSearch) pulumi.StringPtrOutput { return v.IntegrationRuntimeName }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
func (o LinkedServiceAzureSearchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSearch) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of parameters to associate with the Data Factory Linked Service.
func (o LinkedServiceAzureSearchOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSearch) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// The key of the Azure Search Service.
func (o LinkedServiceAzureSearchOutput) SearchServiceKey() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSearch) pulumi.StringOutput { return v.SearchServiceKey }).(pulumi.StringOutput)
}

// The URL of the Search Service endpoint (e.g. <https://{searchServiceName}.search.windows.net>).
func (o LinkedServiceAzureSearchOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSearch) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type LinkedServiceAzureSearchArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceAzureSearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceAzureSearch)(nil)).Elem()
}

func (o LinkedServiceAzureSearchArrayOutput) ToLinkedServiceAzureSearchArrayOutput() LinkedServiceAzureSearchArrayOutput {
	return o
}

func (o LinkedServiceAzureSearchArrayOutput) ToLinkedServiceAzureSearchArrayOutputWithContext(ctx context.Context) LinkedServiceAzureSearchArrayOutput {
	return o
}

func (o LinkedServiceAzureSearchArrayOutput) Index(i pulumi.IntInput) LinkedServiceAzureSearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinkedServiceAzureSearch {
		return vs[0].([]*LinkedServiceAzureSearch)[vs[1].(int)]
	}).(LinkedServiceAzureSearchOutput)
}

type LinkedServiceAzureSearchMapOutput struct{ *pulumi.OutputState }

func (LinkedServiceAzureSearchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceAzureSearch)(nil)).Elem()
}

func (o LinkedServiceAzureSearchMapOutput) ToLinkedServiceAzureSearchMapOutput() LinkedServiceAzureSearchMapOutput {
	return o
}

func (o LinkedServiceAzureSearchMapOutput) ToLinkedServiceAzureSearchMapOutputWithContext(ctx context.Context) LinkedServiceAzureSearchMapOutput {
	return o
}

func (o LinkedServiceAzureSearchMapOutput) MapIndex(k pulumi.StringInput) LinkedServiceAzureSearchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinkedServiceAzureSearch {
		return vs[0].(map[string]*LinkedServiceAzureSearch)[vs[1].(string)]
	}).(LinkedServiceAzureSearchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceAzureSearchInput)(nil)).Elem(), &LinkedServiceAzureSearch{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceAzureSearchArrayInput)(nil)).Elem(), LinkedServiceAzureSearchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceAzureSearchMapInput)(nil)).Elem(), LinkedServiceAzureSearchMap{})
	pulumi.RegisterOutputType(LinkedServiceAzureSearchOutput{})
	pulumi.RegisterOutputType(LinkedServiceAzureSearchArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceAzureSearchMapOutput{})
}
