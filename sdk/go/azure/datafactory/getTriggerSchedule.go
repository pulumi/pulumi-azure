// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about a trigger schedule in Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := datafactory.LookupTriggerSchedule(ctx, &datafactory.LookupTriggerScheduleArgs{
//				Name:          "example_trigger",
//				DataFactoryId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DataFactory/factories/datafactory1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupTriggerSchedule(ctx *pulumi.Context, args *LookupTriggerScheduleArgs, opts ...pulumi.InvokeOption) (*LookupTriggerScheduleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTriggerScheduleResult
	err := ctx.Invoke("azure:datafactory/getTriggerSchedule:getTriggerSchedule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTriggerSchedule.
type LookupTriggerScheduleArgs struct {
	// The ID of the Azure Data Factory to fetch trigger schedule from.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The name of the trigger schedule.
	Name string `pulumi:"name"`
}

// A collection of values returned by getTriggerSchedule.
type LookupTriggerScheduleResult struct {
	// Specifies if the Data Factory Schedule Trigger is activated.
	Activated bool `pulumi:"activated"`
	// List of tags that can be used for describing the Data Factory Schedule Trigger.
	Annotations   []string `pulumi:"annotations"`
	DataFactoryId string   `pulumi:"dataFactoryId"`
	// The Schedule Trigger's description.
	Description string `pulumi:"description"`
	// The time the Schedule Trigger should end. The time will be represented in UTC.
	EndTime string `pulumi:"endTime"`
	// The trigger frequency.
	Frequency string `pulumi:"frequency"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The interval for how often the trigger occurs.
	Interval int    `pulumi:"interval"`
	Name     string `pulumi:"name"`
	// The Data Factory Pipeline name that the trigger will act on.
	PipelineName string `pulumi:"pipelineName"`
	// A `schedule` block as described below, which further specifies the recurrence schedule for the trigger.
	Schedules []GetTriggerScheduleSchedule `pulumi:"schedules"`
	// The time the Schedule Trigger will start. The time will be represented in UTC.
	StartTime string `pulumi:"startTime"`
	// The timezone of the start/end time.
	TimeZone string `pulumi:"timeZone"`
}

func LookupTriggerScheduleOutput(ctx *pulumi.Context, args LookupTriggerScheduleOutputArgs, opts ...pulumi.InvokeOption) LookupTriggerScheduleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTriggerScheduleResult, error) {
			args := v.(LookupTriggerScheduleArgs)
			r, err := LookupTriggerSchedule(ctx, &args, opts...)
			var s LookupTriggerScheduleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTriggerScheduleResultOutput)
}

// A collection of arguments for invoking getTriggerSchedule.
type LookupTriggerScheduleOutputArgs struct {
	// The ID of the Azure Data Factory to fetch trigger schedule from.
	DataFactoryId pulumi.StringInput `pulumi:"dataFactoryId"`
	// The name of the trigger schedule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupTriggerScheduleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTriggerScheduleArgs)(nil)).Elem()
}

// A collection of values returned by getTriggerSchedule.
type LookupTriggerScheduleResultOutput struct{ *pulumi.OutputState }

func (LookupTriggerScheduleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTriggerScheduleResult)(nil)).Elem()
}

func (o LookupTriggerScheduleResultOutput) ToLookupTriggerScheduleResultOutput() LookupTriggerScheduleResultOutput {
	return o
}

func (o LookupTriggerScheduleResultOutput) ToLookupTriggerScheduleResultOutputWithContext(ctx context.Context) LookupTriggerScheduleResultOutput {
	return o
}

// Specifies if the Data Factory Schedule Trigger is activated.
func (o LookupTriggerScheduleResultOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTriggerScheduleResult) bool { return v.Activated }).(pulumi.BoolOutput)
}

// List of tags that can be used for describing the Data Factory Schedule Trigger.
func (o LookupTriggerScheduleResultOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTriggerScheduleResult) []string { return v.Annotations }).(pulumi.StringArrayOutput)
}

func (o LookupTriggerScheduleResultOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerScheduleResult) string { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The Schedule Trigger's description.
func (o LookupTriggerScheduleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerScheduleResult) string { return v.Description }).(pulumi.StringOutput)
}

// The time the Schedule Trigger should end. The time will be represented in UTC.
func (o LookupTriggerScheduleResultOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerScheduleResult) string { return v.EndTime }).(pulumi.StringOutput)
}

// The trigger frequency.
func (o LookupTriggerScheduleResultOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerScheduleResult) string { return v.Frequency }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupTriggerScheduleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerScheduleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The interval for how often the trigger occurs.
func (o LookupTriggerScheduleResultOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTriggerScheduleResult) int { return v.Interval }).(pulumi.IntOutput)
}

func (o LookupTriggerScheduleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerScheduleResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Data Factory Pipeline name that the trigger will act on.
func (o LookupTriggerScheduleResultOutput) PipelineName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerScheduleResult) string { return v.PipelineName }).(pulumi.StringOutput)
}

// A `schedule` block as described below, which further specifies the recurrence schedule for the trigger.
func (o LookupTriggerScheduleResultOutput) Schedules() GetTriggerScheduleScheduleArrayOutput {
	return o.ApplyT(func(v LookupTriggerScheduleResult) []GetTriggerScheduleSchedule { return v.Schedules }).(GetTriggerScheduleScheduleArrayOutput)
}

// The time the Schedule Trigger will start. The time will be represented in UTC.
func (o LookupTriggerScheduleResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerScheduleResult) string { return v.StartTime }).(pulumi.StringOutput)
}

// The timezone of the start/end time.
func (o LookupTriggerScheduleResultOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerScheduleResult) string { return v.TimeZone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTriggerScheduleResultOutput{})
}
