// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a SQL Server Table Dataset inside a Azure Data Factory.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/data_factory_dataset_sql_server_table.html.markdown.
type DatasetSqlServerTable struct {
	s *pulumi.ResourceState
}

// NewDatasetSqlServerTable registers a new resource with the given unique name, arguments, and options.
func NewDatasetSqlServerTable(ctx *pulumi.Context,
	name string, args *DatasetSqlServerTableArgs, opts ...pulumi.ResourceOpt) (*DatasetSqlServerTable, error) {
	if args == nil || args.DataFactoryName == nil {
		return nil, errors.New("missing required argument 'DataFactoryName'")
	}
	if args == nil || args.LinkedServiceName == nil {
		return nil, errors.New("missing required argument 'LinkedServiceName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["additionalProperties"] = nil
		inputs["annotations"] = nil
		inputs["dataFactoryName"] = nil
		inputs["description"] = nil
		inputs["folder"] = nil
		inputs["linkedServiceName"] = nil
		inputs["name"] = nil
		inputs["parameters"] = nil
		inputs["resourceGroupName"] = nil
		inputs["schemaColumns"] = nil
		inputs["tableName"] = nil
	} else {
		inputs["additionalProperties"] = args.AdditionalProperties
		inputs["annotations"] = args.Annotations
		inputs["dataFactoryName"] = args.DataFactoryName
		inputs["description"] = args.Description
		inputs["folder"] = args.Folder
		inputs["linkedServiceName"] = args.LinkedServiceName
		inputs["name"] = args.Name
		inputs["parameters"] = args.Parameters
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["schemaColumns"] = args.SchemaColumns
		inputs["tableName"] = args.TableName
	}
	s, err := ctx.RegisterResource("azure:datafactory/datasetSqlServerTable:DatasetSqlServerTable", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DatasetSqlServerTable{s: s}, nil
}

// GetDatasetSqlServerTable gets an existing DatasetSqlServerTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetSqlServerTable(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DatasetSqlServerTableState, opts ...pulumi.ResourceOpt) (*DatasetSqlServerTable, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["additionalProperties"] = state.AdditionalProperties
		inputs["annotations"] = state.Annotations
		inputs["dataFactoryName"] = state.DataFactoryName
		inputs["description"] = state.Description
		inputs["folder"] = state.Folder
		inputs["linkedServiceName"] = state.LinkedServiceName
		inputs["name"] = state.Name
		inputs["parameters"] = state.Parameters
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["schemaColumns"] = state.SchemaColumns
		inputs["tableName"] = state.TableName
	}
	s, err := ctx.ReadResource("azure:datafactory/datasetSqlServerTable:DatasetSqlServerTable", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DatasetSqlServerTable{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DatasetSqlServerTable) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DatasetSqlServerTable) ID() pulumi.IDOutput {
	return r.s.ID()
}

// A map of additional properties to associate with the Data Factory Dataset SQL Server Table.
func (r *DatasetSqlServerTable) AdditionalProperties() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["additionalProperties"])
}

// List of tags that can be used for describing the Data Factory Dataset SQL Server Table.
func (r *DatasetSqlServerTable) Annotations() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["annotations"])
}

// The Data Factory name in which to associate the Dataset with. Changing this forces a new resource.
func (r *DatasetSqlServerTable) DataFactoryName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dataFactoryName"])
}

// The description for the Data Factory Dataset SQL Server Table.
func (r *DatasetSqlServerTable) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
func (r *DatasetSqlServerTable) Folder() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["folder"])
}

// The Data Factory Linked Service name in which to associate the Dataset with.
func (r *DatasetSqlServerTable) LinkedServiceName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["linkedServiceName"])
}

// Specifies the name of the Data Factory Dataset SQL Server Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
func (r *DatasetSqlServerTable) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// A map of parameters to associate with the Data Factory Dataset SQL Server Table.
func (r *DatasetSqlServerTable) Parameters() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["parameters"])
}

// The name of the resource group in which to create the Data Factory Dataset SQL Server Table. Changing this forces a new resource
func (r *DatasetSqlServerTable) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// A `schemaColumn` block as defined below.
func (r *DatasetSqlServerTable) SchemaColumns() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["schemaColumns"])
}

// The table name of the Data Factory Dataset SQL Server Table.
func (r *DatasetSqlServerTable) TableName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tableName"])
}

// Input properties used for looking up and filtering DatasetSqlServerTable resources.
type DatasetSqlServerTableState struct {
	// A map of additional properties to associate with the Data Factory Dataset SQL Server Table.
	AdditionalProperties interface{}
	// List of tags that can be used for describing the Data Factory Dataset SQL Server Table.
	Annotations interface{}
	// The Data Factory name in which to associate the Dataset with. Changing this forces a new resource.
	DataFactoryName interface{}
	// The description for the Data Factory Dataset SQL Server Table.
	Description interface{}
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder interface{}
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName interface{}
	// Specifies the name of the Data Factory Dataset SQL Server Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name interface{}
	// A map of parameters to associate with the Data Factory Dataset SQL Server Table.
	Parameters interface{}
	// The name of the resource group in which to create the Data Factory Dataset SQL Server Table. Changing this forces a new resource
	ResourceGroupName interface{}
	// A `schemaColumn` block as defined below.
	SchemaColumns interface{}
	// The table name of the Data Factory Dataset SQL Server Table.
	TableName interface{}
}

// The set of arguments for constructing a DatasetSqlServerTable resource.
type DatasetSqlServerTableArgs struct {
	// A map of additional properties to associate with the Data Factory Dataset SQL Server Table.
	AdditionalProperties interface{}
	// List of tags that can be used for describing the Data Factory Dataset SQL Server Table.
	Annotations interface{}
	// The Data Factory name in which to associate the Dataset with. Changing this forces a new resource.
	DataFactoryName interface{}
	// The description for the Data Factory Dataset SQL Server Table.
	Description interface{}
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder interface{}
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName interface{}
	// Specifies the name of the Data Factory Dataset SQL Server Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name interface{}
	// A map of parameters to associate with the Data Factory Dataset SQL Server Table.
	Parameters interface{}
	// The name of the resource group in which to create the Data Factory Dataset SQL Server Table. Changing this forces a new resource
	ResourceGroupName interface{}
	// A `schemaColumn` block as defined below.
	SchemaColumns interface{}
	// The table name of the Data Factory Dataset SQL Server Table.
	TableName interface{}
}
