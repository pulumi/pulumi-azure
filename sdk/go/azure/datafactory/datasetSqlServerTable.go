// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SQL Server Table Dataset inside a Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleLinkedServiceSqlServer, err := datafactory.NewLinkedServiceSqlServer(ctx, "exampleLinkedServiceSqlServer", &datafactory.LinkedServiceSqlServerArgs{
//				DataFactoryId:    exampleFactory.ID(),
//				ConnectionString: pulumi.String("Integrated Security=False;Data Source=test;Initial Catalog=test;User ID=test;Password=test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewDatasetSqlServerTable(ctx, "exampleDatasetSqlServerTable", &datafactory.DatasetSqlServerTableArgs{
//				DataFactoryId:     exampleFactory.ID(),
//				LinkedServiceName: exampleLinkedServiceSqlServer.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Factory SQL Server Table Datasets can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datafactory/datasetSqlServerTable:DatasetSqlServerTable example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/datasets/example
//
// ```
type DatasetSqlServerTable struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Dataset SQL Server Table.
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Dataset SQL Server Table.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The description for the Data Factory Dataset SQL Server Table.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName pulumi.StringOutput `pulumi:"linkedServiceName"`
	// Specifies the name of the Data Factory Dataset SQL Server Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Dataset SQL Server Table.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetSqlServerTableSchemaColumnArrayOutput `pulumi:"schemaColumns"`
	// The table name of the Data Factory Dataset SQL Server Table.
	TableName pulumi.StringPtrOutput `pulumi:"tableName"`
}

// NewDatasetSqlServerTable registers a new resource with the given unique name, arguments, and options.
func NewDatasetSqlServerTable(ctx *pulumi.Context,
	name string, args *DatasetSqlServerTableArgs, opts ...pulumi.ResourceOption) (*DatasetSqlServerTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	if args.LinkedServiceName == nil {
		return nil, errors.New("invalid value for required argument 'LinkedServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatasetSqlServerTable
	err := ctx.RegisterResource("azure:datafactory/datasetSqlServerTable:DatasetSqlServerTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetSqlServerTable gets an existing DatasetSqlServerTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetSqlServerTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetSqlServerTableState, opts ...pulumi.ResourceOption) (*DatasetSqlServerTable, error) {
	var resource DatasetSqlServerTable
	err := ctx.ReadResource("azure:datafactory/datasetSqlServerTable:DatasetSqlServerTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetSqlServerTable resources.
type datasetSqlServerTableState struct {
	// A map of additional properties to associate with the Data Factory Dataset SQL Server Table.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Dataset SQL Server Table.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Dataset SQL Server Table.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder *string `pulumi:"folder"`
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName *string `pulumi:"linkedServiceName"`
	// Specifies the name of the Data Factory Dataset SQL Server Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Dataset SQL Server Table.
	Parameters map[string]string `pulumi:"parameters"`
	// A `schemaColumn` block as defined below.
	SchemaColumns []DatasetSqlServerTableSchemaColumn `pulumi:"schemaColumns"`
	// The table name of the Data Factory Dataset SQL Server Table.
	TableName *string `pulumi:"tableName"`
}

type DatasetSqlServerTableState struct {
	// A map of additional properties to associate with the Data Factory Dataset SQL Server Table.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Dataset SQL Server Table.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The description for the Data Factory Dataset SQL Server Table.
	Description pulumi.StringPtrInput
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringPtrInput
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName pulumi.StringPtrInput
	// Specifies the name of the Data Factory Dataset SQL Server Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Dataset SQL Server Table.
	Parameters pulumi.StringMapInput
	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetSqlServerTableSchemaColumnArrayInput
	// The table name of the Data Factory Dataset SQL Server Table.
	TableName pulumi.StringPtrInput
}

func (DatasetSqlServerTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetSqlServerTableState)(nil)).Elem()
}

type datasetSqlServerTableArgs struct {
	// A map of additional properties to associate with the Data Factory Dataset SQL Server Table.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Dataset SQL Server Table.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Dataset SQL Server Table.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder *string `pulumi:"folder"`
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName string `pulumi:"linkedServiceName"`
	// Specifies the name of the Data Factory Dataset SQL Server Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Dataset SQL Server Table.
	Parameters map[string]string `pulumi:"parameters"`
	// A `schemaColumn` block as defined below.
	SchemaColumns []DatasetSqlServerTableSchemaColumn `pulumi:"schemaColumns"`
	// The table name of the Data Factory Dataset SQL Server Table.
	TableName *string `pulumi:"tableName"`
}

// The set of arguments for constructing a DatasetSqlServerTable resource.
type DatasetSqlServerTableArgs struct {
	// A map of additional properties to associate with the Data Factory Dataset SQL Server Table.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Dataset SQL Server Table.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// The description for the Data Factory Dataset SQL Server Table.
	Description pulumi.StringPtrInput
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringPtrInput
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName pulumi.StringInput
	// Specifies the name of the Data Factory Dataset SQL Server Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Dataset SQL Server Table.
	Parameters pulumi.StringMapInput
	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetSqlServerTableSchemaColumnArrayInput
	// The table name of the Data Factory Dataset SQL Server Table.
	TableName pulumi.StringPtrInput
}

func (DatasetSqlServerTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetSqlServerTableArgs)(nil)).Elem()
}

type DatasetSqlServerTableInput interface {
	pulumi.Input

	ToDatasetSqlServerTableOutput() DatasetSqlServerTableOutput
	ToDatasetSqlServerTableOutputWithContext(ctx context.Context) DatasetSqlServerTableOutput
}

func (*DatasetSqlServerTable) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetSqlServerTable)(nil)).Elem()
}

func (i *DatasetSqlServerTable) ToDatasetSqlServerTableOutput() DatasetSqlServerTableOutput {
	return i.ToDatasetSqlServerTableOutputWithContext(context.Background())
}

func (i *DatasetSqlServerTable) ToDatasetSqlServerTableOutputWithContext(ctx context.Context) DatasetSqlServerTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetSqlServerTableOutput)
}

// DatasetSqlServerTableArrayInput is an input type that accepts DatasetSqlServerTableArray and DatasetSqlServerTableArrayOutput values.
// You can construct a concrete instance of `DatasetSqlServerTableArrayInput` via:
//
//	DatasetSqlServerTableArray{ DatasetSqlServerTableArgs{...} }
type DatasetSqlServerTableArrayInput interface {
	pulumi.Input

	ToDatasetSqlServerTableArrayOutput() DatasetSqlServerTableArrayOutput
	ToDatasetSqlServerTableArrayOutputWithContext(context.Context) DatasetSqlServerTableArrayOutput
}

type DatasetSqlServerTableArray []DatasetSqlServerTableInput

func (DatasetSqlServerTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetSqlServerTable)(nil)).Elem()
}

func (i DatasetSqlServerTableArray) ToDatasetSqlServerTableArrayOutput() DatasetSqlServerTableArrayOutput {
	return i.ToDatasetSqlServerTableArrayOutputWithContext(context.Background())
}

func (i DatasetSqlServerTableArray) ToDatasetSqlServerTableArrayOutputWithContext(ctx context.Context) DatasetSqlServerTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetSqlServerTableArrayOutput)
}

// DatasetSqlServerTableMapInput is an input type that accepts DatasetSqlServerTableMap and DatasetSqlServerTableMapOutput values.
// You can construct a concrete instance of `DatasetSqlServerTableMapInput` via:
//
//	DatasetSqlServerTableMap{ "key": DatasetSqlServerTableArgs{...} }
type DatasetSqlServerTableMapInput interface {
	pulumi.Input

	ToDatasetSqlServerTableMapOutput() DatasetSqlServerTableMapOutput
	ToDatasetSqlServerTableMapOutputWithContext(context.Context) DatasetSqlServerTableMapOutput
}

type DatasetSqlServerTableMap map[string]DatasetSqlServerTableInput

func (DatasetSqlServerTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetSqlServerTable)(nil)).Elem()
}

func (i DatasetSqlServerTableMap) ToDatasetSqlServerTableMapOutput() DatasetSqlServerTableMapOutput {
	return i.ToDatasetSqlServerTableMapOutputWithContext(context.Background())
}

func (i DatasetSqlServerTableMap) ToDatasetSqlServerTableMapOutputWithContext(ctx context.Context) DatasetSqlServerTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetSqlServerTableMapOutput)
}

type DatasetSqlServerTableOutput struct{ *pulumi.OutputState }

func (DatasetSqlServerTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetSqlServerTable)(nil)).Elem()
}

func (o DatasetSqlServerTableOutput) ToDatasetSqlServerTableOutput() DatasetSqlServerTableOutput {
	return o
}

func (o DatasetSqlServerTableOutput) ToDatasetSqlServerTableOutputWithContext(ctx context.Context) DatasetSqlServerTableOutput {
	return o
}

// A map of additional properties to associate with the Data Factory Dataset SQL Server Table.
func (o DatasetSqlServerTableOutput) AdditionalProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatasetSqlServerTable) pulumi.StringMapOutput { return v.AdditionalProperties }).(pulumi.StringMapOutput)
}

// List of tags that can be used for describing the Data Factory Dataset SQL Server Table.
func (o DatasetSqlServerTableOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatasetSqlServerTable) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
func (o DatasetSqlServerTableOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetSqlServerTable) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The description for the Data Factory Dataset SQL Server Table.
func (o DatasetSqlServerTableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetSqlServerTable) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
func (o DatasetSqlServerTableOutput) Folder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetSqlServerTable) pulumi.StringPtrOutput { return v.Folder }).(pulumi.StringPtrOutput)
}

// The Data Factory Linked Service name in which to associate the Dataset with.
func (o DatasetSqlServerTableOutput) LinkedServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetSqlServerTable) pulumi.StringOutput { return v.LinkedServiceName }).(pulumi.StringOutput)
}

// Specifies the name of the Data Factory Dataset SQL Server Table. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
func (o DatasetSqlServerTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetSqlServerTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of parameters to associate with the Data Factory Dataset SQL Server Table.
func (o DatasetSqlServerTableOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatasetSqlServerTable) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// A `schemaColumn` block as defined below.
func (o DatasetSqlServerTableOutput) SchemaColumns() DatasetSqlServerTableSchemaColumnArrayOutput {
	return o.ApplyT(func(v *DatasetSqlServerTable) DatasetSqlServerTableSchemaColumnArrayOutput { return v.SchemaColumns }).(DatasetSqlServerTableSchemaColumnArrayOutput)
}

// The table name of the Data Factory Dataset SQL Server Table.
func (o DatasetSqlServerTableOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetSqlServerTable) pulumi.StringPtrOutput { return v.TableName }).(pulumi.StringPtrOutput)
}

type DatasetSqlServerTableArrayOutput struct{ *pulumi.OutputState }

func (DatasetSqlServerTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetSqlServerTable)(nil)).Elem()
}

func (o DatasetSqlServerTableArrayOutput) ToDatasetSqlServerTableArrayOutput() DatasetSqlServerTableArrayOutput {
	return o
}

func (o DatasetSqlServerTableArrayOutput) ToDatasetSqlServerTableArrayOutputWithContext(ctx context.Context) DatasetSqlServerTableArrayOutput {
	return o
}

func (o DatasetSqlServerTableArrayOutput) Index(i pulumi.IntInput) DatasetSqlServerTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatasetSqlServerTable {
		return vs[0].([]*DatasetSqlServerTable)[vs[1].(int)]
	}).(DatasetSqlServerTableOutput)
}

type DatasetSqlServerTableMapOutput struct{ *pulumi.OutputState }

func (DatasetSqlServerTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetSqlServerTable)(nil)).Elem()
}

func (o DatasetSqlServerTableMapOutput) ToDatasetSqlServerTableMapOutput() DatasetSqlServerTableMapOutput {
	return o
}

func (o DatasetSqlServerTableMapOutput) ToDatasetSqlServerTableMapOutputWithContext(ctx context.Context) DatasetSqlServerTableMapOutput {
	return o
}

func (o DatasetSqlServerTableMapOutput) MapIndex(k pulumi.StringInput) DatasetSqlServerTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatasetSqlServerTable {
		return vs[0].(map[string]*DatasetSqlServerTable)[vs[1].(string)]
	}).(DatasetSqlServerTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetSqlServerTableInput)(nil)).Elem(), &DatasetSqlServerTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetSqlServerTableArrayInput)(nil)).Elem(), DatasetSqlServerTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetSqlServerTableMapInput)(nil)).Elem(), DatasetSqlServerTableMap{})
	pulumi.RegisterOutputType(DatasetSqlServerTableOutput{})
	pulumi.RegisterOutputType(DatasetSqlServerTableArrayOutput{})
	pulumi.RegisterOutputType(DatasetSqlServerTableMapOutput{})
}
