// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linked Service (connection) between a Web Server and Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewLinkedServiceWeb(ctx, "exampleLinkedServiceWeb", &datafactory.LinkedServiceWebArgs{
//				DataFactoryId:      exampleFactory.ID(),
//				AuthenticationType: pulumi.String("Anonymous"),
//				Url:                pulumi.String("http://www.bing.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Factory Linked Service's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datafactory/linkedServiceWeb:LinkedServiceWeb example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
//
// ```
type LinkedServiceWeb struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Web Linked Service:
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The type of authentication used to connect to the web table source. Valid options are `Anonymous`, `Basic` and `ClientCertificate`.
	AuthenticationType pulumi.StringOutput `pulumi:"authenticationType"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrOutput `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// The password for Basic authentication. Required if `authenticationType` sets to `Basic`.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The URL of the web service endpoint (e.g. <https://www.microsoft.com>).
	Url pulumi.StringOutput `pulumi:"url"`
	// The username for Basic authentication. Required if `authenticationType` sets to `Basic`.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewLinkedServiceWeb registers a new resource with the given unique name, arguments, and options.
func NewLinkedServiceWeb(ctx *pulumi.Context,
	name string, args *LinkedServiceWebArgs, opts ...pulumi.ResourceOption) (*LinkedServiceWeb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationType == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationType'")
	}
	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LinkedServiceWeb
	err := ctx.RegisterResource("azure:datafactory/linkedServiceWeb:LinkedServiceWeb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedServiceWeb gets an existing LinkedServiceWeb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedServiceWeb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedServiceWebState, opts ...pulumi.ResourceOption) (*LinkedServiceWeb, error) {
	var resource LinkedServiceWeb
	err := ctx.ReadResource("azure:datafactory/linkedServiceWeb:LinkedServiceWeb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedServiceWeb resources.
type linkedServiceWebState struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Web Linked Service:
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations []string `pulumi:"annotations"`
	// The type of authentication used to connect to the web table source. Valid options are `Anonymous`, `Basic` and `ClientCertificate`.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters map[string]string `pulumi:"parameters"`
	// The password for Basic authentication. Required if `authenticationType` sets to `Basic`.
	Password *string `pulumi:"password"`
	// The URL of the web service endpoint (e.g. <https://www.microsoft.com>).
	Url *string `pulumi:"url"`
	// The username for Basic authentication. Required if `authenticationType` sets to `Basic`.
	Username *string `pulumi:"username"`
}

type LinkedServiceWebState struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Web Linked Service:
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayInput
	// The type of authentication used to connect to the web table source. Valid options are `Anonymous`, `Basic` and `ClientCertificate`.
	AuthenticationType pulumi.StringPtrInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrInput
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapInput
	// The password for Basic authentication. Required if `authenticationType` sets to `Basic`.
	Password pulumi.StringPtrInput
	// The URL of the web service endpoint (e.g. <https://www.microsoft.com>).
	Url pulumi.StringPtrInput
	// The username for Basic authentication. Required if `authenticationType` sets to `Basic`.
	Username pulumi.StringPtrInput
}

func (LinkedServiceWebState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceWebState)(nil)).Elem()
}

type linkedServiceWebArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Web Linked Service:
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations []string `pulumi:"annotations"`
	// The type of authentication used to connect to the web table source. Valid options are `Anonymous`, `Basic` and `ClientCertificate`.
	AuthenticationType string `pulumi:"authenticationType"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters map[string]string `pulumi:"parameters"`
	// The password for Basic authentication. Required if `authenticationType` sets to `Basic`.
	Password *string `pulumi:"password"`
	// The URL of the web service endpoint (e.g. <https://www.microsoft.com>).
	Url string `pulumi:"url"`
	// The username for Basic authentication. Required if `authenticationType` sets to `Basic`.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a LinkedServiceWeb resource.
type LinkedServiceWebArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Web Linked Service:
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayInput
	// The type of authentication used to connect to the web table source. Valid options are `Anonymous`, `Basic` and `ClientCertificate`.
	AuthenticationType pulumi.StringInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrInput
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapInput
	// The password for Basic authentication. Required if `authenticationType` sets to `Basic`.
	Password pulumi.StringPtrInput
	// The URL of the web service endpoint (e.g. <https://www.microsoft.com>).
	Url pulumi.StringInput
	// The username for Basic authentication. Required if `authenticationType` sets to `Basic`.
	Username pulumi.StringPtrInput
}

func (LinkedServiceWebArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceWebArgs)(nil)).Elem()
}

type LinkedServiceWebInput interface {
	pulumi.Input

	ToLinkedServiceWebOutput() LinkedServiceWebOutput
	ToLinkedServiceWebOutputWithContext(ctx context.Context) LinkedServiceWebOutput
}

func (*LinkedServiceWeb) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceWeb)(nil)).Elem()
}

func (i *LinkedServiceWeb) ToLinkedServiceWebOutput() LinkedServiceWebOutput {
	return i.ToLinkedServiceWebOutputWithContext(context.Background())
}

func (i *LinkedServiceWeb) ToLinkedServiceWebOutputWithContext(ctx context.Context) LinkedServiceWebOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceWebOutput)
}

// LinkedServiceWebArrayInput is an input type that accepts LinkedServiceWebArray and LinkedServiceWebArrayOutput values.
// You can construct a concrete instance of `LinkedServiceWebArrayInput` via:
//
//	LinkedServiceWebArray{ LinkedServiceWebArgs{...} }
type LinkedServiceWebArrayInput interface {
	pulumi.Input

	ToLinkedServiceWebArrayOutput() LinkedServiceWebArrayOutput
	ToLinkedServiceWebArrayOutputWithContext(context.Context) LinkedServiceWebArrayOutput
}

type LinkedServiceWebArray []LinkedServiceWebInput

func (LinkedServiceWebArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceWeb)(nil)).Elem()
}

func (i LinkedServiceWebArray) ToLinkedServiceWebArrayOutput() LinkedServiceWebArrayOutput {
	return i.ToLinkedServiceWebArrayOutputWithContext(context.Background())
}

func (i LinkedServiceWebArray) ToLinkedServiceWebArrayOutputWithContext(ctx context.Context) LinkedServiceWebArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceWebArrayOutput)
}

// LinkedServiceWebMapInput is an input type that accepts LinkedServiceWebMap and LinkedServiceWebMapOutput values.
// You can construct a concrete instance of `LinkedServiceWebMapInput` via:
//
//	LinkedServiceWebMap{ "key": LinkedServiceWebArgs{...} }
type LinkedServiceWebMapInput interface {
	pulumi.Input

	ToLinkedServiceWebMapOutput() LinkedServiceWebMapOutput
	ToLinkedServiceWebMapOutputWithContext(context.Context) LinkedServiceWebMapOutput
}

type LinkedServiceWebMap map[string]LinkedServiceWebInput

func (LinkedServiceWebMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceWeb)(nil)).Elem()
}

func (i LinkedServiceWebMap) ToLinkedServiceWebMapOutput() LinkedServiceWebMapOutput {
	return i.ToLinkedServiceWebMapOutputWithContext(context.Background())
}

func (i LinkedServiceWebMap) ToLinkedServiceWebMapOutputWithContext(ctx context.Context) LinkedServiceWebMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceWebMapOutput)
}

type LinkedServiceWebOutput struct{ *pulumi.OutputState }

func (LinkedServiceWebOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceWeb)(nil)).Elem()
}

func (o LinkedServiceWebOutput) ToLinkedServiceWebOutput() LinkedServiceWebOutput {
	return o
}

func (o LinkedServiceWebOutput) ToLinkedServiceWebOutputWithContext(ctx context.Context) LinkedServiceWebOutput {
	return o
}

// A map of additional properties to associate with the Data Factory Linked Service.
//
// The following supported arguments are specific to Web Linked Service:
func (o LinkedServiceWebOutput) AdditionalProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceWeb) pulumi.StringMapOutput { return v.AdditionalProperties }).(pulumi.StringMapOutput)
}

// List of tags that can be used for describing the Data Factory Linked Service.
func (o LinkedServiceWebOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinkedServiceWeb) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The type of authentication used to connect to the web table source. Valid options are `Anonymous`, `Basic` and `ClientCertificate`.
func (o LinkedServiceWebOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceWeb) pulumi.StringOutput { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
func (o LinkedServiceWebOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceWeb) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The description for the Data Factory Linked Service.
func (o LinkedServiceWebOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceWeb) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The integration runtime reference to associate with the Data Factory Linked Service.
func (o LinkedServiceWebOutput) IntegrationRuntimeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceWeb) pulumi.StringPtrOutput { return v.IntegrationRuntimeName }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
func (o LinkedServiceWebOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceWeb) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of parameters to associate with the Data Factory Linked Service.
func (o LinkedServiceWebOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceWeb) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// The password for Basic authentication. Required if `authenticationType` sets to `Basic`.
func (o LinkedServiceWebOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceWeb) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The URL of the web service endpoint (e.g. <https://www.microsoft.com>).
func (o LinkedServiceWebOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceWeb) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The username for Basic authentication. Required if `authenticationType` sets to `Basic`.
func (o LinkedServiceWebOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceWeb) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

type LinkedServiceWebArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceWebArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceWeb)(nil)).Elem()
}

func (o LinkedServiceWebArrayOutput) ToLinkedServiceWebArrayOutput() LinkedServiceWebArrayOutput {
	return o
}

func (o LinkedServiceWebArrayOutput) ToLinkedServiceWebArrayOutputWithContext(ctx context.Context) LinkedServiceWebArrayOutput {
	return o
}

func (o LinkedServiceWebArrayOutput) Index(i pulumi.IntInput) LinkedServiceWebOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinkedServiceWeb {
		return vs[0].([]*LinkedServiceWeb)[vs[1].(int)]
	}).(LinkedServiceWebOutput)
}

type LinkedServiceWebMapOutput struct{ *pulumi.OutputState }

func (LinkedServiceWebMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceWeb)(nil)).Elem()
}

func (o LinkedServiceWebMapOutput) ToLinkedServiceWebMapOutput() LinkedServiceWebMapOutput {
	return o
}

func (o LinkedServiceWebMapOutput) ToLinkedServiceWebMapOutputWithContext(ctx context.Context) LinkedServiceWebMapOutput {
	return o
}

func (o LinkedServiceWebMapOutput) MapIndex(k pulumi.StringInput) LinkedServiceWebOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinkedServiceWeb {
		return vs[0].(map[string]*LinkedServiceWeb)[vs[1].(string)]
	}).(LinkedServiceWebOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceWebInput)(nil)).Elem(), &LinkedServiceWeb{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceWebArrayInput)(nil)).Elem(), LinkedServiceWebArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceWebMapInput)(nil)).Elem(), LinkedServiceWebMap{})
	pulumi.RegisterOutputType(LinkedServiceWebOutput{})
	pulumi.RegisterOutputType(LinkedServiceWebArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceWebMapOutput{})
}
