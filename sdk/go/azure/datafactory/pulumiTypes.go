// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatasetAzureBlobSchemaColumn struct {
	// The description of the column.
	Description *string `pulumi:"description"`
	// The name of the column.
	Name string `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type *string `pulumi:"type"`
}

// DatasetAzureBlobSchemaColumnInput is an input type that accepts DatasetAzureBlobSchemaColumnArgs and DatasetAzureBlobSchemaColumnOutput values.
// You can construct a concrete instance of `DatasetAzureBlobSchemaColumnInput` via:
//
//          DatasetAzureBlobSchemaColumnArgs{...}
type DatasetAzureBlobSchemaColumnInput interface {
	pulumi.Input

	ToDatasetAzureBlobSchemaColumnOutput() DatasetAzureBlobSchemaColumnOutput
	ToDatasetAzureBlobSchemaColumnOutputWithContext(context.Context) DatasetAzureBlobSchemaColumnOutput
}

type DatasetAzureBlobSchemaColumnArgs struct {
	// The description of the column.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the column.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatasetAzureBlobSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAzureBlobSchemaColumn)(nil)).Elem()
}

func (i DatasetAzureBlobSchemaColumnArgs) ToDatasetAzureBlobSchemaColumnOutput() DatasetAzureBlobSchemaColumnOutput {
	return i.ToDatasetAzureBlobSchemaColumnOutputWithContext(context.Background())
}

func (i DatasetAzureBlobSchemaColumnArgs) ToDatasetAzureBlobSchemaColumnOutputWithContext(ctx context.Context) DatasetAzureBlobSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAzureBlobSchemaColumnOutput)
}

// DatasetAzureBlobSchemaColumnArrayInput is an input type that accepts DatasetAzureBlobSchemaColumnArray and DatasetAzureBlobSchemaColumnArrayOutput values.
// You can construct a concrete instance of `DatasetAzureBlobSchemaColumnArrayInput` via:
//
//          DatasetAzureBlobSchemaColumnArray{ DatasetAzureBlobSchemaColumnArgs{...} }
type DatasetAzureBlobSchemaColumnArrayInput interface {
	pulumi.Input

	ToDatasetAzureBlobSchemaColumnArrayOutput() DatasetAzureBlobSchemaColumnArrayOutput
	ToDatasetAzureBlobSchemaColumnArrayOutputWithContext(context.Context) DatasetAzureBlobSchemaColumnArrayOutput
}

type DatasetAzureBlobSchemaColumnArray []DatasetAzureBlobSchemaColumnInput

func (DatasetAzureBlobSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAzureBlobSchemaColumn)(nil)).Elem()
}

func (i DatasetAzureBlobSchemaColumnArray) ToDatasetAzureBlobSchemaColumnArrayOutput() DatasetAzureBlobSchemaColumnArrayOutput {
	return i.ToDatasetAzureBlobSchemaColumnArrayOutputWithContext(context.Background())
}

func (i DatasetAzureBlobSchemaColumnArray) ToDatasetAzureBlobSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetAzureBlobSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAzureBlobSchemaColumnArrayOutput)
}

type DatasetAzureBlobSchemaColumnOutput struct{ *pulumi.OutputState }

func (DatasetAzureBlobSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAzureBlobSchemaColumn)(nil)).Elem()
}

func (o DatasetAzureBlobSchemaColumnOutput) ToDatasetAzureBlobSchemaColumnOutput() DatasetAzureBlobSchemaColumnOutput {
	return o
}

func (o DatasetAzureBlobSchemaColumnOutput) ToDatasetAzureBlobSchemaColumnOutputWithContext(ctx context.Context) DatasetAzureBlobSchemaColumnOutput {
	return o
}

// The description of the column.
func (o DatasetAzureBlobSchemaColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAzureBlobSchemaColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the column.
func (o DatasetAzureBlobSchemaColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAzureBlobSchemaColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
func (o DatasetAzureBlobSchemaColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAzureBlobSchemaColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatasetAzureBlobSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (DatasetAzureBlobSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAzureBlobSchemaColumn)(nil)).Elem()
}

func (o DatasetAzureBlobSchemaColumnArrayOutput) ToDatasetAzureBlobSchemaColumnArrayOutput() DatasetAzureBlobSchemaColumnArrayOutput {
	return o
}

func (o DatasetAzureBlobSchemaColumnArrayOutput) ToDatasetAzureBlobSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetAzureBlobSchemaColumnArrayOutput {
	return o
}

func (o DatasetAzureBlobSchemaColumnArrayOutput) Index(i pulumi.IntInput) DatasetAzureBlobSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetAzureBlobSchemaColumn {
		return vs[0].([]DatasetAzureBlobSchemaColumn)[vs[1].(int)]
	}).(DatasetAzureBlobSchemaColumnOutput)
}

type DatasetCosmosDBApiSchemaColumn struct {
	// The description of the column.
	Description *string `pulumi:"description"`
	// The name of the column.
	Name string `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type *string `pulumi:"type"`
}

// DatasetCosmosDBApiSchemaColumnInput is an input type that accepts DatasetCosmosDBApiSchemaColumnArgs and DatasetCosmosDBApiSchemaColumnOutput values.
// You can construct a concrete instance of `DatasetCosmosDBApiSchemaColumnInput` via:
//
//          DatasetCosmosDBApiSchemaColumnArgs{...}
type DatasetCosmosDBApiSchemaColumnInput interface {
	pulumi.Input

	ToDatasetCosmosDBApiSchemaColumnOutput() DatasetCosmosDBApiSchemaColumnOutput
	ToDatasetCosmosDBApiSchemaColumnOutputWithContext(context.Context) DatasetCosmosDBApiSchemaColumnOutput
}

type DatasetCosmosDBApiSchemaColumnArgs struct {
	// The description of the column.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the column.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatasetCosmosDBApiSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCosmosDBApiSchemaColumn)(nil)).Elem()
}

func (i DatasetCosmosDBApiSchemaColumnArgs) ToDatasetCosmosDBApiSchemaColumnOutput() DatasetCosmosDBApiSchemaColumnOutput {
	return i.ToDatasetCosmosDBApiSchemaColumnOutputWithContext(context.Background())
}

func (i DatasetCosmosDBApiSchemaColumnArgs) ToDatasetCosmosDBApiSchemaColumnOutputWithContext(ctx context.Context) DatasetCosmosDBApiSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCosmosDBApiSchemaColumnOutput)
}

// DatasetCosmosDBApiSchemaColumnArrayInput is an input type that accepts DatasetCosmosDBApiSchemaColumnArray and DatasetCosmosDBApiSchemaColumnArrayOutput values.
// You can construct a concrete instance of `DatasetCosmosDBApiSchemaColumnArrayInput` via:
//
//          DatasetCosmosDBApiSchemaColumnArray{ DatasetCosmosDBApiSchemaColumnArgs{...} }
type DatasetCosmosDBApiSchemaColumnArrayInput interface {
	pulumi.Input

	ToDatasetCosmosDBApiSchemaColumnArrayOutput() DatasetCosmosDBApiSchemaColumnArrayOutput
	ToDatasetCosmosDBApiSchemaColumnArrayOutputWithContext(context.Context) DatasetCosmosDBApiSchemaColumnArrayOutput
}

type DatasetCosmosDBApiSchemaColumnArray []DatasetCosmosDBApiSchemaColumnInput

func (DatasetCosmosDBApiSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetCosmosDBApiSchemaColumn)(nil)).Elem()
}

func (i DatasetCosmosDBApiSchemaColumnArray) ToDatasetCosmosDBApiSchemaColumnArrayOutput() DatasetCosmosDBApiSchemaColumnArrayOutput {
	return i.ToDatasetCosmosDBApiSchemaColumnArrayOutputWithContext(context.Background())
}

func (i DatasetCosmosDBApiSchemaColumnArray) ToDatasetCosmosDBApiSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetCosmosDBApiSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCosmosDBApiSchemaColumnArrayOutput)
}

type DatasetCosmosDBApiSchemaColumnOutput struct{ *pulumi.OutputState }

func (DatasetCosmosDBApiSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCosmosDBApiSchemaColumn)(nil)).Elem()
}

func (o DatasetCosmosDBApiSchemaColumnOutput) ToDatasetCosmosDBApiSchemaColumnOutput() DatasetCosmosDBApiSchemaColumnOutput {
	return o
}

func (o DatasetCosmosDBApiSchemaColumnOutput) ToDatasetCosmosDBApiSchemaColumnOutputWithContext(ctx context.Context) DatasetCosmosDBApiSchemaColumnOutput {
	return o
}

// The description of the column.
func (o DatasetCosmosDBApiSchemaColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCosmosDBApiSchemaColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the column.
func (o DatasetCosmosDBApiSchemaColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetCosmosDBApiSchemaColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
func (o DatasetCosmosDBApiSchemaColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCosmosDBApiSchemaColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatasetCosmosDBApiSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (DatasetCosmosDBApiSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetCosmosDBApiSchemaColumn)(nil)).Elem()
}

func (o DatasetCosmosDBApiSchemaColumnArrayOutput) ToDatasetCosmosDBApiSchemaColumnArrayOutput() DatasetCosmosDBApiSchemaColumnArrayOutput {
	return o
}

func (o DatasetCosmosDBApiSchemaColumnArrayOutput) ToDatasetCosmosDBApiSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetCosmosDBApiSchemaColumnArrayOutput {
	return o
}

func (o DatasetCosmosDBApiSchemaColumnArrayOutput) Index(i pulumi.IntInput) DatasetCosmosDBApiSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetCosmosDBApiSchemaColumn {
		return vs[0].([]DatasetCosmosDBApiSchemaColumn)[vs[1].(int)]
	}).(DatasetCosmosDBApiSchemaColumnOutput)
}

type DatasetDelimitedTextAzureBlobStorageLocation struct {
	// The container on the Azure Blob Storage Account hosting the file.
	Container string `pulumi:"container"`
	// The filename of the file on the web server.
	Filename string `pulumi:"filename"`
	// The folder path to the file on the web server.
	Path string `pulumi:"path"`
}

// DatasetDelimitedTextAzureBlobStorageLocationInput is an input type that accepts DatasetDelimitedTextAzureBlobStorageLocationArgs and DatasetDelimitedTextAzureBlobStorageLocationOutput values.
// You can construct a concrete instance of `DatasetDelimitedTextAzureBlobStorageLocationInput` via:
//
//          DatasetDelimitedTextAzureBlobStorageLocationArgs{...}
type DatasetDelimitedTextAzureBlobStorageLocationInput interface {
	pulumi.Input

	ToDatasetDelimitedTextAzureBlobStorageLocationOutput() DatasetDelimitedTextAzureBlobStorageLocationOutput
	ToDatasetDelimitedTextAzureBlobStorageLocationOutputWithContext(context.Context) DatasetDelimitedTextAzureBlobStorageLocationOutput
}

type DatasetDelimitedTextAzureBlobStorageLocationArgs struct {
	// The container on the Azure Blob Storage Account hosting the file.
	Container pulumi.StringInput `pulumi:"container"`
	// The filename of the file on the web server.
	Filename pulumi.StringInput `pulumi:"filename"`
	// The folder path to the file on the web server.
	Path pulumi.StringInput `pulumi:"path"`
}

func (DatasetDelimitedTextAzureBlobStorageLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDelimitedTextAzureBlobStorageLocation)(nil)).Elem()
}

func (i DatasetDelimitedTextAzureBlobStorageLocationArgs) ToDatasetDelimitedTextAzureBlobStorageLocationOutput() DatasetDelimitedTextAzureBlobStorageLocationOutput {
	return i.ToDatasetDelimitedTextAzureBlobStorageLocationOutputWithContext(context.Background())
}

func (i DatasetDelimitedTextAzureBlobStorageLocationArgs) ToDatasetDelimitedTextAzureBlobStorageLocationOutputWithContext(ctx context.Context) DatasetDelimitedTextAzureBlobStorageLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDelimitedTextAzureBlobStorageLocationOutput)
}

func (i DatasetDelimitedTextAzureBlobStorageLocationArgs) ToDatasetDelimitedTextAzureBlobStorageLocationPtrOutput() DatasetDelimitedTextAzureBlobStorageLocationPtrOutput {
	return i.ToDatasetDelimitedTextAzureBlobStorageLocationPtrOutputWithContext(context.Background())
}

func (i DatasetDelimitedTextAzureBlobStorageLocationArgs) ToDatasetDelimitedTextAzureBlobStorageLocationPtrOutputWithContext(ctx context.Context) DatasetDelimitedTextAzureBlobStorageLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDelimitedTextAzureBlobStorageLocationOutput).ToDatasetDelimitedTextAzureBlobStorageLocationPtrOutputWithContext(ctx)
}

// DatasetDelimitedTextAzureBlobStorageLocationPtrInput is an input type that accepts DatasetDelimitedTextAzureBlobStorageLocationArgs, DatasetDelimitedTextAzureBlobStorageLocationPtr and DatasetDelimitedTextAzureBlobStorageLocationPtrOutput values.
// You can construct a concrete instance of `DatasetDelimitedTextAzureBlobStorageLocationPtrInput` via:
//
//          DatasetDelimitedTextAzureBlobStorageLocationArgs{...}
//
//  or:
//
//          nil
type DatasetDelimitedTextAzureBlobStorageLocationPtrInput interface {
	pulumi.Input

	ToDatasetDelimitedTextAzureBlobStorageLocationPtrOutput() DatasetDelimitedTextAzureBlobStorageLocationPtrOutput
	ToDatasetDelimitedTextAzureBlobStorageLocationPtrOutputWithContext(context.Context) DatasetDelimitedTextAzureBlobStorageLocationPtrOutput
}

type datasetDelimitedTextAzureBlobStorageLocationPtrType DatasetDelimitedTextAzureBlobStorageLocationArgs

func DatasetDelimitedTextAzureBlobStorageLocationPtr(v *DatasetDelimitedTextAzureBlobStorageLocationArgs) DatasetDelimitedTextAzureBlobStorageLocationPtrInput {
	return (*datasetDelimitedTextAzureBlobStorageLocationPtrType)(v)
}

func (*datasetDelimitedTextAzureBlobStorageLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDelimitedTextAzureBlobStorageLocation)(nil)).Elem()
}

func (i *datasetDelimitedTextAzureBlobStorageLocationPtrType) ToDatasetDelimitedTextAzureBlobStorageLocationPtrOutput() DatasetDelimitedTextAzureBlobStorageLocationPtrOutput {
	return i.ToDatasetDelimitedTextAzureBlobStorageLocationPtrOutputWithContext(context.Background())
}

func (i *datasetDelimitedTextAzureBlobStorageLocationPtrType) ToDatasetDelimitedTextAzureBlobStorageLocationPtrOutputWithContext(ctx context.Context) DatasetDelimitedTextAzureBlobStorageLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDelimitedTextAzureBlobStorageLocationPtrOutput)
}

type DatasetDelimitedTextAzureBlobStorageLocationOutput struct{ *pulumi.OutputState }

func (DatasetDelimitedTextAzureBlobStorageLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDelimitedTextAzureBlobStorageLocation)(nil)).Elem()
}

func (o DatasetDelimitedTextAzureBlobStorageLocationOutput) ToDatasetDelimitedTextAzureBlobStorageLocationOutput() DatasetDelimitedTextAzureBlobStorageLocationOutput {
	return o
}

func (o DatasetDelimitedTextAzureBlobStorageLocationOutput) ToDatasetDelimitedTextAzureBlobStorageLocationOutputWithContext(ctx context.Context) DatasetDelimitedTextAzureBlobStorageLocationOutput {
	return o
}

func (o DatasetDelimitedTextAzureBlobStorageLocationOutput) ToDatasetDelimitedTextAzureBlobStorageLocationPtrOutput() DatasetDelimitedTextAzureBlobStorageLocationPtrOutput {
	return o.ToDatasetDelimitedTextAzureBlobStorageLocationPtrOutputWithContext(context.Background())
}

func (o DatasetDelimitedTextAzureBlobStorageLocationOutput) ToDatasetDelimitedTextAzureBlobStorageLocationPtrOutputWithContext(ctx context.Context) DatasetDelimitedTextAzureBlobStorageLocationPtrOutput {
	return o.ApplyT(func(v DatasetDelimitedTextAzureBlobStorageLocation) *DatasetDelimitedTextAzureBlobStorageLocation {
		return &v
	}).(DatasetDelimitedTextAzureBlobStorageLocationPtrOutput)
}

// The container on the Azure Blob Storage Account hosting the file.
func (o DatasetDelimitedTextAzureBlobStorageLocationOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDelimitedTextAzureBlobStorageLocation) string { return v.Container }).(pulumi.StringOutput)
}

// The filename of the file on the web server.
func (o DatasetDelimitedTextAzureBlobStorageLocationOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDelimitedTextAzureBlobStorageLocation) string { return v.Filename }).(pulumi.StringOutput)
}

// The folder path to the file on the web server.
func (o DatasetDelimitedTextAzureBlobStorageLocationOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDelimitedTextAzureBlobStorageLocation) string { return v.Path }).(pulumi.StringOutput)
}

type DatasetDelimitedTextAzureBlobStorageLocationPtrOutput struct{ *pulumi.OutputState }

func (DatasetDelimitedTextAzureBlobStorageLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDelimitedTextAzureBlobStorageLocation)(nil)).Elem()
}

func (o DatasetDelimitedTextAzureBlobStorageLocationPtrOutput) ToDatasetDelimitedTextAzureBlobStorageLocationPtrOutput() DatasetDelimitedTextAzureBlobStorageLocationPtrOutput {
	return o
}

func (o DatasetDelimitedTextAzureBlobStorageLocationPtrOutput) ToDatasetDelimitedTextAzureBlobStorageLocationPtrOutputWithContext(ctx context.Context) DatasetDelimitedTextAzureBlobStorageLocationPtrOutput {
	return o
}

func (o DatasetDelimitedTextAzureBlobStorageLocationPtrOutput) Elem() DatasetDelimitedTextAzureBlobStorageLocationOutput {
	return o.ApplyT(func(v *DatasetDelimitedTextAzureBlobStorageLocation) DatasetDelimitedTextAzureBlobStorageLocation {
		return *v
	}).(DatasetDelimitedTextAzureBlobStorageLocationOutput)
}

// The container on the Azure Blob Storage Account hosting the file.
func (o DatasetDelimitedTextAzureBlobStorageLocationPtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDelimitedTextAzureBlobStorageLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(pulumi.StringPtrOutput)
}

// The filename of the file on the web server.
func (o DatasetDelimitedTextAzureBlobStorageLocationPtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDelimitedTextAzureBlobStorageLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Filename
	}).(pulumi.StringPtrOutput)
}

// The folder path to the file on the web server.
func (o DatasetDelimitedTextAzureBlobStorageLocationPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDelimitedTextAzureBlobStorageLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

type DatasetDelimitedTextHttpServerLocation struct {
	// The filename of the file on the web server.
	Filename string `pulumi:"filename"`
	// The folder path to the file on the web server.
	Path string `pulumi:"path"`
	// The base URL to the web server hosting the file.
	RelativeUrl string `pulumi:"relativeUrl"`
}

// DatasetDelimitedTextHttpServerLocationInput is an input type that accepts DatasetDelimitedTextHttpServerLocationArgs and DatasetDelimitedTextHttpServerLocationOutput values.
// You can construct a concrete instance of `DatasetDelimitedTextHttpServerLocationInput` via:
//
//          DatasetDelimitedTextHttpServerLocationArgs{...}
type DatasetDelimitedTextHttpServerLocationInput interface {
	pulumi.Input

	ToDatasetDelimitedTextHttpServerLocationOutput() DatasetDelimitedTextHttpServerLocationOutput
	ToDatasetDelimitedTextHttpServerLocationOutputWithContext(context.Context) DatasetDelimitedTextHttpServerLocationOutput
}

type DatasetDelimitedTextHttpServerLocationArgs struct {
	// The filename of the file on the web server.
	Filename pulumi.StringInput `pulumi:"filename"`
	// The folder path to the file on the web server.
	Path pulumi.StringInput `pulumi:"path"`
	// The base URL to the web server hosting the file.
	RelativeUrl pulumi.StringInput `pulumi:"relativeUrl"`
}

func (DatasetDelimitedTextHttpServerLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDelimitedTextHttpServerLocation)(nil)).Elem()
}

func (i DatasetDelimitedTextHttpServerLocationArgs) ToDatasetDelimitedTextHttpServerLocationOutput() DatasetDelimitedTextHttpServerLocationOutput {
	return i.ToDatasetDelimitedTextHttpServerLocationOutputWithContext(context.Background())
}

func (i DatasetDelimitedTextHttpServerLocationArgs) ToDatasetDelimitedTextHttpServerLocationOutputWithContext(ctx context.Context) DatasetDelimitedTextHttpServerLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDelimitedTextHttpServerLocationOutput)
}

func (i DatasetDelimitedTextHttpServerLocationArgs) ToDatasetDelimitedTextHttpServerLocationPtrOutput() DatasetDelimitedTextHttpServerLocationPtrOutput {
	return i.ToDatasetDelimitedTextHttpServerLocationPtrOutputWithContext(context.Background())
}

func (i DatasetDelimitedTextHttpServerLocationArgs) ToDatasetDelimitedTextHttpServerLocationPtrOutputWithContext(ctx context.Context) DatasetDelimitedTextHttpServerLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDelimitedTextHttpServerLocationOutput).ToDatasetDelimitedTextHttpServerLocationPtrOutputWithContext(ctx)
}

// DatasetDelimitedTextHttpServerLocationPtrInput is an input type that accepts DatasetDelimitedTextHttpServerLocationArgs, DatasetDelimitedTextHttpServerLocationPtr and DatasetDelimitedTextHttpServerLocationPtrOutput values.
// You can construct a concrete instance of `DatasetDelimitedTextHttpServerLocationPtrInput` via:
//
//          DatasetDelimitedTextHttpServerLocationArgs{...}
//
//  or:
//
//          nil
type DatasetDelimitedTextHttpServerLocationPtrInput interface {
	pulumi.Input

	ToDatasetDelimitedTextHttpServerLocationPtrOutput() DatasetDelimitedTextHttpServerLocationPtrOutput
	ToDatasetDelimitedTextHttpServerLocationPtrOutputWithContext(context.Context) DatasetDelimitedTextHttpServerLocationPtrOutput
}

type datasetDelimitedTextHttpServerLocationPtrType DatasetDelimitedTextHttpServerLocationArgs

func DatasetDelimitedTextHttpServerLocationPtr(v *DatasetDelimitedTextHttpServerLocationArgs) DatasetDelimitedTextHttpServerLocationPtrInput {
	return (*datasetDelimitedTextHttpServerLocationPtrType)(v)
}

func (*datasetDelimitedTextHttpServerLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDelimitedTextHttpServerLocation)(nil)).Elem()
}

func (i *datasetDelimitedTextHttpServerLocationPtrType) ToDatasetDelimitedTextHttpServerLocationPtrOutput() DatasetDelimitedTextHttpServerLocationPtrOutput {
	return i.ToDatasetDelimitedTextHttpServerLocationPtrOutputWithContext(context.Background())
}

func (i *datasetDelimitedTextHttpServerLocationPtrType) ToDatasetDelimitedTextHttpServerLocationPtrOutputWithContext(ctx context.Context) DatasetDelimitedTextHttpServerLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDelimitedTextHttpServerLocationPtrOutput)
}

type DatasetDelimitedTextHttpServerLocationOutput struct{ *pulumi.OutputState }

func (DatasetDelimitedTextHttpServerLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDelimitedTextHttpServerLocation)(nil)).Elem()
}

func (o DatasetDelimitedTextHttpServerLocationOutput) ToDatasetDelimitedTextHttpServerLocationOutput() DatasetDelimitedTextHttpServerLocationOutput {
	return o
}

func (o DatasetDelimitedTextHttpServerLocationOutput) ToDatasetDelimitedTextHttpServerLocationOutputWithContext(ctx context.Context) DatasetDelimitedTextHttpServerLocationOutput {
	return o
}

func (o DatasetDelimitedTextHttpServerLocationOutput) ToDatasetDelimitedTextHttpServerLocationPtrOutput() DatasetDelimitedTextHttpServerLocationPtrOutput {
	return o.ToDatasetDelimitedTextHttpServerLocationPtrOutputWithContext(context.Background())
}

func (o DatasetDelimitedTextHttpServerLocationOutput) ToDatasetDelimitedTextHttpServerLocationPtrOutputWithContext(ctx context.Context) DatasetDelimitedTextHttpServerLocationPtrOutput {
	return o.ApplyT(func(v DatasetDelimitedTextHttpServerLocation) *DatasetDelimitedTextHttpServerLocation {
		return &v
	}).(DatasetDelimitedTextHttpServerLocationPtrOutput)
}

// The filename of the file on the web server.
func (o DatasetDelimitedTextHttpServerLocationOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDelimitedTextHttpServerLocation) string { return v.Filename }).(pulumi.StringOutput)
}

// The folder path to the file on the web server.
func (o DatasetDelimitedTextHttpServerLocationOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDelimitedTextHttpServerLocation) string { return v.Path }).(pulumi.StringOutput)
}

// The base URL to the web server hosting the file.
func (o DatasetDelimitedTextHttpServerLocationOutput) RelativeUrl() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDelimitedTextHttpServerLocation) string { return v.RelativeUrl }).(pulumi.StringOutput)
}

type DatasetDelimitedTextHttpServerLocationPtrOutput struct{ *pulumi.OutputState }

func (DatasetDelimitedTextHttpServerLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDelimitedTextHttpServerLocation)(nil)).Elem()
}

func (o DatasetDelimitedTextHttpServerLocationPtrOutput) ToDatasetDelimitedTextHttpServerLocationPtrOutput() DatasetDelimitedTextHttpServerLocationPtrOutput {
	return o
}

func (o DatasetDelimitedTextHttpServerLocationPtrOutput) ToDatasetDelimitedTextHttpServerLocationPtrOutputWithContext(ctx context.Context) DatasetDelimitedTextHttpServerLocationPtrOutput {
	return o
}

func (o DatasetDelimitedTextHttpServerLocationPtrOutput) Elem() DatasetDelimitedTextHttpServerLocationOutput {
	return o.ApplyT(func(v *DatasetDelimitedTextHttpServerLocation) DatasetDelimitedTextHttpServerLocation { return *v }).(DatasetDelimitedTextHttpServerLocationOutput)
}

// The filename of the file on the web server.
func (o DatasetDelimitedTextHttpServerLocationPtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDelimitedTextHttpServerLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Filename
	}).(pulumi.StringPtrOutput)
}

// The folder path to the file on the web server.
func (o DatasetDelimitedTextHttpServerLocationPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDelimitedTextHttpServerLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// The base URL to the web server hosting the file.
func (o DatasetDelimitedTextHttpServerLocationPtrOutput) RelativeUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetDelimitedTextHttpServerLocation) *string {
		if v == nil {
			return nil
		}
		return &v.RelativeUrl
	}).(pulumi.StringPtrOutput)
}

type DatasetDelimitedTextSchemaColumn struct {
	// The description of the column.
	Description *string `pulumi:"description"`
	// The name of the column.
	Name string `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type *string `pulumi:"type"`
}

// DatasetDelimitedTextSchemaColumnInput is an input type that accepts DatasetDelimitedTextSchemaColumnArgs and DatasetDelimitedTextSchemaColumnOutput values.
// You can construct a concrete instance of `DatasetDelimitedTextSchemaColumnInput` via:
//
//          DatasetDelimitedTextSchemaColumnArgs{...}
type DatasetDelimitedTextSchemaColumnInput interface {
	pulumi.Input

	ToDatasetDelimitedTextSchemaColumnOutput() DatasetDelimitedTextSchemaColumnOutput
	ToDatasetDelimitedTextSchemaColumnOutputWithContext(context.Context) DatasetDelimitedTextSchemaColumnOutput
}

type DatasetDelimitedTextSchemaColumnArgs struct {
	// The description of the column.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the column.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatasetDelimitedTextSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDelimitedTextSchemaColumn)(nil)).Elem()
}

func (i DatasetDelimitedTextSchemaColumnArgs) ToDatasetDelimitedTextSchemaColumnOutput() DatasetDelimitedTextSchemaColumnOutput {
	return i.ToDatasetDelimitedTextSchemaColumnOutputWithContext(context.Background())
}

func (i DatasetDelimitedTextSchemaColumnArgs) ToDatasetDelimitedTextSchemaColumnOutputWithContext(ctx context.Context) DatasetDelimitedTextSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDelimitedTextSchemaColumnOutput)
}

// DatasetDelimitedTextSchemaColumnArrayInput is an input type that accepts DatasetDelimitedTextSchemaColumnArray and DatasetDelimitedTextSchemaColumnArrayOutput values.
// You can construct a concrete instance of `DatasetDelimitedTextSchemaColumnArrayInput` via:
//
//          DatasetDelimitedTextSchemaColumnArray{ DatasetDelimitedTextSchemaColumnArgs{...} }
type DatasetDelimitedTextSchemaColumnArrayInput interface {
	pulumi.Input

	ToDatasetDelimitedTextSchemaColumnArrayOutput() DatasetDelimitedTextSchemaColumnArrayOutput
	ToDatasetDelimitedTextSchemaColumnArrayOutputWithContext(context.Context) DatasetDelimitedTextSchemaColumnArrayOutput
}

type DatasetDelimitedTextSchemaColumnArray []DatasetDelimitedTextSchemaColumnInput

func (DatasetDelimitedTextSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetDelimitedTextSchemaColumn)(nil)).Elem()
}

func (i DatasetDelimitedTextSchemaColumnArray) ToDatasetDelimitedTextSchemaColumnArrayOutput() DatasetDelimitedTextSchemaColumnArrayOutput {
	return i.ToDatasetDelimitedTextSchemaColumnArrayOutputWithContext(context.Background())
}

func (i DatasetDelimitedTextSchemaColumnArray) ToDatasetDelimitedTextSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetDelimitedTextSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDelimitedTextSchemaColumnArrayOutput)
}

type DatasetDelimitedTextSchemaColumnOutput struct{ *pulumi.OutputState }

func (DatasetDelimitedTextSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDelimitedTextSchemaColumn)(nil)).Elem()
}

func (o DatasetDelimitedTextSchemaColumnOutput) ToDatasetDelimitedTextSchemaColumnOutput() DatasetDelimitedTextSchemaColumnOutput {
	return o
}

func (o DatasetDelimitedTextSchemaColumnOutput) ToDatasetDelimitedTextSchemaColumnOutputWithContext(ctx context.Context) DatasetDelimitedTextSchemaColumnOutput {
	return o
}

// The description of the column.
func (o DatasetDelimitedTextSchemaColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDelimitedTextSchemaColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the column.
func (o DatasetDelimitedTextSchemaColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetDelimitedTextSchemaColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
func (o DatasetDelimitedTextSchemaColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetDelimitedTextSchemaColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatasetDelimitedTextSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (DatasetDelimitedTextSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetDelimitedTextSchemaColumn)(nil)).Elem()
}

func (o DatasetDelimitedTextSchemaColumnArrayOutput) ToDatasetDelimitedTextSchemaColumnArrayOutput() DatasetDelimitedTextSchemaColumnArrayOutput {
	return o
}

func (o DatasetDelimitedTextSchemaColumnArrayOutput) ToDatasetDelimitedTextSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetDelimitedTextSchemaColumnArrayOutput {
	return o
}

func (o DatasetDelimitedTextSchemaColumnArrayOutput) Index(i pulumi.IntInput) DatasetDelimitedTextSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetDelimitedTextSchemaColumn {
		return vs[0].([]DatasetDelimitedTextSchemaColumn)[vs[1].(int)]
	}).(DatasetDelimitedTextSchemaColumnOutput)
}

type DatasetHttpSchemaColumn struct {
	// The description of the column.
	Description *string `pulumi:"description"`
	// The name of the column.
	Name string `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type *string `pulumi:"type"`
}

// DatasetHttpSchemaColumnInput is an input type that accepts DatasetHttpSchemaColumnArgs and DatasetHttpSchemaColumnOutput values.
// You can construct a concrete instance of `DatasetHttpSchemaColumnInput` via:
//
//          DatasetHttpSchemaColumnArgs{...}
type DatasetHttpSchemaColumnInput interface {
	pulumi.Input

	ToDatasetHttpSchemaColumnOutput() DatasetHttpSchemaColumnOutput
	ToDatasetHttpSchemaColumnOutputWithContext(context.Context) DatasetHttpSchemaColumnOutput
}

type DatasetHttpSchemaColumnArgs struct {
	// The description of the column.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the column.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatasetHttpSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetHttpSchemaColumn)(nil)).Elem()
}

func (i DatasetHttpSchemaColumnArgs) ToDatasetHttpSchemaColumnOutput() DatasetHttpSchemaColumnOutput {
	return i.ToDatasetHttpSchemaColumnOutputWithContext(context.Background())
}

func (i DatasetHttpSchemaColumnArgs) ToDatasetHttpSchemaColumnOutputWithContext(ctx context.Context) DatasetHttpSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetHttpSchemaColumnOutput)
}

// DatasetHttpSchemaColumnArrayInput is an input type that accepts DatasetHttpSchemaColumnArray and DatasetHttpSchemaColumnArrayOutput values.
// You can construct a concrete instance of `DatasetHttpSchemaColumnArrayInput` via:
//
//          DatasetHttpSchemaColumnArray{ DatasetHttpSchemaColumnArgs{...} }
type DatasetHttpSchemaColumnArrayInput interface {
	pulumi.Input

	ToDatasetHttpSchemaColumnArrayOutput() DatasetHttpSchemaColumnArrayOutput
	ToDatasetHttpSchemaColumnArrayOutputWithContext(context.Context) DatasetHttpSchemaColumnArrayOutput
}

type DatasetHttpSchemaColumnArray []DatasetHttpSchemaColumnInput

func (DatasetHttpSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetHttpSchemaColumn)(nil)).Elem()
}

func (i DatasetHttpSchemaColumnArray) ToDatasetHttpSchemaColumnArrayOutput() DatasetHttpSchemaColumnArrayOutput {
	return i.ToDatasetHttpSchemaColumnArrayOutputWithContext(context.Background())
}

func (i DatasetHttpSchemaColumnArray) ToDatasetHttpSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetHttpSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetHttpSchemaColumnArrayOutput)
}

type DatasetHttpSchemaColumnOutput struct{ *pulumi.OutputState }

func (DatasetHttpSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetHttpSchemaColumn)(nil)).Elem()
}

func (o DatasetHttpSchemaColumnOutput) ToDatasetHttpSchemaColumnOutput() DatasetHttpSchemaColumnOutput {
	return o
}

func (o DatasetHttpSchemaColumnOutput) ToDatasetHttpSchemaColumnOutputWithContext(ctx context.Context) DatasetHttpSchemaColumnOutput {
	return o
}

// The description of the column.
func (o DatasetHttpSchemaColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetHttpSchemaColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the column.
func (o DatasetHttpSchemaColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetHttpSchemaColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
func (o DatasetHttpSchemaColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetHttpSchemaColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatasetHttpSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (DatasetHttpSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetHttpSchemaColumn)(nil)).Elem()
}

func (o DatasetHttpSchemaColumnArrayOutput) ToDatasetHttpSchemaColumnArrayOutput() DatasetHttpSchemaColumnArrayOutput {
	return o
}

func (o DatasetHttpSchemaColumnArrayOutput) ToDatasetHttpSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetHttpSchemaColumnArrayOutput {
	return o
}

func (o DatasetHttpSchemaColumnArrayOutput) Index(i pulumi.IntInput) DatasetHttpSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetHttpSchemaColumn {
		return vs[0].([]DatasetHttpSchemaColumn)[vs[1].(int)]
	}).(DatasetHttpSchemaColumnOutput)
}

type DatasetJsonAzureBlobStorageLocation struct {
	// The container on the Azure Blob Storage Account hosting the file.
	Container string `pulumi:"container"`
	// The filename of the file on the web server.
	Filename string `pulumi:"filename"`
	// The folder path to the file on the web server.
	Path string `pulumi:"path"`
}

// DatasetJsonAzureBlobStorageLocationInput is an input type that accepts DatasetJsonAzureBlobStorageLocationArgs and DatasetJsonAzureBlobStorageLocationOutput values.
// You can construct a concrete instance of `DatasetJsonAzureBlobStorageLocationInput` via:
//
//          DatasetJsonAzureBlobStorageLocationArgs{...}
type DatasetJsonAzureBlobStorageLocationInput interface {
	pulumi.Input

	ToDatasetJsonAzureBlobStorageLocationOutput() DatasetJsonAzureBlobStorageLocationOutput
	ToDatasetJsonAzureBlobStorageLocationOutputWithContext(context.Context) DatasetJsonAzureBlobStorageLocationOutput
}

type DatasetJsonAzureBlobStorageLocationArgs struct {
	// The container on the Azure Blob Storage Account hosting the file.
	Container pulumi.StringInput `pulumi:"container"`
	// The filename of the file on the web server.
	Filename pulumi.StringInput `pulumi:"filename"`
	// The folder path to the file on the web server.
	Path pulumi.StringInput `pulumi:"path"`
}

func (DatasetJsonAzureBlobStorageLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetJsonAzureBlobStorageLocation)(nil)).Elem()
}

func (i DatasetJsonAzureBlobStorageLocationArgs) ToDatasetJsonAzureBlobStorageLocationOutput() DatasetJsonAzureBlobStorageLocationOutput {
	return i.ToDatasetJsonAzureBlobStorageLocationOutputWithContext(context.Background())
}

func (i DatasetJsonAzureBlobStorageLocationArgs) ToDatasetJsonAzureBlobStorageLocationOutputWithContext(ctx context.Context) DatasetJsonAzureBlobStorageLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetJsonAzureBlobStorageLocationOutput)
}

func (i DatasetJsonAzureBlobStorageLocationArgs) ToDatasetJsonAzureBlobStorageLocationPtrOutput() DatasetJsonAzureBlobStorageLocationPtrOutput {
	return i.ToDatasetJsonAzureBlobStorageLocationPtrOutputWithContext(context.Background())
}

func (i DatasetJsonAzureBlobStorageLocationArgs) ToDatasetJsonAzureBlobStorageLocationPtrOutputWithContext(ctx context.Context) DatasetJsonAzureBlobStorageLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetJsonAzureBlobStorageLocationOutput).ToDatasetJsonAzureBlobStorageLocationPtrOutputWithContext(ctx)
}

// DatasetJsonAzureBlobStorageLocationPtrInput is an input type that accepts DatasetJsonAzureBlobStorageLocationArgs, DatasetJsonAzureBlobStorageLocationPtr and DatasetJsonAzureBlobStorageLocationPtrOutput values.
// You can construct a concrete instance of `DatasetJsonAzureBlobStorageLocationPtrInput` via:
//
//          DatasetJsonAzureBlobStorageLocationArgs{...}
//
//  or:
//
//          nil
type DatasetJsonAzureBlobStorageLocationPtrInput interface {
	pulumi.Input

	ToDatasetJsonAzureBlobStorageLocationPtrOutput() DatasetJsonAzureBlobStorageLocationPtrOutput
	ToDatasetJsonAzureBlobStorageLocationPtrOutputWithContext(context.Context) DatasetJsonAzureBlobStorageLocationPtrOutput
}

type datasetJsonAzureBlobStorageLocationPtrType DatasetJsonAzureBlobStorageLocationArgs

func DatasetJsonAzureBlobStorageLocationPtr(v *DatasetJsonAzureBlobStorageLocationArgs) DatasetJsonAzureBlobStorageLocationPtrInput {
	return (*datasetJsonAzureBlobStorageLocationPtrType)(v)
}

func (*datasetJsonAzureBlobStorageLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetJsonAzureBlobStorageLocation)(nil)).Elem()
}

func (i *datasetJsonAzureBlobStorageLocationPtrType) ToDatasetJsonAzureBlobStorageLocationPtrOutput() DatasetJsonAzureBlobStorageLocationPtrOutput {
	return i.ToDatasetJsonAzureBlobStorageLocationPtrOutputWithContext(context.Background())
}

func (i *datasetJsonAzureBlobStorageLocationPtrType) ToDatasetJsonAzureBlobStorageLocationPtrOutputWithContext(ctx context.Context) DatasetJsonAzureBlobStorageLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetJsonAzureBlobStorageLocationPtrOutput)
}

type DatasetJsonAzureBlobStorageLocationOutput struct{ *pulumi.OutputState }

func (DatasetJsonAzureBlobStorageLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetJsonAzureBlobStorageLocation)(nil)).Elem()
}

func (o DatasetJsonAzureBlobStorageLocationOutput) ToDatasetJsonAzureBlobStorageLocationOutput() DatasetJsonAzureBlobStorageLocationOutput {
	return o
}

func (o DatasetJsonAzureBlobStorageLocationOutput) ToDatasetJsonAzureBlobStorageLocationOutputWithContext(ctx context.Context) DatasetJsonAzureBlobStorageLocationOutput {
	return o
}

func (o DatasetJsonAzureBlobStorageLocationOutput) ToDatasetJsonAzureBlobStorageLocationPtrOutput() DatasetJsonAzureBlobStorageLocationPtrOutput {
	return o.ToDatasetJsonAzureBlobStorageLocationPtrOutputWithContext(context.Background())
}

func (o DatasetJsonAzureBlobStorageLocationOutput) ToDatasetJsonAzureBlobStorageLocationPtrOutputWithContext(ctx context.Context) DatasetJsonAzureBlobStorageLocationPtrOutput {
	return o.ApplyT(func(v DatasetJsonAzureBlobStorageLocation) *DatasetJsonAzureBlobStorageLocation {
		return &v
	}).(DatasetJsonAzureBlobStorageLocationPtrOutput)
}

// The container on the Azure Blob Storage Account hosting the file.
func (o DatasetJsonAzureBlobStorageLocationOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetJsonAzureBlobStorageLocation) string { return v.Container }).(pulumi.StringOutput)
}

// The filename of the file on the web server.
func (o DatasetJsonAzureBlobStorageLocationOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetJsonAzureBlobStorageLocation) string { return v.Filename }).(pulumi.StringOutput)
}

// The folder path to the file on the web server.
func (o DatasetJsonAzureBlobStorageLocationOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetJsonAzureBlobStorageLocation) string { return v.Path }).(pulumi.StringOutput)
}

type DatasetJsonAzureBlobStorageLocationPtrOutput struct{ *pulumi.OutputState }

func (DatasetJsonAzureBlobStorageLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetJsonAzureBlobStorageLocation)(nil)).Elem()
}

func (o DatasetJsonAzureBlobStorageLocationPtrOutput) ToDatasetJsonAzureBlobStorageLocationPtrOutput() DatasetJsonAzureBlobStorageLocationPtrOutput {
	return o
}

func (o DatasetJsonAzureBlobStorageLocationPtrOutput) ToDatasetJsonAzureBlobStorageLocationPtrOutputWithContext(ctx context.Context) DatasetJsonAzureBlobStorageLocationPtrOutput {
	return o
}

func (o DatasetJsonAzureBlobStorageLocationPtrOutput) Elem() DatasetJsonAzureBlobStorageLocationOutput {
	return o.ApplyT(func(v *DatasetJsonAzureBlobStorageLocation) DatasetJsonAzureBlobStorageLocation { return *v }).(DatasetJsonAzureBlobStorageLocationOutput)
}

// The container on the Azure Blob Storage Account hosting the file.
func (o DatasetJsonAzureBlobStorageLocationPtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetJsonAzureBlobStorageLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(pulumi.StringPtrOutput)
}

// The filename of the file on the web server.
func (o DatasetJsonAzureBlobStorageLocationPtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetJsonAzureBlobStorageLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Filename
	}).(pulumi.StringPtrOutput)
}

// The folder path to the file on the web server.
func (o DatasetJsonAzureBlobStorageLocationPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetJsonAzureBlobStorageLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

type DatasetJsonHttpServerLocation struct {
	// The filename of the file on the web server.
	Filename string `pulumi:"filename"`
	// The folder path to the file on the web server.
	Path string `pulumi:"path"`
	// The base URL to the web server hosting the file.
	RelativeUrl string `pulumi:"relativeUrl"`
}

// DatasetJsonHttpServerLocationInput is an input type that accepts DatasetJsonHttpServerLocationArgs and DatasetJsonHttpServerLocationOutput values.
// You can construct a concrete instance of `DatasetJsonHttpServerLocationInput` via:
//
//          DatasetJsonHttpServerLocationArgs{...}
type DatasetJsonHttpServerLocationInput interface {
	pulumi.Input

	ToDatasetJsonHttpServerLocationOutput() DatasetJsonHttpServerLocationOutput
	ToDatasetJsonHttpServerLocationOutputWithContext(context.Context) DatasetJsonHttpServerLocationOutput
}

type DatasetJsonHttpServerLocationArgs struct {
	// The filename of the file on the web server.
	Filename pulumi.StringInput `pulumi:"filename"`
	// The folder path to the file on the web server.
	Path pulumi.StringInput `pulumi:"path"`
	// The base URL to the web server hosting the file.
	RelativeUrl pulumi.StringInput `pulumi:"relativeUrl"`
}

func (DatasetJsonHttpServerLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetJsonHttpServerLocation)(nil)).Elem()
}

func (i DatasetJsonHttpServerLocationArgs) ToDatasetJsonHttpServerLocationOutput() DatasetJsonHttpServerLocationOutput {
	return i.ToDatasetJsonHttpServerLocationOutputWithContext(context.Background())
}

func (i DatasetJsonHttpServerLocationArgs) ToDatasetJsonHttpServerLocationOutputWithContext(ctx context.Context) DatasetJsonHttpServerLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetJsonHttpServerLocationOutput)
}

func (i DatasetJsonHttpServerLocationArgs) ToDatasetJsonHttpServerLocationPtrOutput() DatasetJsonHttpServerLocationPtrOutput {
	return i.ToDatasetJsonHttpServerLocationPtrOutputWithContext(context.Background())
}

func (i DatasetJsonHttpServerLocationArgs) ToDatasetJsonHttpServerLocationPtrOutputWithContext(ctx context.Context) DatasetJsonHttpServerLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetJsonHttpServerLocationOutput).ToDatasetJsonHttpServerLocationPtrOutputWithContext(ctx)
}

// DatasetJsonHttpServerLocationPtrInput is an input type that accepts DatasetJsonHttpServerLocationArgs, DatasetJsonHttpServerLocationPtr and DatasetJsonHttpServerLocationPtrOutput values.
// You can construct a concrete instance of `DatasetJsonHttpServerLocationPtrInput` via:
//
//          DatasetJsonHttpServerLocationArgs{...}
//
//  or:
//
//          nil
type DatasetJsonHttpServerLocationPtrInput interface {
	pulumi.Input

	ToDatasetJsonHttpServerLocationPtrOutput() DatasetJsonHttpServerLocationPtrOutput
	ToDatasetJsonHttpServerLocationPtrOutputWithContext(context.Context) DatasetJsonHttpServerLocationPtrOutput
}

type datasetJsonHttpServerLocationPtrType DatasetJsonHttpServerLocationArgs

func DatasetJsonHttpServerLocationPtr(v *DatasetJsonHttpServerLocationArgs) DatasetJsonHttpServerLocationPtrInput {
	return (*datasetJsonHttpServerLocationPtrType)(v)
}

func (*datasetJsonHttpServerLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetJsonHttpServerLocation)(nil)).Elem()
}

func (i *datasetJsonHttpServerLocationPtrType) ToDatasetJsonHttpServerLocationPtrOutput() DatasetJsonHttpServerLocationPtrOutput {
	return i.ToDatasetJsonHttpServerLocationPtrOutputWithContext(context.Background())
}

func (i *datasetJsonHttpServerLocationPtrType) ToDatasetJsonHttpServerLocationPtrOutputWithContext(ctx context.Context) DatasetJsonHttpServerLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetJsonHttpServerLocationPtrOutput)
}

type DatasetJsonHttpServerLocationOutput struct{ *pulumi.OutputState }

func (DatasetJsonHttpServerLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetJsonHttpServerLocation)(nil)).Elem()
}

func (o DatasetJsonHttpServerLocationOutput) ToDatasetJsonHttpServerLocationOutput() DatasetJsonHttpServerLocationOutput {
	return o
}

func (o DatasetJsonHttpServerLocationOutput) ToDatasetJsonHttpServerLocationOutputWithContext(ctx context.Context) DatasetJsonHttpServerLocationOutput {
	return o
}

func (o DatasetJsonHttpServerLocationOutput) ToDatasetJsonHttpServerLocationPtrOutput() DatasetJsonHttpServerLocationPtrOutput {
	return o.ToDatasetJsonHttpServerLocationPtrOutputWithContext(context.Background())
}

func (o DatasetJsonHttpServerLocationOutput) ToDatasetJsonHttpServerLocationPtrOutputWithContext(ctx context.Context) DatasetJsonHttpServerLocationPtrOutput {
	return o.ApplyT(func(v DatasetJsonHttpServerLocation) *DatasetJsonHttpServerLocation {
		return &v
	}).(DatasetJsonHttpServerLocationPtrOutput)
}

// The filename of the file on the web server.
func (o DatasetJsonHttpServerLocationOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetJsonHttpServerLocation) string { return v.Filename }).(pulumi.StringOutput)
}

// The folder path to the file on the web server.
func (o DatasetJsonHttpServerLocationOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetJsonHttpServerLocation) string { return v.Path }).(pulumi.StringOutput)
}

// The base URL to the web server hosting the file.
func (o DatasetJsonHttpServerLocationOutput) RelativeUrl() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetJsonHttpServerLocation) string { return v.RelativeUrl }).(pulumi.StringOutput)
}

type DatasetJsonHttpServerLocationPtrOutput struct{ *pulumi.OutputState }

func (DatasetJsonHttpServerLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetJsonHttpServerLocation)(nil)).Elem()
}

func (o DatasetJsonHttpServerLocationPtrOutput) ToDatasetJsonHttpServerLocationPtrOutput() DatasetJsonHttpServerLocationPtrOutput {
	return o
}

func (o DatasetJsonHttpServerLocationPtrOutput) ToDatasetJsonHttpServerLocationPtrOutputWithContext(ctx context.Context) DatasetJsonHttpServerLocationPtrOutput {
	return o
}

func (o DatasetJsonHttpServerLocationPtrOutput) Elem() DatasetJsonHttpServerLocationOutput {
	return o.ApplyT(func(v *DatasetJsonHttpServerLocation) DatasetJsonHttpServerLocation { return *v }).(DatasetJsonHttpServerLocationOutput)
}

// The filename of the file on the web server.
func (o DatasetJsonHttpServerLocationPtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetJsonHttpServerLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Filename
	}).(pulumi.StringPtrOutput)
}

// The folder path to the file on the web server.
func (o DatasetJsonHttpServerLocationPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetJsonHttpServerLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// The base URL to the web server hosting the file.
func (o DatasetJsonHttpServerLocationPtrOutput) RelativeUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetJsonHttpServerLocation) *string {
		if v == nil {
			return nil
		}
		return &v.RelativeUrl
	}).(pulumi.StringPtrOutput)
}

type DatasetJsonSchemaColumn struct {
	// The description of the column.
	Description *string `pulumi:"description"`
	// The name of the column.
	Name string `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type *string `pulumi:"type"`
}

// DatasetJsonSchemaColumnInput is an input type that accepts DatasetJsonSchemaColumnArgs and DatasetJsonSchemaColumnOutput values.
// You can construct a concrete instance of `DatasetJsonSchemaColumnInput` via:
//
//          DatasetJsonSchemaColumnArgs{...}
type DatasetJsonSchemaColumnInput interface {
	pulumi.Input

	ToDatasetJsonSchemaColumnOutput() DatasetJsonSchemaColumnOutput
	ToDatasetJsonSchemaColumnOutputWithContext(context.Context) DatasetJsonSchemaColumnOutput
}

type DatasetJsonSchemaColumnArgs struct {
	// The description of the column.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the column.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatasetJsonSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetJsonSchemaColumn)(nil)).Elem()
}

func (i DatasetJsonSchemaColumnArgs) ToDatasetJsonSchemaColumnOutput() DatasetJsonSchemaColumnOutput {
	return i.ToDatasetJsonSchemaColumnOutputWithContext(context.Background())
}

func (i DatasetJsonSchemaColumnArgs) ToDatasetJsonSchemaColumnOutputWithContext(ctx context.Context) DatasetJsonSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetJsonSchemaColumnOutput)
}

// DatasetJsonSchemaColumnArrayInput is an input type that accepts DatasetJsonSchemaColumnArray and DatasetJsonSchemaColumnArrayOutput values.
// You can construct a concrete instance of `DatasetJsonSchemaColumnArrayInput` via:
//
//          DatasetJsonSchemaColumnArray{ DatasetJsonSchemaColumnArgs{...} }
type DatasetJsonSchemaColumnArrayInput interface {
	pulumi.Input

	ToDatasetJsonSchemaColumnArrayOutput() DatasetJsonSchemaColumnArrayOutput
	ToDatasetJsonSchemaColumnArrayOutputWithContext(context.Context) DatasetJsonSchemaColumnArrayOutput
}

type DatasetJsonSchemaColumnArray []DatasetJsonSchemaColumnInput

func (DatasetJsonSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetJsonSchemaColumn)(nil)).Elem()
}

func (i DatasetJsonSchemaColumnArray) ToDatasetJsonSchemaColumnArrayOutput() DatasetJsonSchemaColumnArrayOutput {
	return i.ToDatasetJsonSchemaColumnArrayOutputWithContext(context.Background())
}

func (i DatasetJsonSchemaColumnArray) ToDatasetJsonSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetJsonSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetJsonSchemaColumnArrayOutput)
}

type DatasetJsonSchemaColumnOutput struct{ *pulumi.OutputState }

func (DatasetJsonSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetJsonSchemaColumn)(nil)).Elem()
}

func (o DatasetJsonSchemaColumnOutput) ToDatasetJsonSchemaColumnOutput() DatasetJsonSchemaColumnOutput {
	return o
}

func (o DatasetJsonSchemaColumnOutput) ToDatasetJsonSchemaColumnOutputWithContext(ctx context.Context) DatasetJsonSchemaColumnOutput {
	return o
}

// The description of the column.
func (o DatasetJsonSchemaColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetJsonSchemaColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the column.
func (o DatasetJsonSchemaColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetJsonSchemaColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
func (o DatasetJsonSchemaColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetJsonSchemaColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatasetJsonSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (DatasetJsonSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetJsonSchemaColumn)(nil)).Elem()
}

func (o DatasetJsonSchemaColumnArrayOutput) ToDatasetJsonSchemaColumnArrayOutput() DatasetJsonSchemaColumnArrayOutput {
	return o
}

func (o DatasetJsonSchemaColumnArrayOutput) ToDatasetJsonSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetJsonSchemaColumnArrayOutput {
	return o
}

func (o DatasetJsonSchemaColumnArrayOutput) Index(i pulumi.IntInput) DatasetJsonSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetJsonSchemaColumn {
		return vs[0].([]DatasetJsonSchemaColumn)[vs[1].(int)]
	}).(DatasetJsonSchemaColumnOutput)
}

type DatasetMysqlSchemaColumn struct {
	// The description of the column.
	Description *string `pulumi:"description"`
	// The name of the column.
	Name string `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type *string `pulumi:"type"`
}

// DatasetMysqlSchemaColumnInput is an input type that accepts DatasetMysqlSchemaColumnArgs and DatasetMysqlSchemaColumnOutput values.
// You can construct a concrete instance of `DatasetMysqlSchemaColumnInput` via:
//
//          DatasetMysqlSchemaColumnArgs{...}
type DatasetMysqlSchemaColumnInput interface {
	pulumi.Input

	ToDatasetMysqlSchemaColumnOutput() DatasetMysqlSchemaColumnOutput
	ToDatasetMysqlSchemaColumnOutputWithContext(context.Context) DatasetMysqlSchemaColumnOutput
}

type DatasetMysqlSchemaColumnArgs struct {
	// The description of the column.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the column.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatasetMysqlSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetMysqlSchemaColumn)(nil)).Elem()
}

func (i DatasetMysqlSchemaColumnArgs) ToDatasetMysqlSchemaColumnOutput() DatasetMysqlSchemaColumnOutput {
	return i.ToDatasetMysqlSchemaColumnOutputWithContext(context.Background())
}

func (i DatasetMysqlSchemaColumnArgs) ToDatasetMysqlSchemaColumnOutputWithContext(ctx context.Context) DatasetMysqlSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetMysqlSchemaColumnOutput)
}

// DatasetMysqlSchemaColumnArrayInput is an input type that accepts DatasetMysqlSchemaColumnArray and DatasetMysqlSchemaColumnArrayOutput values.
// You can construct a concrete instance of `DatasetMysqlSchemaColumnArrayInput` via:
//
//          DatasetMysqlSchemaColumnArray{ DatasetMysqlSchemaColumnArgs{...} }
type DatasetMysqlSchemaColumnArrayInput interface {
	pulumi.Input

	ToDatasetMysqlSchemaColumnArrayOutput() DatasetMysqlSchemaColumnArrayOutput
	ToDatasetMysqlSchemaColumnArrayOutputWithContext(context.Context) DatasetMysqlSchemaColumnArrayOutput
}

type DatasetMysqlSchemaColumnArray []DatasetMysqlSchemaColumnInput

func (DatasetMysqlSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetMysqlSchemaColumn)(nil)).Elem()
}

func (i DatasetMysqlSchemaColumnArray) ToDatasetMysqlSchemaColumnArrayOutput() DatasetMysqlSchemaColumnArrayOutput {
	return i.ToDatasetMysqlSchemaColumnArrayOutputWithContext(context.Background())
}

func (i DatasetMysqlSchemaColumnArray) ToDatasetMysqlSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetMysqlSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetMysqlSchemaColumnArrayOutput)
}

type DatasetMysqlSchemaColumnOutput struct{ *pulumi.OutputState }

func (DatasetMysqlSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetMysqlSchemaColumn)(nil)).Elem()
}

func (o DatasetMysqlSchemaColumnOutput) ToDatasetMysqlSchemaColumnOutput() DatasetMysqlSchemaColumnOutput {
	return o
}

func (o DatasetMysqlSchemaColumnOutput) ToDatasetMysqlSchemaColumnOutputWithContext(ctx context.Context) DatasetMysqlSchemaColumnOutput {
	return o
}

// The description of the column.
func (o DatasetMysqlSchemaColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetMysqlSchemaColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the column.
func (o DatasetMysqlSchemaColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetMysqlSchemaColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
func (o DatasetMysqlSchemaColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetMysqlSchemaColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatasetMysqlSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (DatasetMysqlSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetMysqlSchemaColumn)(nil)).Elem()
}

func (o DatasetMysqlSchemaColumnArrayOutput) ToDatasetMysqlSchemaColumnArrayOutput() DatasetMysqlSchemaColumnArrayOutput {
	return o
}

func (o DatasetMysqlSchemaColumnArrayOutput) ToDatasetMysqlSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetMysqlSchemaColumnArrayOutput {
	return o
}

func (o DatasetMysqlSchemaColumnArrayOutput) Index(i pulumi.IntInput) DatasetMysqlSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetMysqlSchemaColumn {
		return vs[0].([]DatasetMysqlSchemaColumn)[vs[1].(int)]
	}).(DatasetMysqlSchemaColumnOutput)
}

type DatasetParquetAzureBlobStorageLocation struct {
	// The container on the Azure Blob Storage Account hosting the file.
	Container string `pulumi:"container"`
	// The filename of the file on the web server.
	Filename string `pulumi:"filename"`
	// The folder path to the file on the web server.
	Path string `pulumi:"path"`
}

// DatasetParquetAzureBlobStorageLocationInput is an input type that accepts DatasetParquetAzureBlobStorageLocationArgs and DatasetParquetAzureBlobStorageLocationOutput values.
// You can construct a concrete instance of `DatasetParquetAzureBlobStorageLocationInput` via:
//
//          DatasetParquetAzureBlobStorageLocationArgs{...}
type DatasetParquetAzureBlobStorageLocationInput interface {
	pulumi.Input

	ToDatasetParquetAzureBlobStorageLocationOutput() DatasetParquetAzureBlobStorageLocationOutput
	ToDatasetParquetAzureBlobStorageLocationOutputWithContext(context.Context) DatasetParquetAzureBlobStorageLocationOutput
}

type DatasetParquetAzureBlobStorageLocationArgs struct {
	// The container on the Azure Blob Storage Account hosting the file.
	Container pulumi.StringInput `pulumi:"container"`
	// The filename of the file on the web server.
	Filename pulumi.StringInput `pulumi:"filename"`
	// The folder path to the file on the web server.
	Path pulumi.StringInput `pulumi:"path"`
}

func (DatasetParquetAzureBlobStorageLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetParquetAzureBlobStorageLocation)(nil)).Elem()
}

func (i DatasetParquetAzureBlobStorageLocationArgs) ToDatasetParquetAzureBlobStorageLocationOutput() DatasetParquetAzureBlobStorageLocationOutput {
	return i.ToDatasetParquetAzureBlobStorageLocationOutputWithContext(context.Background())
}

func (i DatasetParquetAzureBlobStorageLocationArgs) ToDatasetParquetAzureBlobStorageLocationOutputWithContext(ctx context.Context) DatasetParquetAzureBlobStorageLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetParquetAzureBlobStorageLocationOutput)
}

func (i DatasetParquetAzureBlobStorageLocationArgs) ToDatasetParquetAzureBlobStorageLocationPtrOutput() DatasetParquetAzureBlobStorageLocationPtrOutput {
	return i.ToDatasetParquetAzureBlobStorageLocationPtrOutputWithContext(context.Background())
}

func (i DatasetParquetAzureBlobStorageLocationArgs) ToDatasetParquetAzureBlobStorageLocationPtrOutputWithContext(ctx context.Context) DatasetParquetAzureBlobStorageLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetParquetAzureBlobStorageLocationOutput).ToDatasetParquetAzureBlobStorageLocationPtrOutputWithContext(ctx)
}

// DatasetParquetAzureBlobStorageLocationPtrInput is an input type that accepts DatasetParquetAzureBlobStorageLocationArgs, DatasetParquetAzureBlobStorageLocationPtr and DatasetParquetAzureBlobStorageLocationPtrOutput values.
// You can construct a concrete instance of `DatasetParquetAzureBlobStorageLocationPtrInput` via:
//
//          DatasetParquetAzureBlobStorageLocationArgs{...}
//
//  or:
//
//          nil
type DatasetParquetAzureBlobStorageLocationPtrInput interface {
	pulumi.Input

	ToDatasetParquetAzureBlobStorageLocationPtrOutput() DatasetParquetAzureBlobStorageLocationPtrOutput
	ToDatasetParquetAzureBlobStorageLocationPtrOutputWithContext(context.Context) DatasetParquetAzureBlobStorageLocationPtrOutput
}

type datasetParquetAzureBlobStorageLocationPtrType DatasetParquetAzureBlobStorageLocationArgs

func DatasetParquetAzureBlobStorageLocationPtr(v *DatasetParquetAzureBlobStorageLocationArgs) DatasetParquetAzureBlobStorageLocationPtrInput {
	return (*datasetParquetAzureBlobStorageLocationPtrType)(v)
}

func (*datasetParquetAzureBlobStorageLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetParquetAzureBlobStorageLocation)(nil)).Elem()
}

func (i *datasetParquetAzureBlobStorageLocationPtrType) ToDatasetParquetAzureBlobStorageLocationPtrOutput() DatasetParquetAzureBlobStorageLocationPtrOutput {
	return i.ToDatasetParquetAzureBlobStorageLocationPtrOutputWithContext(context.Background())
}

func (i *datasetParquetAzureBlobStorageLocationPtrType) ToDatasetParquetAzureBlobStorageLocationPtrOutputWithContext(ctx context.Context) DatasetParquetAzureBlobStorageLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetParquetAzureBlobStorageLocationPtrOutput)
}

type DatasetParquetAzureBlobStorageLocationOutput struct{ *pulumi.OutputState }

func (DatasetParquetAzureBlobStorageLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetParquetAzureBlobStorageLocation)(nil)).Elem()
}

func (o DatasetParquetAzureBlobStorageLocationOutput) ToDatasetParquetAzureBlobStorageLocationOutput() DatasetParquetAzureBlobStorageLocationOutput {
	return o
}

func (o DatasetParquetAzureBlobStorageLocationOutput) ToDatasetParquetAzureBlobStorageLocationOutputWithContext(ctx context.Context) DatasetParquetAzureBlobStorageLocationOutput {
	return o
}

func (o DatasetParquetAzureBlobStorageLocationOutput) ToDatasetParquetAzureBlobStorageLocationPtrOutput() DatasetParquetAzureBlobStorageLocationPtrOutput {
	return o.ToDatasetParquetAzureBlobStorageLocationPtrOutputWithContext(context.Background())
}

func (o DatasetParquetAzureBlobStorageLocationOutput) ToDatasetParquetAzureBlobStorageLocationPtrOutputWithContext(ctx context.Context) DatasetParquetAzureBlobStorageLocationPtrOutput {
	return o.ApplyT(func(v DatasetParquetAzureBlobStorageLocation) *DatasetParquetAzureBlobStorageLocation {
		return &v
	}).(DatasetParquetAzureBlobStorageLocationPtrOutput)
}

// The container on the Azure Blob Storage Account hosting the file.
func (o DatasetParquetAzureBlobStorageLocationOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetParquetAzureBlobStorageLocation) string { return v.Container }).(pulumi.StringOutput)
}

// The filename of the file on the web server.
func (o DatasetParquetAzureBlobStorageLocationOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetParquetAzureBlobStorageLocation) string { return v.Filename }).(pulumi.StringOutput)
}

// The folder path to the file on the web server.
func (o DatasetParquetAzureBlobStorageLocationOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetParquetAzureBlobStorageLocation) string { return v.Path }).(pulumi.StringOutput)
}

type DatasetParquetAzureBlobStorageLocationPtrOutput struct{ *pulumi.OutputState }

func (DatasetParquetAzureBlobStorageLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetParquetAzureBlobStorageLocation)(nil)).Elem()
}

func (o DatasetParquetAzureBlobStorageLocationPtrOutput) ToDatasetParquetAzureBlobStorageLocationPtrOutput() DatasetParquetAzureBlobStorageLocationPtrOutput {
	return o
}

func (o DatasetParquetAzureBlobStorageLocationPtrOutput) ToDatasetParquetAzureBlobStorageLocationPtrOutputWithContext(ctx context.Context) DatasetParquetAzureBlobStorageLocationPtrOutput {
	return o
}

func (o DatasetParquetAzureBlobStorageLocationPtrOutput) Elem() DatasetParquetAzureBlobStorageLocationOutput {
	return o.ApplyT(func(v *DatasetParquetAzureBlobStorageLocation) DatasetParquetAzureBlobStorageLocation { return *v }).(DatasetParquetAzureBlobStorageLocationOutput)
}

// The container on the Azure Blob Storage Account hosting the file.
func (o DatasetParquetAzureBlobStorageLocationPtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetParquetAzureBlobStorageLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(pulumi.StringPtrOutput)
}

// The filename of the file on the web server.
func (o DatasetParquetAzureBlobStorageLocationPtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetParquetAzureBlobStorageLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Filename
	}).(pulumi.StringPtrOutput)
}

// The folder path to the file on the web server.
func (o DatasetParquetAzureBlobStorageLocationPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetParquetAzureBlobStorageLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

type DatasetParquetHttpServerLocation struct {
	// The filename of the file on the web server.
	Filename string `pulumi:"filename"`
	// The folder path to the file on the web server.
	Path string `pulumi:"path"`
	// The base URL to the web server hosting the file.
	RelativeUrl string `pulumi:"relativeUrl"`
}

// DatasetParquetHttpServerLocationInput is an input type that accepts DatasetParquetHttpServerLocationArgs and DatasetParquetHttpServerLocationOutput values.
// You can construct a concrete instance of `DatasetParquetHttpServerLocationInput` via:
//
//          DatasetParquetHttpServerLocationArgs{...}
type DatasetParquetHttpServerLocationInput interface {
	pulumi.Input

	ToDatasetParquetHttpServerLocationOutput() DatasetParquetHttpServerLocationOutput
	ToDatasetParquetHttpServerLocationOutputWithContext(context.Context) DatasetParquetHttpServerLocationOutput
}

type DatasetParquetHttpServerLocationArgs struct {
	// The filename of the file on the web server.
	Filename pulumi.StringInput `pulumi:"filename"`
	// The folder path to the file on the web server.
	Path pulumi.StringInput `pulumi:"path"`
	// The base URL to the web server hosting the file.
	RelativeUrl pulumi.StringInput `pulumi:"relativeUrl"`
}

func (DatasetParquetHttpServerLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetParquetHttpServerLocation)(nil)).Elem()
}

func (i DatasetParquetHttpServerLocationArgs) ToDatasetParquetHttpServerLocationOutput() DatasetParquetHttpServerLocationOutput {
	return i.ToDatasetParquetHttpServerLocationOutputWithContext(context.Background())
}

func (i DatasetParquetHttpServerLocationArgs) ToDatasetParquetHttpServerLocationOutputWithContext(ctx context.Context) DatasetParquetHttpServerLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetParquetHttpServerLocationOutput)
}

func (i DatasetParquetHttpServerLocationArgs) ToDatasetParquetHttpServerLocationPtrOutput() DatasetParquetHttpServerLocationPtrOutput {
	return i.ToDatasetParquetHttpServerLocationPtrOutputWithContext(context.Background())
}

func (i DatasetParquetHttpServerLocationArgs) ToDatasetParquetHttpServerLocationPtrOutputWithContext(ctx context.Context) DatasetParquetHttpServerLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetParquetHttpServerLocationOutput).ToDatasetParquetHttpServerLocationPtrOutputWithContext(ctx)
}

// DatasetParquetHttpServerLocationPtrInput is an input type that accepts DatasetParquetHttpServerLocationArgs, DatasetParquetHttpServerLocationPtr and DatasetParquetHttpServerLocationPtrOutput values.
// You can construct a concrete instance of `DatasetParquetHttpServerLocationPtrInput` via:
//
//          DatasetParquetHttpServerLocationArgs{...}
//
//  or:
//
//          nil
type DatasetParquetHttpServerLocationPtrInput interface {
	pulumi.Input

	ToDatasetParquetHttpServerLocationPtrOutput() DatasetParquetHttpServerLocationPtrOutput
	ToDatasetParquetHttpServerLocationPtrOutputWithContext(context.Context) DatasetParquetHttpServerLocationPtrOutput
}

type datasetParquetHttpServerLocationPtrType DatasetParquetHttpServerLocationArgs

func DatasetParquetHttpServerLocationPtr(v *DatasetParquetHttpServerLocationArgs) DatasetParquetHttpServerLocationPtrInput {
	return (*datasetParquetHttpServerLocationPtrType)(v)
}

func (*datasetParquetHttpServerLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetParquetHttpServerLocation)(nil)).Elem()
}

func (i *datasetParquetHttpServerLocationPtrType) ToDatasetParquetHttpServerLocationPtrOutput() DatasetParquetHttpServerLocationPtrOutput {
	return i.ToDatasetParquetHttpServerLocationPtrOutputWithContext(context.Background())
}

func (i *datasetParquetHttpServerLocationPtrType) ToDatasetParquetHttpServerLocationPtrOutputWithContext(ctx context.Context) DatasetParquetHttpServerLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetParquetHttpServerLocationPtrOutput)
}

type DatasetParquetHttpServerLocationOutput struct{ *pulumi.OutputState }

func (DatasetParquetHttpServerLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetParquetHttpServerLocation)(nil)).Elem()
}

func (o DatasetParquetHttpServerLocationOutput) ToDatasetParquetHttpServerLocationOutput() DatasetParquetHttpServerLocationOutput {
	return o
}

func (o DatasetParquetHttpServerLocationOutput) ToDatasetParquetHttpServerLocationOutputWithContext(ctx context.Context) DatasetParquetHttpServerLocationOutput {
	return o
}

func (o DatasetParquetHttpServerLocationOutput) ToDatasetParquetHttpServerLocationPtrOutput() DatasetParquetHttpServerLocationPtrOutput {
	return o.ToDatasetParquetHttpServerLocationPtrOutputWithContext(context.Background())
}

func (o DatasetParquetHttpServerLocationOutput) ToDatasetParquetHttpServerLocationPtrOutputWithContext(ctx context.Context) DatasetParquetHttpServerLocationPtrOutput {
	return o.ApplyT(func(v DatasetParquetHttpServerLocation) *DatasetParquetHttpServerLocation {
		return &v
	}).(DatasetParquetHttpServerLocationPtrOutput)
}

// The filename of the file on the web server.
func (o DatasetParquetHttpServerLocationOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetParquetHttpServerLocation) string { return v.Filename }).(pulumi.StringOutput)
}

// The folder path to the file on the web server.
func (o DatasetParquetHttpServerLocationOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetParquetHttpServerLocation) string { return v.Path }).(pulumi.StringOutput)
}

// The base URL to the web server hosting the file.
func (o DatasetParquetHttpServerLocationOutput) RelativeUrl() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetParquetHttpServerLocation) string { return v.RelativeUrl }).(pulumi.StringOutput)
}

type DatasetParquetHttpServerLocationPtrOutput struct{ *pulumi.OutputState }

func (DatasetParquetHttpServerLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetParquetHttpServerLocation)(nil)).Elem()
}

func (o DatasetParquetHttpServerLocationPtrOutput) ToDatasetParquetHttpServerLocationPtrOutput() DatasetParquetHttpServerLocationPtrOutput {
	return o
}

func (o DatasetParquetHttpServerLocationPtrOutput) ToDatasetParquetHttpServerLocationPtrOutputWithContext(ctx context.Context) DatasetParquetHttpServerLocationPtrOutput {
	return o
}

func (o DatasetParquetHttpServerLocationPtrOutput) Elem() DatasetParquetHttpServerLocationOutput {
	return o.ApplyT(func(v *DatasetParquetHttpServerLocation) DatasetParquetHttpServerLocation { return *v }).(DatasetParquetHttpServerLocationOutput)
}

// The filename of the file on the web server.
func (o DatasetParquetHttpServerLocationPtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetParquetHttpServerLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Filename
	}).(pulumi.StringPtrOutput)
}

// The folder path to the file on the web server.
func (o DatasetParquetHttpServerLocationPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetParquetHttpServerLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// The base URL to the web server hosting the file.
func (o DatasetParquetHttpServerLocationPtrOutput) RelativeUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetParquetHttpServerLocation) *string {
		if v == nil {
			return nil
		}
		return &v.RelativeUrl
	}).(pulumi.StringPtrOutput)
}

type DatasetParquetSchemaColumn struct {
	// The description of the column.
	Description *string `pulumi:"description"`
	// The name of the column.
	Name string `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type *string `pulumi:"type"`
}

// DatasetParquetSchemaColumnInput is an input type that accepts DatasetParquetSchemaColumnArgs and DatasetParquetSchemaColumnOutput values.
// You can construct a concrete instance of `DatasetParquetSchemaColumnInput` via:
//
//          DatasetParquetSchemaColumnArgs{...}
type DatasetParquetSchemaColumnInput interface {
	pulumi.Input

	ToDatasetParquetSchemaColumnOutput() DatasetParquetSchemaColumnOutput
	ToDatasetParquetSchemaColumnOutputWithContext(context.Context) DatasetParquetSchemaColumnOutput
}

type DatasetParquetSchemaColumnArgs struct {
	// The description of the column.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the column.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatasetParquetSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetParquetSchemaColumn)(nil)).Elem()
}

func (i DatasetParquetSchemaColumnArgs) ToDatasetParquetSchemaColumnOutput() DatasetParquetSchemaColumnOutput {
	return i.ToDatasetParquetSchemaColumnOutputWithContext(context.Background())
}

func (i DatasetParquetSchemaColumnArgs) ToDatasetParquetSchemaColumnOutputWithContext(ctx context.Context) DatasetParquetSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetParquetSchemaColumnOutput)
}

// DatasetParquetSchemaColumnArrayInput is an input type that accepts DatasetParquetSchemaColumnArray and DatasetParquetSchemaColumnArrayOutput values.
// You can construct a concrete instance of `DatasetParquetSchemaColumnArrayInput` via:
//
//          DatasetParquetSchemaColumnArray{ DatasetParquetSchemaColumnArgs{...} }
type DatasetParquetSchemaColumnArrayInput interface {
	pulumi.Input

	ToDatasetParquetSchemaColumnArrayOutput() DatasetParquetSchemaColumnArrayOutput
	ToDatasetParquetSchemaColumnArrayOutputWithContext(context.Context) DatasetParquetSchemaColumnArrayOutput
}

type DatasetParquetSchemaColumnArray []DatasetParquetSchemaColumnInput

func (DatasetParquetSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetParquetSchemaColumn)(nil)).Elem()
}

func (i DatasetParquetSchemaColumnArray) ToDatasetParquetSchemaColumnArrayOutput() DatasetParquetSchemaColumnArrayOutput {
	return i.ToDatasetParquetSchemaColumnArrayOutputWithContext(context.Background())
}

func (i DatasetParquetSchemaColumnArray) ToDatasetParquetSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetParquetSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetParquetSchemaColumnArrayOutput)
}

type DatasetParquetSchemaColumnOutput struct{ *pulumi.OutputState }

func (DatasetParquetSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetParquetSchemaColumn)(nil)).Elem()
}

func (o DatasetParquetSchemaColumnOutput) ToDatasetParquetSchemaColumnOutput() DatasetParquetSchemaColumnOutput {
	return o
}

func (o DatasetParquetSchemaColumnOutput) ToDatasetParquetSchemaColumnOutputWithContext(ctx context.Context) DatasetParquetSchemaColumnOutput {
	return o
}

// The description of the column.
func (o DatasetParquetSchemaColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetParquetSchemaColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the column.
func (o DatasetParquetSchemaColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetParquetSchemaColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
func (o DatasetParquetSchemaColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetParquetSchemaColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatasetParquetSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (DatasetParquetSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetParquetSchemaColumn)(nil)).Elem()
}

func (o DatasetParquetSchemaColumnArrayOutput) ToDatasetParquetSchemaColumnArrayOutput() DatasetParquetSchemaColumnArrayOutput {
	return o
}

func (o DatasetParquetSchemaColumnArrayOutput) ToDatasetParquetSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetParquetSchemaColumnArrayOutput {
	return o
}

func (o DatasetParquetSchemaColumnArrayOutput) Index(i pulumi.IntInput) DatasetParquetSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetParquetSchemaColumn {
		return vs[0].([]DatasetParquetSchemaColumn)[vs[1].(int)]
	}).(DatasetParquetSchemaColumnOutput)
}

type DatasetPostgresqlSchemaColumn struct {
	// The description of the column.
	Description *string `pulumi:"description"`
	// The name of the column.
	Name string `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type *string `pulumi:"type"`
}

// DatasetPostgresqlSchemaColumnInput is an input type that accepts DatasetPostgresqlSchemaColumnArgs and DatasetPostgresqlSchemaColumnOutput values.
// You can construct a concrete instance of `DatasetPostgresqlSchemaColumnInput` via:
//
//          DatasetPostgresqlSchemaColumnArgs{...}
type DatasetPostgresqlSchemaColumnInput interface {
	pulumi.Input

	ToDatasetPostgresqlSchemaColumnOutput() DatasetPostgresqlSchemaColumnOutput
	ToDatasetPostgresqlSchemaColumnOutputWithContext(context.Context) DatasetPostgresqlSchemaColumnOutput
}

type DatasetPostgresqlSchemaColumnArgs struct {
	// The description of the column.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the column.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatasetPostgresqlSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetPostgresqlSchemaColumn)(nil)).Elem()
}

func (i DatasetPostgresqlSchemaColumnArgs) ToDatasetPostgresqlSchemaColumnOutput() DatasetPostgresqlSchemaColumnOutput {
	return i.ToDatasetPostgresqlSchemaColumnOutputWithContext(context.Background())
}

func (i DatasetPostgresqlSchemaColumnArgs) ToDatasetPostgresqlSchemaColumnOutputWithContext(ctx context.Context) DatasetPostgresqlSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPostgresqlSchemaColumnOutput)
}

// DatasetPostgresqlSchemaColumnArrayInput is an input type that accepts DatasetPostgresqlSchemaColumnArray and DatasetPostgresqlSchemaColumnArrayOutput values.
// You can construct a concrete instance of `DatasetPostgresqlSchemaColumnArrayInput` via:
//
//          DatasetPostgresqlSchemaColumnArray{ DatasetPostgresqlSchemaColumnArgs{...} }
type DatasetPostgresqlSchemaColumnArrayInput interface {
	pulumi.Input

	ToDatasetPostgresqlSchemaColumnArrayOutput() DatasetPostgresqlSchemaColumnArrayOutput
	ToDatasetPostgresqlSchemaColumnArrayOutputWithContext(context.Context) DatasetPostgresqlSchemaColumnArrayOutput
}

type DatasetPostgresqlSchemaColumnArray []DatasetPostgresqlSchemaColumnInput

func (DatasetPostgresqlSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetPostgresqlSchemaColumn)(nil)).Elem()
}

func (i DatasetPostgresqlSchemaColumnArray) ToDatasetPostgresqlSchemaColumnArrayOutput() DatasetPostgresqlSchemaColumnArrayOutput {
	return i.ToDatasetPostgresqlSchemaColumnArrayOutputWithContext(context.Background())
}

func (i DatasetPostgresqlSchemaColumnArray) ToDatasetPostgresqlSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetPostgresqlSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPostgresqlSchemaColumnArrayOutput)
}

type DatasetPostgresqlSchemaColumnOutput struct{ *pulumi.OutputState }

func (DatasetPostgresqlSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetPostgresqlSchemaColumn)(nil)).Elem()
}

func (o DatasetPostgresqlSchemaColumnOutput) ToDatasetPostgresqlSchemaColumnOutput() DatasetPostgresqlSchemaColumnOutput {
	return o
}

func (o DatasetPostgresqlSchemaColumnOutput) ToDatasetPostgresqlSchemaColumnOutputWithContext(ctx context.Context) DatasetPostgresqlSchemaColumnOutput {
	return o
}

// The description of the column.
func (o DatasetPostgresqlSchemaColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetPostgresqlSchemaColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the column.
func (o DatasetPostgresqlSchemaColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetPostgresqlSchemaColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
func (o DatasetPostgresqlSchemaColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetPostgresqlSchemaColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatasetPostgresqlSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (DatasetPostgresqlSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetPostgresqlSchemaColumn)(nil)).Elem()
}

func (o DatasetPostgresqlSchemaColumnArrayOutput) ToDatasetPostgresqlSchemaColumnArrayOutput() DatasetPostgresqlSchemaColumnArrayOutput {
	return o
}

func (o DatasetPostgresqlSchemaColumnArrayOutput) ToDatasetPostgresqlSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetPostgresqlSchemaColumnArrayOutput {
	return o
}

func (o DatasetPostgresqlSchemaColumnArrayOutput) Index(i pulumi.IntInput) DatasetPostgresqlSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetPostgresqlSchemaColumn {
		return vs[0].([]DatasetPostgresqlSchemaColumn)[vs[1].(int)]
	}).(DatasetPostgresqlSchemaColumnOutput)
}

type DatasetSqlServerTableSchemaColumn struct {
	// The description of the column.
	Description *string `pulumi:"description"`
	// The name of the column.
	Name string `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type *string `pulumi:"type"`
}

// DatasetSqlServerTableSchemaColumnInput is an input type that accepts DatasetSqlServerTableSchemaColumnArgs and DatasetSqlServerTableSchemaColumnOutput values.
// You can construct a concrete instance of `DatasetSqlServerTableSchemaColumnInput` via:
//
//          DatasetSqlServerTableSchemaColumnArgs{...}
type DatasetSqlServerTableSchemaColumnInput interface {
	pulumi.Input

	ToDatasetSqlServerTableSchemaColumnOutput() DatasetSqlServerTableSchemaColumnOutput
	ToDatasetSqlServerTableSchemaColumnOutputWithContext(context.Context) DatasetSqlServerTableSchemaColumnOutput
}

type DatasetSqlServerTableSchemaColumnArgs struct {
	// The description of the column.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the column.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatasetSqlServerTableSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetSqlServerTableSchemaColumn)(nil)).Elem()
}

func (i DatasetSqlServerTableSchemaColumnArgs) ToDatasetSqlServerTableSchemaColumnOutput() DatasetSqlServerTableSchemaColumnOutput {
	return i.ToDatasetSqlServerTableSchemaColumnOutputWithContext(context.Background())
}

func (i DatasetSqlServerTableSchemaColumnArgs) ToDatasetSqlServerTableSchemaColumnOutputWithContext(ctx context.Context) DatasetSqlServerTableSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetSqlServerTableSchemaColumnOutput)
}

// DatasetSqlServerTableSchemaColumnArrayInput is an input type that accepts DatasetSqlServerTableSchemaColumnArray and DatasetSqlServerTableSchemaColumnArrayOutput values.
// You can construct a concrete instance of `DatasetSqlServerTableSchemaColumnArrayInput` via:
//
//          DatasetSqlServerTableSchemaColumnArray{ DatasetSqlServerTableSchemaColumnArgs{...} }
type DatasetSqlServerTableSchemaColumnArrayInput interface {
	pulumi.Input

	ToDatasetSqlServerTableSchemaColumnArrayOutput() DatasetSqlServerTableSchemaColumnArrayOutput
	ToDatasetSqlServerTableSchemaColumnArrayOutputWithContext(context.Context) DatasetSqlServerTableSchemaColumnArrayOutput
}

type DatasetSqlServerTableSchemaColumnArray []DatasetSqlServerTableSchemaColumnInput

func (DatasetSqlServerTableSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetSqlServerTableSchemaColumn)(nil)).Elem()
}

func (i DatasetSqlServerTableSchemaColumnArray) ToDatasetSqlServerTableSchemaColumnArrayOutput() DatasetSqlServerTableSchemaColumnArrayOutput {
	return i.ToDatasetSqlServerTableSchemaColumnArrayOutputWithContext(context.Background())
}

func (i DatasetSqlServerTableSchemaColumnArray) ToDatasetSqlServerTableSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetSqlServerTableSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetSqlServerTableSchemaColumnArrayOutput)
}

type DatasetSqlServerTableSchemaColumnOutput struct{ *pulumi.OutputState }

func (DatasetSqlServerTableSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetSqlServerTableSchemaColumn)(nil)).Elem()
}

func (o DatasetSqlServerTableSchemaColumnOutput) ToDatasetSqlServerTableSchemaColumnOutput() DatasetSqlServerTableSchemaColumnOutput {
	return o
}

func (o DatasetSqlServerTableSchemaColumnOutput) ToDatasetSqlServerTableSchemaColumnOutputWithContext(ctx context.Context) DatasetSqlServerTableSchemaColumnOutput {
	return o
}

// The description of the column.
func (o DatasetSqlServerTableSchemaColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetSqlServerTableSchemaColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the column.
func (o DatasetSqlServerTableSchemaColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetSqlServerTableSchemaColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
func (o DatasetSqlServerTableSchemaColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetSqlServerTableSchemaColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatasetSqlServerTableSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (DatasetSqlServerTableSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetSqlServerTableSchemaColumn)(nil)).Elem()
}

func (o DatasetSqlServerTableSchemaColumnArrayOutput) ToDatasetSqlServerTableSchemaColumnArrayOutput() DatasetSqlServerTableSchemaColumnArrayOutput {
	return o
}

func (o DatasetSqlServerTableSchemaColumnArrayOutput) ToDatasetSqlServerTableSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetSqlServerTableSchemaColumnArrayOutput {
	return o
}

func (o DatasetSqlServerTableSchemaColumnArrayOutput) Index(i pulumi.IntInput) DatasetSqlServerTableSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetSqlServerTableSchemaColumn {
		return vs[0].([]DatasetSqlServerTableSchemaColumn)[vs[1].(int)]
	}).(DatasetSqlServerTableSchemaColumnOutput)
}

type FactoryGithubConfiguration struct {
	// Specifies the GitHub account name.
	AccountName string `pulumi:"accountName"`
	// Specifies the branch of the repository to get code from.
	BranchName string `pulumi:"branchName"`
	// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com. Use https://github.com for open source repositories.
	GitUrl string `pulumi:"gitUrl"`
	// Specifies the name of the git repository.
	RepositoryName string `pulumi:"repositoryName"`
	// Specifies the root folder within the repository. Set to `/` for the top level.
	RootFolder string `pulumi:"rootFolder"`
}

// FactoryGithubConfigurationInput is an input type that accepts FactoryGithubConfigurationArgs and FactoryGithubConfigurationOutput values.
// You can construct a concrete instance of `FactoryGithubConfigurationInput` via:
//
//          FactoryGithubConfigurationArgs{...}
type FactoryGithubConfigurationInput interface {
	pulumi.Input

	ToFactoryGithubConfigurationOutput() FactoryGithubConfigurationOutput
	ToFactoryGithubConfigurationOutputWithContext(context.Context) FactoryGithubConfigurationOutput
}

type FactoryGithubConfigurationArgs struct {
	// Specifies the GitHub account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Specifies the branch of the repository to get code from.
	BranchName pulumi.StringInput `pulumi:"branchName"`
	// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com. Use https://github.com for open source repositories.
	GitUrl pulumi.StringInput `pulumi:"gitUrl"`
	// Specifies the name of the git repository.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Specifies the root folder within the repository. Set to `/` for the top level.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
}

func (FactoryGithubConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryGithubConfiguration)(nil)).Elem()
}

func (i FactoryGithubConfigurationArgs) ToFactoryGithubConfigurationOutput() FactoryGithubConfigurationOutput {
	return i.ToFactoryGithubConfigurationOutputWithContext(context.Background())
}

func (i FactoryGithubConfigurationArgs) ToFactoryGithubConfigurationOutputWithContext(ctx context.Context) FactoryGithubConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryGithubConfigurationOutput)
}

func (i FactoryGithubConfigurationArgs) ToFactoryGithubConfigurationPtrOutput() FactoryGithubConfigurationPtrOutput {
	return i.ToFactoryGithubConfigurationPtrOutputWithContext(context.Background())
}

func (i FactoryGithubConfigurationArgs) ToFactoryGithubConfigurationPtrOutputWithContext(ctx context.Context) FactoryGithubConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryGithubConfigurationOutput).ToFactoryGithubConfigurationPtrOutputWithContext(ctx)
}

// FactoryGithubConfigurationPtrInput is an input type that accepts FactoryGithubConfigurationArgs, FactoryGithubConfigurationPtr and FactoryGithubConfigurationPtrOutput values.
// You can construct a concrete instance of `FactoryGithubConfigurationPtrInput` via:
//
//          FactoryGithubConfigurationArgs{...}
//
//  or:
//
//          nil
type FactoryGithubConfigurationPtrInput interface {
	pulumi.Input

	ToFactoryGithubConfigurationPtrOutput() FactoryGithubConfigurationPtrOutput
	ToFactoryGithubConfigurationPtrOutputWithContext(context.Context) FactoryGithubConfigurationPtrOutput
}

type factoryGithubConfigurationPtrType FactoryGithubConfigurationArgs

func FactoryGithubConfigurationPtr(v *FactoryGithubConfigurationArgs) FactoryGithubConfigurationPtrInput {
	return (*factoryGithubConfigurationPtrType)(v)
}

func (*factoryGithubConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryGithubConfiguration)(nil)).Elem()
}

func (i *factoryGithubConfigurationPtrType) ToFactoryGithubConfigurationPtrOutput() FactoryGithubConfigurationPtrOutput {
	return i.ToFactoryGithubConfigurationPtrOutputWithContext(context.Background())
}

func (i *factoryGithubConfigurationPtrType) ToFactoryGithubConfigurationPtrOutputWithContext(ctx context.Context) FactoryGithubConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryGithubConfigurationPtrOutput)
}

type FactoryGithubConfigurationOutput struct{ *pulumi.OutputState }

func (FactoryGithubConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryGithubConfiguration)(nil)).Elem()
}

func (o FactoryGithubConfigurationOutput) ToFactoryGithubConfigurationOutput() FactoryGithubConfigurationOutput {
	return o
}

func (o FactoryGithubConfigurationOutput) ToFactoryGithubConfigurationOutputWithContext(ctx context.Context) FactoryGithubConfigurationOutput {
	return o
}

func (o FactoryGithubConfigurationOutput) ToFactoryGithubConfigurationPtrOutput() FactoryGithubConfigurationPtrOutput {
	return o.ToFactoryGithubConfigurationPtrOutputWithContext(context.Background())
}

func (o FactoryGithubConfigurationOutput) ToFactoryGithubConfigurationPtrOutputWithContext(ctx context.Context) FactoryGithubConfigurationPtrOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) *FactoryGithubConfiguration {
		return &v
	}).(FactoryGithubConfigurationPtrOutput)
}

// Specifies the GitHub account name.
func (o FactoryGithubConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// Specifies the branch of the repository to get code from.
func (o FactoryGithubConfigurationOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.BranchName }).(pulumi.StringOutput)
}

// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com. Use https://github.com for open source repositories.
func (o FactoryGithubConfigurationOutput) GitUrl() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.GitUrl }).(pulumi.StringOutput)
}

// Specifies the name of the git repository.
func (o FactoryGithubConfigurationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Specifies the root folder within the repository. Set to `/` for the top level.
func (o FactoryGithubConfigurationOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

type FactoryGithubConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FactoryGithubConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryGithubConfiguration)(nil)).Elem()
}

func (o FactoryGithubConfigurationPtrOutput) ToFactoryGithubConfigurationPtrOutput() FactoryGithubConfigurationPtrOutput {
	return o
}

func (o FactoryGithubConfigurationPtrOutput) ToFactoryGithubConfigurationPtrOutputWithContext(ctx context.Context) FactoryGithubConfigurationPtrOutput {
	return o
}

func (o FactoryGithubConfigurationPtrOutput) Elem() FactoryGithubConfigurationOutput {
	return o.ApplyT(func(v *FactoryGithubConfiguration) FactoryGithubConfiguration { return *v }).(FactoryGithubConfigurationOutput)
}

// Specifies the GitHub account name.
func (o FactoryGithubConfigurationPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGithubConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Specifies the branch of the repository to get code from.
func (o FactoryGithubConfigurationPtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGithubConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.BranchName
	}).(pulumi.StringPtrOutput)
}

// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com. Use https://github.com for open source repositories.
func (o FactoryGithubConfigurationPtrOutput) GitUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGithubConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.GitUrl
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the git repository.
func (o FactoryGithubConfigurationPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGithubConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Specifies the root folder within the repository. Set to `/` for the top level.
func (o FactoryGithubConfigurationPtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryGithubConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RootFolder
	}).(pulumi.StringPtrOutput)
}

type FactoryIdentity struct {
	// The ID of the Principal (Client) in Azure Active Directory
	PrincipalId *string `pulumi:"principalId"`
	// Specifies the Tenant ID associated with the VSTS account.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the identity type of the Data Factory. At this time the only allowed value is `SystemAssigned`.
	Type string `pulumi:"type"`
}

// FactoryIdentityInput is an input type that accepts FactoryIdentityArgs and FactoryIdentityOutput values.
// You can construct a concrete instance of `FactoryIdentityInput` via:
//
//          FactoryIdentityArgs{...}
type FactoryIdentityInput interface {
	pulumi.Input

	ToFactoryIdentityOutput() FactoryIdentityOutput
	ToFactoryIdentityOutputWithContext(context.Context) FactoryIdentityOutput
}

type FactoryIdentityArgs struct {
	// The ID of the Principal (Client) in Azure Active Directory
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// Specifies the Tenant ID associated with the VSTS account.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the identity type of the Data Factory. At this time the only allowed value is `SystemAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return i.ToFactoryIdentityOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput)
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput).ToFactoryIdentityPtrOutputWithContext(ctx)
}

// FactoryIdentityPtrInput is an input type that accepts FactoryIdentityArgs, FactoryIdentityPtr and FactoryIdentityPtrOutput values.
// You can construct a concrete instance of `FactoryIdentityPtrInput` via:
//
//          FactoryIdentityArgs{...}
//
//  or:
//
//          nil
type FactoryIdentityPtrInput interface {
	pulumi.Input

	ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput
	ToFactoryIdentityPtrOutputWithContext(context.Context) FactoryIdentityPtrOutput
}

type factoryIdentityPtrType FactoryIdentityArgs

func FactoryIdentityPtr(v *FactoryIdentityArgs) FactoryIdentityPtrInput {
	return (*factoryIdentityPtrType)(v)
}

func (*factoryIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityPtrOutput)
}

type FactoryIdentityOutput struct{ *pulumi.OutputState }

func (FactoryIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o.ApplyT(func(v FactoryIdentity) *FactoryIdentity {
		return &v
	}).(FactoryIdentityPtrOutput)
}

// The ID of the Principal (Client) in Azure Active Directory
func (o FactoryIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// Specifies the Tenant ID associated with the VSTS account.
func (o FactoryIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the identity type of the Data Factory. At this time the only allowed value is `SystemAssigned`.
func (o FactoryIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryIdentityPtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) Elem() FactoryIdentityOutput {
	return o.ApplyT(func(v *FactoryIdentity) FactoryIdentity { return *v }).(FactoryIdentityOutput)
}

// The ID of the Principal (Client) in Azure Active Directory
func (o FactoryIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// Specifies the Tenant ID associated with the VSTS account.
func (o FactoryIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the identity type of the Data Factory. At this time the only allowed value is `SystemAssigned`.
func (o FactoryIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type FactoryVstsConfiguration struct {
	// Specifies the VSTS account name.
	AccountName string `pulumi:"accountName"`
	// Specifies the branch of the repository to get code from.
	BranchName string `pulumi:"branchName"`
	// Specifies the name of the VSTS project.
	ProjectName string `pulumi:"projectName"`
	// Specifies the name of the git repository.
	RepositoryName string `pulumi:"repositoryName"`
	// Specifies the root folder within the repository. Set to `/` for the top level.
	RootFolder string `pulumi:"rootFolder"`
	// Specifies the Tenant ID associated with the VSTS account.
	TenantId string `pulumi:"tenantId"`
}

// FactoryVstsConfigurationInput is an input type that accepts FactoryVstsConfigurationArgs and FactoryVstsConfigurationOutput values.
// You can construct a concrete instance of `FactoryVstsConfigurationInput` via:
//
//          FactoryVstsConfigurationArgs{...}
type FactoryVstsConfigurationInput interface {
	pulumi.Input

	ToFactoryVstsConfigurationOutput() FactoryVstsConfigurationOutput
	ToFactoryVstsConfigurationOutputWithContext(context.Context) FactoryVstsConfigurationOutput
}

type FactoryVstsConfigurationArgs struct {
	// Specifies the VSTS account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Specifies the branch of the repository to get code from.
	BranchName pulumi.StringInput `pulumi:"branchName"`
	// Specifies the name of the VSTS project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Specifies the name of the git repository.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Specifies the root folder within the repository. Set to `/` for the top level.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
	// Specifies the Tenant ID associated with the VSTS account.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (FactoryVstsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVstsConfiguration)(nil)).Elem()
}

func (i FactoryVstsConfigurationArgs) ToFactoryVstsConfigurationOutput() FactoryVstsConfigurationOutput {
	return i.ToFactoryVstsConfigurationOutputWithContext(context.Background())
}

func (i FactoryVstsConfigurationArgs) ToFactoryVstsConfigurationOutputWithContext(ctx context.Context) FactoryVstsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVstsConfigurationOutput)
}

func (i FactoryVstsConfigurationArgs) ToFactoryVstsConfigurationPtrOutput() FactoryVstsConfigurationPtrOutput {
	return i.ToFactoryVstsConfigurationPtrOutputWithContext(context.Background())
}

func (i FactoryVstsConfigurationArgs) ToFactoryVstsConfigurationPtrOutputWithContext(ctx context.Context) FactoryVstsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVstsConfigurationOutput).ToFactoryVstsConfigurationPtrOutputWithContext(ctx)
}

// FactoryVstsConfigurationPtrInput is an input type that accepts FactoryVstsConfigurationArgs, FactoryVstsConfigurationPtr and FactoryVstsConfigurationPtrOutput values.
// You can construct a concrete instance of `FactoryVstsConfigurationPtrInput` via:
//
//          FactoryVstsConfigurationArgs{...}
//
//  or:
//
//          nil
type FactoryVstsConfigurationPtrInput interface {
	pulumi.Input

	ToFactoryVstsConfigurationPtrOutput() FactoryVstsConfigurationPtrOutput
	ToFactoryVstsConfigurationPtrOutputWithContext(context.Context) FactoryVstsConfigurationPtrOutput
}

type factoryVstsConfigurationPtrType FactoryVstsConfigurationArgs

func FactoryVstsConfigurationPtr(v *FactoryVstsConfigurationArgs) FactoryVstsConfigurationPtrInput {
	return (*factoryVstsConfigurationPtrType)(v)
}

func (*factoryVstsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVstsConfiguration)(nil)).Elem()
}

func (i *factoryVstsConfigurationPtrType) ToFactoryVstsConfigurationPtrOutput() FactoryVstsConfigurationPtrOutput {
	return i.ToFactoryVstsConfigurationPtrOutputWithContext(context.Background())
}

func (i *factoryVstsConfigurationPtrType) ToFactoryVstsConfigurationPtrOutputWithContext(ctx context.Context) FactoryVstsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVstsConfigurationPtrOutput)
}

type FactoryVstsConfigurationOutput struct{ *pulumi.OutputState }

func (FactoryVstsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVstsConfiguration)(nil)).Elem()
}

func (o FactoryVstsConfigurationOutput) ToFactoryVstsConfigurationOutput() FactoryVstsConfigurationOutput {
	return o
}

func (o FactoryVstsConfigurationOutput) ToFactoryVstsConfigurationOutputWithContext(ctx context.Context) FactoryVstsConfigurationOutput {
	return o
}

func (o FactoryVstsConfigurationOutput) ToFactoryVstsConfigurationPtrOutput() FactoryVstsConfigurationPtrOutput {
	return o.ToFactoryVstsConfigurationPtrOutputWithContext(context.Background())
}

func (o FactoryVstsConfigurationOutput) ToFactoryVstsConfigurationPtrOutputWithContext(ctx context.Context) FactoryVstsConfigurationPtrOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) *FactoryVstsConfiguration {
		return &v
	}).(FactoryVstsConfigurationPtrOutput)
}

// Specifies the VSTS account name.
func (o FactoryVstsConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// Specifies the branch of the repository to get code from.
func (o FactoryVstsConfigurationOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.BranchName }).(pulumi.StringOutput)
}

// Specifies the name of the VSTS project.
func (o FactoryVstsConfigurationOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Specifies the name of the git repository.
func (o FactoryVstsConfigurationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Specifies the root folder within the repository. Set to `/` for the top level.
func (o FactoryVstsConfigurationOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

// Specifies the Tenant ID associated with the VSTS account.
func (o FactoryVstsConfigurationOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.TenantId }).(pulumi.StringOutput)
}

type FactoryVstsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FactoryVstsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVstsConfiguration)(nil)).Elem()
}

func (o FactoryVstsConfigurationPtrOutput) ToFactoryVstsConfigurationPtrOutput() FactoryVstsConfigurationPtrOutput {
	return o
}

func (o FactoryVstsConfigurationPtrOutput) ToFactoryVstsConfigurationPtrOutputWithContext(ctx context.Context) FactoryVstsConfigurationPtrOutput {
	return o
}

func (o FactoryVstsConfigurationPtrOutput) Elem() FactoryVstsConfigurationOutput {
	return o.ApplyT(func(v *FactoryVstsConfiguration) FactoryVstsConfiguration { return *v }).(FactoryVstsConfigurationOutput)
}

// Specifies the VSTS account name.
func (o FactoryVstsConfigurationPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVstsConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Specifies the branch of the repository to get code from.
func (o FactoryVstsConfigurationPtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVstsConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.BranchName
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the VSTS project.
func (o FactoryVstsConfigurationPtrOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVstsConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectName
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the git repository.
func (o FactoryVstsConfigurationPtrOutput) RepositoryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVstsConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RepositoryName
	}).(pulumi.StringPtrOutput)
}

// Specifies the root folder within the repository. Set to `/` for the top level.
func (o FactoryVstsConfigurationPtrOutput) RootFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVstsConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.RootFolder
	}).(pulumi.StringPtrOutput)
}

// Specifies the Tenant ID associated with the VSTS account.
func (o FactoryVstsConfigurationPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FactoryVstsConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeManagedCatalogInfo struct {
	// Administrator login name for the SQL Server.
	AdministratorLogin *string `pulumi:"administratorLogin"`
	// Administrator login password for the SQL Server.
	AdministratorPassword *string `pulumi:"administratorPassword"`
	// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
	PricingTier *string `pulumi:"pricingTier"`
	// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
	ServerEndpoint string `pulumi:"serverEndpoint"`
}

// IntegrationRuntimeManagedCatalogInfoInput is an input type that accepts IntegrationRuntimeManagedCatalogInfoArgs and IntegrationRuntimeManagedCatalogInfoOutput values.
// You can construct a concrete instance of `IntegrationRuntimeManagedCatalogInfoInput` via:
//
//          IntegrationRuntimeManagedCatalogInfoArgs{...}
type IntegrationRuntimeManagedCatalogInfoInput interface {
	pulumi.Input

	ToIntegrationRuntimeManagedCatalogInfoOutput() IntegrationRuntimeManagedCatalogInfoOutput
	ToIntegrationRuntimeManagedCatalogInfoOutputWithContext(context.Context) IntegrationRuntimeManagedCatalogInfoOutput
}

type IntegrationRuntimeManagedCatalogInfoArgs struct {
	// Administrator login name for the SQL Server.
	AdministratorLogin pulumi.StringPtrInput `pulumi:"administratorLogin"`
	// Administrator login password for the SQL Server.
	AdministratorPassword pulumi.StringPtrInput `pulumi:"administratorPassword"`
	// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
	PricingTier pulumi.StringPtrInput `pulumi:"pricingTier"`
	// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
	ServerEndpoint pulumi.StringInput `pulumi:"serverEndpoint"`
}

func (IntegrationRuntimeManagedCatalogInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeManagedCatalogInfo)(nil)).Elem()
}

func (i IntegrationRuntimeManagedCatalogInfoArgs) ToIntegrationRuntimeManagedCatalogInfoOutput() IntegrationRuntimeManagedCatalogInfoOutput {
	return i.ToIntegrationRuntimeManagedCatalogInfoOutputWithContext(context.Background())
}

func (i IntegrationRuntimeManagedCatalogInfoArgs) ToIntegrationRuntimeManagedCatalogInfoOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCatalogInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedCatalogInfoOutput)
}

func (i IntegrationRuntimeManagedCatalogInfoArgs) ToIntegrationRuntimeManagedCatalogInfoPtrOutput() IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return i.ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeManagedCatalogInfoArgs) ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedCatalogInfoOutput).ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(ctx)
}

// IntegrationRuntimeManagedCatalogInfoPtrInput is an input type that accepts IntegrationRuntimeManagedCatalogInfoArgs, IntegrationRuntimeManagedCatalogInfoPtr and IntegrationRuntimeManagedCatalogInfoPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeManagedCatalogInfoPtrInput` via:
//
//          IntegrationRuntimeManagedCatalogInfoArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeManagedCatalogInfoPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeManagedCatalogInfoPtrOutput() IntegrationRuntimeManagedCatalogInfoPtrOutput
	ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(context.Context) IntegrationRuntimeManagedCatalogInfoPtrOutput
}

type integrationRuntimeManagedCatalogInfoPtrType IntegrationRuntimeManagedCatalogInfoArgs

func IntegrationRuntimeManagedCatalogInfoPtr(v *IntegrationRuntimeManagedCatalogInfoArgs) IntegrationRuntimeManagedCatalogInfoPtrInput {
	return (*integrationRuntimeManagedCatalogInfoPtrType)(v)
}

func (*integrationRuntimeManagedCatalogInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeManagedCatalogInfo)(nil)).Elem()
}

func (i *integrationRuntimeManagedCatalogInfoPtrType) ToIntegrationRuntimeManagedCatalogInfoPtrOutput() IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return i.ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeManagedCatalogInfoPtrType) ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedCatalogInfoPtrOutput)
}

type IntegrationRuntimeManagedCatalogInfoOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeManagedCatalogInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeManagedCatalogInfo)(nil)).Elem()
}

func (o IntegrationRuntimeManagedCatalogInfoOutput) ToIntegrationRuntimeManagedCatalogInfoOutput() IntegrationRuntimeManagedCatalogInfoOutput {
	return o
}

func (o IntegrationRuntimeManagedCatalogInfoOutput) ToIntegrationRuntimeManagedCatalogInfoOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCatalogInfoOutput {
	return o
}

func (o IntegrationRuntimeManagedCatalogInfoOutput) ToIntegrationRuntimeManagedCatalogInfoPtrOutput() IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return o.ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeManagedCatalogInfoOutput) ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCatalogInfo) *IntegrationRuntimeManagedCatalogInfo {
		return &v
	}).(IntegrationRuntimeManagedCatalogInfoPtrOutput)
}

// Administrator login name for the SQL Server.
func (o IntegrationRuntimeManagedCatalogInfoOutput) AdministratorLogin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCatalogInfo) *string { return v.AdministratorLogin }).(pulumi.StringPtrOutput)
}

// Administrator login password for the SQL Server.
func (o IntegrationRuntimeManagedCatalogInfoOutput) AdministratorPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCatalogInfo) *string { return v.AdministratorPassword }).(pulumi.StringPtrOutput)
}

// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
func (o IntegrationRuntimeManagedCatalogInfoOutput) PricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCatalogInfo) *string { return v.PricingTier }).(pulumi.StringPtrOutput)
}

// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
func (o IntegrationRuntimeManagedCatalogInfoOutput) ServerEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCatalogInfo) string { return v.ServerEndpoint }).(pulumi.StringOutput)
}

type IntegrationRuntimeManagedCatalogInfoPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeManagedCatalogInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeManagedCatalogInfo)(nil)).Elem()
}

func (o IntegrationRuntimeManagedCatalogInfoPtrOutput) ToIntegrationRuntimeManagedCatalogInfoPtrOutput() IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return o
}

func (o IntegrationRuntimeManagedCatalogInfoPtrOutput) ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return o
}

func (o IntegrationRuntimeManagedCatalogInfoPtrOutput) Elem() IntegrationRuntimeManagedCatalogInfoOutput {
	return o.ApplyT(func(v *IntegrationRuntimeManagedCatalogInfo) IntegrationRuntimeManagedCatalogInfo { return *v }).(IntegrationRuntimeManagedCatalogInfoOutput)
}

// Administrator login name for the SQL Server.
func (o IntegrationRuntimeManagedCatalogInfoPtrOutput) AdministratorLogin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeManagedCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return v.AdministratorLogin
	}).(pulumi.StringPtrOutput)
}

// Administrator login password for the SQL Server.
func (o IntegrationRuntimeManagedCatalogInfoPtrOutput) AdministratorPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeManagedCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return v.AdministratorPassword
	}).(pulumi.StringPtrOutput)
}

// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
func (o IntegrationRuntimeManagedCatalogInfoPtrOutput) PricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeManagedCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return v.PricingTier
	}).(pulumi.StringPtrOutput)
}

// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
func (o IntegrationRuntimeManagedCatalogInfoPtrOutput) ServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeManagedCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ServerEndpoint
	}).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeManagedCustomSetupScript struct {
	// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
	BlobContainerUri string `pulumi:"blobContainerUri"`
	// A container SAS token that gives access to the files. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
	SasToken string `pulumi:"sasToken"`
}

// IntegrationRuntimeManagedCustomSetupScriptInput is an input type that accepts IntegrationRuntimeManagedCustomSetupScriptArgs and IntegrationRuntimeManagedCustomSetupScriptOutput values.
// You can construct a concrete instance of `IntegrationRuntimeManagedCustomSetupScriptInput` via:
//
//          IntegrationRuntimeManagedCustomSetupScriptArgs{...}
type IntegrationRuntimeManagedCustomSetupScriptInput interface {
	pulumi.Input

	ToIntegrationRuntimeManagedCustomSetupScriptOutput() IntegrationRuntimeManagedCustomSetupScriptOutput
	ToIntegrationRuntimeManagedCustomSetupScriptOutputWithContext(context.Context) IntegrationRuntimeManagedCustomSetupScriptOutput
}

type IntegrationRuntimeManagedCustomSetupScriptArgs struct {
	// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
	BlobContainerUri pulumi.StringInput `pulumi:"blobContainerUri"`
	// A container SAS token that gives access to the files. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
	SasToken pulumi.StringInput `pulumi:"sasToken"`
}

func (IntegrationRuntimeManagedCustomSetupScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeManagedCustomSetupScript)(nil)).Elem()
}

func (i IntegrationRuntimeManagedCustomSetupScriptArgs) ToIntegrationRuntimeManagedCustomSetupScriptOutput() IntegrationRuntimeManagedCustomSetupScriptOutput {
	return i.ToIntegrationRuntimeManagedCustomSetupScriptOutputWithContext(context.Background())
}

func (i IntegrationRuntimeManagedCustomSetupScriptArgs) ToIntegrationRuntimeManagedCustomSetupScriptOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCustomSetupScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedCustomSetupScriptOutput)
}

func (i IntegrationRuntimeManagedCustomSetupScriptArgs) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutput() IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return i.ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeManagedCustomSetupScriptArgs) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedCustomSetupScriptOutput).ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(ctx)
}

// IntegrationRuntimeManagedCustomSetupScriptPtrInput is an input type that accepts IntegrationRuntimeManagedCustomSetupScriptArgs, IntegrationRuntimeManagedCustomSetupScriptPtr and IntegrationRuntimeManagedCustomSetupScriptPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeManagedCustomSetupScriptPtrInput` via:
//
//          IntegrationRuntimeManagedCustomSetupScriptArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeManagedCustomSetupScriptPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeManagedCustomSetupScriptPtrOutput() IntegrationRuntimeManagedCustomSetupScriptPtrOutput
	ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(context.Context) IntegrationRuntimeManagedCustomSetupScriptPtrOutput
}

type integrationRuntimeManagedCustomSetupScriptPtrType IntegrationRuntimeManagedCustomSetupScriptArgs

func IntegrationRuntimeManagedCustomSetupScriptPtr(v *IntegrationRuntimeManagedCustomSetupScriptArgs) IntegrationRuntimeManagedCustomSetupScriptPtrInput {
	return (*integrationRuntimeManagedCustomSetupScriptPtrType)(v)
}

func (*integrationRuntimeManagedCustomSetupScriptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeManagedCustomSetupScript)(nil)).Elem()
}

func (i *integrationRuntimeManagedCustomSetupScriptPtrType) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutput() IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return i.ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeManagedCustomSetupScriptPtrType) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedCustomSetupScriptPtrOutput)
}

type IntegrationRuntimeManagedCustomSetupScriptOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeManagedCustomSetupScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeManagedCustomSetupScript)(nil)).Elem()
}

func (o IntegrationRuntimeManagedCustomSetupScriptOutput) ToIntegrationRuntimeManagedCustomSetupScriptOutput() IntegrationRuntimeManagedCustomSetupScriptOutput {
	return o
}

func (o IntegrationRuntimeManagedCustomSetupScriptOutput) ToIntegrationRuntimeManagedCustomSetupScriptOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCustomSetupScriptOutput {
	return o
}

func (o IntegrationRuntimeManagedCustomSetupScriptOutput) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutput() IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return o.ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeManagedCustomSetupScriptOutput) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCustomSetupScript) *IntegrationRuntimeManagedCustomSetupScript {
		return &v
	}).(IntegrationRuntimeManagedCustomSetupScriptPtrOutput)
}

// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
func (o IntegrationRuntimeManagedCustomSetupScriptOutput) BlobContainerUri() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCustomSetupScript) string { return v.BlobContainerUri }).(pulumi.StringOutput)
}

// A container SAS token that gives access to the files. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
func (o IntegrationRuntimeManagedCustomSetupScriptOutput) SasToken() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCustomSetupScript) string { return v.SasToken }).(pulumi.StringOutput)
}

type IntegrationRuntimeManagedCustomSetupScriptPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeManagedCustomSetupScriptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeManagedCustomSetupScript)(nil)).Elem()
}

func (o IntegrationRuntimeManagedCustomSetupScriptPtrOutput) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutput() IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return o
}

func (o IntegrationRuntimeManagedCustomSetupScriptPtrOutput) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return o
}

func (o IntegrationRuntimeManagedCustomSetupScriptPtrOutput) Elem() IntegrationRuntimeManagedCustomSetupScriptOutput {
	return o.ApplyT(func(v *IntegrationRuntimeManagedCustomSetupScript) IntegrationRuntimeManagedCustomSetupScript {
		return *v
	}).(IntegrationRuntimeManagedCustomSetupScriptOutput)
}

// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
func (o IntegrationRuntimeManagedCustomSetupScriptPtrOutput) BlobContainerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeManagedCustomSetupScript) *string {
		if v == nil {
			return nil
		}
		return &v.BlobContainerUri
	}).(pulumi.StringPtrOutput)
}

// A container SAS token that gives access to the files. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
func (o IntegrationRuntimeManagedCustomSetupScriptPtrOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeManagedCustomSetupScript) *string {
		if v == nil {
			return nil
		}
		return &v.SasToken
	}).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeManagedVnetIntegration struct {
	// Name of the subnet to which the nodes of the Managed Integration Runtime will be added.
	SubnetName string `pulumi:"subnetName"`
	// ID of the virtual network to which the nodes of the Managed Integration Runtime will be added.
	VnetId string `pulumi:"vnetId"`
}

// IntegrationRuntimeManagedVnetIntegrationInput is an input type that accepts IntegrationRuntimeManagedVnetIntegrationArgs and IntegrationRuntimeManagedVnetIntegrationOutput values.
// You can construct a concrete instance of `IntegrationRuntimeManagedVnetIntegrationInput` via:
//
//          IntegrationRuntimeManagedVnetIntegrationArgs{...}
type IntegrationRuntimeManagedVnetIntegrationInput interface {
	pulumi.Input

	ToIntegrationRuntimeManagedVnetIntegrationOutput() IntegrationRuntimeManagedVnetIntegrationOutput
	ToIntegrationRuntimeManagedVnetIntegrationOutputWithContext(context.Context) IntegrationRuntimeManagedVnetIntegrationOutput
}

type IntegrationRuntimeManagedVnetIntegrationArgs struct {
	// Name of the subnet to which the nodes of the Managed Integration Runtime will be added.
	SubnetName pulumi.StringInput `pulumi:"subnetName"`
	// ID of the virtual network to which the nodes of the Managed Integration Runtime will be added.
	VnetId pulumi.StringInput `pulumi:"vnetId"`
}

func (IntegrationRuntimeManagedVnetIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeManagedVnetIntegration)(nil)).Elem()
}

func (i IntegrationRuntimeManagedVnetIntegrationArgs) ToIntegrationRuntimeManagedVnetIntegrationOutput() IntegrationRuntimeManagedVnetIntegrationOutput {
	return i.ToIntegrationRuntimeManagedVnetIntegrationOutputWithContext(context.Background())
}

func (i IntegrationRuntimeManagedVnetIntegrationArgs) ToIntegrationRuntimeManagedVnetIntegrationOutputWithContext(ctx context.Context) IntegrationRuntimeManagedVnetIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedVnetIntegrationOutput)
}

func (i IntegrationRuntimeManagedVnetIntegrationArgs) ToIntegrationRuntimeManagedVnetIntegrationPtrOutput() IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return i.ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeManagedVnetIntegrationArgs) ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedVnetIntegrationOutput).ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(ctx)
}

// IntegrationRuntimeManagedVnetIntegrationPtrInput is an input type that accepts IntegrationRuntimeManagedVnetIntegrationArgs, IntegrationRuntimeManagedVnetIntegrationPtr and IntegrationRuntimeManagedVnetIntegrationPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeManagedVnetIntegrationPtrInput` via:
//
//          IntegrationRuntimeManagedVnetIntegrationArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeManagedVnetIntegrationPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeManagedVnetIntegrationPtrOutput() IntegrationRuntimeManagedVnetIntegrationPtrOutput
	ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(context.Context) IntegrationRuntimeManagedVnetIntegrationPtrOutput
}

type integrationRuntimeManagedVnetIntegrationPtrType IntegrationRuntimeManagedVnetIntegrationArgs

func IntegrationRuntimeManagedVnetIntegrationPtr(v *IntegrationRuntimeManagedVnetIntegrationArgs) IntegrationRuntimeManagedVnetIntegrationPtrInput {
	return (*integrationRuntimeManagedVnetIntegrationPtrType)(v)
}

func (*integrationRuntimeManagedVnetIntegrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeManagedVnetIntegration)(nil)).Elem()
}

func (i *integrationRuntimeManagedVnetIntegrationPtrType) ToIntegrationRuntimeManagedVnetIntegrationPtrOutput() IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return i.ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeManagedVnetIntegrationPtrType) ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedVnetIntegrationPtrOutput)
}

type IntegrationRuntimeManagedVnetIntegrationOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeManagedVnetIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeManagedVnetIntegration)(nil)).Elem()
}

func (o IntegrationRuntimeManagedVnetIntegrationOutput) ToIntegrationRuntimeManagedVnetIntegrationOutput() IntegrationRuntimeManagedVnetIntegrationOutput {
	return o
}

func (o IntegrationRuntimeManagedVnetIntegrationOutput) ToIntegrationRuntimeManagedVnetIntegrationOutputWithContext(ctx context.Context) IntegrationRuntimeManagedVnetIntegrationOutput {
	return o
}

func (o IntegrationRuntimeManagedVnetIntegrationOutput) ToIntegrationRuntimeManagedVnetIntegrationPtrOutput() IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return o.ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeManagedVnetIntegrationOutput) ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedVnetIntegration) *IntegrationRuntimeManagedVnetIntegration {
		return &v
	}).(IntegrationRuntimeManagedVnetIntegrationPtrOutput)
}

// Name of the subnet to which the nodes of the Managed Integration Runtime will be added.
func (o IntegrationRuntimeManagedVnetIntegrationOutput) SubnetName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedVnetIntegration) string { return v.SubnetName }).(pulumi.StringOutput)
}

// ID of the virtual network to which the nodes of the Managed Integration Runtime will be added.
func (o IntegrationRuntimeManagedVnetIntegrationOutput) VnetId() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedVnetIntegration) string { return v.VnetId }).(pulumi.StringOutput)
}

type IntegrationRuntimeManagedVnetIntegrationPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeManagedVnetIntegrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeManagedVnetIntegration)(nil)).Elem()
}

func (o IntegrationRuntimeManagedVnetIntegrationPtrOutput) ToIntegrationRuntimeManagedVnetIntegrationPtrOutput() IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return o
}

func (o IntegrationRuntimeManagedVnetIntegrationPtrOutput) ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return o
}

func (o IntegrationRuntimeManagedVnetIntegrationPtrOutput) Elem() IntegrationRuntimeManagedVnetIntegrationOutput {
	return o.ApplyT(func(v *IntegrationRuntimeManagedVnetIntegration) IntegrationRuntimeManagedVnetIntegration { return *v }).(IntegrationRuntimeManagedVnetIntegrationOutput)
}

// Name of the subnet to which the nodes of the Managed Integration Runtime will be added.
func (o IntegrationRuntimeManagedVnetIntegrationPtrOutput) SubnetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeManagedVnetIntegration) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetName
	}).(pulumi.StringPtrOutput)
}

// ID of the virtual network to which the nodes of the Managed Integration Runtime will be added.
func (o IntegrationRuntimeManagedVnetIntegrationPtrOutput) VnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeManagedVnetIntegration) *string {
		if v == nil {
			return nil
		}
		return &v.VnetId
	}).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeSelfHostedRbacAuthorization struct {
	// The resource identifier of the integration runtime to be shared. Changing this forces a new Data Factory to be created.
	ResourceId string `pulumi:"resourceId"`
}

// IntegrationRuntimeSelfHostedRbacAuthorizationInput is an input type that accepts IntegrationRuntimeSelfHostedRbacAuthorizationArgs and IntegrationRuntimeSelfHostedRbacAuthorizationOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSelfHostedRbacAuthorizationInput` via:
//
//          IntegrationRuntimeSelfHostedRbacAuthorizationArgs{...}
type IntegrationRuntimeSelfHostedRbacAuthorizationInput interface {
	pulumi.Input

	ToIntegrationRuntimeSelfHostedRbacAuthorizationOutput() IntegrationRuntimeSelfHostedRbacAuthorizationOutput
	ToIntegrationRuntimeSelfHostedRbacAuthorizationOutputWithContext(context.Context) IntegrationRuntimeSelfHostedRbacAuthorizationOutput
}

type IntegrationRuntimeSelfHostedRbacAuthorizationArgs struct {
	// The resource identifier of the integration runtime to be shared. Changing this forces a new Data Factory to be created.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (IntegrationRuntimeSelfHostedRbacAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSelfHostedRbacAuthorization)(nil)).Elem()
}

func (i IntegrationRuntimeSelfHostedRbacAuthorizationArgs) ToIntegrationRuntimeSelfHostedRbacAuthorizationOutput() IntegrationRuntimeSelfHostedRbacAuthorizationOutput {
	return i.ToIntegrationRuntimeSelfHostedRbacAuthorizationOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSelfHostedRbacAuthorizationArgs) ToIntegrationRuntimeSelfHostedRbacAuthorizationOutputWithContext(ctx context.Context) IntegrationRuntimeSelfHostedRbacAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSelfHostedRbacAuthorizationOutput)
}

// IntegrationRuntimeSelfHostedRbacAuthorizationArrayInput is an input type that accepts IntegrationRuntimeSelfHostedRbacAuthorizationArray and IntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSelfHostedRbacAuthorizationArrayInput` via:
//
//          IntegrationRuntimeSelfHostedRbacAuthorizationArray{ IntegrationRuntimeSelfHostedRbacAuthorizationArgs{...} }
type IntegrationRuntimeSelfHostedRbacAuthorizationArrayInput interface {
	pulumi.Input

	ToIntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput() IntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput
	ToIntegrationRuntimeSelfHostedRbacAuthorizationArrayOutputWithContext(context.Context) IntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput
}

type IntegrationRuntimeSelfHostedRbacAuthorizationArray []IntegrationRuntimeSelfHostedRbacAuthorizationInput

func (IntegrationRuntimeSelfHostedRbacAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationRuntimeSelfHostedRbacAuthorization)(nil)).Elem()
}

func (i IntegrationRuntimeSelfHostedRbacAuthorizationArray) ToIntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput() IntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput {
	return i.ToIntegrationRuntimeSelfHostedRbacAuthorizationArrayOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSelfHostedRbacAuthorizationArray) ToIntegrationRuntimeSelfHostedRbacAuthorizationArrayOutputWithContext(ctx context.Context) IntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput)
}

type IntegrationRuntimeSelfHostedRbacAuthorizationOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSelfHostedRbacAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSelfHostedRbacAuthorization)(nil)).Elem()
}

func (o IntegrationRuntimeSelfHostedRbacAuthorizationOutput) ToIntegrationRuntimeSelfHostedRbacAuthorizationOutput() IntegrationRuntimeSelfHostedRbacAuthorizationOutput {
	return o
}

func (o IntegrationRuntimeSelfHostedRbacAuthorizationOutput) ToIntegrationRuntimeSelfHostedRbacAuthorizationOutputWithContext(ctx context.Context) IntegrationRuntimeSelfHostedRbacAuthorizationOutput {
	return o
}

// The resource identifier of the integration runtime to be shared. Changing this forces a new Data Factory to be created.
func (o IntegrationRuntimeSelfHostedRbacAuthorizationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeSelfHostedRbacAuthorization) string { return v.ResourceId }).(pulumi.StringOutput)
}

type IntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationRuntimeSelfHostedRbacAuthorization)(nil)).Elem()
}

func (o IntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput) ToIntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput() IntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput {
	return o
}

func (o IntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput) ToIntegrationRuntimeSelfHostedRbacAuthorizationArrayOutputWithContext(ctx context.Context) IntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput {
	return o
}

func (o IntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput) Index(i pulumi.IntInput) IntegrationRuntimeSelfHostedRbacAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationRuntimeSelfHostedRbacAuthorization {
		return vs[0].([]IntegrationRuntimeSelfHostedRbacAuthorization)[vs[1].(int)]
	}).(IntegrationRuntimeSelfHostedRbacAuthorizationOutput)
}

type IntegrationRuntimeSsisCatalogInfo struct {
	// Administrator login name for the SQL Server.
	AdministratorLogin *string `pulumi:"administratorLogin"`
	// Administrator login password for the SQL Server.
	AdministratorPassword *string `pulumi:"administratorPassword"`
	// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
	PricingTier *string `pulumi:"pricingTier"`
	// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
	ServerEndpoint string `pulumi:"serverEndpoint"`
}

// IntegrationRuntimeSsisCatalogInfoInput is an input type that accepts IntegrationRuntimeSsisCatalogInfoArgs and IntegrationRuntimeSsisCatalogInfoOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisCatalogInfoInput` via:
//
//          IntegrationRuntimeSsisCatalogInfoArgs{...}
type IntegrationRuntimeSsisCatalogInfoInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisCatalogInfoOutput() IntegrationRuntimeSsisCatalogInfoOutput
	ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(context.Context) IntegrationRuntimeSsisCatalogInfoOutput
}

type IntegrationRuntimeSsisCatalogInfoArgs struct {
	// Administrator login name for the SQL Server.
	AdministratorLogin pulumi.StringPtrInput `pulumi:"administratorLogin"`
	// Administrator login password for the SQL Server.
	AdministratorPassword pulumi.StringPtrInput `pulumi:"administratorPassword"`
	// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
	PricingTier pulumi.StringPtrInput `pulumi:"pricingTier"`
	// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
	ServerEndpoint pulumi.StringInput `pulumi:"serverEndpoint"`
}

func (IntegrationRuntimeSsisCatalogInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisCatalogInfo)(nil)).Elem()
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoOutput() IntegrationRuntimeSsisCatalogInfoOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoOutput)
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisCatalogInfoArgs) ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoOutput).ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx)
}

// IntegrationRuntimeSsisCatalogInfoPtrInput is an input type that accepts IntegrationRuntimeSsisCatalogInfoArgs, IntegrationRuntimeSsisCatalogInfoPtr and IntegrationRuntimeSsisCatalogInfoPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisCatalogInfoPtrInput` via:
//
//          IntegrationRuntimeSsisCatalogInfoArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeSsisCatalogInfoPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput
	ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput
}

type integrationRuntimeSsisCatalogInfoPtrType IntegrationRuntimeSsisCatalogInfoArgs

func IntegrationRuntimeSsisCatalogInfoPtr(v *IntegrationRuntimeSsisCatalogInfoArgs) IntegrationRuntimeSsisCatalogInfoPtrInput {
	return (*integrationRuntimeSsisCatalogInfoPtrType)(v)
}

func (*integrationRuntimeSsisCatalogInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisCatalogInfo)(nil)).Elem()
}

func (i *integrationRuntimeSsisCatalogInfoPtrType) ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return i.ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeSsisCatalogInfoPtrType) ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCatalogInfoPtrOutput)
}

type IntegrationRuntimeSsisCatalogInfoOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisCatalogInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisCatalogInfo)(nil)).Elem()
}

func (o IntegrationRuntimeSsisCatalogInfoOutput) ToIntegrationRuntimeSsisCatalogInfoOutput() IntegrationRuntimeSsisCatalogInfoOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoOutput) ToIntegrationRuntimeSsisCatalogInfoOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoOutput) ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o.ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeSsisCatalogInfoOutput) ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) *IntegrationRuntimeSsisCatalogInfo {
		return &v
	}).(IntegrationRuntimeSsisCatalogInfoPtrOutput)
}

// Administrator login name for the SQL Server.
func (o IntegrationRuntimeSsisCatalogInfoOutput) AdministratorLogin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) *string { return v.AdministratorLogin }).(pulumi.StringPtrOutput)
}

// Administrator login password for the SQL Server.
func (o IntegrationRuntimeSsisCatalogInfoOutput) AdministratorPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) *string { return v.AdministratorPassword }).(pulumi.StringPtrOutput)
}

// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
func (o IntegrationRuntimeSsisCatalogInfoOutput) PricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) *string { return v.PricingTier }).(pulumi.StringPtrOutput)
}

// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
func (o IntegrationRuntimeSsisCatalogInfoOutput) ServerEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCatalogInfo) string { return v.ServerEndpoint }).(pulumi.StringOutput)
}

type IntegrationRuntimeSsisCatalogInfoPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisCatalogInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisCatalogInfo)(nil)).Elem()
}

func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) ToIntegrationRuntimeSsisCatalogInfoPtrOutput() IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) ToIntegrationRuntimeSsisCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCatalogInfoPtrOutput {
	return o
}

func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) Elem() IntegrationRuntimeSsisCatalogInfoOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) IntegrationRuntimeSsisCatalogInfo { return *v }).(IntegrationRuntimeSsisCatalogInfoOutput)
}

// Administrator login name for the SQL Server.
func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) AdministratorLogin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return v.AdministratorLogin
	}).(pulumi.StringPtrOutput)
}

// Administrator login password for the SQL Server.
func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) AdministratorPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return v.AdministratorPassword
	}).(pulumi.StringPtrOutput)
}

// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) PricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return v.PricingTier
	}).(pulumi.StringPtrOutput)
}

// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
func (o IntegrationRuntimeSsisCatalogInfoPtrOutput) ServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCatalogInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ServerEndpoint
	}).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeSsisCustomSetupScript struct {
	// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
	BlobContainerUri string `pulumi:"blobContainerUri"`
	// A container SAS token that gives access to the files. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
	SasToken string `pulumi:"sasToken"`
}

// IntegrationRuntimeSsisCustomSetupScriptInput is an input type that accepts IntegrationRuntimeSsisCustomSetupScriptArgs and IntegrationRuntimeSsisCustomSetupScriptOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisCustomSetupScriptInput` via:
//
//          IntegrationRuntimeSsisCustomSetupScriptArgs{...}
type IntegrationRuntimeSsisCustomSetupScriptInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisCustomSetupScriptOutput() IntegrationRuntimeSsisCustomSetupScriptOutput
	ToIntegrationRuntimeSsisCustomSetupScriptOutputWithContext(context.Context) IntegrationRuntimeSsisCustomSetupScriptOutput
}

type IntegrationRuntimeSsisCustomSetupScriptArgs struct {
	// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
	BlobContainerUri pulumi.StringInput `pulumi:"blobContainerUri"`
	// A container SAS token that gives access to the files. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
	SasToken pulumi.StringInput `pulumi:"sasToken"`
}

func (IntegrationRuntimeSsisCustomSetupScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisCustomSetupScript)(nil)).Elem()
}

func (i IntegrationRuntimeSsisCustomSetupScriptArgs) ToIntegrationRuntimeSsisCustomSetupScriptOutput() IntegrationRuntimeSsisCustomSetupScriptOutput {
	return i.ToIntegrationRuntimeSsisCustomSetupScriptOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisCustomSetupScriptArgs) ToIntegrationRuntimeSsisCustomSetupScriptOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCustomSetupScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCustomSetupScriptOutput)
}

func (i IntegrationRuntimeSsisCustomSetupScriptArgs) ToIntegrationRuntimeSsisCustomSetupScriptPtrOutput() IntegrationRuntimeSsisCustomSetupScriptPtrOutput {
	return i.ToIntegrationRuntimeSsisCustomSetupScriptPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisCustomSetupScriptArgs) ToIntegrationRuntimeSsisCustomSetupScriptPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCustomSetupScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCustomSetupScriptOutput).ToIntegrationRuntimeSsisCustomSetupScriptPtrOutputWithContext(ctx)
}

// IntegrationRuntimeSsisCustomSetupScriptPtrInput is an input type that accepts IntegrationRuntimeSsisCustomSetupScriptArgs, IntegrationRuntimeSsisCustomSetupScriptPtr and IntegrationRuntimeSsisCustomSetupScriptPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisCustomSetupScriptPtrInput` via:
//
//          IntegrationRuntimeSsisCustomSetupScriptArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeSsisCustomSetupScriptPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisCustomSetupScriptPtrOutput() IntegrationRuntimeSsisCustomSetupScriptPtrOutput
	ToIntegrationRuntimeSsisCustomSetupScriptPtrOutputWithContext(context.Context) IntegrationRuntimeSsisCustomSetupScriptPtrOutput
}

type integrationRuntimeSsisCustomSetupScriptPtrType IntegrationRuntimeSsisCustomSetupScriptArgs

func IntegrationRuntimeSsisCustomSetupScriptPtr(v *IntegrationRuntimeSsisCustomSetupScriptArgs) IntegrationRuntimeSsisCustomSetupScriptPtrInput {
	return (*integrationRuntimeSsisCustomSetupScriptPtrType)(v)
}

func (*integrationRuntimeSsisCustomSetupScriptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisCustomSetupScript)(nil)).Elem()
}

func (i *integrationRuntimeSsisCustomSetupScriptPtrType) ToIntegrationRuntimeSsisCustomSetupScriptPtrOutput() IntegrationRuntimeSsisCustomSetupScriptPtrOutput {
	return i.ToIntegrationRuntimeSsisCustomSetupScriptPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeSsisCustomSetupScriptPtrType) ToIntegrationRuntimeSsisCustomSetupScriptPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCustomSetupScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisCustomSetupScriptPtrOutput)
}

type IntegrationRuntimeSsisCustomSetupScriptOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisCustomSetupScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisCustomSetupScript)(nil)).Elem()
}

func (o IntegrationRuntimeSsisCustomSetupScriptOutput) ToIntegrationRuntimeSsisCustomSetupScriptOutput() IntegrationRuntimeSsisCustomSetupScriptOutput {
	return o
}

func (o IntegrationRuntimeSsisCustomSetupScriptOutput) ToIntegrationRuntimeSsisCustomSetupScriptOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCustomSetupScriptOutput {
	return o
}

func (o IntegrationRuntimeSsisCustomSetupScriptOutput) ToIntegrationRuntimeSsisCustomSetupScriptPtrOutput() IntegrationRuntimeSsisCustomSetupScriptPtrOutput {
	return o.ToIntegrationRuntimeSsisCustomSetupScriptPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeSsisCustomSetupScriptOutput) ToIntegrationRuntimeSsisCustomSetupScriptPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCustomSetupScriptPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCustomSetupScript) *IntegrationRuntimeSsisCustomSetupScript {
		return &v
	}).(IntegrationRuntimeSsisCustomSetupScriptPtrOutput)
}

// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
func (o IntegrationRuntimeSsisCustomSetupScriptOutput) BlobContainerUri() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCustomSetupScript) string { return v.BlobContainerUri }).(pulumi.StringOutput)
}

// A container SAS token that gives access to the files. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
func (o IntegrationRuntimeSsisCustomSetupScriptOutput) SasToken() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisCustomSetupScript) string { return v.SasToken }).(pulumi.StringOutput)
}

type IntegrationRuntimeSsisCustomSetupScriptPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisCustomSetupScriptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisCustomSetupScript)(nil)).Elem()
}

func (o IntegrationRuntimeSsisCustomSetupScriptPtrOutput) ToIntegrationRuntimeSsisCustomSetupScriptPtrOutput() IntegrationRuntimeSsisCustomSetupScriptPtrOutput {
	return o
}

func (o IntegrationRuntimeSsisCustomSetupScriptPtrOutput) ToIntegrationRuntimeSsisCustomSetupScriptPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisCustomSetupScriptPtrOutput {
	return o
}

func (o IntegrationRuntimeSsisCustomSetupScriptPtrOutput) Elem() IntegrationRuntimeSsisCustomSetupScriptOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCustomSetupScript) IntegrationRuntimeSsisCustomSetupScript { return *v }).(IntegrationRuntimeSsisCustomSetupScriptOutput)
}

// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
func (o IntegrationRuntimeSsisCustomSetupScriptPtrOutput) BlobContainerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCustomSetupScript) *string {
		if v == nil {
			return nil
		}
		return &v.BlobContainerUri
	}).(pulumi.StringPtrOutput)
}

// A container SAS token that gives access to the files. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
func (o IntegrationRuntimeSsisCustomSetupScriptPtrOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisCustomSetupScript) *string {
		if v == nil {
			return nil
		}
		return &v.SasToken
	}).(pulumi.StringPtrOutput)
}

type IntegrationRuntimeSsisVnetIntegration struct {
	// Name of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
	SubnetName string `pulumi:"subnetName"`
	// ID of the virtual network to which the nodes of the Azure-SSIS Integration Runtime will be added.
	VnetId string `pulumi:"vnetId"`
}

// IntegrationRuntimeSsisVnetIntegrationInput is an input type that accepts IntegrationRuntimeSsisVnetIntegrationArgs and IntegrationRuntimeSsisVnetIntegrationOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisVnetIntegrationInput` via:
//
//          IntegrationRuntimeSsisVnetIntegrationArgs{...}
type IntegrationRuntimeSsisVnetIntegrationInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisVnetIntegrationOutput() IntegrationRuntimeSsisVnetIntegrationOutput
	ToIntegrationRuntimeSsisVnetIntegrationOutputWithContext(context.Context) IntegrationRuntimeSsisVnetIntegrationOutput
}

type IntegrationRuntimeSsisVnetIntegrationArgs struct {
	// Name of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
	SubnetName pulumi.StringInput `pulumi:"subnetName"`
	// ID of the virtual network to which the nodes of the Azure-SSIS Integration Runtime will be added.
	VnetId pulumi.StringInput `pulumi:"vnetId"`
}

func (IntegrationRuntimeSsisVnetIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisVnetIntegration)(nil)).Elem()
}

func (i IntegrationRuntimeSsisVnetIntegrationArgs) ToIntegrationRuntimeSsisVnetIntegrationOutput() IntegrationRuntimeSsisVnetIntegrationOutput {
	return i.ToIntegrationRuntimeSsisVnetIntegrationOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisVnetIntegrationArgs) ToIntegrationRuntimeSsisVnetIntegrationOutputWithContext(ctx context.Context) IntegrationRuntimeSsisVnetIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisVnetIntegrationOutput)
}

func (i IntegrationRuntimeSsisVnetIntegrationArgs) ToIntegrationRuntimeSsisVnetIntegrationPtrOutput() IntegrationRuntimeSsisVnetIntegrationPtrOutput {
	return i.ToIntegrationRuntimeSsisVnetIntegrationPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeSsisVnetIntegrationArgs) ToIntegrationRuntimeSsisVnetIntegrationPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisVnetIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisVnetIntegrationOutput).ToIntegrationRuntimeSsisVnetIntegrationPtrOutputWithContext(ctx)
}

// IntegrationRuntimeSsisVnetIntegrationPtrInput is an input type that accepts IntegrationRuntimeSsisVnetIntegrationArgs, IntegrationRuntimeSsisVnetIntegrationPtr and IntegrationRuntimeSsisVnetIntegrationPtrOutput values.
// You can construct a concrete instance of `IntegrationRuntimeSsisVnetIntegrationPtrInput` via:
//
//          IntegrationRuntimeSsisVnetIntegrationArgs{...}
//
//  or:
//
//          nil
type IntegrationRuntimeSsisVnetIntegrationPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeSsisVnetIntegrationPtrOutput() IntegrationRuntimeSsisVnetIntegrationPtrOutput
	ToIntegrationRuntimeSsisVnetIntegrationPtrOutputWithContext(context.Context) IntegrationRuntimeSsisVnetIntegrationPtrOutput
}

type integrationRuntimeSsisVnetIntegrationPtrType IntegrationRuntimeSsisVnetIntegrationArgs

func IntegrationRuntimeSsisVnetIntegrationPtr(v *IntegrationRuntimeSsisVnetIntegrationArgs) IntegrationRuntimeSsisVnetIntegrationPtrInput {
	return (*integrationRuntimeSsisVnetIntegrationPtrType)(v)
}

func (*integrationRuntimeSsisVnetIntegrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisVnetIntegration)(nil)).Elem()
}

func (i *integrationRuntimeSsisVnetIntegrationPtrType) ToIntegrationRuntimeSsisVnetIntegrationPtrOutput() IntegrationRuntimeSsisVnetIntegrationPtrOutput {
	return i.ToIntegrationRuntimeSsisVnetIntegrationPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeSsisVnetIntegrationPtrType) ToIntegrationRuntimeSsisVnetIntegrationPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisVnetIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeSsisVnetIntegrationPtrOutput)
}

type IntegrationRuntimeSsisVnetIntegrationOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisVnetIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeSsisVnetIntegration)(nil)).Elem()
}

func (o IntegrationRuntimeSsisVnetIntegrationOutput) ToIntegrationRuntimeSsisVnetIntegrationOutput() IntegrationRuntimeSsisVnetIntegrationOutput {
	return o
}

func (o IntegrationRuntimeSsisVnetIntegrationOutput) ToIntegrationRuntimeSsisVnetIntegrationOutputWithContext(ctx context.Context) IntegrationRuntimeSsisVnetIntegrationOutput {
	return o
}

func (o IntegrationRuntimeSsisVnetIntegrationOutput) ToIntegrationRuntimeSsisVnetIntegrationPtrOutput() IntegrationRuntimeSsisVnetIntegrationPtrOutput {
	return o.ToIntegrationRuntimeSsisVnetIntegrationPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeSsisVnetIntegrationOutput) ToIntegrationRuntimeSsisVnetIntegrationPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisVnetIntegrationPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisVnetIntegration) *IntegrationRuntimeSsisVnetIntegration {
		return &v
	}).(IntegrationRuntimeSsisVnetIntegrationPtrOutput)
}

// Name of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
func (o IntegrationRuntimeSsisVnetIntegrationOutput) SubnetName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisVnetIntegration) string { return v.SubnetName }).(pulumi.StringOutput)
}

// ID of the virtual network to which the nodes of the Azure-SSIS Integration Runtime will be added.
func (o IntegrationRuntimeSsisVnetIntegrationOutput) VnetId() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeSsisVnetIntegration) string { return v.VnetId }).(pulumi.StringOutput)
}

type IntegrationRuntimeSsisVnetIntegrationPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeSsisVnetIntegrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeSsisVnetIntegration)(nil)).Elem()
}

func (o IntegrationRuntimeSsisVnetIntegrationPtrOutput) ToIntegrationRuntimeSsisVnetIntegrationPtrOutput() IntegrationRuntimeSsisVnetIntegrationPtrOutput {
	return o
}

func (o IntegrationRuntimeSsisVnetIntegrationPtrOutput) ToIntegrationRuntimeSsisVnetIntegrationPtrOutputWithContext(ctx context.Context) IntegrationRuntimeSsisVnetIntegrationPtrOutput {
	return o
}

func (o IntegrationRuntimeSsisVnetIntegrationPtrOutput) Elem() IntegrationRuntimeSsisVnetIntegrationOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisVnetIntegration) IntegrationRuntimeSsisVnetIntegration { return *v }).(IntegrationRuntimeSsisVnetIntegrationOutput)
}

// Name of the subnet to which the nodes of the Azure-SSIS Integration Runtime will be added.
func (o IntegrationRuntimeSsisVnetIntegrationPtrOutput) SubnetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisVnetIntegration) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetName
	}).(pulumi.StringPtrOutput)
}

// ID of the virtual network to which the nodes of the Azure-SSIS Integration Runtime will be added.
func (o IntegrationRuntimeSsisVnetIntegrationPtrOutput) VnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntegrationRuntimeSsisVnetIntegration) *string {
		if v == nil {
			return nil
		}
		return &v.VnetId
	}).(pulumi.StringPtrOutput)
}

type LinkedServiceSnowflakeKeyVaultPassword struct {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	LinkedServiceName string `pulumi:"linkedServiceName"`
	// Specifies the secret name in Azure Key Vault that stores Snowflake password.
	SecretName string `pulumi:"secretName"`
}

// LinkedServiceSnowflakeKeyVaultPasswordInput is an input type that accepts LinkedServiceSnowflakeKeyVaultPasswordArgs and LinkedServiceSnowflakeKeyVaultPasswordOutput values.
// You can construct a concrete instance of `LinkedServiceSnowflakeKeyVaultPasswordInput` via:
//
//          LinkedServiceSnowflakeKeyVaultPasswordArgs{...}
type LinkedServiceSnowflakeKeyVaultPasswordInput interface {
	pulumi.Input

	ToLinkedServiceSnowflakeKeyVaultPasswordOutput() LinkedServiceSnowflakeKeyVaultPasswordOutput
	ToLinkedServiceSnowflakeKeyVaultPasswordOutputWithContext(context.Context) LinkedServiceSnowflakeKeyVaultPasswordOutput
}

type LinkedServiceSnowflakeKeyVaultPasswordArgs struct {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	LinkedServiceName pulumi.StringInput `pulumi:"linkedServiceName"`
	// Specifies the secret name in Azure Key Vault that stores Snowflake password.
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (LinkedServiceSnowflakeKeyVaultPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceSnowflakeKeyVaultPassword)(nil)).Elem()
}

func (i LinkedServiceSnowflakeKeyVaultPasswordArgs) ToLinkedServiceSnowflakeKeyVaultPasswordOutput() LinkedServiceSnowflakeKeyVaultPasswordOutput {
	return i.ToLinkedServiceSnowflakeKeyVaultPasswordOutputWithContext(context.Background())
}

func (i LinkedServiceSnowflakeKeyVaultPasswordArgs) ToLinkedServiceSnowflakeKeyVaultPasswordOutputWithContext(ctx context.Context) LinkedServiceSnowflakeKeyVaultPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceSnowflakeKeyVaultPasswordOutput)
}

func (i LinkedServiceSnowflakeKeyVaultPasswordArgs) ToLinkedServiceSnowflakeKeyVaultPasswordPtrOutput() LinkedServiceSnowflakeKeyVaultPasswordPtrOutput {
	return i.ToLinkedServiceSnowflakeKeyVaultPasswordPtrOutputWithContext(context.Background())
}

func (i LinkedServiceSnowflakeKeyVaultPasswordArgs) ToLinkedServiceSnowflakeKeyVaultPasswordPtrOutputWithContext(ctx context.Context) LinkedServiceSnowflakeKeyVaultPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceSnowflakeKeyVaultPasswordOutput).ToLinkedServiceSnowflakeKeyVaultPasswordPtrOutputWithContext(ctx)
}

// LinkedServiceSnowflakeKeyVaultPasswordPtrInput is an input type that accepts LinkedServiceSnowflakeKeyVaultPasswordArgs, LinkedServiceSnowflakeKeyVaultPasswordPtr and LinkedServiceSnowflakeKeyVaultPasswordPtrOutput values.
// You can construct a concrete instance of `LinkedServiceSnowflakeKeyVaultPasswordPtrInput` via:
//
//          LinkedServiceSnowflakeKeyVaultPasswordArgs{...}
//
//  or:
//
//          nil
type LinkedServiceSnowflakeKeyVaultPasswordPtrInput interface {
	pulumi.Input

	ToLinkedServiceSnowflakeKeyVaultPasswordPtrOutput() LinkedServiceSnowflakeKeyVaultPasswordPtrOutput
	ToLinkedServiceSnowflakeKeyVaultPasswordPtrOutputWithContext(context.Context) LinkedServiceSnowflakeKeyVaultPasswordPtrOutput
}

type linkedServiceSnowflakeKeyVaultPasswordPtrType LinkedServiceSnowflakeKeyVaultPasswordArgs

func LinkedServiceSnowflakeKeyVaultPasswordPtr(v *LinkedServiceSnowflakeKeyVaultPasswordArgs) LinkedServiceSnowflakeKeyVaultPasswordPtrInput {
	return (*linkedServiceSnowflakeKeyVaultPasswordPtrType)(v)
}

func (*linkedServiceSnowflakeKeyVaultPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceSnowflakeKeyVaultPassword)(nil)).Elem()
}

func (i *linkedServiceSnowflakeKeyVaultPasswordPtrType) ToLinkedServiceSnowflakeKeyVaultPasswordPtrOutput() LinkedServiceSnowflakeKeyVaultPasswordPtrOutput {
	return i.ToLinkedServiceSnowflakeKeyVaultPasswordPtrOutputWithContext(context.Background())
}

func (i *linkedServiceSnowflakeKeyVaultPasswordPtrType) ToLinkedServiceSnowflakeKeyVaultPasswordPtrOutputWithContext(ctx context.Context) LinkedServiceSnowflakeKeyVaultPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceSnowflakeKeyVaultPasswordPtrOutput)
}

type LinkedServiceSnowflakeKeyVaultPasswordOutput struct{ *pulumi.OutputState }

func (LinkedServiceSnowflakeKeyVaultPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceSnowflakeKeyVaultPassword)(nil)).Elem()
}

func (o LinkedServiceSnowflakeKeyVaultPasswordOutput) ToLinkedServiceSnowflakeKeyVaultPasswordOutput() LinkedServiceSnowflakeKeyVaultPasswordOutput {
	return o
}

func (o LinkedServiceSnowflakeKeyVaultPasswordOutput) ToLinkedServiceSnowflakeKeyVaultPasswordOutputWithContext(ctx context.Context) LinkedServiceSnowflakeKeyVaultPasswordOutput {
	return o
}

func (o LinkedServiceSnowflakeKeyVaultPasswordOutput) ToLinkedServiceSnowflakeKeyVaultPasswordPtrOutput() LinkedServiceSnowflakeKeyVaultPasswordPtrOutput {
	return o.ToLinkedServiceSnowflakeKeyVaultPasswordPtrOutputWithContext(context.Background())
}

func (o LinkedServiceSnowflakeKeyVaultPasswordOutput) ToLinkedServiceSnowflakeKeyVaultPasswordPtrOutputWithContext(ctx context.Context) LinkedServiceSnowflakeKeyVaultPasswordPtrOutput {
	return o.ApplyT(func(v LinkedServiceSnowflakeKeyVaultPassword) *LinkedServiceSnowflakeKeyVaultPassword {
		return &v
	}).(LinkedServiceSnowflakeKeyVaultPasswordPtrOutput)
}

// Specifies the name of an existing Key Vault Data Factory Linked Service.
func (o LinkedServiceSnowflakeKeyVaultPasswordOutput) LinkedServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceSnowflakeKeyVaultPassword) string { return v.LinkedServiceName }).(pulumi.StringOutput)
}

// Specifies the secret name in Azure Key Vault that stores Snowflake password.
func (o LinkedServiceSnowflakeKeyVaultPasswordOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceSnowflakeKeyVaultPassword) string { return v.SecretName }).(pulumi.StringOutput)
}

type LinkedServiceSnowflakeKeyVaultPasswordPtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceSnowflakeKeyVaultPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceSnowflakeKeyVaultPassword)(nil)).Elem()
}

func (o LinkedServiceSnowflakeKeyVaultPasswordPtrOutput) ToLinkedServiceSnowflakeKeyVaultPasswordPtrOutput() LinkedServiceSnowflakeKeyVaultPasswordPtrOutput {
	return o
}

func (o LinkedServiceSnowflakeKeyVaultPasswordPtrOutput) ToLinkedServiceSnowflakeKeyVaultPasswordPtrOutputWithContext(ctx context.Context) LinkedServiceSnowflakeKeyVaultPasswordPtrOutput {
	return o
}

func (o LinkedServiceSnowflakeKeyVaultPasswordPtrOutput) Elem() LinkedServiceSnowflakeKeyVaultPasswordOutput {
	return o.ApplyT(func(v *LinkedServiceSnowflakeKeyVaultPassword) LinkedServiceSnowflakeKeyVaultPassword { return *v }).(LinkedServiceSnowflakeKeyVaultPasswordOutput)
}

// Specifies the name of an existing Key Vault Data Factory Linked Service.
func (o LinkedServiceSnowflakeKeyVaultPasswordPtrOutput) LinkedServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceSnowflakeKeyVaultPassword) *string {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(pulumi.StringPtrOutput)
}

// Specifies the secret name in Azure Key Vault that stores Snowflake password.
func (o LinkedServiceSnowflakeKeyVaultPasswordPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceSnowflakeKeyVaultPassword) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

type LinkedServiceSqlServerKeyVaultPassword struct {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	LinkedServiceName string `pulumi:"linkedServiceName"`
	// Specifies the secret name in Azure Key Vault that stores SQL Server password.
	SecretName string `pulumi:"secretName"`
}

// LinkedServiceSqlServerKeyVaultPasswordInput is an input type that accepts LinkedServiceSqlServerKeyVaultPasswordArgs and LinkedServiceSqlServerKeyVaultPasswordOutput values.
// You can construct a concrete instance of `LinkedServiceSqlServerKeyVaultPasswordInput` via:
//
//          LinkedServiceSqlServerKeyVaultPasswordArgs{...}
type LinkedServiceSqlServerKeyVaultPasswordInput interface {
	pulumi.Input

	ToLinkedServiceSqlServerKeyVaultPasswordOutput() LinkedServiceSqlServerKeyVaultPasswordOutput
	ToLinkedServiceSqlServerKeyVaultPasswordOutputWithContext(context.Context) LinkedServiceSqlServerKeyVaultPasswordOutput
}

type LinkedServiceSqlServerKeyVaultPasswordArgs struct {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	LinkedServiceName pulumi.StringInput `pulumi:"linkedServiceName"`
	// Specifies the secret name in Azure Key Vault that stores SQL Server password.
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (LinkedServiceSqlServerKeyVaultPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceSqlServerKeyVaultPassword)(nil)).Elem()
}

func (i LinkedServiceSqlServerKeyVaultPasswordArgs) ToLinkedServiceSqlServerKeyVaultPasswordOutput() LinkedServiceSqlServerKeyVaultPasswordOutput {
	return i.ToLinkedServiceSqlServerKeyVaultPasswordOutputWithContext(context.Background())
}

func (i LinkedServiceSqlServerKeyVaultPasswordArgs) ToLinkedServiceSqlServerKeyVaultPasswordOutputWithContext(ctx context.Context) LinkedServiceSqlServerKeyVaultPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceSqlServerKeyVaultPasswordOutput)
}

func (i LinkedServiceSqlServerKeyVaultPasswordArgs) ToLinkedServiceSqlServerKeyVaultPasswordPtrOutput() LinkedServiceSqlServerKeyVaultPasswordPtrOutput {
	return i.ToLinkedServiceSqlServerKeyVaultPasswordPtrOutputWithContext(context.Background())
}

func (i LinkedServiceSqlServerKeyVaultPasswordArgs) ToLinkedServiceSqlServerKeyVaultPasswordPtrOutputWithContext(ctx context.Context) LinkedServiceSqlServerKeyVaultPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceSqlServerKeyVaultPasswordOutput).ToLinkedServiceSqlServerKeyVaultPasswordPtrOutputWithContext(ctx)
}

// LinkedServiceSqlServerKeyVaultPasswordPtrInput is an input type that accepts LinkedServiceSqlServerKeyVaultPasswordArgs, LinkedServiceSqlServerKeyVaultPasswordPtr and LinkedServiceSqlServerKeyVaultPasswordPtrOutput values.
// You can construct a concrete instance of `LinkedServiceSqlServerKeyVaultPasswordPtrInput` via:
//
//          LinkedServiceSqlServerKeyVaultPasswordArgs{...}
//
//  or:
//
//          nil
type LinkedServiceSqlServerKeyVaultPasswordPtrInput interface {
	pulumi.Input

	ToLinkedServiceSqlServerKeyVaultPasswordPtrOutput() LinkedServiceSqlServerKeyVaultPasswordPtrOutput
	ToLinkedServiceSqlServerKeyVaultPasswordPtrOutputWithContext(context.Context) LinkedServiceSqlServerKeyVaultPasswordPtrOutput
}

type linkedServiceSqlServerKeyVaultPasswordPtrType LinkedServiceSqlServerKeyVaultPasswordArgs

func LinkedServiceSqlServerKeyVaultPasswordPtr(v *LinkedServiceSqlServerKeyVaultPasswordArgs) LinkedServiceSqlServerKeyVaultPasswordPtrInput {
	return (*linkedServiceSqlServerKeyVaultPasswordPtrType)(v)
}

func (*linkedServiceSqlServerKeyVaultPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceSqlServerKeyVaultPassword)(nil)).Elem()
}

func (i *linkedServiceSqlServerKeyVaultPasswordPtrType) ToLinkedServiceSqlServerKeyVaultPasswordPtrOutput() LinkedServiceSqlServerKeyVaultPasswordPtrOutput {
	return i.ToLinkedServiceSqlServerKeyVaultPasswordPtrOutputWithContext(context.Background())
}

func (i *linkedServiceSqlServerKeyVaultPasswordPtrType) ToLinkedServiceSqlServerKeyVaultPasswordPtrOutputWithContext(ctx context.Context) LinkedServiceSqlServerKeyVaultPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceSqlServerKeyVaultPasswordPtrOutput)
}

type LinkedServiceSqlServerKeyVaultPasswordOutput struct{ *pulumi.OutputState }

func (LinkedServiceSqlServerKeyVaultPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceSqlServerKeyVaultPassword)(nil)).Elem()
}

func (o LinkedServiceSqlServerKeyVaultPasswordOutput) ToLinkedServiceSqlServerKeyVaultPasswordOutput() LinkedServiceSqlServerKeyVaultPasswordOutput {
	return o
}

func (o LinkedServiceSqlServerKeyVaultPasswordOutput) ToLinkedServiceSqlServerKeyVaultPasswordOutputWithContext(ctx context.Context) LinkedServiceSqlServerKeyVaultPasswordOutput {
	return o
}

func (o LinkedServiceSqlServerKeyVaultPasswordOutput) ToLinkedServiceSqlServerKeyVaultPasswordPtrOutput() LinkedServiceSqlServerKeyVaultPasswordPtrOutput {
	return o.ToLinkedServiceSqlServerKeyVaultPasswordPtrOutputWithContext(context.Background())
}

func (o LinkedServiceSqlServerKeyVaultPasswordOutput) ToLinkedServiceSqlServerKeyVaultPasswordPtrOutputWithContext(ctx context.Context) LinkedServiceSqlServerKeyVaultPasswordPtrOutput {
	return o.ApplyT(func(v LinkedServiceSqlServerKeyVaultPassword) *LinkedServiceSqlServerKeyVaultPassword {
		return &v
	}).(LinkedServiceSqlServerKeyVaultPasswordPtrOutput)
}

// Specifies the name of an existing Key Vault Data Factory Linked Service.
func (o LinkedServiceSqlServerKeyVaultPasswordOutput) LinkedServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceSqlServerKeyVaultPassword) string { return v.LinkedServiceName }).(pulumi.StringOutput)
}

// Specifies the secret name in Azure Key Vault that stores SQL Server password.
func (o LinkedServiceSqlServerKeyVaultPasswordOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceSqlServerKeyVaultPassword) string { return v.SecretName }).(pulumi.StringOutput)
}

type LinkedServiceSqlServerKeyVaultPasswordPtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceSqlServerKeyVaultPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceSqlServerKeyVaultPassword)(nil)).Elem()
}

func (o LinkedServiceSqlServerKeyVaultPasswordPtrOutput) ToLinkedServiceSqlServerKeyVaultPasswordPtrOutput() LinkedServiceSqlServerKeyVaultPasswordPtrOutput {
	return o
}

func (o LinkedServiceSqlServerKeyVaultPasswordPtrOutput) ToLinkedServiceSqlServerKeyVaultPasswordPtrOutputWithContext(ctx context.Context) LinkedServiceSqlServerKeyVaultPasswordPtrOutput {
	return o
}

func (o LinkedServiceSqlServerKeyVaultPasswordPtrOutput) Elem() LinkedServiceSqlServerKeyVaultPasswordOutput {
	return o.ApplyT(func(v *LinkedServiceSqlServerKeyVaultPassword) LinkedServiceSqlServerKeyVaultPassword { return *v }).(LinkedServiceSqlServerKeyVaultPasswordOutput)
}

// Specifies the name of an existing Key Vault Data Factory Linked Service.
func (o LinkedServiceSqlServerKeyVaultPasswordPtrOutput) LinkedServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceSqlServerKeyVaultPassword) *string {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(pulumi.StringPtrOutput)
}

// Specifies the secret name in Azure Key Vault that stores SQL Server password.
func (o LinkedServiceSqlServerKeyVaultPasswordPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceSqlServerKeyVaultPassword) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

type LinkedServiceSynapseKeyVaultPassword struct {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	LinkedServiceName string `pulumi:"linkedServiceName"`
	// Specifies the secret name in Azure Key Vault that stores Synapse password.
	SecretName string `pulumi:"secretName"`
}

// LinkedServiceSynapseKeyVaultPasswordInput is an input type that accepts LinkedServiceSynapseKeyVaultPasswordArgs and LinkedServiceSynapseKeyVaultPasswordOutput values.
// You can construct a concrete instance of `LinkedServiceSynapseKeyVaultPasswordInput` via:
//
//          LinkedServiceSynapseKeyVaultPasswordArgs{...}
type LinkedServiceSynapseKeyVaultPasswordInput interface {
	pulumi.Input

	ToLinkedServiceSynapseKeyVaultPasswordOutput() LinkedServiceSynapseKeyVaultPasswordOutput
	ToLinkedServiceSynapseKeyVaultPasswordOutputWithContext(context.Context) LinkedServiceSynapseKeyVaultPasswordOutput
}

type LinkedServiceSynapseKeyVaultPasswordArgs struct {
	// Specifies the name of an existing Key Vault Data Factory Linked Service.
	LinkedServiceName pulumi.StringInput `pulumi:"linkedServiceName"`
	// Specifies the secret name in Azure Key Vault that stores Synapse password.
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (LinkedServiceSynapseKeyVaultPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceSynapseKeyVaultPassword)(nil)).Elem()
}

func (i LinkedServiceSynapseKeyVaultPasswordArgs) ToLinkedServiceSynapseKeyVaultPasswordOutput() LinkedServiceSynapseKeyVaultPasswordOutput {
	return i.ToLinkedServiceSynapseKeyVaultPasswordOutputWithContext(context.Background())
}

func (i LinkedServiceSynapseKeyVaultPasswordArgs) ToLinkedServiceSynapseKeyVaultPasswordOutputWithContext(ctx context.Context) LinkedServiceSynapseKeyVaultPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceSynapseKeyVaultPasswordOutput)
}

func (i LinkedServiceSynapseKeyVaultPasswordArgs) ToLinkedServiceSynapseKeyVaultPasswordPtrOutput() LinkedServiceSynapseKeyVaultPasswordPtrOutput {
	return i.ToLinkedServiceSynapseKeyVaultPasswordPtrOutputWithContext(context.Background())
}

func (i LinkedServiceSynapseKeyVaultPasswordArgs) ToLinkedServiceSynapseKeyVaultPasswordPtrOutputWithContext(ctx context.Context) LinkedServiceSynapseKeyVaultPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceSynapseKeyVaultPasswordOutput).ToLinkedServiceSynapseKeyVaultPasswordPtrOutputWithContext(ctx)
}

// LinkedServiceSynapseKeyVaultPasswordPtrInput is an input type that accepts LinkedServiceSynapseKeyVaultPasswordArgs, LinkedServiceSynapseKeyVaultPasswordPtr and LinkedServiceSynapseKeyVaultPasswordPtrOutput values.
// You can construct a concrete instance of `LinkedServiceSynapseKeyVaultPasswordPtrInput` via:
//
//          LinkedServiceSynapseKeyVaultPasswordArgs{...}
//
//  or:
//
//          nil
type LinkedServiceSynapseKeyVaultPasswordPtrInput interface {
	pulumi.Input

	ToLinkedServiceSynapseKeyVaultPasswordPtrOutput() LinkedServiceSynapseKeyVaultPasswordPtrOutput
	ToLinkedServiceSynapseKeyVaultPasswordPtrOutputWithContext(context.Context) LinkedServiceSynapseKeyVaultPasswordPtrOutput
}

type linkedServiceSynapseKeyVaultPasswordPtrType LinkedServiceSynapseKeyVaultPasswordArgs

func LinkedServiceSynapseKeyVaultPasswordPtr(v *LinkedServiceSynapseKeyVaultPasswordArgs) LinkedServiceSynapseKeyVaultPasswordPtrInput {
	return (*linkedServiceSynapseKeyVaultPasswordPtrType)(v)
}

func (*linkedServiceSynapseKeyVaultPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceSynapseKeyVaultPassword)(nil)).Elem()
}

func (i *linkedServiceSynapseKeyVaultPasswordPtrType) ToLinkedServiceSynapseKeyVaultPasswordPtrOutput() LinkedServiceSynapseKeyVaultPasswordPtrOutput {
	return i.ToLinkedServiceSynapseKeyVaultPasswordPtrOutputWithContext(context.Background())
}

func (i *linkedServiceSynapseKeyVaultPasswordPtrType) ToLinkedServiceSynapseKeyVaultPasswordPtrOutputWithContext(ctx context.Context) LinkedServiceSynapseKeyVaultPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceSynapseKeyVaultPasswordPtrOutput)
}

type LinkedServiceSynapseKeyVaultPasswordOutput struct{ *pulumi.OutputState }

func (LinkedServiceSynapseKeyVaultPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceSynapseKeyVaultPassword)(nil)).Elem()
}

func (o LinkedServiceSynapseKeyVaultPasswordOutput) ToLinkedServiceSynapseKeyVaultPasswordOutput() LinkedServiceSynapseKeyVaultPasswordOutput {
	return o
}

func (o LinkedServiceSynapseKeyVaultPasswordOutput) ToLinkedServiceSynapseKeyVaultPasswordOutputWithContext(ctx context.Context) LinkedServiceSynapseKeyVaultPasswordOutput {
	return o
}

func (o LinkedServiceSynapseKeyVaultPasswordOutput) ToLinkedServiceSynapseKeyVaultPasswordPtrOutput() LinkedServiceSynapseKeyVaultPasswordPtrOutput {
	return o.ToLinkedServiceSynapseKeyVaultPasswordPtrOutputWithContext(context.Background())
}

func (o LinkedServiceSynapseKeyVaultPasswordOutput) ToLinkedServiceSynapseKeyVaultPasswordPtrOutputWithContext(ctx context.Context) LinkedServiceSynapseKeyVaultPasswordPtrOutput {
	return o.ApplyT(func(v LinkedServiceSynapseKeyVaultPassword) *LinkedServiceSynapseKeyVaultPassword {
		return &v
	}).(LinkedServiceSynapseKeyVaultPasswordPtrOutput)
}

// Specifies the name of an existing Key Vault Data Factory Linked Service.
func (o LinkedServiceSynapseKeyVaultPasswordOutput) LinkedServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceSynapseKeyVaultPassword) string { return v.LinkedServiceName }).(pulumi.StringOutput)
}

// Specifies the secret name in Azure Key Vault that stores Synapse password.
func (o LinkedServiceSynapseKeyVaultPasswordOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceSynapseKeyVaultPassword) string { return v.SecretName }).(pulumi.StringOutput)
}

type LinkedServiceSynapseKeyVaultPasswordPtrOutput struct{ *pulumi.OutputState }

func (LinkedServiceSynapseKeyVaultPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceSynapseKeyVaultPassword)(nil)).Elem()
}

func (o LinkedServiceSynapseKeyVaultPasswordPtrOutput) ToLinkedServiceSynapseKeyVaultPasswordPtrOutput() LinkedServiceSynapseKeyVaultPasswordPtrOutput {
	return o
}

func (o LinkedServiceSynapseKeyVaultPasswordPtrOutput) ToLinkedServiceSynapseKeyVaultPasswordPtrOutputWithContext(ctx context.Context) LinkedServiceSynapseKeyVaultPasswordPtrOutput {
	return o
}

func (o LinkedServiceSynapseKeyVaultPasswordPtrOutput) Elem() LinkedServiceSynapseKeyVaultPasswordOutput {
	return o.ApplyT(func(v *LinkedServiceSynapseKeyVaultPassword) LinkedServiceSynapseKeyVaultPassword { return *v }).(LinkedServiceSynapseKeyVaultPasswordOutput)
}

// Specifies the name of an existing Key Vault Data Factory Linked Service.
func (o LinkedServiceSynapseKeyVaultPasswordPtrOutput) LinkedServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceSynapseKeyVaultPassword) *string {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceName
	}).(pulumi.StringPtrOutput)
}

// Specifies the secret name in Azure Key Vault that stores Synapse password.
func (o LinkedServiceSynapseKeyVaultPasswordPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceSynapseKeyVaultPassword) *string {
		if v == nil {
			return nil
		}
		return &v.SecretName
	}).(pulumi.StringPtrOutput)
}

type GetFactoryGithubConfiguration struct {
	// The VSTS account name.
	AccountName string `pulumi:"accountName"`
	// The branch of the repository to get code from.
	BranchName string `pulumi:"branchName"`
	// The GitHub Enterprise host name.
	GitUrl string `pulumi:"gitUrl"`
	// The name of the git repository.
	RepositoryName string `pulumi:"repositoryName"`
	// The root folder within the repository.
	RootFolder string `pulumi:"rootFolder"`
}

// GetFactoryGithubConfigurationInput is an input type that accepts GetFactoryGithubConfigurationArgs and GetFactoryGithubConfigurationOutput values.
// You can construct a concrete instance of `GetFactoryGithubConfigurationInput` via:
//
//          GetFactoryGithubConfigurationArgs{...}
type GetFactoryGithubConfigurationInput interface {
	pulumi.Input

	ToGetFactoryGithubConfigurationOutput() GetFactoryGithubConfigurationOutput
	ToGetFactoryGithubConfigurationOutputWithContext(context.Context) GetFactoryGithubConfigurationOutput
}

type GetFactoryGithubConfigurationArgs struct {
	// The VSTS account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The branch of the repository to get code from.
	BranchName pulumi.StringInput `pulumi:"branchName"`
	// The GitHub Enterprise host name.
	GitUrl pulumi.StringInput `pulumi:"gitUrl"`
	// The name of the git repository.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// The root folder within the repository.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
}

func (GetFactoryGithubConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFactoryGithubConfiguration)(nil)).Elem()
}

func (i GetFactoryGithubConfigurationArgs) ToGetFactoryGithubConfigurationOutput() GetFactoryGithubConfigurationOutput {
	return i.ToGetFactoryGithubConfigurationOutputWithContext(context.Background())
}

func (i GetFactoryGithubConfigurationArgs) ToGetFactoryGithubConfigurationOutputWithContext(ctx context.Context) GetFactoryGithubConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFactoryGithubConfigurationOutput)
}

// GetFactoryGithubConfigurationArrayInput is an input type that accepts GetFactoryGithubConfigurationArray and GetFactoryGithubConfigurationArrayOutput values.
// You can construct a concrete instance of `GetFactoryGithubConfigurationArrayInput` via:
//
//          GetFactoryGithubConfigurationArray{ GetFactoryGithubConfigurationArgs{...} }
type GetFactoryGithubConfigurationArrayInput interface {
	pulumi.Input

	ToGetFactoryGithubConfigurationArrayOutput() GetFactoryGithubConfigurationArrayOutput
	ToGetFactoryGithubConfigurationArrayOutputWithContext(context.Context) GetFactoryGithubConfigurationArrayOutput
}

type GetFactoryGithubConfigurationArray []GetFactoryGithubConfigurationInput

func (GetFactoryGithubConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFactoryGithubConfiguration)(nil)).Elem()
}

func (i GetFactoryGithubConfigurationArray) ToGetFactoryGithubConfigurationArrayOutput() GetFactoryGithubConfigurationArrayOutput {
	return i.ToGetFactoryGithubConfigurationArrayOutputWithContext(context.Background())
}

func (i GetFactoryGithubConfigurationArray) ToGetFactoryGithubConfigurationArrayOutputWithContext(ctx context.Context) GetFactoryGithubConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFactoryGithubConfigurationArrayOutput)
}

type GetFactoryGithubConfigurationOutput struct{ *pulumi.OutputState }

func (GetFactoryGithubConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFactoryGithubConfiguration)(nil)).Elem()
}

func (o GetFactoryGithubConfigurationOutput) ToGetFactoryGithubConfigurationOutput() GetFactoryGithubConfigurationOutput {
	return o
}

func (o GetFactoryGithubConfigurationOutput) ToGetFactoryGithubConfigurationOutputWithContext(ctx context.Context) GetFactoryGithubConfigurationOutput {
	return o
}

// The VSTS account name.
func (o GetFactoryGithubConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryGithubConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// The branch of the repository to get code from.
func (o GetFactoryGithubConfigurationOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryGithubConfiguration) string { return v.BranchName }).(pulumi.StringOutput)
}

// The GitHub Enterprise host name.
func (o GetFactoryGithubConfigurationOutput) GitUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryGithubConfiguration) string { return v.GitUrl }).(pulumi.StringOutput)
}

// The name of the git repository.
func (o GetFactoryGithubConfigurationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryGithubConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// The root folder within the repository.
func (o GetFactoryGithubConfigurationOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryGithubConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

type GetFactoryGithubConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetFactoryGithubConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFactoryGithubConfiguration)(nil)).Elem()
}

func (o GetFactoryGithubConfigurationArrayOutput) ToGetFactoryGithubConfigurationArrayOutput() GetFactoryGithubConfigurationArrayOutput {
	return o
}

func (o GetFactoryGithubConfigurationArrayOutput) ToGetFactoryGithubConfigurationArrayOutputWithContext(ctx context.Context) GetFactoryGithubConfigurationArrayOutput {
	return o
}

func (o GetFactoryGithubConfigurationArrayOutput) Index(i pulumi.IntInput) GetFactoryGithubConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFactoryGithubConfiguration {
		return vs[0].([]GetFactoryGithubConfiguration)[vs[1].(int)]
	}).(GetFactoryGithubConfigurationOutput)
}

type GetFactoryIdentity struct {
	// The ID of the Principal (Client) in Azure Active Directory.
	PrincipalId string `pulumi:"principalId"`
	// The Tenant ID associated with the VSTS account.
	TenantId string `pulumi:"tenantId"`
	// The identity type of the Data Factory.
	Type string `pulumi:"type"`
}

// GetFactoryIdentityInput is an input type that accepts GetFactoryIdentityArgs and GetFactoryIdentityOutput values.
// You can construct a concrete instance of `GetFactoryIdentityInput` via:
//
//          GetFactoryIdentityArgs{...}
type GetFactoryIdentityInput interface {
	pulumi.Input

	ToGetFactoryIdentityOutput() GetFactoryIdentityOutput
	ToGetFactoryIdentityOutputWithContext(context.Context) GetFactoryIdentityOutput
}

type GetFactoryIdentityArgs struct {
	// The ID of the Principal (Client) in Azure Active Directory.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Tenant ID associated with the VSTS account.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type of the Data Factory.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetFactoryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFactoryIdentity)(nil)).Elem()
}

func (i GetFactoryIdentityArgs) ToGetFactoryIdentityOutput() GetFactoryIdentityOutput {
	return i.ToGetFactoryIdentityOutputWithContext(context.Background())
}

func (i GetFactoryIdentityArgs) ToGetFactoryIdentityOutputWithContext(ctx context.Context) GetFactoryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFactoryIdentityOutput)
}

// GetFactoryIdentityArrayInput is an input type that accepts GetFactoryIdentityArray and GetFactoryIdentityArrayOutput values.
// You can construct a concrete instance of `GetFactoryIdentityArrayInput` via:
//
//          GetFactoryIdentityArray{ GetFactoryIdentityArgs{...} }
type GetFactoryIdentityArrayInput interface {
	pulumi.Input

	ToGetFactoryIdentityArrayOutput() GetFactoryIdentityArrayOutput
	ToGetFactoryIdentityArrayOutputWithContext(context.Context) GetFactoryIdentityArrayOutput
}

type GetFactoryIdentityArray []GetFactoryIdentityInput

func (GetFactoryIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFactoryIdentity)(nil)).Elem()
}

func (i GetFactoryIdentityArray) ToGetFactoryIdentityArrayOutput() GetFactoryIdentityArrayOutput {
	return i.ToGetFactoryIdentityArrayOutputWithContext(context.Background())
}

func (i GetFactoryIdentityArray) ToGetFactoryIdentityArrayOutputWithContext(ctx context.Context) GetFactoryIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFactoryIdentityArrayOutput)
}

type GetFactoryIdentityOutput struct{ *pulumi.OutputState }

func (GetFactoryIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFactoryIdentity)(nil)).Elem()
}

func (o GetFactoryIdentityOutput) ToGetFactoryIdentityOutput() GetFactoryIdentityOutput {
	return o
}

func (o GetFactoryIdentityOutput) ToGetFactoryIdentityOutputWithContext(ctx context.Context) GetFactoryIdentityOutput {
	return o
}

// The ID of the Principal (Client) in Azure Active Directory.
func (o GetFactoryIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Tenant ID associated with the VSTS account.
func (o GetFactoryIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type of the Data Factory.
func (o GetFactoryIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetFactoryIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetFactoryIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFactoryIdentity)(nil)).Elem()
}

func (o GetFactoryIdentityArrayOutput) ToGetFactoryIdentityArrayOutput() GetFactoryIdentityArrayOutput {
	return o
}

func (o GetFactoryIdentityArrayOutput) ToGetFactoryIdentityArrayOutputWithContext(ctx context.Context) GetFactoryIdentityArrayOutput {
	return o
}

func (o GetFactoryIdentityArrayOutput) Index(i pulumi.IntInput) GetFactoryIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFactoryIdentity {
		return vs[0].([]GetFactoryIdentity)[vs[1].(int)]
	}).(GetFactoryIdentityOutput)
}

type GetFactoryVstsConfiguration struct {
	// The VSTS account name.
	AccountName string `pulumi:"accountName"`
	// The branch of the repository to get code from.
	BranchName string `pulumi:"branchName"`
	// The name of the VSTS project.
	ProjectName string `pulumi:"projectName"`
	// The name of the git repository.
	RepositoryName string `pulumi:"repositoryName"`
	// The root folder within the repository.
	RootFolder string `pulumi:"rootFolder"`
	// The Tenant ID associated with the VSTS account.
	TenantId string `pulumi:"tenantId"`
}

// GetFactoryVstsConfigurationInput is an input type that accepts GetFactoryVstsConfigurationArgs and GetFactoryVstsConfigurationOutput values.
// You can construct a concrete instance of `GetFactoryVstsConfigurationInput` via:
//
//          GetFactoryVstsConfigurationArgs{...}
type GetFactoryVstsConfigurationInput interface {
	pulumi.Input

	ToGetFactoryVstsConfigurationOutput() GetFactoryVstsConfigurationOutput
	ToGetFactoryVstsConfigurationOutputWithContext(context.Context) GetFactoryVstsConfigurationOutput
}

type GetFactoryVstsConfigurationArgs struct {
	// The VSTS account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The branch of the repository to get code from.
	BranchName pulumi.StringInput `pulumi:"branchName"`
	// The name of the VSTS project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The name of the git repository.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// The root folder within the repository.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
	// The Tenant ID associated with the VSTS account.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (GetFactoryVstsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFactoryVstsConfiguration)(nil)).Elem()
}

func (i GetFactoryVstsConfigurationArgs) ToGetFactoryVstsConfigurationOutput() GetFactoryVstsConfigurationOutput {
	return i.ToGetFactoryVstsConfigurationOutputWithContext(context.Background())
}

func (i GetFactoryVstsConfigurationArgs) ToGetFactoryVstsConfigurationOutputWithContext(ctx context.Context) GetFactoryVstsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFactoryVstsConfigurationOutput)
}

// GetFactoryVstsConfigurationArrayInput is an input type that accepts GetFactoryVstsConfigurationArray and GetFactoryVstsConfigurationArrayOutput values.
// You can construct a concrete instance of `GetFactoryVstsConfigurationArrayInput` via:
//
//          GetFactoryVstsConfigurationArray{ GetFactoryVstsConfigurationArgs{...} }
type GetFactoryVstsConfigurationArrayInput interface {
	pulumi.Input

	ToGetFactoryVstsConfigurationArrayOutput() GetFactoryVstsConfigurationArrayOutput
	ToGetFactoryVstsConfigurationArrayOutputWithContext(context.Context) GetFactoryVstsConfigurationArrayOutput
}

type GetFactoryVstsConfigurationArray []GetFactoryVstsConfigurationInput

func (GetFactoryVstsConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFactoryVstsConfiguration)(nil)).Elem()
}

func (i GetFactoryVstsConfigurationArray) ToGetFactoryVstsConfigurationArrayOutput() GetFactoryVstsConfigurationArrayOutput {
	return i.ToGetFactoryVstsConfigurationArrayOutputWithContext(context.Background())
}

func (i GetFactoryVstsConfigurationArray) ToGetFactoryVstsConfigurationArrayOutputWithContext(ctx context.Context) GetFactoryVstsConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFactoryVstsConfigurationArrayOutput)
}

type GetFactoryVstsConfigurationOutput struct{ *pulumi.OutputState }

func (GetFactoryVstsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFactoryVstsConfiguration)(nil)).Elem()
}

func (o GetFactoryVstsConfigurationOutput) ToGetFactoryVstsConfigurationOutput() GetFactoryVstsConfigurationOutput {
	return o
}

func (o GetFactoryVstsConfigurationOutput) ToGetFactoryVstsConfigurationOutputWithContext(ctx context.Context) GetFactoryVstsConfigurationOutput {
	return o
}

// The VSTS account name.
func (o GetFactoryVstsConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryVstsConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// The branch of the repository to get code from.
func (o GetFactoryVstsConfigurationOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryVstsConfiguration) string { return v.BranchName }).(pulumi.StringOutput)
}

// The name of the VSTS project.
func (o GetFactoryVstsConfigurationOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryVstsConfiguration) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The name of the git repository.
func (o GetFactoryVstsConfigurationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryVstsConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// The root folder within the repository.
func (o GetFactoryVstsConfigurationOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryVstsConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

// The Tenant ID associated with the VSTS account.
func (o GetFactoryVstsConfigurationOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryVstsConfiguration) string { return v.TenantId }).(pulumi.StringOutput)
}

type GetFactoryVstsConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetFactoryVstsConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFactoryVstsConfiguration)(nil)).Elem()
}

func (o GetFactoryVstsConfigurationArrayOutput) ToGetFactoryVstsConfigurationArrayOutput() GetFactoryVstsConfigurationArrayOutput {
	return o
}

func (o GetFactoryVstsConfigurationArrayOutput) ToGetFactoryVstsConfigurationArrayOutputWithContext(ctx context.Context) GetFactoryVstsConfigurationArrayOutput {
	return o
}

func (o GetFactoryVstsConfigurationArrayOutput) Index(i pulumi.IntInput) GetFactoryVstsConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFactoryVstsConfiguration {
		return vs[0].([]GetFactoryVstsConfiguration)[vs[1].(int)]
	}).(GetFactoryVstsConfigurationOutput)
}

func init() {
	pulumi.RegisterOutputType(DatasetAzureBlobSchemaColumnOutput{})
	pulumi.RegisterOutputType(DatasetAzureBlobSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(DatasetCosmosDBApiSchemaColumnOutput{})
	pulumi.RegisterOutputType(DatasetCosmosDBApiSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(DatasetDelimitedTextAzureBlobStorageLocationOutput{})
	pulumi.RegisterOutputType(DatasetDelimitedTextAzureBlobStorageLocationPtrOutput{})
	pulumi.RegisterOutputType(DatasetDelimitedTextHttpServerLocationOutput{})
	pulumi.RegisterOutputType(DatasetDelimitedTextHttpServerLocationPtrOutput{})
	pulumi.RegisterOutputType(DatasetDelimitedTextSchemaColumnOutput{})
	pulumi.RegisterOutputType(DatasetDelimitedTextSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(DatasetHttpSchemaColumnOutput{})
	pulumi.RegisterOutputType(DatasetHttpSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(DatasetJsonAzureBlobStorageLocationOutput{})
	pulumi.RegisterOutputType(DatasetJsonAzureBlobStorageLocationPtrOutput{})
	pulumi.RegisterOutputType(DatasetJsonHttpServerLocationOutput{})
	pulumi.RegisterOutputType(DatasetJsonHttpServerLocationPtrOutput{})
	pulumi.RegisterOutputType(DatasetJsonSchemaColumnOutput{})
	pulumi.RegisterOutputType(DatasetJsonSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(DatasetMysqlSchemaColumnOutput{})
	pulumi.RegisterOutputType(DatasetMysqlSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(DatasetParquetAzureBlobStorageLocationOutput{})
	pulumi.RegisterOutputType(DatasetParquetAzureBlobStorageLocationPtrOutput{})
	pulumi.RegisterOutputType(DatasetParquetHttpServerLocationOutput{})
	pulumi.RegisterOutputType(DatasetParquetHttpServerLocationPtrOutput{})
	pulumi.RegisterOutputType(DatasetParquetSchemaColumnOutput{})
	pulumi.RegisterOutputType(DatasetParquetSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(DatasetPostgresqlSchemaColumnOutput{})
	pulumi.RegisterOutputType(DatasetPostgresqlSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(DatasetSqlServerTableSchemaColumnOutput{})
	pulumi.RegisterOutputType(DatasetSqlServerTableSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(FactoryGithubConfigurationOutput{})
	pulumi.RegisterOutputType(FactoryGithubConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityOutput{})
	pulumi.RegisterOutputType(FactoryIdentityPtrOutput{})
	pulumi.RegisterOutputType(FactoryVstsConfigurationOutput{})
	pulumi.RegisterOutputType(FactoryVstsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeManagedCatalogInfoOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeManagedCatalogInfoPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeManagedCustomSetupScriptOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeManagedCustomSetupScriptPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeManagedVnetIntegrationOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeManagedVnetIntegrationPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSelfHostedRbacAuthorizationOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSelfHostedRbacAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCatalogInfoOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCatalogInfoPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCustomSetupScriptOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisCustomSetupScriptPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisVnetIntegrationOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeSsisVnetIntegrationPtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceSnowflakeKeyVaultPasswordOutput{})
	pulumi.RegisterOutputType(LinkedServiceSnowflakeKeyVaultPasswordPtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceSqlServerKeyVaultPasswordOutput{})
	pulumi.RegisterOutputType(LinkedServiceSqlServerKeyVaultPasswordPtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceSynapseKeyVaultPasswordOutput{})
	pulumi.RegisterOutputType(LinkedServiceSynapseKeyVaultPasswordPtrOutput{})
	pulumi.RegisterOutputType(GetFactoryGithubConfigurationOutput{})
	pulumi.RegisterOutputType(GetFactoryGithubConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetFactoryIdentityOutput{})
	pulumi.RegisterOutputType(GetFactoryIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetFactoryVstsConfigurationOutput{})
	pulumi.RegisterOutputType(GetFactoryVstsConfigurationArrayOutput{})
}
