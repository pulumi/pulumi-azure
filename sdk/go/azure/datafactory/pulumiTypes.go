// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package datafactory

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type DatasetMysqlSchemaColumn struct {
	// The description of the column.
	Description *string `pulumi:"description"`
	// The name of the column.
	Name string `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type *string `pulumi:"type"`
}

type DatasetMysqlSchemaColumnInput interface {
	pulumi.Input

	ToDatasetMysqlSchemaColumnOutput() DatasetMysqlSchemaColumnOutput
	ToDatasetMysqlSchemaColumnOutputWithContext(context.Context) DatasetMysqlSchemaColumnOutput
}

type DatasetMysqlSchemaColumnArgs struct {
	// The description of the column.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the column.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatasetMysqlSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetMysqlSchemaColumn)(nil)).Elem()
}

func (i DatasetMysqlSchemaColumnArgs) ToDatasetMysqlSchemaColumnOutput() DatasetMysqlSchemaColumnOutput {
	return i.ToDatasetMysqlSchemaColumnOutputWithContext(context.Background())
}

func (i DatasetMysqlSchemaColumnArgs) ToDatasetMysqlSchemaColumnOutputWithContext(ctx context.Context) DatasetMysqlSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetMysqlSchemaColumnOutput)
}

type DatasetMysqlSchemaColumnArrayInput interface {
	pulumi.Input

	ToDatasetMysqlSchemaColumnArrayOutput() DatasetMysqlSchemaColumnArrayOutput
	ToDatasetMysqlSchemaColumnArrayOutputWithContext(context.Context) DatasetMysqlSchemaColumnArrayOutput
}

type DatasetMysqlSchemaColumnArray []DatasetMysqlSchemaColumnInput

func (DatasetMysqlSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetMysqlSchemaColumn)(nil)).Elem()
}

func (i DatasetMysqlSchemaColumnArray) ToDatasetMysqlSchemaColumnArrayOutput() DatasetMysqlSchemaColumnArrayOutput {
	return i.ToDatasetMysqlSchemaColumnArrayOutputWithContext(context.Background())
}

func (i DatasetMysqlSchemaColumnArray) ToDatasetMysqlSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetMysqlSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetMysqlSchemaColumnArrayOutput)
}

type DatasetMysqlSchemaColumnOutput struct{ *pulumi.OutputState }

func (DatasetMysqlSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetMysqlSchemaColumn)(nil)).Elem()
}

func (o DatasetMysqlSchemaColumnOutput) ToDatasetMysqlSchemaColumnOutput() DatasetMysqlSchemaColumnOutput {
	return o
}

func (o DatasetMysqlSchemaColumnOutput) ToDatasetMysqlSchemaColumnOutputWithContext(ctx context.Context) DatasetMysqlSchemaColumnOutput {
	return o
}

// The description of the column.
func (o DatasetMysqlSchemaColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetMysqlSchemaColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the column.
func (o DatasetMysqlSchemaColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetMysqlSchemaColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
func (o DatasetMysqlSchemaColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetMysqlSchemaColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatasetMysqlSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (DatasetMysqlSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetMysqlSchemaColumn)(nil)).Elem()
}

func (o DatasetMysqlSchemaColumnArrayOutput) ToDatasetMysqlSchemaColumnArrayOutput() DatasetMysqlSchemaColumnArrayOutput {
	return o
}

func (o DatasetMysqlSchemaColumnArrayOutput) ToDatasetMysqlSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetMysqlSchemaColumnArrayOutput {
	return o
}

func (o DatasetMysqlSchemaColumnArrayOutput) Index(i pulumi.IntInput) DatasetMysqlSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetMysqlSchemaColumn {
		return vs[0].([]DatasetMysqlSchemaColumn)[vs[1].(int)]
	}).(DatasetMysqlSchemaColumnOutput)
}

type DatasetPostgresqlSchemaColumn struct {
	// The description of the column.
	Description *string `pulumi:"description"`
	// The name of the column.
	Name string `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type *string `pulumi:"type"`
}

type DatasetPostgresqlSchemaColumnInput interface {
	pulumi.Input

	ToDatasetPostgresqlSchemaColumnOutput() DatasetPostgresqlSchemaColumnOutput
	ToDatasetPostgresqlSchemaColumnOutputWithContext(context.Context) DatasetPostgresqlSchemaColumnOutput
}

type DatasetPostgresqlSchemaColumnArgs struct {
	// The description of the column.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the column.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatasetPostgresqlSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetPostgresqlSchemaColumn)(nil)).Elem()
}

func (i DatasetPostgresqlSchemaColumnArgs) ToDatasetPostgresqlSchemaColumnOutput() DatasetPostgresqlSchemaColumnOutput {
	return i.ToDatasetPostgresqlSchemaColumnOutputWithContext(context.Background())
}

func (i DatasetPostgresqlSchemaColumnArgs) ToDatasetPostgresqlSchemaColumnOutputWithContext(ctx context.Context) DatasetPostgresqlSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPostgresqlSchemaColumnOutput)
}

type DatasetPostgresqlSchemaColumnArrayInput interface {
	pulumi.Input

	ToDatasetPostgresqlSchemaColumnArrayOutput() DatasetPostgresqlSchemaColumnArrayOutput
	ToDatasetPostgresqlSchemaColumnArrayOutputWithContext(context.Context) DatasetPostgresqlSchemaColumnArrayOutput
}

type DatasetPostgresqlSchemaColumnArray []DatasetPostgresqlSchemaColumnInput

func (DatasetPostgresqlSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetPostgresqlSchemaColumn)(nil)).Elem()
}

func (i DatasetPostgresqlSchemaColumnArray) ToDatasetPostgresqlSchemaColumnArrayOutput() DatasetPostgresqlSchemaColumnArrayOutput {
	return i.ToDatasetPostgresqlSchemaColumnArrayOutputWithContext(context.Background())
}

func (i DatasetPostgresqlSchemaColumnArray) ToDatasetPostgresqlSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetPostgresqlSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPostgresqlSchemaColumnArrayOutput)
}

type DatasetPostgresqlSchemaColumnOutput struct{ *pulumi.OutputState }

func (DatasetPostgresqlSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetPostgresqlSchemaColumn)(nil)).Elem()
}

func (o DatasetPostgresqlSchemaColumnOutput) ToDatasetPostgresqlSchemaColumnOutput() DatasetPostgresqlSchemaColumnOutput {
	return o
}

func (o DatasetPostgresqlSchemaColumnOutput) ToDatasetPostgresqlSchemaColumnOutputWithContext(ctx context.Context) DatasetPostgresqlSchemaColumnOutput {
	return o
}

// The description of the column.
func (o DatasetPostgresqlSchemaColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetPostgresqlSchemaColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the column.
func (o DatasetPostgresqlSchemaColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetPostgresqlSchemaColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
func (o DatasetPostgresqlSchemaColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetPostgresqlSchemaColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatasetPostgresqlSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (DatasetPostgresqlSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetPostgresqlSchemaColumn)(nil)).Elem()
}

func (o DatasetPostgresqlSchemaColumnArrayOutput) ToDatasetPostgresqlSchemaColumnArrayOutput() DatasetPostgresqlSchemaColumnArrayOutput {
	return o
}

func (o DatasetPostgresqlSchemaColumnArrayOutput) ToDatasetPostgresqlSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetPostgresqlSchemaColumnArrayOutput {
	return o
}

func (o DatasetPostgresqlSchemaColumnArrayOutput) Index(i pulumi.IntInput) DatasetPostgresqlSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetPostgresqlSchemaColumn {
		return vs[0].([]DatasetPostgresqlSchemaColumn)[vs[1].(int)]
	}).(DatasetPostgresqlSchemaColumnOutput)
}

type DatasetSqlServerTableSchemaColumn struct {
	// The description of the column.
	Description *string `pulumi:"description"`
	// The name of the column.
	Name string `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type *string `pulumi:"type"`
}

type DatasetSqlServerTableSchemaColumnInput interface {
	pulumi.Input

	ToDatasetSqlServerTableSchemaColumnOutput() DatasetSqlServerTableSchemaColumnOutput
	ToDatasetSqlServerTableSchemaColumnOutputWithContext(context.Context) DatasetSqlServerTableSchemaColumnOutput
}

type DatasetSqlServerTableSchemaColumnArgs struct {
	// The description of the column.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the column.
	Name pulumi.StringInput `pulumi:"name"`
	// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DatasetSqlServerTableSchemaColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetSqlServerTableSchemaColumn)(nil)).Elem()
}

func (i DatasetSqlServerTableSchemaColumnArgs) ToDatasetSqlServerTableSchemaColumnOutput() DatasetSqlServerTableSchemaColumnOutput {
	return i.ToDatasetSqlServerTableSchemaColumnOutputWithContext(context.Background())
}

func (i DatasetSqlServerTableSchemaColumnArgs) ToDatasetSqlServerTableSchemaColumnOutputWithContext(ctx context.Context) DatasetSqlServerTableSchemaColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetSqlServerTableSchemaColumnOutput)
}

type DatasetSqlServerTableSchemaColumnArrayInput interface {
	pulumi.Input

	ToDatasetSqlServerTableSchemaColumnArrayOutput() DatasetSqlServerTableSchemaColumnArrayOutput
	ToDatasetSqlServerTableSchemaColumnArrayOutputWithContext(context.Context) DatasetSqlServerTableSchemaColumnArrayOutput
}

type DatasetSqlServerTableSchemaColumnArray []DatasetSqlServerTableSchemaColumnInput

func (DatasetSqlServerTableSchemaColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetSqlServerTableSchemaColumn)(nil)).Elem()
}

func (i DatasetSqlServerTableSchemaColumnArray) ToDatasetSqlServerTableSchemaColumnArrayOutput() DatasetSqlServerTableSchemaColumnArrayOutput {
	return i.ToDatasetSqlServerTableSchemaColumnArrayOutputWithContext(context.Background())
}

func (i DatasetSqlServerTableSchemaColumnArray) ToDatasetSqlServerTableSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetSqlServerTableSchemaColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetSqlServerTableSchemaColumnArrayOutput)
}

type DatasetSqlServerTableSchemaColumnOutput struct{ *pulumi.OutputState }

func (DatasetSqlServerTableSchemaColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetSqlServerTableSchemaColumn)(nil)).Elem()
}

func (o DatasetSqlServerTableSchemaColumnOutput) ToDatasetSqlServerTableSchemaColumnOutput() DatasetSqlServerTableSchemaColumnOutput {
	return o
}

func (o DatasetSqlServerTableSchemaColumnOutput) ToDatasetSqlServerTableSchemaColumnOutputWithContext(ctx context.Context) DatasetSqlServerTableSchemaColumnOutput {
	return o
}

// The description of the column.
func (o DatasetSqlServerTableSchemaColumnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetSqlServerTableSchemaColumn) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the column.
func (o DatasetSqlServerTableSchemaColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetSqlServerTableSchemaColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the column. Valid values are `Byte`, `Byte[]`, `Boolean`, `Date`, `DateTime`,`DateTimeOffset`, `Decimal`, `Double`, `Guid`, `Int16`, `Int32`, `Int64`, `Single`, `String`, `TimeSpan`. Please note these values are case sensitive.
func (o DatasetSqlServerTableSchemaColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetSqlServerTableSchemaColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DatasetSqlServerTableSchemaColumnArrayOutput struct{ *pulumi.OutputState }

func (DatasetSqlServerTableSchemaColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetSqlServerTableSchemaColumn)(nil)).Elem()
}

func (o DatasetSqlServerTableSchemaColumnArrayOutput) ToDatasetSqlServerTableSchemaColumnArrayOutput() DatasetSqlServerTableSchemaColumnArrayOutput {
	return o
}

func (o DatasetSqlServerTableSchemaColumnArrayOutput) ToDatasetSqlServerTableSchemaColumnArrayOutputWithContext(ctx context.Context) DatasetSqlServerTableSchemaColumnArrayOutput {
	return o
}

func (o DatasetSqlServerTableSchemaColumnArrayOutput) Index(i pulumi.IntInput) DatasetSqlServerTableSchemaColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetSqlServerTableSchemaColumn {
		return vs[0].([]DatasetSqlServerTableSchemaColumn)[vs[1].(int)]
	}).(DatasetSqlServerTableSchemaColumnOutput)
}

type FactoryGithubConfiguration struct {
	// Specifies the GitHub account name.
	AccountName string `pulumi:"accountName"`
	// Specifies the branch of the repository to get code from.
	BranchName string `pulumi:"branchName"`
	// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com. Use https://github.com for open source repositories.
	GitUrl string `pulumi:"gitUrl"`
	// Specifies the name of the git repository.
	RepositoryName string `pulumi:"repositoryName"`
	// Specifies the root folder within the repository. Set to `/` for the top level.
	RootFolder string `pulumi:"rootFolder"`
}

type FactoryGithubConfigurationInput interface {
	pulumi.Input

	ToFactoryGithubConfigurationOutput() FactoryGithubConfigurationOutput
	ToFactoryGithubConfigurationOutputWithContext(context.Context) FactoryGithubConfigurationOutput
}

type FactoryGithubConfigurationArgs struct {
	// Specifies the GitHub account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Specifies the branch of the repository to get code from.
	BranchName pulumi.StringInput `pulumi:"branchName"`
	// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com. Use https://github.com for open source repositories.
	GitUrl pulumi.StringInput `pulumi:"gitUrl"`
	// Specifies the name of the git repository.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Specifies the root folder within the repository. Set to `/` for the top level.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
}

func (FactoryGithubConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryGithubConfiguration)(nil)).Elem()
}

func (i FactoryGithubConfigurationArgs) ToFactoryGithubConfigurationOutput() FactoryGithubConfigurationOutput {
	return i.ToFactoryGithubConfigurationOutputWithContext(context.Background())
}

func (i FactoryGithubConfigurationArgs) ToFactoryGithubConfigurationOutputWithContext(ctx context.Context) FactoryGithubConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryGithubConfigurationOutput)
}

func (i FactoryGithubConfigurationArgs) ToFactoryGithubConfigurationPtrOutput() FactoryGithubConfigurationPtrOutput {
	return i.ToFactoryGithubConfigurationPtrOutputWithContext(context.Background())
}

func (i FactoryGithubConfigurationArgs) ToFactoryGithubConfigurationPtrOutputWithContext(ctx context.Context) FactoryGithubConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryGithubConfigurationOutput).ToFactoryGithubConfigurationPtrOutputWithContext(ctx)
}

type FactoryGithubConfigurationPtrInput interface {
	pulumi.Input

	ToFactoryGithubConfigurationPtrOutput() FactoryGithubConfigurationPtrOutput
	ToFactoryGithubConfigurationPtrOutputWithContext(context.Context) FactoryGithubConfigurationPtrOutput
}

type factoryGithubConfigurationPtrType FactoryGithubConfigurationArgs

func FactoryGithubConfigurationPtr(v *FactoryGithubConfigurationArgs) FactoryGithubConfigurationPtrInput {
	return (*factoryGithubConfigurationPtrType)(v)
}

func (*factoryGithubConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryGithubConfiguration)(nil)).Elem()
}

func (i *factoryGithubConfigurationPtrType) ToFactoryGithubConfigurationPtrOutput() FactoryGithubConfigurationPtrOutput {
	return i.ToFactoryGithubConfigurationPtrOutputWithContext(context.Background())
}

func (i *factoryGithubConfigurationPtrType) ToFactoryGithubConfigurationPtrOutputWithContext(ctx context.Context) FactoryGithubConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryGithubConfigurationPtrOutput)
}

type FactoryGithubConfigurationOutput struct{ *pulumi.OutputState }

func (FactoryGithubConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryGithubConfiguration)(nil)).Elem()
}

func (o FactoryGithubConfigurationOutput) ToFactoryGithubConfigurationOutput() FactoryGithubConfigurationOutput {
	return o
}

func (o FactoryGithubConfigurationOutput) ToFactoryGithubConfigurationOutputWithContext(ctx context.Context) FactoryGithubConfigurationOutput {
	return o
}

func (o FactoryGithubConfigurationOutput) ToFactoryGithubConfigurationPtrOutput() FactoryGithubConfigurationPtrOutput {
	return o.ToFactoryGithubConfigurationPtrOutputWithContext(context.Background())
}

func (o FactoryGithubConfigurationOutput) ToFactoryGithubConfigurationPtrOutputWithContext(ctx context.Context) FactoryGithubConfigurationPtrOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) *FactoryGithubConfiguration {
		return &v
	}).(FactoryGithubConfigurationPtrOutput)
}

// Specifies the GitHub account name.
func (o FactoryGithubConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// Specifies the branch of the repository to get code from.
func (o FactoryGithubConfigurationOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.BranchName }).(pulumi.StringOutput)
}

// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com. Use https://github.com for open source repositories.
func (o FactoryGithubConfigurationOutput) GitUrl() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.GitUrl }).(pulumi.StringOutput)
}

// Specifies the name of the git repository.
func (o FactoryGithubConfigurationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Specifies the root folder within the repository. Set to `/` for the top level.
func (o FactoryGithubConfigurationOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

type FactoryGithubConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FactoryGithubConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryGithubConfiguration)(nil)).Elem()
}

func (o FactoryGithubConfigurationPtrOutput) ToFactoryGithubConfigurationPtrOutput() FactoryGithubConfigurationPtrOutput {
	return o
}

func (o FactoryGithubConfigurationPtrOutput) ToFactoryGithubConfigurationPtrOutputWithContext(ctx context.Context) FactoryGithubConfigurationPtrOutput {
	return o
}

func (o FactoryGithubConfigurationPtrOutput) Elem() FactoryGithubConfigurationOutput {
	return o.ApplyT(func(v *FactoryGithubConfiguration) FactoryGithubConfiguration { return *v }).(FactoryGithubConfigurationOutput)
}

// Specifies the GitHub account name.
func (o FactoryGithubConfigurationPtrOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// Specifies the branch of the repository to get code from.
func (o FactoryGithubConfigurationPtrOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.BranchName }).(pulumi.StringOutput)
}

// Specifies the GitHub Enterprise host name. For example: https://github.mydomain.com. Use https://github.com for open source repositories.
func (o FactoryGithubConfigurationPtrOutput) GitUrl() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.GitUrl }).(pulumi.StringOutput)
}

// Specifies the name of the git repository.
func (o FactoryGithubConfigurationPtrOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Specifies the root folder within the repository. Set to `/` for the top level.
func (o FactoryGithubConfigurationPtrOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryGithubConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

type FactoryIdentity struct {
	// The ID of the Principal (Client) in Azure Active Directory
	PrincipalId *string `pulumi:"principalId"`
	// Specifies the Tenant ID associated with the VSTS account.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the identity type of the Data Factory. At this time the only allowed value is `SystemAssigned`.
	Type string `pulumi:"type"`
}

type FactoryIdentityInput interface {
	pulumi.Input

	ToFactoryIdentityOutput() FactoryIdentityOutput
	ToFactoryIdentityOutputWithContext(context.Context) FactoryIdentityOutput
}

type FactoryIdentityArgs struct {
	// The ID of the Principal (Client) in Azure Active Directory
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// Specifies the Tenant ID associated with the VSTS account.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the identity type of the Data Factory. At this time the only allowed value is `SystemAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FactoryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return i.ToFactoryIdentityOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput)
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i FactoryIdentityArgs) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityOutput).ToFactoryIdentityPtrOutputWithContext(ctx)
}

type FactoryIdentityPtrInput interface {
	pulumi.Input

	ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput
	ToFactoryIdentityPtrOutputWithContext(context.Context) FactoryIdentityPtrOutput
}

type factoryIdentityPtrType FactoryIdentityArgs

func FactoryIdentityPtr(v *FactoryIdentityArgs) FactoryIdentityPtrInput {
	return (*factoryIdentityPtrType)(v)
}

func (*factoryIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return i.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (i *factoryIdentityPtrType) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryIdentityPtrOutput)
}

type FactoryIdentityOutput struct{ *pulumi.OutputState }

func (FactoryIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutput() FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityOutputWithContext(ctx context.Context) FactoryIdentityOutput {
	return o
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o.ToFactoryIdentityPtrOutputWithContext(context.Background())
}

func (o FactoryIdentityOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o.ApplyT(func(v FactoryIdentity) *FactoryIdentity {
		return &v
	}).(FactoryIdentityPtrOutput)
}

// The ID of the Principal (Client) in Azure Active Directory
func (o FactoryIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// Specifies the Tenant ID associated with the VSTS account.
func (o FactoryIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the identity type of the Data Factory. At this time the only allowed value is `SystemAssigned`.
func (o FactoryIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryIdentityPtrOutput struct{ *pulumi.OutputState }

func (FactoryIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryIdentity)(nil)).Elem()
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutput() FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) ToFactoryIdentityPtrOutputWithContext(ctx context.Context) FactoryIdentityPtrOutput {
	return o
}

func (o FactoryIdentityPtrOutput) Elem() FactoryIdentityOutput {
	return o.ApplyT(func(v *FactoryIdentity) FactoryIdentity { return *v }).(FactoryIdentityOutput)
}

// The ID of the Principal (Client) in Azure Active Directory
func (o FactoryIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// Specifies the Tenant ID associated with the VSTS account.
func (o FactoryIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FactoryIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the identity type of the Data Factory. At this time the only allowed value is `SystemAssigned`.
func (o FactoryIdentityPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type FactoryVstsConfiguration struct {
	// Specifies the VSTS account name.
	AccountName string `pulumi:"accountName"`
	// Specifies the branch of the repository to get code from.
	BranchName string `pulumi:"branchName"`
	// Specifies the name of the VSTS project.
	ProjectName string `pulumi:"projectName"`
	// Specifies the name of the git repository.
	RepositoryName string `pulumi:"repositoryName"`
	// Specifies the root folder within the repository. Set to `/` for the top level.
	RootFolder string `pulumi:"rootFolder"`
	// Specifies the Tenant ID associated with the VSTS account.
	TenantId string `pulumi:"tenantId"`
}

type FactoryVstsConfigurationInput interface {
	pulumi.Input

	ToFactoryVstsConfigurationOutput() FactoryVstsConfigurationOutput
	ToFactoryVstsConfigurationOutputWithContext(context.Context) FactoryVstsConfigurationOutput
}

type FactoryVstsConfigurationArgs struct {
	// Specifies the VSTS account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// Specifies the branch of the repository to get code from.
	BranchName pulumi.StringInput `pulumi:"branchName"`
	// Specifies the name of the VSTS project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Specifies the name of the git repository.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Specifies the root folder within the repository. Set to `/` for the top level.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
	// Specifies the Tenant ID associated with the VSTS account.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (FactoryVstsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVstsConfiguration)(nil)).Elem()
}

func (i FactoryVstsConfigurationArgs) ToFactoryVstsConfigurationOutput() FactoryVstsConfigurationOutput {
	return i.ToFactoryVstsConfigurationOutputWithContext(context.Background())
}

func (i FactoryVstsConfigurationArgs) ToFactoryVstsConfigurationOutputWithContext(ctx context.Context) FactoryVstsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVstsConfigurationOutput)
}

func (i FactoryVstsConfigurationArgs) ToFactoryVstsConfigurationPtrOutput() FactoryVstsConfigurationPtrOutput {
	return i.ToFactoryVstsConfigurationPtrOutputWithContext(context.Background())
}

func (i FactoryVstsConfigurationArgs) ToFactoryVstsConfigurationPtrOutputWithContext(ctx context.Context) FactoryVstsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVstsConfigurationOutput).ToFactoryVstsConfigurationPtrOutputWithContext(ctx)
}

type FactoryVstsConfigurationPtrInput interface {
	pulumi.Input

	ToFactoryVstsConfigurationPtrOutput() FactoryVstsConfigurationPtrOutput
	ToFactoryVstsConfigurationPtrOutputWithContext(context.Context) FactoryVstsConfigurationPtrOutput
}

type factoryVstsConfigurationPtrType FactoryVstsConfigurationArgs

func FactoryVstsConfigurationPtr(v *FactoryVstsConfigurationArgs) FactoryVstsConfigurationPtrInput {
	return (*factoryVstsConfigurationPtrType)(v)
}

func (*factoryVstsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVstsConfiguration)(nil)).Elem()
}

func (i *factoryVstsConfigurationPtrType) ToFactoryVstsConfigurationPtrOutput() FactoryVstsConfigurationPtrOutput {
	return i.ToFactoryVstsConfigurationPtrOutputWithContext(context.Background())
}

func (i *factoryVstsConfigurationPtrType) ToFactoryVstsConfigurationPtrOutputWithContext(ctx context.Context) FactoryVstsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryVstsConfigurationPtrOutput)
}

type FactoryVstsConfigurationOutput struct{ *pulumi.OutputState }

func (FactoryVstsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FactoryVstsConfiguration)(nil)).Elem()
}

func (o FactoryVstsConfigurationOutput) ToFactoryVstsConfigurationOutput() FactoryVstsConfigurationOutput {
	return o
}

func (o FactoryVstsConfigurationOutput) ToFactoryVstsConfigurationOutputWithContext(ctx context.Context) FactoryVstsConfigurationOutput {
	return o
}

func (o FactoryVstsConfigurationOutput) ToFactoryVstsConfigurationPtrOutput() FactoryVstsConfigurationPtrOutput {
	return o.ToFactoryVstsConfigurationPtrOutputWithContext(context.Background())
}

func (o FactoryVstsConfigurationOutput) ToFactoryVstsConfigurationPtrOutputWithContext(ctx context.Context) FactoryVstsConfigurationPtrOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) *FactoryVstsConfiguration {
		return &v
	}).(FactoryVstsConfigurationPtrOutput)
}

// Specifies the VSTS account name.
func (o FactoryVstsConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// Specifies the branch of the repository to get code from.
func (o FactoryVstsConfigurationOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.BranchName }).(pulumi.StringOutput)
}

// Specifies the name of the VSTS project.
func (o FactoryVstsConfigurationOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Specifies the name of the git repository.
func (o FactoryVstsConfigurationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Specifies the root folder within the repository. Set to `/` for the top level.
func (o FactoryVstsConfigurationOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

// Specifies the Tenant ID associated with the VSTS account.
func (o FactoryVstsConfigurationOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.TenantId }).(pulumi.StringOutput)
}

type FactoryVstsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (FactoryVstsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FactoryVstsConfiguration)(nil)).Elem()
}

func (o FactoryVstsConfigurationPtrOutput) ToFactoryVstsConfigurationPtrOutput() FactoryVstsConfigurationPtrOutput {
	return o
}

func (o FactoryVstsConfigurationPtrOutput) ToFactoryVstsConfigurationPtrOutputWithContext(ctx context.Context) FactoryVstsConfigurationPtrOutput {
	return o
}

func (o FactoryVstsConfigurationPtrOutput) Elem() FactoryVstsConfigurationOutput {
	return o.ApplyT(func(v *FactoryVstsConfiguration) FactoryVstsConfiguration { return *v }).(FactoryVstsConfigurationOutput)
}

// Specifies the VSTS account name.
func (o FactoryVstsConfigurationPtrOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// Specifies the branch of the repository to get code from.
func (o FactoryVstsConfigurationPtrOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.BranchName }).(pulumi.StringOutput)
}

// Specifies the name of the VSTS project.
func (o FactoryVstsConfigurationPtrOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Specifies the name of the git repository.
func (o FactoryVstsConfigurationPtrOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// Specifies the root folder within the repository. Set to `/` for the top level.
func (o FactoryVstsConfigurationPtrOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

// Specifies the Tenant ID associated with the VSTS account.
func (o FactoryVstsConfigurationPtrOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v FactoryVstsConfiguration) string { return v.TenantId }).(pulumi.StringOutput)
}

type IntegrationRuntimeManagedCatalogInfo struct {
	// Administrator login name for the SQL Server.
	AdministratorLogin string `pulumi:"administratorLogin"`
	// Administrator login password for the SQL Server.
	AdministratorPassword string `pulumi:"administratorPassword"`
	// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
	PricingTier *string `pulumi:"pricingTier"`
	// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
	ServerEndpoint string `pulumi:"serverEndpoint"`
}

type IntegrationRuntimeManagedCatalogInfoInput interface {
	pulumi.Input

	ToIntegrationRuntimeManagedCatalogInfoOutput() IntegrationRuntimeManagedCatalogInfoOutput
	ToIntegrationRuntimeManagedCatalogInfoOutputWithContext(context.Context) IntegrationRuntimeManagedCatalogInfoOutput
}

type IntegrationRuntimeManagedCatalogInfoArgs struct {
	// Administrator login name for the SQL Server.
	AdministratorLogin pulumi.StringInput `pulumi:"administratorLogin"`
	// Administrator login password for the SQL Server.
	AdministratorPassword pulumi.StringInput `pulumi:"administratorPassword"`
	// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
	PricingTier pulumi.StringPtrInput `pulumi:"pricingTier"`
	// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
	ServerEndpoint pulumi.StringInput `pulumi:"serverEndpoint"`
}

func (IntegrationRuntimeManagedCatalogInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeManagedCatalogInfo)(nil)).Elem()
}

func (i IntegrationRuntimeManagedCatalogInfoArgs) ToIntegrationRuntimeManagedCatalogInfoOutput() IntegrationRuntimeManagedCatalogInfoOutput {
	return i.ToIntegrationRuntimeManagedCatalogInfoOutputWithContext(context.Background())
}

func (i IntegrationRuntimeManagedCatalogInfoArgs) ToIntegrationRuntimeManagedCatalogInfoOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCatalogInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedCatalogInfoOutput)
}

func (i IntegrationRuntimeManagedCatalogInfoArgs) ToIntegrationRuntimeManagedCatalogInfoPtrOutput() IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return i.ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeManagedCatalogInfoArgs) ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedCatalogInfoOutput).ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(ctx)
}

type IntegrationRuntimeManagedCatalogInfoPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeManagedCatalogInfoPtrOutput() IntegrationRuntimeManagedCatalogInfoPtrOutput
	ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(context.Context) IntegrationRuntimeManagedCatalogInfoPtrOutput
}

type integrationRuntimeManagedCatalogInfoPtrType IntegrationRuntimeManagedCatalogInfoArgs

func IntegrationRuntimeManagedCatalogInfoPtr(v *IntegrationRuntimeManagedCatalogInfoArgs) IntegrationRuntimeManagedCatalogInfoPtrInput {
	return (*integrationRuntimeManagedCatalogInfoPtrType)(v)
}

func (*integrationRuntimeManagedCatalogInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeManagedCatalogInfo)(nil)).Elem()
}

func (i *integrationRuntimeManagedCatalogInfoPtrType) ToIntegrationRuntimeManagedCatalogInfoPtrOutput() IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return i.ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeManagedCatalogInfoPtrType) ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedCatalogInfoPtrOutput)
}

type IntegrationRuntimeManagedCatalogInfoOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeManagedCatalogInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeManagedCatalogInfo)(nil)).Elem()
}

func (o IntegrationRuntimeManagedCatalogInfoOutput) ToIntegrationRuntimeManagedCatalogInfoOutput() IntegrationRuntimeManagedCatalogInfoOutput {
	return o
}

func (o IntegrationRuntimeManagedCatalogInfoOutput) ToIntegrationRuntimeManagedCatalogInfoOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCatalogInfoOutput {
	return o
}

func (o IntegrationRuntimeManagedCatalogInfoOutput) ToIntegrationRuntimeManagedCatalogInfoPtrOutput() IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return o.ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeManagedCatalogInfoOutput) ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCatalogInfo) *IntegrationRuntimeManagedCatalogInfo {
		return &v
	}).(IntegrationRuntimeManagedCatalogInfoPtrOutput)
}

// Administrator login name for the SQL Server.
func (o IntegrationRuntimeManagedCatalogInfoOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCatalogInfo) string { return v.AdministratorLogin }).(pulumi.StringOutput)
}

// Administrator login password for the SQL Server.
func (o IntegrationRuntimeManagedCatalogInfoOutput) AdministratorPassword() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCatalogInfo) string { return v.AdministratorPassword }).(pulumi.StringOutput)
}

// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
func (o IntegrationRuntimeManagedCatalogInfoOutput) PricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCatalogInfo) *string { return v.PricingTier }).(pulumi.StringPtrOutput)
}

// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
func (o IntegrationRuntimeManagedCatalogInfoOutput) ServerEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCatalogInfo) string { return v.ServerEndpoint }).(pulumi.StringOutput)
}

type IntegrationRuntimeManagedCatalogInfoPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeManagedCatalogInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeManagedCatalogInfo)(nil)).Elem()
}

func (o IntegrationRuntimeManagedCatalogInfoPtrOutput) ToIntegrationRuntimeManagedCatalogInfoPtrOutput() IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return o
}

func (o IntegrationRuntimeManagedCatalogInfoPtrOutput) ToIntegrationRuntimeManagedCatalogInfoPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCatalogInfoPtrOutput {
	return o
}

func (o IntegrationRuntimeManagedCatalogInfoPtrOutput) Elem() IntegrationRuntimeManagedCatalogInfoOutput {
	return o.ApplyT(func(v *IntegrationRuntimeManagedCatalogInfo) IntegrationRuntimeManagedCatalogInfo { return *v }).(IntegrationRuntimeManagedCatalogInfoOutput)
}

// Administrator login name for the SQL Server.
func (o IntegrationRuntimeManagedCatalogInfoPtrOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCatalogInfo) string { return v.AdministratorLogin }).(pulumi.StringOutput)
}

// Administrator login password for the SQL Server.
func (o IntegrationRuntimeManagedCatalogInfoPtrOutput) AdministratorPassword() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCatalogInfo) string { return v.AdministratorPassword }).(pulumi.StringOutput)
}

// Pricing tier for the database that will be created for the SSIS catalog. Valid values are: `Basic`, `Standard`, `Premium` and `PremiumRS`.
func (o IntegrationRuntimeManagedCatalogInfoPtrOutput) PricingTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCatalogInfo) *string { return v.PricingTier }).(pulumi.StringPtrOutput)
}

// The endpoint of an Azure SQL Server that will be used to host the SSIS catalog.
func (o IntegrationRuntimeManagedCatalogInfoPtrOutput) ServerEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCatalogInfo) string { return v.ServerEndpoint }).(pulumi.StringOutput)
}

type IntegrationRuntimeManagedCustomSetupScript struct {
	// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
	BlobContainerUri string `pulumi:"blobContainerUri"`
	// A container SAS token that gives access to the files. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
	SasToken string `pulumi:"sasToken"`
}

type IntegrationRuntimeManagedCustomSetupScriptInput interface {
	pulumi.Input

	ToIntegrationRuntimeManagedCustomSetupScriptOutput() IntegrationRuntimeManagedCustomSetupScriptOutput
	ToIntegrationRuntimeManagedCustomSetupScriptOutputWithContext(context.Context) IntegrationRuntimeManagedCustomSetupScriptOutput
}

type IntegrationRuntimeManagedCustomSetupScriptArgs struct {
	// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
	BlobContainerUri pulumi.StringInput `pulumi:"blobContainerUri"`
	// A container SAS token that gives access to the files. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
	SasToken pulumi.StringInput `pulumi:"sasToken"`
}

func (IntegrationRuntimeManagedCustomSetupScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeManagedCustomSetupScript)(nil)).Elem()
}

func (i IntegrationRuntimeManagedCustomSetupScriptArgs) ToIntegrationRuntimeManagedCustomSetupScriptOutput() IntegrationRuntimeManagedCustomSetupScriptOutput {
	return i.ToIntegrationRuntimeManagedCustomSetupScriptOutputWithContext(context.Background())
}

func (i IntegrationRuntimeManagedCustomSetupScriptArgs) ToIntegrationRuntimeManagedCustomSetupScriptOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCustomSetupScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedCustomSetupScriptOutput)
}

func (i IntegrationRuntimeManagedCustomSetupScriptArgs) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutput() IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return i.ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeManagedCustomSetupScriptArgs) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedCustomSetupScriptOutput).ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(ctx)
}

type IntegrationRuntimeManagedCustomSetupScriptPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeManagedCustomSetupScriptPtrOutput() IntegrationRuntimeManagedCustomSetupScriptPtrOutput
	ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(context.Context) IntegrationRuntimeManagedCustomSetupScriptPtrOutput
}

type integrationRuntimeManagedCustomSetupScriptPtrType IntegrationRuntimeManagedCustomSetupScriptArgs

func IntegrationRuntimeManagedCustomSetupScriptPtr(v *IntegrationRuntimeManagedCustomSetupScriptArgs) IntegrationRuntimeManagedCustomSetupScriptPtrInput {
	return (*integrationRuntimeManagedCustomSetupScriptPtrType)(v)
}

func (*integrationRuntimeManagedCustomSetupScriptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeManagedCustomSetupScript)(nil)).Elem()
}

func (i *integrationRuntimeManagedCustomSetupScriptPtrType) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutput() IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return i.ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeManagedCustomSetupScriptPtrType) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedCustomSetupScriptPtrOutput)
}

type IntegrationRuntimeManagedCustomSetupScriptOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeManagedCustomSetupScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeManagedCustomSetupScript)(nil)).Elem()
}

func (o IntegrationRuntimeManagedCustomSetupScriptOutput) ToIntegrationRuntimeManagedCustomSetupScriptOutput() IntegrationRuntimeManagedCustomSetupScriptOutput {
	return o
}

func (o IntegrationRuntimeManagedCustomSetupScriptOutput) ToIntegrationRuntimeManagedCustomSetupScriptOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCustomSetupScriptOutput {
	return o
}

func (o IntegrationRuntimeManagedCustomSetupScriptOutput) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutput() IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return o.ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeManagedCustomSetupScriptOutput) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCustomSetupScript) *IntegrationRuntimeManagedCustomSetupScript {
		return &v
	}).(IntegrationRuntimeManagedCustomSetupScriptPtrOutput)
}

// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
func (o IntegrationRuntimeManagedCustomSetupScriptOutput) BlobContainerUri() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCustomSetupScript) string { return v.BlobContainerUri }).(pulumi.StringOutput)
}

// A container SAS token that gives access to the files. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
func (o IntegrationRuntimeManagedCustomSetupScriptOutput) SasToken() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCustomSetupScript) string { return v.SasToken }).(pulumi.StringOutput)
}

type IntegrationRuntimeManagedCustomSetupScriptPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeManagedCustomSetupScriptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeManagedCustomSetupScript)(nil)).Elem()
}

func (o IntegrationRuntimeManagedCustomSetupScriptPtrOutput) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutput() IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return o
}

func (o IntegrationRuntimeManagedCustomSetupScriptPtrOutput) ToIntegrationRuntimeManagedCustomSetupScriptPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedCustomSetupScriptPtrOutput {
	return o
}

func (o IntegrationRuntimeManagedCustomSetupScriptPtrOutput) Elem() IntegrationRuntimeManagedCustomSetupScriptOutput {
	return o.ApplyT(func(v *IntegrationRuntimeManagedCustomSetupScript) IntegrationRuntimeManagedCustomSetupScript {
		return *v
	}).(IntegrationRuntimeManagedCustomSetupScriptOutput)
}

// The blob endpoint for the container which contains a custom setup script that will be run on every node on startup. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
func (o IntegrationRuntimeManagedCustomSetupScriptPtrOutput) BlobContainerUri() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCustomSetupScript) string { return v.BlobContainerUri }).(pulumi.StringOutput)
}

// A container SAS token that gives access to the files. See [https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup](https://docs.microsoft.com/en-us/azure/data-factory/how-to-configure-azure-ssis-ir-custom-setup) for more information.
func (o IntegrationRuntimeManagedCustomSetupScriptPtrOutput) SasToken() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedCustomSetupScript) string { return v.SasToken }).(pulumi.StringOutput)
}

type IntegrationRuntimeManagedVnetIntegration struct {
	// Name of the subnet to which the nodes of the Managed Integration Runtime will be added.
	SubnetName string `pulumi:"subnetName"`
	// ID of the virtual network to which the nodes of the Managed Integration Runtime will be added.
	VnetId string `pulumi:"vnetId"`
}

type IntegrationRuntimeManagedVnetIntegrationInput interface {
	pulumi.Input

	ToIntegrationRuntimeManagedVnetIntegrationOutput() IntegrationRuntimeManagedVnetIntegrationOutput
	ToIntegrationRuntimeManagedVnetIntegrationOutputWithContext(context.Context) IntegrationRuntimeManagedVnetIntegrationOutput
}

type IntegrationRuntimeManagedVnetIntegrationArgs struct {
	// Name of the subnet to which the nodes of the Managed Integration Runtime will be added.
	SubnetName pulumi.StringInput `pulumi:"subnetName"`
	// ID of the virtual network to which the nodes of the Managed Integration Runtime will be added.
	VnetId pulumi.StringInput `pulumi:"vnetId"`
}

func (IntegrationRuntimeManagedVnetIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeManagedVnetIntegration)(nil)).Elem()
}

func (i IntegrationRuntimeManagedVnetIntegrationArgs) ToIntegrationRuntimeManagedVnetIntegrationOutput() IntegrationRuntimeManagedVnetIntegrationOutput {
	return i.ToIntegrationRuntimeManagedVnetIntegrationOutputWithContext(context.Background())
}

func (i IntegrationRuntimeManagedVnetIntegrationArgs) ToIntegrationRuntimeManagedVnetIntegrationOutputWithContext(ctx context.Context) IntegrationRuntimeManagedVnetIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedVnetIntegrationOutput)
}

func (i IntegrationRuntimeManagedVnetIntegrationArgs) ToIntegrationRuntimeManagedVnetIntegrationPtrOutput() IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return i.ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(context.Background())
}

func (i IntegrationRuntimeManagedVnetIntegrationArgs) ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedVnetIntegrationOutput).ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(ctx)
}

type IntegrationRuntimeManagedVnetIntegrationPtrInput interface {
	pulumi.Input

	ToIntegrationRuntimeManagedVnetIntegrationPtrOutput() IntegrationRuntimeManagedVnetIntegrationPtrOutput
	ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(context.Context) IntegrationRuntimeManagedVnetIntegrationPtrOutput
}

type integrationRuntimeManagedVnetIntegrationPtrType IntegrationRuntimeManagedVnetIntegrationArgs

func IntegrationRuntimeManagedVnetIntegrationPtr(v *IntegrationRuntimeManagedVnetIntegrationArgs) IntegrationRuntimeManagedVnetIntegrationPtrInput {
	return (*integrationRuntimeManagedVnetIntegrationPtrType)(v)
}

func (*integrationRuntimeManagedVnetIntegrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeManagedVnetIntegration)(nil)).Elem()
}

func (i *integrationRuntimeManagedVnetIntegrationPtrType) ToIntegrationRuntimeManagedVnetIntegrationPtrOutput() IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return i.ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(context.Background())
}

func (i *integrationRuntimeManagedVnetIntegrationPtrType) ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeManagedVnetIntegrationPtrOutput)
}

type IntegrationRuntimeManagedVnetIntegrationOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeManagedVnetIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeManagedVnetIntegration)(nil)).Elem()
}

func (o IntegrationRuntimeManagedVnetIntegrationOutput) ToIntegrationRuntimeManagedVnetIntegrationOutput() IntegrationRuntimeManagedVnetIntegrationOutput {
	return o
}

func (o IntegrationRuntimeManagedVnetIntegrationOutput) ToIntegrationRuntimeManagedVnetIntegrationOutputWithContext(ctx context.Context) IntegrationRuntimeManagedVnetIntegrationOutput {
	return o
}

func (o IntegrationRuntimeManagedVnetIntegrationOutput) ToIntegrationRuntimeManagedVnetIntegrationPtrOutput() IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return o.ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(context.Background())
}

func (o IntegrationRuntimeManagedVnetIntegrationOutput) ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedVnetIntegration) *IntegrationRuntimeManagedVnetIntegration {
		return &v
	}).(IntegrationRuntimeManagedVnetIntegrationPtrOutput)
}

// Name of the subnet to which the nodes of the Managed Integration Runtime will be added.
func (o IntegrationRuntimeManagedVnetIntegrationOutput) SubnetName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedVnetIntegration) string { return v.SubnetName }).(pulumi.StringOutput)
}

// ID of the virtual network to which the nodes of the Managed Integration Runtime will be added.
func (o IntegrationRuntimeManagedVnetIntegrationOutput) VnetId() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedVnetIntegration) string { return v.VnetId }).(pulumi.StringOutput)
}

type IntegrationRuntimeManagedVnetIntegrationPtrOutput struct{ *pulumi.OutputState }

func (IntegrationRuntimeManagedVnetIntegrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRuntimeManagedVnetIntegration)(nil)).Elem()
}

func (o IntegrationRuntimeManagedVnetIntegrationPtrOutput) ToIntegrationRuntimeManagedVnetIntegrationPtrOutput() IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return o
}

func (o IntegrationRuntimeManagedVnetIntegrationPtrOutput) ToIntegrationRuntimeManagedVnetIntegrationPtrOutputWithContext(ctx context.Context) IntegrationRuntimeManagedVnetIntegrationPtrOutput {
	return o
}

func (o IntegrationRuntimeManagedVnetIntegrationPtrOutput) Elem() IntegrationRuntimeManagedVnetIntegrationOutput {
	return o.ApplyT(func(v *IntegrationRuntimeManagedVnetIntegration) IntegrationRuntimeManagedVnetIntegration { return *v }).(IntegrationRuntimeManagedVnetIntegrationOutput)
}

// Name of the subnet to which the nodes of the Managed Integration Runtime will be added.
func (o IntegrationRuntimeManagedVnetIntegrationPtrOutput) SubnetName() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedVnetIntegration) string { return v.SubnetName }).(pulumi.StringOutput)
}

// ID of the virtual network to which the nodes of the Managed Integration Runtime will be added.
func (o IntegrationRuntimeManagedVnetIntegrationPtrOutput) VnetId() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationRuntimeManagedVnetIntegration) string { return v.VnetId }).(pulumi.StringOutput)
}

type GetFactoryGithubConfiguration struct {
	// The VSTS account name.
	AccountName string `pulumi:"accountName"`
	// The branch of the repository to get code from.
	BranchName string `pulumi:"branchName"`
	// The GitHub Enterprise host name.
	GitUrl string `pulumi:"gitUrl"`
	// The name of the git repository.
	RepositoryName string `pulumi:"repositoryName"`
	// The root folder within the repository.
	RootFolder string `pulumi:"rootFolder"`
}

type GetFactoryGithubConfigurationInput interface {
	pulumi.Input

	ToGetFactoryGithubConfigurationOutput() GetFactoryGithubConfigurationOutput
	ToGetFactoryGithubConfigurationOutputWithContext(context.Context) GetFactoryGithubConfigurationOutput
}

type GetFactoryGithubConfigurationArgs struct {
	// The VSTS account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The branch of the repository to get code from.
	BranchName pulumi.StringInput `pulumi:"branchName"`
	// The GitHub Enterprise host name.
	GitUrl pulumi.StringInput `pulumi:"gitUrl"`
	// The name of the git repository.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// The root folder within the repository.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
}

func (GetFactoryGithubConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFactoryGithubConfiguration)(nil)).Elem()
}

func (i GetFactoryGithubConfigurationArgs) ToGetFactoryGithubConfigurationOutput() GetFactoryGithubConfigurationOutput {
	return i.ToGetFactoryGithubConfigurationOutputWithContext(context.Background())
}

func (i GetFactoryGithubConfigurationArgs) ToGetFactoryGithubConfigurationOutputWithContext(ctx context.Context) GetFactoryGithubConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFactoryGithubConfigurationOutput)
}

type GetFactoryGithubConfigurationArrayInput interface {
	pulumi.Input

	ToGetFactoryGithubConfigurationArrayOutput() GetFactoryGithubConfigurationArrayOutput
	ToGetFactoryGithubConfigurationArrayOutputWithContext(context.Context) GetFactoryGithubConfigurationArrayOutput
}

type GetFactoryGithubConfigurationArray []GetFactoryGithubConfigurationInput

func (GetFactoryGithubConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFactoryGithubConfiguration)(nil)).Elem()
}

func (i GetFactoryGithubConfigurationArray) ToGetFactoryGithubConfigurationArrayOutput() GetFactoryGithubConfigurationArrayOutput {
	return i.ToGetFactoryGithubConfigurationArrayOutputWithContext(context.Background())
}

func (i GetFactoryGithubConfigurationArray) ToGetFactoryGithubConfigurationArrayOutputWithContext(ctx context.Context) GetFactoryGithubConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFactoryGithubConfigurationArrayOutput)
}

type GetFactoryGithubConfigurationOutput struct{ *pulumi.OutputState }

func (GetFactoryGithubConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFactoryGithubConfiguration)(nil)).Elem()
}

func (o GetFactoryGithubConfigurationOutput) ToGetFactoryGithubConfigurationOutput() GetFactoryGithubConfigurationOutput {
	return o
}

func (o GetFactoryGithubConfigurationOutput) ToGetFactoryGithubConfigurationOutputWithContext(ctx context.Context) GetFactoryGithubConfigurationOutput {
	return o
}

// The VSTS account name.
func (o GetFactoryGithubConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryGithubConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// The branch of the repository to get code from.
func (o GetFactoryGithubConfigurationOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryGithubConfiguration) string { return v.BranchName }).(pulumi.StringOutput)
}

// The GitHub Enterprise host name.
func (o GetFactoryGithubConfigurationOutput) GitUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryGithubConfiguration) string { return v.GitUrl }).(pulumi.StringOutput)
}

// The name of the git repository.
func (o GetFactoryGithubConfigurationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryGithubConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// The root folder within the repository.
func (o GetFactoryGithubConfigurationOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryGithubConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

type GetFactoryGithubConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetFactoryGithubConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFactoryGithubConfiguration)(nil)).Elem()
}

func (o GetFactoryGithubConfigurationArrayOutput) ToGetFactoryGithubConfigurationArrayOutput() GetFactoryGithubConfigurationArrayOutput {
	return o
}

func (o GetFactoryGithubConfigurationArrayOutput) ToGetFactoryGithubConfigurationArrayOutputWithContext(ctx context.Context) GetFactoryGithubConfigurationArrayOutput {
	return o
}

func (o GetFactoryGithubConfigurationArrayOutput) Index(i pulumi.IntInput) GetFactoryGithubConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFactoryGithubConfiguration {
		return vs[0].([]GetFactoryGithubConfiguration)[vs[1].(int)]
	}).(GetFactoryGithubConfigurationOutput)
}

type GetFactoryIdentity struct {
	// The ID of the Principal (Client) in Azure Active Directory.
	PrincipalId string `pulumi:"principalId"`
	// The Tenant ID associated with the VSTS account.
	TenantId string `pulumi:"tenantId"`
	// The identity type of the Data Factory.
	Type string `pulumi:"type"`
}

type GetFactoryIdentityInput interface {
	pulumi.Input

	ToGetFactoryIdentityOutput() GetFactoryIdentityOutput
	ToGetFactoryIdentityOutputWithContext(context.Context) GetFactoryIdentityOutput
}

type GetFactoryIdentityArgs struct {
	// The ID of the Principal (Client) in Azure Active Directory.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Tenant ID associated with the VSTS account.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// The identity type of the Data Factory.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetFactoryIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFactoryIdentity)(nil)).Elem()
}

func (i GetFactoryIdentityArgs) ToGetFactoryIdentityOutput() GetFactoryIdentityOutput {
	return i.ToGetFactoryIdentityOutputWithContext(context.Background())
}

func (i GetFactoryIdentityArgs) ToGetFactoryIdentityOutputWithContext(ctx context.Context) GetFactoryIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFactoryIdentityOutput)
}

type GetFactoryIdentityArrayInput interface {
	pulumi.Input

	ToGetFactoryIdentityArrayOutput() GetFactoryIdentityArrayOutput
	ToGetFactoryIdentityArrayOutputWithContext(context.Context) GetFactoryIdentityArrayOutput
}

type GetFactoryIdentityArray []GetFactoryIdentityInput

func (GetFactoryIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFactoryIdentity)(nil)).Elem()
}

func (i GetFactoryIdentityArray) ToGetFactoryIdentityArrayOutput() GetFactoryIdentityArrayOutput {
	return i.ToGetFactoryIdentityArrayOutputWithContext(context.Background())
}

func (i GetFactoryIdentityArray) ToGetFactoryIdentityArrayOutputWithContext(ctx context.Context) GetFactoryIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFactoryIdentityArrayOutput)
}

type GetFactoryIdentityOutput struct{ *pulumi.OutputState }

func (GetFactoryIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFactoryIdentity)(nil)).Elem()
}

func (o GetFactoryIdentityOutput) ToGetFactoryIdentityOutput() GetFactoryIdentityOutput {
	return o
}

func (o GetFactoryIdentityOutput) ToGetFactoryIdentityOutputWithContext(ctx context.Context) GetFactoryIdentityOutput {
	return o
}

// The ID of the Principal (Client) in Azure Active Directory.
func (o GetFactoryIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Tenant ID associated with the VSTS account.
func (o GetFactoryIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type of the Data Factory.
func (o GetFactoryIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetFactoryIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetFactoryIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFactoryIdentity)(nil)).Elem()
}

func (o GetFactoryIdentityArrayOutput) ToGetFactoryIdentityArrayOutput() GetFactoryIdentityArrayOutput {
	return o
}

func (o GetFactoryIdentityArrayOutput) ToGetFactoryIdentityArrayOutputWithContext(ctx context.Context) GetFactoryIdentityArrayOutput {
	return o
}

func (o GetFactoryIdentityArrayOutput) Index(i pulumi.IntInput) GetFactoryIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFactoryIdentity {
		return vs[0].([]GetFactoryIdentity)[vs[1].(int)]
	}).(GetFactoryIdentityOutput)
}

type GetFactoryVstsConfiguration struct {
	// The VSTS account name.
	AccountName string `pulumi:"accountName"`
	// The branch of the repository to get code from.
	BranchName string `pulumi:"branchName"`
	// The name of the VSTS project.
	ProjectName string `pulumi:"projectName"`
	// The name of the git repository.
	RepositoryName string `pulumi:"repositoryName"`
	// The root folder within the repository.
	RootFolder string `pulumi:"rootFolder"`
	// The Tenant ID associated with the VSTS account.
	TenantId string `pulumi:"tenantId"`
}

type GetFactoryVstsConfigurationInput interface {
	pulumi.Input

	ToGetFactoryVstsConfigurationOutput() GetFactoryVstsConfigurationOutput
	ToGetFactoryVstsConfigurationOutputWithContext(context.Context) GetFactoryVstsConfigurationOutput
}

type GetFactoryVstsConfigurationArgs struct {
	// The VSTS account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The branch of the repository to get code from.
	BranchName pulumi.StringInput `pulumi:"branchName"`
	// The name of the VSTS project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The name of the git repository.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// The root folder within the repository.
	RootFolder pulumi.StringInput `pulumi:"rootFolder"`
	// The Tenant ID associated with the VSTS account.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (GetFactoryVstsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFactoryVstsConfiguration)(nil)).Elem()
}

func (i GetFactoryVstsConfigurationArgs) ToGetFactoryVstsConfigurationOutput() GetFactoryVstsConfigurationOutput {
	return i.ToGetFactoryVstsConfigurationOutputWithContext(context.Background())
}

func (i GetFactoryVstsConfigurationArgs) ToGetFactoryVstsConfigurationOutputWithContext(ctx context.Context) GetFactoryVstsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFactoryVstsConfigurationOutput)
}

type GetFactoryVstsConfigurationArrayInput interface {
	pulumi.Input

	ToGetFactoryVstsConfigurationArrayOutput() GetFactoryVstsConfigurationArrayOutput
	ToGetFactoryVstsConfigurationArrayOutputWithContext(context.Context) GetFactoryVstsConfigurationArrayOutput
}

type GetFactoryVstsConfigurationArray []GetFactoryVstsConfigurationInput

func (GetFactoryVstsConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFactoryVstsConfiguration)(nil)).Elem()
}

func (i GetFactoryVstsConfigurationArray) ToGetFactoryVstsConfigurationArrayOutput() GetFactoryVstsConfigurationArrayOutput {
	return i.ToGetFactoryVstsConfigurationArrayOutputWithContext(context.Background())
}

func (i GetFactoryVstsConfigurationArray) ToGetFactoryVstsConfigurationArrayOutputWithContext(ctx context.Context) GetFactoryVstsConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFactoryVstsConfigurationArrayOutput)
}

type GetFactoryVstsConfigurationOutput struct{ *pulumi.OutputState }

func (GetFactoryVstsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFactoryVstsConfiguration)(nil)).Elem()
}

func (o GetFactoryVstsConfigurationOutput) ToGetFactoryVstsConfigurationOutput() GetFactoryVstsConfigurationOutput {
	return o
}

func (o GetFactoryVstsConfigurationOutput) ToGetFactoryVstsConfigurationOutputWithContext(ctx context.Context) GetFactoryVstsConfigurationOutput {
	return o
}

// The VSTS account name.
func (o GetFactoryVstsConfigurationOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryVstsConfiguration) string { return v.AccountName }).(pulumi.StringOutput)
}

// The branch of the repository to get code from.
func (o GetFactoryVstsConfigurationOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryVstsConfiguration) string { return v.BranchName }).(pulumi.StringOutput)
}

// The name of the VSTS project.
func (o GetFactoryVstsConfigurationOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryVstsConfiguration) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The name of the git repository.
func (o GetFactoryVstsConfigurationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryVstsConfiguration) string { return v.RepositoryName }).(pulumi.StringOutput)
}

// The root folder within the repository.
func (o GetFactoryVstsConfigurationOutput) RootFolder() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryVstsConfiguration) string { return v.RootFolder }).(pulumi.StringOutput)
}

// The Tenant ID associated with the VSTS account.
func (o GetFactoryVstsConfigurationOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFactoryVstsConfiguration) string { return v.TenantId }).(pulumi.StringOutput)
}

type GetFactoryVstsConfigurationArrayOutput struct{ *pulumi.OutputState }

func (GetFactoryVstsConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFactoryVstsConfiguration)(nil)).Elem()
}

func (o GetFactoryVstsConfigurationArrayOutput) ToGetFactoryVstsConfigurationArrayOutput() GetFactoryVstsConfigurationArrayOutput {
	return o
}

func (o GetFactoryVstsConfigurationArrayOutput) ToGetFactoryVstsConfigurationArrayOutputWithContext(ctx context.Context) GetFactoryVstsConfigurationArrayOutput {
	return o
}

func (o GetFactoryVstsConfigurationArrayOutput) Index(i pulumi.IntInput) GetFactoryVstsConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFactoryVstsConfiguration {
		return vs[0].([]GetFactoryVstsConfiguration)[vs[1].(int)]
	}).(GetFactoryVstsConfigurationOutput)
}

func init() {
	pulumi.RegisterOutputType(DatasetMysqlSchemaColumnOutput{})
	pulumi.RegisterOutputType(DatasetMysqlSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(DatasetPostgresqlSchemaColumnOutput{})
	pulumi.RegisterOutputType(DatasetPostgresqlSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(DatasetSqlServerTableSchemaColumnOutput{})
	pulumi.RegisterOutputType(DatasetSqlServerTableSchemaColumnArrayOutput{})
	pulumi.RegisterOutputType(FactoryGithubConfigurationOutput{})
	pulumi.RegisterOutputType(FactoryGithubConfigurationPtrOutput{})
	pulumi.RegisterOutputType(FactoryIdentityOutput{})
	pulumi.RegisterOutputType(FactoryIdentityPtrOutput{})
	pulumi.RegisterOutputType(FactoryVstsConfigurationOutput{})
	pulumi.RegisterOutputType(FactoryVstsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeManagedCatalogInfoOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeManagedCatalogInfoPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeManagedCustomSetupScriptOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeManagedCustomSetupScriptPtrOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeManagedVnetIntegrationOutput{})
	pulumi.RegisterOutputType(IntegrationRuntimeManagedVnetIntegrationPtrOutput{})
	pulumi.RegisterOutputType(GetFactoryGithubConfigurationOutput{})
	pulumi.RegisterOutputType(GetFactoryGithubConfigurationArrayOutput{})
	pulumi.RegisterOutputType(GetFactoryIdentityOutput{})
	pulumi.RegisterOutputType(GetFactoryIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetFactoryVstsConfigurationOutput{})
	pulumi.RegisterOutputType(GetFactoryVstsConfigurationArrayOutput{})
}
