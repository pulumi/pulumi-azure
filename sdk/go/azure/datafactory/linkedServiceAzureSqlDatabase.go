// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linked Service (connection) between Azure SQL Database and Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewLinkedServiceAzureSqlDatabase(ctx, "exampleLinkedServiceAzureSqlDatabase", &datafactory.LinkedServiceAzureSqlDatabaseArgs{
//				DataFactoryId:    exampleFactory.ID(),
//				ConnectionString: pulumi.String("data source=serverhostname;initial catalog=master;user id=testUser;Password=test;integrated security=False;encrypt=True;connection timeout=30"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Factory Azure SQL Database Linked Service's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datafactory/linkedServiceAzureSqlDatabase:LinkedServiceAzureSqlDatabase example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
//
// ```
type LinkedServiceAzureSqlDatabase struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Linked Service Azure SQL Database.
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service Azure SQL Database.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The connection string in which to authenticate with Azure SQL Database. Exactly one of either `connectionString` or `keyVaultConnectionString` is required.
	ConnectionString pulumi.StringPtrOutput `pulumi:"connectionString"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service Azure SQL Database.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service Azure SQL Database.
	IntegrationRuntimeName pulumi.StringPtrOutput `pulumi:"integrationRuntimeName"`
	// A `keyVaultConnectionString` block as defined below. Use this argument to store Azure SQL Database connection string in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. Exactly one of either `connectionString` or `keyVaultConnectionString` is required.
	KeyVaultConnectionString LinkedServiceAzureSqlDatabaseKeyVaultConnectionStringPtrOutput `pulumi:"keyVaultConnectionString"`
	// A `keyVaultPassword` block as defined below. Use this argument to store SQL Server password in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	KeyVaultPassword LinkedServiceAzureSqlDatabaseKeyVaultPasswordPtrOutput `pulumi:"keyVaultPassword"`
	// Specifies the name of the Data Factory Linked Service Azure SQL Database. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service Azure SQL Database.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// The service principal id in which to authenticate against the Azure SQL Database. Required if `servicePrincipalKey` is set.
	ServicePrincipalId pulumi.StringPtrOutput `pulumi:"servicePrincipalId"`
	// The service principal key in which to authenticate against the Azure SQL Database. Required if `servicePrincipalId` is set.
	ServicePrincipalKey pulumi.StringPtrOutput `pulumi:"servicePrincipalKey"`
	// The tenant id or name in which to authenticate against the Azure SQL Database.
	TenantId pulumi.StringPtrOutput `pulumi:"tenantId"`
	// Whether to use the Data Factory's managed identity to authenticate against the Azure SQL Database. Incompatible with `servicePrincipalId` and `servicePrincipalKey`
	UseManagedIdentity pulumi.BoolPtrOutput `pulumi:"useManagedIdentity"`
}

// NewLinkedServiceAzureSqlDatabase registers a new resource with the given unique name, arguments, and options.
func NewLinkedServiceAzureSqlDatabase(ctx *pulumi.Context,
	name string, args *LinkedServiceAzureSqlDatabaseArgs, opts ...pulumi.ResourceOption) (*LinkedServiceAzureSqlDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LinkedServiceAzureSqlDatabase
	err := ctx.RegisterResource("azure:datafactory/linkedServiceAzureSqlDatabase:LinkedServiceAzureSqlDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedServiceAzureSqlDatabase gets an existing LinkedServiceAzureSqlDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedServiceAzureSqlDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedServiceAzureSqlDatabaseState, opts ...pulumi.ResourceOption) (*LinkedServiceAzureSqlDatabase, error) {
	var resource LinkedServiceAzureSqlDatabase
	err := ctx.ReadResource("azure:datafactory/linkedServiceAzureSqlDatabase:LinkedServiceAzureSqlDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedServiceAzureSqlDatabase resources.
type linkedServiceAzureSqlDatabaseState struct {
	// A map of additional properties to associate with the Data Factory Linked Service Azure SQL Database.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service Azure SQL Database.
	Annotations []string `pulumi:"annotations"`
	// The connection string in which to authenticate with Azure SQL Database. Exactly one of either `connectionString` or `keyVaultConnectionString` is required.
	ConnectionString *string `pulumi:"connectionString"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service Azure SQL Database.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service Azure SQL Database.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// A `keyVaultConnectionString` block as defined below. Use this argument to store Azure SQL Database connection string in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. Exactly one of either `connectionString` or `keyVaultConnectionString` is required.
	KeyVaultConnectionString *LinkedServiceAzureSqlDatabaseKeyVaultConnectionString `pulumi:"keyVaultConnectionString"`
	// A `keyVaultPassword` block as defined below. Use this argument to store SQL Server password in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	KeyVaultPassword *LinkedServiceAzureSqlDatabaseKeyVaultPassword `pulumi:"keyVaultPassword"`
	// Specifies the name of the Data Factory Linked Service Azure SQL Database. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service Azure SQL Database.
	Parameters map[string]string `pulumi:"parameters"`
	// The service principal id in which to authenticate against the Azure SQL Database. Required if `servicePrincipalKey` is set.
	ServicePrincipalId *string `pulumi:"servicePrincipalId"`
	// The service principal key in which to authenticate against the Azure SQL Database. Required if `servicePrincipalId` is set.
	ServicePrincipalKey *string `pulumi:"servicePrincipalKey"`
	// The tenant id or name in which to authenticate against the Azure SQL Database.
	TenantId *string `pulumi:"tenantId"`
	// Whether to use the Data Factory's managed identity to authenticate against the Azure SQL Database. Incompatible with `servicePrincipalId` and `servicePrincipalKey`
	UseManagedIdentity *bool `pulumi:"useManagedIdentity"`
}

type LinkedServiceAzureSqlDatabaseState struct {
	// A map of additional properties to associate with the Data Factory Linked Service Azure SQL Database.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service Azure SQL Database.
	Annotations pulumi.StringArrayInput
	// The connection string in which to authenticate with Azure SQL Database. Exactly one of either `connectionString` or `keyVaultConnectionString` is required.
	ConnectionString pulumi.StringPtrInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The description for the Data Factory Linked Service Azure SQL Database.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service Azure SQL Database.
	IntegrationRuntimeName pulumi.StringPtrInput
	// A `keyVaultConnectionString` block as defined below. Use this argument to store Azure SQL Database connection string in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. Exactly one of either `connectionString` or `keyVaultConnectionString` is required.
	KeyVaultConnectionString LinkedServiceAzureSqlDatabaseKeyVaultConnectionStringPtrInput
	// A `keyVaultPassword` block as defined below. Use this argument to store SQL Server password in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	KeyVaultPassword LinkedServiceAzureSqlDatabaseKeyVaultPasswordPtrInput
	// Specifies the name of the Data Factory Linked Service Azure SQL Database. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service Azure SQL Database.
	Parameters pulumi.StringMapInput
	// The service principal id in which to authenticate against the Azure SQL Database. Required if `servicePrincipalKey` is set.
	ServicePrincipalId pulumi.StringPtrInput
	// The service principal key in which to authenticate against the Azure SQL Database. Required if `servicePrincipalId` is set.
	ServicePrincipalKey pulumi.StringPtrInput
	// The tenant id or name in which to authenticate against the Azure SQL Database.
	TenantId pulumi.StringPtrInput
	// Whether to use the Data Factory's managed identity to authenticate against the Azure SQL Database. Incompatible with `servicePrincipalId` and `servicePrincipalKey`
	UseManagedIdentity pulumi.BoolPtrInput
}

func (LinkedServiceAzureSqlDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceAzureSqlDatabaseState)(nil)).Elem()
}

type linkedServiceAzureSqlDatabaseArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service Azure SQL Database.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service Azure SQL Database.
	Annotations []string `pulumi:"annotations"`
	// The connection string in which to authenticate with Azure SQL Database. Exactly one of either `connectionString` or `keyVaultConnectionString` is required.
	ConnectionString *string `pulumi:"connectionString"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service Azure SQL Database.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service Azure SQL Database.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// A `keyVaultConnectionString` block as defined below. Use this argument to store Azure SQL Database connection string in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. Exactly one of either `connectionString` or `keyVaultConnectionString` is required.
	KeyVaultConnectionString *LinkedServiceAzureSqlDatabaseKeyVaultConnectionString `pulumi:"keyVaultConnectionString"`
	// A `keyVaultPassword` block as defined below. Use this argument to store SQL Server password in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	KeyVaultPassword *LinkedServiceAzureSqlDatabaseKeyVaultPassword `pulumi:"keyVaultPassword"`
	// Specifies the name of the Data Factory Linked Service Azure SQL Database. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service Azure SQL Database.
	Parameters map[string]string `pulumi:"parameters"`
	// The service principal id in which to authenticate against the Azure SQL Database. Required if `servicePrincipalKey` is set.
	ServicePrincipalId *string `pulumi:"servicePrincipalId"`
	// The service principal key in which to authenticate against the Azure SQL Database. Required if `servicePrincipalId` is set.
	ServicePrincipalKey *string `pulumi:"servicePrincipalKey"`
	// The tenant id or name in which to authenticate against the Azure SQL Database.
	TenantId *string `pulumi:"tenantId"`
	// Whether to use the Data Factory's managed identity to authenticate against the Azure SQL Database. Incompatible with `servicePrincipalId` and `servicePrincipalKey`
	UseManagedIdentity *bool `pulumi:"useManagedIdentity"`
}

// The set of arguments for constructing a LinkedServiceAzureSqlDatabase resource.
type LinkedServiceAzureSqlDatabaseArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service Azure SQL Database.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service Azure SQL Database.
	Annotations pulumi.StringArrayInput
	// The connection string in which to authenticate with Azure SQL Database. Exactly one of either `connectionString` or `keyVaultConnectionString` is required.
	ConnectionString pulumi.StringPtrInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// The description for the Data Factory Linked Service Azure SQL Database.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service Azure SQL Database.
	IntegrationRuntimeName pulumi.StringPtrInput
	// A `keyVaultConnectionString` block as defined below. Use this argument to store Azure SQL Database connection string in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. Exactly one of either `connectionString` or `keyVaultConnectionString` is required.
	KeyVaultConnectionString LinkedServiceAzureSqlDatabaseKeyVaultConnectionStringPtrInput
	// A `keyVaultPassword` block as defined below. Use this argument to store SQL Server password in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	KeyVaultPassword LinkedServiceAzureSqlDatabaseKeyVaultPasswordPtrInput
	// Specifies the name of the Data Factory Linked Service Azure SQL Database. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service Azure SQL Database.
	Parameters pulumi.StringMapInput
	// The service principal id in which to authenticate against the Azure SQL Database. Required if `servicePrincipalKey` is set.
	ServicePrincipalId pulumi.StringPtrInput
	// The service principal key in which to authenticate against the Azure SQL Database. Required if `servicePrincipalId` is set.
	ServicePrincipalKey pulumi.StringPtrInput
	// The tenant id or name in which to authenticate against the Azure SQL Database.
	TenantId pulumi.StringPtrInput
	// Whether to use the Data Factory's managed identity to authenticate against the Azure SQL Database. Incompatible with `servicePrincipalId` and `servicePrincipalKey`
	UseManagedIdentity pulumi.BoolPtrInput
}

func (LinkedServiceAzureSqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceAzureSqlDatabaseArgs)(nil)).Elem()
}

type LinkedServiceAzureSqlDatabaseInput interface {
	pulumi.Input

	ToLinkedServiceAzureSqlDatabaseOutput() LinkedServiceAzureSqlDatabaseOutput
	ToLinkedServiceAzureSqlDatabaseOutputWithContext(ctx context.Context) LinkedServiceAzureSqlDatabaseOutput
}

func (*LinkedServiceAzureSqlDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceAzureSqlDatabase)(nil)).Elem()
}

func (i *LinkedServiceAzureSqlDatabase) ToLinkedServiceAzureSqlDatabaseOutput() LinkedServiceAzureSqlDatabaseOutput {
	return i.ToLinkedServiceAzureSqlDatabaseOutputWithContext(context.Background())
}

func (i *LinkedServiceAzureSqlDatabase) ToLinkedServiceAzureSqlDatabaseOutputWithContext(ctx context.Context) LinkedServiceAzureSqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceAzureSqlDatabaseOutput)
}

// LinkedServiceAzureSqlDatabaseArrayInput is an input type that accepts LinkedServiceAzureSqlDatabaseArray and LinkedServiceAzureSqlDatabaseArrayOutput values.
// You can construct a concrete instance of `LinkedServiceAzureSqlDatabaseArrayInput` via:
//
//	LinkedServiceAzureSqlDatabaseArray{ LinkedServiceAzureSqlDatabaseArgs{...} }
type LinkedServiceAzureSqlDatabaseArrayInput interface {
	pulumi.Input

	ToLinkedServiceAzureSqlDatabaseArrayOutput() LinkedServiceAzureSqlDatabaseArrayOutput
	ToLinkedServiceAzureSqlDatabaseArrayOutputWithContext(context.Context) LinkedServiceAzureSqlDatabaseArrayOutput
}

type LinkedServiceAzureSqlDatabaseArray []LinkedServiceAzureSqlDatabaseInput

func (LinkedServiceAzureSqlDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceAzureSqlDatabase)(nil)).Elem()
}

func (i LinkedServiceAzureSqlDatabaseArray) ToLinkedServiceAzureSqlDatabaseArrayOutput() LinkedServiceAzureSqlDatabaseArrayOutput {
	return i.ToLinkedServiceAzureSqlDatabaseArrayOutputWithContext(context.Background())
}

func (i LinkedServiceAzureSqlDatabaseArray) ToLinkedServiceAzureSqlDatabaseArrayOutputWithContext(ctx context.Context) LinkedServiceAzureSqlDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceAzureSqlDatabaseArrayOutput)
}

// LinkedServiceAzureSqlDatabaseMapInput is an input type that accepts LinkedServiceAzureSqlDatabaseMap and LinkedServiceAzureSqlDatabaseMapOutput values.
// You can construct a concrete instance of `LinkedServiceAzureSqlDatabaseMapInput` via:
//
//	LinkedServiceAzureSqlDatabaseMap{ "key": LinkedServiceAzureSqlDatabaseArgs{...} }
type LinkedServiceAzureSqlDatabaseMapInput interface {
	pulumi.Input

	ToLinkedServiceAzureSqlDatabaseMapOutput() LinkedServiceAzureSqlDatabaseMapOutput
	ToLinkedServiceAzureSqlDatabaseMapOutputWithContext(context.Context) LinkedServiceAzureSqlDatabaseMapOutput
}

type LinkedServiceAzureSqlDatabaseMap map[string]LinkedServiceAzureSqlDatabaseInput

func (LinkedServiceAzureSqlDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceAzureSqlDatabase)(nil)).Elem()
}

func (i LinkedServiceAzureSqlDatabaseMap) ToLinkedServiceAzureSqlDatabaseMapOutput() LinkedServiceAzureSqlDatabaseMapOutput {
	return i.ToLinkedServiceAzureSqlDatabaseMapOutputWithContext(context.Background())
}

func (i LinkedServiceAzureSqlDatabaseMap) ToLinkedServiceAzureSqlDatabaseMapOutputWithContext(ctx context.Context) LinkedServiceAzureSqlDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceAzureSqlDatabaseMapOutput)
}

type LinkedServiceAzureSqlDatabaseOutput struct{ *pulumi.OutputState }

func (LinkedServiceAzureSqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceAzureSqlDatabase)(nil)).Elem()
}

func (o LinkedServiceAzureSqlDatabaseOutput) ToLinkedServiceAzureSqlDatabaseOutput() LinkedServiceAzureSqlDatabaseOutput {
	return o
}

func (o LinkedServiceAzureSqlDatabaseOutput) ToLinkedServiceAzureSqlDatabaseOutputWithContext(ctx context.Context) LinkedServiceAzureSqlDatabaseOutput {
	return o
}

// A map of additional properties to associate with the Data Factory Linked Service Azure SQL Database.
func (o LinkedServiceAzureSqlDatabaseOutput) AdditionalProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSqlDatabase) pulumi.StringMapOutput { return v.AdditionalProperties }).(pulumi.StringMapOutput)
}

// List of tags that can be used for describing the Data Factory Linked Service Azure SQL Database.
func (o LinkedServiceAzureSqlDatabaseOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSqlDatabase) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The connection string in which to authenticate with Azure SQL Database. Exactly one of either `connectionString` or `keyVaultConnectionString` is required.
func (o LinkedServiceAzureSqlDatabaseOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSqlDatabase) pulumi.StringPtrOutput { return v.ConnectionString }).(pulumi.StringPtrOutput)
}

// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
func (o LinkedServiceAzureSqlDatabaseOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSqlDatabase) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The description for the Data Factory Linked Service Azure SQL Database.
func (o LinkedServiceAzureSqlDatabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSqlDatabase) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The integration runtime reference to associate with the Data Factory Linked Service Azure SQL Database.
func (o LinkedServiceAzureSqlDatabaseOutput) IntegrationRuntimeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSqlDatabase) pulumi.StringPtrOutput { return v.IntegrationRuntimeName }).(pulumi.StringPtrOutput)
}

// A `keyVaultConnectionString` block as defined below. Use this argument to store Azure SQL Database connection string in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. Exactly one of either `connectionString` or `keyVaultConnectionString` is required.
func (o LinkedServiceAzureSqlDatabaseOutput) KeyVaultConnectionString() LinkedServiceAzureSqlDatabaseKeyVaultConnectionStringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSqlDatabase) LinkedServiceAzureSqlDatabaseKeyVaultConnectionStringPtrOutput {
		return v.KeyVaultConnectionString
	}).(LinkedServiceAzureSqlDatabaseKeyVaultConnectionStringPtrOutput)
}

// A `keyVaultPassword` block as defined below. Use this argument to store SQL Server password in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
func (o LinkedServiceAzureSqlDatabaseOutput) KeyVaultPassword() LinkedServiceAzureSqlDatabaseKeyVaultPasswordPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSqlDatabase) LinkedServiceAzureSqlDatabaseKeyVaultPasswordPtrOutput {
		return v.KeyVaultPassword
	}).(LinkedServiceAzureSqlDatabaseKeyVaultPasswordPtrOutput)
}

// Specifies the name of the Data Factory Linked Service Azure SQL Database. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
func (o LinkedServiceAzureSqlDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSqlDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of parameters to associate with the Data Factory Linked Service Azure SQL Database.
func (o LinkedServiceAzureSqlDatabaseOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSqlDatabase) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// The service principal id in which to authenticate against the Azure SQL Database. Required if `servicePrincipalKey` is set.
func (o LinkedServiceAzureSqlDatabaseOutput) ServicePrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSqlDatabase) pulumi.StringPtrOutput { return v.ServicePrincipalId }).(pulumi.StringPtrOutput)
}

// The service principal key in which to authenticate against the Azure SQL Database. Required if `servicePrincipalId` is set.
func (o LinkedServiceAzureSqlDatabaseOutput) ServicePrincipalKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSqlDatabase) pulumi.StringPtrOutput { return v.ServicePrincipalKey }).(pulumi.StringPtrOutput)
}

// The tenant id or name in which to authenticate against the Azure SQL Database.
func (o LinkedServiceAzureSqlDatabaseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSqlDatabase) pulumi.StringPtrOutput { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Whether to use the Data Factory's managed identity to authenticate against the Azure SQL Database. Incompatible with `servicePrincipalId` and `servicePrincipalKey`
func (o LinkedServiceAzureSqlDatabaseOutput) UseManagedIdentity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureSqlDatabase) pulumi.BoolPtrOutput { return v.UseManagedIdentity }).(pulumi.BoolPtrOutput)
}

type LinkedServiceAzureSqlDatabaseArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceAzureSqlDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceAzureSqlDatabase)(nil)).Elem()
}

func (o LinkedServiceAzureSqlDatabaseArrayOutput) ToLinkedServiceAzureSqlDatabaseArrayOutput() LinkedServiceAzureSqlDatabaseArrayOutput {
	return o
}

func (o LinkedServiceAzureSqlDatabaseArrayOutput) ToLinkedServiceAzureSqlDatabaseArrayOutputWithContext(ctx context.Context) LinkedServiceAzureSqlDatabaseArrayOutput {
	return o
}

func (o LinkedServiceAzureSqlDatabaseArrayOutput) Index(i pulumi.IntInput) LinkedServiceAzureSqlDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinkedServiceAzureSqlDatabase {
		return vs[0].([]*LinkedServiceAzureSqlDatabase)[vs[1].(int)]
	}).(LinkedServiceAzureSqlDatabaseOutput)
}

type LinkedServiceAzureSqlDatabaseMapOutput struct{ *pulumi.OutputState }

func (LinkedServiceAzureSqlDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceAzureSqlDatabase)(nil)).Elem()
}

func (o LinkedServiceAzureSqlDatabaseMapOutput) ToLinkedServiceAzureSqlDatabaseMapOutput() LinkedServiceAzureSqlDatabaseMapOutput {
	return o
}

func (o LinkedServiceAzureSqlDatabaseMapOutput) ToLinkedServiceAzureSqlDatabaseMapOutputWithContext(ctx context.Context) LinkedServiceAzureSqlDatabaseMapOutput {
	return o
}

func (o LinkedServiceAzureSqlDatabaseMapOutput) MapIndex(k pulumi.StringInput) LinkedServiceAzureSqlDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinkedServiceAzureSqlDatabase {
		return vs[0].(map[string]*LinkedServiceAzureSqlDatabase)[vs[1].(string)]
	}).(LinkedServiceAzureSqlDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceAzureSqlDatabaseInput)(nil)).Elem(), &LinkedServiceAzureSqlDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceAzureSqlDatabaseArrayInput)(nil)).Elem(), LinkedServiceAzureSqlDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceAzureSqlDatabaseMapInput)(nil)).Elem(), LinkedServiceAzureSqlDatabaseMap{})
	pulumi.RegisterOutputType(LinkedServiceAzureSqlDatabaseOutput{})
	pulumi.RegisterOutputType(LinkedServiceAzureSqlDatabaseArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceAzureSqlDatabaseMapOutput{})
}
