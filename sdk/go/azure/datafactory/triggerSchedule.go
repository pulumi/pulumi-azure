// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Trigger Schedule inside a Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			examplePipeline, err := datafactory.NewPipeline(ctx, "examplePipeline", &datafactory.PipelineArgs{
//				DataFactoryId: exampleFactory.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewTriggerSchedule(ctx, "exampleTriggerSchedule", &datafactory.TriggerScheduleArgs{
//				DataFactoryId: exampleFactory.ID(),
//				PipelineName:  examplePipeline.Name,
//				Interval:      pulumi.Int(5),
//				Frequency:     pulumi.String("Day"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Factory Schedule Trigger can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datafactory/triggerSchedule:TriggerSchedule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/triggers/example
//
// ```
type TriggerSchedule struct {
	pulumi.CustomResourceState

	// Specifies if the Data Factory Schedule Trigger is activated. Defaults to `true`.
	Activated pulumi.BoolPtrOutput `pulumi:"activated"`
	// List of tags that can be used for describing the Data Factory Schedule Trigger.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The Schedule Trigger's description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The time the Schedule Trigger should end. The time will be represented in UTC.
	EndTime pulumi.StringPtrOutput `pulumi:"endTime"`
	// The trigger frequency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
	Frequency pulumi.StringPtrOutput `pulumi:"frequency"`
	// The interval for how often the trigger occurs. This defaults to `1`.
	Interval pulumi.IntPtrOutput `pulumi:"interval"`
	// Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Data Factory Pipeline name that the trigger will act on.
	PipelineName pulumi.StringOutput `pulumi:"pipelineName"`
	// The pipeline parameters that the trigger will act upon.
	PipelineParameters pulumi.StringMapOutput `pulumi:"pipelineParameters"`
	// A `pipeline` block as defined below.
	Pipelines TriggerSchedulePipelineArrayOutput `pulumi:"pipelines"`
	// A `schedule` block as defined below, which further specifies the recurrence schedule for the trigger. A schedule is capable of limiting or increasing the number of trigger executions specified by the `frequency` and `interval` properties.
	Schedule TriggerScheduleSchedulePtrOutput `pulumi:"schedule"`
	// The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The timezone of the start/end time.
	TimeZone pulumi.StringPtrOutput `pulumi:"timeZone"`
}

// NewTriggerSchedule registers a new resource with the given unique name, arguments, and options.
func NewTriggerSchedule(ctx *pulumi.Context,
	name string, args *TriggerScheduleArgs, opts ...pulumi.ResourceOption) (*TriggerSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TriggerSchedule
	err := ctx.RegisterResource("azure:datafactory/triggerSchedule:TriggerSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTriggerSchedule gets an existing TriggerSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTriggerSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerScheduleState, opts ...pulumi.ResourceOption) (*TriggerSchedule, error) {
	var resource TriggerSchedule
	err := ctx.ReadResource("azure:datafactory/triggerSchedule:TriggerSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TriggerSchedule resources.
type triggerScheduleState struct {
	// Specifies if the Data Factory Schedule Trigger is activated. Defaults to `true`.
	Activated *bool `pulumi:"activated"`
	// List of tags that can be used for describing the Data Factory Schedule Trigger.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The Schedule Trigger's description.
	Description *string `pulumi:"description"`
	// The time the Schedule Trigger should end. The time will be represented in UTC.
	EndTime *string `pulumi:"endTime"`
	// The trigger frequency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
	Frequency *string `pulumi:"frequency"`
	// The interval for how often the trigger occurs. This defaults to `1`.
	Interval *int `pulumi:"interval"`
	// Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// The Data Factory Pipeline name that the trigger will act on.
	PipelineName *string `pulumi:"pipelineName"`
	// The pipeline parameters that the trigger will act upon.
	PipelineParameters map[string]string `pulumi:"pipelineParameters"`
	// A `pipeline` block as defined below.
	Pipelines []TriggerSchedulePipeline `pulumi:"pipelines"`
	// A `schedule` block as defined below, which further specifies the recurrence schedule for the trigger. A schedule is capable of limiting or increasing the number of trigger executions specified by the `frequency` and `interval` properties.
	Schedule *TriggerScheduleSchedule `pulumi:"schedule"`
	// The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC.
	StartTime *string `pulumi:"startTime"`
	// The timezone of the start/end time.
	TimeZone *string `pulumi:"timeZone"`
}

type TriggerScheduleState struct {
	// Specifies if the Data Factory Schedule Trigger is activated. Defaults to `true`.
	Activated pulumi.BoolPtrInput
	// List of tags that can be used for describing the Data Factory Schedule Trigger.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The Schedule Trigger's description.
	Description pulumi.StringPtrInput
	// The time the Schedule Trigger should end. The time will be represented in UTC.
	EndTime pulumi.StringPtrInput
	// The trigger frequency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
	Frequency pulumi.StringPtrInput
	// The interval for how often the trigger occurs. This defaults to `1`.
	Interval pulumi.IntPtrInput
	// Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// The Data Factory Pipeline name that the trigger will act on.
	PipelineName pulumi.StringPtrInput
	// The pipeline parameters that the trigger will act upon.
	PipelineParameters pulumi.StringMapInput
	// A `pipeline` block as defined below.
	Pipelines TriggerSchedulePipelineArrayInput
	// A `schedule` block as defined below, which further specifies the recurrence schedule for the trigger. A schedule is capable of limiting or increasing the number of trigger executions specified by the `frequency` and `interval` properties.
	Schedule TriggerScheduleSchedulePtrInput
	// The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC.
	StartTime pulumi.StringPtrInput
	// The timezone of the start/end time.
	TimeZone pulumi.StringPtrInput
}

func (TriggerScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerScheduleState)(nil)).Elem()
}

type triggerScheduleArgs struct {
	// Specifies if the Data Factory Schedule Trigger is activated. Defaults to `true`.
	Activated *bool `pulumi:"activated"`
	// List of tags that can be used for describing the Data Factory Schedule Trigger.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The Schedule Trigger's description.
	Description *string `pulumi:"description"`
	// The time the Schedule Trigger should end. The time will be represented in UTC.
	EndTime *string `pulumi:"endTime"`
	// The trigger frequency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
	Frequency *string `pulumi:"frequency"`
	// The interval for how often the trigger occurs. This defaults to `1`.
	Interval *int `pulumi:"interval"`
	// Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// The Data Factory Pipeline name that the trigger will act on.
	PipelineName *string `pulumi:"pipelineName"`
	// The pipeline parameters that the trigger will act upon.
	PipelineParameters map[string]string `pulumi:"pipelineParameters"`
	// A `pipeline` block as defined below.
	Pipelines []TriggerSchedulePipeline `pulumi:"pipelines"`
	// A `schedule` block as defined below, which further specifies the recurrence schedule for the trigger. A schedule is capable of limiting or increasing the number of trigger executions specified by the `frequency` and `interval` properties.
	Schedule *TriggerScheduleSchedule `pulumi:"schedule"`
	// The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC.
	StartTime *string `pulumi:"startTime"`
	// The timezone of the start/end time.
	TimeZone *string `pulumi:"timeZone"`
}

// The set of arguments for constructing a TriggerSchedule resource.
type TriggerScheduleArgs struct {
	// Specifies if the Data Factory Schedule Trigger is activated. Defaults to `true`.
	Activated pulumi.BoolPtrInput
	// List of tags that can be used for describing the Data Factory Schedule Trigger.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// The Schedule Trigger's description.
	Description pulumi.StringPtrInput
	// The time the Schedule Trigger should end. The time will be represented in UTC.
	EndTime pulumi.StringPtrInput
	// The trigger frequency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
	Frequency pulumi.StringPtrInput
	// The interval for how often the trigger occurs. This defaults to `1`.
	Interval pulumi.IntPtrInput
	// Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// The Data Factory Pipeline name that the trigger will act on.
	PipelineName pulumi.StringPtrInput
	// The pipeline parameters that the trigger will act upon.
	PipelineParameters pulumi.StringMapInput
	// A `pipeline` block as defined below.
	Pipelines TriggerSchedulePipelineArrayInput
	// A `schedule` block as defined below, which further specifies the recurrence schedule for the trigger. A schedule is capable of limiting or increasing the number of trigger executions specified by the `frequency` and `interval` properties.
	Schedule TriggerScheduleSchedulePtrInput
	// The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC.
	StartTime pulumi.StringPtrInput
	// The timezone of the start/end time.
	TimeZone pulumi.StringPtrInput
}

func (TriggerScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerScheduleArgs)(nil)).Elem()
}

type TriggerScheduleInput interface {
	pulumi.Input

	ToTriggerScheduleOutput() TriggerScheduleOutput
	ToTriggerScheduleOutputWithContext(ctx context.Context) TriggerScheduleOutput
}

func (*TriggerSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerSchedule)(nil)).Elem()
}

func (i *TriggerSchedule) ToTriggerScheduleOutput() TriggerScheduleOutput {
	return i.ToTriggerScheduleOutputWithContext(context.Background())
}

func (i *TriggerSchedule) ToTriggerScheduleOutputWithContext(ctx context.Context) TriggerScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerScheduleOutput)
}

func (i *TriggerSchedule) ToOutput(ctx context.Context) pulumix.Output[*TriggerSchedule] {
	return pulumix.Output[*TriggerSchedule]{
		OutputState: i.ToTriggerScheduleOutputWithContext(ctx).OutputState,
	}
}

// TriggerScheduleArrayInput is an input type that accepts TriggerScheduleArray and TriggerScheduleArrayOutput values.
// You can construct a concrete instance of `TriggerScheduleArrayInput` via:
//
//	TriggerScheduleArray{ TriggerScheduleArgs{...} }
type TriggerScheduleArrayInput interface {
	pulumi.Input

	ToTriggerScheduleArrayOutput() TriggerScheduleArrayOutput
	ToTriggerScheduleArrayOutputWithContext(context.Context) TriggerScheduleArrayOutput
}

type TriggerScheduleArray []TriggerScheduleInput

func (TriggerScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TriggerSchedule)(nil)).Elem()
}

func (i TriggerScheduleArray) ToTriggerScheduleArrayOutput() TriggerScheduleArrayOutput {
	return i.ToTriggerScheduleArrayOutputWithContext(context.Background())
}

func (i TriggerScheduleArray) ToTriggerScheduleArrayOutputWithContext(ctx context.Context) TriggerScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerScheduleArrayOutput)
}

func (i TriggerScheduleArray) ToOutput(ctx context.Context) pulumix.Output[[]*TriggerSchedule] {
	return pulumix.Output[[]*TriggerSchedule]{
		OutputState: i.ToTriggerScheduleArrayOutputWithContext(ctx).OutputState,
	}
}

// TriggerScheduleMapInput is an input type that accepts TriggerScheduleMap and TriggerScheduleMapOutput values.
// You can construct a concrete instance of `TriggerScheduleMapInput` via:
//
//	TriggerScheduleMap{ "key": TriggerScheduleArgs{...} }
type TriggerScheduleMapInput interface {
	pulumi.Input

	ToTriggerScheduleMapOutput() TriggerScheduleMapOutput
	ToTriggerScheduleMapOutputWithContext(context.Context) TriggerScheduleMapOutput
}

type TriggerScheduleMap map[string]TriggerScheduleInput

func (TriggerScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TriggerSchedule)(nil)).Elem()
}

func (i TriggerScheduleMap) ToTriggerScheduleMapOutput() TriggerScheduleMapOutput {
	return i.ToTriggerScheduleMapOutputWithContext(context.Background())
}

func (i TriggerScheduleMap) ToTriggerScheduleMapOutputWithContext(ctx context.Context) TriggerScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerScheduleMapOutput)
}

func (i TriggerScheduleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*TriggerSchedule] {
	return pulumix.Output[map[string]*TriggerSchedule]{
		OutputState: i.ToTriggerScheduleMapOutputWithContext(ctx).OutputState,
	}
}

type TriggerScheduleOutput struct{ *pulumi.OutputState }

func (TriggerScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerSchedule)(nil)).Elem()
}

func (o TriggerScheduleOutput) ToTriggerScheduleOutput() TriggerScheduleOutput {
	return o
}

func (o TriggerScheduleOutput) ToTriggerScheduleOutputWithContext(ctx context.Context) TriggerScheduleOutput {
	return o
}

func (o TriggerScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[*TriggerSchedule] {
	return pulumix.Output[*TriggerSchedule]{
		OutputState: o.OutputState,
	}
}

// Specifies if the Data Factory Schedule Trigger is activated. Defaults to `true`.
func (o TriggerScheduleOutput) Activated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TriggerSchedule) pulumi.BoolPtrOutput { return v.Activated }).(pulumi.BoolPtrOutput)
}

// List of tags that can be used for describing the Data Factory Schedule Trigger.
func (o TriggerScheduleOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TriggerSchedule) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
func (o TriggerScheduleOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *TriggerSchedule) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The Schedule Trigger's description.
func (o TriggerScheduleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerSchedule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The time the Schedule Trigger should end. The time will be represented in UTC.
func (o TriggerScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerSchedule) pulumi.StringPtrOutput { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The trigger frequency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
func (o TriggerScheduleOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerSchedule) pulumi.StringPtrOutput { return v.Frequency }).(pulumi.StringPtrOutput)
}

// The interval for how often the trigger occurs. This defaults to `1`.
func (o TriggerScheduleOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TriggerSchedule) pulumi.IntPtrOutput { return v.Interval }).(pulumi.IntPtrOutput)
}

// Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
func (o TriggerScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TriggerSchedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Data Factory Pipeline name that the trigger will act on.
func (o TriggerScheduleOutput) PipelineName() pulumi.StringOutput {
	return o.ApplyT(func(v *TriggerSchedule) pulumi.StringOutput { return v.PipelineName }).(pulumi.StringOutput)
}

// The pipeline parameters that the trigger will act upon.
func (o TriggerScheduleOutput) PipelineParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TriggerSchedule) pulumi.StringMapOutput { return v.PipelineParameters }).(pulumi.StringMapOutput)
}

// A `pipeline` block as defined below.
func (o TriggerScheduleOutput) Pipelines() TriggerSchedulePipelineArrayOutput {
	return o.ApplyT(func(v *TriggerSchedule) TriggerSchedulePipelineArrayOutput { return v.Pipelines }).(TriggerSchedulePipelineArrayOutput)
}

// A `schedule` block as defined below, which further specifies the recurrence schedule for the trigger. A schedule is capable of limiting or increasing the number of trigger executions specified by the `frequency` and `interval` properties.
func (o TriggerScheduleOutput) Schedule() TriggerScheduleSchedulePtrOutput {
	return o.ApplyT(func(v *TriggerSchedule) TriggerScheduleSchedulePtrOutput { return v.Schedule }).(TriggerScheduleSchedulePtrOutput)
}

// The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC.
func (o TriggerScheduleOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TriggerSchedule) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The timezone of the start/end time.
func (o TriggerScheduleOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerSchedule) pulumi.StringPtrOutput { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type TriggerScheduleArrayOutput struct{ *pulumi.OutputState }

func (TriggerScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TriggerSchedule)(nil)).Elem()
}

func (o TriggerScheduleArrayOutput) ToTriggerScheduleArrayOutput() TriggerScheduleArrayOutput {
	return o
}

func (o TriggerScheduleArrayOutput) ToTriggerScheduleArrayOutputWithContext(ctx context.Context) TriggerScheduleArrayOutput {
	return o
}

func (o TriggerScheduleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*TriggerSchedule] {
	return pulumix.Output[[]*TriggerSchedule]{
		OutputState: o.OutputState,
	}
}

func (o TriggerScheduleArrayOutput) Index(i pulumi.IntInput) TriggerScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TriggerSchedule {
		return vs[0].([]*TriggerSchedule)[vs[1].(int)]
	}).(TriggerScheduleOutput)
}

type TriggerScheduleMapOutput struct{ *pulumi.OutputState }

func (TriggerScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TriggerSchedule)(nil)).Elem()
}

func (o TriggerScheduleMapOutput) ToTriggerScheduleMapOutput() TriggerScheduleMapOutput {
	return o
}

func (o TriggerScheduleMapOutput) ToTriggerScheduleMapOutputWithContext(ctx context.Context) TriggerScheduleMapOutput {
	return o
}

func (o TriggerScheduleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*TriggerSchedule] {
	return pulumix.Output[map[string]*TriggerSchedule]{
		OutputState: o.OutputState,
	}
}

func (o TriggerScheduleMapOutput) MapIndex(k pulumi.StringInput) TriggerScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TriggerSchedule {
		return vs[0].(map[string]*TriggerSchedule)[vs[1].(string)]
	}).(TriggerScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerScheduleInput)(nil)).Elem(), &TriggerSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerScheduleArrayInput)(nil)).Elem(), TriggerScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerScheduleMapInput)(nil)).Elem(), TriggerScheduleMap{})
	pulumi.RegisterOutputType(TriggerScheduleOutput{})
	pulumi.RegisterOutputType(TriggerScheduleArrayOutput{})
	pulumi.RegisterOutputType(TriggerScheduleMapOutput{})
}
