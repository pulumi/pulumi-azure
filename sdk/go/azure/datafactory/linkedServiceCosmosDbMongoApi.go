// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linked Service (connection) between a CosmosDB and Azure Data Factory using Mongo API.
//
// > **Note:** All arguments including the client secret will be stored in the raw state as plain-text. [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/datafactory"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = datafactory.NewLinkedServiceCosmosDbMongoApi(ctx, "exampleLinkedServiceCosmosDbMongoApi", &datafactory.LinkedServiceCosmosDbMongoApiArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			DataFactoryId:     exampleFactory.ID(),
// 			ConnectionString:  pulumi.String("mongodb://testinstance:testkey@testinstance.documents.azure.com:10255/?ssl=true"),
// 			Database:          pulumi.String("foo"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Data Factory Linked Service's can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:datafactory/linkedServiceCosmosDbMongoApi:LinkedServiceCosmosDbMongoApi example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
// ```
type LinkedServiceCosmosDbMongoApi struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Linked Service.
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The connection string.
	ConnectionString pulumi.StringPtrOutput `pulumi:"connectionString"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The Data Factory name in which to associate the Linked Service with. Changing this forces a new resource.
	//
	// Deprecated: `data_factory_name` is deprecated in favour of `data_factory_id` and will be removed in version 3.0 of the AzureRM provider
	DataFactoryName pulumi.StringOutput `pulumi:"dataFactoryName"`
	// The name of the database.
	Database pulumi.StringPtrOutput `pulumi:"database"`
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrOutput `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data
	// factory. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// The name of the resource group in which to create the Data Factory Linked Service. Changing this forces a new resource
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Whether API server version is 3.2 or higher. Defaults to `false`.
	ServerVersionIs32OrHigher pulumi.BoolPtrOutput `pulumi:"serverVersionIs32OrHigher"`
}

// NewLinkedServiceCosmosDbMongoApi registers a new resource with the given unique name, arguments, and options.
func NewLinkedServiceCosmosDbMongoApi(ctx *pulumi.Context,
	name string, args *LinkedServiceCosmosDbMongoApiArgs, opts ...pulumi.ResourceOption) (*LinkedServiceCosmosDbMongoApi, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource LinkedServiceCosmosDbMongoApi
	err := ctx.RegisterResource("azure:datafactory/linkedServiceCosmosDbMongoApi:LinkedServiceCosmosDbMongoApi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedServiceCosmosDbMongoApi gets an existing LinkedServiceCosmosDbMongoApi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedServiceCosmosDbMongoApi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedServiceCosmosDbMongoApiState, opts ...pulumi.ResourceOption) (*LinkedServiceCosmosDbMongoApi, error) {
	var resource LinkedServiceCosmosDbMongoApi
	err := ctx.ReadResource("azure:datafactory/linkedServiceCosmosDbMongoApi:LinkedServiceCosmosDbMongoApi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedServiceCosmosDbMongoApi resources.
type linkedServiceCosmosDbMongoApiState struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations []string `pulumi:"annotations"`
	// The connection string.
	ConnectionString *string `pulumi:"connectionString"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The Data Factory name in which to associate the Linked Service with. Changing this forces a new resource.
	//
	// Deprecated: `data_factory_name` is deprecated in favour of `data_factory_id` and will be removed in version 3.0 of the AzureRM provider
	DataFactoryName *string `pulumi:"dataFactoryName"`
	// The name of the database.
	Database *string `pulumi:"database"`
	// The description for the Data Factory Linked Service.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data
	// factory. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters map[string]string `pulumi:"parameters"`
	// The name of the resource group in which to create the Data Factory Linked Service. Changing this forces a new resource
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Whether API server version is 3.2 or higher. Defaults to `false`.
	ServerVersionIs32OrHigher *bool `pulumi:"serverVersionIs32OrHigher"`
}

type LinkedServiceCosmosDbMongoApiState struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayInput
	// The connection string.
	ConnectionString pulumi.StringPtrInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The Data Factory name in which to associate the Linked Service with. Changing this forces a new resource.
	//
	// Deprecated: `data_factory_name` is deprecated in favour of `data_factory_id` and will be removed in version 3.0 of the AzureRM provider
	DataFactoryName pulumi.StringPtrInput
	// The name of the database.
	Database pulumi.StringPtrInput
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrInput
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data
	// factory. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapInput
	// The name of the resource group in which to create the Data Factory Linked Service. Changing this forces a new resource
	ResourceGroupName pulumi.StringPtrInput
	// Whether API server version is 3.2 or higher. Defaults to `false`.
	ServerVersionIs32OrHigher pulumi.BoolPtrInput
}

func (LinkedServiceCosmosDbMongoApiState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceCosmosDbMongoApiState)(nil)).Elem()
}

type linkedServiceCosmosDbMongoApiArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations []string `pulumi:"annotations"`
	// The connection string.
	ConnectionString *string `pulumi:"connectionString"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The Data Factory name in which to associate the Linked Service with. Changing this forces a new resource.
	//
	// Deprecated: `data_factory_name` is deprecated in favour of `data_factory_id` and will be removed in version 3.0 of the AzureRM provider
	DataFactoryName *string `pulumi:"dataFactoryName"`
	// The name of the database.
	Database *string `pulumi:"database"`
	// The description for the Data Factory Linked Service.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data
	// factory. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters map[string]string `pulumi:"parameters"`
	// The name of the resource group in which to create the Data Factory Linked Service. Changing this forces a new resource
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Whether API server version is 3.2 or higher. Defaults to `false`.
	ServerVersionIs32OrHigher *bool `pulumi:"serverVersionIs32OrHigher"`
}

// The set of arguments for constructing a LinkedServiceCosmosDbMongoApi resource.
type LinkedServiceCosmosDbMongoApiArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayInput
	// The connection string.
	ConnectionString pulumi.StringPtrInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The Data Factory name in which to associate the Linked Service with. Changing this forces a new resource.
	//
	// Deprecated: `data_factory_name` is deprecated in favour of `data_factory_id` and will be removed in version 3.0 of the AzureRM provider
	DataFactoryName pulumi.StringPtrInput
	// The name of the database.
	Database pulumi.StringPtrInput
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrInput
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data
	// factory. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapInput
	// The name of the resource group in which to create the Data Factory Linked Service. Changing this forces a new resource
	ResourceGroupName pulumi.StringInput
	// Whether API server version is 3.2 or higher. Defaults to `false`.
	ServerVersionIs32OrHigher pulumi.BoolPtrInput
}

func (LinkedServiceCosmosDbMongoApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceCosmosDbMongoApiArgs)(nil)).Elem()
}

type LinkedServiceCosmosDbMongoApiInput interface {
	pulumi.Input

	ToLinkedServiceCosmosDbMongoApiOutput() LinkedServiceCosmosDbMongoApiOutput
	ToLinkedServiceCosmosDbMongoApiOutputWithContext(ctx context.Context) LinkedServiceCosmosDbMongoApiOutput
}

func (*LinkedServiceCosmosDbMongoApi) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceCosmosDbMongoApi)(nil)).Elem()
}

func (i *LinkedServiceCosmosDbMongoApi) ToLinkedServiceCosmosDbMongoApiOutput() LinkedServiceCosmosDbMongoApiOutput {
	return i.ToLinkedServiceCosmosDbMongoApiOutputWithContext(context.Background())
}

func (i *LinkedServiceCosmosDbMongoApi) ToLinkedServiceCosmosDbMongoApiOutputWithContext(ctx context.Context) LinkedServiceCosmosDbMongoApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceCosmosDbMongoApiOutput)
}

// LinkedServiceCosmosDbMongoApiArrayInput is an input type that accepts LinkedServiceCosmosDbMongoApiArray and LinkedServiceCosmosDbMongoApiArrayOutput values.
// You can construct a concrete instance of `LinkedServiceCosmosDbMongoApiArrayInput` via:
//
//          LinkedServiceCosmosDbMongoApiArray{ LinkedServiceCosmosDbMongoApiArgs{...} }
type LinkedServiceCosmosDbMongoApiArrayInput interface {
	pulumi.Input

	ToLinkedServiceCosmosDbMongoApiArrayOutput() LinkedServiceCosmosDbMongoApiArrayOutput
	ToLinkedServiceCosmosDbMongoApiArrayOutputWithContext(context.Context) LinkedServiceCosmosDbMongoApiArrayOutput
}

type LinkedServiceCosmosDbMongoApiArray []LinkedServiceCosmosDbMongoApiInput

func (LinkedServiceCosmosDbMongoApiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceCosmosDbMongoApi)(nil)).Elem()
}

func (i LinkedServiceCosmosDbMongoApiArray) ToLinkedServiceCosmosDbMongoApiArrayOutput() LinkedServiceCosmosDbMongoApiArrayOutput {
	return i.ToLinkedServiceCosmosDbMongoApiArrayOutputWithContext(context.Background())
}

func (i LinkedServiceCosmosDbMongoApiArray) ToLinkedServiceCosmosDbMongoApiArrayOutputWithContext(ctx context.Context) LinkedServiceCosmosDbMongoApiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceCosmosDbMongoApiArrayOutput)
}

// LinkedServiceCosmosDbMongoApiMapInput is an input type that accepts LinkedServiceCosmosDbMongoApiMap and LinkedServiceCosmosDbMongoApiMapOutput values.
// You can construct a concrete instance of `LinkedServiceCosmosDbMongoApiMapInput` via:
//
//          LinkedServiceCosmosDbMongoApiMap{ "key": LinkedServiceCosmosDbMongoApiArgs{...} }
type LinkedServiceCosmosDbMongoApiMapInput interface {
	pulumi.Input

	ToLinkedServiceCosmosDbMongoApiMapOutput() LinkedServiceCosmosDbMongoApiMapOutput
	ToLinkedServiceCosmosDbMongoApiMapOutputWithContext(context.Context) LinkedServiceCosmosDbMongoApiMapOutput
}

type LinkedServiceCosmosDbMongoApiMap map[string]LinkedServiceCosmosDbMongoApiInput

func (LinkedServiceCosmosDbMongoApiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceCosmosDbMongoApi)(nil)).Elem()
}

func (i LinkedServiceCosmosDbMongoApiMap) ToLinkedServiceCosmosDbMongoApiMapOutput() LinkedServiceCosmosDbMongoApiMapOutput {
	return i.ToLinkedServiceCosmosDbMongoApiMapOutputWithContext(context.Background())
}

func (i LinkedServiceCosmosDbMongoApiMap) ToLinkedServiceCosmosDbMongoApiMapOutputWithContext(ctx context.Context) LinkedServiceCosmosDbMongoApiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceCosmosDbMongoApiMapOutput)
}

type LinkedServiceCosmosDbMongoApiOutput struct{ *pulumi.OutputState }

func (LinkedServiceCosmosDbMongoApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceCosmosDbMongoApi)(nil)).Elem()
}

func (o LinkedServiceCosmosDbMongoApiOutput) ToLinkedServiceCosmosDbMongoApiOutput() LinkedServiceCosmosDbMongoApiOutput {
	return o
}

func (o LinkedServiceCosmosDbMongoApiOutput) ToLinkedServiceCosmosDbMongoApiOutputWithContext(ctx context.Context) LinkedServiceCosmosDbMongoApiOutput {
	return o
}

type LinkedServiceCosmosDbMongoApiArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceCosmosDbMongoApiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceCosmosDbMongoApi)(nil)).Elem()
}

func (o LinkedServiceCosmosDbMongoApiArrayOutput) ToLinkedServiceCosmosDbMongoApiArrayOutput() LinkedServiceCosmosDbMongoApiArrayOutput {
	return o
}

func (o LinkedServiceCosmosDbMongoApiArrayOutput) ToLinkedServiceCosmosDbMongoApiArrayOutputWithContext(ctx context.Context) LinkedServiceCosmosDbMongoApiArrayOutput {
	return o
}

func (o LinkedServiceCosmosDbMongoApiArrayOutput) Index(i pulumi.IntInput) LinkedServiceCosmosDbMongoApiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinkedServiceCosmosDbMongoApi {
		return vs[0].([]*LinkedServiceCosmosDbMongoApi)[vs[1].(int)]
	}).(LinkedServiceCosmosDbMongoApiOutput)
}

type LinkedServiceCosmosDbMongoApiMapOutput struct{ *pulumi.OutputState }

func (LinkedServiceCosmosDbMongoApiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceCosmosDbMongoApi)(nil)).Elem()
}

func (o LinkedServiceCosmosDbMongoApiMapOutput) ToLinkedServiceCosmosDbMongoApiMapOutput() LinkedServiceCosmosDbMongoApiMapOutput {
	return o
}

func (o LinkedServiceCosmosDbMongoApiMapOutput) ToLinkedServiceCosmosDbMongoApiMapOutputWithContext(ctx context.Context) LinkedServiceCosmosDbMongoApiMapOutput {
	return o
}

func (o LinkedServiceCosmosDbMongoApiMapOutput) MapIndex(k pulumi.StringInput) LinkedServiceCosmosDbMongoApiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinkedServiceCosmosDbMongoApi {
		return vs[0].(map[string]*LinkedServiceCosmosDbMongoApi)[vs[1].(string)]
	}).(LinkedServiceCosmosDbMongoApiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceCosmosDbMongoApiInput)(nil)).Elem(), &LinkedServiceCosmosDbMongoApi{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceCosmosDbMongoApiArrayInput)(nil)).Elem(), LinkedServiceCosmosDbMongoApiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceCosmosDbMongoApiMapInput)(nil)).Elem(), LinkedServiceCosmosDbMongoApiMap{})
	pulumi.RegisterOutputType(LinkedServiceCosmosDbMongoApiOutput{})
	pulumi.RegisterOutputType(LinkedServiceCosmosDbMongoApiArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceCosmosDbMongoApiMapOutput{})
}
