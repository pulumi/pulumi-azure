// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linked Service (connection) between a Kusto Cluster and Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/kusto"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Identity: &datafactory.FactoryIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleCluster, err := kusto.NewCluster(ctx, "exampleCluster", &kusto.ClusterArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku: &kusto.ClusterSkuArgs{
//					Name:     pulumi.String("Standard_D13_v2"),
//					Capacity: pulumi.Int(2),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleDatabase, err := kusto.NewDatabase(ctx, "exampleDatabase", &kusto.DatabaseArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				ClusterName:       exampleCluster.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewLinkedServiceKusto(ctx, "exampleLinkedServiceKusto", &datafactory.LinkedServiceKustoArgs{
//				DataFactoryId:      exampleFactory.ID(),
//				KustoEndpoint:      exampleCluster.Uri,
//				KustoDatabaseName:  exampleDatabase.Name,
//				UseManagedIdentity: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kusto.NewDatabasePrincipalAssignment(ctx, "exampleDatabasePrincipalAssignment", &kusto.DatabasePrincipalAssignmentArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				ClusterName:       exampleCluster.Name,
//				DatabaseName:      exampleDatabase.Name,
//				TenantId: exampleFactory.Identity.ApplyT(func(identity datafactory.FactoryIdentity) (*string, error) {
//					return &identity.TenantId, nil
//				}).(pulumi.StringPtrOutput),
//				PrincipalId: exampleFactory.Identity.ApplyT(func(identity datafactory.FactoryIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput),
//				PrincipalType: pulumi.String("App"),
//				Role:          pulumi.String("Viewer"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Factory Linked Service's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datafactory/linkedServiceKusto:LinkedServiceKusto example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
//
// ```
type LinkedServiceKusto struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Kusto Linked Service:
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrOutput `pulumi:"integrationRuntimeName"`
	// The Kusto Database Name.
	KustoDatabaseName pulumi.StringOutput `pulumi:"kustoDatabaseName"`
	// The URI of the Kusto Cluster endpoint.
	KustoEndpoint pulumi.StringOutput `pulumi:"kustoEndpoint"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// The service principal id in which to authenticate against the Kusto Database.
	ServicePrincipalId pulumi.StringPtrOutput `pulumi:"servicePrincipalId"`
	// The service principal key in which to authenticate against the Kusto Database.
	ServicePrincipalKey pulumi.StringPtrOutput `pulumi:"servicePrincipalKey"`
	// The service principal tenant id or name in which to authenticate against the Kusto Database.
	//
	// > **NOTE** If `servicePrincipalId` is used, `servicePrincipalKey` and `tenant` is also required.
	//
	// > **NOTE** One of Managed Identity authentication and Service Principal authentication must be set.
	Tenant pulumi.StringPtrOutput `pulumi:"tenant"`
	// Whether to use the Data Factory's managed identity to authenticate against the Kusto Database.
	UseManagedIdentity pulumi.BoolPtrOutput `pulumi:"useManagedIdentity"`
}

// NewLinkedServiceKusto registers a new resource with the given unique name, arguments, and options.
func NewLinkedServiceKusto(ctx *pulumi.Context,
	name string, args *LinkedServiceKustoArgs, opts ...pulumi.ResourceOption) (*LinkedServiceKusto, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	if args.KustoDatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'KustoDatabaseName'")
	}
	if args.KustoEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'KustoEndpoint'")
	}
	if args.ServicePrincipalKey != nil {
		args.ServicePrincipalKey = pulumi.ToSecret(args.ServicePrincipalKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"servicePrincipalKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LinkedServiceKusto
	err := ctx.RegisterResource("azure:datafactory/linkedServiceKusto:LinkedServiceKusto", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedServiceKusto gets an existing LinkedServiceKusto resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedServiceKusto(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedServiceKustoState, opts ...pulumi.ResourceOption) (*LinkedServiceKusto, error) {
	var resource LinkedServiceKusto
	err := ctx.ReadResource("azure:datafactory/linkedServiceKusto:LinkedServiceKusto", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedServiceKusto resources.
type linkedServiceKustoState struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Kusto Linked Service:
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// The Kusto Database Name.
	KustoDatabaseName *string `pulumi:"kustoDatabaseName"`
	// The URI of the Kusto Cluster endpoint.
	KustoEndpoint *string `pulumi:"kustoEndpoint"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters map[string]string `pulumi:"parameters"`
	// The service principal id in which to authenticate against the Kusto Database.
	ServicePrincipalId *string `pulumi:"servicePrincipalId"`
	// The service principal key in which to authenticate against the Kusto Database.
	ServicePrincipalKey *string `pulumi:"servicePrincipalKey"`
	// The service principal tenant id or name in which to authenticate against the Kusto Database.
	//
	// > **NOTE** If `servicePrincipalId` is used, `servicePrincipalKey` and `tenant` is also required.
	//
	// > **NOTE** One of Managed Identity authentication and Service Principal authentication must be set.
	Tenant *string `pulumi:"tenant"`
	// Whether to use the Data Factory's managed identity to authenticate against the Kusto Database.
	UseManagedIdentity *bool `pulumi:"useManagedIdentity"`
}

type LinkedServiceKustoState struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Kusto Linked Service:
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrInput
	// The Kusto Database Name.
	KustoDatabaseName pulumi.StringPtrInput
	// The URI of the Kusto Cluster endpoint.
	KustoEndpoint pulumi.StringPtrInput
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapInput
	// The service principal id in which to authenticate against the Kusto Database.
	ServicePrincipalId pulumi.StringPtrInput
	// The service principal key in which to authenticate against the Kusto Database.
	ServicePrincipalKey pulumi.StringPtrInput
	// The service principal tenant id or name in which to authenticate against the Kusto Database.
	//
	// > **NOTE** If `servicePrincipalId` is used, `servicePrincipalKey` and `tenant` is also required.
	//
	// > **NOTE** One of Managed Identity authentication and Service Principal authentication must be set.
	Tenant pulumi.StringPtrInput
	// Whether to use the Data Factory's managed identity to authenticate against the Kusto Database.
	UseManagedIdentity pulumi.BoolPtrInput
}

func (LinkedServiceKustoState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceKustoState)(nil)).Elem()
}

type linkedServiceKustoArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Kusto Linked Service:
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// The Kusto Database Name.
	KustoDatabaseName string `pulumi:"kustoDatabaseName"`
	// The URI of the Kusto Cluster endpoint.
	KustoEndpoint string `pulumi:"kustoEndpoint"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters map[string]string `pulumi:"parameters"`
	// The service principal id in which to authenticate against the Kusto Database.
	ServicePrincipalId *string `pulumi:"servicePrincipalId"`
	// The service principal key in which to authenticate against the Kusto Database.
	ServicePrincipalKey *string `pulumi:"servicePrincipalKey"`
	// The service principal tenant id or name in which to authenticate against the Kusto Database.
	//
	// > **NOTE** If `servicePrincipalId` is used, `servicePrincipalKey` and `tenant` is also required.
	//
	// > **NOTE** One of Managed Identity authentication and Service Principal authentication must be set.
	Tenant *string `pulumi:"tenant"`
	// Whether to use the Data Factory's managed identity to authenticate against the Kusto Database.
	UseManagedIdentity *bool `pulumi:"useManagedIdentity"`
}

// The set of arguments for constructing a LinkedServiceKusto resource.
type LinkedServiceKustoArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Kusto Linked Service:
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrInput
	// The Kusto Database Name.
	KustoDatabaseName pulumi.StringInput
	// The URI of the Kusto Cluster endpoint.
	KustoEndpoint pulumi.StringInput
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapInput
	// The service principal id in which to authenticate against the Kusto Database.
	ServicePrincipalId pulumi.StringPtrInput
	// The service principal key in which to authenticate against the Kusto Database.
	ServicePrincipalKey pulumi.StringPtrInput
	// The service principal tenant id or name in which to authenticate against the Kusto Database.
	//
	// > **NOTE** If `servicePrincipalId` is used, `servicePrincipalKey` and `tenant` is also required.
	//
	// > **NOTE** One of Managed Identity authentication and Service Principal authentication must be set.
	Tenant pulumi.StringPtrInput
	// Whether to use the Data Factory's managed identity to authenticate against the Kusto Database.
	UseManagedIdentity pulumi.BoolPtrInput
}

func (LinkedServiceKustoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceKustoArgs)(nil)).Elem()
}

type LinkedServiceKustoInput interface {
	pulumi.Input

	ToLinkedServiceKustoOutput() LinkedServiceKustoOutput
	ToLinkedServiceKustoOutputWithContext(ctx context.Context) LinkedServiceKustoOutput
}

func (*LinkedServiceKusto) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceKusto)(nil)).Elem()
}

func (i *LinkedServiceKusto) ToLinkedServiceKustoOutput() LinkedServiceKustoOutput {
	return i.ToLinkedServiceKustoOutputWithContext(context.Background())
}

func (i *LinkedServiceKusto) ToLinkedServiceKustoOutputWithContext(ctx context.Context) LinkedServiceKustoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceKustoOutput)
}

// LinkedServiceKustoArrayInput is an input type that accepts LinkedServiceKustoArray and LinkedServiceKustoArrayOutput values.
// You can construct a concrete instance of `LinkedServiceKustoArrayInput` via:
//
//	LinkedServiceKustoArray{ LinkedServiceKustoArgs{...} }
type LinkedServiceKustoArrayInput interface {
	pulumi.Input

	ToLinkedServiceKustoArrayOutput() LinkedServiceKustoArrayOutput
	ToLinkedServiceKustoArrayOutputWithContext(context.Context) LinkedServiceKustoArrayOutput
}

type LinkedServiceKustoArray []LinkedServiceKustoInput

func (LinkedServiceKustoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceKusto)(nil)).Elem()
}

func (i LinkedServiceKustoArray) ToLinkedServiceKustoArrayOutput() LinkedServiceKustoArrayOutput {
	return i.ToLinkedServiceKustoArrayOutputWithContext(context.Background())
}

func (i LinkedServiceKustoArray) ToLinkedServiceKustoArrayOutputWithContext(ctx context.Context) LinkedServiceKustoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceKustoArrayOutput)
}

// LinkedServiceKustoMapInput is an input type that accepts LinkedServiceKustoMap and LinkedServiceKustoMapOutput values.
// You can construct a concrete instance of `LinkedServiceKustoMapInput` via:
//
//	LinkedServiceKustoMap{ "key": LinkedServiceKustoArgs{...} }
type LinkedServiceKustoMapInput interface {
	pulumi.Input

	ToLinkedServiceKustoMapOutput() LinkedServiceKustoMapOutput
	ToLinkedServiceKustoMapOutputWithContext(context.Context) LinkedServiceKustoMapOutput
}

type LinkedServiceKustoMap map[string]LinkedServiceKustoInput

func (LinkedServiceKustoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceKusto)(nil)).Elem()
}

func (i LinkedServiceKustoMap) ToLinkedServiceKustoMapOutput() LinkedServiceKustoMapOutput {
	return i.ToLinkedServiceKustoMapOutputWithContext(context.Background())
}

func (i LinkedServiceKustoMap) ToLinkedServiceKustoMapOutputWithContext(ctx context.Context) LinkedServiceKustoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceKustoMapOutput)
}

type LinkedServiceKustoOutput struct{ *pulumi.OutputState }

func (LinkedServiceKustoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceKusto)(nil)).Elem()
}

func (o LinkedServiceKustoOutput) ToLinkedServiceKustoOutput() LinkedServiceKustoOutput {
	return o
}

func (o LinkedServiceKustoOutput) ToLinkedServiceKustoOutputWithContext(ctx context.Context) LinkedServiceKustoOutput {
	return o
}

// A map of additional properties to associate with the Data Factory Linked Service.
//
// The following supported arguments are specific to Azure Kusto Linked Service:
func (o LinkedServiceKustoOutput) AdditionalProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceKusto) pulumi.StringMapOutput { return v.AdditionalProperties }).(pulumi.StringMapOutput)
}

// List of tags that can be used for describing the Data Factory Linked Service.
func (o LinkedServiceKustoOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinkedServiceKusto) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
func (o LinkedServiceKustoOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceKusto) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The description for the Data Factory Linked Service.
func (o LinkedServiceKustoOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceKusto) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The integration runtime reference to associate with the Data Factory Linked Service.
func (o LinkedServiceKustoOutput) IntegrationRuntimeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceKusto) pulumi.StringPtrOutput { return v.IntegrationRuntimeName }).(pulumi.StringPtrOutput)
}

// The Kusto Database Name.
func (o LinkedServiceKustoOutput) KustoDatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceKusto) pulumi.StringOutput { return v.KustoDatabaseName }).(pulumi.StringOutput)
}

// The URI of the Kusto Cluster endpoint.
func (o LinkedServiceKustoOutput) KustoEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceKusto) pulumi.StringOutput { return v.KustoEndpoint }).(pulumi.StringOutput)
}

// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
func (o LinkedServiceKustoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceKusto) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of parameters to associate with the Data Factory Linked Service.
func (o LinkedServiceKustoOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceKusto) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// The service principal id in which to authenticate against the Kusto Database.
func (o LinkedServiceKustoOutput) ServicePrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceKusto) pulumi.StringPtrOutput { return v.ServicePrincipalId }).(pulumi.StringPtrOutput)
}

// The service principal key in which to authenticate against the Kusto Database.
func (o LinkedServiceKustoOutput) ServicePrincipalKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceKusto) pulumi.StringPtrOutput { return v.ServicePrincipalKey }).(pulumi.StringPtrOutput)
}

// The service principal tenant id or name in which to authenticate against the Kusto Database.
//
// > **NOTE** If `servicePrincipalId` is used, `servicePrincipalKey` and `tenant` is also required.
//
// > **NOTE** One of Managed Identity authentication and Service Principal authentication must be set.
func (o LinkedServiceKustoOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceKusto) pulumi.StringPtrOutput { return v.Tenant }).(pulumi.StringPtrOutput)
}

// Whether to use the Data Factory's managed identity to authenticate against the Kusto Database.
func (o LinkedServiceKustoOutput) UseManagedIdentity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinkedServiceKusto) pulumi.BoolPtrOutput { return v.UseManagedIdentity }).(pulumi.BoolPtrOutput)
}

type LinkedServiceKustoArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceKustoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceKusto)(nil)).Elem()
}

func (o LinkedServiceKustoArrayOutput) ToLinkedServiceKustoArrayOutput() LinkedServiceKustoArrayOutput {
	return o
}

func (o LinkedServiceKustoArrayOutput) ToLinkedServiceKustoArrayOutputWithContext(ctx context.Context) LinkedServiceKustoArrayOutput {
	return o
}

func (o LinkedServiceKustoArrayOutput) Index(i pulumi.IntInput) LinkedServiceKustoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinkedServiceKusto {
		return vs[0].([]*LinkedServiceKusto)[vs[1].(int)]
	}).(LinkedServiceKustoOutput)
}

type LinkedServiceKustoMapOutput struct{ *pulumi.OutputState }

func (LinkedServiceKustoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceKusto)(nil)).Elem()
}

func (o LinkedServiceKustoMapOutput) ToLinkedServiceKustoMapOutput() LinkedServiceKustoMapOutput {
	return o
}

func (o LinkedServiceKustoMapOutput) ToLinkedServiceKustoMapOutputWithContext(ctx context.Context) LinkedServiceKustoMapOutput {
	return o
}

func (o LinkedServiceKustoMapOutput) MapIndex(k pulumi.StringInput) LinkedServiceKustoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinkedServiceKusto {
		return vs[0].(map[string]*LinkedServiceKusto)[vs[1].(string)]
	}).(LinkedServiceKustoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceKustoInput)(nil)).Elem(), &LinkedServiceKusto{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceKustoArrayInput)(nil)).Elem(), LinkedServiceKustoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceKustoMapInput)(nil)).Elem(), LinkedServiceKustoMap{})
	pulumi.RegisterOutputType(LinkedServiceKustoOutput{})
	pulumi.RegisterOutputType(LinkedServiceKustoArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceKustoMapOutput{})
}
