// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linked Service (connection) between a SFTP Server and Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/datafactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "example", &datafactory.FactoryArgs{
//				Name:              pulumi.String("example"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewLinkedServiceSftp(ctx, "example", &datafactory.LinkedServiceSftpArgs{
//				Name:               pulumi.String("example"),
//				DataFactoryId:      exampleFactory.ID(),
//				AuthenticationType: pulumi.String("Basic"),
//				Host:               pulumi.String("http://www.bing.com"),
//				Port:               pulumi.Int(22),
//				Username:           pulumi.String("foo"),
//				Password:           pulumi.String("bar"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Factory Linked Service's can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:datafactory/linkedServiceSftp:LinkedServiceSftp example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
// ```
type LinkedServiceSftp struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to SFTP Linked Service:
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The type of authentication used to connect to the SFTP server. Valid options are `MultiFactor`, `Basic` and `SshPublicKey`.
	AuthenticationType pulumi.StringOutput `pulumi:"authenticationType"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The SFTP server hostname.
	Host pulumi.StringOutput `pulumi:"host"`
	// The host key fingerprint of the SFTP server.
	HostKeyFingerprint pulumi.StringPtrOutput `pulumi:"hostKeyFingerprint"`
	// The name of the integration runtime to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrOutput `pulumi:"integrationRuntimeName"`
	// A `keyVaultPassword` block as defined below.
	//
	// > **Note:** Either `password` or `keyVaultPassword` is required when `authenticationType` is set to `Basic`.
	KeyVaultPasswords LinkedServiceSftpKeyVaultPasswordArrayOutput `pulumi:"keyVaultPasswords"`
	// A `keyVaultPrivateKeyContentBase64` block as defined below.
	KeyVaultPrivateKeyContentBase64 LinkedServiceSftpKeyVaultPrivateKeyContentBase64PtrOutput `pulumi:"keyVaultPrivateKeyContentBase64"`
	// A `keyVaultPrivateKeyPassphrase` block as defined below.
	//
	// > **Note:** One of `privateKeyContentBase64` or `privateKeyPath` (or their Key Vault equivalent) is required when `authenticationType` is set to `SshPublicKey`.
	KeyVaultPrivateKeyPassphrase LinkedServiceSftpKeyVaultPrivateKeyPassphrasePtrOutput `pulumi:"keyVaultPrivateKeyPassphrase"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// Password to log on to the SFTP Server for Basic Authentication.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connection. Default value is 22.
	Port pulumi.IntOutput `pulumi:"port"`
	// The Base64 encoded private key content in OpenSSH format used to log on to the SFTP server.
	PrivateKeyContentBase64 pulumi.StringPtrOutput `pulumi:"privateKeyContentBase64"`
	// The passphrase for the private key if the key is encrypted.
	PrivateKeyPassphrase pulumi.StringPtrOutput `pulumi:"privateKeyPassphrase"`
	// The absolute path to the private key file that the self-hosted integration runtime can access.
	//
	// > **Note:** `privateKeyPath` only applies when using a self-hosted integration runtime (instead of the default Azure provided runtime), as indicated by supplying a value for `integrationRuntimeName`.
	PrivateKeyPath pulumi.StringPtrOutput `pulumi:"privateKeyPath"`
	// Whether to validate host key fingerprint while connecting. If set to `false`, `hostKeyFingerprint` must also be set.
	SkipHostKeyValidation pulumi.BoolPtrOutput `pulumi:"skipHostKeyValidation"`
	// The username used to log on to the SFTP server.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewLinkedServiceSftp registers a new resource with the given unique name, arguments, and options.
func NewLinkedServiceSftp(ctx *pulumi.Context,
	name string, args *LinkedServiceSftpArgs, opts ...pulumi.ResourceOption) (*LinkedServiceSftp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationType == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationType'")
	}
	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PrivateKeyContentBase64 != nil {
		args.PrivateKeyContentBase64 = pulumi.ToSecret(args.PrivateKeyContentBase64).(pulumi.StringPtrInput)
	}
	if args.PrivateKeyPassphrase != nil {
		args.PrivateKeyPassphrase = pulumi.ToSecret(args.PrivateKeyPassphrase).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"privateKeyContentBase64",
		"privateKeyPassphrase",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LinkedServiceSftp
	err := ctx.RegisterResource("azure:datafactory/linkedServiceSftp:LinkedServiceSftp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedServiceSftp gets an existing LinkedServiceSftp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedServiceSftp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedServiceSftpState, opts ...pulumi.ResourceOption) (*LinkedServiceSftp, error) {
	var resource LinkedServiceSftp
	err := ctx.ReadResource("azure:datafactory/linkedServiceSftp:LinkedServiceSftp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedServiceSftp resources.
type linkedServiceSftpState struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to SFTP Linked Service:
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations []string `pulumi:"annotations"`
	// The type of authentication used to connect to the SFTP server. Valid options are `MultiFactor`, `Basic` and `SshPublicKey`.
	AuthenticationType *string `pulumi:"authenticationType"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description *string `pulumi:"description"`
	// The SFTP server hostname.
	Host *string `pulumi:"host"`
	// The host key fingerprint of the SFTP server.
	HostKeyFingerprint *string `pulumi:"hostKeyFingerprint"`
	// The name of the integration runtime to associate with the Data Factory Linked Service.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// A `keyVaultPassword` block as defined below.
	//
	// > **Note:** Either `password` or `keyVaultPassword` is required when `authenticationType` is set to `Basic`.
	KeyVaultPasswords []LinkedServiceSftpKeyVaultPassword `pulumi:"keyVaultPasswords"`
	// A `keyVaultPrivateKeyContentBase64` block as defined below.
	KeyVaultPrivateKeyContentBase64 *LinkedServiceSftpKeyVaultPrivateKeyContentBase64 `pulumi:"keyVaultPrivateKeyContentBase64"`
	// A `keyVaultPrivateKeyPassphrase` block as defined below.
	//
	// > **Note:** One of `privateKeyContentBase64` or `privateKeyPath` (or their Key Vault equivalent) is required when `authenticationType` is set to `SshPublicKey`.
	KeyVaultPrivateKeyPassphrase *LinkedServiceSftpKeyVaultPrivateKeyPassphrase `pulumi:"keyVaultPrivateKeyPassphrase"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters map[string]string `pulumi:"parameters"`
	// Password to log on to the SFTP Server for Basic Authentication.
	Password *string `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connection. Default value is 22.
	Port *int `pulumi:"port"`
	// The Base64 encoded private key content in OpenSSH format used to log on to the SFTP server.
	PrivateKeyContentBase64 *string `pulumi:"privateKeyContentBase64"`
	// The passphrase for the private key if the key is encrypted.
	PrivateKeyPassphrase *string `pulumi:"privateKeyPassphrase"`
	// The absolute path to the private key file that the self-hosted integration runtime can access.
	//
	// > **Note:** `privateKeyPath` only applies when using a self-hosted integration runtime (instead of the default Azure provided runtime), as indicated by supplying a value for `integrationRuntimeName`.
	PrivateKeyPath *string `pulumi:"privateKeyPath"`
	// Whether to validate host key fingerprint while connecting. If set to `false`, `hostKeyFingerprint` must also be set.
	SkipHostKeyValidation *bool `pulumi:"skipHostKeyValidation"`
	// The username used to log on to the SFTP server.
	Username *string `pulumi:"username"`
}

type LinkedServiceSftpState struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to SFTP Linked Service:
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayInput
	// The type of authentication used to connect to the SFTP server. Valid options are `MultiFactor`, `Basic` and `SshPublicKey`.
	AuthenticationType pulumi.StringPtrInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrInput
	// The SFTP server hostname.
	Host pulumi.StringPtrInput
	// The host key fingerprint of the SFTP server.
	HostKeyFingerprint pulumi.StringPtrInput
	// The name of the integration runtime to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrInput
	// A `keyVaultPassword` block as defined below.
	//
	// > **Note:** Either `password` or `keyVaultPassword` is required when `authenticationType` is set to `Basic`.
	KeyVaultPasswords LinkedServiceSftpKeyVaultPasswordArrayInput
	// A `keyVaultPrivateKeyContentBase64` block as defined below.
	KeyVaultPrivateKeyContentBase64 LinkedServiceSftpKeyVaultPrivateKeyContentBase64PtrInput
	// A `keyVaultPrivateKeyPassphrase` block as defined below.
	//
	// > **Note:** One of `privateKeyContentBase64` or `privateKeyPath` (or their Key Vault equivalent) is required when `authenticationType` is set to `SshPublicKey`.
	KeyVaultPrivateKeyPassphrase LinkedServiceSftpKeyVaultPrivateKeyPassphrasePtrInput
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapInput
	// Password to log on to the SFTP Server for Basic Authentication.
	Password pulumi.StringPtrInput
	// The TCP port number that the SFTP server uses to listen for client connection. Default value is 22.
	Port pulumi.IntPtrInput
	// The Base64 encoded private key content in OpenSSH format used to log on to the SFTP server.
	PrivateKeyContentBase64 pulumi.StringPtrInput
	// The passphrase for the private key if the key is encrypted.
	PrivateKeyPassphrase pulumi.StringPtrInput
	// The absolute path to the private key file that the self-hosted integration runtime can access.
	//
	// > **Note:** `privateKeyPath` only applies when using a self-hosted integration runtime (instead of the default Azure provided runtime), as indicated by supplying a value for `integrationRuntimeName`.
	PrivateKeyPath pulumi.StringPtrInput
	// Whether to validate host key fingerprint while connecting. If set to `false`, `hostKeyFingerprint` must also be set.
	SkipHostKeyValidation pulumi.BoolPtrInput
	// The username used to log on to the SFTP server.
	Username pulumi.StringPtrInput
}

func (LinkedServiceSftpState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceSftpState)(nil)).Elem()
}

type linkedServiceSftpArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to SFTP Linked Service:
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations []string `pulumi:"annotations"`
	// The type of authentication used to connect to the SFTP server. Valid options are `MultiFactor`, `Basic` and `SshPublicKey`.
	AuthenticationType string `pulumi:"authenticationType"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description *string `pulumi:"description"`
	// The SFTP server hostname.
	Host string `pulumi:"host"`
	// The host key fingerprint of the SFTP server.
	HostKeyFingerprint *string `pulumi:"hostKeyFingerprint"`
	// The name of the integration runtime to associate with the Data Factory Linked Service.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// A `keyVaultPassword` block as defined below.
	//
	// > **Note:** Either `password` or `keyVaultPassword` is required when `authenticationType` is set to `Basic`.
	KeyVaultPasswords []LinkedServiceSftpKeyVaultPassword `pulumi:"keyVaultPasswords"`
	// A `keyVaultPrivateKeyContentBase64` block as defined below.
	KeyVaultPrivateKeyContentBase64 *LinkedServiceSftpKeyVaultPrivateKeyContentBase64 `pulumi:"keyVaultPrivateKeyContentBase64"`
	// A `keyVaultPrivateKeyPassphrase` block as defined below.
	//
	// > **Note:** One of `privateKeyContentBase64` or `privateKeyPath` (or their Key Vault equivalent) is required when `authenticationType` is set to `SshPublicKey`.
	KeyVaultPrivateKeyPassphrase *LinkedServiceSftpKeyVaultPrivateKeyPassphrase `pulumi:"keyVaultPrivateKeyPassphrase"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters map[string]string `pulumi:"parameters"`
	// Password to log on to the SFTP Server for Basic Authentication.
	Password *string `pulumi:"password"`
	// The TCP port number that the SFTP server uses to listen for client connection. Default value is 22.
	Port int `pulumi:"port"`
	// The Base64 encoded private key content in OpenSSH format used to log on to the SFTP server.
	PrivateKeyContentBase64 *string `pulumi:"privateKeyContentBase64"`
	// The passphrase for the private key if the key is encrypted.
	PrivateKeyPassphrase *string `pulumi:"privateKeyPassphrase"`
	// The absolute path to the private key file that the self-hosted integration runtime can access.
	//
	// > **Note:** `privateKeyPath` only applies when using a self-hosted integration runtime (instead of the default Azure provided runtime), as indicated by supplying a value for `integrationRuntimeName`.
	PrivateKeyPath *string `pulumi:"privateKeyPath"`
	// Whether to validate host key fingerprint while connecting. If set to `false`, `hostKeyFingerprint` must also be set.
	SkipHostKeyValidation *bool `pulumi:"skipHostKeyValidation"`
	// The username used to log on to the SFTP server.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a LinkedServiceSftp resource.
type LinkedServiceSftpArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to SFTP Linked Service:
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayInput
	// The type of authentication used to connect to the SFTP server. Valid options are `MultiFactor`, `Basic` and `SshPublicKey`.
	AuthenticationType pulumi.StringInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrInput
	// The SFTP server hostname.
	Host pulumi.StringInput
	// The host key fingerprint of the SFTP server.
	HostKeyFingerprint pulumi.StringPtrInput
	// The name of the integration runtime to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrInput
	// A `keyVaultPassword` block as defined below.
	//
	// > **Note:** Either `password` or `keyVaultPassword` is required when `authenticationType` is set to `Basic`.
	KeyVaultPasswords LinkedServiceSftpKeyVaultPasswordArrayInput
	// A `keyVaultPrivateKeyContentBase64` block as defined below.
	KeyVaultPrivateKeyContentBase64 LinkedServiceSftpKeyVaultPrivateKeyContentBase64PtrInput
	// A `keyVaultPrivateKeyPassphrase` block as defined below.
	//
	// > **Note:** One of `privateKeyContentBase64` or `privateKeyPath` (or their Key Vault equivalent) is required when `authenticationType` is set to `SshPublicKey`.
	KeyVaultPrivateKeyPassphrase LinkedServiceSftpKeyVaultPrivateKeyPassphrasePtrInput
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapInput
	// Password to log on to the SFTP Server for Basic Authentication.
	Password pulumi.StringPtrInput
	// The TCP port number that the SFTP server uses to listen for client connection. Default value is 22.
	Port pulumi.IntInput
	// The Base64 encoded private key content in OpenSSH format used to log on to the SFTP server.
	PrivateKeyContentBase64 pulumi.StringPtrInput
	// The passphrase for the private key if the key is encrypted.
	PrivateKeyPassphrase pulumi.StringPtrInput
	// The absolute path to the private key file that the self-hosted integration runtime can access.
	//
	// > **Note:** `privateKeyPath` only applies when using a self-hosted integration runtime (instead of the default Azure provided runtime), as indicated by supplying a value for `integrationRuntimeName`.
	PrivateKeyPath pulumi.StringPtrInput
	// Whether to validate host key fingerprint while connecting. If set to `false`, `hostKeyFingerprint` must also be set.
	SkipHostKeyValidation pulumi.BoolPtrInput
	// The username used to log on to the SFTP server.
	Username pulumi.StringInput
}

func (LinkedServiceSftpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceSftpArgs)(nil)).Elem()
}

type LinkedServiceSftpInput interface {
	pulumi.Input

	ToLinkedServiceSftpOutput() LinkedServiceSftpOutput
	ToLinkedServiceSftpOutputWithContext(ctx context.Context) LinkedServiceSftpOutput
}

func (*LinkedServiceSftp) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceSftp)(nil)).Elem()
}

func (i *LinkedServiceSftp) ToLinkedServiceSftpOutput() LinkedServiceSftpOutput {
	return i.ToLinkedServiceSftpOutputWithContext(context.Background())
}

func (i *LinkedServiceSftp) ToLinkedServiceSftpOutputWithContext(ctx context.Context) LinkedServiceSftpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceSftpOutput)
}

// LinkedServiceSftpArrayInput is an input type that accepts LinkedServiceSftpArray and LinkedServiceSftpArrayOutput values.
// You can construct a concrete instance of `LinkedServiceSftpArrayInput` via:
//
//	LinkedServiceSftpArray{ LinkedServiceSftpArgs{...} }
type LinkedServiceSftpArrayInput interface {
	pulumi.Input

	ToLinkedServiceSftpArrayOutput() LinkedServiceSftpArrayOutput
	ToLinkedServiceSftpArrayOutputWithContext(context.Context) LinkedServiceSftpArrayOutput
}

type LinkedServiceSftpArray []LinkedServiceSftpInput

func (LinkedServiceSftpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceSftp)(nil)).Elem()
}

func (i LinkedServiceSftpArray) ToLinkedServiceSftpArrayOutput() LinkedServiceSftpArrayOutput {
	return i.ToLinkedServiceSftpArrayOutputWithContext(context.Background())
}

func (i LinkedServiceSftpArray) ToLinkedServiceSftpArrayOutputWithContext(ctx context.Context) LinkedServiceSftpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceSftpArrayOutput)
}

// LinkedServiceSftpMapInput is an input type that accepts LinkedServiceSftpMap and LinkedServiceSftpMapOutput values.
// You can construct a concrete instance of `LinkedServiceSftpMapInput` via:
//
//	LinkedServiceSftpMap{ "key": LinkedServiceSftpArgs{...} }
type LinkedServiceSftpMapInput interface {
	pulumi.Input

	ToLinkedServiceSftpMapOutput() LinkedServiceSftpMapOutput
	ToLinkedServiceSftpMapOutputWithContext(context.Context) LinkedServiceSftpMapOutput
}

type LinkedServiceSftpMap map[string]LinkedServiceSftpInput

func (LinkedServiceSftpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceSftp)(nil)).Elem()
}

func (i LinkedServiceSftpMap) ToLinkedServiceSftpMapOutput() LinkedServiceSftpMapOutput {
	return i.ToLinkedServiceSftpMapOutputWithContext(context.Background())
}

func (i LinkedServiceSftpMap) ToLinkedServiceSftpMapOutputWithContext(ctx context.Context) LinkedServiceSftpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceSftpMapOutput)
}

type LinkedServiceSftpOutput struct{ *pulumi.OutputState }

func (LinkedServiceSftpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceSftp)(nil)).Elem()
}

func (o LinkedServiceSftpOutput) ToLinkedServiceSftpOutput() LinkedServiceSftpOutput {
	return o
}

func (o LinkedServiceSftpOutput) ToLinkedServiceSftpOutputWithContext(ctx context.Context) LinkedServiceSftpOutput {
	return o
}

// A map of additional properties to associate with the Data Factory Linked Service.
//
// The following supported arguments are specific to SFTP Linked Service:
func (o LinkedServiceSftpOutput) AdditionalProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringMapOutput { return v.AdditionalProperties }).(pulumi.StringMapOutput)
}

// List of tags that can be used for describing the Data Factory Linked Service.
func (o LinkedServiceSftpOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The type of authentication used to connect to the SFTP server. Valid options are `MultiFactor`, `Basic` and `SshPublicKey`.
func (o LinkedServiceSftpOutput) AuthenticationType() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringOutput { return v.AuthenticationType }).(pulumi.StringOutput)
}

// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
func (o LinkedServiceSftpOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The description for the Data Factory Linked Service.
func (o LinkedServiceSftpOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The SFTP server hostname.
func (o LinkedServiceSftpOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// The host key fingerprint of the SFTP server.
func (o LinkedServiceSftpOutput) HostKeyFingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringPtrOutput { return v.HostKeyFingerprint }).(pulumi.StringPtrOutput)
}

// The name of the integration runtime to associate with the Data Factory Linked Service.
func (o LinkedServiceSftpOutput) IntegrationRuntimeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringPtrOutput { return v.IntegrationRuntimeName }).(pulumi.StringPtrOutput)
}

// A `keyVaultPassword` block as defined below.
//
// > **Note:** Either `password` or `keyVaultPassword` is required when `authenticationType` is set to `Basic`.
func (o LinkedServiceSftpOutput) KeyVaultPasswords() LinkedServiceSftpKeyVaultPasswordArrayOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) LinkedServiceSftpKeyVaultPasswordArrayOutput { return v.KeyVaultPasswords }).(LinkedServiceSftpKeyVaultPasswordArrayOutput)
}

// A `keyVaultPrivateKeyContentBase64` block as defined below.
func (o LinkedServiceSftpOutput) KeyVaultPrivateKeyContentBase64() LinkedServiceSftpKeyVaultPrivateKeyContentBase64PtrOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) LinkedServiceSftpKeyVaultPrivateKeyContentBase64PtrOutput {
		return v.KeyVaultPrivateKeyContentBase64
	}).(LinkedServiceSftpKeyVaultPrivateKeyContentBase64PtrOutput)
}

// A `keyVaultPrivateKeyPassphrase` block as defined below.
//
// > **Note:** One of `privateKeyContentBase64` or `privateKeyPath` (or their Key Vault equivalent) is required when `authenticationType` is set to `SshPublicKey`.
func (o LinkedServiceSftpOutput) KeyVaultPrivateKeyPassphrase() LinkedServiceSftpKeyVaultPrivateKeyPassphrasePtrOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) LinkedServiceSftpKeyVaultPrivateKeyPassphrasePtrOutput {
		return v.KeyVaultPrivateKeyPassphrase
	}).(LinkedServiceSftpKeyVaultPrivateKeyPassphrasePtrOutput)
}

// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
func (o LinkedServiceSftpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of parameters to associate with the Data Factory Linked Service.
func (o LinkedServiceSftpOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// Password to log on to the SFTP Server for Basic Authentication.
func (o LinkedServiceSftpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The TCP port number that the SFTP server uses to listen for client connection. Default value is 22.
func (o LinkedServiceSftpOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The Base64 encoded private key content in OpenSSH format used to log on to the SFTP server.
func (o LinkedServiceSftpOutput) PrivateKeyContentBase64() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringPtrOutput { return v.PrivateKeyContentBase64 }).(pulumi.StringPtrOutput)
}

// The passphrase for the private key if the key is encrypted.
func (o LinkedServiceSftpOutput) PrivateKeyPassphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringPtrOutput { return v.PrivateKeyPassphrase }).(pulumi.StringPtrOutput)
}

// The absolute path to the private key file that the self-hosted integration runtime can access.
//
// > **Note:** `privateKeyPath` only applies when using a self-hosted integration runtime (instead of the default Azure provided runtime), as indicated by supplying a value for `integrationRuntimeName`.
func (o LinkedServiceSftpOutput) PrivateKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringPtrOutput { return v.PrivateKeyPath }).(pulumi.StringPtrOutput)
}

// Whether to validate host key fingerprint while connecting. If set to `false`, `hostKeyFingerprint` must also be set.
func (o LinkedServiceSftpOutput) SkipHostKeyValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.BoolPtrOutput { return v.SkipHostKeyValidation }).(pulumi.BoolPtrOutput)
}

// The username used to log on to the SFTP server.
func (o LinkedServiceSftpOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceSftp) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type LinkedServiceSftpArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceSftpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceSftp)(nil)).Elem()
}

func (o LinkedServiceSftpArrayOutput) ToLinkedServiceSftpArrayOutput() LinkedServiceSftpArrayOutput {
	return o
}

func (o LinkedServiceSftpArrayOutput) ToLinkedServiceSftpArrayOutputWithContext(ctx context.Context) LinkedServiceSftpArrayOutput {
	return o
}

func (o LinkedServiceSftpArrayOutput) Index(i pulumi.IntInput) LinkedServiceSftpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinkedServiceSftp {
		return vs[0].([]*LinkedServiceSftp)[vs[1].(int)]
	}).(LinkedServiceSftpOutput)
}

type LinkedServiceSftpMapOutput struct{ *pulumi.OutputState }

func (LinkedServiceSftpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceSftp)(nil)).Elem()
}

func (o LinkedServiceSftpMapOutput) ToLinkedServiceSftpMapOutput() LinkedServiceSftpMapOutput {
	return o
}

func (o LinkedServiceSftpMapOutput) ToLinkedServiceSftpMapOutputWithContext(ctx context.Context) LinkedServiceSftpMapOutput {
	return o
}

func (o LinkedServiceSftpMapOutput) MapIndex(k pulumi.StringInput) LinkedServiceSftpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinkedServiceSftp {
		return vs[0].(map[string]*LinkedServiceSftp)[vs[1].(string)]
	}).(LinkedServiceSftpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceSftpInput)(nil)).Elem(), &LinkedServiceSftp{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceSftpArrayInput)(nil)).Elem(), LinkedServiceSftpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceSftpMapInput)(nil)).Elem(), LinkedServiceSftpMap{})
	pulumi.RegisterOutputType(LinkedServiceSftpOutput{})
	pulumi.RegisterOutputType(LinkedServiceSftpArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceSftpMapOutput{})
}
