// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Data Factory Managed Private Endpoint.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
//				Location:                     exampleResourceGroup.Location,
//				ResourceGroupName:            exampleResourceGroup.Name,
//				ManagedVirtualNetworkEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountKind:            pulumi.String("BlobStorage"),
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewManagedPrivateEndpoint(ctx, "exampleManagedPrivateEndpoint", &datafactory.ManagedPrivateEndpointArgs{
//				DataFactoryId:    exampleFactory.ID(),
//				TargetResourceId: exampleAccount.ID(),
//				SubresourceName:  pulumi.String("blob"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Factory Managed Private Endpoint can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datafactory/managedPrivateEndpoint:ManagedPrivateEndpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/managedVirtualNetworks/default/managedPrivateEndpoints/endpoint1
//
// ```
type ManagedPrivateEndpoint struct {
	pulumi.CustomResourceState

	// The ID of the Data Factory on which to create the Managed Private Endpoint. Changing this forces a new resource to be created.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// Fully qualified domain names. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Possible values are listed in [documentation](https://docs.microsoft.com/azure/private-link/private-endpoint-overview#dns-configuration).
	Fqdns pulumi.StringArrayOutput `pulumi:"fqdns"`
	// Specifies the name which should be used for this Managed Private Endpoint. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the sub resource name which the Data Factory Private Endpoint is able to connect to. Changing this forces a new resource to be created.
	SubresourceName pulumi.StringPtrOutput `pulumi:"subresourceName"`
	// The ID of the Private Link Enabled Remote Resource which this Data Factory Private Endpoint should be connected to. Changing this forces a new resource to be created.
	TargetResourceId pulumi.StringOutput `pulumi:"targetResourceId"`
}

// NewManagedPrivateEndpoint registers a new resource with the given unique name, arguments, and options.
func NewManagedPrivateEndpoint(ctx *pulumi.Context,
	name string, args *ManagedPrivateEndpointArgs, opts ...pulumi.ResourceOption) (*ManagedPrivateEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	if args.TargetResourceId == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedPrivateEndpoint
	err := ctx.RegisterResource("azure:datafactory/managedPrivateEndpoint:ManagedPrivateEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedPrivateEndpoint gets an existing ManagedPrivateEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedPrivateEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedPrivateEndpointState, opts ...pulumi.ResourceOption) (*ManagedPrivateEndpoint, error) {
	var resource ManagedPrivateEndpoint
	err := ctx.ReadResource("azure:datafactory/managedPrivateEndpoint:ManagedPrivateEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedPrivateEndpoint resources.
type managedPrivateEndpointState struct {
	// The ID of the Data Factory on which to create the Managed Private Endpoint. Changing this forces a new resource to be created.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// Fully qualified domain names. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Possible values are listed in [documentation](https://docs.microsoft.com/azure/private-link/private-endpoint-overview#dns-configuration).
	Fqdns []string `pulumi:"fqdns"`
	// Specifies the name which should be used for this Managed Private Endpoint. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the sub resource name which the Data Factory Private Endpoint is able to connect to. Changing this forces a new resource to be created.
	SubresourceName *string `pulumi:"subresourceName"`
	// The ID of the Private Link Enabled Remote Resource which this Data Factory Private Endpoint should be connected to. Changing this forces a new resource to be created.
	TargetResourceId *string `pulumi:"targetResourceId"`
}

type ManagedPrivateEndpointState struct {
	// The ID of the Data Factory on which to create the Managed Private Endpoint. Changing this forces a new resource to be created.
	DataFactoryId pulumi.StringPtrInput
	// Fully qualified domain names. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Possible values are listed in [documentation](https://docs.microsoft.com/azure/private-link/private-endpoint-overview#dns-configuration).
	Fqdns pulumi.StringArrayInput
	// Specifies the name which should be used for this Managed Private Endpoint. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the sub resource name which the Data Factory Private Endpoint is able to connect to. Changing this forces a new resource to be created.
	SubresourceName pulumi.StringPtrInput
	// The ID of the Private Link Enabled Remote Resource which this Data Factory Private Endpoint should be connected to. Changing this forces a new resource to be created.
	TargetResourceId pulumi.StringPtrInput
}

func (ManagedPrivateEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedPrivateEndpointState)(nil)).Elem()
}

type managedPrivateEndpointArgs struct {
	// The ID of the Data Factory on which to create the Managed Private Endpoint. Changing this forces a new resource to be created.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// Fully qualified domain names. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Possible values are listed in [documentation](https://docs.microsoft.com/azure/private-link/private-endpoint-overview#dns-configuration).
	Fqdns []string `pulumi:"fqdns"`
	// Specifies the name which should be used for this Managed Private Endpoint. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies the sub resource name which the Data Factory Private Endpoint is able to connect to. Changing this forces a new resource to be created.
	SubresourceName *string `pulumi:"subresourceName"`
	// The ID of the Private Link Enabled Remote Resource which this Data Factory Private Endpoint should be connected to. Changing this forces a new resource to be created.
	TargetResourceId string `pulumi:"targetResourceId"`
}

// The set of arguments for constructing a ManagedPrivateEndpoint resource.
type ManagedPrivateEndpointArgs struct {
	// The ID of the Data Factory on which to create the Managed Private Endpoint. Changing this forces a new resource to be created.
	DataFactoryId pulumi.StringInput
	// Fully qualified domain names. Changing this forces a new resource to be created.
	//
	// > **NOTE:** Possible values are listed in [documentation](https://docs.microsoft.com/azure/private-link/private-endpoint-overview#dns-configuration).
	Fqdns pulumi.StringArrayInput
	// Specifies the name which should be used for this Managed Private Endpoint. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies the sub resource name which the Data Factory Private Endpoint is able to connect to. Changing this forces a new resource to be created.
	SubresourceName pulumi.StringPtrInput
	// The ID of the Private Link Enabled Remote Resource which this Data Factory Private Endpoint should be connected to. Changing this forces a new resource to be created.
	TargetResourceId pulumi.StringInput
}

func (ManagedPrivateEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedPrivateEndpointArgs)(nil)).Elem()
}

type ManagedPrivateEndpointInput interface {
	pulumi.Input

	ToManagedPrivateEndpointOutput() ManagedPrivateEndpointOutput
	ToManagedPrivateEndpointOutputWithContext(ctx context.Context) ManagedPrivateEndpointOutput
}

func (*ManagedPrivateEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrivateEndpoint)(nil)).Elem()
}

func (i *ManagedPrivateEndpoint) ToManagedPrivateEndpointOutput() ManagedPrivateEndpointOutput {
	return i.ToManagedPrivateEndpointOutputWithContext(context.Background())
}

func (i *ManagedPrivateEndpoint) ToManagedPrivateEndpointOutputWithContext(ctx context.Context) ManagedPrivateEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointOutput)
}

// ManagedPrivateEndpointArrayInput is an input type that accepts ManagedPrivateEndpointArray and ManagedPrivateEndpointArrayOutput values.
// You can construct a concrete instance of `ManagedPrivateEndpointArrayInput` via:
//
//	ManagedPrivateEndpointArray{ ManagedPrivateEndpointArgs{...} }
type ManagedPrivateEndpointArrayInput interface {
	pulumi.Input

	ToManagedPrivateEndpointArrayOutput() ManagedPrivateEndpointArrayOutput
	ToManagedPrivateEndpointArrayOutputWithContext(context.Context) ManagedPrivateEndpointArrayOutput
}

type ManagedPrivateEndpointArray []ManagedPrivateEndpointInput

func (ManagedPrivateEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedPrivateEndpoint)(nil)).Elem()
}

func (i ManagedPrivateEndpointArray) ToManagedPrivateEndpointArrayOutput() ManagedPrivateEndpointArrayOutput {
	return i.ToManagedPrivateEndpointArrayOutputWithContext(context.Background())
}

func (i ManagedPrivateEndpointArray) ToManagedPrivateEndpointArrayOutputWithContext(ctx context.Context) ManagedPrivateEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointArrayOutput)
}

// ManagedPrivateEndpointMapInput is an input type that accepts ManagedPrivateEndpointMap and ManagedPrivateEndpointMapOutput values.
// You can construct a concrete instance of `ManagedPrivateEndpointMapInput` via:
//
//	ManagedPrivateEndpointMap{ "key": ManagedPrivateEndpointArgs{...} }
type ManagedPrivateEndpointMapInput interface {
	pulumi.Input

	ToManagedPrivateEndpointMapOutput() ManagedPrivateEndpointMapOutput
	ToManagedPrivateEndpointMapOutputWithContext(context.Context) ManagedPrivateEndpointMapOutput
}

type ManagedPrivateEndpointMap map[string]ManagedPrivateEndpointInput

func (ManagedPrivateEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedPrivateEndpoint)(nil)).Elem()
}

func (i ManagedPrivateEndpointMap) ToManagedPrivateEndpointMapOutput() ManagedPrivateEndpointMapOutput {
	return i.ToManagedPrivateEndpointMapOutputWithContext(context.Background())
}

func (i ManagedPrivateEndpointMap) ToManagedPrivateEndpointMapOutputWithContext(ctx context.Context) ManagedPrivateEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedPrivateEndpointMapOutput)
}

type ManagedPrivateEndpointOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedPrivateEndpoint)(nil)).Elem()
}

func (o ManagedPrivateEndpointOutput) ToManagedPrivateEndpointOutput() ManagedPrivateEndpointOutput {
	return o
}

func (o ManagedPrivateEndpointOutput) ToManagedPrivateEndpointOutputWithContext(ctx context.Context) ManagedPrivateEndpointOutput {
	return o
}

// The ID of the Data Factory on which to create the Managed Private Endpoint. Changing this forces a new resource to be created.
func (o ManagedPrivateEndpointOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpoint) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// Fully qualified domain names. Changing this forces a new resource to be created.
//
// > **NOTE:** Possible values are listed in [documentation](https://docs.microsoft.com/azure/private-link/private-endpoint-overview#dns-configuration).
func (o ManagedPrivateEndpointOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpoint) pulumi.StringArrayOutput { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// Specifies the name which should be used for this Managed Private Endpoint. Changing this forces a new resource to be created.
func (o ManagedPrivateEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the sub resource name which the Data Factory Private Endpoint is able to connect to. Changing this forces a new resource to be created.
func (o ManagedPrivateEndpointOutput) SubresourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpoint) pulumi.StringPtrOutput { return v.SubresourceName }).(pulumi.StringPtrOutput)
}

// The ID of the Private Link Enabled Remote Resource which this Data Factory Private Endpoint should be connected to. Changing this forces a new resource to be created.
func (o ManagedPrivateEndpointOutput) TargetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedPrivateEndpoint) pulumi.StringOutput { return v.TargetResourceId }).(pulumi.StringOutput)
}

type ManagedPrivateEndpointArrayOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedPrivateEndpoint)(nil)).Elem()
}

func (o ManagedPrivateEndpointArrayOutput) ToManagedPrivateEndpointArrayOutput() ManagedPrivateEndpointArrayOutput {
	return o
}

func (o ManagedPrivateEndpointArrayOutput) ToManagedPrivateEndpointArrayOutputWithContext(ctx context.Context) ManagedPrivateEndpointArrayOutput {
	return o
}

func (o ManagedPrivateEndpointArrayOutput) Index(i pulumi.IntInput) ManagedPrivateEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedPrivateEndpoint {
		return vs[0].([]*ManagedPrivateEndpoint)[vs[1].(int)]
	}).(ManagedPrivateEndpointOutput)
}

type ManagedPrivateEndpointMapOutput struct{ *pulumi.OutputState }

func (ManagedPrivateEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedPrivateEndpoint)(nil)).Elem()
}

func (o ManagedPrivateEndpointMapOutput) ToManagedPrivateEndpointMapOutput() ManagedPrivateEndpointMapOutput {
	return o
}

func (o ManagedPrivateEndpointMapOutput) ToManagedPrivateEndpointMapOutputWithContext(ctx context.Context) ManagedPrivateEndpointMapOutput {
	return o
}

func (o ManagedPrivateEndpointMapOutput) MapIndex(k pulumi.StringInput) ManagedPrivateEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedPrivateEndpoint {
		return vs[0].(map[string]*ManagedPrivateEndpoint)[vs[1].(string)]
	}).(ManagedPrivateEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedPrivateEndpointInput)(nil)).Elem(), &ManagedPrivateEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedPrivateEndpointArrayInput)(nil)).Elem(), ManagedPrivateEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedPrivateEndpointMapInput)(nil)).Elem(), ManagedPrivateEndpointMap{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointArrayOutput{})
	pulumi.RegisterOutputType(ManagedPrivateEndpointMapOutput{})
}
