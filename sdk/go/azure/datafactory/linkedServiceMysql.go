// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linked Service (connection) between MySQL and Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewLinkedServiceMysql(ctx, "exampleLinkedServiceMysql", &datafactory.LinkedServiceMysqlArgs{
//				DataFactoryId:    exampleFactory.ID(),
//				ConnectionString: pulumi.String("Server=test;Port=3306;Database=test;User=test;SSLMode=1;UseSystemTrustStore=0;Password=test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Factory MySQL Linked Service's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datafactory/linkedServiceMysql:LinkedServiceMysql example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
//
// ```
type LinkedServiceMysql struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Linked Service MySQL.
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service MySQL.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The connection string in which to authenticate with MySQL.
	ConnectionString pulumi.StringOutput `pulumi:"connectionString"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service MySQL.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service MySQL.
	IntegrationRuntimeName pulumi.StringPtrOutput `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service MySQL. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service MySQL.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
}

// NewLinkedServiceMysql registers a new resource with the given unique name, arguments, and options.
func NewLinkedServiceMysql(ctx *pulumi.Context,
	name string, args *LinkedServiceMysqlArgs, opts ...pulumi.ResourceOption) (*LinkedServiceMysql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionString == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionString'")
	}
	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LinkedServiceMysql
	err := ctx.RegisterResource("azure:datafactory/linkedServiceMysql:LinkedServiceMysql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedServiceMysql gets an existing LinkedServiceMysql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedServiceMysql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedServiceMysqlState, opts ...pulumi.ResourceOption) (*LinkedServiceMysql, error) {
	var resource LinkedServiceMysql
	err := ctx.ReadResource("azure:datafactory/linkedServiceMysql:LinkedServiceMysql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedServiceMysql resources.
type linkedServiceMysqlState struct {
	// A map of additional properties to associate with the Data Factory Linked Service MySQL.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service MySQL.
	Annotations []string `pulumi:"annotations"`
	// The connection string in which to authenticate with MySQL.
	ConnectionString *string `pulumi:"connectionString"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service MySQL.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service MySQL.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service MySQL. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service MySQL.
	Parameters map[string]string `pulumi:"parameters"`
}

type LinkedServiceMysqlState struct {
	// A map of additional properties to associate with the Data Factory Linked Service MySQL.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service MySQL.
	Annotations pulumi.StringArrayInput
	// The connection string in which to authenticate with MySQL.
	ConnectionString pulumi.StringPtrInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The description for the Data Factory Linked Service MySQL.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service MySQL.
	IntegrationRuntimeName pulumi.StringPtrInput
	// Specifies the name of the Data Factory Linked Service MySQL. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service MySQL.
	Parameters pulumi.StringMapInput
}

func (LinkedServiceMysqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceMysqlState)(nil)).Elem()
}

type linkedServiceMysqlArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service MySQL.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service MySQL.
	Annotations []string `pulumi:"annotations"`
	// The connection string in which to authenticate with MySQL.
	ConnectionString string `pulumi:"connectionString"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service MySQL.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service MySQL.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service MySQL. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service MySQL.
	Parameters map[string]string `pulumi:"parameters"`
}

// The set of arguments for constructing a LinkedServiceMysql resource.
type LinkedServiceMysqlArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service MySQL.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service MySQL.
	Annotations pulumi.StringArrayInput
	// The connection string in which to authenticate with MySQL.
	ConnectionString pulumi.StringInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// The description for the Data Factory Linked Service MySQL.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service MySQL.
	IntegrationRuntimeName pulumi.StringPtrInput
	// Specifies the name of the Data Factory Linked Service MySQL. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service MySQL.
	Parameters pulumi.StringMapInput
}

func (LinkedServiceMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceMysqlArgs)(nil)).Elem()
}

type LinkedServiceMysqlInput interface {
	pulumi.Input

	ToLinkedServiceMysqlOutput() LinkedServiceMysqlOutput
	ToLinkedServiceMysqlOutputWithContext(ctx context.Context) LinkedServiceMysqlOutput
}

func (*LinkedServiceMysql) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceMysql)(nil)).Elem()
}

func (i *LinkedServiceMysql) ToLinkedServiceMysqlOutput() LinkedServiceMysqlOutput {
	return i.ToLinkedServiceMysqlOutputWithContext(context.Background())
}

func (i *LinkedServiceMysql) ToLinkedServiceMysqlOutputWithContext(ctx context.Context) LinkedServiceMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceMysqlOutput)
}

// LinkedServiceMysqlArrayInput is an input type that accepts LinkedServiceMysqlArray and LinkedServiceMysqlArrayOutput values.
// You can construct a concrete instance of `LinkedServiceMysqlArrayInput` via:
//
//	LinkedServiceMysqlArray{ LinkedServiceMysqlArgs{...} }
type LinkedServiceMysqlArrayInput interface {
	pulumi.Input

	ToLinkedServiceMysqlArrayOutput() LinkedServiceMysqlArrayOutput
	ToLinkedServiceMysqlArrayOutputWithContext(context.Context) LinkedServiceMysqlArrayOutput
}

type LinkedServiceMysqlArray []LinkedServiceMysqlInput

func (LinkedServiceMysqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceMysql)(nil)).Elem()
}

func (i LinkedServiceMysqlArray) ToLinkedServiceMysqlArrayOutput() LinkedServiceMysqlArrayOutput {
	return i.ToLinkedServiceMysqlArrayOutputWithContext(context.Background())
}

func (i LinkedServiceMysqlArray) ToLinkedServiceMysqlArrayOutputWithContext(ctx context.Context) LinkedServiceMysqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceMysqlArrayOutput)
}

// LinkedServiceMysqlMapInput is an input type that accepts LinkedServiceMysqlMap and LinkedServiceMysqlMapOutput values.
// You can construct a concrete instance of `LinkedServiceMysqlMapInput` via:
//
//	LinkedServiceMysqlMap{ "key": LinkedServiceMysqlArgs{...} }
type LinkedServiceMysqlMapInput interface {
	pulumi.Input

	ToLinkedServiceMysqlMapOutput() LinkedServiceMysqlMapOutput
	ToLinkedServiceMysqlMapOutputWithContext(context.Context) LinkedServiceMysqlMapOutput
}

type LinkedServiceMysqlMap map[string]LinkedServiceMysqlInput

func (LinkedServiceMysqlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceMysql)(nil)).Elem()
}

func (i LinkedServiceMysqlMap) ToLinkedServiceMysqlMapOutput() LinkedServiceMysqlMapOutput {
	return i.ToLinkedServiceMysqlMapOutputWithContext(context.Background())
}

func (i LinkedServiceMysqlMap) ToLinkedServiceMysqlMapOutputWithContext(ctx context.Context) LinkedServiceMysqlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceMysqlMapOutput)
}

type LinkedServiceMysqlOutput struct{ *pulumi.OutputState }

func (LinkedServiceMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceMysql)(nil)).Elem()
}

func (o LinkedServiceMysqlOutput) ToLinkedServiceMysqlOutput() LinkedServiceMysqlOutput {
	return o
}

func (o LinkedServiceMysqlOutput) ToLinkedServiceMysqlOutputWithContext(ctx context.Context) LinkedServiceMysqlOutput {
	return o
}

// A map of additional properties to associate with the Data Factory Linked Service MySQL.
func (o LinkedServiceMysqlOutput) AdditionalProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceMysql) pulumi.StringMapOutput { return v.AdditionalProperties }).(pulumi.StringMapOutput)
}

// List of tags that can be used for describing the Data Factory Linked Service MySQL.
func (o LinkedServiceMysqlOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinkedServiceMysql) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The connection string in which to authenticate with MySQL.
func (o LinkedServiceMysqlOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceMysql) pulumi.StringOutput { return v.ConnectionString }).(pulumi.StringOutput)
}

// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
func (o LinkedServiceMysqlOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceMysql) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The description for the Data Factory Linked Service MySQL.
func (o LinkedServiceMysqlOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceMysql) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The integration runtime reference to associate with the Data Factory Linked Service MySQL.
func (o LinkedServiceMysqlOutput) IntegrationRuntimeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceMysql) pulumi.StringPtrOutput { return v.IntegrationRuntimeName }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Data Factory Linked Service MySQL. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
func (o LinkedServiceMysqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceMysql) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of parameters to associate with the Data Factory Linked Service MySQL.
func (o LinkedServiceMysqlOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceMysql) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

type LinkedServiceMysqlArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceMysqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceMysql)(nil)).Elem()
}

func (o LinkedServiceMysqlArrayOutput) ToLinkedServiceMysqlArrayOutput() LinkedServiceMysqlArrayOutput {
	return o
}

func (o LinkedServiceMysqlArrayOutput) ToLinkedServiceMysqlArrayOutputWithContext(ctx context.Context) LinkedServiceMysqlArrayOutput {
	return o
}

func (o LinkedServiceMysqlArrayOutput) Index(i pulumi.IntInput) LinkedServiceMysqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinkedServiceMysql {
		return vs[0].([]*LinkedServiceMysql)[vs[1].(int)]
	}).(LinkedServiceMysqlOutput)
}

type LinkedServiceMysqlMapOutput struct{ *pulumi.OutputState }

func (LinkedServiceMysqlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceMysql)(nil)).Elem()
}

func (o LinkedServiceMysqlMapOutput) ToLinkedServiceMysqlMapOutput() LinkedServiceMysqlMapOutput {
	return o
}

func (o LinkedServiceMysqlMapOutput) ToLinkedServiceMysqlMapOutputWithContext(ctx context.Context) LinkedServiceMysqlMapOutput {
	return o
}

func (o LinkedServiceMysqlMapOutput) MapIndex(k pulumi.StringInput) LinkedServiceMysqlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinkedServiceMysql {
		return vs[0].(map[string]*LinkedServiceMysql)[vs[1].(string)]
	}).(LinkedServiceMysqlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceMysqlInput)(nil)).Elem(), &LinkedServiceMysql{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceMysqlArrayInput)(nil)).Elem(), LinkedServiceMysqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceMysqlMapInput)(nil)).Elem(), LinkedServiceMysqlMap{})
	pulumi.RegisterOutputType(LinkedServiceMysqlOutput{})
	pulumi.RegisterOutputType(LinkedServiceMysqlArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceMysqlMapOutput{})
}
