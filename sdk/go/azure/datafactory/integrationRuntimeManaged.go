// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Azure Data Factory Managed Integration Runtime.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/data_factory_integration_runtime_managed.html.markdown.
type IntegrationRuntimeManaged struct {
	s *pulumi.ResourceState
}

// NewIntegrationRuntimeManaged registers a new resource with the given unique name, arguments, and options.
func NewIntegrationRuntimeManaged(ctx *pulumi.Context,
	name string, args *IntegrationRuntimeManagedArgs, opts ...pulumi.ResourceOpt) (*IntegrationRuntimeManaged, error) {
	if args == nil || args.DataFactoryName == nil {
		return nil, errors.New("missing required argument 'DataFactoryName'")
	}
	if args == nil || args.NodeSize == nil {
		return nil, errors.New("missing required argument 'NodeSize'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["catalogInfo"] = nil
		inputs["customSetupScript"] = nil
		inputs["dataFactoryName"] = nil
		inputs["description"] = nil
		inputs["edition"] = nil
		inputs["licenseType"] = nil
		inputs["location"] = nil
		inputs["maxParallelExecutionsPerNode"] = nil
		inputs["name"] = nil
		inputs["nodeSize"] = nil
		inputs["numberOfNodes"] = nil
		inputs["resourceGroupName"] = nil
		inputs["vnetIntegration"] = nil
	} else {
		inputs["catalogInfo"] = args.CatalogInfo
		inputs["customSetupScript"] = args.CustomSetupScript
		inputs["dataFactoryName"] = args.DataFactoryName
		inputs["description"] = args.Description
		inputs["edition"] = args.Edition
		inputs["licenseType"] = args.LicenseType
		inputs["location"] = args.Location
		inputs["maxParallelExecutionsPerNode"] = args.MaxParallelExecutionsPerNode
		inputs["name"] = args.Name
		inputs["nodeSize"] = args.NodeSize
		inputs["numberOfNodes"] = args.NumberOfNodes
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["vnetIntegration"] = args.VnetIntegration
	}
	s, err := ctx.RegisterResource("azure:datafactory/integrationRuntimeManaged:IntegrationRuntimeManaged", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IntegrationRuntimeManaged{s: s}, nil
}

// GetIntegrationRuntimeManaged gets an existing IntegrationRuntimeManaged resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationRuntimeManaged(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IntegrationRuntimeManagedState, opts ...pulumi.ResourceOpt) (*IntegrationRuntimeManaged, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["catalogInfo"] = state.CatalogInfo
		inputs["customSetupScript"] = state.CustomSetupScript
		inputs["dataFactoryName"] = state.DataFactoryName
		inputs["description"] = state.Description
		inputs["edition"] = state.Edition
		inputs["licenseType"] = state.LicenseType
		inputs["location"] = state.Location
		inputs["maxParallelExecutionsPerNode"] = state.MaxParallelExecutionsPerNode
		inputs["name"] = state.Name
		inputs["nodeSize"] = state.NodeSize
		inputs["numberOfNodes"] = state.NumberOfNodes
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["vnetIntegration"] = state.VnetIntegration
	}
	s, err := ctx.ReadResource("azure:datafactory/integrationRuntimeManaged:IntegrationRuntimeManaged", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IntegrationRuntimeManaged{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *IntegrationRuntimeManaged) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *IntegrationRuntimeManaged) ID() pulumi.IDOutput {
	return r.s.ID()
}

// A `catalogInfo` block as defined below.
func (r *IntegrationRuntimeManaged) CatalogInfo() pulumi.Output {
	return r.s.State["catalogInfo"]
}

// A `customSetupScript` block as defined below.
func (r *IntegrationRuntimeManaged) CustomSetupScript() pulumi.Output {
	return r.s.State["customSetupScript"]
}

// Specifies the name of the Data Factory the Managed Integration Runtime belongs to. Changing this forces a new resource to be created.
func (r *IntegrationRuntimeManaged) DataFactoryName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dataFactoryName"])
}

func (r *IntegrationRuntimeManaged) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// The Managed Integration Runtime edition. Valid values are `Standard` and `Enterprise`. Defaults to `Standard`.
func (r *IntegrationRuntimeManaged) Edition() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["edition"])
}

// The type of the license that is used. Valid values are `LicenseIncluded` and `BasePrize`. Defaults to `LicenseIncluded`.
func (r *IntegrationRuntimeManaged) LicenseType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["licenseType"])
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (r *IntegrationRuntimeManaged) Location() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["location"])
}

// Defines the maximum parallel executions per node. Defaults to `1`. Max is `16`.
func (r *IntegrationRuntimeManaged) MaxParallelExecutionsPerNode() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxParallelExecutionsPerNode"])
}

// Specifies the name of the Managed Integration Runtime. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
func (r *IntegrationRuntimeManaged) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The size of the nodes on which the Managed Integration Runtime runs. Valid values are: `Standard_D2_v3`, `Standard_D4_v3`, `Standard_D8_v3`, `Standard_D16_v3`, `Standard_D32_v3`, `Standard_D64_v3`, `Standard_E2_v3`, `Standard_E4_v3`, `Standard_E8_v3`, `Standard_E16_v3`, `Standard_E32_v3`, `Standard_E64_v3`, `Standard_D1_v2`, `Standard_D2_v2`, `Standard_D3_v2`, `Standard_D4_v2`, `Standard_A4_v2` and `Standard_A8_v2`
func (r *IntegrationRuntimeManaged) NodeSize() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["nodeSize"])
}

// Number of nodes for the Managed Integration Runtime. Max is `10`. Defaults to `1`.
func (r *IntegrationRuntimeManaged) NumberOfNodes() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["numberOfNodes"])
}

// The name of the resource group in which to create the Managed Integration Runtime. Changing this forces a new resource to be created.
func (r *IntegrationRuntimeManaged) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// A `vnetIntegration` block as defined below.
func (r *IntegrationRuntimeManaged) VnetIntegration() pulumi.Output {
	return r.s.State["vnetIntegration"]
}

// Input properties used for looking up and filtering IntegrationRuntimeManaged resources.
type IntegrationRuntimeManagedState struct {
	// A `catalogInfo` block as defined below.
	CatalogInfo interface{}
	// A `customSetupScript` block as defined below.
	CustomSetupScript interface{}
	// Specifies the name of the Data Factory the Managed Integration Runtime belongs to. Changing this forces a new resource to be created.
	DataFactoryName interface{}
	Description interface{}
	// The Managed Integration Runtime edition. Valid values are `Standard` and `Enterprise`. Defaults to `Standard`.
	Edition interface{}
	// The type of the license that is used. Valid values are `LicenseIncluded` and `BasePrize`. Defaults to `LicenseIncluded`.
	LicenseType interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// Defines the maximum parallel executions per node. Defaults to `1`. Max is `16`.
	MaxParallelExecutionsPerNode interface{}
	// Specifies the name of the Managed Integration Runtime. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name interface{}
	// The size of the nodes on which the Managed Integration Runtime runs. Valid values are: `Standard_D2_v3`, `Standard_D4_v3`, `Standard_D8_v3`, `Standard_D16_v3`, `Standard_D32_v3`, `Standard_D64_v3`, `Standard_E2_v3`, `Standard_E4_v3`, `Standard_E8_v3`, `Standard_E16_v3`, `Standard_E32_v3`, `Standard_E64_v3`, `Standard_D1_v2`, `Standard_D2_v2`, `Standard_D3_v2`, `Standard_D4_v2`, `Standard_A4_v2` and `Standard_A8_v2`
	NodeSize interface{}
	// Number of nodes for the Managed Integration Runtime. Max is `10`. Defaults to `1`.
	NumberOfNodes interface{}
	// The name of the resource group in which to create the Managed Integration Runtime. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A `vnetIntegration` block as defined below.
	VnetIntegration interface{}
}

// The set of arguments for constructing a IntegrationRuntimeManaged resource.
type IntegrationRuntimeManagedArgs struct {
	// A `catalogInfo` block as defined below.
	CatalogInfo interface{}
	// A `customSetupScript` block as defined below.
	CustomSetupScript interface{}
	// Specifies the name of the Data Factory the Managed Integration Runtime belongs to. Changing this forces a new resource to be created.
	DataFactoryName interface{}
	Description interface{}
	// The Managed Integration Runtime edition. Valid values are `Standard` and `Enterprise`. Defaults to `Standard`.
	Edition interface{}
	// The type of the license that is used. Valid values are `LicenseIncluded` and `BasePrize`. Defaults to `LicenseIncluded`.
	LicenseType interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// Defines the maximum parallel executions per node. Defaults to `1`. Max is `16`.
	MaxParallelExecutionsPerNode interface{}
	// Specifies the name of the Managed Integration Runtime. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name interface{}
	// The size of the nodes on which the Managed Integration Runtime runs. Valid values are: `Standard_D2_v3`, `Standard_D4_v3`, `Standard_D8_v3`, `Standard_D16_v3`, `Standard_D32_v3`, `Standard_D64_v3`, `Standard_E2_v3`, `Standard_E4_v3`, `Standard_E8_v3`, `Standard_E16_v3`, `Standard_E32_v3`, `Standard_E64_v3`, `Standard_D1_v2`, `Standard_D2_v2`, `Standard_D3_v2`, `Standard_D4_v2`, `Standard_A4_v2` and `Standard_A8_v2`
	NodeSize interface{}
	// Number of nodes for the Managed Integration Runtime. Max is `10`. Defaults to `1`.
	NumberOfNodes interface{}
	// The name of the resource group in which to create the Managed Integration Runtime. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A `vnetIntegration` block as defined below.
	VnetIntegration interface{}
}
