// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Cosmos DB SQL API Dataset inside an Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/cosmosdb"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := cosmosdb.LookupAccount(ctx, &cosmosdb.LookupAccountArgs{
//				Name:              "tfex-cosmosdb-account",
//				ResourceGroupName: "tfex-cosmosdb-account-rg",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleLinkedServiceCosmosDb, err := datafactory.NewLinkedServiceCosmosDb(ctx, "exampleLinkedServiceCosmosDb", &datafactory.LinkedServiceCosmosDbArgs{
//				DataFactoryId:   exampleFactory.ID(),
//				AccountEndpoint: *pulumi.String(exampleAccount.Endpoint),
//				Database:        pulumi.String("foo"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewDatasetCosmosDBApi(ctx, "exampleDatasetCosmosDBApi", &datafactory.DatasetCosmosDBApiArgs{
//				DataFactoryId:     exampleFactory.ID(),
//				LinkedServiceName: exampleLinkedServiceCosmosDb.Name,
//				CollectionName:    pulumi.String("bar"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Factory Datasets can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datafactory/datasetCosmosDBApi:DatasetCosmosDBApi example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/datasets/example
//
// ```
type DatasetCosmosDBApi struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Dataset.
	//
	// The following supported arguments are specific to Azure Cosmos DB SQL API Dataset:
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Dataset.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The collection name of the Data Factory Dataset Azure Cosmos DB SQL API.
	CollectionName pulumi.StringPtrOutput `pulumi:"collectionName"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The description for the Data Factory Dataset.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName pulumi.StringOutput `pulumi:"linkedServiceName"`
	// Specifies the name of the Data Factory Dataset. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Dataset.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetCosmosDBApiSchemaColumnArrayOutput `pulumi:"schemaColumns"`
}

// NewDatasetCosmosDBApi registers a new resource with the given unique name, arguments, and options.
func NewDatasetCosmosDBApi(ctx *pulumi.Context,
	name string, args *DatasetCosmosDBApiArgs, opts ...pulumi.ResourceOption) (*DatasetCosmosDBApi, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	if args.LinkedServiceName == nil {
		return nil, errors.New("invalid value for required argument 'LinkedServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatasetCosmosDBApi
	err := ctx.RegisterResource("azure:datafactory/datasetCosmosDBApi:DatasetCosmosDBApi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetCosmosDBApi gets an existing DatasetCosmosDBApi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetCosmosDBApi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetCosmosDBApiState, opts ...pulumi.ResourceOption) (*DatasetCosmosDBApi, error) {
	var resource DatasetCosmosDBApi
	err := ctx.ReadResource("azure:datafactory/datasetCosmosDBApi:DatasetCosmosDBApi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetCosmosDBApi resources.
type datasetCosmosDBApiState struct {
	// A map of additional properties to associate with the Data Factory Dataset.
	//
	// The following supported arguments are specific to Azure Cosmos DB SQL API Dataset:
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Dataset.
	Annotations []string `pulumi:"annotations"`
	// The collection name of the Data Factory Dataset Azure Cosmos DB SQL API.
	CollectionName *string `pulumi:"collectionName"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Dataset.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder *string `pulumi:"folder"`
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName *string `pulumi:"linkedServiceName"`
	// Specifies the name of the Data Factory Dataset. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Dataset.
	Parameters map[string]string `pulumi:"parameters"`
	// A `schemaColumn` block as defined below.
	SchemaColumns []DatasetCosmosDBApiSchemaColumn `pulumi:"schemaColumns"`
}

type DatasetCosmosDBApiState struct {
	// A map of additional properties to associate with the Data Factory Dataset.
	//
	// The following supported arguments are specific to Azure Cosmos DB SQL API Dataset:
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Dataset.
	Annotations pulumi.StringArrayInput
	// The collection name of the Data Factory Dataset Azure Cosmos DB SQL API.
	CollectionName pulumi.StringPtrInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The description for the Data Factory Dataset.
	Description pulumi.StringPtrInput
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringPtrInput
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName pulumi.StringPtrInput
	// Specifies the name of the Data Factory Dataset. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Dataset.
	Parameters pulumi.StringMapInput
	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetCosmosDBApiSchemaColumnArrayInput
}

func (DatasetCosmosDBApiState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetCosmosDBApiState)(nil)).Elem()
}

type datasetCosmosDBApiArgs struct {
	// A map of additional properties to associate with the Data Factory Dataset.
	//
	// The following supported arguments are specific to Azure Cosmos DB SQL API Dataset:
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Dataset.
	Annotations []string `pulumi:"annotations"`
	// The collection name of the Data Factory Dataset Azure Cosmos DB SQL API.
	CollectionName *string `pulumi:"collectionName"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Dataset.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder *string `pulumi:"folder"`
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName string `pulumi:"linkedServiceName"`
	// Specifies the name of the Data Factory Dataset. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Dataset.
	Parameters map[string]string `pulumi:"parameters"`
	// A `schemaColumn` block as defined below.
	SchemaColumns []DatasetCosmosDBApiSchemaColumn `pulumi:"schemaColumns"`
}

// The set of arguments for constructing a DatasetCosmosDBApi resource.
type DatasetCosmosDBApiArgs struct {
	// A map of additional properties to associate with the Data Factory Dataset.
	//
	// The following supported arguments are specific to Azure Cosmos DB SQL API Dataset:
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Dataset.
	Annotations pulumi.StringArrayInput
	// The collection name of the Data Factory Dataset Azure Cosmos DB SQL API.
	CollectionName pulumi.StringPtrInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// The description for the Data Factory Dataset.
	Description pulumi.StringPtrInput
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringPtrInput
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName pulumi.StringInput
	// Specifies the name of the Data Factory Dataset. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Dataset.
	Parameters pulumi.StringMapInput
	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetCosmosDBApiSchemaColumnArrayInput
}

func (DatasetCosmosDBApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetCosmosDBApiArgs)(nil)).Elem()
}

type DatasetCosmosDBApiInput interface {
	pulumi.Input

	ToDatasetCosmosDBApiOutput() DatasetCosmosDBApiOutput
	ToDatasetCosmosDBApiOutputWithContext(ctx context.Context) DatasetCosmosDBApiOutput
}

func (*DatasetCosmosDBApi) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCosmosDBApi)(nil)).Elem()
}

func (i *DatasetCosmosDBApi) ToDatasetCosmosDBApiOutput() DatasetCosmosDBApiOutput {
	return i.ToDatasetCosmosDBApiOutputWithContext(context.Background())
}

func (i *DatasetCosmosDBApi) ToDatasetCosmosDBApiOutputWithContext(ctx context.Context) DatasetCosmosDBApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCosmosDBApiOutput)
}

// DatasetCosmosDBApiArrayInput is an input type that accepts DatasetCosmosDBApiArray and DatasetCosmosDBApiArrayOutput values.
// You can construct a concrete instance of `DatasetCosmosDBApiArrayInput` via:
//
//	DatasetCosmosDBApiArray{ DatasetCosmosDBApiArgs{...} }
type DatasetCosmosDBApiArrayInput interface {
	pulumi.Input

	ToDatasetCosmosDBApiArrayOutput() DatasetCosmosDBApiArrayOutput
	ToDatasetCosmosDBApiArrayOutputWithContext(context.Context) DatasetCosmosDBApiArrayOutput
}

type DatasetCosmosDBApiArray []DatasetCosmosDBApiInput

func (DatasetCosmosDBApiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetCosmosDBApi)(nil)).Elem()
}

func (i DatasetCosmosDBApiArray) ToDatasetCosmosDBApiArrayOutput() DatasetCosmosDBApiArrayOutput {
	return i.ToDatasetCosmosDBApiArrayOutputWithContext(context.Background())
}

func (i DatasetCosmosDBApiArray) ToDatasetCosmosDBApiArrayOutputWithContext(ctx context.Context) DatasetCosmosDBApiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCosmosDBApiArrayOutput)
}

// DatasetCosmosDBApiMapInput is an input type that accepts DatasetCosmosDBApiMap and DatasetCosmosDBApiMapOutput values.
// You can construct a concrete instance of `DatasetCosmosDBApiMapInput` via:
//
//	DatasetCosmosDBApiMap{ "key": DatasetCosmosDBApiArgs{...} }
type DatasetCosmosDBApiMapInput interface {
	pulumi.Input

	ToDatasetCosmosDBApiMapOutput() DatasetCosmosDBApiMapOutput
	ToDatasetCosmosDBApiMapOutputWithContext(context.Context) DatasetCosmosDBApiMapOutput
}

type DatasetCosmosDBApiMap map[string]DatasetCosmosDBApiInput

func (DatasetCosmosDBApiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetCosmosDBApi)(nil)).Elem()
}

func (i DatasetCosmosDBApiMap) ToDatasetCosmosDBApiMapOutput() DatasetCosmosDBApiMapOutput {
	return i.ToDatasetCosmosDBApiMapOutputWithContext(context.Background())
}

func (i DatasetCosmosDBApiMap) ToDatasetCosmosDBApiMapOutputWithContext(ctx context.Context) DatasetCosmosDBApiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCosmosDBApiMapOutput)
}

type DatasetCosmosDBApiOutput struct{ *pulumi.OutputState }

func (DatasetCosmosDBApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCosmosDBApi)(nil)).Elem()
}

func (o DatasetCosmosDBApiOutput) ToDatasetCosmosDBApiOutput() DatasetCosmosDBApiOutput {
	return o
}

func (o DatasetCosmosDBApiOutput) ToDatasetCosmosDBApiOutputWithContext(ctx context.Context) DatasetCosmosDBApiOutput {
	return o
}

// A map of additional properties to associate with the Data Factory Dataset.
//
// The following supported arguments are specific to Azure Cosmos DB SQL API Dataset:
func (o DatasetCosmosDBApiOutput) AdditionalProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatasetCosmosDBApi) pulumi.StringMapOutput { return v.AdditionalProperties }).(pulumi.StringMapOutput)
}

// List of tags that can be used for describing the Data Factory Dataset.
func (o DatasetCosmosDBApiOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatasetCosmosDBApi) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The collection name of the Data Factory Dataset Azure Cosmos DB SQL API.
func (o DatasetCosmosDBApiOutput) CollectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCosmosDBApi) pulumi.StringPtrOutput { return v.CollectionName }).(pulumi.StringPtrOutput)
}

// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
func (o DatasetCosmosDBApiOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetCosmosDBApi) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The description for the Data Factory Dataset.
func (o DatasetCosmosDBApiOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCosmosDBApi) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
func (o DatasetCosmosDBApiOutput) Folder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCosmosDBApi) pulumi.StringPtrOutput { return v.Folder }).(pulumi.StringPtrOutput)
}

// The Data Factory Linked Service name in which to associate the Dataset with.
func (o DatasetCosmosDBApiOutput) LinkedServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetCosmosDBApi) pulumi.StringOutput { return v.LinkedServiceName }).(pulumi.StringOutput)
}

// Specifies the name of the Data Factory Dataset. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
func (o DatasetCosmosDBApiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetCosmosDBApi) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of parameters to associate with the Data Factory Dataset.
func (o DatasetCosmosDBApiOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatasetCosmosDBApi) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// A `schemaColumn` block as defined below.
func (o DatasetCosmosDBApiOutput) SchemaColumns() DatasetCosmosDBApiSchemaColumnArrayOutput {
	return o.ApplyT(func(v *DatasetCosmosDBApi) DatasetCosmosDBApiSchemaColumnArrayOutput { return v.SchemaColumns }).(DatasetCosmosDBApiSchemaColumnArrayOutput)
}

type DatasetCosmosDBApiArrayOutput struct{ *pulumi.OutputState }

func (DatasetCosmosDBApiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetCosmosDBApi)(nil)).Elem()
}

func (o DatasetCosmosDBApiArrayOutput) ToDatasetCosmosDBApiArrayOutput() DatasetCosmosDBApiArrayOutput {
	return o
}

func (o DatasetCosmosDBApiArrayOutput) ToDatasetCosmosDBApiArrayOutputWithContext(ctx context.Context) DatasetCosmosDBApiArrayOutput {
	return o
}

func (o DatasetCosmosDBApiArrayOutput) Index(i pulumi.IntInput) DatasetCosmosDBApiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatasetCosmosDBApi {
		return vs[0].([]*DatasetCosmosDBApi)[vs[1].(int)]
	}).(DatasetCosmosDBApiOutput)
}

type DatasetCosmosDBApiMapOutput struct{ *pulumi.OutputState }

func (DatasetCosmosDBApiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetCosmosDBApi)(nil)).Elem()
}

func (o DatasetCosmosDBApiMapOutput) ToDatasetCosmosDBApiMapOutput() DatasetCosmosDBApiMapOutput {
	return o
}

func (o DatasetCosmosDBApiMapOutput) ToDatasetCosmosDBApiMapOutputWithContext(ctx context.Context) DatasetCosmosDBApiMapOutput {
	return o
}

func (o DatasetCosmosDBApiMapOutput) MapIndex(k pulumi.StringInput) DatasetCosmosDBApiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatasetCosmosDBApi {
		return vs[0].(map[string]*DatasetCosmosDBApi)[vs[1].(string)]
	}).(DatasetCosmosDBApiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetCosmosDBApiInput)(nil)).Elem(), &DatasetCosmosDBApi{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetCosmosDBApiArrayInput)(nil)).Elem(), DatasetCosmosDBApiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetCosmosDBApiMapInput)(nil)).Elem(), DatasetCosmosDBApiMap{})
	pulumi.RegisterOutputType(DatasetCosmosDBApiOutput{})
	pulumi.RegisterOutputType(DatasetCosmosDBApiArrayOutput{})
	pulumi.RegisterOutputType(DatasetCosmosDBApiMapOutput{})
}
