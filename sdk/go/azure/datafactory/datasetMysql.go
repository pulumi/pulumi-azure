// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a MySQL Dataset inside a Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/datafactory"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("northeurope"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleLinkedServiceMysql, err := datafactory.NewLinkedServiceMysql(ctx, "exampleLinkedServiceMysql", &datafactory.LinkedServiceMysqlArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			DataFactoryName:   exampleFactory.Name,
// 			ConnectionString:  pulumi.String("Server=test;Port=3306;Database=test;User=test;SSLMode=1;UseSystemTrustStore=0;Password=test"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = datafactory.NewDatasetMysql(ctx, "exampleDatasetMysql", &datafactory.DatasetMysqlArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			DataFactoryName:   exampleFactory.Name,
// 			LinkedServiceName: exampleLinkedServiceMysql.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Data Factory MySQL Datasets can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:datafactory/datasetMysql:DatasetMysql example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/datasets/example
// ```
type DatasetMysql struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Dataset MySQL.
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Dataset MySQL.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The Data Factory name in which to associate the Dataset with. Changing this forces a new resource.
	DataFactoryName pulumi.StringOutput `pulumi:"dataFactoryName"`
	// The description for the Data Factory Dataset MySQL.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringPtrOutput `pulumi:"folder"`
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName pulumi.StringOutput `pulumi:"linkedServiceName"`
	// Specifies the name of the Data Factory Dataset MySQL. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Dataset MySQL.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// The name of the resource group in which to create the Data Factory Dataset MySQL. Changing this forces a new resource
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetMysqlSchemaColumnArrayOutput `pulumi:"schemaColumns"`
	// The table name of the Data Factory Dataset MySQL.
	TableName pulumi.StringPtrOutput `pulumi:"tableName"`
}

// NewDatasetMysql registers a new resource with the given unique name, arguments, and options.
func NewDatasetMysql(ctx *pulumi.Context,
	name string, args *DatasetMysqlArgs, opts ...pulumi.ResourceOption) (*DatasetMysql, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryName == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryName'")
	}
	if args.LinkedServiceName == nil {
		return nil, errors.New("invalid value for required argument 'LinkedServiceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource DatasetMysql
	err := ctx.RegisterResource("azure:datafactory/datasetMysql:DatasetMysql", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetMysql gets an existing DatasetMysql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetMysql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetMysqlState, opts ...pulumi.ResourceOption) (*DatasetMysql, error) {
	var resource DatasetMysql
	err := ctx.ReadResource("azure:datafactory/datasetMysql:DatasetMysql", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetMysql resources.
type datasetMysqlState struct {
	// A map of additional properties to associate with the Data Factory Dataset MySQL.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Dataset MySQL.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory name in which to associate the Dataset with. Changing this forces a new resource.
	DataFactoryName *string `pulumi:"dataFactoryName"`
	// The description for the Data Factory Dataset MySQL.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder *string `pulumi:"folder"`
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName *string `pulumi:"linkedServiceName"`
	// Specifies the name of the Data Factory Dataset MySQL. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Dataset MySQL.
	Parameters map[string]string `pulumi:"parameters"`
	// The name of the resource group in which to create the Data Factory Dataset MySQL. Changing this forces a new resource
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `schemaColumn` block as defined below.
	SchemaColumns []DatasetMysqlSchemaColumn `pulumi:"schemaColumns"`
	// The table name of the Data Factory Dataset MySQL.
	TableName *string `pulumi:"tableName"`
}

type DatasetMysqlState struct {
	// A map of additional properties to associate with the Data Factory Dataset MySQL.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Dataset MySQL.
	Annotations pulumi.StringArrayInput
	// The Data Factory name in which to associate the Dataset with. Changing this forces a new resource.
	DataFactoryName pulumi.StringPtrInput
	// The description for the Data Factory Dataset MySQL.
	Description pulumi.StringPtrInput
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringPtrInput
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName pulumi.StringPtrInput
	// Specifies the name of the Data Factory Dataset MySQL. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Dataset MySQL.
	Parameters pulumi.StringMapInput
	// The name of the resource group in which to create the Data Factory Dataset MySQL. Changing this forces a new resource
	ResourceGroupName pulumi.StringPtrInput
	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetMysqlSchemaColumnArrayInput
	// The table name of the Data Factory Dataset MySQL.
	TableName pulumi.StringPtrInput
}

func (DatasetMysqlState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetMysqlState)(nil)).Elem()
}

type datasetMysqlArgs struct {
	// A map of additional properties to associate with the Data Factory Dataset MySQL.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Dataset MySQL.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory name in which to associate the Dataset with. Changing this forces a new resource.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// The description for the Data Factory Dataset MySQL.
	Description *string `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder *string `pulumi:"folder"`
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName string `pulumi:"linkedServiceName"`
	// Specifies the name of the Data Factory Dataset MySQL. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Dataset MySQL.
	Parameters map[string]string `pulumi:"parameters"`
	// The name of the resource group in which to create the Data Factory Dataset MySQL. Changing this forces a new resource
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `schemaColumn` block as defined below.
	SchemaColumns []DatasetMysqlSchemaColumn `pulumi:"schemaColumns"`
	// The table name of the Data Factory Dataset MySQL.
	TableName *string `pulumi:"tableName"`
}

// The set of arguments for constructing a DatasetMysql resource.
type DatasetMysqlArgs struct {
	// A map of additional properties to associate with the Data Factory Dataset MySQL.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Dataset MySQL.
	Annotations pulumi.StringArrayInput
	// The Data Factory name in which to associate the Dataset with. Changing this forces a new resource.
	DataFactoryName pulumi.StringInput
	// The description for the Data Factory Dataset MySQL.
	Description pulumi.StringPtrInput
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringPtrInput
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName pulumi.StringInput
	// Specifies the name of the Data Factory Dataset MySQL. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Dataset MySQL.
	Parameters pulumi.StringMapInput
	// The name of the resource group in which to create the Data Factory Dataset MySQL. Changing this forces a new resource
	ResourceGroupName pulumi.StringInput
	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetMysqlSchemaColumnArrayInput
	// The table name of the Data Factory Dataset MySQL.
	TableName pulumi.StringPtrInput
}

func (DatasetMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetMysqlArgs)(nil)).Elem()
}

type DatasetMysqlInput interface {
	pulumi.Input

	ToDatasetMysqlOutput() DatasetMysqlOutput
	ToDatasetMysqlOutputWithContext(ctx context.Context) DatasetMysqlOutput
}

func (*DatasetMysql) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetMysql)(nil))
}

func (i *DatasetMysql) ToDatasetMysqlOutput() DatasetMysqlOutput {
	return i.ToDatasetMysqlOutputWithContext(context.Background())
}

func (i *DatasetMysql) ToDatasetMysqlOutputWithContext(ctx context.Context) DatasetMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetMysqlOutput)
}

func (i *DatasetMysql) ToDatasetMysqlPtrOutput() DatasetMysqlPtrOutput {
	return i.ToDatasetMysqlPtrOutputWithContext(context.Background())
}

func (i *DatasetMysql) ToDatasetMysqlPtrOutputWithContext(ctx context.Context) DatasetMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetMysqlPtrOutput)
}

type DatasetMysqlPtrInput interface {
	pulumi.Input

	ToDatasetMysqlPtrOutput() DatasetMysqlPtrOutput
	ToDatasetMysqlPtrOutputWithContext(ctx context.Context) DatasetMysqlPtrOutput
}

type datasetMysqlPtrType DatasetMysqlArgs

func (*datasetMysqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetMysql)(nil))
}

func (i *datasetMysqlPtrType) ToDatasetMysqlPtrOutput() DatasetMysqlPtrOutput {
	return i.ToDatasetMysqlPtrOutputWithContext(context.Background())
}

func (i *datasetMysqlPtrType) ToDatasetMysqlPtrOutputWithContext(ctx context.Context) DatasetMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetMysqlPtrOutput)
}

// DatasetMysqlArrayInput is an input type that accepts DatasetMysqlArray and DatasetMysqlArrayOutput values.
// You can construct a concrete instance of `DatasetMysqlArrayInput` via:
//
//          DatasetMysqlArray{ DatasetMysqlArgs{...} }
type DatasetMysqlArrayInput interface {
	pulumi.Input

	ToDatasetMysqlArrayOutput() DatasetMysqlArrayOutput
	ToDatasetMysqlArrayOutputWithContext(context.Context) DatasetMysqlArrayOutput
}

type DatasetMysqlArray []DatasetMysqlInput

func (DatasetMysqlArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*DatasetMysql)(nil))
}

func (i DatasetMysqlArray) ToDatasetMysqlArrayOutput() DatasetMysqlArrayOutput {
	return i.ToDatasetMysqlArrayOutputWithContext(context.Background())
}

func (i DatasetMysqlArray) ToDatasetMysqlArrayOutputWithContext(ctx context.Context) DatasetMysqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetMysqlArrayOutput)
}

// DatasetMysqlMapInput is an input type that accepts DatasetMysqlMap and DatasetMysqlMapOutput values.
// You can construct a concrete instance of `DatasetMysqlMapInput` via:
//
//          DatasetMysqlMap{ "key": DatasetMysqlArgs{...} }
type DatasetMysqlMapInput interface {
	pulumi.Input

	ToDatasetMysqlMapOutput() DatasetMysqlMapOutput
	ToDatasetMysqlMapOutputWithContext(context.Context) DatasetMysqlMapOutput
}

type DatasetMysqlMap map[string]DatasetMysqlInput

func (DatasetMysqlMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*DatasetMysql)(nil))
}

func (i DatasetMysqlMap) ToDatasetMysqlMapOutput() DatasetMysqlMapOutput {
	return i.ToDatasetMysqlMapOutputWithContext(context.Background())
}

func (i DatasetMysqlMap) ToDatasetMysqlMapOutputWithContext(ctx context.Context) DatasetMysqlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetMysqlMapOutput)
}

type DatasetMysqlOutput struct {
	*pulumi.OutputState
}

func (DatasetMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetMysql)(nil))
}

func (o DatasetMysqlOutput) ToDatasetMysqlOutput() DatasetMysqlOutput {
	return o
}

func (o DatasetMysqlOutput) ToDatasetMysqlOutputWithContext(ctx context.Context) DatasetMysqlOutput {
	return o
}

func (o DatasetMysqlOutput) ToDatasetMysqlPtrOutput() DatasetMysqlPtrOutput {
	return o.ToDatasetMysqlPtrOutputWithContext(context.Background())
}

func (o DatasetMysqlOutput) ToDatasetMysqlPtrOutputWithContext(ctx context.Context) DatasetMysqlPtrOutput {
	return o.ApplyT(func(v DatasetMysql) *DatasetMysql {
		return &v
	}).(DatasetMysqlPtrOutput)
}

type DatasetMysqlPtrOutput struct {
	*pulumi.OutputState
}

func (DatasetMysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetMysql)(nil))
}

func (o DatasetMysqlPtrOutput) ToDatasetMysqlPtrOutput() DatasetMysqlPtrOutput {
	return o
}

func (o DatasetMysqlPtrOutput) ToDatasetMysqlPtrOutputWithContext(ctx context.Context) DatasetMysqlPtrOutput {
	return o
}

type DatasetMysqlArrayOutput struct{ *pulumi.OutputState }

func (DatasetMysqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetMysql)(nil))
}

func (o DatasetMysqlArrayOutput) ToDatasetMysqlArrayOutput() DatasetMysqlArrayOutput {
	return o
}

func (o DatasetMysqlArrayOutput) ToDatasetMysqlArrayOutputWithContext(ctx context.Context) DatasetMysqlArrayOutput {
	return o
}

func (o DatasetMysqlArrayOutput) Index(i pulumi.IntInput) DatasetMysqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetMysql {
		return vs[0].([]DatasetMysql)[vs[1].(int)]
	}).(DatasetMysqlOutput)
}

type DatasetMysqlMapOutput struct{ *pulumi.OutputState }

func (DatasetMysqlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatasetMysql)(nil))
}

func (o DatasetMysqlMapOutput) ToDatasetMysqlMapOutput() DatasetMysqlMapOutput {
	return o
}

func (o DatasetMysqlMapOutput) ToDatasetMysqlMapOutputWithContext(ctx context.Context) DatasetMysqlMapOutput {
	return o
}

func (o DatasetMysqlMapOutput) MapIndex(k pulumi.StringInput) DatasetMysqlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatasetMysql {
		return vs[0].(map[string]DatasetMysql)[vs[1].(string)]
	}).(DatasetMysqlOutput)
}

func init() {
	pulumi.RegisterOutputType(DatasetMysqlOutput{})
	pulumi.RegisterOutputType(DatasetMysqlPtrOutput{})
	pulumi.RegisterOutputType(DatasetMysqlArrayOutput{})
	pulumi.RegisterOutputType(DatasetMysqlMapOutput{})
}
