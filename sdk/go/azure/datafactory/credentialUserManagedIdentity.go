// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a Data Factory User Assigned Managed Identity credential resource. These resources are used by Data Factory to access data sources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/datafactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("westus"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleUserAssignedIdentity, err := authorization.NewUserAssignedIdentity(ctx, "example", &authorization.UserAssignedIdentityArgs{
//				Location:          example.Location,
//				Name:              pulumi.String("my-user"),
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "example", &datafactory.FactoryArgs{
//				Name:              pulumi.String("example"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				Identity: &datafactory.FactoryIdentityArgs{
//					Type: pulumi.String("UserAssigned"),
//					IdentityIds: pulumi.StringArray{
//						exampleUserAssignedIdentity.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewCredentialUserManagedIdentity(ctx, "test", &datafactory.CredentialUserManagedIdentityArgs{
//				Name:          exampleUserAssignedIdentity.Name,
//				Description:   pulumi.String("Short description of this credential"),
//				DataFactoryId: exampleFactory.ID(),
//				IdentityId:    exampleUserAssignedIdentity.ID(),
//				Annotations: pulumi.StringArray{
//					pulumi.String("example"),
//					pulumi.String("example2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.DataFactory`: 2018-06-01
//
// ## Import
//
// Data Factory Credentials can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:datafactory/credentialUserManagedIdentity:CredentialUserManagedIdentity example /subscriptions/1f3d6e58-feed-4bb6-87e5-a52305ad3375/resourceGroups/example-resources/providers/Microsoft.DataFactory/factories/example/credentials/credential1
// ```
type CredentialUserManagedIdentity struct {
	pulumi.CustomResourceState

	// List of tags that can be used for describing the Data Factory Credential.
	//
	// > **Note:** Manually altering a Credential resource will cause annotations to be lost, resulting in a change being detected on the next run.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The description for the Data Factory Credential.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Resouce ID of an existing User Assigned Managed Identity. This can be changed without recreating the resource. Changing this forces a new resource to be created.
	//
	// > **Note:** Attempting to create a Credential resource without first assigning the identity to the parent Data Factory will result in an Azure API error.
	IdentityId pulumi.StringOutput `pulumi:"identityId"`
	// Specifies the name of the Credential. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewCredentialUserManagedIdentity registers a new resource with the given unique name, arguments, and options.
func NewCredentialUserManagedIdentity(ctx *pulumi.Context,
	name string, args *CredentialUserManagedIdentityArgs, opts ...pulumi.ResourceOption) (*CredentialUserManagedIdentity, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	if args.IdentityId == nil {
		return nil, errors.New("invalid value for required argument 'IdentityId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CredentialUserManagedIdentity
	err := ctx.RegisterResource("azure:datafactory/credentialUserManagedIdentity:CredentialUserManagedIdentity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCredentialUserManagedIdentity gets an existing CredentialUserManagedIdentity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCredentialUserManagedIdentity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CredentialUserManagedIdentityState, opts ...pulumi.ResourceOption) (*CredentialUserManagedIdentity, error) {
	var resource CredentialUserManagedIdentity
	err := ctx.ReadResource("azure:datafactory/credentialUserManagedIdentity:CredentialUserManagedIdentity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CredentialUserManagedIdentity resources.
type credentialUserManagedIdentityState struct {
	// List of tags that can be used for describing the Data Factory Credential.
	//
	// > **Note:** Manually altering a Credential resource will cause annotations to be lost, resulting in a change being detected on the next run.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Credential.
	Description *string `pulumi:"description"`
	// The Resouce ID of an existing User Assigned Managed Identity. This can be changed without recreating the resource. Changing this forces a new resource to be created.
	//
	// > **Note:** Attempting to create a Credential resource without first assigning the identity to the parent Data Factory will result in an Azure API error.
	IdentityId *string `pulumi:"identityId"`
	// Specifies the name of the Credential. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
}

type CredentialUserManagedIdentityState struct {
	// List of tags that can be used for describing the Data Factory Credential.
	//
	// > **Note:** Manually altering a Credential resource will cause annotations to be lost, resulting in a change being detected on the next run.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The description for the Data Factory Credential.
	Description pulumi.StringPtrInput
	// The Resouce ID of an existing User Assigned Managed Identity. This can be changed without recreating the resource. Changing this forces a new resource to be created.
	//
	// > **Note:** Attempting to create a Credential resource without first assigning the identity to the parent Data Factory will result in an Azure API error.
	IdentityId pulumi.StringPtrInput
	// Specifies the name of the Credential. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
}

func (CredentialUserManagedIdentityState) ElementType() reflect.Type {
	return reflect.TypeOf((*credentialUserManagedIdentityState)(nil)).Elem()
}

type credentialUserManagedIdentityArgs struct {
	// List of tags that can be used for describing the Data Factory Credential.
	//
	// > **Note:** Manually altering a Credential resource will cause annotations to be lost, resulting in a change being detected on the next run.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Credential.
	Description *string `pulumi:"description"`
	// The Resouce ID of an existing User Assigned Managed Identity. This can be changed without recreating the resource. Changing this forces a new resource to be created.
	//
	// > **Note:** Attempting to create a Credential resource without first assigning the identity to the parent Data Factory will result in an Azure API error.
	IdentityId string `pulumi:"identityId"`
	// Specifies the name of the Credential. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CredentialUserManagedIdentity resource.
type CredentialUserManagedIdentityArgs struct {
	// List of tags that can be used for describing the Data Factory Credential.
	//
	// > **Note:** Manually altering a Credential resource will cause annotations to be lost, resulting in a change being detected on the next run.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// The description for the Data Factory Credential.
	Description pulumi.StringPtrInput
	// The Resouce ID of an existing User Assigned Managed Identity. This can be changed without recreating the resource. Changing this forces a new resource to be created.
	//
	// > **Note:** Attempting to create a Credential resource without first assigning the identity to the parent Data Factory will result in an Azure API error.
	IdentityId pulumi.StringInput
	// Specifies the name of the Credential. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
}

func (CredentialUserManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*credentialUserManagedIdentityArgs)(nil)).Elem()
}

type CredentialUserManagedIdentityInput interface {
	pulumi.Input

	ToCredentialUserManagedIdentityOutput() CredentialUserManagedIdentityOutput
	ToCredentialUserManagedIdentityOutputWithContext(ctx context.Context) CredentialUserManagedIdentityOutput
}

func (*CredentialUserManagedIdentity) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialUserManagedIdentity)(nil)).Elem()
}

func (i *CredentialUserManagedIdentity) ToCredentialUserManagedIdentityOutput() CredentialUserManagedIdentityOutput {
	return i.ToCredentialUserManagedIdentityOutputWithContext(context.Background())
}

func (i *CredentialUserManagedIdentity) ToCredentialUserManagedIdentityOutputWithContext(ctx context.Context) CredentialUserManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialUserManagedIdentityOutput)
}

// CredentialUserManagedIdentityArrayInput is an input type that accepts CredentialUserManagedIdentityArray and CredentialUserManagedIdentityArrayOutput values.
// You can construct a concrete instance of `CredentialUserManagedIdentityArrayInput` via:
//
//	CredentialUserManagedIdentityArray{ CredentialUserManagedIdentityArgs{...} }
type CredentialUserManagedIdentityArrayInput interface {
	pulumi.Input

	ToCredentialUserManagedIdentityArrayOutput() CredentialUserManagedIdentityArrayOutput
	ToCredentialUserManagedIdentityArrayOutputWithContext(context.Context) CredentialUserManagedIdentityArrayOutput
}

type CredentialUserManagedIdentityArray []CredentialUserManagedIdentityInput

func (CredentialUserManagedIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CredentialUserManagedIdentity)(nil)).Elem()
}

func (i CredentialUserManagedIdentityArray) ToCredentialUserManagedIdentityArrayOutput() CredentialUserManagedIdentityArrayOutput {
	return i.ToCredentialUserManagedIdentityArrayOutputWithContext(context.Background())
}

func (i CredentialUserManagedIdentityArray) ToCredentialUserManagedIdentityArrayOutputWithContext(ctx context.Context) CredentialUserManagedIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialUserManagedIdentityArrayOutput)
}

// CredentialUserManagedIdentityMapInput is an input type that accepts CredentialUserManagedIdentityMap and CredentialUserManagedIdentityMapOutput values.
// You can construct a concrete instance of `CredentialUserManagedIdentityMapInput` via:
//
//	CredentialUserManagedIdentityMap{ "key": CredentialUserManagedIdentityArgs{...} }
type CredentialUserManagedIdentityMapInput interface {
	pulumi.Input

	ToCredentialUserManagedIdentityMapOutput() CredentialUserManagedIdentityMapOutput
	ToCredentialUserManagedIdentityMapOutputWithContext(context.Context) CredentialUserManagedIdentityMapOutput
}

type CredentialUserManagedIdentityMap map[string]CredentialUserManagedIdentityInput

func (CredentialUserManagedIdentityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CredentialUserManagedIdentity)(nil)).Elem()
}

func (i CredentialUserManagedIdentityMap) ToCredentialUserManagedIdentityMapOutput() CredentialUserManagedIdentityMapOutput {
	return i.ToCredentialUserManagedIdentityMapOutputWithContext(context.Background())
}

func (i CredentialUserManagedIdentityMap) ToCredentialUserManagedIdentityMapOutputWithContext(ctx context.Context) CredentialUserManagedIdentityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CredentialUserManagedIdentityMapOutput)
}

type CredentialUserManagedIdentityOutput struct{ *pulumi.OutputState }

func (CredentialUserManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CredentialUserManagedIdentity)(nil)).Elem()
}

func (o CredentialUserManagedIdentityOutput) ToCredentialUserManagedIdentityOutput() CredentialUserManagedIdentityOutput {
	return o
}

func (o CredentialUserManagedIdentityOutput) ToCredentialUserManagedIdentityOutputWithContext(ctx context.Context) CredentialUserManagedIdentityOutput {
	return o
}

// List of tags that can be used for describing the Data Factory Credential.
//
// > **Note:** Manually altering a Credential resource will cause annotations to be lost, resulting in a change being detected on the next run.
func (o CredentialUserManagedIdentityOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CredentialUserManagedIdentity) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The Data Factory ID in which to associate the Credential with. Changing this forces a new resource.
func (o CredentialUserManagedIdentityOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialUserManagedIdentity) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The description for the Data Factory Credential.
func (o CredentialUserManagedIdentityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CredentialUserManagedIdentity) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Resouce ID of an existing User Assigned Managed Identity. This can be changed without recreating the resource. Changing this forces a new resource to be created.
//
// > **Note:** Attempting to create a Credential resource without first assigning the identity to the parent Data Factory will result in an Azure API error.
func (o CredentialUserManagedIdentityOutput) IdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialUserManagedIdentity) pulumi.StringOutput { return v.IdentityId }).(pulumi.StringOutput)
}

// Specifies the name of the Credential. Changing this forces a new resource to be created.
func (o CredentialUserManagedIdentityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CredentialUserManagedIdentity) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type CredentialUserManagedIdentityArrayOutput struct{ *pulumi.OutputState }

func (CredentialUserManagedIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CredentialUserManagedIdentity)(nil)).Elem()
}

func (o CredentialUserManagedIdentityArrayOutput) ToCredentialUserManagedIdentityArrayOutput() CredentialUserManagedIdentityArrayOutput {
	return o
}

func (o CredentialUserManagedIdentityArrayOutput) ToCredentialUserManagedIdentityArrayOutputWithContext(ctx context.Context) CredentialUserManagedIdentityArrayOutput {
	return o
}

func (o CredentialUserManagedIdentityArrayOutput) Index(i pulumi.IntInput) CredentialUserManagedIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CredentialUserManagedIdentity {
		return vs[0].([]*CredentialUserManagedIdentity)[vs[1].(int)]
	}).(CredentialUserManagedIdentityOutput)
}

type CredentialUserManagedIdentityMapOutput struct{ *pulumi.OutputState }

func (CredentialUserManagedIdentityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CredentialUserManagedIdentity)(nil)).Elem()
}

func (o CredentialUserManagedIdentityMapOutput) ToCredentialUserManagedIdentityMapOutput() CredentialUserManagedIdentityMapOutput {
	return o
}

func (o CredentialUserManagedIdentityMapOutput) ToCredentialUserManagedIdentityMapOutputWithContext(ctx context.Context) CredentialUserManagedIdentityMapOutput {
	return o
}

func (o CredentialUserManagedIdentityMapOutput) MapIndex(k pulumi.StringInput) CredentialUserManagedIdentityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CredentialUserManagedIdentity {
		return vs[0].(map[string]*CredentialUserManagedIdentity)[vs[1].(string)]
	}).(CredentialUserManagedIdentityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialUserManagedIdentityInput)(nil)).Elem(), &CredentialUserManagedIdentity{})
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialUserManagedIdentityArrayInput)(nil)).Elem(), CredentialUserManagedIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CredentialUserManagedIdentityMapInput)(nil)).Elem(), CredentialUserManagedIdentityMap{})
	pulumi.RegisterOutputType(CredentialUserManagedIdentityOutput{})
	pulumi.RegisterOutputType(CredentialUserManagedIdentityArrayOutput{})
	pulumi.RegisterOutputType(CredentialUserManagedIdentityMapOutput{})
}
