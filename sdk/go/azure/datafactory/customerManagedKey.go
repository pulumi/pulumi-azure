// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Customer Managed Key for a Data Factory.
//
// > **Note:** The Customer Managed Key cannot be removed from the Data Factory once added. To remove the Customer Managed Key delete and recreate the parent Data Factory.
//
// ## Example Usage
//
// ### With System Assigned Identity
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/datafactory"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
//				Name:                   pulumi.String("example-key-vault"),
//				Location:               example.Location,
//				ResourceGroupName:      example.Name,
//				TenantId:               pulumi.String(current.TenantId),
//				SkuName:                pulumi.String("standard"),
//				PurgeProtectionEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKey, err := keyvault.NewKey(ctx, "example", &keyvault.KeyArgs{
//				Name:       pulumi.String("examplekey"),
//				KeyVaultId: exampleKeyVault.ID(),
//				KeyType:    pulumi.String("RSA"),
//				KeySize:    pulumi.Int(2048),
//				KeyOpts: pulumi.StringArray{
//					pulumi.String("unwrapKey"),
//					pulumi.String("wrapKey"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keyvault.NewAccessPolicy(ctx, "current_client_policy", &keyvault.AccessPolicyArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				TenantId:   pulumi.String(current.TenantId),
//				ObjectId:   pulumi.String(current.ObjectId),
//				KeyPermissions: pulumi.StringArray{
//					pulumi.String("Create"),
//					pulumi.String("Delete"),
//					pulumi.String("Get"),
//					pulumi.String("Purge"),
//					pulumi.String("Recover"),
//					pulumi.String("Update"),
//					pulumi.String("GetRotationPolicy"),
//				},
//				SecretPermissions: pulumi.StringArray{
//					pulumi.String("Delete"),
//					pulumi.String("Get"),
//					pulumi.String("Set"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "example", &datafactory.FactoryArgs{
//				Name:              pulumi.String("example_data_factory"),
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				Identity: &datafactory.FactoryIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//					IdentityIds: pulumi.StringArray{
//						exampleAzurermUserAssignedIdentity.Id,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keyvault.NewAccessPolicy(ctx, "datafactory", &keyvault.AccessPolicyArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				TenantId: pulumi.String(exampleFactory.Identity.ApplyT(func(identity datafactory.FactoryIdentity) (*string, error) {
//					return &identity.TenantId, nil
//				}).(pulumi.StringPtrOutput)),
//				ObjectId: pulumi.String(exampleFactory.Identity.ApplyT(func(identity datafactory.FactoryIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput)),
//				KeyPermissions: pulumi.StringArray{
//					pulumi.String("Create"),
//					pulumi.String("Delete"),
//					pulumi.String("Get"),
//					pulumi.String("Purge"),
//					pulumi.String("Recover"),
//					pulumi.String("Update"),
//					pulumi.String("GetRotationPolicy"),
//					pulumi.String("WrapKey"),
//					pulumi.String("UnwrapKey"),
//				},
//				SecretPermissions: pulumi.StringArray{
//					pulumi.String("Delete"),
//					pulumi.String("Get"),
//					pulumi.String("Set"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewCustomerManagedKey(ctx, "example", &datafactory.CustomerManagedKeyArgs{
//				DataFactoryId:        exampleFactory.ID(),
//				CustomerManagedKeyId: exampleKey.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.DataFactory` - 2018-06-01
//
// ## Import
//
// Data Factory Customer Managed Keys can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:datafactory/customerManagedKey:CustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example
// ```
type CustomerManagedKey struct {
	pulumi.CustomResourceState

	// The ID the of the Customer Managed Key to associate with the Data Factory.
	CustomerManagedKeyId pulumi.StringOutput `pulumi:"customerManagedKeyId"`
	// The ID of the Data Factory Resource the Customer Managed Key will be associated with. Changing this forces a new resource to be created.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The User Assigned Identity ID that will be used to access Key Vaults that contain the encryption keys.
	UserAssignedIdentityId pulumi.StringPtrOutput `pulumi:"userAssignedIdentityId"`
}

// NewCustomerManagedKey registers a new resource with the given unique name, arguments, and options.
func NewCustomerManagedKey(ctx *pulumi.Context,
	name string, args *CustomerManagedKeyArgs, opts ...pulumi.ResourceOption) (*CustomerManagedKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomerManagedKeyId == nil {
		return nil, errors.New("invalid value for required argument 'CustomerManagedKeyId'")
	}
	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomerManagedKey
	err := ctx.RegisterResource("azure:datafactory/customerManagedKey:CustomerManagedKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomerManagedKey gets an existing CustomerManagedKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomerManagedKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomerManagedKeyState, opts ...pulumi.ResourceOption) (*CustomerManagedKey, error) {
	var resource CustomerManagedKey
	err := ctx.ReadResource("azure:datafactory/customerManagedKey:CustomerManagedKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomerManagedKey resources.
type customerManagedKeyState struct {
	// The ID the of the Customer Managed Key to associate with the Data Factory.
	CustomerManagedKeyId *string `pulumi:"customerManagedKeyId"`
	// The ID of the Data Factory Resource the Customer Managed Key will be associated with. Changing this forces a new resource to be created.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The User Assigned Identity ID that will be used to access Key Vaults that contain the encryption keys.
	UserAssignedIdentityId *string `pulumi:"userAssignedIdentityId"`
}

type CustomerManagedKeyState struct {
	// The ID the of the Customer Managed Key to associate with the Data Factory.
	CustomerManagedKeyId pulumi.StringPtrInput
	// The ID of the Data Factory Resource the Customer Managed Key will be associated with. Changing this forces a new resource to be created.
	DataFactoryId pulumi.StringPtrInput
	// The User Assigned Identity ID that will be used to access Key Vaults that contain the encryption keys.
	UserAssignedIdentityId pulumi.StringPtrInput
}

func (CustomerManagedKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*customerManagedKeyState)(nil)).Elem()
}

type customerManagedKeyArgs struct {
	// The ID the of the Customer Managed Key to associate with the Data Factory.
	CustomerManagedKeyId string `pulumi:"customerManagedKeyId"`
	// The ID of the Data Factory Resource the Customer Managed Key will be associated with. Changing this forces a new resource to be created.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The User Assigned Identity ID that will be used to access Key Vaults that contain the encryption keys.
	UserAssignedIdentityId *string `pulumi:"userAssignedIdentityId"`
}

// The set of arguments for constructing a CustomerManagedKey resource.
type CustomerManagedKeyArgs struct {
	// The ID the of the Customer Managed Key to associate with the Data Factory.
	CustomerManagedKeyId pulumi.StringInput
	// The ID of the Data Factory Resource the Customer Managed Key will be associated with. Changing this forces a new resource to be created.
	DataFactoryId pulumi.StringInput
	// The User Assigned Identity ID that will be used to access Key Vaults that contain the encryption keys.
	UserAssignedIdentityId pulumi.StringPtrInput
}

func (CustomerManagedKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customerManagedKeyArgs)(nil)).Elem()
}

type CustomerManagedKeyInput interface {
	pulumi.Input

	ToCustomerManagedKeyOutput() CustomerManagedKeyOutput
	ToCustomerManagedKeyOutputWithContext(ctx context.Context) CustomerManagedKeyOutput
}

func (*CustomerManagedKey) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerManagedKey)(nil)).Elem()
}

func (i *CustomerManagedKey) ToCustomerManagedKeyOutput() CustomerManagedKeyOutput {
	return i.ToCustomerManagedKeyOutputWithContext(context.Background())
}

func (i *CustomerManagedKey) ToCustomerManagedKeyOutputWithContext(ctx context.Context) CustomerManagedKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedKeyOutput)
}

// CustomerManagedKeyArrayInput is an input type that accepts CustomerManagedKeyArray and CustomerManagedKeyArrayOutput values.
// You can construct a concrete instance of `CustomerManagedKeyArrayInput` via:
//
//	CustomerManagedKeyArray{ CustomerManagedKeyArgs{...} }
type CustomerManagedKeyArrayInput interface {
	pulumi.Input

	ToCustomerManagedKeyArrayOutput() CustomerManagedKeyArrayOutput
	ToCustomerManagedKeyArrayOutputWithContext(context.Context) CustomerManagedKeyArrayOutput
}

type CustomerManagedKeyArray []CustomerManagedKeyInput

func (CustomerManagedKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomerManagedKey)(nil)).Elem()
}

func (i CustomerManagedKeyArray) ToCustomerManagedKeyArrayOutput() CustomerManagedKeyArrayOutput {
	return i.ToCustomerManagedKeyArrayOutputWithContext(context.Background())
}

func (i CustomerManagedKeyArray) ToCustomerManagedKeyArrayOutputWithContext(ctx context.Context) CustomerManagedKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedKeyArrayOutput)
}

// CustomerManagedKeyMapInput is an input type that accepts CustomerManagedKeyMap and CustomerManagedKeyMapOutput values.
// You can construct a concrete instance of `CustomerManagedKeyMapInput` via:
//
//	CustomerManagedKeyMap{ "key": CustomerManagedKeyArgs{...} }
type CustomerManagedKeyMapInput interface {
	pulumi.Input

	ToCustomerManagedKeyMapOutput() CustomerManagedKeyMapOutput
	ToCustomerManagedKeyMapOutputWithContext(context.Context) CustomerManagedKeyMapOutput
}

type CustomerManagedKeyMap map[string]CustomerManagedKeyInput

func (CustomerManagedKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomerManagedKey)(nil)).Elem()
}

func (i CustomerManagedKeyMap) ToCustomerManagedKeyMapOutput() CustomerManagedKeyMapOutput {
	return i.ToCustomerManagedKeyMapOutputWithContext(context.Background())
}

func (i CustomerManagedKeyMap) ToCustomerManagedKeyMapOutputWithContext(ctx context.Context) CustomerManagedKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedKeyMapOutput)
}

type CustomerManagedKeyOutput struct{ *pulumi.OutputState }

func (CustomerManagedKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerManagedKey)(nil)).Elem()
}

func (o CustomerManagedKeyOutput) ToCustomerManagedKeyOutput() CustomerManagedKeyOutput {
	return o
}

func (o CustomerManagedKeyOutput) ToCustomerManagedKeyOutputWithContext(ctx context.Context) CustomerManagedKeyOutput {
	return o
}

// The ID the of the Customer Managed Key to associate with the Data Factory.
func (o CustomerManagedKeyOutput) CustomerManagedKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomerManagedKey) pulumi.StringOutput { return v.CustomerManagedKeyId }).(pulumi.StringOutput)
}

// The ID of the Data Factory Resource the Customer Managed Key will be associated with. Changing this forces a new resource to be created.
func (o CustomerManagedKeyOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomerManagedKey) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The User Assigned Identity ID that will be used to access Key Vaults that contain the encryption keys.
func (o CustomerManagedKeyOutput) UserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerManagedKey) pulumi.StringPtrOutput { return v.UserAssignedIdentityId }).(pulumi.StringPtrOutput)
}

type CustomerManagedKeyArrayOutput struct{ *pulumi.OutputState }

func (CustomerManagedKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomerManagedKey)(nil)).Elem()
}

func (o CustomerManagedKeyArrayOutput) ToCustomerManagedKeyArrayOutput() CustomerManagedKeyArrayOutput {
	return o
}

func (o CustomerManagedKeyArrayOutput) ToCustomerManagedKeyArrayOutputWithContext(ctx context.Context) CustomerManagedKeyArrayOutput {
	return o
}

func (o CustomerManagedKeyArrayOutput) Index(i pulumi.IntInput) CustomerManagedKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomerManagedKey {
		return vs[0].([]*CustomerManagedKey)[vs[1].(int)]
	}).(CustomerManagedKeyOutput)
}

type CustomerManagedKeyMapOutput struct{ *pulumi.OutputState }

func (CustomerManagedKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomerManagedKey)(nil)).Elem()
}

func (o CustomerManagedKeyMapOutput) ToCustomerManagedKeyMapOutput() CustomerManagedKeyMapOutput {
	return o
}

func (o CustomerManagedKeyMapOutput) ToCustomerManagedKeyMapOutputWithContext(ctx context.Context) CustomerManagedKeyMapOutput {
	return o
}

func (o CustomerManagedKeyMapOutput) MapIndex(k pulumi.StringInput) CustomerManagedKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomerManagedKey {
		return vs[0].(map[string]*CustomerManagedKey)[vs[1].(string)]
	}).(CustomerManagedKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerManagedKeyInput)(nil)).Elem(), &CustomerManagedKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerManagedKeyArrayInput)(nil)).Elem(), CustomerManagedKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerManagedKeyMapInput)(nil)).Elem(), CustomerManagedKeyMap{})
	pulumi.RegisterOutputType(CustomerManagedKeyOutput{})
	pulumi.RegisterOutputType(CustomerManagedKeyArrayOutput{})
	pulumi.RegisterOutputType(CustomerManagedKeyMapOutput{})
}
