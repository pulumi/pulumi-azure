// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linked Service (connection) between Key Vault and Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				TenantId:          *pulumi.String(current.TenantId),
//				SkuName:           pulumi.String("standard"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewLinkedServiceKeyVault(ctx, "exampleLinkedServiceKeyVault", &datafactory.LinkedServiceKeyVaultArgs{
//				DataFactoryId: exampleFactory.ID(),
//				KeyVaultId:    exampleKeyVault.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Factory Key Vault Linked Service's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datafactory/linkedServiceKeyVault:LinkedServiceKeyVault example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
//
// ```
type LinkedServiceKeyVault struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Linked Service Key Vault.
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service Key Vault.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service Key Vault.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service Key Vault.
	IntegrationRuntimeName pulumi.StringPtrOutput `pulumi:"integrationRuntimeName"`
	// The ID the Azure Key Vault resource.
	KeyVaultId pulumi.StringOutput `pulumi:"keyVaultId"`
	// Specifies the name of the Data Factory Linked Service Key Vault. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service Key Vault.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
}

// NewLinkedServiceKeyVault registers a new resource with the given unique name, arguments, and options.
func NewLinkedServiceKeyVault(ctx *pulumi.Context,
	name string, args *LinkedServiceKeyVaultArgs, opts ...pulumi.ResourceOption) (*LinkedServiceKeyVault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	if args.KeyVaultId == nil {
		return nil, errors.New("invalid value for required argument 'KeyVaultId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LinkedServiceKeyVault
	err := ctx.RegisterResource("azure:datafactory/linkedServiceKeyVault:LinkedServiceKeyVault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedServiceKeyVault gets an existing LinkedServiceKeyVault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedServiceKeyVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedServiceKeyVaultState, opts ...pulumi.ResourceOption) (*LinkedServiceKeyVault, error) {
	var resource LinkedServiceKeyVault
	err := ctx.ReadResource("azure:datafactory/linkedServiceKeyVault:LinkedServiceKeyVault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedServiceKeyVault resources.
type linkedServiceKeyVaultState struct {
	// A map of additional properties to associate with the Data Factory Linked Service Key Vault.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service Key Vault.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service Key Vault.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service Key Vault.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// The ID the Azure Key Vault resource.
	KeyVaultId *string `pulumi:"keyVaultId"`
	// Specifies the name of the Data Factory Linked Service Key Vault. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service Key Vault.
	Parameters map[string]string `pulumi:"parameters"`
}

type LinkedServiceKeyVaultState struct {
	// A map of additional properties to associate with the Data Factory Linked Service Key Vault.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service Key Vault.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The description for the Data Factory Linked Service Key Vault.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service Key Vault.
	IntegrationRuntimeName pulumi.StringPtrInput
	// The ID the Azure Key Vault resource.
	KeyVaultId pulumi.StringPtrInput
	// Specifies the name of the Data Factory Linked Service Key Vault. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service Key Vault.
	Parameters pulumi.StringMapInput
}

func (LinkedServiceKeyVaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceKeyVaultState)(nil)).Elem()
}

type linkedServiceKeyVaultArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service Key Vault.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service Key Vault.
	Annotations []string `pulumi:"annotations"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service Key Vault.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service Key Vault.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// The ID the Azure Key Vault resource.
	KeyVaultId string `pulumi:"keyVaultId"`
	// Specifies the name of the Data Factory Linked Service Key Vault. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service Key Vault.
	Parameters map[string]string `pulumi:"parameters"`
}

// The set of arguments for constructing a LinkedServiceKeyVault resource.
type LinkedServiceKeyVaultArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service Key Vault.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service Key Vault.
	Annotations pulumi.StringArrayInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// The description for the Data Factory Linked Service Key Vault.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service Key Vault.
	IntegrationRuntimeName pulumi.StringPtrInput
	// The ID the Azure Key Vault resource.
	KeyVaultId pulumi.StringInput
	// Specifies the name of the Data Factory Linked Service Key Vault. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service Key Vault.
	Parameters pulumi.StringMapInput
}

func (LinkedServiceKeyVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceKeyVaultArgs)(nil)).Elem()
}

type LinkedServiceKeyVaultInput interface {
	pulumi.Input

	ToLinkedServiceKeyVaultOutput() LinkedServiceKeyVaultOutput
	ToLinkedServiceKeyVaultOutputWithContext(ctx context.Context) LinkedServiceKeyVaultOutput
}

func (*LinkedServiceKeyVault) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceKeyVault)(nil)).Elem()
}

func (i *LinkedServiceKeyVault) ToLinkedServiceKeyVaultOutput() LinkedServiceKeyVaultOutput {
	return i.ToLinkedServiceKeyVaultOutputWithContext(context.Background())
}

func (i *LinkedServiceKeyVault) ToLinkedServiceKeyVaultOutputWithContext(ctx context.Context) LinkedServiceKeyVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceKeyVaultOutput)
}

// LinkedServiceKeyVaultArrayInput is an input type that accepts LinkedServiceKeyVaultArray and LinkedServiceKeyVaultArrayOutput values.
// You can construct a concrete instance of `LinkedServiceKeyVaultArrayInput` via:
//
//	LinkedServiceKeyVaultArray{ LinkedServiceKeyVaultArgs{...} }
type LinkedServiceKeyVaultArrayInput interface {
	pulumi.Input

	ToLinkedServiceKeyVaultArrayOutput() LinkedServiceKeyVaultArrayOutput
	ToLinkedServiceKeyVaultArrayOutputWithContext(context.Context) LinkedServiceKeyVaultArrayOutput
}

type LinkedServiceKeyVaultArray []LinkedServiceKeyVaultInput

func (LinkedServiceKeyVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceKeyVault)(nil)).Elem()
}

func (i LinkedServiceKeyVaultArray) ToLinkedServiceKeyVaultArrayOutput() LinkedServiceKeyVaultArrayOutput {
	return i.ToLinkedServiceKeyVaultArrayOutputWithContext(context.Background())
}

func (i LinkedServiceKeyVaultArray) ToLinkedServiceKeyVaultArrayOutputWithContext(ctx context.Context) LinkedServiceKeyVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceKeyVaultArrayOutput)
}

// LinkedServiceKeyVaultMapInput is an input type that accepts LinkedServiceKeyVaultMap and LinkedServiceKeyVaultMapOutput values.
// You can construct a concrete instance of `LinkedServiceKeyVaultMapInput` via:
//
//	LinkedServiceKeyVaultMap{ "key": LinkedServiceKeyVaultArgs{...} }
type LinkedServiceKeyVaultMapInput interface {
	pulumi.Input

	ToLinkedServiceKeyVaultMapOutput() LinkedServiceKeyVaultMapOutput
	ToLinkedServiceKeyVaultMapOutputWithContext(context.Context) LinkedServiceKeyVaultMapOutput
}

type LinkedServiceKeyVaultMap map[string]LinkedServiceKeyVaultInput

func (LinkedServiceKeyVaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceKeyVault)(nil)).Elem()
}

func (i LinkedServiceKeyVaultMap) ToLinkedServiceKeyVaultMapOutput() LinkedServiceKeyVaultMapOutput {
	return i.ToLinkedServiceKeyVaultMapOutputWithContext(context.Background())
}

func (i LinkedServiceKeyVaultMap) ToLinkedServiceKeyVaultMapOutputWithContext(ctx context.Context) LinkedServiceKeyVaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceKeyVaultMapOutput)
}

type LinkedServiceKeyVaultOutput struct{ *pulumi.OutputState }

func (LinkedServiceKeyVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceKeyVault)(nil)).Elem()
}

func (o LinkedServiceKeyVaultOutput) ToLinkedServiceKeyVaultOutput() LinkedServiceKeyVaultOutput {
	return o
}

func (o LinkedServiceKeyVaultOutput) ToLinkedServiceKeyVaultOutputWithContext(ctx context.Context) LinkedServiceKeyVaultOutput {
	return o
}

// A map of additional properties to associate with the Data Factory Linked Service Key Vault.
func (o LinkedServiceKeyVaultOutput) AdditionalProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceKeyVault) pulumi.StringMapOutput { return v.AdditionalProperties }).(pulumi.StringMapOutput)
}

// List of tags that can be used for describing the Data Factory Linked Service Key Vault.
func (o LinkedServiceKeyVaultOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinkedServiceKeyVault) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
func (o LinkedServiceKeyVaultOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceKeyVault) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The description for the Data Factory Linked Service Key Vault.
func (o LinkedServiceKeyVaultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceKeyVault) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The integration runtime reference to associate with the Data Factory Linked Service Key Vault.
func (o LinkedServiceKeyVaultOutput) IntegrationRuntimeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceKeyVault) pulumi.StringPtrOutput { return v.IntegrationRuntimeName }).(pulumi.StringPtrOutput)
}

// The ID the Azure Key Vault resource.
func (o LinkedServiceKeyVaultOutput) KeyVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceKeyVault) pulumi.StringOutput { return v.KeyVaultId }).(pulumi.StringOutput)
}

// Specifies the name of the Data Factory Linked Service Key Vault. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
func (o LinkedServiceKeyVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceKeyVault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of parameters to associate with the Data Factory Linked Service Key Vault.
func (o LinkedServiceKeyVaultOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceKeyVault) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

type LinkedServiceKeyVaultArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceKeyVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceKeyVault)(nil)).Elem()
}

func (o LinkedServiceKeyVaultArrayOutput) ToLinkedServiceKeyVaultArrayOutput() LinkedServiceKeyVaultArrayOutput {
	return o
}

func (o LinkedServiceKeyVaultArrayOutput) ToLinkedServiceKeyVaultArrayOutputWithContext(ctx context.Context) LinkedServiceKeyVaultArrayOutput {
	return o
}

func (o LinkedServiceKeyVaultArrayOutput) Index(i pulumi.IntInput) LinkedServiceKeyVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinkedServiceKeyVault {
		return vs[0].([]*LinkedServiceKeyVault)[vs[1].(int)]
	}).(LinkedServiceKeyVaultOutput)
}

type LinkedServiceKeyVaultMapOutput struct{ *pulumi.OutputState }

func (LinkedServiceKeyVaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceKeyVault)(nil)).Elem()
}

func (o LinkedServiceKeyVaultMapOutput) ToLinkedServiceKeyVaultMapOutput() LinkedServiceKeyVaultMapOutput {
	return o
}

func (o LinkedServiceKeyVaultMapOutput) ToLinkedServiceKeyVaultMapOutputWithContext(ctx context.Context) LinkedServiceKeyVaultMapOutput {
	return o
}

func (o LinkedServiceKeyVaultMapOutput) MapIndex(k pulumi.StringInput) LinkedServiceKeyVaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinkedServiceKeyVault {
		return vs[0].(map[string]*LinkedServiceKeyVault)[vs[1].(string)]
	}).(LinkedServiceKeyVaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceKeyVaultInput)(nil)).Elem(), &LinkedServiceKeyVault{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceKeyVaultArrayInput)(nil)).Elem(), LinkedServiceKeyVaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceKeyVaultMapInput)(nil)).Elem(), LinkedServiceKeyVaultMap{})
	pulumi.RegisterOutputType(LinkedServiceKeyVaultOutput{})
	pulumi.RegisterOutputType(LinkedServiceKeyVaultArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceKeyVaultMapOutput{})
}
