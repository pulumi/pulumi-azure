// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Data Factory Azure Integration Runtime.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/datafactory"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("northeurope"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = datafactory.NewIntegrationRuntimeRule(ctx, "exampleIntegrationRuntimeRule", &datafactory.IntegrationRuntimeRuleArgs{
// 			DataFactoryName:   exampleFactory.Name,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Location:          exampleResourceGroup.Location,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Data Factory Azure Integration Runtimes can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:datafactory/integrationRuntimeRule:IntegrationRuntimeRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/integrationruntimes/example
// ```
type IntegrationRuntimeRule struct {
	pulumi.CustomResourceState

	// Compute type of the cluster which will execute data flow job. Valid values are `General`, `ComputeOptimized` and `MemoryOptimized`. Defaults to `General`.
	ComputeType pulumi.StringPtrOutput `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Valid values are `8`, `16`, `32`, `48`, `80`, `144` and `272`. Defaults to `8`.
	CoreCount pulumi.IntPtrOutput `pulumi:"coreCount"`
	// Specifies the name of the Data Factory the Managed Integration Runtime belongs to. Changing this forces a new resource to be created.
	DataFactoryName pulumi.StringOutput `pulumi:"dataFactoryName"`
	// Integration runtime description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the Managed Integration Runtime. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the Managed Integration Runtime. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Time to live (in minutes) setting of the cluster which will execute data flow job. Defaults to `0`.
	TimeToLiveMin pulumi.IntPtrOutput `pulumi:"timeToLiveMin"`
}

// NewIntegrationRuntimeRule registers a new resource with the given unique name, arguments, and options.
func NewIntegrationRuntimeRule(ctx *pulumi.Context,
	name string, args *IntegrationRuntimeRuleArgs, opts ...pulumi.ResourceOption) (*IntegrationRuntimeRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryName == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource IntegrationRuntimeRule
	err := ctx.RegisterResource("azure:datafactory/integrationRuntimeRule:IntegrationRuntimeRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationRuntimeRule gets an existing IntegrationRuntimeRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationRuntimeRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationRuntimeRuleState, opts ...pulumi.ResourceOption) (*IntegrationRuntimeRule, error) {
	var resource IntegrationRuntimeRule
	err := ctx.ReadResource("azure:datafactory/integrationRuntimeRule:IntegrationRuntimeRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationRuntimeRule resources.
type integrationRuntimeRuleState struct {
	// Compute type of the cluster which will execute data flow job. Valid values are `General`, `ComputeOptimized` and `MemoryOptimized`. Defaults to `General`.
	ComputeType *string `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Valid values are `8`, `16`, `32`, `48`, `80`, `144` and `272`. Defaults to `8`.
	CoreCount *int `pulumi:"coreCount"`
	// Specifies the name of the Data Factory the Managed Integration Runtime belongs to. Changing this forces a new resource to be created.
	DataFactoryName *string `pulumi:"dataFactoryName"`
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Managed Integration Runtime. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Managed Integration Runtime. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Time to live (in minutes) setting of the cluster which will execute data flow job. Defaults to `0`.
	TimeToLiveMin *int `pulumi:"timeToLiveMin"`
}

type IntegrationRuntimeRuleState struct {
	// Compute type of the cluster which will execute data flow job. Valid values are `General`, `ComputeOptimized` and `MemoryOptimized`. Defaults to `General`.
	ComputeType pulumi.StringPtrInput
	// Core count of the cluster which will execute data flow job. Valid values are `8`, `16`, `32`, `48`, `80`, `144` and `272`. Defaults to `8`.
	CoreCount pulumi.IntPtrInput
	// Specifies the name of the Data Factory the Managed Integration Runtime belongs to. Changing this forces a new resource to be created.
	DataFactoryName pulumi.StringPtrInput
	// Integration runtime description.
	Description pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Managed Integration Runtime. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Managed Integration Runtime. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Time to live (in minutes) setting of the cluster which will execute data flow job. Defaults to `0`.
	TimeToLiveMin pulumi.IntPtrInput
}

func (IntegrationRuntimeRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationRuntimeRuleState)(nil)).Elem()
}

type integrationRuntimeRuleArgs struct {
	// Compute type of the cluster which will execute data flow job. Valid values are `General`, `ComputeOptimized` and `MemoryOptimized`. Defaults to `General`.
	ComputeType *string `pulumi:"computeType"`
	// Core count of the cluster which will execute data flow job. Valid values are `8`, `16`, `32`, `48`, `80`, `144` and `272`. Defaults to `8`.
	CoreCount *int `pulumi:"coreCount"`
	// Specifies the name of the Data Factory the Managed Integration Runtime belongs to. Changing this forces a new resource to be created.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// Integration runtime description.
	Description *string `pulumi:"description"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Managed Integration Runtime. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Managed Integration Runtime. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Time to live (in minutes) setting of the cluster which will execute data flow job. Defaults to `0`.
	TimeToLiveMin *int `pulumi:"timeToLiveMin"`
}

// The set of arguments for constructing a IntegrationRuntimeRule resource.
type IntegrationRuntimeRuleArgs struct {
	// Compute type of the cluster which will execute data flow job. Valid values are `General`, `ComputeOptimized` and `MemoryOptimized`. Defaults to `General`.
	ComputeType pulumi.StringPtrInput
	// Core count of the cluster which will execute data flow job. Valid values are `8`, `16`, `32`, `48`, `80`, `144` and `272`. Defaults to `8`.
	CoreCount pulumi.IntPtrInput
	// Specifies the name of the Data Factory the Managed Integration Runtime belongs to. Changing this forces a new resource to be created.
	DataFactoryName pulumi.StringInput
	// Integration runtime description.
	Description pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Managed Integration Runtime. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Managed Integration Runtime. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Time to live (in minutes) setting of the cluster which will execute data flow job. Defaults to `0`.
	TimeToLiveMin pulumi.IntPtrInput
}

func (IntegrationRuntimeRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationRuntimeRuleArgs)(nil)).Elem()
}

type IntegrationRuntimeRuleInput interface {
	pulumi.Input

	ToIntegrationRuntimeRuleOutput() IntegrationRuntimeRuleOutput
	ToIntegrationRuntimeRuleOutputWithContext(ctx context.Context) IntegrationRuntimeRuleOutput
}

func (IntegrationRuntimeRule) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeRule)(nil)).Elem()
}

func (i IntegrationRuntimeRule) ToIntegrationRuntimeRuleOutput() IntegrationRuntimeRuleOutput {
	return i.ToIntegrationRuntimeRuleOutputWithContext(context.Background())
}

func (i IntegrationRuntimeRule) ToIntegrationRuntimeRuleOutputWithContext(ctx context.Context) IntegrationRuntimeRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRuntimeRuleOutput)
}

type IntegrationRuntimeRuleOutput struct {
	*pulumi.OutputState
}

func (IntegrationRuntimeRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationRuntimeRuleOutput)(nil)).Elem()
}

func (o IntegrationRuntimeRuleOutput) ToIntegrationRuntimeRuleOutput() IntegrationRuntimeRuleOutput {
	return o
}

func (o IntegrationRuntimeRuleOutput) ToIntegrationRuntimeRuleOutputWithContext(ctx context.Context) IntegrationRuntimeRuleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(IntegrationRuntimeRuleOutput{})
}
