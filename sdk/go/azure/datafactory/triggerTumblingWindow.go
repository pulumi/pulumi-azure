// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TriggerTumblingWindow struct {
	pulumi.CustomResourceState

	Activated            pulumi.BoolPtrOutput                              `pulumi:"activated"`
	AdditionalProperties pulumi.StringMapOutput                            `pulumi:"additionalProperties"`
	Annotations          pulumi.StringArrayOutput                          `pulumi:"annotations"`
	DataFactoryId        pulumi.StringOutput                               `pulumi:"dataFactoryId"`
	Delay                pulumi.StringPtrOutput                            `pulumi:"delay"`
	Description          pulumi.StringPtrOutput                            `pulumi:"description"`
	EndTime              pulumi.StringPtrOutput                            `pulumi:"endTime"`
	Frequency            pulumi.StringOutput                               `pulumi:"frequency"`
	Interval             pulumi.IntOutput                                  `pulumi:"interval"`
	MaxConcurrency       pulumi.IntPtrOutput                               `pulumi:"maxConcurrency"`
	Name                 pulumi.StringOutput                               `pulumi:"name"`
	Pipeline             TriggerTumblingWindowPipelineOutput               `pulumi:"pipeline"`
	Retry                TriggerTumblingWindowRetryPtrOutput               `pulumi:"retry"`
	StartTime            pulumi.StringOutput                               `pulumi:"startTime"`
	TriggerDependencies  TriggerTumblingWindowTriggerDependencyArrayOutput `pulumi:"triggerDependencies"`
}

// NewTriggerTumblingWindow registers a new resource with the given unique name, arguments, and options.
func NewTriggerTumblingWindow(ctx *pulumi.Context,
	name string, args *TriggerTumblingWindowArgs, opts ...pulumi.ResourceOption) (*TriggerTumblingWindow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	if args.Frequency == nil {
		return nil, errors.New("invalid value for required argument 'Frequency'")
	}
	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	if args.Pipeline == nil {
		return nil, errors.New("invalid value for required argument 'Pipeline'")
	}
	if args.StartTime == nil {
		return nil, errors.New("invalid value for required argument 'StartTime'")
	}
	var resource TriggerTumblingWindow
	err := ctx.RegisterResource("azure:datafactory/triggerTumblingWindow:TriggerTumblingWindow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTriggerTumblingWindow gets an existing TriggerTumblingWindow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTriggerTumblingWindow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerTumblingWindowState, opts ...pulumi.ResourceOption) (*TriggerTumblingWindow, error) {
	var resource TriggerTumblingWindow
	err := ctx.ReadResource("azure:datafactory/triggerTumblingWindow:TriggerTumblingWindow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TriggerTumblingWindow resources.
type triggerTumblingWindowState struct {
	Activated            *bool                                    `pulumi:"activated"`
	AdditionalProperties map[string]string                        `pulumi:"additionalProperties"`
	Annotations          []string                                 `pulumi:"annotations"`
	DataFactoryId        *string                                  `pulumi:"dataFactoryId"`
	Delay                *string                                  `pulumi:"delay"`
	Description          *string                                  `pulumi:"description"`
	EndTime              *string                                  `pulumi:"endTime"`
	Frequency            *string                                  `pulumi:"frequency"`
	Interval             *int                                     `pulumi:"interval"`
	MaxConcurrency       *int                                     `pulumi:"maxConcurrency"`
	Name                 *string                                  `pulumi:"name"`
	Pipeline             *TriggerTumblingWindowPipeline           `pulumi:"pipeline"`
	Retry                *TriggerTumblingWindowRetry              `pulumi:"retry"`
	StartTime            *string                                  `pulumi:"startTime"`
	TriggerDependencies  []TriggerTumblingWindowTriggerDependency `pulumi:"triggerDependencies"`
}

type TriggerTumblingWindowState struct {
	Activated            pulumi.BoolPtrInput
	AdditionalProperties pulumi.StringMapInput
	Annotations          pulumi.StringArrayInput
	DataFactoryId        pulumi.StringPtrInput
	Delay                pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	EndTime              pulumi.StringPtrInput
	Frequency            pulumi.StringPtrInput
	Interval             pulumi.IntPtrInput
	MaxConcurrency       pulumi.IntPtrInput
	Name                 pulumi.StringPtrInput
	Pipeline             TriggerTumblingWindowPipelinePtrInput
	Retry                TriggerTumblingWindowRetryPtrInput
	StartTime            pulumi.StringPtrInput
	TriggerDependencies  TriggerTumblingWindowTriggerDependencyArrayInput
}

func (TriggerTumblingWindowState) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerTumblingWindowState)(nil)).Elem()
}

type triggerTumblingWindowArgs struct {
	Activated            *bool                                    `pulumi:"activated"`
	AdditionalProperties map[string]string                        `pulumi:"additionalProperties"`
	Annotations          []string                                 `pulumi:"annotations"`
	DataFactoryId        string                                   `pulumi:"dataFactoryId"`
	Delay                *string                                  `pulumi:"delay"`
	Description          *string                                  `pulumi:"description"`
	EndTime              *string                                  `pulumi:"endTime"`
	Frequency            string                                   `pulumi:"frequency"`
	Interval             int                                      `pulumi:"interval"`
	MaxConcurrency       *int                                     `pulumi:"maxConcurrency"`
	Name                 *string                                  `pulumi:"name"`
	Pipeline             TriggerTumblingWindowPipeline            `pulumi:"pipeline"`
	Retry                *TriggerTumblingWindowRetry              `pulumi:"retry"`
	StartTime            string                                   `pulumi:"startTime"`
	TriggerDependencies  []TriggerTumblingWindowTriggerDependency `pulumi:"triggerDependencies"`
}

// The set of arguments for constructing a TriggerTumblingWindow resource.
type TriggerTumblingWindowArgs struct {
	Activated            pulumi.BoolPtrInput
	AdditionalProperties pulumi.StringMapInput
	Annotations          pulumi.StringArrayInput
	DataFactoryId        pulumi.StringInput
	Delay                pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	EndTime              pulumi.StringPtrInput
	Frequency            pulumi.StringInput
	Interval             pulumi.IntInput
	MaxConcurrency       pulumi.IntPtrInput
	Name                 pulumi.StringPtrInput
	Pipeline             TriggerTumblingWindowPipelineInput
	Retry                TriggerTumblingWindowRetryPtrInput
	StartTime            pulumi.StringInput
	TriggerDependencies  TriggerTumblingWindowTriggerDependencyArrayInput
}

func (TriggerTumblingWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerTumblingWindowArgs)(nil)).Elem()
}

type TriggerTumblingWindowInput interface {
	pulumi.Input

	ToTriggerTumblingWindowOutput() TriggerTumblingWindowOutput
	ToTriggerTumblingWindowOutputWithContext(ctx context.Context) TriggerTumblingWindowOutput
}

func (*TriggerTumblingWindow) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerTumblingWindow)(nil)).Elem()
}

func (i *TriggerTumblingWindow) ToTriggerTumblingWindowOutput() TriggerTumblingWindowOutput {
	return i.ToTriggerTumblingWindowOutputWithContext(context.Background())
}

func (i *TriggerTumblingWindow) ToTriggerTumblingWindowOutputWithContext(ctx context.Context) TriggerTumblingWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTumblingWindowOutput)
}

// TriggerTumblingWindowArrayInput is an input type that accepts TriggerTumblingWindowArray and TriggerTumblingWindowArrayOutput values.
// You can construct a concrete instance of `TriggerTumblingWindowArrayInput` via:
//
//          TriggerTumblingWindowArray{ TriggerTumblingWindowArgs{...} }
type TriggerTumblingWindowArrayInput interface {
	pulumi.Input

	ToTriggerTumblingWindowArrayOutput() TriggerTumblingWindowArrayOutput
	ToTriggerTumblingWindowArrayOutputWithContext(context.Context) TriggerTumblingWindowArrayOutput
}

type TriggerTumblingWindowArray []TriggerTumblingWindowInput

func (TriggerTumblingWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TriggerTumblingWindow)(nil)).Elem()
}

func (i TriggerTumblingWindowArray) ToTriggerTumblingWindowArrayOutput() TriggerTumblingWindowArrayOutput {
	return i.ToTriggerTumblingWindowArrayOutputWithContext(context.Background())
}

func (i TriggerTumblingWindowArray) ToTriggerTumblingWindowArrayOutputWithContext(ctx context.Context) TriggerTumblingWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTumblingWindowArrayOutput)
}

// TriggerTumblingWindowMapInput is an input type that accepts TriggerTumblingWindowMap and TriggerTumblingWindowMapOutput values.
// You can construct a concrete instance of `TriggerTumblingWindowMapInput` via:
//
//          TriggerTumblingWindowMap{ "key": TriggerTumblingWindowArgs{...} }
type TriggerTumblingWindowMapInput interface {
	pulumi.Input

	ToTriggerTumblingWindowMapOutput() TriggerTumblingWindowMapOutput
	ToTriggerTumblingWindowMapOutputWithContext(context.Context) TriggerTumblingWindowMapOutput
}

type TriggerTumblingWindowMap map[string]TriggerTumblingWindowInput

func (TriggerTumblingWindowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TriggerTumblingWindow)(nil)).Elem()
}

func (i TriggerTumblingWindowMap) ToTriggerTumblingWindowMapOutput() TriggerTumblingWindowMapOutput {
	return i.ToTriggerTumblingWindowMapOutputWithContext(context.Background())
}

func (i TriggerTumblingWindowMap) ToTriggerTumblingWindowMapOutputWithContext(ctx context.Context) TriggerTumblingWindowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTumblingWindowMapOutput)
}

type TriggerTumblingWindowOutput struct{ *pulumi.OutputState }

func (TriggerTumblingWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerTumblingWindow)(nil)).Elem()
}

func (o TriggerTumblingWindowOutput) ToTriggerTumblingWindowOutput() TriggerTumblingWindowOutput {
	return o
}

func (o TriggerTumblingWindowOutput) ToTriggerTumblingWindowOutputWithContext(ctx context.Context) TriggerTumblingWindowOutput {
	return o
}

type TriggerTumblingWindowArrayOutput struct{ *pulumi.OutputState }

func (TriggerTumblingWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TriggerTumblingWindow)(nil)).Elem()
}

func (o TriggerTumblingWindowArrayOutput) ToTriggerTumblingWindowArrayOutput() TriggerTumblingWindowArrayOutput {
	return o
}

func (o TriggerTumblingWindowArrayOutput) ToTriggerTumblingWindowArrayOutputWithContext(ctx context.Context) TriggerTumblingWindowArrayOutput {
	return o
}

func (o TriggerTumblingWindowArrayOutput) Index(i pulumi.IntInput) TriggerTumblingWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TriggerTumblingWindow {
		return vs[0].([]*TriggerTumblingWindow)[vs[1].(int)]
	}).(TriggerTumblingWindowOutput)
}

type TriggerTumblingWindowMapOutput struct{ *pulumi.OutputState }

func (TriggerTumblingWindowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TriggerTumblingWindow)(nil)).Elem()
}

func (o TriggerTumblingWindowMapOutput) ToTriggerTumblingWindowMapOutput() TriggerTumblingWindowMapOutput {
	return o
}

func (o TriggerTumblingWindowMapOutput) ToTriggerTumblingWindowMapOutputWithContext(ctx context.Context) TriggerTumblingWindowMapOutput {
	return o
}

func (o TriggerTumblingWindowMapOutput) MapIndex(k pulumi.StringInput) TriggerTumblingWindowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TriggerTumblingWindow {
		return vs[0].(map[string]*TriggerTumblingWindow)[vs[1].(string)]
	}).(TriggerTumblingWindowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerTumblingWindowInput)(nil)).Elem(), &TriggerTumblingWindow{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerTumblingWindowArrayInput)(nil)).Elem(), TriggerTumblingWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerTumblingWindowMapInput)(nil)).Elem(), TriggerTumblingWindowMap{})
	pulumi.RegisterOutputType(TriggerTumblingWindowOutput{})
	pulumi.RegisterOutputType(TriggerTumblingWindowArrayOutput{})
	pulumi.RegisterOutputType(TriggerTumblingWindowMapOutput{})
}
