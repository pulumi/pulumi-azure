// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Tumbling Window Trigger inside an Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			examplePipeline, err := datafactory.NewPipeline(ctx, "examplePipeline", &datafactory.PipelineArgs{
//				DataFactoryId: exampleFactory.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewTriggerTumblingWindow(ctx, "exampleTriggerTumblingWindow", &datafactory.TriggerTumblingWindowArgs{
//				DataFactoryId: exampleFactory.ID(),
//				StartTime:     pulumi.String("2022-09-21T00:00:00Z"),
//				EndTime:       pulumi.String("2022-09-21T08:00:00Z"),
//				Frequency:     pulumi.String("Minute"),
//				Interval:      pulumi.Int(15),
//				Delay:         pulumi.String("16:00:00"),
//				Annotations: pulumi.StringArray{
//					pulumi.String("example1"),
//					pulumi.String("example2"),
//					pulumi.String("example3"),
//				},
//				Description: pulumi.String("example description"),
//				Retry: &datafactory.TriggerTumblingWindowRetryArgs{
//					Count:    pulumi.Int(1),
//					Interval: pulumi.Int(30),
//				},
//				Pipeline: &datafactory.TriggerTumblingWindowPipelineArgs{
//					Name: examplePipeline.Name,
//					Parameters: pulumi.StringMap{
//						"Env": pulumi.String("Prod"),
//					},
//				},
//				TriggerDependencies: datafactory.TriggerTumblingWindowTriggerDependencyArray{
//					&datafactory.TriggerTumblingWindowTriggerDependencyArgs{
//						Size:   pulumi.String("24:00:00"),
//						Offset: pulumi.String("-24:00:00"),
//					},
//				},
//				AdditionalProperties: pulumi.StringMap{
//					"foo": pulumi.String("value1"),
//					"bar": pulumi.String("value2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Factory Tumbling Window Trigger can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datafactory/triggerTumblingWindow:TriggerTumblingWindow example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/triggers/example
//
// ```
type TriggerTumblingWindow struct {
	pulumi.CustomResourceState

	// Specifies if the Data Factory Tumbling Window Trigger is activated. Defaults to `true`.
	Activated pulumi.BoolPtrOutput `pulumi:"activated"`
	// A map of additional properties to associate with the Data Factory Tumbling Window Trigger.
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Tumbling Window Trigger.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The ID of Data Factory in which to associate the Trigger with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// Specifies how long the trigger waits before triggering new run. formatted as an `D.HH:MM:SS`.
	Delay pulumi.StringPtrOutput `pulumi:"delay"`
	// The description for the Data Factory Tumbling Window Trigger.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the end time of Tumbling Window, formatted as an RFC3339 string.
	EndTime pulumi.StringPtrOutput `pulumi:"endTime"`
	// Specifies the frequency of Tumbling Window. Possible values are `Hour`, `Minute` and `Month`. Changing this forces a new resource.
	Frequency pulumi.StringOutput `pulumi:"frequency"`
	// Specifies the interval of Tumbling Window. Changing this forces a new resource.
	Interval pulumi.IntOutput `pulumi:"interval"`
	// The max number for simultaneous trigger run fired by Tumbling Window. Possible values are between `1` and `50`. Defaults to `50`.
	MaxConcurrency pulumi.IntPtrOutput `pulumi:"maxConcurrency"`
	// Specifies the name of the Data Factory Tumbling Window Trigger. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `pipeline` block as defined below.
	Pipeline TriggerTumblingWindowPipelineOutput `pulumi:"pipeline"`
	// A `retry` block as defined below.
	Retry TriggerTumblingWindowRetryPtrOutput `pulumi:"retry"`
	// Specifies the start time of Tumbling Window, formatted as an RFC3339 string. Changing this forces a new resource.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// One or more `triggerDependency` block as defined below.
	TriggerDependencies TriggerTumblingWindowTriggerDependencyArrayOutput `pulumi:"triggerDependencies"`
}

// NewTriggerTumblingWindow registers a new resource with the given unique name, arguments, and options.
func NewTriggerTumblingWindow(ctx *pulumi.Context,
	name string, args *TriggerTumblingWindowArgs, opts ...pulumi.ResourceOption) (*TriggerTumblingWindow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	if args.Frequency == nil {
		return nil, errors.New("invalid value for required argument 'Frequency'")
	}
	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	if args.Pipeline == nil {
		return nil, errors.New("invalid value for required argument 'Pipeline'")
	}
	if args.StartTime == nil {
		return nil, errors.New("invalid value for required argument 'StartTime'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TriggerTumblingWindow
	err := ctx.RegisterResource("azure:datafactory/triggerTumblingWindow:TriggerTumblingWindow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTriggerTumblingWindow gets an existing TriggerTumblingWindow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTriggerTumblingWindow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerTumblingWindowState, opts ...pulumi.ResourceOption) (*TriggerTumblingWindow, error) {
	var resource TriggerTumblingWindow
	err := ctx.ReadResource("azure:datafactory/triggerTumblingWindow:TriggerTumblingWindow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TriggerTumblingWindow resources.
type triggerTumblingWindowState struct {
	// Specifies if the Data Factory Tumbling Window Trigger is activated. Defaults to `true`.
	Activated *bool `pulumi:"activated"`
	// A map of additional properties to associate with the Data Factory Tumbling Window Trigger.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Tumbling Window Trigger.
	Annotations []string `pulumi:"annotations"`
	// The ID of Data Factory in which to associate the Trigger with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// Specifies how long the trigger waits before triggering new run. formatted as an `D.HH:MM:SS`.
	Delay *string `pulumi:"delay"`
	// The description for the Data Factory Tumbling Window Trigger.
	Description *string `pulumi:"description"`
	// Specifies the end time of Tumbling Window, formatted as an RFC3339 string.
	EndTime *string `pulumi:"endTime"`
	// Specifies the frequency of Tumbling Window. Possible values are `Hour`, `Minute` and `Month`. Changing this forces a new resource.
	Frequency *string `pulumi:"frequency"`
	// Specifies the interval of Tumbling Window. Changing this forces a new resource.
	Interval *int `pulumi:"interval"`
	// The max number for simultaneous trigger run fired by Tumbling Window. Possible values are between `1` and `50`. Defaults to `50`.
	MaxConcurrency *int `pulumi:"maxConcurrency"`
	// Specifies the name of the Data Factory Tumbling Window Trigger. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `pipeline` block as defined below.
	Pipeline *TriggerTumblingWindowPipeline `pulumi:"pipeline"`
	// A `retry` block as defined below.
	Retry *TriggerTumblingWindowRetry `pulumi:"retry"`
	// Specifies the start time of Tumbling Window, formatted as an RFC3339 string. Changing this forces a new resource.
	StartTime *string `pulumi:"startTime"`
	// One or more `triggerDependency` block as defined below.
	TriggerDependencies []TriggerTumblingWindowTriggerDependency `pulumi:"triggerDependencies"`
}

type TriggerTumblingWindowState struct {
	// Specifies if the Data Factory Tumbling Window Trigger is activated. Defaults to `true`.
	Activated pulumi.BoolPtrInput
	// A map of additional properties to associate with the Data Factory Tumbling Window Trigger.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Tumbling Window Trigger.
	Annotations pulumi.StringArrayInput
	// The ID of Data Factory in which to associate the Trigger with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// Specifies how long the trigger waits before triggering new run. formatted as an `D.HH:MM:SS`.
	Delay pulumi.StringPtrInput
	// The description for the Data Factory Tumbling Window Trigger.
	Description pulumi.StringPtrInput
	// Specifies the end time of Tumbling Window, formatted as an RFC3339 string.
	EndTime pulumi.StringPtrInput
	// Specifies the frequency of Tumbling Window. Possible values are `Hour`, `Minute` and `Month`. Changing this forces a new resource.
	Frequency pulumi.StringPtrInput
	// Specifies the interval of Tumbling Window. Changing this forces a new resource.
	Interval pulumi.IntPtrInput
	// The max number for simultaneous trigger run fired by Tumbling Window. Possible values are between `1` and `50`. Defaults to `50`.
	MaxConcurrency pulumi.IntPtrInput
	// Specifies the name of the Data Factory Tumbling Window Trigger. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `pipeline` block as defined below.
	Pipeline TriggerTumblingWindowPipelinePtrInput
	// A `retry` block as defined below.
	Retry TriggerTumblingWindowRetryPtrInput
	// Specifies the start time of Tumbling Window, formatted as an RFC3339 string. Changing this forces a new resource.
	StartTime pulumi.StringPtrInput
	// One or more `triggerDependency` block as defined below.
	TriggerDependencies TriggerTumblingWindowTriggerDependencyArrayInput
}

func (TriggerTumblingWindowState) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerTumblingWindowState)(nil)).Elem()
}

type triggerTumblingWindowArgs struct {
	// Specifies if the Data Factory Tumbling Window Trigger is activated. Defaults to `true`.
	Activated *bool `pulumi:"activated"`
	// A map of additional properties to associate with the Data Factory Tumbling Window Trigger.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Tumbling Window Trigger.
	Annotations []string `pulumi:"annotations"`
	// The ID of Data Factory in which to associate the Trigger with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// Specifies how long the trigger waits before triggering new run. formatted as an `D.HH:MM:SS`.
	Delay *string `pulumi:"delay"`
	// The description for the Data Factory Tumbling Window Trigger.
	Description *string `pulumi:"description"`
	// Specifies the end time of Tumbling Window, formatted as an RFC3339 string.
	EndTime *string `pulumi:"endTime"`
	// Specifies the frequency of Tumbling Window. Possible values are `Hour`, `Minute` and `Month`. Changing this forces a new resource.
	Frequency string `pulumi:"frequency"`
	// Specifies the interval of Tumbling Window. Changing this forces a new resource.
	Interval int `pulumi:"interval"`
	// The max number for simultaneous trigger run fired by Tumbling Window. Possible values are between `1` and `50`. Defaults to `50`.
	MaxConcurrency *int `pulumi:"maxConcurrency"`
	// Specifies the name of the Data Factory Tumbling Window Trigger. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `pipeline` block as defined below.
	Pipeline TriggerTumblingWindowPipeline `pulumi:"pipeline"`
	// A `retry` block as defined below.
	Retry *TriggerTumblingWindowRetry `pulumi:"retry"`
	// Specifies the start time of Tumbling Window, formatted as an RFC3339 string. Changing this forces a new resource.
	StartTime string `pulumi:"startTime"`
	// One or more `triggerDependency` block as defined below.
	TriggerDependencies []TriggerTumblingWindowTriggerDependency `pulumi:"triggerDependencies"`
}

// The set of arguments for constructing a TriggerTumblingWindow resource.
type TriggerTumblingWindowArgs struct {
	// Specifies if the Data Factory Tumbling Window Trigger is activated. Defaults to `true`.
	Activated pulumi.BoolPtrInput
	// A map of additional properties to associate with the Data Factory Tumbling Window Trigger.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Tumbling Window Trigger.
	Annotations pulumi.StringArrayInput
	// The ID of Data Factory in which to associate the Trigger with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// Specifies how long the trigger waits before triggering new run. formatted as an `D.HH:MM:SS`.
	Delay pulumi.StringPtrInput
	// The description for the Data Factory Tumbling Window Trigger.
	Description pulumi.StringPtrInput
	// Specifies the end time of Tumbling Window, formatted as an RFC3339 string.
	EndTime pulumi.StringPtrInput
	// Specifies the frequency of Tumbling Window. Possible values are `Hour`, `Minute` and `Month`. Changing this forces a new resource.
	Frequency pulumi.StringInput
	// Specifies the interval of Tumbling Window. Changing this forces a new resource.
	Interval pulumi.IntInput
	// The max number for simultaneous trigger run fired by Tumbling Window. Possible values are between `1` and `50`. Defaults to `50`.
	MaxConcurrency pulumi.IntPtrInput
	// Specifies the name of the Data Factory Tumbling Window Trigger. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `pipeline` block as defined below.
	Pipeline TriggerTumblingWindowPipelineInput
	// A `retry` block as defined below.
	Retry TriggerTumblingWindowRetryPtrInput
	// Specifies the start time of Tumbling Window, formatted as an RFC3339 string. Changing this forces a new resource.
	StartTime pulumi.StringInput
	// One or more `triggerDependency` block as defined below.
	TriggerDependencies TriggerTumblingWindowTriggerDependencyArrayInput
}

func (TriggerTumblingWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerTumblingWindowArgs)(nil)).Elem()
}

type TriggerTumblingWindowInput interface {
	pulumi.Input

	ToTriggerTumblingWindowOutput() TriggerTumblingWindowOutput
	ToTriggerTumblingWindowOutputWithContext(ctx context.Context) TriggerTumblingWindowOutput
}

func (*TriggerTumblingWindow) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerTumblingWindow)(nil)).Elem()
}

func (i *TriggerTumblingWindow) ToTriggerTumblingWindowOutput() TriggerTumblingWindowOutput {
	return i.ToTriggerTumblingWindowOutputWithContext(context.Background())
}

func (i *TriggerTumblingWindow) ToTriggerTumblingWindowOutputWithContext(ctx context.Context) TriggerTumblingWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTumblingWindowOutput)
}

// TriggerTumblingWindowArrayInput is an input type that accepts TriggerTumblingWindowArray and TriggerTumblingWindowArrayOutput values.
// You can construct a concrete instance of `TriggerTumblingWindowArrayInput` via:
//
//	TriggerTumblingWindowArray{ TriggerTumblingWindowArgs{...} }
type TriggerTumblingWindowArrayInput interface {
	pulumi.Input

	ToTriggerTumblingWindowArrayOutput() TriggerTumblingWindowArrayOutput
	ToTriggerTumblingWindowArrayOutputWithContext(context.Context) TriggerTumblingWindowArrayOutput
}

type TriggerTumblingWindowArray []TriggerTumblingWindowInput

func (TriggerTumblingWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TriggerTumblingWindow)(nil)).Elem()
}

func (i TriggerTumblingWindowArray) ToTriggerTumblingWindowArrayOutput() TriggerTumblingWindowArrayOutput {
	return i.ToTriggerTumblingWindowArrayOutputWithContext(context.Background())
}

func (i TriggerTumblingWindowArray) ToTriggerTumblingWindowArrayOutputWithContext(ctx context.Context) TriggerTumblingWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTumblingWindowArrayOutput)
}

// TriggerTumblingWindowMapInput is an input type that accepts TriggerTumblingWindowMap and TriggerTumblingWindowMapOutput values.
// You can construct a concrete instance of `TriggerTumblingWindowMapInput` via:
//
//	TriggerTumblingWindowMap{ "key": TriggerTumblingWindowArgs{...} }
type TriggerTumblingWindowMapInput interface {
	pulumi.Input

	ToTriggerTumblingWindowMapOutput() TriggerTumblingWindowMapOutput
	ToTriggerTumblingWindowMapOutputWithContext(context.Context) TriggerTumblingWindowMapOutput
}

type TriggerTumblingWindowMap map[string]TriggerTumblingWindowInput

func (TriggerTumblingWindowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TriggerTumblingWindow)(nil)).Elem()
}

func (i TriggerTumblingWindowMap) ToTriggerTumblingWindowMapOutput() TriggerTumblingWindowMapOutput {
	return i.ToTriggerTumblingWindowMapOutputWithContext(context.Background())
}

func (i TriggerTumblingWindowMap) ToTriggerTumblingWindowMapOutputWithContext(ctx context.Context) TriggerTumblingWindowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerTumblingWindowMapOutput)
}

type TriggerTumblingWindowOutput struct{ *pulumi.OutputState }

func (TriggerTumblingWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerTumblingWindow)(nil)).Elem()
}

func (o TriggerTumblingWindowOutput) ToTriggerTumblingWindowOutput() TriggerTumblingWindowOutput {
	return o
}

func (o TriggerTumblingWindowOutput) ToTriggerTumblingWindowOutputWithContext(ctx context.Context) TriggerTumblingWindowOutput {
	return o
}

// Specifies if the Data Factory Tumbling Window Trigger is activated. Defaults to `true`.
func (o TriggerTumblingWindowOutput) Activated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) pulumi.BoolPtrOutput { return v.Activated }).(pulumi.BoolPtrOutput)
}

// A map of additional properties to associate with the Data Factory Tumbling Window Trigger.
func (o TriggerTumblingWindowOutput) AdditionalProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) pulumi.StringMapOutput { return v.AdditionalProperties }).(pulumi.StringMapOutput)
}

// List of tags that can be used for describing the Data Factory Tumbling Window Trigger.
func (o TriggerTumblingWindowOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The ID of Data Factory in which to associate the Trigger with. Changing this forces a new resource.
func (o TriggerTumblingWindowOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// Specifies how long the trigger waits before triggering new run. formatted as an `D.HH:MM:SS`.
func (o TriggerTumblingWindowOutput) Delay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) pulumi.StringPtrOutput { return v.Delay }).(pulumi.StringPtrOutput)
}

// The description for the Data Factory Tumbling Window Trigger.
func (o TriggerTumblingWindowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the end time of Tumbling Window, formatted as an RFC3339 string.
func (o TriggerTumblingWindowOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) pulumi.StringPtrOutput { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies the frequency of Tumbling Window. Possible values are `Hour`, `Minute` and `Month`. Changing this forces a new resource.
func (o TriggerTumblingWindowOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) pulumi.StringOutput { return v.Frequency }).(pulumi.StringOutput)
}

// Specifies the interval of Tumbling Window. Changing this forces a new resource.
func (o TriggerTumblingWindowOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) pulumi.IntOutput { return v.Interval }).(pulumi.IntOutput)
}

// The max number for simultaneous trigger run fired by Tumbling Window. Possible values are between `1` and `50`. Defaults to `50`.
func (o TriggerTumblingWindowOutput) MaxConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) pulumi.IntPtrOutput { return v.MaxConcurrency }).(pulumi.IntPtrOutput)
}

// Specifies the name of the Data Factory Tumbling Window Trigger. Changing this forces a new resource to be created.
func (o TriggerTumblingWindowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `pipeline` block as defined below.
func (o TriggerTumblingWindowOutput) Pipeline() TriggerTumblingWindowPipelineOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) TriggerTumblingWindowPipelineOutput { return v.Pipeline }).(TriggerTumblingWindowPipelineOutput)
}

// A `retry` block as defined below.
func (o TriggerTumblingWindowOutput) Retry() TriggerTumblingWindowRetryPtrOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) TriggerTumblingWindowRetryPtrOutput { return v.Retry }).(TriggerTumblingWindowRetryPtrOutput)
}

// Specifies the start time of Tumbling Window, formatted as an RFC3339 string. Changing this forces a new resource.
func (o TriggerTumblingWindowOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// One or more `triggerDependency` block as defined below.
func (o TriggerTumblingWindowOutput) TriggerDependencies() TriggerTumblingWindowTriggerDependencyArrayOutput {
	return o.ApplyT(func(v *TriggerTumblingWindow) TriggerTumblingWindowTriggerDependencyArrayOutput {
		return v.TriggerDependencies
	}).(TriggerTumblingWindowTriggerDependencyArrayOutput)
}

type TriggerTumblingWindowArrayOutput struct{ *pulumi.OutputState }

func (TriggerTumblingWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TriggerTumblingWindow)(nil)).Elem()
}

func (o TriggerTumblingWindowArrayOutput) ToTriggerTumblingWindowArrayOutput() TriggerTumblingWindowArrayOutput {
	return o
}

func (o TriggerTumblingWindowArrayOutput) ToTriggerTumblingWindowArrayOutputWithContext(ctx context.Context) TriggerTumblingWindowArrayOutput {
	return o
}

func (o TriggerTumblingWindowArrayOutput) Index(i pulumi.IntInput) TriggerTumblingWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TriggerTumblingWindow {
		return vs[0].([]*TriggerTumblingWindow)[vs[1].(int)]
	}).(TriggerTumblingWindowOutput)
}

type TriggerTumblingWindowMapOutput struct{ *pulumi.OutputState }

func (TriggerTumblingWindowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TriggerTumblingWindow)(nil)).Elem()
}

func (o TriggerTumblingWindowMapOutput) ToTriggerTumblingWindowMapOutput() TriggerTumblingWindowMapOutput {
	return o
}

func (o TriggerTumblingWindowMapOutput) ToTriggerTumblingWindowMapOutputWithContext(ctx context.Context) TriggerTumblingWindowMapOutput {
	return o
}

func (o TriggerTumblingWindowMapOutput) MapIndex(k pulumi.StringInput) TriggerTumblingWindowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TriggerTumblingWindow {
		return vs[0].(map[string]*TriggerTumblingWindow)[vs[1].(string)]
	}).(TriggerTumblingWindowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerTumblingWindowInput)(nil)).Elem(), &TriggerTumblingWindow{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerTumblingWindowArrayInput)(nil)).Elem(), TriggerTumblingWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerTumblingWindowMapInput)(nil)).Elem(), TriggerTumblingWindowMap{})
	pulumi.RegisterOutputType(TriggerTumblingWindowOutput{})
	pulumi.RegisterOutputType(TriggerTumblingWindowArrayOutput{})
	pulumi.RegisterOutputType(TriggerTumblingWindowMapOutput{})
}
