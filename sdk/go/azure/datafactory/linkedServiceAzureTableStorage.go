// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linked Service (connection) between an Azure Table Storage and Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/datafactory"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = datafactory.NewLinkedServiceAzureTableStorage(ctx, "exampleLinkedServiceAzureTableStorage", &datafactory.LinkedServiceAzureTableStorageArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			DataFactoryName:   exampleFactory.Name,
// 			ConnectionString: exampleAccount.ApplyT(func(exampleAccount storage.GetAccountResult) (string, error) {
// 				return exampleAccount.PrimaryConnectionString, nil
// 			}).(pulumi.StringOutput),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Data Factory Linked Service's can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:datafactory/linkedServiceAzureTableStorage:LinkedServiceAzureTableStorage example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
// ```
type LinkedServiceAzureTableStorage struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Linked Service.
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The connection string to an Azure Storage Account.
	ConnectionString pulumi.StringOutput `pulumi:"connectionString"`
	// The Data Factory name in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryName pulumi.StringOutput `pulumi:"dataFactoryName"`
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrOutput `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data
	// factory. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// The name of the resource group in which to create the Data Factory Linked Service. Changing this forces a new resource
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewLinkedServiceAzureTableStorage registers a new resource with the given unique name, arguments, and options.
func NewLinkedServiceAzureTableStorage(ctx *pulumi.Context,
	name string, args *LinkedServiceAzureTableStorageArgs, opts ...pulumi.ResourceOption) (*LinkedServiceAzureTableStorage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionString == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionString'")
	}
	if args.DataFactoryName == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource LinkedServiceAzureTableStorage
	err := ctx.RegisterResource("azure:datafactory/linkedServiceAzureTableStorage:LinkedServiceAzureTableStorage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedServiceAzureTableStorage gets an existing LinkedServiceAzureTableStorage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedServiceAzureTableStorage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedServiceAzureTableStorageState, opts ...pulumi.ResourceOption) (*LinkedServiceAzureTableStorage, error) {
	var resource LinkedServiceAzureTableStorage
	err := ctx.ReadResource("azure:datafactory/linkedServiceAzureTableStorage:LinkedServiceAzureTableStorage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedServiceAzureTableStorage resources.
type linkedServiceAzureTableStorageState struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations []string `pulumi:"annotations"`
	// The connection string to an Azure Storage Account.
	ConnectionString *string `pulumi:"connectionString"`
	// The Data Factory name in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryName *string `pulumi:"dataFactoryName"`
	// The description for the Data Factory Linked Service.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data
	// factory. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters map[string]string `pulumi:"parameters"`
	// The name of the resource group in which to create the Data Factory Linked Service. Changing this forces a new resource
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type LinkedServiceAzureTableStorageState struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayInput
	// The connection string to an Azure Storage Account.
	ConnectionString pulumi.StringPtrInput
	// The Data Factory name in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryName pulumi.StringPtrInput
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrInput
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data
	// factory. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapInput
	// The name of the resource group in which to create the Data Factory Linked Service. Changing this forces a new resource
	ResourceGroupName pulumi.StringPtrInput
}

func (LinkedServiceAzureTableStorageState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceAzureTableStorageState)(nil)).Elem()
}

type linkedServiceAzureTableStorageArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations []string `pulumi:"annotations"`
	// The connection string to an Azure Storage Account.
	ConnectionString string `pulumi:"connectionString"`
	// The Data Factory name in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryName string `pulumi:"dataFactoryName"`
	// The description for the Data Factory Linked Service.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data
	// factory. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters map[string]string `pulumi:"parameters"`
	// The name of the resource group in which to create the Data Factory Linked Service. Changing this forces a new resource
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a LinkedServiceAzureTableStorage resource.
type LinkedServiceAzureTableStorageArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayInput
	// The connection string to an Azure Storage Account.
	ConnectionString pulumi.StringInput
	// The Data Factory name in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryName pulumi.StringInput
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrInput
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data
	// factory. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapInput
	// The name of the resource group in which to create the Data Factory Linked Service. Changing this forces a new resource
	ResourceGroupName pulumi.StringInput
}

func (LinkedServiceAzureTableStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceAzureTableStorageArgs)(nil)).Elem()
}

type LinkedServiceAzureTableStorageInput interface {
	pulumi.Input

	ToLinkedServiceAzureTableStorageOutput() LinkedServiceAzureTableStorageOutput
	ToLinkedServiceAzureTableStorageOutputWithContext(ctx context.Context) LinkedServiceAzureTableStorageOutput
}

func (*LinkedServiceAzureTableStorage) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceAzureTableStorage)(nil))
}

func (i *LinkedServiceAzureTableStorage) ToLinkedServiceAzureTableStorageOutput() LinkedServiceAzureTableStorageOutput {
	return i.ToLinkedServiceAzureTableStorageOutputWithContext(context.Background())
}

func (i *LinkedServiceAzureTableStorage) ToLinkedServiceAzureTableStorageOutputWithContext(ctx context.Context) LinkedServiceAzureTableStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceAzureTableStorageOutput)
}

func (i *LinkedServiceAzureTableStorage) ToLinkedServiceAzureTableStoragePtrOutput() LinkedServiceAzureTableStoragePtrOutput {
	return i.ToLinkedServiceAzureTableStoragePtrOutputWithContext(context.Background())
}

func (i *LinkedServiceAzureTableStorage) ToLinkedServiceAzureTableStoragePtrOutputWithContext(ctx context.Context) LinkedServiceAzureTableStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceAzureTableStoragePtrOutput)
}

type LinkedServiceAzureTableStoragePtrInput interface {
	pulumi.Input

	ToLinkedServiceAzureTableStoragePtrOutput() LinkedServiceAzureTableStoragePtrOutput
	ToLinkedServiceAzureTableStoragePtrOutputWithContext(ctx context.Context) LinkedServiceAzureTableStoragePtrOutput
}

type linkedServiceAzureTableStoragePtrType LinkedServiceAzureTableStorageArgs

func (*linkedServiceAzureTableStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceAzureTableStorage)(nil))
}

func (i *linkedServiceAzureTableStoragePtrType) ToLinkedServiceAzureTableStoragePtrOutput() LinkedServiceAzureTableStoragePtrOutput {
	return i.ToLinkedServiceAzureTableStoragePtrOutputWithContext(context.Background())
}

func (i *linkedServiceAzureTableStoragePtrType) ToLinkedServiceAzureTableStoragePtrOutputWithContext(ctx context.Context) LinkedServiceAzureTableStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceAzureTableStoragePtrOutput)
}

// LinkedServiceAzureTableStorageArrayInput is an input type that accepts LinkedServiceAzureTableStorageArray and LinkedServiceAzureTableStorageArrayOutput values.
// You can construct a concrete instance of `LinkedServiceAzureTableStorageArrayInput` via:
//
//          LinkedServiceAzureTableStorageArray{ LinkedServiceAzureTableStorageArgs{...} }
type LinkedServiceAzureTableStorageArrayInput interface {
	pulumi.Input

	ToLinkedServiceAzureTableStorageArrayOutput() LinkedServiceAzureTableStorageArrayOutput
	ToLinkedServiceAzureTableStorageArrayOutputWithContext(context.Context) LinkedServiceAzureTableStorageArrayOutput
}

type LinkedServiceAzureTableStorageArray []LinkedServiceAzureTableStorageInput

func (LinkedServiceAzureTableStorageArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*LinkedServiceAzureTableStorage)(nil))
}

func (i LinkedServiceAzureTableStorageArray) ToLinkedServiceAzureTableStorageArrayOutput() LinkedServiceAzureTableStorageArrayOutput {
	return i.ToLinkedServiceAzureTableStorageArrayOutputWithContext(context.Background())
}

func (i LinkedServiceAzureTableStorageArray) ToLinkedServiceAzureTableStorageArrayOutputWithContext(ctx context.Context) LinkedServiceAzureTableStorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceAzureTableStorageArrayOutput)
}

// LinkedServiceAzureTableStorageMapInput is an input type that accepts LinkedServiceAzureTableStorageMap and LinkedServiceAzureTableStorageMapOutput values.
// You can construct a concrete instance of `LinkedServiceAzureTableStorageMapInput` via:
//
//          LinkedServiceAzureTableStorageMap{ "key": LinkedServiceAzureTableStorageArgs{...} }
type LinkedServiceAzureTableStorageMapInput interface {
	pulumi.Input

	ToLinkedServiceAzureTableStorageMapOutput() LinkedServiceAzureTableStorageMapOutput
	ToLinkedServiceAzureTableStorageMapOutputWithContext(context.Context) LinkedServiceAzureTableStorageMapOutput
}

type LinkedServiceAzureTableStorageMap map[string]LinkedServiceAzureTableStorageInput

func (LinkedServiceAzureTableStorageMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*LinkedServiceAzureTableStorage)(nil))
}

func (i LinkedServiceAzureTableStorageMap) ToLinkedServiceAzureTableStorageMapOutput() LinkedServiceAzureTableStorageMapOutput {
	return i.ToLinkedServiceAzureTableStorageMapOutputWithContext(context.Background())
}

func (i LinkedServiceAzureTableStorageMap) ToLinkedServiceAzureTableStorageMapOutputWithContext(ctx context.Context) LinkedServiceAzureTableStorageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceAzureTableStorageMapOutput)
}

type LinkedServiceAzureTableStorageOutput struct {
	*pulumi.OutputState
}

func (LinkedServiceAzureTableStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceAzureTableStorage)(nil))
}

func (o LinkedServiceAzureTableStorageOutput) ToLinkedServiceAzureTableStorageOutput() LinkedServiceAzureTableStorageOutput {
	return o
}

func (o LinkedServiceAzureTableStorageOutput) ToLinkedServiceAzureTableStorageOutputWithContext(ctx context.Context) LinkedServiceAzureTableStorageOutput {
	return o
}

func (o LinkedServiceAzureTableStorageOutput) ToLinkedServiceAzureTableStoragePtrOutput() LinkedServiceAzureTableStoragePtrOutput {
	return o.ToLinkedServiceAzureTableStoragePtrOutputWithContext(context.Background())
}

func (o LinkedServiceAzureTableStorageOutput) ToLinkedServiceAzureTableStoragePtrOutputWithContext(ctx context.Context) LinkedServiceAzureTableStoragePtrOutput {
	return o.ApplyT(func(v LinkedServiceAzureTableStorage) *LinkedServiceAzureTableStorage {
		return &v
	}).(LinkedServiceAzureTableStoragePtrOutput)
}

type LinkedServiceAzureTableStoragePtrOutput struct {
	*pulumi.OutputState
}

func (LinkedServiceAzureTableStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceAzureTableStorage)(nil))
}

func (o LinkedServiceAzureTableStoragePtrOutput) ToLinkedServiceAzureTableStoragePtrOutput() LinkedServiceAzureTableStoragePtrOutput {
	return o
}

func (o LinkedServiceAzureTableStoragePtrOutput) ToLinkedServiceAzureTableStoragePtrOutputWithContext(ctx context.Context) LinkedServiceAzureTableStoragePtrOutput {
	return o
}

type LinkedServiceAzureTableStorageArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceAzureTableStorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedServiceAzureTableStorage)(nil))
}

func (o LinkedServiceAzureTableStorageArrayOutput) ToLinkedServiceAzureTableStorageArrayOutput() LinkedServiceAzureTableStorageArrayOutput {
	return o
}

func (o LinkedServiceAzureTableStorageArrayOutput) ToLinkedServiceAzureTableStorageArrayOutputWithContext(ctx context.Context) LinkedServiceAzureTableStorageArrayOutput {
	return o
}

func (o LinkedServiceAzureTableStorageArrayOutput) Index(i pulumi.IntInput) LinkedServiceAzureTableStorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedServiceAzureTableStorage {
		return vs[0].([]LinkedServiceAzureTableStorage)[vs[1].(int)]
	}).(LinkedServiceAzureTableStorageOutput)
}

type LinkedServiceAzureTableStorageMapOutput struct{ *pulumi.OutputState }

func (LinkedServiceAzureTableStorageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LinkedServiceAzureTableStorage)(nil))
}

func (o LinkedServiceAzureTableStorageMapOutput) ToLinkedServiceAzureTableStorageMapOutput() LinkedServiceAzureTableStorageMapOutput {
	return o
}

func (o LinkedServiceAzureTableStorageMapOutput) ToLinkedServiceAzureTableStorageMapOutputWithContext(ctx context.Context) LinkedServiceAzureTableStorageMapOutput {
	return o
}

func (o LinkedServiceAzureTableStorageMapOutput) MapIndex(k pulumi.StringInput) LinkedServiceAzureTableStorageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LinkedServiceAzureTableStorage {
		return vs[0].(map[string]LinkedServiceAzureTableStorage)[vs[1].(string)]
	}).(LinkedServiceAzureTableStorageOutput)
}

func init() {
	pulumi.RegisterOutputType(LinkedServiceAzureTableStorageOutput{})
	pulumi.RegisterOutputType(LinkedServiceAzureTableStoragePtrOutput{})
	pulumi.RegisterOutputType(LinkedServiceAzureTableStorageArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceAzureTableStorageMapOutput{})
}
