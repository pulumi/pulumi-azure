// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Linked Service (connection) between an Azure Blob Storage Account and Azure Data Factory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount := storage.LookupAccountOutput(ctx, storage.GetAccountOutputArgs{
//				Name:              pulumi.String("storageaccountname"),
//				ResourceGroupName: exampleResourceGroup.Name,
//			}, nil)
//			exampleFactory, err := datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewLinkedServiceAzureBlobStorage(ctx, "exampleLinkedServiceAzureBlobStorage", &datafactory.LinkedServiceAzureBlobStorageArgs{
//				DataFactoryId: exampleFactory.ID(),
//				ConnectionString: exampleAccount.ApplyT(func(exampleAccount storage.GetAccountResult) (*string, error) {
//					return &exampleAccount.PrimaryConnectionString, nil
//				}).(pulumi.StringPtrOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With SAS URI And SAS Token
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			testFactory, err := datafactory.NewFactory(ctx, "testFactory", &datafactory.FactoryArgs{
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//			})
//			if err != nil {
//				return err
//			}
//			testKeyVault, err := keyvault.NewKeyVault(ctx, "testKeyVault", &keyvault.KeyVaultArgs{
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				TenantId:          *pulumi.String(current.TenantId),
//				SkuName:           pulumi.String("standard"),
//			})
//			if err != nil {
//				return err
//			}
//			testLinkedServiceKeyVault, err := datafactory.NewLinkedServiceKeyVault(ctx, "testLinkedServiceKeyVault", &datafactory.LinkedServiceKeyVaultArgs{
//				DataFactoryId: testFactory.ID(),
//				KeyVaultId:    testKeyVault.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewLinkedServiceAzureBlobStorage(ctx, "testLinkedServiceAzureBlobStorage", &datafactory.LinkedServiceAzureBlobStorageArgs{
//				DataFactoryId: testFactory.ID(),
//				SasUri:        pulumi.String("https://example.blob.core.windows.net"),
//				KeyVaultSasToken: &datafactory.LinkedServiceAzureBlobStorageKeyVaultSasTokenArgs{
//					LinkedServiceName: testLinkedServiceKeyVault.Name,
//					SecretName:        pulumi.String("secret"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewLinkedServiceAzureBlobStorage(ctx, "testDatafactory/linkedServiceAzureBlobStorageLinkedServiceAzureBlobStorage", &datafactory.LinkedServiceAzureBlobStorageArgs{
//				DataFactoryId:      testFactory.ID(),
//				ServiceEndpoint:    pulumi.String("https://example.blob.core.windows.net"),
//				ServicePrincipalId: pulumi.String("00000000-0000-0000-0000-000000000000"),
//				TenantId:           pulumi.String("00000000-0000-0000-0000-000000000000"),
//				ServicePrincipalLinkedKeyVaultKey: &datafactory.LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKeyArgs{
//					LinkedServiceName: testLinkedServiceKeyVault.Name,
//					SecretName:        pulumi.String("secret"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Factory Linked Service's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datafactory/linkedServiceAzureBlobStorage:LinkedServiceAzureBlobStorage example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/linkedservices/example
//
// ```
type LinkedServiceAzureBlobStorage struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Blob Storage Linked Service:
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`
	// The connection string. Conflicts with `connectionStringInsecure`, `sasUri` and `serviceEndpoint`.
	ConnectionString pulumi.StringPtrOutput `pulumi:"connectionString"`
	// The connection string sent insecurely. Conflicts with `connectionString`, `sasUri` and `serviceEndpoint`.
	//
	// > **Note:** `connectionString` uses the Azure [SecureString](https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.management.datafactory.models.securestring) to encrypt the contents within the REST payload sent to Azure whilst the `connectionStringInsecure` is sent as a regular string. Both properties are still sent using SSL/HTTPS. At this time the portal will not decrypt Secure Strings so the `connectionString` property in the portal will show as `******` whilst `connectionStringInsecure` will be viewable in the portal.
	ConnectionStringInsecure pulumi.StringPtrOutput `pulumi:"connectionStringInsecure"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringOutput `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrOutput `pulumi:"integrationRuntimeName"`
	// A `keyVaultSasToken` block as defined below. Use this argument to store SAS Token in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. A `sasUri` is required.
	KeyVaultSasToken LinkedServiceAzureBlobStorageKeyVaultSasTokenPtrOutput `pulumi:"keyVaultSasToken"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// The SAS URI. Conflicts with `connectionStringInsecure`, `connectionString` and `serviceEndpoint`.
	SasUri pulumi.StringPtrOutput `pulumi:"sasUri"`
	// The Service Endpoint. Conflicts with `connectionString`, `connectionStringInsecure` and `sasUri`.
	ServiceEndpoint pulumi.StringPtrOutput `pulumi:"serviceEndpoint"`
	// The service principal id in which to authenticate against the Azure Blob Storage account.
	ServicePrincipalId pulumi.StringPtrOutput `pulumi:"servicePrincipalId"`
	// The service principal key in which to authenticate against the AAzure Blob Storage account.
	ServicePrincipalKey pulumi.StringPtrOutput `pulumi:"servicePrincipalKey"`
	// A `servicePrincipalLinkedKeyVaultKey` block as defined below. Use this argument to store Service Principal key in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	ServicePrincipalLinkedKeyVaultKey LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKeyPtrOutput `pulumi:"servicePrincipalLinkedKeyVaultKey"`
	// Specify the kind of the storage account. Allowed values are `Storage`, `StorageV2`, `BlobStorage` and `BlockBlobStorage`.
	StorageKind pulumi.StringPtrOutput `pulumi:"storageKind"`
	// The tenant id or name in which to authenticate against the Azure Blob Storage account.
	TenantId pulumi.StringPtrOutput `pulumi:"tenantId"`
	// Whether to use the Data Factory's managed identity to authenticate against the Azure Blob Storage account. Incompatible with `servicePrincipalId` and `servicePrincipalKey`.
	UseManagedIdentity pulumi.BoolPtrOutput `pulumi:"useManagedIdentity"`
}

// NewLinkedServiceAzureBlobStorage registers a new resource with the given unique name, arguments, and options.
func NewLinkedServiceAzureBlobStorage(ctx *pulumi.Context,
	name string, args *LinkedServiceAzureBlobStorageArgs, opts ...pulumi.ResourceOption) (*LinkedServiceAzureBlobStorage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataFactoryId == nil {
		return nil, errors.New("invalid value for required argument 'DataFactoryId'")
	}
	if args.ConnectionString != nil {
		args.ConnectionString = pulumi.ToSecret(args.ConnectionString).(pulumi.StringPtrInput)
	}
	if args.SasUri != nil {
		args.SasUri = pulumi.ToSecret(args.SasUri).(pulumi.StringPtrInput)
	}
	if args.ServiceEndpoint != nil {
		args.ServiceEndpoint = pulumi.ToSecret(args.ServiceEndpoint).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"connectionString",
		"sasUri",
		"serviceEndpoint",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LinkedServiceAzureBlobStorage
	err := ctx.RegisterResource("azure:datafactory/linkedServiceAzureBlobStorage:LinkedServiceAzureBlobStorage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkedServiceAzureBlobStorage gets an existing LinkedServiceAzureBlobStorage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkedServiceAzureBlobStorage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinkedServiceAzureBlobStorageState, opts ...pulumi.ResourceOption) (*LinkedServiceAzureBlobStorage, error) {
	var resource LinkedServiceAzureBlobStorage
	err := ctx.ReadResource("azure:datafactory/linkedServiceAzureBlobStorage:LinkedServiceAzureBlobStorage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinkedServiceAzureBlobStorage resources.
type linkedServiceAzureBlobStorageState struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Blob Storage Linked Service:
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations []string `pulumi:"annotations"`
	// The connection string. Conflicts with `connectionStringInsecure`, `sasUri` and `serviceEndpoint`.
	ConnectionString *string `pulumi:"connectionString"`
	// The connection string sent insecurely. Conflicts with `connectionString`, `sasUri` and `serviceEndpoint`.
	//
	// > **Note:** `connectionString` uses the Azure [SecureString](https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.management.datafactory.models.securestring) to encrypt the contents within the REST payload sent to Azure whilst the `connectionStringInsecure` is sent as a regular string. Both properties are still sent using SSL/HTTPS. At this time the portal will not decrypt Secure Strings so the `connectionString` property in the portal will show as `******` whilst `connectionStringInsecure` will be viewable in the portal.
	ConnectionStringInsecure *string `pulumi:"connectionStringInsecure"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId *string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// A `keyVaultSasToken` block as defined below. Use this argument to store SAS Token in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. A `sasUri` is required.
	KeyVaultSasToken *LinkedServiceAzureBlobStorageKeyVaultSasToken `pulumi:"keyVaultSasToken"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters map[string]string `pulumi:"parameters"`
	// The SAS URI. Conflicts with `connectionStringInsecure`, `connectionString` and `serviceEndpoint`.
	SasUri *string `pulumi:"sasUri"`
	// The Service Endpoint. Conflicts with `connectionString`, `connectionStringInsecure` and `sasUri`.
	ServiceEndpoint *string `pulumi:"serviceEndpoint"`
	// The service principal id in which to authenticate against the Azure Blob Storage account.
	ServicePrincipalId *string `pulumi:"servicePrincipalId"`
	// The service principal key in which to authenticate against the AAzure Blob Storage account.
	ServicePrincipalKey *string `pulumi:"servicePrincipalKey"`
	// A `servicePrincipalLinkedKeyVaultKey` block as defined below. Use this argument to store Service Principal key in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	ServicePrincipalLinkedKeyVaultKey *LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKey `pulumi:"servicePrincipalLinkedKeyVaultKey"`
	// Specify the kind of the storage account. Allowed values are `Storage`, `StorageV2`, `BlobStorage` and `BlockBlobStorage`.
	StorageKind *string `pulumi:"storageKind"`
	// The tenant id or name in which to authenticate against the Azure Blob Storage account.
	TenantId *string `pulumi:"tenantId"`
	// Whether to use the Data Factory's managed identity to authenticate against the Azure Blob Storage account. Incompatible with `servicePrincipalId` and `servicePrincipalKey`.
	UseManagedIdentity *bool `pulumi:"useManagedIdentity"`
}

type LinkedServiceAzureBlobStorageState struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Blob Storage Linked Service:
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayInput
	// The connection string. Conflicts with `connectionStringInsecure`, `sasUri` and `serviceEndpoint`.
	ConnectionString pulumi.StringPtrInput
	// The connection string sent insecurely. Conflicts with `connectionString`, `sasUri` and `serviceEndpoint`.
	//
	// > **Note:** `connectionString` uses the Azure [SecureString](https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.management.datafactory.models.securestring) to encrypt the contents within the REST payload sent to Azure whilst the `connectionStringInsecure` is sent as a regular string. Both properties are still sent using SSL/HTTPS. At this time the portal will not decrypt Secure Strings so the `connectionString` property in the portal will show as `******` whilst `connectionStringInsecure` will be viewable in the portal.
	ConnectionStringInsecure pulumi.StringPtrInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringPtrInput
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrInput
	// A `keyVaultSasToken` block as defined below. Use this argument to store SAS Token in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. A `sasUri` is required.
	KeyVaultSasToken LinkedServiceAzureBlobStorageKeyVaultSasTokenPtrInput
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapInput
	// The SAS URI. Conflicts with `connectionStringInsecure`, `connectionString` and `serviceEndpoint`.
	SasUri pulumi.StringPtrInput
	// The Service Endpoint. Conflicts with `connectionString`, `connectionStringInsecure` and `sasUri`.
	ServiceEndpoint pulumi.StringPtrInput
	// The service principal id in which to authenticate against the Azure Blob Storage account.
	ServicePrincipalId pulumi.StringPtrInput
	// The service principal key in which to authenticate against the AAzure Blob Storage account.
	ServicePrincipalKey pulumi.StringPtrInput
	// A `servicePrincipalLinkedKeyVaultKey` block as defined below. Use this argument to store Service Principal key in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	ServicePrincipalLinkedKeyVaultKey LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKeyPtrInput
	// Specify the kind of the storage account. Allowed values are `Storage`, `StorageV2`, `BlobStorage` and `BlockBlobStorage`.
	StorageKind pulumi.StringPtrInput
	// The tenant id or name in which to authenticate against the Azure Blob Storage account.
	TenantId pulumi.StringPtrInput
	// Whether to use the Data Factory's managed identity to authenticate against the Azure Blob Storage account. Incompatible with `servicePrincipalId` and `servicePrincipalKey`.
	UseManagedIdentity pulumi.BoolPtrInput
}

func (LinkedServiceAzureBlobStorageState) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceAzureBlobStorageState)(nil)).Elem()
}

type linkedServiceAzureBlobStorageArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Blob Storage Linked Service:
	AdditionalProperties map[string]string `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations []string `pulumi:"annotations"`
	// The connection string. Conflicts with `connectionStringInsecure`, `sasUri` and `serviceEndpoint`.
	ConnectionString *string `pulumi:"connectionString"`
	// The connection string sent insecurely. Conflicts with `connectionString`, `sasUri` and `serviceEndpoint`.
	//
	// > **Note:** `connectionString` uses the Azure [SecureString](https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.management.datafactory.models.securestring) to encrypt the contents within the REST payload sent to Azure whilst the `connectionStringInsecure` is sent as a regular string. Both properties are still sent using SSL/HTTPS. At this time the portal will not decrypt Secure Strings so the `connectionString` property in the portal will show as `******` whilst `connectionStringInsecure` will be viewable in the portal.
	ConnectionStringInsecure *string `pulumi:"connectionStringInsecure"`
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId string `pulumi:"dataFactoryId"`
	// The description for the Data Factory Linked Service.
	Description *string `pulumi:"description"`
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName *string `pulumi:"integrationRuntimeName"`
	// A `keyVaultSasToken` block as defined below. Use this argument to store SAS Token in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. A `sasUri` is required.
	KeyVaultSasToken *LinkedServiceAzureBlobStorageKeyVaultSasToken `pulumi:"keyVaultSasToken"`
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters map[string]string `pulumi:"parameters"`
	// The SAS URI. Conflicts with `connectionStringInsecure`, `connectionString` and `serviceEndpoint`.
	SasUri *string `pulumi:"sasUri"`
	// The Service Endpoint. Conflicts with `connectionString`, `connectionStringInsecure` and `sasUri`.
	ServiceEndpoint *string `pulumi:"serviceEndpoint"`
	// The service principal id in which to authenticate against the Azure Blob Storage account.
	ServicePrincipalId *string `pulumi:"servicePrincipalId"`
	// The service principal key in which to authenticate against the AAzure Blob Storage account.
	ServicePrincipalKey *string `pulumi:"servicePrincipalKey"`
	// A `servicePrincipalLinkedKeyVaultKey` block as defined below. Use this argument to store Service Principal key in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	ServicePrincipalLinkedKeyVaultKey *LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKey `pulumi:"servicePrincipalLinkedKeyVaultKey"`
	// Specify the kind of the storage account. Allowed values are `Storage`, `StorageV2`, `BlobStorage` and `BlockBlobStorage`.
	StorageKind *string `pulumi:"storageKind"`
	// The tenant id or name in which to authenticate against the Azure Blob Storage account.
	TenantId *string `pulumi:"tenantId"`
	// Whether to use the Data Factory's managed identity to authenticate against the Azure Blob Storage account. Incompatible with `servicePrincipalId` and `servicePrincipalKey`.
	UseManagedIdentity *bool `pulumi:"useManagedIdentity"`
}

// The set of arguments for constructing a LinkedServiceAzureBlobStorage resource.
type LinkedServiceAzureBlobStorageArgs struct {
	// A map of additional properties to associate with the Data Factory Linked Service.
	//
	// The following supported arguments are specific to Azure Blob Storage Linked Service:
	AdditionalProperties pulumi.StringMapInput
	// List of tags that can be used for describing the Data Factory Linked Service.
	Annotations pulumi.StringArrayInput
	// The connection string. Conflicts with `connectionStringInsecure`, `sasUri` and `serviceEndpoint`.
	ConnectionString pulumi.StringPtrInput
	// The connection string sent insecurely. Conflicts with `connectionString`, `sasUri` and `serviceEndpoint`.
	//
	// > **Note:** `connectionString` uses the Azure [SecureString](https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.management.datafactory.models.securestring) to encrypt the contents within the REST payload sent to Azure whilst the `connectionStringInsecure` is sent as a regular string. Both properties are still sent using SSL/HTTPS. At this time the portal will not decrypt Secure Strings so the `connectionString` property in the portal will show as `******` whilst `connectionStringInsecure` will be viewable in the portal.
	ConnectionStringInsecure pulumi.StringPtrInput
	// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
	DataFactoryId pulumi.StringInput
	// The description for the Data Factory Linked Service.
	Description pulumi.StringPtrInput
	// The integration runtime reference to associate with the Data Factory Linked Service.
	IntegrationRuntimeName pulumi.StringPtrInput
	// A `keyVaultSasToken` block as defined below. Use this argument to store SAS Token in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. A `sasUri` is required.
	KeyVaultSasToken LinkedServiceAzureBlobStorageKeyVaultSasTokenPtrInput
	// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// A map of parameters to associate with the Data Factory Linked Service.
	Parameters pulumi.StringMapInput
	// The SAS URI. Conflicts with `connectionStringInsecure`, `connectionString` and `serviceEndpoint`.
	SasUri pulumi.StringPtrInput
	// The Service Endpoint. Conflicts with `connectionString`, `connectionStringInsecure` and `sasUri`.
	ServiceEndpoint pulumi.StringPtrInput
	// The service principal id in which to authenticate against the Azure Blob Storage account.
	ServicePrincipalId pulumi.StringPtrInput
	// The service principal key in which to authenticate against the AAzure Blob Storage account.
	ServicePrincipalKey pulumi.StringPtrInput
	// A `servicePrincipalLinkedKeyVaultKey` block as defined below. Use this argument to store Service Principal key in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
	ServicePrincipalLinkedKeyVaultKey LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKeyPtrInput
	// Specify the kind of the storage account. Allowed values are `Storage`, `StorageV2`, `BlobStorage` and `BlockBlobStorage`.
	StorageKind pulumi.StringPtrInput
	// The tenant id or name in which to authenticate against the Azure Blob Storage account.
	TenantId pulumi.StringPtrInput
	// Whether to use the Data Factory's managed identity to authenticate against the Azure Blob Storage account. Incompatible with `servicePrincipalId` and `servicePrincipalKey`.
	UseManagedIdentity pulumi.BoolPtrInput
}

func (LinkedServiceAzureBlobStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*linkedServiceAzureBlobStorageArgs)(nil)).Elem()
}

type LinkedServiceAzureBlobStorageInput interface {
	pulumi.Input

	ToLinkedServiceAzureBlobStorageOutput() LinkedServiceAzureBlobStorageOutput
	ToLinkedServiceAzureBlobStorageOutputWithContext(ctx context.Context) LinkedServiceAzureBlobStorageOutput
}

func (*LinkedServiceAzureBlobStorage) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceAzureBlobStorage)(nil)).Elem()
}

func (i *LinkedServiceAzureBlobStorage) ToLinkedServiceAzureBlobStorageOutput() LinkedServiceAzureBlobStorageOutput {
	return i.ToLinkedServiceAzureBlobStorageOutputWithContext(context.Background())
}

func (i *LinkedServiceAzureBlobStorage) ToLinkedServiceAzureBlobStorageOutputWithContext(ctx context.Context) LinkedServiceAzureBlobStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceAzureBlobStorageOutput)
}

// LinkedServiceAzureBlobStorageArrayInput is an input type that accepts LinkedServiceAzureBlobStorageArray and LinkedServiceAzureBlobStorageArrayOutput values.
// You can construct a concrete instance of `LinkedServiceAzureBlobStorageArrayInput` via:
//
//	LinkedServiceAzureBlobStorageArray{ LinkedServiceAzureBlobStorageArgs{...} }
type LinkedServiceAzureBlobStorageArrayInput interface {
	pulumi.Input

	ToLinkedServiceAzureBlobStorageArrayOutput() LinkedServiceAzureBlobStorageArrayOutput
	ToLinkedServiceAzureBlobStorageArrayOutputWithContext(context.Context) LinkedServiceAzureBlobStorageArrayOutput
}

type LinkedServiceAzureBlobStorageArray []LinkedServiceAzureBlobStorageInput

func (LinkedServiceAzureBlobStorageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceAzureBlobStorage)(nil)).Elem()
}

func (i LinkedServiceAzureBlobStorageArray) ToLinkedServiceAzureBlobStorageArrayOutput() LinkedServiceAzureBlobStorageArrayOutput {
	return i.ToLinkedServiceAzureBlobStorageArrayOutputWithContext(context.Background())
}

func (i LinkedServiceAzureBlobStorageArray) ToLinkedServiceAzureBlobStorageArrayOutputWithContext(ctx context.Context) LinkedServiceAzureBlobStorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceAzureBlobStorageArrayOutput)
}

// LinkedServiceAzureBlobStorageMapInput is an input type that accepts LinkedServiceAzureBlobStorageMap and LinkedServiceAzureBlobStorageMapOutput values.
// You can construct a concrete instance of `LinkedServiceAzureBlobStorageMapInput` via:
//
//	LinkedServiceAzureBlobStorageMap{ "key": LinkedServiceAzureBlobStorageArgs{...} }
type LinkedServiceAzureBlobStorageMapInput interface {
	pulumi.Input

	ToLinkedServiceAzureBlobStorageMapOutput() LinkedServiceAzureBlobStorageMapOutput
	ToLinkedServiceAzureBlobStorageMapOutputWithContext(context.Context) LinkedServiceAzureBlobStorageMapOutput
}

type LinkedServiceAzureBlobStorageMap map[string]LinkedServiceAzureBlobStorageInput

func (LinkedServiceAzureBlobStorageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceAzureBlobStorage)(nil)).Elem()
}

func (i LinkedServiceAzureBlobStorageMap) ToLinkedServiceAzureBlobStorageMapOutput() LinkedServiceAzureBlobStorageMapOutput {
	return i.ToLinkedServiceAzureBlobStorageMapOutputWithContext(context.Background())
}

func (i LinkedServiceAzureBlobStorageMap) ToLinkedServiceAzureBlobStorageMapOutputWithContext(ctx context.Context) LinkedServiceAzureBlobStorageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServiceAzureBlobStorageMapOutput)
}

type LinkedServiceAzureBlobStorageOutput struct{ *pulumi.OutputState }

func (LinkedServiceAzureBlobStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceAzureBlobStorage)(nil)).Elem()
}

func (o LinkedServiceAzureBlobStorageOutput) ToLinkedServiceAzureBlobStorageOutput() LinkedServiceAzureBlobStorageOutput {
	return o
}

func (o LinkedServiceAzureBlobStorageOutput) ToLinkedServiceAzureBlobStorageOutputWithContext(ctx context.Context) LinkedServiceAzureBlobStorageOutput {
	return o
}

// A map of additional properties to associate with the Data Factory Linked Service.
//
// The following supported arguments are specific to Azure Blob Storage Linked Service:
func (o LinkedServiceAzureBlobStorageOutput) AdditionalProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringMapOutput { return v.AdditionalProperties }).(pulumi.StringMapOutput)
}

// List of tags that can be used for describing the Data Factory Linked Service.
func (o LinkedServiceAzureBlobStorageOutput) Annotations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringArrayOutput { return v.Annotations }).(pulumi.StringArrayOutput)
}

// The connection string. Conflicts with `connectionStringInsecure`, `sasUri` and `serviceEndpoint`.
func (o LinkedServiceAzureBlobStorageOutput) ConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringPtrOutput { return v.ConnectionString }).(pulumi.StringPtrOutput)
}

// The connection string sent insecurely. Conflicts with `connectionString`, `sasUri` and `serviceEndpoint`.
//
// > **Note:** `connectionString` uses the Azure [SecureString](https://learn.microsoft.com/en-us/dotnet/api/microsoft.azure.management.datafactory.models.securestring) to encrypt the contents within the REST payload sent to Azure whilst the `connectionStringInsecure` is sent as a regular string. Both properties are still sent using SSL/HTTPS. At this time the portal will not decrypt Secure Strings so the `connectionString` property in the portal will show as `******` whilst `connectionStringInsecure` will be viewable in the portal.
func (o LinkedServiceAzureBlobStorageOutput) ConnectionStringInsecure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringPtrOutput { return v.ConnectionStringInsecure }).(pulumi.StringPtrOutput)
}

// The Data Factory ID in which to associate the Linked Service with. Changing this forces a new resource.
func (o LinkedServiceAzureBlobStorageOutput) DataFactoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringOutput { return v.DataFactoryId }).(pulumi.StringOutput)
}

// The description for the Data Factory Linked Service.
func (o LinkedServiceAzureBlobStorageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The integration runtime reference to associate with the Data Factory Linked Service.
func (o LinkedServiceAzureBlobStorageOutput) IntegrationRuntimeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringPtrOutput { return v.IntegrationRuntimeName }).(pulumi.StringPtrOutput)
}

// A `keyVaultSasToken` block as defined below. Use this argument to store SAS Token in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service. A `sasUri` is required.
func (o LinkedServiceAzureBlobStorageOutput) KeyVaultSasToken() LinkedServiceAzureBlobStorageKeyVaultSasTokenPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) LinkedServiceAzureBlobStorageKeyVaultSasTokenPtrOutput {
		return v.KeyVaultSasToken
	}).(LinkedServiceAzureBlobStorageKeyVaultSasTokenPtrOutput)
}

// Specifies the name of the Data Factory Linked Service. Changing this forces a new resource to be created. Must be unique within a data factory. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
func (o LinkedServiceAzureBlobStorageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A map of parameters to associate with the Data Factory Linked Service.
func (o LinkedServiceAzureBlobStorageOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// The SAS URI. Conflicts with `connectionStringInsecure`, `connectionString` and `serviceEndpoint`.
func (o LinkedServiceAzureBlobStorageOutput) SasUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringPtrOutput { return v.SasUri }).(pulumi.StringPtrOutput)
}

// The Service Endpoint. Conflicts with `connectionString`, `connectionStringInsecure` and `sasUri`.
func (o LinkedServiceAzureBlobStorageOutput) ServiceEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringPtrOutput { return v.ServiceEndpoint }).(pulumi.StringPtrOutput)
}

// The service principal id in which to authenticate against the Azure Blob Storage account.
func (o LinkedServiceAzureBlobStorageOutput) ServicePrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringPtrOutput { return v.ServicePrincipalId }).(pulumi.StringPtrOutput)
}

// The service principal key in which to authenticate against the AAzure Blob Storage account.
func (o LinkedServiceAzureBlobStorageOutput) ServicePrincipalKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringPtrOutput { return v.ServicePrincipalKey }).(pulumi.StringPtrOutput)
}

// A `servicePrincipalLinkedKeyVaultKey` block as defined below. Use this argument to store Service Principal key in an existing Key Vault. It needs an existing Key Vault Data Factory Linked Service.
func (o LinkedServiceAzureBlobStorageOutput) ServicePrincipalLinkedKeyVaultKey() LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKeyPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKeyPtrOutput {
		return v.ServicePrincipalLinkedKeyVaultKey
	}).(LinkedServiceAzureBlobStorageServicePrincipalLinkedKeyVaultKeyPtrOutput)
}

// Specify the kind of the storage account. Allowed values are `Storage`, `StorageV2`, `BlobStorage` and `BlockBlobStorage`.
func (o LinkedServiceAzureBlobStorageOutput) StorageKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringPtrOutput { return v.StorageKind }).(pulumi.StringPtrOutput)
}

// The tenant id or name in which to authenticate against the Azure Blob Storage account.
func (o LinkedServiceAzureBlobStorageOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.StringPtrOutput { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Whether to use the Data Factory's managed identity to authenticate against the Azure Blob Storage account. Incompatible with `servicePrincipalId` and `servicePrincipalKey`.
func (o LinkedServiceAzureBlobStorageOutput) UseManagedIdentity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinkedServiceAzureBlobStorage) pulumi.BoolPtrOutput { return v.UseManagedIdentity }).(pulumi.BoolPtrOutput)
}

type LinkedServiceAzureBlobStorageArrayOutput struct{ *pulumi.OutputState }

func (LinkedServiceAzureBlobStorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LinkedServiceAzureBlobStorage)(nil)).Elem()
}

func (o LinkedServiceAzureBlobStorageArrayOutput) ToLinkedServiceAzureBlobStorageArrayOutput() LinkedServiceAzureBlobStorageArrayOutput {
	return o
}

func (o LinkedServiceAzureBlobStorageArrayOutput) ToLinkedServiceAzureBlobStorageArrayOutputWithContext(ctx context.Context) LinkedServiceAzureBlobStorageArrayOutput {
	return o
}

func (o LinkedServiceAzureBlobStorageArrayOutput) Index(i pulumi.IntInput) LinkedServiceAzureBlobStorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LinkedServiceAzureBlobStorage {
		return vs[0].([]*LinkedServiceAzureBlobStorage)[vs[1].(int)]
	}).(LinkedServiceAzureBlobStorageOutput)
}

type LinkedServiceAzureBlobStorageMapOutput struct{ *pulumi.OutputState }

func (LinkedServiceAzureBlobStorageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LinkedServiceAzureBlobStorage)(nil)).Elem()
}

func (o LinkedServiceAzureBlobStorageMapOutput) ToLinkedServiceAzureBlobStorageMapOutput() LinkedServiceAzureBlobStorageMapOutput {
	return o
}

func (o LinkedServiceAzureBlobStorageMapOutput) ToLinkedServiceAzureBlobStorageMapOutputWithContext(ctx context.Context) LinkedServiceAzureBlobStorageMapOutput {
	return o
}

func (o LinkedServiceAzureBlobStorageMapOutput) MapIndex(k pulumi.StringInput) LinkedServiceAzureBlobStorageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LinkedServiceAzureBlobStorage {
		return vs[0].(map[string]*LinkedServiceAzureBlobStorage)[vs[1].(string)]
	}).(LinkedServiceAzureBlobStorageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceAzureBlobStorageInput)(nil)).Elem(), &LinkedServiceAzureBlobStorage{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceAzureBlobStorageArrayInput)(nil)).Elem(), LinkedServiceAzureBlobStorageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedServiceAzureBlobStorageMapInput)(nil)).Elem(), LinkedServiceAzureBlobStorageMap{})
	pulumi.RegisterOutputType(LinkedServiceAzureBlobStorageOutput{})
	pulumi.RegisterOutputType(LinkedServiceAzureBlobStorageArrayOutput{})
	pulumi.RegisterOutputType(LinkedServiceAzureBlobStorageMapOutput{})
}
