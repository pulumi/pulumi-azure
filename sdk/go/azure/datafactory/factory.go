// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Data Factory (Version 2).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/datafactory"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = datafactory.NewFactory(ctx, "exampleFactory", &datafactory.FactoryArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Data Factory can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:datafactory/factory:Factory example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example
//
// ```
type Factory struct {
	pulumi.CustomResourceState

	// Specifies the Azure Key Vault Key ID to be used as the Customer Managed Key (CMK) for double encryption. Required with user assigned identity.
	CustomerManagedKeyId pulumi.StringPtrOutput `pulumi:"customerManagedKeyId"`
	// Specifies the ID of the user assigned identity associated with the Customer Managed Key. Must be supplied if `customerManagedKeyId` is set.
	CustomerManagedKeyIdentityId pulumi.StringPtrOutput `pulumi:"customerManagedKeyIdentityId"`
	// A `githubConfiguration` block as defined below.
	GithubConfiguration FactoryGithubConfigurationPtrOutput `pulumi:"githubConfiguration"`
	// A list of `globalParameter` blocks as defined above.
	GlobalParameters FactoryGlobalParameterArrayOutput `pulumi:"globalParameters"`
	// An `identity` block as defined below.
	Identity FactoryIdentityPtrOutput `pulumi:"identity"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Is Managed Virtual Network enabled?
	ManagedVirtualNetworkEnabled pulumi.BoolPtrOutput `pulumi:"managedVirtualNetworkEnabled"`
	// Specifies the name of the Data Factory. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`
	// Is the Data Factory visible to the public network? Defaults to `true`.
	PublicNetworkEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkEnabled"`
	// Specifies the ID of the purview account resource associated with the Data Factory.
	PurviewId pulumi.StringPtrOutput `pulumi:"purviewId"`
	// The name of the resource group in which to create the Data Factory. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A `vstsConfiguration` block as defined below.
	VstsConfiguration FactoryVstsConfigurationPtrOutput `pulumi:"vstsConfiguration"`
}

// NewFactory registers a new resource with the given unique name, arguments, and options.
func NewFactory(ctx *pulumi.Context,
	name string, args *FactoryArgs, opts ...pulumi.ResourceOption) (*Factory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Factory
	err := ctx.RegisterResource("azure:datafactory/factory:Factory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFactory gets an existing Factory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFactory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FactoryState, opts ...pulumi.ResourceOption) (*Factory, error) {
	var resource Factory
	err := ctx.ReadResource("azure:datafactory/factory:Factory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Factory resources.
type factoryState struct {
	// Specifies the Azure Key Vault Key ID to be used as the Customer Managed Key (CMK) for double encryption. Required with user assigned identity.
	CustomerManagedKeyId *string `pulumi:"customerManagedKeyId"`
	// Specifies the ID of the user assigned identity associated with the Customer Managed Key. Must be supplied if `customerManagedKeyId` is set.
	CustomerManagedKeyIdentityId *string `pulumi:"customerManagedKeyIdentityId"`
	// A `githubConfiguration` block as defined below.
	GithubConfiguration *FactoryGithubConfiguration `pulumi:"githubConfiguration"`
	// A list of `globalParameter` blocks as defined above.
	GlobalParameters []FactoryGlobalParameter `pulumi:"globalParameters"`
	// An `identity` block as defined below.
	Identity *FactoryIdentity `pulumi:"identity"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Is Managed Virtual Network enabled?
	ManagedVirtualNetworkEnabled *bool `pulumi:"managedVirtualNetworkEnabled"`
	// Specifies the name of the Data Factory. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// Is the Data Factory visible to the public network? Defaults to `true`.
	PublicNetworkEnabled *bool `pulumi:"publicNetworkEnabled"`
	// Specifies the ID of the purview account resource associated with the Data Factory.
	PurviewId *string `pulumi:"purviewId"`
	// The name of the resource group in which to create the Data Factory. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// A `vstsConfiguration` block as defined below.
	VstsConfiguration *FactoryVstsConfiguration `pulumi:"vstsConfiguration"`
}

type FactoryState struct {
	// Specifies the Azure Key Vault Key ID to be used as the Customer Managed Key (CMK) for double encryption. Required with user assigned identity.
	CustomerManagedKeyId pulumi.StringPtrInput
	// Specifies the ID of the user assigned identity associated with the Customer Managed Key. Must be supplied if `customerManagedKeyId` is set.
	CustomerManagedKeyIdentityId pulumi.StringPtrInput
	// A `githubConfiguration` block as defined below.
	GithubConfiguration FactoryGithubConfigurationPtrInput
	// A list of `globalParameter` blocks as defined above.
	GlobalParameters FactoryGlobalParameterArrayInput
	// An `identity` block as defined below.
	Identity FactoryIdentityPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Is Managed Virtual Network enabled?
	ManagedVirtualNetworkEnabled pulumi.BoolPtrInput
	// Specifies the name of the Data Factory. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// Is the Data Factory visible to the public network? Defaults to `true`.
	PublicNetworkEnabled pulumi.BoolPtrInput
	// Specifies the ID of the purview account resource associated with the Data Factory.
	PurviewId pulumi.StringPtrInput
	// The name of the resource group in which to create the Data Factory. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// A `vstsConfiguration` block as defined below.
	VstsConfiguration FactoryVstsConfigurationPtrInput
}

func (FactoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*factoryState)(nil)).Elem()
}

type factoryArgs struct {
	// Specifies the Azure Key Vault Key ID to be used as the Customer Managed Key (CMK) for double encryption. Required with user assigned identity.
	CustomerManagedKeyId *string `pulumi:"customerManagedKeyId"`
	// Specifies the ID of the user assigned identity associated with the Customer Managed Key. Must be supplied if `customerManagedKeyId` is set.
	CustomerManagedKeyIdentityId *string `pulumi:"customerManagedKeyIdentityId"`
	// A `githubConfiguration` block as defined below.
	GithubConfiguration *FactoryGithubConfiguration `pulumi:"githubConfiguration"`
	// A list of `globalParameter` blocks as defined above.
	GlobalParameters []FactoryGlobalParameter `pulumi:"globalParameters"`
	// An `identity` block as defined below.
	Identity *FactoryIdentity `pulumi:"identity"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Is Managed Virtual Network enabled?
	ManagedVirtualNetworkEnabled *bool `pulumi:"managedVirtualNetworkEnabled"`
	// Specifies the name of the Data Factory. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name *string `pulumi:"name"`
	// Is the Data Factory visible to the public network? Defaults to `true`.
	PublicNetworkEnabled *bool `pulumi:"publicNetworkEnabled"`
	// Specifies the ID of the purview account resource associated with the Data Factory.
	PurviewId *string `pulumi:"purviewId"`
	// The name of the resource group in which to create the Data Factory. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// A `vstsConfiguration` block as defined below.
	VstsConfiguration *FactoryVstsConfiguration `pulumi:"vstsConfiguration"`
}

// The set of arguments for constructing a Factory resource.
type FactoryArgs struct {
	// Specifies the Azure Key Vault Key ID to be used as the Customer Managed Key (CMK) for double encryption. Required with user assigned identity.
	CustomerManagedKeyId pulumi.StringPtrInput
	// Specifies the ID of the user assigned identity associated with the Customer Managed Key. Must be supplied if `customerManagedKeyId` is set.
	CustomerManagedKeyIdentityId pulumi.StringPtrInput
	// A `githubConfiguration` block as defined below.
	GithubConfiguration FactoryGithubConfigurationPtrInput
	// A list of `globalParameter` blocks as defined above.
	GlobalParameters FactoryGlobalParameterArrayInput
	// An `identity` block as defined below.
	Identity FactoryIdentityPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Is Managed Virtual Network enabled?
	ManagedVirtualNetworkEnabled pulumi.BoolPtrInput
	// Specifies the name of the Data Factory. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringPtrInput
	// Is the Data Factory visible to the public network? Defaults to `true`.
	PublicNetworkEnabled pulumi.BoolPtrInput
	// Specifies the ID of the purview account resource associated with the Data Factory.
	PurviewId pulumi.StringPtrInput
	// The name of the resource group in which to create the Data Factory. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// A `vstsConfiguration` block as defined below.
	VstsConfiguration FactoryVstsConfigurationPtrInput
}

func (FactoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*factoryArgs)(nil)).Elem()
}

type FactoryInput interface {
	pulumi.Input

	ToFactoryOutput() FactoryOutput
	ToFactoryOutputWithContext(ctx context.Context) FactoryOutput
}

func (*Factory) ElementType() reflect.Type {
	return reflect.TypeOf((**Factory)(nil)).Elem()
}

func (i *Factory) ToFactoryOutput() FactoryOutput {
	return i.ToFactoryOutputWithContext(context.Background())
}

func (i *Factory) ToFactoryOutputWithContext(ctx context.Context) FactoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryOutput)
}

// FactoryArrayInput is an input type that accepts FactoryArray and FactoryArrayOutput values.
// You can construct a concrete instance of `FactoryArrayInput` via:
//
//	FactoryArray{ FactoryArgs{...} }
type FactoryArrayInput interface {
	pulumi.Input

	ToFactoryArrayOutput() FactoryArrayOutput
	ToFactoryArrayOutputWithContext(context.Context) FactoryArrayOutput
}

type FactoryArray []FactoryInput

func (FactoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Factory)(nil)).Elem()
}

func (i FactoryArray) ToFactoryArrayOutput() FactoryArrayOutput {
	return i.ToFactoryArrayOutputWithContext(context.Background())
}

func (i FactoryArray) ToFactoryArrayOutputWithContext(ctx context.Context) FactoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryArrayOutput)
}

// FactoryMapInput is an input type that accepts FactoryMap and FactoryMapOutput values.
// You can construct a concrete instance of `FactoryMapInput` via:
//
//	FactoryMap{ "key": FactoryArgs{...} }
type FactoryMapInput interface {
	pulumi.Input

	ToFactoryMapOutput() FactoryMapOutput
	ToFactoryMapOutputWithContext(context.Context) FactoryMapOutput
}

type FactoryMap map[string]FactoryInput

func (FactoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Factory)(nil)).Elem()
}

func (i FactoryMap) ToFactoryMapOutput() FactoryMapOutput {
	return i.ToFactoryMapOutputWithContext(context.Background())
}

func (i FactoryMap) ToFactoryMapOutputWithContext(ctx context.Context) FactoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FactoryMapOutput)
}

type FactoryOutput struct{ *pulumi.OutputState }

func (FactoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Factory)(nil)).Elem()
}

func (o FactoryOutput) ToFactoryOutput() FactoryOutput {
	return o
}

func (o FactoryOutput) ToFactoryOutputWithContext(ctx context.Context) FactoryOutput {
	return o
}

// Specifies the Azure Key Vault Key ID to be used as the Customer Managed Key (CMK) for double encryption. Required with user assigned identity.
func (o FactoryOutput) CustomerManagedKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Factory) pulumi.StringPtrOutput { return v.CustomerManagedKeyId }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the user assigned identity associated with the Customer Managed Key. Must be supplied if `customerManagedKeyId` is set.
func (o FactoryOutput) CustomerManagedKeyIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Factory) pulumi.StringPtrOutput { return v.CustomerManagedKeyIdentityId }).(pulumi.StringPtrOutput)
}

// A `githubConfiguration` block as defined below.
func (o FactoryOutput) GithubConfiguration() FactoryGithubConfigurationPtrOutput {
	return o.ApplyT(func(v *Factory) FactoryGithubConfigurationPtrOutput { return v.GithubConfiguration }).(FactoryGithubConfigurationPtrOutput)
}

// A list of `globalParameter` blocks as defined above.
func (o FactoryOutput) GlobalParameters() FactoryGlobalParameterArrayOutput {
	return o.ApplyT(func(v *Factory) FactoryGlobalParameterArrayOutput { return v.GlobalParameters }).(FactoryGlobalParameterArrayOutput)
}

// An `identity` block as defined below.
func (o FactoryOutput) Identity() FactoryIdentityPtrOutput {
	return o.ApplyT(func(v *Factory) FactoryIdentityPtrOutput { return v.Identity }).(FactoryIdentityPtrOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o FactoryOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Factory) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Is Managed Virtual Network enabled?
func (o FactoryOutput) ManagedVirtualNetworkEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Factory) pulumi.BoolPtrOutput { return v.ManagedVirtualNetworkEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the name of the Data Factory. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/azure/data-factory/naming-rules) for all restrictions.
func (o FactoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Factory) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Is the Data Factory visible to the public network? Defaults to `true`.
func (o FactoryOutput) PublicNetworkEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Factory) pulumi.BoolPtrOutput { return v.PublicNetworkEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the ID of the purview account resource associated with the Data Factory.
func (o FactoryOutput) PurviewId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Factory) pulumi.StringPtrOutput { return v.PurviewId }).(pulumi.StringPtrOutput)
}

// The name of the resource group in which to create the Data Factory. Changing this forces a new resource to be created.
func (o FactoryOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Factory) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o FactoryOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Factory) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A `vstsConfiguration` block as defined below.
func (o FactoryOutput) VstsConfiguration() FactoryVstsConfigurationPtrOutput {
	return o.ApplyT(func(v *Factory) FactoryVstsConfigurationPtrOutput { return v.VstsConfiguration }).(FactoryVstsConfigurationPtrOutput)
}

type FactoryArrayOutput struct{ *pulumi.OutputState }

func (FactoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Factory)(nil)).Elem()
}

func (o FactoryArrayOutput) ToFactoryArrayOutput() FactoryArrayOutput {
	return o
}

func (o FactoryArrayOutput) ToFactoryArrayOutputWithContext(ctx context.Context) FactoryArrayOutput {
	return o
}

func (o FactoryArrayOutput) Index(i pulumi.IntInput) FactoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Factory {
		return vs[0].([]*Factory)[vs[1].(int)]
	}).(FactoryOutput)
}

type FactoryMapOutput struct{ *pulumi.OutputState }

func (FactoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Factory)(nil)).Elem()
}

func (o FactoryMapOutput) ToFactoryMapOutput() FactoryMapOutput {
	return o
}

func (o FactoryMapOutput) ToFactoryMapOutputWithContext(ctx context.Context) FactoryMapOutput {
	return o
}

func (o FactoryMapOutput) MapIndex(k pulumi.StringInput) FactoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Factory {
		return vs[0].(map[string]*Factory)[vs[1].(string)]
	}).(FactoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FactoryInput)(nil)).Elem(), &Factory{})
	pulumi.RegisterInputType(reflect.TypeOf((*FactoryArrayInput)(nil)).Elem(), FactoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FactoryMapInput)(nil)).Elem(), FactoryMap{})
	pulumi.RegisterOutputType(FactoryOutput{})
	pulumi.RegisterOutputType(FactoryArrayOutput{})
	pulumi.RegisterOutputType(FactoryMapOutput{})
}
