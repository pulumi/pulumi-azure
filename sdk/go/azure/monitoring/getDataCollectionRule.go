// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Data Collection Rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/monitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := monitoring.LookupDataCollectionRule(ctx, &monitoring.LookupDataCollectionRuleArgs{
//				Name:              "example-rule",
//				ResourceGroupName: azurerm_resource_group.Example.Name,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("ruleId", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupDataCollectionRule(ctx *pulumi.Context, args *LookupDataCollectionRuleArgs, opts ...pulumi.InvokeOption) (*LookupDataCollectionRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDataCollectionRuleResult
	err := ctx.Invoke("azure:monitoring/getDataCollectionRule:getDataCollectionRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDataCollectionRule.
type LookupDataCollectionRuleArgs struct {
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies the name of the resource group the Data Collection Rule is located in.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getDataCollectionRule.
type LookupDataCollectionRuleResult struct {
	// The resource ID of the Data Collection Endpoint that this rule can be used with.
	DataCollectionEndpointId string `pulumi:"dataCollectionEndpointId"`
	// One or more `dataFlow` blocks as defined below.
	DataFlows []GetDataCollectionRuleDataFlow `pulumi:"dataFlows"`
	// A `dataSources` block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
	DataSources []GetDataCollectionRuleDataSource `pulumi:"dataSources"`
	// The description of the Data Collection Rule.
	Description string `pulumi:"description"`
	// Specifies a list of destination names. A `azureMonitorMetrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
	Destinations []GetDataCollectionRuleDestination `pulumi:"destinations"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// An `identity` block as defined below.
	Identities  []GetDataCollectionRuleIdentity `pulumi:"identities"`
	ImmutableId string                          `pulumi:"immutableId"`
	// The kind of the Data Collection Rule. Possible values are `Linux`, `Windows`,and `AgentDirectToStore`. A rule of kind `Linux` does not allow for `windowsEventLog` data sources. And a rule of kind `Windows` does not allow for `syslog` data sources. If kind is not specified, all kinds of data sources are allowed.
	Kind string `pulumi:"kind"`
	// The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
	Location string `pulumi:"location"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `streamDeclaration` block as defined below.
	StreamDeclarations []GetDataCollectionRuleStreamDeclaration `pulumi:"streamDeclarations"`
	// A mapping of tags which should be assigned to the Data Collection Rule.
	Tags map[string]string `pulumi:"tags"`
}

func LookupDataCollectionRuleOutput(ctx *pulumi.Context, args LookupDataCollectionRuleOutputArgs, opts ...pulumi.InvokeOption) LookupDataCollectionRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDataCollectionRuleResult, error) {
			args := v.(LookupDataCollectionRuleArgs)
			r, err := LookupDataCollectionRule(ctx, &args, opts...)
			var s LookupDataCollectionRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDataCollectionRuleResultOutput)
}

// A collection of arguments for invoking getDataCollectionRule.
type LookupDataCollectionRuleOutputArgs struct {
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the name of the resource group the Data Collection Rule is located in.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupDataCollectionRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataCollectionRuleArgs)(nil)).Elem()
}

// A collection of values returned by getDataCollectionRule.
type LookupDataCollectionRuleResultOutput struct{ *pulumi.OutputState }

func (LookupDataCollectionRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataCollectionRuleResult)(nil)).Elem()
}

func (o LookupDataCollectionRuleResultOutput) ToLookupDataCollectionRuleResultOutput() LookupDataCollectionRuleResultOutput {
	return o
}

func (o LookupDataCollectionRuleResultOutput) ToLookupDataCollectionRuleResultOutputWithContext(ctx context.Context) LookupDataCollectionRuleResultOutput {
	return o
}

// The resource ID of the Data Collection Endpoint that this rule can be used with.
func (o LookupDataCollectionRuleResultOutput) DataCollectionEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataCollectionRuleResult) string { return v.DataCollectionEndpointId }).(pulumi.StringOutput)
}

// One or more `dataFlow` blocks as defined below.
func (o LookupDataCollectionRuleResultOutput) DataFlows() GetDataCollectionRuleDataFlowArrayOutput {
	return o.ApplyT(func(v LookupDataCollectionRuleResult) []GetDataCollectionRuleDataFlow { return v.DataFlows }).(GetDataCollectionRuleDataFlowArrayOutput)
}

// A `dataSources` block as defined below. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
func (o LookupDataCollectionRuleResultOutput) DataSources() GetDataCollectionRuleDataSourceArrayOutput {
	return o.ApplyT(func(v LookupDataCollectionRuleResult) []GetDataCollectionRuleDataSource { return v.DataSources }).(GetDataCollectionRuleDataSourceArrayOutput)
}

// The description of the Data Collection Rule.
func (o LookupDataCollectionRuleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataCollectionRuleResult) string { return v.Description }).(pulumi.StringOutput)
}

// Specifies a list of destination names. A `azureMonitorMetrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
func (o LookupDataCollectionRuleResultOutput) Destinations() GetDataCollectionRuleDestinationArrayOutput {
	return o.ApplyT(func(v LookupDataCollectionRuleResult) []GetDataCollectionRuleDestination { return v.Destinations }).(GetDataCollectionRuleDestinationArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDataCollectionRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataCollectionRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o LookupDataCollectionRuleResultOutput) Identities() GetDataCollectionRuleIdentityArrayOutput {
	return o.ApplyT(func(v LookupDataCollectionRuleResult) []GetDataCollectionRuleIdentity { return v.Identities }).(GetDataCollectionRuleIdentityArrayOutput)
}

func (o LookupDataCollectionRuleResultOutput) ImmutableId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataCollectionRuleResult) string { return v.ImmutableId }).(pulumi.StringOutput)
}

// The kind of the Data Collection Rule. Possible values are `Linux`, `Windows`,and `AgentDirectToStore`. A rule of kind `Linux` does not allow for `windowsEventLog` data sources. And a rule of kind `Windows` does not allow for `syslog` data sources. If kind is not specified, all kinds of data sources are allowed.
func (o LookupDataCollectionRuleResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataCollectionRuleResult) string { return v.Kind }).(pulumi.StringOutput)
}

// The Azure Region where the Data Collection Rule should exist. Changing this forces a new Data Collection Rule to be created.
func (o LookupDataCollectionRuleResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataCollectionRuleResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
func (o LookupDataCollectionRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataCollectionRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDataCollectionRuleResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataCollectionRuleResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `streamDeclaration` block as defined below.
func (o LookupDataCollectionRuleResultOutput) StreamDeclarations() GetDataCollectionRuleStreamDeclarationArrayOutput {
	return o.ApplyT(func(v LookupDataCollectionRuleResult) []GetDataCollectionRuleStreamDeclaration {
		return v.StreamDeclarations
	}).(GetDataCollectionRuleStreamDeclarationArrayOutput)
}

// A mapping of tags which should be assigned to the Data Collection Rule.
func (o LookupDataCollectionRuleResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDataCollectionRuleResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDataCollectionRuleResultOutput{})
}
