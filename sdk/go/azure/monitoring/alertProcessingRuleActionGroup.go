// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Alert Processing Rule which apply action group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/monitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleActionGroup, err := monitoring.NewActionGroup(ctx, "exampleActionGroup", &monitoring.ActionGroupArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				ShortName:         pulumi.String("action"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = monitoring.NewAlertProcessingRuleActionGroup(ctx, "exampleAlertProcessingRuleActionGroup", &monitoring.AlertProcessingRuleActionGroupArgs{
//				ResourceGroupName: pulumi.String("example"),
//				Scopes: pulumi.StringArray{
//					exampleResourceGroup.ID(),
//				},
//				AddActionGroupIds: pulumi.StringArray{
//					exampleActionGroup.ID(),
//				},
//				Condition: &monitoring.AlertProcessingRuleActionGroupConditionArgs{
//					TargetResourceType: &monitoring.AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs{
//						Operator: pulumi.String("Equals"),
//						Values: pulumi.StringArray{
//							pulumi.String("Microsoft.Compute/VirtualMachines"),
//						},
//					},
//					Severity: &monitoring.AlertProcessingRuleActionGroupConditionSeverityArgs{
//						Operator: pulumi.String("Equals"),
//						Values: pulumi.StringArray{
//							pulumi.String("Sev0"),
//							pulumi.String("Sev1"),
//							pulumi.String("Sev2"),
//						},
//					},
//				},
//				Schedule: &monitoring.AlertProcessingRuleActionGroupScheduleArgs{
//					EffectiveFrom:  pulumi.String("2022-01-01T01:02:03"),
//					EffectiveUntil: pulumi.String("2022-02-02T01:02:03"),
//					TimeZone:       pulumi.String("Pacific Standard Time"),
//					Recurrence: &monitoring.AlertProcessingRuleActionGroupScheduleRecurrenceArgs{
//						Dailies: monitoring.AlertProcessingRuleActionGroupScheduleRecurrenceDailyArray{
//							&monitoring.AlertProcessingRuleActionGroupScheduleRecurrenceDailyArgs{
//								StartTime: pulumi.String("17:00:00"),
//								EndTime:   pulumi.String("09:00:00"),
//							},
//						},
//						Weeklies: monitoring.AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArray{
//							&monitoring.AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArgs{
//								DaysOfWeeks: pulumi.StringArray{
//									pulumi.String("Saturday"),
//									pulumi.String("Sunday"),
//								},
//							},
//						},
//					},
//				},
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Alert Processing Rules can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:monitoring/alertProcessingRuleActionGroup:AlertProcessingRuleActionGroup example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.AlertsManagement/actionRules/actionRule1
//
// ```
type AlertProcessingRuleActionGroup struct {
	pulumi.CustomResourceState

	// Specifies a list of Action Group IDs.
	AddActionGroupIds pulumi.StringArrayOutput `pulumi:"addActionGroupIds"`
	// A `condition` block as defined below.
	Condition AlertProcessingRuleActionGroupConditionPtrOutput `pulumi:"condition"`
	// Specifies a description for the Alert Processing Rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Should the Alert Processing Rule be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `schedule` block as defined below.
	Schedule AlertProcessingRuleActionGroupSchedulePtrOutput `pulumi:"schedule"`
	// A list of resource IDs which will be the target of alert processing rule.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// A mapping of tags which should be assigned to the Alert Processing Rule.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewAlertProcessingRuleActionGroup registers a new resource with the given unique name, arguments, and options.
func NewAlertProcessingRuleActionGroup(ctx *pulumi.Context,
	name string, args *AlertProcessingRuleActionGroupArgs, opts ...pulumi.ResourceOption) (*AlertProcessingRuleActionGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddActionGroupIds == nil {
		return nil, errors.New("invalid value for required argument 'AddActionGroupIds'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AlertProcessingRuleActionGroup
	err := ctx.RegisterResource("azure:monitoring/alertProcessingRuleActionGroup:AlertProcessingRuleActionGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertProcessingRuleActionGroup gets an existing AlertProcessingRuleActionGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertProcessingRuleActionGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertProcessingRuleActionGroupState, opts ...pulumi.ResourceOption) (*AlertProcessingRuleActionGroup, error) {
	var resource AlertProcessingRuleActionGroup
	err := ctx.ReadResource("azure:monitoring/alertProcessingRuleActionGroup:AlertProcessingRuleActionGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertProcessingRuleActionGroup resources.
type alertProcessingRuleActionGroupState struct {
	// Specifies a list of Action Group IDs.
	AddActionGroupIds []string `pulumi:"addActionGroupIds"`
	// A `condition` block as defined below.
	Condition *AlertProcessingRuleActionGroupCondition `pulumi:"condition"`
	// Specifies a description for the Alert Processing Rule.
	Description *string `pulumi:"description"`
	// Should the Alert Processing Rule be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `schedule` block as defined below.
	Schedule *AlertProcessingRuleActionGroupSchedule `pulumi:"schedule"`
	// A list of resource IDs which will be the target of alert processing rule.
	Scopes []string `pulumi:"scopes"`
	// A mapping of tags which should be assigned to the Alert Processing Rule.
	Tags map[string]string `pulumi:"tags"`
}

type AlertProcessingRuleActionGroupState struct {
	// Specifies a list of Action Group IDs.
	AddActionGroupIds pulumi.StringArrayInput
	// A `condition` block as defined below.
	Condition AlertProcessingRuleActionGroupConditionPtrInput
	// Specifies a description for the Alert Processing Rule.
	Description pulumi.StringPtrInput
	// Should the Alert Processing Rule be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `schedule` block as defined below.
	Schedule AlertProcessingRuleActionGroupSchedulePtrInput
	// A list of resource IDs which will be the target of alert processing rule.
	Scopes pulumi.StringArrayInput
	// A mapping of tags which should be assigned to the Alert Processing Rule.
	Tags pulumi.StringMapInput
}

func (AlertProcessingRuleActionGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertProcessingRuleActionGroupState)(nil)).Elem()
}

type alertProcessingRuleActionGroupArgs struct {
	// Specifies a list of Action Group IDs.
	AddActionGroupIds []string `pulumi:"addActionGroupIds"`
	// A `condition` block as defined below.
	Condition *AlertProcessingRuleActionGroupCondition `pulumi:"condition"`
	// Specifies a description for the Alert Processing Rule.
	Description *string `pulumi:"description"`
	// Should the Alert Processing Rule be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `schedule` block as defined below.
	Schedule *AlertProcessingRuleActionGroupSchedule `pulumi:"schedule"`
	// A list of resource IDs which will be the target of alert processing rule.
	Scopes []string `pulumi:"scopes"`
	// A mapping of tags which should be assigned to the Alert Processing Rule.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a AlertProcessingRuleActionGroup resource.
type AlertProcessingRuleActionGroupArgs struct {
	// Specifies a list of Action Group IDs.
	AddActionGroupIds pulumi.StringArrayInput
	// A `condition` block as defined below.
	Condition AlertProcessingRuleActionGroupConditionPtrInput
	// Specifies a description for the Alert Processing Rule.
	Description pulumi.StringPtrInput
	// Should the Alert Processing Rule be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
	ResourceGroupName pulumi.StringInput
	// A `schedule` block as defined below.
	Schedule AlertProcessingRuleActionGroupSchedulePtrInput
	// A list of resource IDs which will be the target of alert processing rule.
	Scopes pulumi.StringArrayInput
	// A mapping of tags which should be assigned to the Alert Processing Rule.
	Tags pulumi.StringMapInput
}

func (AlertProcessingRuleActionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertProcessingRuleActionGroupArgs)(nil)).Elem()
}

type AlertProcessingRuleActionGroupInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupOutput() AlertProcessingRuleActionGroupOutput
	ToAlertProcessingRuleActionGroupOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupOutput
}

func (*AlertProcessingRuleActionGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroup)(nil)).Elem()
}

func (i *AlertProcessingRuleActionGroup) ToAlertProcessingRuleActionGroupOutput() AlertProcessingRuleActionGroupOutput {
	return i.ToAlertProcessingRuleActionGroupOutputWithContext(context.Background())
}

func (i *AlertProcessingRuleActionGroup) ToAlertProcessingRuleActionGroupOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupOutput)
}

// AlertProcessingRuleActionGroupArrayInput is an input type that accepts AlertProcessingRuleActionGroupArray and AlertProcessingRuleActionGroupArrayOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupArrayInput` via:
//
//	AlertProcessingRuleActionGroupArray{ AlertProcessingRuleActionGroupArgs{...} }
type AlertProcessingRuleActionGroupArrayInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupArrayOutput() AlertProcessingRuleActionGroupArrayOutput
	ToAlertProcessingRuleActionGroupArrayOutputWithContext(context.Context) AlertProcessingRuleActionGroupArrayOutput
}

type AlertProcessingRuleActionGroupArray []AlertProcessingRuleActionGroupInput

func (AlertProcessingRuleActionGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertProcessingRuleActionGroup)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupArray) ToAlertProcessingRuleActionGroupArrayOutput() AlertProcessingRuleActionGroupArrayOutput {
	return i.ToAlertProcessingRuleActionGroupArrayOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupArray) ToAlertProcessingRuleActionGroupArrayOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupArrayOutput)
}

// AlertProcessingRuleActionGroupMapInput is an input type that accepts AlertProcessingRuleActionGroupMap and AlertProcessingRuleActionGroupMapOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupMapInput` via:
//
//	AlertProcessingRuleActionGroupMap{ "key": AlertProcessingRuleActionGroupArgs{...} }
type AlertProcessingRuleActionGroupMapInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupMapOutput() AlertProcessingRuleActionGroupMapOutput
	ToAlertProcessingRuleActionGroupMapOutputWithContext(context.Context) AlertProcessingRuleActionGroupMapOutput
}

type AlertProcessingRuleActionGroupMap map[string]AlertProcessingRuleActionGroupInput

func (AlertProcessingRuleActionGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertProcessingRuleActionGroup)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupMap) ToAlertProcessingRuleActionGroupMapOutput() AlertProcessingRuleActionGroupMapOutput {
	return i.ToAlertProcessingRuleActionGroupMapOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupMap) ToAlertProcessingRuleActionGroupMapOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupMapOutput)
}

type AlertProcessingRuleActionGroupOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroup)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupOutput) ToAlertProcessingRuleActionGroupOutput() AlertProcessingRuleActionGroupOutput {
	return o
}

func (o AlertProcessingRuleActionGroupOutput) ToAlertProcessingRuleActionGroupOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupOutput {
	return o
}

// Specifies a list of Action Group IDs.
func (o AlertProcessingRuleActionGroupOutput) AddActionGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroup) pulumi.StringArrayOutput { return v.AddActionGroupIds }).(pulumi.StringArrayOutput)
}

// A `condition` block as defined below.
func (o AlertProcessingRuleActionGroupOutput) Condition() AlertProcessingRuleActionGroupConditionPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroup) AlertProcessingRuleActionGroupConditionPtrOutput {
		return v.Condition
	}).(AlertProcessingRuleActionGroupConditionPtrOutput)
}

// Specifies a description for the Alert Processing Rule.
func (o AlertProcessingRuleActionGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Should the Alert Processing Rule be enabled? Defaults to `true`.
func (o AlertProcessingRuleActionGroupOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroup) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The name which should be used for this Alert Processing Rule. Changing this forces a new Alert Processing Rule to be created.
func (o AlertProcessingRuleActionGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Alert Processing Rule should exist. Changing this forces a new Alert Processing Rule to be created.
func (o AlertProcessingRuleActionGroupOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroup) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `schedule` block as defined below.
func (o AlertProcessingRuleActionGroupOutput) Schedule() AlertProcessingRuleActionGroupSchedulePtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroup) AlertProcessingRuleActionGroupSchedulePtrOutput {
		return v.Schedule
	}).(AlertProcessingRuleActionGroupSchedulePtrOutput)
}

// A list of resource IDs which will be the target of alert processing rule.
func (o AlertProcessingRuleActionGroupOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroup) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// A mapping of tags which should be assigned to the Alert Processing Rule.
func (o AlertProcessingRuleActionGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type AlertProcessingRuleActionGroupArrayOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertProcessingRuleActionGroup)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupArrayOutput) ToAlertProcessingRuleActionGroupArrayOutput() AlertProcessingRuleActionGroupArrayOutput {
	return o
}

func (o AlertProcessingRuleActionGroupArrayOutput) ToAlertProcessingRuleActionGroupArrayOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupArrayOutput {
	return o
}

func (o AlertProcessingRuleActionGroupArrayOutput) Index(i pulumi.IntInput) AlertProcessingRuleActionGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlertProcessingRuleActionGroup {
		return vs[0].([]*AlertProcessingRuleActionGroup)[vs[1].(int)]
	}).(AlertProcessingRuleActionGroupOutput)
}

type AlertProcessingRuleActionGroupMapOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertProcessingRuleActionGroup)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupMapOutput) ToAlertProcessingRuleActionGroupMapOutput() AlertProcessingRuleActionGroupMapOutput {
	return o
}

func (o AlertProcessingRuleActionGroupMapOutput) ToAlertProcessingRuleActionGroupMapOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupMapOutput {
	return o
}

func (o AlertProcessingRuleActionGroupMapOutput) MapIndex(k pulumi.StringInput) AlertProcessingRuleActionGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlertProcessingRuleActionGroup {
		return vs[0].(map[string]*AlertProcessingRuleActionGroup)[vs[1].(string)]
	}).(AlertProcessingRuleActionGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupInput)(nil)).Elem(), &AlertProcessingRuleActionGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupArrayInput)(nil)).Elem(), AlertProcessingRuleActionGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupMapInput)(nil)).Elem(), AlertProcessingRuleActionGroupMap{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupArrayOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupMapOutput{})
}
