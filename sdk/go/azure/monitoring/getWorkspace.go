// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Workspace.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/monitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := monitoring.LookupWorkspace(ctx, &monitoring.LookupWorkspaceArgs{
//				Name:              "example-workspace",
//				ResourceGroupName: azurerm_resource_group.Example.Name,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("queryEndpoint", example.QueryEndpoint)
//			return nil
//		})
//	}
//
// ```
func LookupWorkspace(ctx *pulumi.Context, args *LookupWorkspaceArgs, opts ...pulumi.InvokeOption) (*LookupWorkspaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkspaceResult
	err := ctx.Invoke("azure:monitoring/getWorkspace:getWorkspace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkspace.
type LookupWorkspaceArgs struct {
	// Specifies the name of the Workspace.
	Name string `pulumi:"name"`
	// Specifies the name of the resource group the Workspace is located in.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getWorkspace.
type LookupWorkspaceResult struct {
	// The ID of the managed default Data Collection Endpoint created with the Azure Monitor Workspace.
	DefaultDataCollectionEndpointId string `pulumi:"defaultDataCollectionEndpointId"`
	// The ID of the managed default Data Collection Rule created with the Azure Monitor Workspace.
	DefaultDataCollectionRuleId string `pulumi:"defaultDataCollectionRuleId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Azure Region where the Workspace is located.
	Location string `pulumi:"location"`
	Name     string `pulumi:"name"`
	// Whether network access from public internet to the Workspace are allowed.
	PublicNetworkAccessEnabled bool `pulumi:"publicNetworkAccessEnabled"`
	// The query endpoint for the Azure Monitor Workspace.
	QueryEndpoint     string `pulumi:"queryEndpoint"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags that are assigned to the Workspace.
	Tags map[string]string `pulumi:"tags"`
}

func LookupWorkspaceOutput(ctx *pulumi.Context, args LookupWorkspaceOutputArgs, opts ...pulumi.InvokeOption) LookupWorkspaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWorkspaceResult, error) {
			args := v.(LookupWorkspaceArgs)
			r, err := LookupWorkspace(ctx, &args, opts...)
			var s LookupWorkspaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWorkspaceResultOutput)
}

// A collection of arguments for invoking getWorkspace.
type LookupWorkspaceOutputArgs struct {
	// Specifies the name of the Workspace.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the name of the resource group the Workspace is located in.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupWorkspaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkspaceArgs)(nil)).Elem()
}

// A collection of values returned by getWorkspace.
type LookupWorkspaceResultOutput struct{ *pulumi.OutputState }

func (LookupWorkspaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkspaceResult)(nil)).Elem()
}

func (o LookupWorkspaceResultOutput) ToLookupWorkspaceResultOutput() LookupWorkspaceResultOutput {
	return o
}

func (o LookupWorkspaceResultOutput) ToLookupWorkspaceResultOutputWithContext(ctx context.Context) LookupWorkspaceResultOutput {
	return o
}

// The ID of the managed default Data Collection Endpoint created with the Azure Monitor Workspace.
func (o LookupWorkspaceResultOutput) DefaultDataCollectionEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) string { return v.DefaultDataCollectionEndpointId }).(pulumi.StringOutput)
}

// The ID of the managed default Data Collection Rule created with the Azure Monitor Workspace.
func (o LookupWorkspaceResultOutput) DefaultDataCollectionRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) string { return v.DefaultDataCollectionRuleId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupWorkspaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Azure Region where the Workspace is located.
func (o LookupWorkspaceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupWorkspaceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Whether network access from public internet to the Workspace are allowed.
func (o LookupWorkspaceResultOutput) PublicNetworkAccessEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) bool { return v.PublicNetworkAccessEnabled }).(pulumi.BoolOutput)
}

// The query endpoint for the Azure Monitor Workspace.
func (o LookupWorkspaceResultOutput) QueryEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) string { return v.QueryEndpoint }).(pulumi.StringOutput)
}

func (o LookupWorkspaceResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags that are assigned to the Workspace.
func (o LookupWorkspaceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupWorkspaceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkspaceResultOutput{})
}
