// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an AlertingAction Scheduled Query Rules Version 2 resource within Azure Monitor
//
// ## Import
//
// Monitor Scheduled Query Rule Alert can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:monitoring/scheduledQueryRulesAlertV2:ScheduledQueryRulesAlertV2 example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.Insights/scheduledQueryRules/rule1
//
// ```
type ScheduledQueryRulesAlertV2 struct {
	pulumi.CustomResourceState

	// An `action` block as defined below.
	Action ScheduledQueryRulesAlertV2ActionPtrOutput `pulumi:"action"`
	// Specifies the flag that indicates whether the alert should be automatically resolved or not. Value should be `true` or `false`. The default is `false`.
	AutoMitigationEnabled pulumi.BoolPtrOutput `pulumi:"autoMitigationEnabled"`
	// The api-version used when creating this alert rule.
	CreatedWithApiVersion pulumi.StringOutput `pulumi:"createdWithApiVersion"`
	// A `criteria` block as defined below.
	Criterias ScheduledQueryRulesAlertV2CriteriaArrayOutput `pulumi:"criterias"`
	// Specifies the description of the scheduled query rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the display name of the alert rule.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Specifies the flag which indicates whether this scheduled query rule is enabled. Value should be `true` or `false`. Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// How often the scheduled query rule is evaluated, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`.
	//
	// > **Note** `evaluationFrequency` cannot be greater than the query look back which is `windowDuration`*`numberOfEvaluationPeriods`.
	//
	// > **Note** `evaluationFrequency` cannot be greater than the `muteActionsAfterAlertDuration`.
	EvaluationFrequency pulumi.StringPtrOutput `pulumi:"evaluationFrequency"`
	// True if this alert rule is a legacy Log Analytic Rule.
	IsALegacyLogAnalyticsRule pulumi.BoolOutput `pulumi:"isALegacyLogAnalyticsRule"`
	// The flag indicates whether this Scheduled Query Rule has been configured to be stored in the customer's storage.
	IsWorkspaceAlertsStorageConfigured pulumi.BoolOutput `pulumi:"isWorkspaceAlertsStorageConfigured"`
	// Specifies the Azure Region where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Mute actions for the chosen period of time in ISO 8601 duration format after the alert is fired. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
	//
	// > **Note** `autoMitigationEnabled` and `muteActionsAfterAlertDuration` are mutually exclusive and cannot both be set.
	MuteActionsAfterAlertDuration pulumi.StringPtrOutput `pulumi:"muteActionsAfterAlertDuration"`
	// Specifies the name which should be used for this Monitor Scheduled Query Rule. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Set this if the alert evaluation period is different from the query time range. If not specified, the value is `windowDuration`*`numberOfEvaluationPeriods`. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT20M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
	//
	// > **Note** `queryTimeRangeOverride` cannot be less than the query look back which is `windowDuration`*`numberOfEvaluationPeriods`.
	QueryTimeRangeOverride pulumi.StringPtrOutput `pulumi:"queryTimeRangeOverride"`
	// Specifies the name of the Resource Group where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Specifies the list of resource IDs that this scheduled query rule is scoped to. Changing this forces a new resource to be created. Currently, the API supports exactly 1 resource ID in the scopes list.
	Scopes pulumi.StringOutput `pulumi:"scopes"`
	// Severity of the alert. Should be an integer between 0 and 4. Value of 0 is severest.
	Severity pulumi.IntOutput `pulumi:"severity"`
	// Specifies the flag which indicates whether the provided query should be validated or not. The default is false.
	SkipQueryValidation pulumi.BoolPtrOutput `pulumi:"skipQueryValidation"`
	// A mapping of tags which should be assigned to the Monitor Scheduled Query Rule.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is `Microsoft.Compute/virtualMachines`, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria.
	TargetResourceTypes pulumi.StringArrayOutput `pulumi:"targetResourceTypes"`
	// Specifies the period of time in ISO 8601 duration format on which the Scheduled Query Rule will be executed (bin size). If `evaluationFrequency` is `PT1M`, possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, and `PT6H`. Otherwise, possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`, and `P2D`.
	WindowDuration pulumi.StringOutput `pulumi:"windowDuration"`
	// Specifies the flag which indicates whether this scheduled query rule check if storage is configured. Value should be `true` or `false`. The default is `false`.
	WorkspaceAlertsStorageEnabled pulumi.BoolPtrOutput `pulumi:"workspaceAlertsStorageEnabled"`
}

// NewScheduledQueryRulesAlertV2 registers a new resource with the given unique name, arguments, and options.
func NewScheduledQueryRulesAlertV2(ctx *pulumi.Context,
	name string, args *ScheduledQueryRulesAlertV2Args, opts ...pulumi.ResourceOption) (*ScheduledQueryRulesAlertV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Criterias == nil {
		return nil, errors.New("invalid value for required argument 'Criterias'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	if args.Severity == nil {
		return nil, errors.New("invalid value for required argument 'Severity'")
	}
	if args.WindowDuration == nil {
		return nil, errors.New("invalid value for required argument 'WindowDuration'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScheduledQueryRulesAlertV2
	err := ctx.RegisterResource("azure:monitoring/scheduledQueryRulesAlertV2:ScheduledQueryRulesAlertV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduledQueryRulesAlertV2 gets an existing ScheduledQueryRulesAlertV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduledQueryRulesAlertV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduledQueryRulesAlertV2State, opts ...pulumi.ResourceOption) (*ScheduledQueryRulesAlertV2, error) {
	var resource ScheduledQueryRulesAlertV2
	err := ctx.ReadResource("azure:monitoring/scheduledQueryRulesAlertV2:ScheduledQueryRulesAlertV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduledQueryRulesAlertV2 resources.
type scheduledQueryRulesAlertV2State struct {
	// An `action` block as defined below.
	Action *ScheduledQueryRulesAlertV2Action `pulumi:"action"`
	// Specifies the flag that indicates whether the alert should be automatically resolved or not. Value should be `true` or `false`. The default is `false`.
	AutoMitigationEnabled *bool `pulumi:"autoMitigationEnabled"`
	// The api-version used when creating this alert rule.
	CreatedWithApiVersion *string `pulumi:"createdWithApiVersion"`
	// A `criteria` block as defined below.
	Criterias []ScheduledQueryRulesAlertV2Criteria `pulumi:"criterias"`
	// Specifies the description of the scheduled query rule.
	Description *string `pulumi:"description"`
	// Specifies the display name of the alert rule.
	DisplayName *string `pulumi:"displayName"`
	// Specifies the flag which indicates whether this scheduled query rule is enabled. Value should be `true` or `false`. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// How often the scheduled query rule is evaluated, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`.
	//
	// > **Note** `evaluationFrequency` cannot be greater than the query look back which is `windowDuration`*`numberOfEvaluationPeriods`.
	//
	// > **Note** `evaluationFrequency` cannot be greater than the `muteActionsAfterAlertDuration`.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// True if this alert rule is a legacy Log Analytic Rule.
	IsALegacyLogAnalyticsRule *bool `pulumi:"isALegacyLogAnalyticsRule"`
	// The flag indicates whether this Scheduled Query Rule has been configured to be stored in the customer's storage.
	IsWorkspaceAlertsStorageConfigured *bool `pulumi:"isWorkspaceAlertsStorageConfigured"`
	// Specifies the Azure Region where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Mute actions for the chosen period of time in ISO 8601 duration format after the alert is fired. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
	//
	// > **Note** `autoMitigationEnabled` and `muteActionsAfterAlertDuration` are mutually exclusive and cannot both be set.
	MuteActionsAfterAlertDuration *string `pulumi:"muteActionsAfterAlertDuration"`
	// Specifies the name which should be used for this Monitor Scheduled Query Rule. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Set this if the alert evaluation period is different from the query time range. If not specified, the value is `windowDuration`*`numberOfEvaluationPeriods`. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT20M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
	//
	// > **Note** `queryTimeRangeOverride` cannot be less than the query look back which is `windowDuration`*`numberOfEvaluationPeriods`.
	QueryTimeRangeOverride *string `pulumi:"queryTimeRangeOverride"`
	// Specifies the name of the Resource Group where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Specifies the list of resource IDs that this scheduled query rule is scoped to. Changing this forces a new resource to be created. Currently, the API supports exactly 1 resource ID in the scopes list.
	Scopes *string `pulumi:"scopes"`
	// Severity of the alert. Should be an integer between 0 and 4. Value of 0 is severest.
	Severity *int `pulumi:"severity"`
	// Specifies the flag which indicates whether the provided query should be validated or not. The default is false.
	SkipQueryValidation *bool `pulumi:"skipQueryValidation"`
	// A mapping of tags which should be assigned to the Monitor Scheduled Query Rule.
	Tags map[string]string `pulumi:"tags"`
	// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is `Microsoft.Compute/virtualMachines`, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria.
	TargetResourceTypes []string `pulumi:"targetResourceTypes"`
	// Specifies the period of time in ISO 8601 duration format on which the Scheduled Query Rule will be executed (bin size). If `evaluationFrequency` is `PT1M`, possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, and `PT6H`. Otherwise, possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`, and `P2D`.
	WindowDuration *string `pulumi:"windowDuration"`
	// Specifies the flag which indicates whether this scheduled query rule check if storage is configured. Value should be `true` or `false`. The default is `false`.
	WorkspaceAlertsStorageEnabled *bool `pulumi:"workspaceAlertsStorageEnabled"`
}

type ScheduledQueryRulesAlertV2State struct {
	// An `action` block as defined below.
	Action ScheduledQueryRulesAlertV2ActionPtrInput
	// Specifies the flag that indicates whether the alert should be automatically resolved or not. Value should be `true` or `false`. The default is `false`.
	AutoMitigationEnabled pulumi.BoolPtrInput
	// The api-version used when creating this alert rule.
	CreatedWithApiVersion pulumi.StringPtrInput
	// A `criteria` block as defined below.
	Criterias ScheduledQueryRulesAlertV2CriteriaArrayInput
	// Specifies the description of the scheduled query rule.
	Description pulumi.StringPtrInput
	// Specifies the display name of the alert rule.
	DisplayName pulumi.StringPtrInput
	// Specifies the flag which indicates whether this scheduled query rule is enabled. Value should be `true` or `false`. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// How often the scheduled query rule is evaluated, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`.
	//
	// > **Note** `evaluationFrequency` cannot be greater than the query look back which is `windowDuration`*`numberOfEvaluationPeriods`.
	//
	// > **Note** `evaluationFrequency` cannot be greater than the `muteActionsAfterAlertDuration`.
	EvaluationFrequency pulumi.StringPtrInput
	// True if this alert rule is a legacy Log Analytic Rule.
	IsALegacyLogAnalyticsRule pulumi.BoolPtrInput
	// The flag indicates whether this Scheduled Query Rule has been configured to be stored in the customer's storage.
	IsWorkspaceAlertsStorageConfigured pulumi.BoolPtrInput
	// Specifies the Azure Region where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Mute actions for the chosen period of time in ISO 8601 duration format after the alert is fired. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
	//
	// > **Note** `autoMitigationEnabled` and `muteActionsAfterAlertDuration` are mutually exclusive and cannot both be set.
	MuteActionsAfterAlertDuration pulumi.StringPtrInput
	// Specifies the name which should be used for this Monitor Scheduled Query Rule. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Set this if the alert evaluation period is different from the query time range. If not specified, the value is `windowDuration`*`numberOfEvaluationPeriods`. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT20M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
	//
	// > **Note** `queryTimeRangeOverride` cannot be less than the query look back which is `windowDuration`*`numberOfEvaluationPeriods`.
	QueryTimeRangeOverride pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Specifies the list of resource IDs that this scheduled query rule is scoped to. Changing this forces a new resource to be created. Currently, the API supports exactly 1 resource ID in the scopes list.
	Scopes pulumi.StringPtrInput
	// Severity of the alert. Should be an integer between 0 and 4. Value of 0 is severest.
	Severity pulumi.IntPtrInput
	// Specifies the flag which indicates whether the provided query should be validated or not. The default is false.
	SkipQueryValidation pulumi.BoolPtrInput
	// A mapping of tags which should be assigned to the Monitor Scheduled Query Rule.
	Tags pulumi.StringMapInput
	// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is `Microsoft.Compute/virtualMachines`, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria.
	TargetResourceTypes pulumi.StringArrayInput
	// Specifies the period of time in ISO 8601 duration format on which the Scheduled Query Rule will be executed (bin size). If `evaluationFrequency` is `PT1M`, possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, and `PT6H`. Otherwise, possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`, and `P2D`.
	WindowDuration pulumi.StringPtrInput
	// Specifies the flag which indicates whether this scheduled query rule check if storage is configured. Value should be `true` or `false`. The default is `false`.
	WorkspaceAlertsStorageEnabled pulumi.BoolPtrInput
}

func (ScheduledQueryRulesAlertV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledQueryRulesAlertV2State)(nil)).Elem()
}

type scheduledQueryRulesAlertV2Args struct {
	// An `action` block as defined below.
	Action *ScheduledQueryRulesAlertV2Action `pulumi:"action"`
	// Specifies the flag that indicates whether the alert should be automatically resolved or not. Value should be `true` or `false`. The default is `false`.
	AutoMitigationEnabled *bool `pulumi:"autoMitigationEnabled"`
	// A `criteria` block as defined below.
	Criterias []ScheduledQueryRulesAlertV2Criteria `pulumi:"criterias"`
	// Specifies the description of the scheduled query rule.
	Description *string `pulumi:"description"`
	// Specifies the display name of the alert rule.
	DisplayName *string `pulumi:"displayName"`
	// Specifies the flag which indicates whether this scheduled query rule is enabled. Value should be `true` or `false`. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// How often the scheduled query rule is evaluated, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`.
	//
	// > **Note** `evaluationFrequency` cannot be greater than the query look back which is `windowDuration`*`numberOfEvaluationPeriods`.
	//
	// > **Note** `evaluationFrequency` cannot be greater than the `muteActionsAfterAlertDuration`.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Specifies the Azure Region where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Mute actions for the chosen period of time in ISO 8601 duration format after the alert is fired. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
	//
	// > **Note** `autoMitigationEnabled` and `muteActionsAfterAlertDuration` are mutually exclusive and cannot both be set.
	MuteActionsAfterAlertDuration *string `pulumi:"muteActionsAfterAlertDuration"`
	// Specifies the name which should be used for this Monitor Scheduled Query Rule. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Set this if the alert evaluation period is different from the query time range. If not specified, the value is `windowDuration`*`numberOfEvaluationPeriods`. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT20M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
	//
	// > **Note** `queryTimeRangeOverride` cannot be less than the query look back which is `windowDuration`*`numberOfEvaluationPeriods`.
	QueryTimeRangeOverride *string `pulumi:"queryTimeRangeOverride"`
	// Specifies the name of the Resource Group where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the list of resource IDs that this scheduled query rule is scoped to. Changing this forces a new resource to be created. Currently, the API supports exactly 1 resource ID in the scopes list.
	Scopes string `pulumi:"scopes"`
	// Severity of the alert. Should be an integer between 0 and 4. Value of 0 is severest.
	Severity int `pulumi:"severity"`
	// Specifies the flag which indicates whether the provided query should be validated or not. The default is false.
	SkipQueryValidation *bool `pulumi:"skipQueryValidation"`
	// A mapping of tags which should be assigned to the Monitor Scheduled Query Rule.
	Tags map[string]string `pulumi:"tags"`
	// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is `Microsoft.Compute/virtualMachines`, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria.
	TargetResourceTypes []string `pulumi:"targetResourceTypes"`
	// Specifies the period of time in ISO 8601 duration format on which the Scheduled Query Rule will be executed (bin size). If `evaluationFrequency` is `PT1M`, possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, and `PT6H`. Otherwise, possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`, and `P2D`.
	WindowDuration string `pulumi:"windowDuration"`
	// Specifies the flag which indicates whether this scheduled query rule check if storage is configured. Value should be `true` or `false`. The default is `false`.
	WorkspaceAlertsStorageEnabled *bool `pulumi:"workspaceAlertsStorageEnabled"`
}

// The set of arguments for constructing a ScheduledQueryRulesAlertV2 resource.
type ScheduledQueryRulesAlertV2Args struct {
	// An `action` block as defined below.
	Action ScheduledQueryRulesAlertV2ActionPtrInput
	// Specifies the flag that indicates whether the alert should be automatically resolved or not. Value should be `true` or `false`. The default is `false`.
	AutoMitigationEnabled pulumi.BoolPtrInput
	// A `criteria` block as defined below.
	Criterias ScheduledQueryRulesAlertV2CriteriaArrayInput
	// Specifies the description of the scheduled query rule.
	Description pulumi.StringPtrInput
	// Specifies the display name of the alert rule.
	DisplayName pulumi.StringPtrInput
	// Specifies the flag which indicates whether this scheduled query rule is enabled. Value should be `true` or `false`. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// How often the scheduled query rule is evaluated, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`.
	//
	// > **Note** `evaluationFrequency` cannot be greater than the query look back which is `windowDuration`*`numberOfEvaluationPeriods`.
	//
	// > **Note** `evaluationFrequency` cannot be greater than the `muteActionsAfterAlertDuration`.
	EvaluationFrequency pulumi.StringPtrInput
	// Specifies the Azure Region where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Mute actions for the chosen period of time in ISO 8601 duration format after the alert is fired. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
	//
	// > **Note** `autoMitigationEnabled` and `muteActionsAfterAlertDuration` are mutually exclusive and cannot both be set.
	MuteActionsAfterAlertDuration pulumi.StringPtrInput
	// Specifies the name which should be used for this Monitor Scheduled Query Rule. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Set this if the alert evaluation period is different from the query time range. If not specified, the value is `windowDuration`*`numberOfEvaluationPeriods`. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT20M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
	//
	// > **Note** `queryTimeRangeOverride` cannot be less than the query look back which is `windowDuration`*`numberOfEvaluationPeriods`.
	QueryTimeRangeOverride pulumi.StringPtrInput
	// Specifies the name of the Resource Group where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Specifies the list of resource IDs that this scheduled query rule is scoped to. Changing this forces a new resource to be created. Currently, the API supports exactly 1 resource ID in the scopes list.
	Scopes pulumi.StringInput
	// Severity of the alert. Should be an integer between 0 and 4. Value of 0 is severest.
	Severity pulumi.IntInput
	// Specifies the flag which indicates whether the provided query should be validated or not. The default is false.
	SkipQueryValidation pulumi.BoolPtrInput
	// A mapping of tags which should be assigned to the Monitor Scheduled Query Rule.
	Tags pulumi.StringMapInput
	// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is `Microsoft.Compute/virtualMachines`, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria.
	TargetResourceTypes pulumi.StringArrayInput
	// Specifies the period of time in ISO 8601 duration format on which the Scheduled Query Rule will be executed (bin size). If `evaluationFrequency` is `PT1M`, possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, and `PT6H`. Otherwise, possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`, and `P2D`.
	WindowDuration pulumi.StringInput
	// Specifies the flag which indicates whether this scheduled query rule check if storage is configured. Value should be `true` or `false`. The default is `false`.
	WorkspaceAlertsStorageEnabled pulumi.BoolPtrInput
}

func (ScheduledQueryRulesAlertV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledQueryRulesAlertV2Args)(nil)).Elem()
}

type ScheduledQueryRulesAlertV2Input interface {
	pulumi.Input

	ToScheduledQueryRulesAlertV2Output() ScheduledQueryRulesAlertV2Output
	ToScheduledQueryRulesAlertV2OutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2Output
}

func (*ScheduledQueryRulesAlertV2) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesAlertV2)(nil)).Elem()
}

func (i *ScheduledQueryRulesAlertV2) ToScheduledQueryRulesAlertV2Output() ScheduledQueryRulesAlertV2Output {
	return i.ToScheduledQueryRulesAlertV2OutputWithContext(context.Background())
}

func (i *ScheduledQueryRulesAlertV2) ToScheduledQueryRulesAlertV2OutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertV2Output)
}

func (i *ScheduledQueryRulesAlertV2) ToOutput(ctx context.Context) pulumix.Output[*ScheduledQueryRulesAlertV2] {
	return pulumix.Output[*ScheduledQueryRulesAlertV2]{
		OutputState: i.ToScheduledQueryRulesAlertV2OutputWithContext(ctx).OutputState,
	}
}

// ScheduledQueryRulesAlertV2ArrayInput is an input type that accepts ScheduledQueryRulesAlertV2Array and ScheduledQueryRulesAlertV2ArrayOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertV2ArrayInput` via:
//
//	ScheduledQueryRulesAlertV2Array{ ScheduledQueryRulesAlertV2Args{...} }
type ScheduledQueryRulesAlertV2ArrayInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertV2ArrayOutput() ScheduledQueryRulesAlertV2ArrayOutput
	ToScheduledQueryRulesAlertV2ArrayOutputWithContext(context.Context) ScheduledQueryRulesAlertV2ArrayOutput
}

type ScheduledQueryRulesAlertV2Array []ScheduledQueryRulesAlertV2Input

func (ScheduledQueryRulesAlertV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduledQueryRulesAlertV2)(nil)).Elem()
}

func (i ScheduledQueryRulesAlertV2Array) ToScheduledQueryRulesAlertV2ArrayOutput() ScheduledQueryRulesAlertV2ArrayOutput {
	return i.ToScheduledQueryRulesAlertV2ArrayOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertV2Array) ToScheduledQueryRulesAlertV2ArrayOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertV2ArrayOutput)
}

func (i ScheduledQueryRulesAlertV2Array) ToOutput(ctx context.Context) pulumix.Output[[]*ScheduledQueryRulesAlertV2] {
	return pulumix.Output[[]*ScheduledQueryRulesAlertV2]{
		OutputState: i.ToScheduledQueryRulesAlertV2ArrayOutputWithContext(ctx).OutputState,
	}
}

// ScheduledQueryRulesAlertV2MapInput is an input type that accepts ScheduledQueryRulesAlertV2Map and ScheduledQueryRulesAlertV2MapOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertV2MapInput` via:
//
//	ScheduledQueryRulesAlertV2Map{ "key": ScheduledQueryRulesAlertV2Args{...} }
type ScheduledQueryRulesAlertV2MapInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertV2MapOutput() ScheduledQueryRulesAlertV2MapOutput
	ToScheduledQueryRulesAlertV2MapOutputWithContext(context.Context) ScheduledQueryRulesAlertV2MapOutput
}

type ScheduledQueryRulesAlertV2Map map[string]ScheduledQueryRulesAlertV2Input

func (ScheduledQueryRulesAlertV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduledQueryRulesAlertV2)(nil)).Elem()
}

func (i ScheduledQueryRulesAlertV2Map) ToScheduledQueryRulesAlertV2MapOutput() ScheduledQueryRulesAlertV2MapOutput {
	return i.ToScheduledQueryRulesAlertV2MapOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertV2Map) ToScheduledQueryRulesAlertV2MapOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertV2MapOutput)
}

func (i ScheduledQueryRulesAlertV2Map) ToOutput(ctx context.Context) pulumix.Output[map[string]*ScheduledQueryRulesAlertV2] {
	return pulumix.Output[map[string]*ScheduledQueryRulesAlertV2]{
		OutputState: i.ToScheduledQueryRulesAlertV2MapOutputWithContext(ctx).OutputState,
	}
}

type ScheduledQueryRulesAlertV2Output struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesAlertV2)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertV2Output) ToScheduledQueryRulesAlertV2Output() ScheduledQueryRulesAlertV2Output {
	return o
}

func (o ScheduledQueryRulesAlertV2Output) ToScheduledQueryRulesAlertV2OutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2Output {
	return o
}

func (o ScheduledQueryRulesAlertV2Output) ToOutput(ctx context.Context) pulumix.Output[*ScheduledQueryRulesAlertV2] {
	return pulumix.Output[*ScheduledQueryRulesAlertV2]{
		OutputState: o.OutputState,
	}
}

// An `action` block as defined below.
func (o ScheduledQueryRulesAlertV2Output) Action() ScheduledQueryRulesAlertV2ActionPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) ScheduledQueryRulesAlertV2ActionPtrOutput { return v.Action }).(ScheduledQueryRulesAlertV2ActionPtrOutput)
}

// Specifies the flag that indicates whether the alert should be automatically resolved or not. Value should be `true` or `false`. The default is `false`.
func (o ScheduledQueryRulesAlertV2Output) AutoMitigationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.BoolPtrOutput { return v.AutoMitigationEnabled }).(pulumi.BoolPtrOutput)
}

// The api-version used when creating this alert rule.
func (o ScheduledQueryRulesAlertV2Output) CreatedWithApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.StringOutput { return v.CreatedWithApiVersion }).(pulumi.StringOutput)
}

// A `criteria` block as defined below.
func (o ScheduledQueryRulesAlertV2Output) Criterias() ScheduledQueryRulesAlertV2CriteriaArrayOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) ScheduledQueryRulesAlertV2CriteriaArrayOutput { return v.Criterias }).(ScheduledQueryRulesAlertV2CriteriaArrayOutput)
}

// Specifies the description of the scheduled query rule.
func (o ScheduledQueryRulesAlertV2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the display name of the alert rule.
func (o ScheduledQueryRulesAlertV2Output) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Specifies the flag which indicates whether this scheduled query rule is enabled. Value should be `true` or `false`. Defaults to `true`.
func (o ScheduledQueryRulesAlertV2Output) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// How often the scheduled query rule is evaluated, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`.
//
// > **Note** `evaluationFrequency` cannot be greater than the query look back which is `windowDuration`*`numberOfEvaluationPeriods`.
//
// > **Note** `evaluationFrequency` cannot be greater than the `muteActionsAfterAlertDuration`.
func (o ScheduledQueryRulesAlertV2Output) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.StringPtrOutput { return v.EvaluationFrequency }).(pulumi.StringPtrOutput)
}

// True if this alert rule is a legacy Log Analytic Rule.
func (o ScheduledQueryRulesAlertV2Output) IsALegacyLogAnalyticsRule() pulumi.BoolOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.BoolOutput { return v.IsALegacyLogAnalyticsRule }).(pulumi.BoolOutput)
}

// The flag indicates whether this Scheduled Query Rule has been configured to be stored in the customer's storage.
func (o ScheduledQueryRulesAlertV2Output) IsWorkspaceAlertsStorageConfigured() pulumi.BoolOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.BoolOutput { return v.IsWorkspaceAlertsStorageConfigured }).(pulumi.BoolOutput)
}

// Specifies the Azure Region where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
func (o ScheduledQueryRulesAlertV2Output) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Mute actions for the chosen period of time in ISO 8601 duration format after the alert is fired. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
//
// > **Note** `autoMitigationEnabled` and `muteActionsAfterAlertDuration` are mutually exclusive and cannot both be set.
func (o ScheduledQueryRulesAlertV2Output) MuteActionsAfterAlertDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.StringPtrOutput { return v.MuteActionsAfterAlertDuration }).(pulumi.StringPtrOutput)
}

// Specifies the name which should be used for this Monitor Scheduled Query Rule. Changing this forces a new resource to be created.
func (o ScheduledQueryRulesAlertV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Set this if the alert evaluation period is different from the query time range. If not specified, the value is `windowDuration`*`numberOfEvaluationPeriods`. Possible values are `PT5M`, `PT10M`, `PT15M`, `PT20M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D` and `P2D`.
//
// > **Note** `queryTimeRangeOverride` cannot be less than the query look back which is `windowDuration`*`numberOfEvaluationPeriods`.
func (o ScheduledQueryRulesAlertV2Output) QueryTimeRangeOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.StringPtrOutput { return v.QueryTimeRangeOverride }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Resource Group where the Monitor Scheduled Query Rule should exist. Changing this forces a new resource to be created.
func (o ScheduledQueryRulesAlertV2Output) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Specifies the list of resource IDs that this scheduled query rule is scoped to. Changing this forces a new resource to be created. Currently, the API supports exactly 1 resource ID in the scopes list.
func (o ScheduledQueryRulesAlertV2Output) Scopes() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.StringOutput { return v.Scopes }).(pulumi.StringOutput)
}

// Severity of the alert. Should be an integer between 0 and 4. Value of 0 is severest.
func (o ScheduledQueryRulesAlertV2Output) Severity() pulumi.IntOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.IntOutput { return v.Severity }).(pulumi.IntOutput)
}

// Specifies the flag which indicates whether the provided query should be validated or not. The default is false.
func (o ScheduledQueryRulesAlertV2Output) SkipQueryValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.BoolPtrOutput { return v.SkipQueryValidation }).(pulumi.BoolPtrOutput)
}

// A mapping of tags which should be assigned to the Monitor Scheduled Query Rule.
func (o ScheduledQueryRulesAlertV2Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is `Microsoft.Compute/virtualMachines`, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria.
func (o ScheduledQueryRulesAlertV2Output) TargetResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.StringArrayOutput { return v.TargetResourceTypes }).(pulumi.StringArrayOutput)
}

// Specifies the period of time in ISO 8601 duration format on which the Scheduled Query Rule will be executed (bin size). If `evaluationFrequency` is `PT1M`, possible values are `PT1M`, `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, and `PT6H`. Otherwise, possible values are `PT5M`, `PT10M`, `PT15M`, `PT30M`, `PT45M`, `PT1H`, `PT2H`, `PT3H`, `PT4H`, `PT5H`, `PT6H`, `P1D`, and `P2D`.
func (o ScheduledQueryRulesAlertV2Output) WindowDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.StringOutput { return v.WindowDuration }).(pulumi.StringOutput)
}

// Specifies the flag which indicates whether this scheduled query rule check if storage is configured. Value should be `true` or `false`. The default is `false`.
func (o ScheduledQueryRulesAlertV2Output) WorkspaceAlertsStorageEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2) pulumi.BoolPtrOutput { return v.WorkspaceAlertsStorageEnabled }).(pulumi.BoolPtrOutput)
}

type ScheduledQueryRulesAlertV2ArrayOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduledQueryRulesAlertV2)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertV2ArrayOutput) ToScheduledQueryRulesAlertV2ArrayOutput() ScheduledQueryRulesAlertV2ArrayOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2ArrayOutput) ToScheduledQueryRulesAlertV2ArrayOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2ArrayOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2ArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ScheduledQueryRulesAlertV2] {
	return pulumix.Output[[]*ScheduledQueryRulesAlertV2]{
		OutputState: o.OutputState,
	}
}

func (o ScheduledQueryRulesAlertV2ArrayOutput) Index(i pulumi.IntInput) ScheduledQueryRulesAlertV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScheduledQueryRulesAlertV2 {
		return vs[0].([]*ScheduledQueryRulesAlertV2)[vs[1].(int)]
	}).(ScheduledQueryRulesAlertV2Output)
}

type ScheduledQueryRulesAlertV2MapOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduledQueryRulesAlertV2)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertV2MapOutput) ToScheduledQueryRulesAlertV2MapOutput() ScheduledQueryRulesAlertV2MapOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2MapOutput) ToScheduledQueryRulesAlertV2MapOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2MapOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2MapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ScheduledQueryRulesAlertV2] {
	return pulumix.Output[map[string]*ScheduledQueryRulesAlertV2]{
		OutputState: o.OutputState,
	}
}

func (o ScheduledQueryRulesAlertV2MapOutput) MapIndex(k pulumi.StringInput) ScheduledQueryRulesAlertV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScheduledQueryRulesAlertV2 {
		return vs[0].(map[string]*ScheduledQueryRulesAlertV2)[vs[1].(string)]
	}).(ScheduledQueryRulesAlertV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertV2Input)(nil)).Elem(), &ScheduledQueryRulesAlertV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertV2ArrayInput)(nil)).Elem(), ScheduledQueryRulesAlertV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertV2MapInput)(nil)).Elem(), ScheduledQueryRulesAlertV2Map{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertV2Output{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertV2ArrayOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertV2MapOutput{})
}
