// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a logz Sub Account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/monitoring"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogzMonitor, err := monitoring.NewLogzMonitor(ctx, "exampleLogzMonitor", &monitoring.LogzMonitorArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Plan: &monitoring.LogzMonitorPlanArgs{
//					BillingCycle:  pulumi.String("MONTHLY"),
//					EffectiveDate: pulumi.String("2022-06-06T00:00:00Z"),
//					UsageType:     pulumi.String("COMMITTED"),
//				},
//				User: &monitoring.LogzMonitorUserArgs{
//					Email:       pulumi.String("user@example.com"),
//					FirstName:   pulumi.String("Example"),
//					LastName:    pulumi.String("User"),
//					PhoneNumber: pulumi.String("+12313803556"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = monitoring.NewLogzSubAccount(ctx, "exampleLogzSubAccount", &monitoring.LogzSubAccountArgs{
//				LogzMonitorId: exampleLogzMonitor.ID(),
//				User: &monitoring.LogzSubAccountUserArgs{
//					Email: exampleLogzMonitor.User.ApplyT(func(user monitoring.LogzMonitorUser) (*string, error) {
//						return &user.Email, nil
//					}).(pulumi.StringPtrOutput),
//					FirstName: exampleLogzMonitor.User.ApplyT(func(user monitoring.LogzMonitorUser) (*string, error) {
//						return &user.FirstName, nil
//					}).(pulumi.StringPtrOutput),
//					LastName: exampleLogzMonitor.User.ApplyT(func(user monitoring.LogzMonitorUser) (*string, error) {
//						return &user.LastName, nil
//					}).(pulumi.StringPtrOutput),
//					PhoneNumber: exampleLogzMonitor.User.ApplyT(func(user monitoring.LogzMonitorUser) (*string, error) {
//						return &user.PhoneNumber, nil
//					}).(pulumi.StringPtrOutput),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// logz SubAccounts can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:monitoring/logzSubAccount:LogzSubAccount example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logz/monitors/monitor1/accounts/subAccount1
//
// ```
type LogzSubAccount struct {
	pulumi.CustomResourceState

	// Whether the resource monitoring is enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The ID of the Logz Monitor. Changing this forces a new logz Sub Account to be created.
	LogzMonitorId pulumi.StringOutput `pulumi:"logzMonitorId"`
	// The name which should be used for this logz Sub Account. Possible values must be between 1 and 32 characters in length and may contain only letters, numbers, hyphens and underscores. Changing this forces a new logz Sub Account to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A mapping of tags which should be assigned to the logz Sub Account.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A `user` block as defined below. Changing this forces a new resource to be created.
	User LogzSubAccountUserOutput `pulumi:"user"`
}

// NewLogzSubAccount registers a new resource with the given unique name, arguments, and options.
func NewLogzSubAccount(ctx *pulumi.Context,
	name string, args *LogzSubAccountArgs, opts ...pulumi.ResourceOption) (*LogzSubAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogzMonitorId == nil {
		return nil, errors.New("invalid value for required argument 'LogzMonitorId'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogzSubAccount
	err := ctx.RegisterResource("azure:monitoring/logzSubAccount:LogzSubAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogzSubAccount gets an existing LogzSubAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogzSubAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogzSubAccountState, opts ...pulumi.ResourceOption) (*LogzSubAccount, error) {
	var resource LogzSubAccount
	err := ctx.ReadResource("azure:monitoring/logzSubAccount:LogzSubAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogzSubAccount resources.
type logzSubAccountState struct {
	// Whether the resource monitoring is enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The ID of the Logz Monitor. Changing this forces a new logz Sub Account to be created.
	LogzMonitorId *string `pulumi:"logzMonitorId"`
	// The name which should be used for this logz Sub Account. Possible values must be between 1 and 32 characters in length and may contain only letters, numbers, hyphens and underscores. Changing this forces a new logz Sub Account to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the logz Sub Account.
	Tags map[string]string `pulumi:"tags"`
	// A `user` block as defined below. Changing this forces a new resource to be created.
	User *LogzSubAccountUser `pulumi:"user"`
}

type LogzSubAccountState struct {
	// Whether the resource monitoring is enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The ID of the Logz Monitor. Changing this forces a new logz Sub Account to be created.
	LogzMonitorId pulumi.StringPtrInput
	// The name which should be used for this logz Sub Account. Possible values must be between 1 and 32 characters in length and may contain only letters, numbers, hyphens and underscores. Changing this forces a new logz Sub Account to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the logz Sub Account.
	Tags pulumi.StringMapInput
	// A `user` block as defined below. Changing this forces a new resource to be created.
	User LogzSubAccountUserPtrInput
}

func (LogzSubAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*logzSubAccountState)(nil)).Elem()
}

type logzSubAccountArgs struct {
	// Whether the resource monitoring is enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The ID of the Logz Monitor. Changing this forces a new logz Sub Account to be created.
	LogzMonitorId string `pulumi:"logzMonitorId"`
	// The name which should be used for this logz Sub Account. Possible values must be between 1 and 32 characters in length and may contain only letters, numbers, hyphens and underscores. Changing this forces a new logz Sub Account to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the logz Sub Account.
	Tags map[string]string `pulumi:"tags"`
	// A `user` block as defined below. Changing this forces a new resource to be created.
	User LogzSubAccountUser `pulumi:"user"`
}

// The set of arguments for constructing a LogzSubAccount resource.
type LogzSubAccountArgs struct {
	// Whether the resource monitoring is enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The ID of the Logz Monitor. Changing this forces a new logz Sub Account to be created.
	LogzMonitorId pulumi.StringInput
	// The name which should be used for this logz Sub Account. Possible values must be between 1 and 32 characters in length and may contain only letters, numbers, hyphens and underscores. Changing this forces a new logz Sub Account to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the logz Sub Account.
	Tags pulumi.StringMapInput
	// A `user` block as defined below. Changing this forces a new resource to be created.
	User LogzSubAccountUserInput
}

func (LogzSubAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logzSubAccountArgs)(nil)).Elem()
}

type LogzSubAccountInput interface {
	pulumi.Input

	ToLogzSubAccountOutput() LogzSubAccountOutput
	ToLogzSubAccountOutputWithContext(ctx context.Context) LogzSubAccountOutput
}

func (*LogzSubAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**LogzSubAccount)(nil)).Elem()
}

func (i *LogzSubAccount) ToLogzSubAccountOutput() LogzSubAccountOutput {
	return i.ToLogzSubAccountOutputWithContext(context.Background())
}

func (i *LogzSubAccount) ToLogzSubAccountOutputWithContext(ctx context.Context) LogzSubAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzSubAccountOutput)
}

// LogzSubAccountArrayInput is an input type that accepts LogzSubAccountArray and LogzSubAccountArrayOutput values.
// You can construct a concrete instance of `LogzSubAccountArrayInput` via:
//
//	LogzSubAccountArray{ LogzSubAccountArgs{...} }
type LogzSubAccountArrayInput interface {
	pulumi.Input

	ToLogzSubAccountArrayOutput() LogzSubAccountArrayOutput
	ToLogzSubAccountArrayOutputWithContext(context.Context) LogzSubAccountArrayOutput
}

type LogzSubAccountArray []LogzSubAccountInput

func (LogzSubAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogzSubAccount)(nil)).Elem()
}

func (i LogzSubAccountArray) ToLogzSubAccountArrayOutput() LogzSubAccountArrayOutput {
	return i.ToLogzSubAccountArrayOutputWithContext(context.Background())
}

func (i LogzSubAccountArray) ToLogzSubAccountArrayOutputWithContext(ctx context.Context) LogzSubAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzSubAccountArrayOutput)
}

// LogzSubAccountMapInput is an input type that accepts LogzSubAccountMap and LogzSubAccountMapOutput values.
// You can construct a concrete instance of `LogzSubAccountMapInput` via:
//
//	LogzSubAccountMap{ "key": LogzSubAccountArgs{...} }
type LogzSubAccountMapInput interface {
	pulumi.Input

	ToLogzSubAccountMapOutput() LogzSubAccountMapOutput
	ToLogzSubAccountMapOutputWithContext(context.Context) LogzSubAccountMapOutput
}

type LogzSubAccountMap map[string]LogzSubAccountInput

func (LogzSubAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogzSubAccount)(nil)).Elem()
}

func (i LogzSubAccountMap) ToLogzSubAccountMapOutput() LogzSubAccountMapOutput {
	return i.ToLogzSubAccountMapOutputWithContext(context.Background())
}

func (i LogzSubAccountMap) ToLogzSubAccountMapOutputWithContext(ctx context.Context) LogzSubAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzSubAccountMapOutput)
}

type LogzSubAccountOutput struct{ *pulumi.OutputState }

func (LogzSubAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogzSubAccount)(nil)).Elem()
}

func (o LogzSubAccountOutput) ToLogzSubAccountOutput() LogzSubAccountOutput {
	return o
}

func (o LogzSubAccountOutput) ToLogzSubAccountOutputWithContext(ctx context.Context) LogzSubAccountOutput {
	return o
}

// Whether the resource monitoring is enabled? Defaults to `true`.
func (o LogzSubAccountOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogzSubAccount) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The ID of the Logz Monitor. Changing this forces a new logz Sub Account to be created.
func (o LogzSubAccountOutput) LogzMonitorId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogzSubAccount) pulumi.StringOutput { return v.LogzMonitorId }).(pulumi.StringOutput)
}

// The name which should be used for this logz Sub Account. Possible values must be between 1 and 32 characters in length and may contain only letters, numbers, hyphens and underscores. Changing this forces a new logz Sub Account to be created.
func (o LogzSubAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogzSubAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the logz Sub Account.
func (o LogzSubAccountOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogzSubAccount) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A `user` block as defined below. Changing this forces a new resource to be created.
func (o LogzSubAccountOutput) User() LogzSubAccountUserOutput {
	return o.ApplyT(func(v *LogzSubAccount) LogzSubAccountUserOutput { return v.User }).(LogzSubAccountUserOutput)
}

type LogzSubAccountArrayOutput struct{ *pulumi.OutputState }

func (LogzSubAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogzSubAccount)(nil)).Elem()
}

func (o LogzSubAccountArrayOutput) ToLogzSubAccountArrayOutput() LogzSubAccountArrayOutput {
	return o
}

func (o LogzSubAccountArrayOutput) ToLogzSubAccountArrayOutputWithContext(ctx context.Context) LogzSubAccountArrayOutput {
	return o
}

func (o LogzSubAccountArrayOutput) Index(i pulumi.IntInput) LogzSubAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogzSubAccount {
		return vs[0].([]*LogzSubAccount)[vs[1].(int)]
	}).(LogzSubAccountOutput)
}

type LogzSubAccountMapOutput struct{ *pulumi.OutputState }

func (LogzSubAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogzSubAccount)(nil)).Elem()
}

func (o LogzSubAccountMapOutput) ToLogzSubAccountMapOutput() LogzSubAccountMapOutput {
	return o
}

func (o LogzSubAccountMapOutput) ToLogzSubAccountMapOutputWithContext(ctx context.Context) LogzSubAccountMapOutput {
	return o
}

func (o LogzSubAccountMapOutput) MapIndex(k pulumi.StringInput) LogzSubAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogzSubAccount {
		return vs[0].(map[string]*LogzSubAccount)[vs[1].(string)]
	}).(LogzSubAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogzSubAccountInput)(nil)).Elem(), &LogzSubAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogzSubAccountArrayInput)(nil)).Elem(), LogzSubAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogzSubAccountMapInput)(nil)).Elem(), LogzSubAccountMap{})
	pulumi.RegisterOutputType(LogzSubAccountOutput{})
	pulumi.RegisterOutputType(LogzSubAccountArrayOutput{})
	pulumi.RegisterOutputType(LogzSubAccountMapOutput{})
}
