// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a LogToMetricAction Scheduled Query Rules resource within Azure Monitor.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/monitoring"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/operationalinsights"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("PerGB2018"),
//				RetentionInDays:   pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			exampleActionGroup, err := monitoring.NewActionGroup(ctx, "exampleActionGroup", &monitoring.ActionGroupArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				ShortName:         pulumi.String("exampleact"),
//				WebhookReceivers: monitoring.ActionGroupWebhookReceiverArray{
//					&monitoring.ActionGroupWebhookReceiverArgs{
//						Name:       pulumi.String("callmyapi"),
//						ServiceUri: pulumi.String("http://example.com/alert"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = monitoring.NewMetricAlert(ctx, "exampleMetricAlert", &monitoring.MetricAlertArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Scopes: pulumi.StringArray{
//					exampleAnalyticsWorkspace.ID(),
//				},
//				Description: pulumi.String("Action will be triggered when Average_% Idle Time metric is less than 10."),
//				Frequency:   pulumi.String("PT1M"),
//				WindowSize:  pulumi.String("PT5M"),
//				Criterias: monitoring.MetricAlertCriteriaArray{
//					&monitoring.MetricAlertCriteriaArgs{
//						MetricNamespace: pulumi.String("Microsoft.OperationalInsights/workspaces"),
//						MetricName:      pulumi.String("UsedCapacity"),
//						Aggregation:     pulumi.String("Average"),
//						Operator:        pulumi.String("LessThan"),
//						Threshold:       pulumi.Float64(10),
//					},
//				},
//				Actions: monitoring.MetricAlertActionArray{
//					&monitoring.MetricAlertActionArgs{
//						ActionGroupId: exampleActionGroup.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = monitoring.NewScheduledQueryRulesLog(ctx, "exampleScheduledQueryRulesLog", &monitoring.ScheduledQueryRulesLogArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Criteria: &monitoring.ScheduledQueryRulesLogCriteriaArgs{
//					MetricName: pulumi.String("Average_% Idle Time"),
//					Dimensions: monitoring.ScheduledQueryRulesLogCriteriaDimensionArray{
//						&monitoring.ScheduledQueryRulesLogCriteriaDimensionArgs{
//							Name:     pulumi.String("Computer"),
//							Operator: pulumi.String("Include"),
//							Values: pulumi.StringArray{
//								pulumi.String("targetVM"),
//							},
//						},
//					},
//				},
//				DataSourceId: exampleAnalyticsWorkspace.ID(),
//				Description:  pulumi.String("Scheduled query rule LogToMetric example"),
//				Enabled:      pulumi.Bool(true),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Scheduled Query Rule Log can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:monitoring/scheduledQueryRulesLog:ScheduledQueryRulesLog example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Insights/scheduledQueryRules/myrulename
//
// ```
type ScheduledQueryRulesLog struct {
	pulumi.CustomResourceState

	// A list of IDs of Resources referred into query.
	AuthorizedResourceIds pulumi.StringArrayOutput `pulumi:"authorizedResourceIds"`
	// A `criteria` block as defined below.
	Criteria ScheduledQueryRulesLogCriteriaOutput `pulumi:"criteria"`
	// The resource URI over which log search query is to be run. Changing this forces a new resource to be created.
	DataSourceId pulumi.StringOutput `pulumi:"dataSourceId"`
	// The description of the scheduled query rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether this scheduled query rule is enabled. Default is `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Specifies the Azure Region where the resource should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the scheduled query rule. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the scheduled query rule instance. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewScheduledQueryRulesLog registers a new resource with the given unique name, arguments, and options.
func NewScheduledQueryRulesLog(ctx *pulumi.Context,
	name string, args *ScheduledQueryRulesLogArgs, opts ...pulumi.ResourceOption) (*ScheduledQueryRulesLog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Criteria == nil {
		return nil, errors.New("invalid value for required argument 'Criteria'")
	}
	if args.DataSourceId == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScheduledQueryRulesLog
	err := ctx.RegisterResource("azure:monitoring/scheduledQueryRulesLog:ScheduledQueryRulesLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduledQueryRulesLog gets an existing ScheduledQueryRulesLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduledQueryRulesLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduledQueryRulesLogState, opts ...pulumi.ResourceOption) (*ScheduledQueryRulesLog, error) {
	var resource ScheduledQueryRulesLog
	err := ctx.ReadResource("azure:monitoring/scheduledQueryRulesLog:ScheduledQueryRulesLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduledQueryRulesLog resources.
type scheduledQueryRulesLogState struct {
	// A list of IDs of Resources referred into query.
	AuthorizedResourceIds []string `pulumi:"authorizedResourceIds"`
	// A `criteria` block as defined below.
	Criteria *ScheduledQueryRulesLogCriteria `pulumi:"criteria"`
	// The resource URI over which log search query is to be run. Changing this forces a new resource to be created.
	DataSourceId *string `pulumi:"dataSourceId"`
	// The description of the scheduled query rule.
	Description *string `pulumi:"description"`
	// Whether this scheduled query rule is enabled. Default is `true`.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the Azure Region where the resource should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the scheduled query rule. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the scheduled query rule instance. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type ScheduledQueryRulesLogState struct {
	// A list of IDs of Resources referred into query.
	AuthorizedResourceIds pulumi.StringArrayInput
	// A `criteria` block as defined below.
	Criteria ScheduledQueryRulesLogCriteriaPtrInput
	// The resource URI over which log search query is to be run. Changing this forces a new resource to be created.
	DataSourceId pulumi.StringPtrInput
	// The description of the scheduled query rule.
	Description pulumi.StringPtrInput
	// Whether this scheduled query rule is enabled. Default is `true`.
	Enabled pulumi.BoolPtrInput
	// Specifies the Azure Region where the resource should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the scheduled query rule. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the scheduled query rule instance. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (ScheduledQueryRulesLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledQueryRulesLogState)(nil)).Elem()
}

type scheduledQueryRulesLogArgs struct {
	// A list of IDs of Resources referred into query.
	AuthorizedResourceIds []string `pulumi:"authorizedResourceIds"`
	// A `criteria` block as defined below.
	Criteria ScheduledQueryRulesLogCriteria `pulumi:"criteria"`
	// The resource URI over which log search query is to be run. Changing this forces a new resource to be created.
	DataSourceId string `pulumi:"dataSourceId"`
	// The description of the scheduled query rule.
	Description *string `pulumi:"description"`
	// Whether this scheduled query rule is enabled. Default is `true`.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the Azure Region where the resource should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the scheduled query rule. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the scheduled query rule instance. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ScheduledQueryRulesLog resource.
type ScheduledQueryRulesLogArgs struct {
	// A list of IDs of Resources referred into query.
	AuthorizedResourceIds pulumi.StringArrayInput
	// A `criteria` block as defined below.
	Criteria ScheduledQueryRulesLogCriteriaInput
	// The resource URI over which log search query is to be run. Changing this forces a new resource to be created.
	DataSourceId pulumi.StringInput
	// The description of the scheduled query rule.
	Description pulumi.StringPtrInput
	// Whether this scheduled query rule is enabled. Default is `true`.
	Enabled pulumi.BoolPtrInput
	// Specifies the Azure Region where the resource should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the scheduled query rule. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the scheduled query rule instance. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (ScheduledQueryRulesLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduledQueryRulesLogArgs)(nil)).Elem()
}

type ScheduledQueryRulesLogInput interface {
	pulumi.Input

	ToScheduledQueryRulesLogOutput() ScheduledQueryRulesLogOutput
	ToScheduledQueryRulesLogOutputWithContext(ctx context.Context) ScheduledQueryRulesLogOutput
}

func (*ScheduledQueryRulesLog) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesLog)(nil)).Elem()
}

func (i *ScheduledQueryRulesLog) ToScheduledQueryRulesLogOutput() ScheduledQueryRulesLogOutput {
	return i.ToScheduledQueryRulesLogOutputWithContext(context.Background())
}

func (i *ScheduledQueryRulesLog) ToScheduledQueryRulesLogOutputWithContext(ctx context.Context) ScheduledQueryRulesLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesLogOutput)
}

// ScheduledQueryRulesLogArrayInput is an input type that accepts ScheduledQueryRulesLogArray and ScheduledQueryRulesLogArrayOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesLogArrayInput` via:
//
//	ScheduledQueryRulesLogArray{ ScheduledQueryRulesLogArgs{...} }
type ScheduledQueryRulesLogArrayInput interface {
	pulumi.Input

	ToScheduledQueryRulesLogArrayOutput() ScheduledQueryRulesLogArrayOutput
	ToScheduledQueryRulesLogArrayOutputWithContext(context.Context) ScheduledQueryRulesLogArrayOutput
}

type ScheduledQueryRulesLogArray []ScheduledQueryRulesLogInput

func (ScheduledQueryRulesLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduledQueryRulesLog)(nil)).Elem()
}

func (i ScheduledQueryRulesLogArray) ToScheduledQueryRulesLogArrayOutput() ScheduledQueryRulesLogArrayOutput {
	return i.ToScheduledQueryRulesLogArrayOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesLogArray) ToScheduledQueryRulesLogArrayOutputWithContext(ctx context.Context) ScheduledQueryRulesLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesLogArrayOutput)
}

// ScheduledQueryRulesLogMapInput is an input type that accepts ScheduledQueryRulesLogMap and ScheduledQueryRulesLogMapOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesLogMapInput` via:
//
//	ScheduledQueryRulesLogMap{ "key": ScheduledQueryRulesLogArgs{...} }
type ScheduledQueryRulesLogMapInput interface {
	pulumi.Input

	ToScheduledQueryRulesLogMapOutput() ScheduledQueryRulesLogMapOutput
	ToScheduledQueryRulesLogMapOutputWithContext(context.Context) ScheduledQueryRulesLogMapOutput
}

type ScheduledQueryRulesLogMap map[string]ScheduledQueryRulesLogInput

func (ScheduledQueryRulesLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduledQueryRulesLog)(nil)).Elem()
}

func (i ScheduledQueryRulesLogMap) ToScheduledQueryRulesLogMapOutput() ScheduledQueryRulesLogMapOutput {
	return i.ToScheduledQueryRulesLogMapOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesLogMap) ToScheduledQueryRulesLogMapOutputWithContext(ctx context.Context) ScheduledQueryRulesLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesLogMapOutput)
}

type ScheduledQueryRulesLogOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesLog)(nil)).Elem()
}

func (o ScheduledQueryRulesLogOutput) ToScheduledQueryRulesLogOutput() ScheduledQueryRulesLogOutput {
	return o
}

func (o ScheduledQueryRulesLogOutput) ToScheduledQueryRulesLogOutputWithContext(ctx context.Context) ScheduledQueryRulesLogOutput {
	return o
}

// A list of IDs of Resources referred into query.
func (o ScheduledQueryRulesLogOutput) AuthorizedResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesLog) pulumi.StringArrayOutput { return v.AuthorizedResourceIds }).(pulumi.StringArrayOutput)
}

// A `criteria` block as defined below.
func (o ScheduledQueryRulesLogOutput) Criteria() ScheduledQueryRulesLogCriteriaOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesLog) ScheduledQueryRulesLogCriteriaOutput { return v.Criteria }).(ScheduledQueryRulesLogCriteriaOutput)
}

// The resource URI over which log search query is to be run. Changing this forces a new resource to be created.
func (o ScheduledQueryRulesLogOutput) DataSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesLog) pulumi.StringOutput { return v.DataSourceId }).(pulumi.StringOutput)
}

// The description of the scheduled query rule.
func (o ScheduledQueryRulesLogOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesLog) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether this scheduled query rule is enabled. Default is `true`.
func (o ScheduledQueryRulesLogOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesLog) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the Azure Region where the resource should exist. Changing this forces a new resource to be created.
func (o ScheduledQueryRulesLogOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesLog) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the scheduled query rule. Changing this forces a new resource to be created.
func (o ScheduledQueryRulesLogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesLog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the scheduled query rule instance. Changing this forces a new resource to be created.
func (o ScheduledQueryRulesLogOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesLog) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o ScheduledQueryRulesLogOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesLog) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type ScheduledQueryRulesLogArrayOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduledQueryRulesLog)(nil)).Elem()
}

func (o ScheduledQueryRulesLogArrayOutput) ToScheduledQueryRulesLogArrayOutput() ScheduledQueryRulesLogArrayOutput {
	return o
}

func (o ScheduledQueryRulesLogArrayOutput) ToScheduledQueryRulesLogArrayOutputWithContext(ctx context.Context) ScheduledQueryRulesLogArrayOutput {
	return o
}

func (o ScheduledQueryRulesLogArrayOutput) Index(i pulumi.IntInput) ScheduledQueryRulesLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScheduledQueryRulesLog {
		return vs[0].([]*ScheduledQueryRulesLog)[vs[1].(int)]
	}).(ScheduledQueryRulesLogOutput)
}

type ScheduledQueryRulesLogMapOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduledQueryRulesLog)(nil)).Elem()
}

func (o ScheduledQueryRulesLogMapOutput) ToScheduledQueryRulesLogMapOutput() ScheduledQueryRulesLogMapOutput {
	return o
}

func (o ScheduledQueryRulesLogMapOutput) ToScheduledQueryRulesLogMapOutputWithContext(ctx context.Context) ScheduledQueryRulesLogMapOutput {
	return o
}

func (o ScheduledQueryRulesLogMapOutput) MapIndex(k pulumi.StringInput) ScheduledQueryRulesLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScheduledQueryRulesLog {
		return vs[0].(map[string]*ScheduledQueryRulesLog)[vs[1].(string)]
	}).(ScheduledQueryRulesLogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesLogInput)(nil)).Elem(), &ScheduledQueryRulesLog{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesLogArrayInput)(nil)).Elem(), ScheduledQueryRulesLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesLogMapInput)(nil)).Elem(), ScheduledQueryRulesLogMap{})
	pulumi.RegisterOutputType(ScheduledQueryRulesLogOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesLogArrayOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesLogMapOutput{})
}
