// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a AutoScale Setting which can be applied to Virtual Machine Scale Sets, App Services and other scalable resources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	compute/linuxVirtualMachineScaleSet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/compute/linuxVirtualMachineScaleSet"
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	monitoring/autoscaleSetting "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/monitoring/autoscaleSetting"
//	network/subnet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnet"
//	network/virtualNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetwork"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// example, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "autoscalingTest",
// Location: "West Europe",
// })
// if err != nil {
// return err
// }
// exampleVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "example", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "acctvn",
// AddressSpaces: []string{
// "10.0.0.0/16",
// },
// Location: example.Location,
// ResourceGroupName: example.Name,
// })
// if err != nil {
// return err
// }
// exampleSubnet, err := network/subnet.NewSubnet(ctx, "example", &network/subnet.SubnetArgs{
// Name: "acctsub",
// ResourceGroupName: example.Name,
// VirtualNetworkName: exampleVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.0.2.0/24",
// },
// })
// if err != nil {
// return err
// }
// exampleLinuxVirtualMachineScaleSet, err := compute/linuxVirtualMachineScaleSet.NewLinuxVirtualMachineScaleSet(ctx, "example", &compute/linuxVirtualMachineScaleSet.LinuxVirtualMachineScaleSetArgs{
// Name: "exampleset",
// Location: example.Location,
// ResourceGroupName: example.Name,
// UpgradeMode: "Manual",
// Sku: "Standard_F2",
// Instances: 2,
// AdminUsername: "myadmin",
// AdminSshKeys: []map[string]interface{}{
// map[string]interface{}{
// "username": "myadmin",
// "publicKey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDCsTcryUl51Q2VSEHqDRNmceUFo55ZtcIwxl2QITbN1RREti5ml/VTytC0yeBOvnZA4x4CFpdw/lCDPk0yrH9Ei5vVkXmOrExdTlT3qI7YaAzj1tUVlBd4S6LX1F7y6VLActvdHuDDuXZXzCDd/97420jrDfWZqJMlUK/EmCE5ParCeHIRIvmBxcEnGfFIsw8xQZl0HphxWOtJil8qsUWSdMyCiJYYQpMoMliO99X40AUc4/AlsyPyT5ddbKk08YrZ+rKDVHF7o29rh4vi5MmHkVgVQHKiKybWlHq+b71gIAUQk9wrJxD+dqt4igrmDSpIjfjwnd+l5UIn5fJSO5DYV4YT/4hwK7OKmuo7OFHD0WyY5YnkYEMtFgzemnRBdE8ulcT60DQpVgRMXFWHvhyCWy0L6sgj1QWDZlLpvsIvNfHsyhKFMG1frLnMt/nP0+YCcfg+v1JYeCKjeoJxB8DWcRBsjzItY0CGmzP8UYZiYKl/2u+2TgFS5r7NWH11bxoUzjKdaa1NLw+ieA8GlBFfCbfWe6YVB9ggUte4VtYFMZGxOjS2bAiYtfgTKFJv+XqORAwExG6+G2eDxIDyo80/OA9IG7Xv/jwQr7D6KDjDuULFcN/iTxuttoKrHeYz1hf5ZQlBdllwJHYx6fK2g8kha6r2JIQKocvsAXiiONqSfw== hello@world.com",
// },
// },
// NetworkInterfaces: []map[string]interface{}{
// map[string]interface{}{
// "name": "TestNetworkProfile",
// "primary": true,
// "ipConfigurations": []map[string]interface{}{
// map[string]interface{}{
// "name": "TestIPConfiguration",
// "primary": true,
// "subnetId": exampleSubnet.Id,
// },
// },
// },
// },
// OsDisk: map[string]interface{}{
// "caching": "ReadWrite",
// "storageAccountType": "StandardSSD_LRS",
// },
// SourceImageReference: map[string]interface{}{
// "publisher": "Canonical",
// "offer": "0001-com-ubuntu-server-jammy",
// "sku": "22_04-lts",
// "version": "latest",
// },
// })
// if err != nil {
// return err
// }
// _, err = monitoring/autoscaleSetting.NewAutoscaleSetting(ctx, "example", &monitoring/autoscaleSetting.AutoscaleSettingArgs{
// Name: "myAutoscaleSetting",
// ResourceGroupName: example.Name,
// Location: example.Location,
// TargetResourceId: exampleLinuxVirtualMachineScaleSet.Id,
// Profiles: []map[string]interface{}{
// map[string]interface{}{
// "name": "defaultProfile",
// "capacity": map[string]interface{}{
// "default": 1,
// "minimum": 1,
// "maximum": 10,
// },
// "rules": []interface{}{
// map[string]interface{}{
// "metricTrigger": map[string]interface{}{
// "metricName": "Percentage CPU",
// "metricResourceId": exampleLinuxVirtualMachineScaleSet.Id,
// "timeGrain": "PT1M",
// "statistic": "Average",
// "timeWindow": "PT5M",
// "timeAggregation": "Average",
// "operator": "GreaterThan",
// "threshold": 75,
// "metricNamespace": "microsoft.compute/virtualmachinescalesets",
// "dimensions": []map[string]interface{}{
// map[string]interface{}{
// "name": "AppName",
// "operator": "Equals",
// "values": []string{
// "App1",
// },
// },
// },
// },
// "scaleAction": map[string]interface{}{
// "direction": "Increase",
// "type": "ChangeCount",
// "value": "1",
// "cooldown": "PT1M",
// },
// },
// map[string]interface{}{
// "metricTrigger": map[string]interface{}{
// "metricName": "Percentage CPU",
// "metricResourceId": exampleLinuxVirtualMachineScaleSet.Id,
// "timeGrain": "PT1M",
// "statistic": "Average",
// "timeWindow": "PT5M",
// "timeAggregation": "Average",
// "operator": "LessThan",
// "threshold": 25,
// },
// "scaleAction": map[string]interface{}{
// "direction": "Decrease",
// "type": "ChangeCount",
// "value": "1",
// "cooldown": "PT1M",
// },
// },
// },
// },
// },
// Predictive: map[string]interface{}{
// "scaleMode": "Enabled",
// "lookAheadTime": "PT5M",
// },
// Notification: map[string]interface{}{
// "email": map[string]interface{}{
// "sendToSubscriptionAdministrator": true,
// "sendToSubscriptionCoAdministrator": true,
// "customEmails": []string{
// "admin@contoso.com",
// },
// },
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
// ### Repeating On Weekends)
//
// ```go
// package main
//
// import (
//
//	compute/linuxVirtualMachineScaleSet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/compute/linuxVirtualMachineScaleSet"
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	monitoring/autoscaleSetting "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/monitoring/autoscaleSetting"
//	network/subnet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnet"
//	network/virtualNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetwork"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// example, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "autoscalingTest",
// Location: "West Europe",
// })
// if err != nil {
// return err
// }
// exampleVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "example", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "acctvn",
// AddressSpaces: []string{
// "10.0.0.0/16",
// },
// Location: example.Location,
// ResourceGroupName: example.Name,
// })
// if err != nil {
// return err
// }
// exampleSubnet, err := network/subnet.NewSubnet(ctx, "example", &network/subnet.SubnetArgs{
// Name: "acctsub",
// ResourceGroupName: example.Name,
// VirtualNetworkName: exampleVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.0.2.0/24",
// },
// })
// if err != nil {
// return err
// }
// exampleLinuxVirtualMachineScaleSet, err := compute/linuxVirtualMachineScaleSet.NewLinuxVirtualMachineScaleSet(ctx, "example", &compute/linuxVirtualMachineScaleSet.LinuxVirtualMachineScaleSetArgs{
// Name: "exampleset",
// Location: example.Location,
// ResourceGroupName: example.Name,
// UpgradeMode: "Manual",
// Sku: "Standard_F2",
// Instances: 2,
// AdminUsername: "myadmin",
// AdminSshKeys: []map[string]interface{}{
// map[string]interface{}{
// "username": "myadmin",
// "publicKey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDCsTcryUl51Q2VSEHqDRNmceUFo55ZtcIwxl2QITbN1RREti5ml/VTytC0yeBOvnZA4x4CFpdw/lCDPk0yrH9Ei5vVkXmOrExdTlT3qI7YaAzj1tUVlBd4S6LX1F7y6VLActvdHuDDuXZXzCDd/97420jrDfWZqJMlUK/EmCE5ParCeHIRIvmBxcEnGfFIsw8xQZl0HphxWOtJil8qsUWSdMyCiJYYQpMoMliO99X40AUc4/AlsyPyT5ddbKk08YrZ+rKDVHF7o29rh4vi5MmHkVgVQHKiKybWlHq+b71gIAUQk9wrJxD+dqt4igrmDSpIjfjwnd+l5UIn5fJSO5DYV4YT/4hwK7OKmuo7OFHD0WyY5YnkYEMtFgzemnRBdE8ulcT60DQpVgRMXFWHvhyCWy0L6sgj1QWDZlLpvsIvNfHsyhKFMG1frLnMt/nP0+YCcfg+v1JYeCKjeoJxB8DWcRBsjzItY0CGmzP8UYZiYKl/2u+2TgFS5r7NWH11bxoUzjKdaa1NLw+ieA8GlBFfCbfWe6YVB9ggUte4VtYFMZGxOjS2bAiYtfgTKFJv+XqORAwExG6+G2eDxIDyo80/OA9IG7Xv/jwQr7D6KDjDuULFcN/iTxuttoKrHeYz1hf5ZQlBdllwJHYx6fK2g8kha6r2JIQKocvsAXiiONqSfw== hello@world.com",
// },
// },
// NetworkInterfaces: []map[string]interface{}{
// map[string]interface{}{
// "name": "TestNetworkProfile",
// "primary": true,
// "ipConfigurations": []map[string]interface{}{
// map[string]interface{}{
// "name": "TestIPConfiguration",
// "primary": true,
// "subnetId": exampleSubnet.Id,
// },
// },
// },
// },
// OsDisk: map[string]interface{}{
// "caching": "ReadWrite",
// "storageAccountType": "StandardSSD_LRS",
// },
// SourceImageReference: map[string]interface{}{
// "publisher": "Canonical",
// "offer": "0001-com-ubuntu-server-jammy",
// "sku": "22_04-lts",
// "version": "latest",
// },
// })
// if err != nil {
// return err
// }
// _, err = monitoring/autoscaleSetting.NewAutoscaleSetting(ctx, "example", &monitoring/autoscaleSetting.AutoscaleSettingArgs{
// Name: "myAutoscaleSetting",
// ResourceGroupName: example.Name,
// Location: example.Location,
// TargetResourceId: exampleLinuxVirtualMachineScaleSet.Id,
// Profiles: []map[string]interface{}{
// map[string]interface{}{
// "name": "Weekends",
// "capacity": map[string]interface{}{
// "default": 1,
// "minimum": 1,
// "maximum": 10,
// },
// "rules": []interface{}{
// map[string]interface{}{
// "metricTrigger": map[string]interface{}{
// "metricName": "Percentage CPU",
// "metricResourceId": exampleLinuxVirtualMachineScaleSet.Id,
// "timeGrain": "PT1M",
// "statistic": "Average",
// "timeWindow": "PT5M",
// "timeAggregation": "Average",
// "operator": "GreaterThan",
// "threshold": 90,
// },
// "scaleAction": map[string]interface{}{
// "direction": "Increase",
// "type": "ChangeCount",
// "value": "2",
// "cooldown": "PT1M",
// },
// },
// map[string]interface{}{
// "metricTrigger": map[string]interface{}{
// "metricName": "Percentage CPU",
// "metricResourceId": exampleLinuxVirtualMachineScaleSet.Id,
// "timeGrain": "PT1M",
// "statistic": "Average",
// "timeWindow": "PT5M",
// "timeAggregation": "Average",
// "operator": "LessThan",
// "threshold": 10,
// },
// "scaleAction": map[string]interface{}{
// "direction": "Decrease",
// "type": "ChangeCount",
// "value": "2",
// "cooldown": "PT1M",
// },
// },
// },
// "recurrence": map[string]interface{}{
// "timezone": "Pacific Standard Time",
// "days": []string{
// "Saturday",
// "Sunday",
// },
// "hours": 12,
// "minutes": 0,
// },
// },
// },
// Notification: map[string]interface{}{
// "email": map[string]interface{}{
// "sendToSubscriptionAdministrator": true,
// "sendToSubscriptionCoAdministrator": true,
// "customEmails": []string{
// "admin@contoso.com",
// },
// },
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
// ### For Fixed Dates)
//
// ```go
// package main
//
// import (
//
//	compute/linuxVirtualMachineScaleSet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/compute/linuxVirtualMachineScaleSet"
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	monitoring/autoscaleSetting "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/monitoring/autoscaleSetting"
//	network/subnet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnet"
//	network/virtualNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetwork"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// example, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "autoscalingTest",
// Location: "West Europe",
// })
// if err != nil {
// return err
// }
// exampleVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "example", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "acctvn",
// AddressSpaces: []string{
// "10.0.0.0/16",
// },
// Location: example.Location,
// ResourceGroupName: example.Name,
// })
// if err != nil {
// return err
// }
// exampleSubnet, err := network/subnet.NewSubnet(ctx, "example", &network/subnet.SubnetArgs{
// Name: "acctsub",
// ResourceGroupName: example.Name,
// VirtualNetworkName: exampleVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.0.2.0/24",
// },
// })
// if err != nil {
// return err
// }
// exampleLinuxVirtualMachineScaleSet, err := compute/linuxVirtualMachineScaleSet.NewLinuxVirtualMachineScaleSet(ctx, "example", &compute/linuxVirtualMachineScaleSet.LinuxVirtualMachineScaleSetArgs{
// Name: "exampleset",
// Location: example.Location,
// ResourceGroupName: example.Name,
// UpgradeMode: "Manual",
// Sku: "Standard_F2",
// Instances: 2,
// AdminUsername: "myadmin",
// AdminSshKeys: []map[string]interface{}{
// map[string]interface{}{
// "username": "myadmin",
// "publicKey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDCsTcryUl51Q2VSEHqDRNmceUFo55ZtcIwxl2QITbN1RREti5ml/VTytC0yeBOvnZA4x4CFpdw/lCDPk0yrH9Ei5vVkXmOrExdTlT3qI7YaAzj1tUVlBd4S6LX1F7y6VLActvdHuDDuXZXzCDd/97420jrDfWZqJMlUK/EmCE5ParCeHIRIvmBxcEnGfFIsw8xQZl0HphxWOtJil8qsUWSdMyCiJYYQpMoMliO99X40AUc4/AlsyPyT5ddbKk08YrZ+rKDVHF7o29rh4vi5MmHkVgVQHKiKybWlHq+b71gIAUQk9wrJxD+dqt4igrmDSpIjfjwnd+l5UIn5fJSO5DYV4YT/4hwK7OKmuo7OFHD0WyY5YnkYEMtFgzemnRBdE8ulcT60DQpVgRMXFWHvhyCWy0L6sgj1QWDZlLpvsIvNfHsyhKFMG1frLnMt/nP0+YCcfg+v1JYeCKjeoJxB8DWcRBsjzItY0CGmzP8UYZiYKl/2u+2TgFS5r7NWH11bxoUzjKdaa1NLw+ieA8GlBFfCbfWe6YVB9ggUte4VtYFMZGxOjS2bAiYtfgTKFJv+XqORAwExG6+G2eDxIDyo80/OA9IG7Xv/jwQr7D6KDjDuULFcN/iTxuttoKrHeYz1hf5ZQlBdllwJHYx6fK2g8kha6r2JIQKocvsAXiiONqSfw== hello@world.com",
// },
// },
// NetworkInterfaces: []map[string]interface{}{
// map[string]interface{}{
// "name": "TestNetworkProfile",
// "primary": true,
// "ipConfigurations": []map[string]interface{}{
// map[string]interface{}{
// "name": "TestIPConfiguration",
// "primary": true,
// "subnetId": exampleSubnet.Id,
// },
// },
// },
// },
// OsDisk: map[string]interface{}{
// "caching": "ReadWrite",
// "storageAccountType": "StandardSSD_LRS",
// },
// SourceImageReference: map[string]interface{}{
// "publisher": "Canonical",
// "offer": "0001-com-ubuntu-server-jammy",
// "sku": "22_04-lts",
// "version": "latest",
// },
// })
// if err != nil {
// return err
// }
// _, err = monitoring/autoscaleSetting.NewAutoscaleSetting(ctx, "example", &monitoring/autoscaleSetting.AutoscaleSettingArgs{
// Name: "myAutoscaleSetting",
// Enabled: true,
// ResourceGroupName: example.Name,
// Location: example.Location,
// TargetResourceId: exampleLinuxVirtualMachineScaleSet.Id,
// Profiles: []map[string]interface{}{
// map[string]interface{}{
// "name": "forJuly",
// "capacity": map[string]interface{}{
// "default": 1,
// "minimum": 1,
// "maximum": 10,
// },
// "rules": []interface{}{
// map[string]interface{}{
// "metricTrigger": map[string]interface{}{
// "metricName": "Percentage CPU",
// "metricResourceId": exampleLinuxVirtualMachineScaleSet.Id,
// "timeGrain": "PT1M",
// "statistic": "Average",
// "timeWindow": "PT5M",
// "timeAggregation": "Average",
// "operator": "GreaterThan",
// "threshold": 90,
// },
// "scaleAction": map[string]interface{}{
// "direction": "Increase",
// "type": "ChangeCount",
// "value": "2",
// "cooldown": "PT1M",
// },
// },
// map[string]interface{}{
// "metricTrigger": map[string]interface{}{
// "metricName": "Percentage CPU",
// "metricResourceId": exampleLinuxVirtualMachineScaleSet.Id,
// "timeGrain": "PT1M",
// "statistic": "Average",
// "timeWindow": "PT5M",
// "timeAggregation": "Average",
// "operator": "LessThan",
// "threshold": 10,
// },
// "scaleAction": map[string]interface{}{
// "direction": "Decrease",
// "type": "ChangeCount",
// "value": "2",
// "cooldown": "PT1M",
// },
// },
// },
// "fixedDate": map[string]interface{}{
// "timezone": "Pacific Standard Time",
// "start": "2020-07-01T00:00:00Z",
// "end": "2020-07-31T23:59:59Z",
// },
// },
// },
// Notification: map[string]interface{}{
// "email": map[string]interface{}{
// "sendToSubscriptionAdministrator": true,
// "sendToSubscriptionCoAdministrator": true,
// "customEmails": []string{
// "admin@contoso.com",
// },
// },
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// AutoScale Setting can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:monitoring/autoscaleSetting:AutoscaleSetting example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Insights/autoScaleSettings/setting1
// ```
type AutoscaleSetting struct {
	pulumi.CustomResourceState

	// Specifies whether automatic scaling is enabled for the target resource. Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Specifies the supported Azure location where the AutoScale Setting should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the AutoScale Setting. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies a `notification` block as defined below.
	Notification AutoscaleSettingNotificationPtrOutput `pulumi:"notification"`
	// A `predictive` block as defined below.
	Predictive AutoscaleSettingPredictivePtrOutput `pulumi:"predictive"`
	// Specifies one or more (up to 20) `profile` blocks as defined below.
	Profiles AutoscaleSettingProfileArrayOutput `pulumi:"profiles"`
	// The name of the Resource Group in the AutoScale Setting should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the resource ID of the resource that the autoscale setting should be added to. Changing this forces a new resource to be created.
	TargetResourceId pulumi.StringOutput `pulumi:"targetResourceId"`
}

// NewAutoscaleSetting registers a new resource with the given unique name, arguments, and options.
func NewAutoscaleSetting(ctx *pulumi.Context,
	name string, args *AutoscaleSettingArgs, opts ...pulumi.ResourceOption) (*AutoscaleSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Profiles == nil {
		return nil, errors.New("invalid value for required argument 'Profiles'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.TargetResourceId == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AutoscaleSetting
	err := ctx.RegisterResource("azure:monitoring/autoscaleSetting:AutoscaleSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutoscaleSetting gets an existing AutoscaleSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutoscaleSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutoscaleSettingState, opts ...pulumi.ResourceOption) (*AutoscaleSetting, error) {
	var resource AutoscaleSetting
	err := ctx.ReadResource("azure:monitoring/autoscaleSetting:AutoscaleSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutoscaleSetting resources.
type autoscaleSettingState struct {
	// Specifies whether automatic scaling is enabled for the target resource. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the supported Azure location where the AutoScale Setting should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the AutoScale Setting. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies a `notification` block as defined below.
	Notification *AutoscaleSettingNotification `pulumi:"notification"`
	// A `predictive` block as defined below.
	Predictive *AutoscaleSettingPredictive `pulumi:"predictive"`
	// Specifies one or more (up to 20) `profile` blocks as defined below.
	Profiles []AutoscaleSettingProfile `pulumi:"profiles"`
	// The name of the Resource Group in the AutoScale Setting should be created. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the resource ID of the resource that the autoscale setting should be added to. Changing this forces a new resource to be created.
	TargetResourceId *string `pulumi:"targetResourceId"`
}

type AutoscaleSettingState struct {
	// Specifies whether automatic scaling is enabled for the target resource. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Specifies the supported Azure location where the AutoScale Setting should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the AutoScale Setting. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies a `notification` block as defined below.
	Notification AutoscaleSettingNotificationPtrInput
	// A `predictive` block as defined below.
	Predictive AutoscaleSettingPredictivePtrInput
	// Specifies one or more (up to 20) `profile` blocks as defined below.
	Profiles AutoscaleSettingProfileArrayInput
	// The name of the Resource Group in the AutoScale Setting should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Specifies the resource ID of the resource that the autoscale setting should be added to. Changing this forces a new resource to be created.
	TargetResourceId pulumi.StringPtrInput
}

func (AutoscaleSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*autoscaleSettingState)(nil)).Elem()
}

type autoscaleSettingArgs struct {
	// Specifies whether automatic scaling is enabled for the target resource. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the supported Azure location where the AutoScale Setting should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The name of the AutoScale Setting. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Specifies a `notification` block as defined below.
	Notification *AutoscaleSettingNotification `pulumi:"notification"`
	// A `predictive` block as defined below.
	Predictive *AutoscaleSettingPredictive `pulumi:"predictive"`
	// Specifies one or more (up to 20) `profile` blocks as defined below.
	Profiles []AutoscaleSettingProfile `pulumi:"profiles"`
	// The name of the Resource Group in the AutoScale Setting should be created. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the resource ID of the resource that the autoscale setting should be added to. Changing this forces a new resource to be created.
	TargetResourceId string `pulumi:"targetResourceId"`
}

// The set of arguments for constructing a AutoscaleSetting resource.
type AutoscaleSettingArgs struct {
	// Specifies whether automatic scaling is enabled for the target resource. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Specifies the supported Azure location where the AutoScale Setting should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The name of the AutoScale Setting. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Specifies a `notification` block as defined below.
	Notification AutoscaleSettingNotificationPtrInput
	// A `predictive` block as defined below.
	Predictive AutoscaleSettingPredictivePtrInput
	// Specifies one or more (up to 20) `profile` blocks as defined below.
	Profiles AutoscaleSettingProfileArrayInput
	// The name of the Resource Group in the AutoScale Setting should be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// Specifies the resource ID of the resource that the autoscale setting should be added to. Changing this forces a new resource to be created.
	TargetResourceId pulumi.StringInput
}

func (AutoscaleSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autoscaleSettingArgs)(nil)).Elem()
}

type AutoscaleSettingInput interface {
	pulumi.Input

	ToAutoscaleSettingOutput() AutoscaleSettingOutput
	ToAutoscaleSettingOutputWithContext(ctx context.Context) AutoscaleSettingOutput
}

func (*AutoscaleSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleSetting)(nil)).Elem()
}

func (i *AutoscaleSetting) ToAutoscaleSettingOutput() AutoscaleSettingOutput {
	return i.ToAutoscaleSettingOutputWithContext(context.Background())
}

func (i *AutoscaleSetting) ToAutoscaleSettingOutputWithContext(ctx context.Context) AutoscaleSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingOutput)
}

// AutoscaleSettingArrayInput is an input type that accepts AutoscaleSettingArray and AutoscaleSettingArrayOutput values.
// You can construct a concrete instance of `AutoscaleSettingArrayInput` via:
//
//	AutoscaleSettingArray{ AutoscaleSettingArgs{...} }
type AutoscaleSettingArrayInput interface {
	pulumi.Input

	ToAutoscaleSettingArrayOutput() AutoscaleSettingArrayOutput
	ToAutoscaleSettingArrayOutputWithContext(context.Context) AutoscaleSettingArrayOutput
}

type AutoscaleSettingArray []AutoscaleSettingInput

func (AutoscaleSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutoscaleSetting)(nil)).Elem()
}

func (i AutoscaleSettingArray) ToAutoscaleSettingArrayOutput() AutoscaleSettingArrayOutput {
	return i.ToAutoscaleSettingArrayOutputWithContext(context.Background())
}

func (i AutoscaleSettingArray) ToAutoscaleSettingArrayOutputWithContext(ctx context.Context) AutoscaleSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingArrayOutput)
}

// AutoscaleSettingMapInput is an input type that accepts AutoscaleSettingMap and AutoscaleSettingMapOutput values.
// You can construct a concrete instance of `AutoscaleSettingMapInput` via:
//
//	AutoscaleSettingMap{ "key": AutoscaleSettingArgs{...} }
type AutoscaleSettingMapInput interface {
	pulumi.Input

	ToAutoscaleSettingMapOutput() AutoscaleSettingMapOutput
	ToAutoscaleSettingMapOutputWithContext(context.Context) AutoscaleSettingMapOutput
}

type AutoscaleSettingMap map[string]AutoscaleSettingInput

func (AutoscaleSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutoscaleSetting)(nil)).Elem()
}

func (i AutoscaleSettingMap) ToAutoscaleSettingMapOutput() AutoscaleSettingMapOutput {
	return i.ToAutoscaleSettingMapOutputWithContext(context.Background())
}

func (i AutoscaleSettingMap) ToAutoscaleSettingMapOutputWithContext(ctx context.Context) AutoscaleSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingMapOutput)
}

type AutoscaleSettingOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleSetting)(nil)).Elem()
}

func (o AutoscaleSettingOutput) ToAutoscaleSettingOutput() AutoscaleSettingOutput {
	return o
}

func (o AutoscaleSettingOutput) ToAutoscaleSettingOutputWithContext(ctx context.Context) AutoscaleSettingOutput {
	return o
}

// Specifies whether automatic scaling is enabled for the target resource. Defaults to `true`.
func (o AutoscaleSettingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoscaleSetting) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the supported Azure location where the AutoScale Setting should exist. Changing this forces a new resource to be created.
func (o AutoscaleSettingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoscaleSetting) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the AutoScale Setting. Changing this forces a new resource to be created.
func (o AutoscaleSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoscaleSetting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies a `notification` block as defined below.
func (o AutoscaleSettingOutput) Notification() AutoscaleSettingNotificationPtrOutput {
	return o.ApplyT(func(v *AutoscaleSetting) AutoscaleSettingNotificationPtrOutput { return v.Notification }).(AutoscaleSettingNotificationPtrOutput)
}

// A `predictive` block as defined below.
func (o AutoscaleSettingOutput) Predictive() AutoscaleSettingPredictivePtrOutput {
	return o.ApplyT(func(v *AutoscaleSetting) AutoscaleSettingPredictivePtrOutput { return v.Predictive }).(AutoscaleSettingPredictivePtrOutput)
}

// Specifies one or more (up to 20) `profile` blocks as defined below.
func (o AutoscaleSettingOutput) Profiles() AutoscaleSettingProfileArrayOutput {
	return o.ApplyT(func(v *AutoscaleSetting) AutoscaleSettingProfileArrayOutput { return v.Profiles }).(AutoscaleSettingProfileArrayOutput)
}

// The name of the Resource Group in the AutoScale Setting should be created. Changing this forces a new resource to be created.
func (o AutoscaleSettingOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoscaleSetting) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o AutoscaleSettingOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AutoscaleSetting) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the resource ID of the resource that the autoscale setting should be added to. Changing this forces a new resource to be created.
func (o AutoscaleSettingOutput) TargetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoscaleSetting) pulumi.StringOutput { return v.TargetResourceId }).(pulumi.StringOutput)
}

type AutoscaleSettingArrayOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutoscaleSetting)(nil)).Elem()
}

func (o AutoscaleSettingArrayOutput) ToAutoscaleSettingArrayOutput() AutoscaleSettingArrayOutput {
	return o
}

func (o AutoscaleSettingArrayOutput) ToAutoscaleSettingArrayOutputWithContext(ctx context.Context) AutoscaleSettingArrayOutput {
	return o
}

func (o AutoscaleSettingArrayOutput) Index(i pulumi.IntInput) AutoscaleSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AutoscaleSetting {
		return vs[0].([]*AutoscaleSetting)[vs[1].(int)]
	}).(AutoscaleSettingOutput)
}

type AutoscaleSettingMapOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutoscaleSetting)(nil)).Elem()
}

func (o AutoscaleSettingMapOutput) ToAutoscaleSettingMapOutput() AutoscaleSettingMapOutput {
	return o
}

func (o AutoscaleSettingMapOutput) ToAutoscaleSettingMapOutputWithContext(ctx context.Context) AutoscaleSettingMapOutput {
	return o
}

func (o AutoscaleSettingMapOutput) MapIndex(k pulumi.StringInput) AutoscaleSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AutoscaleSetting {
		return vs[0].(map[string]*AutoscaleSetting)[vs[1].(string)]
	}).(AutoscaleSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingInput)(nil)).Elem(), &AutoscaleSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingArrayInput)(nil)).Elem(), AutoscaleSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingMapInput)(nil)).Elem(), AutoscaleSettingMap{})
	pulumi.RegisterOutputType(AutoscaleSettingOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingArrayOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingMapOutput{})
}
