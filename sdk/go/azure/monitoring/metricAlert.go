// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Metric Alert within Azure Monitor.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/monitoring"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			toMonitor, err := storage.NewAccount(ctx, "toMonitor", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			main, err := monitoring.NewActionGroup(ctx, "main", &monitoring.ActionGroupArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				ShortName:         pulumi.String("exampleact"),
//				WebhookReceivers: monitoring.ActionGroupWebhookReceiverArray{
//					&monitoring.ActionGroupWebhookReceiverArgs{
//						Name:       pulumi.String("callmyapi"),
//						ServiceUri: pulumi.String("http://example.com/alert"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = monitoring.NewMetricAlert(ctx, "exampleMetricAlert", &monitoring.MetricAlertArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Scopes: pulumi.StringArray{
//					toMonitor.ID(),
//				},
//				Description: pulumi.String("Action will be triggered when Transactions count is greater than 50."),
//				Criterias: monitoring.MetricAlertCriteriaArray{
//					&monitoring.MetricAlertCriteriaArgs{
//						MetricNamespace: pulumi.String("Microsoft.Storage/storageAccounts"),
//						MetricName:      pulumi.String("Transactions"),
//						Aggregation:     pulumi.String("Total"),
//						Operator:        pulumi.String("GreaterThan"),
//						Threshold:       pulumi.Float64(50),
//						Dimensions: monitoring.MetricAlertCriteriaDimensionArray{
//							&monitoring.MetricAlertCriteriaDimensionArgs{
//								Name:     pulumi.String("ApiName"),
//								Operator: pulumi.String("Include"),
//								Values: pulumi.StringArray{
//									pulumi.String("*"),
//								},
//							},
//						},
//					},
//				},
//				Actions: monitoring.MetricAlertActionArray{
//					&monitoring.MetricAlertActionArgs{
//						ActionGroupId: main.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Metric Alerts can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:monitoring/metricAlert:MetricAlert main /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-resources/providers/Microsoft.Insights/metricAlerts/example-metricalert
//
// ```
type MetricAlert struct {
	pulumi.CustomResourceState

	// One or more `action` blocks as defined below.
	Actions MetricAlertActionArrayOutput `pulumi:"actions"`
	// A `applicationInsightsWebTestLocationAvailabilityCriteria` block as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	ApplicationInsightsWebTestLocationAvailabilityCriteria MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput `pulumi:"applicationInsightsWebTestLocationAvailabilityCriteria"`
	// Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
	AutoMitigate pulumi.BoolPtrOutput `pulumi:"autoMitigate"`
	// One or more (static) `criteria` blocks as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	Criterias MetricAlertCriteriaArrayOutput `pulumi:"criterias"`
	// The description of this Metric Alert.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A `dynamicCriteria` block as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	DynamicCriteria MetricAlertDynamicCriteriaPtrOutput `pulumi:"dynamicCriteria"`
	// Should this Metric Alert be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
	Frequency pulumi.StringPtrOutput `pulumi:"frequency"`
	// The name of the Metric Alert. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the Metric Alert instance. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A set of strings of resource IDs at which the metric criteria should be applied.
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
	Severity pulumi.IntPtrOutput `pulumi:"severity"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The location of the target resource.
	//
	// > This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
	TargetResourceLocation pulumi.StringOutput `pulumi:"targetResourceLocation"`
	// The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
	//
	// > This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
	TargetResourceType pulumi.StringOutput `pulumi:"targetResourceType"`
	// The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
	WindowSize pulumi.StringPtrOutput `pulumi:"windowSize"`
}

// NewMetricAlert registers a new resource with the given unique name, arguments, and options.
func NewMetricAlert(ctx *pulumi.Context,
	name string, args *MetricAlertArgs, opts ...pulumi.ResourceOption) (*MetricAlert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MetricAlert
	err := ctx.RegisterResource("azure:monitoring/metricAlert:MetricAlert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricAlert gets an existing MetricAlert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricAlertState, opts ...pulumi.ResourceOption) (*MetricAlert, error) {
	var resource MetricAlert
	err := ctx.ReadResource("azure:monitoring/metricAlert:MetricAlert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricAlert resources.
type metricAlertState struct {
	// One or more `action` blocks as defined below.
	Actions []MetricAlertAction `pulumi:"actions"`
	// A `applicationInsightsWebTestLocationAvailabilityCriteria` block as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	ApplicationInsightsWebTestLocationAvailabilityCriteria *MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria `pulumi:"applicationInsightsWebTestLocationAvailabilityCriteria"`
	// Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
	AutoMitigate *bool `pulumi:"autoMitigate"`
	// One or more (static) `criteria` blocks as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	Criterias []MetricAlertCriteria `pulumi:"criterias"`
	// The description of this Metric Alert.
	Description *string `pulumi:"description"`
	// A `dynamicCriteria` block as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	DynamicCriteria *MetricAlertDynamicCriteria `pulumi:"dynamicCriteria"`
	// Should this Metric Alert be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
	Frequency *string `pulumi:"frequency"`
	// The name of the Metric Alert. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Metric Alert instance. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A set of strings of resource IDs at which the metric criteria should be applied.
	Scopes []string `pulumi:"scopes"`
	// The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
	Severity *int `pulumi:"severity"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The location of the target resource.
	//
	// > This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
	TargetResourceLocation *string `pulumi:"targetResourceLocation"`
	// The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
	//
	// > This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
	TargetResourceType *string `pulumi:"targetResourceType"`
	// The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
	WindowSize *string `pulumi:"windowSize"`
}

type MetricAlertState struct {
	// One or more `action` blocks as defined below.
	Actions MetricAlertActionArrayInput
	// A `applicationInsightsWebTestLocationAvailabilityCriteria` block as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	ApplicationInsightsWebTestLocationAvailabilityCriteria MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrInput
	// Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
	AutoMitigate pulumi.BoolPtrInput
	// One or more (static) `criteria` blocks as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	Criterias MetricAlertCriteriaArrayInput
	// The description of this Metric Alert.
	Description pulumi.StringPtrInput
	// A `dynamicCriteria` block as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	DynamicCriteria MetricAlertDynamicCriteriaPtrInput
	// Should this Metric Alert be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
	Frequency pulumi.StringPtrInput
	// The name of the Metric Alert. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Metric Alert instance. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A set of strings of resource IDs at which the metric criteria should be applied.
	Scopes pulumi.StringArrayInput
	// The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
	Severity pulumi.IntPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The location of the target resource.
	//
	// > This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
	TargetResourceLocation pulumi.StringPtrInput
	// The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
	//
	// > This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
	TargetResourceType pulumi.StringPtrInput
	// The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
	WindowSize pulumi.StringPtrInput
}

func (MetricAlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*metricAlertState)(nil)).Elem()
}

type metricAlertArgs struct {
	// One or more `action` blocks as defined below.
	Actions []MetricAlertAction `pulumi:"actions"`
	// A `applicationInsightsWebTestLocationAvailabilityCriteria` block as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	ApplicationInsightsWebTestLocationAvailabilityCriteria *MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria `pulumi:"applicationInsightsWebTestLocationAvailabilityCriteria"`
	// Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
	AutoMitigate *bool `pulumi:"autoMitigate"`
	// One or more (static) `criteria` blocks as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	Criterias []MetricAlertCriteria `pulumi:"criterias"`
	// The description of this Metric Alert.
	Description *string `pulumi:"description"`
	// A `dynamicCriteria` block as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	DynamicCriteria *MetricAlertDynamicCriteria `pulumi:"dynamicCriteria"`
	// Should this Metric Alert be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
	Frequency *string `pulumi:"frequency"`
	// The name of the Metric Alert. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Metric Alert instance. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A set of strings of resource IDs at which the metric criteria should be applied.
	Scopes []string `pulumi:"scopes"`
	// The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
	Severity *int `pulumi:"severity"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The location of the target resource.
	//
	// > This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
	TargetResourceLocation *string `pulumi:"targetResourceLocation"`
	// The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
	//
	// > This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
	TargetResourceType *string `pulumi:"targetResourceType"`
	// The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
	WindowSize *string `pulumi:"windowSize"`
}

// The set of arguments for constructing a MetricAlert resource.
type MetricAlertArgs struct {
	// One or more `action` blocks as defined below.
	Actions MetricAlertActionArrayInput
	// A `applicationInsightsWebTestLocationAvailabilityCriteria` block as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	ApplicationInsightsWebTestLocationAvailabilityCriteria MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrInput
	// Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
	AutoMitigate pulumi.BoolPtrInput
	// One or more (static) `criteria` blocks as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	Criterias MetricAlertCriteriaArrayInput
	// The description of this Metric Alert.
	Description pulumi.StringPtrInput
	// A `dynamicCriteria` block as defined below.
	//
	// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
	DynamicCriteria MetricAlertDynamicCriteriaPtrInput
	// Should this Metric Alert be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
	Frequency pulumi.StringPtrInput
	// The name of the Metric Alert. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Metric Alert instance. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A set of strings of resource IDs at which the metric criteria should be applied.
	Scopes pulumi.StringArrayInput
	// The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
	Severity pulumi.IntPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The location of the target resource.
	//
	// > This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
	TargetResourceLocation pulumi.StringPtrInput
	// The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
	//
	// > This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
	TargetResourceType pulumi.StringPtrInput
	// The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
	WindowSize pulumi.StringPtrInput
}

func (MetricAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metricAlertArgs)(nil)).Elem()
}

type MetricAlertInput interface {
	pulumi.Input

	ToMetricAlertOutput() MetricAlertOutput
	ToMetricAlertOutputWithContext(ctx context.Context) MetricAlertOutput
}

func (*MetricAlert) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlert)(nil)).Elem()
}

func (i *MetricAlert) ToMetricAlertOutput() MetricAlertOutput {
	return i.ToMetricAlertOutputWithContext(context.Background())
}

func (i *MetricAlert) ToMetricAlertOutputWithContext(ctx context.Context) MetricAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertOutput)
}

// MetricAlertArrayInput is an input type that accepts MetricAlertArray and MetricAlertArrayOutput values.
// You can construct a concrete instance of `MetricAlertArrayInput` via:
//
//	MetricAlertArray{ MetricAlertArgs{...} }
type MetricAlertArrayInput interface {
	pulumi.Input

	ToMetricAlertArrayOutput() MetricAlertArrayOutput
	ToMetricAlertArrayOutputWithContext(context.Context) MetricAlertArrayOutput
}

type MetricAlertArray []MetricAlertInput

func (MetricAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricAlert)(nil)).Elem()
}

func (i MetricAlertArray) ToMetricAlertArrayOutput() MetricAlertArrayOutput {
	return i.ToMetricAlertArrayOutputWithContext(context.Background())
}

func (i MetricAlertArray) ToMetricAlertArrayOutputWithContext(ctx context.Context) MetricAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertArrayOutput)
}

// MetricAlertMapInput is an input type that accepts MetricAlertMap and MetricAlertMapOutput values.
// You can construct a concrete instance of `MetricAlertMapInput` via:
//
//	MetricAlertMap{ "key": MetricAlertArgs{...} }
type MetricAlertMapInput interface {
	pulumi.Input

	ToMetricAlertMapOutput() MetricAlertMapOutput
	ToMetricAlertMapOutputWithContext(context.Context) MetricAlertMapOutput
}

type MetricAlertMap map[string]MetricAlertInput

func (MetricAlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricAlert)(nil)).Elem()
}

func (i MetricAlertMap) ToMetricAlertMapOutput() MetricAlertMapOutput {
	return i.ToMetricAlertMapOutputWithContext(context.Background())
}

func (i MetricAlertMap) ToMetricAlertMapOutputWithContext(ctx context.Context) MetricAlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertMapOutput)
}

type MetricAlertOutput struct{ *pulumi.OutputState }

func (MetricAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlert)(nil)).Elem()
}

func (o MetricAlertOutput) ToMetricAlertOutput() MetricAlertOutput {
	return o
}

func (o MetricAlertOutput) ToMetricAlertOutputWithContext(ctx context.Context) MetricAlertOutput {
	return o
}

// One or more `action` blocks as defined below.
func (o MetricAlertOutput) Actions() MetricAlertActionArrayOutput {
	return o.ApplyT(func(v *MetricAlert) MetricAlertActionArrayOutput { return v.Actions }).(MetricAlertActionArrayOutput)
}

// A `applicationInsightsWebTestLocationAvailabilityCriteria` block as defined below.
//
// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
func (o MetricAlertOutput) ApplicationInsightsWebTestLocationAvailabilityCriteria() MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput {
	return o.ApplyT(func(v *MetricAlert) MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput {
		return v.ApplicationInsightsWebTestLocationAvailabilityCriteria
	}).(MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput)
}

// Should the alerts in this Metric Alert be auto resolved? Defaults to `true`.
func (o MetricAlertOutput) AutoMitigate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.BoolPtrOutput { return v.AutoMitigate }).(pulumi.BoolPtrOutput)
}

// One or more (static) `criteria` blocks as defined below.
//
// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
func (o MetricAlertOutput) Criterias() MetricAlertCriteriaArrayOutput {
	return o.ApplyT(func(v *MetricAlert) MetricAlertCriteriaArrayOutput { return v.Criterias }).(MetricAlertCriteriaArrayOutput)
}

// The description of this Metric Alert.
func (o MetricAlertOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A `dynamicCriteria` block as defined below.
//
// > **NOTE** One of either `criteria`, `dynamicCriteria` or `applicationInsightsWebTestLocationAvailabilityCriteria` must be specified.
func (o MetricAlertOutput) DynamicCriteria() MetricAlertDynamicCriteriaPtrOutput {
	return o.ApplyT(func(v *MetricAlert) MetricAlertDynamicCriteriaPtrOutput { return v.DynamicCriteria }).(MetricAlertDynamicCriteriaPtrOutput)
}

// Should this Metric Alert be enabled? Defaults to `true`.
func (o MetricAlertOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The evaluation frequency of this Metric Alert, represented in ISO 8601 duration format. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M` and `PT1H`. Defaults to `PT1M`.
func (o MetricAlertOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringPtrOutput { return v.Frequency }).(pulumi.StringPtrOutput)
}

// The name of the Metric Alert. Changing this forces a new resource to be created.
func (o MetricAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the Metric Alert instance. Changing this forces a new resource to be created.
func (o MetricAlertOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A set of strings of resource IDs at which the metric criteria should be applied.
func (o MetricAlertOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The severity of this Metric Alert. Possible values are `0`, `1`, `2`, `3` and `4`. Defaults to `3`.
func (o MetricAlertOutput) Severity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.IntPtrOutput { return v.Severity }).(pulumi.IntPtrOutput)
}

// A mapping of tags to assign to the resource.
func (o MetricAlertOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The location of the target resource.
//
// > This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
func (o MetricAlertOutput) TargetResourceLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringOutput { return v.TargetResourceLocation }).(pulumi.StringOutput)
}

// The resource type (e.g. `Microsoft.Compute/virtualMachines`) of the target resource.
//
// > This is Required when using a Subscription as scope, a Resource Group as scope or Multiple Scopes.
func (o MetricAlertOutput) TargetResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringOutput { return v.TargetResourceType }).(pulumi.StringOutput)
}

// The period of time that is used to monitor alert activity, represented in ISO 8601 duration format. This value must be greater than `frequency`. Possible values are `PT1M`, `PT5M`, `PT15M`, `PT30M`, `PT1H`, `PT6H`, `PT12H` and `P1D`. Defaults to `PT5M`.
func (o MetricAlertOutput) WindowSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlert) pulumi.StringPtrOutput { return v.WindowSize }).(pulumi.StringPtrOutput)
}

type MetricAlertArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MetricAlert)(nil)).Elem()
}

func (o MetricAlertArrayOutput) ToMetricAlertArrayOutput() MetricAlertArrayOutput {
	return o
}

func (o MetricAlertArrayOutput) ToMetricAlertArrayOutputWithContext(ctx context.Context) MetricAlertArrayOutput {
	return o
}

func (o MetricAlertArrayOutput) Index(i pulumi.IntInput) MetricAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MetricAlert {
		return vs[0].([]*MetricAlert)[vs[1].(int)]
	}).(MetricAlertOutput)
}

type MetricAlertMapOutput struct{ *pulumi.OutputState }

func (MetricAlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MetricAlert)(nil)).Elem()
}

func (o MetricAlertMapOutput) ToMetricAlertMapOutput() MetricAlertMapOutput {
	return o
}

func (o MetricAlertMapOutput) ToMetricAlertMapOutputWithContext(ctx context.Context) MetricAlertMapOutput {
	return o
}

func (o MetricAlertMapOutput) MapIndex(k pulumi.StringInput) MetricAlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MetricAlert {
		return vs[0].(map[string]*MetricAlert)[vs[1].(string)]
	}).(MetricAlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertInput)(nil)).Elem(), &MetricAlert{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertArrayInput)(nil)).Elem(), MetricAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertMapInput)(nil)).Elem(), MetricAlertMap{})
	pulumi.RegisterOutputType(MetricAlertOutput{})
	pulumi.RegisterOutputType(MetricAlertArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertMapOutput{})
}
