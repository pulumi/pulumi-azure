// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AadDiagnosticSettingEnabledLog struct {
	// The log category for the Azure Active Directory Diagnostic.
	Category string `pulumi:"category"`
	// A `retentionPolicy` block as defined below.
	RetentionPolicy AadDiagnosticSettingEnabledLogRetentionPolicy `pulumi:"retentionPolicy"`
}

// AadDiagnosticSettingEnabledLogInput is an input type that accepts AadDiagnosticSettingEnabledLogArgs and AadDiagnosticSettingEnabledLogOutput values.
// You can construct a concrete instance of `AadDiagnosticSettingEnabledLogInput` via:
//
//	AadDiagnosticSettingEnabledLogArgs{...}
type AadDiagnosticSettingEnabledLogInput interface {
	pulumi.Input

	ToAadDiagnosticSettingEnabledLogOutput() AadDiagnosticSettingEnabledLogOutput
	ToAadDiagnosticSettingEnabledLogOutputWithContext(context.Context) AadDiagnosticSettingEnabledLogOutput
}

type AadDiagnosticSettingEnabledLogArgs struct {
	// The log category for the Azure Active Directory Diagnostic.
	Category pulumi.StringInput `pulumi:"category"`
	// A `retentionPolicy` block as defined below.
	RetentionPolicy AadDiagnosticSettingEnabledLogRetentionPolicyInput `pulumi:"retentionPolicy"`
}

func (AadDiagnosticSettingEnabledLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AadDiagnosticSettingEnabledLog)(nil)).Elem()
}

func (i AadDiagnosticSettingEnabledLogArgs) ToAadDiagnosticSettingEnabledLogOutput() AadDiagnosticSettingEnabledLogOutput {
	return i.ToAadDiagnosticSettingEnabledLogOutputWithContext(context.Background())
}

func (i AadDiagnosticSettingEnabledLogArgs) ToAadDiagnosticSettingEnabledLogOutputWithContext(ctx context.Context) AadDiagnosticSettingEnabledLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AadDiagnosticSettingEnabledLogOutput)
}

func (i AadDiagnosticSettingEnabledLogArgs) ToOutput(ctx context.Context) pulumix.Output[AadDiagnosticSettingEnabledLog] {
	return pulumix.Output[AadDiagnosticSettingEnabledLog]{
		OutputState: i.ToAadDiagnosticSettingEnabledLogOutputWithContext(ctx).OutputState,
	}
}

// AadDiagnosticSettingEnabledLogArrayInput is an input type that accepts AadDiagnosticSettingEnabledLogArray and AadDiagnosticSettingEnabledLogArrayOutput values.
// You can construct a concrete instance of `AadDiagnosticSettingEnabledLogArrayInput` via:
//
//	AadDiagnosticSettingEnabledLogArray{ AadDiagnosticSettingEnabledLogArgs{...} }
type AadDiagnosticSettingEnabledLogArrayInput interface {
	pulumi.Input

	ToAadDiagnosticSettingEnabledLogArrayOutput() AadDiagnosticSettingEnabledLogArrayOutput
	ToAadDiagnosticSettingEnabledLogArrayOutputWithContext(context.Context) AadDiagnosticSettingEnabledLogArrayOutput
}

type AadDiagnosticSettingEnabledLogArray []AadDiagnosticSettingEnabledLogInput

func (AadDiagnosticSettingEnabledLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AadDiagnosticSettingEnabledLog)(nil)).Elem()
}

func (i AadDiagnosticSettingEnabledLogArray) ToAadDiagnosticSettingEnabledLogArrayOutput() AadDiagnosticSettingEnabledLogArrayOutput {
	return i.ToAadDiagnosticSettingEnabledLogArrayOutputWithContext(context.Background())
}

func (i AadDiagnosticSettingEnabledLogArray) ToAadDiagnosticSettingEnabledLogArrayOutputWithContext(ctx context.Context) AadDiagnosticSettingEnabledLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AadDiagnosticSettingEnabledLogArrayOutput)
}

func (i AadDiagnosticSettingEnabledLogArray) ToOutput(ctx context.Context) pulumix.Output[[]AadDiagnosticSettingEnabledLog] {
	return pulumix.Output[[]AadDiagnosticSettingEnabledLog]{
		OutputState: i.ToAadDiagnosticSettingEnabledLogArrayOutputWithContext(ctx).OutputState,
	}
}

type AadDiagnosticSettingEnabledLogOutput struct{ *pulumi.OutputState }

func (AadDiagnosticSettingEnabledLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AadDiagnosticSettingEnabledLog)(nil)).Elem()
}

func (o AadDiagnosticSettingEnabledLogOutput) ToAadDiagnosticSettingEnabledLogOutput() AadDiagnosticSettingEnabledLogOutput {
	return o
}

func (o AadDiagnosticSettingEnabledLogOutput) ToAadDiagnosticSettingEnabledLogOutputWithContext(ctx context.Context) AadDiagnosticSettingEnabledLogOutput {
	return o
}

func (o AadDiagnosticSettingEnabledLogOutput) ToOutput(ctx context.Context) pulumix.Output[AadDiagnosticSettingEnabledLog] {
	return pulumix.Output[AadDiagnosticSettingEnabledLog]{
		OutputState: o.OutputState,
	}
}

// The log category for the Azure Active Directory Diagnostic.
func (o AadDiagnosticSettingEnabledLogOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v AadDiagnosticSettingEnabledLog) string { return v.Category }).(pulumi.StringOutput)
}

// A `retentionPolicy` block as defined below.
func (o AadDiagnosticSettingEnabledLogOutput) RetentionPolicy() AadDiagnosticSettingEnabledLogRetentionPolicyOutput {
	return o.ApplyT(func(v AadDiagnosticSettingEnabledLog) AadDiagnosticSettingEnabledLogRetentionPolicy {
		return v.RetentionPolicy
	}).(AadDiagnosticSettingEnabledLogRetentionPolicyOutput)
}

type AadDiagnosticSettingEnabledLogArrayOutput struct{ *pulumi.OutputState }

func (AadDiagnosticSettingEnabledLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AadDiagnosticSettingEnabledLog)(nil)).Elem()
}

func (o AadDiagnosticSettingEnabledLogArrayOutput) ToAadDiagnosticSettingEnabledLogArrayOutput() AadDiagnosticSettingEnabledLogArrayOutput {
	return o
}

func (o AadDiagnosticSettingEnabledLogArrayOutput) ToAadDiagnosticSettingEnabledLogArrayOutputWithContext(ctx context.Context) AadDiagnosticSettingEnabledLogArrayOutput {
	return o
}

func (o AadDiagnosticSettingEnabledLogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AadDiagnosticSettingEnabledLog] {
	return pulumix.Output[[]AadDiagnosticSettingEnabledLog]{
		OutputState: o.OutputState,
	}
}

func (o AadDiagnosticSettingEnabledLogArrayOutput) Index(i pulumi.IntInput) AadDiagnosticSettingEnabledLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AadDiagnosticSettingEnabledLog {
		return vs[0].([]AadDiagnosticSettingEnabledLog)[vs[1].(int)]
	}).(AadDiagnosticSettingEnabledLogOutput)
}

type AadDiagnosticSettingEnabledLogRetentionPolicy struct {
	// The number of days for which this Retention Policy should apply. Defaults to `0`.
	Days *int `pulumi:"days"`
	// Is this Retention Policy enabled? Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
}

// AadDiagnosticSettingEnabledLogRetentionPolicyInput is an input type that accepts AadDiagnosticSettingEnabledLogRetentionPolicyArgs and AadDiagnosticSettingEnabledLogRetentionPolicyOutput values.
// You can construct a concrete instance of `AadDiagnosticSettingEnabledLogRetentionPolicyInput` via:
//
//	AadDiagnosticSettingEnabledLogRetentionPolicyArgs{...}
type AadDiagnosticSettingEnabledLogRetentionPolicyInput interface {
	pulumi.Input

	ToAadDiagnosticSettingEnabledLogRetentionPolicyOutput() AadDiagnosticSettingEnabledLogRetentionPolicyOutput
	ToAadDiagnosticSettingEnabledLogRetentionPolicyOutputWithContext(context.Context) AadDiagnosticSettingEnabledLogRetentionPolicyOutput
}

type AadDiagnosticSettingEnabledLogRetentionPolicyArgs struct {
	// The number of days for which this Retention Policy should apply. Defaults to `0`.
	Days pulumi.IntPtrInput `pulumi:"days"`
	// Is this Retention Policy enabled? Defaults to `false`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (AadDiagnosticSettingEnabledLogRetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AadDiagnosticSettingEnabledLogRetentionPolicy)(nil)).Elem()
}

func (i AadDiagnosticSettingEnabledLogRetentionPolicyArgs) ToAadDiagnosticSettingEnabledLogRetentionPolicyOutput() AadDiagnosticSettingEnabledLogRetentionPolicyOutput {
	return i.ToAadDiagnosticSettingEnabledLogRetentionPolicyOutputWithContext(context.Background())
}

func (i AadDiagnosticSettingEnabledLogRetentionPolicyArgs) ToAadDiagnosticSettingEnabledLogRetentionPolicyOutputWithContext(ctx context.Context) AadDiagnosticSettingEnabledLogRetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AadDiagnosticSettingEnabledLogRetentionPolicyOutput)
}

func (i AadDiagnosticSettingEnabledLogRetentionPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[AadDiagnosticSettingEnabledLogRetentionPolicy] {
	return pulumix.Output[AadDiagnosticSettingEnabledLogRetentionPolicy]{
		OutputState: i.ToAadDiagnosticSettingEnabledLogRetentionPolicyOutputWithContext(ctx).OutputState,
	}
}

type AadDiagnosticSettingEnabledLogRetentionPolicyOutput struct{ *pulumi.OutputState }

func (AadDiagnosticSettingEnabledLogRetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AadDiagnosticSettingEnabledLogRetentionPolicy)(nil)).Elem()
}

func (o AadDiagnosticSettingEnabledLogRetentionPolicyOutput) ToAadDiagnosticSettingEnabledLogRetentionPolicyOutput() AadDiagnosticSettingEnabledLogRetentionPolicyOutput {
	return o
}

func (o AadDiagnosticSettingEnabledLogRetentionPolicyOutput) ToAadDiagnosticSettingEnabledLogRetentionPolicyOutputWithContext(ctx context.Context) AadDiagnosticSettingEnabledLogRetentionPolicyOutput {
	return o
}

func (o AadDiagnosticSettingEnabledLogRetentionPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[AadDiagnosticSettingEnabledLogRetentionPolicy] {
	return pulumix.Output[AadDiagnosticSettingEnabledLogRetentionPolicy]{
		OutputState: o.OutputState,
	}
}

// The number of days for which this Retention Policy should apply. Defaults to `0`.
func (o AadDiagnosticSettingEnabledLogRetentionPolicyOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AadDiagnosticSettingEnabledLogRetentionPolicy) *int { return v.Days }).(pulumi.IntPtrOutput)
}

// Is this Retention Policy enabled? Defaults to `false`.
func (o AadDiagnosticSettingEnabledLogRetentionPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AadDiagnosticSettingEnabledLogRetentionPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AadDiagnosticSettingLog struct {
	// The log category for the Azure Active Directory Diagnostic.
	Category string `pulumi:"category"`
	// Is this Diagnostic Log enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// A `retentionPolicy` block as defined below.
	RetentionPolicy AadDiagnosticSettingLogRetentionPolicy `pulumi:"retentionPolicy"`
}

// AadDiagnosticSettingLogInput is an input type that accepts AadDiagnosticSettingLogArgs and AadDiagnosticSettingLogOutput values.
// You can construct a concrete instance of `AadDiagnosticSettingLogInput` via:
//
//	AadDiagnosticSettingLogArgs{...}
type AadDiagnosticSettingLogInput interface {
	pulumi.Input

	ToAadDiagnosticSettingLogOutput() AadDiagnosticSettingLogOutput
	ToAadDiagnosticSettingLogOutputWithContext(context.Context) AadDiagnosticSettingLogOutput
}

type AadDiagnosticSettingLogArgs struct {
	// The log category for the Azure Active Directory Diagnostic.
	Category pulumi.StringInput `pulumi:"category"`
	// Is this Diagnostic Log enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// A `retentionPolicy` block as defined below.
	RetentionPolicy AadDiagnosticSettingLogRetentionPolicyInput `pulumi:"retentionPolicy"`
}

func (AadDiagnosticSettingLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AadDiagnosticSettingLog)(nil)).Elem()
}

func (i AadDiagnosticSettingLogArgs) ToAadDiagnosticSettingLogOutput() AadDiagnosticSettingLogOutput {
	return i.ToAadDiagnosticSettingLogOutputWithContext(context.Background())
}

func (i AadDiagnosticSettingLogArgs) ToAadDiagnosticSettingLogOutputWithContext(ctx context.Context) AadDiagnosticSettingLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AadDiagnosticSettingLogOutput)
}

func (i AadDiagnosticSettingLogArgs) ToOutput(ctx context.Context) pulumix.Output[AadDiagnosticSettingLog] {
	return pulumix.Output[AadDiagnosticSettingLog]{
		OutputState: i.ToAadDiagnosticSettingLogOutputWithContext(ctx).OutputState,
	}
}

// AadDiagnosticSettingLogArrayInput is an input type that accepts AadDiagnosticSettingLogArray and AadDiagnosticSettingLogArrayOutput values.
// You can construct a concrete instance of `AadDiagnosticSettingLogArrayInput` via:
//
//	AadDiagnosticSettingLogArray{ AadDiagnosticSettingLogArgs{...} }
type AadDiagnosticSettingLogArrayInput interface {
	pulumi.Input

	ToAadDiagnosticSettingLogArrayOutput() AadDiagnosticSettingLogArrayOutput
	ToAadDiagnosticSettingLogArrayOutputWithContext(context.Context) AadDiagnosticSettingLogArrayOutput
}

type AadDiagnosticSettingLogArray []AadDiagnosticSettingLogInput

func (AadDiagnosticSettingLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AadDiagnosticSettingLog)(nil)).Elem()
}

func (i AadDiagnosticSettingLogArray) ToAadDiagnosticSettingLogArrayOutput() AadDiagnosticSettingLogArrayOutput {
	return i.ToAadDiagnosticSettingLogArrayOutputWithContext(context.Background())
}

func (i AadDiagnosticSettingLogArray) ToAadDiagnosticSettingLogArrayOutputWithContext(ctx context.Context) AadDiagnosticSettingLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AadDiagnosticSettingLogArrayOutput)
}

func (i AadDiagnosticSettingLogArray) ToOutput(ctx context.Context) pulumix.Output[[]AadDiagnosticSettingLog] {
	return pulumix.Output[[]AadDiagnosticSettingLog]{
		OutputState: i.ToAadDiagnosticSettingLogArrayOutputWithContext(ctx).OutputState,
	}
}

type AadDiagnosticSettingLogOutput struct{ *pulumi.OutputState }

func (AadDiagnosticSettingLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AadDiagnosticSettingLog)(nil)).Elem()
}

func (o AadDiagnosticSettingLogOutput) ToAadDiagnosticSettingLogOutput() AadDiagnosticSettingLogOutput {
	return o
}

func (o AadDiagnosticSettingLogOutput) ToAadDiagnosticSettingLogOutputWithContext(ctx context.Context) AadDiagnosticSettingLogOutput {
	return o
}

func (o AadDiagnosticSettingLogOutput) ToOutput(ctx context.Context) pulumix.Output[AadDiagnosticSettingLog] {
	return pulumix.Output[AadDiagnosticSettingLog]{
		OutputState: o.OutputState,
	}
}

// The log category for the Azure Active Directory Diagnostic.
func (o AadDiagnosticSettingLogOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v AadDiagnosticSettingLog) string { return v.Category }).(pulumi.StringOutput)
}

// Is this Diagnostic Log enabled? Defaults to `true`.
func (o AadDiagnosticSettingLogOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AadDiagnosticSettingLog) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A `retentionPolicy` block as defined below.
func (o AadDiagnosticSettingLogOutput) RetentionPolicy() AadDiagnosticSettingLogRetentionPolicyOutput {
	return o.ApplyT(func(v AadDiagnosticSettingLog) AadDiagnosticSettingLogRetentionPolicy { return v.RetentionPolicy }).(AadDiagnosticSettingLogRetentionPolicyOutput)
}

type AadDiagnosticSettingLogArrayOutput struct{ *pulumi.OutputState }

func (AadDiagnosticSettingLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AadDiagnosticSettingLog)(nil)).Elem()
}

func (o AadDiagnosticSettingLogArrayOutput) ToAadDiagnosticSettingLogArrayOutput() AadDiagnosticSettingLogArrayOutput {
	return o
}

func (o AadDiagnosticSettingLogArrayOutput) ToAadDiagnosticSettingLogArrayOutputWithContext(ctx context.Context) AadDiagnosticSettingLogArrayOutput {
	return o
}

func (o AadDiagnosticSettingLogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AadDiagnosticSettingLog] {
	return pulumix.Output[[]AadDiagnosticSettingLog]{
		OutputState: o.OutputState,
	}
}

func (o AadDiagnosticSettingLogArrayOutput) Index(i pulumi.IntInput) AadDiagnosticSettingLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AadDiagnosticSettingLog {
		return vs[0].([]AadDiagnosticSettingLog)[vs[1].(int)]
	}).(AadDiagnosticSettingLogOutput)
}

type AadDiagnosticSettingLogRetentionPolicy struct {
	// The number of days for which this Retention Policy should apply. Defaults to `0`.
	Days *int `pulumi:"days"`
	// Is this Retention Policy enabled? Defaults to `false`.
	Enabled *bool `pulumi:"enabled"`
}

// AadDiagnosticSettingLogRetentionPolicyInput is an input type that accepts AadDiagnosticSettingLogRetentionPolicyArgs and AadDiagnosticSettingLogRetentionPolicyOutput values.
// You can construct a concrete instance of `AadDiagnosticSettingLogRetentionPolicyInput` via:
//
//	AadDiagnosticSettingLogRetentionPolicyArgs{...}
type AadDiagnosticSettingLogRetentionPolicyInput interface {
	pulumi.Input

	ToAadDiagnosticSettingLogRetentionPolicyOutput() AadDiagnosticSettingLogRetentionPolicyOutput
	ToAadDiagnosticSettingLogRetentionPolicyOutputWithContext(context.Context) AadDiagnosticSettingLogRetentionPolicyOutput
}

type AadDiagnosticSettingLogRetentionPolicyArgs struct {
	// The number of days for which this Retention Policy should apply. Defaults to `0`.
	Days pulumi.IntPtrInput `pulumi:"days"`
	// Is this Retention Policy enabled? Defaults to `false`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (AadDiagnosticSettingLogRetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AadDiagnosticSettingLogRetentionPolicy)(nil)).Elem()
}

func (i AadDiagnosticSettingLogRetentionPolicyArgs) ToAadDiagnosticSettingLogRetentionPolicyOutput() AadDiagnosticSettingLogRetentionPolicyOutput {
	return i.ToAadDiagnosticSettingLogRetentionPolicyOutputWithContext(context.Background())
}

func (i AadDiagnosticSettingLogRetentionPolicyArgs) ToAadDiagnosticSettingLogRetentionPolicyOutputWithContext(ctx context.Context) AadDiagnosticSettingLogRetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AadDiagnosticSettingLogRetentionPolicyOutput)
}

func (i AadDiagnosticSettingLogRetentionPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[AadDiagnosticSettingLogRetentionPolicy] {
	return pulumix.Output[AadDiagnosticSettingLogRetentionPolicy]{
		OutputState: i.ToAadDiagnosticSettingLogRetentionPolicyOutputWithContext(ctx).OutputState,
	}
}

type AadDiagnosticSettingLogRetentionPolicyOutput struct{ *pulumi.OutputState }

func (AadDiagnosticSettingLogRetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AadDiagnosticSettingLogRetentionPolicy)(nil)).Elem()
}

func (o AadDiagnosticSettingLogRetentionPolicyOutput) ToAadDiagnosticSettingLogRetentionPolicyOutput() AadDiagnosticSettingLogRetentionPolicyOutput {
	return o
}

func (o AadDiagnosticSettingLogRetentionPolicyOutput) ToAadDiagnosticSettingLogRetentionPolicyOutputWithContext(ctx context.Context) AadDiagnosticSettingLogRetentionPolicyOutput {
	return o
}

func (o AadDiagnosticSettingLogRetentionPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[AadDiagnosticSettingLogRetentionPolicy] {
	return pulumix.Output[AadDiagnosticSettingLogRetentionPolicy]{
		OutputState: o.OutputState,
	}
}

// The number of days for which this Retention Policy should apply. Defaults to `0`.
func (o AadDiagnosticSettingLogRetentionPolicyOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AadDiagnosticSettingLogRetentionPolicy) *int { return v.Days }).(pulumi.IntPtrOutput)
}

// Is this Retention Policy enabled? Defaults to `false`.
func (o AadDiagnosticSettingLogRetentionPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AadDiagnosticSettingLogRetentionPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ActionGroupArmRoleReceiver struct {
	// The name of the ARM role receiver.
	Name string `pulumi:"name"`
	// The arm role id.
	RoleId string `pulumi:"roleId"`
	// Enables or disables the common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// ActionGroupArmRoleReceiverInput is an input type that accepts ActionGroupArmRoleReceiverArgs and ActionGroupArmRoleReceiverOutput values.
// You can construct a concrete instance of `ActionGroupArmRoleReceiverInput` via:
//
//	ActionGroupArmRoleReceiverArgs{...}
type ActionGroupArmRoleReceiverInput interface {
	pulumi.Input

	ToActionGroupArmRoleReceiverOutput() ActionGroupArmRoleReceiverOutput
	ToActionGroupArmRoleReceiverOutputWithContext(context.Context) ActionGroupArmRoleReceiverOutput
}

type ActionGroupArmRoleReceiverArgs struct {
	// The name of the ARM role receiver.
	Name pulumi.StringInput `pulumi:"name"`
	// The arm role id.
	RoleId pulumi.StringInput `pulumi:"roleId"`
	// Enables or disables the common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
}

func (ActionGroupArmRoleReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupArmRoleReceiver)(nil)).Elem()
}

func (i ActionGroupArmRoleReceiverArgs) ToActionGroupArmRoleReceiverOutput() ActionGroupArmRoleReceiverOutput {
	return i.ToActionGroupArmRoleReceiverOutputWithContext(context.Background())
}

func (i ActionGroupArmRoleReceiverArgs) ToActionGroupArmRoleReceiverOutputWithContext(ctx context.Context) ActionGroupArmRoleReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupArmRoleReceiverOutput)
}

func (i ActionGroupArmRoleReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[ActionGroupArmRoleReceiver] {
	return pulumix.Output[ActionGroupArmRoleReceiver]{
		OutputState: i.ToActionGroupArmRoleReceiverOutputWithContext(ctx).OutputState,
	}
}

// ActionGroupArmRoleReceiverArrayInput is an input type that accepts ActionGroupArmRoleReceiverArray and ActionGroupArmRoleReceiverArrayOutput values.
// You can construct a concrete instance of `ActionGroupArmRoleReceiverArrayInput` via:
//
//	ActionGroupArmRoleReceiverArray{ ActionGroupArmRoleReceiverArgs{...} }
type ActionGroupArmRoleReceiverArrayInput interface {
	pulumi.Input

	ToActionGroupArmRoleReceiverArrayOutput() ActionGroupArmRoleReceiverArrayOutput
	ToActionGroupArmRoleReceiverArrayOutputWithContext(context.Context) ActionGroupArmRoleReceiverArrayOutput
}

type ActionGroupArmRoleReceiverArray []ActionGroupArmRoleReceiverInput

func (ActionGroupArmRoleReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupArmRoleReceiver)(nil)).Elem()
}

func (i ActionGroupArmRoleReceiverArray) ToActionGroupArmRoleReceiverArrayOutput() ActionGroupArmRoleReceiverArrayOutput {
	return i.ToActionGroupArmRoleReceiverArrayOutputWithContext(context.Background())
}

func (i ActionGroupArmRoleReceiverArray) ToActionGroupArmRoleReceiverArrayOutputWithContext(ctx context.Context) ActionGroupArmRoleReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupArmRoleReceiverArrayOutput)
}

func (i ActionGroupArmRoleReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupArmRoleReceiver] {
	return pulumix.Output[[]ActionGroupArmRoleReceiver]{
		OutputState: i.ToActionGroupArmRoleReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type ActionGroupArmRoleReceiverOutput struct{ *pulumi.OutputState }

func (ActionGroupArmRoleReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupArmRoleReceiver)(nil)).Elem()
}

func (o ActionGroupArmRoleReceiverOutput) ToActionGroupArmRoleReceiverOutput() ActionGroupArmRoleReceiverOutput {
	return o
}

func (o ActionGroupArmRoleReceiverOutput) ToActionGroupArmRoleReceiverOutputWithContext(ctx context.Context) ActionGroupArmRoleReceiverOutput {
	return o
}

func (o ActionGroupArmRoleReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[ActionGroupArmRoleReceiver] {
	return pulumix.Output[ActionGroupArmRoleReceiver]{
		OutputState: o.OutputState,
	}
}

// The name of the ARM role receiver.
func (o ActionGroupArmRoleReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupArmRoleReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The arm role id.
func (o ActionGroupArmRoleReceiverOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupArmRoleReceiver) string { return v.RoleId }).(pulumi.StringOutput)
}

// Enables or disables the common alert schema.
func (o ActionGroupArmRoleReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionGroupArmRoleReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type ActionGroupArmRoleReceiverArrayOutput struct{ *pulumi.OutputState }

func (ActionGroupArmRoleReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupArmRoleReceiver)(nil)).Elem()
}

func (o ActionGroupArmRoleReceiverArrayOutput) ToActionGroupArmRoleReceiverArrayOutput() ActionGroupArmRoleReceiverArrayOutput {
	return o
}

func (o ActionGroupArmRoleReceiverArrayOutput) ToActionGroupArmRoleReceiverArrayOutputWithContext(ctx context.Context) ActionGroupArmRoleReceiverArrayOutput {
	return o
}

func (o ActionGroupArmRoleReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupArmRoleReceiver] {
	return pulumix.Output[[]ActionGroupArmRoleReceiver]{
		OutputState: o.OutputState,
	}
}

func (o ActionGroupArmRoleReceiverArrayOutput) Index(i pulumi.IntInput) ActionGroupArmRoleReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionGroupArmRoleReceiver {
		return vs[0].([]ActionGroupArmRoleReceiver)[vs[1].(int)]
	}).(ActionGroupArmRoleReceiverOutput)
}

type ActionGroupAutomationRunbookReceiver struct {
	// The automation account ID which holds this runbook and authenticates to Azure resources.
	AutomationAccountId string `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook bool `pulumi:"isGlobalRunbook"`
	// The name of the automation runbook receiver.
	Name string `pulumi:"name"`
	// The name for this runbook.
	RunbookName string `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri string `pulumi:"serviceUri"`
	// Enables or disables the common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId string `pulumi:"webhookResourceId"`
}

// ActionGroupAutomationRunbookReceiverInput is an input type that accepts ActionGroupAutomationRunbookReceiverArgs and ActionGroupAutomationRunbookReceiverOutput values.
// You can construct a concrete instance of `ActionGroupAutomationRunbookReceiverInput` via:
//
//	ActionGroupAutomationRunbookReceiverArgs{...}
type ActionGroupAutomationRunbookReceiverInput interface {
	pulumi.Input

	ToActionGroupAutomationRunbookReceiverOutput() ActionGroupAutomationRunbookReceiverOutput
	ToActionGroupAutomationRunbookReceiverOutputWithContext(context.Context) ActionGroupAutomationRunbookReceiverOutput
}

type ActionGroupAutomationRunbookReceiverArgs struct {
	// The automation account ID which holds this runbook and authenticates to Azure resources.
	AutomationAccountId pulumi.StringInput `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook pulumi.BoolInput `pulumi:"isGlobalRunbook"`
	// The name of the automation runbook receiver.
	Name pulumi.StringInput `pulumi:"name"`
	// The name for this runbook.
	RunbookName pulumi.StringInput `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringInput `pulumi:"serviceUri"`
	// Enables or disables the common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId pulumi.StringInput `pulumi:"webhookResourceId"`
}

func (ActionGroupAutomationRunbookReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupAutomationRunbookReceiver)(nil)).Elem()
}

func (i ActionGroupAutomationRunbookReceiverArgs) ToActionGroupAutomationRunbookReceiverOutput() ActionGroupAutomationRunbookReceiverOutput {
	return i.ToActionGroupAutomationRunbookReceiverOutputWithContext(context.Background())
}

func (i ActionGroupAutomationRunbookReceiverArgs) ToActionGroupAutomationRunbookReceiverOutputWithContext(ctx context.Context) ActionGroupAutomationRunbookReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupAutomationRunbookReceiverOutput)
}

func (i ActionGroupAutomationRunbookReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[ActionGroupAutomationRunbookReceiver] {
	return pulumix.Output[ActionGroupAutomationRunbookReceiver]{
		OutputState: i.ToActionGroupAutomationRunbookReceiverOutputWithContext(ctx).OutputState,
	}
}

// ActionGroupAutomationRunbookReceiverArrayInput is an input type that accepts ActionGroupAutomationRunbookReceiverArray and ActionGroupAutomationRunbookReceiverArrayOutput values.
// You can construct a concrete instance of `ActionGroupAutomationRunbookReceiverArrayInput` via:
//
//	ActionGroupAutomationRunbookReceiverArray{ ActionGroupAutomationRunbookReceiverArgs{...} }
type ActionGroupAutomationRunbookReceiverArrayInput interface {
	pulumi.Input

	ToActionGroupAutomationRunbookReceiverArrayOutput() ActionGroupAutomationRunbookReceiverArrayOutput
	ToActionGroupAutomationRunbookReceiverArrayOutputWithContext(context.Context) ActionGroupAutomationRunbookReceiverArrayOutput
}

type ActionGroupAutomationRunbookReceiverArray []ActionGroupAutomationRunbookReceiverInput

func (ActionGroupAutomationRunbookReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupAutomationRunbookReceiver)(nil)).Elem()
}

func (i ActionGroupAutomationRunbookReceiverArray) ToActionGroupAutomationRunbookReceiverArrayOutput() ActionGroupAutomationRunbookReceiverArrayOutput {
	return i.ToActionGroupAutomationRunbookReceiverArrayOutputWithContext(context.Background())
}

func (i ActionGroupAutomationRunbookReceiverArray) ToActionGroupAutomationRunbookReceiverArrayOutputWithContext(ctx context.Context) ActionGroupAutomationRunbookReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupAutomationRunbookReceiverArrayOutput)
}

func (i ActionGroupAutomationRunbookReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupAutomationRunbookReceiver] {
	return pulumix.Output[[]ActionGroupAutomationRunbookReceiver]{
		OutputState: i.ToActionGroupAutomationRunbookReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type ActionGroupAutomationRunbookReceiverOutput struct{ *pulumi.OutputState }

func (ActionGroupAutomationRunbookReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupAutomationRunbookReceiver)(nil)).Elem()
}

func (o ActionGroupAutomationRunbookReceiverOutput) ToActionGroupAutomationRunbookReceiverOutput() ActionGroupAutomationRunbookReceiverOutput {
	return o
}

func (o ActionGroupAutomationRunbookReceiverOutput) ToActionGroupAutomationRunbookReceiverOutputWithContext(ctx context.Context) ActionGroupAutomationRunbookReceiverOutput {
	return o
}

func (o ActionGroupAutomationRunbookReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[ActionGroupAutomationRunbookReceiver] {
	return pulumix.Output[ActionGroupAutomationRunbookReceiver]{
		OutputState: o.OutputState,
	}
}

// The automation account ID which holds this runbook and authenticates to Azure resources.
func (o ActionGroupAutomationRunbookReceiverOutput) AutomationAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupAutomationRunbookReceiver) string { return v.AutomationAccountId }).(pulumi.StringOutput)
}

// Indicates whether this instance is global runbook.
func (o ActionGroupAutomationRunbookReceiverOutput) IsGlobalRunbook() pulumi.BoolOutput {
	return o.ApplyT(func(v ActionGroupAutomationRunbookReceiver) bool { return v.IsGlobalRunbook }).(pulumi.BoolOutput)
}

// The name of the automation runbook receiver.
func (o ActionGroupAutomationRunbookReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupAutomationRunbookReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The name for this runbook.
func (o ActionGroupAutomationRunbookReceiverOutput) RunbookName() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupAutomationRunbookReceiver) string { return v.RunbookName }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o ActionGroupAutomationRunbookReceiverOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupAutomationRunbookReceiver) string { return v.ServiceUri }).(pulumi.StringOutput)
}

// Enables or disables the common alert schema.
func (o ActionGroupAutomationRunbookReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionGroupAutomationRunbookReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

// The resource id for webhook linked to this runbook.
func (o ActionGroupAutomationRunbookReceiverOutput) WebhookResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupAutomationRunbookReceiver) string { return v.WebhookResourceId }).(pulumi.StringOutput)
}

type ActionGroupAutomationRunbookReceiverArrayOutput struct{ *pulumi.OutputState }

func (ActionGroupAutomationRunbookReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupAutomationRunbookReceiver)(nil)).Elem()
}

func (o ActionGroupAutomationRunbookReceiverArrayOutput) ToActionGroupAutomationRunbookReceiverArrayOutput() ActionGroupAutomationRunbookReceiverArrayOutput {
	return o
}

func (o ActionGroupAutomationRunbookReceiverArrayOutput) ToActionGroupAutomationRunbookReceiverArrayOutputWithContext(ctx context.Context) ActionGroupAutomationRunbookReceiverArrayOutput {
	return o
}

func (o ActionGroupAutomationRunbookReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupAutomationRunbookReceiver] {
	return pulumix.Output[[]ActionGroupAutomationRunbookReceiver]{
		OutputState: o.OutputState,
	}
}

func (o ActionGroupAutomationRunbookReceiverArrayOutput) Index(i pulumi.IntInput) ActionGroupAutomationRunbookReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionGroupAutomationRunbookReceiver {
		return vs[0].([]ActionGroupAutomationRunbookReceiver)[vs[1].(int)]
	}).(ActionGroupAutomationRunbookReceiverOutput)
}

type ActionGroupAzureAppPushReceiver struct {
	// The email address of the user signed into the mobile app who will receive push notifications from this receiver.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the Azure app push receiver.
	Name string `pulumi:"name"`
}

// ActionGroupAzureAppPushReceiverInput is an input type that accepts ActionGroupAzureAppPushReceiverArgs and ActionGroupAzureAppPushReceiverOutput values.
// You can construct a concrete instance of `ActionGroupAzureAppPushReceiverInput` via:
//
//	ActionGroupAzureAppPushReceiverArgs{...}
type ActionGroupAzureAppPushReceiverInput interface {
	pulumi.Input

	ToActionGroupAzureAppPushReceiverOutput() ActionGroupAzureAppPushReceiverOutput
	ToActionGroupAzureAppPushReceiverOutputWithContext(context.Context) ActionGroupAzureAppPushReceiverOutput
}

type ActionGroupAzureAppPushReceiverArgs struct {
	// The email address of the user signed into the mobile app who will receive push notifications from this receiver.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the Azure app push receiver.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ActionGroupAzureAppPushReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupAzureAppPushReceiver)(nil)).Elem()
}

func (i ActionGroupAzureAppPushReceiverArgs) ToActionGroupAzureAppPushReceiverOutput() ActionGroupAzureAppPushReceiverOutput {
	return i.ToActionGroupAzureAppPushReceiverOutputWithContext(context.Background())
}

func (i ActionGroupAzureAppPushReceiverArgs) ToActionGroupAzureAppPushReceiverOutputWithContext(ctx context.Context) ActionGroupAzureAppPushReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupAzureAppPushReceiverOutput)
}

func (i ActionGroupAzureAppPushReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[ActionGroupAzureAppPushReceiver] {
	return pulumix.Output[ActionGroupAzureAppPushReceiver]{
		OutputState: i.ToActionGroupAzureAppPushReceiverOutputWithContext(ctx).OutputState,
	}
}

// ActionGroupAzureAppPushReceiverArrayInput is an input type that accepts ActionGroupAzureAppPushReceiverArray and ActionGroupAzureAppPushReceiverArrayOutput values.
// You can construct a concrete instance of `ActionGroupAzureAppPushReceiverArrayInput` via:
//
//	ActionGroupAzureAppPushReceiverArray{ ActionGroupAzureAppPushReceiverArgs{...} }
type ActionGroupAzureAppPushReceiverArrayInput interface {
	pulumi.Input

	ToActionGroupAzureAppPushReceiverArrayOutput() ActionGroupAzureAppPushReceiverArrayOutput
	ToActionGroupAzureAppPushReceiverArrayOutputWithContext(context.Context) ActionGroupAzureAppPushReceiverArrayOutput
}

type ActionGroupAzureAppPushReceiverArray []ActionGroupAzureAppPushReceiverInput

func (ActionGroupAzureAppPushReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupAzureAppPushReceiver)(nil)).Elem()
}

func (i ActionGroupAzureAppPushReceiverArray) ToActionGroupAzureAppPushReceiverArrayOutput() ActionGroupAzureAppPushReceiverArrayOutput {
	return i.ToActionGroupAzureAppPushReceiverArrayOutputWithContext(context.Background())
}

func (i ActionGroupAzureAppPushReceiverArray) ToActionGroupAzureAppPushReceiverArrayOutputWithContext(ctx context.Context) ActionGroupAzureAppPushReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupAzureAppPushReceiverArrayOutput)
}

func (i ActionGroupAzureAppPushReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupAzureAppPushReceiver] {
	return pulumix.Output[[]ActionGroupAzureAppPushReceiver]{
		OutputState: i.ToActionGroupAzureAppPushReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type ActionGroupAzureAppPushReceiverOutput struct{ *pulumi.OutputState }

func (ActionGroupAzureAppPushReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupAzureAppPushReceiver)(nil)).Elem()
}

func (o ActionGroupAzureAppPushReceiverOutput) ToActionGroupAzureAppPushReceiverOutput() ActionGroupAzureAppPushReceiverOutput {
	return o
}

func (o ActionGroupAzureAppPushReceiverOutput) ToActionGroupAzureAppPushReceiverOutputWithContext(ctx context.Context) ActionGroupAzureAppPushReceiverOutput {
	return o
}

func (o ActionGroupAzureAppPushReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[ActionGroupAzureAppPushReceiver] {
	return pulumix.Output[ActionGroupAzureAppPushReceiver]{
		OutputState: o.OutputState,
	}
}

// The email address of the user signed into the mobile app who will receive push notifications from this receiver.
func (o ActionGroupAzureAppPushReceiverOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupAzureAppPushReceiver) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the Azure app push receiver.
func (o ActionGroupAzureAppPushReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupAzureAppPushReceiver) string { return v.Name }).(pulumi.StringOutput)
}

type ActionGroupAzureAppPushReceiverArrayOutput struct{ *pulumi.OutputState }

func (ActionGroupAzureAppPushReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupAzureAppPushReceiver)(nil)).Elem()
}

func (o ActionGroupAzureAppPushReceiverArrayOutput) ToActionGroupAzureAppPushReceiverArrayOutput() ActionGroupAzureAppPushReceiverArrayOutput {
	return o
}

func (o ActionGroupAzureAppPushReceiverArrayOutput) ToActionGroupAzureAppPushReceiverArrayOutputWithContext(ctx context.Context) ActionGroupAzureAppPushReceiverArrayOutput {
	return o
}

func (o ActionGroupAzureAppPushReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupAzureAppPushReceiver] {
	return pulumix.Output[[]ActionGroupAzureAppPushReceiver]{
		OutputState: o.OutputState,
	}
}

func (o ActionGroupAzureAppPushReceiverArrayOutput) Index(i pulumi.IntInput) ActionGroupAzureAppPushReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionGroupAzureAppPushReceiver {
		return vs[0].([]ActionGroupAzureAppPushReceiver)[vs[1].(int)]
	}).(ActionGroupAzureAppPushReceiverOutput)
}

type ActionGroupAzureFunctionReceiver struct {
	// The Azure resource ID of the function app.
	FunctionAppResourceId string `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName string `pulumi:"functionName"`
	// The HTTP trigger url where HTTP request sent to.
	HttpTriggerUrl string `pulumi:"httpTriggerUrl"`
	// The name of the Azure Function receiver.
	Name string `pulumi:"name"`
	// Enables or disables the common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// ActionGroupAzureFunctionReceiverInput is an input type that accepts ActionGroupAzureFunctionReceiverArgs and ActionGroupAzureFunctionReceiverOutput values.
// You can construct a concrete instance of `ActionGroupAzureFunctionReceiverInput` via:
//
//	ActionGroupAzureFunctionReceiverArgs{...}
type ActionGroupAzureFunctionReceiverInput interface {
	pulumi.Input

	ToActionGroupAzureFunctionReceiverOutput() ActionGroupAzureFunctionReceiverOutput
	ToActionGroupAzureFunctionReceiverOutputWithContext(context.Context) ActionGroupAzureFunctionReceiverOutput
}

type ActionGroupAzureFunctionReceiverArgs struct {
	// The Azure resource ID of the function app.
	FunctionAppResourceId pulumi.StringInput `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// The HTTP trigger url where HTTP request sent to.
	HttpTriggerUrl pulumi.StringInput `pulumi:"httpTriggerUrl"`
	// The name of the Azure Function receiver.
	Name pulumi.StringInput `pulumi:"name"`
	// Enables or disables the common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
}

func (ActionGroupAzureFunctionReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupAzureFunctionReceiver)(nil)).Elem()
}

func (i ActionGroupAzureFunctionReceiverArgs) ToActionGroupAzureFunctionReceiverOutput() ActionGroupAzureFunctionReceiverOutput {
	return i.ToActionGroupAzureFunctionReceiverOutputWithContext(context.Background())
}

func (i ActionGroupAzureFunctionReceiverArgs) ToActionGroupAzureFunctionReceiverOutputWithContext(ctx context.Context) ActionGroupAzureFunctionReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupAzureFunctionReceiverOutput)
}

func (i ActionGroupAzureFunctionReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[ActionGroupAzureFunctionReceiver] {
	return pulumix.Output[ActionGroupAzureFunctionReceiver]{
		OutputState: i.ToActionGroupAzureFunctionReceiverOutputWithContext(ctx).OutputState,
	}
}

// ActionGroupAzureFunctionReceiverArrayInput is an input type that accepts ActionGroupAzureFunctionReceiverArray and ActionGroupAzureFunctionReceiverArrayOutput values.
// You can construct a concrete instance of `ActionGroupAzureFunctionReceiverArrayInput` via:
//
//	ActionGroupAzureFunctionReceiverArray{ ActionGroupAzureFunctionReceiverArgs{...} }
type ActionGroupAzureFunctionReceiverArrayInput interface {
	pulumi.Input

	ToActionGroupAzureFunctionReceiverArrayOutput() ActionGroupAzureFunctionReceiverArrayOutput
	ToActionGroupAzureFunctionReceiverArrayOutputWithContext(context.Context) ActionGroupAzureFunctionReceiverArrayOutput
}

type ActionGroupAzureFunctionReceiverArray []ActionGroupAzureFunctionReceiverInput

func (ActionGroupAzureFunctionReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupAzureFunctionReceiver)(nil)).Elem()
}

func (i ActionGroupAzureFunctionReceiverArray) ToActionGroupAzureFunctionReceiverArrayOutput() ActionGroupAzureFunctionReceiverArrayOutput {
	return i.ToActionGroupAzureFunctionReceiverArrayOutputWithContext(context.Background())
}

func (i ActionGroupAzureFunctionReceiverArray) ToActionGroupAzureFunctionReceiverArrayOutputWithContext(ctx context.Context) ActionGroupAzureFunctionReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupAzureFunctionReceiverArrayOutput)
}

func (i ActionGroupAzureFunctionReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupAzureFunctionReceiver] {
	return pulumix.Output[[]ActionGroupAzureFunctionReceiver]{
		OutputState: i.ToActionGroupAzureFunctionReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type ActionGroupAzureFunctionReceiverOutput struct{ *pulumi.OutputState }

func (ActionGroupAzureFunctionReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupAzureFunctionReceiver)(nil)).Elem()
}

func (o ActionGroupAzureFunctionReceiverOutput) ToActionGroupAzureFunctionReceiverOutput() ActionGroupAzureFunctionReceiverOutput {
	return o
}

func (o ActionGroupAzureFunctionReceiverOutput) ToActionGroupAzureFunctionReceiverOutputWithContext(ctx context.Context) ActionGroupAzureFunctionReceiverOutput {
	return o
}

func (o ActionGroupAzureFunctionReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[ActionGroupAzureFunctionReceiver] {
	return pulumix.Output[ActionGroupAzureFunctionReceiver]{
		OutputState: o.OutputState,
	}
}

// The Azure resource ID of the function app.
func (o ActionGroupAzureFunctionReceiverOutput) FunctionAppResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupAzureFunctionReceiver) string { return v.FunctionAppResourceId }).(pulumi.StringOutput)
}

// The function name in the function app.
func (o ActionGroupAzureFunctionReceiverOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupAzureFunctionReceiver) string { return v.FunctionName }).(pulumi.StringOutput)
}

// The HTTP trigger url where HTTP request sent to.
func (o ActionGroupAzureFunctionReceiverOutput) HttpTriggerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupAzureFunctionReceiver) string { return v.HttpTriggerUrl }).(pulumi.StringOutput)
}

// The name of the Azure Function receiver.
func (o ActionGroupAzureFunctionReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupAzureFunctionReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// Enables or disables the common alert schema.
func (o ActionGroupAzureFunctionReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionGroupAzureFunctionReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type ActionGroupAzureFunctionReceiverArrayOutput struct{ *pulumi.OutputState }

func (ActionGroupAzureFunctionReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupAzureFunctionReceiver)(nil)).Elem()
}

func (o ActionGroupAzureFunctionReceiverArrayOutput) ToActionGroupAzureFunctionReceiverArrayOutput() ActionGroupAzureFunctionReceiverArrayOutput {
	return o
}

func (o ActionGroupAzureFunctionReceiverArrayOutput) ToActionGroupAzureFunctionReceiverArrayOutputWithContext(ctx context.Context) ActionGroupAzureFunctionReceiverArrayOutput {
	return o
}

func (o ActionGroupAzureFunctionReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupAzureFunctionReceiver] {
	return pulumix.Output[[]ActionGroupAzureFunctionReceiver]{
		OutputState: o.OutputState,
	}
}

func (o ActionGroupAzureFunctionReceiverArrayOutput) Index(i pulumi.IntInput) ActionGroupAzureFunctionReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionGroupAzureFunctionReceiver {
		return vs[0].([]ActionGroupAzureFunctionReceiver)[vs[1].(int)]
	}).(ActionGroupAzureFunctionReceiverOutput)
}

type ActionGroupEmailReceiver struct {
	// The email address of this receiver.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique (case-insensitive) across all receivers within an action group.
	Name string `pulumi:"name"`
	// Enables or disables the common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// ActionGroupEmailReceiverInput is an input type that accepts ActionGroupEmailReceiverArgs and ActionGroupEmailReceiverOutput values.
// You can construct a concrete instance of `ActionGroupEmailReceiverInput` via:
//
//	ActionGroupEmailReceiverArgs{...}
type ActionGroupEmailReceiverInput interface {
	pulumi.Input

	ToActionGroupEmailReceiverOutput() ActionGroupEmailReceiverOutput
	ToActionGroupEmailReceiverOutputWithContext(context.Context) ActionGroupEmailReceiverOutput
}

type ActionGroupEmailReceiverArgs struct {
	// The email address of this receiver.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique (case-insensitive) across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// Enables or disables the common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
}

func (ActionGroupEmailReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupEmailReceiver)(nil)).Elem()
}

func (i ActionGroupEmailReceiverArgs) ToActionGroupEmailReceiverOutput() ActionGroupEmailReceiverOutput {
	return i.ToActionGroupEmailReceiverOutputWithContext(context.Background())
}

func (i ActionGroupEmailReceiverArgs) ToActionGroupEmailReceiverOutputWithContext(ctx context.Context) ActionGroupEmailReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupEmailReceiverOutput)
}

func (i ActionGroupEmailReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[ActionGroupEmailReceiver] {
	return pulumix.Output[ActionGroupEmailReceiver]{
		OutputState: i.ToActionGroupEmailReceiverOutputWithContext(ctx).OutputState,
	}
}

// ActionGroupEmailReceiverArrayInput is an input type that accepts ActionGroupEmailReceiverArray and ActionGroupEmailReceiverArrayOutput values.
// You can construct a concrete instance of `ActionGroupEmailReceiverArrayInput` via:
//
//	ActionGroupEmailReceiverArray{ ActionGroupEmailReceiverArgs{...} }
type ActionGroupEmailReceiverArrayInput interface {
	pulumi.Input

	ToActionGroupEmailReceiverArrayOutput() ActionGroupEmailReceiverArrayOutput
	ToActionGroupEmailReceiverArrayOutputWithContext(context.Context) ActionGroupEmailReceiverArrayOutput
}

type ActionGroupEmailReceiverArray []ActionGroupEmailReceiverInput

func (ActionGroupEmailReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupEmailReceiver)(nil)).Elem()
}

func (i ActionGroupEmailReceiverArray) ToActionGroupEmailReceiverArrayOutput() ActionGroupEmailReceiverArrayOutput {
	return i.ToActionGroupEmailReceiverArrayOutputWithContext(context.Background())
}

func (i ActionGroupEmailReceiverArray) ToActionGroupEmailReceiverArrayOutputWithContext(ctx context.Context) ActionGroupEmailReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupEmailReceiverArrayOutput)
}

func (i ActionGroupEmailReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupEmailReceiver] {
	return pulumix.Output[[]ActionGroupEmailReceiver]{
		OutputState: i.ToActionGroupEmailReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type ActionGroupEmailReceiverOutput struct{ *pulumi.OutputState }

func (ActionGroupEmailReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupEmailReceiver)(nil)).Elem()
}

func (o ActionGroupEmailReceiverOutput) ToActionGroupEmailReceiverOutput() ActionGroupEmailReceiverOutput {
	return o
}

func (o ActionGroupEmailReceiverOutput) ToActionGroupEmailReceiverOutputWithContext(ctx context.Context) ActionGroupEmailReceiverOutput {
	return o
}

func (o ActionGroupEmailReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[ActionGroupEmailReceiver] {
	return pulumix.Output[ActionGroupEmailReceiver]{
		OutputState: o.OutputState,
	}
}

// The email address of this receiver.
func (o ActionGroupEmailReceiverOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupEmailReceiver) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the email receiver. Names must be unique (case-insensitive) across all receivers within an action group.
func (o ActionGroupEmailReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupEmailReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// Enables or disables the common alert schema.
func (o ActionGroupEmailReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionGroupEmailReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type ActionGroupEmailReceiverArrayOutput struct{ *pulumi.OutputState }

func (ActionGroupEmailReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupEmailReceiver)(nil)).Elem()
}

func (o ActionGroupEmailReceiverArrayOutput) ToActionGroupEmailReceiverArrayOutput() ActionGroupEmailReceiverArrayOutput {
	return o
}

func (o ActionGroupEmailReceiverArrayOutput) ToActionGroupEmailReceiverArrayOutputWithContext(ctx context.Context) ActionGroupEmailReceiverArrayOutput {
	return o
}

func (o ActionGroupEmailReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupEmailReceiver] {
	return pulumix.Output[[]ActionGroupEmailReceiver]{
		OutputState: o.OutputState,
	}
}

func (o ActionGroupEmailReceiverArrayOutput) Index(i pulumi.IntInput) ActionGroupEmailReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionGroupEmailReceiver {
		return vs[0].([]ActionGroupEmailReceiver)[vs[1].(int)]
	}).(ActionGroupEmailReceiverOutput)
}

type ActionGroupEventHubReceiver struct {
	// The resource ID of the respective Event Hub.
	//
	// Deprecated: This property is deprecated and will be removed in version 4.0 of the provider, please use 'event_hub_name' and 'event_hub_namespace' instead.
	EventHubId *string `pulumi:"eventHubId"`
	// The name of the specific Event Hub queue.
	EventHubName *string `pulumi:"eventHubName"`
	// The namespace name of the Event Hub.
	EventHubNamespace *string `pulumi:"eventHubNamespace"`
	// The name of the EventHub Receiver, must be unique within action group.
	Name string `pulumi:"name"`
	// The ID for the subscription containing this Event Hub. Default to the subscription ID of the Action Group.
	//
	// > **NOTE:** `eventHubId` is deprecated in version 3.0 and will be removed in version 4.0 of the AzureRM Provider. Please use `eventHubName`, `eventHubName`,and `subscriptionId` instead. And `eventHubName`, `eventHubName` will be required properties in version 4.0.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The Tenant ID for the subscription containing this Event Hub.
	TenantId *string `pulumi:"tenantId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// ActionGroupEventHubReceiverInput is an input type that accepts ActionGroupEventHubReceiverArgs and ActionGroupEventHubReceiverOutput values.
// You can construct a concrete instance of `ActionGroupEventHubReceiverInput` via:
//
//	ActionGroupEventHubReceiverArgs{...}
type ActionGroupEventHubReceiverInput interface {
	pulumi.Input

	ToActionGroupEventHubReceiverOutput() ActionGroupEventHubReceiverOutput
	ToActionGroupEventHubReceiverOutputWithContext(context.Context) ActionGroupEventHubReceiverOutput
}

type ActionGroupEventHubReceiverArgs struct {
	// The resource ID of the respective Event Hub.
	//
	// Deprecated: This property is deprecated and will be removed in version 4.0 of the provider, please use 'event_hub_name' and 'event_hub_namespace' instead.
	EventHubId pulumi.StringPtrInput `pulumi:"eventHubId"`
	// The name of the specific Event Hub queue.
	EventHubName pulumi.StringPtrInput `pulumi:"eventHubName"`
	// The namespace name of the Event Hub.
	EventHubNamespace pulumi.StringPtrInput `pulumi:"eventHubNamespace"`
	// The name of the EventHub Receiver, must be unique within action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID for the subscription containing this Event Hub. Default to the subscription ID of the Action Group.
	//
	// > **NOTE:** `eventHubId` is deprecated in version 3.0 and will be removed in version 4.0 of the AzureRM Provider. Please use `eventHubName`, `eventHubName`,and `subscriptionId` instead. And `eventHubName`, `eventHubName` will be required properties in version 4.0.
	SubscriptionId pulumi.StringPtrInput `pulumi:"subscriptionId"`
	// The Tenant ID for the subscription containing this Event Hub.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
}

func (ActionGroupEventHubReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupEventHubReceiver)(nil)).Elem()
}

func (i ActionGroupEventHubReceiverArgs) ToActionGroupEventHubReceiverOutput() ActionGroupEventHubReceiverOutput {
	return i.ToActionGroupEventHubReceiverOutputWithContext(context.Background())
}

func (i ActionGroupEventHubReceiverArgs) ToActionGroupEventHubReceiverOutputWithContext(ctx context.Context) ActionGroupEventHubReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupEventHubReceiverOutput)
}

func (i ActionGroupEventHubReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[ActionGroupEventHubReceiver] {
	return pulumix.Output[ActionGroupEventHubReceiver]{
		OutputState: i.ToActionGroupEventHubReceiverOutputWithContext(ctx).OutputState,
	}
}

// ActionGroupEventHubReceiverArrayInput is an input type that accepts ActionGroupEventHubReceiverArray and ActionGroupEventHubReceiverArrayOutput values.
// You can construct a concrete instance of `ActionGroupEventHubReceiverArrayInput` via:
//
//	ActionGroupEventHubReceiverArray{ ActionGroupEventHubReceiverArgs{...} }
type ActionGroupEventHubReceiverArrayInput interface {
	pulumi.Input

	ToActionGroupEventHubReceiverArrayOutput() ActionGroupEventHubReceiverArrayOutput
	ToActionGroupEventHubReceiverArrayOutputWithContext(context.Context) ActionGroupEventHubReceiverArrayOutput
}

type ActionGroupEventHubReceiverArray []ActionGroupEventHubReceiverInput

func (ActionGroupEventHubReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupEventHubReceiver)(nil)).Elem()
}

func (i ActionGroupEventHubReceiverArray) ToActionGroupEventHubReceiverArrayOutput() ActionGroupEventHubReceiverArrayOutput {
	return i.ToActionGroupEventHubReceiverArrayOutputWithContext(context.Background())
}

func (i ActionGroupEventHubReceiverArray) ToActionGroupEventHubReceiverArrayOutputWithContext(ctx context.Context) ActionGroupEventHubReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupEventHubReceiverArrayOutput)
}

func (i ActionGroupEventHubReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupEventHubReceiver] {
	return pulumix.Output[[]ActionGroupEventHubReceiver]{
		OutputState: i.ToActionGroupEventHubReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type ActionGroupEventHubReceiverOutput struct{ *pulumi.OutputState }

func (ActionGroupEventHubReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupEventHubReceiver)(nil)).Elem()
}

func (o ActionGroupEventHubReceiverOutput) ToActionGroupEventHubReceiverOutput() ActionGroupEventHubReceiverOutput {
	return o
}

func (o ActionGroupEventHubReceiverOutput) ToActionGroupEventHubReceiverOutputWithContext(ctx context.Context) ActionGroupEventHubReceiverOutput {
	return o
}

func (o ActionGroupEventHubReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[ActionGroupEventHubReceiver] {
	return pulumix.Output[ActionGroupEventHubReceiver]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the respective Event Hub.
//
// Deprecated: This property is deprecated and will be removed in version 4.0 of the provider, please use 'event_hub_name' and 'event_hub_namespace' instead.
func (o ActionGroupEventHubReceiverOutput) EventHubId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupEventHubReceiver) *string { return v.EventHubId }).(pulumi.StringPtrOutput)
}

// The name of the specific Event Hub queue.
func (o ActionGroupEventHubReceiverOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupEventHubReceiver) *string { return v.EventHubName }).(pulumi.StringPtrOutput)
}

// The namespace name of the Event Hub.
func (o ActionGroupEventHubReceiverOutput) EventHubNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupEventHubReceiver) *string { return v.EventHubNamespace }).(pulumi.StringPtrOutput)
}

// The name of the EventHub Receiver, must be unique within action group.
func (o ActionGroupEventHubReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupEventHubReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The ID for the subscription containing this Event Hub. Default to the subscription ID of the Action Group.
//
// > **NOTE:** `eventHubId` is deprecated in version 3.0 and will be removed in version 4.0 of the AzureRM Provider. Please use `eventHubName`, `eventHubName`,and `subscriptionId` instead. And `eventHubName`, `eventHubName` will be required properties in version 4.0.
func (o ActionGroupEventHubReceiverOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupEventHubReceiver) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// The Tenant ID for the subscription containing this Event Hub.
func (o ActionGroupEventHubReceiverOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupEventHubReceiver) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Indicates whether to use common alert schema.
func (o ActionGroupEventHubReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionGroupEventHubReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type ActionGroupEventHubReceiverArrayOutput struct{ *pulumi.OutputState }

func (ActionGroupEventHubReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupEventHubReceiver)(nil)).Elem()
}

func (o ActionGroupEventHubReceiverArrayOutput) ToActionGroupEventHubReceiverArrayOutput() ActionGroupEventHubReceiverArrayOutput {
	return o
}

func (o ActionGroupEventHubReceiverArrayOutput) ToActionGroupEventHubReceiverArrayOutputWithContext(ctx context.Context) ActionGroupEventHubReceiverArrayOutput {
	return o
}

func (o ActionGroupEventHubReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupEventHubReceiver] {
	return pulumix.Output[[]ActionGroupEventHubReceiver]{
		OutputState: o.OutputState,
	}
}

func (o ActionGroupEventHubReceiverArrayOutput) Index(i pulumi.IntInput) ActionGroupEventHubReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionGroupEventHubReceiver {
		return vs[0].([]ActionGroupEventHubReceiver)[vs[1].(int)]
	}).(ActionGroupEventHubReceiverOutput)
}

type ActionGroupItsmReceiver struct {
	// The unique connection identifier of the ITSM connection.
	ConnectionId string `pulumi:"connectionId"`
	// The name of the ITSM receiver.
	Name string `pulumi:"name"`
	// The region of the workspace.
	//
	// > **NOTE** `ticketConfiguration` should be JSON blob with `PayloadRevision` and `WorkItemType` keys (e.g., `ticket_configuration="{\"PayloadRevision\":0,\"WorkItemType\":\"Incident\"}"`), and `ticket_configuration="{}"` will return an error, see more at this [REST API issue](https://github.com/Azure/azure-rest-api-specs/issues/20488)
	Region string `pulumi:"region"`
	// A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration string `pulumi:"ticketConfiguration"`
	// The Azure Log Analytics workspace ID where this connection is defined. Format is `<subscription id>|<workspace id>`, for example `00000000-0000-0000-0000-000000000000|00000000-0000-0000-0000-000000000000`.
	WorkspaceId string `pulumi:"workspaceId"`
}

// ActionGroupItsmReceiverInput is an input type that accepts ActionGroupItsmReceiverArgs and ActionGroupItsmReceiverOutput values.
// You can construct a concrete instance of `ActionGroupItsmReceiverInput` via:
//
//	ActionGroupItsmReceiverArgs{...}
type ActionGroupItsmReceiverInput interface {
	pulumi.Input

	ToActionGroupItsmReceiverOutput() ActionGroupItsmReceiverOutput
	ToActionGroupItsmReceiverOutputWithContext(context.Context) ActionGroupItsmReceiverOutput
}

type ActionGroupItsmReceiverArgs struct {
	// The unique connection identifier of the ITSM connection.
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// The name of the ITSM receiver.
	Name pulumi.StringInput `pulumi:"name"`
	// The region of the workspace.
	//
	// > **NOTE** `ticketConfiguration` should be JSON blob with `PayloadRevision` and `WorkItemType` keys (e.g., `ticket_configuration="{\"PayloadRevision\":0,\"WorkItemType\":\"Incident\"}"`), and `ticket_configuration="{}"` will return an error, see more at this [REST API issue](https://github.com/Azure/azure-rest-api-specs/issues/20488)
	Region pulumi.StringInput `pulumi:"region"`
	// A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration pulumi.StringInput `pulumi:"ticketConfiguration"`
	// The Azure Log Analytics workspace ID where this connection is defined. Format is `<subscription id>|<workspace id>`, for example `00000000-0000-0000-0000-000000000000|00000000-0000-0000-0000-000000000000`.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (ActionGroupItsmReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupItsmReceiver)(nil)).Elem()
}

func (i ActionGroupItsmReceiverArgs) ToActionGroupItsmReceiverOutput() ActionGroupItsmReceiverOutput {
	return i.ToActionGroupItsmReceiverOutputWithContext(context.Background())
}

func (i ActionGroupItsmReceiverArgs) ToActionGroupItsmReceiverOutputWithContext(ctx context.Context) ActionGroupItsmReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupItsmReceiverOutput)
}

func (i ActionGroupItsmReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[ActionGroupItsmReceiver] {
	return pulumix.Output[ActionGroupItsmReceiver]{
		OutputState: i.ToActionGroupItsmReceiverOutputWithContext(ctx).OutputState,
	}
}

// ActionGroupItsmReceiverArrayInput is an input type that accepts ActionGroupItsmReceiverArray and ActionGroupItsmReceiverArrayOutput values.
// You can construct a concrete instance of `ActionGroupItsmReceiverArrayInput` via:
//
//	ActionGroupItsmReceiverArray{ ActionGroupItsmReceiverArgs{...} }
type ActionGroupItsmReceiverArrayInput interface {
	pulumi.Input

	ToActionGroupItsmReceiverArrayOutput() ActionGroupItsmReceiverArrayOutput
	ToActionGroupItsmReceiverArrayOutputWithContext(context.Context) ActionGroupItsmReceiverArrayOutput
}

type ActionGroupItsmReceiverArray []ActionGroupItsmReceiverInput

func (ActionGroupItsmReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupItsmReceiver)(nil)).Elem()
}

func (i ActionGroupItsmReceiverArray) ToActionGroupItsmReceiverArrayOutput() ActionGroupItsmReceiverArrayOutput {
	return i.ToActionGroupItsmReceiverArrayOutputWithContext(context.Background())
}

func (i ActionGroupItsmReceiverArray) ToActionGroupItsmReceiverArrayOutputWithContext(ctx context.Context) ActionGroupItsmReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupItsmReceiverArrayOutput)
}

func (i ActionGroupItsmReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupItsmReceiver] {
	return pulumix.Output[[]ActionGroupItsmReceiver]{
		OutputState: i.ToActionGroupItsmReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type ActionGroupItsmReceiverOutput struct{ *pulumi.OutputState }

func (ActionGroupItsmReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupItsmReceiver)(nil)).Elem()
}

func (o ActionGroupItsmReceiverOutput) ToActionGroupItsmReceiverOutput() ActionGroupItsmReceiverOutput {
	return o
}

func (o ActionGroupItsmReceiverOutput) ToActionGroupItsmReceiverOutputWithContext(ctx context.Context) ActionGroupItsmReceiverOutput {
	return o
}

func (o ActionGroupItsmReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[ActionGroupItsmReceiver] {
	return pulumix.Output[ActionGroupItsmReceiver]{
		OutputState: o.OutputState,
	}
}

// The unique connection identifier of the ITSM connection.
func (o ActionGroupItsmReceiverOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupItsmReceiver) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// The name of the ITSM receiver.
func (o ActionGroupItsmReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupItsmReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The region of the workspace.
//
// > **NOTE** `ticketConfiguration` should be JSON blob with `PayloadRevision` and `WorkItemType` keys (e.g., `ticket_configuration="{\"PayloadRevision\":0,\"WorkItemType\":\"Incident\"}"`), and `ticket_configuration="{}"` will return an error, see more at this [REST API issue](https://github.com/Azure/azure-rest-api-specs/issues/20488)
func (o ActionGroupItsmReceiverOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupItsmReceiver) string { return v.Region }).(pulumi.StringOutput)
}

// A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
func (o ActionGroupItsmReceiverOutput) TicketConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupItsmReceiver) string { return v.TicketConfiguration }).(pulumi.StringOutput)
}

// The Azure Log Analytics workspace ID where this connection is defined. Format is `<subscription id>|<workspace id>`, for example `00000000-0000-0000-0000-000000000000|00000000-0000-0000-0000-000000000000`.
func (o ActionGroupItsmReceiverOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupItsmReceiver) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

type ActionGroupItsmReceiverArrayOutput struct{ *pulumi.OutputState }

func (ActionGroupItsmReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupItsmReceiver)(nil)).Elem()
}

func (o ActionGroupItsmReceiverArrayOutput) ToActionGroupItsmReceiverArrayOutput() ActionGroupItsmReceiverArrayOutput {
	return o
}

func (o ActionGroupItsmReceiverArrayOutput) ToActionGroupItsmReceiverArrayOutputWithContext(ctx context.Context) ActionGroupItsmReceiverArrayOutput {
	return o
}

func (o ActionGroupItsmReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupItsmReceiver] {
	return pulumix.Output[[]ActionGroupItsmReceiver]{
		OutputState: o.OutputState,
	}
}

func (o ActionGroupItsmReceiverArrayOutput) Index(i pulumi.IntInput) ActionGroupItsmReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionGroupItsmReceiver {
		return vs[0].([]ActionGroupItsmReceiver)[vs[1].(int)]
	}).(ActionGroupItsmReceiverOutput)
}

type ActionGroupLogicAppReceiver struct {
	// The callback url where HTTP request sent to.
	CallbackUrl string `pulumi:"callbackUrl"`
	// The name of the logic app receiver.
	Name string `pulumi:"name"`
	// The Azure resource ID of the logic app.
	ResourceId string `pulumi:"resourceId"`
	// Enables or disables the common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// ActionGroupLogicAppReceiverInput is an input type that accepts ActionGroupLogicAppReceiverArgs and ActionGroupLogicAppReceiverOutput values.
// You can construct a concrete instance of `ActionGroupLogicAppReceiverInput` via:
//
//	ActionGroupLogicAppReceiverArgs{...}
type ActionGroupLogicAppReceiverInput interface {
	pulumi.Input

	ToActionGroupLogicAppReceiverOutput() ActionGroupLogicAppReceiverOutput
	ToActionGroupLogicAppReceiverOutputWithContext(context.Context) ActionGroupLogicAppReceiverOutput
}

type ActionGroupLogicAppReceiverArgs struct {
	// The callback url where HTTP request sent to.
	CallbackUrl pulumi.StringInput `pulumi:"callbackUrl"`
	// The name of the logic app receiver.
	Name pulumi.StringInput `pulumi:"name"`
	// The Azure resource ID of the logic app.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// Enables or disables the common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
}

func (ActionGroupLogicAppReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupLogicAppReceiver)(nil)).Elem()
}

func (i ActionGroupLogicAppReceiverArgs) ToActionGroupLogicAppReceiverOutput() ActionGroupLogicAppReceiverOutput {
	return i.ToActionGroupLogicAppReceiverOutputWithContext(context.Background())
}

func (i ActionGroupLogicAppReceiverArgs) ToActionGroupLogicAppReceiverOutputWithContext(ctx context.Context) ActionGroupLogicAppReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupLogicAppReceiverOutput)
}

func (i ActionGroupLogicAppReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[ActionGroupLogicAppReceiver] {
	return pulumix.Output[ActionGroupLogicAppReceiver]{
		OutputState: i.ToActionGroupLogicAppReceiverOutputWithContext(ctx).OutputState,
	}
}

// ActionGroupLogicAppReceiverArrayInput is an input type that accepts ActionGroupLogicAppReceiverArray and ActionGroupLogicAppReceiverArrayOutput values.
// You can construct a concrete instance of `ActionGroupLogicAppReceiverArrayInput` via:
//
//	ActionGroupLogicAppReceiverArray{ ActionGroupLogicAppReceiverArgs{...} }
type ActionGroupLogicAppReceiverArrayInput interface {
	pulumi.Input

	ToActionGroupLogicAppReceiverArrayOutput() ActionGroupLogicAppReceiverArrayOutput
	ToActionGroupLogicAppReceiverArrayOutputWithContext(context.Context) ActionGroupLogicAppReceiverArrayOutput
}

type ActionGroupLogicAppReceiverArray []ActionGroupLogicAppReceiverInput

func (ActionGroupLogicAppReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupLogicAppReceiver)(nil)).Elem()
}

func (i ActionGroupLogicAppReceiverArray) ToActionGroupLogicAppReceiverArrayOutput() ActionGroupLogicAppReceiverArrayOutput {
	return i.ToActionGroupLogicAppReceiverArrayOutputWithContext(context.Background())
}

func (i ActionGroupLogicAppReceiverArray) ToActionGroupLogicAppReceiverArrayOutputWithContext(ctx context.Context) ActionGroupLogicAppReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupLogicAppReceiverArrayOutput)
}

func (i ActionGroupLogicAppReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupLogicAppReceiver] {
	return pulumix.Output[[]ActionGroupLogicAppReceiver]{
		OutputState: i.ToActionGroupLogicAppReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type ActionGroupLogicAppReceiverOutput struct{ *pulumi.OutputState }

func (ActionGroupLogicAppReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupLogicAppReceiver)(nil)).Elem()
}

func (o ActionGroupLogicAppReceiverOutput) ToActionGroupLogicAppReceiverOutput() ActionGroupLogicAppReceiverOutput {
	return o
}

func (o ActionGroupLogicAppReceiverOutput) ToActionGroupLogicAppReceiverOutputWithContext(ctx context.Context) ActionGroupLogicAppReceiverOutput {
	return o
}

func (o ActionGroupLogicAppReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[ActionGroupLogicAppReceiver] {
	return pulumix.Output[ActionGroupLogicAppReceiver]{
		OutputState: o.OutputState,
	}
}

// The callback url where HTTP request sent to.
func (o ActionGroupLogicAppReceiverOutput) CallbackUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupLogicAppReceiver) string { return v.CallbackUrl }).(pulumi.StringOutput)
}

// The name of the logic app receiver.
func (o ActionGroupLogicAppReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupLogicAppReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The Azure resource ID of the logic app.
func (o ActionGroupLogicAppReceiverOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupLogicAppReceiver) string { return v.ResourceId }).(pulumi.StringOutput)
}

// Enables or disables the common alert schema.
func (o ActionGroupLogicAppReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionGroupLogicAppReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type ActionGroupLogicAppReceiverArrayOutput struct{ *pulumi.OutputState }

func (ActionGroupLogicAppReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupLogicAppReceiver)(nil)).Elem()
}

func (o ActionGroupLogicAppReceiverArrayOutput) ToActionGroupLogicAppReceiverArrayOutput() ActionGroupLogicAppReceiverArrayOutput {
	return o
}

func (o ActionGroupLogicAppReceiverArrayOutput) ToActionGroupLogicAppReceiverArrayOutputWithContext(ctx context.Context) ActionGroupLogicAppReceiverArrayOutput {
	return o
}

func (o ActionGroupLogicAppReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupLogicAppReceiver] {
	return pulumix.Output[[]ActionGroupLogicAppReceiver]{
		OutputState: o.OutputState,
	}
}

func (o ActionGroupLogicAppReceiverArrayOutput) Index(i pulumi.IntInput) ActionGroupLogicAppReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionGroupLogicAppReceiver {
		return vs[0].([]ActionGroupLogicAppReceiver)[vs[1].(int)]
	}).(ActionGroupLogicAppReceiverOutput)
}

type ActionGroupSmsReceiver struct {
	// The country code of the SMS receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique (case-insensitive) across all receivers within an action group.
	Name string `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// ActionGroupSmsReceiverInput is an input type that accepts ActionGroupSmsReceiverArgs and ActionGroupSmsReceiverOutput values.
// You can construct a concrete instance of `ActionGroupSmsReceiverInput` via:
//
//	ActionGroupSmsReceiverArgs{...}
type ActionGroupSmsReceiverInput interface {
	pulumi.Input

	ToActionGroupSmsReceiverOutput() ActionGroupSmsReceiverOutput
	ToActionGroupSmsReceiverOutputWithContext(context.Context) ActionGroupSmsReceiverOutput
}

type ActionGroupSmsReceiverArgs struct {
	// The country code of the SMS receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique (case-insensitive) across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (ActionGroupSmsReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupSmsReceiver)(nil)).Elem()
}

func (i ActionGroupSmsReceiverArgs) ToActionGroupSmsReceiverOutput() ActionGroupSmsReceiverOutput {
	return i.ToActionGroupSmsReceiverOutputWithContext(context.Background())
}

func (i ActionGroupSmsReceiverArgs) ToActionGroupSmsReceiverOutputWithContext(ctx context.Context) ActionGroupSmsReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupSmsReceiverOutput)
}

func (i ActionGroupSmsReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[ActionGroupSmsReceiver] {
	return pulumix.Output[ActionGroupSmsReceiver]{
		OutputState: i.ToActionGroupSmsReceiverOutputWithContext(ctx).OutputState,
	}
}

// ActionGroupSmsReceiverArrayInput is an input type that accepts ActionGroupSmsReceiverArray and ActionGroupSmsReceiverArrayOutput values.
// You can construct a concrete instance of `ActionGroupSmsReceiverArrayInput` via:
//
//	ActionGroupSmsReceiverArray{ ActionGroupSmsReceiverArgs{...} }
type ActionGroupSmsReceiverArrayInput interface {
	pulumi.Input

	ToActionGroupSmsReceiverArrayOutput() ActionGroupSmsReceiverArrayOutput
	ToActionGroupSmsReceiverArrayOutputWithContext(context.Context) ActionGroupSmsReceiverArrayOutput
}

type ActionGroupSmsReceiverArray []ActionGroupSmsReceiverInput

func (ActionGroupSmsReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupSmsReceiver)(nil)).Elem()
}

func (i ActionGroupSmsReceiverArray) ToActionGroupSmsReceiverArrayOutput() ActionGroupSmsReceiverArrayOutput {
	return i.ToActionGroupSmsReceiverArrayOutputWithContext(context.Background())
}

func (i ActionGroupSmsReceiverArray) ToActionGroupSmsReceiverArrayOutputWithContext(ctx context.Context) ActionGroupSmsReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupSmsReceiverArrayOutput)
}

func (i ActionGroupSmsReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupSmsReceiver] {
	return pulumix.Output[[]ActionGroupSmsReceiver]{
		OutputState: i.ToActionGroupSmsReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type ActionGroupSmsReceiverOutput struct{ *pulumi.OutputState }

func (ActionGroupSmsReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupSmsReceiver)(nil)).Elem()
}

func (o ActionGroupSmsReceiverOutput) ToActionGroupSmsReceiverOutput() ActionGroupSmsReceiverOutput {
	return o
}

func (o ActionGroupSmsReceiverOutput) ToActionGroupSmsReceiverOutputWithContext(ctx context.Context) ActionGroupSmsReceiverOutput {
	return o
}

func (o ActionGroupSmsReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[ActionGroupSmsReceiver] {
	return pulumix.Output[ActionGroupSmsReceiver]{
		OutputState: o.OutputState,
	}
}

// The country code of the SMS receiver.
func (o ActionGroupSmsReceiverOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupSmsReceiver) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the SMS receiver. Names must be unique (case-insensitive) across all receivers within an action group.
func (o ActionGroupSmsReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupSmsReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the SMS receiver.
func (o ActionGroupSmsReceiverOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupSmsReceiver) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type ActionGroupSmsReceiverArrayOutput struct{ *pulumi.OutputState }

func (ActionGroupSmsReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupSmsReceiver)(nil)).Elem()
}

func (o ActionGroupSmsReceiverArrayOutput) ToActionGroupSmsReceiverArrayOutput() ActionGroupSmsReceiverArrayOutput {
	return o
}

func (o ActionGroupSmsReceiverArrayOutput) ToActionGroupSmsReceiverArrayOutputWithContext(ctx context.Context) ActionGroupSmsReceiverArrayOutput {
	return o
}

func (o ActionGroupSmsReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupSmsReceiver] {
	return pulumix.Output[[]ActionGroupSmsReceiver]{
		OutputState: o.OutputState,
	}
}

func (o ActionGroupSmsReceiverArrayOutput) Index(i pulumi.IntInput) ActionGroupSmsReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionGroupSmsReceiver {
		return vs[0].([]ActionGroupSmsReceiver)[vs[1].(int)]
	}).(ActionGroupSmsReceiverOutput)
}

type ActionGroupVoiceReceiver struct {
	// The country code of the voice receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the voice receiver.
	Name string `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// ActionGroupVoiceReceiverInput is an input type that accepts ActionGroupVoiceReceiverArgs and ActionGroupVoiceReceiverOutput values.
// You can construct a concrete instance of `ActionGroupVoiceReceiverInput` via:
//
//	ActionGroupVoiceReceiverArgs{...}
type ActionGroupVoiceReceiverInput interface {
	pulumi.Input

	ToActionGroupVoiceReceiverOutput() ActionGroupVoiceReceiverOutput
	ToActionGroupVoiceReceiverOutputWithContext(context.Context) ActionGroupVoiceReceiverOutput
}

type ActionGroupVoiceReceiverArgs struct {
	// The country code of the voice receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the voice receiver.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (ActionGroupVoiceReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupVoiceReceiver)(nil)).Elem()
}

func (i ActionGroupVoiceReceiverArgs) ToActionGroupVoiceReceiverOutput() ActionGroupVoiceReceiverOutput {
	return i.ToActionGroupVoiceReceiverOutputWithContext(context.Background())
}

func (i ActionGroupVoiceReceiverArgs) ToActionGroupVoiceReceiverOutputWithContext(ctx context.Context) ActionGroupVoiceReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupVoiceReceiverOutput)
}

func (i ActionGroupVoiceReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[ActionGroupVoiceReceiver] {
	return pulumix.Output[ActionGroupVoiceReceiver]{
		OutputState: i.ToActionGroupVoiceReceiverOutputWithContext(ctx).OutputState,
	}
}

// ActionGroupVoiceReceiverArrayInput is an input type that accepts ActionGroupVoiceReceiverArray and ActionGroupVoiceReceiverArrayOutput values.
// You can construct a concrete instance of `ActionGroupVoiceReceiverArrayInput` via:
//
//	ActionGroupVoiceReceiverArray{ ActionGroupVoiceReceiverArgs{...} }
type ActionGroupVoiceReceiverArrayInput interface {
	pulumi.Input

	ToActionGroupVoiceReceiverArrayOutput() ActionGroupVoiceReceiverArrayOutput
	ToActionGroupVoiceReceiverArrayOutputWithContext(context.Context) ActionGroupVoiceReceiverArrayOutput
}

type ActionGroupVoiceReceiverArray []ActionGroupVoiceReceiverInput

func (ActionGroupVoiceReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupVoiceReceiver)(nil)).Elem()
}

func (i ActionGroupVoiceReceiverArray) ToActionGroupVoiceReceiverArrayOutput() ActionGroupVoiceReceiverArrayOutput {
	return i.ToActionGroupVoiceReceiverArrayOutputWithContext(context.Background())
}

func (i ActionGroupVoiceReceiverArray) ToActionGroupVoiceReceiverArrayOutputWithContext(ctx context.Context) ActionGroupVoiceReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupVoiceReceiverArrayOutput)
}

func (i ActionGroupVoiceReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupVoiceReceiver] {
	return pulumix.Output[[]ActionGroupVoiceReceiver]{
		OutputState: i.ToActionGroupVoiceReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type ActionGroupVoiceReceiverOutput struct{ *pulumi.OutputState }

func (ActionGroupVoiceReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupVoiceReceiver)(nil)).Elem()
}

func (o ActionGroupVoiceReceiverOutput) ToActionGroupVoiceReceiverOutput() ActionGroupVoiceReceiverOutput {
	return o
}

func (o ActionGroupVoiceReceiverOutput) ToActionGroupVoiceReceiverOutputWithContext(ctx context.Context) ActionGroupVoiceReceiverOutput {
	return o
}

func (o ActionGroupVoiceReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[ActionGroupVoiceReceiver] {
	return pulumix.Output[ActionGroupVoiceReceiver]{
		OutputState: o.OutputState,
	}
}

// The country code of the voice receiver.
func (o ActionGroupVoiceReceiverOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupVoiceReceiver) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the voice receiver.
func (o ActionGroupVoiceReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupVoiceReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the voice receiver.
func (o ActionGroupVoiceReceiverOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupVoiceReceiver) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type ActionGroupVoiceReceiverArrayOutput struct{ *pulumi.OutputState }

func (ActionGroupVoiceReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupVoiceReceiver)(nil)).Elem()
}

func (o ActionGroupVoiceReceiverArrayOutput) ToActionGroupVoiceReceiverArrayOutput() ActionGroupVoiceReceiverArrayOutput {
	return o
}

func (o ActionGroupVoiceReceiverArrayOutput) ToActionGroupVoiceReceiverArrayOutputWithContext(ctx context.Context) ActionGroupVoiceReceiverArrayOutput {
	return o
}

func (o ActionGroupVoiceReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupVoiceReceiver] {
	return pulumix.Output[[]ActionGroupVoiceReceiver]{
		OutputState: o.OutputState,
	}
}

func (o ActionGroupVoiceReceiverArrayOutput) Index(i pulumi.IntInput) ActionGroupVoiceReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionGroupVoiceReceiver {
		return vs[0].([]ActionGroupVoiceReceiver)[vs[1].(int)]
	}).(ActionGroupVoiceReceiverOutput)
}

type ActionGroupWebhookReceiver struct {
	// The `aadAuth` block as defined below.
	//
	// > **NOTE:** Before adding a secure webhook receiver by setting `aadAuth`, please read [the configuration instruction of the AAD application](https://docs.microsoft.com/azure/azure-monitor/platform/action-groups#secure-webhook).
	AadAuth *ActionGroupWebhookReceiverAadAuth `pulumi:"aadAuth"`
	// The name of the webhook receiver. Names must be unique (case-insensitive) across all receivers within an action group.
	Name string `pulumi:"name"`
	// The URI where webhooks should be sent.
	ServiceUri string `pulumi:"serviceUri"`
	// Enables or disables the common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// ActionGroupWebhookReceiverInput is an input type that accepts ActionGroupWebhookReceiverArgs and ActionGroupWebhookReceiverOutput values.
// You can construct a concrete instance of `ActionGroupWebhookReceiverInput` via:
//
//	ActionGroupWebhookReceiverArgs{...}
type ActionGroupWebhookReceiverInput interface {
	pulumi.Input

	ToActionGroupWebhookReceiverOutput() ActionGroupWebhookReceiverOutput
	ToActionGroupWebhookReceiverOutputWithContext(context.Context) ActionGroupWebhookReceiverOutput
}

type ActionGroupWebhookReceiverArgs struct {
	// The `aadAuth` block as defined below.
	//
	// > **NOTE:** Before adding a secure webhook receiver by setting `aadAuth`, please read [the configuration instruction of the AAD application](https://docs.microsoft.com/azure/azure-monitor/platform/action-groups#secure-webhook).
	AadAuth ActionGroupWebhookReceiverAadAuthPtrInput `pulumi:"aadAuth"`
	// The name of the webhook receiver. Names must be unique (case-insensitive) across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringInput `pulumi:"serviceUri"`
	// Enables or disables the common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
}

func (ActionGroupWebhookReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupWebhookReceiver)(nil)).Elem()
}

func (i ActionGroupWebhookReceiverArgs) ToActionGroupWebhookReceiverOutput() ActionGroupWebhookReceiverOutput {
	return i.ToActionGroupWebhookReceiverOutputWithContext(context.Background())
}

func (i ActionGroupWebhookReceiverArgs) ToActionGroupWebhookReceiverOutputWithContext(ctx context.Context) ActionGroupWebhookReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupWebhookReceiverOutput)
}

func (i ActionGroupWebhookReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[ActionGroupWebhookReceiver] {
	return pulumix.Output[ActionGroupWebhookReceiver]{
		OutputState: i.ToActionGroupWebhookReceiverOutputWithContext(ctx).OutputState,
	}
}

// ActionGroupWebhookReceiverArrayInput is an input type that accepts ActionGroupWebhookReceiverArray and ActionGroupWebhookReceiverArrayOutput values.
// You can construct a concrete instance of `ActionGroupWebhookReceiverArrayInput` via:
//
//	ActionGroupWebhookReceiverArray{ ActionGroupWebhookReceiverArgs{...} }
type ActionGroupWebhookReceiverArrayInput interface {
	pulumi.Input

	ToActionGroupWebhookReceiverArrayOutput() ActionGroupWebhookReceiverArrayOutput
	ToActionGroupWebhookReceiverArrayOutputWithContext(context.Context) ActionGroupWebhookReceiverArrayOutput
}

type ActionGroupWebhookReceiverArray []ActionGroupWebhookReceiverInput

func (ActionGroupWebhookReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupWebhookReceiver)(nil)).Elem()
}

func (i ActionGroupWebhookReceiverArray) ToActionGroupWebhookReceiverArrayOutput() ActionGroupWebhookReceiverArrayOutput {
	return i.ToActionGroupWebhookReceiverArrayOutputWithContext(context.Background())
}

func (i ActionGroupWebhookReceiverArray) ToActionGroupWebhookReceiverArrayOutputWithContext(ctx context.Context) ActionGroupWebhookReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupWebhookReceiverArrayOutput)
}

func (i ActionGroupWebhookReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupWebhookReceiver] {
	return pulumix.Output[[]ActionGroupWebhookReceiver]{
		OutputState: i.ToActionGroupWebhookReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type ActionGroupWebhookReceiverOutput struct{ *pulumi.OutputState }

func (ActionGroupWebhookReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupWebhookReceiver)(nil)).Elem()
}

func (o ActionGroupWebhookReceiverOutput) ToActionGroupWebhookReceiverOutput() ActionGroupWebhookReceiverOutput {
	return o
}

func (o ActionGroupWebhookReceiverOutput) ToActionGroupWebhookReceiverOutputWithContext(ctx context.Context) ActionGroupWebhookReceiverOutput {
	return o
}

func (o ActionGroupWebhookReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[ActionGroupWebhookReceiver] {
	return pulumix.Output[ActionGroupWebhookReceiver]{
		OutputState: o.OutputState,
	}
}

// The `aadAuth` block as defined below.
//
// > **NOTE:** Before adding a secure webhook receiver by setting `aadAuth`, please read [the configuration instruction of the AAD application](https://docs.microsoft.com/azure/azure-monitor/platform/action-groups#secure-webhook).
func (o ActionGroupWebhookReceiverOutput) AadAuth() ActionGroupWebhookReceiverAadAuthPtrOutput {
	return o.ApplyT(func(v ActionGroupWebhookReceiver) *ActionGroupWebhookReceiverAadAuth { return v.AadAuth }).(ActionGroupWebhookReceiverAadAuthPtrOutput)
}

// The name of the webhook receiver. Names must be unique (case-insensitive) across all receivers within an action group.
func (o ActionGroupWebhookReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupWebhookReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o ActionGroupWebhookReceiverOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupWebhookReceiver) string { return v.ServiceUri }).(pulumi.StringOutput)
}

// Enables or disables the common alert schema.
func (o ActionGroupWebhookReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActionGroupWebhookReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type ActionGroupWebhookReceiverArrayOutput struct{ *pulumi.OutputState }

func (ActionGroupWebhookReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupWebhookReceiver)(nil)).Elem()
}

func (o ActionGroupWebhookReceiverArrayOutput) ToActionGroupWebhookReceiverArrayOutput() ActionGroupWebhookReceiverArrayOutput {
	return o
}

func (o ActionGroupWebhookReceiverArrayOutput) ToActionGroupWebhookReceiverArrayOutputWithContext(ctx context.Context) ActionGroupWebhookReceiverArrayOutput {
	return o
}

func (o ActionGroupWebhookReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActionGroupWebhookReceiver] {
	return pulumix.Output[[]ActionGroupWebhookReceiver]{
		OutputState: o.OutputState,
	}
}

func (o ActionGroupWebhookReceiverArrayOutput) Index(i pulumi.IntInput) ActionGroupWebhookReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionGroupWebhookReceiver {
		return vs[0].([]ActionGroupWebhookReceiver)[vs[1].(int)]
	}).(ActionGroupWebhookReceiverOutput)
}

type ActionGroupWebhookReceiverAadAuth struct {
	// The identifier URI for AAD auth.
	IdentifierUri *string `pulumi:"identifierUri"`
	// The webhook application object Id for AAD auth.
	ObjectId string `pulumi:"objectId"`
	// The tenant id for AAD auth.
	TenantId *string `pulumi:"tenantId"`
}

// ActionGroupWebhookReceiverAadAuthInput is an input type that accepts ActionGroupWebhookReceiverAadAuthArgs and ActionGroupWebhookReceiverAadAuthOutput values.
// You can construct a concrete instance of `ActionGroupWebhookReceiverAadAuthInput` via:
//
//	ActionGroupWebhookReceiverAadAuthArgs{...}
type ActionGroupWebhookReceiverAadAuthInput interface {
	pulumi.Input

	ToActionGroupWebhookReceiverAadAuthOutput() ActionGroupWebhookReceiverAadAuthOutput
	ToActionGroupWebhookReceiverAadAuthOutputWithContext(context.Context) ActionGroupWebhookReceiverAadAuthOutput
}

type ActionGroupWebhookReceiverAadAuthArgs struct {
	// The identifier URI for AAD auth.
	IdentifierUri pulumi.StringPtrInput `pulumi:"identifierUri"`
	// The webhook application object Id for AAD auth.
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// The tenant id for AAD auth.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (ActionGroupWebhookReceiverAadAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupWebhookReceiverAadAuth)(nil)).Elem()
}

func (i ActionGroupWebhookReceiverAadAuthArgs) ToActionGroupWebhookReceiverAadAuthOutput() ActionGroupWebhookReceiverAadAuthOutput {
	return i.ToActionGroupWebhookReceiverAadAuthOutputWithContext(context.Background())
}

func (i ActionGroupWebhookReceiverAadAuthArgs) ToActionGroupWebhookReceiverAadAuthOutputWithContext(ctx context.Context) ActionGroupWebhookReceiverAadAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupWebhookReceiverAadAuthOutput)
}

func (i ActionGroupWebhookReceiverAadAuthArgs) ToOutput(ctx context.Context) pulumix.Output[ActionGroupWebhookReceiverAadAuth] {
	return pulumix.Output[ActionGroupWebhookReceiverAadAuth]{
		OutputState: i.ToActionGroupWebhookReceiverAadAuthOutputWithContext(ctx).OutputState,
	}
}

func (i ActionGroupWebhookReceiverAadAuthArgs) ToActionGroupWebhookReceiverAadAuthPtrOutput() ActionGroupWebhookReceiverAadAuthPtrOutput {
	return i.ToActionGroupWebhookReceiverAadAuthPtrOutputWithContext(context.Background())
}

func (i ActionGroupWebhookReceiverAadAuthArgs) ToActionGroupWebhookReceiverAadAuthPtrOutputWithContext(ctx context.Context) ActionGroupWebhookReceiverAadAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupWebhookReceiverAadAuthOutput).ToActionGroupWebhookReceiverAadAuthPtrOutputWithContext(ctx)
}

// ActionGroupWebhookReceiverAadAuthPtrInput is an input type that accepts ActionGroupWebhookReceiverAadAuthArgs, ActionGroupWebhookReceiverAadAuthPtr and ActionGroupWebhookReceiverAadAuthPtrOutput values.
// You can construct a concrete instance of `ActionGroupWebhookReceiverAadAuthPtrInput` via:
//
//	        ActionGroupWebhookReceiverAadAuthArgs{...}
//
//	or:
//
//	        nil
type ActionGroupWebhookReceiverAadAuthPtrInput interface {
	pulumi.Input

	ToActionGroupWebhookReceiverAadAuthPtrOutput() ActionGroupWebhookReceiverAadAuthPtrOutput
	ToActionGroupWebhookReceiverAadAuthPtrOutputWithContext(context.Context) ActionGroupWebhookReceiverAadAuthPtrOutput
}

type actionGroupWebhookReceiverAadAuthPtrType ActionGroupWebhookReceiverAadAuthArgs

func ActionGroupWebhookReceiverAadAuthPtr(v *ActionGroupWebhookReceiverAadAuthArgs) ActionGroupWebhookReceiverAadAuthPtrInput {
	return (*actionGroupWebhookReceiverAadAuthPtrType)(v)
}

func (*actionGroupWebhookReceiverAadAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionGroupWebhookReceiverAadAuth)(nil)).Elem()
}

func (i *actionGroupWebhookReceiverAadAuthPtrType) ToActionGroupWebhookReceiverAadAuthPtrOutput() ActionGroupWebhookReceiverAadAuthPtrOutput {
	return i.ToActionGroupWebhookReceiverAadAuthPtrOutputWithContext(context.Background())
}

func (i *actionGroupWebhookReceiverAadAuthPtrType) ToActionGroupWebhookReceiverAadAuthPtrOutputWithContext(ctx context.Context) ActionGroupWebhookReceiverAadAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupWebhookReceiverAadAuthPtrOutput)
}

func (i *actionGroupWebhookReceiverAadAuthPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionGroupWebhookReceiverAadAuth] {
	return pulumix.Output[*ActionGroupWebhookReceiverAadAuth]{
		OutputState: i.ToActionGroupWebhookReceiverAadAuthPtrOutputWithContext(ctx).OutputState,
	}
}

type ActionGroupWebhookReceiverAadAuthOutput struct{ *pulumi.OutputState }

func (ActionGroupWebhookReceiverAadAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupWebhookReceiverAadAuth)(nil)).Elem()
}

func (o ActionGroupWebhookReceiverAadAuthOutput) ToActionGroupWebhookReceiverAadAuthOutput() ActionGroupWebhookReceiverAadAuthOutput {
	return o
}

func (o ActionGroupWebhookReceiverAadAuthOutput) ToActionGroupWebhookReceiverAadAuthOutputWithContext(ctx context.Context) ActionGroupWebhookReceiverAadAuthOutput {
	return o
}

func (o ActionGroupWebhookReceiverAadAuthOutput) ToActionGroupWebhookReceiverAadAuthPtrOutput() ActionGroupWebhookReceiverAadAuthPtrOutput {
	return o.ToActionGroupWebhookReceiverAadAuthPtrOutputWithContext(context.Background())
}

func (o ActionGroupWebhookReceiverAadAuthOutput) ToActionGroupWebhookReceiverAadAuthPtrOutputWithContext(ctx context.Context) ActionGroupWebhookReceiverAadAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionGroupWebhookReceiverAadAuth) *ActionGroupWebhookReceiverAadAuth {
		return &v
	}).(ActionGroupWebhookReceiverAadAuthPtrOutput)
}

func (o ActionGroupWebhookReceiverAadAuthOutput) ToOutput(ctx context.Context) pulumix.Output[ActionGroupWebhookReceiverAadAuth] {
	return pulumix.Output[ActionGroupWebhookReceiverAadAuth]{
		OutputState: o.OutputState,
	}
}

// The identifier URI for AAD auth.
func (o ActionGroupWebhookReceiverAadAuthOutput) IdentifierUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupWebhookReceiverAadAuth) *string { return v.IdentifierUri }).(pulumi.StringPtrOutput)
}

// The webhook application object Id for AAD auth.
func (o ActionGroupWebhookReceiverAadAuthOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupWebhookReceiverAadAuth) string { return v.ObjectId }).(pulumi.StringOutput)
}

// The tenant id for AAD auth.
func (o ActionGroupWebhookReceiverAadAuthOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActionGroupWebhookReceiverAadAuth) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type ActionGroupWebhookReceiverAadAuthPtrOutput struct{ *pulumi.OutputState }

func (ActionGroupWebhookReceiverAadAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionGroupWebhookReceiverAadAuth)(nil)).Elem()
}

func (o ActionGroupWebhookReceiverAadAuthPtrOutput) ToActionGroupWebhookReceiverAadAuthPtrOutput() ActionGroupWebhookReceiverAadAuthPtrOutput {
	return o
}

func (o ActionGroupWebhookReceiverAadAuthPtrOutput) ToActionGroupWebhookReceiverAadAuthPtrOutputWithContext(ctx context.Context) ActionGroupWebhookReceiverAadAuthPtrOutput {
	return o
}

func (o ActionGroupWebhookReceiverAadAuthPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionGroupWebhookReceiverAadAuth] {
	return pulumix.Output[*ActionGroupWebhookReceiverAadAuth]{
		OutputState: o.OutputState,
	}
}

func (o ActionGroupWebhookReceiverAadAuthPtrOutput) Elem() ActionGroupWebhookReceiverAadAuthOutput {
	return o.ApplyT(func(v *ActionGroupWebhookReceiverAadAuth) ActionGroupWebhookReceiverAadAuth {
		if v != nil {
			return *v
		}
		var ret ActionGroupWebhookReceiverAadAuth
		return ret
	}).(ActionGroupWebhookReceiverAadAuthOutput)
}

// The identifier URI for AAD auth.
func (o ActionGroupWebhookReceiverAadAuthPtrOutput) IdentifierUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionGroupWebhookReceiverAadAuth) *string {
		if v == nil {
			return nil
		}
		return v.IdentifierUri
	}).(pulumi.StringPtrOutput)
}

// The webhook application object Id for AAD auth.
func (o ActionGroupWebhookReceiverAadAuthPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionGroupWebhookReceiverAadAuth) *string {
		if v == nil {
			return nil
		}
		return &v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// The tenant id for AAD auth.
func (o ActionGroupWebhookReceiverAadAuthPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionGroupWebhookReceiverAadAuth) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

type ActionRuleActionGroupCondition struct {
	// A `alertContext` block as defined below.
	AlertContext *ActionRuleActionGroupConditionAlertContext `pulumi:"alertContext"`
	// A `alertRuleId` block as defined below.
	AlertRuleId *ActionRuleActionGroupConditionAlertRuleId `pulumi:"alertRuleId"`
	// A `description` block as defined below.
	Description *ActionRuleActionGroupConditionDescription `pulumi:"description"`
	// A `monitor` block as defined below.
	Monitor *ActionRuleActionGroupConditionMonitor `pulumi:"monitor"`
	// A `monitorService` block as defined below.
	MonitorService *ActionRuleActionGroupConditionMonitorService `pulumi:"monitorService"`
	// A `severity` block as defined below.
	Severity *ActionRuleActionGroupConditionSeverity `pulumi:"severity"`
	// A `targetResourceType` block as defined below.
	TargetResourceType *ActionRuleActionGroupConditionTargetResourceType `pulumi:"targetResourceType"`
}

// ActionRuleActionGroupConditionInput is an input type that accepts ActionRuleActionGroupConditionArgs and ActionRuleActionGroupConditionOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionInput` via:
//
//	ActionRuleActionGroupConditionArgs{...}
type ActionRuleActionGroupConditionInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionOutput() ActionRuleActionGroupConditionOutput
	ToActionRuleActionGroupConditionOutputWithContext(context.Context) ActionRuleActionGroupConditionOutput
}

type ActionRuleActionGroupConditionArgs struct {
	// A `alertContext` block as defined below.
	AlertContext ActionRuleActionGroupConditionAlertContextPtrInput `pulumi:"alertContext"`
	// A `alertRuleId` block as defined below.
	AlertRuleId ActionRuleActionGroupConditionAlertRuleIdPtrInput `pulumi:"alertRuleId"`
	// A `description` block as defined below.
	Description ActionRuleActionGroupConditionDescriptionPtrInput `pulumi:"description"`
	// A `monitor` block as defined below.
	Monitor ActionRuleActionGroupConditionMonitorPtrInput `pulumi:"monitor"`
	// A `monitorService` block as defined below.
	MonitorService ActionRuleActionGroupConditionMonitorServicePtrInput `pulumi:"monitorService"`
	// A `severity` block as defined below.
	Severity ActionRuleActionGroupConditionSeverityPtrInput `pulumi:"severity"`
	// A `targetResourceType` block as defined below.
	TargetResourceType ActionRuleActionGroupConditionTargetResourceTypePtrInput `pulumi:"targetResourceType"`
}

func (ActionRuleActionGroupConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupCondition)(nil)).Elem()
}

func (i ActionRuleActionGroupConditionArgs) ToActionRuleActionGroupConditionOutput() ActionRuleActionGroupConditionOutput {
	return i.ToActionRuleActionGroupConditionOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionArgs) ToActionRuleActionGroupConditionOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionOutput)
}

func (i ActionRuleActionGroupConditionArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupCondition] {
	return pulumix.Output[ActionRuleActionGroupCondition]{
		OutputState: i.ToActionRuleActionGroupConditionOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleActionGroupConditionArgs) ToActionRuleActionGroupConditionPtrOutput() ActionRuleActionGroupConditionPtrOutput {
	return i.ToActionRuleActionGroupConditionPtrOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionArgs) ToActionRuleActionGroupConditionPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionOutput).ToActionRuleActionGroupConditionPtrOutputWithContext(ctx)
}

// ActionRuleActionGroupConditionPtrInput is an input type that accepts ActionRuleActionGroupConditionArgs, ActionRuleActionGroupConditionPtr and ActionRuleActionGroupConditionPtrOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionPtrInput` via:
//
//	        ActionRuleActionGroupConditionArgs{...}
//
//	or:
//
//	        nil
type ActionRuleActionGroupConditionPtrInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionPtrOutput() ActionRuleActionGroupConditionPtrOutput
	ToActionRuleActionGroupConditionPtrOutputWithContext(context.Context) ActionRuleActionGroupConditionPtrOutput
}

type actionRuleActionGroupConditionPtrType ActionRuleActionGroupConditionArgs

func ActionRuleActionGroupConditionPtr(v *ActionRuleActionGroupConditionArgs) ActionRuleActionGroupConditionPtrInput {
	return (*actionRuleActionGroupConditionPtrType)(v)
}

func (*actionRuleActionGroupConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupCondition)(nil)).Elem()
}

func (i *actionRuleActionGroupConditionPtrType) ToActionRuleActionGroupConditionPtrOutput() ActionRuleActionGroupConditionPtrOutput {
	return i.ToActionRuleActionGroupConditionPtrOutputWithContext(context.Background())
}

func (i *actionRuleActionGroupConditionPtrType) ToActionRuleActionGroupConditionPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionPtrOutput)
}

func (i *actionRuleActionGroupConditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupCondition] {
	return pulumix.Output[*ActionRuleActionGroupCondition]{
		OutputState: i.ToActionRuleActionGroupConditionPtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleActionGroupConditionOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupCondition)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionOutput) ToActionRuleActionGroupConditionOutput() ActionRuleActionGroupConditionOutput {
	return o
}

func (o ActionRuleActionGroupConditionOutput) ToActionRuleActionGroupConditionOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionOutput {
	return o
}

func (o ActionRuleActionGroupConditionOutput) ToActionRuleActionGroupConditionPtrOutput() ActionRuleActionGroupConditionPtrOutput {
	return o.ToActionRuleActionGroupConditionPtrOutputWithContext(context.Background())
}

func (o ActionRuleActionGroupConditionOutput) ToActionRuleActionGroupConditionPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleActionGroupCondition) *ActionRuleActionGroupCondition {
		return &v
	}).(ActionRuleActionGroupConditionPtrOutput)
}

func (o ActionRuleActionGroupConditionOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupCondition] {
	return pulumix.Output[ActionRuleActionGroupCondition]{
		OutputState: o.OutputState,
	}
}

// A `alertContext` block as defined below.
func (o ActionRuleActionGroupConditionOutput) AlertContext() ActionRuleActionGroupConditionAlertContextPtrOutput {
	return o.ApplyT(func(v ActionRuleActionGroupCondition) *ActionRuleActionGroupConditionAlertContext {
		return v.AlertContext
	}).(ActionRuleActionGroupConditionAlertContextPtrOutput)
}

// A `alertRuleId` block as defined below.
func (o ActionRuleActionGroupConditionOutput) AlertRuleId() ActionRuleActionGroupConditionAlertRuleIdPtrOutput {
	return o.ApplyT(func(v ActionRuleActionGroupCondition) *ActionRuleActionGroupConditionAlertRuleId {
		return v.AlertRuleId
	}).(ActionRuleActionGroupConditionAlertRuleIdPtrOutput)
}

// A `description` block as defined below.
func (o ActionRuleActionGroupConditionOutput) Description() ActionRuleActionGroupConditionDescriptionPtrOutput {
	return o.ApplyT(func(v ActionRuleActionGroupCondition) *ActionRuleActionGroupConditionDescription {
		return v.Description
	}).(ActionRuleActionGroupConditionDescriptionPtrOutput)
}

// A `monitor` block as defined below.
func (o ActionRuleActionGroupConditionOutput) Monitor() ActionRuleActionGroupConditionMonitorPtrOutput {
	return o.ApplyT(func(v ActionRuleActionGroupCondition) *ActionRuleActionGroupConditionMonitor { return v.Monitor }).(ActionRuleActionGroupConditionMonitorPtrOutput)
}

// A `monitorService` block as defined below.
func (o ActionRuleActionGroupConditionOutput) MonitorService() ActionRuleActionGroupConditionMonitorServicePtrOutput {
	return o.ApplyT(func(v ActionRuleActionGroupCondition) *ActionRuleActionGroupConditionMonitorService {
		return v.MonitorService
	}).(ActionRuleActionGroupConditionMonitorServicePtrOutput)
}

// A `severity` block as defined below.
func (o ActionRuleActionGroupConditionOutput) Severity() ActionRuleActionGroupConditionSeverityPtrOutput {
	return o.ApplyT(func(v ActionRuleActionGroupCondition) *ActionRuleActionGroupConditionSeverity { return v.Severity }).(ActionRuleActionGroupConditionSeverityPtrOutput)
}

// A `targetResourceType` block as defined below.
func (o ActionRuleActionGroupConditionOutput) TargetResourceType() ActionRuleActionGroupConditionTargetResourceTypePtrOutput {
	return o.ApplyT(func(v ActionRuleActionGroupCondition) *ActionRuleActionGroupConditionTargetResourceType {
		return v.TargetResourceType
	}).(ActionRuleActionGroupConditionTargetResourceTypePtrOutput)
}

type ActionRuleActionGroupConditionPtrOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupCondition)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionPtrOutput) ToActionRuleActionGroupConditionPtrOutput() ActionRuleActionGroupConditionPtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionPtrOutput) ToActionRuleActionGroupConditionPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionPtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupCondition] {
	return pulumix.Output[*ActionRuleActionGroupCondition]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleActionGroupConditionPtrOutput) Elem() ActionRuleActionGroupConditionOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupCondition) ActionRuleActionGroupCondition {
		if v != nil {
			return *v
		}
		var ret ActionRuleActionGroupCondition
		return ret
	}).(ActionRuleActionGroupConditionOutput)
}

// A `alertContext` block as defined below.
func (o ActionRuleActionGroupConditionPtrOutput) AlertContext() ActionRuleActionGroupConditionAlertContextPtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupCondition) *ActionRuleActionGroupConditionAlertContext {
		if v == nil {
			return nil
		}
		return v.AlertContext
	}).(ActionRuleActionGroupConditionAlertContextPtrOutput)
}

// A `alertRuleId` block as defined below.
func (o ActionRuleActionGroupConditionPtrOutput) AlertRuleId() ActionRuleActionGroupConditionAlertRuleIdPtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupCondition) *ActionRuleActionGroupConditionAlertRuleId {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(ActionRuleActionGroupConditionAlertRuleIdPtrOutput)
}

// A `description` block as defined below.
func (o ActionRuleActionGroupConditionPtrOutput) Description() ActionRuleActionGroupConditionDescriptionPtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupCondition) *ActionRuleActionGroupConditionDescription {
		if v == nil {
			return nil
		}
		return v.Description
	}).(ActionRuleActionGroupConditionDescriptionPtrOutput)
}

// A `monitor` block as defined below.
func (o ActionRuleActionGroupConditionPtrOutput) Monitor() ActionRuleActionGroupConditionMonitorPtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupCondition) *ActionRuleActionGroupConditionMonitor {
		if v == nil {
			return nil
		}
		return v.Monitor
	}).(ActionRuleActionGroupConditionMonitorPtrOutput)
}

// A `monitorService` block as defined below.
func (o ActionRuleActionGroupConditionPtrOutput) MonitorService() ActionRuleActionGroupConditionMonitorServicePtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupCondition) *ActionRuleActionGroupConditionMonitorService {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(ActionRuleActionGroupConditionMonitorServicePtrOutput)
}

// A `severity` block as defined below.
func (o ActionRuleActionGroupConditionPtrOutput) Severity() ActionRuleActionGroupConditionSeverityPtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupCondition) *ActionRuleActionGroupConditionSeverity {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(ActionRuleActionGroupConditionSeverityPtrOutput)
}

// A `targetResourceType` block as defined below.
func (o ActionRuleActionGroupConditionPtrOutput) TargetResourceType() ActionRuleActionGroupConditionTargetResourceTypePtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupCondition) *ActionRuleActionGroupConditionTargetResourceType {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(ActionRuleActionGroupConditionTargetResourceTypePtrOutput)
}

type ActionRuleActionGroupConditionAlertContext struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ActionRuleActionGroupConditionAlertContextInput is an input type that accepts ActionRuleActionGroupConditionAlertContextArgs and ActionRuleActionGroupConditionAlertContextOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionAlertContextInput` via:
//
//	ActionRuleActionGroupConditionAlertContextArgs{...}
type ActionRuleActionGroupConditionAlertContextInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionAlertContextOutput() ActionRuleActionGroupConditionAlertContextOutput
	ToActionRuleActionGroupConditionAlertContextOutputWithContext(context.Context) ActionRuleActionGroupConditionAlertContextOutput
}

type ActionRuleActionGroupConditionAlertContextArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ActionRuleActionGroupConditionAlertContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupConditionAlertContext)(nil)).Elem()
}

func (i ActionRuleActionGroupConditionAlertContextArgs) ToActionRuleActionGroupConditionAlertContextOutput() ActionRuleActionGroupConditionAlertContextOutput {
	return i.ToActionRuleActionGroupConditionAlertContextOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionAlertContextArgs) ToActionRuleActionGroupConditionAlertContextOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionAlertContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionAlertContextOutput)
}

func (i ActionRuleActionGroupConditionAlertContextArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupConditionAlertContext] {
	return pulumix.Output[ActionRuleActionGroupConditionAlertContext]{
		OutputState: i.ToActionRuleActionGroupConditionAlertContextOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleActionGroupConditionAlertContextArgs) ToActionRuleActionGroupConditionAlertContextPtrOutput() ActionRuleActionGroupConditionAlertContextPtrOutput {
	return i.ToActionRuleActionGroupConditionAlertContextPtrOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionAlertContextArgs) ToActionRuleActionGroupConditionAlertContextPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionAlertContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionAlertContextOutput).ToActionRuleActionGroupConditionAlertContextPtrOutputWithContext(ctx)
}

// ActionRuleActionGroupConditionAlertContextPtrInput is an input type that accepts ActionRuleActionGroupConditionAlertContextArgs, ActionRuleActionGroupConditionAlertContextPtr and ActionRuleActionGroupConditionAlertContextPtrOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionAlertContextPtrInput` via:
//
//	        ActionRuleActionGroupConditionAlertContextArgs{...}
//
//	or:
//
//	        nil
type ActionRuleActionGroupConditionAlertContextPtrInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionAlertContextPtrOutput() ActionRuleActionGroupConditionAlertContextPtrOutput
	ToActionRuleActionGroupConditionAlertContextPtrOutputWithContext(context.Context) ActionRuleActionGroupConditionAlertContextPtrOutput
}

type actionRuleActionGroupConditionAlertContextPtrType ActionRuleActionGroupConditionAlertContextArgs

func ActionRuleActionGroupConditionAlertContextPtr(v *ActionRuleActionGroupConditionAlertContextArgs) ActionRuleActionGroupConditionAlertContextPtrInput {
	return (*actionRuleActionGroupConditionAlertContextPtrType)(v)
}

func (*actionRuleActionGroupConditionAlertContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupConditionAlertContext)(nil)).Elem()
}

func (i *actionRuleActionGroupConditionAlertContextPtrType) ToActionRuleActionGroupConditionAlertContextPtrOutput() ActionRuleActionGroupConditionAlertContextPtrOutput {
	return i.ToActionRuleActionGroupConditionAlertContextPtrOutputWithContext(context.Background())
}

func (i *actionRuleActionGroupConditionAlertContextPtrType) ToActionRuleActionGroupConditionAlertContextPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionAlertContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionAlertContextPtrOutput)
}

func (i *actionRuleActionGroupConditionAlertContextPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupConditionAlertContext] {
	return pulumix.Output[*ActionRuleActionGroupConditionAlertContext]{
		OutputState: i.ToActionRuleActionGroupConditionAlertContextPtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleActionGroupConditionAlertContextOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionAlertContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupConditionAlertContext)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionAlertContextOutput) ToActionRuleActionGroupConditionAlertContextOutput() ActionRuleActionGroupConditionAlertContextOutput {
	return o
}

func (o ActionRuleActionGroupConditionAlertContextOutput) ToActionRuleActionGroupConditionAlertContextOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionAlertContextOutput {
	return o
}

func (o ActionRuleActionGroupConditionAlertContextOutput) ToActionRuleActionGroupConditionAlertContextPtrOutput() ActionRuleActionGroupConditionAlertContextPtrOutput {
	return o.ToActionRuleActionGroupConditionAlertContextPtrOutputWithContext(context.Background())
}

func (o ActionRuleActionGroupConditionAlertContextOutput) ToActionRuleActionGroupConditionAlertContextPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionAlertContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleActionGroupConditionAlertContext) *ActionRuleActionGroupConditionAlertContext {
		return &v
	}).(ActionRuleActionGroupConditionAlertContextPtrOutput)
}

func (o ActionRuleActionGroupConditionAlertContextOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupConditionAlertContext] {
	return pulumix.Output[ActionRuleActionGroupConditionAlertContext]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o ActionRuleActionGroupConditionAlertContextOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleActionGroupConditionAlertContext) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition.
func (o ActionRuleActionGroupConditionAlertContextOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleActionGroupConditionAlertContext) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ActionRuleActionGroupConditionAlertContextPtrOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionAlertContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupConditionAlertContext)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionAlertContextPtrOutput) ToActionRuleActionGroupConditionAlertContextPtrOutput() ActionRuleActionGroupConditionAlertContextPtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionAlertContextPtrOutput) ToActionRuleActionGroupConditionAlertContextPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionAlertContextPtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionAlertContextPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupConditionAlertContext] {
	return pulumix.Output[*ActionRuleActionGroupConditionAlertContext]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleActionGroupConditionAlertContextPtrOutput) Elem() ActionRuleActionGroupConditionAlertContextOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionAlertContext) ActionRuleActionGroupConditionAlertContext {
		if v != nil {
			return *v
		}
		var ret ActionRuleActionGroupConditionAlertContext
		return ret
	}).(ActionRuleActionGroupConditionAlertContextOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o ActionRuleActionGroupConditionAlertContextPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionAlertContext) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition.
func (o ActionRuleActionGroupConditionAlertContextPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionAlertContext) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ActionRuleActionGroupConditionAlertRuleId struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ActionRuleActionGroupConditionAlertRuleIdInput is an input type that accepts ActionRuleActionGroupConditionAlertRuleIdArgs and ActionRuleActionGroupConditionAlertRuleIdOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionAlertRuleIdInput` via:
//
//	ActionRuleActionGroupConditionAlertRuleIdArgs{...}
type ActionRuleActionGroupConditionAlertRuleIdInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionAlertRuleIdOutput() ActionRuleActionGroupConditionAlertRuleIdOutput
	ToActionRuleActionGroupConditionAlertRuleIdOutputWithContext(context.Context) ActionRuleActionGroupConditionAlertRuleIdOutput
}

type ActionRuleActionGroupConditionAlertRuleIdArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ActionRuleActionGroupConditionAlertRuleIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupConditionAlertRuleId)(nil)).Elem()
}

func (i ActionRuleActionGroupConditionAlertRuleIdArgs) ToActionRuleActionGroupConditionAlertRuleIdOutput() ActionRuleActionGroupConditionAlertRuleIdOutput {
	return i.ToActionRuleActionGroupConditionAlertRuleIdOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionAlertRuleIdArgs) ToActionRuleActionGroupConditionAlertRuleIdOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionAlertRuleIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionAlertRuleIdOutput)
}

func (i ActionRuleActionGroupConditionAlertRuleIdArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupConditionAlertRuleId] {
	return pulumix.Output[ActionRuleActionGroupConditionAlertRuleId]{
		OutputState: i.ToActionRuleActionGroupConditionAlertRuleIdOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleActionGroupConditionAlertRuleIdArgs) ToActionRuleActionGroupConditionAlertRuleIdPtrOutput() ActionRuleActionGroupConditionAlertRuleIdPtrOutput {
	return i.ToActionRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionAlertRuleIdArgs) ToActionRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionAlertRuleIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionAlertRuleIdOutput).ToActionRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(ctx)
}

// ActionRuleActionGroupConditionAlertRuleIdPtrInput is an input type that accepts ActionRuleActionGroupConditionAlertRuleIdArgs, ActionRuleActionGroupConditionAlertRuleIdPtr and ActionRuleActionGroupConditionAlertRuleIdPtrOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionAlertRuleIdPtrInput` via:
//
//	        ActionRuleActionGroupConditionAlertRuleIdArgs{...}
//
//	or:
//
//	        nil
type ActionRuleActionGroupConditionAlertRuleIdPtrInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionAlertRuleIdPtrOutput() ActionRuleActionGroupConditionAlertRuleIdPtrOutput
	ToActionRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(context.Context) ActionRuleActionGroupConditionAlertRuleIdPtrOutput
}

type actionRuleActionGroupConditionAlertRuleIdPtrType ActionRuleActionGroupConditionAlertRuleIdArgs

func ActionRuleActionGroupConditionAlertRuleIdPtr(v *ActionRuleActionGroupConditionAlertRuleIdArgs) ActionRuleActionGroupConditionAlertRuleIdPtrInput {
	return (*actionRuleActionGroupConditionAlertRuleIdPtrType)(v)
}

func (*actionRuleActionGroupConditionAlertRuleIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupConditionAlertRuleId)(nil)).Elem()
}

func (i *actionRuleActionGroupConditionAlertRuleIdPtrType) ToActionRuleActionGroupConditionAlertRuleIdPtrOutput() ActionRuleActionGroupConditionAlertRuleIdPtrOutput {
	return i.ToActionRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(context.Background())
}

func (i *actionRuleActionGroupConditionAlertRuleIdPtrType) ToActionRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionAlertRuleIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionAlertRuleIdPtrOutput)
}

func (i *actionRuleActionGroupConditionAlertRuleIdPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupConditionAlertRuleId] {
	return pulumix.Output[*ActionRuleActionGroupConditionAlertRuleId]{
		OutputState: i.ToActionRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleActionGroupConditionAlertRuleIdOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionAlertRuleIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupConditionAlertRuleId)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionAlertRuleIdOutput) ToActionRuleActionGroupConditionAlertRuleIdOutput() ActionRuleActionGroupConditionAlertRuleIdOutput {
	return o
}

func (o ActionRuleActionGroupConditionAlertRuleIdOutput) ToActionRuleActionGroupConditionAlertRuleIdOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionAlertRuleIdOutput {
	return o
}

func (o ActionRuleActionGroupConditionAlertRuleIdOutput) ToActionRuleActionGroupConditionAlertRuleIdPtrOutput() ActionRuleActionGroupConditionAlertRuleIdPtrOutput {
	return o.ToActionRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(context.Background())
}

func (o ActionRuleActionGroupConditionAlertRuleIdOutput) ToActionRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionAlertRuleIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleActionGroupConditionAlertRuleId) *ActionRuleActionGroupConditionAlertRuleId {
		return &v
	}).(ActionRuleActionGroupConditionAlertRuleIdPtrOutput)
}

func (o ActionRuleActionGroupConditionAlertRuleIdOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupConditionAlertRuleId] {
	return pulumix.Output[ActionRuleActionGroupConditionAlertRuleId]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o ActionRuleActionGroupConditionAlertRuleIdOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleActionGroupConditionAlertRuleId) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition.
func (o ActionRuleActionGroupConditionAlertRuleIdOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleActionGroupConditionAlertRuleId) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ActionRuleActionGroupConditionAlertRuleIdPtrOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionAlertRuleIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupConditionAlertRuleId)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionAlertRuleIdPtrOutput) ToActionRuleActionGroupConditionAlertRuleIdPtrOutput() ActionRuleActionGroupConditionAlertRuleIdPtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionAlertRuleIdPtrOutput) ToActionRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionAlertRuleIdPtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionAlertRuleIdPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupConditionAlertRuleId] {
	return pulumix.Output[*ActionRuleActionGroupConditionAlertRuleId]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleActionGroupConditionAlertRuleIdPtrOutput) Elem() ActionRuleActionGroupConditionAlertRuleIdOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionAlertRuleId) ActionRuleActionGroupConditionAlertRuleId {
		if v != nil {
			return *v
		}
		var ret ActionRuleActionGroupConditionAlertRuleId
		return ret
	}).(ActionRuleActionGroupConditionAlertRuleIdOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o ActionRuleActionGroupConditionAlertRuleIdPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionAlertRuleId) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition.
func (o ActionRuleActionGroupConditionAlertRuleIdPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionAlertRuleId) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ActionRuleActionGroupConditionDescription struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ActionRuleActionGroupConditionDescriptionInput is an input type that accepts ActionRuleActionGroupConditionDescriptionArgs and ActionRuleActionGroupConditionDescriptionOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionDescriptionInput` via:
//
//	ActionRuleActionGroupConditionDescriptionArgs{...}
type ActionRuleActionGroupConditionDescriptionInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionDescriptionOutput() ActionRuleActionGroupConditionDescriptionOutput
	ToActionRuleActionGroupConditionDescriptionOutputWithContext(context.Context) ActionRuleActionGroupConditionDescriptionOutput
}

type ActionRuleActionGroupConditionDescriptionArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ActionRuleActionGroupConditionDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupConditionDescription)(nil)).Elem()
}

func (i ActionRuleActionGroupConditionDescriptionArgs) ToActionRuleActionGroupConditionDescriptionOutput() ActionRuleActionGroupConditionDescriptionOutput {
	return i.ToActionRuleActionGroupConditionDescriptionOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionDescriptionArgs) ToActionRuleActionGroupConditionDescriptionOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionDescriptionOutput)
}

func (i ActionRuleActionGroupConditionDescriptionArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupConditionDescription] {
	return pulumix.Output[ActionRuleActionGroupConditionDescription]{
		OutputState: i.ToActionRuleActionGroupConditionDescriptionOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleActionGroupConditionDescriptionArgs) ToActionRuleActionGroupConditionDescriptionPtrOutput() ActionRuleActionGroupConditionDescriptionPtrOutput {
	return i.ToActionRuleActionGroupConditionDescriptionPtrOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionDescriptionArgs) ToActionRuleActionGroupConditionDescriptionPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionDescriptionOutput).ToActionRuleActionGroupConditionDescriptionPtrOutputWithContext(ctx)
}

// ActionRuleActionGroupConditionDescriptionPtrInput is an input type that accepts ActionRuleActionGroupConditionDescriptionArgs, ActionRuleActionGroupConditionDescriptionPtr and ActionRuleActionGroupConditionDescriptionPtrOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionDescriptionPtrInput` via:
//
//	        ActionRuleActionGroupConditionDescriptionArgs{...}
//
//	or:
//
//	        nil
type ActionRuleActionGroupConditionDescriptionPtrInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionDescriptionPtrOutput() ActionRuleActionGroupConditionDescriptionPtrOutput
	ToActionRuleActionGroupConditionDescriptionPtrOutputWithContext(context.Context) ActionRuleActionGroupConditionDescriptionPtrOutput
}

type actionRuleActionGroupConditionDescriptionPtrType ActionRuleActionGroupConditionDescriptionArgs

func ActionRuleActionGroupConditionDescriptionPtr(v *ActionRuleActionGroupConditionDescriptionArgs) ActionRuleActionGroupConditionDescriptionPtrInput {
	return (*actionRuleActionGroupConditionDescriptionPtrType)(v)
}

func (*actionRuleActionGroupConditionDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupConditionDescription)(nil)).Elem()
}

func (i *actionRuleActionGroupConditionDescriptionPtrType) ToActionRuleActionGroupConditionDescriptionPtrOutput() ActionRuleActionGroupConditionDescriptionPtrOutput {
	return i.ToActionRuleActionGroupConditionDescriptionPtrOutputWithContext(context.Background())
}

func (i *actionRuleActionGroupConditionDescriptionPtrType) ToActionRuleActionGroupConditionDescriptionPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionDescriptionPtrOutput)
}

func (i *actionRuleActionGroupConditionDescriptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupConditionDescription] {
	return pulumix.Output[*ActionRuleActionGroupConditionDescription]{
		OutputState: i.ToActionRuleActionGroupConditionDescriptionPtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleActionGroupConditionDescriptionOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupConditionDescription)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionDescriptionOutput) ToActionRuleActionGroupConditionDescriptionOutput() ActionRuleActionGroupConditionDescriptionOutput {
	return o
}

func (o ActionRuleActionGroupConditionDescriptionOutput) ToActionRuleActionGroupConditionDescriptionOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionDescriptionOutput {
	return o
}

func (o ActionRuleActionGroupConditionDescriptionOutput) ToActionRuleActionGroupConditionDescriptionPtrOutput() ActionRuleActionGroupConditionDescriptionPtrOutput {
	return o.ToActionRuleActionGroupConditionDescriptionPtrOutputWithContext(context.Background())
}

func (o ActionRuleActionGroupConditionDescriptionOutput) ToActionRuleActionGroupConditionDescriptionPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionDescriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleActionGroupConditionDescription) *ActionRuleActionGroupConditionDescription {
		return &v
	}).(ActionRuleActionGroupConditionDescriptionPtrOutput)
}

func (o ActionRuleActionGroupConditionDescriptionOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupConditionDescription] {
	return pulumix.Output[ActionRuleActionGroupConditionDescription]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o ActionRuleActionGroupConditionDescriptionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleActionGroupConditionDescription) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition.
func (o ActionRuleActionGroupConditionDescriptionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleActionGroupConditionDescription) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ActionRuleActionGroupConditionDescriptionPtrOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupConditionDescription)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionDescriptionPtrOutput) ToActionRuleActionGroupConditionDescriptionPtrOutput() ActionRuleActionGroupConditionDescriptionPtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionDescriptionPtrOutput) ToActionRuleActionGroupConditionDescriptionPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionDescriptionPtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionDescriptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupConditionDescription] {
	return pulumix.Output[*ActionRuleActionGroupConditionDescription]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleActionGroupConditionDescriptionPtrOutput) Elem() ActionRuleActionGroupConditionDescriptionOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionDescription) ActionRuleActionGroupConditionDescription {
		if v != nil {
			return *v
		}
		var ret ActionRuleActionGroupConditionDescription
		return ret
	}).(ActionRuleActionGroupConditionDescriptionOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o ActionRuleActionGroupConditionDescriptionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionDescription) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition.
func (o ActionRuleActionGroupConditionDescriptionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionDescription) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ActionRuleActionGroupConditionMonitor struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
	Values []string `pulumi:"values"`
}

// ActionRuleActionGroupConditionMonitorInput is an input type that accepts ActionRuleActionGroupConditionMonitorArgs and ActionRuleActionGroupConditionMonitorOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionMonitorInput` via:
//
//	ActionRuleActionGroupConditionMonitorArgs{...}
type ActionRuleActionGroupConditionMonitorInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionMonitorOutput() ActionRuleActionGroupConditionMonitorOutput
	ToActionRuleActionGroupConditionMonitorOutputWithContext(context.Context) ActionRuleActionGroupConditionMonitorOutput
}

type ActionRuleActionGroupConditionMonitorArgs struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ActionRuleActionGroupConditionMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupConditionMonitor)(nil)).Elem()
}

func (i ActionRuleActionGroupConditionMonitorArgs) ToActionRuleActionGroupConditionMonitorOutput() ActionRuleActionGroupConditionMonitorOutput {
	return i.ToActionRuleActionGroupConditionMonitorOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionMonitorArgs) ToActionRuleActionGroupConditionMonitorOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionMonitorOutput)
}

func (i ActionRuleActionGroupConditionMonitorArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupConditionMonitor] {
	return pulumix.Output[ActionRuleActionGroupConditionMonitor]{
		OutputState: i.ToActionRuleActionGroupConditionMonitorOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleActionGroupConditionMonitorArgs) ToActionRuleActionGroupConditionMonitorPtrOutput() ActionRuleActionGroupConditionMonitorPtrOutput {
	return i.ToActionRuleActionGroupConditionMonitorPtrOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionMonitorArgs) ToActionRuleActionGroupConditionMonitorPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionMonitorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionMonitorOutput).ToActionRuleActionGroupConditionMonitorPtrOutputWithContext(ctx)
}

// ActionRuleActionGroupConditionMonitorPtrInput is an input type that accepts ActionRuleActionGroupConditionMonitorArgs, ActionRuleActionGroupConditionMonitorPtr and ActionRuleActionGroupConditionMonitorPtrOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionMonitorPtrInput` via:
//
//	        ActionRuleActionGroupConditionMonitorArgs{...}
//
//	or:
//
//	        nil
type ActionRuleActionGroupConditionMonitorPtrInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionMonitorPtrOutput() ActionRuleActionGroupConditionMonitorPtrOutput
	ToActionRuleActionGroupConditionMonitorPtrOutputWithContext(context.Context) ActionRuleActionGroupConditionMonitorPtrOutput
}

type actionRuleActionGroupConditionMonitorPtrType ActionRuleActionGroupConditionMonitorArgs

func ActionRuleActionGroupConditionMonitorPtr(v *ActionRuleActionGroupConditionMonitorArgs) ActionRuleActionGroupConditionMonitorPtrInput {
	return (*actionRuleActionGroupConditionMonitorPtrType)(v)
}

func (*actionRuleActionGroupConditionMonitorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupConditionMonitor)(nil)).Elem()
}

func (i *actionRuleActionGroupConditionMonitorPtrType) ToActionRuleActionGroupConditionMonitorPtrOutput() ActionRuleActionGroupConditionMonitorPtrOutput {
	return i.ToActionRuleActionGroupConditionMonitorPtrOutputWithContext(context.Background())
}

func (i *actionRuleActionGroupConditionMonitorPtrType) ToActionRuleActionGroupConditionMonitorPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionMonitorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionMonitorPtrOutput)
}

func (i *actionRuleActionGroupConditionMonitorPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupConditionMonitor] {
	return pulumix.Output[*ActionRuleActionGroupConditionMonitor]{
		OutputState: i.ToActionRuleActionGroupConditionMonitorPtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleActionGroupConditionMonitorOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupConditionMonitor)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionMonitorOutput) ToActionRuleActionGroupConditionMonitorOutput() ActionRuleActionGroupConditionMonitorOutput {
	return o
}

func (o ActionRuleActionGroupConditionMonitorOutput) ToActionRuleActionGroupConditionMonitorOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionMonitorOutput {
	return o
}

func (o ActionRuleActionGroupConditionMonitorOutput) ToActionRuleActionGroupConditionMonitorPtrOutput() ActionRuleActionGroupConditionMonitorPtrOutput {
	return o.ToActionRuleActionGroupConditionMonitorPtrOutputWithContext(context.Background())
}

func (o ActionRuleActionGroupConditionMonitorOutput) ToActionRuleActionGroupConditionMonitorPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionMonitorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleActionGroupConditionMonitor) *ActionRuleActionGroupConditionMonitor {
		return &v
	}).(ActionRuleActionGroupConditionMonitorPtrOutput)
}

func (o ActionRuleActionGroupConditionMonitorOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupConditionMonitor] {
	return pulumix.Output[ActionRuleActionGroupConditionMonitor]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o ActionRuleActionGroupConditionMonitorOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleActionGroupConditionMonitor) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
func (o ActionRuleActionGroupConditionMonitorOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleActionGroupConditionMonitor) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ActionRuleActionGroupConditionMonitorPtrOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionMonitorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupConditionMonitor)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionMonitorPtrOutput) ToActionRuleActionGroupConditionMonitorPtrOutput() ActionRuleActionGroupConditionMonitorPtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionMonitorPtrOutput) ToActionRuleActionGroupConditionMonitorPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionMonitorPtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionMonitorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupConditionMonitor] {
	return pulumix.Output[*ActionRuleActionGroupConditionMonitor]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleActionGroupConditionMonitorPtrOutput) Elem() ActionRuleActionGroupConditionMonitorOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionMonitor) ActionRuleActionGroupConditionMonitor {
		if v != nil {
			return *v
		}
		var ret ActionRuleActionGroupConditionMonitor
		return ret
	}).(ActionRuleActionGroupConditionMonitorOutput)
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o ActionRuleActionGroupConditionMonitorPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionMonitor) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
func (o ActionRuleActionGroupConditionMonitorPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionMonitor) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ActionRuleActionGroupConditionMonitorService struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Resource Health`, `Smart Detector` and `VM Insights - Health`.
	Values []string `pulumi:"values"`
}

// ActionRuleActionGroupConditionMonitorServiceInput is an input type that accepts ActionRuleActionGroupConditionMonitorServiceArgs and ActionRuleActionGroupConditionMonitorServiceOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionMonitorServiceInput` via:
//
//	ActionRuleActionGroupConditionMonitorServiceArgs{...}
type ActionRuleActionGroupConditionMonitorServiceInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionMonitorServiceOutput() ActionRuleActionGroupConditionMonitorServiceOutput
	ToActionRuleActionGroupConditionMonitorServiceOutputWithContext(context.Context) ActionRuleActionGroupConditionMonitorServiceOutput
}

type ActionRuleActionGroupConditionMonitorServiceArgs struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Resource Health`, `Smart Detector` and `VM Insights - Health`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ActionRuleActionGroupConditionMonitorServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupConditionMonitorService)(nil)).Elem()
}

func (i ActionRuleActionGroupConditionMonitorServiceArgs) ToActionRuleActionGroupConditionMonitorServiceOutput() ActionRuleActionGroupConditionMonitorServiceOutput {
	return i.ToActionRuleActionGroupConditionMonitorServiceOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionMonitorServiceArgs) ToActionRuleActionGroupConditionMonitorServiceOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionMonitorServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionMonitorServiceOutput)
}

func (i ActionRuleActionGroupConditionMonitorServiceArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupConditionMonitorService] {
	return pulumix.Output[ActionRuleActionGroupConditionMonitorService]{
		OutputState: i.ToActionRuleActionGroupConditionMonitorServiceOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleActionGroupConditionMonitorServiceArgs) ToActionRuleActionGroupConditionMonitorServicePtrOutput() ActionRuleActionGroupConditionMonitorServicePtrOutput {
	return i.ToActionRuleActionGroupConditionMonitorServicePtrOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionMonitorServiceArgs) ToActionRuleActionGroupConditionMonitorServicePtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionMonitorServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionMonitorServiceOutput).ToActionRuleActionGroupConditionMonitorServicePtrOutputWithContext(ctx)
}

// ActionRuleActionGroupConditionMonitorServicePtrInput is an input type that accepts ActionRuleActionGroupConditionMonitorServiceArgs, ActionRuleActionGroupConditionMonitorServicePtr and ActionRuleActionGroupConditionMonitorServicePtrOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionMonitorServicePtrInput` via:
//
//	        ActionRuleActionGroupConditionMonitorServiceArgs{...}
//
//	or:
//
//	        nil
type ActionRuleActionGroupConditionMonitorServicePtrInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionMonitorServicePtrOutput() ActionRuleActionGroupConditionMonitorServicePtrOutput
	ToActionRuleActionGroupConditionMonitorServicePtrOutputWithContext(context.Context) ActionRuleActionGroupConditionMonitorServicePtrOutput
}

type actionRuleActionGroupConditionMonitorServicePtrType ActionRuleActionGroupConditionMonitorServiceArgs

func ActionRuleActionGroupConditionMonitorServicePtr(v *ActionRuleActionGroupConditionMonitorServiceArgs) ActionRuleActionGroupConditionMonitorServicePtrInput {
	return (*actionRuleActionGroupConditionMonitorServicePtrType)(v)
}

func (*actionRuleActionGroupConditionMonitorServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupConditionMonitorService)(nil)).Elem()
}

func (i *actionRuleActionGroupConditionMonitorServicePtrType) ToActionRuleActionGroupConditionMonitorServicePtrOutput() ActionRuleActionGroupConditionMonitorServicePtrOutput {
	return i.ToActionRuleActionGroupConditionMonitorServicePtrOutputWithContext(context.Background())
}

func (i *actionRuleActionGroupConditionMonitorServicePtrType) ToActionRuleActionGroupConditionMonitorServicePtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionMonitorServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionMonitorServicePtrOutput)
}

func (i *actionRuleActionGroupConditionMonitorServicePtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupConditionMonitorService] {
	return pulumix.Output[*ActionRuleActionGroupConditionMonitorService]{
		OutputState: i.ToActionRuleActionGroupConditionMonitorServicePtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleActionGroupConditionMonitorServiceOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionMonitorServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupConditionMonitorService)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionMonitorServiceOutput) ToActionRuleActionGroupConditionMonitorServiceOutput() ActionRuleActionGroupConditionMonitorServiceOutput {
	return o
}

func (o ActionRuleActionGroupConditionMonitorServiceOutput) ToActionRuleActionGroupConditionMonitorServiceOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionMonitorServiceOutput {
	return o
}

func (o ActionRuleActionGroupConditionMonitorServiceOutput) ToActionRuleActionGroupConditionMonitorServicePtrOutput() ActionRuleActionGroupConditionMonitorServicePtrOutput {
	return o.ToActionRuleActionGroupConditionMonitorServicePtrOutputWithContext(context.Background())
}

func (o ActionRuleActionGroupConditionMonitorServiceOutput) ToActionRuleActionGroupConditionMonitorServicePtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionMonitorServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleActionGroupConditionMonitorService) *ActionRuleActionGroupConditionMonitorService {
		return &v
	}).(ActionRuleActionGroupConditionMonitorServicePtrOutput)
}

func (o ActionRuleActionGroupConditionMonitorServiceOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupConditionMonitorService] {
	return pulumix.Output[ActionRuleActionGroupConditionMonitorService]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o ActionRuleActionGroupConditionMonitorServiceOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleActionGroupConditionMonitorService) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Resource Health`, `Smart Detector` and `VM Insights - Health`.
func (o ActionRuleActionGroupConditionMonitorServiceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleActionGroupConditionMonitorService) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ActionRuleActionGroupConditionMonitorServicePtrOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionMonitorServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupConditionMonitorService)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionMonitorServicePtrOutput) ToActionRuleActionGroupConditionMonitorServicePtrOutput() ActionRuleActionGroupConditionMonitorServicePtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionMonitorServicePtrOutput) ToActionRuleActionGroupConditionMonitorServicePtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionMonitorServicePtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionMonitorServicePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupConditionMonitorService] {
	return pulumix.Output[*ActionRuleActionGroupConditionMonitorService]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleActionGroupConditionMonitorServicePtrOutput) Elem() ActionRuleActionGroupConditionMonitorServiceOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionMonitorService) ActionRuleActionGroupConditionMonitorService {
		if v != nil {
			return *v
		}
		var ret ActionRuleActionGroupConditionMonitorService
		return ret
	}).(ActionRuleActionGroupConditionMonitorServiceOutput)
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o ActionRuleActionGroupConditionMonitorServicePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionMonitorService) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Resource Health`, `Smart Detector` and `VM Insights - Health`.
func (o ActionRuleActionGroupConditionMonitorServicePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionMonitorService) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ActionRuleActionGroupConditionSeverity struct {
	// The operator for a given condition. Possible values are `Equals`and `NotEquals`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
	Values []string `pulumi:"values"`
}

// ActionRuleActionGroupConditionSeverityInput is an input type that accepts ActionRuleActionGroupConditionSeverityArgs and ActionRuleActionGroupConditionSeverityOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionSeverityInput` via:
//
//	ActionRuleActionGroupConditionSeverityArgs{...}
type ActionRuleActionGroupConditionSeverityInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionSeverityOutput() ActionRuleActionGroupConditionSeverityOutput
	ToActionRuleActionGroupConditionSeverityOutputWithContext(context.Context) ActionRuleActionGroupConditionSeverityOutput
}

type ActionRuleActionGroupConditionSeverityArgs struct {
	// The operator for a given condition. Possible values are `Equals`and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ActionRuleActionGroupConditionSeverityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupConditionSeverity)(nil)).Elem()
}

func (i ActionRuleActionGroupConditionSeverityArgs) ToActionRuleActionGroupConditionSeverityOutput() ActionRuleActionGroupConditionSeverityOutput {
	return i.ToActionRuleActionGroupConditionSeverityOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionSeverityArgs) ToActionRuleActionGroupConditionSeverityOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionSeverityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionSeverityOutput)
}

func (i ActionRuleActionGroupConditionSeverityArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupConditionSeverity] {
	return pulumix.Output[ActionRuleActionGroupConditionSeverity]{
		OutputState: i.ToActionRuleActionGroupConditionSeverityOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleActionGroupConditionSeverityArgs) ToActionRuleActionGroupConditionSeverityPtrOutput() ActionRuleActionGroupConditionSeverityPtrOutput {
	return i.ToActionRuleActionGroupConditionSeverityPtrOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionSeverityArgs) ToActionRuleActionGroupConditionSeverityPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionSeverityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionSeverityOutput).ToActionRuleActionGroupConditionSeverityPtrOutputWithContext(ctx)
}

// ActionRuleActionGroupConditionSeverityPtrInput is an input type that accepts ActionRuleActionGroupConditionSeverityArgs, ActionRuleActionGroupConditionSeverityPtr and ActionRuleActionGroupConditionSeverityPtrOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionSeverityPtrInput` via:
//
//	        ActionRuleActionGroupConditionSeverityArgs{...}
//
//	or:
//
//	        nil
type ActionRuleActionGroupConditionSeverityPtrInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionSeverityPtrOutput() ActionRuleActionGroupConditionSeverityPtrOutput
	ToActionRuleActionGroupConditionSeverityPtrOutputWithContext(context.Context) ActionRuleActionGroupConditionSeverityPtrOutput
}

type actionRuleActionGroupConditionSeverityPtrType ActionRuleActionGroupConditionSeverityArgs

func ActionRuleActionGroupConditionSeverityPtr(v *ActionRuleActionGroupConditionSeverityArgs) ActionRuleActionGroupConditionSeverityPtrInput {
	return (*actionRuleActionGroupConditionSeverityPtrType)(v)
}

func (*actionRuleActionGroupConditionSeverityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupConditionSeverity)(nil)).Elem()
}

func (i *actionRuleActionGroupConditionSeverityPtrType) ToActionRuleActionGroupConditionSeverityPtrOutput() ActionRuleActionGroupConditionSeverityPtrOutput {
	return i.ToActionRuleActionGroupConditionSeverityPtrOutputWithContext(context.Background())
}

func (i *actionRuleActionGroupConditionSeverityPtrType) ToActionRuleActionGroupConditionSeverityPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionSeverityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionSeverityPtrOutput)
}

func (i *actionRuleActionGroupConditionSeverityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupConditionSeverity] {
	return pulumix.Output[*ActionRuleActionGroupConditionSeverity]{
		OutputState: i.ToActionRuleActionGroupConditionSeverityPtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleActionGroupConditionSeverityOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionSeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupConditionSeverity)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionSeverityOutput) ToActionRuleActionGroupConditionSeverityOutput() ActionRuleActionGroupConditionSeverityOutput {
	return o
}

func (o ActionRuleActionGroupConditionSeverityOutput) ToActionRuleActionGroupConditionSeverityOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionSeverityOutput {
	return o
}

func (o ActionRuleActionGroupConditionSeverityOutput) ToActionRuleActionGroupConditionSeverityPtrOutput() ActionRuleActionGroupConditionSeverityPtrOutput {
	return o.ToActionRuleActionGroupConditionSeverityPtrOutputWithContext(context.Background())
}

func (o ActionRuleActionGroupConditionSeverityOutput) ToActionRuleActionGroupConditionSeverityPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionSeverityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleActionGroupConditionSeverity) *ActionRuleActionGroupConditionSeverity {
		return &v
	}).(ActionRuleActionGroupConditionSeverityPtrOutput)
}

func (o ActionRuleActionGroupConditionSeverityOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupConditionSeverity] {
	return pulumix.Output[ActionRuleActionGroupConditionSeverity]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`and `NotEquals`.
func (o ActionRuleActionGroupConditionSeverityOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleActionGroupConditionSeverity) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
func (o ActionRuleActionGroupConditionSeverityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleActionGroupConditionSeverity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ActionRuleActionGroupConditionSeverityPtrOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionSeverityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupConditionSeverity)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionSeverityPtrOutput) ToActionRuleActionGroupConditionSeverityPtrOutput() ActionRuleActionGroupConditionSeverityPtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionSeverityPtrOutput) ToActionRuleActionGroupConditionSeverityPtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionSeverityPtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionSeverityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupConditionSeverity] {
	return pulumix.Output[*ActionRuleActionGroupConditionSeverity]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleActionGroupConditionSeverityPtrOutput) Elem() ActionRuleActionGroupConditionSeverityOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionSeverity) ActionRuleActionGroupConditionSeverity {
		if v != nil {
			return *v
		}
		var ret ActionRuleActionGroupConditionSeverity
		return ret
	}).(ActionRuleActionGroupConditionSeverityOutput)
}

// The operator for a given condition. Possible values are `Equals`and `NotEquals`.
func (o ActionRuleActionGroupConditionSeverityPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionSeverity) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
func (o ActionRuleActionGroupConditionSeverityPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionSeverity) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ActionRuleActionGroupConditionTargetResourceType struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource types.
	Values []string `pulumi:"values"`
}

// ActionRuleActionGroupConditionTargetResourceTypeInput is an input type that accepts ActionRuleActionGroupConditionTargetResourceTypeArgs and ActionRuleActionGroupConditionTargetResourceTypeOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionTargetResourceTypeInput` via:
//
//	ActionRuleActionGroupConditionTargetResourceTypeArgs{...}
type ActionRuleActionGroupConditionTargetResourceTypeInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionTargetResourceTypeOutput() ActionRuleActionGroupConditionTargetResourceTypeOutput
	ToActionRuleActionGroupConditionTargetResourceTypeOutputWithContext(context.Context) ActionRuleActionGroupConditionTargetResourceTypeOutput
}

type ActionRuleActionGroupConditionTargetResourceTypeArgs struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource types.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ActionRuleActionGroupConditionTargetResourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupConditionTargetResourceType)(nil)).Elem()
}

func (i ActionRuleActionGroupConditionTargetResourceTypeArgs) ToActionRuleActionGroupConditionTargetResourceTypeOutput() ActionRuleActionGroupConditionTargetResourceTypeOutput {
	return i.ToActionRuleActionGroupConditionTargetResourceTypeOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionTargetResourceTypeArgs) ToActionRuleActionGroupConditionTargetResourceTypeOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionTargetResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionTargetResourceTypeOutput)
}

func (i ActionRuleActionGroupConditionTargetResourceTypeArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupConditionTargetResourceType] {
	return pulumix.Output[ActionRuleActionGroupConditionTargetResourceType]{
		OutputState: i.ToActionRuleActionGroupConditionTargetResourceTypeOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleActionGroupConditionTargetResourceTypeArgs) ToActionRuleActionGroupConditionTargetResourceTypePtrOutput() ActionRuleActionGroupConditionTargetResourceTypePtrOutput {
	return i.ToActionRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupConditionTargetResourceTypeArgs) ToActionRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionTargetResourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionTargetResourceTypeOutput).ToActionRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(ctx)
}

// ActionRuleActionGroupConditionTargetResourceTypePtrInput is an input type that accepts ActionRuleActionGroupConditionTargetResourceTypeArgs, ActionRuleActionGroupConditionTargetResourceTypePtr and ActionRuleActionGroupConditionTargetResourceTypePtrOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupConditionTargetResourceTypePtrInput` via:
//
//	        ActionRuleActionGroupConditionTargetResourceTypeArgs{...}
//
//	or:
//
//	        nil
type ActionRuleActionGroupConditionTargetResourceTypePtrInput interface {
	pulumi.Input

	ToActionRuleActionGroupConditionTargetResourceTypePtrOutput() ActionRuleActionGroupConditionTargetResourceTypePtrOutput
	ToActionRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(context.Context) ActionRuleActionGroupConditionTargetResourceTypePtrOutput
}

type actionRuleActionGroupConditionTargetResourceTypePtrType ActionRuleActionGroupConditionTargetResourceTypeArgs

func ActionRuleActionGroupConditionTargetResourceTypePtr(v *ActionRuleActionGroupConditionTargetResourceTypeArgs) ActionRuleActionGroupConditionTargetResourceTypePtrInput {
	return (*actionRuleActionGroupConditionTargetResourceTypePtrType)(v)
}

func (*actionRuleActionGroupConditionTargetResourceTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupConditionTargetResourceType)(nil)).Elem()
}

func (i *actionRuleActionGroupConditionTargetResourceTypePtrType) ToActionRuleActionGroupConditionTargetResourceTypePtrOutput() ActionRuleActionGroupConditionTargetResourceTypePtrOutput {
	return i.ToActionRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(context.Background())
}

func (i *actionRuleActionGroupConditionTargetResourceTypePtrType) ToActionRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionTargetResourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupConditionTargetResourceTypePtrOutput)
}

func (i *actionRuleActionGroupConditionTargetResourceTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupConditionTargetResourceType] {
	return pulumix.Output[*ActionRuleActionGroupConditionTargetResourceType]{
		OutputState: i.ToActionRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleActionGroupConditionTargetResourceTypeOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionTargetResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupConditionTargetResourceType)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionTargetResourceTypeOutput) ToActionRuleActionGroupConditionTargetResourceTypeOutput() ActionRuleActionGroupConditionTargetResourceTypeOutput {
	return o
}

func (o ActionRuleActionGroupConditionTargetResourceTypeOutput) ToActionRuleActionGroupConditionTargetResourceTypeOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionTargetResourceTypeOutput {
	return o
}

func (o ActionRuleActionGroupConditionTargetResourceTypeOutput) ToActionRuleActionGroupConditionTargetResourceTypePtrOutput() ActionRuleActionGroupConditionTargetResourceTypePtrOutput {
	return o.ToActionRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(context.Background())
}

func (o ActionRuleActionGroupConditionTargetResourceTypeOutput) ToActionRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionTargetResourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleActionGroupConditionTargetResourceType) *ActionRuleActionGroupConditionTargetResourceType {
		return &v
	}).(ActionRuleActionGroupConditionTargetResourceTypePtrOutput)
}

func (o ActionRuleActionGroupConditionTargetResourceTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupConditionTargetResourceType] {
	return pulumix.Output[ActionRuleActionGroupConditionTargetResourceType]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o ActionRuleActionGroupConditionTargetResourceTypeOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleActionGroupConditionTargetResourceType) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. The values should be valid resource types.
func (o ActionRuleActionGroupConditionTargetResourceTypeOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleActionGroupConditionTargetResourceType) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ActionRuleActionGroupConditionTargetResourceTypePtrOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupConditionTargetResourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupConditionTargetResourceType)(nil)).Elem()
}

func (o ActionRuleActionGroupConditionTargetResourceTypePtrOutput) ToActionRuleActionGroupConditionTargetResourceTypePtrOutput() ActionRuleActionGroupConditionTargetResourceTypePtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionTargetResourceTypePtrOutput) ToActionRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) ActionRuleActionGroupConditionTargetResourceTypePtrOutput {
	return o
}

func (o ActionRuleActionGroupConditionTargetResourceTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupConditionTargetResourceType] {
	return pulumix.Output[*ActionRuleActionGroupConditionTargetResourceType]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleActionGroupConditionTargetResourceTypePtrOutput) Elem() ActionRuleActionGroupConditionTargetResourceTypeOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionTargetResourceType) ActionRuleActionGroupConditionTargetResourceType {
		if v != nil {
			return *v
		}
		var ret ActionRuleActionGroupConditionTargetResourceType
		return ret
	}).(ActionRuleActionGroupConditionTargetResourceTypeOutput)
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o ActionRuleActionGroupConditionTargetResourceTypePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionTargetResourceType) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. The values should be valid resource types.
func (o ActionRuleActionGroupConditionTargetResourceTypePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupConditionTargetResourceType) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ActionRuleActionGroupScope struct {
	// A list of resource IDs of the given scope type which will be the target of action rule.
	ResourceIds []string `pulumi:"resourceIds"`
	// Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
	Type string `pulumi:"type"`
}

// ActionRuleActionGroupScopeInput is an input type that accepts ActionRuleActionGroupScopeArgs and ActionRuleActionGroupScopeOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupScopeInput` via:
//
//	ActionRuleActionGroupScopeArgs{...}
type ActionRuleActionGroupScopeInput interface {
	pulumi.Input

	ToActionRuleActionGroupScopeOutput() ActionRuleActionGroupScopeOutput
	ToActionRuleActionGroupScopeOutputWithContext(context.Context) ActionRuleActionGroupScopeOutput
}

type ActionRuleActionGroupScopeArgs struct {
	// A list of resource IDs of the given scope type which will be the target of action rule.
	ResourceIds pulumi.StringArrayInput `pulumi:"resourceIds"`
	// Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ActionRuleActionGroupScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupScope)(nil)).Elem()
}

func (i ActionRuleActionGroupScopeArgs) ToActionRuleActionGroupScopeOutput() ActionRuleActionGroupScopeOutput {
	return i.ToActionRuleActionGroupScopeOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupScopeArgs) ToActionRuleActionGroupScopeOutputWithContext(ctx context.Context) ActionRuleActionGroupScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupScopeOutput)
}

func (i ActionRuleActionGroupScopeArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupScope] {
	return pulumix.Output[ActionRuleActionGroupScope]{
		OutputState: i.ToActionRuleActionGroupScopeOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleActionGroupScopeArgs) ToActionRuleActionGroupScopePtrOutput() ActionRuleActionGroupScopePtrOutput {
	return i.ToActionRuleActionGroupScopePtrOutputWithContext(context.Background())
}

func (i ActionRuleActionGroupScopeArgs) ToActionRuleActionGroupScopePtrOutputWithContext(ctx context.Context) ActionRuleActionGroupScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupScopeOutput).ToActionRuleActionGroupScopePtrOutputWithContext(ctx)
}

// ActionRuleActionGroupScopePtrInput is an input type that accepts ActionRuleActionGroupScopeArgs, ActionRuleActionGroupScopePtr and ActionRuleActionGroupScopePtrOutput values.
// You can construct a concrete instance of `ActionRuleActionGroupScopePtrInput` via:
//
//	        ActionRuleActionGroupScopeArgs{...}
//
//	or:
//
//	        nil
type ActionRuleActionGroupScopePtrInput interface {
	pulumi.Input

	ToActionRuleActionGroupScopePtrOutput() ActionRuleActionGroupScopePtrOutput
	ToActionRuleActionGroupScopePtrOutputWithContext(context.Context) ActionRuleActionGroupScopePtrOutput
}

type actionRuleActionGroupScopePtrType ActionRuleActionGroupScopeArgs

func ActionRuleActionGroupScopePtr(v *ActionRuleActionGroupScopeArgs) ActionRuleActionGroupScopePtrInput {
	return (*actionRuleActionGroupScopePtrType)(v)
}

func (*actionRuleActionGroupScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupScope)(nil)).Elem()
}

func (i *actionRuleActionGroupScopePtrType) ToActionRuleActionGroupScopePtrOutput() ActionRuleActionGroupScopePtrOutput {
	return i.ToActionRuleActionGroupScopePtrOutputWithContext(context.Background())
}

func (i *actionRuleActionGroupScopePtrType) ToActionRuleActionGroupScopePtrOutputWithContext(ctx context.Context) ActionRuleActionGroupScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleActionGroupScopePtrOutput)
}

func (i *actionRuleActionGroupScopePtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupScope] {
	return pulumix.Output[*ActionRuleActionGroupScope]{
		OutputState: i.ToActionRuleActionGroupScopePtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleActionGroupScopeOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleActionGroupScope)(nil)).Elem()
}

func (o ActionRuleActionGroupScopeOutput) ToActionRuleActionGroupScopeOutput() ActionRuleActionGroupScopeOutput {
	return o
}

func (o ActionRuleActionGroupScopeOutput) ToActionRuleActionGroupScopeOutputWithContext(ctx context.Context) ActionRuleActionGroupScopeOutput {
	return o
}

func (o ActionRuleActionGroupScopeOutput) ToActionRuleActionGroupScopePtrOutput() ActionRuleActionGroupScopePtrOutput {
	return o.ToActionRuleActionGroupScopePtrOutputWithContext(context.Background())
}

func (o ActionRuleActionGroupScopeOutput) ToActionRuleActionGroupScopePtrOutputWithContext(ctx context.Context) ActionRuleActionGroupScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleActionGroupScope) *ActionRuleActionGroupScope {
		return &v
	}).(ActionRuleActionGroupScopePtrOutput)
}

func (o ActionRuleActionGroupScopeOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleActionGroupScope] {
	return pulumix.Output[ActionRuleActionGroupScope]{
		OutputState: o.OutputState,
	}
}

// A list of resource IDs of the given scope type which will be the target of action rule.
func (o ActionRuleActionGroupScopeOutput) ResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleActionGroupScope) []string { return v.ResourceIds }).(pulumi.StringArrayOutput)
}

// Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
func (o ActionRuleActionGroupScopeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleActionGroupScope) string { return v.Type }).(pulumi.StringOutput)
}

type ActionRuleActionGroupScopePtrOutput struct{ *pulumi.OutputState }

func (ActionRuleActionGroupScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleActionGroupScope)(nil)).Elem()
}

func (o ActionRuleActionGroupScopePtrOutput) ToActionRuleActionGroupScopePtrOutput() ActionRuleActionGroupScopePtrOutput {
	return o
}

func (o ActionRuleActionGroupScopePtrOutput) ToActionRuleActionGroupScopePtrOutputWithContext(ctx context.Context) ActionRuleActionGroupScopePtrOutput {
	return o
}

func (o ActionRuleActionGroupScopePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleActionGroupScope] {
	return pulumix.Output[*ActionRuleActionGroupScope]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleActionGroupScopePtrOutput) Elem() ActionRuleActionGroupScopeOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupScope) ActionRuleActionGroupScope {
		if v != nil {
			return *v
		}
		var ret ActionRuleActionGroupScope
		return ret
	}).(ActionRuleActionGroupScopeOutput)
}

// A list of resource IDs of the given scope type which will be the target of action rule.
func (o ActionRuleActionGroupScopePtrOutput) ResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupScope) []string {
		if v == nil {
			return nil
		}
		return v.ResourceIds
	}).(pulumi.StringArrayOutput)
}

// Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
func (o ActionRuleActionGroupScopePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleActionGroupScope) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ActionRuleSuppressionCondition struct {
	// A `alertContext` block as defined below.
	AlertContext *ActionRuleSuppressionConditionAlertContext `pulumi:"alertContext"`
	// A `alertRuleId` block as defined below.
	AlertRuleId *ActionRuleSuppressionConditionAlertRuleId `pulumi:"alertRuleId"`
	// A `description` block as defined below.
	Description *ActionRuleSuppressionConditionDescription `pulumi:"description"`
	// A `monitor` block as defined below.
	Monitor *ActionRuleSuppressionConditionMonitor `pulumi:"monitor"`
	// A `monitorService` block as defined below.
	MonitorService *ActionRuleSuppressionConditionMonitorService `pulumi:"monitorService"`
	// A `severity` block as defined below.
	Severity *ActionRuleSuppressionConditionSeverity `pulumi:"severity"`
	// A `targetResourceType` block as defined below.
	TargetResourceType *ActionRuleSuppressionConditionTargetResourceType `pulumi:"targetResourceType"`
}

// ActionRuleSuppressionConditionInput is an input type that accepts ActionRuleSuppressionConditionArgs and ActionRuleSuppressionConditionOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionInput` via:
//
//	ActionRuleSuppressionConditionArgs{...}
type ActionRuleSuppressionConditionInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionOutput() ActionRuleSuppressionConditionOutput
	ToActionRuleSuppressionConditionOutputWithContext(context.Context) ActionRuleSuppressionConditionOutput
}

type ActionRuleSuppressionConditionArgs struct {
	// A `alertContext` block as defined below.
	AlertContext ActionRuleSuppressionConditionAlertContextPtrInput `pulumi:"alertContext"`
	// A `alertRuleId` block as defined below.
	AlertRuleId ActionRuleSuppressionConditionAlertRuleIdPtrInput `pulumi:"alertRuleId"`
	// A `description` block as defined below.
	Description ActionRuleSuppressionConditionDescriptionPtrInput `pulumi:"description"`
	// A `monitor` block as defined below.
	Monitor ActionRuleSuppressionConditionMonitorPtrInput `pulumi:"monitor"`
	// A `monitorService` block as defined below.
	MonitorService ActionRuleSuppressionConditionMonitorServicePtrInput `pulumi:"monitorService"`
	// A `severity` block as defined below.
	Severity ActionRuleSuppressionConditionSeverityPtrInput `pulumi:"severity"`
	// A `targetResourceType` block as defined below.
	TargetResourceType ActionRuleSuppressionConditionTargetResourceTypePtrInput `pulumi:"targetResourceType"`
}

func (ActionRuleSuppressionConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionCondition)(nil)).Elem()
}

func (i ActionRuleSuppressionConditionArgs) ToActionRuleSuppressionConditionOutput() ActionRuleSuppressionConditionOutput {
	return i.ToActionRuleSuppressionConditionOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionArgs) ToActionRuleSuppressionConditionOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionOutput)
}

func (i ActionRuleSuppressionConditionArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionCondition] {
	return pulumix.Output[ActionRuleSuppressionCondition]{
		OutputState: i.ToActionRuleSuppressionConditionOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleSuppressionConditionArgs) ToActionRuleSuppressionConditionPtrOutput() ActionRuleSuppressionConditionPtrOutput {
	return i.ToActionRuleSuppressionConditionPtrOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionArgs) ToActionRuleSuppressionConditionPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionOutput).ToActionRuleSuppressionConditionPtrOutputWithContext(ctx)
}

// ActionRuleSuppressionConditionPtrInput is an input type that accepts ActionRuleSuppressionConditionArgs, ActionRuleSuppressionConditionPtr and ActionRuleSuppressionConditionPtrOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionPtrInput` via:
//
//	        ActionRuleSuppressionConditionArgs{...}
//
//	or:
//
//	        nil
type ActionRuleSuppressionConditionPtrInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionPtrOutput() ActionRuleSuppressionConditionPtrOutput
	ToActionRuleSuppressionConditionPtrOutputWithContext(context.Context) ActionRuleSuppressionConditionPtrOutput
}

type actionRuleSuppressionConditionPtrType ActionRuleSuppressionConditionArgs

func ActionRuleSuppressionConditionPtr(v *ActionRuleSuppressionConditionArgs) ActionRuleSuppressionConditionPtrInput {
	return (*actionRuleSuppressionConditionPtrType)(v)
}

func (*actionRuleSuppressionConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionCondition)(nil)).Elem()
}

func (i *actionRuleSuppressionConditionPtrType) ToActionRuleSuppressionConditionPtrOutput() ActionRuleSuppressionConditionPtrOutput {
	return i.ToActionRuleSuppressionConditionPtrOutputWithContext(context.Background())
}

func (i *actionRuleSuppressionConditionPtrType) ToActionRuleSuppressionConditionPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionPtrOutput)
}

func (i *actionRuleSuppressionConditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionCondition] {
	return pulumix.Output[*ActionRuleSuppressionCondition]{
		OutputState: i.ToActionRuleSuppressionConditionPtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleSuppressionConditionOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionCondition)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionOutput) ToActionRuleSuppressionConditionOutput() ActionRuleSuppressionConditionOutput {
	return o
}

func (o ActionRuleSuppressionConditionOutput) ToActionRuleSuppressionConditionOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionOutput {
	return o
}

func (o ActionRuleSuppressionConditionOutput) ToActionRuleSuppressionConditionPtrOutput() ActionRuleSuppressionConditionPtrOutput {
	return o.ToActionRuleSuppressionConditionPtrOutputWithContext(context.Background())
}

func (o ActionRuleSuppressionConditionOutput) ToActionRuleSuppressionConditionPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleSuppressionCondition) *ActionRuleSuppressionCondition {
		return &v
	}).(ActionRuleSuppressionConditionPtrOutput)
}

func (o ActionRuleSuppressionConditionOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionCondition] {
	return pulumix.Output[ActionRuleSuppressionCondition]{
		OutputState: o.OutputState,
	}
}

// A `alertContext` block as defined below.
func (o ActionRuleSuppressionConditionOutput) AlertContext() ActionRuleSuppressionConditionAlertContextPtrOutput {
	return o.ApplyT(func(v ActionRuleSuppressionCondition) *ActionRuleSuppressionConditionAlertContext {
		return v.AlertContext
	}).(ActionRuleSuppressionConditionAlertContextPtrOutput)
}

// A `alertRuleId` block as defined below.
func (o ActionRuleSuppressionConditionOutput) AlertRuleId() ActionRuleSuppressionConditionAlertRuleIdPtrOutput {
	return o.ApplyT(func(v ActionRuleSuppressionCondition) *ActionRuleSuppressionConditionAlertRuleId {
		return v.AlertRuleId
	}).(ActionRuleSuppressionConditionAlertRuleIdPtrOutput)
}

// A `description` block as defined below.
func (o ActionRuleSuppressionConditionOutput) Description() ActionRuleSuppressionConditionDescriptionPtrOutput {
	return o.ApplyT(func(v ActionRuleSuppressionCondition) *ActionRuleSuppressionConditionDescription {
		return v.Description
	}).(ActionRuleSuppressionConditionDescriptionPtrOutput)
}

// A `monitor` block as defined below.
func (o ActionRuleSuppressionConditionOutput) Monitor() ActionRuleSuppressionConditionMonitorPtrOutput {
	return o.ApplyT(func(v ActionRuleSuppressionCondition) *ActionRuleSuppressionConditionMonitor { return v.Monitor }).(ActionRuleSuppressionConditionMonitorPtrOutput)
}

// A `monitorService` block as defined below.
func (o ActionRuleSuppressionConditionOutput) MonitorService() ActionRuleSuppressionConditionMonitorServicePtrOutput {
	return o.ApplyT(func(v ActionRuleSuppressionCondition) *ActionRuleSuppressionConditionMonitorService {
		return v.MonitorService
	}).(ActionRuleSuppressionConditionMonitorServicePtrOutput)
}

// A `severity` block as defined below.
func (o ActionRuleSuppressionConditionOutput) Severity() ActionRuleSuppressionConditionSeverityPtrOutput {
	return o.ApplyT(func(v ActionRuleSuppressionCondition) *ActionRuleSuppressionConditionSeverity { return v.Severity }).(ActionRuleSuppressionConditionSeverityPtrOutput)
}

// A `targetResourceType` block as defined below.
func (o ActionRuleSuppressionConditionOutput) TargetResourceType() ActionRuleSuppressionConditionTargetResourceTypePtrOutput {
	return o.ApplyT(func(v ActionRuleSuppressionCondition) *ActionRuleSuppressionConditionTargetResourceType {
		return v.TargetResourceType
	}).(ActionRuleSuppressionConditionTargetResourceTypePtrOutput)
}

type ActionRuleSuppressionConditionPtrOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionCondition)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionPtrOutput) ToActionRuleSuppressionConditionPtrOutput() ActionRuleSuppressionConditionPtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionPtrOutput) ToActionRuleSuppressionConditionPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionPtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionCondition] {
	return pulumix.Output[*ActionRuleSuppressionCondition]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleSuppressionConditionPtrOutput) Elem() ActionRuleSuppressionConditionOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionCondition) ActionRuleSuppressionCondition {
		if v != nil {
			return *v
		}
		var ret ActionRuleSuppressionCondition
		return ret
	}).(ActionRuleSuppressionConditionOutput)
}

// A `alertContext` block as defined below.
func (o ActionRuleSuppressionConditionPtrOutput) AlertContext() ActionRuleSuppressionConditionAlertContextPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionCondition) *ActionRuleSuppressionConditionAlertContext {
		if v == nil {
			return nil
		}
		return v.AlertContext
	}).(ActionRuleSuppressionConditionAlertContextPtrOutput)
}

// A `alertRuleId` block as defined below.
func (o ActionRuleSuppressionConditionPtrOutput) AlertRuleId() ActionRuleSuppressionConditionAlertRuleIdPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionCondition) *ActionRuleSuppressionConditionAlertRuleId {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(ActionRuleSuppressionConditionAlertRuleIdPtrOutput)
}

// A `description` block as defined below.
func (o ActionRuleSuppressionConditionPtrOutput) Description() ActionRuleSuppressionConditionDescriptionPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionCondition) *ActionRuleSuppressionConditionDescription {
		if v == nil {
			return nil
		}
		return v.Description
	}).(ActionRuleSuppressionConditionDescriptionPtrOutput)
}

// A `monitor` block as defined below.
func (o ActionRuleSuppressionConditionPtrOutput) Monitor() ActionRuleSuppressionConditionMonitorPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionCondition) *ActionRuleSuppressionConditionMonitor {
		if v == nil {
			return nil
		}
		return v.Monitor
	}).(ActionRuleSuppressionConditionMonitorPtrOutput)
}

// A `monitorService` block as defined below.
func (o ActionRuleSuppressionConditionPtrOutput) MonitorService() ActionRuleSuppressionConditionMonitorServicePtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionCondition) *ActionRuleSuppressionConditionMonitorService {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(ActionRuleSuppressionConditionMonitorServicePtrOutput)
}

// A `severity` block as defined below.
func (o ActionRuleSuppressionConditionPtrOutput) Severity() ActionRuleSuppressionConditionSeverityPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionCondition) *ActionRuleSuppressionConditionSeverity {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(ActionRuleSuppressionConditionSeverityPtrOutput)
}

// A `targetResourceType` block as defined below.
func (o ActionRuleSuppressionConditionPtrOutput) TargetResourceType() ActionRuleSuppressionConditionTargetResourceTypePtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionCondition) *ActionRuleSuppressionConditionTargetResourceType {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(ActionRuleSuppressionConditionTargetResourceTypePtrOutput)
}

type ActionRuleSuppressionConditionAlertContext struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ActionRuleSuppressionConditionAlertContextInput is an input type that accepts ActionRuleSuppressionConditionAlertContextArgs and ActionRuleSuppressionConditionAlertContextOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionAlertContextInput` via:
//
//	ActionRuleSuppressionConditionAlertContextArgs{...}
type ActionRuleSuppressionConditionAlertContextInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionAlertContextOutput() ActionRuleSuppressionConditionAlertContextOutput
	ToActionRuleSuppressionConditionAlertContextOutputWithContext(context.Context) ActionRuleSuppressionConditionAlertContextOutput
}

type ActionRuleSuppressionConditionAlertContextArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ActionRuleSuppressionConditionAlertContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionConditionAlertContext)(nil)).Elem()
}

func (i ActionRuleSuppressionConditionAlertContextArgs) ToActionRuleSuppressionConditionAlertContextOutput() ActionRuleSuppressionConditionAlertContextOutput {
	return i.ToActionRuleSuppressionConditionAlertContextOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionAlertContextArgs) ToActionRuleSuppressionConditionAlertContextOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionAlertContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionAlertContextOutput)
}

func (i ActionRuleSuppressionConditionAlertContextArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionConditionAlertContext] {
	return pulumix.Output[ActionRuleSuppressionConditionAlertContext]{
		OutputState: i.ToActionRuleSuppressionConditionAlertContextOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleSuppressionConditionAlertContextArgs) ToActionRuleSuppressionConditionAlertContextPtrOutput() ActionRuleSuppressionConditionAlertContextPtrOutput {
	return i.ToActionRuleSuppressionConditionAlertContextPtrOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionAlertContextArgs) ToActionRuleSuppressionConditionAlertContextPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionAlertContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionAlertContextOutput).ToActionRuleSuppressionConditionAlertContextPtrOutputWithContext(ctx)
}

// ActionRuleSuppressionConditionAlertContextPtrInput is an input type that accepts ActionRuleSuppressionConditionAlertContextArgs, ActionRuleSuppressionConditionAlertContextPtr and ActionRuleSuppressionConditionAlertContextPtrOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionAlertContextPtrInput` via:
//
//	        ActionRuleSuppressionConditionAlertContextArgs{...}
//
//	or:
//
//	        nil
type ActionRuleSuppressionConditionAlertContextPtrInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionAlertContextPtrOutput() ActionRuleSuppressionConditionAlertContextPtrOutput
	ToActionRuleSuppressionConditionAlertContextPtrOutputWithContext(context.Context) ActionRuleSuppressionConditionAlertContextPtrOutput
}

type actionRuleSuppressionConditionAlertContextPtrType ActionRuleSuppressionConditionAlertContextArgs

func ActionRuleSuppressionConditionAlertContextPtr(v *ActionRuleSuppressionConditionAlertContextArgs) ActionRuleSuppressionConditionAlertContextPtrInput {
	return (*actionRuleSuppressionConditionAlertContextPtrType)(v)
}

func (*actionRuleSuppressionConditionAlertContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionConditionAlertContext)(nil)).Elem()
}

func (i *actionRuleSuppressionConditionAlertContextPtrType) ToActionRuleSuppressionConditionAlertContextPtrOutput() ActionRuleSuppressionConditionAlertContextPtrOutput {
	return i.ToActionRuleSuppressionConditionAlertContextPtrOutputWithContext(context.Background())
}

func (i *actionRuleSuppressionConditionAlertContextPtrType) ToActionRuleSuppressionConditionAlertContextPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionAlertContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionAlertContextPtrOutput)
}

func (i *actionRuleSuppressionConditionAlertContextPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionConditionAlertContext] {
	return pulumix.Output[*ActionRuleSuppressionConditionAlertContext]{
		OutputState: i.ToActionRuleSuppressionConditionAlertContextPtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleSuppressionConditionAlertContextOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionAlertContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionConditionAlertContext)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionAlertContextOutput) ToActionRuleSuppressionConditionAlertContextOutput() ActionRuleSuppressionConditionAlertContextOutput {
	return o
}

func (o ActionRuleSuppressionConditionAlertContextOutput) ToActionRuleSuppressionConditionAlertContextOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionAlertContextOutput {
	return o
}

func (o ActionRuleSuppressionConditionAlertContextOutput) ToActionRuleSuppressionConditionAlertContextPtrOutput() ActionRuleSuppressionConditionAlertContextPtrOutput {
	return o.ToActionRuleSuppressionConditionAlertContextPtrOutputWithContext(context.Background())
}

func (o ActionRuleSuppressionConditionAlertContextOutput) ToActionRuleSuppressionConditionAlertContextPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionAlertContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleSuppressionConditionAlertContext) *ActionRuleSuppressionConditionAlertContext {
		return &v
	}).(ActionRuleSuppressionConditionAlertContextPtrOutput)
}

func (o ActionRuleSuppressionConditionAlertContextOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionConditionAlertContext] {
	return pulumix.Output[ActionRuleSuppressionConditionAlertContext]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o ActionRuleSuppressionConditionAlertContextOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleSuppressionConditionAlertContext) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition.
func (o ActionRuleSuppressionConditionAlertContextOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleSuppressionConditionAlertContext) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ActionRuleSuppressionConditionAlertContextPtrOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionAlertContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionConditionAlertContext)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionAlertContextPtrOutput) ToActionRuleSuppressionConditionAlertContextPtrOutput() ActionRuleSuppressionConditionAlertContextPtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionAlertContextPtrOutput) ToActionRuleSuppressionConditionAlertContextPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionAlertContextPtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionAlertContextPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionConditionAlertContext] {
	return pulumix.Output[*ActionRuleSuppressionConditionAlertContext]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleSuppressionConditionAlertContextPtrOutput) Elem() ActionRuleSuppressionConditionAlertContextOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionAlertContext) ActionRuleSuppressionConditionAlertContext {
		if v != nil {
			return *v
		}
		var ret ActionRuleSuppressionConditionAlertContext
		return ret
	}).(ActionRuleSuppressionConditionAlertContextOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o ActionRuleSuppressionConditionAlertContextPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionAlertContext) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition.
func (o ActionRuleSuppressionConditionAlertContextPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionAlertContext) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ActionRuleSuppressionConditionAlertRuleId struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ActionRuleSuppressionConditionAlertRuleIdInput is an input type that accepts ActionRuleSuppressionConditionAlertRuleIdArgs and ActionRuleSuppressionConditionAlertRuleIdOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionAlertRuleIdInput` via:
//
//	ActionRuleSuppressionConditionAlertRuleIdArgs{...}
type ActionRuleSuppressionConditionAlertRuleIdInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionAlertRuleIdOutput() ActionRuleSuppressionConditionAlertRuleIdOutput
	ToActionRuleSuppressionConditionAlertRuleIdOutputWithContext(context.Context) ActionRuleSuppressionConditionAlertRuleIdOutput
}

type ActionRuleSuppressionConditionAlertRuleIdArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ActionRuleSuppressionConditionAlertRuleIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionConditionAlertRuleId)(nil)).Elem()
}

func (i ActionRuleSuppressionConditionAlertRuleIdArgs) ToActionRuleSuppressionConditionAlertRuleIdOutput() ActionRuleSuppressionConditionAlertRuleIdOutput {
	return i.ToActionRuleSuppressionConditionAlertRuleIdOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionAlertRuleIdArgs) ToActionRuleSuppressionConditionAlertRuleIdOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionAlertRuleIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionAlertRuleIdOutput)
}

func (i ActionRuleSuppressionConditionAlertRuleIdArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionConditionAlertRuleId] {
	return pulumix.Output[ActionRuleSuppressionConditionAlertRuleId]{
		OutputState: i.ToActionRuleSuppressionConditionAlertRuleIdOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleSuppressionConditionAlertRuleIdArgs) ToActionRuleSuppressionConditionAlertRuleIdPtrOutput() ActionRuleSuppressionConditionAlertRuleIdPtrOutput {
	return i.ToActionRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionAlertRuleIdArgs) ToActionRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionAlertRuleIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionAlertRuleIdOutput).ToActionRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(ctx)
}

// ActionRuleSuppressionConditionAlertRuleIdPtrInput is an input type that accepts ActionRuleSuppressionConditionAlertRuleIdArgs, ActionRuleSuppressionConditionAlertRuleIdPtr and ActionRuleSuppressionConditionAlertRuleIdPtrOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionAlertRuleIdPtrInput` via:
//
//	        ActionRuleSuppressionConditionAlertRuleIdArgs{...}
//
//	or:
//
//	        nil
type ActionRuleSuppressionConditionAlertRuleIdPtrInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionAlertRuleIdPtrOutput() ActionRuleSuppressionConditionAlertRuleIdPtrOutput
	ToActionRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(context.Context) ActionRuleSuppressionConditionAlertRuleIdPtrOutput
}

type actionRuleSuppressionConditionAlertRuleIdPtrType ActionRuleSuppressionConditionAlertRuleIdArgs

func ActionRuleSuppressionConditionAlertRuleIdPtr(v *ActionRuleSuppressionConditionAlertRuleIdArgs) ActionRuleSuppressionConditionAlertRuleIdPtrInput {
	return (*actionRuleSuppressionConditionAlertRuleIdPtrType)(v)
}

func (*actionRuleSuppressionConditionAlertRuleIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionConditionAlertRuleId)(nil)).Elem()
}

func (i *actionRuleSuppressionConditionAlertRuleIdPtrType) ToActionRuleSuppressionConditionAlertRuleIdPtrOutput() ActionRuleSuppressionConditionAlertRuleIdPtrOutput {
	return i.ToActionRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(context.Background())
}

func (i *actionRuleSuppressionConditionAlertRuleIdPtrType) ToActionRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionAlertRuleIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionAlertRuleIdPtrOutput)
}

func (i *actionRuleSuppressionConditionAlertRuleIdPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionConditionAlertRuleId] {
	return pulumix.Output[*ActionRuleSuppressionConditionAlertRuleId]{
		OutputState: i.ToActionRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleSuppressionConditionAlertRuleIdOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionAlertRuleIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionConditionAlertRuleId)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionAlertRuleIdOutput) ToActionRuleSuppressionConditionAlertRuleIdOutput() ActionRuleSuppressionConditionAlertRuleIdOutput {
	return o
}

func (o ActionRuleSuppressionConditionAlertRuleIdOutput) ToActionRuleSuppressionConditionAlertRuleIdOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionAlertRuleIdOutput {
	return o
}

func (o ActionRuleSuppressionConditionAlertRuleIdOutput) ToActionRuleSuppressionConditionAlertRuleIdPtrOutput() ActionRuleSuppressionConditionAlertRuleIdPtrOutput {
	return o.ToActionRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(context.Background())
}

func (o ActionRuleSuppressionConditionAlertRuleIdOutput) ToActionRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionAlertRuleIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleSuppressionConditionAlertRuleId) *ActionRuleSuppressionConditionAlertRuleId {
		return &v
	}).(ActionRuleSuppressionConditionAlertRuleIdPtrOutput)
}

func (o ActionRuleSuppressionConditionAlertRuleIdOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionConditionAlertRuleId] {
	return pulumix.Output[ActionRuleSuppressionConditionAlertRuleId]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o ActionRuleSuppressionConditionAlertRuleIdOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleSuppressionConditionAlertRuleId) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition.
func (o ActionRuleSuppressionConditionAlertRuleIdOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleSuppressionConditionAlertRuleId) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ActionRuleSuppressionConditionAlertRuleIdPtrOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionAlertRuleIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionConditionAlertRuleId)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionAlertRuleIdPtrOutput) ToActionRuleSuppressionConditionAlertRuleIdPtrOutput() ActionRuleSuppressionConditionAlertRuleIdPtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionAlertRuleIdPtrOutput) ToActionRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionAlertRuleIdPtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionAlertRuleIdPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionConditionAlertRuleId] {
	return pulumix.Output[*ActionRuleSuppressionConditionAlertRuleId]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleSuppressionConditionAlertRuleIdPtrOutput) Elem() ActionRuleSuppressionConditionAlertRuleIdOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionAlertRuleId) ActionRuleSuppressionConditionAlertRuleId {
		if v != nil {
			return *v
		}
		var ret ActionRuleSuppressionConditionAlertRuleId
		return ret
	}).(ActionRuleSuppressionConditionAlertRuleIdOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o ActionRuleSuppressionConditionAlertRuleIdPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionAlertRuleId) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition.
func (o ActionRuleSuppressionConditionAlertRuleIdPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionAlertRuleId) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ActionRuleSuppressionConditionDescription struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// ActionRuleSuppressionConditionDescriptionInput is an input type that accepts ActionRuleSuppressionConditionDescriptionArgs and ActionRuleSuppressionConditionDescriptionOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionDescriptionInput` via:
//
//	ActionRuleSuppressionConditionDescriptionArgs{...}
type ActionRuleSuppressionConditionDescriptionInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionDescriptionOutput() ActionRuleSuppressionConditionDescriptionOutput
	ToActionRuleSuppressionConditionDescriptionOutputWithContext(context.Context) ActionRuleSuppressionConditionDescriptionOutput
}

type ActionRuleSuppressionConditionDescriptionArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ActionRuleSuppressionConditionDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionConditionDescription)(nil)).Elem()
}

func (i ActionRuleSuppressionConditionDescriptionArgs) ToActionRuleSuppressionConditionDescriptionOutput() ActionRuleSuppressionConditionDescriptionOutput {
	return i.ToActionRuleSuppressionConditionDescriptionOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionDescriptionArgs) ToActionRuleSuppressionConditionDescriptionOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionDescriptionOutput)
}

func (i ActionRuleSuppressionConditionDescriptionArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionConditionDescription] {
	return pulumix.Output[ActionRuleSuppressionConditionDescription]{
		OutputState: i.ToActionRuleSuppressionConditionDescriptionOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleSuppressionConditionDescriptionArgs) ToActionRuleSuppressionConditionDescriptionPtrOutput() ActionRuleSuppressionConditionDescriptionPtrOutput {
	return i.ToActionRuleSuppressionConditionDescriptionPtrOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionDescriptionArgs) ToActionRuleSuppressionConditionDescriptionPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionDescriptionOutput).ToActionRuleSuppressionConditionDescriptionPtrOutputWithContext(ctx)
}

// ActionRuleSuppressionConditionDescriptionPtrInput is an input type that accepts ActionRuleSuppressionConditionDescriptionArgs, ActionRuleSuppressionConditionDescriptionPtr and ActionRuleSuppressionConditionDescriptionPtrOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionDescriptionPtrInput` via:
//
//	        ActionRuleSuppressionConditionDescriptionArgs{...}
//
//	or:
//
//	        nil
type ActionRuleSuppressionConditionDescriptionPtrInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionDescriptionPtrOutput() ActionRuleSuppressionConditionDescriptionPtrOutput
	ToActionRuleSuppressionConditionDescriptionPtrOutputWithContext(context.Context) ActionRuleSuppressionConditionDescriptionPtrOutput
}

type actionRuleSuppressionConditionDescriptionPtrType ActionRuleSuppressionConditionDescriptionArgs

func ActionRuleSuppressionConditionDescriptionPtr(v *ActionRuleSuppressionConditionDescriptionArgs) ActionRuleSuppressionConditionDescriptionPtrInput {
	return (*actionRuleSuppressionConditionDescriptionPtrType)(v)
}

func (*actionRuleSuppressionConditionDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionConditionDescription)(nil)).Elem()
}

func (i *actionRuleSuppressionConditionDescriptionPtrType) ToActionRuleSuppressionConditionDescriptionPtrOutput() ActionRuleSuppressionConditionDescriptionPtrOutput {
	return i.ToActionRuleSuppressionConditionDescriptionPtrOutputWithContext(context.Background())
}

func (i *actionRuleSuppressionConditionDescriptionPtrType) ToActionRuleSuppressionConditionDescriptionPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionDescriptionPtrOutput)
}

func (i *actionRuleSuppressionConditionDescriptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionConditionDescription] {
	return pulumix.Output[*ActionRuleSuppressionConditionDescription]{
		OutputState: i.ToActionRuleSuppressionConditionDescriptionPtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleSuppressionConditionDescriptionOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionConditionDescription)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionDescriptionOutput) ToActionRuleSuppressionConditionDescriptionOutput() ActionRuleSuppressionConditionDescriptionOutput {
	return o
}

func (o ActionRuleSuppressionConditionDescriptionOutput) ToActionRuleSuppressionConditionDescriptionOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionDescriptionOutput {
	return o
}

func (o ActionRuleSuppressionConditionDescriptionOutput) ToActionRuleSuppressionConditionDescriptionPtrOutput() ActionRuleSuppressionConditionDescriptionPtrOutput {
	return o.ToActionRuleSuppressionConditionDescriptionPtrOutputWithContext(context.Background())
}

func (o ActionRuleSuppressionConditionDescriptionOutput) ToActionRuleSuppressionConditionDescriptionPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionDescriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleSuppressionConditionDescription) *ActionRuleSuppressionConditionDescription {
		return &v
	}).(ActionRuleSuppressionConditionDescriptionPtrOutput)
}

func (o ActionRuleSuppressionConditionDescriptionOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionConditionDescription] {
	return pulumix.Output[ActionRuleSuppressionConditionDescription]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o ActionRuleSuppressionConditionDescriptionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleSuppressionConditionDescription) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition.
func (o ActionRuleSuppressionConditionDescriptionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleSuppressionConditionDescription) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ActionRuleSuppressionConditionDescriptionPtrOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionConditionDescription)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionDescriptionPtrOutput) ToActionRuleSuppressionConditionDescriptionPtrOutput() ActionRuleSuppressionConditionDescriptionPtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionDescriptionPtrOutput) ToActionRuleSuppressionConditionDescriptionPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionDescriptionPtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionDescriptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionConditionDescription] {
	return pulumix.Output[*ActionRuleSuppressionConditionDescription]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleSuppressionConditionDescriptionPtrOutput) Elem() ActionRuleSuppressionConditionDescriptionOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionDescription) ActionRuleSuppressionConditionDescription {
		if v != nil {
			return *v
		}
		var ret ActionRuleSuppressionConditionDescription
		return ret
	}).(ActionRuleSuppressionConditionDescriptionOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o ActionRuleSuppressionConditionDescriptionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionDescription) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition.
func (o ActionRuleSuppressionConditionDescriptionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionDescription) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ActionRuleSuppressionConditionMonitor struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
	Values []string `pulumi:"values"`
}

// ActionRuleSuppressionConditionMonitorInput is an input type that accepts ActionRuleSuppressionConditionMonitorArgs and ActionRuleSuppressionConditionMonitorOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionMonitorInput` via:
//
//	ActionRuleSuppressionConditionMonitorArgs{...}
type ActionRuleSuppressionConditionMonitorInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionMonitorOutput() ActionRuleSuppressionConditionMonitorOutput
	ToActionRuleSuppressionConditionMonitorOutputWithContext(context.Context) ActionRuleSuppressionConditionMonitorOutput
}

type ActionRuleSuppressionConditionMonitorArgs struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ActionRuleSuppressionConditionMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionConditionMonitor)(nil)).Elem()
}

func (i ActionRuleSuppressionConditionMonitorArgs) ToActionRuleSuppressionConditionMonitorOutput() ActionRuleSuppressionConditionMonitorOutput {
	return i.ToActionRuleSuppressionConditionMonitorOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionMonitorArgs) ToActionRuleSuppressionConditionMonitorOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionMonitorOutput)
}

func (i ActionRuleSuppressionConditionMonitorArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionConditionMonitor] {
	return pulumix.Output[ActionRuleSuppressionConditionMonitor]{
		OutputState: i.ToActionRuleSuppressionConditionMonitorOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleSuppressionConditionMonitorArgs) ToActionRuleSuppressionConditionMonitorPtrOutput() ActionRuleSuppressionConditionMonitorPtrOutput {
	return i.ToActionRuleSuppressionConditionMonitorPtrOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionMonitorArgs) ToActionRuleSuppressionConditionMonitorPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionMonitorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionMonitorOutput).ToActionRuleSuppressionConditionMonitorPtrOutputWithContext(ctx)
}

// ActionRuleSuppressionConditionMonitorPtrInput is an input type that accepts ActionRuleSuppressionConditionMonitorArgs, ActionRuleSuppressionConditionMonitorPtr and ActionRuleSuppressionConditionMonitorPtrOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionMonitorPtrInput` via:
//
//	        ActionRuleSuppressionConditionMonitorArgs{...}
//
//	or:
//
//	        nil
type ActionRuleSuppressionConditionMonitorPtrInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionMonitorPtrOutput() ActionRuleSuppressionConditionMonitorPtrOutput
	ToActionRuleSuppressionConditionMonitorPtrOutputWithContext(context.Context) ActionRuleSuppressionConditionMonitorPtrOutput
}

type actionRuleSuppressionConditionMonitorPtrType ActionRuleSuppressionConditionMonitorArgs

func ActionRuleSuppressionConditionMonitorPtr(v *ActionRuleSuppressionConditionMonitorArgs) ActionRuleSuppressionConditionMonitorPtrInput {
	return (*actionRuleSuppressionConditionMonitorPtrType)(v)
}

func (*actionRuleSuppressionConditionMonitorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionConditionMonitor)(nil)).Elem()
}

func (i *actionRuleSuppressionConditionMonitorPtrType) ToActionRuleSuppressionConditionMonitorPtrOutput() ActionRuleSuppressionConditionMonitorPtrOutput {
	return i.ToActionRuleSuppressionConditionMonitorPtrOutputWithContext(context.Background())
}

func (i *actionRuleSuppressionConditionMonitorPtrType) ToActionRuleSuppressionConditionMonitorPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionMonitorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionMonitorPtrOutput)
}

func (i *actionRuleSuppressionConditionMonitorPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionConditionMonitor] {
	return pulumix.Output[*ActionRuleSuppressionConditionMonitor]{
		OutputState: i.ToActionRuleSuppressionConditionMonitorPtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleSuppressionConditionMonitorOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionConditionMonitor)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionMonitorOutput) ToActionRuleSuppressionConditionMonitorOutput() ActionRuleSuppressionConditionMonitorOutput {
	return o
}

func (o ActionRuleSuppressionConditionMonitorOutput) ToActionRuleSuppressionConditionMonitorOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionMonitorOutput {
	return o
}

func (o ActionRuleSuppressionConditionMonitorOutput) ToActionRuleSuppressionConditionMonitorPtrOutput() ActionRuleSuppressionConditionMonitorPtrOutput {
	return o.ToActionRuleSuppressionConditionMonitorPtrOutputWithContext(context.Background())
}

func (o ActionRuleSuppressionConditionMonitorOutput) ToActionRuleSuppressionConditionMonitorPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionMonitorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleSuppressionConditionMonitor) *ActionRuleSuppressionConditionMonitor {
		return &v
	}).(ActionRuleSuppressionConditionMonitorPtrOutput)
}

func (o ActionRuleSuppressionConditionMonitorOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionConditionMonitor] {
	return pulumix.Output[ActionRuleSuppressionConditionMonitor]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o ActionRuleSuppressionConditionMonitorOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleSuppressionConditionMonitor) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
func (o ActionRuleSuppressionConditionMonitorOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleSuppressionConditionMonitor) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ActionRuleSuppressionConditionMonitorPtrOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionMonitorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionConditionMonitor)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionMonitorPtrOutput) ToActionRuleSuppressionConditionMonitorPtrOutput() ActionRuleSuppressionConditionMonitorPtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionMonitorPtrOutput) ToActionRuleSuppressionConditionMonitorPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionMonitorPtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionMonitorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionConditionMonitor] {
	return pulumix.Output[*ActionRuleSuppressionConditionMonitor]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleSuppressionConditionMonitorPtrOutput) Elem() ActionRuleSuppressionConditionMonitorOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionMonitor) ActionRuleSuppressionConditionMonitor {
		if v != nil {
			return *v
		}
		var ret ActionRuleSuppressionConditionMonitor
		return ret
	}).(ActionRuleSuppressionConditionMonitorOutput)
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o ActionRuleSuppressionConditionMonitorPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionMonitor) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
func (o ActionRuleSuppressionConditionMonitorPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionMonitor) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ActionRuleSuppressionConditionMonitorService struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Resource Health`, `Smart Detector` and `VM Insights - Health`.
	Values []string `pulumi:"values"`
}

// ActionRuleSuppressionConditionMonitorServiceInput is an input type that accepts ActionRuleSuppressionConditionMonitorServiceArgs and ActionRuleSuppressionConditionMonitorServiceOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionMonitorServiceInput` via:
//
//	ActionRuleSuppressionConditionMonitorServiceArgs{...}
type ActionRuleSuppressionConditionMonitorServiceInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionMonitorServiceOutput() ActionRuleSuppressionConditionMonitorServiceOutput
	ToActionRuleSuppressionConditionMonitorServiceOutputWithContext(context.Context) ActionRuleSuppressionConditionMonitorServiceOutput
}

type ActionRuleSuppressionConditionMonitorServiceArgs struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Resource Health`, `Smart Detector` and `VM Insights - Health`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ActionRuleSuppressionConditionMonitorServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionConditionMonitorService)(nil)).Elem()
}

func (i ActionRuleSuppressionConditionMonitorServiceArgs) ToActionRuleSuppressionConditionMonitorServiceOutput() ActionRuleSuppressionConditionMonitorServiceOutput {
	return i.ToActionRuleSuppressionConditionMonitorServiceOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionMonitorServiceArgs) ToActionRuleSuppressionConditionMonitorServiceOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionMonitorServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionMonitorServiceOutput)
}

func (i ActionRuleSuppressionConditionMonitorServiceArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionConditionMonitorService] {
	return pulumix.Output[ActionRuleSuppressionConditionMonitorService]{
		OutputState: i.ToActionRuleSuppressionConditionMonitorServiceOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleSuppressionConditionMonitorServiceArgs) ToActionRuleSuppressionConditionMonitorServicePtrOutput() ActionRuleSuppressionConditionMonitorServicePtrOutput {
	return i.ToActionRuleSuppressionConditionMonitorServicePtrOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionMonitorServiceArgs) ToActionRuleSuppressionConditionMonitorServicePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionMonitorServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionMonitorServiceOutput).ToActionRuleSuppressionConditionMonitorServicePtrOutputWithContext(ctx)
}

// ActionRuleSuppressionConditionMonitorServicePtrInput is an input type that accepts ActionRuleSuppressionConditionMonitorServiceArgs, ActionRuleSuppressionConditionMonitorServicePtr and ActionRuleSuppressionConditionMonitorServicePtrOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionMonitorServicePtrInput` via:
//
//	        ActionRuleSuppressionConditionMonitorServiceArgs{...}
//
//	or:
//
//	        nil
type ActionRuleSuppressionConditionMonitorServicePtrInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionMonitorServicePtrOutput() ActionRuleSuppressionConditionMonitorServicePtrOutput
	ToActionRuleSuppressionConditionMonitorServicePtrOutputWithContext(context.Context) ActionRuleSuppressionConditionMonitorServicePtrOutput
}

type actionRuleSuppressionConditionMonitorServicePtrType ActionRuleSuppressionConditionMonitorServiceArgs

func ActionRuleSuppressionConditionMonitorServicePtr(v *ActionRuleSuppressionConditionMonitorServiceArgs) ActionRuleSuppressionConditionMonitorServicePtrInput {
	return (*actionRuleSuppressionConditionMonitorServicePtrType)(v)
}

func (*actionRuleSuppressionConditionMonitorServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionConditionMonitorService)(nil)).Elem()
}

func (i *actionRuleSuppressionConditionMonitorServicePtrType) ToActionRuleSuppressionConditionMonitorServicePtrOutput() ActionRuleSuppressionConditionMonitorServicePtrOutput {
	return i.ToActionRuleSuppressionConditionMonitorServicePtrOutputWithContext(context.Background())
}

func (i *actionRuleSuppressionConditionMonitorServicePtrType) ToActionRuleSuppressionConditionMonitorServicePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionMonitorServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionMonitorServicePtrOutput)
}

func (i *actionRuleSuppressionConditionMonitorServicePtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionConditionMonitorService] {
	return pulumix.Output[*ActionRuleSuppressionConditionMonitorService]{
		OutputState: i.ToActionRuleSuppressionConditionMonitorServicePtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleSuppressionConditionMonitorServiceOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionMonitorServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionConditionMonitorService)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionMonitorServiceOutput) ToActionRuleSuppressionConditionMonitorServiceOutput() ActionRuleSuppressionConditionMonitorServiceOutput {
	return o
}

func (o ActionRuleSuppressionConditionMonitorServiceOutput) ToActionRuleSuppressionConditionMonitorServiceOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionMonitorServiceOutput {
	return o
}

func (o ActionRuleSuppressionConditionMonitorServiceOutput) ToActionRuleSuppressionConditionMonitorServicePtrOutput() ActionRuleSuppressionConditionMonitorServicePtrOutput {
	return o.ToActionRuleSuppressionConditionMonitorServicePtrOutputWithContext(context.Background())
}

func (o ActionRuleSuppressionConditionMonitorServiceOutput) ToActionRuleSuppressionConditionMonitorServicePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionMonitorServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleSuppressionConditionMonitorService) *ActionRuleSuppressionConditionMonitorService {
		return &v
	}).(ActionRuleSuppressionConditionMonitorServicePtrOutput)
}

func (o ActionRuleSuppressionConditionMonitorServiceOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionConditionMonitorService] {
	return pulumix.Output[ActionRuleSuppressionConditionMonitorService]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o ActionRuleSuppressionConditionMonitorServiceOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleSuppressionConditionMonitorService) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Resource Health`, `Smart Detector` and `VM Insights - Health`.
func (o ActionRuleSuppressionConditionMonitorServiceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleSuppressionConditionMonitorService) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ActionRuleSuppressionConditionMonitorServicePtrOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionMonitorServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionConditionMonitorService)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionMonitorServicePtrOutput) ToActionRuleSuppressionConditionMonitorServicePtrOutput() ActionRuleSuppressionConditionMonitorServicePtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionMonitorServicePtrOutput) ToActionRuleSuppressionConditionMonitorServicePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionMonitorServicePtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionMonitorServicePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionConditionMonitorService] {
	return pulumix.Output[*ActionRuleSuppressionConditionMonitorService]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleSuppressionConditionMonitorServicePtrOutput) Elem() ActionRuleSuppressionConditionMonitorServiceOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionMonitorService) ActionRuleSuppressionConditionMonitorService {
		if v != nil {
			return *v
		}
		var ret ActionRuleSuppressionConditionMonitorService
		return ret
	}).(ActionRuleSuppressionConditionMonitorServiceOutput)
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o ActionRuleSuppressionConditionMonitorServicePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionMonitorService) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Resource Health`, `Smart Detector` and `VM Insights - Health`.
func (o ActionRuleSuppressionConditionMonitorServicePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionMonitorService) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ActionRuleSuppressionConditionSeverity struct {
	// The operator for a given condition. Possible values are `Equals`and `NotEquals`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
	Values []string `pulumi:"values"`
}

// ActionRuleSuppressionConditionSeverityInput is an input type that accepts ActionRuleSuppressionConditionSeverityArgs and ActionRuleSuppressionConditionSeverityOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionSeverityInput` via:
//
//	ActionRuleSuppressionConditionSeverityArgs{...}
type ActionRuleSuppressionConditionSeverityInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionSeverityOutput() ActionRuleSuppressionConditionSeverityOutput
	ToActionRuleSuppressionConditionSeverityOutputWithContext(context.Context) ActionRuleSuppressionConditionSeverityOutput
}

type ActionRuleSuppressionConditionSeverityArgs struct {
	// The operator for a given condition. Possible values are `Equals`and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ActionRuleSuppressionConditionSeverityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionConditionSeverity)(nil)).Elem()
}

func (i ActionRuleSuppressionConditionSeverityArgs) ToActionRuleSuppressionConditionSeverityOutput() ActionRuleSuppressionConditionSeverityOutput {
	return i.ToActionRuleSuppressionConditionSeverityOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionSeverityArgs) ToActionRuleSuppressionConditionSeverityOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionSeverityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionSeverityOutput)
}

func (i ActionRuleSuppressionConditionSeverityArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionConditionSeverity] {
	return pulumix.Output[ActionRuleSuppressionConditionSeverity]{
		OutputState: i.ToActionRuleSuppressionConditionSeverityOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleSuppressionConditionSeverityArgs) ToActionRuleSuppressionConditionSeverityPtrOutput() ActionRuleSuppressionConditionSeverityPtrOutput {
	return i.ToActionRuleSuppressionConditionSeverityPtrOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionSeverityArgs) ToActionRuleSuppressionConditionSeverityPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionSeverityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionSeverityOutput).ToActionRuleSuppressionConditionSeverityPtrOutputWithContext(ctx)
}

// ActionRuleSuppressionConditionSeverityPtrInput is an input type that accepts ActionRuleSuppressionConditionSeverityArgs, ActionRuleSuppressionConditionSeverityPtr and ActionRuleSuppressionConditionSeverityPtrOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionSeverityPtrInput` via:
//
//	        ActionRuleSuppressionConditionSeverityArgs{...}
//
//	or:
//
//	        nil
type ActionRuleSuppressionConditionSeverityPtrInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionSeverityPtrOutput() ActionRuleSuppressionConditionSeverityPtrOutput
	ToActionRuleSuppressionConditionSeverityPtrOutputWithContext(context.Context) ActionRuleSuppressionConditionSeverityPtrOutput
}

type actionRuleSuppressionConditionSeverityPtrType ActionRuleSuppressionConditionSeverityArgs

func ActionRuleSuppressionConditionSeverityPtr(v *ActionRuleSuppressionConditionSeverityArgs) ActionRuleSuppressionConditionSeverityPtrInput {
	return (*actionRuleSuppressionConditionSeverityPtrType)(v)
}

func (*actionRuleSuppressionConditionSeverityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionConditionSeverity)(nil)).Elem()
}

func (i *actionRuleSuppressionConditionSeverityPtrType) ToActionRuleSuppressionConditionSeverityPtrOutput() ActionRuleSuppressionConditionSeverityPtrOutput {
	return i.ToActionRuleSuppressionConditionSeverityPtrOutputWithContext(context.Background())
}

func (i *actionRuleSuppressionConditionSeverityPtrType) ToActionRuleSuppressionConditionSeverityPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionSeverityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionSeverityPtrOutput)
}

func (i *actionRuleSuppressionConditionSeverityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionConditionSeverity] {
	return pulumix.Output[*ActionRuleSuppressionConditionSeverity]{
		OutputState: i.ToActionRuleSuppressionConditionSeverityPtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleSuppressionConditionSeverityOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionSeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionConditionSeverity)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionSeverityOutput) ToActionRuleSuppressionConditionSeverityOutput() ActionRuleSuppressionConditionSeverityOutput {
	return o
}

func (o ActionRuleSuppressionConditionSeverityOutput) ToActionRuleSuppressionConditionSeverityOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionSeverityOutput {
	return o
}

func (o ActionRuleSuppressionConditionSeverityOutput) ToActionRuleSuppressionConditionSeverityPtrOutput() ActionRuleSuppressionConditionSeverityPtrOutput {
	return o.ToActionRuleSuppressionConditionSeverityPtrOutputWithContext(context.Background())
}

func (o ActionRuleSuppressionConditionSeverityOutput) ToActionRuleSuppressionConditionSeverityPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionSeverityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleSuppressionConditionSeverity) *ActionRuleSuppressionConditionSeverity {
		return &v
	}).(ActionRuleSuppressionConditionSeverityPtrOutput)
}

func (o ActionRuleSuppressionConditionSeverityOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionConditionSeverity] {
	return pulumix.Output[ActionRuleSuppressionConditionSeverity]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`and `NotEquals`.
func (o ActionRuleSuppressionConditionSeverityOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleSuppressionConditionSeverity) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
func (o ActionRuleSuppressionConditionSeverityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleSuppressionConditionSeverity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ActionRuleSuppressionConditionSeverityPtrOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionSeverityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionConditionSeverity)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionSeverityPtrOutput) ToActionRuleSuppressionConditionSeverityPtrOutput() ActionRuleSuppressionConditionSeverityPtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionSeverityPtrOutput) ToActionRuleSuppressionConditionSeverityPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionSeverityPtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionSeverityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionConditionSeverity] {
	return pulumix.Output[*ActionRuleSuppressionConditionSeverity]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleSuppressionConditionSeverityPtrOutput) Elem() ActionRuleSuppressionConditionSeverityOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionSeverity) ActionRuleSuppressionConditionSeverity {
		if v != nil {
			return *v
		}
		var ret ActionRuleSuppressionConditionSeverity
		return ret
	}).(ActionRuleSuppressionConditionSeverityOutput)
}

// The operator for a given condition. Possible values are `Equals`and `NotEquals`.
func (o ActionRuleSuppressionConditionSeverityPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionSeverity) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
func (o ActionRuleSuppressionConditionSeverityPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionSeverity) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ActionRuleSuppressionConditionTargetResourceType struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource types.
	Values []string `pulumi:"values"`
}

// ActionRuleSuppressionConditionTargetResourceTypeInput is an input type that accepts ActionRuleSuppressionConditionTargetResourceTypeArgs and ActionRuleSuppressionConditionTargetResourceTypeOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionTargetResourceTypeInput` via:
//
//	ActionRuleSuppressionConditionTargetResourceTypeArgs{...}
type ActionRuleSuppressionConditionTargetResourceTypeInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionTargetResourceTypeOutput() ActionRuleSuppressionConditionTargetResourceTypeOutput
	ToActionRuleSuppressionConditionTargetResourceTypeOutputWithContext(context.Context) ActionRuleSuppressionConditionTargetResourceTypeOutput
}

type ActionRuleSuppressionConditionTargetResourceTypeArgs struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource types.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ActionRuleSuppressionConditionTargetResourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionConditionTargetResourceType)(nil)).Elem()
}

func (i ActionRuleSuppressionConditionTargetResourceTypeArgs) ToActionRuleSuppressionConditionTargetResourceTypeOutput() ActionRuleSuppressionConditionTargetResourceTypeOutput {
	return i.ToActionRuleSuppressionConditionTargetResourceTypeOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionTargetResourceTypeArgs) ToActionRuleSuppressionConditionTargetResourceTypeOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionTargetResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionTargetResourceTypeOutput)
}

func (i ActionRuleSuppressionConditionTargetResourceTypeArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionConditionTargetResourceType] {
	return pulumix.Output[ActionRuleSuppressionConditionTargetResourceType]{
		OutputState: i.ToActionRuleSuppressionConditionTargetResourceTypeOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleSuppressionConditionTargetResourceTypeArgs) ToActionRuleSuppressionConditionTargetResourceTypePtrOutput() ActionRuleSuppressionConditionTargetResourceTypePtrOutput {
	return i.ToActionRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionConditionTargetResourceTypeArgs) ToActionRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionTargetResourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionTargetResourceTypeOutput).ToActionRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(ctx)
}

// ActionRuleSuppressionConditionTargetResourceTypePtrInput is an input type that accepts ActionRuleSuppressionConditionTargetResourceTypeArgs, ActionRuleSuppressionConditionTargetResourceTypePtr and ActionRuleSuppressionConditionTargetResourceTypePtrOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionConditionTargetResourceTypePtrInput` via:
//
//	        ActionRuleSuppressionConditionTargetResourceTypeArgs{...}
//
//	or:
//
//	        nil
type ActionRuleSuppressionConditionTargetResourceTypePtrInput interface {
	pulumi.Input

	ToActionRuleSuppressionConditionTargetResourceTypePtrOutput() ActionRuleSuppressionConditionTargetResourceTypePtrOutput
	ToActionRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(context.Context) ActionRuleSuppressionConditionTargetResourceTypePtrOutput
}

type actionRuleSuppressionConditionTargetResourceTypePtrType ActionRuleSuppressionConditionTargetResourceTypeArgs

func ActionRuleSuppressionConditionTargetResourceTypePtr(v *ActionRuleSuppressionConditionTargetResourceTypeArgs) ActionRuleSuppressionConditionTargetResourceTypePtrInput {
	return (*actionRuleSuppressionConditionTargetResourceTypePtrType)(v)
}

func (*actionRuleSuppressionConditionTargetResourceTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionConditionTargetResourceType)(nil)).Elem()
}

func (i *actionRuleSuppressionConditionTargetResourceTypePtrType) ToActionRuleSuppressionConditionTargetResourceTypePtrOutput() ActionRuleSuppressionConditionTargetResourceTypePtrOutput {
	return i.ToActionRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(context.Background())
}

func (i *actionRuleSuppressionConditionTargetResourceTypePtrType) ToActionRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionTargetResourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionConditionTargetResourceTypePtrOutput)
}

func (i *actionRuleSuppressionConditionTargetResourceTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionConditionTargetResourceType] {
	return pulumix.Output[*ActionRuleSuppressionConditionTargetResourceType]{
		OutputState: i.ToActionRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleSuppressionConditionTargetResourceTypeOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionTargetResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionConditionTargetResourceType)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionTargetResourceTypeOutput) ToActionRuleSuppressionConditionTargetResourceTypeOutput() ActionRuleSuppressionConditionTargetResourceTypeOutput {
	return o
}

func (o ActionRuleSuppressionConditionTargetResourceTypeOutput) ToActionRuleSuppressionConditionTargetResourceTypeOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionTargetResourceTypeOutput {
	return o
}

func (o ActionRuleSuppressionConditionTargetResourceTypeOutput) ToActionRuleSuppressionConditionTargetResourceTypePtrOutput() ActionRuleSuppressionConditionTargetResourceTypePtrOutput {
	return o.ToActionRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(context.Background())
}

func (o ActionRuleSuppressionConditionTargetResourceTypeOutput) ToActionRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionTargetResourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleSuppressionConditionTargetResourceType) *ActionRuleSuppressionConditionTargetResourceType {
		return &v
	}).(ActionRuleSuppressionConditionTargetResourceTypePtrOutput)
}

func (o ActionRuleSuppressionConditionTargetResourceTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionConditionTargetResourceType] {
	return pulumix.Output[ActionRuleSuppressionConditionTargetResourceType]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o ActionRuleSuppressionConditionTargetResourceTypeOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleSuppressionConditionTargetResourceType) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. The values should be valid resource types.
func (o ActionRuleSuppressionConditionTargetResourceTypeOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleSuppressionConditionTargetResourceType) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ActionRuleSuppressionConditionTargetResourceTypePtrOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionConditionTargetResourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionConditionTargetResourceType)(nil)).Elem()
}

func (o ActionRuleSuppressionConditionTargetResourceTypePtrOutput) ToActionRuleSuppressionConditionTargetResourceTypePtrOutput() ActionRuleSuppressionConditionTargetResourceTypePtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionTargetResourceTypePtrOutput) ToActionRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionConditionTargetResourceTypePtrOutput {
	return o
}

func (o ActionRuleSuppressionConditionTargetResourceTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionConditionTargetResourceType] {
	return pulumix.Output[*ActionRuleSuppressionConditionTargetResourceType]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleSuppressionConditionTargetResourceTypePtrOutput) Elem() ActionRuleSuppressionConditionTargetResourceTypeOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionTargetResourceType) ActionRuleSuppressionConditionTargetResourceType {
		if v != nil {
			return *v
		}
		var ret ActionRuleSuppressionConditionTargetResourceType
		return ret
	}).(ActionRuleSuppressionConditionTargetResourceTypeOutput)
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o ActionRuleSuppressionConditionTargetResourceTypePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionTargetResourceType) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. The values should be valid resource types.
func (o ActionRuleSuppressionConditionTargetResourceTypePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionConditionTargetResourceType) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ActionRuleSuppressionScope struct {
	// A list of resource IDs of the given scope type which will be the target of action rule.
	ResourceIds []string `pulumi:"resourceIds"`
	// Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
	Type string `pulumi:"type"`
}

// ActionRuleSuppressionScopeInput is an input type that accepts ActionRuleSuppressionScopeArgs and ActionRuleSuppressionScopeOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionScopeInput` via:
//
//	ActionRuleSuppressionScopeArgs{...}
type ActionRuleSuppressionScopeInput interface {
	pulumi.Input

	ToActionRuleSuppressionScopeOutput() ActionRuleSuppressionScopeOutput
	ToActionRuleSuppressionScopeOutputWithContext(context.Context) ActionRuleSuppressionScopeOutput
}

type ActionRuleSuppressionScopeArgs struct {
	// A list of resource IDs of the given scope type which will be the target of action rule.
	ResourceIds pulumi.StringArrayInput `pulumi:"resourceIds"`
	// Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ActionRuleSuppressionScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionScope)(nil)).Elem()
}

func (i ActionRuleSuppressionScopeArgs) ToActionRuleSuppressionScopeOutput() ActionRuleSuppressionScopeOutput {
	return i.ToActionRuleSuppressionScopeOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionScopeArgs) ToActionRuleSuppressionScopeOutputWithContext(ctx context.Context) ActionRuleSuppressionScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionScopeOutput)
}

func (i ActionRuleSuppressionScopeArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionScope] {
	return pulumix.Output[ActionRuleSuppressionScope]{
		OutputState: i.ToActionRuleSuppressionScopeOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleSuppressionScopeArgs) ToActionRuleSuppressionScopePtrOutput() ActionRuleSuppressionScopePtrOutput {
	return i.ToActionRuleSuppressionScopePtrOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionScopeArgs) ToActionRuleSuppressionScopePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionScopeOutput).ToActionRuleSuppressionScopePtrOutputWithContext(ctx)
}

// ActionRuleSuppressionScopePtrInput is an input type that accepts ActionRuleSuppressionScopeArgs, ActionRuleSuppressionScopePtr and ActionRuleSuppressionScopePtrOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionScopePtrInput` via:
//
//	        ActionRuleSuppressionScopeArgs{...}
//
//	or:
//
//	        nil
type ActionRuleSuppressionScopePtrInput interface {
	pulumi.Input

	ToActionRuleSuppressionScopePtrOutput() ActionRuleSuppressionScopePtrOutput
	ToActionRuleSuppressionScopePtrOutputWithContext(context.Context) ActionRuleSuppressionScopePtrOutput
}

type actionRuleSuppressionScopePtrType ActionRuleSuppressionScopeArgs

func ActionRuleSuppressionScopePtr(v *ActionRuleSuppressionScopeArgs) ActionRuleSuppressionScopePtrInput {
	return (*actionRuleSuppressionScopePtrType)(v)
}

func (*actionRuleSuppressionScopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionScope)(nil)).Elem()
}

func (i *actionRuleSuppressionScopePtrType) ToActionRuleSuppressionScopePtrOutput() ActionRuleSuppressionScopePtrOutput {
	return i.ToActionRuleSuppressionScopePtrOutputWithContext(context.Background())
}

func (i *actionRuleSuppressionScopePtrType) ToActionRuleSuppressionScopePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionScopePtrOutput)
}

func (i *actionRuleSuppressionScopePtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionScope] {
	return pulumix.Output[*ActionRuleSuppressionScope]{
		OutputState: i.ToActionRuleSuppressionScopePtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleSuppressionScopeOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionScope)(nil)).Elem()
}

func (o ActionRuleSuppressionScopeOutput) ToActionRuleSuppressionScopeOutput() ActionRuleSuppressionScopeOutput {
	return o
}

func (o ActionRuleSuppressionScopeOutput) ToActionRuleSuppressionScopeOutputWithContext(ctx context.Context) ActionRuleSuppressionScopeOutput {
	return o
}

func (o ActionRuleSuppressionScopeOutput) ToActionRuleSuppressionScopePtrOutput() ActionRuleSuppressionScopePtrOutput {
	return o.ToActionRuleSuppressionScopePtrOutputWithContext(context.Background())
}

func (o ActionRuleSuppressionScopeOutput) ToActionRuleSuppressionScopePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleSuppressionScope) *ActionRuleSuppressionScope {
		return &v
	}).(ActionRuleSuppressionScopePtrOutput)
}

func (o ActionRuleSuppressionScopeOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionScope] {
	return pulumix.Output[ActionRuleSuppressionScope]{
		OutputState: o.OutputState,
	}
}

// A list of resource IDs of the given scope type which will be the target of action rule.
func (o ActionRuleSuppressionScopeOutput) ResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleSuppressionScope) []string { return v.ResourceIds }).(pulumi.StringArrayOutput)
}

// Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
func (o ActionRuleSuppressionScopeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleSuppressionScope) string { return v.Type }).(pulumi.StringOutput)
}

type ActionRuleSuppressionScopePtrOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionScope)(nil)).Elem()
}

func (o ActionRuleSuppressionScopePtrOutput) ToActionRuleSuppressionScopePtrOutput() ActionRuleSuppressionScopePtrOutput {
	return o
}

func (o ActionRuleSuppressionScopePtrOutput) ToActionRuleSuppressionScopePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionScopePtrOutput {
	return o
}

func (o ActionRuleSuppressionScopePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionScope] {
	return pulumix.Output[*ActionRuleSuppressionScope]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleSuppressionScopePtrOutput) Elem() ActionRuleSuppressionScopeOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionScope) ActionRuleSuppressionScope {
		if v != nil {
			return *v
		}
		var ret ActionRuleSuppressionScope
		return ret
	}).(ActionRuleSuppressionScopeOutput)
}

// A list of resource IDs of the given scope type which will be the target of action rule.
func (o ActionRuleSuppressionScopePtrOutput) ResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionScope) []string {
		if v == nil {
			return nil
		}
		return v.ResourceIds
	}).(pulumi.StringArrayOutput)
}

// Specifies the type of target scope. Possible values are `ResourceGroup` and `Resource`.
func (o ActionRuleSuppressionScopePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionScope) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ActionRuleSuppressionSuppression struct {
	// Specifies the type of suppression. Possible values are `Always`, `Daily`, `Monthly`, `Once`, and `Weekly`.
	RecurrenceType string `pulumi:"recurrenceType"`
	// A `schedule` block as defined below. Required if `recurrenceType` is `Daily`, `Monthly`, `Once` or `Weekly`.
	Schedule *ActionRuleSuppressionSuppressionSchedule `pulumi:"schedule"`
}

// ActionRuleSuppressionSuppressionInput is an input type that accepts ActionRuleSuppressionSuppressionArgs and ActionRuleSuppressionSuppressionOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionSuppressionInput` via:
//
//	ActionRuleSuppressionSuppressionArgs{...}
type ActionRuleSuppressionSuppressionInput interface {
	pulumi.Input

	ToActionRuleSuppressionSuppressionOutput() ActionRuleSuppressionSuppressionOutput
	ToActionRuleSuppressionSuppressionOutputWithContext(context.Context) ActionRuleSuppressionSuppressionOutput
}

type ActionRuleSuppressionSuppressionArgs struct {
	// Specifies the type of suppression. Possible values are `Always`, `Daily`, `Monthly`, `Once`, and `Weekly`.
	RecurrenceType pulumi.StringInput `pulumi:"recurrenceType"`
	// A `schedule` block as defined below. Required if `recurrenceType` is `Daily`, `Monthly`, `Once` or `Weekly`.
	Schedule ActionRuleSuppressionSuppressionSchedulePtrInput `pulumi:"schedule"`
}

func (ActionRuleSuppressionSuppressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionSuppression)(nil)).Elem()
}

func (i ActionRuleSuppressionSuppressionArgs) ToActionRuleSuppressionSuppressionOutput() ActionRuleSuppressionSuppressionOutput {
	return i.ToActionRuleSuppressionSuppressionOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionSuppressionArgs) ToActionRuleSuppressionSuppressionOutputWithContext(ctx context.Context) ActionRuleSuppressionSuppressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionSuppressionOutput)
}

func (i ActionRuleSuppressionSuppressionArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionSuppression] {
	return pulumix.Output[ActionRuleSuppressionSuppression]{
		OutputState: i.ToActionRuleSuppressionSuppressionOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleSuppressionSuppressionArgs) ToActionRuleSuppressionSuppressionPtrOutput() ActionRuleSuppressionSuppressionPtrOutput {
	return i.ToActionRuleSuppressionSuppressionPtrOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionSuppressionArgs) ToActionRuleSuppressionSuppressionPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionSuppressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionSuppressionOutput).ToActionRuleSuppressionSuppressionPtrOutputWithContext(ctx)
}

// ActionRuleSuppressionSuppressionPtrInput is an input type that accepts ActionRuleSuppressionSuppressionArgs, ActionRuleSuppressionSuppressionPtr and ActionRuleSuppressionSuppressionPtrOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionSuppressionPtrInput` via:
//
//	        ActionRuleSuppressionSuppressionArgs{...}
//
//	or:
//
//	        nil
type ActionRuleSuppressionSuppressionPtrInput interface {
	pulumi.Input

	ToActionRuleSuppressionSuppressionPtrOutput() ActionRuleSuppressionSuppressionPtrOutput
	ToActionRuleSuppressionSuppressionPtrOutputWithContext(context.Context) ActionRuleSuppressionSuppressionPtrOutput
}

type actionRuleSuppressionSuppressionPtrType ActionRuleSuppressionSuppressionArgs

func ActionRuleSuppressionSuppressionPtr(v *ActionRuleSuppressionSuppressionArgs) ActionRuleSuppressionSuppressionPtrInput {
	return (*actionRuleSuppressionSuppressionPtrType)(v)
}

func (*actionRuleSuppressionSuppressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionSuppression)(nil)).Elem()
}

func (i *actionRuleSuppressionSuppressionPtrType) ToActionRuleSuppressionSuppressionPtrOutput() ActionRuleSuppressionSuppressionPtrOutput {
	return i.ToActionRuleSuppressionSuppressionPtrOutputWithContext(context.Background())
}

func (i *actionRuleSuppressionSuppressionPtrType) ToActionRuleSuppressionSuppressionPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionSuppressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionSuppressionPtrOutput)
}

func (i *actionRuleSuppressionSuppressionPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionSuppression] {
	return pulumix.Output[*ActionRuleSuppressionSuppression]{
		OutputState: i.ToActionRuleSuppressionSuppressionPtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleSuppressionSuppressionOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionSuppressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionSuppression)(nil)).Elem()
}

func (o ActionRuleSuppressionSuppressionOutput) ToActionRuleSuppressionSuppressionOutput() ActionRuleSuppressionSuppressionOutput {
	return o
}

func (o ActionRuleSuppressionSuppressionOutput) ToActionRuleSuppressionSuppressionOutputWithContext(ctx context.Context) ActionRuleSuppressionSuppressionOutput {
	return o
}

func (o ActionRuleSuppressionSuppressionOutput) ToActionRuleSuppressionSuppressionPtrOutput() ActionRuleSuppressionSuppressionPtrOutput {
	return o.ToActionRuleSuppressionSuppressionPtrOutputWithContext(context.Background())
}

func (o ActionRuleSuppressionSuppressionOutput) ToActionRuleSuppressionSuppressionPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionSuppressionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleSuppressionSuppression) *ActionRuleSuppressionSuppression {
		return &v
	}).(ActionRuleSuppressionSuppressionPtrOutput)
}

func (o ActionRuleSuppressionSuppressionOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionSuppression] {
	return pulumix.Output[ActionRuleSuppressionSuppression]{
		OutputState: o.OutputState,
	}
}

// Specifies the type of suppression. Possible values are `Always`, `Daily`, `Monthly`, `Once`, and `Weekly`.
func (o ActionRuleSuppressionSuppressionOutput) RecurrenceType() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleSuppressionSuppression) string { return v.RecurrenceType }).(pulumi.StringOutput)
}

// A `schedule` block as defined below. Required if `recurrenceType` is `Daily`, `Monthly`, `Once` or `Weekly`.
func (o ActionRuleSuppressionSuppressionOutput) Schedule() ActionRuleSuppressionSuppressionSchedulePtrOutput {
	return o.ApplyT(func(v ActionRuleSuppressionSuppression) *ActionRuleSuppressionSuppressionSchedule { return v.Schedule }).(ActionRuleSuppressionSuppressionSchedulePtrOutput)
}

type ActionRuleSuppressionSuppressionPtrOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionSuppressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionSuppression)(nil)).Elem()
}

func (o ActionRuleSuppressionSuppressionPtrOutput) ToActionRuleSuppressionSuppressionPtrOutput() ActionRuleSuppressionSuppressionPtrOutput {
	return o
}

func (o ActionRuleSuppressionSuppressionPtrOutput) ToActionRuleSuppressionSuppressionPtrOutputWithContext(ctx context.Context) ActionRuleSuppressionSuppressionPtrOutput {
	return o
}

func (o ActionRuleSuppressionSuppressionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionSuppression] {
	return pulumix.Output[*ActionRuleSuppressionSuppression]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleSuppressionSuppressionPtrOutput) Elem() ActionRuleSuppressionSuppressionOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionSuppression) ActionRuleSuppressionSuppression {
		if v != nil {
			return *v
		}
		var ret ActionRuleSuppressionSuppression
		return ret
	}).(ActionRuleSuppressionSuppressionOutput)
}

// Specifies the type of suppression. Possible values are `Always`, `Daily`, `Monthly`, `Once`, and `Weekly`.
func (o ActionRuleSuppressionSuppressionPtrOutput) RecurrenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionSuppression) *string {
		if v == nil {
			return nil
		}
		return &v.RecurrenceType
	}).(pulumi.StringPtrOutput)
}

// A `schedule` block as defined below. Required if `recurrenceType` is `Daily`, `Monthly`, `Once` or `Weekly`.
func (o ActionRuleSuppressionSuppressionPtrOutput) Schedule() ActionRuleSuppressionSuppressionSchedulePtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionSuppression) *ActionRuleSuppressionSuppressionSchedule {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(ActionRuleSuppressionSuppressionSchedulePtrOutput)
}

type ActionRuleSuppressionSuppressionSchedule struct {
	// specifies the recurrence UTC end datetime (Y-m-d'T'H:M:S'Z').
	EndDateUtc string `pulumi:"endDateUtc"`
	// specifies the list of dayOfMonth to recurrence. Possible values are between `1` - `31`. Required if `recurrenceType` is `Monthly`.
	RecurrenceMonthlies []int `pulumi:"recurrenceMonthlies"`
	// specifies the list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
	RecurrenceWeeklies []string `pulumi:"recurrenceWeeklies"`
	// specifies the recurrence UTC start datetime (Y-m-d'T'H:M:S'Z').
	StartDateUtc string `pulumi:"startDateUtc"`
}

// ActionRuleSuppressionSuppressionScheduleInput is an input type that accepts ActionRuleSuppressionSuppressionScheduleArgs and ActionRuleSuppressionSuppressionScheduleOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionSuppressionScheduleInput` via:
//
//	ActionRuleSuppressionSuppressionScheduleArgs{...}
type ActionRuleSuppressionSuppressionScheduleInput interface {
	pulumi.Input

	ToActionRuleSuppressionSuppressionScheduleOutput() ActionRuleSuppressionSuppressionScheduleOutput
	ToActionRuleSuppressionSuppressionScheduleOutputWithContext(context.Context) ActionRuleSuppressionSuppressionScheduleOutput
}

type ActionRuleSuppressionSuppressionScheduleArgs struct {
	// specifies the recurrence UTC end datetime (Y-m-d'T'H:M:S'Z').
	EndDateUtc pulumi.StringInput `pulumi:"endDateUtc"`
	// specifies the list of dayOfMonth to recurrence. Possible values are between `1` - `31`. Required if `recurrenceType` is `Monthly`.
	RecurrenceMonthlies pulumi.IntArrayInput `pulumi:"recurrenceMonthlies"`
	// specifies the list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
	RecurrenceWeeklies pulumi.StringArrayInput `pulumi:"recurrenceWeeklies"`
	// specifies the recurrence UTC start datetime (Y-m-d'T'H:M:S'Z').
	StartDateUtc pulumi.StringInput `pulumi:"startDateUtc"`
}

func (ActionRuleSuppressionSuppressionScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionSuppressionSchedule)(nil)).Elem()
}

func (i ActionRuleSuppressionSuppressionScheduleArgs) ToActionRuleSuppressionSuppressionScheduleOutput() ActionRuleSuppressionSuppressionScheduleOutput {
	return i.ToActionRuleSuppressionSuppressionScheduleOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionSuppressionScheduleArgs) ToActionRuleSuppressionSuppressionScheduleOutputWithContext(ctx context.Context) ActionRuleSuppressionSuppressionScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionSuppressionScheduleOutput)
}

func (i ActionRuleSuppressionSuppressionScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionSuppressionSchedule] {
	return pulumix.Output[ActionRuleSuppressionSuppressionSchedule]{
		OutputState: i.ToActionRuleSuppressionSuppressionScheduleOutputWithContext(ctx).OutputState,
	}
}

func (i ActionRuleSuppressionSuppressionScheduleArgs) ToActionRuleSuppressionSuppressionSchedulePtrOutput() ActionRuleSuppressionSuppressionSchedulePtrOutput {
	return i.ToActionRuleSuppressionSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (i ActionRuleSuppressionSuppressionScheduleArgs) ToActionRuleSuppressionSuppressionSchedulePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionSuppressionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionSuppressionScheduleOutput).ToActionRuleSuppressionSuppressionSchedulePtrOutputWithContext(ctx)
}

// ActionRuleSuppressionSuppressionSchedulePtrInput is an input type that accepts ActionRuleSuppressionSuppressionScheduleArgs, ActionRuleSuppressionSuppressionSchedulePtr and ActionRuleSuppressionSuppressionSchedulePtrOutput values.
// You can construct a concrete instance of `ActionRuleSuppressionSuppressionSchedulePtrInput` via:
//
//	        ActionRuleSuppressionSuppressionScheduleArgs{...}
//
//	or:
//
//	        nil
type ActionRuleSuppressionSuppressionSchedulePtrInput interface {
	pulumi.Input

	ToActionRuleSuppressionSuppressionSchedulePtrOutput() ActionRuleSuppressionSuppressionSchedulePtrOutput
	ToActionRuleSuppressionSuppressionSchedulePtrOutputWithContext(context.Context) ActionRuleSuppressionSuppressionSchedulePtrOutput
}

type actionRuleSuppressionSuppressionSchedulePtrType ActionRuleSuppressionSuppressionScheduleArgs

func ActionRuleSuppressionSuppressionSchedulePtr(v *ActionRuleSuppressionSuppressionScheduleArgs) ActionRuleSuppressionSuppressionSchedulePtrInput {
	return (*actionRuleSuppressionSuppressionSchedulePtrType)(v)
}

func (*actionRuleSuppressionSuppressionSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionSuppressionSchedule)(nil)).Elem()
}

func (i *actionRuleSuppressionSuppressionSchedulePtrType) ToActionRuleSuppressionSuppressionSchedulePtrOutput() ActionRuleSuppressionSuppressionSchedulePtrOutput {
	return i.ToActionRuleSuppressionSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (i *actionRuleSuppressionSuppressionSchedulePtrType) ToActionRuleSuppressionSuppressionSchedulePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionSuppressionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionRuleSuppressionSuppressionSchedulePtrOutput)
}

func (i *actionRuleSuppressionSuppressionSchedulePtrType) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionSuppressionSchedule] {
	return pulumix.Output[*ActionRuleSuppressionSuppressionSchedule]{
		OutputState: i.ToActionRuleSuppressionSuppressionSchedulePtrOutputWithContext(ctx).OutputState,
	}
}

type ActionRuleSuppressionSuppressionScheduleOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionSuppressionScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionRuleSuppressionSuppressionSchedule)(nil)).Elem()
}

func (o ActionRuleSuppressionSuppressionScheduleOutput) ToActionRuleSuppressionSuppressionScheduleOutput() ActionRuleSuppressionSuppressionScheduleOutput {
	return o
}

func (o ActionRuleSuppressionSuppressionScheduleOutput) ToActionRuleSuppressionSuppressionScheduleOutputWithContext(ctx context.Context) ActionRuleSuppressionSuppressionScheduleOutput {
	return o
}

func (o ActionRuleSuppressionSuppressionScheduleOutput) ToActionRuleSuppressionSuppressionSchedulePtrOutput() ActionRuleSuppressionSuppressionSchedulePtrOutput {
	return o.ToActionRuleSuppressionSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (o ActionRuleSuppressionSuppressionScheduleOutput) ToActionRuleSuppressionSuppressionSchedulePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionSuppressionSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionRuleSuppressionSuppressionSchedule) *ActionRuleSuppressionSuppressionSchedule {
		return &v
	}).(ActionRuleSuppressionSuppressionSchedulePtrOutput)
}

func (o ActionRuleSuppressionSuppressionScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[ActionRuleSuppressionSuppressionSchedule] {
	return pulumix.Output[ActionRuleSuppressionSuppressionSchedule]{
		OutputState: o.OutputState,
	}
}

// specifies the recurrence UTC end datetime (Y-m-d'T'H:M:S'Z').
func (o ActionRuleSuppressionSuppressionScheduleOutput) EndDateUtc() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleSuppressionSuppressionSchedule) string { return v.EndDateUtc }).(pulumi.StringOutput)
}

// specifies the list of dayOfMonth to recurrence. Possible values are between `1` - `31`. Required if `recurrenceType` is `Monthly`.
func (o ActionRuleSuppressionSuppressionScheduleOutput) RecurrenceMonthlies() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ActionRuleSuppressionSuppressionSchedule) []int { return v.RecurrenceMonthlies }).(pulumi.IntArrayOutput)
}

// specifies the list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
func (o ActionRuleSuppressionSuppressionScheduleOutput) RecurrenceWeeklies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionRuleSuppressionSuppressionSchedule) []string { return v.RecurrenceWeeklies }).(pulumi.StringArrayOutput)
}

// specifies the recurrence UTC start datetime (Y-m-d'T'H:M:S'Z').
func (o ActionRuleSuppressionSuppressionScheduleOutput) StartDateUtc() pulumi.StringOutput {
	return o.ApplyT(func(v ActionRuleSuppressionSuppressionSchedule) string { return v.StartDateUtc }).(pulumi.StringOutput)
}

type ActionRuleSuppressionSuppressionSchedulePtrOutput struct{ *pulumi.OutputState }

func (ActionRuleSuppressionSuppressionSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionRuleSuppressionSuppressionSchedule)(nil)).Elem()
}

func (o ActionRuleSuppressionSuppressionSchedulePtrOutput) ToActionRuleSuppressionSuppressionSchedulePtrOutput() ActionRuleSuppressionSuppressionSchedulePtrOutput {
	return o
}

func (o ActionRuleSuppressionSuppressionSchedulePtrOutput) ToActionRuleSuppressionSuppressionSchedulePtrOutputWithContext(ctx context.Context) ActionRuleSuppressionSuppressionSchedulePtrOutput {
	return o
}

func (o ActionRuleSuppressionSuppressionSchedulePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActionRuleSuppressionSuppressionSchedule] {
	return pulumix.Output[*ActionRuleSuppressionSuppressionSchedule]{
		OutputState: o.OutputState,
	}
}

func (o ActionRuleSuppressionSuppressionSchedulePtrOutput) Elem() ActionRuleSuppressionSuppressionScheduleOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionSuppressionSchedule) ActionRuleSuppressionSuppressionSchedule {
		if v != nil {
			return *v
		}
		var ret ActionRuleSuppressionSuppressionSchedule
		return ret
	}).(ActionRuleSuppressionSuppressionScheduleOutput)
}

// specifies the recurrence UTC end datetime (Y-m-d'T'H:M:S'Z').
func (o ActionRuleSuppressionSuppressionSchedulePtrOutput) EndDateUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionSuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.EndDateUtc
	}).(pulumi.StringPtrOutput)
}

// specifies the list of dayOfMonth to recurrence. Possible values are between `1` - `31`. Required if `recurrenceType` is `Monthly`.
func (o ActionRuleSuppressionSuppressionSchedulePtrOutput) RecurrenceMonthlies() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionSuppressionSchedule) []int {
		if v == nil {
			return nil
		}
		return v.RecurrenceMonthlies
	}).(pulumi.IntArrayOutput)
}

// specifies the list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday` and `Saturday`.
func (o ActionRuleSuppressionSuppressionSchedulePtrOutput) RecurrenceWeeklies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionSuppressionSchedule) []string {
		if v == nil {
			return nil
		}
		return v.RecurrenceWeeklies
	}).(pulumi.StringArrayOutput)
}

// specifies the recurrence UTC start datetime (Y-m-d'T'H:M:S'Z').
func (o ActionRuleSuppressionSuppressionSchedulePtrOutput) StartDateUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionRuleSuppressionSuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.StartDateUtc
	}).(pulumi.StringPtrOutput)
}

type ActivityLogAlertAction struct {
	// The ID of the Action Group can be sourced from the `monitoring.ActionGroup` resource.
	ActionGroupId string `pulumi:"actionGroupId"`
	// The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
	WebhookProperties map[string]string `pulumi:"webhookProperties"`
}

// ActivityLogAlertActionInput is an input type that accepts ActivityLogAlertActionArgs and ActivityLogAlertActionOutput values.
// You can construct a concrete instance of `ActivityLogAlertActionInput` via:
//
//	ActivityLogAlertActionArgs{...}
type ActivityLogAlertActionInput interface {
	pulumi.Input

	ToActivityLogAlertActionOutput() ActivityLogAlertActionOutput
	ToActivityLogAlertActionOutputWithContext(context.Context) ActivityLogAlertActionOutput
}

type ActivityLogAlertActionArgs struct {
	// The ID of the Action Group can be sourced from the `monitoring.ActionGroup` resource.
	ActionGroupId pulumi.StringInput `pulumi:"actionGroupId"`
	// The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
	WebhookProperties pulumi.StringMapInput `pulumi:"webhookProperties"`
}

func (ActivityLogAlertActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertAction)(nil)).Elem()
}

func (i ActivityLogAlertActionArgs) ToActivityLogAlertActionOutput() ActivityLogAlertActionOutput {
	return i.ToActivityLogAlertActionOutputWithContext(context.Background())
}

func (i ActivityLogAlertActionArgs) ToActivityLogAlertActionOutputWithContext(ctx context.Context) ActivityLogAlertActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertActionOutput)
}

func (i ActivityLogAlertActionArgs) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertAction] {
	return pulumix.Output[ActivityLogAlertAction]{
		OutputState: i.ToActivityLogAlertActionOutputWithContext(ctx).OutputState,
	}
}

// ActivityLogAlertActionArrayInput is an input type that accepts ActivityLogAlertActionArray and ActivityLogAlertActionArrayOutput values.
// You can construct a concrete instance of `ActivityLogAlertActionArrayInput` via:
//
//	ActivityLogAlertActionArray{ ActivityLogAlertActionArgs{...} }
type ActivityLogAlertActionArrayInput interface {
	pulumi.Input

	ToActivityLogAlertActionArrayOutput() ActivityLogAlertActionArrayOutput
	ToActivityLogAlertActionArrayOutputWithContext(context.Context) ActivityLogAlertActionArrayOutput
}

type ActivityLogAlertActionArray []ActivityLogAlertActionInput

func (ActivityLogAlertActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityLogAlertAction)(nil)).Elem()
}

func (i ActivityLogAlertActionArray) ToActivityLogAlertActionArrayOutput() ActivityLogAlertActionArrayOutput {
	return i.ToActivityLogAlertActionArrayOutputWithContext(context.Background())
}

func (i ActivityLogAlertActionArray) ToActivityLogAlertActionArrayOutputWithContext(ctx context.Context) ActivityLogAlertActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertActionArrayOutput)
}

func (i ActivityLogAlertActionArray) ToOutput(ctx context.Context) pulumix.Output[[]ActivityLogAlertAction] {
	return pulumix.Output[[]ActivityLogAlertAction]{
		OutputState: i.ToActivityLogAlertActionArrayOutputWithContext(ctx).OutputState,
	}
}

type ActivityLogAlertActionOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertAction)(nil)).Elem()
}

func (o ActivityLogAlertActionOutput) ToActivityLogAlertActionOutput() ActivityLogAlertActionOutput {
	return o
}

func (o ActivityLogAlertActionOutput) ToActivityLogAlertActionOutputWithContext(ctx context.Context) ActivityLogAlertActionOutput {
	return o
}

func (o ActivityLogAlertActionOutput) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertAction] {
	return pulumix.Output[ActivityLogAlertAction]{
		OutputState: o.OutputState,
	}
}

// The ID of the Action Group can be sourced from the `monitoring.ActionGroup` resource.
func (o ActivityLogAlertActionOutput) ActionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityLogAlertAction) string { return v.ActionGroupId }).(pulumi.StringOutput)
}

// The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
func (o ActivityLogAlertActionOutput) WebhookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ActivityLogAlertAction) map[string]string { return v.WebhookProperties }).(pulumi.StringMapOutput)
}

type ActivityLogAlertActionArrayOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityLogAlertAction)(nil)).Elem()
}

func (o ActivityLogAlertActionArrayOutput) ToActivityLogAlertActionArrayOutput() ActivityLogAlertActionArrayOutput {
	return o
}

func (o ActivityLogAlertActionArrayOutput) ToActivityLogAlertActionArrayOutputWithContext(ctx context.Context) ActivityLogAlertActionArrayOutput {
	return o
}

func (o ActivityLogAlertActionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActivityLogAlertAction] {
	return pulumix.Output[[]ActivityLogAlertAction]{
		OutputState: o.OutputState,
	}
}

func (o ActivityLogAlertActionArrayOutput) Index(i pulumi.IntInput) ActivityLogAlertActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityLogAlertAction {
		return vs[0].([]ActivityLogAlertAction)[vs[1].(int)]
	}).(ActivityLogAlertActionOutput)
}

type ActivityLogAlertCriteria struct {
	// The email address or Azure Active Directory identifier of the user who performed the operation.
	Caller *string `pulumi:"caller"`
	// The category of the operation. Possible values are `Administrative`, `Autoscale`, `Policy`, `Recommendation`, `ResourceHealth`, `Security` and `ServiceHealth`.
	Category string `pulumi:"category"`
	// The severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
	Level *string `pulumi:"level"`
	// A list of severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
	//
	// > **NOTE:** `level` and `levels` are mutually exclusive.
	Levels []string `pulumi:"levels"`
	// The Resource Manager Role-Based Access Control operation name. Supported operation should be of the form: `<resourceProvider>/<resourceType>/<operation>`.
	OperationName *string `pulumi:"operationName"`
	// The recommendation category of the event. Possible values are `Cost`, `Reliability`, `OperationalExcellence`, `HighAvailability` and `Performance`. It is only allowed when `category` is `Recommendation`.
	RecommendationCategory *string `pulumi:"recommendationCategory"`
	// The recommendation impact of the event. Possible values are `High`, `Medium` and `Low`. It is only allowed when `category` is `Recommendation`.
	RecommendationImpact *string `pulumi:"recommendationImpact"`
	// The recommendation type of the event. It is only allowed when `category` is `Recommendation`.
	RecommendationType *string `pulumi:"recommendationType"`
	// The name of resource group monitored by the activity log alert.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// A list of names of resource groups monitored by the activity log alert.
	//
	// > **NOTE:** `resourceGroup` and `resourceGroups` are mutually exclusive.
	ResourceGroups []string `pulumi:"resourceGroups"`
	// A block to define fine grain resource health settings.
	ResourceHealths []ActivityLogAlertCriteriaResourceHealth `pulumi:"resourceHealths"`
	// The specific resource monitored by the activity log alert. It should be within one of the `scopes`.
	ResourceId *string `pulumi:"resourceId"`
	// A list of specific resources monitored by the activity log alert. It should be within one of the `scopes`.
	//
	// > **NOTE:** `resourceId` and `resourceIds` are mutually exclusive.
	ResourceIds []string `pulumi:"resourceIds"`
	// The name of the resource provider monitored by the activity log alert.
	ResourceProvider *string `pulumi:"resourceProvider"`
	// A list of names of resource providers monitored by the activity log alert.
	//
	// > **NOTE:** `resourceProvider` and `resourceProviders` are mutually exclusive.
	ResourceProviders []string `pulumi:"resourceProviders"`
	// The resource type monitored by the activity log alert.
	ResourceType *string `pulumi:"resourceType"`
	// A list of resource types monitored by the activity log alert.
	//
	// > **NOTE:** `resourceType` and `resourceTypes` are mutually exclusive.
	ResourceTypes []string `pulumi:"resourceTypes"`
	// A block to define fine grain service health settings.
	ServiceHealths []ActivityLogAlertCriteriaServiceHealth `pulumi:"serviceHealths"`
	// The status of the event. For example, `Started`, `Failed`, or `Succeeded`.
	Status *string `pulumi:"status"`
	// A list of status of the event. For example, `Started`, `Failed`, or `Succeeded`.
	//
	// > **NOTE:** `status` and `statuses` are mutually exclusive.
	Statuses []string `pulumi:"statuses"`
	// The sub status of the event.
	SubStatus *string `pulumi:"subStatus"`
	// A list of sub status of the event.
	//
	// > **NOTE:** `subStatus` and `subStatuses` are mutually exclusive.
	SubStatuses []string `pulumi:"subStatuses"`
}

// ActivityLogAlertCriteriaInput is an input type that accepts ActivityLogAlertCriteriaArgs and ActivityLogAlertCriteriaOutput values.
// You can construct a concrete instance of `ActivityLogAlertCriteriaInput` via:
//
//	ActivityLogAlertCriteriaArgs{...}
type ActivityLogAlertCriteriaInput interface {
	pulumi.Input

	ToActivityLogAlertCriteriaOutput() ActivityLogAlertCriteriaOutput
	ToActivityLogAlertCriteriaOutputWithContext(context.Context) ActivityLogAlertCriteriaOutput
}

type ActivityLogAlertCriteriaArgs struct {
	// The email address or Azure Active Directory identifier of the user who performed the operation.
	Caller pulumi.StringPtrInput `pulumi:"caller"`
	// The category of the operation. Possible values are `Administrative`, `Autoscale`, `Policy`, `Recommendation`, `ResourceHealth`, `Security` and `ServiceHealth`.
	Category pulumi.StringInput `pulumi:"category"`
	// The severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// A list of severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
	//
	// > **NOTE:** `level` and `levels` are mutually exclusive.
	Levels pulumi.StringArrayInput `pulumi:"levels"`
	// The Resource Manager Role-Based Access Control operation name. Supported operation should be of the form: `<resourceProvider>/<resourceType>/<operation>`.
	OperationName pulumi.StringPtrInput `pulumi:"operationName"`
	// The recommendation category of the event. Possible values are `Cost`, `Reliability`, `OperationalExcellence`, `HighAvailability` and `Performance`. It is only allowed when `category` is `Recommendation`.
	RecommendationCategory pulumi.StringPtrInput `pulumi:"recommendationCategory"`
	// The recommendation impact of the event. Possible values are `High`, `Medium` and `Low`. It is only allowed when `category` is `Recommendation`.
	RecommendationImpact pulumi.StringPtrInput `pulumi:"recommendationImpact"`
	// The recommendation type of the event. It is only allowed when `category` is `Recommendation`.
	RecommendationType pulumi.StringPtrInput `pulumi:"recommendationType"`
	// The name of resource group monitored by the activity log alert.
	ResourceGroup pulumi.StringPtrInput `pulumi:"resourceGroup"`
	// A list of names of resource groups monitored by the activity log alert.
	//
	// > **NOTE:** `resourceGroup` and `resourceGroups` are mutually exclusive.
	ResourceGroups pulumi.StringArrayInput `pulumi:"resourceGroups"`
	// A block to define fine grain resource health settings.
	ResourceHealths ActivityLogAlertCriteriaResourceHealthArrayInput `pulumi:"resourceHealths"`
	// The specific resource monitored by the activity log alert. It should be within one of the `scopes`.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// A list of specific resources monitored by the activity log alert. It should be within one of the `scopes`.
	//
	// > **NOTE:** `resourceId` and `resourceIds` are mutually exclusive.
	ResourceIds pulumi.StringArrayInput `pulumi:"resourceIds"`
	// The name of the resource provider monitored by the activity log alert.
	ResourceProvider pulumi.StringPtrInput `pulumi:"resourceProvider"`
	// A list of names of resource providers monitored by the activity log alert.
	//
	// > **NOTE:** `resourceProvider` and `resourceProviders` are mutually exclusive.
	ResourceProviders pulumi.StringArrayInput `pulumi:"resourceProviders"`
	// The resource type monitored by the activity log alert.
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
	// A list of resource types monitored by the activity log alert.
	//
	// > **NOTE:** `resourceType` and `resourceTypes` are mutually exclusive.
	ResourceTypes pulumi.StringArrayInput `pulumi:"resourceTypes"`
	// A block to define fine grain service health settings.
	ServiceHealths ActivityLogAlertCriteriaServiceHealthArrayInput `pulumi:"serviceHealths"`
	// The status of the event. For example, `Started`, `Failed`, or `Succeeded`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// A list of status of the event. For example, `Started`, `Failed`, or `Succeeded`.
	//
	// > **NOTE:** `status` and `statuses` are mutually exclusive.
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
	// The sub status of the event.
	SubStatus pulumi.StringPtrInput `pulumi:"subStatus"`
	// A list of sub status of the event.
	//
	// > **NOTE:** `subStatus` and `subStatuses` are mutually exclusive.
	SubStatuses pulumi.StringArrayInput `pulumi:"subStatuses"`
}

func (ActivityLogAlertCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertCriteria)(nil)).Elem()
}

func (i ActivityLogAlertCriteriaArgs) ToActivityLogAlertCriteriaOutput() ActivityLogAlertCriteriaOutput {
	return i.ToActivityLogAlertCriteriaOutputWithContext(context.Background())
}

func (i ActivityLogAlertCriteriaArgs) ToActivityLogAlertCriteriaOutputWithContext(ctx context.Context) ActivityLogAlertCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertCriteriaOutput)
}

func (i ActivityLogAlertCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertCriteria] {
	return pulumix.Output[ActivityLogAlertCriteria]{
		OutputState: i.ToActivityLogAlertCriteriaOutputWithContext(ctx).OutputState,
	}
}

func (i ActivityLogAlertCriteriaArgs) ToActivityLogAlertCriteriaPtrOutput() ActivityLogAlertCriteriaPtrOutput {
	return i.ToActivityLogAlertCriteriaPtrOutputWithContext(context.Background())
}

func (i ActivityLogAlertCriteriaArgs) ToActivityLogAlertCriteriaPtrOutputWithContext(ctx context.Context) ActivityLogAlertCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertCriteriaOutput).ToActivityLogAlertCriteriaPtrOutputWithContext(ctx)
}

// ActivityLogAlertCriteriaPtrInput is an input type that accepts ActivityLogAlertCriteriaArgs, ActivityLogAlertCriteriaPtr and ActivityLogAlertCriteriaPtrOutput values.
// You can construct a concrete instance of `ActivityLogAlertCriteriaPtrInput` via:
//
//	        ActivityLogAlertCriteriaArgs{...}
//
//	or:
//
//	        nil
type ActivityLogAlertCriteriaPtrInput interface {
	pulumi.Input

	ToActivityLogAlertCriteriaPtrOutput() ActivityLogAlertCriteriaPtrOutput
	ToActivityLogAlertCriteriaPtrOutputWithContext(context.Context) ActivityLogAlertCriteriaPtrOutput
}

type activityLogAlertCriteriaPtrType ActivityLogAlertCriteriaArgs

func ActivityLogAlertCriteriaPtr(v *ActivityLogAlertCriteriaArgs) ActivityLogAlertCriteriaPtrInput {
	return (*activityLogAlertCriteriaPtrType)(v)
}

func (*activityLogAlertCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivityLogAlertCriteria)(nil)).Elem()
}

func (i *activityLogAlertCriteriaPtrType) ToActivityLogAlertCriteriaPtrOutput() ActivityLogAlertCriteriaPtrOutput {
	return i.ToActivityLogAlertCriteriaPtrOutputWithContext(context.Background())
}

func (i *activityLogAlertCriteriaPtrType) ToActivityLogAlertCriteriaPtrOutputWithContext(ctx context.Context) ActivityLogAlertCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertCriteriaPtrOutput)
}

func (i *activityLogAlertCriteriaPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActivityLogAlertCriteria] {
	return pulumix.Output[*ActivityLogAlertCriteria]{
		OutputState: i.ToActivityLogAlertCriteriaPtrOutputWithContext(ctx).OutputState,
	}
}

type ActivityLogAlertCriteriaOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertCriteria)(nil)).Elem()
}

func (o ActivityLogAlertCriteriaOutput) ToActivityLogAlertCriteriaOutput() ActivityLogAlertCriteriaOutput {
	return o
}

func (o ActivityLogAlertCriteriaOutput) ToActivityLogAlertCriteriaOutputWithContext(ctx context.Context) ActivityLogAlertCriteriaOutput {
	return o
}

func (o ActivityLogAlertCriteriaOutput) ToActivityLogAlertCriteriaPtrOutput() ActivityLogAlertCriteriaPtrOutput {
	return o.ToActivityLogAlertCriteriaPtrOutputWithContext(context.Background())
}

func (o ActivityLogAlertCriteriaOutput) ToActivityLogAlertCriteriaPtrOutputWithContext(ctx context.Context) ActivityLogAlertCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActivityLogAlertCriteria) *ActivityLogAlertCriteria {
		return &v
	}).(ActivityLogAlertCriteriaPtrOutput)
}

func (o ActivityLogAlertCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertCriteria] {
	return pulumix.Output[ActivityLogAlertCriteria]{
		OutputState: o.OutputState,
	}
}

// The email address or Azure Active Directory identifier of the user who performed the operation.
func (o ActivityLogAlertCriteriaOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) *string { return v.Caller }).(pulumi.StringPtrOutput)
}

// The category of the operation. Possible values are `Administrative`, `Autoscale`, `Policy`, `Recommendation`, `ResourceHealth`, `Security` and `ServiceHealth`.
func (o ActivityLogAlertCriteriaOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) string { return v.Category }).(pulumi.StringOutput)
}

// The severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
func (o ActivityLogAlertCriteriaOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// A list of severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
//
// > **NOTE:** `level` and `levels` are mutually exclusive.
func (o ActivityLogAlertCriteriaOutput) Levels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) []string { return v.Levels }).(pulumi.StringArrayOutput)
}

// The Resource Manager Role-Based Access Control operation name. Supported operation should be of the form: `<resourceProvider>/<resourceType>/<operation>`.
func (o ActivityLogAlertCriteriaOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) *string { return v.OperationName }).(pulumi.StringPtrOutput)
}

// The recommendation category of the event. Possible values are `Cost`, `Reliability`, `OperationalExcellence`, `HighAvailability` and `Performance`. It is only allowed when `category` is `Recommendation`.
func (o ActivityLogAlertCriteriaOutput) RecommendationCategory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) *string { return v.RecommendationCategory }).(pulumi.StringPtrOutput)
}

// The recommendation impact of the event. Possible values are `High`, `Medium` and `Low`. It is only allowed when `category` is `Recommendation`.
func (o ActivityLogAlertCriteriaOutput) RecommendationImpact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) *string { return v.RecommendationImpact }).(pulumi.StringPtrOutput)
}

// The recommendation type of the event. It is only allowed when `category` is `Recommendation`.
func (o ActivityLogAlertCriteriaOutput) RecommendationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) *string { return v.RecommendationType }).(pulumi.StringPtrOutput)
}

// The name of resource group monitored by the activity log alert.
func (o ActivityLogAlertCriteriaOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// A list of names of resource groups monitored by the activity log alert.
//
// > **NOTE:** `resourceGroup` and `resourceGroups` are mutually exclusive.
func (o ActivityLogAlertCriteriaOutput) ResourceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) []string { return v.ResourceGroups }).(pulumi.StringArrayOutput)
}

// A block to define fine grain resource health settings.
func (o ActivityLogAlertCriteriaOutput) ResourceHealths() ActivityLogAlertCriteriaResourceHealthArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) []ActivityLogAlertCriteriaResourceHealth { return v.ResourceHealths }).(ActivityLogAlertCriteriaResourceHealthArrayOutput)
}

// The specific resource monitored by the activity log alert. It should be within one of the `scopes`.
func (o ActivityLogAlertCriteriaOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// A list of specific resources monitored by the activity log alert. It should be within one of the `scopes`.
//
// > **NOTE:** `resourceId` and `resourceIds` are mutually exclusive.
func (o ActivityLogAlertCriteriaOutput) ResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) []string { return v.ResourceIds }).(pulumi.StringArrayOutput)
}

// The name of the resource provider monitored by the activity log alert.
func (o ActivityLogAlertCriteriaOutput) ResourceProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) *string { return v.ResourceProvider }).(pulumi.StringPtrOutput)
}

// A list of names of resource providers monitored by the activity log alert.
//
// > **NOTE:** `resourceProvider` and `resourceProviders` are mutually exclusive.
func (o ActivityLogAlertCriteriaOutput) ResourceProviders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) []string { return v.ResourceProviders }).(pulumi.StringArrayOutput)
}

// The resource type monitored by the activity log alert.
func (o ActivityLogAlertCriteriaOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// A list of resource types monitored by the activity log alert.
//
// > **NOTE:** `resourceType` and `resourceTypes` are mutually exclusive.
func (o ActivityLogAlertCriteriaOutput) ResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) []string { return v.ResourceTypes }).(pulumi.StringArrayOutput)
}

// A block to define fine grain service health settings.
func (o ActivityLogAlertCriteriaOutput) ServiceHealths() ActivityLogAlertCriteriaServiceHealthArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) []ActivityLogAlertCriteriaServiceHealth { return v.ServiceHealths }).(ActivityLogAlertCriteriaServiceHealthArrayOutput)
}

// The status of the event. For example, `Started`, `Failed`, or `Succeeded`.
func (o ActivityLogAlertCriteriaOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A list of status of the event. For example, `Started`, `Failed`, or `Succeeded`.
//
// > **NOTE:** `status` and `statuses` are mutually exclusive.
func (o ActivityLogAlertCriteriaOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

// The sub status of the event.
func (o ActivityLogAlertCriteriaOutput) SubStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) *string { return v.SubStatus }).(pulumi.StringPtrOutput)
}

// A list of sub status of the event.
//
// > **NOTE:** `subStatus` and `subStatuses` are mutually exclusive.
func (o ActivityLogAlertCriteriaOutput) SubStatuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteria) []string { return v.SubStatuses }).(pulumi.StringArrayOutput)
}

type ActivityLogAlertCriteriaPtrOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivityLogAlertCriteria)(nil)).Elem()
}

func (o ActivityLogAlertCriteriaPtrOutput) ToActivityLogAlertCriteriaPtrOutput() ActivityLogAlertCriteriaPtrOutput {
	return o
}

func (o ActivityLogAlertCriteriaPtrOutput) ToActivityLogAlertCriteriaPtrOutputWithContext(ctx context.Context) ActivityLogAlertCriteriaPtrOutput {
	return o
}

func (o ActivityLogAlertCriteriaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActivityLogAlertCriteria] {
	return pulumix.Output[*ActivityLogAlertCriteria]{
		OutputState: o.OutputState,
	}
}

func (o ActivityLogAlertCriteriaPtrOutput) Elem() ActivityLogAlertCriteriaOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) ActivityLogAlertCriteria {
		if v != nil {
			return *v
		}
		var ret ActivityLogAlertCriteria
		return ret
	}).(ActivityLogAlertCriteriaOutput)
}

// The email address or Azure Active Directory identifier of the user who performed the operation.
func (o ActivityLogAlertCriteriaPtrOutput) Caller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) *string {
		if v == nil {
			return nil
		}
		return v.Caller
	}).(pulumi.StringPtrOutput)
}

// The category of the operation. Possible values are `Administrative`, `Autoscale`, `Policy`, `Recommendation`, `ResourceHealth`, `Security` and `ServiceHealth`.
func (o ActivityLogAlertCriteriaPtrOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) *string {
		if v == nil {
			return nil
		}
		return &v.Category
	}).(pulumi.StringPtrOutput)
}

// The severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
func (o ActivityLogAlertCriteriaPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// A list of severity level of the event. Possible values are `Verbose`, `Informational`, `Warning`, `Error`, and `Critical`.
//
// > **NOTE:** `level` and `levels` are mutually exclusive.
func (o ActivityLogAlertCriteriaPtrOutput) Levels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) []string {
		if v == nil {
			return nil
		}
		return v.Levels
	}).(pulumi.StringArrayOutput)
}

// The Resource Manager Role-Based Access Control operation name. Supported operation should be of the form: `<resourceProvider>/<resourceType>/<operation>`.
func (o ActivityLogAlertCriteriaPtrOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) *string {
		if v == nil {
			return nil
		}
		return v.OperationName
	}).(pulumi.StringPtrOutput)
}

// The recommendation category of the event. Possible values are `Cost`, `Reliability`, `OperationalExcellence`, `HighAvailability` and `Performance`. It is only allowed when `category` is `Recommendation`.
func (o ActivityLogAlertCriteriaPtrOutput) RecommendationCategory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) *string {
		if v == nil {
			return nil
		}
		return v.RecommendationCategory
	}).(pulumi.StringPtrOutput)
}

// The recommendation impact of the event. Possible values are `High`, `Medium` and `Low`. It is only allowed when `category` is `Recommendation`.
func (o ActivityLogAlertCriteriaPtrOutput) RecommendationImpact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) *string {
		if v == nil {
			return nil
		}
		return v.RecommendationImpact
	}).(pulumi.StringPtrOutput)
}

// The recommendation type of the event. It is only allowed when `category` is `Recommendation`.
func (o ActivityLogAlertCriteriaPtrOutput) RecommendationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) *string {
		if v == nil {
			return nil
		}
		return v.RecommendationType
	}).(pulumi.StringPtrOutput)
}

// The name of resource group monitored by the activity log alert.
func (o ActivityLogAlertCriteriaPtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// A list of names of resource groups monitored by the activity log alert.
//
// > **NOTE:** `resourceGroup` and `resourceGroups` are mutually exclusive.
func (o ActivityLogAlertCriteriaPtrOutput) ResourceGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) []string {
		if v == nil {
			return nil
		}
		return v.ResourceGroups
	}).(pulumi.StringArrayOutput)
}

// A block to define fine grain resource health settings.
func (o ActivityLogAlertCriteriaPtrOutput) ResourceHealths() ActivityLogAlertCriteriaResourceHealthArrayOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) []ActivityLogAlertCriteriaResourceHealth {
		if v == nil {
			return nil
		}
		return v.ResourceHealths
	}).(ActivityLogAlertCriteriaResourceHealthArrayOutput)
}

// The specific resource monitored by the activity log alert. It should be within one of the `scopes`.
func (o ActivityLogAlertCriteriaPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// A list of specific resources monitored by the activity log alert. It should be within one of the `scopes`.
//
// > **NOTE:** `resourceId` and `resourceIds` are mutually exclusive.
func (o ActivityLogAlertCriteriaPtrOutput) ResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) []string {
		if v == nil {
			return nil
		}
		return v.ResourceIds
	}).(pulumi.StringArrayOutput)
}

// The name of the resource provider monitored by the activity log alert.
func (o ActivityLogAlertCriteriaPtrOutput) ResourceProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) *string {
		if v == nil {
			return nil
		}
		return v.ResourceProvider
	}).(pulumi.StringPtrOutput)
}

// A list of names of resource providers monitored by the activity log alert.
//
// > **NOTE:** `resourceProvider` and `resourceProviders` are mutually exclusive.
func (o ActivityLogAlertCriteriaPtrOutput) ResourceProviders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) []string {
		if v == nil {
			return nil
		}
		return v.ResourceProviders
	}).(pulumi.StringArrayOutput)
}

// The resource type monitored by the activity log alert.
func (o ActivityLogAlertCriteriaPtrOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) *string {
		if v == nil {
			return nil
		}
		return v.ResourceType
	}).(pulumi.StringPtrOutput)
}

// A list of resource types monitored by the activity log alert.
//
// > **NOTE:** `resourceType` and `resourceTypes` are mutually exclusive.
func (o ActivityLogAlertCriteriaPtrOutput) ResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) []string {
		if v == nil {
			return nil
		}
		return v.ResourceTypes
	}).(pulumi.StringArrayOutput)
}

// A block to define fine grain service health settings.
func (o ActivityLogAlertCriteriaPtrOutput) ServiceHealths() ActivityLogAlertCriteriaServiceHealthArrayOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) []ActivityLogAlertCriteriaServiceHealth {
		if v == nil {
			return nil
		}
		return v.ServiceHealths
	}).(ActivityLogAlertCriteriaServiceHealthArrayOutput)
}

// The status of the event. For example, `Started`, `Failed`, or `Succeeded`.
func (o ActivityLogAlertCriteriaPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// A list of status of the event. For example, `Started`, `Failed`, or `Succeeded`.
//
// > **NOTE:** `status` and `statuses` are mutually exclusive.
func (o ActivityLogAlertCriteriaPtrOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) []string {
		if v == nil {
			return nil
		}
		return v.Statuses
	}).(pulumi.StringArrayOutput)
}

// The sub status of the event.
func (o ActivityLogAlertCriteriaPtrOutput) SubStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) *string {
		if v == nil {
			return nil
		}
		return v.SubStatus
	}).(pulumi.StringPtrOutput)
}

// A list of sub status of the event.
//
// > **NOTE:** `subStatus` and `subStatuses` are mutually exclusive.
func (o ActivityLogAlertCriteriaPtrOutput) SubStatuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActivityLogAlertCriteria) []string {
		if v == nil {
			return nil
		}
		return v.SubStatuses
	}).(pulumi.StringArrayOutput)
}

type ActivityLogAlertCriteriaResourceHealth struct {
	// The current resource health statuses that will log an alert. Possible values are `Available`, `Degraded`, `Unavailable` and `Unknown`.
	Currents []string `pulumi:"currents"`
	// The previous resource health statuses that will log an alert. Possible values are `Available`, `Degraded`, `Unavailable` and `Unknown`.
	Previouses []string `pulumi:"previouses"`
	// The reason that will log an alert. Possible values are `PlatformInitiated` (such as a problem with the resource in an affected region of an Azure incident), `UserInitiated` (such as a shutdown request of a VM) and `Unknown`.
	Reasons []string `pulumi:"reasons"`
}

// ActivityLogAlertCriteriaResourceHealthInput is an input type that accepts ActivityLogAlertCriteriaResourceHealthArgs and ActivityLogAlertCriteriaResourceHealthOutput values.
// You can construct a concrete instance of `ActivityLogAlertCriteriaResourceHealthInput` via:
//
//	ActivityLogAlertCriteriaResourceHealthArgs{...}
type ActivityLogAlertCriteriaResourceHealthInput interface {
	pulumi.Input

	ToActivityLogAlertCriteriaResourceHealthOutput() ActivityLogAlertCriteriaResourceHealthOutput
	ToActivityLogAlertCriteriaResourceHealthOutputWithContext(context.Context) ActivityLogAlertCriteriaResourceHealthOutput
}

type ActivityLogAlertCriteriaResourceHealthArgs struct {
	// The current resource health statuses that will log an alert. Possible values are `Available`, `Degraded`, `Unavailable` and `Unknown`.
	Currents pulumi.StringArrayInput `pulumi:"currents"`
	// The previous resource health statuses that will log an alert. Possible values are `Available`, `Degraded`, `Unavailable` and `Unknown`.
	Previouses pulumi.StringArrayInput `pulumi:"previouses"`
	// The reason that will log an alert. Possible values are `PlatformInitiated` (such as a problem with the resource in an affected region of an Azure incident), `UserInitiated` (such as a shutdown request of a VM) and `Unknown`.
	Reasons pulumi.StringArrayInput `pulumi:"reasons"`
}

func (ActivityLogAlertCriteriaResourceHealthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertCriteriaResourceHealth)(nil)).Elem()
}

func (i ActivityLogAlertCriteriaResourceHealthArgs) ToActivityLogAlertCriteriaResourceHealthOutput() ActivityLogAlertCriteriaResourceHealthOutput {
	return i.ToActivityLogAlertCriteriaResourceHealthOutputWithContext(context.Background())
}

func (i ActivityLogAlertCriteriaResourceHealthArgs) ToActivityLogAlertCriteriaResourceHealthOutputWithContext(ctx context.Context) ActivityLogAlertCriteriaResourceHealthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertCriteriaResourceHealthOutput)
}

func (i ActivityLogAlertCriteriaResourceHealthArgs) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertCriteriaResourceHealth] {
	return pulumix.Output[ActivityLogAlertCriteriaResourceHealth]{
		OutputState: i.ToActivityLogAlertCriteriaResourceHealthOutputWithContext(ctx).OutputState,
	}
}

// ActivityLogAlertCriteriaResourceHealthArrayInput is an input type that accepts ActivityLogAlertCriteriaResourceHealthArray and ActivityLogAlertCriteriaResourceHealthArrayOutput values.
// You can construct a concrete instance of `ActivityLogAlertCriteriaResourceHealthArrayInput` via:
//
//	ActivityLogAlertCriteriaResourceHealthArray{ ActivityLogAlertCriteriaResourceHealthArgs{...} }
type ActivityLogAlertCriteriaResourceHealthArrayInput interface {
	pulumi.Input

	ToActivityLogAlertCriteriaResourceHealthArrayOutput() ActivityLogAlertCriteriaResourceHealthArrayOutput
	ToActivityLogAlertCriteriaResourceHealthArrayOutputWithContext(context.Context) ActivityLogAlertCriteriaResourceHealthArrayOutput
}

type ActivityLogAlertCriteriaResourceHealthArray []ActivityLogAlertCriteriaResourceHealthInput

func (ActivityLogAlertCriteriaResourceHealthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityLogAlertCriteriaResourceHealth)(nil)).Elem()
}

func (i ActivityLogAlertCriteriaResourceHealthArray) ToActivityLogAlertCriteriaResourceHealthArrayOutput() ActivityLogAlertCriteriaResourceHealthArrayOutput {
	return i.ToActivityLogAlertCriteriaResourceHealthArrayOutputWithContext(context.Background())
}

func (i ActivityLogAlertCriteriaResourceHealthArray) ToActivityLogAlertCriteriaResourceHealthArrayOutputWithContext(ctx context.Context) ActivityLogAlertCriteriaResourceHealthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertCriteriaResourceHealthArrayOutput)
}

func (i ActivityLogAlertCriteriaResourceHealthArray) ToOutput(ctx context.Context) pulumix.Output[[]ActivityLogAlertCriteriaResourceHealth] {
	return pulumix.Output[[]ActivityLogAlertCriteriaResourceHealth]{
		OutputState: i.ToActivityLogAlertCriteriaResourceHealthArrayOutputWithContext(ctx).OutputState,
	}
}

type ActivityLogAlertCriteriaResourceHealthOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertCriteriaResourceHealthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertCriteriaResourceHealth)(nil)).Elem()
}

func (o ActivityLogAlertCriteriaResourceHealthOutput) ToActivityLogAlertCriteriaResourceHealthOutput() ActivityLogAlertCriteriaResourceHealthOutput {
	return o
}

func (o ActivityLogAlertCriteriaResourceHealthOutput) ToActivityLogAlertCriteriaResourceHealthOutputWithContext(ctx context.Context) ActivityLogAlertCriteriaResourceHealthOutput {
	return o
}

func (o ActivityLogAlertCriteriaResourceHealthOutput) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertCriteriaResourceHealth] {
	return pulumix.Output[ActivityLogAlertCriteriaResourceHealth]{
		OutputState: o.OutputState,
	}
}

// The current resource health statuses that will log an alert. Possible values are `Available`, `Degraded`, `Unavailable` and `Unknown`.
func (o ActivityLogAlertCriteriaResourceHealthOutput) Currents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteriaResourceHealth) []string { return v.Currents }).(pulumi.StringArrayOutput)
}

// The previous resource health statuses that will log an alert. Possible values are `Available`, `Degraded`, `Unavailable` and `Unknown`.
func (o ActivityLogAlertCriteriaResourceHealthOutput) Previouses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteriaResourceHealth) []string { return v.Previouses }).(pulumi.StringArrayOutput)
}

// The reason that will log an alert. Possible values are `PlatformInitiated` (such as a problem with the resource in an affected region of an Azure incident), `UserInitiated` (such as a shutdown request of a VM) and `Unknown`.
func (o ActivityLogAlertCriteriaResourceHealthOutput) Reasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteriaResourceHealth) []string { return v.Reasons }).(pulumi.StringArrayOutput)
}

type ActivityLogAlertCriteriaResourceHealthArrayOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertCriteriaResourceHealthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityLogAlertCriteriaResourceHealth)(nil)).Elem()
}

func (o ActivityLogAlertCriteriaResourceHealthArrayOutput) ToActivityLogAlertCriteriaResourceHealthArrayOutput() ActivityLogAlertCriteriaResourceHealthArrayOutput {
	return o
}

func (o ActivityLogAlertCriteriaResourceHealthArrayOutput) ToActivityLogAlertCriteriaResourceHealthArrayOutputWithContext(ctx context.Context) ActivityLogAlertCriteriaResourceHealthArrayOutput {
	return o
}

func (o ActivityLogAlertCriteriaResourceHealthArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActivityLogAlertCriteriaResourceHealth] {
	return pulumix.Output[[]ActivityLogAlertCriteriaResourceHealth]{
		OutputState: o.OutputState,
	}
}

func (o ActivityLogAlertCriteriaResourceHealthArrayOutput) Index(i pulumi.IntInput) ActivityLogAlertCriteriaResourceHealthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityLogAlertCriteriaResourceHealth {
		return vs[0].([]ActivityLogAlertCriteriaResourceHealth)[vs[1].(int)]
	}).(ActivityLogAlertCriteriaResourceHealthOutput)
}

type ActivityLogAlertCriteriaServiceHealth struct {
	// Events this alert will monitor Possible values are `Incident`, `Maintenance`, `Informational`, `ActionRequired` and `Security`.
	Events []string `pulumi:"events"`
	// Locations this alert will monitor. For example, `West Europe`.
	Locations []string `pulumi:"locations"`
	// Services this alert will monitor. For example, `Activity Logs & Alerts`, `Action Groups`. Defaults to all Services.
	Services []string `pulumi:"services"`
}

// ActivityLogAlertCriteriaServiceHealthInput is an input type that accepts ActivityLogAlertCriteriaServiceHealthArgs and ActivityLogAlertCriteriaServiceHealthOutput values.
// You can construct a concrete instance of `ActivityLogAlertCriteriaServiceHealthInput` via:
//
//	ActivityLogAlertCriteriaServiceHealthArgs{...}
type ActivityLogAlertCriteriaServiceHealthInput interface {
	pulumi.Input

	ToActivityLogAlertCriteriaServiceHealthOutput() ActivityLogAlertCriteriaServiceHealthOutput
	ToActivityLogAlertCriteriaServiceHealthOutputWithContext(context.Context) ActivityLogAlertCriteriaServiceHealthOutput
}

type ActivityLogAlertCriteriaServiceHealthArgs struct {
	// Events this alert will monitor Possible values are `Incident`, `Maintenance`, `Informational`, `ActionRequired` and `Security`.
	Events pulumi.StringArrayInput `pulumi:"events"`
	// Locations this alert will monitor. For example, `West Europe`.
	Locations pulumi.StringArrayInput `pulumi:"locations"`
	// Services this alert will monitor. For example, `Activity Logs & Alerts`, `Action Groups`. Defaults to all Services.
	Services pulumi.StringArrayInput `pulumi:"services"`
}

func (ActivityLogAlertCriteriaServiceHealthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertCriteriaServiceHealth)(nil)).Elem()
}

func (i ActivityLogAlertCriteriaServiceHealthArgs) ToActivityLogAlertCriteriaServiceHealthOutput() ActivityLogAlertCriteriaServiceHealthOutput {
	return i.ToActivityLogAlertCriteriaServiceHealthOutputWithContext(context.Background())
}

func (i ActivityLogAlertCriteriaServiceHealthArgs) ToActivityLogAlertCriteriaServiceHealthOutputWithContext(ctx context.Context) ActivityLogAlertCriteriaServiceHealthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertCriteriaServiceHealthOutput)
}

func (i ActivityLogAlertCriteriaServiceHealthArgs) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertCriteriaServiceHealth] {
	return pulumix.Output[ActivityLogAlertCriteriaServiceHealth]{
		OutputState: i.ToActivityLogAlertCriteriaServiceHealthOutputWithContext(ctx).OutputState,
	}
}

// ActivityLogAlertCriteriaServiceHealthArrayInput is an input type that accepts ActivityLogAlertCriteriaServiceHealthArray and ActivityLogAlertCriteriaServiceHealthArrayOutput values.
// You can construct a concrete instance of `ActivityLogAlertCriteriaServiceHealthArrayInput` via:
//
//	ActivityLogAlertCriteriaServiceHealthArray{ ActivityLogAlertCriteriaServiceHealthArgs{...} }
type ActivityLogAlertCriteriaServiceHealthArrayInput interface {
	pulumi.Input

	ToActivityLogAlertCriteriaServiceHealthArrayOutput() ActivityLogAlertCriteriaServiceHealthArrayOutput
	ToActivityLogAlertCriteriaServiceHealthArrayOutputWithContext(context.Context) ActivityLogAlertCriteriaServiceHealthArrayOutput
}

type ActivityLogAlertCriteriaServiceHealthArray []ActivityLogAlertCriteriaServiceHealthInput

func (ActivityLogAlertCriteriaServiceHealthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityLogAlertCriteriaServiceHealth)(nil)).Elem()
}

func (i ActivityLogAlertCriteriaServiceHealthArray) ToActivityLogAlertCriteriaServiceHealthArrayOutput() ActivityLogAlertCriteriaServiceHealthArrayOutput {
	return i.ToActivityLogAlertCriteriaServiceHealthArrayOutputWithContext(context.Background())
}

func (i ActivityLogAlertCriteriaServiceHealthArray) ToActivityLogAlertCriteriaServiceHealthArrayOutputWithContext(ctx context.Context) ActivityLogAlertCriteriaServiceHealthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertCriteriaServiceHealthArrayOutput)
}

func (i ActivityLogAlertCriteriaServiceHealthArray) ToOutput(ctx context.Context) pulumix.Output[[]ActivityLogAlertCriteriaServiceHealth] {
	return pulumix.Output[[]ActivityLogAlertCriteriaServiceHealth]{
		OutputState: i.ToActivityLogAlertCriteriaServiceHealthArrayOutputWithContext(ctx).OutputState,
	}
}

type ActivityLogAlertCriteriaServiceHealthOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertCriteriaServiceHealthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertCriteriaServiceHealth)(nil)).Elem()
}

func (o ActivityLogAlertCriteriaServiceHealthOutput) ToActivityLogAlertCriteriaServiceHealthOutput() ActivityLogAlertCriteriaServiceHealthOutput {
	return o
}

func (o ActivityLogAlertCriteriaServiceHealthOutput) ToActivityLogAlertCriteriaServiceHealthOutputWithContext(ctx context.Context) ActivityLogAlertCriteriaServiceHealthOutput {
	return o
}

func (o ActivityLogAlertCriteriaServiceHealthOutput) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertCriteriaServiceHealth] {
	return pulumix.Output[ActivityLogAlertCriteriaServiceHealth]{
		OutputState: o.OutputState,
	}
}

// Events this alert will monitor Possible values are `Incident`, `Maintenance`, `Informational`, `ActionRequired` and `Security`.
func (o ActivityLogAlertCriteriaServiceHealthOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteriaServiceHealth) []string { return v.Events }).(pulumi.StringArrayOutput)
}

// Locations this alert will monitor. For example, `West Europe`.
func (o ActivityLogAlertCriteriaServiceHealthOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteriaServiceHealth) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// Services this alert will monitor. For example, `Activity Logs & Alerts`, `Action Groups`. Defaults to all Services.
func (o ActivityLogAlertCriteriaServiceHealthOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertCriteriaServiceHealth) []string { return v.Services }).(pulumi.StringArrayOutput)
}

type ActivityLogAlertCriteriaServiceHealthArrayOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertCriteriaServiceHealthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityLogAlertCriteriaServiceHealth)(nil)).Elem()
}

func (o ActivityLogAlertCriteriaServiceHealthArrayOutput) ToActivityLogAlertCriteriaServiceHealthArrayOutput() ActivityLogAlertCriteriaServiceHealthArrayOutput {
	return o
}

func (o ActivityLogAlertCriteriaServiceHealthArrayOutput) ToActivityLogAlertCriteriaServiceHealthArrayOutputWithContext(ctx context.Context) ActivityLogAlertCriteriaServiceHealthArrayOutput {
	return o
}

func (o ActivityLogAlertCriteriaServiceHealthArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActivityLogAlertCriteriaServiceHealth] {
	return pulumix.Output[[]ActivityLogAlertCriteriaServiceHealth]{
		OutputState: o.OutputState,
	}
}

func (o ActivityLogAlertCriteriaServiceHealthArrayOutput) Index(i pulumi.IntInput) ActivityLogAlertCriteriaServiceHealthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityLogAlertCriteriaServiceHealth {
		return vs[0].([]ActivityLogAlertCriteriaServiceHealth)[vs[1].(int)]
	}).(ActivityLogAlertCriteriaServiceHealthOutput)
}

type AlertProcessingRuleActionGroupCondition struct {
	// A `alertContext` block as defined above.
	AlertContext *AlertProcessingRuleActionGroupConditionAlertContext `pulumi:"alertContext"`
	// A `alertRuleId` block as defined above.
	AlertRuleId *AlertProcessingRuleActionGroupConditionAlertRuleId `pulumi:"alertRuleId"`
	// A `alertRuleName` block as defined above.
	AlertRuleName *AlertProcessingRuleActionGroupConditionAlertRuleName `pulumi:"alertRuleName"`
	// A `description` block as defined below.
	Description *AlertProcessingRuleActionGroupConditionDescription `pulumi:"description"`
	// A `monitorCondition` block as defined below.
	MonitorCondition *AlertProcessingRuleActionGroupConditionMonitorCondition `pulumi:"monitorCondition"`
	// A `monitorService` block as defined below.
	MonitorService *AlertProcessingRuleActionGroupConditionMonitorService `pulumi:"monitorService"`
	// A `severity` block as defined below.
	Severity *AlertProcessingRuleActionGroupConditionSeverity `pulumi:"severity"`
	// A `signalType` block as defined below.
	SignalType *AlertProcessingRuleActionGroupConditionSignalType `pulumi:"signalType"`
	// A `targetResource` block as defined below.
	TargetResource *AlertProcessingRuleActionGroupConditionTargetResource `pulumi:"targetResource"`
	// A `targetResourceGroup` block as defined below.
	TargetResourceGroup *AlertProcessingRuleActionGroupConditionTargetResourceGroup `pulumi:"targetResourceGroup"`
	// A `targetResourceType` block as defined below.
	//
	// > **Note:** At least one of the `alertContext`, `alertRuleId`, `alertRuleName`, `description`, `monitorCondition`, `monitorService`, `severity`, `signalType`, `targetResource`, `targetResourceGroup`, `targetResourceType` must be specified.
	TargetResourceType *AlertProcessingRuleActionGroupConditionTargetResourceType `pulumi:"targetResourceType"`
}

// AlertProcessingRuleActionGroupConditionInput is an input type that accepts AlertProcessingRuleActionGroupConditionArgs and AlertProcessingRuleActionGroupConditionOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionInput` via:
//
//	AlertProcessingRuleActionGroupConditionArgs{...}
type AlertProcessingRuleActionGroupConditionInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionOutput() AlertProcessingRuleActionGroupConditionOutput
	ToAlertProcessingRuleActionGroupConditionOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionOutput
}

type AlertProcessingRuleActionGroupConditionArgs struct {
	// A `alertContext` block as defined above.
	AlertContext AlertProcessingRuleActionGroupConditionAlertContextPtrInput `pulumi:"alertContext"`
	// A `alertRuleId` block as defined above.
	AlertRuleId AlertProcessingRuleActionGroupConditionAlertRuleIdPtrInput `pulumi:"alertRuleId"`
	// A `alertRuleName` block as defined above.
	AlertRuleName AlertProcessingRuleActionGroupConditionAlertRuleNamePtrInput `pulumi:"alertRuleName"`
	// A `description` block as defined below.
	Description AlertProcessingRuleActionGroupConditionDescriptionPtrInput `pulumi:"description"`
	// A `monitorCondition` block as defined below.
	MonitorCondition AlertProcessingRuleActionGroupConditionMonitorConditionPtrInput `pulumi:"monitorCondition"`
	// A `monitorService` block as defined below.
	MonitorService AlertProcessingRuleActionGroupConditionMonitorServicePtrInput `pulumi:"monitorService"`
	// A `severity` block as defined below.
	Severity AlertProcessingRuleActionGroupConditionSeverityPtrInput `pulumi:"severity"`
	// A `signalType` block as defined below.
	SignalType AlertProcessingRuleActionGroupConditionSignalTypePtrInput `pulumi:"signalType"`
	// A `targetResource` block as defined below.
	TargetResource AlertProcessingRuleActionGroupConditionTargetResourcePtrInput `pulumi:"targetResource"`
	// A `targetResourceGroup` block as defined below.
	TargetResourceGroup AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrInput `pulumi:"targetResourceGroup"`
	// A `targetResourceType` block as defined below.
	//
	// > **Note:** At least one of the `alertContext`, `alertRuleId`, `alertRuleName`, `description`, `monitorCondition`, `monitorService`, `severity`, `signalType`, `targetResource`, `targetResourceGroup`, `targetResourceType` must be specified.
	TargetResourceType AlertProcessingRuleActionGroupConditionTargetResourceTypePtrInput `pulumi:"targetResourceType"`
}

func (AlertProcessingRuleActionGroupConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupCondition)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupConditionArgs) ToAlertProcessingRuleActionGroupConditionOutput() AlertProcessingRuleActionGroupConditionOutput {
	return i.ToAlertProcessingRuleActionGroupConditionOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionArgs) ToAlertProcessingRuleActionGroupConditionOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionOutput)
}

func (i AlertProcessingRuleActionGroupConditionArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupCondition] {
	return pulumix.Output[AlertProcessingRuleActionGroupCondition]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleActionGroupConditionArgs) ToAlertProcessingRuleActionGroupConditionPtrOutput() AlertProcessingRuleActionGroupConditionPtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionArgs) ToAlertProcessingRuleActionGroupConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionOutput).ToAlertProcessingRuleActionGroupConditionPtrOutputWithContext(ctx)
}

// AlertProcessingRuleActionGroupConditionPtrInput is an input type that accepts AlertProcessingRuleActionGroupConditionArgs, AlertProcessingRuleActionGroupConditionPtr and AlertProcessingRuleActionGroupConditionPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionPtrInput` via:
//
//	        AlertProcessingRuleActionGroupConditionArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleActionGroupConditionPtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionPtrOutput() AlertProcessingRuleActionGroupConditionPtrOutput
	ToAlertProcessingRuleActionGroupConditionPtrOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionPtrOutput
}

type alertProcessingRuleActionGroupConditionPtrType AlertProcessingRuleActionGroupConditionArgs

func AlertProcessingRuleActionGroupConditionPtr(v *AlertProcessingRuleActionGroupConditionArgs) AlertProcessingRuleActionGroupConditionPtrInput {
	return (*alertProcessingRuleActionGroupConditionPtrType)(v)
}

func (*alertProcessingRuleActionGroupConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupCondition)(nil)).Elem()
}

func (i *alertProcessingRuleActionGroupConditionPtrType) ToAlertProcessingRuleActionGroupConditionPtrOutput() AlertProcessingRuleActionGroupConditionPtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleActionGroupConditionPtrType) ToAlertProcessingRuleActionGroupConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionPtrOutput)
}

func (i *alertProcessingRuleActionGroupConditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupCondition] {
	return pulumix.Output[*AlertProcessingRuleActionGroupCondition]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupConditionOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupCondition)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionOutput) ToAlertProcessingRuleActionGroupConditionOutput() AlertProcessingRuleActionGroupConditionOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionOutput) ToAlertProcessingRuleActionGroupConditionOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionOutput) ToAlertProcessingRuleActionGroupConditionPtrOutput() AlertProcessingRuleActionGroupConditionPtrOutput {
	return o.ToAlertProcessingRuleActionGroupConditionPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleActionGroupConditionOutput) ToAlertProcessingRuleActionGroupConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupCondition {
		return &v
	}).(AlertProcessingRuleActionGroupConditionPtrOutput)
}

func (o AlertProcessingRuleActionGroupConditionOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupCondition] {
	return pulumix.Output[AlertProcessingRuleActionGroupCondition]{
		OutputState: o.OutputState,
	}
}

// A `alertContext` block as defined above.
func (o AlertProcessingRuleActionGroupConditionOutput) AlertContext() AlertProcessingRuleActionGroupConditionAlertContextPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionAlertContext {
		return v.AlertContext
	}).(AlertProcessingRuleActionGroupConditionAlertContextPtrOutput)
}

// A `alertRuleId` block as defined above.
func (o AlertProcessingRuleActionGroupConditionOutput) AlertRuleId() AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionAlertRuleId {
		return v.AlertRuleId
	}).(AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput)
}

// A `alertRuleName` block as defined above.
func (o AlertProcessingRuleActionGroupConditionOutput) AlertRuleName() AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionAlertRuleName {
		return v.AlertRuleName
	}).(AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput)
}

// A `description` block as defined below.
func (o AlertProcessingRuleActionGroupConditionOutput) Description() AlertProcessingRuleActionGroupConditionDescriptionPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionDescription {
		return v.Description
	}).(AlertProcessingRuleActionGroupConditionDescriptionPtrOutput)
}

// A `monitorCondition` block as defined below.
func (o AlertProcessingRuleActionGroupConditionOutput) MonitorCondition() AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionMonitorCondition {
		return v.MonitorCondition
	}).(AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput)
}

// A `monitorService` block as defined below.
func (o AlertProcessingRuleActionGroupConditionOutput) MonitorService() AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionMonitorService {
		return v.MonitorService
	}).(AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput)
}

// A `severity` block as defined below.
func (o AlertProcessingRuleActionGroupConditionOutput) Severity() AlertProcessingRuleActionGroupConditionSeverityPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionSeverity {
		return v.Severity
	}).(AlertProcessingRuleActionGroupConditionSeverityPtrOutput)
}

// A `signalType` block as defined below.
func (o AlertProcessingRuleActionGroupConditionOutput) SignalType() AlertProcessingRuleActionGroupConditionSignalTypePtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionSignalType {
		return v.SignalType
	}).(AlertProcessingRuleActionGroupConditionSignalTypePtrOutput)
}

// A `targetResource` block as defined below.
func (o AlertProcessingRuleActionGroupConditionOutput) TargetResource() AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionTargetResource {
		return v.TargetResource
	}).(AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput)
}

// A `targetResourceGroup` block as defined below.
func (o AlertProcessingRuleActionGroupConditionOutput) TargetResourceGroup() AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionTargetResourceGroup {
		return v.TargetResourceGroup
	}).(AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput)
}

// A `targetResourceType` block as defined below.
//
// > **Note:** At least one of the `alertContext`, `alertRuleId`, `alertRuleName`, `description`, `monitorCondition`, `monitorService`, `severity`, `signalType`, `targetResource`, `targetResourceGroup`, `targetResourceType` must be specified.
func (o AlertProcessingRuleActionGroupConditionOutput) TargetResourceType() AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionTargetResourceType {
		return v.TargetResourceType
	}).(AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput)
}

type AlertProcessingRuleActionGroupConditionPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupCondition)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionPtrOutput) ToAlertProcessingRuleActionGroupConditionPtrOutput() AlertProcessingRuleActionGroupConditionPtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionPtrOutput) ToAlertProcessingRuleActionGroupConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionPtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupCondition] {
	return pulumix.Output[*AlertProcessingRuleActionGroupCondition]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupConditionPtrOutput) Elem() AlertProcessingRuleActionGroupConditionOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupCondition) AlertProcessingRuleActionGroupCondition {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleActionGroupCondition
		return ret
	}).(AlertProcessingRuleActionGroupConditionOutput)
}

// A `alertContext` block as defined above.
func (o AlertProcessingRuleActionGroupConditionPtrOutput) AlertContext() AlertProcessingRuleActionGroupConditionAlertContextPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionAlertContext {
		if v == nil {
			return nil
		}
		return v.AlertContext
	}).(AlertProcessingRuleActionGroupConditionAlertContextPtrOutput)
}

// A `alertRuleId` block as defined above.
func (o AlertProcessingRuleActionGroupConditionPtrOutput) AlertRuleId() AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionAlertRuleId {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput)
}

// A `alertRuleName` block as defined above.
func (o AlertProcessingRuleActionGroupConditionPtrOutput) AlertRuleName() AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionAlertRuleName {
		if v == nil {
			return nil
		}
		return v.AlertRuleName
	}).(AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput)
}

// A `description` block as defined below.
func (o AlertProcessingRuleActionGroupConditionPtrOutput) Description() AlertProcessingRuleActionGroupConditionDescriptionPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionDescription {
		if v == nil {
			return nil
		}
		return v.Description
	}).(AlertProcessingRuleActionGroupConditionDescriptionPtrOutput)
}

// A `monitorCondition` block as defined below.
func (o AlertProcessingRuleActionGroupConditionPtrOutput) MonitorCondition() AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionMonitorCondition {
		if v == nil {
			return nil
		}
		return v.MonitorCondition
	}).(AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput)
}

// A `monitorService` block as defined below.
func (o AlertProcessingRuleActionGroupConditionPtrOutput) MonitorService() AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionMonitorService {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput)
}

// A `severity` block as defined below.
func (o AlertProcessingRuleActionGroupConditionPtrOutput) Severity() AlertProcessingRuleActionGroupConditionSeverityPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionSeverity {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(AlertProcessingRuleActionGroupConditionSeverityPtrOutput)
}

// A `signalType` block as defined below.
func (o AlertProcessingRuleActionGroupConditionPtrOutput) SignalType() AlertProcessingRuleActionGroupConditionSignalTypePtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionSignalType {
		if v == nil {
			return nil
		}
		return v.SignalType
	}).(AlertProcessingRuleActionGroupConditionSignalTypePtrOutput)
}

// A `targetResource` block as defined below.
func (o AlertProcessingRuleActionGroupConditionPtrOutput) TargetResource() AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionTargetResource {
		if v == nil {
			return nil
		}
		return v.TargetResource
	}).(AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput)
}

// A `targetResourceGroup` block as defined below.
func (o AlertProcessingRuleActionGroupConditionPtrOutput) TargetResourceGroup() AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionTargetResourceGroup {
		if v == nil {
			return nil
		}
		return v.TargetResourceGroup
	}).(AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput)
}

// A `targetResourceType` block as defined below.
//
// > **Note:** At least one of the `alertContext`, `alertRuleId`, `alertRuleName`, `description`, `monitorCondition`, `monitorService`, `severity`, `signalType`, `targetResource`, `targetResourceGroup`, `targetResourceType` must be specified.
func (o AlertProcessingRuleActionGroupConditionPtrOutput) TargetResourceType() AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupCondition) *AlertProcessingRuleActionGroupConditionTargetResourceType {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput)
}

type AlertProcessingRuleActionGroupConditionAlertContext struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleActionGroupConditionAlertContextInput is an input type that accepts AlertProcessingRuleActionGroupConditionAlertContextArgs and AlertProcessingRuleActionGroupConditionAlertContextOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionAlertContextInput` via:
//
//	AlertProcessingRuleActionGroupConditionAlertContextArgs{...}
type AlertProcessingRuleActionGroupConditionAlertContextInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionAlertContextOutput() AlertProcessingRuleActionGroupConditionAlertContextOutput
	ToAlertProcessingRuleActionGroupConditionAlertContextOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionAlertContextOutput
}

type AlertProcessingRuleActionGroupConditionAlertContextArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleActionGroupConditionAlertContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionAlertContext)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupConditionAlertContextArgs) ToAlertProcessingRuleActionGroupConditionAlertContextOutput() AlertProcessingRuleActionGroupConditionAlertContextOutput {
	return i.ToAlertProcessingRuleActionGroupConditionAlertContextOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionAlertContextArgs) ToAlertProcessingRuleActionGroupConditionAlertContextOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionAlertContextOutput)
}

func (i AlertProcessingRuleActionGroupConditionAlertContextArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionAlertContext] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionAlertContext]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionAlertContextOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleActionGroupConditionAlertContextArgs) ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutput() AlertProcessingRuleActionGroupConditionAlertContextPtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionAlertContextArgs) ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionAlertContextOutput).ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutputWithContext(ctx)
}

// AlertProcessingRuleActionGroupConditionAlertContextPtrInput is an input type that accepts AlertProcessingRuleActionGroupConditionAlertContextArgs, AlertProcessingRuleActionGroupConditionAlertContextPtr and AlertProcessingRuleActionGroupConditionAlertContextPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionAlertContextPtrInput` via:
//
//	        AlertProcessingRuleActionGroupConditionAlertContextArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleActionGroupConditionAlertContextPtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutput() AlertProcessingRuleActionGroupConditionAlertContextPtrOutput
	ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionAlertContextPtrOutput
}

type alertProcessingRuleActionGroupConditionAlertContextPtrType AlertProcessingRuleActionGroupConditionAlertContextArgs

func AlertProcessingRuleActionGroupConditionAlertContextPtr(v *AlertProcessingRuleActionGroupConditionAlertContextArgs) AlertProcessingRuleActionGroupConditionAlertContextPtrInput {
	return (*alertProcessingRuleActionGroupConditionAlertContextPtrType)(v)
}

func (*alertProcessingRuleActionGroupConditionAlertContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionAlertContext)(nil)).Elem()
}

func (i *alertProcessingRuleActionGroupConditionAlertContextPtrType) ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutput() AlertProcessingRuleActionGroupConditionAlertContextPtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleActionGroupConditionAlertContextPtrType) ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionAlertContextPtrOutput)
}

func (i *alertProcessingRuleActionGroupConditionAlertContextPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionAlertContext] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionAlertContext]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupConditionAlertContextOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionAlertContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionAlertContext)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionAlertContextOutput) ToAlertProcessingRuleActionGroupConditionAlertContextOutput() AlertProcessingRuleActionGroupConditionAlertContextOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionAlertContextOutput) ToAlertProcessingRuleActionGroupConditionAlertContextOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertContextOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionAlertContextOutput) ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutput() AlertProcessingRuleActionGroupConditionAlertContextPtrOutput {
	return o.ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleActionGroupConditionAlertContextOutput) ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleActionGroupConditionAlertContext) *AlertProcessingRuleActionGroupConditionAlertContext {
		return &v
	}).(AlertProcessingRuleActionGroupConditionAlertContextPtrOutput)
}

func (o AlertProcessingRuleActionGroupConditionAlertContextOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionAlertContext] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionAlertContext]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleActionGroupConditionAlertContextOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionAlertContext) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleActionGroupConditionAlertContextOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionAlertContext) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionAlertContextPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionAlertContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionAlertContext)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionAlertContextPtrOutput) ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutput() AlertProcessingRuleActionGroupConditionAlertContextPtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionAlertContextPtrOutput) ToAlertProcessingRuleActionGroupConditionAlertContextPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertContextPtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionAlertContextPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionAlertContext] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionAlertContext]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupConditionAlertContextPtrOutput) Elem() AlertProcessingRuleActionGroupConditionAlertContextOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionAlertContext) AlertProcessingRuleActionGroupConditionAlertContext {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleActionGroupConditionAlertContext
		return ret
	}).(AlertProcessingRuleActionGroupConditionAlertContextOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleActionGroupConditionAlertContextPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionAlertContext) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleActionGroupConditionAlertContextPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionAlertContext) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionAlertRuleId struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleActionGroupConditionAlertRuleIdInput is an input type that accepts AlertProcessingRuleActionGroupConditionAlertRuleIdArgs and AlertProcessingRuleActionGroupConditionAlertRuleIdOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionAlertRuleIdInput` via:
//
//	AlertProcessingRuleActionGroupConditionAlertRuleIdArgs{...}
type AlertProcessingRuleActionGroupConditionAlertRuleIdInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionAlertRuleIdOutput() AlertProcessingRuleActionGroupConditionAlertRuleIdOutput
	ToAlertProcessingRuleActionGroupConditionAlertRuleIdOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionAlertRuleIdOutput
}

type AlertProcessingRuleActionGroupConditionAlertRuleIdArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleActionGroupConditionAlertRuleIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionAlertRuleId)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupConditionAlertRuleIdArgs) ToAlertProcessingRuleActionGroupConditionAlertRuleIdOutput() AlertProcessingRuleActionGroupConditionAlertRuleIdOutput {
	return i.ToAlertProcessingRuleActionGroupConditionAlertRuleIdOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionAlertRuleIdArgs) ToAlertProcessingRuleActionGroupConditionAlertRuleIdOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertRuleIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionAlertRuleIdOutput)
}

func (i AlertProcessingRuleActionGroupConditionAlertRuleIdArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionAlertRuleId] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionAlertRuleId]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionAlertRuleIdOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleActionGroupConditionAlertRuleIdArgs) ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput() AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionAlertRuleIdArgs) ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionAlertRuleIdOutput).ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(ctx)
}

// AlertProcessingRuleActionGroupConditionAlertRuleIdPtrInput is an input type that accepts AlertProcessingRuleActionGroupConditionAlertRuleIdArgs, AlertProcessingRuleActionGroupConditionAlertRuleIdPtr and AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionAlertRuleIdPtrInput` via:
//
//	        AlertProcessingRuleActionGroupConditionAlertRuleIdArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleActionGroupConditionAlertRuleIdPtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput() AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput
	ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput
}

type alertProcessingRuleActionGroupConditionAlertRuleIdPtrType AlertProcessingRuleActionGroupConditionAlertRuleIdArgs

func AlertProcessingRuleActionGroupConditionAlertRuleIdPtr(v *AlertProcessingRuleActionGroupConditionAlertRuleIdArgs) AlertProcessingRuleActionGroupConditionAlertRuleIdPtrInput {
	return (*alertProcessingRuleActionGroupConditionAlertRuleIdPtrType)(v)
}

func (*alertProcessingRuleActionGroupConditionAlertRuleIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionAlertRuleId)(nil)).Elem()
}

func (i *alertProcessingRuleActionGroupConditionAlertRuleIdPtrType) ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput() AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleActionGroupConditionAlertRuleIdPtrType) ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput)
}

func (i *alertProcessingRuleActionGroupConditionAlertRuleIdPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionAlertRuleId] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionAlertRuleId]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupConditionAlertRuleIdOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionAlertRuleIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionAlertRuleId)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleIdOutput) ToAlertProcessingRuleActionGroupConditionAlertRuleIdOutput() AlertProcessingRuleActionGroupConditionAlertRuleIdOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleIdOutput) ToAlertProcessingRuleActionGroupConditionAlertRuleIdOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertRuleIdOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleIdOutput) ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput() AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput {
	return o.ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleIdOutput) ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleActionGroupConditionAlertRuleId) *AlertProcessingRuleActionGroupConditionAlertRuleId {
		return &v
	}).(AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput)
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleIdOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionAlertRuleId] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionAlertRuleId]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleActionGroupConditionAlertRuleIdOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionAlertRuleId) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleActionGroupConditionAlertRuleIdOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionAlertRuleId) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionAlertRuleId)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput) ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput() AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput) ToAlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionAlertRuleId] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionAlertRuleId]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput) Elem() AlertProcessingRuleActionGroupConditionAlertRuleIdOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionAlertRuleId) AlertProcessingRuleActionGroupConditionAlertRuleId {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleActionGroupConditionAlertRuleId
		return ret
	}).(AlertProcessingRuleActionGroupConditionAlertRuleIdOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionAlertRuleId) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionAlertRuleId) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionAlertRuleName struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleActionGroupConditionAlertRuleNameInput is an input type that accepts AlertProcessingRuleActionGroupConditionAlertRuleNameArgs and AlertProcessingRuleActionGroupConditionAlertRuleNameOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionAlertRuleNameInput` via:
//
//	AlertProcessingRuleActionGroupConditionAlertRuleNameArgs{...}
type AlertProcessingRuleActionGroupConditionAlertRuleNameInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionAlertRuleNameOutput() AlertProcessingRuleActionGroupConditionAlertRuleNameOutput
	ToAlertProcessingRuleActionGroupConditionAlertRuleNameOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionAlertRuleNameOutput
}

type AlertProcessingRuleActionGroupConditionAlertRuleNameArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleActionGroupConditionAlertRuleNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionAlertRuleName)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupConditionAlertRuleNameArgs) ToAlertProcessingRuleActionGroupConditionAlertRuleNameOutput() AlertProcessingRuleActionGroupConditionAlertRuleNameOutput {
	return i.ToAlertProcessingRuleActionGroupConditionAlertRuleNameOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionAlertRuleNameArgs) ToAlertProcessingRuleActionGroupConditionAlertRuleNameOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertRuleNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionAlertRuleNameOutput)
}

func (i AlertProcessingRuleActionGroupConditionAlertRuleNameArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionAlertRuleName] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionAlertRuleName]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionAlertRuleNameOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleActionGroupConditionAlertRuleNameArgs) ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput() AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionAlertRuleNameArgs) ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionAlertRuleNameOutput).ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutputWithContext(ctx)
}

// AlertProcessingRuleActionGroupConditionAlertRuleNamePtrInput is an input type that accepts AlertProcessingRuleActionGroupConditionAlertRuleNameArgs, AlertProcessingRuleActionGroupConditionAlertRuleNamePtr and AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionAlertRuleNamePtrInput` via:
//
//	        AlertProcessingRuleActionGroupConditionAlertRuleNameArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleActionGroupConditionAlertRuleNamePtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput() AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput
	ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput
}

type alertProcessingRuleActionGroupConditionAlertRuleNamePtrType AlertProcessingRuleActionGroupConditionAlertRuleNameArgs

func AlertProcessingRuleActionGroupConditionAlertRuleNamePtr(v *AlertProcessingRuleActionGroupConditionAlertRuleNameArgs) AlertProcessingRuleActionGroupConditionAlertRuleNamePtrInput {
	return (*alertProcessingRuleActionGroupConditionAlertRuleNamePtrType)(v)
}

func (*alertProcessingRuleActionGroupConditionAlertRuleNamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionAlertRuleName)(nil)).Elem()
}

func (i *alertProcessingRuleActionGroupConditionAlertRuleNamePtrType) ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput() AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleActionGroupConditionAlertRuleNamePtrType) ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput)
}

func (i *alertProcessingRuleActionGroupConditionAlertRuleNamePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionAlertRuleName] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionAlertRuleName]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupConditionAlertRuleNameOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionAlertRuleNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionAlertRuleName)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleNameOutput) ToAlertProcessingRuleActionGroupConditionAlertRuleNameOutput() AlertProcessingRuleActionGroupConditionAlertRuleNameOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleNameOutput) ToAlertProcessingRuleActionGroupConditionAlertRuleNameOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertRuleNameOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleNameOutput) ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput() AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput {
	return o.ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleNameOutput) ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleActionGroupConditionAlertRuleName) *AlertProcessingRuleActionGroupConditionAlertRuleName {
		return &v
	}).(AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput)
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleNameOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionAlertRuleName] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionAlertRuleName]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleActionGroupConditionAlertRuleNameOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionAlertRuleName) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleActionGroupConditionAlertRuleNameOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionAlertRuleName) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionAlertRuleName)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput) ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput() AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput) ToAlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionAlertRuleName] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionAlertRuleName]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput) Elem() AlertProcessingRuleActionGroupConditionAlertRuleNameOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionAlertRuleName) AlertProcessingRuleActionGroupConditionAlertRuleName {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleActionGroupConditionAlertRuleName
		return ret
	}).(AlertProcessingRuleActionGroupConditionAlertRuleNameOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionAlertRuleName) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionAlertRuleName) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionDescription struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleActionGroupConditionDescriptionInput is an input type that accepts AlertProcessingRuleActionGroupConditionDescriptionArgs and AlertProcessingRuleActionGroupConditionDescriptionOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionDescriptionInput` via:
//
//	AlertProcessingRuleActionGroupConditionDescriptionArgs{...}
type AlertProcessingRuleActionGroupConditionDescriptionInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionDescriptionOutput() AlertProcessingRuleActionGroupConditionDescriptionOutput
	ToAlertProcessingRuleActionGroupConditionDescriptionOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionDescriptionOutput
}

type AlertProcessingRuleActionGroupConditionDescriptionArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleActionGroupConditionDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionDescription)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupConditionDescriptionArgs) ToAlertProcessingRuleActionGroupConditionDescriptionOutput() AlertProcessingRuleActionGroupConditionDescriptionOutput {
	return i.ToAlertProcessingRuleActionGroupConditionDescriptionOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionDescriptionArgs) ToAlertProcessingRuleActionGroupConditionDescriptionOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionDescriptionOutput)
}

func (i AlertProcessingRuleActionGroupConditionDescriptionArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionDescription] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionDescription]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionDescriptionOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleActionGroupConditionDescriptionArgs) ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutput() AlertProcessingRuleActionGroupConditionDescriptionPtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionDescriptionArgs) ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionDescriptionOutput).ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutputWithContext(ctx)
}

// AlertProcessingRuleActionGroupConditionDescriptionPtrInput is an input type that accepts AlertProcessingRuleActionGroupConditionDescriptionArgs, AlertProcessingRuleActionGroupConditionDescriptionPtr and AlertProcessingRuleActionGroupConditionDescriptionPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionDescriptionPtrInput` via:
//
//	        AlertProcessingRuleActionGroupConditionDescriptionArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleActionGroupConditionDescriptionPtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutput() AlertProcessingRuleActionGroupConditionDescriptionPtrOutput
	ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionDescriptionPtrOutput
}

type alertProcessingRuleActionGroupConditionDescriptionPtrType AlertProcessingRuleActionGroupConditionDescriptionArgs

func AlertProcessingRuleActionGroupConditionDescriptionPtr(v *AlertProcessingRuleActionGroupConditionDescriptionArgs) AlertProcessingRuleActionGroupConditionDescriptionPtrInput {
	return (*alertProcessingRuleActionGroupConditionDescriptionPtrType)(v)
}

func (*alertProcessingRuleActionGroupConditionDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionDescription)(nil)).Elem()
}

func (i *alertProcessingRuleActionGroupConditionDescriptionPtrType) ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutput() AlertProcessingRuleActionGroupConditionDescriptionPtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleActionGroupConditionDescriptionPtrType) ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionDescriptionPtrOutput)
}

func (i *alertProcessingRuleActionGroupConditionDescriptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionDescription] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionDescription]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupConditionDescriptionOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionDescription)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionDescriptionOutput) ToAlertProcessingRuleActionGroupConditionDescriptionOutput() AlertProcessingRuleActionGroupConditionDescriptionOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionDescriptionOutput) ToAlertProcessingRuleActionGroupConditionDescriptionOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionDescriptionOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionDescriptionOutput) ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutput() AlertProcessingRuleActionGroupConditionDescriptionPtrOutput {
	return o.ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleActionGroupConditionDescriptionOutput) ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionDescriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleActionGroupConditionDescription) *AlertProcessingRuleActionGroupConditionDescription {
		return &v
	}).(AlertProcessingRuleActionGroupConditionDescriptionPtrOutput)
}

func (o AlertProcessingRuleActionGroupConditionDescriptionOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionDescription] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionDescription]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleActionGroupConditionDescriptionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionDescription) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleActionGroupConditionDescriptionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionDescription) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionDescriptionPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionDescription)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionDescriptionPtrOutput) ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutput() AlertProcessingRuleActionGroupConditionDescriptionPtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionDescriptionPtrOutput) ToAlertProcessingRuleActionGroupConditionDescriptionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionDescriptionPtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionDescriptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionDescription] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionDescription]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupConditionDescriptionPtrOutput) Elem() AlertProcessingRuleActionGroupConditionDescriptionOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionDescription) AlertProcessingRuleActionGroupConditionDescription {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleActionGroupConditionDescription
		return ret
	}).(AlertProcessingRuleActionGroupConditionDescriptionOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleActionGroupConditionDescriptionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionDescription) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleActionGroupConditionDescriptionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionDescription) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionMonitorCondition struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator string `pulumi:"operator"`
	// Specifies a list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleActionGroupConditionMonitorConditionInput is an input type that accepts AlertProcessingRuleActionGroupConditionMonitorConditionArgs and AlertProcessingRuleActionGroupConditionMonitorConditionOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionMonitorConditionInput` via:
//
//	AlertProcessingRuleActionGroupConditionMonitorConditionArgs{...}
type AlertProcessingRuleActionGroupConditionMonitorConditionInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionMonitorConditionOutput() AlertProcessingRuleActionGroupConditionMonitorConditionOutput
	ToAlertProcessingRuleActionGroupConditionMonitorConditionOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionMonitorConditionOutput
}

type AlertProcessingRuleActionGroupConditionMonitorConditionArgs struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies a list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleActionGroupConditionMonitorConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionMonitorCondition)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupConditionMonitorConditionArgs) ToAlertProcessingRuleActionGroupConditionMonitorConditionOutput() AlertProcessingRuleActionGroupConditionMonitorConditionOutput {
	return i.ToAlertProcessingRuleActionGroupConditionMonitorConditionOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionMonitorConditionArgs) ToAlertProcessingRuleActionGroupConditionMonitorConditionOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionMonitorConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionMonitorConditionOutput)
}

func (i AlertProcessingRuleActionGroupConditionMonitorConditionArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionMonitorCondition] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionMonitorCondition]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionMonitorConditionOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleActionGroupConditionMonitorConditionArgs) ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput() AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionMonitorConditionArgs) ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionMonitorConditionOutput).ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutputWithContext(ctx)
}

// AlertProcessingRuleActionGroupConditionMonitorConditionPtrInput is an input type that accepts AlertProcessingRuleActionGroupConditionMonitorConditionArgs, AlertProcessingRuleActionGroupConditionMonitorConditionPtr and AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionMonitorConditionPtrInput` via:
//
//	        AlertProcessingRuleActionGroupConditionMonitorConditionArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleActionGroupConditionMonitorConditionPtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput() AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput
	ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput
}

type alertProcessingRuleActionGroupConditionMonitorConditionPtrType AlertProcessingRuleActionGroupConditionMonitorConditionArgs

func AlertProcessingRuleActionGroupConditionMonitorConditionPtr(v *AlertProcessingRuleActionGroupConditionMonitorConditionArgs) AlertProcessingRuleActionGroupConditionMonitorConditionPtrInput {
	return (*alertProcessingRuleActionGroupConditionMonitorConditionPtrType)(v)
}

func (*alertProcessingRuleActionGroupConditionMonitorConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionMonitorCondition)(nil)).Elem()
}

func (i *alertProcessingRuleActionGroupConditionMonitorConditionPtrType) ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput() AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleActionGroupConditionMonitorConditionPtrType) ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput)
}

func (i *alertProcessingRuleActionGroupConditionMonitorConditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionMonitorCondition] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionMonitorCondition]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupConditionMonitorConditionOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionMonitorConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionMonitorCondition)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionMonitorConditionOutput) ToAlertProcessingRuleActionGroupConditionMonitorConditionOutput() AlertProcessingRuleActionGroupConditionMonitorConditionOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionMonitorConditionOutput) ToAlertProcessingRuleActionGroupConditionMonitorConditionOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionMonitorConditionOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionMonitorConditionOutput) ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput() AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput {
	return o.ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleActionGroupConditionMonitorConditionOutput) ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleActionGroupConditionMonitorCondition) *AlertProcessingRuleActionGroupConditionMonitorCondition {
		return &v
	}).(AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput)
}

func (o AlertProcessingRuleActionGroupConditionMonitorConditionOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionMonitorCondition] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionMonitorCondition]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleActionGroupConditionMonitorConditionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionMonitorCondition) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies a list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
func (o AlertProcessingRuleActionGroupConditionMonitorConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionMonitorCondition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionMonitorCondition)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput) ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput() AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput) ToAlertProcessingRuleActionGroupConditionMonitorConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionMonitorCondition] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionMonitorCondition]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput) Elem() AlertProcessingRuleActionGroupConditionMonitorConditionOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionMonitorCondition) AlertProcessingRuleActionGroupConditionMonitorCondition {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleActionGroupConditionMonitorCondition
		return ret
	}).(AlertProcessingRuleActionGroupConditionMonitorConditionOutput)
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionMonitorCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies a list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
func (o AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionMonitorCondition) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionMonitorService struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Prometheus`, `Resource Health`, `Smart Detector`, and `VM Insights - Health`.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleActionGroupConditionMonitorServiceInput is an input type that accepts AlertProcessingRuleActionGroupConditionMonitorServiceArgs and AlertProcessingRuleActionGroupConditionMonitorServiceOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionMonitorServiceInput` via:
//
//	AlertProcessingRuleActionGroupConditionMonitorServiceArgs{...}
type AlertProcessingRuleActionGroupConditionMonitorServiceInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionMonitorServiceOutput() AlertProcessingRuleActionGroupConditionMonitorServiceOutput
	ToAlertProcessingRuleActionGroupConditionMonitorServiceOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionMonitorServiceOutput
}

type AlertProcessingRuleActionGroupConditionMonitorServiceArgs struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Prometheus`, `Resource Health`, `Smart Detector`, and `VM Insights - Health`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleActionGroupConditionMonitorServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionMonitorService)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupConditionMonitorServiceArgs) ToAlertProcessingRuleActionGroupConditionMonitorServiceOutput() AlertProcessingRuleActionGroupConditionMonitorServiceOutput {
	return i.ToAlertProcessingRuleActionGroupConditionMonitorServiceOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionMonitorServiceArgs) ToAlertProcessingRuleActionGroupConditionMonitorServiceOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionMonitorServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionMonitorServiceOutput)
}

func (i AlertProcessingRuleActionGroupConditionMonitorServiceArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionMonitorService] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionMonitorService]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionMonitorServiceOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleActionGroupConditionMonitorServiceArgs) ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutput() AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionMonitorServiceArgs) ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionMonitorServiceOutput).ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutputWithContext(ctx)
}

// AlertProcessingRuleActionGroupConditionMonitorServicePtrInput is an input type that accepts AlertProcessingRuleActionGroupConditionMonitorServiceArgs, AlertProcessingRuleActionGroupConditionMonitorServicePtr and AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionMonitorServicePtrInput` via:
//
//	        AlertProcessingRuleActionGroupConditionMonitorServiceArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleActionGroupConditionMonitorServicePtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutput() AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput
	ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput
}

type alertProcessingRuleActionGroupConditionMonitorServicePtrType AlertProcessingRuleActionGroupConditionMonitorServiceArgs

func AlertProcessingRuleActionGroupConditionMonitorServicePtr(v *AlertProcessingRuleActionGroupConditionMonitorServiceArgs) AlertProcessingRuleActionGroupConditionMonitorServicePtrInput {
	return (*alertProcessingRuleActionGroupConditionMonitorServicePtrType)(v)
}

func (*alertProcessingRuleActionGroupConditionMonitorServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionMonitorService)(nil)).Elem()
}

func (i *alertProcessingRuleActionGroupConditionMonitorServicePtrType) ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutput() AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleActionGroupConditionMonitorServicePtrType) ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput)
}

func (i *alertProcessingRuleActionGroupConditionMonitorServicePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionMonitorService] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionMonitorService]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupConditionMonitorServiceOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionMonitorServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionMonitorService)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionMonitorServiceOutput) ToAlertProcessingRuleActionGroupConditionMonitorServiceOutput() AlertProcessingRuleActionGroupConditionMonitorServiceOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionMonitorServiceOutput) ToAlertProcessingRuleActionGroupConditionMonitorServiceOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionMonitorServiceOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionMonitorServiceOutput) ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutput() AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput {
	return o.ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleActionGroupConditionMonitorServiceOutput) ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleActionGroupConditionMonitorService) *AlertProcessingRuleActionGroupConditionMonitorService {
		return &v
	}).(AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput)
}

func (o AlertProcessingRuleActionGroupConditionMonitorServiceOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionMonitorService] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionMonitorService]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleActionGroupConditionMonitorServiceOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionMonitorService) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Prometheus`, `Resource Health`, `Smart Detector`, and `VM Insights - Health`.
func (o AlertProcessingRuleActionGroupConditionMonitorServiceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionMonitorService) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionMonitorService)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput) ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutput() AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput) ToAlertProcessingRuleActionGroupConditionMonitorServicePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionMonitorService] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionMonitorService]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput) Elem() AlertProcessingRuleActionGroupConditionMonitorServiceOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionMonitorService) AlertProcessingRuleActionGroupConditionMonitorService {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleActionGroupConditionMonitorService
		return ret
	}).(AlertProcessingRuleActionGroupConditionMonitorServiceOutput)
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionMonitorService) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Prometheus`, `Resource Health`, `Smart Detector`, and `VM Insights - Health`.
func (o AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionMonitorService) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionSeverity struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator string `pulumi:"operator"`
	// Specifies list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleActionGroupConditionSeverityInput is an input type that accepts AlertProcessingRuleActionGroupConditionSeverityArgs and AlertProcessingRuleActionGroupConditionSeverityOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionSeverityInput` via:
//
//	AlertProcessingRuleActionGroupConditionSeverityArgs{...}
type AlertProcessingRuleActionGroupConditionSeverityInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionSeverityOutput() AlertProcessingRuleActionGroupConditionSeverityOutput
	ToAlertProcessingRuleActionGroupConditionSeverityOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionSeverityOutput
}

type AlertProcessingRuleActionGroupConditionSeverityArgs struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleActionGroupConditionSeverityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionSeverity)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupConditionSeverityArgs) ToAlertProcessingRuleActionGroupConditionSeverityOutput() AlertProcessingRuleActionGroupConditionSeverityOutput {
	return i.ToAlertProcessingRuleActionGroupConditionSeverityOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionSeverityArgs) ToAlertProcessingRuleActionGroupConditionSeverityOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionSeverityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionSeverityOutput)
}

func (i AlertProcessingRuleActionGroupConditionSeverityArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionSeverity] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionSeverity]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionSeverityOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleActionGroupConditionSeverityArgs) ToAlertProcessingRuleActionGroupConditionSeverityPtrOutput() AlertProcessingRuleActionGroupConditionSeverityPtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionSeverityPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionSeverityArgs) ToAlertProcessingRuleActionGroupConditionSeverityPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionSeverityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionSeverityOutput).ToAlertProcessingRuleActionGroupConditionSeverityPtrOutputWithContext(ctx)
}

// AlertProcessingRuleActionGroupConditionSeverityPtrInput is an input type that accepts AlertProcessingRuleActionGroupConditionSeverityArgs, AlertProcessingRuleActionGroupConditionSeverityPtr and AlertProcessingRuleActionGroupConditionSeverityPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionSeverityPtrInput` via:
//
//	        AlertProcessingRuleActionGroupConditionSeverityArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleActionGroupConditionSeverityPtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionSeverityPtrOutput() AlertProcessingRuleActionGroupConditionSeverityPtrOutput
	ToAlertProcessingRuleActionGroupConditionSeverityPtrOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionSeverityPtrOutput
}

type alertProcessingRuleActionGroupConditionSeverityPtrType AlertProcessingRuleActionGroupConditionSeverityArgs

func AlertProcessingRuleActionGroupConditionSeverityPtr(v *AlertProcessingRuleActionGroupConditionSeverityArgs) AlertProcessingRuleActionGroupConditionSeverityPtrInput {
	return (*alertProcessingRuleActionGroupConditionSeverityPtrType)(v)
}

func (*alertProcessingRuleActionGroupConditionSeverityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionSeverity)(nil)).Elem()
}

func (i *alertProcessingRuleActionGroupConditionSeverityPtrType) ToAlertProcessingRuleActionGroupConditionSeverityPtrOutput() AlertProcessingRuleActionGroupConditionSeverityPtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionSeverityPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleActionGroupConditionSeverityPtrType) ToAlertProcessingRuleActionGroupConditionSeverityPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionSeverityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionSeverityPtrOutput)
}

func (i *alertProcessingRuleActionGroupConditionSeverityPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionSeverity] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionSeverity]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionSeverityPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupConditionSeverityOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionSeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionSeverity)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionSeverityOutput) ToAlertProcessingRuleActionGroupConditionSeverityOutput() AlertProcessingRuleActionGroupConditionSeverityOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionSeverityOutput) ToAlertProcessingRuleActionGroupConditionSeverityOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionSeverityOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionSeverityOutput) ToAlertProcessingRuleActionGroupConditionSeverityPtrOutput() AlertProcessingRuleActionGroupConditionSeverityPtrOutput {
	return o.ToAlertProcessingRuleActionGroupConditionSeverityPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleActionGroupConditionSeverityOutput) ToAlertProcessingRuleActionGroupConditionSeverityPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionSeverityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleActionGroupConditionSeverity) *AlertProcessingRuleActionGroupConditionSeverity {
		return &v
	}).(AlertProcessingRuleActionGroupConditionSeverityPtrOutput)
}

func (o AlertProcessingRuleActionGroupConditionSeverityOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionSeverity] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionSeverity]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleActionGroupConditionSeverityOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionSeverity) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
func (o AlertProcessingRuleActionGroupConditionSeverityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionSeverity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionSeverityPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionSeverityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionSeverity)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionSeverityPtrOutput) ToAlertProcessingRuleActionGroupConditionSeverityPtrOutput() AlertProcessingRuleActionGroupConditionSeverityPtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionSeverityPtrOutput) ToAlertProcessingRuleActionGroupConditionSeverityPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionSeverityPtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionSeverityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionSeverity] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionSeverity]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupConditionSeverityPtrOutput) Elem() AlertProcessingRuleActionGroupConditionSeverityOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionSeverity) AlertProcessingRuleActionGroupConditionSeverity {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleActionGroupConditionSeverity
		return ret
	}).(AlertProcessingRuleActionGroupConditionSeverityOutput)
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleActionGroupConditionSeverityPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionSeverity) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
func (o AlertProcessingRuleActionGroupConditionSeverityPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionSeverity) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionSignalType struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator string `pulumi:"operator"`
	// Specifies a list of values to match for a given condition. Possible values are `Metric`, `Log`, `Unknown`, and `Health`.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleActionGroupConditionSignalTypeInput is an input type that accepts AlertProcessingRuleActionGroupConditionSignalTypeArgs and AlertProcessingRuleActionGroupConditionSignalTypeOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionSignalTypeInput` via:
//
//	AlertProcessingRuleActionGroupConditionSignalTypeArgs{...}
type AlertProcessingRuleActionGroupConditionSignalTypeInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionSignalTypeOutput() AlertProcessingRuleActionGroupConditionSignalTypeOutput
	ToAlertProcessingRuleActionGroupConditionSignalTypeOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionSignalTypeOutput
}

type AlertProcessingRuleActionGroupConditionSignalTypeArgs struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies a list of values to match for a given condition. Possible values are `Metric`, `Log`, `Unknown`, and `Health`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleActionGroupConditionSignalTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionSignalType)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupConditionSignalTypeArgs) ToAlertProcessingRuleActionGroupConditionSignalTypeOutput() AlertProcessingRuleActionGroupConditionSignalTypeOutput {
	return i.ToAlertProcessingRuleActionGroupConditionSignalTypeOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionSignalTypeArgs) ToAlertProcessingRuleActionGroupConditionSignalTypeOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionSignalTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionSignalTypeOutput)
}

func (i AlertProcessingRuleActionGroupConditionSignalTypeArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionSignalType] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionSignalType]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionSignalTypeOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleActionGroupConditionSignalTypeArgs) ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutput() AlertProcessingRuleActionGroupConditionSignalTypePtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionSignalTypeArgs) ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionSignalTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionSignalTypeOutput).ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutputWithContext(ctx)
}

// AlertProcessingRuleActionGroupConditionSignalTypePtrInput is an input type that accepts AlertProcessingRuleActionGroupConditionSignalTypeArgs, AlertProcessingRuleActionGroupConditionSignalTypePtr and AlertProcessingRuleActionGroupConditionSignalTypePtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionSignalTypePtrInput` via:
//
//	        AlertProcessingRuleActionGroupConditionSignalTypeArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleActionGroupConditionSignalTypePtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutput() AlertProcessingRuleActionGroupConditionSignalTypePtrOutput
	ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionSignalTypePtrOutput
}

type alertProcessingRuleActionGroupConditionSignalTypePtrType AlertProcessingRuleActionGroupConditionSignalTypeArgs

func AlertProcessingRuleActionGroupConditionSignalTypePtr(v *AlertProcessingRuleActionGroupConditionSignalTypeArgs) AlertProcessingRuleActionGroupConditionSignalTypePtrInput {
	return (*alertProcessingRuleActionGroupConditionSignalTypePtrType)(v)
}

func (*alertProcessingRuleActionGroupConditionSignalTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionSignalType)(nil)).Elem()
}

func (i *alertProcessingRuleActionGroupConditionSignalTypePtrType) ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutput() AlertProcessingRuleActionGroupConditionSignalTypePtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleActionGroupConditionSignalTypePtrType) ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionSignalTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionSignalTypePtrOutput)
}

func (i *alertProcessingRuleActionGroupConditionSignalTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionSignalType] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionSignalType]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupConditionSignalTypeOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionSignalTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionSignalType)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionSignalTypeOutput) ToAlertProcessingRuleActionGroupConditionSignalTypeOutput() AlertProcessingRuleActionGroupConditionSignalTypeOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionSignalTypeOutput) ToAlertProcessingRuleActionGroupConditionSignalTypeOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionSignalTypeOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionSignalTypeOutput) ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutput() AlertProcessingRuleActionGroupConditionSignalTypePtrOutput {
	return o.ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleActionGroupConditionSignalTypeOutput) ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionSignalTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleActionGroupConditionSignalType) *AlertProcessingRuleActionGroupConditionSignalType {
		return &v
	}).(AlertProcessingRuleActionGroupConditionSignalTypePtrOutput)
}

func (o AlertProcessingRuleActionGroupConditionSignalTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionSignalType] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionSignalType]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleActionGroupConditionSignalTypeOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionSignalType) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies a list of values to match for a given condition. Possible values are `Metric`, `Log`, `Unknown`, and `Health`.
func (o AlertProcessingRuleActionGroupConditionSignalTypeOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionSignalType) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionSignalTypePtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionSignalTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionSignalType)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionSignalTypePtrOutput) ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutput() AlertProcessingRuleActionGroupConditionSignalTypePtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionSignalTypePtrOutput) ToAlertProcessingRuleActionGroupConditionSignalTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionSignalTypePtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionSignalTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionSignalType] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionSignalType]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupConditionSignalTypePtrOutput) Elem() AlertProcessingRuleActionGroupConditionSignalTypeOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionSignalType) AlertProcessingRuleActionGroupConditionSignalType {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleActionGroupConditionSignalType
		return ret
	}).(AlertProcessingRuleActionGroupConditionSignalTypeOutput)
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleActionGroupConditionSignalTypePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionSignalType) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies a list of values to match for a given condition. Possible values are `Metric`, `Log`, `Unknown`, and `Health`.
func (o AlertProcessingRuleActionGroupConditionSignalTypePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionSignalType) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionTargetResource struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource IDs.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleActionGroupConditionTargetResourceInput is an input type that accepts AlertProcessingRuleActionGroupConditionTargetResourceArgs and AlertProcessingRuleActionGroupConditionTargetResourceOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionTargetResourceInput` via:
//
//	AlertProcessingRuleActionGroupConditionTargetResourceArgs{...}
type AlertProcessingRuleActionGroupConditionTargetResourceInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionTargetResourceOutput() AlertProcessingRuleActionGroupConditionTargetResourceOutput
	ToAlertProcessingRuleActionGroupConditionTargetResourceOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionTargetResourceOutput
}

type AlertProcessingRuleActionGroupConditionTargetResourceArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource IDs.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleActionGroupConditionTargetResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionTargetResource)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceArgs) ToAlertProcessingRuleActionGroupConditionTargetResourceOutput() AlertProcessingRuleActionGroupConditionTargetResourceOutput {
	return i.ToAlertProcessingRuleActionGroupConditionTargetResourceOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceArgs) ToAlertProcessingRuleActionGroupConditionTargetResourceOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionTargetResourceOutput)
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionTargetResource] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionTargetResource]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionTargetResourceOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceArgs) ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutput() AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceArgs) ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionTargetResourceOutput).ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutputWithContext(ctx)
}

// AlertProcessingRuleActionGroupConditionTargetResourcePtrInput is an input type that accepts AlertProcessingRuleActionGroupConditionTargetResourceArgs, AlertProcessingRuleActionGroupConditionTargetResourcePtr and AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionTargetResourcePtrInput` via:
//
//	        AlertProcessingRuleActionGroupConditionTargetResourceArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleActionGroupConditionTargetResourcePtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutput() AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput
	ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput
}

type alertProcessingRuleActionGroupConditionTargetResourcePtrType AlertProcessingRuleActionGroupConditionTargetResourceArgs

func AlertProcessingRuleActionGroupConditionTargetResourcePtr(v *AlertProcessingRuleActionGroupConditionTargetResourceArgs) AlertProcessingRuleActionGroupConditionTargetResourcePtrInput {
	return (*alertProcessingRuleActionGroupConditionTargetResourcePtrType)(v)
}

func (*alertProcessingRuleActionGroupConditionTargetResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionTargetResource)(nil)).Elem()
}

func (i *alertProcessingRuleActionGroupConditionTargetResourcePtrType) ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutput() AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleActionGroupConditionTargetResourcePtrType) ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput)
}

func (i *alertProcessingRuleActionGroupConditionTargetResourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionTargetResource] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionTargetResource]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupConditionTargetResourceOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionTargetResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionTargetResource)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceOutput) ToAlertProcessingRuleActionGroupConditionTargetResourceOutput() AlertProcessingRuleActionGroupConditionTargetResourceOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceOutput) ToAlertProcessingRuleActionGroupConditionTargetResourceOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourceOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceOutput) ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutput() AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput {
	return o.ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceOutput) ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleActionGroupConditionTargetResource) *AlertProcessingRuleActionGroupConditionTargetResource {
		return &v
	}).(AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput)
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionTargetResource] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionTargetResource]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleActionGroupConditionTargetResourceOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionTargetResource) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. The values should be valid resource IDs.
func (o AlertProcessingRuleActionGroupConditionTargetResourceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionTargetResource) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionTargetResource)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput) ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutput() AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput) ToAlertProcessingRuleActionGroupConditionTargetResourcePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionTargetResource] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionTargetResource]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput) Elem() AlertProcessingRuleActionGroupConditionTargetResourceOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionTargetResource) AlertProcessingRuleActionGroupConditionTargetResource {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleActionGroupConditionTargetResource
		return ret
	}).(AlertProcessingRuleActionGroupConditionTargetResourceOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionTargetResource) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. The values should be valid resource IDs.
func (o AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionTargetResource) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionTargetResourceGroup struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource group IDs.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleActionGroupConditionTargetResourceGroupInput is an input type that accepts AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs and AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionTargetResourceGroupInput` via:
//
//	AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs{...}
type AlertProcessingRuleActionGroupConditionTargetResourceGroupInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionTargetResourceGroupOutput() AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput
	ToAlertProcessingRuleActionGroupConditionTargetResourceGroupOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput
}

type AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource group IDs.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionTargetResourceGroup)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs) ToAlertProcessingRuleActionGroupConditionTargetResourceGroupOutput() AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput {
	return i.ToAlertProcessingRuleActionGroupConditionTargetResourceGroupOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs) ToAlertProcessingRuleActionGroupConditionTargetResourceGroupOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput)
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionTargetResourceGroup] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionTargetResourceGroup]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionTargetResourceGroupOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs) ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput() AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs) ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput).ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutputWithContext(ctx)
}

// AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrInput is an input type that accepts AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs, AlertProcessingRuleActionGroupConditionTargetResourceGroupPtr and AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrInput` via:
//
//	        AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput() AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput
	ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput
}

type alertProcessingRuleActionGroupConditionTargetResourceGroupPtrType AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs

func AlertProcessingRuleActionGroupConditionTargetResourceGroupPtr(v *AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs) AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrInput {
	return (*alertProcessingRuleActionGroupConditionTargetResourceGroupPtrType)(v)
}

func (*alertProcessingRuleActionGroupConditionTargetResourceGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionTargetResourceGroup)(nil)).Elem()
}

func (i *alertProcessingRuleActionGroupConditionTargetResourceGroupPtrType) ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput() AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleActionGroupConditionTargetResourceGroupPtrType) ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput)
}

func (i *alertProcessingRuleActionGroupConditionTargetResourceGroupPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionTargetResourceGroup] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionTargetResourceGroup]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionTargetResourceGroup)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput) ToAlertProcessingRuleActionGroupConditionTargetResourceGroupOutput() AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput) ToAlertProcessingRuleActionGroupConditionTargetResourceGroupOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput) ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput() AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput {
	return o.ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput) ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleActionGroupConditionTargetResourceGroup) *AlertProcessingRuleActionGroupConditionTargetResourceGroup {
		return &v
	}).(AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput)
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionTargetResourceGroup] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionTargetResourceGroup]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionTargetResourceGroup) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. The values should be valid resource group IDs.
func (o AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionTargetResourceGroup) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionTargetResourceGroup)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput) ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput() AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput) ToAlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionTargetResourceGroup] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionTargetResourceGroup]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput) Elem() AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionTargetResourceGroup) AlertProcessingRuleActionGroupConditionTargetResourceGroup {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleActionGroupConditionTargetResourceGroup
		return ret
	}).(AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionTargetResourceGroup) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. The values should be valid resource group IDs.
func (o AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionTargetResourceGroup) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionTargetResourceType struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource types. (e.g. Microsoft.Compute/VirtualMachines)
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleActionGroupConditionTargetResourceTypeInput is an input type that accepts AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs and AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionTargetResourceTypeInput` via:
//
//	AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs{...}
type AlertProcessingRuleActionGroupConditionTargetResourceTypeInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionTargetResourceTypeOutput() AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput
	ToAlertProcessingRuleActionGroupConditionTargetResourceTypeOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput
}

type AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource types. (e.g. Microsoft.Compute/VirtualMachines)
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionTargetResourceType)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs) ToAlertProcessingRuleActionGroupConditionTargetResourceTypeOutput() AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput {
	return i.ToAlertProcessingRuleActionGroupConditionTargetResourceTypeOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs) ToAlertProcessingRuleActionGroupConditionTargetResourceTypeOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput)
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionTargetResourceType] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionTargetResourceType]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionTargetResourceTypeOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs) ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput() AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs) ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput).ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(ctx)
}

// AlertProcessingRuleActionGroupConditionTargetResourceTypePtrInput is an input type that accepts AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs, AlertProcessingRuleActionGroupConditionTargetResourceTypePtr and AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupConditionTargetResourceTypePtrInput` via:
//
//	        AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleActionGroupConditionTargetResourceTypePtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput() AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput
	ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(context.Context) AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput
}

type alertProcessingRuleActionGroupConditionTargetResourceTypePtrType AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs

func AlertProcessingRuleActionGroupConditionTargetResourceTypePtr(v *AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs) AlertProcessingRuleActionGroupConditionTargetResourceTypePtrInput {
	return (*alertProcessingRuleActionGroupConditionTargetResourceTypePtrType)(v)
}

func (*alertProcessingRuleActionGroupConditionTargetResourceTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionTargetResourceType)(nil)).Elem()
}

func (i *alertProcessingRuleActionGroupConditionTargetResourceTypePtrType) ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput() AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput {
	return i.ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleActionGroupConditionTargetResourceTypePtrType) ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput)
}

func (i *alertProcessingRuleActionGroupConditionTargetResourceTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionTargetResourceType] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionTargetResourceType]{
		OutputState: i.ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupConditionTargetResourceType)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput) ToAlertProcessingRuleActionGroupConditionTargetResourceTypeOutput() AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput) ToAlertProcessingRuleActionGroupConditionTargetResourceTypeOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput) ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput() AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput {
	return o.ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput) ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleActionGroupConditionTargetResourceType) *AlertProcessingRuleActionGroupConditionTargetResourceType {
		return &v
	}).(AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput)
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupConditionTargetResourceType] {
	return pulumix.Output[AlertProcessingRuleActionGroupConditionTargetResourceType]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionTargetResourceType) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. The values should be valid resource types. (e.g. Microsoft.Compute/VirtualMachines)
func (o AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupConditionTargetResourceType) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupConditionTargetResourceType)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput) ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput() AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput) ToAlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupConditionTargetResourceType] {
	return pulumix.Output[*AlertProcessingRuleActionGroupConditionTargetResourceType]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput) Elem() AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionTargetResourceType) AlertProcessingRuleActionGroupConditionTargetResourceType {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleActionGroupConditionTargetResourceType
		return ret
	}).(AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionTargetResourceType) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. The values should be valid resource types. (e.g. Microsoft.Compute/VirtualMachines)
func (o AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupConditionTargetResourceType) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleActionGroupSchedule struct {
	// Specifies the Alert Processing Rule effective start time (Y-m-d'T'H:M:S).
	EffectiveFrom *string `pulumi:"effectiveFrom"`
	// Specifies the Alert Processing Rule effective end time (Y-m-d'T'H:M:S).
	EffectiveUntil *string `pulumi:"effectiveUntil"`
	// A `recurrence` block as defined above.
	Recurrence *AlertProcessingRuleActionGroupScheduleRecurrence `pulumi:"recurrence"`
	// The time zone (e.g. Pacific Standard time, Eastern Standard Time). Defaults to `UTC`. [possible values are defined here](<https://docs.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)>).
	TimeZone *string `pulumi:"timeZone"`
}

// AlertProcessingRuleActionGroupScheduleInput is an input type that accepts AlertProcessingRuleActionGroupScheduleArgs and AlertProcessingRuleActionGroupScheduleOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupScheduleInput` via:
//
//	AlertProcessingRuleActionGroupScheduleArgs{...}
type AlertProcessingRuleActionGroupScheduleInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupScheduleOutput() AlertProcessingRuleActionGroupScheduleOutput
	ToAlertProcessingRuleActionGroupScheduleOutputWithContext(context.Context) AlertProcessingRuleActionGroupScheduleOutput
}

type AlertProcessingRuleActionGroupScheduleArgs struct {
	// Specifies the Alert Processing Rule effective start time (Y-m-d'T'H:M:S).
	EffectiveFrom pulumi.StringPtrInput `pulumi:"effectiveFrom"`
	// Specifies the Alert Processing Rule effective end time (Y-m-d'T'H:M:S).
	EffectiveUntil pulumi.StringPtrInput `pulumi:"effectiveUntil"`
	// A `recurrence` block as defined above.
	Recurrence AlertProcessingRuleActionGroupScheduleRecurrencePtrInput `pulumi:"recurrence"`
	// The time zone (e.g. Pacific Standard time, Eastern Standard Time). Defaults to `UTC`. [possible values are defined here](<https://docs.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)>).
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (AlertProcessingRuleActionGroupScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupSchedule)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupScheduleArgs) ToAlertProcessingRuleActionGroupScheduleOutput() AlertProcessingRuleActionGroupScheduleOutput {
	return i.ToAlertProcessingRuleActionGroupScheduleOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupScheduleArgs) ToAlertProcessingRuleActionGroupScheduleOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupScheduleOutput)
}

func (i AlertProcessingRuleActionGroupScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupSchedule] {
	return pulumix.Output[AlertProcessingRuleActionGroupSchedule]{
		OutputState: i.ToAlertProcessingRuleActionGroupScheduleOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleActionGroupScheduleArgs) ToAlertProcessingRuleActionGroupSchedulePtrOutput() AlertProcessingRuleActionGroupSchedulePtrOutput {
	return i.ToAlertProcessingRuleActionGroupSchedulePtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupScheduleArgs) ToAlertProcessingRuleActionGroupSchedulePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupScheduleOutput).ToAlertProcessingRuleActionGroupSchedulePtrOutputWithContext(ctx)
}

// AlertProcessingRuleActionGroupSchedulePtrInput is an input type that accepts AlertProcessingRuleActionGroupScheduleArgs, AlertProcessingRuleActionGroupSchedulePtr and AlertProcessingRuleActionGroupSchedulePtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupSchedulePtrInput` via:
//
//	        AlertProcessingRuleActionGroupScheduleArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleActionGroupSchedulePtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupSchedulePtrOutput() AlertProcessingRuleActionGroupSchedulePtrOutput
	ToAlertProcessingRuleActionGroupSchedulePtrOutputWithContext(context.Context) AlertProcessingRuleActionGroupSchedulePtrOutput
}

type alertProcessingRuleActionGroupSchedulePtrType AlertProcessingRuleActionGroupScheduleArgs

func AlertProcessingRuleActionGroupSchedulePtr(v *AlertProcessingRuleActionGroupScheduleArgs) AlertProcessingRuleActionGroupSchedulePtrInput {
	return (*alertProcessingRuleActionGroupSchedulePtrType)(v)
}

func (*alertProcessingRuleActionGroupSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupSchedule)(nil)).Elem()
}

func (i *alertProcessingRuleActionGroupSchedulePtrType) ToAlertProcessingRuleActionGroupSchedulePtrOutput() AlertProcessingRuleActionGroupSchedulePtrOutput {
	return i.ToAlertProcessingRuleActionGroupSchedulePtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleActionGroupSchedulePtrType) ToAlertProcessingRuleActionGroupSchedulePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupSchedulePtrOutput)
}

func (i *alertProcessingRuleActionGroupSchedulePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupSchedule] {
	return pulumix.Output[*AlertProcessingRuleActionGroupSchedule]{
		OutputState: i.ToAlertProcessingRuleActionGroupSchedulePtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupScheduleOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupSchedule)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupScheduleOutput) ToAlertProcessingRuleActionGroupScheduleOutput() AlertProcessingRuleActionGroupScheduleOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleOutput) ToAlertProcessingRuleActionGroupScheduleOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleOutput) ToAlertProcessingRuleActionGroupSchedulePtrOutput() AlertProcessingRuleActionGroupSchedulePtrOutput {
	return o.ToAlertProcessingRuleActionGroupSchedulePtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleActionGroupScheduleOutput) ToAlertProcessingRuleActionGroupSchedulePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleActionGroupSchedule) *AlertProcessingRuleActionGroupSchedule {
		return &v
	}).(AlertProcessingRuleActionGroupSchedulePtrOutput)
}

func (o AlertProcessingRuleActionGroupScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupSchedule] {
	return pulumix.Output[AlertProcessingRuleActionGroupSchedule]{
		OutputState: o.OutputState,
	}
}

// Specifies the Alert Processing Rule effective start time (Y-m-d'T'H:M:S).
func (o AlertProcessingRuleActionGroupScheduleOutput) EffectiveFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupSchedule) *string { return v.EffectiveFrom }).(pulumi.StringPtrOutput)
}

// Specifies the Alert Processing Rule effective end time (Y-m-d'T'H:M:S).
func (o AlertProcessingRuleActionGroupScheduleOutput) EffectiveUntil() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupSchedule) *string { return v.EffectiveUntil }).(pulumi.StringPtrOutput)
}

// A `recurrence` block as defined above.
func (o AlertProcessingRuleActionGroupScheduleOutput) Recurrence() AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupSchedule) *AlertProcessingRuleActionGroupScheduleRecurrence {
		return v.Recurrence
	}).(AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput)
}

// The time zone (e.g. Pacific Standard time, Eastern Standard Time). Defaults to `UTC`. [possible values are defined here](<https://docs.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)>).
func (o AlertProcessingRuleActionGroupScheduleOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupSchedule) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type AlertProcessingRuleActionGroupSchedulePtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupSchedule)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupSchedulePtrOutput) ToAlertProcessingRuleActionGroupSchedulePtrOutput() AlertProcessingRuleActionGroupSchedulePtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupSchedulePtrOutput) ToAlertProcessingRuleActionGroupSchedulePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupSchedulePtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupSchedulePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupSchedule] {
	return pulumix.Output[*AlertProcessingRuleActionGroupSchedule]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupSchedulePtrOutput) Elem() AlertProcessingRuleActionGroupScheduleOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupSchedule) AlertProcessingRuleActionGroupSchedule {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleActionGroupSchedule
		return ret
	}).(AlertProcessingRuleActionGroupScheduleOutput)
}

// Specifies the Alert Processing Rule effective start time (Y-m-d'T'H:M:S).
func (o AlertProcessingRuleActionGroupSchedulePtrOutput) EffectiveFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EffectiveFrom
	}).(pulumi.StringPtrOutput)
}

// Specifies the Alert Processing Rule effective end time (Y-m-d'T'H:M:S).
func (o AlertProcessingRuleActionGroupSchedulePtrOutput) EffectiveUntil() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EffectiveUntil
	}).(pulumi.StringPtrOutput)
}

// A `recurrence` block as defined above.
func (o AlertProcessingRuleActionGroupSchedulePtrOutput) Recurrence() AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupSchedule) *AlertProcessingRuleActionGroupScheduleRecurrence {
		if v == nil {
			return nil
		}
		return v.Recurrence
	}).(AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput)
}

// The time zone (e.g. Pacific Standard time, Eastern Standard Time). Defaults to `UTC`. [possible values are defined here](<https://docs.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)>).
func (o AlertProcessingRuleActionGroupSchedulePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupSchedule) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

type AlertProcessingRuleActionGroupScheduleRecurrence struct {
	// One or more `daily` blocks as defined above.
	Dailies []AlertProcessingRuleActionGroupScheduleRecurrenceDaily `pulumi:"dailies"`
	// One or more `monthly` blocks as defined above.
	Monthlies []AlertProcessingRuleActionGroupScheduleRecurrenceMonthly `pulumi:"monthlies"`
	// One or more `weekly` blocks as defined below.
	Weeklies []AlertProcessingRuleActionGroupScheduleRecurrenceWeekly `pulumi:"weeklies"`
}

// AlertProcessingRuleActionGroupScheduleRecurrenceInput is an input type that accepts AlertProcessingRuleActionGroupScheduleRecurrenceArgs and AlertProcessingRuleActionGroupScheduleRecurrenceOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupScheduleRecurrenceInput` via:
//
//	AlertProcessingRuleActionGroupScheduleRecurrenceArgs{...}
type AlertProcessingRuleActionGroupScheduleRecurrenceInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupScheduleRecurrenceOutput() AlertProcessingRuleActionGroupScheduleRecurrenceOutput
	ToAlertProcessingRuleActionGroupScheduleRecurrenceOutputWithContext(context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceOutput
}

type AlertProcessingRuleActionGroupScheduleRecurrenceArgs struct {
	// One or more `daily` blocks as defined above.
	Dailies AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayInput `pulumi:"dailies"`
	// One or more `monthly` blocks as defined above.
	Monthlies AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayInput `pulumi:"monthlies"`
	// One or more `weekly` blocks as defined below.
	Weeklies AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayInput `pulumi:"weeklies"`
}

func (AlertProcessingRuleActionGroupScheduleRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrence)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceArgs) ToAlertProcessingRuleActionGroupScheduleRecurrenceOutput() AlertProcessingRuleActionGroupScheduleRecurrenceOutput {
	return i.ToAlertProcessingRuleActionGroupScheduleRecurrenceOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceArgs) ToAlertProcessingRuleActionGroupScheduleRecurrenceOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupScheduleRecurrenceOutput)
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrence] {
	return pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrence]{
		OutputState: i.ToAlertProcessingRuleActionGroupScheduleRecurrenceOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceArgs) ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutput() AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput {
	return i.ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceArgs) ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupScheduleRecurrenceOutput).ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutputWithContext(ctx)
}

// AlertProcessingRuleActionGroupScheduleRecurrencePtrInput is an input type that accepts AlertProcessingRuleActionGroupScheduleRecurrenceArgs, AlertProcessingRuleActionGroupScheduleRecurrencePtr and AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupScheduleRecurrencePtrInput` via:
//
//	        AlertProcessingRuleActionGroupScheduleRecurrenceArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleActionGroupScheduleRecurrencePtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutput() AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput
	ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutputWithContext(context.Context) AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput
}

type alertProcessingRuleActionGroupScheduleRecurrencePtrType AlertProcessingRuleActionGroupScheduleRecurrenceArgs

func AlertProcessingRuleActionGroupScheduleRecurrencePtr(v *AlertProcessingRuleActionGroupScheduleRecurrenceArgs) AlertProcessingRuleActionGroupScheduleRecurrencePtrInput {
	return (*alertProcessingRuleActionGroupScheduleRecurrencePtrType)(v)
}

func (*alertProcessingRuleActionGroupScheduleRecurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupScheduleRecurrence)(nil)).Elem()
}

func (i *alertProcessingRuleActionGroupScheduleRecurrencePtrType) ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutput() AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput {
	return i.ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleActionGroupScheduleRecurrencePtrType) ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput)
}

func (i *alertProcessingRuleActionGroupScheduleRecurrencePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupScheduleRecurrence] {
	return pulumix.Output[*AlertProcessingRuleActionGroupScheduleRecurrence]{
		OutputState: i.ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupScheduleRecurrenceOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupScheduleRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrence)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceOutput) ToAlertProcessingRuleActionGroupScheduleRecurrenceOutput() AlertProcessingRuleActionGroupScheduleRecurrenceOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceOutput) ToAlertProcessingRuleActionGroupScheduleRecurrenceOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceOutput) ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutput() AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput {
	return o.ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceOutput) ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleActionGroupScheduleRecurrence) *AlertProcessingRuleActionGroupScheduleRecurrence {
		return &v
	}).(AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput)
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrence] {
	return pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrence]{
		OutputState: o.OutputState,
	}
}

// One or more `daily` blocks as defined above.
func (o AlertProcessingRuleActionGroupScheduleRecurrenceOutput) Dailies() AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupScheduleRecurrence) []AlertProcessingRuleActionGroupScheduleRecurrenceDaily {
		return v.Dailies
	}).(AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput)
}

// One or more `monthly` blocks as defined above.
func (o AlertProcessingRuleActionGroupScheduleRecurrenceOutput) Monthlies() AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupScheduleRecurrence) []AlertProcessingRuleActionGroupScheduleRecurrenceMonthly {
		return v.Monthlies
	}).(AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput)
}

// One or more `weekly` blocks as defined below.
func (o AlertProcessingRuleActionGroupScheduleRecurrenceOutput) Weeklies() AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupScheduleRecurrence) []AlertProcessingRuleActionGroupScheduleRecurrenceWeekly {
		return v.Weeklies
	}).(AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput)
}

type AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleActionGroupScheduleRecurrence)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput) ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutput() AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput) ToAlertProcessingRuleActionGroupScheduleRecurrencePtrOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleActionGroupScheduleRecurrence] {
	return pulumix.Output[*AlertProcessingRuleActionGroupScheduleRecurrence]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput) Elem() AlertProcessingRuleActionGroupScheduleRecurrenceOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupScheduleRecurrence) AlertProcessingRuleActionGroupScheduleRecurrence {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleActionGroupScheduleRecurrence
		return ret
	}).(AlertProcessingRuleActionGroupScheduleRecurrenceOutput)
}

// One or more `daily` blocks as defined above.
func (o AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput) Dailies() AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupScheduleRecurrence) []AlertProcessingRuleActionGroupScheduleRecurrenceDaily {
		if v == nil {
			return nil
		}
		return v.Dailies
	}).(AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput)
}

// One or more `monthly` blocks as defined above.
func (o AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput) Monthlies() AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupScheduleRecurrence) []AlertProcessingRuleActionGroupScheduleRecurrenceMonthly {
		if v == nil {
			return nil
		}
		return v.Monthlies
	}).(AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput)
}

// One or more `weekly` blocks as defined below.
func (o AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput) Weeklies() AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleActionGroupScheduleRecurrence) []AlertProcessingRuleActionGroupScheduleRecurrenceWeekly {
		if v == nil {
			return nil
		}
		return v.Weeklies
	}).(AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput)
}

type AlertProcessingRuleActionGroupScheduleRecurrenceDaily struct {
	// Specifies the recurrence end time (H:M:S).
	EndTime string `pulumi:"endTime"`
	// Specifies the recurrence start time (H:M:S).
	StartTime string `pulumi:"startTime"`
}

// AlertProcessingRuleActionGroupScheduleRecurrenceDailyInput is an input type that accepts AlertProcessingRuleActionGroupScheduleRecurrenceDailyArgs and AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupScheduleRecurrenceDailyInput` via:
//
//	AlertProcessingRuleActionGroupScheduleRecurrenceDailyArgs{...}
type AlertProcessingRuleActionGroupScheduleRecurrenceDailyInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput() AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput
	ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyOutputWithContext(context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput
}

type AlertProcessingRuleActionGroupScheduleRecurrenceDailyArgs struct {
	// Specifies the recurrence end time (H:M:S).
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// Specifies the recurrence start time (H:M:S).
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (AlertProcessingRuleActionGroupScheduleRecurrenceDailyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrenceDaily)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceDailyArgs) ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput() AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput {
	return i.ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceDailyArgs) ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput)
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceDailyArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrenceDaily] {
	return pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrenceDaily]{
		OutputState: i.ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyOutputWithContext(ctx).OutputState,
	}
}

// AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayInput is an input type that accepts AlertProcessingRuleActionGroupScheduleRecurrenceDailyArray and AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayInput` via:
//
//	AlertProcessingRuleActionGroupScheduleRecurrenceDailyArray{ AlertProcessingRuleActionGroupScheduleRecurrenceDailyArgs{...} }
type AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput() AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput
	ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutputWithContext(context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput
}

type AlertProcessingRuleActionGroupScheduleRecurrenceDailyArray []AlertProcessingRuleActionGroupScheduleRecurrenceDailyInput

func (AlertProcessingRuleActionGroupScheduleRecurrenceDailyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertProcessingRuleActionGroupScheduleRecurrenceDaily)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceDailyArray) ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput() AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput {
	return i.ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceDailyArray) ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput)
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceDailyArray) ToOutput(ctx context.Context) pulumix.Output[[]AlertProcessingRuleActionGroupScheduleRecurrenceDaily] {
	return pulumix.Output[[]AlertProcessingRuleActionGroupScheduleRecurrenceDaily]{
		OutputState: i.ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrenceDaily)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput) ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput() AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput) ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrenceDaily] {
	return pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrenceDaily]{
		OutputState: o.OutputState,
	}
}

// Specifies the recurrence end time (H:M:S).
func (o AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupScheduleRecurrenceDaily) string { return v.EndTime }).(pulumi.StringOutput)
}

// Specifies the recurrence start time (H:M:S).
func (o AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupScheduleRecurrenceDaily) string { return v.StartTime }).(pulumi.StringOutput)
}

type AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertProcessingRuleActionGroupScheduleRecurrenceDaily)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput) ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput() AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput) ToAlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AlertProcessingRuleActionGroupScheduleRecurrenceDaily] {
	return pulumix.Output[[]AlertProcessingRuleActionGroupScheduleRecurrenceDaily]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput) Index(i pulumi.IntInput) AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertProcessingRuleActionGroupScheduleRecurrenceDaily {
		return vs[0].([]AlertProcessingRuleActionGroupScheduleRecurrenceDaily)[vs[1].(int)]
	}).(AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput)
}

type AlertProcessingRuleActionGroupScheduleRecurrenceMonthly struct {
	// Specifies a list of dayOfMonth to recurrence. Possible values are integers between `1` - `31`.
	DaysOfMonths []int `pulumi:"daysOfMonths"`
	// Specifies the recurrence end time (H:M:S).
	EndTime *string `pulumi:"endTime"`
	// Specifies the recurrence start time (H:M:S).
	StartTime *string `pulumi:"startTime"`
}

// AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyInput is an input type that accepts AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArgs and AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyInput` via:
//
//	AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArgs{...}
type AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput() AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput
	ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutputWithContext(context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput
}

type AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArgs struct {
	// Specifies a list of dayOfMonth to recurrence. Possible values are integers between `1` - `31`.
	DaysOfMonths pulumi.IntArrayInput `pulumi:"daysOfMonths"`
	// Specifies the recurrence end time (H:M:S).
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the recurrence start time (H:M:S).
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrenceMonthly)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArgs) ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput() AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput {
	return i.ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArgs) ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput)
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrenceMonthly] {
	return pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrenceMonthly]{
		OutputState: i.ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutputWithContext(ctx).OutputState,
	}
}

// AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayInput is an input type that accepts AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArray and AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayInput` via:
//
//	AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArray{ AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArgs{...} }
type AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput() AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput
	ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutputWithContext(context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput
}

type AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArray []AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyInput

func (AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertProcessingRuleActionGroupScheduleRecurrenceMonthly)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArray) ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput() AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput {
	return i.ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArray) ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput)
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArray) ToOutput(ctx context.Context) pulumix.Output[[]AlertProcessingRuleActionGroupScheduleRecurrenceMonthly] {
	return pulumix.Output[[]AlertProcessingRuleActionGroupScheduleRecurrenceMonthly]{
		OutputState: i.ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrenceMonthly)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput) ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput() AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput) ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrenceMonthly] {
	return pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrenceMonthly]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of dayOfMonth to recurrence. Possible values are integers between `1` - `31`.
func (o AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput) DaysOfMonths() pulumi.IntArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupScheduleRecurrenceMonthly) []int { return v.DaysOfMonths }).(pulumi.IntArrayOutput)
}

// Specifies the recurrence end time (H:M:S).
func (o AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupScheduleRecurrenceMonthly) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies the recurrence start time (H:M:S).
func (o AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupScheduleRecurrenceMonthly) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertProcessingRuleActionGroupScheduleRecurrenceMonthly)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput) ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput() AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput) ToAlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AlertProcessingRuleActionGroupScheduleRecurrenceMonthly] {
	return pulumix.Output[[]AlertProcessingRuleActionGroupScheduleRecurrenceMonthly]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput) Index(i pulumi.IntInput) AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertProcessingRuleActionGroupScheduleRecurrenceMonthly {
		return vs[0].([]AlertProcessingRuleActionGroupScheduleRecurrenceMonthly)[vs[1].(int)]
	}).(AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput)
}

type AlertProcessingRuleActionGroupScheduleRecurrenceWeekly struct {
	// Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
	DaysOfWeeks []string `pulumi:"daysOfWeeks"`
	// Specifies the recurrence end time (H:M:S).
	EndTime *string `pulumi:"endTime"`
	// Specifies the recurrence start time (H:M:S).
	StartTime *string `pulumi:"startTime"`
}

// AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyInput is an input type that accepts AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArgs and AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyInput` via:
//
//	AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArgs{...}
type AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput() AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput
	ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutputWithContext(context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput
}

type AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArgs struct {
	// Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
	DaysOfWeeks pulumi.StringArrayInput `pulumi:"daysOfWeeks"`
	// Specifies the recurrence end time (H:M:S).
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the recurrence start time (H:M:S).
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrenceWeekly)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArgs) ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput() AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput {
	return i.ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArgs) ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput)
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrenceWeekly] {
	return pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrenceWeekly]{
		OutputState: i.ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutputWithContext(ctx).OutputState,
	}
}

// AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayInput is an input type that accepts AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArray and AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput values.
// You can construct a concrete instance of `AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayInput` via:
//
//	AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArray{ AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArgs{...} }
type AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayInput interface {
	pulumi.Input

	ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput() AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput
	ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutputWithContext(context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput
}

type AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArray []AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyInput

func (AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertProcessingRuleActionGroupScheduleRecurrenceWeekly)(nil)).Elem()
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArray) ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput() AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput {
	return i.ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutputWithContext(context.Background())
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArray) ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput)
}

func (i AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArray) ToOutput(ctx context.Context) pulumix.Output[[]AlertProcessingRuleActionGroupScheduleRecurrenceWeekly] {
	return pulumix.Output[[]AlertProcessingRuleActionGroupScheduleRecurrenceWeekly]{
		OutputState: i.ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrenceWeekly)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput) ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput() AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput) ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrenceWeekly] {
	return pulumix.Output[AlertProcessingRuleActionGroupScheduleRecurrenceWeekly]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
func (o AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput) DaysOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupScheduleRecurrenceWeekly) []string { return v.DaysOfWeeks }).(pulumi.StringArrayOutput)
}

// Specifies the recurrence end time (H:M:S).
func (o AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupScheduleRecurrenceWeekly) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies the recurrence start time (H:M:S).
func (o AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleActionGroupScheduleRecurrenceWeekly) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertProcessingRuleActionGroupScheduleRecurrenceWeekly)(nil)).Elem()
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput) ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput() AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput) ToAlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutputWithContext(ctx context.Context) AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput {
	return o
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AlertProcessingRuleActionGroupScheduleRecurrenceWeekly] {
	return pulumix.Output[[]AlertProcessingRuleActionGroupScheduleRecurrenceWeekly]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput) Index(i pulumi.IntInput) AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertProcessingRuleActionGroupScheduleRecurrenceWeekly {
		return vs[0].([]AlertProcessingRuleActionGroupScheduleRecurrenceWeekly)[vs[1].(int)]
	}).(AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput)
}

type AlertProcessingRuleSuppressionCondition struct {
	// A `alertContext` block as defined above.
	AlertContext *AlertProcessingRuleSuppressionConditionAlertContext `pulumi:"alertContext"`
	// A `alertRuleId` block as defined above.
	AlertRuleId *AlertProcessingRuleSuppressionConditionAlertRuleId `pulumi:"alertRuleId"`
	// A `alertRuleName` block as defined above.
	AlertRuleName *AlertProcessingRuleSuppressionConditionAlertRuleName `pulumi:"alertRuleName"`
	// A `description` block as defined below.
	Description *AlertProcessingRuleSuppressionConditionDescription `pulumi:"description"`
	// A `monitorCondition` block as defined below.
	MonitorCondition *AlertProcessingRuleSuppressionConditionMonitorCondition `pulumi:"monitorCondition"`
	// A `monitorService` block as defined below.
	MonitorService *AlertProcessingRuleSuppressionConditionMonitorService `pulumi:"monitorService"`
	// A `severity` block as defined below.
	Severity *AlertProcessingRuleSuppressionConditionSeverity `pulumi:"severity"`
	// A `signalType` block as defined below.
	SignalType *AlertProcessingRuleSuppressionConditionSignalType `pulumi:"signalType"`
	// A `targetResource` block as defined below.
	TargetResource *AlertProcessingRuleSuppressionConditionTargetResource `pulumi:"targetResource"`
	// A `targetResourceGroup` block as defined below.
	TargetResourceGroup *AlertProcessingRuleSuppressionConditionTargetResourceGroup `pulumi:"targetResourceGroup"`
	// A `targetResourceType` block as defined below.
	TargetResourceType *AlertProcessingRuleSuppressionConditionTargetResourceType `pulumi:"targetResourceType"`
}

// AlertProcessingRuleSuppressionConditionInput is an input type that accepts AlertProcessingRuleSuppressionConditionArgs and AlertProcessingRuleSuppressionConditionOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionInput` via:
//
//	AlertProcessingRuleSuppressionConditionArgs{...}
type AlertProcessingRuleSuppressionConditionInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionOutput() AlertProcessingRuleSuppressionConditionOutput
	ToAlertProcessingRuleSuppressionConditionOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionOutput
}

type AlertProcessingRuleSuppressionConditionArgs struct {
	// A `alertContext` block as defined above.
	AlertContext AlertProcessingRuleSuppressionConditionAlertContextPtrInput `pulumi:"alertContext"`
	// A `alertRuleId` block as defined above.
	AlertRuleId AlertProcessingRuleSuppressionConditionAlertRuleIdPtrInput `pulumi:"alertRuleId"`
	// A `alertRuleName` block as defined above.
	AlertRuleName AlertProcessingRuleSuppressionConditionAlertRuleNamePtrInput `pulumi:"alertRuleName"`
	// A `description` block as defined below.
	Description AlertProcessingRuleSuppressionConditionDescriptionPtrInput `pulumi:"description"`
	// A `monitorCondition` block as defined below.
	MonitorCondition AlertProcessingRuleSuppressionConditionMonitorConditionPtrInput `pulumi:"monitorCondition"`
	// A `monitorService` block as defined below.
	MonitorService AlertProcessingRuleSuppressionConditionMonitorServicePtrInput `pulumi:"monitorService"`
	// A `severity` block as defined below.
	Severity AlertProcessingRuleSuppressionConditionSeverityPtrInput `pulumi:"severity"`
	// A `signalType` block as defined below.
	SignalType AlertProcessingRuleSuppressionConditionSignalTypePtrInput `pulumi:"signalType"`
	// A `targetResource` block as defined below.
	TargetResource AlertProcessingRuleSuppressionConditionTargetResourcePtrInput `pulumi:"targetResource"`
	// A `targetResourceGroup` block as defined below.
	TargetResourceGroup AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrInput `pulumi:"targetResourceGroup"`
	// A `targetResourceType` block as defined below.
	TargetResourceType AlertProcessingRuleSuppressionConditionTargetResourceTypePtrInput `pulumi:"targetResourceType"`
}

func (AlertProcessingRuleSuppressionConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionCondition)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionConditionArgs) ToAlertProcessingRuleSuppressionConditionOutput() AlertProcessingRuleSuppressionConditionOutput {
	return i.ToAlertProcessingRuleSuppressionConditionOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionArgs) ToAlertProcessingRuleSuppressionConditionOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionOutput)
}

func (i AlertProcessingRuleSuppressionConditionArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionCondition] {
	return pulumix.Output[AlertProcessingRuleSuppressionCondition]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleSuppressionConditionArgs) ToAlertProcessingRuleSuppressionConditionPtrOutput() AlertProcessingRuleSuppressionConditionPtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionArgs) ToAlertProcessingRuleSuppressionConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionOutput).ToAlertProcessingRuleSuppressionConditionPtrOutputWithContext(ctx)
}

// AlertProcessingRuleSuppressionConditionPtrInput is an input type that accepts AlertProcessingRuleSuppressionConditionArgs, AlertProcessingRuleSuppressionConditionPtr and AlertProcessingRuleSuppressionConditionPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionPtrInput` via:
//
//	        AlertProcessingRuleSuppressionConditionArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleSuppressionConditionPtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionPtrOutput() AlertProcessingRuleSuppressionConditionPtrOutput
	ToAlertProcessingRuleSuppressionConditionPtrOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionPtrOutput
}

type alertProcessingRuleSuppressionConditionPtrType AlertProcessingRuleSuppressionConditionArgs

func AlertProcessingRuleSuppressionConditionPtr(v *AlertProcessingRuleSuppressionConditionArgs) AlertProcessingRuleSuppressionConditionPtrInput {
	return (*alertProcessingRuleSuppressionConditionPtrType)(v)
}

func (*alertProcessingRuleSuppressionConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionCondition)(nil)).Elem()
}

func (i *alertProcessingRuleSuppressionConditionPtrType) ToAlertProcessingRuleSuppressionConditionPtrOutput() AlertProcessingRuleSuppressionConditionPtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleSuppressionConditionPtrType) ToAlertProcessingRuleSuppressionConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionPtrOutput)
}

func (i *alertProcessingRuleSuppressionConditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionCondition] {
	return pulumix.Output[*AlertProcessingRuleSuppressionCondition]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionConditionOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionCondition)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionOutput) ToAlertProcessingRuleSuppressionConditionOutput() AlertProcessingRuleSuppressionConditionOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionOutput) ToAlertProcessingRuleSuppressionConditionOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionOutput) ToAlertProcessingRuleSuppressionConditionPtrOutput() AlertProcessingRuleSuppressionConditionPtrOutput {
	return o.ToAlertProcessingRuleSuppressionConditionPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleSuppressionConditionOutput) ToAlertProcessingRuleSuppressionConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionCondition {
		return &v
	}).(AlertProcessingRuleSuppressionConditionPtrOutput)
}

func (o AlertProcessingRuleSuppressionConditionOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionCondition] {
	return pulumix.Output[AlertProcessingRuleSuppressionCondition]{
		OutputState: o.OutputState,
	}
}

// A `alertContext` block as defined above.
func (o AlertProcessingRuleSuppressionConditionOutput) AlertContext() AlertProcessingRuleSuppressionConditionAlertContextPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionAlertContext {
		return v.AlertContext
	}).(AlertProcessingRuleSuppressionConditionAlertContextPtrOutput)
}

// A `alertRuleId` block as defined above.
func (o AlertProcessingRuleSuppressionConditionOutput) AlertRuleId() AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionAlertRuleId {
		return v.AlertRuleId
	}).(AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput)
}

// A `alertRuleName` block as defined above.
func (o AlertProcessingRuleSuppressionConditionOutput) AlertRuleName() AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionAlertRuleName {
		return v.AlertRuleName
	}).(AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput)
}

// A `description` block as defined below.
func (o AlertProcessingRuleSuppressionConditionOutput) Description() AlertProcessingRuleSuppressionConditionDescriptionPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionDescription {
		return v.Description
	}).(AlertProcessingRuleSuppressionConditionDescriptionPtrOutput)
}

// A `monitorCondition` block as defined below.
func (o AlertProcessingRuleSuppressionConditionOutput) MonitorCondition() AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionMonitorCondition {
		return v.MonitorCondition
	}).(AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput)
}

// A `monitorService` block as defined below.
func (o AlertProcessingRuleSuppressionConditionOutput) MonitorService() AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionMonitorService {
		return v.MonitorService
	}).(AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput)
}

// A `severity` block as defined below.
func (o AlertProcessingRuleSuppressionConditionOutput) Severity() AlertProcessingRuleSuppressionConditionSeverityPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionSeverity {
		return v.Severity
	}).(AlertProcessingRuleSuppressionConditionSeverityPtrOutput)
}

// A `signalType` block as defined below.
func (o AlertProcessingRuleSuppressionConditionOutput) SignalType() AlertProcessingRuleSuppressionConditionSignalTypePtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionSignalType {
		return v.SignalType
	}).(AlertProcessingRuleSuppressionConditionSignalTypePtrOutput)
}

// A `targetResource` block as defined below.
func (o AlertProcessingRuleSuppressionConditionOutput) TargetResource() AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionTargetResource {
		return v.TargetResource
	}).(AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput)
}

// A `targetResourceGroup` block as defined below.
func (o AlertProcessingRuleSuppressionConditionOutput) TargetResourceGroup() AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionTargetResourceGroup {
		return v.TargetResourceGroup
	}).(AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput)
}

// A `targetResourceType` block as defined below.
func (o AlertProcessingRuleSuppressionConditionOutput) TargetResourceType() AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionTargetResourceType {
		return v.TargetResourceType
	}).(AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput)
}

type AlertProcessingRuleSuppressionConditionPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionCondition)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionPtrOutput) ToAlertProcessingRuleSuppressionConditionPtrOutput() AlertProcessingRuleSuppressionConditionPtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionPtrOutput) ToAlertProcessingRuleSuppressionConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionPtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionCondition] {
	return pulumix.Output[*AlertProcessingRuleSuppressionCondition]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionConditionPtrOutput) Elem() AlertProcessingRuleSuppressionConditionOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionCondition) AlertProcessingRuleSuppressionCondition {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleSuppressionCondition
		return ret
	}).(AlertProcessingRuleSuppressionConditionOutput)
}

// A `alertContext` block as defined above.
func (o AlertProcessingRuleSuppressionConditionPtrOutput) AlertContext() AlertProcessingRuleSuppressionConditionAlertContextPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionAlertContext {
		if v == nil {
			return nil
		}
		return v.AlertContext
	}).(AlertProcessingRuleSuppressionConditionAlertContextPtrOutput)
}

// A `alertRuleId` block as defined above.
func (o AlertProcessingRuleSuppressionConditionPtrOutput) AlertRuleId() AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionAlertRuleId {
		if v == nil {
			return nil
		}
		return v.AlertRuleId
	}).(AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput)
}

// A `alertRuleName` block as defined above.
func (o AlertProcessingRuleSuppressionConditionPtrOutput) AlertRuleName() AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionAlertRuleName {
		if v == nil {
			return nil
		}
		return v.AlertRuleName
	}).(AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput)
}

// A `description` block as defined below.
func (o AlertProcessingRuleSuppressionConditionPtrOutput) Description() AlertProcessingRuleSuppressionConditionDescriptionPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionDescription {
		if v == nil {
			return nil
		}
		return v.Description
	}).(AlertProcessingRuleSuppressionConditionDescriptionPtrOutput)
}

// A `monitorCondition` block as defined below.
func (o AlertProcessingRuleSuppressionConditionPtrOutput) MonitorCondition() AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionMonitorCondition {
		if v == nil {
			return nil
		}
		return v.MonitorCondition
	}).(AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput)
}

// A `monitorService` block as defined below.
func (o AlertProcessingRuleSuppressionConditionPtrOutput) MonitorService() AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionMonitorService {
		if v == nil {
			return nil
		}
		return v.MonitorService
	}).(AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput)
}

// A `severity` block as defined below.
func (o AlertProcessingRuleSuppressionConditionPtrOutput) Severity() AlertProcessingRuleSuppressionConditionSeverityPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionSeverity {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(AlertProcessingRuleSuppressionConditionSeverityPtrOutput)
}

// A `signalType` block as defined below.
func (o AlertProcessingRuleSuppressionConditionPtrOutput) SignalType() AlertProcessingRuleSuppressionConditionSignalTypePtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionSignalType {
		if v == nil {
			return nil
		}
		return v.SignalType
	}).(AlertProcessingRuleSuppressionConditionSignalTypePtrOutput)
}

// A `targetResource` block as defined below.
func (o AlertProcessingRuleSuppressionConditionPtrOutput) TargetResource() AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionTargetResource {
		if v == nil {
			return nil
		}
		return v.TargetResource
	}).(AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput)
}

// A `targetResourceGroup` block as defined below.
func (o AlertProcessingRuleSuppressionConditionPtrOutput) TargetResourceGroup() AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionTargetResourceGroup {
		if v == nil {
			return nil
		}
		return v.TargetResourceGroup
	}).(AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput)
}

// A `targetResourceType` block as defined below.
func (o AlertProcessingRuleSuppressionConditionPtrOutput) TargetResourceType() AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionCondition) *AlertProcessingRuleSuppressionConditionTargetResourceType {
		if v == nil {
			return nil
		}
		return v.TargetResourceType
	}).(AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput)
}

type AlertProcessingRuleSuppressionConditionAlertContext struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleSuppressionConditionAlertContextInput is an input type that accepts AlertProcessingRuleSuppressionConditionAlertContextArgs and AlertProcessingRuleSuppressionConditionAlertContextOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionAlertContextInput` via:
//
//	AlertProcessingRuleSuppressionConditionAlertContextArgs{...}
type AlertProcessingRuleSuppressionConditionAlertContextInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionAlertContextOutput() AlertProcessingRuleSuppressionConditionAlertContextOutput
	ToAlertProcessingRuleSuppressionConditionAlertContextOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionAlertContextOutput
}

type AlertProcessingRuleSuppressionConditionAlertContextArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleSuppressionConditionAlertContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionAlertContext)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionConditionAlertContextArgs) ToAlertProcessingRuleSuppressionConditionAlertContextOutput() AlertProcessingRuleSuppressionConditionAlertContextOutput {
	return i.ToAlertProcessingRuleSuppressionConditionAlertContextOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionAlertContextArgs) ToAlertProcessingRuleSuppressionConditionAlertContextOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionAlertContextOutput)
}

func (i AlertProcessingRuleSuppressionConditionAlertContextArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionAlertContext] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionAlertContext]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionAlertContextOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleSuppressionConditionAlertContextArgs) ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutput() AlertProcessingRuleSuppressionConditionAlertContextPtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionAlertContextArgs) ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionAlertContextOutput).ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutputWithContext(ctx)
}

// AlertProcessingRuleSuppressionConditionAlertContextPtrInput is an input type that accepts AlertProcessingRuleSuppressionConditionAlertContextArgs, AlertProcessingRuleSuppressionConditionAlertContextPtr and AlertProcessingRuleSuppressionConditionAlertContextPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionAlertContextPtrInput` via:
//
//	        AlertProcessingRuleSuppressionConditionAlertContextArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleSuppressionConditionAlertContextPtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutput() AlertProcessingRuleSuppressionConditionAlertContextPtrOutput
	ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionAlertContextPtrOutput
}

type alertProcessingRuleSuppressionConditionAlertContextPtrType AlertProcessingRuleSuppressionConditionAlertContextArgs

func AlertProcessingRuleSuppressionConditionAlertContextPtr(v *AlertProcessingRuleSuppressionConditionAlertContextArgs) AlertProcessingRuleSuppressionConditionAlertContextPtrInput {
	return (*alertProcessingRuleSuppressionConditionAlertContextPtrType)(v)
}

func (*alertProcessingRuleSuppressionConditionAlertContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionAlertContext)(nil)).Elem()
}

func (i *alertProcessingRuleSuppressionConditionAlertContextPtrType) ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutput() AlertProcessingRuleSuppressionConditionAlertContextPtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleSuppressionConditionAlertContextPtrType) ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionAlertContextPtrOutput)
}

func (i *alertProcessingRuleSuppressionConditionAlertContextPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionAlertContext] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionAlertContext]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionConditionAlertContextOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionAlertContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionAlertContext)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionAlertContextOutput) ToAlertProcessingRuleSuppressionConditionAlertContextOutput() AlertProcessingRuleSuppressionConditionAlertContextOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionAlertContextOutput) ToAlertProcessingRuleSuppressionConditionAlertContextOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertContextOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionAlertContextOutput) ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutput() AlertProcessingRuleSuppressionConditionAlertContextPtrOutput {
	return o.ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleSuppressionConditionAlertContextOutput) ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleSuppressionConditionAlertContext) *AlertProcessingRuleSuppressionConditionAlertContext {
		return &v
	}).(AlertProcessingRuleSuppressionConditionAlertContextPtrOutput)
}

func (o AlertProcessingRuleSuppressionConditionAlertContextOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionAlertContext] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionAlertContext]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleSuppressionConditionAlertContextOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionAlertContext) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleSuppressionConditionAlertContextOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionAlertContext) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionAlertContextPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionAlertContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionAlertContext)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionAlertContextPtrOutput) ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutput() AlertProcessingRuleSuppressionConditionAlertContextPtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionAlertContextPtrOutput) ToAlertProcessingRuleSuppressionConditionAlertContextPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertContextPtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionAlertContextPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionAlertContext] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionAlertContext]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionConditionAlertContextPtrOutput) Elem() AlertProcessingRuleSuppressionConditionAlertContextOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionAlertContext) AlertProcessingRuleSuppressionConditionAlertContext {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleSuppressionConditionAlertContext
		return ret
	}).(AlertProcessingRuleSuppressionConditionAlertContextOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleSuppressionConditionAlertContextPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionAlertContext) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleSuppressionConditionAlertContextPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionAlertContext) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionAlertRuleId struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleSuppressionConditionAlertRuleIdInput is an input type that accepts AlertProcessingRuleSuppressionConditionAlertRuleIdArgs and AlertProcessingRuleSuppressionConditionAlertRuleIdOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionAlertRuleIdInput` via:
//
//	AlertProcessingRuleSuppressionConditionAlertRuleIdArgs{...}
type AlertProcessingRuleSuppressionConditionAlertRuleIdInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionAlertRuleIdOutput() AlertProcessingRuleSuppressionConditionAlertRuleIdOutput
	ToAlertProcessingRuleSuppressionConditionAlertRuleIdOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionAlertRuleIdOutput
}

type AlertProcessingRuleSuppressionConditionAlertRuleIdArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleSuppressionConditionAlertRuleIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionAlertRuleId)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionConditionAlertRuleIdArgs) ToAlertProcessingRuleSuppressionConditionAlertRuleIdOutput() AlertProcessingRuleSuppressionConditionAlertRuleIdOutput {
	return i.ToAlertProcessingRuleSuppressionConditionAlertRuleIdOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionAlertRuleIdArgs) ToAlertProcessingRuleSuppressionConditionAlertRuleIdOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertRuleIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionAlertRuleIdOutput)
}

func (i AlertProcessingRuleSuppressionConditionAlertRuleIdArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionAlertRuleId] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionAlertRuleId]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionAlertRuleIdOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleSuppressionConditionAlertRuleIdArgs) ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput() AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionAlertRuleIdArgs) ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionAlertRuleIdOutput).ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(ctx)
}

// AlertProcessingRuleSuppressionConditionAlertRuleIdPtrInput is an input type that accepts AlertProcessingRuleSuppressionConditionAlertRuleIdArgs, AlertProcessingRuleSuppressionConditionAlertRuleIdPtr and AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionAlertRuleIdPtrInput` via:
//
//	        AlertProcessingRuleSuppressionConditionAlertRuleIdArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleSuppressionConditionAlertRuleIdPtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput() AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput
	ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput
}

type alertProcessingRuleSuppressionConditionAlertRuleIdPtrType AlertProcessingRuleSuppressionConditionAlertRuleIdArgs

func AlertProcessingRuleSuppressionConditionAlertRuleIdPtr(v *AlertProcessingRuleSuppressionConditionAlertRuleIdArgs) AlertProcessingRuleSuppressionConditionAlertRuleIdPtrInput {
	return (*alertProcessingRuleSuppressionConditionAlertRuleIdPtrType)(v)
}

func (*alertProcessingRuleSuppressionConditionAlertRuleIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionAlertRuleId)(nil)).Elem()
}

func (i *alertProcessingRuleSuppressionConditionAlertRuleIdPtrType) ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput() AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleSuppressionConditionAlertRuleIdPtrType) ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput)
}

func (i *alertProcessingRuleSuppressionConditionAlertRuleIdPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionAlertRuleId] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionAlertRuleId]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionConditionAlertRuleIdOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionAlertRuleIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionAlertRuleId)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleIdOutput) ToAlertProcessingRuleSuppressionConditionAlertRuleIdOutput() AlertProcessingRuleSuppressionConditionAlertRuleIdOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleIdOutput) ToAlertProcessingRuleSuppressionConditionAlertRuleIdOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertRuleIdOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleIdOutput) ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput() AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput {
	return o.ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleIdOutput) ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleSuppressionConditionAlertRuleId) *AlertProcessingRuleSuppressionConditionAlertRuleId {
		return &v
	}).(AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput)
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleIdOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionAlertRuleId] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionAlertRuleId]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleSuppressionConditionAlertRuleIdOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionAlertRuleId) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleSuppressionConditionAlertRuleIdOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionAlertRuleId) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionAlertRuleId)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput) ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput() AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput) ToAlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionAlertRuleId] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionAlertRuleId]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput) Elem() AlertProcessingRuleSuppressionConditionAlertRuleIdOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionAlertRuleId) AlertProcessingRuleSuppressionConditionAlertRuleId {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleSuppressionConditionAlertRuleId
		return ret
	}).(AlertProcessingRuleSuppressionConditionAlertRuleIdOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionAlertRuleId) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionAlertRuleId) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionAlertRuleName struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleSuppressionConditionAlertRuleNameInput is an input type that accepts AlertProcessingRuleSuppressionConditionAlertRuleNameArgs and AlertProcessingRuleSuppressionConditionAlertRuleNameOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionAlertRuleNameInput` via:
//
//	AlertProcessingRuleSuppressionConditionAlertRuleNameArgs{...}
type AlertProcessingRuleSuppressionConditionAlertRuleNameInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionAlertRuleNameOutput() AlertProcessingRuleSuppressionConditionAlertRuleNameOutput
	ToAlertProcessingRuleSuppressionConditionAlertRuleNameOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionAlertRuleNameOutput
}

type AlertProcessingRuleSuppressionConditionAlertRuleNameArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleSuppressionConditionAlertRuleNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionAlertRuleName)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionConditionAlertRuleNameArgs) ToAlertProcessingRuleSuppressionConditionAlertRuleNameOutput() AlertProcessingRuleSuppressionConditionAlertRuleNameOutput {
	return i.ToAlertProcessingRuleSuppressionConditionAlertRuleNameOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionAlertRuleNameArgs) ToAlertProcessingRuleSuppressionConditionAlertRuleNameOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertRuleNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionAlertRuleNameOutput)
}

func (i AlertProcessingRuleSuppressionConditionAlertRuleNameArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionAlertRuleName] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionAlertRuleName]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionAlertRuleNameOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleSuppressionConditionAlertRuleNameArgs) ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput() AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionAlertRuleNameArgs) ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionAlertRuleNameOutput).ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutputWithContext(ctx)
}

// AlertProcessingRuleSuppressionConditionAlertRuleNamePtrInput is an input type that accepts AlertProcessingRuleSuppressionConditionAlertRuleNameArgs, AlertProcessingRuleSuppressionConditionAlertRuleNamePtr and AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionAlertRuleNamePtrInput` via:
//
//	        AlertProcessingRuleSuppressionConditionAlertRuleNameArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleSuppressionConditionAlertRuleNamePtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput() AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput
	ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput
}

type alertProcessingRuleSuppressionConditionAlertRuleNamePtrType AlertProcessingRuleSuppressionConditionAlertRuleNameArgs

func AlertProcessingRuleSuppressionConditionAlertRuleNamePtr(v *AlertProcessingRuleSuppressionConditionAlertRuleNameArgs) AlertProcessingRuleSuppressionConditionAlertRuleNamePtrInput {
	return (*alertProcessingRuleSuppressionConditionAlertRuleNamePtrType)(v)
}

func (*alertProcessingRuleSuppressionConditionAlertRuleNamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionAlertRuleName)(nil)).Elem()
}

func (i *alertProcessingRuleSuppressionConditionAlertRuleNamePtrType) ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput() AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleSuppressionConditionAlertRuleNamePtrType) ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput)
}

func (i *alertProcessingRuleSuppressionConditionAlertRuleNamePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionAlertRuleName] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionAlertRuleName]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionConditionAlertRuleNameOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionAlertRuleNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionAlertRuleName)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleNameOutput) ToAlertProcessingRuleSuppressionConditionAlertRuleNameOutput() AlertProcessingRuleSuppressionConditionAlertRuleNameOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleNameOutput) ToAlertProcessingRuleSuppressionConditionAlertRuleNameOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertRuleNameOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleNameOutput) ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput() AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput {
	return o.ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleNameOutput) ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleSuppressionConditionAlertRuleName) *AlertProcessingRuleSuppressionConditionAlertRuleName {
		return &v
	}).(AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput)
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleNameOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionAlertRuleName] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionAlertRuleName]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleSuppressionConditionAlertRuleNameOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionAlertRuleName) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleSuppressionConditionAlertRuleNameOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionAlertRuleName) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionAlertRuleName)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput) ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput() AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput) ToAlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionAlertRuleName] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionAlertRuleName]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput) Elem() AlertProcessingRuleSuppressionConditionAlertRuleNameOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionAlertRuleName) AlertProcessingRuleSuppressionConditionAlertRuleName {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleSuppressionConditionAlertRuleName
		return ret
	}).(AlertProcessingRuleSuppressionConditionAlertRuleNameOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionAlertRuleName) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionAlertRuleName) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionDescription struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleSuppressionConditionDescriptionInput is an input type that accepts AlertProcessingRuleSuppressionConditionDescriptionArgs and AlertProcessingRuleSuppressionConditionDescriptionOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionDescriptionInput` via:
//
//	AlertProcessingRuleSuppressionConditionDescriptionArgs{...}
type AlertProcessingRuleSuppressionConditionDescriptionInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionDescriptionOutput() AlertProcessingRuleSuppressionConditionDescriptionOutput
	ToAlertProcessingRuleSuppressionConditionDescriptionOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionDescriptionOutput
}

type AlertProcessingRuleSuppressionConditionDescriptionArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies a list of values to match for a given condition.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleSuppressionConditionDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionDescription)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionConditionDescriptionArgs) ToAlertProcessingRuleSuppressionConditionDescriptionOutput() AlertProcessingRuleSuppressionConditionDescriptionOutput {
	return i.ToAlertProcessingRuleSuppressionConditionDescriptionOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionDescriptionArgs) ToAlertProcessingRuleSuppressionConditionDescriptionOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionDescriptionOutput)
}

func (i AlertProcessingRuleSuppressionConditionDescriptionArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionDescription] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionDescription]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionDescriptionOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleSuppressionConditionDescriptionArgs) ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutput() AlertProcessingRuleSuppressionConditionDescriptionPtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionDescriptionArgs) ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionDescriptionOutput).ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutputWithContext(ctx)
}

// AlertProcessingRuleSuppressionConditionDescriptionPtrInput is an input type that accepts AlertProcessingRuleSuppressionConditionDescriptionArgs, AlertProcessingRuleSuppressionConditionDescriptionPtr and AlertProcessingRuleSuppressionConditionDescriptionPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionDescriptionPtrInput` via:
//
//	        AlertProcessingRuleSuppressionConditionDescriptionArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleSuppressionConditionDescriptionPtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutput() AlertProcessingRuleSuppressionConditionDescriptionPtrOutput
	ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionDescriptionPtrOutput
}

type alertProcessingRuleSuppressionConditionDescriptionPtrType AlertProcessingRuleSuppressionConditionDescriptionArgs

func AlertProcessingRuleSuppressionConditionDescriptionPtr(v *AlertProcessingRuleSuppressionConditionDescriptionArgs) AlertProcessingRuleSuppressionConditionDescriptionPtrInput {
	return (*alertProcessingRuleSuppressionConditionDescriptionPtrType)(v)
}

func (*alertProcessingRuleSuppressionConditionDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionDescription)(nil)).Elem()
}

func (i *alertProcessingRuleSuppressionConditionDescriptionPtrType) ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutput() AlertProcessingRuleSuppressionConditionDescriptionPtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleSuppressionConditionDescriptionPtrType) ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionDescriptionPtrOutput)
}

func (i *alertProcessingRuleSuppressionConditionDescriptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionDescription] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionDescription]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionConditionDescriptionOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionDescription)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionDescriptionOutput) ToAlertProcessingRuleSuppressionConditionDescriptionOutput() AlertProcessingRuleSuppressionConditionDescriptionOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionDescriptionOutput) ToAlertProcessingRuleSuppressionConditionDescriptionOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionDescriptionOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionDescriptionOutput) ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutput() AlertProcessingRuleSuppressionConditionDescriptionPtrOutput {
	return o.ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleSuppressionConditionDescriptionOutput) ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionDescriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleSuppressionConditionDescription) *AlertProcessingRuleSuppressionConditionDescription {
		return &v
	}).(AlertProcessingRuleSuppressionConditionDescriptionPtrOutput)
}

func (o AlertProcessingRuleSuppressionConditionDescriptionOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionDescription] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionDescription]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleSuppressionConditionDescriptionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionDescription) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleSuppressionConditionDescriptionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionDescription) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionDescriptionPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionDescription)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionDescriptionPtrOutput) ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutput() AlertProcessingRuleSuppressionConditionDescriptionPtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionDescriptionPtrOutput) ToAlertProcessingRuleSuppressionConditionDescriptionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionDescriptionPtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionDescriptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionDescription] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionDescription]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionConditionDescriptionPtrOutput) Elem() AlertProcessingRuleSuppressionConditionDescriptionOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionDescription) AlertProcessingRuleSuppressionConditionDescription {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleSuppressionConditionDescription
		return ret
	}).(AlertProcessingRuleSuppressionConditionDescriptionOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleSuppressionConditionDescriptionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionDescription) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies a list of values to match for a given condition.
func (o AlertProcessingRuleSuppressionConditionDescriptionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionDescription) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionMonitorCondition struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator string `pulumi:"operator"`
	// Specifies a list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleSuppressionConditionMonitorConditionInput is an input type that accepts AlertProcessingRuleSuppressionConditionMonitorConditionArgs and AlertProcessingRuleSuppressionConditionMonitorConditionOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionMonitorConditionInput` via:
//
//	AlertProcessingRuleSuppressionConditionMonitorConditionArgs{...}
type AlertProcessingRuleSuppressionConditionMonitorConditionInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionMonitorConditionOutput() AlertProcessingRuleSuppressionConditionMonitorConditionOutput
	ToAlertProcessingRuleSuppressionConditionMonitorConditionOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionMonitorConditionOutput
}

type AlertProcessingRuleSuppressionConditionMonitorConditionArgs struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies a list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleSuppressionConditionMonitorConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionMonitorCondition)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionConditionMonitorConditionArgs) ToAlertProcessingRuleSuppressionConditionMonitorConditionOutput() AlertProcessingRuleSuppressionConditionMonitorConditionOutput {
	return i.ToAlertProcessingRuleSuppressionConditionMonitorConditionOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionMonitorConditionArgs) ToAlertProcessingRuleSuppressionConditionMonitorConditionOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionMonitorConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionMonitorConditionOutput)
}

func (i AlertProcessingRuleSuppressionConditionMonitorConditionArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionMonitorCondition] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionMonitorCondition]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionMonitorConditionOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleSuppressionConditionMonitorConditionArgs) ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput() AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionMonitorConditionArgs) ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionMonitorConditionOutput).ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutputWithContext(ctx)
}

// AlertProcessingRuleSuppressionConditionMonitorConditionPtrInput is an input type that accepts AlertProcessingRuleSuppressionConditionMonitorConditionArgs, AlertProcessingRuleSuppressionConditionMonitorConditionPtr and AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionMonitorConditionPtrInput` via:
//
//	        AlertProcessingRuleSuppressionConditionMonitorConditionArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleSuppressionConditionMonitorConditionPtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput() AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput
	ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput
}

type alertProcessingRuleSuppressionConditionMonitorConditionPtrType AlertProcessingRuleSuppressionConditionMonitorConditionArgs

func AlertProcessingRuleSuppressionConditionMonitorConditionPtr(v *AlertProcessingRuleSuppressionConditionMonitorConditionArgs) AlertProcessingRuleSuppressionConditionMonitorConditionPtrInput {
	return (*alertProcessingRuleSuppressionConditionMonitorConditionPtrType)(v)
}

func (*alertProcessingRuleSuppressionConditionMonitorConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionMonitorCondition)(nil)).Elem()
}

func (i *alertProcessingRuleSuppressionConditionMonitorConditionPtrType) ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput() AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleSuppressionConditionMonitorConditionPtrType) ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput)
}

func (i *alertProcessingRuleSuppressionConditionMonitorConditionPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionMonitorCondition] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionMonitorCondition]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionConditionMonitorConditionOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionMonitorConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionMonitorCondition)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionMonitorConditionOutput) ToAlertProcessingRuleSuppressionConditionMonitorConditionOutput() AlertProcessingRuleSuppressionConditionMonitorConditionOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionMonitorConditionOutput) ToAlertProcessingRuleSuppressionConditionMonitorConditionOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionMonitorConditionOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionMonitorConditionOutput) ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput() AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput {
	return o.ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleSuppressionConditionMonitorConditionOutput) ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleSuppressionConditionMonitorCondition) *AlertProcessingRuleSuppressionConditionMonitorCondition {
		return &v
	}).(AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput)
}

func (o AlertProcessingRuleSuppressionConditionMonitorConditionOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionMonitorCondition] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionMonitorCondition]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleSuppressionConditionMonitorConditionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionMonitorCondition) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies a list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
func (o AlertProcessingRuleSuppressionConditionMonitorConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionMonitorCondition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionMonitorCondition)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput) ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput() AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput) ToAlertProcessingRuleSuppressionConditionMonitorConditionPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionMonitorCondition] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionMonitorCondition]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput) Elem() AlertProcessingRuleSuppressionConditionMonitorConditionOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionMonitorCondition) AlertProcessingRuleSuppressionConditionMonitorCondition {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleSuppressionConditionMonitorCondition
		return ret
	}).(AlertProcessingRuleSuppressionConditionMonitorConditionOutput)
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionMonitorCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies a list of values to match for a given condition. Possible values are `Fired` and `Resolved`.
func (o AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionMonitorCondition) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionMonitorService struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Prometheus`, `Resource Health`, `Smart Detector`, and `VM Insights - Health`.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleSuppressionConditionMonitorServiceInput is an input type that accepts AlertProcessingRuleSuppressionConditionMonitorServiceArgs and AlertProcessingRuleSuppressionConditionMonitorServiceOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionMonitorServiceInput` via:
//
//	AlertProcessingRuleSuppressionConditionMonitorServiceArgs{...}
type AlertProcessingRuleSuppressionConditionMonitorServiceInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionMonitorServiceOutput() AlertProcessingRuleSuppressionConditionMonitorServiceOutput
	ToAlertProcessingRuleSuppressionConditionMonitorServiceOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionMonitorServiceOutput
}

type AlertProcessingRuleSuppressionConditionMonitorServiceArgs struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Prometheus`, `Resource Health`, `Smart Detector`, and `VM Insights - Health`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleSuppressionConditionMonitorServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionMonitorService)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionConditionMonitorServiceArgs) ToAlertProcessingRuleSuppressionConditionMonitorServiceOutput() AlertProcessingRuleSuppressionConditionMonitorServiceOutput {
	return i.ToAlertProcessingRuleSuppressionConditionMonitorServiceOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionMonitorServiceArgs) ToAlertProcessingRuleSuppressionConditionMonitorServiceOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionMonitorServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionMonitorServiceOutput)
}

func (i AlertProcessingRuleSuppressionConditionMonitorServiceArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionMonitorService] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionMonitorService]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionMonitorServiceOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleSuppressionConditionMonitorServiceArgs) ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutput() AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionMonitorServiceArgs) ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionMonitorServiceOutput).ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutputWithContext(ctx)
}

// AlertProcessingRuleSuppressionConditionMonitorServicePtrInput is an input type that accepts AlertProcessingRuleSuppressionConditionMonitorServiceArgs, AlertProcessingRuleSuppressionConditionMonitorServicePtr and AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionMonitorServicePtrInput` via:
//
//	        AlertProcessingRuleSuppressionConditionMonitorServiceArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleSuppressionConditionMonitorServicePtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutput() AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput
	ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput
}

type alertProcessingRuleSuppressionConditionMonitorServicePtrType AlertProcessingRuleSuppressionConditionMonitorServiceArgs

func AlertProcessingRuleSuppressionConditionMonitorServicePtr(v *AlertProcessingRuleSuppressionConditionMonitorServiceArgs) AlertProcessingRuleSuppressionConditionMonitorServicePtrInput {
	return (*alertProcessingRuleSuppressionConditionMonitorServicePtrType)(v)
}

func (*alertProcessingRuleSuppressionConditionMonitorServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionMonitorService)(nil)).Elem()
}

func (i *alertProcessingRuleSuppressionConditionMonitorServicePtrType) ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutput() AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleSuppressionConditionMonitorServicePtrType) ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput)
}

func (i *alertProcessingRuleSuppressionConditionMonitorServicePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionMonitorService] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionMonitorService]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionConditionMonitorServiceOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionMonitorServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionMonitorService)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionMonitorServiceOutput) ToAlertProcessingRuleSuppressionConditionMonitorServiceOutput() AlertProcessingRuleSuppressionConditionMonitorServiceOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionMonitorServiceOutput) ToAlertProcessingRuleSuppressionConditionMonitorServiceOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionMonitorServiceOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionMonitorServiceOutput) ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutput() AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput {
	return o.ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleSuppressionConditionMonitorServiceOutput) ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleSuppressionConditionMonitorService) *AlertProcessingRuleSuppressionConditionMonitorService {
		return &v
	}).(AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput)
}

func (o AlertProcessingRuleSuppressionConditionMonitorServiceOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionMonitorService] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionMonitorService]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleSuppressionConditionMonitorServiceOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionMonitorService) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Prometheus`, `Resource Health`, `Smart Detector`, and `VM Insights - Health`.
func (o AlertProcessingRuleSuppressionConditionMonitorServiceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionMonitorService) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionMonitorService)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput) ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutput() AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput) ToAlertProcessingRuleSuppressionConditionMonitorServicePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionMonitorService] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionMonitorService]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput) Elem() AlertProcessingRuleSuppressionConditionMonitorServiceOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionMonitorService) AlertProcessingRuleSuppressionConditionMonitorService {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleSuppressionConditionMonitorService
		return ret
	}).(AlertProcessingRuleSuppressionConditionMonitorServiceOutput)
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionMonitorService) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. Possible values are `ActivityLog Administrative`, `ActivityLog Autoscale`, `ActivityLog Policy`, `ActivityLog Recommendation`, `ActivityLog Security`, `Application Insights`, `Azure Backup`, `Azure Stack Edge`, `Azure Stack Hub`, `Custom`, `Data Box Gateway`, `Health Platform`, `Log Alerts V2`, `Log Analytics`, `Platform`, `Prometheus`, `Resource Health`, `Smart Detector`, and `VM Insights - Health`.
func (o AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionMonitorService) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionSeverity struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator string `pulumi:"operator"`
	// Specifies list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleSuppressionConditionSeverityInput is an input type that accepts AlertProcessingRuleSuppressionConditionSeverityArgs and AlertProcessingRuleSuppressionConditionSeverityOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionSeverityInput` via:
//
//	AlertProcessingRuleSuppressionConditionSeverityArgs{...}
type AlertProcessingRuleSuppressionConditionSeverityInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionSeverityOutput() AlertProcessingRuleSuppressionConditionSeverityOutput
	ToAlertProcessingRuleSuppressionConditionSeverityOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionSeverityOutput
}

type AlertProcessingRuleSuppressionConditionSeverityArgs struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleSuppressionConditionSeverityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionSeverity)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionConditionSeverityArgs) ToAlertProcessingRuleSuppressionConditionSeverityOutput() AlertProcessingRuleSuppressionConditionSeverityOutput {
	return i.ToAlertProcessingRuleSuppressionConditionSeverityOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionSeverityArgs) ToAlertProcessingRuleSuppressionConditionSeverityOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionSeverityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionSeverityOutput)
}

func (i AlertProcessingRuleSuppressionConditionSeverityArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionSeverity] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionSeverity]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionSeverityOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleSuppressionConditionSeverityArgs) ToAlertProcessingRuleSuppressionConditionSeverityPtrOutput() AlertProcessingRuleSuppressionConditionSeverityPtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionSeverityPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionSeverityArgs) ToAlertProcessingRuleSuppressionConditionSeverityPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionSeverityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionSeverityOutput).ToAlertProcessingRuleSuppressionConditionSeverityPtrOutputWithContext(ctx)
}

// AlertProcessingRuleSuppressionConditionSeverityPtrInput is an input type that accepts AlertProcessingRuleSuppressionConditionSeverityArgs, AlertProcessingRuleSuppressionConditionSeverityPtr and AlertProcessingRuleSuppressionConditionSeverityPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionSeverityPtrInput` via:
//
//	        AlertProcessingRuleSuppressionConditionSeverityArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleSuppressionConditionSeverityPtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionSeverityPtrOutput() AlertProcessingRuleSuppressionConditionSeverityPtrOutput
	ToAlertProcessingRuleSuppressionConditionSeverityPtrOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionSeverityPtrOutput
}

type alertProcessingRuleSuppressionConditionSeverityPtrType AlertProcessingRuleSuppressionConditionSeverityArgs

func AlertProcessingRuleSuppressionConditionSeverityPtr(v *AlertProcessingRuleSuppressionConditionSeverityArgs) AlertProcessingRuleSuppressionConditionSeverityPtrInput {
	return (*alertProcessingRuleSuppressionConditionSeverityPtrType)(v)
}

func (*alertProcessingRuleSuppressionConditionSeverityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionSeverity)(nil)).Elem()
}

func (i *alertProcessingRuleSuppressionConditionSeverityPtrType) ToAlertProcessingRuleSuppressionConditionSeverityPtrOutput() AlertProcessingRuleSuppressionConditionSeverityPtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionSeverityPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleSuppressionConditionSeverityPtrType) ToAlertProcessingRuleSuppressionConditionSeverityPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionSeverityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionSeverityPtrOutput)
}

func (i *alertProcessingRuleSuppressionConditionSeverityPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionSeverity] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionSeverity]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionSeverityPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionConditionSeverityOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionSeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionSeverity)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionSeverityOutput) ToAlertProcessingRuleSuppressionConditionSeverityOutput() AlertProcessingRuleSuppressionConditionSeverityOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionSeverityOutput) ToAlertProcessingRuleSuppressionConditionSeverityOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionSeverityOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionSeverityOutput) ToAlertProcessingRuleSuppressionConditionSeverityPtrOutput() AlertProcessingRuleSuppressionConditionSeverityPtrOutput {
	return o.ToAlertProcessingRuleSuppressionConditionSeverityPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleSuppressionConditionSeverityOutput) ToAlertProcessingRuleSuppressionConditionSeverityPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionSeverityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleSuppressionConditionSeverity) *AlertProcessingRuleSuppressionConditionSeverity {
		return &v
	}).(AlertProcessingRuleSuppressionConditionSeverityPtrOutput)
}

func (o AlertProcessingRuleSuppressionConditionSeverityOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionSeverity] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionSeverity]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleSuppressionConditionSeverityOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionSeverity) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
func (o AlertProcessingRuleSuppressionConditionSeverityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionSeverity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionSeverityPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionSeverityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionSeverity)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionSeverityPtrOutput) ToAlertProcessingRuleSuppressionConditionSeverityPtrOutput() AlertProcessingRuleSuppressionConditionSeverityPtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionSeverityPtrOutput) ToAlertProcessingRuleSuppressionConditionSeverityPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionSeverityPtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionSeverityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionSeverity] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionSeverity]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionConditionSeverityPtrOutput) Elem() AlertProcessingRuleSuppressionConditionSeverityOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionSeverity) AlertProcessingRuleSuppressionConditionSeverity {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleSuppressionConditionSeverity
		return ret
	}).(AlertProcessingRuleSuppressionConditionSeverityOutput)
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleSuppressionConditionSeverityPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionSeverity) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies list of values to match for a given condition. Possible values are `Sev0`, `Sev1`, `Sev2`, `Sev3`, and `Sev4`.
func (o AlertProcessingRuleSuppressionConditionSeverityPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionSeverity) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionSignalType struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator string `pulumi:"operator"`
	// Specifies a list of values to match for a given condition. Possible values are `Metric`, `Log`, `Unknown`, and `Health`.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleSuppressionConditionSignalTypeInput is an input type that accepts AlertProcessingRuleSuppressionConditionSignalTypeArgs and AlertProcessingRuleSuppressionConditionSignalTypeOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionSignalTypeInput` via:
//
//	AlertProcessingRuleSuppressionConditionSignalTypeArgs{...}
type AlertProcessingRuleSuppressionConditionSignalTypeInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionSignalTypeOutput() AlertProcessingRuleSuppressionConditionSignalTypeOutput
	ToAlertProcessingRuleSuppressionConditionSignalTypeOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionSignalTypeOutput
}

type AlertProcessingRuleSuppressionConditionSignalTypeArgs struct {
	// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies a list of values to match for a given condition. Possible values are `Metric`, `Log`, `Unknown`, and `Health`.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleSuppressionConditionSignalTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionSignalType)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionConditionSignalTypeArgs) ToAlertProcessingRuleSuppressionConditionSignalTypeOutput() AlertProcessingRuleSuppressionConditionSignalTypeOutput {
	return i.ToAlertProcessingRuleSuppressionConditionSignalTypeOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionSignalTypeArgs) ToAlertProcessingRuleSuppressionConditionSignalTypeOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionSignalTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionSignalTypeOutput)
}

func (i AlertProcessingRuleSuppressionConditionSignalTypeArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionSignalType] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionSignalType]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionSignalTypeOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleSuppressionConditionSignalTypeArgs) ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutput() AlertProcessingRuleSuppressionConditionSignalTypePtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionSignalTypeArgs) ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionSignalTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionSignalTypeOutput).ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutputWithContext(ctx)
}

// AlertProcessingRuleSuppressionConditionSignalTypePtrInput is an input type that accepts AlertProcessingRuleSuppressionConditionSignalTypeArgs, AlertProcessingRuleSuppressionConditionSignalTypePtr and AlertProcessingRuleSuppressionConditionSignalTypePtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionSignalTypePtrInput` via:
//
//	        AlertProcessingRuleSuppressionConditionSignalTypeArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleSuppressionConditionSignalTypePtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutput() AlertProcessingRuleSuppressionConditionSignalTypePtrOutput
	ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionSignalTypePtrOutput
}

type alertProcessingRuleSuppressionConditionSignalTypePtrType AlertProcessingRuleSuppressionConditionSignalTypeArgs

func AlertProcessingRuleSuppressionConditionSignalTypePtr(v *AlertProcessingRuleSuppressionConditionSignalTypeArgs) AlertProcessingRuleSuppressionConditionSignalTypePtrInput {
	return (*alertProcessingRuleSuppressionConditionSignalTypePtrType)(v)
}

func (*alertProcessingRuleSuppressionConditionSignalTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionSignalType)(nil)).Elem()
}

func (i *alertProcessingRuleSuppressionConditionSignalTypePtrType) ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutput() AlertProcessingRuleSuppressionConditionSignalTypePtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleSuppressionConditionSignalTypePtrType) ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionSignalTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionSignalTypePtrOutput)
}

func (i *alertProcessingRuleSuppressionConditionSignalTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionSignalType] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionSignalType]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionConditionSignalTypeOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionSignalTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionSignalType)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionSignalTypeOutput) ToAlertProcessingRuleSuppressionConditionSignalTypeOutput() AlertProcessingRuleSuppressionConditionSignalTypeOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionSignalTypeOutput) ToAlertProcessingRuleSuppressionConditionSignalTypeOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionSignalTypeOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionSignalTypeOutput) ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutput() AlertProcessingRuleSuppressionConditionSignalTypePtrOutput {
	return o.ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleSuppressionConditionSignalTypeOutput) ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionSignalTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleSuppressionConditionSignalType) *AlertProcessingRuleSuppressionConditionSignalType {
		return &v
	}).(AlertProcessingRuleSuppressionConditionSignalTypePtrOutput)
}

func (o AlertProcessingRuleSuppressionConditionSignalTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionSignalType] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionSignalType]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleSuppressionConditionSignalTypeOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionSignalType) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies a list of values to match for a given condition. Possible values are `Metric`, `Log`, `Unknown`, and `Health`.
func (o AlertProcessingRuleSuppressionConditionSignalTypeOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionSignalType) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionSignalTypePtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionSignalTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionSignalType)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionSignalTypePtrOutput) ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutput() AlertProcessingRuleSuppressionConditionSignalTypePtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionSignalTypePtrOutput) ToAlertProcessingRuleSuppressionConditionSignalTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionSignalTypePtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionSignalTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionSignalType] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionSignalType]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionConditionSignalTypePtrOutput) Elem() AlertProcessingRuleSuppressionConditionSignalTypeOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionSignalType) AlertProcessingRuleSuppressionConditionSignalType {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleSuppressionConditionSignalType
		return ret
	}).(AlertProcessingRuleSuppressionConditionSignalTypeOutput)
}

// The operator for a given condition. Possible values are `Equals` and `NotEquals`.
func (o AlertProcessingRuleSuppressionConditionSignalTypePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionSignalType) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Specifies a list of values to match for a given condition. Possible values are `Metric`, `Log`, `Unknown`, and `Health`.
func (o AlertProcessingRuleSuppressionConditionSignalTypePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionSignalType) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionTargetResource struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource IDs.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleSuppressionConditionTargetResourceInput is an input type that accepts AlertProcessingRuleSuppressionConditionTargetResourceArgs and AlertProcessingRuleSuppressionConditionTargetResourceOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionTargetResourceInput` via:
//
//	AlertProcessingRuleSuppressionConditionTargetResourceArgs{...}
type AlertProcessingRuleSuppressionConditionTargetResourceInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionTargetResourceOutput() AlertProcessingRuleSuppressionConditionTargetResourceOutput
	ToAlertProcessingRuleSuppressionConditionTargetResourceOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionTargetResourceOutput
}

type AlertProcessingRuleSuppressionConditionTargetResourceArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource IDs.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleSuppressionConditionTargetResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionTargetResource)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceArgs) ToAlertProcessingRuleSuppressionConditionTargetResourceOutput() AlertProcessingRuleSuppressionConditionTargetResourceOutput {
	return i.ToAlertProcessingRuleSuppressionConditionTargetResourceOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceArgs) ToAlertProcessingRuleSuppressionConditionTargetResourceOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionTargetResourceOutput)
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionTargetResource] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionTargetResource]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionTargetResourceOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceArgs) ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutput() AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceArgs) ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionTargetResourceOutput).ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutputWithContext(ctx)
}

// AlertProcessingRuleSuppressionConditionTargetResourcePtrInput is an input type that accepts AlertProcessingRuleSuppressionConditionTargetResourceArgs, AlertProcessingRuleSuppressionConditionTargetResourcePtr and AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionTargetResourcePtrInput` via:
//
//	        AlertProcessingRuleSuppressionConditionTargetResourceArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleSuppressionConditionTargetResourcePtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutput() AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput
	ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput
}

type alertProcessingRuleSuppressionConditionTargetResourcePtrType AlertProcessingRuleSuppressionConditionTargetResourceArgs

func AlertProcessingRuleSuppressionConditionTargetResourcePtr(v *AlertProcessingRuleSuppressionConditionTargetResourceArgs) AlertProcessingRuleSuppressionConditionTargetResourcePtrInput {
	return (*alertProcessingRuleSuppressionConditionTargetResourcePtrType)(v)
}

func (*alertProcessingRuleSuppressionConditionTargetResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionTargetResource)(nil)).Elem()
}

func (i *alertProcessingRuleSuppressionConditionTargetResourcePtrType) ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutput() AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleSuppressionConditionTargetResourcePtrType) ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput)
}

func (i *alertProcessingRuleSuppressionConditionTargetResourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionTargetResource] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionTargetResource]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionConditionTargetResourceOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionTargetResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionTargetResource)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceOutput) ToAlertProcessingRuleSuppressionConditionTargetResourceOutput() AlertProcessingRuleSuppressionConditionTargetResourceOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceOutput) ToAlertProcessingRuleSuppressionConditionTargetResourceOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourceOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceOutput) ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutput() AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput {
	return o.ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceOutput) ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleSuppressionConditionTargetResource) *AlertProcessingRuleSuppressionConditionTargetResource {
		return &v
	}).(AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput)
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionTargetResource] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionTargetResource]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleSuppressionConditionTargetResourceOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionTargetResource) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. The values should be valid resource IDs.
func (o AlertProcessingRuleSuppressionConditionTargetResourceOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionTargetResource) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionTargetResource)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput) ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutput() AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput) ToAlertProcessingRuleSuppressionConditionTargetResourcePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionTargetResource] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionTargetResource]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput) Elem() AlertProcessingRuleSuppressionConditionTargetResourceOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionTargetResource) AlertProcessingRuleSuppressionConditionTargetResource {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleSuppressionConditionTargetResource
		return ret
	}).(AlertProcessingRuleSuppressionConditionTargetResourceOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionTargetResource) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. The values should be valid resource IDs.
func (o AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionTargetResource) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionTargetResourceGroup struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource group IDs.
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleSuppressionConditionTargetResourceGroupInput is an input type that accepts AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs and AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionTargetResourceGroupInput` via:
//
//	AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs{...}
type AlertProcessingRuleSuppressionConditionTargetResourceGroupInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionTargetResourceGroupOutput() AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput
	ToAlertProcessingRuleSuppressionConditionTargetResourceGroupOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput
}

type AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource group IDs.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionTargetResourceGroup)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs) ToAlertProcessingRuleSuppressionConditionTargetResourceGroupOutput() AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput {
	return i.ToAlertProcessingRuleSuppressionConditionTargetResourceGroupOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs) ToAlertProcessingRuleSuppressionConditionTargetResourceGroupOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput)
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionTargetResourceGroup] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionTargetResourceGroup]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionTargetResourceGroupOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs) ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput() AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs) ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput).ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutputWithContext(ctx)
}

// AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrInput is an input type that accepts AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs, AlertProcessingRuleSuppressionConditionTargetResourceGroupPtr and AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrInput` via:
//
//	        AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput() AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput
	ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput
}

type alertProcessingRuleSuppressionConditionTargetResourceGroupPtrType AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs

func AlertProcessingRuleSuppressionConditionTargetResourceGroupPtr(v *AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs) AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrInput {
	return (*alertProcessingRuleSuppressionConditionTargetResourceGroupPtrType)(v)
}

func (*alertProcessingRuleSuppressionConditionTargetResourceGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionTargetResourceGroup)(nil)).Elem()
}

func (i *alertProcessingRuleSuppressionConditionTargetResourceGroupPtrType) ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput() AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleSuppressionConditionTargetResourceGroupPtrType) ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput)
}

func (i *alertProcessingRuleSuppressionConditionTargetResourceGroupPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionTargetResourceGroup] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionTargetResourceGroup]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionTargetResourceGroup)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput) ToAlertProcessingRuleSuppressionConditionTargetResourceGroupOutput() AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput) ToAlertProcessingRuleSuppressionConditionTargetResourceGroupOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput) ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput() AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput {
	return o.ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput) ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleSuppressionConditionTargetResourceGroup) *AlertProcessingRuleSuppressionConditionTargetResourceGroup {
		return &v
	}).(AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput)
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionTargetResourceGroup] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionTargetResourceGroup]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionTargetResourceGroup) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. The values should be valid resource group IDs.
func (o AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionTargetResourceGroup) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionTargetResourceGroup)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput) ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput() AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput) ToAlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionTargetResourceGroup] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionTargetResourceGroup]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput) Elem() AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionTargetResourceGroup) AlertProcessingRuleSuppressionConditionTargetResourceGroup {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleSuppressionConditionTargetResourceGroup
		return ret
	}).(AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionTargetResourceGroup) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. The values should be valid resource group IDs.
func (o AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionTargetResourceGroup) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionTargetResourceType struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator string `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource types. (e.g. Microsoft.Compute/VirtualMachines)
	Values []string `pulumi:"values"`
}

// AlertProcessingRuleSuppressionConditionTargetResourceTypeInput is an input type that accepts AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs and AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionTargetResourceTypeInput` via:
//
//	AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs{...}
type AlertProcessingRuleSuppressionConditionTargetResourceTypeInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionTargetResourceTypeOutput() AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput
	ToAlertProcessingRuleSuppressionConditionTargetResourceTypeOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput
}

type AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs struct {
	// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of values to match for a given condition. The values should be valid resource types. (e.g. Microsoft.Compute/VirtualMachines)
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionTargetResourceType)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs) ToAlertProcessingRuleSuppressionConditionTargetResourceTypeOutput() AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput {
	return i.ToAlertProcessingRuleSuppressionConditionTargetResourceTypeOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs) ToAlertProcessingRuleSuppressionConditionTargetResourceTypeOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput)
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionTargetResourceType] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionTargetResourceType]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionTargetResourceTypeOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs) ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput() AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs) ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput).ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(ctx)
}

// AlertProcessingRuleSuppressionConditionTargetResourceTypePtrInput is an input type that accepts AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs, AlertProcessingRuleSuppressionConditionTargetResourceTypePtr and AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionConditionTargetResourceTypePtrInput` via:
//
//	        AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleSuppressionConditionTargetResourceTypePtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput() AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput
	ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(context.Context) AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput
}

type alertProcessingRuleSuppressionConditionTargetResourceTypePtrType AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs

func AlertProcessingRuleSuppressionConditionTargetResourceTypePtr(v *AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs) AlertProcessingRuleSuppressionConditionTargetResourceTypePtrInput {
	return (*alertProcessingRuleSuppressionConditionTargetResourceTypePtrType)(v)
}

func (*alertProcessingRuleSuppressionConditionTargetResourceTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionTargetResourceType)(nil)).Elem()
}

func (i *alertProcessingRuleSuppressionConditionTargetResourceTypePtrType) ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput() AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput {
	return i.ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleSuppressionConditionTargetResourceTypePtrType) ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput)
}

func (i *alertProcessingRuleSuppressionConditionTargetResourceTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionTargetResourceType] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionTargetResourceType]{
		OutputState: i.ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionConditionTargetResourceType)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput) ToAlertProcessingRuleSuppressionConditionTargetResourceTypeOutput() AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput) ToAlertProcessingRuleSuppressionConditionTargetResourceTypeOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput) ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput() AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput {
	return o.ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput) ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleSuppressionConditionTargetResourceType) *AlertProcessingRuleSuppressionConditionTargetResourceType {
		return &v
	}).(AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput)
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionConditionTargetResourceType] {
	return pulumix.Output[AlertProcessingRuleSuppressionConditionTargetResourceType]{
		OutputState: o.OutputState,
	}
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionTargetResourceType) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of values to match for a given condition. The values should be valid resource types. (e.g. Microsoft.Compute/VirtualMachines)
func (o AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionConditionTargetResourceType) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionConditionTargetResourceType)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput) ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput() AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput) ToAlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionConditionTargetResourceType] {
	return pulumix.Output[*AlertProcessingRuleSuppressionConditionTargetResourceType]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput) Elem() AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionTargetResourceType) AlertProcessingRuleSuppressionConditionTargetResourceType {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleSuppressionConditionTargetResourceType
		return ret
	}).(AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput)
}

// The operator for a given condition. Possible values are `Equals`, `NotEquals`, `Contains`, and `DoesNotContain`.
func (o AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionTargetResourceType) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// A list of values to match for a given condition. The values should be valid resource types. (e.g. Microsoft.Compute/VirtualMachines)
func (o AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionConditionTargetResourceType) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type AlertProcessingRuleSuppressionSchedule struct {
	// Specifies the Alert Processing Rule effective start time (Y-m-d'T'H:M:S).
	EffectiveFrom *string `pulumi:"effectiveFrom"`
	// Specifies the Alert Processing Rule effective end time (Y-m-d'T'H:M:S).
	EffectiveUntil *string `pulumi:"effectiveUntil"`
	// A `recurrence` block as defined above.
	Recurrence *AlertProcessingRuleSuppressionScheduleRecurrence `pulumi:"recurrence"`
	// The time zone (e.g. Pacific Standard time, Eastern Standard Time). Defaults to `UTC`. [possible values are defined here](<https://docs.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)>).
	TimeZone *string `pulumi:"timeZone"`
}

// AlertProcessingRuleSuppressionScheduleInput is an input type that accepts AlertProcessingRuleSuppressionScheduleArgs and AlertProcessingRuleSuppressionScheduleOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionScheduleInput` via:
//
//	AlertProcessingRuleSuppressionScheduleArgs{...}
type AlertProcessingRuleSuppressionScheduleInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionScheduleOutput() AlertProcessingRuleSuppressionScheduleOutput
	ToAlertProcessingRuleSuppressionScheduleOutputWithContext(context.Context) AlertProcessingRuleSuppressionScheduleOutput
}

type AlertProcessingRuleSuppressionScheduleArgs struct {
	// Specifies the Alert Processing Rule effective start time (Y-m-d'T'H:M:S).
	EffectiveFrom pulumi.StringPtrInput `pulumi:"effectiveFrom"`
	// Specifies the Alert Processing Rule effective end time (Y-m-d'T'H:M:S).
	EffectiveUntil pulumi.StringPtrInput `pulumi:"effectiveUntil"`
	// A `recurrence` block as defined above.
	Recurrence AlertProcessingRuleSuppressionScheduleRecurrencePtrInput `pulumi:"recurrence"`
	// The time zone (e.g. Pacific Standard time, Eastern Standard Time). Defaults to `UTC`. [possible values are defined here](<https://docs.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)>).
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (AlertProcessingRuleSuppressionScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionSchedule)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionScheduleArgs) ToAlertProcessingRuleSuppressionScheduleOutput() AlertProcessingRuleSuppressionScheduleOutput {
	return i.ToAlertProcessingRuleSuppressionScheduleOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionScheduleArgs) ToAlertProcessingRuleSuppressionScheduleOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionScheduleOutput)
}

func (i AlertProcessingRuleSuppressionScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionSchedule] {
	return pulumix.Output[AlertProcessingRuleSuppressionSchedule]{
		OutputState: i.ToAlertProcessingRuleSuppressionScheduleOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleSuppressionScheduleArgs) ToAlertProcessingRuleSuppressionSchedulePtrOutput() AlertProcessingRuleSuppressionSchedulePtrOutput {
	return i.ToAlertProcessingRuleSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionScheduleArgs) ToAlertProcessingRuleSuppressionSchedulePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionScheduleOutput).ToAlertProcessingRuleSuppressionSchedulePtrOutputWithContext(ctx)
}

// AlertProcessingRuleSuppressionSchedulePtrInput is an input type that accepts AlertProcessingRuleSuppressionScheduleArgs, AlertProcessingRuleSuppressionSchedulePtr and AlertProcessingRuleSuppressionSchedulePtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionSchedulePtrInput` via:
//
//	        AlertProcessingRuleSuppressionScheduleArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleSuppressionSchedulePtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionSchedulePtrOutput() AlertProcessingRuleSuppressionSchedulePtrOutput
	ToAlertProcessingRuleSuppressionSchedulePtrOutputWithContext(context.Context) AlertProcessingRuleSuppressionSchedulePtrOutput
}

type alertProcessingRuleSuppressionSchedulePtrType AlertProcessingRuleSuppressionScheduleArgs

func AlertProcessingRuleSuppressionSchedulePtr(v *AlertProcessingRuleSuppressionScheduleArgs) AlertProcessingRuleSuppressionSchedulePtrInput {
	return (*alertProcessingRuleSuppressionSchedulePtrType)(v)
}

func (*alertProcessingRuleSuppressionSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionSchedule)(nil)).Elem()
}

func (i *alertProcessingRuleSuppressionSchedulePtrType) ToAlertProcessingRuleSuppressionSchedulePtrOutput() AlertProcessingRuleSuppressionSchedulePtrOutput {
	return i.ToAlertProcessingRuleSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleSuppressionSchedulePtrType) ToAlertProcessingRuleSuppressionSchedulePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionSchedulePtrOutput)
}

func (i *alertProcessingRuleSuppressionSchedulePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionSchedule] {
	return pulumix.Output[*AlertProcessingRuleSuppressionSchedule]{
		OutputState: i.ToAlertProcessingRuleSuppressionSchedulePtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionScheduleOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionSchedule)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionScheduleOutput) ToAlertProcessingRuleSuppressionScheduleOutput() AlertProcessingRuleSuppressionScheduleOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleOutput) ToAlertProcessingRuleSuppressionScheduleOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleOutput) ToAlertProcessingRuleSuppressionSchedulePtrOutput() AlertProcessingRuleSuppressionSchedulePtrOutput {
	return o.ToAlertProcessingRuleSuppressionSchedulePtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleSuppressionScheduleOutput) ToAlertProcessingRuleSuppressionSchedulePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleSuppressionSchedule) *AlertProcessingRuleSuppressionSchedule {
		return &v
	}).(AlertProcessingRuleSuppressionSchedulePtrOutput)
}

func (o AlertProcessingRuleSuppressionScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionSchedule] {
	return pulumix.Output[AlertProcessingRuleSuppressionSchedule]{
		OutputState: o.OutputState,
	}
}

// Specifies the Alert Processing Rule effective start time (Y-m-d'T'H:M:S).
func (o AlertProcessingRuleSuppressionScheduleOutput) EffectiveFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionSchedule) *string { return v.EffectiveFrom }).(pulumi.StringPtrOutput)
}

// Specifies the Alert Processing Rule effective end time (Y-m-d'T'H:M:S).
func (o AlertProcessingRuleSuppressionScheduleOutput) EffectiveUntil() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionSchedule) *string { return v.EffectiveUntil }).(pulumi.StringPtrOutput)
}

// A `recurrence` block as defined above.
func (o AlertProcessingRuleSuppressionScheduleOutput) Recurrence() AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionSchedule) *AlertProcessingRuleSuppressionScheduleRecurrence {
		return v.Recurrence
	}).(AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput)
}

// The time zone (e.g. Pacific Standard time, Eastern Standard Time). Defaults to `UTC`. [possible values are defined here](<https://docs.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)>).
func (o AlertProcessingRuleSuppressionScheduleOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionSchedule) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type AlertProcessingRuleSuppressionSchedulePtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionSchedule)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionSchedulePtrOutput) ToAlertProcessingRuleSuppressionSchedulePtrOutput() AlertProcessingRuleSuppressionSchedulePtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionSchedulePtrOutput) ToAlertProcessingRuleSuppressionSchedulePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionSchedulePtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionSchedulePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionSchedule] {
	return pulumix.Output[*AlertProcessingRuleSuppressionSchedule]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionSchedulePtrOutput) Elem() AlertProcessingRuleSuppressionScheduleOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionSchedule) AlertProcessingRuleSuppressionSchedule {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleSuppressionSchedule
		return ret
	}).(AlertProcessingRuleSuppressionScheduleOutput)
}

// Specifies the Alert Processing Rule effective start time (Y-m-d'T'H:M:S).
func (o AlertProcessingRuleSuppressionSchedulePtrOutput) EffectiveFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EffectiveFrom
	}).(pulumi.StringPtrOutput)
}

// Specifies the Alert Processing Rule effective end time (Y-m-d'T'H:M:S).
func (o AlertProcessingRuleSuppressionSchedulePtrOutput) EffectiveUntil() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EffectiveUntil
	}).(pulumi.StringPtrOutput)
}

// A `recurrence` block as defined above.
func (o AlertProcessingRuleSuppressionSchedulePtrOutput) Recurrence() AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionSchedule) *AlertProcessingRuleSuppressionScheduleRecurrence {
		if v == nil {
			return nil
		}
		return v.Recurrence
	}).(AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput)
}

// The time zone (e.g. Pacific Standard time, Eastern Standard Time). Defaults to `UTC`. [possible values are defined here](<https://docs.microsoft.com/en-us/previous-versions/windows/embedded/ms912391(v=winembedded.11)>).
func (o AlertProcessingRuleSuppressionSchedulePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

type AlertProcessingRuleSuppressionScheduleRecurrence struct {
	// One or more `daily` blocks as defined above.
	Dailies []AlertProcessingRuleSuppressionScheduleRecurrenceDaily `pulumi:"dailies"`
	// One or more `monthly` blocks as defined above.
	Monthlies []AlertProcessingRuleSuppressionScheduleRecurrenceMonthly `pulumi:"monthlies"`
	// One or more `weekly` blocks as defined below.
	Weeklies []AlertProcessingRuleSuppressionScheduleRecurrenceWeekly `pulumi:"weeklies"`
}

// AlertProcessingRuleSuppressionScheduleRecurrenceInput is an input type that accepts AlertProcessingRuleSuppressionScheduleRecurrenceArgs and AlertProcessingRuleSuppressionScheduleRecurrenceOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionScheduleRecurrenceInput` via:
//
//	AlertProcessingRuleSuppressionScheduleRecurrenceArgs{...}
type AlertProcessingRuleSuppressionScheduleRecurrenceInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionScheduleRecurrenceOutput() AlertProcessingRuleSuppressionScheduleRecurrenceOutput
	ToAlertProcessingRuleSuppressionScheduleRecurrenceOutputWithContext(context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceOutput
}

type AlertProcessingRuleSuppressionScheduleRecurrenceArgs struct {
	// One or more `daily` blocks as defined above.
	Dailies AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayInput `pulumi:"dailies"`
	// One or more `monthly` blocks as defined above.
	Monthlies AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayInput `pulumi:"monthlies"`
	// One or more `weekly` blocks as defined below.
	Weeklies AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayInput `pulumi:"weeklies"`
}

func (AlertProcessingRuleSuppressionScheduleRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrence)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceArgs) ToAlertProcessingRuleSuppressionScheduleRecurrenceOutput() AlertProcessingRuleSuppressionScheduleRecurrenceOutput {
	return i.ToAlertProcessingRuleSuppressionScheduleRecurrenceOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceArgs) ToAlertProcessingRuleSuppressionScheduleRecurrenceOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionScheduleRecurrenceOutput)
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrence] {
	return pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrence]{
		OutputState: i.ToAlertProcessingRuleSuppressionScheduleRecurrenceOutputWithContext(ctx).OutputState,
	}
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceArgs) ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutput() AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput {
	return i.ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceArgs) ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionScheduleRecurrenceOutput).ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutputWithContext(ctx)
}

// AlertProcessingRuleSuppressionScheduleRecurrencePtrInput is an input type that accepts AlertProcessingRuleSuppressionScheduleRecurrenceArgs, AlertProcessingRuleSuppressionScheduleRecurrencePtr and AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionScheduleRecurrencePtrInput` via:
//
//	        AlertProcessingRuleSuppressionScheduleRecurrenceArgs{...}
//
//	or:
//
//	        nil
type AlertProcessingRuleSuppressionScheduleRecurrencePtrInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutput() AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput
	ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutputWithContext(context.Context) AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput
}

type alertProcessingRuleSuppressionScheduleRecurrencePtrType AlertProcessingRuleSuppressionScheduleRecurrenceArgs

func AlertProcessingRuleSuppressionScheduleRecurrencePtr(v *AlertProcessingRuleSuppressionScheduleRecurrenceArgs) AlertProcessingRuleSuppressionScheduleRecurrencePtrInput {
	return (*alertProcessingRuleSuppressionScheduleRecurrencePtrType)(v)
}

func (*alertProcessingRuleSuppressionScheduleRecurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionScheduleRecurrence)(nil)).Elem()
}

func (i *alertProcessingRuleSuppressionScheduleRecurrencePtrType) ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutput() AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput {
	return i.ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutputWithContext(context.Background())
}

func (i *alertProcessingRuleSuppressionScheduleRecurrencePtrType) ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput)
}

func (i *alertProcessingRuleSuppressionScheduleRecurrencePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionScheduleRecurrence] {
	return pulumix.Output[*AlertProcessingRuleSuppressionScheduleRecurrence]{
		OutputState: i.ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionScheduleRecurrenceOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionScheduleRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrence)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceOutput) ToAlertProcessingRuleSuppressionScheduleRecurrenceOutput() AlertProcessingRuleSuppressionScheduleRecurrenceOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceOutput) ToAlertProcessingRuleSuppressionScheduleRecurrenceOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceOutput) ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutput() AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput {
	return o.ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutputWithContext(context.Background())
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceOutput) ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertProcessingRuleSuppressionScheduleRecurrence) *AlertProcessingRuleSuppressionScheduleRecurrence {
		return &v
	}).(AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput)
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrence] {
	return pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrence]{
		OutputState: o.OutputState,
	}
}

// One or more `daily` blocks as defined above.
func (o AlertProcessingRuleSuppressionScheduleRecurrenceOutput) Dailies() AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionScheduleRecurrence) []AlertProcessingRuleSuppressionScheduleRecurrenceDaily {
		return v.Dailies
	}).(AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput)
}

// One or more `monthly` blocks as defined above.
func (o AlertProcessingRuleSuppressionScheduleRecurrenceOutput) Monthlies() AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionScheduleRecurrence) []AlertProcessingRuleSuppressionScheduleRecurrenceMonthly {
		return v.Monthlies
	}).(AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput)
}

// One or more `weekly` blocks as defined below.
func (o AlertProcessingRuleSuppressionScheduleRecurrenceOutput) Weeklies() AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionScheduleRecurrence) []AlertProcessingRuleSuppressionScheduleRecurrenceWeekly {
		return v.Weeklies
	}).(AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput)
}

type AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertProcessingRuleSuppressionScheduleRecurrence)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput) ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutput() AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput) ToAlertProcessingRuleSuppressionScheduleRecurrencePtrOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertProcessingRuleSuppressionScheduleRecurrence] {
	return pulumix.Output[*AlertProcessingRuleSuppressionScheduleRecurrence]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput) Elem() AlertProcessingRuleSuppressionScheduleRecurrenceOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionScheduleRecurrence) AlertProcessingRuleSuppressionScheduleRecurrence {
		if v != nil {
			return *v
		}
		var ret AlertProcessingRuleSuppressionScheduleRecurrence
		return ret
	}).(AlertProcessingRuleSuppressionScheduleRecurrenceOutput)
}

// One or more `daily` blocks as defined above.
func (o AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput) Dailies() AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionScheduleRecurrence) []AlertProcessingRuleSuppressionScheduleRecurrenceDaily {
		if v == nil {
			return nil
		}
		return v.Dailies
	}).(AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput)
}

// One or more `monthly` blocks as defined above.
func (o AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput) Monthlies() AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionScheduleRecurrence) []AlertProcessingRuleSuppressionScheduleRecurrenceMonthly {
		if v == nil {
			return nil
		}
		return v.Monthlies
	}).(AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput)
}

// One or more `weekly` blocks as defined below.
func (o AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput) Weeklies() AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput {
	return o.ApplyT(func(v *AlertProcessingRuleSuppressionScheduleRecurrence) []AlertProcessingRuleSuppressionScheduleRecurrenceWeekly {
		if v == nil {
			return nil
		}
		return v.Weeklies
	}).(AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput)
}

type AlertProcessingRuleSuppressionScheduleRecurrenceDaily struct {
	// Specifies the recurrence end time (H:M:S).
	EndTime string `pulumi:"endTime"`
	// Specifies the recurrence start time (H:M:S).
	StartTime string `pulumi:"startTime"`
}

// AlertProcessingRuleSuppressionScheduleRecurrenceDailyInput is an input type that accepts AlertProcessingRuleSuppressionScheduleRecurrenceDailyArgs and AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionScheduleRecurrenceDailyInput` via:
//
//	AlertProcessingRuleSuppressionScheduleRecurrenceDailyArgs{...}
type AlertProcessingRuleSuppressionScheduleRecurrenceDailyInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput() AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput
	ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyOutputWithContext(context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput
}

type AlertProcessingRuleSuppressionScheduleRecurrenceDailyArgs struct {
	// Specifies the recurrence end time (H:M:S).
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// Specifies the recurrence start time (H:M:S).
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (AlertProcessingRuleSuppressionScheduleRecurrenceDailyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrenceDaily)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceDailyArgs) ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput() AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput {
	return i.ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceDailyArgs) ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput)
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceDailyArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrenceDaily] {
	return pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrenceDaily]{
		OutputState: i.ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyOutputWithContext(ctx).OutputState,
	}
}

// AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayInput is an input type that accepts AlertProcessingRuleSuppressionScheduleRecurrenceDailyArray and AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayInput` via:
//
//	AlertProcessingRuleSuppressionScheduleRecurrenceDailyArray{ AlertProcessingRuleSuppressionScheduleRecurrenceDailyArgs{...} }
type AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput() AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput
	ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutputWithContext(context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput
}

type AlertProcessingRuleSuppressionScheduleRecurrenceDailyArray []AlertProcessingRuleSuppressionScheduleRecurrenceDailyInput

func (AlertProcessingRuleSuppressionScheduleRecurrenceDailyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertProcessingRuleSuppressionScheduleRecurrenceDaily)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceDailyArray) ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput() AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput {
	return i.ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceDailyArray) ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput)
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceDailyArray) ToOutput(ctx context.Context) pulumix.Output[[]AlertProcessingRuleSuppressionScheduleRecurrenceDaily] {
	return pulumix.Output[[]AlertProcessingRuleSuppressionScheduleRecurrenceDaily]{
		OutputState: i.ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrenceDaily)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput) ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput() AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput) ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrenceDaily] {
	return pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrenceDaily]{
		OutputState: o.OutputState,
	}
}

// Specifies the recurrence end time (H:M:S).
func (o AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionScheduleRecurrenceDaily) string { return v.EndTime }).(pulumi.StringOutput)
}

// Specifies the recurrence start time (H:M:S).
func (o AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionScheduleRecurrenceDaily) string { return v.StartTime }).(pulumi.StringOutput)
}

type AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertProcessingRuleSuppressionScheduleRecurrenceDaily)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput) ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput() AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput) ToAlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AlertProcessingRuleSuppressionScheduleRecurrenceDaily] {
	return pulumix.Output[[]AlertProcessingRuleSuppressionScheduleRecurrenceDaily]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput) Index(i pulumi.IntInput) AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertProcessingRuleSuppressionScheduleRecurrenceDaily {
		return vs[0].([]AlertProcessingRuleSuppressionScheduleRecurrenceDaily)[vs[1].(int)]
	}).(AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput)
}

type AlertProcessingRuleSuppressionScheduleRecurrenceMonthly struct {
	// Specifies a list of dayOfMonth to recurrence. Possible values are integers between `1` - `31`.
	DaysOfMonths []int `pulumi:"daysOfMonths"`
	// Specifies the recurrence end time (H:M:S).
	EndTime *string `pulumi:"endTime"`
	// Specifies the recurrence start time (H:M:S).
	StartTime *string `pulumi:"startTime"`
}

// AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyInput is an input type that accepts AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArgs and AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyInput` via:
//
//	AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArgs{...}
type AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput() AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput
	ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutputWithContext(context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput
}

type AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArgs struct {
	// Specifies a list of dayOfMonth to recurrence. Possible values are integers between `1` - `31`.
	DaysOfMonths pulumi.IntArrayInput `pulumi:"daysOfMonths"`
	// Specifies the recurrence end time (H:M:S).
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the recurrence start time (H:M:S).
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrenceMonthly)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArgs) ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput() AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput {
	return i.ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArgs) ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput)
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrenceMonthly] {
	return pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrenceMonthly]{
		OutputState: i.ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutputWithContext(ctx).OutputState,
	}
}

// AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayInput is an input type that accepts AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArray and AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayInput` via:
//
//	AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArray{ AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArgs{...} }
type AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput() AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput
	ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutputWithContext(context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput
}

type AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArray []AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyInput

func (AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertProcessingRuleSuppressionScheduleRecurrenceMonthly)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArray) ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput() AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput {
	return i.ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArray) ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput)
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArray) ToOutput(ctx context.Context) pulumix.Output[[]AlertProcessingRuleSuppressionScheduleRecurrenceMonthly] {
	return pulumix.Output[[]AlertProcessingRuleSuppressionScheduleRecurrenceMonthly]{
		OutputState: i.ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrenceMonthly)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput) ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput() AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput) ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrenceMonthly] {
	return pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrenceMonthly]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of dayOfMonth to recurrence. Possible values are integers between `1` - `31`.
func (o AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput) DaysOfMonths() pulumi.IntArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionScheduleRecurrenceMonthly) []int { return v.DaysOfMonths }).(pulumi.IntArrayOutput)
}

// Specifies the recurrence end time (H:M:S).
func (o AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionScheduleRecurrenceMonthly) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies the recurrence start time (H:M:S).
func (o AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionScheduleRecurrenceMonthly) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertProcessingRuleSuppressionScheduleRecurrenceMonthly)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput) ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput() AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput) ToAlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AlertProcessingRuleSuppressionScheduleRecurrenceMonthly] {
	return pulumix.Output[[]AlertProcessingRuleSuppressionScheduleRecurrenceMonthly]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput) Index(i pulumi.IntInput) AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertProcessingRuleSuppressionScheduleRecurrenceMonthly {
		return vs[0].([]AlertProcessingRuleSuppressionScheduleRecurrenceMonthly)[vs[1].(int)]
	}).(AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput)
}

type AlertProcessingRuleSuppressionScheduleRecurrenceWeekly struct {
	// Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
	DaysOfWeeks []string `pulumi:"daysOfWeeks"`
	// Specifies the recurrence end time (H:M:S).
	EndTime *string `pulumi:"endTime"`
	// Specifies the recurrence start time (H:M:S).
	StartTime *string `pulumi:"startTime"`
}

// AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyInput is an input type that accepts AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs and AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyInput` via:
//
//	AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs{...}
type AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput() AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput
	ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutputWithContext(context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput
}

type AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs struct {
	// Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
	DaysOfWeeks pulumi.StringArrayInput `pulumi:"daysOfWeeks"`
	// Specifies the recurrence end time (H:M:S).
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the recurrence start time (H:M:S).
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrenceWeekly)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs) ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput() AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput {
	return i.ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs) ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput)
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrenceWeekly] {
	return pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrenceWeekly]{
		OutputState: i.ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutputWithContext(ctx).OutputState,
	}
}

// AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayInput is an input type that accepts AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArray and AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput values.
// You can construct a concrete instance of `AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayInput` via:
//
//	AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArray{ AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs{...} }
type AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayInput interface {
	pulumi.Input

	ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput() AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput
	ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutputWithContext(context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput
}

type AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArray []AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyInput

func (AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertProcessingRuleSuppressionScheduleRecurrenceWeekly)(nil)).Elem()
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArray) ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput() AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput {
	return i.ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutputWithContext(context.Background())
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArray) ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput)
}

func (i AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArray) ToOutput(ctx context.Context) pulumix.Output[[]AlertProcessingRuleSuppressionScheduleRecurrenceWeekly] {
	return pulumix.Output[[]AlertProcessingRuleSuppressionScheduleRecurrenceWeekly]{
		OutputState: i.ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutputWithContext(ctx).OutputState,
	}
}

type AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrenceWeekly)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput) ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput() AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput) ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput) ToOutput(ctx context.Context) pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrenceWeekly] {
	return pulumix.Output[AlertProcessingRuleSuppressionScheduleRecurrenceWeekly]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of dayOfWeek to recurrence. Possible values are `Sunday`, `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, and `Saturday`.
func (o AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput) DaysOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionScheduleRecurrenceWeekly) []string { return v.DaysOfWeeks }).(pulumi.StringArrayOutput)
}

// Specifies the recurrence end time (H:M:S).
func (o AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionScheduleRecurrenceWeekly) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Specifies the recurrence start time (H:M:S).
func (o AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertProcessingRuleSuppressionScheduleRecurrenceWeekly) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput struct{ *pulumi.OutputState }

func (AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertProcessingRuleSuppressionScheduleRecurrenceWeekly)(nil)).Elem()
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput) ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput() AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput) ToAlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutputWithContext(ctx context.Context) AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput {
	return o
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AlertProcessingRuleSuppressionScheduleRecurrenceWeekly] {
	return pulumix.Output[[]AlertProcessingRuleSuppressionScheduleRecurrenceWeekly]{
		OutputState: o.OutputState,
	}
}

func (o AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput) Index(i pulumi.IntInput) AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertProcessingRuleSuppressionScheduleRecurrenceWeekly {
		return vs[0].([]AlertProcessingRuleSuppressionScheduleRecurrenceWeekly)[vs[1].(int)]
	}).(AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput)
}

type AlertPrometheusRuleGroupRule struct {
	// An `action` block as defined below.
	Actions []AlertPrometheusRuleGroupRuleAction `pulumi:"actions"`
	// Specifies the Alert rule name.
	Alert *string `pulumi:"alert"`
	// An `alertResolution` block as defined below.
	AlertResolution *AlertPrometheusRuleGroupRuleAlertResolution `pulumi:"alertResolution"`
	// Specifies a set of informational labels that can be used to store longer additional information such as alert descriptions or runbook links.
	Annotations map[string]string `pulumi:"annotations"`
	// Is this rule enabled? Possible values are `true` and `false`.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the Prometheus Query Language expression to evaluate. For more details see [this doc](https://prometheus.io/docs/prometheus/latest/querying/basics). Evaluate at the period given by `interval` and record the result as a new set of time series with the metric name given by `record`.
	Expression string `pulumi:"expression"`
	// Specifies the amount of time alert must be active before firing, represented in ISO 8601 duration format.
	For *string `pulumi:"for"`
	// Specifies the labels to add or overwrite before storing the result.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the recorded metrics name.
	Record *string `pulumi:"record"`
	// Specifies the severity of the alerts fired by the rule. Possible values are between 0 and 4.
	Severity *int `pulumi:"severity"`
}

// AlertPrometheusRuleGroupRuleInput is an input type that accepts AlertPrometheusRuleGroupRuleArgs and AlertPrometheusRuleGroupRuleOutput values.
// You can construct a concrete instance of `AlertPrometheusRuleGroupRuleInput` via:
//
//	AlertPrometheusRuleGroupRuleArgs{...}
type AlertPrometheusRuleGroupRuleInput interface {
	pulumi.Input

	ToAlertPrometheusRuleGroupRuleOutput() AlertPrometheusRuleGroupRuleOutput
	ToAlertPrometheusRuleGroupRuleOutputWithContext(context.Context) AlertPrometheusRuleGroupRuleOutput
}

type AlertPrometheusRuleGroupRuleArgs struct {
	// An `action` block as defined below.
	Actions AlertPrometheusRuleGroupRuleActionArrayInput `pulumi:"actions"`
	// Specifies the Alert rule name.
	Alert pulumi.StringPtrInput `pulumi:"alert"`
	// An `alertResolution` block as defined below.
	AlertResolution AlertPrometheusRuleGroupRuleAlertResolutionPtrInput `pulumi:"alertResolution"`
	// Specifies a set of informational labels that can be used to store longer additional information such as alert descriptions or runbook links.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Is this rule enabled? Possible values are `true` and `false`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Specifies the Prometheus Query Language expression to evaluate. For more details see [this doc](https://prometheus.io/docs/prometheus/latest/querying/basics). Evaluate at the period given by `interval` and record the result as a new set of time series with the metric name given by `record`.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Specifies the amount of time alert must be active before firing, represented in ISO 8601 duration format.
	For pulumi.StringPtrInput `pulumi:"for"`
	// Specifies the labels to add or overwrite before storing the result.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Specifies the recorded metrics name.
	Record pulumi.StringPtrInput `pulumi:"record"`
	// Specifies the severity of the alerts fired by the rule. Possible values are between 0 and 4.
	Severity pulumi.IntPtrInput `pulumi:"severity"`
}

func (AlertPrometheusRuleGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPrometheusRuleGroupRule)(nil)).Elem()
}

func (i AlertPrometheusRuleGroupRuleArgs) ToAlertPrometheusRuleGroupRuleOutput() AlertPrometheusRuleGroupRuleOutput {
	return i.ToAlertPrometheusRuleGroupRuleOutputWithContext(context.Background())
}

func (i AlertPrometheusRuleGroupRuleArgs) ToAlertPrometheusRuleGroupRuleOutputWithContext(ctx context.Context) AlertPrometheusRuleGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPrometheusRuleGroupRuleOutput)
}

func (i AlertPrometheusRuleGroupRuleArgs) ToOutput(ctx context.Context) pulumix.Output[AlertPrometheusRuleGroupRule] {
	return pulumix.Output[AlertPrometheusRuleGroupRule]{
		OutputState: i.ToAlertPrometheusRuleGroupRuleOutputWithContext(ctx).OutputState,
	}
}

// AlertPrometheusRuleGroupRuleArrayInput is an input type that accepts AlertPrometheusRuleGroupRuleArray and AlertPrometheusRuleGroupRuleArrayOutput values.
// You can construct a concrete instance of `AlertPrometheusRuleGroupRuleArrayInput` via:
//
//	AlertPrometheusRuleGroupRuleArray{ AlertPrometheusRuleGroupRuleArgs{...} }
type AlertPrometheusRuleGroupRuleArrayInput interface {
	pulumi.Input

	ToAlertPrometheusRuleGroupRuleArrayOutput() AlertPrometheusRuleGroupRuleArrayOutput
	ToAlertPrometheusRuleGroupRuleArrayOutputWithContext(context.Context) AlertPrometheusRuleGroupRuleArrayOutput
}

type AlertPrometheusRuleGroupRuleArray []AlertPrometheusRuleGroupRuleInput

func (AlertPrometheusRuleGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPrometheusRuleGroupRule)(nil)).Elem()
}

func (i AlertPrometheusRuleGroupRuleArray) ToAlertPrometheusRuleGroupRuleArrayOutput() AlertPrometheusRuleGroupRuleArrayOutput {
	return i.ToAlertPrometheusRuleGroupRuleArrayOutputWithContext(context.Background())
}

func (i AlertPrometheusRuleGroupRuleArray) ToAlertPrometheusRuleGroupRuleArrayOutputWithContext(ctx context.Context) AlertPrometheusRuleGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPrometheusRuleGroupRuleArrayOutput)
}

func (i AlertPrometheusRuleGroupRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]AlertPrometheusRuleGroupRule] {
	return pulumix.Output[[]AlertPrometheusRuleGroupRule]{
		OutputState: i.ToAlertPrometheusRuleGroupRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type AlertPrometheusRuleGroupRuleOutput struct{ *pulumi.OutputState }

func (AlertPrometheusRuleGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPrometheusRuleGroupRule)(nil)).Elem()
}

func (o AlertPrometheusRuleGroupRuleOutput) ToAlertPrometheusRuleGroupRuleOutput() AlertPrometheusRuleGroupRuleOutput {
	return o
}

func (o AlertPrometheusRuleGroupRuleOutput) ToAlertPrometheusRuleGroupRuleOutputWithContext(ctx context.Context) AlertPrometheusRuleGroupRuleOutput {
	return o
}

func (o AlertPrometheusRuleGroupRuleOutput) ToOutput(ctx context.Context) pulumix.Output[AlertPrometheusRuleGroupRule] {
	return pulumix.Output[AlertPrometheusRuleGroupRule]{
		OutputState: o.OutputState,
	}
}

// An `action` block as defined below.
func (o AlertPrometheusRuleGroupRuleOutput) Actions() AlertPrometheusRuleGroupRuleActionArrayOutput {
	return o.ApplyT(func(v AlertPrometheusRuleGroupRule) []AlertPrometheusRuleGroupRuleAction { return v.Actions }).(AlertPrometheusRuleGroupRuleActionArrayOutput)
}

// Specifies the Alert rule name.
func (o AlertPrometheusRuleGroupRuleOutput) Alert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPrometheusRuleGroupRule) *string { return v.Alert }).(pulumi.StringPtrOutput)
}

// An `alertResolution` block as defined below.
func (o AlertPrometheusRuleGroupRuleOutput) AlertResolution() AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput {
	return o.ApplyT(func(v AlertPrometheusRuleGroupRule) *AlertPrometheusRuleGroupRuleAlertResolution {
		return v.AlertResolution
	}).(AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput)
}

// Specifies a set of informational labels that can be used to store longer additional information such as alert descriptions or runbook links.
func (o AlertPrometheusRuleGroupRuleOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertPrometheusRuleGroupRule) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Is this rule enabled? Possible values are `true` and `false`.
func (o AlertPrometheusRuleGroupRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertPrometheusRuleGroupRule) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the Prometheus Query Language expression to evaluate. For more details see [this doc](https://prometheus.io/docs/prometheus/latest/querying/basics). Evaluate at the period given by `interval` and record the result as a new set of time series with the metric name given by `record`.
func (o AlertPrometheusRuleGroupRuleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v AlertPrometheusRuleGroupRule) string { return v.Expression }).(pulumi.StringOutput)
}

// Specifies the amount of time alert must be active before firing, represented in ISO 8601 duration format.
func (o AlertPrometheusRuleGroupRuleOutput) For() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPrometheusRuleGroupRule) *string { return v.For }).(pulumi.StringPtrOutput)
}

// Specifies the labels to add or overwrite before storing the result.
func (o AlertPrometheusRuleGroupRuleOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertPrometheusRuleGroupRule) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies the recorded metrics name.
func (o AlertPrometheusRuleGroupRuleOutput) Record() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPrometheusRuleGroupRule) *string { return v.Record }).(pulumi.StringPtrOutput)
}

// Specifies the severity of the alerts fired by the rule. Possible values are between 0 and 4.
func (o AlertPrometheusRuleGroupRuleOutput) Severity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertPrometheusRuleGroupRule) *int { return v.Severity }).(pulumi.IntPtrOutput)
}

type AlertPrometheusRuleGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (AlertPrometheusRuleGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPrometheusRuleGroupRule)(nil)).Elem()
}

func (o AlertPrometheusRuleGroupRuleArrayOutput) ToAlertPrometheusRuleGroupRuleArrayOutput() AlertPrometheusRuleGroupRuleArrayOutput {
	return o
}

func (o AlertPrometheusRuleGroupRuleArrayOutput) ToAlertPrometheusRuleGroupRuleArrayOutputWithContext(ctx context.Context) AlertPrometheusRuleGroupRuleArrayOutput {
	return o
}

func (o AlertPrometheusRuleGroupRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AlertPrometheusRuleGroupRule] {
	return pulumix.Output[[]AlertPrometheusRuleGroupRule]{
		OutputState: o.OutputState,
	}
}

func (o AlertPrometheusRuleGroupRuleArrayOutput) Index(i pulumi.IntInput) AlertPrometheusRuleGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertPrometheusRuleGroupRule {
		return vs[0].([]AlertPrometheusRuleGroupRule)[vs[1].(int)]
	}).(AlertPrometheusRuleGroupRuleOutput)
}

type AlertPrometheusRuleGroupRuleAction struct {
	// Specifies the resource id of the monitor action group.
	ActionGroupId string `pulumi:"actionGroupId"`
	// Specifies the properties of an action group object.
	//
	// > **Note:** `actionProperties` can only be configured for IcM Connector Action Groups for now. Other public features will be supported in the future.
	ActionProperties map[string]string `pulumi:"actionProperties"`
}

// AlertPrometheusRuleGroupRuleActionInput is an input type that accepts AlertPrometheusRuleGroupRuleActionArgs and AlertPrometheusRuleGroupRuleActionOutput values.
// You can construct a concrete instance of `AlertPrometheusRuleGroupRuleActionInput` via:
//
//	AlertPrometheusRuleGroupRuleActionArgs{...}
type AlertPrometheusRuleGroupRuleActionInput interface {
	pulumi.Input

	ToAlertPrometheusRuleGroupRuleActionOutput() AlertPrometheusRuleGroupRuleActionOutput
	ToAlertPrometheusRuleGroupRuleActionOutputWithContext(context.Context) AlertPrometheusRuleGroupRuleActionOutput
}

type AlertPrometheusRuleGroupRuleActionArgs struct {
	// Specifies the resource id of the monitor action group.
	ActionGroupId pulumi.StringInput `pulumi:"actionGroupId"`
	// Specifies the properties of an action group object.
	//
	// > **Note:** `actionProperties` can only be configured for IcM Connector Action Groups for now. Other public features will be supported in the future.
	ActionProperties pulumi.StringMapInput `pulumi:"actionProperties"`
}

func (AlertPrometheusRuleGroupRuleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPrometheusRuleGroupRuleAction)(nil)).Elem()
}

func (i AlertPrometheusRuleGroupRuleActionArgs) ToAlertPrometheusRuleGroupRuleActionOutput() AlertPrometheusRuleGroupRuleActionOutput {
	return i.ToAlertPrometheusRuleGroupRuleActionOutputWithContext(context.Background())
}

func (i AlertPrometheusRuleGroupRuleActionArgs) ToAlertPrometheusRuleGroupRuleActionOutputWithContext(ctx context.Context) AlertPrometheusRuleGroupRuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPrometheusRuleGroupRuleActionOutput)
}

func (i AlertPrometheusRuleGroupRuleActionArgs) ToOutput(ctx context.Context) pulumix.Output[AlertPrometheusRuleGroupRuleAction] {
	return pulumix.Output[AlertPrometheusRuleGroupRuleAction]{
		OutputState: i.ToAlertPrometheusRuleGroupRuleActionOutputWithContext(ctx).OutputState,
	}
}

// AlertPrometheusRuleGroupRuleActionArrayInput is an input type that accepts AlertPrometheusRuleGroupRuleActionArray and AlertPrometheusRuleGroupRuleActionArrayOutput values.
// You can construct a concrete instance of `AlertPrometheusRuleGroupRuleActionArrayInput` via:
//
//	AlertPrometheusRuleGroupRuleActionArray{ AlertPrometheusRuleGroupRuleActionArgs{...} }
type AlertPrometheusRuleGroupRuleActionArrayInput interface {
	pulumi.Input

	ToAlertPrometheusRuleGroupRuleActionArrayOutput() AlertPrometheusRuleGroupRuleActionArrayOutput
	ToAlertPrometheusRuleGroupRuleActionArrayOutputWithContext(context.Context) AlertPrometheusRuleGroupRuleActionArrayOutput
}

type AlertPrometheusRuleGroupRuleActionArray []AlertPrometheusRuleGroupRuleActionInput

func (AlertPrometheusRuleGroupRuleActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPrometheusRuleGroupRuleAction)(nil)).Elem()
}

func (i AlertPrometheusRuleGroupRuleActionArray) ToAlertPrometheusRuleGroupRuleActionArrayOutput() AlertPrometheusRuleGroupRuleActionArrayOutput {
	return i.ToAlertPrometheusRuleGroupRuleActionArrayOutputWithContext(context.Background())
}

func (i AlertPrometheusRuleGroupRuleActionArray) ToAlertPrometheusRuleGroupRuleActionArrayOutputWithContext(ctx context.Context) AlertPrometheusRuleGroupRuleActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPrometheusRuleGroupRuleActionArrayOutput)
}

func (i AlertPrometheusRuleGroupRuleActionArray) ToOutput(ctx context.Context) pulumix.Output[[]AlertPrometheusRuleGroupRuleAction] {
	return pulumix.Output[[]AlertPrometheusRuleGroupRuleAction]{
		OutputState: i.ToAlertPrometheusRuleGroupRuleActionArrayOutputWithContext(ctx).OutputState,
	}
}

type AlertPrometheusRuleGroupRuleActionOutput struct{ *pulumi.OutputState }

func (AlertPrometheusRuleGroupRuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPrometheusRuleGroupRuleAction)(nil)).Elem()
}

func (o AlertPrometheusRuleGroupRuleActionOutput) ToAlertPrometheusRuleGroupRuleActionOutput() AlertPrometheusRuleGroupRuleActionOutput {
	return o
}

func (o AlertPrometheusRuleGroupRuleActionOutput) ToAlertPrometheusRuleGroupRuleActionOutputWithContext(ctx context.Context) AlertPrometheusRuleGroupRuleActionOutput {
	return o
}

func (o AlertPrometheusRuleGroupRuleActionOutput) ToOutput(ctx context.Context) pulumix.Output[AlertPrometheusRuleGroupRuleAction] {
	return pulumix.Output[AlertPrometheusRuleGroupRuleAction]{
		OutputState: o.OutputState,
	}
}

// Specifies the resource id of the monitor action group.
func (o AlertPrometheusRuleGroupRuleActionOutput) ActionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v AlertPrometheusRuleGroupRuleAction) string { return v.ActionGroupId }).(pulumi.StringOutput)
}

// Specifies the properties of an action group object.
//
// > **Note:** `actionProperties` can only be configured for IcM Connector Action Groups for now. Other public features will be supported in the future.
func (o AlertPrometheusRuleGroupRuleActionOutput) ActionProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertPrometheusRuleGroupRuleAction) map[string]string { return v.ActionProperties }).(pulumi.StringMapOutput)
}

type AlertPrometheusRuleGroupRuleActionArrayOutput struct{ *pulumi.OutputState }

func (AlertPrometheusRuleGroupRuleActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPrometheusRuleGroupRuleAction)(nil)).Elem()
}

func (o AlertPrometheusRuleGroupRuleActionArrayOutput) ToAlertPrometheusRuleGroupRuleActionArrayOutput() AlertPrometheusRuleGroupRuleActionArrayOutput {
	return o
}

func (o AlertPrometheusRuleGroupRuleActionArrayOutput) ToAlertPrometheusRuleGroupRuleActionArrayOutputWithContext(ctx context.Context) AlertPrometheusRuleGroupRuleActionArrayOutput {
	return o
}

func (o AlertPrometheusRuleGroupRuleActionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AlertPrometheusRuleGroupRuleAction] {
	return pulumix.Output[[]AlertPrometheusRuleGroupRuleAction]{
		OutputState: o.OutputState,
	}
}

func (o AlertPrometheusRuleGroupRuleActionArrayOutput) Index(i pulumi.IntInput) AlertPrometheusRuleGroupRuleActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertPrometheusRuleGroupRuleAction {
		return vs[0].([]AlertPrometheusRuleGroupRuleAction)[vs[1].(int)]
	}).(AlertPrometheusRuleGroupRuleActionOutput)
}

type AlertPrometheusRuleGroupRuleAlertResolution struct {
	// Is the alert auto-resolution? Possible values are `true` and `false`.
	AutoResolved *bool `pulumi:"autoResolved"`
	// Specifies the alert auto-resolution interval, represented in ISO 8601 duration format.
	TimeToResolve *string `pulumi:"timeToResolve"`
}

// AlertPrometheusRuleGroupRuleAlertResolutionInput is an input type that accepts AlertPrometheusRuleGroupRuleAlertResolutionArgs and AlertPrometheusRuleGroupRuleAlertResolutionOutput values.
// You can construct a concrete instance of `AlertPrometheusRuleGroupRuleAlertResolutionInput` via:
//
//	AlertPrometheusRuleGroupRuleAlertResolutionArgs{...}
type AlertPrometheusRuleGroupRuleAlertResolutionInput interface {
	pulumi.Input

	ToAlertPrometheusRuleGroupRuleAlertResolutionOutput() AlertPrometheusRuleGroupRuleAlertResolutionOutput
	ToAlertPrometheusRuleGroupRuleAlertResolutionOutputWithContext(context.Context) AlertPrometheusRuleGroupRuleAlertResolutionOutput
}

type AlertPrometheusRuleGroupRuleAlertResolutionArgs struct {
	// Is the alert auto-resolution? Possible values are `true` and `false`.
	AutoResolved pulumi.BoolPtrInput `pulumi:"autoResolved"`
	// Specifies the alert auto-resolution interval, represented in ISO 8601 duration format.
	TimeToResolve pulumi.StringPtrInput `pulumi:"timeToResolve"`
}

func (AlertPrometheusRuleGroupRuleAlertResolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPrometheusRuleGroupRuleAlertResolution)(nil)).Elem()
}

func (i AlertPrometheusRuleGroupRuleAlertResolutionArgs) ToAlertPrometheusRuleGroupRuleAlertResolutionOutput() AlertPrometheusRuleGroupRuleAlertResolutionOutput {
	return i.ToAlertPrometheusRuleGroupRuleAlertResolutionOutputWithContext(context.Background())
}

func (i AlertPrometheusRuleGroupRuleAlertResolutionArgs) ToAlertPrometheusRuleGroupRuleAlertResolutionOutputWithContext(ctx context.Context) AlertPrometheusRuleGroupRuleAlertResolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPrometheusRuleGroupRuleAlertResolutionOutput)
}

func (i AlertPrometheusRuleGroupRuleAlertResolutionArgs) ToOutput(ctx context.Context) pulumix.Output[AlertPrometheusRuleGroupRuleAlertResolution] {
	return pulumix.Output[AlertPrometheusRuleGroupRuleAlertResolution]{
		OutputState: i.ToAlertPrometheusRuleGroupRuleAlertResolutionOutputWithContext(ctx).OutputState,
	}
}

func (i AlertPrometheusRuleGroupRuleAlertResolutionArgs) ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutput() AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput {
	return i.ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutputWithContext(context.Background())
}

func (i AlertPrometheusRuleGroupRuleAlertResolutionArgs) ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutputWithContext(ctx context.Context) AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPrometheusRuleGroupRuleAlertResolutionOutput).ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutputWithContext(ctx)
}

// AlertPrometheusRuleGroupRuleAlertResolutionPtrInput is an input type that accepts AlertPrometheusRuleGroupRuleAlertResolutionArgs, AlertPrometheusRuleGroupRuleAlertResolutionPtr and AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput values.
// You can construct a concrete instance of `AlertPrometheusRuleGroupRuleAlertResolutionPtrInput` via:
//
//	        AlertPrometheusRuleGroupRuleAlertResolutionArgs{...}
//
//	or:
//
//	        nil
type AlertPrometheusRuleGroupRuleAlertResolutionPtrInput interface {
	pulumi.Input

	ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutput() AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput
	ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutputWithContext(context.Context) AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput
}

type alertPrometheusRuleGroupRuleAlertResolutionPtrType AlertPrometheusRuleGroupRuleAlertResolutionArgs

func AlertPrometheusRuleGroupRuleAlertResolutionPtr(v *AlertPrometheusRuleGroupRuleAlertResolutionArgs) AlertPrometheusRuleGroupRuleAlertResolutionPtrInput {
	return (*alertPrometheusRuleGroupRuleAlertResolutionPtrType)(v)
}

func (*alertPrometheusRuleGroupRuleAlertResolutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertPrometheusRuleGroupRuleAlertResolution)(nil)).Elem()
}

func (i *alertPrometheusRuleGroupRuleAlertResolutionPtrType) ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutput() AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput {
	return i.ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutputWithContext(context.Background())
}

func (i *alertPrometheusRuleGroupRuleAlertResolutionPtrType) ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutputWithContext(ctx context.Context) AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput)
}

func (i *alertPrometheusRuleGroupRuleAlertResolutionPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertPrometheusRuleGroupRuleAlertResolution] {
	return pulumix.Output[*AlertPrometheusRuleGroupRuleAlertResolution]{
		OutputState: i.ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutputWithContext(ctx).OutputState,
	}
}

type AlertPrometheusRuleGroupRuleAlertResolutionOutput struct{ *pulumi.OutputState }

func (AlertPrometheusRuleGroupRuleAlertResolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPrometheusRuleGroupRuleAlertResolution)(nil)).Elem()
}

func (o AlertPrometheusRuleGroupRuleAlertResolutionOutput) ToAlertPrometheusRuleGroupRuleAlertResolutionOutput() AlertPrometheusRuleGroupRuleAlertResolutionOutput {
	return o
}

func (o AlertPrometheusRuleGroupRuleAlertResolutionOutput) ToAlertPrometheusRuleGroupRuleAlertResolutionOutputWithContext(ctx context.Context) AlertPrometheusRuleGroupRuleAlertResolutionOutput {
	return o
}

func (o AlertPrometheusRuleGroupRuleAlertResolutionOutput) ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutput() AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput {
	return o.ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutputWithContext(context.Background())
}

func (o AlertPrometheusRuleGroupRuleAlertResolutionOutput) ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutputWithContext(ctx context.Context) AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertPrometheusRuleGroupRuleAlertResolution) *AlertPrometheusRuleGroupRuleAlertResolution {
		return &v
	}).(AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput)
}

func (o AlertPrometheusRuleGroupRuleAlertResolutionOutput) ToOutput(ctx context.Context) pulumix.Output[AlertPrometheusRuleGroupRuleAlertResolution] {
	return pulumix.Output[AlertPrometheusRuleGroupRuleAlertResolution]{
		OutputState: o.OutputState,
	}
}

// Is the alert auto-resolution? Possible values are `true` and `false`.
func (o AlertPrometheusRuleGroupRuleAlertResolutionOutput) AutoResolved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertPrometheusRuleGroupRuleAlertResolution) *bool { return v.AutoResolved }).(pulumi.BoolPtrOutput)
}

// Specifies the alert auto-resolution interval, represented in ISO 8601 duration format.
func (o AlertPrometheusRuleGroupRuleAlertResolutionOutput) TimeToResolve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPrometheusRuleGroupRuleAlertResolution) *string { return v.TimeToResolve }).(pulumi.StringPtrOutput)
}

type AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput struct{ *pulumi.OutputState }

func (AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertPrometheusRuleGroupRuleAlertResolution)(nil)).Elem()
}

func (o AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput) ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutput() AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput {
	return o
}

func (o AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput) ToAlertPrometheusRuleGroupRuleAlertResolutionPtrOutputWithContext(ctx context.Context) AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput {
	return o
}

func (o AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertPrometheusRuleGroupRuleAlertResolution] {
	return pulumix.Output[*AlertPrometheusRuleGroupRuleAlertResolution]{
		OutputState: o.OutputState,
	}
}

func (o AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput) Elem() AlertPrometheusRuleGroupRuleAlertResolutionOutput {
	return o.ApplyT(func(v *AlertPrometheusRuleGroupRuleAlertResolution) AlertPrometheusRuleGroupRuleAlertResolution {
		if v != nil {
			return *v
		}
		var ret AlertPrometheusRuleGroupRuleAlertResolution
		return ret
	}).(AlertPrometheusRuleGroupRuleAlertResolutionOutput)
}

// Is the alert auto-resolution? Possible values are `true` and `false`.
func (o AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput) AutoResolved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertPrometheusRuleGroupRuleAlertResolution) *bool {
		if v == nil {
			return nil
		}
		return v.AutoResolved
	}).(pulumi.BoolPtrOutput)
}

// Specifies the alert auto-resolution interval, represented in ISO 8601 duration format.
func (o AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput) TimeToResolve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertPrometheusRuleGroupRuleAlertResolution) *string {
		if v == nil {
			return nil
		}
		return v.TimeToResolve
	}).(pulumi.StringPtrOutput)
}

type AutoscaleSettingNotification struct {
	// A `email` block as defined below.
	Email *AutoscaleSettingNotificationEmail `pulumi:"email"`
	// One or more `webhook` blocks as defined below.
	Webhooks []AutoscaleSettingNotificationWebhook `pulumi:"webhooks"`
}

// AutoscaleSettingNotificationInput is an input type that accepts AutoscaleSettingNotificationArgs and AutoscaleSettingNotificationOutput values.
// You can construct a concrete instance of `AutoscaleSettingNotificationInput` via:
//
//	AutoscaleSettingNotificationArgs{...}
type AutoscaleSettingNotificationInput interface {
	pulumi.Input

	ToAutoscaleSettingNotificationOutput() AutoscaleSettingNotificationOutput
	ToAutoscaleSettingNotificationOutputWithContext(context.Context) AutoscaleSettingNotificationOutput
}

type AutoscaleSettingNotificationArgs struct {
	// A `email` block as defined below.
	Email AutoscaleSettingNotificationEmailPtrInput `pulumi:"email"`
	// One or more `webhook` blocks as defined below.
	Webhooks AutoscaleSettingNotificationWebhookArrayInput `pulumi:"webhooks"`
}

func (AutoscaleSettingNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingNotification)(nil)).Elem()
}

func (i AutoscaleSettingNotificationArgs) ToAutoscaleSettingNotificationOutput() AutoscaleSettingNotificationOutput {
	return i.ToAutoscaleSettingNotificationOutputWithContext(context.Background())
}

func (i AutoscaleSettingNotificationArgs) ToAutoscaleSettingNotificationOutputWithContext(ctx context.Context) AutoscaleSettingNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingNotificationOutput)
}

func (i AutoscaleSettingNotificationArgs) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingNotification] {
	return pulumix.Output[AutoscaleSettingNotification]{
		OutputState: i.ToAutoscaleSettingNotificationOutputWithContext(ctx).OutputState,
	}
}

func (i AutoscaleSettingNotificationArgs) ToAutoscaleSettingNotificationPtrOutput() AutoscaleSettingNotificationPtrOutput {
	return i.ToAutoscaleSettingNotificationPtrOutputWithContext(context.Background())
}

func (i AutoscaleSettingNotificationArgs) ToAutoscaleSettingNotificationPtrOutputWithContext(ctx context.Context) AutoscaleSettingNotificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingNotificationOutput).ToAutoscaleSettingNotificationPtrOutputWithContext(ctx)
}

// AutoscaleSettingNotificationPtrInput is an input type that accepts AutoscaleSettingNotificationArgs, AutoscaleSettingNotificationPtr and AutoscaleSettingNotificationPtrOutput values.
// You can construct a concrete instance of `AutoscaleSettingNotificationPtrInput` via:
//
//	        AutoscaleSettingNotificationArgs{...}
//
//	or:
//
//	        nil
type AutoscaleSettingNotificationPtrInput interface {
	pulumi.Input

	ToAutoscaleSettingNotificationPtrOutput() AutoscaleSettingNotificationPtrOutput
	ToAutoscaleSettingNotificationPtrOutputWithContext(context.Context) AutoscaleSettingNotificationPtrOutput
}

type autoscaleSettingNotificationPtrType AutoscaleSettingNotificationArgs

func AutoscaleSettingNotificationPtr(v *AutoscaleSettingNotificationArgs) AutoscaleSettingNotificationPtrInput {
	return (*autoscaleSettingNotificationPtrType)(v)
}

func (*autoscaleSettingNotificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleSettingNotification)(nil)).Elem()
}

func (i *autoscaleSettingNotificationPtrType) ToAutoscaleSettingNotificationPtrOutput() AutoscaleSettingNotificationPtrOutput {
	return i.ToAutoscaleSettingNotificationPtrOutputWithContext(context.Background())
}

func (i *autoscaleSettingNotificationPtrType) ToAutoscaleSettingNotificationPtrOutputWithContext(ctx context.Context) AutoscaleSettingNotificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingNotificationPtrOutput)
}

func (i *autoscaleSettingNotificationPtrType) ToOutput(ctx context.Context) pulumix.Output[*AutoscaleSettingNotification] {
	return pulumix.Output[*AutoscaleSettingNotification]{
		OutputState: i.ToAutoscaleSettingNotificationPtrOutputWithContext(ctx).OutputState,
	}
}

type AutoscaleSettingNotificationOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingNotification)(nil)).Elem()
}

func (o AutoscaleSettingNotificationOutput) ToAutoscaleSettingNotificationOutput() AutoscaleSettingNotificationOutput {
	return o
}

func (o AutoscaleSettingNotificationOutput) ToAutoscaleSettingNotificationOutputWithContext(ctx context.Context) AutoscaleSettingNotificationOutput {
	return o
}

func (o AutoscaleSettingNotificationOutput) ToAutoscaleSettingNotificationPtrOutput() AutoscaleSettingNotificationPtrOutput {
	return o.ToAutoscaleSettingNotificationPtrOutputWithContext(context.Background())
}

func (o AutoscaleSettingNotificationOutput) ToAutoscaleSettingNotificationPtrOutputWithContext(ctx context.Context) AutoscaleSettingNotificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscaleSettingNotification) *AutoscaleSettingNotification {
		return &v
	}).(AutoscaleSettingNotificationPtrOutput)
}

func (o AutoscaleSettingNotificationOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingNotification] {
	return pulumix.Output[AutoscaleSettingNotification]{
		OutputState: o.OutputState,
	}
}

// A `email` block as defined below.
func (o AutoscaleSettingNotificationOutput) Email() AutoscaleSettingNotificationEmailPtrOutput {
	return o.ApplyT(func(v AutoscaleSettingNotification) *AutoscaleSettingNotificationEmail { return v.Email }).(AutoscaleSettingNotificationEmailPtrOutput)
}

// One or more `webhook` blocks as defined below.
func (o AutoscaleSettingNotificationOutput) Webhooks() AutoscaleSettingNotificationWebhookArrayOutput {
	return o.ApplyT(func(v AutoscaleSettingNotification) []AutoscaleSettingNotificationWebhook { return v.Webhooks }).(AutoscaleSettingNotificationWebhookArrayOutput)
}

type AutoscaleSettingNotificationPtrOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingNotificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleSettingNotification)(nil)).Elem()
}

func (o AutoscaleSettingNotificationPtrOutput) ToAutoscaleSettingNotificationPtrOutput() AutoscaleSettingNotificationPtrOutput {
	return o
}

func (o AutoscaleSettingNotificationPtrOutput) ToAutoscaleSettingNotificationPtrOutputWithContext(ctx context.Context) AutoscaleSettingNotificationPtrOutput {
	return o
}

func (o AutoscaleSettingNotificationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AutoscaleSettingNotification] {
	return pulumix.Output[*AutoscaleSettingNotification]{
		OutputState: o.OutputState,
	}
}

func (o AutoscaleSettingNotificationPtrOutput) Elem() AutoscaleSettingNotificationOutput {
	return o.ApplyT(func(v *AutoscaleSettingNotification) AutoscaleSettingNotification {
		if v != nil {
			return *v
		}
		var ret AutoscaleSettingNotification
		return ret
	}).(AutoscaleSettingNotificationOutput)
}

// A `email` block as defined below.
func (o AutoscaleSettingNotificationPtrOutput) Email() AutoscaleSettingNotificationEmailPtrOutput {
	return o.ApplyT(func(v *AutoscaleSettingNotification) *AutoscaleSettingNotificationEmail {
		if v == nil {
			return nil
		}
		return v.Email
	}).(AutoscaleSettingNotificationEmailPtrOutput)
}

// One or more `webhook` blocks as defined below.
func (o AutoscaleSettingNotificationPtrOutput) Webhooks() AutoscaleSettingNotificationWebhookArrayOutput {
	return o.ApplyT(func(v *AutoscaleSettingNotification) []AutoscaleSettingNotificationWebhook {
		if v == nil {
			return nil
		}
		return v.Webhooks
	}).(AutoscaleSettingNotificationWebhookArrayOutput)
}

type AutoscaleSettingNotificationEmail struct {
	// Specifies a list of custom email addresses to which the email notifications will be sent.
	CustomEmails []string `pulumi:"customEmails"`
	// Should email notifications be sent to the subscription administrator? Defaults to `false`.
	SendToSubscriptionAdministrator *bool `pulumi:"sendToSubscriptionAdministrator"`
	// Should email notifications be sent to the subscription co-administrator? Defaults to `false`.
	SendToSubscriptionCoAdministrator *bool `pulumi:"sendToSubscriptionCoAdministrator"`
}

// AutoscaleSettingNotificationEmailInput is an input type that accepts AutoscaleSettingNotificationEmailArgs and AutoscaleSettingNotificationEmailOutput values.
// You can construct a concrete instance of `AutoscaleSettingNotificationEmailInput` via:
//
//	AutoscaleSettingNotificationEmailArgs{...}
type AutoscaleSettingNotificationEmailInput interface {
	pulumi.Input

	ToAutoscaleSettingNotificationEmailOutput() AutoscaleSettingNotificationEmailOutput
	ToAutoscaleSettingNotificationEmailOutputWithContext(context.Context) AutoscaleSettingNotificationEmailOutput
}

type AutoscaleSettingNotificationEmailArgs struct {
	// Specifies a list of custom email addresses to which the email notifications will be sent.
	CustomEmails pulumi.StringArrayInput `pulumi:"customEmails"`
	// Should email notifications be sent to the subscription administrator? Defaults to `false`.
	SendToSubscriptionAdministrator pulumi.BoolPtrInput `pulumi:"sendToSubscriptionAdministrator"`
	// Should email notifications be sent to the subscription co-administrator? Defaults to `false`.
	SendToSubscriptionCoAdministrator pulumi.BoolPtrInput `pulumi:"sendToSubscriptionCoAdministrator"`
}

func (AutoscaleSettingNotificationEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingNotificationEmail)(nil)).Elem()
}

func (i AutoscaleSettingNotificationEmailArgs) ToAutoscaleSettingNotificationEmailOutput() AutoscaleSettingNotificationEmailOutput {
	return i.ToAutoscaleSettingNotificationEmailOutputWithContext(context.Background())
}

func (i AutoscaleSettingNotificationEmailArgs) ToAutoscaleSettingNotificationEmailOutputWithContext(ctx context.Context) AutoscaleSettingNotificationEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingNotificationEmailOutput)
}

func (i AutoscaleSettingNotificationEmailArgs) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingNotificationEmail] {
	return pulumix.Output[AutoscaleSettingNotificationEmail]{
		OutputState: i.ToAutoscaleSettingNotificationEmailOutputWithContext(ctx).OutputState,
	}
}

func (i AutoscaleSettingNotificationEmailArgs) ToAutoscaleSettingNotificationEmailPtrOutput() AutoscaleSettingNotificationEmailPtrOutput {
	return i.ToAutoscaleSettingNotificationEmailPtrOutputWithContext(context.Background())
}

func (i AutoscaleSettingNotificationEmailArgs) ToAutoscaleSettingNotificationEmailPtrOutputWithContext(ctx context.Context) AutoscaleSettingNotificationEmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingNotificationEmailOutput).ToAutoscaleSettingNotificationEmailPtrOutputWithContext(ctx)
}

// AutoscaleSettingNotificationEmailPtrInput is an input type that accepts AutoscaleSettingNotificationEmailArgs, AutoscaleSettingNotificationEmailPtr and AutoscaleSettingNotificationEmailPtrOutput values.
// You can construct a concrete instance of `AutoscaleSettingNotificationEmailPtrInput` via:
//
//	        AutoscaleSettingNotificationEmailArgs{...}
//
//	or:
//
//	        nil
type AutoscaleSettingNotificationEmailPtrInput interface {
	pulumi.Input

	ToAutoscaleSettingNotificationEmailPtrOutput() AutoscaleSettingNotificationEmailPtrOutput
	ToAutoscaleSettingNotificationEmailPtrOutputWithContext(context.Context) AutoscaleSettingNotificationEmailPtrOutput
}

type autoscaleSettingNotificationEmailPtrType AutoscaleSettingNotificationEmailArgs

func AutoscaleSettingNotificationEmailPtr(v *AutoscaleSettingNotificationEmailArgs) AutoscaleSettingNotificationEmailPtrInput {
	return (*autoscaleSettingNotificationEmailPtrType)(v)
}

func (*autoscaleSettingNotificationEmailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleSettingNotificationEmail)(nil)).Elem()
}

func (i *autoscaleSettingNotificationEmailPtrType) ToAutoscaleSettingNotificationEmailPtrOutput() AutoscaleSettingNotificationEmailPtrOutput {
	return i.ToAutoscaleSettingNotificationEmailPtrOutputWithContext(context.Background())
}

func (i *autoscaleSettingNotificationEmailPtrType) ToAutoscaleSettingNotificationEmailPtrOutputWithContext(ctx context.Context) AutoscaleSettingNotificationEmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingNotificationEmailPtrOutput)
}

func (i *autoscaleSettingNotificationEmailPtrType) ToOutput(ctx context.Context) pulumix.Output[*AutoscaleSettingNotificationEmail] {
	return pulumix.Output[*AutoscaleSettingNotificationEmail]{
		OutputState: i.ToAutoscaleSettingNotificationEmailPtrOutputWithContext(ctx).OutputState,
	}
}

type AutoscaleSettingNotificationEmailOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingNotificationEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingNotificationEmail)(nil)).Elem()
}

func (o AutoscaleSettingNotificationEmailOutput) ToAutoscaleSettingNotificationEmailOutput() AutoscaleSettingNotificationEmailOutput {
	return o
}

func (o AutoscaleSettingNotificationEmailOutput) ToAutoscaleSettingNotificationEmailOutputWithContext(ctx context.Context) AutoscaleSettingNotificationEmailOutput {
	return o
}

func (o AutoscaleSettingNotificationEmailOutput) ToAutoscaleSettingNotificationEmailPtrOutput() AutoscaleSettingNotificationEmailPtrOutput {
	return o.ToAutoscaleSettingNotificationEmailPtrOutputWithContext(context.Background())
}

func (o AutoscaleSettingNotificationEmailOutput) ToAutoscaleSettingNotificationEmailPtrOutputWithContext(ctx context.Context) AutoscaleSettingNotificationEmailPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscaleSettingNotificationEmail) *AutoscaleSettingNotificationEmail {
		return &v
	}).(AutoscaleSettingNotificationEmailPtrOutput)
}

func (o AutoscaleSettingNotificationEmailOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingNotificationEmail] {
	return pulumix.Output[AutoscaleSettingNotificationEmail]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of custom email addresses to which the email notifications will be sent.
func (o AutoscaleSettingNotificationEmailOutput) CustomEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AutoscaleSettingNotificationEmail) []string { return v.CustomEmails }).(pulumi.StringArrayOutput)
}

// Should email notifications be sent to the subscription administrator? Defaults to `false`.
func (o AutoscaleSettingNotificationEmailOutput) SendToSubscriptionAdministrator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoscaleSettingNotificationEmail) *bool { return v.SendToSubscriptionAdministrator }).(pulumi.BoolPtrOutput)
}

// Should email notifications be sent to the subscription co-administrator? Defaults to `false`.
func (o AutoscaleSettingNotificationEmailOutput) SendToSubscriptionCoAdministrator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoscaleSettingNotificationEmail) *bool { return v.SendToSubscriptionCoAdministrator }).(pulumi.BoolPtrOutput)
}

type AutoscaleSettingNotificationEmailPtrOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingNotificationEmailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleSettingNotificationEmail)(nil)).Elem()
}

func (o AutoscaleSettingNotificationEmailPtrOutput) ToAutoscaleSettingNotificationEmailPtrOutput() AutoscaleSettingNotificationEmailPtrOutput {
	return o
}

func (o AutoscaleSettingNotificationEmailPtrOutput) ToAutoscaleSettingNotificationEmailPtrOutputWithContext(ctx context.Context) AutoscaleSettingNotificationEmailPtrOutput {
	return o
}

func (o AutoscaleSettingNotificationEmailPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AutoscaleSettingNotificationEmail] {
	return pulumix.Output[*AutoscaleSettingNotificationEmail]{
		OutputState: o.OutputState,
	}
}

func (o AutoscaleSettingNotificationEmailPtrOutput) Elem() AutoscaleSettingNotificationEmailOutput {
	return o.ApplyT(func(v *AutoscaleSettingNotificationEmail) AutoscaleSettingNotificationEmail {
		if v != nil {
			return *v
		}
		var ret AutoscaleSettingNotificationEmail
		return ret
	}).(AutoscaleSettingNotificationEmailOutput)
}

// Specifies a list of custom email addresses to which the email notifications will be sent.
func (o AutoscaleSettingNotificationEmailPtrOutput) CustomEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AutoscaleSettingNotificationEmail) []string {
		if v == nil {
			return nil
		}
		return v.CustomEmails
	}).(pulumi.StringArrayOutput)
}

// Should email notifications be sent to the subscription administrator? Defaults to `false`.
func (o AutoscaleSettingNotificationEmailPtrOutput) SendToSubscriptionAdministrator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoscaleSettingNotificationEmail) *bool {
		if v == nil {
			return nil
		}
		return v.SendToSubscriptionAdministrator
	}).(pulumi.BoolPtrOutput)
}

// Should email notifications be sent to the subscription co-administrator? Defaults to `false`.
func (o AutoscaleSettingNotificationEmailPtrOutput) SendToSubscriptionCoAdministrator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoscaleSettingNotificationEmail) *bool {
		if v == nil {
			return nil
		}
		return v.SendToSubscriptionCoAdministrator
	}).(pulumi.BoolPtrOutput)
}

type AutoscaleSettingNotificationWebhook struct {
	// A map of settings.
	Properties map[string]string `pulumi:"properties"`
	// The HTTPS URI which should receive scale notifications.
	ServiceUri string `pulumi:"serviceUri"`
}

// AutoscaleSettingNotificationWebhookInput is an input type that accepts AutoscaleSettingNotificationWebhookArgs and AutoscaleSettingNotificationWebhookOutput values.
// You can construct a concrete instance of `AutoscaleSettingNotificationWebhookInput` via:
//
//	AutoscaleSettingNotificationWebhookArgs{...}
type AutoscaleSettingNotificationWebhookInput interface {
	pulumi.Input

	ToAutoscaleSettingNotificationWebhookOutput() AutoscaleSettingNotificationWebhookOutput
	ToAutoscaleSettingNotificationWebhookOutputWithContext(context.Context) AutoscaleSettingNotificationWebhookOutput
}

type AutoscaleSettingNotificationWebhookArgs struct {
	// A map of settings.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// The HTTPS URI which should receive scale notifications.
	ServiceUri pulumi.StringInput `pulumi:"serviceUri"`
}

func (AutoscaleSettingNotificationWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingNotificationWebhook)(nil)).Elem()
}

func (i AutoscaleSettingNotificationWebhookArgs) ToAutoscaleSettingNotificationWebhookOutput() AutoscaleSettingNotificationWebhookOutput {
	return i.ToAutoscaleSettingNotificationWebhookOutputWithContext(context.Background())
}

func (i AutoscaleSettingNotificationWebhookArgs) ToAutoscaleSettingNotificationWebhookOutputWithContext(ctx context.Context) AutoscaleSettingNotificationWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingNotificationWebhookOutput)
}

func (i AutoscaleSettingNotificationWebhookArgs) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingNotificationWebhook] {
	return pulumix.Output[AutoscaleSettingNotificationWebhook]{
		OutputState: i.ToAutoscaleSettingNotificationWebhookOutputWithContext(ctx).OutputState,
	}
}

// AutoscaleSettingNotificationWebhookArrayInput is an input type that accepts AutoscaleSettingNotificationWebhookArray and AutoscaleSettingNotificationWebhookArrayOutput values.
// You can construct a concrete instance of `AutoscaleSettingNotificationWebhookArrayInput` via:
//
//	AutoscaleSettingNotificationWebhookArray{ AutoscaleSettingNotificationWebhookArgs{...} }
type AutoscaleSettingNotificationWebhookArrayInput interface {
	pulumi.Input

	ToAutoscaleSettingNotificationWebhookArrayOutput() AutoscaleSettingNotificationWebhookArrayOutput
	ToAutoscaleSettingNotificationWebhookArrayOutputWithContext(context.Context) AutoscaleSettingNotificationWebhookArrayOutput
}

type AutoscaleSettingNotificationWebhookArray []AutoscaleSettingNotificationWebhookInput

func (AutoscaleSettingNotificationWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleSettingNotificationWebhook)(nil)).Elem()
}

func (i AutoscaleSettingNotificationWebhookArray) ToAutoscaleSettingNotificationWebhookArrayOutput() AutoscaleSettingNotificationWebhookArrayOutput {
	return i.ToAutoscaleSettingNotificationWebhookArrayOutputWithContext(context.Background())
}

func (i AutoscaleSettingNotificationWebhookArray) ToAutoscaleSettingNotificationWebhookArrayOutputWithContext(ctx context.Context) AutoscaleSettingNotificationWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingNotificationWebhookArrayOutput)
}

func (i AutoscaleSettingNotificationWebhookArray) ToOutput(ctx context.Context) pulumix.Output[[]AutoscaleSettingNotificationWebhook] {
	return pulumix.Output[[]AutoscaleSettingNotificationWebhook]{
		OutputState: i.ToAutoscaleSettingNotificationWebhookArrayOutputWithContext(ctx).OutputState,
	}
}

type AutoscaleSettingNotificationWebhookOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingNotificationWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingNotificationWebhook)(nil)).Elem()
}

func (o AutoscaleSettingNotificationWebhookOutput) ToAutoscaleSettingNotificationWebhookOutput() AutoscaleSettingNotificationWebhookOutput {
	return o
}

func (o AutoscaleSettingNotificationWebhookOutput) ToAutoscaleSettingNotificationWebhookOutputWithContext(ctx context.Context) AutoscaleSettingNotificationWebhookOutput {
	return o
}

func (o AutoscaleSettingNotificationWebhookOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingNotificationWebhook] {
	return pulumix.Output[AutoscaleSettingNotificationWebhook]{
		OutputState: o.OutputState,
	}
}

// A map of settings.
func (o AutoscaleSettingNotificationWebhookOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoscaleSettingNotificationWebhook) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// The HTTPS URI which should receive scale notifications.
func (o AutoscaleSettingNotificationWebhookOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingNotificationWebhook) string { return v.ServiceUri }).(pulumi.StringOutput)
}

type AutoscaleSettingNotificationWebhookArrayOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingNotificationWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleSettingNotificationWebhook)(nil)).Elem()
}

func (o AutoscaleSettingNotificationWebhookArrayOutput) ToAutoscaleSettingNotificationWebhookArrayOutput() AutoscaleSettingNotificationWebhookArrayOutput {
	return o
}

func (o AutoscaleSettingNotificationWebhookArrayOutput) ToAutoscaleSettingNotificationWebhookArrayOutputWithContext(ctx context.Context) AutoscaleSettingNotificationWebhookArrayOutput {
	return o
}

func (o AutoscaleSettingNotificationWebhookArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AutoscaleSettingNotificationWebhook] {
	return pulumix.Output[[]AutoscaleSettingNotificationWebhook]{
		OutputState: o.OutputState,
	}
}

func (o AutoscaleSettingNotificationWebhookArrayOutput) Index(i pulumi.IntInput) AutoscaleSettingNotificationWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscaleSettingNotificationWebhook {
		return vs[0].([]AutoscaleSettingNotificationWebhook)[vs[1].(int)]
	}).(AutoscaleSettingNotificationWebhookOutput)
}

type AutoscaleSettingPredictive struct {
	// Specifies the amount of time by which instances are launched in advance. It must be between `PT1M` and `PT1H` in ISO 8601 format.
	LookAheadTime *string `pulumi:"lookAheadTime"`
	// Specifies the predictive scale mode. Possible values are `Enabled` or `ForecastOnly`.
	ScaleMode string `pulumi:"scaleMode"`
}

// AutoscaleSettingPredictiveInput is an input type that accepts AutoscaleSettingPredictiveArgs and AutoscaleSettingPredictiveOutput values.
// You can construct a concrete instance of `AutoscaleSettingPredictiveInput` via:
//
//	AutoscaleSettingPredictiveArgs{...}
type AutoscaleSettingPredictiveInput interface {
	pulumi.Input

	ToAutoscaleSettingPredictiveOutput() AutoscaleSettingPredictiveOutput
	ToAutoscaleSettingPredictiveOutputWithContext(context.Context) AutoscaleSettingPredictiveOutput
}

type AutoscaleSettingPredictiveArgs struct {
	// Specifies the amount of time by which instances are launched in advance. It must be between `PT1M` and `PT1H` in ISO 8601 format.
	LookAheadTime pulumi.StringPtrInput `pulumi:"lookAheadTime"`
	// Specifies the predictive scale mode. Possible values are `Enabled` or `ForecastOnly`.
	ScaleMode pulumi.StringInput `pulumi:"scaleMode"`
}

func (AutoscaleSettingPredictiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingPredictive)(nil)).Elem()
}

func (i AutoscaleSettingPredictiveArgs) ToAutoscaleSettingPredictiveOutput() AutoscaleSettingPredictiveOutput {
	return i.ToAutoscaleSettingPredictiveOutputWithContext(context.Background())
}

func (i AutoscaleSettingPredictiveArgs) ToAutoscaleSettingPredictiveOutputWithContext(ctx context.Context) AutoscaleSettingPredictiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingPredictiveOutput)
}

func (i AutoscaleSettingPredictiveArgs) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingPredictive] {
	return pulumix.Output[AutoscaleSettingPredictive]{
		OutputState: i.ToAutoscaleSettingPredictiveOutputWithContext(ctx).OutputState,
	}
}

func (i AutoscaleSettingPredictiveArgs) ToAutoscaleSettingPredictivePtrOutput() AutoscaleSettingPredictivePtrOutput {
	return i.ToAutoscaleSettingPredictivePtrOutputWithContext(context.Background())
}

func (i AutoscaleSettingPredictiveArgs) ToAutoscaleSettingPredictivePtrOutputWithContext(ctx context.Context) AutoscaleSettingPredictivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingPredictiveOutput).ToAutoscaleSettingPredictivePtrOutputWithContext(ctx)
}

// AutoscaleSettingPredictivePtrInput is an input type that accepts AutoscaleSettingPredictiveArgs, AutoscaleSettingPredictivePtr and AutoscaleSettingPredictivePtrOutput values.
// You can construct a concrete instance of `AutoscaleSettingPredictivePtrInput` via:
//
//	        AutoscaleSettingPredictiveArgs{...}
//
//	or:
//
//	        nil
type AutoscaleSettingPredictivePtrInput interface {
	pulumi.Input

	ToAutoscaleSettingPredictivePtrOutput() AutoscaleSettingPredictivePtrOutput
	ToAutoscaleSettingPredictivePtrOutputWithContext(context.Context) AutoscaleSettingPredictivePtrOutput
}

type autoscaleSettingPredictivePtrType AutoscaleSettingPredictiveArgs

func AutoscaleSettingPredictivePtr(v *AutoscaleSettingPredictiveArgs) AutoscaleSettingPredictivePtrInput {
	return (*autoscaleSettingPredictivePtrType)(v)
}

func (*autoscaleSettingPredictivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleSettingPredictive)(nil)).Elem()
}

func (i *autoscaleSettingPredictivePtrType) ToAutoscaleSettingPredictivePtrOutput() AutoscaleSettingPredictivePtrOutput {
	return i.ToAutoscaleSettingPredictivePtrOutputWithContext(context.Background())
}

func (i *autoscaleSettingPredictivePtrType) ToAutoscaleSettingPredictivePtrOutputWithContext(ctx context.Context) AutoscaleSettingPredictivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingPredictivePtrOutput)
}

func (i *autoscaleSettingPredictivePtrType) ToOutput(ctx context.Context) pulumix.Output[*AutoscaleSettingPredictive] {
	return pulumix.Output[*AutoscaleSettingPredictive]{
		OutputState: i.ToAutoscaleSettingPredictivePtrOutputWithContext(ctx).OutputState,
	}
}

type AutoscaleSettingPredictiveOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingPredictiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingPredictive)(nil)).Elem()
}

func (o AutoscaleSettingPredictiveOutput) ToAutoscaleSettingPredictiveOutput() AutoscaleSettingPredictiveOutput {
	return o
}

func (o AutoscaleSettingPredictiveOutput) ToAutoscaleSettingPredictiveOutputWithContext(ctx context.Context) AutoscaleSettingPredictiveOutput {
	return o
}

func (o AutoscaleSettingPredictiveOutput) ToAutoscaleSettingPredictivePtrOutput() AutoscaleSettingPredictivePtrOutput {
	return o.ToAutoscaleSettingPredictivePtrOutputWithContext(context.Background())
}

func (o AutoscaleSettingPredictiveOutput) ToAutoscaleSettingPredictivePtrOutputWithContext(ctx context.Context) AutoscaleSettingPredictivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscaleSettingPredictive) *AutoscaleSettingPredictive {
		return &v
	}).(AutoscaleSettingPredictivePtrOutput)
}

func (o AutoscaleSettingPredictiveOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingPredictive] {
	return pulumix.Output[AutoscaleSettingPredictive]{
		OutputState: o.OutputState,
	}
}

// Specifies the amount of time by which instances are launched in advance. It must be between `PT1M` and `PT1H` in ISO 8601 format.
func (o AutoscaleSettingPredictiveOutput) LookAheadTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleSettingPredictive) *string { return v.LookAheadTime }).(pulumi.StringPtrOutput)
}

// Specifies the predictive scale mode. Possible values are `Enabled` or `ForecastOnly`.
func (o AutoscaleSettingPredictiveOutput) ScaleMode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingPredictive) string { return v.ScaleMode }).(pulumi.StringOutput)
}

type AutoscaleSettingPredictivePtrOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingPredictivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleSettingPredictive)(nil)).Elem()
}

func (o AutoscaleSettingPredictivePtrOutput) ToAutoscaleSettingPredictivePtrOutput() AutoscaleSettingPredictivePtrOutput {
	return o
}

func (o AutoscaleSettingPredictivePtrOutput) ToAutoscaleSettingPredictivePtrOutputWithContext(ctx context.Context) AutoscaleSettingPredictivePtrOutput {
	return o
}

func (o AutoscaleSettingPredictivePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AutoscaleSettingPredictive] {
	return pulumix.Output[*AutoscaleSettingPredictive]{
		OutputState: o.OutputState,
	}
}

func (o AutoscaleSettingPredictivePtrOutput) Elem() AutoscaleSettingPredictiveOutput {
	return o.ApplyT(func(v *AutoscaleSettingPredictive) AutoscaleSettingPredictive {
		if v != nil {
			return *v
		}
		var ret AutoscaleSettingPredictive
		return ret
	}).(AutoscaleSettingPredictiveOutput)
}

// Specifies the amount of time by which instances are launched in advance. It must be between `PT1M` and `PT1H` in ISO 8601 format.
func (o AutoscaleSettingPredictivePtrOutput) LookAheadTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscaleSettingPredictive) *string {
		if v == nil {
			return nil
		}
		return v.LookAheadTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the predictive scale mode. Possible values are `Enabled` or `ForecastOnly`.
func (o AutoscaleSettingPredictivePtrOutput) ScaleMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscaleSettingPredictive) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleMode
	}).(pulumi.StringPtrOutput)
}

type AutoscaleSettingProfile struct {
	// A `capacity` block as defined below.
	Capacity AutoscaleSettingProfileCapacity `pulumi:"capacity"`
	// A `fixedDate` block as defined below. This cannot be specified if a `recurrence` block is specified.
	FixedDate *AutoscaleSettingProfileFixedDate `pulumi:"fixedDate"`
	// Specifies the name of the profile.
	Name string `pulumi:"name"`
	// A `recurrence` block as defined below. This cannot be specified if a `fixedDate` block is specified.
	Recurrence *AutoscaleSettingProfileRecurrence `pulumi:"recurrence"`
	// One or more (up to 10) `rule` blocks as defined below.
	Rules []AutoscaleSettingProfileRule `pulumi:"rules"`
}

// AutoscaleSettingProfileInput is an input type that accepts AutoscaleSettingProfileArgs and AutoscaleSettingProfileOutput values.
// You can construct a concrete instance of `AutoscaleSettingProfileInput` via:
//
//	AutoscaleSettingProfileArgs{...}
type AutoscaleSettingProfileInput interface {
	pulumi.Input

	ToAutoscaleSettingProfileOutput() AutoscaleSettingProfileOutput
	ToAutoscaleSettingProfileOutputWithContext(context.Context) AutoscaleSettingProfileOutput
}

type AutoscaleSettingProfileArgs struct {
	// A `capacity` block as defined below.
	Capacity AutoscaleSettingProfileCapacityInput `pulumi:"capacity"`
	// A `fixedDate` block as defined below. This cannot be specified if a `recurrence` block is specified.
	FixedDate AutoscaleSettingProfileFixedDatePtrInput `pulumi:"fixedDate"`
	// Specifies the name of the profile.
	Name pulumi.StringInput `pulumi:"name"`
	// A `recurrence` block as defined below. This cannot be specified if a `fixedDate` block is specified.
	Recurrence AutoscaleSettingProfileRecurrencePtrInput `pulumi:"recurrence"`
	// One or more (up to 10) `rule` blocks as defined below.
	Rules AutoscaleSettingProfileRuleArrayInput `pulumi:"rules"`
}

func (AutoscaleSettingProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfile)(nil)).Elem()
}

func (i AutoscaleSettingProfileArgs) ToAutoscaleSettingProfileOutput() AutoscaleSettingProfileOutput {
	return i.ToAutoscaleSettingProfileOutputWithContext(context.Background())
}

func (i AutoscaleSettingProfileArgs) ToAutoscaleSettingProfileOutputWithContext(ctx context.Context) AutoscaleSettingProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileOutput)
}

func (i AutoscaleSettingProfileArgs) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfile] {
	return pulumix.Output[AutoscaleSettingProfile]{
		OutputState: i.ToAutoscaleSettingProfileOutputWithContext(ctx).OutputState,
	}
}

// AutoscaleSettingProfileArrayInput is an input type that accepts AutoscaleSettingProfileArray and AutoscaleSettingProfileArrayOutput values.
// You can construct a concrete instance of `AutoscaleSettingProfileArrayInput` via:
//
//	AutoscaleSettingProfileArray{ AutoscaleSettingProfileArgs{...} }
type AutoscaleSettingProfileArrayInput interface {
	pulumi.Input

	ToAutoscaleSettingProfileArrayOutput() AutoscaleSettingProfileArrayOutput
	ToAutoscaleSettingProfileArrayOutputWithContext(context.Context) AutoscaleSettingProfileArrayOutput
}

type AutoscaleSettingProfileArray []AutoscaleSettingProfileInput

func (AutoscaleSettingProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleSettingProfile)(nil)).Elem()
}

func (i AutoscaleSettingProfileArray) ToAutoscaleSettingProfileArrayOutput() AutoscaleSettingProfileArrayOutput {
	return i.ToAutoscaleSettingProfileArrayOutputWithContext(context.Background())
}

func (i AutoscaleSettingProfileArray) ToAutoscaleSettingProfileArrayOutputWithContext(ctx context.Context) AutoscaleSettingProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileArrayOutput)
}

func (i AutoscaleSettingProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]AutoscaleSettingProfile] {
	return pulumix.Output[[]AutoscaleSettingProfile]{
		OutputState: i.ToAutoscaleSettingProfileArrayOutputWithContext(ctx).OutputState,
	}
}

type AutoscaleSettingProfileOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfile)(nil)).Elem()
}

func (o AutoscaleSettingProfileOutput) ToAutoscaleSettingProfileOutput() AutoscaleSettingProfileOutput {
	return o
}

func (o AutoscaleSettingProfileOutput) ToAutoscaleSettingProfileOutputWithContext(ctx context.Context) AutoscaleSettingProfileOutput {
	return o
}

func (o AutoscaleSettingProfileOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfile] {
	return pulumix.Output[AutoscaleSettingProfile]{
		OutputState: o.OutputState,
	}
}

// A `capacity` block as defined below.
func (o AutoscaleSettingProfileOutput) Capacity() AutoscaleSettingProfileCapacityOutput {
	return o.ApplyT(func(v AutoscaleSettingProfile) AutoscaleSettingProfileCapacity { return v.Capacity }).(AutoscaleSettingProfileCapacityOutput)
}

// A `fixedDate` block as defined below. This cannot be specified if a `recurrence` block is specified.
func (o AutoscaleSettingProfileOutput) FixedDate() AutoscaleSettingProfileFixedDatePtrOutput {
	return o.ApplyT(func(v AutoscaleSettingProfile) *AutoscaleSettingProfileFixedDate { return v.FixedDate }).(AutoscaleSettingProfileFixedDatePtrOutput)
}

// Specifies the name of the profile.
func (o AutoscaleSettingProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfile) string { return v.Name }).(pulumi.StringOutput)
}

// A `recurrence` block as defined below. This cannot be specified if a `fixedDate` block is specified.
func (o AutoscaleSettingProfileOutput) Recurrence() AutoscaleSettingProfileRecurrencePtrOutput {
	return o.ApplyT(func(v AutoscaleSettingProfile) *AutoscaleSettingProfileRecurrence { return v.Recurrence }).(AutoscaleSettingProfileRecurrencePtrOutput)
}

// One or more (up to 10) `rule` blocks as defined below.
func (o AutoscaleSettingProfileOutput) Rules() AutoscaleSettingProfileRuleArrayOutput {
	return o.ApplyT(func(v AutoscaleSettingProfile) []AutoscaleSettingProfileRule { return v.Rules }).(AutoscaleSettingProfileRuleArrayOutput)
}

type AutoscaleSettingProfileArrayOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleSettingProfile)(nil)).Elem()
}

func (o AutoscaleSettingProfileArrayOutput) ToAutoscaleSettingProfileArrayOutput() AutoscaleSettingProfileArrayOutput {
	return o
}

func (o AutoscaleSettingProfileArrayOutput) ToAutoscaleSettingProfileArrayOutputWithContext(ctx context.Context) AutoscaleSettingProfileArrayOutput {
	return o
}

func (o AutoscaleSettingProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AutoscaleSettingProfile] {
	return pulumix.Output[[]AutoscaleSettingProfile]{
		OutputState: o.OutputState,
	}
}

func (o AutoscaleSettingProfileArrayOutput) Index(i pulumi.IntInput) AutoscaleSettingProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscaleSettingProfile {
		return vs[0].([]AutoscaleSettingProfile)[vs[1].(int)]
	}).(AutoscaleSettingProfileOutput)
}

type AutoscaleSettingProfileCapacity struct {
	// The number of instances that are available for scaling if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default. Valid values are between `0` and `1000`.
	Default int `pulumi:"default"`
	// The maximum number of instances for this resource. Valid values are between `0` and `1000`.
	//
	// > **NOTE:** The maximum number of instances is also limited by the amount of Cores available in the subscription.
	Maximum int `pulumi:"maximum"`
	// The minimum number of instances for this resource. Valid values are between `0` and `1000`.
	Minimum int `pulumi:"minimum"`
}

// AutoscaleSettingProfileCapacityInput is an input type that accepts AutoscaleSettingProfileCapacityArgs and AutoscaleSettingProfileCapacityOutput values.
// You can construct a concrete instance of `AutoscaleSettingProfileCapacityInput` via:
//
//	AutoscaleSettingProfileCapacityArgs{...}
type AutoscaleSettingProfileCapacityInput interface {
	pulumi.Input

	ToAutoscaleSettingProfileCapacityOutput() AutoscaleSettingProfileCapacityOutput
	ToAutoscaleSettingProfileCapacityOutputWithContext(context.Context) AutoscaleSettingProfileCapacityOutput
}

type AutoscaleSettingProfileCapacityArgs struct {
	// The number of instances that are available for scaling if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default. Valid values are between `0` and `1000`.
	Default pulumi.IntInput `pulumi:"default"`
	// The maximum number of instances for this resource. Valid values are between `0` and `1000`.
	//
	// > **NOTE:** The maximum number of instances is also limited by the amount of Cores available in the subscription.
	Maximum pulumi.IntInput `pulumi:"maximum"`
	// The minimum number of instances for this resource. Valid values are between `0` and `1000`.
	Minimum pulumi.IntInput `pulumi:"minimum"`
}

func (AutoscaleSettingProfileCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfileCapacity)(nil)).Elem()
}

func (i AutoscaleSettingProfileCapacityArgs) ToAutoscaleSettingProfileCapacityOutput() AutoscaleSettingProfileCapacityOutput {
	return i.ToAutoscaleSettingProfileCapacityOutputWithContext(context.Background())
}

func (i AutoscaleSettingProfileCapacityArgs) ToAutoscaleSettingProfileCapacityOutputWithContext(ctx context.Context) AutoscaleSettingProfileCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileCapacityOutput)
}

func (i AutoscaleSettingProfileCapacityArgs) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfileCapacity] {
	return pulumix.Output[AutoscaleSettingProfileCapacity]{
		OutputState: i.ToAutoscaleSettingProfileCapacityOutputWithContext(ctx).OutputState,
	}
}

type AutoscaleSettingProfileCapacityOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingProfileCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfileCapacity)(nil)).Elem()
}

func (o AutoscaleSettingProfileCapacityOutput) ToAutoscaleSettingProfileCapacityOutput() AutoscaleSettingProfileCapacityOutput {
	return o
}

func (o AutoscaleSettingProfileCapacityOutput) ToAutoscaleSettingProfileCapacityOutputWithContext(ctx context.Context) AutoscaleSettingProfileCapacityOutput {
	return o
}

func (o AutoscaleSettingProfileCapacityOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfileCapacity] {
	return pulumix.Output[AutoscaleSettingProfileCapacity]{
		OutputState: o.OutputState,
	}
}

// The number of instances that are available for scaling if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default. Valid values are between `0` and `1000`.
func (o AutoscaleSettingProfileCapacityOutput) Default() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileCapacity) int { return v.Default }).(pulumi.IntOutput)
}

// The maximum number of instances for this resource. Valid values are between `0` and `1000`.
//
// > **NOTE:** The maximum number of instances is also limited by the amount of Cores available in the subscription.
func (o AutoscaleSettingProfileCapacityOutput) Maximum() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileCapacity) int { return v.Maximum }).(pulumi.IntOutput)
}

// The minimum number of instances for this resource. Valid values are between `0` and `1000`.
func (o AutoscaleSettingProfileCapacityOutput) Minimum() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileCapacity) int { return v.Minimum }).(pulumi.IntOutput)
}

type AutoscaleSettingProfileFixedDate struct {
	// Specifies the end date for the profile, formatted as an RFC3339 date string.
	End string `pulumi:"end"`
	// Specifies the start date for the profile, formatted as an RFC3339 date string.
	Start string `pulumi:"start"`
	// The Time Zone of the `start` and `end` times. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
	Timezone *string `pulumi:"timezone"`
}

// AutoscaleSettingProfileFixedDateInput is an input type that accepts AutoscaleSettingProfileFixedDateArgs and AutoscaleSettingProfileFixedDateOutput values.
// You can construct a concrete instance of `AutoscaleSettingProfileFixedDateInput` via:
//
//	AutoscaleSettingProfileFixedDateArgs{...}
type AutoscaleSettingProfileFixedDateInput interface {
	pulumi.Input

	ToAutoscaleSettingProfileFixedDateOutput() AutoscaleSettingProfileFixedDateOutput
	ToAutoscaleSettingProfileFixedDateOutputWithContext(context.Context) AutoscaleSettingProfileFixedDateOutput
}

type AutoscaleSettingProfileFixedDateArgs struct {
	// Specifies the end date for the profile, formatted as an RFC3339 date string.
	End pulumi.StringInput `pulumi:"end"`
	// Specifies the start date for the profile, formatted as an RFC3339 date string.
	Start pulumi.StringInput `pulumi:"start"`
	// The Time Zone of the `start` and `end` times. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
}

func (AutoscaleSettingProfileFixedDateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfileFixedDate)(nil)).Elem()
}

func (i AutoscaleSettingProfileFixedDateArgs) ToAutoscaleSettingProfileFixedDateOutput() AutoscaleSettingProfileFixedDateOutput {
	return i.ToAutoscaleSettingProfileFixedDateOutputWithContext(context.Background())
}

func (i AutoscaleSettingProfileFixedDateArgs) ToAutoscaleSettingProfileFixedDateOutputWithContext(ctx context.Context) AutoscaleSettingProfileFixedDateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileFixedDateOutput)
}

func (i AutoscaleSettingProfileFixedDateArgs) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfileFixedDate] {
	return pulumix.Output[AutoscaleSettingProfileFixedDate]{
		OutputState: i.ToAutoscaleSettingProfileFixedDateOutputWithContext(ctx).OutputState,
	}
}

func (i AutoscaleSettingProfileFixedDateArgs) ToAutoscaleSettingProfileFixedDatePtrOutput() AutoscaleSettingProfileFixedDatePtrOutput {
	return i.ToAutoscaleSettingProfileFixedDatePtrOutputWithContext(context.Background())
}

func (i AutoscaleSettingProfileFixedDateArgs) ToAutoscaleSettingProfileFixedDatePtrOutputWithContext(ctx context.Context) AutoscaleSettingProfileFixedDatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileFixedDateOutput).ToAutoscaleSettingProfileFixedDatePtrOutputWithContext(ctx)
}

// AutoscaleSettingProfileFixedDatePtrInput is an input type that accepts AutoscaleSettingProfileFixedDateArgs, AutoscaleSettingProfileFixedDatePtr and AutoscaleSettingProfileFixedDatePtrOutput values.
// You can construct a concrete instance of `AutoscaleSettingProfileFixedDatePtrInput` via:
//
//	        AutoscaleSettingProfileFixedDateArgs{...}
//
//	or:
//
//	        nil
type AutoscaleSettingProfileFixedDatePtrInput interface {
	pulumi.Input

	ToAutoscaleSettingProfileFixedDatePtrOutput() AutoscaleSettingProfileFixedDatePtrOutput
	ToAutoscaleSettingProfileFixedDatePtrOutputWithContext(context.Context) AutoscaleSettingProfileFixedDatePtrOutput
}

type autoscaleSettingProfileFixedDatePtrType AutoscaleSettingProfileFixedDateArgs

func AutoscaleSettingProfileFixedDatePtr(v *AutoscaleSettingProfileFixedDateArgs) AutoscaleSettingProfileFixedDatePtrInput {
	return (*autoscaleSettingProfileFixedDatePtrType)(v)
}

func (*autoscaleSettingProfileFixedDatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleSettingProfileFixedDate)(nil)).Elem()
}

func (i *autoscaleSettingProfileFixedDatePtrType) ToAutoscaleSettingProfileFixedDatePtrOutput() AutoscaleSettingProfileFixedDatePtrOutput {
	return i.ToAutoscaleSettingProfileFixedDatePtrOutputWithContext(context.Background())
}

func (i *autoscaleSettingProfileFixedDatePtrType) ToAutoscaleSettingProfileFixedDatePtrOutputWithContext(ctx context.Context) AutoscaleSettingProfileFixedDatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileFixedDatePtrOutput)
}

func (i *autoscaleSettingProfileFixedDatePtrType) ToOutput(ctx context.Context) pulumix.Output[*AutoscaleSettingProfileFixedDate] {
	return pulumix.Output[*AutoscaleSettingProfileFixedDate]{
		OutputState: i.ToAutoscaleSettingProfileFixedDatePtrOutputWithContext(ctx).OutputState,
	}
}

type AutoscaleSettingProfileFixedDateOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingProfileFixedDateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfileFixedDate)(nil)).Elem()
}

func (o AutoscaleSettingProfileFixedDateOutput) ToAutoscaleSettingProfileFixedDateOutput() AutoscaleSettingProfileFixedDateOutput {
	return o
}

func (o AutoscaleSettingProfileFixedDateOutput) ToAutoscaleSettingProfileFixedDateOutputWithContext(ctx context.Context) AutoscaleSettingProfileFixedDateOutput {
	return o
}

func (o AutoscaleSettingProfileFixedDateOutput) ToAutoscaleSettingProfileFixedDatePtrOutput() AutoscaleSettingProfileFixedDatePtrOutput {
	return o.ToAutoscaleSettingProfileFixedDatePtrOutputWithContext(context.Background())
}

func (o AutoscaleSettingProfileFixedDateOutput) ToAutoscaleSettingProfileFixedDatePtrOutputWithContext(ctx context.Context) AutoscaleSettingProfileFixedDatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscaleSettingProfileFixedDate) *AutoscaleSettingProfileFixedDate {
		return &v
	}).(AutoscaleSettingProfileFixedDatePtrOutput)
}

func (o AutoscaleSettingProfileFixedDateOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfileFixedDate] {
	return pulumix.Output[AutoscaleSettingProfileFixedDate]{
		OutputState: o.OutputState,
	}
}

// Specifies the end date for the profile, formatted as an RFC3339 date string.
func (o AutoscaleSettingProfileFixedDateOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileFixedDate) string { return v.End }).(pulumi.StringOutput)
}

// Specifies the start date for the profile, formatted as an RFC3339 date string.
func (o AutoscaleSettingProfileFixedDateOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileFixedDate) string { return v.Start }).(pulumi.StringOutput)
}

// The Time Zone of the `start` and `end` times. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
func (o AutoscaleSettingProfileFixedDateOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileFixedDate) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

type AutoscaleSettingProfileFixedDatePtrOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingProfileFixedDatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleSettingProfileFixedDate)(nil)).Elem()
}

func (o AutoscaleSettingProfileFixedDatePtrOutput) ToAutoscaleSettingProfileFixedDatePtrOutput() AutoscaleSettingProfileFixedDatePtrOutput {
	return o
}

func (o AutoscaleSettingProfileFixedDatePtrOutput) ToAutoscaleSettingProfileFixedDatePtrOutputWithContext(ctx context.Context) AutoscaleSettingProfileFixedDatePtrOutput {
	return o
}

func (o AutoscaleSettingProfileFixedDatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AutoscaleSettingProfileFixedDate] {
	return pulumix.Output[*AutoscaleSettingProfileFixedDate]{
		OutputState: o.OutputState,
	}
}

func (o AutoscaleSettingProfileFixedDatePtrOutput) Elem() AutoscaleSettingProfileFixedDateOutput {
	return o.ApplyT(func(v *AutoscaleSettingProfileFixedDate) AutoscaleSettingProfileFixedDate {
		if v != nil {
			return *v
		}
		var ret AutoscaleSettingProfileFixedDate
		return ret
	}).(AutoscaleSettingProfileFixedDateOutput)
}

// Specifies the end date for the profile, formatted as an RFC3339 date string.
func (o AutoscaleSettingProfileFixedDatePtrOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscaleSettingProfileFixedDate) *string {
		if v == nil {
			return nil
		}
		return &v.End
	}).(pulumi.StringPtrOutput)
}

// Specifies the start date for the profile, formatted as an RFC3339 date string.
func (o AutoscaleSettingProfileFixedDatePtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscaleSettingProfileFixedDate) *string {
		if v == nil {
			return nil
		}
		return &v.Start
	}).(pulumi.StringPtrOutput)
}

// The Time Zone of the `start` and `end` times. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
func (o AutoscaleSettingProfileFixedDatePtrOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscaleSettingProfileFixedDate) *string {
		if v == nil {
			return nil
		}
		return v.Timezone
	}).(pulumi.StringPtrOutput)
}

type AutoscaleSettingProfileRecurrence struct {
	// A list of days that this profile takes effect on. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
	Days []string `pulumi:"days"`
	// A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered (in 24-hour time). Possible values are from `0` to `23`.
	Hours int `pulumi:"hours"`
	// A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
	Minutes int `pulumi:"minutes"`
	// The Time Zone used for the `hours` field. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
	Timezone *string `pulumi:"timezone"`
}

// AutoscaleSettingProfileRecurrenceInput is an input type that accepts AutoscaleSettingProfileRecurrenceArgs and AutoscaleSettingProfileRecurrenceOutput values.
// You can construct a concrete instance of `AutoscaleSettingProfileRecurrenceInput` via:
//
//	AutoscaleSettingProfileRecurrenceArgs{...}
type AutoscaleSettingProfileRecurrenceInput interface {
	pulumi.Input

	ToAutoscaleSettingProfileRecurrenceOutput() AutoscaleSettingProfileRecurrenceOutput
	ToAutoscaleSettingProfileRecurrenceOutputWithContext(context.Context) AutoscaleSettingProfileRecurrenceOutput
}

type AutoscaleSettingProfileRecurrenceArgs struct {
	// A list of days that this profile takes effect on. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
	Days pulumi.StringArrayInput `pulumi:"days"`
	// A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered (in 24-hour time). Possible values are from `0` to `23`.
	Hours pulumi.IntInput `pulumi:"hours"`
	// A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
	Minutes pulumi.IntInput `pulumi:"minutes"`
	// The Time Zone used for the `hours` field. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
}

func (AutoscaleSettingProfileRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfileRecurrence)(nil)).Elem()
}

func (i AutoscaleSettingProfileRecurrenceArgs) ToAutoscaleSettingProfileRecurrenceOutput() AutoscaleSettingProfileRecurrenceOutput {
	return i.ToAutoscaleSettingProfileRecurrenceOutputWithContext(context.Background())
}

func (i AutoscaleSettingProfileRecurrenceArgs) ToAutoscaleSettingProfileRecurrenceOutputWithContext(ctx context.Context) AutoscaleSettingProfileRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileRecurrenceOutput)
}

func (i AutoscaleSettingProfileRecurrenceArgs) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfileRecurrence] {
	return pulumix.Output[AutoscaleSettingProfileRecurrence]{
		OutputState: i.ToAutoscaleSettingProfileRecurrenceOutputWithContext(ctx).OutputState,
	}
}

func (i AutoscaleSettingProfileRecurrenceArgs) ToAutoscaleSettingProfileRecurrencePtrOutput() AutoscaleSettingProfileRecurrencePtrOutput {
	return i.ToAutoscaleSettingProfileRecurrencePtrOutputWithContext(context.Background())
}

func (i AutoscaleSettingProfileRecurrenceArgs) ToAutoscaleSettingProfileRecurrencePtrOutputWithContext(ctx context.Context) AutoscaleSettingProfileRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileRecurrenceOutput).ToAutoscaleSettingProfileRecurrencePtrOutputWithContext(ctx)
}

// AutoscaleSettingProfileRecurrencePtrInput is an input type that accepts AutoscaleSettingProfileRecurrenceArgs, AutoscaleSettingProfileRecurrencePtr and AutoscaleSettingProfileRecurrencePtrOutput values.
// You can construct a concrete instance of `AutoscaleSettingProfileRecurrencePtrInput` via:
//
//	        AutoscaleSettingProfileRecurrenceArgs{...}
//
//	or:
//
//	        nil
type AutoscaleSettingProfileRecurrencePtrInput interface {
	pulumi.Input

	ToAutoscaleSettingProfileRecurrencePtrOutput() AutoscaleSettingProfileRecurrencePtrOutput
	ToAutoscaleSettingProfileRecurrencePtrOutputWithContext(context.Context) AutoscaleSettingProfileRecurrencePtrOutput
}

type autoscaleSettingProfileRecurrencePtrType AutoscaleSettingProfileRecurrenceArgs

func AutoscaleSettingProfileRecurrencePtr(v *AutoscaleSettingProfileRecurrenceArgs) AutoscaleSettingProfileRecurrencePtrInput {
	return (*autoscaleSettingProfileRecurrencePtrType)(v)
}

func (*autoscaleSettingProfileRecurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleSettingProfileRecurrence)(nil)).Elem()
}

func (i *autoscaleSettingProfileRecurrencePtrType) ToAutoscaleSettingProfileRecurrencePtrOutput() AutoscaleSettingProfileRecurrencePtrOutput {
	return i.ToAutoscaleSettingProfileRecurrencePtrOutputWithContext(context.Background())
}

func (i *autoscaleSettingProfileRecurrencePtrType) ToAutoscaleSettingProfileRecurrencePtrOutputWithContext(ctx context.Context) AutoscaleSettingProfileRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileRecurrencePtrOutput)
}

func (i *autoscaleSettingProfileRecurrencePtrType) ToOutput(ctx context.Context) pulumix.Output[*AutoscaleSettingProfileRecurrence] {
	return pulumix.Output[*AutoscaleSettingProfileRecurrence]{
		OutputState: i.ToAutoscaleSettingProfileRecurrencePtrOutputWithContext(ctx).OutputState,
	}
}

type AutoscaleSettingProfileRecurrenceOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingProfileRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfileRecurrence)(nil)).Elem()
}

func (o AutoscaleSettingProfileRecurrenceOutput) ToAutoscaleSettingProfileRecurrenceOutput() AutoscaleSettingProfileRecurrenceOutput {
	return o
}

func (o AutoscaleSettingProfileRecurrenceOutput) ToAutoscaleSettingProfileRecurrenceOutputWithContext(ctx context.Context) AutoscaleSettingProfileRecurrenceOutput {
	return o
}

func (o AutoscaleSettingProfileRecurrenceOutput) ToAutoscaleSettingProfileRecurrencePtrOutput() AutoscaleSettingProfileRecurrencePtrOutput {
	return o.ToAutoscaleSettingProfileRecurrencePtrOutputWithContext(context.Background())
}

func (o AutoscaleSettingProfileRecurrenceOutput) ToAutoscaleSettingProfileRecurrencePtrOutputWithContext(ctx context.Context) AutoscaleSettingProfileRecurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscaleSettingProfileRecurrence) *AutoscaleSettingProfileRecurrence {
		return &v
	}).(AutoscaleSettingProfileRecurrencePtrOutput)
}

func (o AutoscaleSettingProfileRecurrenceOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfileRecurrence] {
	return pulumix.Output[AutoscaleSettingProfileRecurrence]{
		OutputState: o.OutputState,
	}
}

// A list of days that this profile takes effect on. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
func (o AutoscaleSettingProfileRecurrenceOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRecurrence) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered (in 24-hour time). Possible values are from `0` to `23`.
func (o AutoscaleSettingProfileRecurrenceOutput) Hours() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRecurrence) int { return v.Hours }).(pulumi.IntOutput)
}

// A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
func (o AutoscaleSettingProfileRecurrenceOutput) Minutes() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRecurrence) int { return v.Minutes }).(pulumi.IntOutput)
}

// The Time Zone used for the `hours` field. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
func (o AutoscaleSettingProfileRecurrenceOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRecurrence) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

type AutoscaleSettingProfileRecurrencePtrOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingProfileRecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleSettingProfileRecurrence)(nil)).Elem()
}

func (o AutoscaleSettingProfileRecurrencePtrOutput) ToAutoscaleSettingProfileRecurrencePtrOutput() AutoscaleSettingProfileRecurrencePtrOutput {
	return o
}

func (o AutoscaleSettingProfileRecurrencePtrOutput) ToAutoscaleSettingProfileRecurrencePtrOutputWithContext(ctx context.Context) AutoscaleSettingProfileRecurrencePtrOutput {
	return o
}

func (o AutoscaleSettingProfileRecurrencePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AutoscaleSettingProfileRecurrence] {
	return pulumix.Output[*AutoscaleSettingProfileRecurrence]{
		OutputState: o.OutputState,
	}
}

func (o AutoscaleSettingProfileRecurrencePtrOutput) Elem() AutoscaleSettingProfileRecurrenceOutput {
	return o.ApplyT(func(v *AutoscaleSettingProfileRecurrence) AutoscaleSettingProfileRecurrence {
		if v != nil {
			return *v
		}
		var ret AutoscaleSettingProfileRecurrence
		return ret
	}).(AutoscaleSettingProfileRecurrenceOutput)
}

// A list of days that this profile takes effect on. Possible values include `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday` and `Sunday`.
func (o AutoscaleSettingProfileRecurrencePtrOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AutoscaleSettingProfileRecurrence) []string {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.StringArrayOutput)
}

// A list containing a single item, which specifies the Hour interval at which this recurrence should be triggered (in 24-hour time). Possible values are from `0` to `23`.
func (o AutoscaleSettingProfileRecurrencePtrOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscaleSettingProfileRecurrence) *int {
		if v == nil {
			return nil
		}
		return &v.Hours
	}).(pulumi.IntPtrOutput)
}

// A list containing a single item which specifies the Minute interval at which this recurrence should be triggered.
func (o AutoscaleSettingProfileRecurrencePtrOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscaleSettingProfileRecurrence) *int {
		if v == nil {
			return nil
		}
		return &v.Minutes
	}).(pulumi.IntPtrOutput)
}

// The Time Zone used for the `hours` field. A list of [possible values can be found here](https://msdn.microsoft.com/en-us/library/azure/dn931928.aspx). Defaults to `UTC`.
func (o AutoscaleSettingProfileRecurrencePtrOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscaleSettingProfileRecurrence) *string {
		if v == nil {
			return nil
		}
		return v.Timezone
	}).(pulumi.StringPtrOutput)
}

type AutoscaleSettingProfileRule struct {
	// A `metricTrigger` block as defined below.
	MetricTrigger AutoscaleSettingProfileRuleMetricTrigger `pulumi:"metricTrigger"`
	// A `scaleAction` block as defined below.
	ScaleAction AutoscaleSettingProfileRuleScaleAction `pulumi:"scaleAction"`
}

// AutoscaleSettingProfileRuleInput is an input type that accepts AutoscaleSettingProfileRuleArgs and AutoscaleSettingProfileRuleOutput values.
// You can construct a concrete instance of `AutoscaleSettingProfileRuleInput` via:
//
//	AutoscaleSettingProfileRuleArgs{...}
type AutoscaleSettingProfileRuleInput interface {
	pulumi.Input

	ToAutoscaleSettingProfileRuleOutput() AutoscaleSettingProfileRuleOutput
	ToAutoscaleSettingProfileRuleOutputWithContext(context.Context) AutoscaleSettingProfileRuleOutput
}

type AutoscaleSettingProfileRuleArgs struct {
	// A `metricTrigger` block as defined below.
	MetricTrigger AutoscaleSettingProfileRuleMetricTriggerInput `pulumi:"metricTrigger"`
	// A `scaleAction` block as defined below.
	ScaleAction AutoscaleSettingProfileRuleScaleActionInput `pulumi:"scaleAction"`
}

func (AutoscaleSettingProfileRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfileRule)(nil)).Elem()
}

func (i AutoscaleSettingProfileRuleArgs) ToAutoscaleSettingProfileRuleOutput() AutoscaleSettingProfileRuleOutput {
	return i.ToAutoscaleSettingProfileRuleOutputWithContext(context.Background())
}

func (i AutoscaleSettingProfileRuleArgs) ToAutoscaleSettingProfileRuleOutputWithContext(ctx context.Context) AutoscaleSettingProfileRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileRuleOutput)
}

func (i AutoscaleSettingProfileRuleArgs) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfileRule] {
	return pulumix.Output[AutoscaleSettingProfileRule]{
		OutputState: i.ToAutoscaleSettingProfileRuleOutputWithContext(ctx).OutputState,
	}
}

// AutoscaleSettingProfileRuleArrayInput is an input type that accepts AutoscaleSettingProfileRuleArray and AutoscaleSettingProfileRuleArrayOutput values.
// You can construct a concrete instance of `AutoscaleSettingProfileRuleArrayInput` via:
//
//	AutoscaleSettingProfileRuleArray{ AutoscaleSettingProfileRuleArgs{...} }
type AutoscaleSettingProfileRuleArrayInput interface {
	pulumi.Input

	ToAutoscaleSettingProfileRuleArrayOutput() AutoscaleSettingProfileRuleArrayOutput
	ToAutoscaleSettingProfileRuleArrayOutputWithContext(context.Context) AutoscaleSettingProfileRuleArrayOutput
}

type AutoscaleSettingProfileRuleArray []AutoscaleSettingProfileRuleInput

func (AutoscaleSettingProfileRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleSettingProfileRule)(nil)).Elem()
}

func (i AutoscaleSettingProfileRuleArray) ToAutoscaleSettingProfileRuleArrayOutput() AutoscaleSettingProfileRuleArrayOutput {
	return i.ToAutoscaleSettingProfileRuleArrayOutputWithContext(context.Background())
}

func (i AutoscaleSettingProfileRuleArray) ToAutoscaleSettingProfileRuleArrayOutputWithContext(ctx context.Context) AutoscaleSettingProfileRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileRuleArrayOutput)
}

func (i AutoscaleSettingProfileRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]AutoscaleSettingProfileRule] {
	return pulumix.Output[[]AutoscaleSettingProfileRule]{
		OutputState: i.ToAutoscaleSettingProfileRuleArrayOutputWithContext(ctx).OutputState,
	}
}

type AutoscaleSettingProfileRuleOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingProfileRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfileRule)(nil)).Elem()
}

func (o AutoscaleSettingProfileRuleOutput) ToAutoscaleSettingProfileRuleOutput() AutoscaleSettingProfileRuleOutput {
	return o
}

func (o AutoscaleSettingProfileRuleOutput) ToAutoscaleSettingProfileRuleOutputWithContext(ctx context.Context) AutoscaleSettingProfileRuleOutput {
	return o
}

func (o AutoscaleSettingProfileRuleOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfileRule] {
	return pulumix.Output[AutoscaleSettingProfileRule]{
		OutputState: o.OutputState,
	}
}

// A `metricTrigger` block as defined below.
func (o AutoscaleSettingProfileRuleOutput) MetricTrigger() AutoscaleSettingProfileRuleMetricTriggerOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRule) AutoscaleSettingProfileRuleMetricTrigger { return v.MetricTrigger }).(AutoscaleSettingProfileRuleMetricTriggerOutput)
}

// A `scaleAction` block as defined below.
func (o AutoscaleSettingProfileRuleOutput) ScaleAction() AutoscaleSettingProfileRuleScaleActionOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRule) AutoscaleSettingProfileRuleScaleAction { return v.ScaleAction }).(AutoscaleSettingProfileRuleScaleActionOutput)
}

type AutoscaleSettingProfileRuleArrayOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingProfileRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleSettingProfileRule)(nil)).Elem()
}

func (o AutoscaleSettingProfileRuleArrayOutput) ToAutoscaleSettingProfileRuleArrayOutput() AutoscaleSettingProfileRuleArrayOutput {
	return o
}

func (o AutoscaleSettingProfileRuleArrayOutput) ToAutoscaleSettingProfileRuleArrayOutputWithContext(ctx context.Context) AutoscaleSettingProfileRuleArrayOutput {
	return o
}

func (o AutoscaleSettingProfileRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AutoscaleSettingProfileRule] {
	return pulumix.Output[[]AutoscaleSettingProfileRule]{
		OutputState: o.OutputState,
	}
}

func (o AutoscaleSettingProfileRuleArrayOutput) Index(i pulumi.IntInput) AutoscaleSettingProfileRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscaleSettingProfileRule {
		return vs[0].([]AutoscaleSettingProfileRule)[vs[1].(int)]
	}).(AutoscaleSettingProfileRuleOutput)
}

type AutoscaleSettingProfileRuleMetricTrigger struct {
	// One or more `dimensions` block as defined below.
	Dimensions []AutoscaleSettingProfileRuleMetricTriggerDimension `pulumi:"dimensions"`
	// Whether to enable metric divide by instance count.
	DivideByInstanceCount *bool `pulumi:"divideByInstanceCount"`
	// The name of the metric that defines what the rule monitors, such as `Percentage CPU` for `Virtual Machine Scale Sets` and `CpuPercentage` for `App Service Plan`.
	//
	// > **NOTE:** The allowed value of `metricName` highly depends on the targeting resource type, please visit [Supported metrics with Azure Monitor](https://docs.microsoft.com/azure/azure-monitor/platform/metrics-supported) for more details.
	MetricName string `pulumi:"metricName"`
	// The namespace of the metric that defines what the rule monitors, such as `microsoft.compute/virtualmachinescalesets` for `Virtual Machine Scale Sets`.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// The ID of the Resource which the Rule monitors.
	MetricResourceId string `pulumi:"metricResourceId"`
	// Specifies the operator used to compare the metric data and threshold. Possible values are: `Equals`, `NotEquals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, `LessThanOrEqual`.
	Operator string `pulumi:"operator"`
	// Specifies how the metrics from multiple instances are combined. Possible values are `Average`, `Max`, `Min` and `Sum`.
	Statistic string `pulumi:"statistic"`
	// Specifies the threshold of the metric that triggers the scale action.
	Threshold float64 `pulumi:"threshold"`
	// Specifies how the data that's collected should be combined over time. Possible values include `Average`, `Count`, `Maximum`, `Minimum`, `Last` and `Total`.
	TimeAggregation string `pulumi:"timeAggregation"`
	// Specifies the granularity of metrics that the rule monitors, which must be one of the pre-defined values returned from the metric definitions for the metric. This value must be between 1 minute and 12 hours an be formatted as an ISO 8601 string.
	TimeGrain string `pulumi:"timeGrain"`
	// Specifies the time range for which data is collected, which must be greater than the delay in metric collection (which varies from resource to resource). This value must be between 5 minutes and 12 hours and be formatted as an ISO 8601 string.
	TimeWindow string `pulumi:"timeWindow"`
}

// AutoscaleSettingProfileRuleMetricTriggerInput is an input type that accepts AutoscaleSettingProfileRuleMetricTriggerArgs and AutoscaleSettingProfileRuleMetricTriggerOutput values.
// You can construct a concrete instance of `AutoscaleSettingProfileRuleMetricTriggerInput` via:
//
//	AutoscaleSettingProfileRuleMetricTriggerArgs{...}
type AutoscaleSettingProfileRuleMetricTriggerInput interface {
	pulumi.Input

	ToAutoscaleSettingProfileRuleMetricTriggerOutput() AutoscaleSettingProfileRuleMetricTriggerOutput
	ToAutoscaleSettingProfileRuleMetricTriggerOutputWithContext(context.Context) AutoscaleSettingProfileRuleMetricTriggerOutput
}

type AutoscaleSettingProfileRuleMetricTriggerArgs struct {
	// One or more `dimensions` block as defined below.
	Dimensions AutoscaleSettingProfileRuleMetricTriggerDimensionArrayInput `pulumi:"dimensions"`
	// Whether to enable metric divide by instance count.
	DivideByInstanceCount pulumi.BoolPtrInput `pulumi:"divideByInstanceCount"`
	// The name of the metric that defines what the rule monitors, such as `Percentage CPU` for `Virtual Machine Scale Sets` and `CpuPercentage` for `App Service Plan`.
	//
	// > **NOTE:** The allowed value of `metricName` highly depends on the targeting resource type, please visit [Supported metrics with Azure Monitor](https://docs.microsoft.com/azure/azure-monitor/platform/metrics-supported) for more details.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// The namespace of the metric that defines what the rule monitors, such as `microsoft.compute/virtualmachinescalesets` for `Virtual Machine Scale Sets`.
	MetricNamespace pulumi.StringPtrInput `pulumi:"metricNamespace"`
	// The ID of the Resource which the Rule monitors.
	MetricResourceId pulumi.StringInput `pulumi:"metricResourceId"`
	// Specifies the operator used to compare the metric data and threshold. Possible values are: `Equals`, `NotEquals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, `LessThanOrEqual`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Specifies how the metrics from multiple instances are combined. Possible values are `Average`, `Max`, `Min` and `Sum`.
	Statistic pulumi.StringInput `pulumi:"statistic"`
	// Specifies the threshold of the metric that triggers the scale action.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// Specifies how the data that's collected should be combined over time. Possible values include `Average`, `Count`, `Maximum`, `Minimum`, `Last` and `Total`.
	TimeAggregation pulumi.StringInput `pulumi:"timeAggregation"`
	// Specifies the granularity of metrics that the rule monitors, which must be one of the pre-defined values returned from the metric definitions for the metric. This value must be between 1 minute and 12 hours an be formatted as an ISO 8601 string.
	TimeGrain pulumi.StringInput `pulumi:"timeGrain"`
	// Specifies the time range for which data is collected, which must be greater than the delay in metric collection (which varies from resource to resource). This value must be between 5 minutes and 12 hours and be formatted as an ISO 8601 string.
	TimeWindow pulumi.StringInput `pulumi:"timeWindow"`
}

func (AutoscaleSettingProfileRuleMetricTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfileRuleMetricTrigger)(nil)).Elem()
}

func (i AutoscaleSettingProfileRuleMetricTriggerArgs) ToAutoscaleSettingProfileRuleMetricTriggerOutput() AutoscaleSettingProfileRuleMetricTriggerOutput {
	return i.ToAutoscaleSettingProfileRuleMetricTriggerOutputWithContext(context.Background())
}

func (i AutoscaleSettingProfileRuleMetricTriggerArgs) ToAutoscaleSettingProfileRuleMetricTriggerOutputWithContext(ctx context.Context) AutoscaleSettingProfileRuleMetricTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileRuleMetricTriggerOutput)
}

func (i AutoscaleSettingProfileRuleMetricTriggerArgs) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfileRuleMetricTrigger] {
	return pulumix.Output[AutoscaleSettingProfileRuleMetricTrigger]{
		OutputState: i.ToAutoscaleSettingProfileRuleMetricTriggerOutputWithContext(ctx).OutputState,
	}
}

type AutoscaleSettingProfileRuleMetricTriggerOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingProfileRuleMetricTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfileRuleMetricTrigger)(nil)).Elem()
}

func (o AutoscaleSettingProfileRuleMetricTriggerOutput) ToAutoscaleSettingProfileRuleMetricTriggerOutput() AutoscaleSettingProfileRuleMetricTriggerOutput {
	return o
}

func (o AutoscaleSettingProfileRuleMetricTriggerOutput) ToAutoscaleSettingProfileRuleMetricTriggerOutputWithContext(ctx context.Context) AutoscaleSettingProfileRuleMetricTriggerOutput {
	return o
}

func (o AutoscaleSettingProfileRuleMetricTriggerOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfileRuleMetricTrigger] {
	return pulumix.Output[AutoscaleSettingProfileRuleMetricTrigger]{
		OutputState: o.OutputState,
	}
}

// One or more `dimensions` block as defined below.
func (o AutoscaleSettingProfileRuleMetricTriggerOutput) Dimensions() AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleMetricTrigger) []AutoscaleSettingProfileRuleMetricTriggerDimension {
		return v.Dimensions
	}).(AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput)
}

// Whether to enable metric divide by instance count.
func (o AutoscaleSettingProfileRuleMetricTriggerOutput) DivideByInstanceCount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleMetricTrigger) *bool { return v.DivideByInstanceCount }).(pulumi.BoolPtrOutput)
}

// The name of the metric that defines what the rule monitors, such as `Percentage CPU` for `Virtual Machine Scale Sets` and `CpuPercentage` for `App Service Plan`.
//
// > **NOTE:** The allowed value of `metricName` highly depends on the targeting resource type, please visit [Supported metrics with Azure Monitor](https://docs.microsoft.com/azure/azure-monitor/platform/metrics-supported) for more details.
func (o AutoscaleSettingProfileRuleMetricTriggerOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleMetricTrigger) string { return v.MetricName }).(pulumi.StringOutput)
}

// The namespace of the metric that defines what the rule monitors, such as `microsoft.compute/virtualmachinescalesets` for `Virtual Machine Scale Sets`.
func (o AutoscaleSettingProfileRuleMetricTriggerOutput) MetricNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleMetricTrigger) *string { return v.MetricNamespace }).(pulumi.StringPtrOutput)
}

// The ID of the Resource which the Rule monitors.
func (o AutoscaleSettingProfileRuleMetricTriggerOutput) MetricResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleMetricTrigger) string { return v.MetricResourceId }).(pulumi.StringOutput)
}

// Specifies the operator used to compare the metric data and threshold. Possible values are: `Equals`, `NotEquals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, `LessThanOrEqual`.
func (o AutoscaleSettingProfileRuleMetricTriggerOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleMetricTrigger) string { return v.Operator }).(pulumi.StringOutput)
}

// Specifies how the metrics from multiple instances are combined. Possible values are `Average`, `Max`, `Min` and `Sum`.
func (o AutoscaleSettingProfileRuleMetricTriggerOutput) Statistic() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleMetricTrigger) string { return v.Statistic }).(pulumi.StringOutput)
}

// Specifies the threshold of the metric that triggers the scale action.
func (o AutoscaleSettingProfileRuleMetricTriggerOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleMetricTrigger) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// Specifies how the data that's collected should be combined over time. Possible values include `Average`, `Count`, `Maximum`, `Minimum`, `Last` and `Total`.
func (o AutoscaleSettingProfileRuleMetricTriggerOutput) TimeAggregation() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleMetricTrigger) string { return v.TimeAggregation }).(pulumi.StringOutput)
}

// Specifies the granularity of metrics that the rule monitors, which must be one of the pre-defined values returned from the metric definitions for the metric. This value must be between 1 minute and 12 hours an be formatted as an ISO 8601 string.
func (o AutoscaleSettingProfileRuleMetricTriggerOutput) TimeGrain() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleMetricTrigger) string { return v.TimeGrain }).(pulumi.StringOutput)
}

// Specifies the time range for which data is collected, which must be greater than the delay in metric collection (which varies from resource to resource). This value must be between 5 minutes and 12 hours and be formatted as an ISO 8601 string.
func (o AutoscaleSettingProfileRuleMetricTriggerOutput) TimeWindow() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleMetricTrigger) string { return v.TimeWindow }).(pulumi.StringOutput)
}

type AutoscaleSettingProfileRuleMetricTriggerDimension struct {
	// The name of the dimension.
	Name string `pulumi:"name"`
	// The dimension operator. Possible values are `Equals` and `NotEquals`. `Equals` means being equal to any of the values. `NotEquals` means being not equal to any of the values.
	Operator string `pulumi:"operator"`
	// A list of dimension values.
	Values []string `pulumi:"values"`
}

// AutoscaleSettingProfileRuleMetricTriggerDimensionInput is an input type that accepts AutoscaleSettingProfileRuleMetricTriggerDimensionArgs and AutoscaleSettingProfileRuleMetricTriggerDimensionOutput values.
// You can construct a concrete instance of `AutoscaleSettingProfileRuleMetricTriggerDimensionInput` via:
//
//	AutoscaleSettingProfileRuleMetricTriggerDimensionArgs{...}
type AutoscaleSettingProfileRuleMetricTriggerDimensionInput interface {
	pulumi.Input

	ToAutoscaleSettingProfileRuleMetricTriggerDimensionOutput() AutoscaleSettingProfileRuleMetricTriggerDimensionOutput
	ToAutoscaleSettingProfileRuleMetricTriggerDimensionOutputWithContext(context.Context) AutoscaleSettingProfileRuleMetricTriggerDimensionOutput
}

type AutoscaleSettingProfileRuleMetricTriggerDimensionArgs struct {
	// The name of the dimension.
	Name pulumi.StringInput `pulumi:"name"`
	// The dimension operator. Possible values are `Equals` and `NotEquals`. `Equals` means being equal to any of the values. `NotEquals` means being not equal to any of the values.
	Operator pulumi.StringInput `pulumi:"operator"`
	// A list of dimension values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AutoscaleSettingProfileRuleMetricTriggerDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfileRuleMetricTriggerDimension)(nil)).Elem()
}

func (i AutoscaleSettingProfileRuleMetricTriggerDimensionArgs) ToAutoscaleSettingProfileRuleMetricTriggerDimensionOutput() AutoscaleSettingProfileRuleMetricTriggerDimensionOutput {
	return i.ToAutoscaleSettingProfileRuleMetricTriggerDimensionOutputWithContext(context.Background())
}

func (i AutoscaleSettingProfileRuleMetricTriggerDimensionArgs) ToAutoscaleSettingProfileRuleMetricTriggerDimensionOutputWithContext(ctx context.Context) AutoscaleSettingProfileRuleMetricTriggerDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileRuleMetricTriggerDimensionOutput)
}

func (i AutoscaleSettingProfileRuleMetricTriggerDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfileRuleMetricTriggerDimension] {
	return pulumix.Output[AutoscaleSettingProfileRuleMetricTriggerDimension]{
		OutputState: i.ToAutoscaleSettingProfileRuleMetricTriggerDimensionOutputWithContext(ctx).OutputState,
	}
}

// AutoscaleSettingProfileRuleMetricTriggerDimensionArrayInput is an input type that accepts AutoscaleSettingProfileRuleMetricTriggerDimensionArray and AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput values.
// You can construct a concrete instance of `AutoscaleSettingProfileRuleMetricTriggerDimensionArrayInput` via:
//
//	AutoscaleSettingProfileRuleMetricTriggerDimensionArray{ AutoscaleSettingProfileRuleMetricTriggerDimensionArgs{...} }
type AutoscaleSettingProfileRuleMetricTriggerDimensionArrayInput interface {
	pulumi.Input

	ToAutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput() AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput
	ToAutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutputWithContext(context.Context) AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput
}

type AutoscaleSettingProfileRuleMetricTriggerDimensionArray []AutoscaleSettingProfileRuleMetricTriggerDimensionInput

func (AutoscaleSettingProfileRuleMetricTriggerDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleSettingProfileRuleMetricTriggerDimension)(nil)).Elem()
}

func (i AutoscaleSettingProfileRuleMetricTriggerDimensionArray) ToAutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput() AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput {
	return i.ToAutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutputWithContext(context.Background())
}

func (i AutoscaleSettingProfileRuleMetricTriggerDimensionArray) ToAutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutputWithContext(ctx context.Context) AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput)
}

func (i AutoscaleSettingProfileRuleMetricTriggerDimensionArray) ToOutput(ctx context.Context) pulumix.Output[[]AutoscaleSettingProfileRuleMetricTriggerDimension] {
	return pulumix.Output[[]AutoscaleSettingProfileRuleMetricTriggerDimension]{
		OutputState: i.ToAutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutputWithContext(ctx).OutputState,
	}
}

type AutoscaleSettingProfileRuleMetricTriggerDimensionOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingProfileRuleMetricTriggerDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfileRuleMetricTriggerDimension)(nil)).Elem()
}

func (o AutoscaleSettingProfileRuleMetricTriggerDimensionOutput) ToAutoscaleSettingProfileRuleMetricTriggerDimensionOutput() AutoscaleSettingProfileRuleMetricTriggerDimensionOutput {
	return o
}

func (o AutoscaleSettingProfileRuleMetricTriggerDimensionOutput) ToAutoscaleSettingProfileRuleMetricTriggerDimensionOutputWithContext(ctx context.Context) AutoscaleSettingProfileRuleMetricTriggerDimensionOutput {
	return o
}

func (o AutoscaleSettingProfileRuleMetricTriggerDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfileRuleMetricTriggerDimension] {
	return pulumix.Output[AutoscaleSettingProfileRuleMetricTriggerDimension]{
		OutputState: o.OutputState,
	}
}

// The name of the dimension.
func (o AutoscaleSettingProfileRuleMetricTriggerDimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleMetricTriggerDimension) string { return v.Name }).(pulumi.StringOutput)
}

// The dimension operator. Possible values are `Equals` and `NotEquals`. `Equals` means being equal to any of the values. `NotEquals` means being not equal to any of the values.
func (o AutoscaleSettingProfileRuleMetricTriggerDimensionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleMetricTriggerDimension) string { return v.Operator }).(pulumi.StringOutput)
}

// A list of dimension values.
func (o AutoscaleSettingProfileRuleMetricTriggerDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleMetricTriggerDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleSettingProfileRuleMetricTriggerDimension)(nil)).Elem()
}

func (o AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput) ToAutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput() AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput {
	return o
}

func (o AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput) ToAutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutputWithContext(ctx context.Context) AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput {
	return o
}

func (o AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AutoscaleSettingProfileRuleMetricTriggerDimension] {
	return pulumix.Output[[]AutoscaleSettingProfileRuleMetricTriggerDimension]{
		OutputState: o.OutputState,
	}
}

func (o AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput) Index(i pulumi.IntInput) AutoscaleSettingProfileRuleMetricTriggerDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscaleSettingProfileRuleMetricTriggerDimension {
		return vs[0].([]AutoscaleSettingProfileRuleMetricTriggerDimension)[vs[1].(int)]
	}).(AutoscaleSettingProfileRuleMetricTriggerDimensionOutput)
}

type AutoscaleSettingProfileRuleScaleAction struct {
	// The amount of time to wait since the last scaling action before this action occurs. Must be between 1 minute and 1 week and formatted as a ISO 8601 string.
	Cooldown string `pulumi:"cooldown"`
	// The scale direction. Possible values are `Increase` and `Decrease`.
	Direction string `pulumi:"direction"`
	// The type of action that should occur. Possible values are `ChangeCount`, `ExactCount`, `PercentChangeCount` and `ServiceAllowedNextValue`.
	Type string `pulumi:"type"`
	// The number of instances involved in the scaling action.
	Value int `pulumi:"value"`
}

// AutoscaleSettingProfileRuleScaleActionInput is an input type that accepts AutoscaleSettingProfileRuleScaleActionArgs and AutoscaleSettingProfileRuleScaleActionOutput values.
// You can construct a concrete instance of `AutoscaleSettingProfileRuleScaleActionInput` via:
//
//	AutoscaleSettingProfileRuleScaleActionArgs{...}
type AutoscaleSettingProfileRuleScaleActionInput interface {
	pulumi.Input

	ToAutoscaleSettingProfileRuleScaleActionOutput() AutoscaleSettingProfileRuleScaleActionOutput
	ToAutoscaleSettingProfileRuleScaleActionOutputWithContext(context.Context) AutoscaleSettingProfileRuleScaleActionOutput
}

type AutoscaleSettingProfileRuleScaleActionArgs struct {
	// The amount of time to wait since the last scaling action before this action occurs. Must be between 1 minute and 1 week and formatted as a ISO 8601 string.
	Cooldown pulumi.StringInput `pulumi:"cooldown"`
	// The scale direction. Possible values are `Increase` and `Decrease`.
	Direction pulumi.StringInput `pulumi:"direction"`
	// The type of action that should occur. Possible values are `ChangeCount`, `ExactCount`, `PercentChangeCount` and `ServiceAllowedNextValue`.
	Type pulumi.StringInput `pulumi:"type"`
	// The number of instances involved in the scaling action.
	Value pulumi.IntInput `pulumi:"value"`
}

func (AutoscaleSettingProfileRuleScaleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfileRuleScaleAction)(nil)).Elem()
}

func (i AutoscaleSettingProfileRuleScaleActionArgs) ToAutoscaleSettingProfileRuleScaleActionOutput() AutoscaleSettingProfileRuleScaleActionOutput {
	return i.ToAutoscaleSettingProfileRuleScaleActionOutputWithContext(context.Background())
}

func (i AutoscaleSettingProfileRuleScaleActionArgs) ToAutoscaleSettingProfileRuleScaleActionOutputWithContext(ctx context.Context) AutoscaleSettingProfileRuleScaleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleSettingProfileRuleScaleActionOutput)
}

func (i AutoscaleSettingProfileRuleScaleActionArgs) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfileRuleScaleAction] {
	return pulumix.Output[AutoscaleSettingProfileRuleScaleAction]{
		OutputState: i.ToAutoscaleSettingProfileRuleScaleActionOutputWithContext(ctx).OutputState,
	}
}

type AutoscaleSettingProfileRuleScaleActionOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingProfileRuleScaleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingProfileRuleScaleAction)(nil)).Elem()
}

func (o AutoscaleSettingProfileRuleScaleActionOutput) ToAutoscaleSettingProfileRuleScaleActionOutput() AutoscaleSettingProfileRuleScaleActionOutput {
	return o
}

func (o AutoscaleSettingProfileRuleScaleActionOutput) ToAutoscaleSettingProfileRuleScaleActionOutputWithContext(ctx context.Context) AutoscaleSettingProfileRuleScaleActionOutput {
	return o
}

func (o AutoscaleSettingProfileRuleScaleActionOutput) ToOutput(ctx context.Context) pulumix.Output[AutoscaleSettingProfileRuleScaleAction] {
	return pulumix.Output[AutoscaleSettingProfileRuleScaleAction]{
		OutputState: o.OutputState,
	}
}

// The amount of time to wait since the last scaling action before this action occurs. Must be between 1 minute and 1 week and formatted as a ISO 8601 string.
func (o AutoscaleSettingProfileRuleScaleActionOutput) Cooldown() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleScaleAction) string { return v.Cooldown }).(pulumi.StringOutput)
}

// The scale direction. Possible values are `Increase` and `Decrease`.
func (o AutoscaleSettingProfileRuleScaleActionOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleScaleAction) string { return v.Direction }).(pulumi.StringOutput)
}

// The type of action that should occur. Possible values are `ChangeCount`, `ExactCount`, `PercentChangeCount` and `ServiceAllowedNextValue`.
func (o AutoscaleSettingProfileRuleScaleActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleScaleAction) string { return v.Type }).(pulumi.StringOutput)
}

// The number of instances involved in the scaling action.
func (o AutoscaleSettingProfileRuleScaleActionOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscaleSettingProfileRuleScaleAction) int { return v.Value }).(pulumi.IntOutput)
}

type DataCollectionRuleDataFlow struct {
	// The built-in transform to transform stream data.
	BuiltInTransform *string `pulumi:"builtInTransform"`
	// Specifies a list of destination names. A `azureMonitorMetrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
	Destinations []string `pulumi:"destinations"`
	// The output stream of the transform. Only required if the data flow changes data to a different stream.
	OutputStream *string `pulumi:"outputStream"`
	// Specifies a list of streams. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`, `Microsoft-WindowsEvent`, and `Microsoft-PrometheusMetrics`.
	Streams []string `pulumi:"streams"`
	// The KQL query to transform stream data.
	TransformKql *string `pulumi:"transformKql"`
}

// DataCollectionRuleDataFlowInput is an input type that accepts DataCollectionRuleDataFlowArgs and DataCollectionRuleDataFlowOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataFlowInput` via:
//
//	DataCollectionRuleDataFlowArgs{...}
type DataCollectionRuleDataFlowInput interface {
	pulumi.Input

	ToDataCollectionRuleDataFlowOutput() DataCollectionRuleDataFlowOutput
	ToDataCollectionRuleDataFlowOutputWithContext(context.Context) DataCollectionRuleDataFlowOutput
}

type DataCollectionRuleDataFlowArgs struct {
	// The built-in transform to transform stream data.
	BuiltInTransform pulumi.StringPtrInput `pulumi:"builtInTransform"`
	// Specifies a list of destination names. A `azureMonitorMetrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
	Destinations pulumi.StringArrayInput `pulumi:"destinations"`
	// The output stream of the transform. Only required if the data flow changes data to a different stream.
	OutputStream pulumi.StringPtrInput `pulumi:"outputStream"`
	// Specifies a list of streams. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`, `Microsoft-WindowsEvent`, and `Microsoft-PrometheusMetrics`.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
	// The KQL query to transform stream data.
	TransformKql pulumi.StringPtrInput `pulumi:"transformKql"`
}

func (DataCollectionRuleDataFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataFlow)(nil)).Elem()
}

func (i DataCollectionRuleDataFlowArgs) ToDataCollectionRuleDataFlowOutput() DataCollectionRuleDataFlowOutput {
	return i.ToDataCollectionRuleDataFlowOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataFlowArgs) ToDataCollectionRuleDataFlowOutputWithContext(ctx context.Context) DataCollectionRuleDataFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataFlowOutput)
}

func (i DataCollectionRuleDataFlowArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataFlow] {
	return pulumix.Output[DataCollectionRuleDataFlow]{
		OutputState: i.ToDataCollectionRuleDataFlowOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDataFlowArrayInput is an input type that accepts DataCollectionRuleDataFlowArray and DataCollectionRuleDataFlowArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataFlowArrayInput` via:
//
//	DataCollectionRuleDataFlowArray{ DataCollectionRuleDataFlowArgs{...} }
type DataCollectionRuleDataFlowArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDataFlowArrayOutput() DataCollectionRuleDataFlowArrayOutput
	ToDataCollectionRuleDataFlowArrayOutputWithContext(context.Context) DataCollectionRuleDataFlowArrayOutput
}

type DataCollectionRuleDataFlowArray []DataCollectionRuleDataFlowInput

func (DataCollectionRuleDataFlowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataFlow)(nil)).Elem()
}

func (i DataCollectionRuleDataFlowArray) ToDataCollectionRuleDataFlowArrayOutput() DataCollectionRuleDataFlowArrayOutput {
	return i.ToDataCollectionRuleDataFlowArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataFlowArray) ToDataCollectionRuleDataFlowArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataFlowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataFlowArrayOutput)
}

func (i DataCollectionRuleDataFlowArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataFlow] {
	return pulumix.Output[[]DataCollectionRuleDataFlow]{
		OutputState: i.ToDataCollectionRuleDataFlowArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataFlowOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataFlow)(nil)).Elem()
}

func (o DataCollectionRuleDataFlowOutput) ToDataCollectionRuleDataFlowOutput() DataCollectionRuleDataFlowOutput {
	return o
}

func (o DataCollectionRuleDataFlowOutput) ToDataCollectionRuleDataFlowOutputWithContext(ctx context.Context) DataCollectionRuleDataFlowOutput {
	return o
}

func (o DataCollectionRuleDataFlowOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataFlow] {
	return pulumix.Output[DataCollectionRuleDataFlow]{
		OutputState: o.OutputState,
	}
}

// The built-in transform to transform stream data.
func (o DataCollectionRuleDataFlowOutput) BuiltInTransform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDataFlow) *string { return v.BuiltInTransform }).(pulumi.StringPtrOutput)
}

// Specifies a list of destination names. A `azureMonitorMetrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
func (o DataCollectionRuleDataFlowOutput) Destinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataFlow) []string { return v.Destinations }).(pulumi.StringArrayOutput)
}

// The output stream of the transform. Only required if the data flow changes data to a different stream.
func (o DataCollectionRuleDataFlowOutput) OutputStream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDataFlow) *string { return v.OutputStream }).(pulumi.StringPtrOutput)
}

// Specifies a list of streams. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`, `Microsoft-WindowsEvent`, and `Microsoft-PrometheusMetrics`.
func (o DataCollectionRuleDataFlowOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataFlow) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform stream data.
func (o DataCollectionRuleDataFlowOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDataFlow) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

type DataCollectionRuleDataFlowArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataFlowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataFlow)(nil)).Elem()
}

func (o DataCollectionRuleDataFlowArrayOutput) ToDataCollectionRuleDataFlowArrayOutput() DataCollectionRuleDataFlowArrayOutput {
	return o
}

func (o DataCollectionRuleDataFlowArrayOutput) ToDataCollectionRuleDataFlowArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataFlowArrayOutput {
	return o
}

func (o DataCollectionRuleDataFlowArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataFlow] {
	return pulumix.Output[[]DataCollectionRuleDataFlow]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataFlowArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDataFlowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDataFlow {
		return vs[0].([]DataCollectionRuleDataFlow)[vs[1].(int)]
	}).(DataCollectionRuleDataFlowOutput)
}

type DataCollectionRuleDataSources struct {
	// A `dataImport` block as defined above.
	DataImport *DataCollectionRuleDataSourcesDataImport `pulumi:"dataImport"`
	// One or more `extension` blocks as defined below.
	Extensions []DataCollectionRuleDataSourcesExtension `pulumi:"extensions"`
	// One or more `iisLog` blocks as defined below.
	IisLogs []DataCollectionRuleDataSourcesIisLog `pulumi:"iisLogs"`
	// One or more `logFile` blocks as defined below.
	LogFiles []DataCollectionRuleDataSourcesLogFile `pulumi:"logFiles"`
	// One or more `performanceCounter` blocks as defined below.
	PerformanceCounters []DataCollectionRuleDataSourcesPerformanceCounter `pulumi:"performanceCounters"`
	// One or more `platformTelemetry` blocks as defined below.
	PlatformTelemetries []DataCollectionRuleDataSourcesPlatformTelemetry `pulumi:"platformTelemetries"`
	// One or more `prometheusForwarder` blocks as defined below.
	PrometheusForwarders []DataCollectionRuleDataSourcesPrometheusForwarder `pulumi:"prometheusForwarders"`
	// One or more `syslog` blocks as defined below.
	Syslogs []DataCollectionRuleDataSourcesSyslog `pulumi:"syslogs"`
	// One or more `windowsEventLog` blocks as defined below.
	WindowsEventLogs []DataCollectionRuleDataSourcesWindowsEventLog `pulumi:"windowsEventLogs"`
	// One or more `windowsFirewallLog` blocks as defined below.
	WindowsFirewallLogs []DataCollectionRuleDataSourcesWindowsFirewallLog `pulumi:"windowsFirewallLogs"`
}

// DataCollectionRuleDataSourcesInput is an input type that accepts DataCollectionRuleDataSourcesArgs and DataCollectionRuleDataSourcesOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesInput` via:
//
//	DataCollectionRuleDataSourcesArgs{...}
type DataCollectionRuleDataSourcesInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesOutput() DataCollectionRuleDataSourcesOutput
	ToDataCollectionRuleDataSourcesOutputWithContext(context.Context) DataCollectionRuleDataSourcesOutput
}

type DataCollectionRuleDataSourcesArgs struct {
	// A `dataImport` block as defined above.
	DataImport DataCollectionRuleDataSourcesDataImportPtrInput `pulumi:"dataImport"`
	// One or more `extension` blocks as defined below.
	Extensions DataCollectionRuleDataSourcesExtensionArrayInput `pulumi:"extensions"`
	// One or more `iisLog` blocks as defined below.
	IisLogs DataCollectionRuleDataSourcesIisLogArrayInput `pulumi:"iisLogs"`
	// One or more `logFile` blocks as defined below.
	LogFiles DataCollectionRuleDataSourcesLogFileArrayInput `pulumi:"logFiles"`
	// One or more `performanceCounter` blocks as defined below.
	PerformanceCounters DataCollectionRuleDataSourcesPerformanceCounterArrayInput `pulumi:"performanceCounters"`
	// One or more `platformTelemetry` blocks as defined below.
	PlatformTelemetries DataCollectionRuleDataSourcesPlatformTelemetryArrayInput `pulumi:"platformTelemetries"`
	// One or more `prometheusForwarder` blocks as defined below.
	PrometheusForwarders DataCollectionRuleDataSourcesPrometheusForwarderArrayInput `pulumi:"prometheusForwarders"`
	// One or more `syslog` blocks as defined below.
	Syslogs DataCollectionRuleDataSourcesSyslogArrayInput `pulumi:"syslogs"`
	// One or more `windowsEventLog` blocks as defined below.
	WindowsEventLogs DataCollectionRuleDataSourcesWindowsEventLogArrayInput `pulumi:"windowsEventLogs"`
	// One or more `windowsFirewallLog` blocks as defined below.
	WindowsFirewallLogs DataCollectionRuleDataSourcesWindowsFirewallLogArrayInput `pulumi:"windowsFirewallLogs"`
}

func (DataCollectionRuleDataSourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSources)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesOutput() DataCollectionRuleDataSourcesOutput {
	return i.ToDataCollectionRuleDataSourcesOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesOutput)
}

func (i DataCollectionRuleDataSourcesArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSources] {
	return pulumix.Output[DataCollectionRuleDataSources]{
		OutputState: i.ToDataCollectionRuleDataSourcesOutputWithContext(ctx).OutputState,
	}
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return i.ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesOutput).ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx)
}

// DataCollectionRuleDataSourcesPtrInput is an input type that accepts DataCollectionRuleDataSourcesArgs, DataCollectionRuleDataSourcesPtr and DataCollectionRuleDataSourcesPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesPtrInput` via:
//
//	        DataCollectionRuleDataSourcesArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleDataSourcesPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput
	ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Context) DataCollectionRuleDataSourcesPtrOutput
}

type dataCollectionRuleDataSourcesPtrType DataCollectionRuleDataSourcesArgs

func DataCollectionRuleDataSourcesPtr(v *DataCollectionRuleDataSourcesArgs) DataCollectionRuleDataSourcesPtrInput {
	return (*dataCollectionRuleDataSourcesPtrType)(v)
}

func (*dataCollectionRuleDataSourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDataSources)(nil)).Elem()
}

func (i *dataCollectionRuleDataSourcesPtrType) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return i.ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleDataSourcesPtrType) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesPtrOutput)
}

func (i *dataCollectionRuleDataSourcesPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDataSources] {
	return pulumix.Output[*DataCollectionRuleDataSources]{
		OutputState: i.ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSources)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesOutput() DataCollectionRuleDataSourcesOutput {
	return o
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesOutput {
	return o
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return o.ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleDataSources) *DataCollectionRuleDataSources {
		return &v
	}).(DataCollectionRuleDataSourcesPtrOutput)
}

func (o DataCollectionRuleDataSourcesOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSources] {
	return pulumix.Output[DataCollectionRuleDataSources]{
		OutputState: o.OutputState,
	}
}

// A `dataImport` block as defined above.
func (o DataCollectionRuleDataSourcesOutput) DataImport() DataCollectionRuleDataSourcesDataImportPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) *DataCollectionRuleDataSourcesDataImport { return v.DataImport }).(DataCollectionRuleDataSourcesDataImportPtrOutput)
}

// One or more `extension` blocks as defined below.
func (o DataCollectionRuleDataSourcesOutput) Extensions() DataCollectionRuleDataSourcesExtensionArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesExtension { return v.Extensions }).(DataCollectionRuleDataSourcesExtensionArrayOutput)
}

// One or more `iisLog` blocks as defined below.
func (o DataCollectionRuleDataSourcesOutput) IisLogs() DataCollectionRuleDataSourcesIisLogArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesIisLog { return v.IisLogs }).(DataCollectionRuleDataSourcesIisLogArrayOutput)
}

// One or more `logFile` blocks as defined below.
func (o DataCollectionRuleDataSourcesOutput) LogFiles() DataCollectionRuleDataSourcesLogFileArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesLogFile { return v.LogFiles }).(DataCollectionRuleDataSourcesLogFileArrayOutput)
}

// One or more `performanceCounter` blocks as defined below.
func (o DataCollectionRuleDataSourcesOutput) PerformanceCounters() DataCollectionRuleDataSourcesPerformanceCounterArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesPerformanceCounter {
		return v.PerformanceCounters
	}).(DataCollectionRuleDataSourcesPerformanceCounterArrayOutput)
}

// One or more `platformTelemetry` blocks as defined below.
func (o DataCollectionRuleDataSourcesOutput) PlatformTelemetries() DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesPlatformTelemetry {
		return v.PlatformTelemetries
	}).(DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput)
}

// One or more `prometheusForwarder` blocks as defined below.
func (o DataCollectionRuleDataSourcesOutput) PrometheusForwarders() DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesPrometheusForwarder {
		return v.PrometheusForwarders
	}).(DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput)
}

// One or more `syslog` blocks as defined below.
func (o DataCollectionRuleDataSourcesOutput) Syslogs() DataCollectionRuleDataSourcesSyslogArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesSyslog { return v.Syslogs }).(DataCollectionRuleDataSourcesSyslogArrayOutput)
}

// One or more `windowsEventLog` blocks as defined below.
func (o DataCollectionRuleDataSourcesOutput) WindowsEventLogs() DataCollectionRuleDataSourcesWindowsEventLogArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesWindowsEventLog {
		return v.WindowsEventLogs
	}).(DataCollectionRuleDataSourcesWindowsEventLogArrayOutput)
}

// One or more `windowsFirewallLog` blocks as defined below.
func (o DataCollectionRuleDataSourcesOutput) WindowsFirewallLogs() DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesWindowsFirewallLog {
		return v.WindowsFirewallLogs
	}).(DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput)
}

type DataCollectionRuleDataSourcesPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDataSources)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesPtrOutput) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPtrOutput) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDataSources] {
	return pulumix.Output[*DataCollectionRuleDataSources]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesPtrOutput) Elem() DataCollectionRuleDataSourcesOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) DataCollectionRuleDataSources {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleDataSources
		return ret
	}).(DataCollectionRuleDataSourcesOutput)
}

// A `dataImport` block as defined above.
func (o DataCollectionRuleDataSourcesPtrOutput) DataImport() DataCollectionRuleDataSourcesDataImportPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) *DataCollectionRuleDataSourcesDataImport {
		if v == nil {
			return nil
		}
		return v.DataImport
	}).(DataCollectionRuleDataSourcesDataImportPtrOutput)
}

// One or more `extension` blocks as defined below.
func (o DataCollectionRuleDataSourcesPtrOutput) Extensions() DataCollectionRuleDataSourcesExtensionArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesExtension {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(DataCollectionRuleDataSourcesExtensionArrayOutput)
}

// One or more `iisLog` blocks as defined below.
func (o DataCollectionRuleDataSourcesPtrOutput) IisLogs() DataCollectionRuleDataSourcesIisLogArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesIisLog {
		if v == nil {
			return nil
		}
		return v.IisLogs
	}).(DataCollectionRuleDataSourcesIisLogArrayOutput)
}

// One or more `logFile` blocks as defined below.
func (o DataCollectionRuleDataSourcesPtrOutput) LogFiles() DataCollectionRuleDataSourcesLogFileArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesLogFile {
		if v == nil {
			return nil
		}
		return v.LogFiles
	}).(DataCollectionRuleDataSourcesLogFileArrayOutput)
}

// One or more `performanceCounter` blocks as defined below.
func (o DataCollectionRuleDataSourcesPtrOutput) PerformanceCounters() DataCollectionRuleDataSourcesPerformanceCounterArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesPerformanceCounter {
		if v == nil {
			return nil
		}
		return v.PerformanceCounters
	}).(DataCollectionRuleDataSourcesPerformanceCounterArrayOutput)
}

// One or more `platformTelemetry` blocks as defined below.
func (o DataCollectionRuleDataSourcesPtrOutput) PlatformTelemetries() DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesPlatformTelemetry {
		if v == nil {
			return nil
		}
		return v.PlatformTelemetries
	}).(DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput)
}

// One or more `prometheusForwarder` blocks as defined below.
func (o DataCollectionRuleDataSourcesPtrOutput) PrometheusForwarders() DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesPrometheusForwarder {
		if v == nil {
			return nil
		}
		return v.PrometheusForwarders
	}).(DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput)
}

// One or more `syslog` blocks as defined below.
func (o DataCollectionRuleDataSourcesPtrOutput) Syslogs() DataCollectionRuleDataSourcesSyslogArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesSyslog {
		if v == nil {
			return nil
		}
		return v.Syslogs
	}).(DataCollectionRuleDataSourcesSyslogArrayOutput)
}

// One or more `windowsEventLog` blocks as defined below.
func (o DataCollectionRuleDataSourcesPtrOutput) WindowsEventLogs() DataCollectionRuleDataSourcesWindowsEventLogArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesWindowsEventLog {
		if v == nil {
			return nil
		}
		return v.WindowsEventLogs
	}).(DataCollectionRuleDataSourcesWindowsEventLogArrayOutput)
}

// One or more `windowsFirewallLog` blocks as defined below.
func (o DataCollectionRuleDataSourcesPtrOutput) WindowsFirewallLogs() DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []DataCollectionRuleDataSourcesWindowsFirewallLog {
		if v == nil {
			return nil
		}
		return v.WindowsFirewallLogs
	}).(DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput)
}

type DataCollectionRuleDataSourcesDataImport struct {
	// An `eventHubDataSource` block as defined below.
	EventHubDataSources []DataCollectionRuleDataSourcesDataImportEventHubDataSource `pulumi:"eventHubDataSources"`
}

// DataCollectionRuleDataSourcesDataImportInput is an input type that accepts DataCollectionRuleDataSourcesDataImportArgs and DataCollectionRuleDataSourcesDataImportOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesDataImportInput` via:
//
//	DataCollectionRuleDataSourcesDataImportArgs{...}
type DataCollectionRuleDataSourcesDataImportInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesDataImportOutput() DataCollectionRuleDataSourcesDataImportOutput
	ToDataCollectionRuleDataSourcesDataImportOutputWithContext(context.Context) DataCollectionRuleDataSourcesDataImportOutput
}

type DataCollectionRuleDataSourcesDataImportArgs struct {
	// An `eventHubDataSource` block as defined below.
	EventHubDataSources DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayInput `pulumi:"eventHubDataSources"`
}

func (DataCollectionRuleDataSourcesDataImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesDataImport)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesDataImportArgs) ToDataCollectionRuleDataSourcesDataImportOutput() DataCollectionRuleDataSourcesDataImportOutput {
	return i.ToDataCollectionRuleDataSourcesDataImportOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesDataImportArgs) ToDataCollectionRuleDataSourcesDataImportOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesDataImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesDataImportOutput)
}

func (i DataCollectionRuleDataSourcesDataImportArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesDataImport] {
	return pulumix.Output[DataCollectionRuleDataSourcesDataImport]{
		OutputState: i.ToDataCollectionRuleDataSourcesDataImportOutputWithContext(ctx).OutputState,
	}
}

func (i DataCollectionRuleDataSourcesDataImportArgs) ToDataCollectionRuleDataSourcesDataImportPtrOutput() DataCollectionRuleDataSourcesDataImportPtrOutput {
	return i.ToDataCollectionRuleDataSourcesDataImportPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesDataImportArgs) ToDataCollectionRuleDataSourcesDataImportPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesDataImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesDataImportOutput).ToDataCollectionRuleDataSourcesDataImportPtrOutputWithContext(ctx)
}

// DataCollectionRuleDataSourcesDataImportPtrInput is an input type that accepts DataCollectionRuleDataSourcesDataImportArgs, DataCollectionRuleDataSourcesDataImportPtr and DataCollectionRuleDataSourcesDataImportPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesDataImportPtrInput` via:
//
//	        DataCollectionRuleDataSourcesDataImportArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleDataSourcesDataImportPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesDataImportPtrOutput() DataCollectionRuleDataSourcesDataImportPtrOutput
	ToDataCollectionRuleDataSourcesDataImportPtrOutputWithContext(context.Context) DataCollectionRuleDataSourcesDataImportPtrOutput
}

type dataCollectionRuleDataSourcesDataImportPtrType DataCollectionRuleDataSourcesDataImportArgs

func DataCollectionRuleDataSourcesDataImportPtr(v *DataCollectionRuleDataSourcesDataImportArgs) DataCollectionRuleDataSourcesDataImportPtrInput {
	return (*dataCollectionRuleDataSourcesDataImportPtrType)(v)
}

func (*dataCollectionRuleDataSourcesDataImportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDataSourcesDataImport)(nil)).Elem()
}

func (i *dataCollectionRuleDataSourcesDataImportPtrType) ToDataCollectionRuleDataSourcesDataImportPtrOutput() DataCollectionRuleDataSourcesDataImportPtrOutput {
	return i.ToDataCollectionRuleDataSourcesDataImportPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleDataSourcesDataImportPtrType) ToDataCollectionRuleDataSourcesDataImportPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesDataImportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesDataImportPtrOutput)
}

func (i *dataCollectionRuleDataSourcesDataImportPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDataSourcesDataImport] {
	return pulumix.Output[*DataCollectionRuleDataSourcesDataImport]{
		OutputState: i.ToDataCollectionRuleDataSourcesDataImportPtrOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesDataImportOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesDataImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesDataImport)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesDataImportOutput) ToDataCollectionRuleDataSourcesDataImportOutput() DataCollectionRuleDataSourcesDataImportOutput {
	return o
}

func (o DataCollectionRuleDataSourcesDataImportOutput) ToDataCollectionRuleDataSourcesDataImportOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesDataImportOutput {
	return o
}

func (o DataCollectionRuleDataSourcesDataImportOutput) ToDataCollectionRuleDataSourcesDataImportPtrOutput() DataCollectionRuleDataSourcesDataImportPtrOutput {
	return o.ToDataCollectionRuleDataSourcesDataImportPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleDataSourcesDataImportOutput) ToDataCollectionRuleDataSourcesDataImportPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesDataImportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleDataSourcesDataImport) *DataCollectionRuleDataSourcesDataImport {
		return &v
	}).(DataCollectionRuleDataSourcesDataImportPtrOutput)
}

func (o DataCollectionRuleDataSourcesDataImportOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesDataImport] {
	return pulumix.Output[DataCollectionRuleDataSourcesDataImport]{
		OutputState: o.OutputState,
	}
}

// An `eventHubDataSource` block as defined below.
func (o DataCollectionRuleDataSourcesDataImportOutput) EventHubDataSources() DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesDataImport) []DataCollectionRuleDataSourcesDataImportEventHubDataSource {
		return v.EventHubDataSources
	}).(DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput)
}

type DataCollectionRuleDataSourcesDataImportPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesDataImportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDataSourcesDataImport)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesDataImportPtrOutput) ToDataCollectionRuleDataSourcesDataImportPtrOutput() DataCollectionRuleDataSourcesDataImportPtrOutput {
	return o
}

func (o DataCollectionRuleDataSourcesDataImportPtrOutput) ToDataCollectionRuleDataSourcesDataImportPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesDataImportPtrOutput {
	return o
}

func (o DataCollectionRuleDataSourcesDataImportPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDataSourcesDataImport] {
	return pulumix.Output[*DataCollectionRuleDataSourcesDataImport]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesDataImportPtrOutput) Elem() DataCollectionRuleDataSourcesDataImportOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSourcesDataImport) DataCollectionRuleDataSourcesDataImport {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleDataSourcesDataImport
		return ret
	}).(DataCollectionRuleDataSourcesDataImportOutput)
}

// An `eventHubDataSource` block as defined below.
func (o DataCollectionRuleDataSourcesDataImportPtrOutput) EventHubDataSources() DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSourcesDataImport) []DataCollectionRuleDataSourcesDataImportEventHubDataSource {
		if v == nil {
			return nil
		}
		return v.EventHubDataSources
	}).(DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput)
}

type DataCollectionRuleDataSourcesDataImportEventHubDataSource struct {
	// The Event Hub consumer group name.
	ConsumerGroup *string `pulumi:"consumerGroup"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
	// The stream to collect from Event Hub. Possible value should be a custom stream name.
	Stream string `pulumi:"stream"`
}

// DataCollectionRuleDataSourcesDataImportEventHubDataSourceInput is an input type that accepts DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs and DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesDataImportEventHubDataSourceInput` via:
//
//	DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs{...}
type DataCollectionRuleDataSourcesDataImportEventHubDataSourceInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput() DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput
	ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceOutputWithContext(context.Context) DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput
}

type DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs struct {
	// The Event Hub consumer group name.
	ConsumerGroup pulumi.StringPtrInput `pulumi:"consumerGroup"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The stream to collect from Event Hub. Possible value should be a custom stream name.
	Stream pulumi.StringInput `pulumi:"stream"`
}

func (DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesDataImportEventHubDataSource)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs) ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput() DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput {
	return i.ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs) ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput)
}

func (i DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesDataImportEventHubDataSource] {
	return pulumix.Output[DataCollectionRuleDataSourcesDataImportEventHubDataSource]{
		OutputState: i.ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayInput is an input type that accepts DataCollectionRuleDataSourcesDataImportEventHubDataSourceArray and DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayInput` via:
//
//	DataCollectionRuleDataSourcesDataImportEventHubDataSourceArray{ DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs{...} }
type DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput() DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput
	ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutputWithContext(context.Context) DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput
}

type DataCollectionRuleDataSourcesDataImportEventHubDataSourceArray []DataCollectionRuleDataSourcesDataImportEventHubDataSourceInput

func (DataCollectionRuleDataSourcesDataImportEventHubDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesDataImportEventHubDataSource)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesDataImportEventHubDataSourceArray) ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput() DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput {
	return i.ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesDataImportEventHubDataSourceArray) ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput)
}

func (i DataCollectionRuleDataSourcesDataImportEventHubDataSourceArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesDataImportEventHubDataSource] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesDataImportEventHubDataSource]{
		OutputState: i.ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesDataImportEventHubDataSource)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput) ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput() DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput {
	return o
}

func (o DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput) ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput {
	return o
}

func (o DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesDataImportEventHubDataSource] {
	return pulumix.Output[DataCollectionRuleDataSourcesDataImportEventHubDataSource]{
		OutputState: o.OutputState,
	}
}

// The Event Hub consumer group name.
func (o DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput) ConsumerGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesDataImportEventHubDataSource) *string { return v.ConsumerGroup }).(pulumi.StringPtrOutput)
}

// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesDataImportEventHubDataSource) string { return v.Name }).(pulumi.StringOutput)
}

// The stream to collect from Event Hub. Possible value should be a custom stream name.
func (o DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput) Stream() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesDataImportEventHubDataSource) string { return v.Stream }).(pulumi.StringOutput)
}

type DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesDataImportEventHubDataSource)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput) ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput() DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput) ToDataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesDataImportEventHubDataSource] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesDataImportEventHubDataSource]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDataSourcesDataImportEventHubDataSource {
		return vs[0].([]DataCollectionRuleDataSourcesDataImportEventHubDataSource)[vs[1].(int)]
	}).(DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput)
}

type DataCollectionRuleDataSourcesExtension struct {
	// A JSON String which specifies the extension setting.
	ExtensionJson *string `pulumi:"extensionJson"`
	// The name of the VM extension.
	ExtensionName string `pulumi:"extensionName"`
	// Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performanceCounter`, `windowsEventLog`,and `syslog`.
	InputDataSources []string `pulumi:"inputDataSources"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`, `Microsoft-WindowsEvent`.
	Streams []string `pulumi:"streams"`
}

// DataCollectionRuleDataSourcesExtensionInput is an input type that accepts DataCollectionRuleDataSourcesExtensionArgs and DataCollectionRuleDataSourcesExtensionOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesExtensionInput` via:
//
//	DataCollectionRuleDataSourcesExtensionArgs{...}
type DataCollectionRuleDataSourcesExtensionInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesExtensionOutput() DataCollectionRuleDataSourcesExtensionOutput
	ToDataCollectionRuleDataSourcesExtensionOutputWithContext(context.Context) DataCollectionRuleDataSourcesExtensionOutput
}

type DataCollectionRuleDataSourcesExtensionArgs struct {
	// A JSON String which specifies the extension setting.
	ExtensionJson pulumi.StringPtrInput `pulumi:"extensionJson"`
	// The name of the VM extension.
	ExtensionName pulumi.StringInput `pulumi:"extensionName"`
	// Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performanceCounter`, `windowsEventLog`,and `syslog`.
	InputDataSources pulumi.StringArrayInput `pulumi:"inputDataSources"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`, `Microsoft-WindowsEvent`.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (DataCollectionRuleDataSourcesExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesExtension)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesExtensionArgs) ToDataCollectionRuleDataSourcesExtensionOutput() DataCollectionRuleDataSourcesExtensionOutput {
	return i.ToDataCollectionRuleDataSourcesExtensionOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesExtensionArgs) ToDataCollectionRuleDataSourcesExtensionOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesExtensionOutput)
}

func (i DataCollectionRuleDataSourcesExtensionArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesExtension] {
	return pulumix.Output[DataCollectionRuleDataSourcesExtension]{
		OutputState: i.ToDataCollectionRuleDataSourcesExtensionOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDataSourcesExtensionArrayInput is an input type that accepts DataCollectionRuleDataSourcesExtensionArray and DataCollectionRuleDataSourcesExtensionArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesExtensionArrayInput` via:
//
//	DataCollectionRuleDataSourcesExtensionArray{ DataCollectionRuleDataSourcesExtensionArgs{...} }
type DataCollectionRuleDataSourcesExtensionArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesExtensionArrayOutput() DataCollectionRuleDataSourcesExtensionArrayOutput
	ToDataCollectionRuleDataSourcesExtensionArrayOutputWithContext(context.Context) DataCollectionRuleDataSourcesExtensionArrayOutput
}

type DataCollectionRuleDataSourcesExtensionArray []DataCollectionRuleDataSourcesExtensionInput

func (DataCollectionRuleDataSourcesExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesExtension)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesExtensionArray) ToDataCollectionRuleDataSourcesExtensionArrayOutput() DataCollectionRuleDataSourcesExtensionArrayOutput {
	return i.ToDataCollectionRuleDataSourcesExtensionArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesExtensionArray) ToDataCollectionRuleDataSourcesExtensionArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesExtensionArrayOutput)
}

func (i DataCollectionRuleDataSourcesExtensionArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesExtension] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesExtension]{
		OutputState: i.ToDataCollectionRuleDataSourcesExtensionArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesExtensionOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesExtension)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesExtensionOutput) ToDataCollectionRuleDataSourcesExtensionOutput() DataCollectionRuleDataSourcesExtensionOutput {
	return o
}

func (o DataCollectionRuleDataSourcesExtensionOutput) ToDataCollectionRuleDataSourcesExtensionOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesExtensionOutput {
	return o
}

func (o DataCollectionRuleDataSourcesExtensionOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesExtension] {
	return pulumix.Output[DataCollectionRuleDataSourcesExtension]{
		OutputState: o.OutputState,
	}
}

// A JSON String which specifies the extension setting.
func (o DataCollectionRuleDataSourcesExtensionOutput) ExtensionJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesExtension) *string { return v.ExtensionJson }).(pulumi.StringPtrOutput)
}

// The name of the VM extension.
func (o DataCollectionRuleDataSourcesExtensionOutput) ExtensionName() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesExtension) string { return v.ExtensionName }).(pulumi.StringOutput)
}

// Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performanceCounter`, `windowsEventLog`,and `syslog`.
func (o DataCollectionRuleDataSourcesExtensionOutput) InputDataSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesExtension) []string { return v.InputDataSources }).(pulumi.StringArrayOutput)
}

// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDataSourcesExtensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesExtension) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`, `Microsoft-InsightsMetrics`, `Microsoft-Perf`, `Microsoft-Syslog`, `Microsoft-WindowsEvent`.
func (o DataCollectionRuleDataSourcesExtensionOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesExtension) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type DataCollectionRuleDataSourcesExtensionArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesExtension)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesExtensionArrayOutput) ToDataCollectionRuleDataSourcesExtensionArrayOutput() DataCollectionRuleDataSourcesExtensionArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesExtensionArrayOutput) ToDataCollectionRuleDataSourcesExtensionArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesExtensionArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesExtensionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesExtension] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesExtension]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesExtensionArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDataSourcesExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDataSourcesExtension {
		return vs[0].([]DataCollectionRuleDataSourcesExtension)[vs[1].(int)]
	}).(DataCollectionRuleDataSourcesExtensionOutput)
}

type DataCollectionRuleDataSourcesIisLog struct {
	// Specifies a list of absolute paths where the log files are located.
	LogDirectories []string `pulumi:"logDirectories"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-W3CIISLog`.
	Streams []string `pulumi:"streams"`
}

// DataCollectionRuleDataSourcesIisLogInput is an input type that accepts DataCollectionRuleDataSourcesIisLogArgs and DataCollectionRuleDataSourcesIisLogOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesIisLogInput` via:
//
//	DataCollectionRuleDataSourcesIisLogArgs{...}
type DataCollectionRuleDataSourcesIisLogInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesIisLogOutput() DataCollectionRuleDataSourcesIisLogOutput
	ToDataCollectionRuleDataSourcesIisLogOutputWithContext(context.Context) DataCollectionRuleDataSourcesIisLogOutput
}

type DataCollectionRuleDataSourcesIisLogArgs struct {
	// Specifies a list of absolute paths where the log files are located.
	LogDirectories pulumi.StringArrayInput `pulumi:"logDirectories"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-W3CIISLog`.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (DataCollectionRuleDataSourcesIisLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesIisLog)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesIisLogArgs) ToDataCollectionRuleDataSourcesIisLogOutput() DataCollectionRuleDataSourcesIisLogOutput {
	return i.ToDataCollectionRuleDataSourcesIisLogOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesIisLogArgs) ToDataCollectionRuleDataSourcesIisLogOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesIisLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesIisLogOutput)
}

func (i DataCollectionRuleDataSourcesIisLogArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesIisLog] {
	return pulumix.Output[DataCollectionRuleDataSourcesIisLog]{
		OutputState: i.ToDataCollectionRuleDataSourcesIisLogOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDataSourcesIisLogArrayInput is an input type that accepts DataCollectionRuleDataSourcesIisLogArray and DataCollectionRuleDataSourcesIisLogArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesIisLogArrayInput` via:
//
//	DataCollectionRuleDataSourcesIisLogArray{ DataCollectionRuleDataSourcesIisLogArgs{...} }
type DataCollectionRuleDataSourcesIisLogArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesIisLogArrayOutput() DataCollectionRuleDataSourcesIisLogArrayOutput
	ToDataCollectionRuleDataSourcesIisLogArrayOutputWithContext(context.Context) DataCollectionRuleDataSourcesIisLogArrayOutput
}

type DataCollectionRuleDataSourcesIisLogArray []DataCollectionRuleDataSourcesIisLogInput

func (DataCollectionRuleDataSourcesIisLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesIisLog)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesIisLogArray) ToDataCollectionRuleDataSourcesIisLogArrayOutput() DataCollectionRuleDataSourcesIisLogArrayOutput {
	return i.ToDataCollectionRuleDataSourcesIisLogArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesIisLogArray) ToDataCollectionRuleDataSourcesIisLogArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesIisLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesIisLogArrayOutput)
}

func (i DataCollectionRuleDataSourcesIisLogArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesIisLog] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesIisLog]{
		OutputState: i.ToDataCollectionRuleDataSourcesIisLogArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesIisLogOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesIisLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesIisLog)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesIisLogOutput) ToDataCollectionRuleDataSourcesIisLogOutput() DataCollectionRuleDataSourcesIisLogOutput {
	return o
}

func (o DataCollectionRuleDataSourcesIisLogOutput) ToDataCollectionRuleDataSourcesIisLogOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesIisLogOutput {
	return o
}

func (o DataCollectionRuleDataSourcesIisLogOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesIisLog] {
	return pulumix.Output[DataCollectionRuleDataSourcesIisLog]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of absolute paths where the log files are located.
func (o DataCollectionRuleDataSourcesIisLogOutput) LogDirectories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesIisLog) []string { return v.LogDirectories }).(pulumi.StringArrayOutput)
}

// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDataSourcesIisLogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesIisLog) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-W3CIISLog`.
func (o DataCollectionRuleDataSourcesIisLogOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesIisLog) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type DataCollectionRuleDataSourcesIisLogArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesIisLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesIisLog)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesIisLogArrayOutput) ToDataCollectionRuleDataSourcesIisLogArrayOutput() DataCollectionRuleDataSourcesIisLogArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesIisLogArrayOutput) ToDataCollectionRuleDataSourcesIisLogArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesIisLogArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesIisLogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesIisLog] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesIisLog]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesIisLogArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDataSourcesIisLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDataSourcesIisLog {
		return vs[0].([]DataCollectionRuleDataSourcesIisLog)[vs[1].(int)]
	}).(DataCollectionRuleDataSourcesIisLogOutput)
}

type DataCollectionRuleDataSourcesLogFile struct {
	// Specifies a list of file patterns where the log files are located. For example, `C:\\JavaLogs\\*.log`.
	FilePatterns []string `pulumi:"filePatterns"`
	// The data format of the log files. possible value is `text`.
	Format string `pulumi:"format"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
	// A `settings` block as defined below.
	Settings *DataCollectionRuleDataSourcesLogFileSettings `pulumi:"settings"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value should be custom stream names.
	Streams []string `pulumi:"streams"`
}

// DataCollectionRuleDataSourcesLogFileInput is an input type that accepts DataCollectionRuleDataSourcesLogFileArgs and DataCollectionRuleDataSourcesLogFileOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesLogFileInput` via:
//
//	DataCollectionRuleDataSourcesLogFileArgs{...}
type DataCollectionRuleDataSourcesLogFileInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesLogFileOutput() DataCollectionRuleDataSourcesLogFileOutput
	ToDataCollectionRuleDataSourcesLogFileOutputWithContext(context.Context) DataCollectionRuleDataSourcesLogFileOutput
}

type DataCollectionRuleDataSourcesLogFileArgs struct {
	// Specifies a list of file patterns where the log files are located. For example, `C:\\JavaLogs\\*.log`.
	FilePatterns pulumi.StringArrayInput `pulumi:"filePatterns"`
	// The data format of the log files. possible value is `text`.
	Format pulumi.StringInput `pulumi:"format"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// A `settings` block as defined below.
	Settings DataCollectionRuleDataSourcesLogFileSettingsPtrInput `pulumi:"settings"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value should be custom stream names.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (DataCollectionRuleDataSourcesLogFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesLogFile)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesLogFileArgs) ToDataCollectionRuleDataSourcesLogFileOutput() DataCollectionRuleDataSourcesLogFileOutput {
	return i.ToDataCollectionRuleDataSourcesLogFileOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesLogFileArgs) ToDataCollectionRuleDataSourcesLogFileOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesLogFileOutput)
}

func (i DataCollectionRuleDataSourcesLogFileArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesLogFile] {
	return pulumix.Output[DataCollectionRuleDataSourcesLogFile]{
		OutputState: i.ToDataCollectionRuleDataSourcesLogFileOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDataSourcesLogFileArrayInput is an input type that accepts DataCollectionRuleDataSourcesLogFileArray and DataCollectionRuleDataSourcesLogFileArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesLogFileArrayInput` via:
//
//	DataCollectionRuleDataSourcesLogFileArray{ DataCollectionRuleDataSourcesLogFileArgs{...} }
type DataCollectionRuleDataSourcesLogFileArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesLogFileArrayOutput() DataCollectionRuleDataSourcesLogFileArrayOutput
	ToDataCollectionRuleDataSourcesLogFileArrayOutputWithContext(context.Context) DataCollectionRuleDataSourcesLogFileArrayOutput
}

type DataCollectionRuleDataSourcesLogFileArray []DataCollectionRuleDataSourcesLogFileInput

func (DataCollectionRuleDataSourcesLogFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesLogFile)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesLogFileArray) ToDataCollectionRuleDataSourcesLogFileArrayOutput() DataCollectionRuleDataSourcesLogFileArrayOutput {
	return i.ToDataCollectionRuleDataSourcesLogFileArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesLogFileArray) ToDataCollectionRuleDataSourcesLogFileArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesLogFileArrayOutput)
}

func (i DataCollectionRuleDataSourcesLogFileArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesLogFile] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesLogFile]{
		OutputState: i.ToDataCollectionRuleDataSourcesLogFileArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesLogFileOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesLogFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesLogFile)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesLogFileOutput) ToDataCollectionRuleDataSourcesLogFileOutput() DataCollectionRuleDataSourcesLogFileOutput {
	return o
}

func (o DataCollectionRuleDataSourcesLogFileOutput) ToDataCollectionRuleDataSourcesLogFileOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileOutput {
	return o
}

func (o DataCollectionRuleDataSourcesLogFileOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesLogFile] {
	return pulumix.Output[DataCollectionRuleDataSourcesLogFile]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of file patterns where the log files are located. For example, `C:\\JavaLogs\\*.log`.
func (o DataCollectionRuleDataSourcesLogFileOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesLogFile) []string { return v.FilePatterns }).(pulumi.StringArrayOutput)
}

// The data format of the log files. possible value is `text`.
func (o DataCollectionRuleDataSourcesLogFileOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesLogFile) string { return v.Format }).(pulumi.StringOutput)
}

// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDataSourcesLogFileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesLogFile) string { return v.Name }).(pulumi.StringOutput)
}

// A `settings` block as defined below.
func (o DataCollectionRuleDataSourcesLogFileOutput) Settings() DataCollectionRuleDataSourcesLogFileSettingsPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesLogFile) *DataCollectionRuleDataSourcesLogFileSettings {
		return v.Settings
	}).(DataCollectionRuleDataSourcesLogFileSettingsPtrOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value should be custom stream names.
func (o DataCollectionRuleDataSourcesLogFileOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesLogFile) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type DataCollectionRuleDataSourcesLogFileArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesLogFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesLogFile)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesLogFileArrayOutput) ToDataCollectionRuleDataSourcesLogFileArrayOutput() DataCollectionRuleDataSourcesLogFileArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesLogFileArrayOutput) ToDataCollectionRuleDataSourcesLogFileArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesLogFileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesLogFile] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesLogFile]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesLogFileArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDataSourcesLogFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDataSourcesLogFile {
		return vs[0].([]DataCollectionRuleDataSourcesLogFile)[vs[1].(int)]
	}).(DataCollectionRuleDataSourcesLogFileOutput)
}

type DataCollectionRuleDataSourcesLogFileSettings struct {
	// A `text` block as defined below.
	Text DataCollectionRuleDataSourcesLogFileSettingsText `pulumi:"text"`
}

// DataCollectionRuleDataSourcesLogFileSettingsInput is an input type that accepts DataCollectionRuleDataSourcesLogFileSettingsArgs and DataCollectionRuleDataSourcesLogFileSettingsOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesLogFileSettingsInput` via:
//
//	DataCollectionRuleDataSourcesLogFileSettingsArgs{...}
type DataCollectionRuleDataSourcesLogFileSettingsInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesLogFileSettingsOutput() DataCollectionRuleDataSourcesLogFileSettingsOutput
	ToDataCollectionRuleDataSourcesLogFileSettingsOutputWithContext(context.Context) DataCollectionRuleDataSourcesLogFileSettingsOutput
}

type DataCollectionRuleDataSourcesLogFileSettingsArgs struct {
	// A `text` block as defined below.
	Text DataCollectionRuleDataSourcesLogFileSettingsTextInput `pulumi:"text"`
}

func (DataCollectionRuleDataSourcesLogFileSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesLogFileSettings)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesLogFileSettingsArgs) ToDataCollectionRuleDataSourcesLogFileSettingsOutput() DataCollectionRuleDataSourcesLogFileSettingsOutput {
	return i.ToDataCollectionRuleDataSourcesLogFileSettingsOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesLogFileSettingsArgs) ToDataCollectionRuleDataSourcesLogFileSettingsOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesLogFileSettingsOutput)
}

func (i DataCollectionRuleDataSourcesLogFileSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesLogFileSettings] {
	return pulumix.Output[DataCollectionRuleDataSourcesLogFileSettings]{
		OutputState: i.ToDataCollectionRuleDataSourcesLogFileSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i DataCollectionRuleDataSourcesLogFileSettingsArgs) ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutput() DataCollectionRuleDataSourcesLogFileSettingsPtrOutput {
	return i.ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesLogFileSettingsArgs) ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesLogFileSettingsOutput).ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutputWithContext(ctx)
}

// DataCollectionRuleDataSourcesLogFileSettingsPtrInput is an input type that accepts DataCollectionRuleDataSourcesLogFileSettingsArgs, DataCollectionRuleDataSourcesLogFileSettingsPtr and DataCollectionRuleDataSourcesLogFileSettingsPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesLogFileSettingsPtrInput` via:
//
//	        DataCollectionRuleDataSourcesLogFileSettingsArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleDataSourcesLogFileSettingsPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutput() DataCollectionRuleDataSourcesLogFileSettingsPtrOutput
	ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutputWithContext(context.Context) DataCollectionRuleDataSourcesLogFileSettingsPtrOutput
}

type dataCollectionRuleDataSourcesLogFileSettingsPtrType DataCollectionRuleDataSourcesLogFileSettingsArgs

func DataCollectionRuleDataSourcesLogFileSettingsPtr(v *DataCollectionRuleDataSourcesLogFileSettingsArgs) DataCollectionRuleDataSourcesLogFileSettingsPtrInput {
	return (*dataCollectionRuleDataSourcesLogFileSettingsPtrType)(v)
}

func (*dataCollectionRuleDataSourcesLogFileSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDataSourcesLogFileSettings)(nil)).Elem()
}

func (i *dataCollectionRuleDataSourcesLogFileSettingsPtrType) ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutput() DataCollectionRuleDataSourcesLogFileSettingsPtrOutput {
	return i.ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleDataSourcesLogFileSettingsPtrType) ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesLogFileSettingsPtrOutput)
}

func (i *dataCollectionRuleDataSourcesLogFileSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDataSourcesLogFileSettings] {
	return pulumix.Output[*DataCollectionRuleDataSourcesLogFileSettings]{
		OutputState: i.ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesLogFileSettingsOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesLogFileSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesLogFileSettings)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesLogFileSettingsOutput) ToDataCollectionRuleDataSourcesLogFileSettingsOutput() DataCollectionRuleDataSourcesLogFileSettingsOutput {
	return o
}

func (o DataCollectionRuleDataSourcesLogFileSettingsOutput) ToDataCollectionRuleDataSourcesLogFileSettingsOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileSettingsOutput {
	return o
}

func (o DataCollectionRuleDataSourcesLogFileSettingsOutput) ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutput() DataCollectionRuleDataSourcesLogFileSettingsPtrOutput {
	return o.ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleDataSourcesLogFileSettingsOutput) ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleDataSourcesLogFileSettings) *DataCollectionRuleDataSourcesLogFileSettings {
		return &v
	}).(DataCollectionRuleDataSourcesLogFileSettingsPtrOutput)
}

func (o DataCollectionRuleDataSourcesLogFileSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesLogFileSettings] {
	return pulumix.Output[DataCollectionRuleDataSourcesLogFileSettings]{
		OutputState: o.OutputState,
	}
}

// A `text` block as defined below.
func (o DataCollectionRuleDataSourcesLogFileSettingsOutput) Text() DataCollectionRuleDataSourcesLogFileSettingsTextOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesLogFileSettings) DataCollectionRuleDataSourcesLogFileSettingsText {
		return v.Text
	}).(DataCollectionRuleDataSourcesLogFileSettingsTextOutput)
}

type DataCollectionRuleDataSourcesLogFileSettingsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesLogFileSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDataSourcesLogFileSettings)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesLogFileSettingsPtrOutput) ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutput() DataCollectionRuleDataSourcesLogFileSettingsPtrOutput {
	return o
}

func (o DataCollectionRuleDataSourcesLogFileSettingsPtrOutput) ToDataCollectionRuleDataSourcesLogFileSettingsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileSettingsPtrOutput {
	return o
}

func (o DataCollectionRuleDataSourcesLogFileSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDataSourcesLogFileSettings] {
	return pulumix.Output[*DataCollectionRuleDataSourcesLogFileSettings]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesLogFileSettingsPtrOutput) Elem() DataCollectionRuleDataSourcesLogFileSettingsOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSourcesLogFileSettings) DataCollectionRuleDataSourcesLogFileSettings {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleDataSourcesLogFileSettings
		return ret
	}).(DataCollectionRuleDataSourcesLogFileSettingsOutput)
}

// A `text` block as defined below.
func (o DataCollectionRuleDataSourcesLogFileSettingsPtrOutput) Text() DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSourcesLogFileSettings) *DataCollectionRuleDataSourcesLogFileSettingsText {
		if v == nil {
			return nil
		}
		return &v.Text
	}).(DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput)
}

type DataCollectionRuleDataSourcesLogFileSettingsText struct {
	// The timestamp format of the text log files. Possible values are `ISO 8601`, `YYYY-MM-DD HH:MM:SS`, `M/D/YYYY HH:MM:SS AM/PM`, `Mon DD, YYYY HH:MM:SS`, `yyMMdd HH:mm:ss`, `ddMMyy HH:mm:ss`, `MMM d hh:mm:ss`, `dd/MMM/yyyy:HH:mm:ss zzz`,and `yyyy-MM-ddTHH:mm:ssK`.
	RecordStartTimestampFormat string `pulumi:"recordStartTimestampFormat"`
}

// DataCollectionRuleDataSourcesLogFileSettingsTextInput is an input type that accepts DataCollectionRuleDataSourcesLogFileSettingsTextArgs and DataCollectionRuleDataSourcesLogFileSettingsTextOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesLogFileSettingsTextInput` via:
//
//	DataCollectionRuleDataSourcesLogFileSettingsTextArgs{...}
type DataCollectionRuleDataSourcesLogFileSettingsTextInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesLogFileSettingsTextOutput() DataCollectionRuleDataSourcesLogFileSettingsTextOutput
	ToDataCollectionRuleDataSourcesLogFileSettingsTextOutputWithContext(context.Context) DataCollectionRuleDataSourcesLogFileSettingsTextOutput
}

type DataCollectionRuleDataSourcesLogFileSettingsTextArgs struct {
	// The timestamp format of the text log files. Possible values are `ISO 8601`, `YYYY-MM-DD HH:MM:SS`, `M/D/YYYY HH:MM:SS AM/PM`, `Mon DD, YYYY HH:MM:SS`, `yyMMdd HH:mm:ss`, `ddMMyy HH:mm:ss`, `MMM d hh:mm:ss`, `dd/MMM/yyyy:HH:mm:ss zzz`,and `yyyy-MM-ddTHH:mm:ssK`.
	RecordStartTimestampFormat pulumi.StringInput `pulumi:"recordStartTimestampFormat"`
}

func (DataCollectionRuleDataSourcesLogFileSettingsTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesLogFileSettingsText)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesLogFileSettingsTextArgs) ToDataCollectionRuleDataSourcesLogFileSettingsTextOutput() DataCollectionRuleDataSourcesLogFileSettingsTextOutput {
	return i.ToDataCollectionRuleDataSourcesLogFileSettingsTextOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesLogFileSettingsTextArgs) ToDataCollectionRuleDataSourcesLogFileSettingsTextOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileSettingsTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesLogFileSettingsTextOutput)
}

func (i DataCollectionRuleDataSourcesLogFileSettingsTextArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesLogFileSettingsText] {
	return pulumix.Output[DataCollectionRuleDataSourcesLogFileSettingsText]{
		OutputState: i.ToDataCollectionRuleDataSourcesLogFileSettingsTextOutputWithContext(ctx).OutputState,
	}
}

func (i DataCollectionRuleDataSourcesLogFileSettingsTextArgs) ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput() DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput {
	return i.ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesLogFileSettingsTextArgs) ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesLogFileSettingsTextOutput).ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutputWithContext(ctx)
}

// DataCollectionRuleDataSourcesLogFileSettingsTextPtrInput is an input type that accepts DataCollectionRuleDataSourcesLogFileSettingsTextArgs, DataCollectionRuleDataSourcesLogFileSettingsTextPtr and DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesLogFileSettingsTextPtrInput` via:
//
//	        DataCollectionRuleDataSourcesLogFileSettingsTextArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleDataSourcesLogFileSettingsTextPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput() DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput
	ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutputWithContext(context.Context) DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput
}

type dataCollectionRuleDataSourcesLogFileSettingsTextPtrType DataCollectionRuleDataSourcesLogFileSettingsTextArgs

func DataCollectionRuleDataSourcesLogFileSettingsTextPtr(v *DataCollectionRuleDataSourcesLogFileSettingsTextArgs) DataCollectionRuleDataSourcesLogFileSettingsTextPtrInput {
	return (*dataCollectionRuleDataSourcesLogFileSettingsTextPtrType)(v)
}

func (*dataCollectionRuleDataSourcesLogFileSettingsTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDataSourcesLogFileSettingsText)(nil)).Elem()
}

func (i *dataCollectionRuleDataSourcesLogFileSettingsTextPtrType) ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput() DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput {
	return i.ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleDataSourcesLogFileSettingsTextPtrType) ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput)
}

func (i *dataCollectionRuleDataSourcesLogFileSettingsTextPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDataSourcesLogFileSettingsText] {
	return pulumix.Output[*DataCollectionRuleDataSourcesLogFileSettingsText]{
		OutputState: i.ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesLogFileSettingsTextOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesLogFileSettingsTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesLogFileSettingsText)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesLogFileSettingsTextOutput) ToDataCollectionRuleDataSourcesLogFileSettingsTextOutput() DataCollectionRuleDataSourcesLogFileSettingsTextOutput {
	return o
}

func (o DataCollectionRuleDataSourcesLogFileSettingsTextOutput) ToDataCollectionRuleDataSourcesLogFileSettingsTextOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileSettingsTextOutput {
	return o
}

func (o DataCollectionRuleDataSourcesLogFileSettingsTextOutput) ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput() DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput {
	return o.ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleDataSourcesLogFileSettingsTextOutput) ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleDataSourcesLogFileSettingsText) *DataCollectionRuleDataSourcesLogFileSettingsText {
		return &v
	}).(DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput)
}

func (o DataCollectionRuleDataSourcesLogFileSettingsTextOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesLogFileSettingsText] {
	return pulumix.Output[DataCollectionRuleDataSourcesLogFileSettingsText]{
		OutputState: o.OutputState,
	}
}

// The timestamp format of the text log files. Possible values are `ISO 8601`, `YYYY-MM-DD HH:MM:SS`, `M/D/YYYY HH:MM:SS AM/PM`, `Mon DD, YYYY HH:MM:SS`, `yyMMdd HH:mm:ss`, `ddMMyy HH:mm:ss`, `MMM d hh:mm:ss`, `dd/MMM/yyyy:HH:mm:ss zzz`,and `yyyy-MM-ddTHH:mm:ssK`.
func (o DataCollectionRuleDataSourcesLogFileSettingsTextOutput) RecordStartTimestampFormat() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesLogFileSettingsText) string { return v.RecordStartTimestampFormat }).(pulumi.StringOutput)
}

type DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDataSourcesLogFileSettingsText)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput) ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput() DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput {
	return o
}

func (o DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput) ToDataCollectionRuleDataSourcesLogFileSettingsTextPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput {
	return o
}

func (o DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDataSourcesLogFileSettingsText] {
	return pulumix.Output[*DataCollectionRuleDataSourcesLogFileSettingsText]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput) Elem() DataCollectionRuleDataSourcesLogFileSettingsTextOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSourcesLogFileSettingsText) DataCollectionRuleDataSourcesLogFileSettingsText {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleDataSourcesLogFileSettingsText
		return ret
	}).(DataCollectionRuleDataSourcesLogFileSettingsTextOutput)
}

// The timestamp format of the text log files. Possible values are `ISO 8601`, `YYYY-MM-DD HH:MM:SS`, `M/D/YYYY HH:MM:SS AM/PM`, `Mon DD, YYYY HH:MM:SS`, `yyMMdd HH:mm:ss`, `ddMMyy HH:mm:ss`, `MMM d hh:mm:ss`, `dd/MMM/yyyy:HH:mm:ss zzz`,and `yyyy-MM-ddTHH:mm:ssK`.
func (o DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput) RecordStartTimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSourcesLogFileSettingsText) *string {
		if v == nil {
			return nil
		}
		return &v.RecordStartTimestampFormat
	}).(pulumi.StringPtrOutput)
}

type DataCollectionRuleDataSourcesPerformanceCounter struct {
	// Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command `typeperf`. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-sources-performance-counters#configure-performance-counters) for more information.
	CounterSpecifiers []string `pulumi:"counterSpecifiers"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
	// The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive. `samplingFrequencyInSeconds` must be equal to `60` seconds for counters collected with `Microsoft-InsightsMetrics` stream.
	SamplingFrequencyInSeconds int `pulumi:"samplingFrequencyInSeconds"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-InsightsMetrics`,and `Microsoft-Perf`.
	Streams []string `pulumi:"streams"`
}

// DataCollectionRuleDataSourcesPerformanceCounterInput is an input type that accepts DataCollectionRuleDataSourcesPerformanceCounterArgs and DataCollectionRuleDataSourcesPerformanceCounterOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesPerformanceCounterInput` via:
//
//	DataCollectionRuleDataSourcesPerformanceCounterArgs{...}
type DataCollectionRuleDataSourcesPerformanceCounterInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesPerformanceCounterOutput() DataCollectionRuleDataSourcesPerformanceCounterOutput
	ToDataCollectionRuleDataSourcesPerformanceCounterOutputWithContext(context.Context) DataCollectionRuleDataSourcesPerformanceCounterOutput
}

type DataCollectionRuleDataSourcesPerformanceCounterArgs struct {
	// Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command `typeperf`. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-sources-performance-counters#configure-performance-counters) for more information.
	CounterSpecifiers pulumi.StringArrayInput `pulumi:"counterSpecifiers"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive. `samplingFrequencyInSeconds` must be equal to `60` seconds for counters collected with `Microsoft-InsightsMetrics` stream.
	SamplingFrequencyInSeconds pulumi.IntInput `pulumi:"samplingFrequencyInSeconds"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-InsightsMetrics`,and `Microsoft-Perf`.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (DataCollectionRuleDataSourcesPerformanceCounterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesPerformanceCounter)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesPerformanceCounterArgs) ToDataCollectionRuleDataSourcesPerformanceCounterOutput() DataCollectionRuleDataSourcesPerformanceCounterOutput {
	return i.ToDataCollectionRuleDataSourcesPerformanceCounterOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesPerformanceCounterArgs) ToDataCollectionRuleDataSourcesPerformanceCounterOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPerformanceCounterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesPerformanceCounterOutput)
}

func (i DataCollectionRuleDataSourcesPerformanceCounterArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesPerformanceCounter] {
	return pulumix.Output[DataCollectionRuleDataSourcesPerformanceCounter]{
		OutputState: i.ToDataCollectionRuleDataSourcesPerformanceCounterOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDataSourcesPerformanceCounterArrayInput is an input type that accepts DataCollectionRuleDataSourcesPerformanceCounterArray and DataCollectionRuleDataSourcesPerformanceCounterArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesPerformanceCounterArrayInput` via:
//
//	DataCollectionRuleDataSourcesPerformanceCounterArray{ DataCollectionRuleDataSourcesPerformanceCounterArgs{...} }
type DataCollectionRuleDataSourcesPerformanceCounterArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesPerformanceCounterArrayOutput() DataCollectionRuleDataSourcesPerformanceCounterArrayOutput
	ToDataCollectionRuleDataSourcesPerformanceCounterArrayOutputWithContext(context.Context) DataCollectionRuleDataSourcesPerformanceCounterArrayOutput
}

type DataCollectionRuleDataSourcesPerformanceCounterArray []DataCollectionRuleDataSourcesPerformanceCounterInput

func (DataCollectionRuleDataSourcesPerformanceCounterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesPerformanceCounter)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesPerformanceCounterArray) ToDataCollectionRuleDataSourcesPerformanceCounterArrayOutput() DataCollectionRuleDataSourcesPerformanceCounterArrayOutput {
	return i.ToDataCollectionRuleDataSourcesPerformanceCounterArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesPerformanceCounterArray) ToDataCollectionRuleDataSourcesPerformanceCounterArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPerformanceCounterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesPerformanceCounterArrayOutput)
}

func (i DataCollectionRuleDataSourcesPerformanceCounterArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesPerformanceCounter] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesPerformanceCounter]{
		OutputState: i.ToDataCollectionRuleDataSourcesPerformanceCounterArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesPerformanceCounterOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesPerformanceCounterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesPerformanceCounter)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesPerformanceCounterOutput) ToDataCollectionRuleDataSourcesPerformanceCounterOutput() DataCollectionRuleDataSourcesPerformanceCounterOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPerformanceCounterOutput) ToDataCollectionRuleDataSourcesPerformanceCounterOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPerformanceCounterOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPerformanceCounterOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesPerformanceCounter] {
	return pulumix.Output[DataCollectionRuleDataSourcesPerformanceCounter]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of specifier names of the performance counters you want to collect. To get a list of performance counters on Windows, run the command `typeperf`. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-sources-performance-counters#configure-performance-counters) for more information.
func (o DataCollectionRuleDataSourcesPerformanceCounterOutput) CounterSpecifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesPerformanceCounter) []string { return v.CounterSpecifiers }).(pulumi.StringArrayOutput)
}

// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDataSourcesPerformanceCounterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesPerformanceCounter) string { return v.Name }).(pulumi.StringOutput)
}

// The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive. `samplingFrequencyInSeconds` must be equal to `60` seconds for counters collected with `Microsoft-InsightsMetrics` stream.
func (o DataCollectionRuleDataSourcesPerformanceCounterOutput) SamplingFrequencyInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesPerformanceCounter) int { return v.SamplingFrequencyInSeconds }).(pulumi.IntOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-InsightsMetrics`,and `Microsoft-Perf`.
func (o DataCollectionRuleDataSourcesPerformanceCounterOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesPerformanceCounter) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type DataCollectionRuleDataSourcesPerformanceCounterArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesPerformanceCounterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesPerformanceCounter)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesPerformanceCounterArrayOutput) ToDataCollectionRuleDataSourcesPerformanceCounterArrayOutput() DataCollectionRuleDataSourcesPerformanceCounterArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPerformanceCounterArrayOutput) ToDataCollectionRuleDataSourcesPerformanceCounterArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPerformanceCounterArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPerformanceCounterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesPerformanceCounter] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesPerformanceCounter]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesPerformanceCounterArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDataSourcesPerformanceCounterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDataSourcesPerformanceCounter {
		return vs[0].([]DataCollectionRuleDataSourcesPerformanceCounter)[vs[1].(int)]
	}).(DataCollectionRuleDataSourcesPerformanceCounterOutput)
}

type DataCollectionRuleDataSourcesPlatformTelemetry struct {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft.Cache/redis:Metrics-Group-All`.
	Streams []string `pulumi:"streams"`
}

// DataCollectionRuleDataSourcesPlatformTelemetryInput is an input type that accepts DataCollectionRuleDataSourcesPlatformTelemetryArgs and DataCollectionRuleDataSourcesPlatformTelemetryOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesPlatformTelemetryInput` via:
//
//	DataCollectionRuleDataSourcesPlatformTelemetryArgs{...}
type DataCollectionRuleDataSourcesPlatformTelemetryInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesPlatformTelemetryOutput() DataCollectionRuleDataSourcesPlatformTelemetryOutput
	ToDataCollectionRuleDataSourcesPlatformTelemetryOutputWithContext(context.Context) DataCollectionRuleDataSourcesPlatformTelemetryOutput
}

type DataCollectionRuleDataSourcesPlatformTelemetryArgs struct {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft.Cache/redis:Metrics-Group-All`.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (DataCollectionRuleDataSourcesPlatformTelemetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesPlatformTelemetry)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesPlatformTelemetryArgs) ToDataCollectionRuleDataSourcesPlatformTelemetryOutput() DataCollectionRuleDataSourcesPlatformTelemetryOutput {
	return i.ToDataCollectionRuleDataSourcesPlatformTelemetryOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesPlatformTelemetryArgs) ToDataCollectionRuleDataSourcesPlatformTelemetryOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPlatformTelemetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesPlatformTelemetryOutput)
}

func (i DataCollectionRuleDataSourcesPlatformTelemetryArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesPlatformTelemetry] {
	return pulumix.Output[DataCollectionRuleDataSourcesPlatformTelemetry]{
		OutputState: i.ToDataCollectionRuleDataSourcesPlatformTelemetryOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDataSourcesPlatformTelemetryArrayInput is an input type that accepts DataCollectionRuleDataSourcesPlatformTelemetryArray and DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesPlatformTelemetryArrayInput` via:
//
//	DataCollectionRuleDataSourcesPlatformTelemetryArray{ DataCollectionRuleDataSourcesPlatformTelemetryArgs{...} }
type DataCollectionRuleDataSourcesPlatformTelemetryArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesPlatformTelemetryArrayOutput() DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput
	ToDataCollectionRuleDataSourcesPlatformTelemetryArrayOutputWithContext(context.Context) DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput
}

type DataCollectionRuleDataSourcesPlatformTelemetryArray []DataCollectionRuleDataSourcesPlatformTelemetryInput

func (DataCollectionRuleDataSourcesPlatformTelemetryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesPlatformTelemetry)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesPlatformTelemetryArray) ToDataCollectionRuleDataSourcesPlatformTelemetryArrayOutput() DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput {
	return i.ToDataCollectionRuleDataSourcesPlatformTelemetryArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesPlatformTelemetryArray) ToDataCollectionRuleDataSourcesPlatformTelemetryArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput)
}

func (i DataCollectionRuleDataSourcesPlatformTelemetryArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesPlatformTelemetry] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesPlatformTelemetry]{
		OutputState: i.ToDataCollectionRuleDataSourcesPlatformTelemetryArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesPlatformTelemetryOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesPlatformTelemetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesPlatformTelemetry)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesPlatformTelemetryOutput) ToDataCollectionRuleDataSourcesPlatformTelemetryOutput() DataCollectionRuleDataSourcesPlatformTelemetryOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPlatformTelemetryOutput) ToDataCollectionRuleDataSourcesPlatformTelemetryOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPlatformTelemetryOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPlatformTelemetryOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesPlatformTelemetry] {
	return pulumix.Output[DataCollectionRuleDataSourcesPlatformTelemetry]{
		OutputState: o.OutputState,
	}
}

// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDataSourcesPlatformTelemetryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesPlatformTelemetry) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft.Cache/redis:Metrics-Group-All`.
func (o DataCollectionRuleDataSourcesPlatformTelemetryOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesPlatformTelemetry) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesPlatformTelemetry)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput) ToDataCollectionRuleDataSourcesPlatformTelemetryArrayOutput() DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput) ToDataCollectionRuleDataSourcesPlatformTelemetryArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesPlatformTelemetry] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesPlatformTelemetry]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDataSourcesPlatformTelemetryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDataSourcesPlatformTelemetry {
		return vs[0].([]DataCollectionRuleDataSourcesPlatformTelemetry)[vs[1].(int)]
	}).(DataCollectionRuleDataSourcesPlatformTelemetryOutput)
}

type DataCollectionRuleDataSourcesPrometheusForwarder struct {
	// One or more `labelIncludeFilter` blocks as defined above.
	LabelIncludeFilters []DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter `pulumi:"labelIncludeFilters"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-PrometheusMetrics`.
	Streams []string `pulumi:"streams"`
}

// DataCollectionRuleDataSourcesPrometheusForwarderInput is an input type that accepts DataCollectionRuleDataSourcesPrometheusForwarderArgs and DataCollectionRuleDataSourcesPrometheusForwarderOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesPrometheusForwarderInput` via:
//
//	DataCollectionRuleDataSourcesPrometheusForwarderArgs{...}
type DataCollectionRuleDataSourcesPrometheusForwarderInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesPrometheusForwarderOutput() DataCollectionRuleDataSourcesPrometheusForwarderOutput
	ToDataCollectionRuleDataSourcesPrometheusForwarderOutputWithContext(context.Context) DataCollectionRuleDataSourcesPrometheusForwarderOutput
}

type DataCollectionRuleDataSourcesPrometheusForwarderArgs struct {
	// One or more `labelIncludeFilter` blocks as defined above.
	LabelIncludeFilters DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayInput `pulumi:"labelIncludeFilters"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-PrometheusMetrics`.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (DataCollectionRuleDataSourcesPrometheusForwarderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesPrometheusForwarder)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesPrometheusForwarderArgs) ToDataCollectionRuleDataSourcesPrometheusForwarderOutput() DataCollectionRuleDataSourcesPrometheusForwarderOutput {
	return i.ToDataCollectionRuleDataSourcesPrometheusForwarderOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesPrometheusForwarderArgs) ToDataCollectionRuleDataSourcesPrometheusForwarderOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPrometheusForwarderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesPrometheusForwarderOutput)
}

func (i DataCollectionRuleDataSourcesPrometheusForwarderArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesPrometheusForwarder] {
	return pulumix.Output[DataCollectionRuleDataSourcesPrometheusForwarder]{
		OutputState: i.ToDataCollectionRuleDataSourcesPrometheusForwarderOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDataSourcesPrometheusForwarderArrayInput is an input type that accepts DataCollectionRuleDataSourcesPrometheusForwarderArray and DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesPrometheusForwarderArrayInput` via:
//
//	DataCollectionRuleDataSourcesPrometheusForwarderArray{ DataCollectionRuleDataSourcesPrometheusForwarderArgs{...} }
type DataCollectionRuleDataSourcesPrometheusForwarderArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesPrometheusForwarderArrayOutput() DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput
	ToDataCollectionRuleDataSourcesPrometheusForwarderArrayOutputWithContext(context.Context) DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput
}

type DataCollectionRuleDataSourcesPrometheusForwarderArray []DataCollectionRuleDataSourcesPrometheusForwarderInput

func (DataCollectionRuleDataSourcesPrometheusForwarderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesPrometheusForwarder)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesPrometheusForwarderArray) ToDataCollectionRuleDataSourcesPrometheusForwarderArrayOutput() DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput {
	return i.ToDataCollectionRuleDataSourcesPrometheusForwarderArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesPrometheusForwarderArray) ToDataCollectionRuleDataSourcesPrometheusForwarderArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput)
}

func (i DataCollectionRuleDataSourcesPrometheusForwarderArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesPrometheusForwarder] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesPrometheusForwarder]{
		OutputState: i.ToDataCollectionRuleDataSourcesPrometheusForwarderArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesPrometheusForwarderOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesPrometheusForwarderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesPrometheusForwarder)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesPrometheusForwarderOutput) ToDataCollectionRuleDataSourcesPrometheusForwarderOutput() DataCollectionRuleDataSourcesPrometheusForwarderOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPrometheusForwarderOutput) ToDataCollectionRuleDataSourcesPrometheusForwarderOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPrometheusForwarderOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPrometheusForwarderOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesPrometheusForwarder] {
	return pulumix.Output[DataCollectionRuleDataSourcesPrometheusForwarder]{
		OutputState: o.OutputState,
	}
}

// One or more `labelIncludeFilter` blocks as defined above.
func (o DataCollectionRuleDataSourcesPrometheusForwarderOutput) LabelIncludeFilters() DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesPrometheusForwarder) []DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter {
		return v.LabelIncludeFilters
	}).(DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput)
}

// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDataSourcesPrometheusForwarderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesPrometheusForwarder) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible value is `Microsoft-PrometheusMetrics`.
func (o DataCollectionRuleDataSourcesPrometheusForwarderOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesPrometheusForwarder) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesPrometheusForwarder)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput) ToDataCollectionRuleDataSourcesPrometheusForwarderArrayOutput() DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput) ToDataCollectionRuleDataSourcesPrometheusForwarderArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesPrometheusForwarder] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesPrometheusForwarder]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDataSourcesPrometheusForwarderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDataSourcesPrometheusForwarder {
		return vs[0].([]DataCollectionRuleDataSourcesPrometheusForwarder)[vs[1].(int)]
	}).(DataCollectionRuleDataSourcesPrometheusForwarderOutput)
}

type DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter struct {
	// The label of the filter. This label should be unique across all `labelIncludeFileter` block. Possible value is `microsoftMetricsIncludeLabel`.
	Label string `pulumi:"label"`
	// The value of the filter.
	Value string `pulumi:"value"`
}

// DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterInput is an input type that accepts DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArgs and DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterInput` via:
//
//	DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArgs{...}
type DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput() DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput
	ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutputWithContext(context.Context) DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput
}

type DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArgs struct {
	// The label of the filter. This label should be unique across all `labelIncludeFileter` block. Possible value is `microsoftMetricsIncludeLabel`.
	Label pulumi.StringInput `pulumi:"label"`
	// The value of the filter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArgs) ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput() DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput {
	return i.ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArgs) ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput)
}

func (i DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter] {
	return pulumix.Output[DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter]{
		OutputState: i.ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayInput is an input type that accepts DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArray and DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayInput` via:
//
//	DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArray{ DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArgs{...} }
type DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput() DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput
	ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutputWithContext(context.Context) DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput
}

type DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArray []DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterInput

func (DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArray) ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput() DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput {
	return i.ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArray) ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput)
}

func (i DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter]{
		OutputState: i.ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput) ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput() DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput) ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter] {
	return pulumix.Output[DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter]{
		OutputState: o.OutputState,
	}
}

// The label of the filter. This label should be unique across all `labelIncludeFileter` block. Possible value is `microsoftMetricsIncludeLabel`.
func (o DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter) string { return v.Label }).(pulumi.StringOutput)
}

// The value of the filter.
func (o DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter) string { return v.Value }).(pulumi.StringOutput)
}

type DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput) ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput() DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput) ToDataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter {
		return vs[0].([]DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilter)[vs[1].(int)]
	}).(DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput)
}

type DataCollectionRuleDataSourcesSyslog struct {
	// Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
	FacilityNames []string `pulumi:"facilityNames"`
	// Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`, `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
	LogLevels []string `pulumi:"logLevels"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Syslog`,and `Microsoft-CiscoAsa`, and `Microsoft-CommonSecurityLog`.
	//
	// > **Note:** In 4.0 or later version of the provider, `streams` will be required. In 3.x version of provider, if `streams` is not specified in creation, it is default to `["Microsoft-Syslog"]`. if `streams` need to be modified (include change other value to the default value), it must be explicitly specified.
	Streams []string `pulumi:"streams"`
}

// DataCollectionRuleDataSourcesSyslogInput is an input type that accepts DataCollectionRuleDataSourcesSyslogArgs and DataCollectionRuleDataSourcesSyslogOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesSyslogInput` via:
//
//	DataCollectionRuleDataSourcesSyslogArgs{...}
type DataCollectionRuleDataSourcesSyslogInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesSyslogOutput() DataCollectionRuleDataSourcesSyslogOutput
	ToDataCollectionRuleDataSourcesSyslogOutputWithContext(context.Context) DataCollectionRuleDataSourcesSyslogOutput
}

type DataCollectionRuleDataSourcesSyslogArgs struct {
	// Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
	FacilityNames pulumi.StringArrayInput `pulumi:"facilityNames"`
	// Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`, `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
	LogLevels pulumi.StringArrayInput `pulumi:"logLevels"`
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Syslog`,and `Microsoft-CiscoAsa`, and `Microsoft-CommonSecurityLog`.
	//
	// > **Note:** In 4.0 or later version of the provider, `streams` will be required. In 3.x version of provider, if `streams` is not specified in creation, it is default to `["Microsoft-Syslog"]`. if `streams` need to be modified (include change other value to the default value), it must be explicitly specified.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (DataCollectionRuleDataSourcesSyslogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesSyslog)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesSyslogArgs) ToDataCollectionRuleDataSourcesSyslogOutput() DataCollectionRuleDataSourcesSyslogOutput {
	return i.ToDataCollectionRuleDataSourcesSyslogOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesSyslogArgs) ToDataCollectionRuleDataSourcesSyslogOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesSyslogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesSyslogOutput)
}

func (i DataCollectionRuleDataSourcesSyslogArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesSyslog] {
	return pulumix.Output[DataCollectionRuleDataSourcesSyslog]{
		OutputState: i.ToDataCollectionRuleDataSourcesSyslogOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDataSourcesSyslogArrayInput is an input type that accepts DataCollectionRuleDataSourcesSyslogArray and DataCollectionRuleDataSourcesSyslogArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesSyslogArrayInput` via:
//
//	DataCollectionRuleDataSourcesSyslogArray{ DataCollectionRuleDataSourcesSyslogArgs{...} }
type DataCollectionRuleDataSourcesSyslogArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesSyslogArrayOutput() DataCollectionRuleDataSourcesSyslogArrayOutput
	ToDataCollectionRuleDataSourcesSyslogArrayOutputWithContext(context.Context) DataCollectionRuleDataSourcesSyslogArrayOutput
}

type DataCollectionRuleDataSourcesSyslogArray []DataCollectionRuleDataSourcesSyslogInput

func (DataCollectionRuleDataSourcesSyslogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesSyslog)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesSyslogArray) ToDataCollectionRuleDataSourcesSyslogArrayOutput() DataCollectionRuleDataSourcesSyslogArrayOutput {
	return i.ToDataCollectionRuleDataSourcesSyslogArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesSyslogArray) ToDataCollectionRuleDataSourcesSyslogArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesSyslogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesSyslogArrayOutput)
}

func (i DataCollectionRuleDataSourcesSyslogArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesSyslog] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesSyslog]{
		OutputState: i.ToDataCollectionRuleDataSourcesSyslogArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesSyslogOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesSyslogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesSyslog)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesSyslogOutput) ToDataCollectionRuleDataSourcesSyslogOutput() DataCollectionRuleDataSourcesSyslogOutput {
	return o
}

func (o DataCollectionRuleDataSourcesSyslogOutput) ToDataCollectionRuleDataSourcesSyslogOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesSyslogOutput {
	return o
}

func (o DataCollectionRuleDataSourcesSyslogOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesSyslog] {
	return pulumix.Output[DataCollectionRuleDataSourcesSyslog]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
func (o DataCollectionRuleDataSourcesSyslogOutput) FacilityNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesSyslog) []string { return v.FacilityNames }).(pulumi.StringArrayOutput)
}

// Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`, `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
func (o DataCollectionRuleDataSourcesSyslogOutput) LogLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesSyslog) []string { return v.LogLevels }).(pulumi.StringArrayOutput)
}

// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDataSourcesSyslogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesSyslog) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Syslog`,and `Microsoft-CiscoAsa`, and `Microsoft-CommonSecurityLog`.
//
// > **Note:** In 4.0 or later version of the provider, `streams` will be required. In 3.x version of provider, if `streams` is not specified in creation, it is default to `["Microsoft-Syslog"]`. if `streams` need to be modified (include change other value to the default value), it must be explicitly specified.
func (o DataCollectionRuleDataSourcesSyslogOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesSyslog) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type DataCollectionRuleDataSourcesSyslogArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesSyslogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesSyslog)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesSyslogArrayOutput) ToDataCollectionRuleDataSourcesSyslogArrayOutput() DataCollectionRuleDataSourcesSyslogArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesSyslogArrayOutput) ToDataCollectionRuleDataSourcesSyslogArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesSyslogArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesSyslogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesSyslog] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesSyslog]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesSyslogArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDataSourcesSyslogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDataSourcesSyslog {
		return vs[0].([]DataCollectionRuleDataSourcesSyslog)[vs[1].(int)]
	}).(DataCollectionRuleDataSourcesSyslogOutput)
}

type DataCollectionRuleDataSourcesWindowsEventLog struct {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`,and `Microsoft-WindowsEvent`, `Microsoft-RomeDetectionEvent`, and `Microsoft-SecurityEvent`.
	Streams []string `pulumi:"streams"`
	// Specifies a list of Windows Event Log queries in XPath expression. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-collection-rule-azure-monitor-agent?tabs=cli#filter-events-using-xpath-queries) for more information.
	XPathQueries []string `pulumi:"xPathQueries"`
}

// DataCollectionRuleDataSourcesWindowsEventLogInput is an input type that accepts DataCollectionRuleDataSourcesWindowsEventLogArgs and DataCollectionRuleDataSourcesWindowsEventLogOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesWindowsEventLogInput` via:
//
//	DataCollectionRuleDataSourcesWindowsEventLogArgs{...}
type DataCollectionRuleDataSourcesWindowsEventLogInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesWindowsEventLogOutput() DataCollectionRuleDataSourcesWindowsEventLogOutput
	ToDataCollectionRuleDataSourcesWindowsEventLogOutputWithContext(context.Context) DataCollectionRuleDataSourcesWindowsEventLogOutput
}

type DataCollectionRuleDataSourcesWindowsEventLogArgs struct {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`,and `Microsoft-WindowsEvent`, `Microsoft-RomeDetectionEvent`, and `Microsoft-SecurityEvent`.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
	// Specifies a list of Windows Event Log queries in XPath expression. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-collection-rule-azure-monitor-agent?tabs=cli#filter-events-using-xpath-queries) for more information.
	XPathQueries pulumi.StringArrayInput `pulumi:"xPathQueries"`
}

func (DataCollectionRuleDataSourcesWindowsEventLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesWindowsEventLog)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesWindowsEventLogArgs) ToDataCollectionRuleDataSourcesWindowsEventLogOutput() DataCollectionRuleDataSourcesWindowsEventLogOutput {
	return i.ToDataCollectionRuleDataSourcesWindowsEventLogOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesWindowsEventLogArgs) ToDataCollectionRuleDataSourcesWindowsEventLogOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesWindowsEventLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesWindowsEventLogOutput)
}

func (i DataCollectionRuleDataSourcesWindowsEventLogArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesWindowsEventLog] {
	return pulumix.Output[DataCollectionRuleDataSourcesWindowsEventLog]{
		OutputState: i.ToDataCollectionRuleDataSourcesWindowsEventLogOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDataSourcesWindowsEventLogArrayInput is an input type that accepts DataCollectionRuleDataSourcesWindowsEventLogArray and DataCollectionRuleDataSourcesWindowsEventLogArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesWindowsEventLogArrayInput` via:
//
//	DataCollectionRuleDataSourcesWindowsEventLogArray{ DataCollectionRuleDataSourcesWindowsEventLogArgs{...} }
type DataCollectionRuleDataSourcesWindowsEventLogArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesWindowsEventLogArrayOutput() DataCollectionRuleDataSourcesWindowsEventLogArrayOutput
	ToDataCollectionRuleDataSourcesWindowsEventLogArrayOutputWithContext(context.Context) DataCollectionRuleDataSourcesWindowsEventLogArrayOutput
}

type DataCollectionRuleDataSourcesWindowsEventLogArray []DataCollectionRuleDataSourcesWindowsEventLogInput

func (DataCollectionRuleDataSourcesWindowsEventLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesWindowsEventLog)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesWindowsEventLogArray) ToDataCollectionRuleDataSourcesWindowsEventLogArrayOutput() DataCollectionRuleDataSourcesWindowsEventLogArrayOutput {
	return i.ToDataCollectionRuleDataSourcesWindowsEventLogArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesWindowsEventLogArray) ToDataCollectionRuleDataSourcesWindowsEventLogArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesWindowsEventLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesWindowsEventLogArrayOutput)
}

func (i DataCollectionRuleDataSourcesWindowsEventLogArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesWindowsEventLog] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesWindowsEventLog]{
		OutputState: i.ToDataCollectionRuleDataSourcesWindowsEventLogArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesWindowsEventLogOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesWindowsEventLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesWindowsEventLog)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesWindowsEventLogOutput) ToDataCollectionRuleDataSourcesWindowsEventLogOutput() DataCollectionRuleDataSourcesWindowsEventLogOutput {
	return o
}

func (o DataCollectionRuleDataSourcesWindowsEventLogOutput) ToDataCollectionRuleDataSourcesWindowsEventLogOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesWindowsEventLogOutput {
	return o
}

func (o DataCollectionRuleDataSourcesWindowsEventLogOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesWindowsEventLog] {
	return pulumix.Output[DataCollectionRuleDataSourcesWindowsEventLog]{
		OutputState: o.OutputState,
	}
}

// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDataSourcesWindowsEventLogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesWindowsEventLog) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to. Possible values include but not limited to `Microsoft-Event`,and `Microsoft-WindowsEvent`, `Microsoft-RomeDetectionEvent`, and `Microsoft-SecurityEvent`.
func (o DataCollectionRuleDataSourcesWindowsEventLogOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesWindowsEventLog) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// Specifies a list of Windows Event Log queries in XPath expression. Please see [this document](https://learn.microsoft.com/en-us/azure/azure-monitor/agents/data-collection-rule-azure-monitor-agent?tabs=cli#filter-events-using-xpath-queries) for more information.
func (o DataCollectionRuleDataSourcesWindowsEventLogOutput) XPathQueries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesWindowsEventLog) []string { return v.XPathQueries }).(pulumi.StringArrayOutput)
}

type DataCollectionRuleDataSourcesWindowsEventLogArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesWindowsEventLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesWindowsEventLog)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesWindowsEventLogArrayOutput) ToDataCollectionRuleDataSourcesWindowsEventLogArrayOutput() DataCollectionRuleDataSourcesWindowsEventLogArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesWindowsEventLogArrayOutput) ToDataCollectionRuleDataSourcesWindowsEventLogArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesWindowsEventLogArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesWindowsEventLogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesWindowsEventLog] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesWindowsEventLog]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesWindowsEventLogArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDataSourcesWindowsEventLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDataSourcesWindowsEventLog {
		return vs[0].([]DataCollectionRuleDataSourcesWindowsEventLog)[vs[1].(int)]
	}).(DataCollectionRuleDataSourcesWindowsEventLogOutput)
}

type DataCollectionRuleDataSourcesWindowsFirewallLog struct {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// DataCollectionRuleDataSourcesWindowsFirewallLogInput is an input type that accepts DataCollectionRuleDataSourcesWindowsFirewallLogArgs and DataCollectionRuleDataSourcesWindowsFirewallLogOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesWindowsFirewallLogInput` via:
//
//	DataCollectionRuleDataSourcesWindowsFirewallLogArgs{...}
type DataCollectionRuleDataSourcesWindowsFirewallLogInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesWindowsFirewallLogOutput() DataCollectionRuleDataSourcesWindowsFirewallLogOutput
	ToDataCollectionRuleDataSourcesWindowsFirewallLogOutputWithContext(context.Context) DataCollectionRuleDataSourcesWindowsFirewallLogOutput
}

type DataCollectionRuleDataSourcesWindowsFirewallLogArgs struct {
	// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (DataCollectionRuleDataSourcesWindowsFirewallLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesWindowsFirewallLog)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesWindowsFirewallLogArgs) ToDataCollectionRuleDataSourcesWindowsFirewallLogOutput() DataCollectionRuleDataSourcesWindowsFirewallLogOutput {
	return i.ToDataCollectionRuleDataSourcesWindowsFirewallLogOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesWindowsFirewallLogArgs) ToDataCollectionRuleDataSourcesWindowsFirewallLogOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesWindowsFirewallLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesWindowsFirewallLogOutput)
}

func (i DataCollectionRuleDataSourcesWindowsFirewallLogArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesWindowsFirewallLog] {
	return pulumix.Output[DataCollectionRuleDataSourcesWindowsFirewallLog]{
		OutputState: i.ToDataCollectionRuleDataSourcesWindowsFirewallLogOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDataSourcesWindowsFirewallLogArrayInput is an input type that accepts DataCollectionRuleDataSourcesWindowsFirewallLogArray and DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesWindowsFirewallLogArrayInput` via:
//
//	DataCollectionRuleDataSourcesWindowsFirewallLogArray{ DataCollectionRuleDataSourcesWindowsFirewallLogArgs{...} }
type DataCollectionRuleDataSourcesWindowsFirewallLogArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput() DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput
	ToDataCollectionRuleDataSourcesWindowsFirewallLogArrayOutputWithContext(context.Context) DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput
}

type DataCollectionRuleDataSourcesWindowsFirewallLogArray []DataCollectionRuleDataSourcesWindowsFirewallLogInput

func (DataCollectionRuleDataSourcesWindowsFirewallLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesWindowsFirewallLog)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesWindowsFirewallLogArray) ToDataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput() DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput {
	return i.ToDataCollectionRuleDataSourcesWindowsFirewallLogArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesWindowsFirewallLogArray) ToDataCollectionRuleDataSourcesWindowsFirewallLogArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput)
}

func (i DataCollectionRuleDataSourcesWindowsFirewallLogArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesWindowsFirewallLog] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesWindowsFirewallLog]{
		OutputState: i.ToDataCollectionRuleDataSourcesWindowsFirewallLogArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDataSourcesWindowsFirewallLogOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesWindowsFirewallLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSourcesWindowsFirewallLog)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesWindowsFirewallLogOutput) ToDataCollectionRuleDataSourcesWindowsFirewallLogOutput() DataCollectionRuleDataSourcesWindowsFirewallLogOutput {
	return o
}

func (o DataCollectionRuleDataSourcesWindowsFirewallLogOutput) ToDataCollectionRuleDataSourcesWindowsFirewallLogOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesWindowsFirewallLogOutput {
	return o
}

func (o DataCollectionRuleDataSourcesWindowsFirewallLogOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDataSourcesWindowsFirewallLog] {
	return pulumix.Output[DataCollectionRuleDataSourcesWindowsFirewallLog]{
		OutputState: o.OutputState,
	}
}

// The name which should be used for this data source. This name should be unique across all data sources regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDataSourcesWindowsFirewallLogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesWindowsFirewallLog) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o DataCollectionRuleDataSourcesWindowsFirewallLogOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSourcesWindowsFirewallLog) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDataSourcesWindowsFirewallLog)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput) ToDataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput() DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput) ToDataCollectionRuleDataSourcesWindowsFirewallLogArrayOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput {
	return o
}

func (o DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDataSourcesWindowsFirewallLog] {
	return pulumix.Output[[]DataCollectionRuleDataSourcesWindowsFirewallLog]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDataSourcesWindowsFirewallLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDataSourcesWindowsFirewallLog {
		return vs[0].([]DataCollectionRuleDataSourcesWindowsFirewallLog)[vs[1].(int)]
	}).(DataCollectionRuleDataSourcesWindowsFirewallLogOutput)
}

type DataCollectionRuleDestinations struct {
	// A `azureMonitorMetrics` block as defined above.
	AzureMonitorMetrics *DataCollectionRuleDestinationsAzureMonitorMetrics `pulumi:"azureMonitorMetrics"`
	// One or more `eventHub` blocks as defined below.
	EventHub *DataCollectionRuleDestinationsEventHub `pulumi:"eventHub"`
	// One or more `eventHub` blocks as defined below.
	EventHubDirect *DataCollectionRuleDestinationsEventHubDirect `pulumi:"eventHubDirect"`
	// One or more `logAnalytics` blocks as defined below.
	LogAnalytics []DataCollectionRuleDestinationsLogAnalytic `pulumi:"logAnalytics"`
	// One or more `monitorAccount` blocks as defined below.
	MonitorAccounts []DataCollectionRuleDestinationsMonitorAccount `pulumi:"monitorAccounts"`
	// One or more `storageBlobDirect` blocks as defined below.
	StorageBlobDirects []DataCollectionRuleDestinationsStorageBlobDirect `pulumi:"storageBlobDirects"`
	// One or more `storageBlob` blocks as defined below.
	StorageBlobs []DataCollectionRuleDestinationsStorageBlob `pulumi:"storageBlobs"`
	// One or more `storageTableDirect` blocks as defined below.
	//
	// > **NOTE** `eventHubDirect`, `storageBlobDirect`, and `storageTableDirect` are only available for rules of kind `AgentDirectToStore`.
	//
	// > **NOTE** At least one of `azureMonitorMetrics`, `eventHub`, `eventHubDirect`, `logAnalytics`, `monitorAccount`, `storageBlob`, `storageBlobDirect`,and `storageTableDirect` blocks must be specified.
	StorageTableDirects []DataCollectionRuleDestinationsStorageTableDirect `pulumi:"storageTableDirects"`
}

// DataCollectionRuleDestinationsInput is an input type that accepts DataCollectionRuleDestinationsArgs and DataCollectionRuleDestinationsOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsInput` via:
//
//	DataCollectionRuleDestinationsArgs{...}
type DataCollectionRuleDestinationsInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsOutput() DataCollectionRuleDestinationsOutput
	ToDataCollectionRuleDestinationsOutputWithContext(context.Context) DataCollectionRuleDestinationsOutput
}

type DataCollectionRuleDestinationsArgs struct {
	// A `azureMonitorMetrics` block as defined above.
	AzureMonitorMetrics DataCollectionRuleDestinationsAzureMonitorMetricsPtrInput `pulumi:"azureMonitorMetrics"`
	// One or more `eventHub` blocks as defined below.
	EventHub DataCollectionRuleDestinationsEventHubPtrInput `pulumi:"eventHub"`
	// One or more `eventHub` blocks as defined below.
	EventHubDirect DataCollectionRuleDestinationsEventHubDirectPtrInput `pulumi:"eventHubDirect"`
	// One or more `logAnalytics` blocks as defined below.
	LogAnalytics DataCollectionRuleDestinationsLogAnalyticArrayInput `pulumi:"logAnalytics"`
	// One or more `monitorAccount` blocks as defined below.
	MonitorAccounts DataCollectionRuleDestinationsMonitorAccountArrayInput `pulumi:"monitorAccounts"`
	// One or more `storageBlobDirect` blocks as defined below.
	StorageBlobDirects DataCollectionRuleDestinationsStorageBlobDirectArrayInput `pulumi:"storageBlobDirects"`
	// One or more `storageBlob` blocks as defined below.
	StorageBlobs DataCollectionRuleDestinationsStorageBlobArrayInput `pulumi:"storageBlobs"`
	// One or more `storageTableDirect` blocks as defined below.
	//
	// > **NOTE** `eventHubDirect`, `storageBlobDirect`, and `storageTableDirect` are only available for rules of kind `AgentDirectToStore`.
	//
	// > **NOTE** At least one of `azureMonitorMetrics`, `eventHub`, `eventHubDirect`, `logAnalytics`, `monitorAccount`, `storageBlob`, `storageBlobDirect`,and `storageTableDirect` blocks must be specified.
	StorageTableDirects DataCollectionRuleDestinationsStorageTableDirectArrayInput `pulumi:"storageTableDirects"`
}

func (DataCollectionRuleDestinationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinations)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsOutput() DataCollectionRuleDestinationsOutput {
	return i.ToDataCollectionRuleDestinationsOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsOutput)
}

func (i DataCollectionRuleDestinationsArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinations] {
	return pulumix.Output[DataCollectionRuleDestinations]{
		OutputState: i.ToDataCollectionRuleDestinationsOutputWithContext(ctx).OutputState,
	}
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return i.ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsOutput).ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx)
}

// DataCollectionRuleDestinationsPtrInput is an input type that accepts DataCollectionRuleDestinationsArgs, DataCollectionRuleDestinationsPtr and DataCollectionRuleDestinationsPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsPtrInput` via:
//
//	        DataCollectionRuleDestinationsArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleDestinationsPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput
	ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Context) DataCollectionRuleDestinationsPtrOutput
}

type dataCollectionRuleDestinationsPtrType DataCollectionRuleDestinationsArgs

func DataCollectionRuleDestinationsPtr(v *DataCollectionRuleDestinationsArgs) DataCollectionRuleDestinationsPtrInput {
	return (*dataCollectionRuleDestinationsPtrType)(v)
}

func (*dataCollectionRuleDestinationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDestinations)(nil)).Elem()
}

func (i *dataCollectionRuleDestinationsPtrType) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return i.ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleDestinationsPtrType) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsPtrOutput)
}

func (i *dataCollectionRuleDestinationsPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDestinations] {
	return pulumix.Output[*DataCollectionRuleDestinations]{
		OutputState: i.ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDestinationsOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinations)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsOutput() DataCollectionRuleDestinationsOutput {
	return o
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsOutput {
	return o
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return o.ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleDestinations) *DataCollectionRuleDestinations {
		return &v
	}).(DataCollectionRuleDestinationsPtrOutput)
}

func (o DataCollectionRuleDestinationsOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinations] {
	return pulumix.Output[DataCollectionRuleDestinations]{
		OutputState: o.OutputState,
	}
}

// A `azureMonitorMetrics` block as defined above.
func (o DataCollectionRuleDestinationsOutput) AzureMonitorMetrics() DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) *DataCollectionRuleDestinationsAzureMonitorMetrics {
		return v.AzureMonitorMetrics
	}).(DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput)
}

// One or more `eventHub` blocks as defined below.
func (o DataCollectionRuleDestinationsOutput) EventHub() DataCollectionRuleDestinationsEventHubPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) *DataCollectionRuleDestinationsEventHub { return v.EventHub }).(DataCollectionRuleDestinationsEventHubPtrOutput)
}

// One or more `eventHub` blocks as defined below.
func (o DataCollectionRuleDestinationsOutput) EventHubDirect() DataCollectionRuleDestinationsEventHubDirectPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) *DataCollectionRuleDestinationsEventHubDirect {
		return v.EventHubDirect
	}).(DataCollectionRuleDestinationsEventHubDirectPtrOutput)
}

// One or more `logAnalytics` blocks as defined below.
func (o DataCollectionRuleDestinationsOutput) LogAnalytics() DataCollectionRuleDestinationsLogAnalyticArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []DataCollectionRuleDestinationsLogAnalytic {
		return v.LogAnalytics
	}).(DataCollectionRuleDestinationsLogAnalyticArrayOutput)
}

// One or more `monitorAccount` blocks as defined below.
func (o DataCollectionRuleDestinationsOutput) MonitorAccounts() DataCollectionRuleDestinationsMonitorAccountArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []DataCollectionRuleDestinationsMonitorAccount {
		return v.MonitorAccounts
	}).(DataCollectionRuleDestinationsMonitorAccountArrayOutput)
}

// One or more `storageBlobDirect` blocks as defined below.
func (o DataCollectionRuleDestinationsOutput) StorageBlobDirects() DataCollectionRuleDestinationsStorageBlobDirectArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []DataCollectionRuleDestinationsStorageBlobDirect {
		return v.StorageBlobDirects
	}).(DataCollectionRuleDestinationsStorageBlobDirectArrayOutput)
}

// One or more `storageBlob` blocks as defined below.
func (o DataCollectionRuleDestinationsOutput) StorageBlobs() DataCollectionRuleDestinationsStorageBlobArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []DataCollectionRuleDestinationsStorageBlob {
		return v.StorageBlobs
	}).(DataCollectionRuleDestinationsStorageBlobArrayOutput)
}

// One or more `storageTableDirect` blocks as defined below.
//
// > **NOTE** `eventHubDirect`, `storageBlobDirect`, and `storageTableDirect` are only available for rules of kind `AgentDirectToStore`.
//
// > **NOTE** At least one of `azureMonitorMetrics`, `eventHub`, `eventHubDirect`, `logAnalytics`, `monitorAccount`, `storageBlob`, `storageBlobDirect`,and `storageTableDirect` blocks must be specified.
func (o DataCollectionRuleDestinationsOutput) StorageTableDirects() DataCollectionRuleDestinationsStorageTableDirectArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []DataCollectionRuleDestinationsStorageTableDirect {
		return v.StorageTableDirects
	}).(DataCollectionRuleDestinationsStorageTableDirectArrayOutput)
}

type DataCollectionRuleDestinationsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDestinations)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsPtrOutput) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return o
}

func (o DataCollectionRuleDestinationsPtrOutput) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return o
}

func (o DataCollectionRuleDestinationsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDestinations] {
	return pulumix.Output[*DataCollectionRuleDestinations]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDestinationsPtrOutput) Elem() DataCollectionRuleDestinationsOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) DataCollectionRuleDestinations {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleDestinations
		return ret
	}).(DataCollectionRuleDestinationsOutput)
}

// A `azureMonitorMetrics` block as defined above.
func (o DataCollectionRuleDestinationsPtrOutput) AzureMonitorMetrics() DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) *DataCollectionRuleDestinationsAzureMonitorMetrics {
		if v == nil {
			return nil
		}
		return v.AzureMonitorMetrics
	}).(DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput)
}

// One or more `eventHub` blocks as defined below.
func (o DataCollectionRuleDestinationsPtrOutput) EventHub() DataCollectionRuleDestinationsEventHubPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) *DataCollectionRuleDestinationsEventHub {
		if v == nil {
			return nil
		}
		return v.EventHub
	}).(DataCollectionRuleDestinationsEventHubPtrOutput)
}

// One or more `eventHub` blocks as defined below.
func (o DataCollectionRuleDestinationsPtrOutput) EventHubDirect() DataCollectionRuleDestinationsEventHubDirectPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) *DataCollectionRuleDestinationsEventHubDirect {
		if v == nil {
			return nil
		}
		return v.EventHubDirect
	}).(DataCollectionRuleDestinationsEventHubDirectPtrOutput)
}

// One or more `logAnalytics` blocks as defined below.
func (o DataCollectionRuleDestinationsPtrOutput) LogAnalytics() DataCollectionRuleDestinationsLogAnalyticArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []DataCollectionRuleDestinationsLogAnalytic {
		if v == nil {
			return nil
		}
		return v.LogAnalytics
	}).(DataCollectionRuleDestinationsLogAnalyticArrayOutput)
}

// One or more `monitorAccount` blocks as defined below.
func (o DataCollectionRuleDestinationsPtrOutput) MonitorAccounts() DataCollectionRuleDestinationsMonitorAccountArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []DataCollectionRuleDestinationsMonitorAccount {
		if v == nil {
			return nil
		}
		return v.MonitorAccounts
	}).(DataCollectionRuleDestinationsMonitorAccountArrayOutput)
}

// One or more `storageBlobDirect` blocks as defined below.
func (o DataCollectionRuleDestinationsPtrOutput) StorageBlobDirects() DataCollectionRuleDestinationsStorageBlobDirectArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []DataCollectionRuleDestinationsStorageBlobDirect {
		if v == nil {
			return nil
		}
		return v.StorageBlobDirects
	}).(DataCollectionRuleDestinationsStorageBlobDirectArrayOutput)
}

// One or more `storageBlob` blocks as defined below.
func (o DataCollectionRuleDestinationsPtrOutput) StorageBlobs() DataCollectionRuleDestinationsStorageBlobArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []DataCollectionRuleDestinationsStorageBlob {
		if v == nil {
			return nil
		}
		return v.StorageBlobs
	}).(DataCollectionRuleDestinationsStorageBlobArrayOutput)
}

// One or more `storageTableDirect` blocks as defined below.
//
// > **NOTE** `eventHubDirect`, `storageBlobDirect`, and `storageTableDirect` are only available for rules of kind `AgentDirectToStore`.
//
// > **NOTE** At least one of `azureMonitorMetrics`, `eventHub`, `eventHubDirect`, `logAnalytics`, `monitorAccount`, `storageBlob`, `storageBlobDirect`,and `storageTableDirect` blocks must be specified.
func (o DataCollectionRuleDestinationsPtrOutput) StorageTableDirects() DataCollectionRuleDestinationsStorageTableDirectArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []DataCollectionRuleDestinationsStorageTableDirect {
		if v == nil {
			return nil
		}
		return v.StorageTableDirects
	}).(DataCollectionRuleDestinationsStorageTableDirectArrayOutput)
}

type DataCollectionRuleDestinationsAzureMonitorMetrics struct {
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
}

// DataCollectionRuleDestinationsAzureMonitorMetricsInput is an input type that accepts DataCollectionRuleDestinationsAzureMonitorMetricsArgs and DataCollectionRuleDestinationsAzureMonitorMetricsOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsAzureMonitorMetricsInput` via:
//
//	DataCollectionRuleDestinationsAzureMonitorMetricsArgs{...}
type DataCollectionRuleDestinationsAzureMonitorMetricsInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsAzureMonitorMetricsOutput() DataCollectionRuleDestinationsAzureMonitorMetricsOutput
	ToDataCollectionRuleDestinationsAzureMonitorMetricsOutputWithContext(context.Context) DataCollectionRuleDestinationsAzureMonitorMetricsOutput
}

type DataCollectionRuleDestinationsAzureMonitorMetricsArgs struct {
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DataCollectionRuleDestinationsAzureMonitorMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsAzureMonitorMetrics)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsAzureMonitorMetricsArgs) ToDataCollectionRuleDestinationsAzureMonitorMetricsOutput() DataCollectionRuleDestinationsAzureMonitorMetricsOutput {
	return i.ToDataCollectionRuleDestinationsAzureMonitorMetricsOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsAzureMonitorMetricsArgs) ToDataCollectionRuleDestinationsAzureMonitorMetricsOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsAzureMonitorMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsAzureMonitorMetricsOutput)
}

func (i DataCollectionRuleDestinationsAzureMonitorMetricsArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsAzureMonitorMetrics] {
	return pulumix.Output[DataCollectionRuleDestinationsAzureMonitorMetrics]{
		OutputState: i.ToDataCollectionRuleDestinationsAzureMonitorMetricsOutputWithContext(ctx).OutputState,
	}
}

func (i DataCollectionRuleDestinationsAzureMonitorMetricsArgs) ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput() DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput {
	return i.ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsAzureMonitorMetricsArgs) ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsAzureMonitorMetricsOutput).ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutputWithContext(ctx)
}

// DataCollectionRuleDestinationsAzureMonitorMetricsPtrInput is an input type that accepts DataCollectionRuleDestinationsAzureMonitorMetricsArgs, DataCollectionRuleDestinationsAzureMonitorMetricsPtr and DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsAzureMonitorMetricsPtrInput` via:
//
//	        DataCollectionRuleDestinationsAzureMonitorMetricsArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleDestinationsAzureMonitorMetricsPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput() DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput
	ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutputWithContext(context.Context) DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput
}

type dataCollectionRuleDestinationsAzureMonitorMetricsPtrType DataCollectionRuleDestinationsAzureMonitorMetricsArgs

func DataCollectionRuleDestinationsAzureMonitorMetricsPtr(v *DataCollectionRuleDestinationsAzureMonitorMetricsArgs) DataCollectionRuleDestinationsAzureMonitorMetricsPtrInput {
	return (*dataCollectionRuleDestinationsAzureMonitorMetricsPtrType)(v)
}

func (*dataCollectionRuleDestinationsAzureMonitorMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDestinationsAzureMonitorMetrics)(nil)).Elem()
}

func (i *dataCollectionRuleDestinationsAzureMonitorMetricsPtrType) ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput() DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput {
	return i.ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleDestinationsAzureMonitorMetricsPtrType) ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput)
}

func (i *dataCollectionRuleDestinationsAzureMonitorMetricsPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDestinationsAzureMonitorMetrics] {
	return pulumix.Output[*DataCollectionRuleDestinationsAzureMonitorMetrics]{
		OutputState: i.ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDestinationsAzureMonitorMetricsOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsAzureMonitorMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsAzureMonitorMetrics)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsAzureMonitorMetricsOutput) ToDataCollectionRuleDestinationsAzureMonitorMetricsOutput() DataCollectionRuleDestinationsAzureMonitorMetricsOutput {
	return o
}

func (o DataCollectionRuleDestinationsAzureMonitorMetricsOutput) ToDataCollectionRuleDestinationsAzureMonitorMetricsOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsAzureMonitorMetricsOutput {
	return o
}

func (o DataCollectionRuleDestinationsAzureMonitorMetricsOutput) ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput() DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput {
	return o.ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleDestinationsAzureMonitorMetricsOutput) ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleDestinationsAzureMonitorMetrics) *DataCollectionRuleDestinationsAzureMonitorMetrics {
		return &v
	}).(DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput)
}

func (o DataCollectionRuleDestinationsAzureMonitorMetricsOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsAzureMonitorMetrics] {
	return pulumix.Output[DataCollectionRuleDestinationsAzureMonitorMetrics]{
		OutputState: o.OutputState,
	}
}

// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDestinationsAzureMonitorMetricsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsAzureMonitorMetrics) string { return v.Name }).(pulumi.StringOutput)
}

type DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDestinationsAzureMonitorMetrics)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput) ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput() DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput {
	return o
}

func (o DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput) ToDataCollectionRuleDestinationsAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput {
	return o
}

func (o DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDestinationsAzureMonitorMetrics] {
	return pulumix.Output[*DataCollectionRuleDestinationsAzureMonitorMetrics]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput) Elem() DataCollectionRuleDestinationsAzureMonitorMetricsOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinationsAzureMonitorMetrics) DataCollectionRuleDestinationsAzureMonitorMetrics {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleDestinationsAzureMonitorMetrics
		return ret
	}).(DataCollectionRuleDestinationsAzureMonitorMetricsOutput)
}

// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinationsAzureMonitorMetrics) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type DataCollectionRuleDestinationsEventHub struct {
	// The resource ID of the Event Hub.
	EventHubId string `pulumi:"eventHubId"`
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
}

// DataCollectionRuleDestinationsEventHubInput is an input type that accepts DataCollectionRuleDestinationsEventHubArgs and DataCollectionRuleDestinationsEventHubOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsEventHubInput` via:
//
//	DataCollectionRuleDestinationsEventHubArgs{...}
type DataCollectionRuleDestinationsEventHubInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsEventHubOutput() DataCollectionRuleDestinationsEventHubOutput
	ToDataCollectionRuleDestinationsEventHubOutputWithContext(context.Context) DataCollectionRuleDestinationsEventHubOutput
}

type DataCollectionRuleDestinationsEventHubArgs struct {
	// The resource ID of the Event Hub.
	EventHubId pulumi.StringInput `pulumi:"eventHubId"`
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DataCollectionRuleDestinationsEventHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsEventHub)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsEventHubArgs) ToDataCollectionRuleDestinationsEventHubOutput() DataCollectionRuleDestinationsEventHubOutput {
	return i.ToDataCollectionRuleDestinationsEventHubOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsEventHubArgs) ToDataCollectionRuleDestinationsEventHubOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsEventHubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsEventHubOutput)
}

func (i DataCollectionRuleDestinationsEventHubArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsEventHub] {
	return pulumix.Output[DataCollectionRuleDestinationsEventHub]{
		OutputState: i.ToDataCollectionRuleDestinationsEventHubOutputWithContext(ctx).OutputState,
	}
}

func (i DataCollectionRuleDestinationsEventHubArgs) ToDataCollectionRuleDestinationsEventHubPtrOutput() DataCollectionRuleDestinationsEventHubPtrOutput {
	return i.ToDataCollectionRuleDestinationsEventHubPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsEventHubArgs) ToDataCollectionRuleDestinationsEventHubPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsEventHubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsEventHubOutput).ToDataCollectionRuleDestinationsEventHubPtrOutputWithContext(ctx)
}

// DataCollectionRuleDestinationsEventHubPtrInput is an input type that accepts DataCollectionRuleDestinationsEventHubArgs, DataCollectionRuleDestinationsEventHubPtr and DataCollectionRuleDestinationsEventHubPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsEventHubPtrInput` via:
//
//	        DataCollectionRuleDestinationsEventHubArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleDestinationsEventHubPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsEventHubPtrOutput() DataCollectionRuleDestinationsEventHubPtrOutput
	ToDataCollectionRuleDestinationsEventHubPtrOutputWithContext(context.Context) DataCollectionRuleDestinationsEventHubPtrOutput
}

type dataCollectionRuleDestinationsEventHubPtrType DataCollectionRuleDestinationsEventHubArgs

func DataCollectionRuleDestinationsEventHubPtr(v *DataCollectionRuleDestinationsEventHubArgs) DataCollectionRuleDestinationsEventHubPtrInput {
	return (*dataCollectionRuleDestinationsEventHubPtrType)(v)
}

func (*dataCollectionRuleDestinationsEventHubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDestinationsEventHub)(nil)).Elem()
}

func (i *dataCollectionRuleDestinationsEventHubPtrType) ToDataCollectionRuleDestinationsEventHubPtrOutput() DataCollectionRuleDestinationsEventHubPtrOutput {
	return i.ToDataCollectionRuleDestinationsEventHubPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleDestinationsEventHubPtrType) ToDataCollectionRuleDestinationsEventHubPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsEventHubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsEventHubPtrOutput)
}

func (i *dataCollectionRuleDestinationsEventHubPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDestinationsEventHub] {
	return pulumix.Output[*DataCollectionRuleDestinationsEventHub]{
		OutputState: i.ToDataCollectionRuleDestinationsEventHubPtrOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDestinationsEventHubOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsEventHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsEventHub)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsEventHubOutput) ToDataCollectionRuleDestinationsEventHubOutput() DataCollectionRuleDestinationsEventHubOutput {
	return o
}

func (o DataCollectionRuleDestinationsEventHubOutput) ToDataCollectionRuleDestinationsEventHubOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsEventHubOutput {
	return o
}

func (o DataCollectionRuleDestinationsEventHubOutput) ToDataCollectionRuleDestinationsEventHubPtrOutput() DataCollectionRuleDestinationsEventHubPtrOutput {
	return o.ToDataCollectionRuleDestinationsEventHubPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleDestinationsEventHubOutput) ToDataCollectionRuleDestinationsEventHubPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsEventHubPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleDestinationsEventHub) *DataCollectionRuleDestinationsEventHub {
		return &v
	}).(DataCollectionRuleDestinationsEventHubPtrOutput)
}

func (o DataCollectionRuleDestinationsEventHubOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsEventHub] {
	return pulumix.Output[DataCollectionRuleDestinationsEventHub]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the Event Hub.
func (o DataCollectionRuleDestinationsEventHubOutput) EventHubId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsEventHub) string { return v.EventHubId }).(pulumi.StringOutput)
}

// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDestinationsEventHubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsEventHub) string { return v.Name }).(pulumi.StringOutput)
}

type DataCollectionRuleDestinationsEventHubPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsEventHubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDestinationsEventHub)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsEventHubPtrOutput) ToDataCollectionRuleDestinationsEventHubPtrOutput() DataCollectionRuleDestinationsEventHubPtrOutput {
	return o
}

func (o DataCollectionRuleDestinationsEventHubPtrOutput) ToDataCollectionRuleDestinationsEventHubPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsEventHubPtrOutput {
	return o
}

func (o DataCollectionRuleDestinationsEventHubPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDestinationsEventHub] {
	return pulumix.Output[*DataCollectionRuleDestinationsEventHub]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDestinationsEventHubPtrOutput) Elem() DataCollectionRuleDestinationsEventHubOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinationsEventHub) DataCollectionRuleDestinationsEventHub {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleDestinationsEventHub
		return ret
	}).(DataCollectionRuleDestinationsEventHubOutput)
}

// The resource ID of the Event Hub.
func (o DataCollectionRuleDestinationsEventHubPtrOutput) EventHubId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinationsEventHub) *string {
		if v == nil {
			return nil
		}
		return &v.EventHubId
	}).(pulumi.StringPtrOutput)
}

// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDestinationsEventHubPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinationsEventHub) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type DataCollectionRuleDestinationsEventHubDirect struct {
	// The resource ID of the Event Hub.
	EventHubId string `pulumi:"eventHubId"`
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
}

// DataCollectionRuleDestinationsEventHubDirectInput is an input type that accepts DataCollectionRuleDestinationsEventHubDirectArgs and DataCollectionRuleDestinationsEventHubDirectOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsEventHubDirectInput` via:
//
//	DataCollectionRuleDestinationsEventHubDirectArgs{...}
type DataCollectionRuleDestinationsEventHubDirectInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsEventHubDirectOutput() DataCollectionRuleDestinationsEventHubDirectOutput
	ToDataCollectionRuleDestinationsEventHubDirectOutputWithContext(context.Context) DataCollectionRuleDestinationsEventHubDirectOutput
}

type DataCollectionRuleDestinationsEventHubDirectArgs struct {
	// The resource ID of the Event Hub.
	EventHubId pulumi.StringInput `pulumi:"eventHubId"`
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DataCollectionRuleDestinationsEventHubDirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsEventHubDirect)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsEventHubDirectArgs) ToDataCollectionRuleDestinationsEventHubDirectOutput() DataCollectionRuleDestinationsEventHubDirectOutput {
	return i.ToDataCollectionRuleDestinationsEventHubDirectOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsEventHubDirectArgs) ToDataCollectionRuleDestinationsEventHubDirectOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsEventHubDirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsEventHubDirectOutput)
}

func (i DataCollectionRuleDestinationsEventHubDirectArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsEventHubDirect] {
	return pulumix.Output[DataCollectionRuleDestinationsEventHubDirect]{
		OutputState: i.ToDataCollectionRuleDestinationsEventHubDirectOutputWithContext(ctx).OutputState,
	}
}

func (i DataCollectionRuleDestinationsEventHubDirectArgs) ToDataCollectionRuleDestinationsEventHubDirectPtrOutput() DataCollectionRuleDestinationsEventHubDirectPtrOutput {
	return i.ToDataCollectionRuleDestinationsEventHubDirectPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsEventHubDirectArgs) ToDataCollectionRuleDestinationsEventHubDirectPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsEventHubDirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsEventHubDirectOutput).ToDataCollectionRuleDestinationsEventHubDirectPtrOutputWithContext(ctx)
}

// DataCollectionRuleDestinationsEventHubDirectPtrInput is an input type that accepts DataCollectionRuleDestinationsEventHubDirectArgs, DataCollectionRuleDestinationsEventHubDirectPtr and DataCollectionRuleDestinationsEventHubDirectPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsEventHubDirectPtrInput` via:
//
//	        DataCollectionRuleDestinationsEventHubDirectArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleDestinationsEventHubDirectPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsEventHubDirectPtrOutput() DataCollectionRuleDestinationsEventHubDirectPtrOutput
	ToDataCollectionRuleDestinationsEventHubDirectPtrOutputWithContext(context.Context) DataCollectionRuleDestinationsEventHubDirectPtrOutput
}

type dataCollectionRuleDestinationsEventHubDirectPtrType DataCollectionRuleDestinationsEventHubDirectArgs

func DataCollectionRuleDestinationsEventHubDirectPtr(v *DataCollectionRuleDestinationsEventHubDirectArgs) DataCollectionRuleDestinationsEventHubDirectPtrInput {
	return (*dataCollectionRuleDestinationsEventHubDirectPtrType)(v)
}

func (*dataCollectionRuleDestinationsEventHubDirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDestinationsEventHubDirect)(nil)).Elem()
}

func (i *dataCollectionRuleDestinationsEventHubDirectPtrType) ToDataCollectionRuleDestinationsEventHubDirectPtrOutput() DataCollectionRuleDestinationsEventHubDirectPtrOutput {
	return i.ToDataCollectionRuleDestinationsEventHubDirectPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleDestinationsEventHubDirectPtrType) ToDataCollectionRuleDestinationsEventHubDirectPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsEventHubDirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsEventHubDirectPtrOutput)
}

func (i *dataCollectionRuleDestinationsEventHubDirectPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDestinationsEventHubDirect] {
	return pulumix.Output[*DataCollectionRuleDestinationsEventHubDirect]{
		OutputState: i.ToDataCollectionRuleDestinationsEventHubDirectPtrOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDestinationsEventHubDirectOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsEventHubDirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsEventHubDirect)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsEventHubDirectOutput) ToDataCollectionRuleDestinationsEventHubDirectOutput() DataCollectionRuleDestinationsEventHubDirectOutput {
	return o
}

func (o DataCollectionRuleDestinationsEventHubDirectOutput) ToDataCollectionRuleDestinationsEventHubDirectOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsEventHubDirectOutput {
	return o
}

func (o DataCollectionRuleDestinationsEventHubDirectOutput) ToDataCollectionRuleDestinationsEventHubDirectPtrOutput() DataCollectionRuleDestinationsEventHubDirectPtrOutput {
	return o.ToDataCollectionRuleDestinationsEventHubDirectPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleDestinationsEventHubDirectOutput) ToDataCollectionRuleDestinationsEventHubDirectPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsEventHubDirectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleDestinationsEventHubDirect) *DataCollectionRuleDestinationsEventHubDirect {
		return &v
	}).(DataCollectionRuleDestinationsEventHubDirectPtrOutput)
}

func (o DataCollectionRuleDestinationsEventHubDirectOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsEventHubDirect] {
	return pulumix.Output[DataCollectionRuleDestinationsEventHubDirect]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the Event Hub.
func (o DataCollectionRuleDestinationsEventHubDirectOutput) EventHubId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsEventHubDirect) string { return v.EventHubId }).(pulumi.StringOutput)
}

// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDestinationsEventHubDirectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsEventHubDirect) string { return v.Name }).(pulumi.StringOutput)
}

type DataCollectionRuleDestinationsEventHubDirectPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsEventHubDirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDestinationsEventHubDirect)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsEventHubDirectPtrOutput) ToDataCollectionRuleDestinationsEventHubDirectPtrOutput() DataCollectionRuleDestinationsEventHubDirectPtrOutput {
	return o
}

func (o DataCollectionRuleDestinationsEventHubDirectPtrOutput) ToDataCollectionRuleDestinationsEventHubDirectPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsEventHubDirectPtrOutput {
	return o
}

func (o DataCollectionRuleDestinationsEventHubDirectPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleDestinationsEventHubDirect] {
	return pulumix.Output[*DataCollectionRuleDestinationsEventHubDirect]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDestinationsEventHubDirectPtrOutput) Elem() DataCollectionRuleDestinationsEventHubDirectOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinationsEventHubDirect) DataCollectionRuleDestinationsEventHubDirect {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleDestinationsEventHubDirect
		return ret
	}).(DataCollectionRuleDestinationsEventHubDirectOutput)
}

// The resource ID of the Event Hub.
func (o DataCollectionRuleDestinationsEventHubDirectPtrOutput) EventHubId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinationsEventHubDirect) *string {
		if v == nil {
			return nil
		}
		return &v.EventHubId
	}).(pulumi.StringPtrOutput)
}

// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDestinationsEventHubDirectPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinationsEventHubDirect) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type DataCollectionRuleDestinationsLogAnalytic struct {
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
	// The ID of a Log Analytic Workspace resource.
	WorkspaceResourceId string `pulumi:"workspaceResourceId"`
}

// DataCollectionRuleDestinationsLogAnalyticInput is an input type that accepts DataCollectionRuleDestinationsLogAnalyticArgs and DataCollectionRuleDestinationsLogAnalyticOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsLogAnalyticInput` via:
//
//	DataCollectionRuleDestinationsLogAnalyticArgs{...}
type DataCollectionRuleDestinationsLogAnalyticInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsLogAnalyticOutput() DataCollectionRuleDestinationsLogAnalyticOutput
	ToDataCollectionRuleDestinationsLogAnalyticOutputWithContext(context.Context) DataCollectionRuleDestinationsLogAnalyticOutput
}

type DataCollectionRuleDestinationsLogAnalyticArgs struct {
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of a Log Analytic Workspace resource.
	WorkspaceResourceId pulumi.StringInput `pulumi:"workspaceResourceId"`
}

func (DataCollectionRuleDestinationsLogAnalyticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsLogAnalytic)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsLogAnalyticArgs) ToDataCollectionRuleDestinationsLogAnalyticOutput() DataCollectionRuleDestinationsLogAnalyticOutput {
	return i.ToDataCollectionRuleDestinationsLogAnalyticOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsLogAnalyticArgs) ToDataCollectionRuleDestinationsLogAnalyticOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsLogAnalyticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsLogAnalyticOutput)
}

func (i DataCollectionRuleDestinationsLogAnalyticArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsLogAnalytic] {
	return pulumix.Output[DataCollectionRuleDestinationsLogAnalytic]{
		OutputState: i.ToDataCollectionRuleDestinationsLogAnalyticOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDestinationsLogAnalyticArrayInput is an input type that accepts DataCollectionRuleDestinationsLogAnalyticArray and DataCollectionRuleDestinationsLogAnalyticArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsLogAnalyticArrayInput` via:
//
//	DataCollectionRuleDestinationsLogAnalyticArray{ DataCollectionRuleDestinationsLogAnalyticArgs{...} }
type DataCollectionRuleDestinationsLogAnalyticArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsLogAnalyticArrayOutput() DataCollectionRuleDestinationsLogAnalyticArrayOutput
	ToDataCollectionRuleDestinationsLogAnalyticArrayOutputWithContext(context.Context) DataCollectionRuleDestinationsLogAnalyticArrayOutput
}

type DataCollectionRuleDestinationsLogAnalyticArray []DataCollectionRuleDestinationsLogAnalyticInput

func (DataCollectionRuleDestinationsLogAnalyticArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDestinationsLogAnalytic)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsLogAnalyticArray) ToDataCollectionRuleDestinationsLogAnalyticArrayOutput() DataCollectionRuleDestinationsLogAnalyticArrayOutput {
	return i.ToDataCollectionRuleDestinationsLogAnalyticArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsLogAnalyticArray) ToDataCollectionRuleDestinationsLogAnalyticArrayOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsLogAnalyticArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsLogAnalyticArrayOutput)
}

func (i DataCollectionRuleDestinationsLogAnalyticArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDestinationsLogAnalytic] {
	return pulumix.Output[[]DataCollectionRuleDestinationsLogAnalytic]{
		OutputState: i.ToDataCollectionRuleDestinationsLogAnalyticArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDestinationsLogAnalyticOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsLogAnalyticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsLogAnalytic)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsLogAnalyticOutput) ToDataCollectionRuleDestinationsLogAnalyticOutput() DataCollectionRuleDestinationsLogAnalyticOutput {
	return o
}

func (o DataCollectionRuleDestinationsLogAnalyticOutput) ToDataCollectionRuleDestinationsLogAnalyticOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsLogAnalyticOutput {
	return o
}

func (o DataCollectionRuleDestinationsLogAnalyticOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsLogAnalytic] {
	return pulumix.Output[DataCollectionRuleDestinationsLogAnalytic]{
		OutputState: o.OutputState,
	}
}

// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDestinationsLogAnalyticOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsLogAnalytic) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of a Log Analytic Workspace resource.
func (o DataCollectionRuleDestinationsLogAnalyticOutput) WorkspaceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsLogAnalytic) string { return v.WorkspaceResourceId }).(pulumi.StringOutput)
}

type DataCollectionRuleDestinationsLogAnalyticArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsLogAnalyticArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDestinationsLogAnalytic)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsLogAnalyticArrayOutput) ToDataCollectionRuleDestinationsLogAnalyticArrayOutput() DataCollectionRuleDestinationsLogAnalyticArrayOutput {
	return o
}

func (o DataCollectionRuleDestinationsLogAnalyticArrayOutput) ToDataCollectionRuleDestinationsLogAnalyticArrayOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsLogAnalyticArrayOutput {
	return o
}

func (o DataCollectionRuleDestinationsLogAnalyticArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDestinationsLogAnalytic] {
	return pulumix.Output[[]DataCollectionRuleDestinationsLogAnalytic]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDestinationsLogAnalyticArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDestinationsLogAnalyticOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDestinationsLogAnalytic {
		return vs[0].([]DataCollectionRuleDestinationsLogAnalytic)[vs[1].(int)]
	}).(DataCollectionRuleDestinationsLogAnalyticOutput)
}

type DataCollectionRuleDestinationsMonitorAccount struct {
	// The resource ID of the Monitor Account.
	MonitorAccountId string `pulumi:"monitorAccountId"`
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
}

// DataCollectionRuleDestinationsMonitorAccountInput is an input type that accepts DataCollectionRuleDestinationsMonitorAccountArgs and DataCollectionRuleDestinationsMonitorAccountOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsMonitorAccountInput` via:
//
//	DataCollectionRuleDestinationsMonitorAccountArgs{...}
type DataCollectionRuleDestinationsMonitorAccountInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsMonitorAccountOutput() DataCollectionRuleDestinationsMonitorAccountOutput
	ToDataCollectionRuleDestinationsMonitorAccountOutputWithContext(context.Context) DataCollectionRuleDestinationsMonitorAccountOutput
}

type DataCollectionRuleDestinationsMonitorAccountArgs struct {
	// The resource ID of the Monitor Account.
	MonitorAccountId pulumi.StringInput `pulumi:"monitorAccountId"`
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (DataCollectionRuleDestinationsMonitorAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsMonitorAccount)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsMonitorAccountArgs) ToDataCollectionRuleDestinationsMonitorAccountOutput() DataCollectionRuleDestinationsMonitorAccountOutput {
	return i.ToDataCollectionRuleDestinationsMonitorAccountOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsMonitorAccountArgs) ToDataCollectionRuleDestinationsMonitorAccountOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsMonitorAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsMonitorAccountOutput)
}

func (i DataCollectionRuleDestinationsMonitorAccountArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsMonitorAccount] {
	return pulumix.Output[DataCollectionRuleDestinationsMonitorAccount]{
		OutputState: i.ToDataCollectionRuleDestinationsMonitorAccountOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDestinationsMonitorAccountArrayInput is an input type that accepts DataCollectionRuleDestinationsMonitorAccountArray and DataCollectionRuleDestinationsMonitorAccountArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsMonitorAccountArrayInput` via:
//
//	DataCollectionRuleDestinationsMonitorAccountArray{ DataCollectionRuleDestinationsMonitorAccountArgs{...} }
type DataCollectionRuleDestinationsMonitorAccountArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsMonitorAccountArrayOutput() DataCollectionRuleDestinationsMonitorAccountArrayOutput
	ToDataCollectionRuleDestinationsMonitorAccountArrayOutputWithContext(context.Context) DataCollectionRuleDestinationsMonitorAccountArrayOutput
}

type DataCollectionRuleDestinationsMonitorAccountArray []DataCollectionRuleDestinationsMonitorAccountInput

func (DataCollectionRuleDestinationsMonitorAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDestinationsMonitorAccount)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsMonitorAccountArray) ToDataCollectionRuleDestinationsMonitorAccountArrayOutput() DataCollectionRuleDestinationsMonitorAccountArrayOutput {
	return i.ToDataCollectionRuleDestinationsMonitorAccountArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsMonitorAccountArray) ToDataCollectionRuleDestinationsMonitorAccountArrayOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsMonitorAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsMonitorAccountArrayOutput)
}

func (i DataCollectionRuleDestinationsMonitorAccountArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDestinationsMonitorAccount] {
	return pulumix.Output[[]DataCollectionRuleDestinationsMonitorAccount]{
		OutputState: i.ToDataCollectionRuleDestinationsMonitorAccountArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDestinationsMonitorAccountOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsMonitorAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsMonitorAccount)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsMonitorAccountOutput) ToDataCollectionRuleDestinationsMonitorAccountOutput() DataCollectionRuleDestinationsMonitorAccountOutput {
	return o
}

func (o DataCollectionRuleDestinationsMonitorAccountOutput) ToDataCollectionRuleDestinationsMonitorAccountOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsMonitorAccountOutput {
	return o
}

func (o DataCollectionRuleDestinationsMonitorAccountOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsMonitorAccount] {
	return pulumix.Output[DataCollectionRuleDestinationsMonitorAccount]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the Monitor Account.
func (o DataCollectionRuleDestinationsMonitorAccountOutput) MonitorAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsMonitorAccount) string { return v.MonitorAccountId }).(pulumi.StringOutput)
}

// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDestinationsMonitorAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsMonitorAccount) string { return v.Name }).(pulumi.StringOutput)
}

type DataCollectionRuleDestinationsMonitorAccountArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsMonitorAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDestinationsMonitorAccount)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsMonitorAccountArrayOutput) ToDataCollectionRuleDestinationsMonitorAccountArrayOutput() DataCollectionRuleDestinationsMonitorAccountArrayOutput {
	return o
}

func (o DataCollectionRuleDestinationsMonitorAccountArrayOutput) ToDataCollectionRuleDestinationsMonitorAccountArrayOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsMonitorAccountArrayOutput {
	return o
}

func (o DataCollectionRuleDestinationsMonitorAccountArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDestinationsMonitorAccount] {
	return pulumix.Output[[]DataCollectionRuleDestinationsMonitorAccount]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDestinationsMonitorAccountArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDestinationsMonitorAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDestinationsMonitorAccount {
		return vs[0].([]DataCollectionRuleDestinationsMonitorAccount)[vs[1].(int)]
	}).(DataCollectionRuleDestinationsMonitorAccountOutput)
}

type DataCollectionRuleDestinationsStorageBlob struct {
	// The Storage Container name.
	ContainerName string `pulumi:"containerName"`
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
	// The resource ID of the Storage Account.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// DataCollectionRuleDestinationsStorageBlobInput is an input type that accepts DataCollectionRuleDestinationsStorageBlobArgs and DataCollectionRuleDestinationsStorageBlobOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsStorageBlobInput` via:
//
//	DataCollectionRuleDestinationsStorageBlobArgs{...}
type DataCollectionRuleDestinationsStorageBlobInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsStorageBlobOutput() DataCollectionRuleDestinationsStorageBlobOutput
	ToDataCollectionRuleDestinationsStorageBlobOutputWithContext(context.Context) DataCollectionRuleDestinationsStorageBlobOutput
}

type DataCollectionRuleDestinationsStorageBlobArgs struct {
	// The Storage Container name.
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The resource ID of the Storage Account.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (DataCollectionRuleDestinationsStorageBlobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsStorageBlob)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsStorageBlobArgs) ToDataCollectionRuleDestinationsStorageBlobOutput() DataCollectionRuleDestinationsStorageBlobOutput {
	return i.ToDataCollectionRuleDestinationsStorageBlobOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsStorageBlobArgs) ToDataCollectionRuleDestinationsStorageBlobOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsStorageBlobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsStorageBlobOutput)
}

func (i DataCollectionRuleDestinationsStorageBlobArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsStorageBlob] {
	return pulumix.Output[DataCollectionRuleDestinationsStorageBlob]{
		OutputState: i.ToDataCollectionRuleDestinationsStorageBlobOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDestinationsStorageBlobArrayInput is an input type that accepts DataCollectionRuleDestinationsStorageBlobArray and DataCollectionRuleDestinationsStorageBlobArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsStorageBlobArrayInput` via:
//
//	DataCollectionRuleDestinationsStorageBlobArray{ DataCollectionRuleDestinationsStorageBlobArgs{...} }
type DataCollectionRuleDestinationsStorageBlobArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsStorageBlobArrayOutput() DataCollectionRuleDestinationsStorageBlobArrayOutput
	ToDataCollectionRuleDestinationsStorageBlobArrayOutputWithContext(context.Context) DataCollectionRuleDestinationsStorageBlobArrayOutput
}

type DataCollectionRuleDestinationsStorageBlobArray []DataCollectionRuleDestinationsStorageBlobInput

func (DataCollectionRuleDestinationsStorageBlobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDestinationsStorageBlob)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsStorageBlobArray) ToDataCollectionRuleDestinationsStorageBlobArrayOutput() DataCollectionRuleDestinationsStorageBlobArrayOutput {
	return i.ToDataCollectionRuleDestinationsStorageBlobArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsStorageBlobArray) ToDataCollectionRuleDestinationsStorageBlobArrayOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsStorageBlobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsStorageBlobArrayOutput)
}

func (i DataCollectionRuleDestinationsStorageBlobArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDestinationsStorageBlob] {
	return pulumix.Output[[]DataCollectionRuleDestinationsStorageBlob]{
		OutputState: i.ToDataCollectionRuleDestinationsStorageBlobArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDestinationsStorageBlobOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsStorageBlobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsStorageBlob)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsStorageBlobOutput) ToDataCollectionRuleDestinationsStorageBlobOutput() DataCollectionRuleDestinationsStorageBlobOutput {
	return o
}

func (o DataCollectionRuleDestinationsStorageBlobOutput) ToDataCollectionRuleDestinationsStorageBlobOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsStorageBlobOutput {
	return o
}

func (o DataCollectionRuleDestinationsStorageBlobOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsStorageBlob] {
	return pulumix.Output[DataCollectionRuleDestinationsStorageBlob]{
		OutputState: o.OutputState,
	}
}

// The Storage Container name.
func (o DataCollectionRuleDestinationsStorageBlobOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsStorageBlob) string { return v.ContainerName }).(pulumi.StringOutput)
}

// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDestinationsStorageBlobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsStorageBlob) string { return v.Name }).(pulumi.StringOutput)
}

// The resource ID of the Storage Account.
func (o DataCollectionRuleDestinationsStorageBlobOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsStorageBlob) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type DataCollectionRuleDestinationsStorageBlobArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsStorageBlobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDestinationsStorageBlob)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsStorageBlobArrayOutput) ToDataCollectionRuleDestinationsStorageBlobArrayOutput() DataCollectionRuleDestinationsStorageBlobArrayOutput {
	return o
}

func (o DataCollectionRuleDestinationsStorageBlobArrayOutput) ToDataCollectionRuleDestinationsStorageBlobArrayOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsStorageBlobArrayOutput {
	return o
}

func (o DataCollectionRuleDestinationsStorageBlobArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDestinationsStorageBlob] {
	return pulumix.Output[[]DataCollectionRuleDestinationsStorageBlob]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDestinationsStorageBlobArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDestinationsStorageBlobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDestinationsStorageBlob {
		return vs[0].([]DataCollectionRuleDestinationsStorageBlob)[vs[1].(int)]
	}).(DataCollectionRuleDestinationsStorageBlobOutput)
}

type DataCollectionRuleDestinationsStorageBlobDirect struct {
	// The Storage Container name.
	ContainerName string `pulumi:"containerName"`
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
	// The resource ID of the Storage Account.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// DataCollectionRuleDestinationsStorageBlobDirectInput is an input type that accepts DataCollectionRuleDestinationsStorageBlobDirectArgs and DataCollectionRuleDestinationsStorageBlobDirectOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsStorageBlobDirectInput` via:
//
//	DataCollectionRuleDestinationsStorageBlobDirectArgs{...}
type DataCollectionRuleDestinationsStorageBlobDirectInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsStorageBlobDirectOutput() DataCollectionRuleDestinationsStorageBlobDirectOutput
	ToDataCollectionRuleDestinationsStorageBlobDirectOutputWithContext(context.Context) DataCollectionRuleDestinationsStorageBlobDirectOutput
}

type DataCollectionRuleDestinationsStorageBlobDirectArgs struct {
	// The Storage Container name.
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The resource ID of the Storage Account.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (DataCollectionRuleDestinationsStorageBlobDirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsStorageBlobDirect)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsStorageBlobDirectArgs) ToDataCollectionRuleDestinationsStorageBlobDirectOutput() DataCollectionRuleDestinationsStorageBlobDirectOutput {
	return i.ToDataCollectionRuleDestinationsStorageBlobDirectOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsStorageBlobDirectArgs) ToDataCollectionRuleDestinationsStorageBlobDirectOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsStorageBlobDirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsStorageBlobDirectOutput)
}

func (i DataCollectionRuleDestinationsStorageBlobDirectArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsStorageBlobDirect] {
	return pulumix.Output[DataCollectionRuleDestinationsStorageBlobDirect]{
		OutputState: i.ToDataCollectionRuleDestinationsStorageBlobDirectOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDestinationsStorageBlobDirectArrayInput is an input type that accepts DataCollectionRuleDestinationsStorageBlobDirectArray and DataCollectionRuleDestinationsStorageBlobDirectArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsStorageBlobDirectArrayInput` via:
//
//	DataCollectionRuleDestinationsStorageBlobDirectArray{ DataCollectionRuleDestinationsStorageBlobDirectArgs{...} }
type DataCollectionRuleDestinationsStorageBlobDirectArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsStorageBlobDirectArrayOutput() DataCollectionRuleDestinationsStorageBlobDirectArrayOutput
	ToDataCollectionRuleDestinationsStorageBlobDirectArrayOutputWithContext(context.Context) DataCollectionRuleDestinationsStorageBlobDirectArrayOutput
}

type DataCollectionRuleDestinationsStorageBlobDirectArray []DataCollectionRuleDestinationsStorageBlobDirectInput

func (DataCollectionRuleDestinationsStorageBlobDirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDestinationsStorageBlobDirect)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsStorageBlobDirectArray) ToDataCollectionRuleDestinationsStorageBlobDirectArrayOutput() DataCollectionRuleDestinationsStorageBlobDirectArrayOutput {
	return i.ToDataCollectionRuleDestinationsStorageBlobDirectArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsStorageBlobDirectArray) ToDataCollectionRuleDestinationsStorageBlobDirectArrayOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsStorageBlobDirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsStorageBlobDirectArrayOutput)
}

func (i DataCollectionRuleDestinationsStorageBlobDirectArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDestinationsStorageBlobDirect] {
	return pulumix.Output[[]DataCollectionRuleDestinationsStorageBlobDirect]{
		OutputState: i.ToDataCollectionRuleDestinationsStorageBlobDirectArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDestinationsStorageBlobDirectOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsStorageBlobDirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsStorageBlobDirect)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsStorageBlobDirectOutput) ToDataCollectionRuleDestinationsStorageBlobDirectOutput() DataCollectionRuleDestinationsStorageBlobDirectOutput {
	return o
}

func (o DataCollectionRuleDestinationsStorageBlobDirectOutput) ToDataCollectionRuleDestinationsStorageBlobDirectOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsStorageBlobDirectOutput {
	return o
}

func (o DataCollectionRuleDestinationsStorageBlobDirectOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsStorageBlobDirect] {
	return pulumix.Output[DataCollectionRuleDestinationsStorageBlobDirect]{
		OutputState: o.OutputState,
	}
}

// The Storage Container name.
func (o DataCollectionRuleDestinationsStorageBlobDirectOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsStorageBlobDirect) string { return v.ContainerName }).(pulumi.StringOutput)
}

// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDestinationsStorageBlobDirectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsStorageBlobDirect) string { return v.Name }).(pulumi.StringOutput)
}

// The resource ID of the Storage Account.
func (o DataCollectionRuleDestinationsStorageBlobDirectOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsStorageBlobDirect) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type DataCollectionRuleDestinationsStorageBlobDirectArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsStorageBlobDirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDestinationsStorageBlobDirect)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsStorageBlobDirectArrayOutput) ToDataCollectionRuleDestinationsStorageBlobDirectArrayOutput() DataCollectionRuleDestinationsStorageBlobDirectArrayOutput {
	return o
}

func (o DataCollectionRuleDestinationsStorageBlobDirectArrayOutput) ToDataCollectionRuleDestinationsStorageBlobDirectArrayOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsStorageBlobDirectArrayOutput {
	return o
}

func (o DataCollectionRuleDestinationsStorageBlobDirectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDestinationsStorageBlobDirect] {
	return pulumix.Output[[]DataCollectionRuleDestinationsStorageBlobDirect]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDestinationsStorageBlobDirectArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDestinationsStorageBlobDirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDestinationsStorageBlobDirect {
		return vs[0].([]DataCollectionRuleDestinationsStorageBlobDirect)[vs[1].(int)]
	}).(DataCollectionRuleDestinationsStorageBlobDirectOutput)
}

type DataCollectionRuleDestinationsStorageTableDirect struct {
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name string `pulumi:"name"`
	// The resource ID of the Storage Account.
	StorageAccountId string `pulumi:"storageAccountId"`
	// The Storage Table name.
	TableName string `pulumi:"tableName"`
}

// DataCollectionRuleDestinationsStorageTableDirectInput is an input type that accepts DataCollectionRuleDestinationsStorageTableDirectArgs and DataCollectionRuleDestinationsStorageTableDirectOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsStorageTableDirectInput` via:
//
//	DataCollectionRuleDestinationsStorageTableDirectArgs{...}
type DataCollectionRuleDestinationsStorageTableDirectInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsStorageTableDirectOutput() DataCollectionRuleDestinationsStorageTableDirectOutput
	ToDataCollectionRuleDestinationsStorageTableDirectOutputWithContext(context.Context) DataCollectionRuleDestinationsStorageTableDirectOutput
}

type DataCollectionRuleDestinationsStorageTableDirectArgs struct {
	// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The resource ID of the Storage Account.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
	// The Storage Table name.
	TableName pulumi.StringInput `pulumi:"tableName"`
}

func (DataCollectionRuleDestinationsStorageTableDirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsStorageTableDirect)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsStorageTableDirectArgs) ToDataCollectionRuleDestinationsStorageTableDirectOutput() DataCollectionRuleDestinationsStorageTableDirectOutput {
	return i.ToDataCollectionRuleDestinationsStorageTableDirectOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsStorageTableDirectArgs) ToDataCollectionRuleDestinationsStorageTableDirectOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsStorageTableDirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsStorageTableDirectOutput)
}

func (i DataCollectionRuleDestinationsStorageTableDirectArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsStorageTableDirect] {
	return pulumix.Output[DataCollectionRuleDestinationsStorageTableDirect]{
		OutputState: i.ToDataCollectionRuleDestinationsStorageTableDirectOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleDestinationsStorageTableDirectArrayInput is an input type that accepts DataCollectionRuleDestinationsStorageTableDirectArray and DataCollectionRuleDestinationsStorageTableDirectArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsStorageTableDirectArrayInput` via:
//
//	DataCollectionRuleDestinationsStorageTableDirectArray{ DataCollectionRuleDestinationsStorageTableDirectArgs{...} }
type DataCollectionRuleDestinationsStorageTableDirectArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsStorageTableDirectArrayOutput() DataCollectionRuleDestinationsStorageTableDirectArrayOutput
	ToDataCollectionRuleDestinationsStorageTableDirectArrayOutputWithContext(context.Context) DataCollectionRuleDestinationsStorageTableDirectArrayOutput
}

type DataCollectionRuleDestinationsStorageTableDirectArray []DataCollectionRuleDestinationsStorageTableDirectInput

func (DataCollectionRuleDestinationsStorageTableDirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDestinationsStorageTableDirect)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsStorageTableDirectArray) ToDataCollectionRuleDestinationsStorageTableDirectArrayOutput() DataCollectionRuleDestinationsStorageTableDirectArrayOutput {
	return i.ToDataCollectionRuleDestinationsStorageTableDirectArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsStorageTableDirectArray) ToDataCollectionRuleDestinationsStorageTableDirectArrayOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsStorageTableDirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsStorageTableDirectArrayOutput)
}

func (i DataCollectionRuleDestinationsStorageTableDirectArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDestinationsStorageTableDirect] {
	return pulumix.Output[[]DataCollectionRuleDestinationsStorageTableDirect]{
		OutputState: i.ToDataCollectionRuleDestinationsStorageTableDirectArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleDestinationsStorageTableDirectOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsStorageTableDirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinationsStorageTableDirect)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsStorageTableDirectOutput) ToDataCollectionRuleDestinationsStorageTableDirectOutput() DataCollectionRuleDestinationsStorageTableDirectOutput {
	return o
}

func (o DataCollectionRuleDestinationsStorageTableDirectOutput) ToDataCollectionRuleDestinationsStorageTableDirectOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsStorageTableDirectOutput {
	return o
}

func (o DataCollectionRuleDestinationsStorageTableDirectOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleDestinationsStorageTableDirect] {
	return pulumix.Output[DataCollectionRuleDestinationsStorageTableDirect]{
		OutputState: o.OutputState,
	}
}

// The name which should be used for this destination. This name should be unique across all destinations regardless of type within the Data Collection Rule.
func (o DataCollectionRuleDestinationsStorageTableDirectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsStorageTableDirect) string { return v.Name }).(pulumi.StringOutput)
}

// The resource ID of the Storage Account.
func (o DataCollectionRuleDestinationsStorageTableDirectOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsStorageTableDirect) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

// The Storage Table name.
func (o DataCollectionRuleDestinationsStorageTableDirectOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinationsStorageTableDirect) string { return v.TableName }).(pulumi.StringOutput)
}

type DataCollectionRuleDestinationsStorageTableDirectArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsStorageTableDirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleDestinationsStorageTableDirect)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsStorageTableDirectArrayOutput) ToDataCollectionRuleDestinationsStorageTableDirectArrayOutput() DataCollectionRuleDestinationsStorageTableDirectArrayOutput {
	return o
}

func (o DataCollectionRuleDestinationsStorageTableDirectArrayOutput) ToDataCollectionRuleDestinationsStorageTableDirectArrayOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsStorageTableDirectArrayOutput {
	return o
}

func (o DataCollectionRuleDestinationsStorageTableDirectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleDestinationsStorageTableDirect] {
	return pulumix.Output[[]DataCollectionRuleDestinationsStorageTableDirect]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleDestinationsStorageTableDirectArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleDestinationsStorageTableDirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleDestinationsStorageTableDirect {
		return vs[0].([]DataCollectionRuleDestinationsStorageTableDirect)[vs[1].(int)]
	}).(DataCollectionRuleDestinationsStorageTableDirectOutput)
}

type DataCollectionRuleIdentity struct {
	// A list of User Assigned Managed Identity IDs to be assigned to this Data Collection Rule. Currently, up to 1 identity is supported.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned`.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId *string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId *string `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
	Type string `pulumi:"type"`
}

// DataCollectionRuleIdentityInput is an input type that accepts DataCollectionRuleIdentityArgs and DataCollectionRuleIdentityOutput values.
// You can construct a concrete instance of `DataCollectionRuleIdentityInput` via:
//
//	DataCollectionRuleIdentityArgs{...}
type DataCollectionRuleIdentityInput interface {
	pulumi.Input

	ToDataCollectionRuleIdentityOutput() DataCollectionRuleIdentityOutput
	ToDataCollectionRuleIdentityOutputWithContext(context.Context) DataCollectionRuleIdentityOutput
}

type DataCollectionRuleIdentityArgs struct {
	// A list of User Assigned Managed Identity IDs to be assigned to this Data Collection Rule. Currently, up to 1 identity is supported.
	//
	// > **NOTE:** This is required when `type` is set to `UserAssigned`.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Specifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DataCollectionRuleIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleIdentity)(nil)).Elem()
}

func (i DataCollectionRuleIdentityArgs) ToDataCollectionRuleIdentityOutput() DataCollectionRuleIdentityOutput {
	return i.ToDataCollectionRuleIdentityOutputWithContext(context.Background())
}

func (i DataCollectionRuleIdentityArgs) ToDataCollectionRuleIdentityOutputWithContext(ctx context.Context) DataCollectionRuleIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleIdentityOutput)
}

func (i DataCollectionRuleIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleIdentity] {
	return pulumix.Output[DataCollectionRuleIdentity]{
		OutputState: i.ToDataCollectionRuleIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i DataCollectionRuleIdentityArgs) ToDataCollectionRuleIdentityPtrOutput() DataCollectionRuleIdentityPtrOutput {
	return i.ToDataCollectionRuleIdentityPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleIdentityArgs) ToDataCollectionRuleIdentityPtrOutputWithContext(ctx context.Context) DataCollectionRuleIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleIdentityOutput).ToDataCollectionRuleIdentityPtrOutputWithContext(ctx)
}

// DataCollectionRuleIdentityPtrInput is an input type that accepts DataCollectionRuleIdentityArgs, DataCollectionRuleIdentityPtr and DataCollectionRuleIdentityPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleIdentityPtrInput` via:
//
//	        DataCollectionRuleIdentityArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleIdentityPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleIdentityPtrOutput() DataCollectionRuleIdentityPtrOutput
	ToDataCollectionRuleIdentityPtrOutputWithContext(context.Context) DataCollectionRuleIdentityPtrOutput
}

type dataCollectionRuleIdentityPtrType DataCollectionRuleIdentityArgs

func DataCollectionRuleIdentityPtr(v *DataCollectionRuleIdentityArgs) DataCollectionRuleIdentityPtrInput {
	return (*dataCollectionRuleIdentityPtrType)(v)
}

func (*dataCollectionRuleIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleIdentity)(nil)).Elem()
}

func (i *dataCollectionRuleIdentityPtrType) ToDataCollectionRuleIdentityPtrOutput() DataCollectionRuleIdentityPtrOutput {
	return i.ToDataCollectionRuleIdentityPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleIdentityPtrType) ToDataCollectionRuleIdentityPtrOutputWithContext(ctx context.Context) DataCollectionRuleIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleIdentityPtrOutput)
}

func (i *dataCollectionRuleIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleIdentity] {
	return pulumix.Output[*DataCollectionRuleIdentity]{
		OutputState: i.ToDataCollectionRuleIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleIdentityOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleIdentity)(nil)).Elem()
}

func (o DataCollectionRuleIdentityOutput) ToDataCollectionRuleIdentityOutput() DataCollectionRuleIdentityOutput {
	return o
}

func (o DataCollectionRuleIdentityOutput) ToDataCollectionRuleIdentityOutputWithContext(ctx context.Context) DataCollectionRuleIdentityOutput {
	return o
}

func (o DataCollectionRuleIdentityOutput) ToDataCollectionRuleIdentityPtrOutput() DataCollectionRuleIdentityPtrOutput {
	return o.ToDataCollectionRuleIdentityPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleIdentityOutput) ToDataCollectionRuleIdentityPtrOutputWithContext(ctx context.Context) DataCollectionRuleIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleIdentity) *DataCollectionRuleIdentity {
		return &v
	}).(DataCollectionRuleIdentityPtrOutput)
}

func (o DataCollectionRuleIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleIdentity] {
	return pulumix.Output[DataCollectionRuleIdentity]{
		OutputState: o.OutputState,
	}
}

// A list of User Assigned Managed Identity IDs to be assigned to this Data Collection Rule. Currently, up to 1 identity is supported.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned`.
func (o DataCollectionRuleIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o DataCollectionRuleIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o DataCollectionRuleIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
func (o DataCollectionRuleIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type DataCollectionRuleIdentityPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleIdentity)(nil)).Elem()
}

func (o DataCollectionRuleIdentityPtrOutput) ToDataCollectionRuleIdentityPtrOutput() DataCollectionRuleIdentityPtrOutput {
	return o
}

func (o DataCollectionRuleIdentityPtrOutput) ToDataCollectionRuleIdentityPtrOutputWithContext(ctx context.Context) DataCollectionRuleIdentityPtrOutput {
	return o
}

func (o DataCollectionRuleIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataCollectionRuleIdentity] {
	return pulumix.Output[*DataCollectionRuleIdentity]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleIdentityPtrOutput) Elem() DataCollectionRuleIdentityOutput {
	return o.ApplyT(func(v *DataCollectionRuleIdentity) DataCollectionRuleIdentity {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleIdentity
		return ret
	}).(DataCollectionRuleIdentityOutput)
}

// A list of User Assigned Managed Identity IDs to be assigned to this Data Collection Rule. Currently, up to 1 identity is supported.
//
// > **NOTE:** This is required when `type` is set to `UserAssigned`.
func (o DataCollectionRuleIdentityPtrOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleIdentity) []string {
		if v == nil {
			return nil
		}
		return v.IdentityIds
	}).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o DataCollectionRuleIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleIdentity) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o DataCollectionRuleIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleIdentity) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
func (o DataCollectionRuleIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type DataCollectionRuleStreamDeclaration struct {
	// One or more `column` blocks as defined above.
	Columns []DataCollectionRuleStreamDeclarationColumn `pulumi:"columns"`
	// The name of the custom stream. This name should be unique across all `streamDeclaration` blocks.
	StreamName string `pulumi:"streamName"`
}

// DataCollectionRuleStreamDeclarationInput is an input type that accepts DataCollectionRuleStreamDeclarationArgs and DataCollectionRuleStreamDeclarationOutput values.
// You can construct a concrete instance of `DataCollectionRuleStreamDeclarationInput` via:
//
//	DataCollectionRuleStreamDeclarationArgs{...}
type DataCollectionRuleStreamDeclarationInput interface {
	pulumi.Input

	ToDataCollectionRuleStreamDeclarationOutput() DataCollectionRuleStreamDeclarationOutput
	ToDataCollectionRuleStreamDeclarationOutputWithContext(context.Context) DataCollectionRuleStreamDeclarationOutput
}

type DataCollectionRuleStreamDeclarationArgs struct {
	// One or more `column` blocks as defined above.
	Columns DataCollectionRuleStreamDeclarationColumnArrayInput `pulumi:"columns"`
	// The name of the custom stream. This name should be unique across all `streamDeclaration` blocks.
	StreamName pulumi.StringInput `pulumi:"streamName"`
}

func (DataCollectionRuleStreamDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleStreamDeclaration)(nil)).Elem()
}

func (i DataCollectionRuleStreamDeclarationArgs) ToDataCollectionRuleStreamDeclarationOutput() DataCollectionRuleStreamDeclarationOutput {
	return i.ToDataCollectionRuleStreamDeclarationOutputWithContext(context.Background())
}

func (i DataCollectionRuleStreamDeclarationArgs) ToDataCollectionRuleStreamDeclarationOutputWithContext(ctx context.Context) DataCollectionRuleStreamDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleStreamDeclarationOutput)
}

func (i DataCollectionRuleStreamDeclarationArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleStreamDeclaration] {
	return pulumix.Output[DataCollectionRuleStreamDeclaration]{
		OutputState: i.ToDataCollectionRuleStreamDeclarationOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleStreamDeclarationArrayInput is an input type that accepts DataCollectionRuleStreamDeclarationArray and DataCollectionRuleStreamDeclarationArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleStreamDeclarationArrayInput` via:
//
//	DataCollectionRuleStreamDeclarationArray{ DataCollectionRuleStreamDeclarationArgs{...} }
type DataCollectionRuleStreamDeclarationArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleStreamDeclarationArrayOutput() DataCollectionRuleStreamDeclarationArrayOutput
	ToDataCollectionRuleStreamDeclarationArrayOutputWithContext(context.Context) DataCollectionRuleStreamDeclarationArrayOutput
}

type DataCollectionRuleStreamDeclarationArray []DataCollectionRuleStreamDeclarationInput

func (DataCollectionRuleStreamDeclarationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleStreamDeclaration)(nil)).Elem()
}

func (i DataCollectionRuleStreamDeclarationArray) ToDataCollectionRuleStreamDeclarationArrayOutput() DataCollectionRuleStreamDeclarationArrayOutput {
	return i.ToDataCollectionRuleStreamDeclarationArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleStreamDeclarationArray) ToDataCollectionRuleStreamDeclarationArrayOutputWithContext(ctx context.Context) DataCollectionRuleStreamDeclarationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleStreamDeclarationArrayOutput)
}

func (i DataCollectionRuleStreamDeclarationArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleStreamDeclaration] {
	return pulumix.Output[[]DataCollectionRuleStreamDeclaration]{
		OutputState: i.ToDataCollectionRuleStreamDeclarationArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleStreamDeclarationOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleStreamDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleStreamDeclaration)(nil)).Elem()
}

func (o DataCollectionRuleStreamDeclarationOutput) ToDataCollectionRuleStreamDeclarationOutput() DataCollectionRuleStreamDeclarationOutput {
	return o
}

func (o DataCollectionRuleStreamDeclarationOutput) ToDataCollectionRuleStreamDeclarationOutputWithContext(ctx context.Context) DataCollectionRuleStreamDeclarationOutput {
	return o
}

func (o DataCollectionRuleStreamDeclarationOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleStreamDeclaration] {
	return pulumix.Output[DataCollectionRuleStreamDeclaration]{
		OutputState: o.OutputState,
	}
}

// One or more `column` blocks as defined above.
func (o DataCollectionRuleStreamDeclarationOutput) Columns() DataCollectionRuleStreamDeclarationColumnArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleStreamDeclaration) []DataCollectionRuleStreamDeclarationColumn {
		return v.Columns
	}).(DataCollectionRuleStreamDeclarationColumnArrayOutput)
}

// The name of the custom stream. This name should be unique across all `streamDeclaration` blocks.
func (o DataCollectionRuleStreamDeclarationOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleStreamDeclaration) string { return v.StreamName }).(pulumi.StringOutput)
}

type DataCollectionRuleStreamDeclarationArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleStreamDeclarationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleStreamDeclaration)(nil)).Elem()
}

func (o DataCollectionRuleStreamDeclarationArrayOutput) ToDataCollectionRuleStreamDeclarationArrayOutput() DataCollectionRuleStreamDeclarationArrayOutput {
	return o
}

func (o DataCollectionRuleStreamDeclarationArrayOutput) ToDataCollectionRuleStreamDeclarationArrayOutputWithContext(ctx context.Context) DataCollectionRuleStreamDeclarationArrayOutput {
	return o
}

func (o DataCollectionRuleStreamDeclarationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleStreamDeclaration] {
	return pulumix.Output[[]DataCollectionRuleStreamDeclaration]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleStreamDeclarationArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleStreamDeclarationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleStreamDeclaration {
		return vs[0].([]DataCollectionRuleStreamDeclaration)[vs[1].(int)]
	}).(DataCollectionRuleStreamDeclarationOutput)
}

type DataCollectionRuleStreamDeclarationColumn struct {
	// The name of the column.
	Name string `pulumi:"name"`
	// The type of the column data. Possible values are `string`, `int`, `long`, `real`, `boolean`, `datetime`,and `dynamic`.
	Type string `pulumi:"type"`
}

// DataCollectionRuleStreamDeclarationColumnInput is an input type that accepts DataCollectionRuleStreamDeclarationColumnArgs and DataCollectionRuleStreamDeclarationColumnOutput values.
// You can construct a concrete instance of `DataCollectionRuleStreamDeclarationColumnInput` via:
//
//	DataCollectionRuleStreamDeclarationColumnArgs{...}
type DataCollectionRuleStreamDeclarationColumnInput interface {
	pulumi.Input

	ToDataCollectionRuleStreamDeclarationColumnOutput() DataCollectionRuleStreamDeclarationColumnOutput
	ToDataCollectionRuleStreamDeclarationColumnOutputWithContext(context.Context) DataCollectionRuleStreamDeclarationColumnOutput
}

type DataCollectionRuleStreamDeclarationColumnArgs struct {
	// The name of the column.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of the column data. Possible values are `string`, `int`, `long`, `real`, `boolean`, `datetime`,and `dynamic`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DataCollectionRuleStreamDeclarationColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleStreamDeclarationColumn)(nil)).Elem()
}

func (i DataCollectionRuleStreamDeclarationColumnArgs) ToDataCollectionRuleStreamDeclarationColumnOutput() DataCollectionRuleStreamDeclarationColumnOutput {
	return i.ToDataCollectionRuleStreamDeclarationColumnOutputWithContext(context.Background())
}

func (i DataCollectionRuleStreamDeclarationColumnArgs) ToDataCollectionRuleStreamDeclarationColumnOutputWithContext(ctx context.Context) DataCollectionRuleStreamDeclarationColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleStreamDeclarationColumnOutput)
}

func (i DataCollectionRuleStreamDeclarationColumnArgs) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleStreamDeclarationColumn] {
	return pulumix.Output[DataCollectionRuleStreamDeclarationColumn]{
		OutputState: i.ToDataCollectionRuleStreamDeclarationColumnOutputWithContext(ctx).OutputState,
	}
}

// DataCollectionRuleStreamDeclarationColumnArrayInput is an input type that accepts DataCollectionRuleStreamDeclarationColumnArray and DataCollectionRuleStreamDeclarationColumnArrayOutput values.
// You can construct a concrete instance of `DataCollectionRuleStreamDeclarationColumnArrayInput` via:
//
//	DataCollectionRuleStreamDeclarationColumnArray{ DataCollectionRuleStreamDeclarationColumnArgs{...} }
type DataCollectionRuleStreamDeclarationColumnArrayInput interface {
	pulumi.Input

	ToDataCollectionRuleStreamDeclarationColumnArrayOutput() DataCollectionRuleStreamDeclarationColumnArrayOutput
	ToDataCollectionRuleStreamDeclarationColumnArrayOutputWithContext(context.Context) DataCollectionRuleStreamDeclarationColumnArrayOutput
}

type DataCollectionRuleStreamDeclarationColumnArray []DataCollectionRuleStreamDeclarationColumnInput

func (DataCollectionRuleStreamDeclarationColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleStreamDeclarationColumn)(nil)).Elem()
}

func (i DataCollectionRuleStreamDeclarationColumnArray) ToDataCollectionRuleStreamDeclarationColumnArrayOutput() DataCollectionRuleStreamDeclarationColumnArrayOutput {
	return i.ToDataCollectionRuleStreamDeclarationColumnArrayOutputWithContext(context.Background())
}

func (i DataCollectionRuleStreamDeclarationColumnArray) ToDataCollectionRuleStreamDeclarationColumnArrayOutputWithContext(ctx context.Context) DataCollectionRuleStreamDeclarationColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleStreamDeclarationColumnArrayOutput)
}

func (i DataCollectionRuleStreamDeclarationColumnArray) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleStreamDeclarationColumn] {
	return pulumix.Output[[]DataCollectionRuleStreamDeclarationColumn]{
		OutputState: i.ToDataCollectionRuleStreamDeclarationColumnArrayOutputWithContext(ctx).OutputState,
	}
}

type DataCollectionRuleStreamDeclarationColumnOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleStreamDeclarationColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleStreamDeclarationColumn)(nil)).Elem()
}

func (o DataCollectionRuleStreamDeclarationColumnOutput) ToDataCollectionRuleStreamDeclarationColumnOutput() DataCollectionRuleStreamDeclarationColumnOutput {
	return o
}

func (o DataCollectionRuleStreamDeclarationColumnOutput) ToDataCollectionRuleStreamDeclarationColumnOutputWithContext(ctx context.Context) DataCollectionRuleStreamDeclarationColumnOutput {
	return o
}

func (o DataCollectionRuleStreamDeclarationColumnOutput) ToOutput(ctx context.Context) pulumix.Output[DataCollectionRuleStreamDeclarationColumn] {
	return pulumix.Output[DataCollectionRuleStreamDeclarationColumn]{
		OutputState: o.OutputState,
	}
}

// The name of the column.
func (o DataCollectionRuleStreamDeclarationColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleStreamDeclarationColumn) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the column data. Possible values are `string`, `int`, `long`, `real`, `boolean`, `datetime`,and `dynamic`.
func (o DataCollectionRuleStreamDeclarationColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleStreamDeclarationColumn) string { return v.Type }).(pulumi.StringOutput)
}

type DataCollectionRuleStreamDeclarationColumnArrayOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleStreamDeclarationColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataCollectionRuleStreamDeclarationColumn)(nil)).Elem()
}

func (o DataCollectionRuleStreamDeclarationColumnArrayOutput) ToDataCollectionRuleStreamDeclarationColumnArrayOutput() DataCollectionRuleStreamDeclarationColumnArrayOutput {
	return o
}

func (o DataCollectionRuleStreamDeclarationColumnArrayOutput) ToDataCollectionRuleStreamDeclarationColumnArrayOutputWithContext(ctx context.Context) DataCollectionRuleStreamDeclarationColumnArrayOutput {
	return o
}

func (o DataCollectionRuleStreamDeclarationColumnArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataCollectionRuleStreamDeclarationColumn] {
	return pulumix.Output[[]DataCollectionRuleStreamDeclarationColumn]{
		OutputState: o.OutputState,
	}
}

func (o DataCollectionRuleStreamDeclarationColumnArrayOutput) Index(i pulumi.IntInput) DataCollectionRuleStreamDeclarationColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataCollectionRuleStreamDeclarationColumn {
		return vs[0].([]DataCollectionRuleStreamDeclarationColumn)[vs[1].(int)]
	}).(DataCollectionRuleStreamDeclarationColumnOutput)
}

type DiagnosticSettingEnabledLog struct {
	// The name of a Diagnostic Log Category for this Resource.
	//
	// > **NOTE:** The Log Categories available vary depending on the Resource being used. You may wish to use the `monitoring.getDiagnosticCategories` Data Source or [list of service specific schemas](https://docs.microsoft.com/azure/azure-monitor/platform/resource-logs-schema#service-specific-schemas) to identify which categories are available for a given Resource.
	Category *string `pulumi:"category"`
	// The name of a Diagnostic Log Category Group for this Resource.
	//
	// > **NOTE:** Not all resources have category groups available.
	//
	// > **NOTE:** Exactly one of `category` or `categoryGroup` must be specified.
	CategoryGroup *string `pulumi:"categoryGroup"`
	// A `retentionPolicy` block as defined below.
	//
	// !> **NOTE:** `retentionPolicy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
	//
	// Deprecated: `retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention
	RetentionPolicy *DiagnosticSettingEnabledLogRetentionPolicy `pulumi:"retentionPolicy"`
}

// DiagnosticSettingEnabledLogInput is an input type that accepts DiagnosticSettingEnabledLogArgs and DiagnosticSettingEnabledLogOutput values.
// You can construct a concrete instance of `DiagnosticSettingEnabledLogInput` via:
//
//	DiagnosticSettingEnabledLogArgs{...}
type DiagnosticSettingEnabledLogInput interface {
	pulumi.Input

	ToDiagnosticSettingEnabledLogOutput() DiagnosticSettingEnabledLogOutput
	ToDiagnosticSettingEnabledLogOutputWithContext(context.Context) DiagnosticSettingEnabledLogOutput
}

type DiagnosticSettingEnabledLogArgs struct {
	// The name of a Diagnostic Log Category for this Resource.
	//
	// > **NOTE:** The Log Categories available vary depending on the Resource being used. You may wish to use the `monitoring.getDiagnosticCategories` Data Source or [list of service specific schemas](https://docs.microsoft.com/azure/azure-monitor/platform/resource-logs-schema#service-specific-schemas) to identify which categories are available for a given Resource.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// The name of a Diagnostic Log Category Group for this Resource.
	//
	// > **NOTE:** Not all resources have category groups available.
	//
	// > **NOTE:** Exactly one of `category` or `categoryGroup` must be specified.
	CategoryGroup pulumi.StringPtrInput `pulumi:"categoryGroup"`
	// A `retentionPolicy` block as defined below.
	//
	// !> **NOTE:** `retentionPolicy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
	//
	// Deprecated: `retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention
	RetentionPolicy DiagnosticSettingEnabledLogRetentionPolicyPtrInput `pulumi:"retentionPolicy"`
}

func (DiagnosticSettingEnabledLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticSettingEnabledLog)(nil)).Elem()
}

func (i DiagnosticSettingEnabledLogArgs) ToDiagnosticSettingEnabledLogOutput() DiagnosticSettingEnabledLogOutput {
	return i.ToDiagnosticSettingEnabledLogOutputWithContext(context.Background())
}

func (i DiagnosticSettingEnabledLogArgs) ToDiagnosticSettingEnabledLogOutputWithContext(ctx context.Context) DiagnosticSettingEnabledLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingEnabledLogOutput)
}

func (i DiagnosticSettingEnabledLogArgs) ToOutput(ctx context.Context) pulumix.Output[DiagnosticSettingEnabledLog] {
	return pulumix.Output[DiagnosticSettingEnabledLog]{
		OutputState: i.ToDiagnosticSettingEnabledLogOutputWithContext(ctx).OutputState,
	}
}

// DiagnosticSettingEnabledLogArrayInput is an input type that accepts DiagnosticSettingEnabledLogArray and DiagnosticSettingEnabledLogArrayOutput values.
// You can construct a concrete instance of `DiagnosticSettingEnabledLogArrayInput` via:
//
//	DiagnosticSettingEnabledLogArray{ DiagnosticSettingEnabledLogArgs{...} }
type DiagnosticSettingEnabledLogArrayInput interface {
	pulumi.Input

	ToDiagnosticSettingEnabledLogArrayOutput() DiagnosticSettingEnabledLogArrayOutput
	ToDiagnosticSettingEnabledLogArrayOutputWithContext(context.Context) DiagnosticSettingEnabledLogArrayOutput
}

type DiagnosticSettingEnabledLogArray []DiagnosticSettingEnabledLogInput

func (DiagnosticSettingEnabledLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiagnosticSettingEnabledLog)(nil)).Elem()
}

func (i DiagnosticSettingEnabledLogArray) ToDiagnosticSettingEnabledLogArrayOutput() DiagnosticSettingEnabledLogArrayOutput {
	return i.ToDiagnosticSettingEnabledLogArrayOutputWithContext(context.Background())
}

func (i DiagnosticSettingEnabledLogArray) ToDiagnosticSettingEnabledLogArrayOutputWithContext(ctx context.Context) DiagnosticSettingEnabledLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingEnabledLogArrayOutput)
}

func (i DiagnosticSettingEnabledLogArray) ToOutput(ctx context.Context) pulumix.Output[[]DiagnosticSettingEnabledLog] {
	return pulumix.Output[[]DiagnosticSettingEnabledLog]{
		OutputState: i.ToDiagnosticSettingEnabledLogArrayOutputWithContext(ctx).OutputState,
	}
}

type DiagnosticSettingEnabledLogOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingEnabledLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticSettingEnabledLog)(nil)).Elem()
}

func (o DiagnosticSettingEnabledLogOutput) ToDiagnosticSettingEnabledLogOutput() DiagnosticSettingEnabledLogOutput {
	return o
}

func (o DiagnosticSettingEnabledLogOutput) ToDiagnosticSettingEnabledLogOutputWithContext(ctx context.Context) DiagnosticSettingEnabledLogOutput {
	return o
}

func (o DiagnosticSettingEnabledLogOutput) ToOutput(ctx context.Context) pulumix.Output[DiagnosticSettingEnabledLog] {
	return pulumix.Output[DiagnosticSettingEnabledLog]{
		OutputState: o.OutputState,
	}
}

// The name of a Diagnostic Log Category for this Resource.
//
// > **NOTE:** The Log Categories available vary depending on the Resource being used. You may wish to use the `monitoring.getDiagnosticCategories` Data Source or [list of service specific schemas](https://docs.microsoft.com/azure/azure-monitor/platform/resource-logs-schema#service-specific-schemas) to identify which categories are available for a given Resource.
func (o DiagnosticSettingEnabledLogOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticSettingEnabledLog) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// The name of a Diagnostic Log Category Group for this Resource.
//
// > **NOTE:** Not all resources have category groups available.
//
// > **NOTE:** Exactly one of `category` or `categoryGroup` must be specified.
func (o DiagnosticSettingEnabledLogOutput) CategoryGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticSettingEnabledLog) *string { return v.CategoryGroup }).(pulumi.StringPtrOutput)
}

// A `retentionPolicy` block as defined below.
//
// !> **NOTE:** `retentionPolicy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
//
// Deprecated: `retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention
func (o DiagnosticSettingEnabledLogOutput) RetentionPolicy() DiagnosticSettingEnabledLogRetentionPolicyPtrOutput {
	return o.ApplyT(func(v DiagnosticSettingEnabledLog) *DiagnosticSettingEnabledLogRetentionPolicy {
		return v.RetentionPolicy
	}).(DiagnosticSettingEnabledLogRetentionPolicyPtrOutput)
}

type DiagnosticSettingEnabledLogArrayOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingEnabledLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiagnosticSettingEnabledLog)(nil)).Elem()
}

func (o DiagnosticSettingEnabledLogArrayOutput) ToDiagnosticSettingEnabledLogArrayOutput() DiagnosticSettingEnabledLogArrayOutput {
	return o
}

func (o DiagnosticSettingEnabledLogArrayOutput) ToDiagnosticSettingEnabledLogArrayOutputWithContext(ctx context.Context) DiagnosticSettingEnabledLogArrayOutput {
	return o
}

func (o DiagnosticSettingEnabledLogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DiagnosticSettingEnabledLog] {
	return pulumix.Output[[]DiagnosticSettingEnabledLog]{
		OutputState: o.OutputState,
	}
}

func (o DiagnosticSettingEnabledLogArrayOutput) Index(i pulumi.IntInput) DiagnosticSettingEnabledLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiagnosticSettingEnabledLog {
		return vs[0].([]DiagnosticSettingEnabledLog)[vs[1].(int)]
	}).(DiagnosticSettingEnabledLogOutput)
}

type DiagnosticSettingEnabledLogRetentionPolicy struct {
	// The number of days for which this Retention Policy should apply.
	//
	// > **NOTE:** Setting this to `0` will retain the events indefinitely.
	Days *int `pulumi:"days"`
	// Is this Retention Policy enabled?
	Enabled bool `pulumi:"enabled"`
}

// DiagnosticSettingEnabledLogRetentionPolicyInput is an input type that accepts DiagnosticSettingEnabledLogRetentionPolicyArgs and DiagnosticSettingEnabledLogRetentionPolicyOutput values.
// You can construct a concrete instance of `DiagnosticSettingEnabledLogRetentionPolicyInput` via:
//
//	DiagnosticSettingEnabledLogRetentionPolicyArgs{...}
type DiagnosticSettingEnabledLogRetentionPolicyInput interface {
	pulumi.Input

	ToDiagnosticSettingEnabledLogRetentionPolicyOutput() DiagnosticSettingEnabledLogRetentionPolicyOutput
	ToDiagnosticSettingEnabledLogRetentionPolicyOutputWithContext(context.Context) DiagnosticSettingEnabledLogRetentionPolicyOutput
}

type DiagnosticSettingEnabledLogRetentionPolicyArgs struct {
	// The number of days for which this Retention Policy should apply.
	//
	// > **NOTE:** Setting this to `0` will retain the events indefinitely.
	Days pulumi.IntPtrInput `pulumi:"days"`
	// Is this Retention Policy enabled?
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (DiagnosticSettingEnabledLogRetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticSettingEnabledLogRetentionPolicy)(nil)).Elem()
}

func (i DiagnosticSettingEnabledLogRetentionPolicyArgs) ToDiagnosticSettingEnabledLogRetentionPolicyOutput() DiagnosticSettingEnabledLogRetentionPolicyOutput {
	return i.ToDiagnosticSettingEnabledLogRetentionPolicyOutputWithContext(context.Background())
}

func (i DiagnosticSettingEnabledLogRetentionPolicyArgs) ToDiagnosticSettingEnabledLogRetentionPolicyOutputWithContext(ctx context.Context) DiagnosticSettingEnabledLogRetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingEnabledLogRetentionPolicyOutput)
}

func (i DiagnosticSettingEnabledLogRetentionPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[DiagnosticSettingEnabledLogRetentionPolicy] {
	return pulumix.Output[DiagnosticSettingEnabledLogRetentionPolicy]{
		OutputState: i.ToDiagnosticSettingEnabledLogRetentionPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i DiagnosticSettingEnabledLogRetentionPolicyArgs) ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutput() DiagnosticSettingEnabledLogRetentionPolicyPtrOutput {
	return i.ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i DiagnosticSettingEnabledLogRetentionPolicyArgs) ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutputWithContext(ctx context.Context) DiagnosticSettingEnabledLogRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingEnabledLogRetentionPolicyOutput).ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutputWithContext(ctx)
}

// DiagnosticSettingEnabledLogRetentionPolicyPtrInput is an input type that accepts DiagnosticSettingEnabledLogRetentionPolicyArgs, DiagnosticSettingEnabledLogRetentionPolicyPtr and DiagnosticSettingEnabledLogRetentionPolicyPtrOutput values.
// You can construct a concrete instance of `DiagnosticSettingEnabledLogRetentionPolicyPtrInput` via:
//
//	        DiagnosticSettingEnabledLogRetentionPolicyArgs{...}
//
//	or:
//
//	        nil
type DiagnosticSettingEnabledLogRetentionPolicyPtrInput interface {
	pulumi.Input

	ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutput() DiagnosticSettingEnabledLogRetentionPolicyPtrOutput
	ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutputWithContext(context.Context) DiagnosticSettingEnabledLogRetentionPolicyPtrOutput
}

type diagnosticSettingEnabledLogRetentionPolicyPtrType DiagnosticSettingEnabledLogRetentionPolicyArgs

func DiagnosticSettingEnabledLogRetentionPolicyPtr(v *DiagnosticSettingEnabledLogRetentionPolicyArgs) DiagnosticSettingEnabledLogRetentionPolicyPtrInput {
	return (*diagnosticSettingEnabledLogRetentionPolicyPtrType)(v)
}

func (*diagnosticSettingEnabledLogRetentionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticSettingEnabledLogRetentionPolicy)(nil)).Elem()
}

func (i *diagnosticSettingEnabledLogRetentionPolicyPtrType) ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutput() DiagnosticSettingEnabledLogRetentionPolicyPtrOutput {
	return i.ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i *diagnosticSettingEnabledLogRetentionPolicyPtrType) ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutputWithContext(ctx context.Context) DiagnosticSettingEnabledLogRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingEnabledLogRetentionPolicyPtrOutput)
}

func (i *diagnosticSettingEnabledLogRetentionPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*DiagnosticSettingEnabledLogRetentionPolicy] {
	return pulumix.Output[*DiagnosticSettingEnabledLogRetentionPolicy]{
		OutputState: i.ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type DiagnosticSettingEnabledLogRetentionPolicyOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingEnabledLogRetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticSettingEnabledLogRetentionPolicy)(nil)).Elem()
}

func (o DiagnosticSettingEnabledLogRetentionPolicyOutput) ToDiagnosticSettingEnabledLogRetentionPolicyOutput() DiagnosticSettingEnabledLogRetentionPolicyOutput {
	return o
}

func (o DiagnosticSettingEnabledLogRetentionPolicyOutput) ToDiagnosticSettingEnabledLogRetentionPolicyOutputWithContext(ctx context.Context) DiagnosticSettingEnabledLogRetentionPolicyOutput {
	return o
}

func (o DiagnosticSettingEnabledLogRetentionPolicyOutput) ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutput() DiagnosticSettingEnabledLogRetentionPolicyPtrOutput {
	return o.ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutputWithContext(context.Background())
}

func (o DiagnosticSettingEnabledLogRetentionPolicyOutput) ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutputWithContext(ctx context.Context) DiagnosticSettingEnabledLogRetentionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiagnosticSettingEnabledLogRetentionPolicy) *DiagnosticSettingEnabledLogRetentionPolicy {
		return &v
	}).(DiagnosticSettingEnabledLogRetentionPolicyPtrOutput)
}

func (o DiagnosticSettingEnabledLogRetentionPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[DiagnosticSettingEnabledLogRetentionPolicy] {
	return pulumix.Output[DiagnosticSettingEnabledLogRetentionPolicy]{
		OutputState: o.OutputState,
	}
}

// The number of days for which this Retention Policy should apply.
//
// > **NOTE:** Setting this to `0` will retain the events indefinitely.
func (o DiagnosticSettingEnabledLogRetentionPolicyOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DiagnosticSettingEnabledLogRetentionPolicy) *int { return v.Days }).(pulumi.IntPtrOutput)
}

// Is this Retention Policy enabled?
func (o DiagnosticSettingEnabledLogRetentionPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DiagnosticSettingEnabledLogRetentionPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type DiagnosticSettingEnabledLogRetentionPolicyPtrOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingEnabledLogRetentionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticSettingEnabledLogRetentionPolicy)(nil)).Elem()
}

func (o DiagnosticSettingEnabledLogRetentionPolicyPtrOutput) ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutput() DiagnosticSettingEnabledLogRetentionPolicyPtrOutput {
	return o
}

func (o DiagnosticSettingEnabledLogRetentionPolicyPtrOutput) ToDiagnosticSettingEnabledLogRetentionPolicyPtrOutputWithContext(ctx context.Context) DiagnosticSettingEnabledLogRetentionPolicyPtrOutput {
	return o
}

func (o DiagnosticSettingEnabledLogRetentionPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DiagnosticSettingEnabledLogRetentionPolicy] {
	return pulumix.Output[*DiagnosticSettingEnabledLogRetentionPolicy]{
		OutputState: o.OutputState,
	}
}

func (o DiagnosticSettingEnabledLogRetentionPolicyPtrOutput) Elem() DiagnosticSettingEnabledLogRetentionPolicyOutput {
	return o.ApplyT(func(v *DiagnosticSettingEnabledLogRetentionPolicy) DiagnosticSettingEnabledLogRetentionPolicy {
		if v != nil {
			return *v
		}
		var ret DiagnosticSettingEnabledLogRetentionPolicy
		return ret
	}).(DiagnosticSettingEnabledLogRetentionPolicyOutput)
}

// The number of days for which this Retention Policy should apply.
//
// > **NOTE:** Setting this to `0` will retain the events indefinitely.
func (o DiagnosticSettingEnabledLogRetentionPolicyPtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiagnosticSettingEnabledLogRetentionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.IntPtrOutput)
}

// Is this Retention Policy enabled?
func (o DiagnosticSettingEnabledLogRetentionPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiagnosticSettingEnabledLogRetentionPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type DiagnosticSettingLog struct {
	// The name of a Diagnostic Log Category for this Resource.
	//
	// > **NOTE:** The Log Categories available vary depending on the Resource being used. You may wish to use the `monitoring.getDiagnosticCategories` Data Source or [list of service specific schemas](https://docs.microsoft.com/azure/azure-monitor/platform/resource-logs-schema#service-specific-schemas) to identify which categories are available for a given Resource.
	Category *string `pulumi:"category"`
	// The name of a Diagnostic Log Category Group for this Resource.
	//
	// > **NOTE:** Not all resources have category groups available.
	//
	// > **NOTE:** Exactly one of `category` or `categoryGroup` must be specified.
	CategoryGroup *string `pulumi:"categoryGroup"`
	// Is this Diagnostic Log enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// A `retentionPolicy` block as defined below.
	//
	// !> **NOTE:** `retentionPolicy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
	//
	// Deprecated: `retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention
	RetentionPolicy *DiagnosticSettingLogRetentionPolicy `pulumi:"retentionPolicy"`
}

// DiagnosticSettingLogInput is an input type that accepts DiagnosticSettingLogArgs and DiagnosticSettingLogOutput values.
// You can construct a concrete instance of `DiagnosticSettingLogInput` via:
//
//	DiagnosticSettingLogArgs{...}
type DiagnosticSettingLogInput interface {
	pulumi.Input

	ToDiagnosticSettingLogOutput() DiagnosticSettingLogOutput
	ToDiagnosticSettingLogOutputWithContext(context.Context) DiagnosticSettingLogOutput
}

type DiagnosticSettingLogArgs struct {
	// The name of a Diagnostic Log Category for this Resource.
	//
	// > **NOTE:** The Log Categories available vary depending on the Resource being used. You may wish to use the `monitoring.getDiagnosticCategories` Data Source or [list of service specific schemas](https://docs.microsoft.com/azure/azure-monitor/platform/resource-logs-schema#service-specific-schemas) to identify which categories are available for a given Resource.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// The name of a Diagnostic Log Category Group for this Resource.
	//
	// > **NOTE:** Not all resources have category groups available.
	//
	// > **NOTE:** Exactly one of `category` or `categoryGroup` must be specified.
	CategoryGroup pulumi.StringPtrInput `pulumi:"categoryGroup"`
	// Is this Diagnostic Log enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// A `retentionPolicy` block as defined below.
	//
	// !> **NOTE:** `retentionPolicy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
	//
	// Deprecated: `retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention
	RetentionPolicy DiagnosticSettingLogRetentionPolicyPtrInput `pulumi:"retentionPolicy"`
}

func (DiagnosticSettingLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticSettingLog)(nil)).Elem()
}

func (i DiagnosticSettingLogArgs) ToDiagnosticSettingLogOutput() DiagnosticSettingLogOutput {
	return i.ToDiagnosticSettingLogOutputWithContext(context.Background())
}

func (i DiagnosticSettingLogArgs) ToDiagnosticSettingLogOutputWithContext(ctx context.Context) DiagnosticSettingLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingLogOutput)
}

func (i DiagnosticSettingLogArgs) ToOutput(ctx context.Context) pulumix.Output[DiagnosticSettingLog] {
	return pulumix.Output[DiagnosticSettingLog]{
		OutputState: i.ToDiagnosticSettingLogOutputWithContext(ctx).OutputState,
	}
}

// DiagnosticSettingLogArrayInput is an input type that accepts DiagnosticSettingLogArray and DiagnosticSettingLogArrayOutput values.
// You can construct a concrete instance of `DiagnosticSettingLogArrayInput` via:
//
//	DiagnosticSettingLogArray{ DiagnosticSettingLogArgs{...} }
type DiagnosticSettingLogArrayInput interface {
	pulumi.Input

	ToDiagnosticSettingLogArrayOutput() DiagnosticSettingLogArrayOutput
	ToDiagnosticSettingLogArrayOutputWithContext(context.Context) DiagnosticSettingLogArrayOutput
}

type DiagnosticSettingLogArray []DiagnosticSettingLogInput

func (DiagnosticSettingLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiagnosticSettingLog)(nil)).Elem()
}

func (i DiagnosticSettingLogArray) ToDiagnosticSettingLogArrayOutput() DiagnosticSettingLogArrayOutput {
	return i.ToDiagnosticSettingLogArrayOutputWithContext(context.Background())
}

func (i DiagnosticSettingLogArray) ToDiagnosticSettingLogArrayOutputWithContext(ctx context.Context) DiagnosticSettingLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingLogArrayOutput)
}

func (i DiagnosticSettingLogArray) ToOutput(ctx context.Context) pulumix.Output[[]DiagnosticSettingLog] {
	return pulumix.Output[[]DiagnosticSettingLog]{
		OutputState: i.ToDiagnosticSettingLogArrayOutputWithContext(ctx).OutputState,
	}
}

type DiagnosticSettingLogOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticSettingLog)(nil)).Elem()
}

func (o DiagnosticSettingLogOutput) ToDiagnosticSettingLogOutput() DiagnosticSettingLogOutput {
	return o
}

func (o DiagnosticSettingLogOutput) ToDiagnosticSettingLogOutputWithContext(ctx context.Context) DiagnosticSettingLogOutput {
	return o
}

func (o DiagnosticSettingLogOutput) ToOutput(ctx context.Context) pulumix.Output[DiagnosticSettingLog] {
	return pulumix.Output[DiagnosticSettingLog]{
		OutputState: o.OutputState,
	}
}

// The name of a Diagnostic Log Category for this Resource.
//
// > **NOTE:** The Log Categories available vary depending on the Resource being used. You may wish to use the `monitoring.getDiagnosticCategories` Data Source or [list of service specific schemas](https://docs.microsoft.com/azure/azure-monitor/platform/resource-logs-schema#service-specific-schemas) to identify which categories are available for a given Resource.
func (o DiagnosticSettingLogOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticSettingLog) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// The name of a Diagnostic Log Category Group for this Resource.
//
// > **NOTE:** Not all resources have category groups available.
//
// > **NOTE:** Exactly one of `category` or `categoryGroup` must be specified.
func (o DiagnosticSettingLogOutput) CategoryGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticSettingLog) *string { return v.CategoryGroup }).(pulumi.StringPtrOutput)
}

// Is this Diagnostic Log enabled? Defaults to `true`.
func (o DiagnosticSettingLogOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DiagnosticSettingLog) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A `retentionPolicy` block as defined below.
//
// !> **NOTE:** `retentionPolicy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
//
// Deprecated: `retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention
func (o DiagnosticSettingLogOutput) RetentionPolicy() DiagnosticSettingLogRetentionPolicyPtrOutput {
	return o.ApplyT(func(v DiagnosticSettingLog) *DiagnosticSettingLogRetentionPolicy { return v.RetentionPolicy }).(DiagnosticSettingLogRetentionPolicyPtrOutput)
}

type DiagnosticSettingLogArrayOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiagnosticSettingLog)(nil)).Elem()
}

func (o DiagnosticSettingLogArrayOutput) ToDiagnosticSettingLogArrayOutput() DiagnosticSettingLogArrayOutput {
	return o
}

func (o DiagnosticSettingLogArrayOutput) ToDiagnosticSettingLogArrayOutputWithContext(ctx context.Context) DiagnosticSettingLogArrayOutput {
	return o
}

func (o DiagnosticSettingLogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DiagnosticSettingLog] {
	return pulumix.Output[[]DiagnosticSettingLog]{
		OutputState: o.OutputState,
	}
}

func (o DiagnosticSettingLogArrayOutput) Index(i pulumi.IntInput) DiagnosticSettingLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiagnosticSettingLog {
		return vs[0].([]DiagnosticSettingLog)[vs[1].(int)]
	}).(DiagnosticSettingLogOutput)
}

type DiagnosticSettingLogRetentionPolicy struct {
	// The number of days for which this Retention Policy should apply.
	//
	// > **NOTE:** Setting this to `0` will retain the events indefinitely.
	Days *int `pulumi:"days"`
	// Is this Retention Policy enabled?
	Enabled bool `pulumi:"enabled"`
}

// DiagnosticSettingLogRetentionPolicyInput is an input type that accepts DiagnosticSettingLogRetentionPolicyArgs and DiagnosticSettingLogRetentionPolicyOutput values.
// You can construct a concrete instance of `DiagnosticSettingLogRetentionPolicyInput` via:
//
//	DiagnosticSettingLogRetentionPolicyArgs{...}
type DiagnosticSettingLogRetentionPolicyInput interface {
	pulumi.Input

	ToDiagnosticSettingLogRetentionPolicyOutput() DiagnosticSettingLogRetentionPolicyOutput
	ToDiagnosticSettingLogRetentionPolicyOutputWithContext(context.Context) DiagnosticSettingLogRetentionPolicyOutput
}

type DiagnosticSettingLogRetentionPolicyArgs struct {
	// The number of days for which this Retention Policy should apply.
	//
	// > **NOTE:** Setting this to `0` will retain the events indefinitely.
	Days pulumi.IntPtrInput `pulumi:"days"`
	// Is this Retention Policy enabled?
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (DiagnosticSettingLogRetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticSettingLogRetentionPolicy)(nil)).Elem()
}

func (i DiagnosticSettingLogRetentionPolicyArgs) ToDiagnosticSettingLogRetentionPolicyOutput() DiagnosticSettingLogRetentionPolicyOutput {
	return i.ToDiagnosticSettingLogRetentionPolicyOutputWithContext(context.Background())
}

func (i DiagnosticSettingLogRetentionPolicyArgs) ToDiagnosticSettingLogRetentionPolicyOutputWithContext(ctx context.Context) DiagnosticSettingLogRetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingLogRetentionPolicyOutput)
}

func (i DiagnosticSettingLogRetentionPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[DiagnosticSettingLogRetentionPolicy] {
	return pulumix.Output[DiagnosticSettingLogRetentionPolicy]{
		OutputState: i.ToDiagnosticSettingLogRetentionPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i DiagnosticSettingLogRetentionPolicyArgs) ToDiagnosticSettingLogRetentionPolicyPtrOutput() DiagnosticSettingLogRetentionPolicyPtrOutput {
	return i.ToDiagnosticSettingLogRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i DiagnosticSettingLogRetentionPolicyArgs) ToDiagnosticSettingLogRetentionPolicyPtrOutputWithContext(ctx context.Context) DiagnosticSettingLogRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingLogRetentionPolicyOutput).ToDiagnosticSettingLogRetentionPolicyPtrOutputWithContext(ctx)
}

// DiagnosticSettingLogRetentionPolicyPtrInput is an input type that accepts DiagnosticSettingLogRetentionPolicyArgs, DiagnosticSettingLogRetentionPolicyPtr and DiagnosticSettingLogRetentionPolicyPtrOutput values.
// You can construct a concrete instance of `DiagnosticSettingLogRetentionPolicyPtrInput` via:
//
//	        DiagnosticSettingLogRetentionPolicyArgs{...}
//
//	or:
//
//	        nil
type DiagnosticSettingLogRetentionPolicyPtrInput interface {
	pulumi.Input

	ToDiagnosticSettingLogRetentionPolicyPtrOutput() DiagnosticSettingLogRetentionPolicyPtrOutput
	ToDiagnosticSettingLogRetentionPolicyPtrOutputWithContext(context.Context) DiagnosticSettingLogRetentionPolicyPtrOutput
}

type diagnosticSettingLogRetentionPolicyPtrType DiagnosticSettingLogRetentionPolicyArgs

func DiagnosticSettingLogRetentionPolicyPtr(v *DiagnosticSettingLogRetentionPolicyArgs) DiagnosticSettingLogRetentionPolicyPtrInput {
	return (*diagnosticSettingLogRetentionPolicyPtrType)(v)
}

func (*diagnosticSettingLogRetentionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticSettingLogRetentionPolicy)(nil)).Elem()
}

func (i *diagnosticSettingLogRetentionPolicyPtrType) ToDiagnosticSettingLogRetentionPolicyPtrOutput() DiagnosticSettingLogRetentionPolicyPtrOutput {
	return i.ToDiagnosticSettingLogRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i *diagnosticSettingLogRetentionPolicyPtrType) ToDiagnosticSettingLogRetentionPolicyPtrOutputWithContext(ctx context.Context) DiagnosticSettingLogRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingLogRetentionPolicyPtrOutput)
}

func (i *diagnosticSettingLogRetentionPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*DiagnosticSettingLogRetentionPolicy] {
	return pulumix.Output[*DiagnosticSettingLogRetentionPolicy]{
		OutputState: i.ToDiagnosticSettingLogRetentionPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type DiagnosticSettingLogRetentionPolicyOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingLogRetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticSettingLogRetentionPolicy)(nil)).Elem()
}

func (o DiagnosticSettingLogRetentionPolicyOutput) ToDiagnosticSettingLogRetentionPolicyOutput() DiagnosticSettingLogRetentionPolicyOutput {
	return o
}

func (o DiagnosticSettingLogRetentionPolicyOutput) ToDiagnosticSettingLogRetentionPolicyOutputWithContext(ctx context.Context) DiagnosticSettingLogRetentionPolicyOutput {
	return o
}

func (o DiagnosticSettingLogRetentionPolicyOutput) ToDiagnosticSettingLogRetentionPolicyPtrOutput() DiagnosticSettingLogRetentionPolicyPtrOutput {
	return o.ToDiagnosticSettingLogRetentionPolicyPtrOutputWithContext(context.Background())
}

func (o DiagnosticSettingLogRetentionPolicyOutput) ToDiagnosticSettingLogRetentionPolicyPtrOutputWithContext(ctx context.Context) DiagnosticSettingLogRetentionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiagnosticSettingLogRetentionPolicy) *DiagnosticSettingLogRetentionPolicy {
		return &v
	}).(DiagnosticSettingLogRetentionPolicyPtrOutput)
}

func (o DiagnosticSettingLogRetentionPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[DiagnosticSettingLogRetentionPolicy] {
	return pulumix.Output[DiagnosticSettingLogRetentionPolicy]{
		OutputState: o.OutputState,
	}
}

// The number of days for which this Retention Policy should apply.
//
// > **NOTE:** Setting this to `0` will retain the events indefinitely.
func (o DiagnosticSettingLogRetentionPolicyOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DiagnosticSettingLogRetentionPolicy) *int { return v.Days }).(pulumi.IntPtrOutput)
}

// Is this Retention Policy enabled?
func (o DiagnosticSettingLogRetentionPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DiagnosticSettingLogRetentionPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type DiagnosticSettingLogRetentionPolicyPtrOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingLogRetentionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticSettingLogRetentionPolicy)(nil)).Elem()
}

func (o DiagnosticSettingLogRetentionPolicyPtrOutput) ToDiagnosticSettingLogRetentionPolicyPtrOutput() DiagnosticSettingLogRetentionPolicyPtrOutput {
	return o
}

func (o DiagnosticSettingLogRetentionPolicyPtrOutput) ToDiagnosticSettingLogRetentionPolicyPtrOutputWithContext(ctx context.Context) DiagnosticSettingLogRetentionPolicyPtrOutput {
	return o
}

func (o DiagnosticSettingLogRetentionPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DiagnosticSettingLogRetentionPolicy] {
	return pulumix.Output[*DiagnosticSettingLogRetentionPolicy]{
		OutputState: o.OutputState,
	}
}

func (o DiagnosticSettingLogRetentionPolicyPtrOutput) Elem() DiagnosticSettingLogRetentionPolicyOutput {
	return o.ApplyT(func(v *DiagnosticSettingLogRetentionPolicy) DiagnosticSettingLogRetentionPolicy {
		if v != nil {
			return *v
		}
		var ret DiagnosticSettingLogRetentionPolicy
		return ret
	}).(DiagnosticSettingLogRetentionPolicyOutput)
}

// The number of days for which this Retention Policy should apply.
//
// > **NOTE:** Setting this to `0` will retain the events indefinitely.
func (o DiagnosticSettingLogRetentionPolicyPtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiagnosticSettingLogRetentionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.IntPtrOutput)
}

// Is this Retention Policy enabled?
func (o DiagnosticSettingLogRetentionPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiagnosticSettingLogRetentionPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type DiagnosticSettingMetric struct {
	// The name of a Diagnostic Metric Category for this Resource.
	//
	// > **NOTE:** The Metric Categories available vary depending on the Resource being used. You may wish to use the `monitoring.getDiagnosticCategories` Data Source to identify which categories are available for a given Resource.
	Category string `pulumi:"category"`
	// Is this Diagnostic Metric enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// A `retentionPolicy` block as defined below.
	//
	// !> **NOTE:** `retentionPolicy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
	//
	// Deprecated: `retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention
	RetentionPolicy *DiagnosticSettingMetricRetentionPolicy `pulumi:"retentionPolicy"`
}

// DiagnosticSettingMetricInput is an input type that accepts DiagnosticSettingMetricArgs and DiagnosticSettingMetricOutput values.
// You can construct a concrete instance of `DiagnosticSettingMetricInput` via:
//
//	DiagnosticSettingMetricArgs{...}
type DiagnosticSettingMetricInput interface {
	pulumi.Input

	ToDiagnosticSettingMetricOutput() DiagnosticSettingMetricOutput
	ToDiagnosticSettingMetricOutputWithContext(context.Context) DiagnosticSettingMetricOutput
}

type DiagnosticSettingMetricArgs struct {
	// The name of a Diagnostic Metric Category for this Resource.
	//
	// > **NOTE:** The Metric Categories available vary depending on the Resource being used. You may wish to use the `monitoring.getDiagnosticCategories` Data Source to identify which categories are available for a given Resource.
	Category pulumi.StringInput `pulumi:"category"`
	// Is this Diagnostic Metric enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// A `retentionPolicy` block as defined below.
	//
	// !> **NOTE:** `retentionPolicy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
	//
	// Deprecated: `retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention
	RetentionPolicy DiagnosticSettingMetricRetentionPolicyPtrInput `pulumi:"retentionPolicy"`
}

func (DiagnosticSettingMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticSettingMetric)(nil)).Elem()
}

func (i DiagnosticSettingMetricArgs) ToDiagnosticSettingMetricOutput() DiagnosticSettingMetricOutput {
	return i.ToDiagnosticSettingMetricOutputWithContext(context.Background())
}

func (i DiagnosticSettingMetricArgs) ToDiagnosticSettingMetricOutputWithContext(ctx context.Context) DiagnosticSettingMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingMetricOutput)
}

func (i DiagnosticSettingMetricArgs) ToOutput(ctx context.Context) pulumix.Output[DiagnosticSettingMetric] {
	return pulumix.Output[DiagnosticSettingMetric]{
		OutputState: i.ToDiagnosticSettingMetricOutputWithContext(ctx).OutputState,
	}
}

// DiagnosticSettingMetricArrayInput is an input type that accepts DiagnosticSettingMetricArray and DiagnosticSettingMetricArrayOutput values.
// You can construct a concrete instance of `DiagnosticSettingMetricArrayInput` via:
//
//	DiagnosticSettingMetricArray{ DiagnosticSettingMetricArgs{...} }
type DiagnosticSettingMetricArrayInput interface {
	pulumi.Input

	ToDiagnosticSettingMetricArrayOutput() DiagnosticSettingMetricArrayOutput
	ToDiagnosticSettingMetricArrayOutputWithContext(context.Context) DiagnosticSettingMetricArrayOutput
}

type DiagnosticSettingMetricArray []DiagnosticSettingMetricInput

func (DiagnosticSettingMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiagnosticSettingMetric)(nil)).Elem()
}

func (i DiagnosticSettingMetricArray) ToDiagnosticSettingMetricArrayOutput() DiagnosticSettingMetricArrayOutput {
	return i.ToDiagnosticSettingMetricArrayOutputWithContext(context.Background())
}

func (i DiagnosticSettingMetricArray) ToDiagnosticSettingMetricArrayOutputWithContext(ctx context.Context) DiagnosticSettingMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingMetricArrayOutput)
}

func (i DiagnosticSettingMetricArray) ToOutput(ctx context.Context) pulumix.Output[[]DiagnosticSettingMetric] {
	return pulumix.Output[[]DiagnosticSettingMetric]{
		OutputState: i.ToDiagnosticSettingMetricArrayOutputWithContext(ctx).OutputState,
	}
}

type DiagnosticSettingMetricOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticSettingMetric)(nil)).Elem()
}

func (o DiagnosticSettingMetricOutput) ToDiagnosticSettingMetricOutput() DiagnosticSettingMetricOutput {
	return o
}

func (o DiagnosticSettingMetricOutput) ToDiagnosticSettingMetricOutputWithContext(ctx context.Context) DiagnosticSettingMetricOutput {
	return o
}

func (o DiagnosticSettingMetricOutput) ToOutput(ctx context.Context) pulumix.Output[DiagnosticSettingMetric] {
	return pulumix.Output[DiagnosticSettingMetric]{
		OutputState: o.OutputState,
	}
}

// The name of a Diagnostic Metric Category for this Resource.
//
// > **NOTE:** The Metric Categories available vary depending on the Resource being used. You may wish to use the `monitoring.getDiagnosticCategories` Data Source to identify which categories are available for a given Resource.
func (o DiagnosticSettingMetricOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticSettingMetric) string { return v.Category }).(pulumi.StringOutput)
}

// Is this Diagnostic Metric enabled? Defaults to `true`.
func (o DiagnosticSettingMetricOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DiagnosticSettingMetric) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A `retentionPolicy` block as defined below.
//
// !> **NOTE:** `retentionPolicy` has been deprecated in favor of `storage.ManagementPolicy` resource - to learn more information on the deprecation [in the Azure documentation](https://aka.ms/diagnostic_settings_log_retention).
//
// Deprecated: `retention_policy` has been deprecated in favor of `azurerm_storage_management_policy` resource - to learn more https://aka.ms/diagnostic_settings_log_retention
func (o DiagnosticSettingMetricOutput) RetentionPolicy() DiagnosticSettingMetricRetentionPolicyPtrOutput {
	return o.ApplyT(func(v DiagnosticSettingMetric) *DiagnosticSettingMetricRetentionPolicy { return v.RetentionPolicy }).(DiagnosticSettingMetricRetentionPolicyPtrOutput)
}

type DiagnosticSettingMetricArrayOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiagnosticSettingMetric)(nil)).Elem()
}

func (o DiagnosticSettingMetricArrayOutput) ToDiagnosticSettingMetricArrayOutput() DiagnosticSettingMetricArrayOutput {
	return o
}

func (o DiagnosticSettingMetricArrayOutput) ToDiagnosticSettingMetricArrayOutputWithContext(ctx context.Context) DiagnosticSettingMetricArrayOutput {
	return o
}

func (o DiagnosticSettingMetricArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DiagnosticSettingMetric] {
	return pulumix.Output[[]DiagnosticSettingMetric]{
		OutputState: o.OutputState,
	}
}

func (o DiagnosticSettingMetricArrayOutput) Index(i pulumi.IntInput) DiagnosticSettingMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiagnosticSettingMetric {
		return vs[0].([]DiagnosticSettingMetric)[vs[1].(int)]
	}).(DiagnosticSettingMetricOutput)
}

type DiagnosticSettingMetricRetentionPolicy struct {
	// The number of days for which this Retention Policy should apply.
	//
	// > **NOTE:** Setting this to `0` will retain the events indefinitely.
	Days *int `pulumi:"days"`
	// Is this Retention Policy enabled?
	Enabled bool `pulumi:"enabled"`
}

// DiagnosticSettingMetricRetentionPolicyInput is an input type that accepts DiagnosticSettingMetricRetentionPolicyArgs and DiagnosticSettingMetricRetentionPolicyOutput values.
// You can construct a concrete instance of `DiagnosticSettingMetricRetentionPolicyInput` via:
//
//	DiagnosticSettingMetricRetentionPolicyArgs{...}
type DiagnosticSettingMetricRetentionPolicyInput interface {
	pulumi.Input

	ToDiagnosticSettingMetricRetentionPolicyOutput() DiagnosticSettingMetricRetentionPolicyOutput
	ToDiagnosticSettingMetricRetentionPolicyOutputWithContext(context.Context) DiagnosticSettingMetricRetentionPolicyOutput
}

type DiagnosticSettingMetricRetentionPolicyArgs struct {
	// The number of days for which this Retention Policy should apply.
	//
	// > **NOTE:** Setting this to `0` will retain the events indefinitely.
	Days pulumi.IntPtrInput `pulumi:"days"`
	// Is this Retention Policy enabled?
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (DiagnosticSettingMetricRetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticSettingMetricRetentionPolicy)(nil)).Elem()
}

func (i DiagnosticSettingMetricRetentionPolicyArgs) ToDiagnosticSettingMetricRetentionPolicyOutput() DiagnosticSettingMetricRetentionPolicyOutput {
	return i.ToDiagnosticSettingMetricRetentionPolicyOutputWithContext(context.Background())
}

func (i DiagnosticSettingMetricRetentionPolicyArgs) ToDiagnosticSettingMetricRetentionPolicyOutputWithContext(ctx context.Context) DiagnosticSettingMetricRetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingMetricRetentionPolicyOutput)
}

func (i DiagnosticSettingMetricRetentionPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[DiagnosticSettingMetricRetentionPolicy] {
	return pulumix.Output[DiagnosticSettingMetricRetentionPolicy]{
		OutputState: i.ToDiagnosticSettingMetricRetentionPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i DiagnosticSettingMetricRetentionPolicyArgs) ToDiagnosticSettingMetricRetentionPolicyPtrOutput() DiagnosticSettingMetricRetentionPolicyPtrOutput {
	return i.ToDiagnosticSettingMetricRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i DiagnosticSettingMetricRetentionPolicyArgs) ToDiagnosticSettingMetricRetentionPolicyPtrOutputWithContext(ctx context.Context) DiagnosticSettingMetricRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingMetricRetentionPolicyOutput).ToDiagnosticSettingMetricRetentionPolicyPtrOutputWithContext(ctx)
}

// DiagnosticSettingMetricRetentionPolicyPtrInput is an input type that accepts DiagnosticSettingMetricRetentionPolicyArgs, DiagnosticSettingMetricRetentionPolicyPtr and DiagnosticSettingMetricRetentionPolicyPtrOutput values.
// You can construct a concrete instance of `DiagnosticSettingMetricRetentionPolicyPtrInput` via:
//
//	        DiagnosticSettingMetricRetentionPolicyArgs{...}
//
//	or:
//
//	        nil
type DiagnosticSettingMetricRetentionPolicyPtrInput interface {
	pulumi.Input

	ToDiagnosticSettingMetricRetentionPolicyPtrOutput() DiagnosticSettingMetricRetentionPolicyPtrOutput
	ToDiagnosticSettingMetricRetentionPolicyPtrOutputWithContext(context.Context) DiagnosticSettingMetricRetentionPolicyPtrOutput
}

type diagnosticSettingMetricRetentionPolicyPtrType DiagnosticSettingMetricRetentionPolicyArgs

func DiagnosticSettingMetricRetentionPolicyPtr(v *DiagnosticSettingMetricRetentionPolicyArgs) DiagnosticSettingMetricRetentionPolicyPtrInput {
	return (*diagnosticSettingMetricRetentionPolicyPtrType)(v)
}

func (*diagnosticSettingMetricRetentionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticSettingMetricRetentionPolicy)(nil)).Elem()
}

func (i *diagnosticSettingMetricRetentionPolicyPtrType) ToDiagnosticSettingMetricRetentionPolicyPtrOutput() DiagnosticSettingMetricRetentionPolicyPtrOutput {
	return i.ToDiagnosticSettingMetricRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i *diagnosticSettingMetricRetentionPolicyPtrType) ToDiagnosticSettingMetricRetentionPolicyPtrOutputWithContext(ctx context.Context) DiagnosticSettingMetricRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingMetricRetentionPolicyPtrOutput)
}

func (i *diagnosticSettingMetricRetentionPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*DiagnosticSettingMetricRetentionPolicy] {
	return pulumix.Output[*DiagnosticSettingMetricRetentionPolicy]{
		OutputState: i.ToDiagnosticSettingMetricRetentionPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type DiagnosticSettingMetricRetentionPolicyOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingMetricRetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticSettingMetricRetentionPolicy)(nil)).Elem()
}

func (o DiagnosticSettingMetricRetentionPolicyOutput) ToDiagnosticSettingMetricRetentionPolicyOutput() DiagnosticSettingMetricRetentionPolicyOutput {
	return o
}

func (o DiagnosticSettingMetricRetentionPolicyOutput) ToDiagnosticSettingMetricRetentionPolicyOutputWithContext(ctx context.Context) DiagnosticSettingMetricRetentionPolicyOutput {
	return o
}

func (o DiagnosticSettingMetricRetentionPolicyOutput) ToDiagnosticSettingMetricRetentionPolicyPtrOutput() DiagnosticSettingMetricRetentionPolicyPtrOutput {
	return o.ToDiagnosticSettingMetricRetentionPolicyPtrOutputWithContext(context.Background())
}

func (o DiagnosticSettingMetricRetentionPolicyOutput) ToDiagnosticSettingMetricRetentionPolicyPtrOutputWithContext(ctx context.Context) DiagnosticSettingMetricRetentionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiagnosticSettingMetricRetentionPolicy) *DiagnosticSettingMetricRetentionPolicy {
		return &v
	}).(DiagnosticSettingMetricRetentionPolicyPtrOutput)
}

func (o DiagnosticSettingMetricRetentionPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[DiagnosticSettingMetricRetentionPolicy] {
	return pulumix.Output[DiagnosticSettingMetricRetentionPolicy]{
		OutputState: o.OutputState,
	}
}

// The number of days for which this Retention Policy should apply.
//
// > **NOTE:** Setting this to `0` will retain the events indefinitely.
func (o DiagnosticSettingMetricRetentionPolicyOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DiagnosticSettingMetricRetentionPolicy) *int { return v.Days }).(pulumi.IntPtrOutput)
}

// Is this Retention Policy enabled?
func (o DiagnosticSettingMetricRetentionPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DiagnosticSettingMetricRetentionPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type DiagnosticSettingMetricRetentionPolicyPtrOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingMetricRetentionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticSettingMetricRetentionPolicy)(nil)).Elem()
}

func (o DiagnosticSettingMetricRetentionPolicyPtrOutput) ToDiagnosticSettingMetricRetentionPolicyPtrOutput() DiagnosticSettingMetricRetentionPolicyPtrOutput {
	return o
}

func (o DiagnosticSettingMetricRetentionPolicyPtrOutput) ToDiagnosticSettingMetricRetentionPolicyPtrOutputWithContext(ctx context.Context) DiagnosticSettingMetricRetentionPolicyPtrOutput {
	return o
}

func (o DiagnosticSettingMetricRetentionPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DiagnosticSettingMetricRetentionPolicy] {
	return pulumix.Output[*DiagnosticSettingMetricRetentionPolicy]{
		OutputState: o.OutputState,
	}
}

func (o DiagnosticSettingMetricRetentionPolicyPtrOutput) Elem() DiagnosticSettingMetricRetentionPolicyOutput {
	return o.ApplyT(func(v *DiagnosticSettingMetricRetentionPolicy) DiagnosticSettingMetricRetentionPolicy {
		if v != nil {
			return *v
		}
		var ret DiagnosticSettingMetricRetentionPolicy
		return ret
	}).(DiagnosticSettingMetricRetentionPolicyOutput)
}

// The number of days for which this Retention Policy should apply.
//
// > **NOTE:** Setting this to `0` will retain the events indefinitely.
func (o DiagnosticSettingMetricRetentionPolicyPtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiagnosticSettingMetricRetentionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.IntPtrOutput)
}

// Is this Retention Policy enabled?
func (o DiagnosticSettingMetricRetentionPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiagnosticSettingMetricRetentionPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type LogProfileRetentionPolicy struct {
	// The number of days for the retention policy. Defaults to `0`.
	Days *int `pulumi:"days"`
	// A boolean value to indicate whether the retention policy is enabled.
	Enabled bool `pulumi:"enabled"`
}

// LogProfileRetentionPolicyInput is an input type that accepts LogProfileRetentionPolicyArgs and LogProfileRetentionPolicyOutput values.
// You can construct a concrete instance of `LogProfileRetentionPolicyInput` via:
//
//	LogProfileRetentionPolicyArgs{...}
type LogProfileRetentionPolicyInput interface {
	pulumi.Input

	ToLogProfileRetentionPolicyOutput() LogProfileRetentionPolicyOutput
	ToLogProfileRetentionPolicyOutputWithContext(context.Context) LogProfileRetentionPolicyOutput
}

type LogProfileRetentionPolicyArgs struct {
	// The number of days for the retention policy. Defaults to `0`.
	Days pulumi.IntPtrInput `pulumi:"days"`
	// A boolean value to indicate whether the retention policy is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (LogProfileRetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogProfileRetentionPolicy)(nil)).Elem()
}

func (i LogProfileRetentionPolicyArgs) ToLogProfileRetentionPolicyOutput() LogProfileRetentionPolicyOutput {
	return i.ToLogProfileRetentionPolicyOutputWithContext(context.Background())
}

func (i LogProfileRetentionPolicyArgs) ToLogProfileRetentionPolicyOutputWithContext(ctx context.Context) LogProfileRetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogProfileRetentionPolicyOutput)
}

func (i LogProfileRetentionPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[LogProfileRetentionPolicy] {
	return pulumix.Output[LogProfileRetentionPolicy]{
		OutputState: i.ToLogProfileRetentionPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i LogProfileRetentionPolicyArgs) ToLogProfileRetentionPolicyPtrOutput() LogProfileRetentionPolicyPtrOutput {
	return i.ToLogProfileRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i LogProfileRetentionPolicyArgs) ToLogProfileRetentionPolicyPtrOutputWithContext(ctx context.Context) LogProfileRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogProfileRetentionPolicyOutput).ToLogProfileRetentionPolicyPtrOutputWithContext(ctx)
}

// LogProfileRetentionPolicyPtrInput is an input type that accepts LogProfileRetentionPolicyArgs, LogProfileRetentionPolicyPtr and LogProfileRetentionPolicyPtrOutput values.
// You can construct a concrete instance of `LogProfileRetentionPolicyPtrInput` via:
//
//	        LogProfileRetentionPolicyArgs{...}
//
//	or:
//
//	        nil
type LogProfileRetentionPolicyPtrInput interface {
	pulumi.Input

	ToLogProfileRetentionPolicyPtrOutput() LogProfileRetentionPolicyPtrOutput
	ToLogProfileRetentionPolicyPtrOutputWithContext(context.Context) LogProfileRetentionPolicyPtrOutput
}

type logProfileRetentionPolicyPtrType LogProfileRetentionPolicyArgs

func LogProfileRetentionPolicyPtr(v *LogProfileRetentionPolicyArgs) LogProfileRetentionPolicyPtrInput {
	return (*logProfileRetentionPolicyPtrType)(v)
}

func (*logProfileRetentionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogProfileRetentionPolicy)(nil)).Elem()
}

func (i *logProfileRetentionPolicyPtrType) ToLogProfileRetentionPolicyPtrOutput() LogProfileRetentionPolicyPtrOutput {
	return i.ToLogProfileRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i *logProfileRetentionPolicyPtrType) ToLogProfileRetentionPolicyPtrOutputWithContext(ctx context.Context) LogProfileRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogProfileRetentionPolicyPtrOutput)
}

func (i *logProfileRetentionPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*LogProfileRetentionPolicy] {
	return pulumix.Output[*LogProfileRetentionPolicy]{
		OutputState: i.ToLogProfileRetentionPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

type LogProfileRetentionPolicyOutput struct{ *pulumi.OutputState }

func (LogProfileRetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogProfileRetentionPolicy)(nil)).Elem()
}

func (o LogProfileRetentionPolicyOutput) ToLogProfileRetentionPolicyOutput() LogProfileRetentionPolicyOutput {
	return o
}

func (o LogProfileRetentionPolicyOutput) ToLogProfileRetentionPolicyOutputWithContext(ctx context.Context) LogProfileRetentionPolicyOutput {
	return o
}

func (o LogProfileRetentionPolicyOutput) ToLogProfileRetentionPolicyPtrOutput() LogProfileRetentionPolicyPtrOutput {
	return o.ToLogProfileRetentionPolicyPtrOutputWithContext(context.Background())
}

func (o LogProfileRetentionPolicyOutput) ToLogProfileRetentionPolicyPtrOutputWithContext(ctx context.Context) LogProfileRetentionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogProfileRetentionPolicy) *LogProfileRetentionPolicy {
		return &v
	}).(LogProfileRetentionPolicyPtrOutput)
}

func (o LogProfileRetentionPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[LogProfileRetentionPolicy] {
	return pulumix.Output[LogProfileRetentionPolicy]{
		OutputState: o.OutputState,
	}
}

// The number of days for the retention policy. Defaults to `0`.
func (o LogProfileRetentionPolicyOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LogProfileRetentionPolicy) *int { return v.Days }).(pulumi.IntPtrOutput)
}

// A boolean value to indicate whether the retention policy is enabled.
func (o LogProfileRetentionPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LogProfileRetentionPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type LogProfileRetentionPolicyPtrOutput struct{ *pulumi.OutputState }

func (LogProfileRetentionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogProfileRetentionPolicy)(nil)).Elem()
}

func (o LogProfileRetentionPolicyPtrOutput) ToLogProfileRetentionPolicyPtrOutput() LogProfileRetentionPolicyPtrOutput {
	return o
}

func (o LogProfileRetentionPolicyPtrOutput) ToLogProfileRetentionPolicyPtrOutputWithContext(ctx context.Context) LogProfileRetentionPolicyPtrOutput {
	return o
}

func (o LogProfileRetentionPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LogProfileRetentionPolicy] {
	return pulumix.Output[*LogProfileRetentionPolicy]{
		OutputState: o.OutputState,
	}
}

func (o LogProfileRetentionPolicyPtrOutput) Elem() LogProfileRetentionPolicyOutput {
	return o.ApplyT(func(v *LogProfileRetentionPolicy) LogProfileRetentionPolicy {
		if v != nil {
			return *v
		}
		var ret LogProfileRetentionPolicy
		return ret
	}).(LogProfileRetentionPolicyOutput)
}

// The number of days for the retention policy. Defaults to `0`.
func (o LogProfileRetentionPolicyPtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogProfileRetentionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.IntPtrOutput)
}

// A boolean value to indicate whether the retention policy is enabled.
func (o LogProfileRetentionPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogProfileRetentionPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type LogzMonitorPlan struct {
	// Different billing cycles. Possible values are `MONTHLY` or `WEEKLY`. Changing this forces a new logz Monitor to be created.
	BillingCycle string `pulumi:"billingCycle"`
	// Date when plan was applied. Changing this forces a new logz Monitor to be created.
	EffectiveDate string `pulumi:"effectiveDate"`
	// Plan id as published by Logz. The only possible value is `100gb14days`. Defaults to `100gb14days`. Changing this forces a new logz Monitor to be created.
	PlanId *string `pulumi:"planId"`
	// Different usage types. Possible values are `PAYG` or `COMMITTED`. Changing this forces a new logz Monitor to be created.
	UsageType string `pulumi:"usageType"`
}

// LogzMonitorPlanInput is an input type that accepts LogzMonitorPlanArgs and LogzMonitorPlanOutput values.
// You can construct a concrete instance of `LogzMonitorPlanInput` via:
//
//	LogzMonitorPlanArgs{...}
type LogzMonitorPlanInput interface {
	pulumi.Input

	ToLogzMonitorPlanOutput() LogzMonitorPlanOutput
	ToLogzMonitorPlanOutputWithContext(context.Context) LogzMonitorPlanOutput
}

type LogzMonitorPlanArgs struct {
	// Different billing cycles. Possible values are `MONTHLY` or `WEEKLY`. Changing this forces a new logz Monitor to be created.
	BillingCycle pulumi.StringInput `pulumi:"billingCycle"`
	// Date when plan was applied. Changing this forces a new logz Monitor to be created.
	EffectiveDate pulumi.StringInput `pulumi:"effectiveDate"`
	// Plan id as published by Logz. The only possible value is `100gb14days`. Defaults to `100gb14days`. Changing this forces a new logz Monitor to be created.
	PlanId pulumi.StringPtrInput `pulumi:"planId"`
	// Different usage types. Possible values are `PAYG` or `COMMITTED`. Changing this forces a new logz Monitor to be created.
	UsageType pulumi.StringInput `pulumi:"usageType"`
}

func (LogzMonitorPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogzMonitorPlan)(nil)).Elem()
}

func (i LogzMonitorPlanArgs) ToLogzMonitorPlanOutput() LogzMonitorPlanOutput {
	return i.ToLogzMonitorPlanOutputWithContext(context.Background())
}

func (i LogzMonitorPlanArgs) ToLogzMonitorPlanOutputWithContext(ctx context.Context) LogzMonitorPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzMonitorPlanOutput)
}

func (i LogzMonitorPlanArgs) ToOutput(ctx context.Context) pulumix.Output[LogzMonitorPlan] {
	return pulumix.Output[LogzMonitorPlan]{
		OutputState: i.ToLogzMonitorPlanOutputWithContext(ctx).OutputState,
	}
}

func (i LogzMonitorPlanArgs) ToLogzMonitorPlanPtrOutput() LogzMonitorPlanPtrOutput {
	return i.ToLogzMonitorPlanPtrOutputWithContext(context.Background())
}

func (i LogzMonitorPlanArgs) ToLogzMonitorPlanPtrOutputWithContext(ctx context.Context) LogzMonitorPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzMonitorPlanOutput).ToLogzMonitorPlanPtrOutputWithContext(ctx)
}

// LogzMonitorPlanPtrInput is an input type that accepts LogzMonitorPlanArgs, LogzMonitorPlanPtr and LogzMonitorPlanPtrOutput values.
// You can construct a concrete instance of `LogzMonitorPlanPtrInput` via:
//
//	        LogzMonitorPlanArgs{...}
//
//	or:
//
//	        nil
type LogzMonitorPlanPtrInput interface {
	pulumi.Input

	ToLogzMonitorPlanPtrOutput() LogzMonitorPlanPtrOutput
	ToLogzMonitorPlanPtrOutputWithContext(context.Context) LogzMonitorPlanPtrOutput
}

type logzMonitorPlanPtrType LogzMonitorPlanArgs

func LogzMonitorPlanPtr(v *LogzMonitorPlanArgs) LogzMonitorPlanPtrInput {
	return (*logzMonitorPlanPtrType)(v)
}

func (*logzMonitorPlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogzMonitorPlan)(nil)).Elem()
}

func (i *logzMonitorPlanPtrType) ToLogzMonitorPlanPtrOutput() LogzMonitorPlanPtrOutput {
	return i.ToLogzMonitorPlanPtrOutputWithContext(context.Background())
}

func (i *logzMonitorPlanPtrType) ToLogzMonitorPlanPtrOutputWithContext(ctx context.Context) LogzMonitorPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzMonitorPlanPtrOutput)
}

func (i *logzMonitorPlanPtrType) ToOutput(ctx context.Context) pulumix.Output[*LogzMonitorPlan] {
	return pulumix.Output[*LogzMonitorPlan]{
		OutputState: i.ToLogzMonitorPlanPtrOutputWithContext(ctx).OutputState,
	}
}

type LogzMonitorPlanOutput struct{ *pulumi.OutputState }

func (LogzMonitorPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogzMonitorPlan)(nil)).Elem()
}

func (o LogzMonitorPlanOutput) ToLogzMonitorPlanOutput() LogzMonitorPlanOutput {
	return o
}

func (o LogzMonitorPlanOutput) ToLogzMonitorPlanOutputWithContext(ctx context.Context) LogzMonitorPlanOutput {
	return o
}

func (o LogzMonitorPlanOutput) ToLogzMonitorPlanPtrOutput() LogzMonitorPlanPtrOutput {
	return o.ToLogzMonitorPlanPtrOutputWithContext(context.Background())
}

func (o LogzMonitorPlanOutput) ToLogzMonitorPlanPtrOutputWithContext(ctx context.Context) LogzMonitorPlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogzMonitorPlan) *LogzMonitorPlan {
		return &v
	}).(LogzMonitorPlanPtrOutput)
}

func (o LogzMonitorPlanOutput) ToOutput(ctx context.Context) pulumix.Output[LogzMonitorPlan] {
	return pulumix.Output[LogzMonitorPlan]{
		OutputState: o.OutputState,
	}
}

// Different billing cycles. Possible values are `MONTHLY` or `WEEKLY`. Changing this forces a new logz Monitor to be created.
func (o LogzMonitorPlanOutput) BillingCycle() pulumi.StringOutput {
	return o.ApplyT(func(v LogzMonitorPlan) string { return v.BillingCycle }).(pulumi.StringOutput)
}

// Date when plan was applied. Changing this forces a new logz Monitor to be created.
func (o LogzMonitorPlanOutput) EffectiveDate() pulumi.StringOutput {
	return o.ApplyT(func(v LogzMonitorPlan) string { return v.EffectiveDate }).(pulumi.StringOutput)
}

// Plan id as published by Logz. The only possible value is `100gb14days`. Defaults to `100gb14days`. Changing this forces a new logz Monitor to be created.
func (o LogzMonitorPlanOutput) PlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogzMonitorPlan) *string { return v.PlanId }).(pulumi.StringPtrOutput)
}

// Different usage types. Possible values are `PAYG` or `COMMITTED`. Changing this forces a new logz Monitor to be created.
func (o LogzMonitorPlanOutput) UsageType() pulumi.StringOutput {
	return o.ApplyT(func(v LogzMonitorPlan) string { return v.UsageType }).(pulumi.StringOutput)
}

type LogzMonitorPlanPtrOutput struct{ *pulumi.OutputState }

func (LogzMonitorPlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogzMonitorPlan)(nil)).Elem()
}

func (o LogzMonitorPlanPtrOutput) ToLogzMonitorPlanPtrOutput() LogzMonitorPlanPtrOutput {
	return o
}

func (o LogzMonitorPlanPtrOutput) ToLogzMonitorPlanPtrOutputWithContext(ctx context.Context) LogzMonitorPlanPtrOutput {
	return o
}

func (o LogzMonitorPlanPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LogzMonitorPlan] {
	return pulumix.Output[*LogzMonitorPlan]{
		OutputState: o.OutputState,
	}
}

func (o LogzMonitorPlanPtrOutput) Elem() LogzMonitorPlanOutput {
	return o.ApplyT(func(v *LogzMonitorPlan) LogzMonitorPlan {
		if v != nil {
			return *v
		}
		var ret LogzMonitorPlan
		return ret
	}).(LogzMonitorPlanOutput)
}

// Different billing cycles. Possible values are `MONTHLY` or `WEEKLY`. Changing this forces a new logz Monitor to be created.
func (o LogzMonitorPlanPtrOutput) BillingCycle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzMonitorPlan) *string {
		if v == nil {
			return nil
		}
		return &v.BillingCycle
	}).(pulumi.StringPtrOutput)
}

// Date when plan was applied. Changing this forces a new logz Monitor to be created.
func (o LogzMonitorPlanPtrOutput) EffectiveDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzMonitorPlan) *string {
		if v == nil {
			return nil
		}
		return &v.EffectiveDate
	}).(pulumi.StringPtrOutput)
}

// Plan id as published by Logz. The only possible value is `100gb14days`. Defaults to `100gb14days`. Changing this forces a new logz Monitor to be created.
func (o LogzMonitorPlanPtrOutput) PlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzMonitorPlan) *string {
		if v == nil {
			return nil
		}
		return v.PlanId
	}).(pulumi.StringPtrOutput)
}

// Different usage types. Possible values are `PAYG` or `COMMITTED`. Changing this forces a new logz Monitor to be created.
func (o LogzMonitorPlanPtrOutput) UsageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzMonitorPlan) *string {
		if v == nil {
			return nil
		}
		return &v.UsageType
	}).(pulumi.StringPtrOutput)
}

type LogzMonitorUser struct {
	// Email of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
	//
	// > **NOTE** If you use the Azure CLI to authenticate to Azure, the Email of your Azure account needs to be granted the admin permission in your Logz.io account. Otherwise, you may not be able to delete this resource. There is no such limitation for the Service Principal authentication.
	Email string `pulumi:"email"`
	// First Name of the user. Changing this forces a new logz Monitor to be created.
	FirstName string `pulumi:"firstName"`
	// Last Name of the user. Changing this forces a new logz Monitor to be created.
	LastName string `pulumi:"lastName"`
	// Phone number of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// LogzMonitorUserInput is an input type that accepts LogzMonitorUserArgs and LogzMonitorUserOutput values.
// You can construct a concrete instance of `LogzMonitorUserInput` via:
//
//	LogzMonitorUserArgs{...}
type LogzMonitorUserInput interface {
	pulumi.Input

	ToLogzMonitorUserOutput() LogzMonitorUserOutput
	ToLogzMonitorUserOutputWithContext(context.Context) LogzMonitorUserOutput
}

type LogzMonitorUserArgs struct {
	// Email of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
	//
	// > **NOTE** If you use the Azure CLI to authenticate to Azure, the Email of your Azure account needs to be granted the admin permission in your Logz.io account. Otherwise, you may not be able to delete this resource. There is no such limitation for the Service Principal authentication.
	Email pulumi.StringInput `pulumi:"email"`
	// First Name of the user. Changing this forces a new logz Monitor to be created.
	FirstName pulumi.StringInput `pulumi:"firstName"`
	// Last Name of the user. Changing this forces a new logz Monitor to be created.
	LastName pulumi.StringInput `pulumi:"lastName"`
	// Phone number of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (LogzMonitorUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogzMonitorUser)(nil)).Elem()
}

func (i LogzMonitorUserArgs) ToLogzMonitorUserOutput() LogzMonitorUserOutput {
	return i.ToLogzMonitorUserOutputWithContext(context.Background())
}

func (i LogzMonitorUserArgs) ToLogzMonitorUserOutputWithContext(ctx context.Context) LogzMonitorUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzMonitorUserOutput)
}

func (i LogzMonitorUserArgs) ToOutput(ctx context.Context) pulumix.Output[LogzMonitorUser] {
	return pulumix.Output[LogzMonitorUser]{
		OutputState: i.ToLogzMonitorUserOutputWithContext(ctx).OutputState,
	}
}

func (i LogzMonitorUserArgs) ToLogzMonitorUserPtrOutput() LogzMonitorUserPtrOutput {
	return i.ToLogzMonitorUserPtrOutputWithContext(context.Background())
}

func (i LogzMonitorUserArgs) ToLogzMonitorUserPtrOutputWithContext(ctx context.Context) LogzMonitorUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzMonitorUserOutput).ToLogzMonitorUserPtrOutputWithContext(ctx)
}

// LogzMonitorUserPtrInput is an input type that accepts LogzMonitorUserArgs, LogzMonitorUserPtr and LogzMonitorUserPtrOutput values.
// You can construct a concrete instance of `LogzMonitorUserPtrInput` via:
//
//	        LogzMonitorUserArgs{...}
//
//	or:
//
//	        nil
type LogzMonitorUserPtrInput interface {
	pulumi.Input

	ToLogzMonitorUserPtrOutput() LogzMonitorUserPtrOutput
	ToLogzMonitorUserPtrOutputWithContext(context.Context) LogzMonitorUserPtrOutput
}

type logzMonitorUserPtrType LogzMonitorUserArgs

func LogzMonitorUserPtr(v *LogzMonitorUserArgs) LogzMonitorUserPtrInput {
	return (*logzMonitorUserPtrType)(v)
}

func (*logzMonitorUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogzMonitorUser)(nil)).Elem()
}

func (i *logzMonitorUserPtrType) ToLogzMonitorUserPtrOutput() LogzMonitorUserPtrOutput {
	return i.ToLogzMonitorUserPtrOutputWithContext(context.Background())
}

func (i *logzMonitorUserPtrType) ToLogzMonitorUserPtrOutputWithContext(ctx context.Context) LogzMonitorUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzMonitorUserPtrOutput)
}

func (i *logzMonitorUserPtrType) ToOutput(ctx context.Context) pulumix.Output[*LogzMonitorUser] {
	return pulumix.Output[*LogzMonitorUser]{
		OutputState: i.ToLogzMonitorUserPtrOutputWithContext(ctx).OutputState,
	}
}

type LogzMonitorUserOutput struct{ *pulumi.OutputState }

func (LogzMonitorUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogzMonitorUser)(nil)).Elem()
}

func (o LogzMonitorUserOutput) ToLogzMonitorUserOutput() LogzMonitorUserOutput {
	return o
}

func (o LogzMonitorUserOutput) ToLogzMonitorUserOutputWithContext(ctx context.Context) LogzMonitorUserOutput {
	return o
}

func (o LogzMonitorUserOutput) ToLogzMonitorUserPtrOutput() LogzMonitorUserPtrOutput {
	return o.ToLogzMonitorUserPtrOutputWithContext(context.Background())
}

func (o LogzMonitorUserOutput) ToLogzMonitorUserPtrOutputWithContext(ctx context.Context) LogzMonitorUserPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogzMonitorUser) *LogzMonitorUser {
		return &v
	}).(LogzMonitorUserPtrOutput)
}

func (o LogzMonitorUserOutput) ToOutput(ctx context.Context) pulumix.Output[LogzMonitorUser] {
	return pulumix.Output[LogzMonitorUser]{
		OutputState: o.OutputState,
	}
}

// Email of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
//
// > **NOTE** If you use the Azure CLI to authenticate to Azure, the Email of your Azure account needs to be granted the admin permission in your Logz.io account. Otherwise, you may not be able to delete this resource. There is no such limitation for the Service Principal authentication.
func (o LogzMonitorUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LogzMonitorUser) string { return v.Email }).(pulumi.StringOutput)
}

// First Name of the user. Changing this forces a new logz Monitor to be created.
func (o LogzMonitorUserOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v LogzMonitorUser) string { return v.FirstName }).(pulumi.StringOutput)
}

// Last Name of the user. Changing this forces a new logz Monitor to be created.
func (o LogzMonitorUserOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v LogzMonitorUser) string { return v.LastName }).(pulumi.StringOutput)
}

// Phone number of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
func (o LogzMonitorUserOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v LogzMonitorUser) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type LogzMonitorUserPtrOutput struct{ *pulumi.OutputState }

func (LogzMonitorUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogzMonitorUser)(nil)).Elem()
}

func (o LogzMonitorUserPtrOutput) ToLogzMonitorUserPtrOutput() LogzMonitorUserPtrOutput {
	return o
}

func (o LogzMonitorUserPtrOutput) ToLogzMonitorUserPtrOutputWithContext(ctx context.Context) LogzMonitorUserPtrOutput {
	return o
}

func (o LogzMonitorUserPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LogzMonitorUser] {
	return pulumix.Output[*LogzMonitorUser]{
		OutputState: o.OutputState,
	}
}

func (o LogzMonitorUserPtrOutput) Elem() LogzMonitorUserOutput {
	return o.ApplyT(func(v *LogzMonitorUser) LogzMonitorUser {
		if v != nil {
			return *v
		}
		var ret LogzMonitorUser
		return ret
	}).(LogzMonitorUserOutput)
}

// Email of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
//
// > **NOTE** If you use the Azure CLI to authenticate to Azure, the Email of your Azure account needs to be granted the admin permission in your Logz.io account. Otherwise, you may not be able to delete this resource. There is no such limitation for the Service Principal authentication.
func (o LogzMonitorUserPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzMonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// First Name of the user. Changing this forces a new logz Monitor to be created.
func (o LogzMonitorUserPtrOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzMonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.FirstName
	}).(pulumi.StringPtrOutput)
}

// Last Name of the user. Changing this forces a new logz Monitor to be created.
func (o LogzMonitorUserPtrOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzMonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.LastName
	}).(pulumi.StringPtrOutput)
}

// Phone number of the user used by Logz for contacting them if needed. Changing this forces a new logz Monitor to be created.
func (o LogzMonitorUserPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzMonitorUser) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

type LogzSubAccountTagRuleTagFilter struct {
	// The action is used to limit logs collection to include or exclude Azure resources with specific tags. Possible values are `Include` and `Exclude`. Note that the `Exclude` takes priority over the `Include`.
	Action string `pulumi:"action"`
	// The name of the tag to match.
	Name string `pulumi:"name"`
	// The value of the tag to match.
	Value *string `pulumi:"value"`
}

// LogzSubAccountTagRuleTagFilterInput is an input type that accepts LogzSubAccountTagRuleTagFilterArgs and LogzSubAccountTagRuleTagFilterOutput values.
// You can construct a concrete instance of `LogzSubAccountTagRuleTagFilterInput` via:
//
//	LogzSubAccountTagRuleTagFilterArgs{...}
type LogzSubAccountTagRuleTagFilterInput interface {
	pulumi.Input

	ToLogzSubAccountTagRuleTagFilterOutput() LogzSubAccountTagRuleTagFilterOutput
	ToLogzSubAccountTagRuleTagFilterOutputWithContext(context.Context) LogzSubAccountTagRuleTagFilterOutput
}

type LogzSubAccountTagRuleTagFilterArgs struct {
	// The action is used to limit logs collection to include or exclude Azure resources with specific tags. Possible values are `Include` and `Exclude`. Note that the `Exclude` takes priority over the `Include`.
	Action pulumi.StringInput `pulumi:"action"`
	// The name of the tag to match.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the tag to match.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LogzSubAccountTagRuleTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogzSubAccountTagRuleTagFilter)(nil)).Elem()
}

func (i LogzSubAccountTagRuleTagFilterArgs) ToLogzSubAccountTagRuleTagFilterOutput() LogzSubAccountTagRuleTagFilterOutput {
	return i.ToLogzSubAccountTagRuleTagFilterOutputWithContext(context.Background())
}

func (i LogzSubAccountTagRuleTagFilterArgs) ToLogzSubAccountTagRuleTagFilterOutputWithContext(ctx context.Context) LogzSubAccountTagRuleTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzSubAccountTagRuleTagFilterOutput)
}

func (i LogzSubAccountTagRuleTagFilterArgs) ToOutput(ctx context.Context) pulumix.Output[LogzSubAccountTagRuleTagFilter] {
	return pulumix.Output[LogzSubAccountTagRuleTagFilter]{
		OutputState: i.ToLogzSubAccountTagRuleTagFilterOutputWithContext(ctx).OutputState,
	}
}

// LogzSubAccountTagRuleTagFilterArrayInput is an input type that accepts LogzSubAccountTagRuleTagFilterArray and LogzSubAccountTagRuleTagFilterArrayOutput values.
// You can construct a concrete instance of `LogzSubAccountTagRuleTagFilterArrayInput` via:
//
//	LogzSubAccountTagRuleTagFilterArray{ LogzSubAccountTagRuleTagFilterArgs{...} }
type LogzSubAccountTagRuleTagFilterArrayInput interface {
	pulumi.Input

	ToLogzSubAccountTagRuleTagFilterArrayOutput() LogzSubAccountTagRuleTagFilterArrayOutput
	ToLogzSubAccountTagRuleTagFilterArrayOutputWithContext(context.Context) LogzSubAccountTagRuleTagFilterArrayOutput
}

type LogzSubAccountTagRuleTagFilterArray []LogzSubAccountTagRuleTagFilterInput

func (LogzSubAccountTagRuleTagFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogzSubAccountTagRuleTagFilter)(nil)).Elem()
}

func (i LogzSubAccountTagRuleTagFilterArray) ToLogzSubAccountTagRuleTagFilterArrayOutput() LogzSubAccountTagRuleTagFilterArrayOutput {
	return i.ToLogzSubAccountTagRuleTagFilterArrayOutputWithContext(context.Background())
}

func (i LogzSubAccountTagRuleTagFilterArray) ToLogzSubAccountTagRuleTagFilterArrayOutputWithContext(ctx context.Context) LogzSubAccountTagRuleTagFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzSubAccountTagRuleTagFilterArrayOutput)
}

func (i LogzSubAccountTagRuleTagFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]LogzSubAccountTagRuleTagFilter] {
	return pulumix.Output[[]LogzSubAccountTagRuleTagFilter]{
		OutputState: i.ToLogzSubAccountTagRuleTagFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type LogzSubAccountTagRuleTagFilterOutput struct{ *pulumi.OutputState }

func (LogzSubAccountTagRuleTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogzSubAccountTagRuleTagFilter)(nil)).Elem()
}

func (o LogzSubAccountTagRuleTagFilterOutput) ToLogzSubAccountTagRuleTagFilterOutput() LogzSubAccountTagRuleTagFilterOutput {
	return o
}

func (o LogzSubAccountTagRuleTagFilterOutput) ToLogzSubAccountTagRuleTagFilterOutputWithContext(ctx context.Context) LogzSubAccountTagRuleTagFilterOutput {
	return o
}

func (o LogzSubAccountTagRuleTagFilterOutput) ToOutput(ctx context.Context) pulumix.Output[LogzSubAccountTagRuleTagFilter] {
	return pulumix.Output[LogzSubAccountTagRuleTagFilter]{
		OutputState: o.OutputState,
	}
}

// The action is used to limit logs collection to include or exclude Azure resources with specific tags. Possible values are `Include` and `Exclude`. Note that the `Exclude` takes priority over the `Include`.
func (o LogzSubAccountTagRuleTagFilterOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v LogzSubAccountTagRuleTagFilter) string { return v.Action }).(pulumi.StringOutput)
}

// The name of the tag to match.
func (o LogzSubAccountTagRuleTagFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogzSubAccountTagRuleTagFilter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the tag to match.
func (o LogzSubAccountTagRuleTagFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogzSubAccountTagRuleTagFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LogzSubAccountTagRuleTagFilterArrayOutput struct{ *pulumi.OutputState }

func (LogzSubAccountTagRuleTagFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogzSubAccountTagRuleTagFilter)(nil)).Elem()
}

func (o LogzSubAccountTagRuleTagFilterArrayOutput) ToLogzSubAccountTagRuleTagFilterArrayOutput() LogzSubAccountTagRuleTagFilterArrayOutput {
	return o
}

func (o LogzSubAccountTagRuleTagFilterArrayOutput) ToLogzSubAccountTagRuleTagFilterArrayOutputWithContext(ctx context.Context) LogzSubAccountTagRuleTagFilterArrayOutput {
	return o
}

func (o LogzSubAccountTagRuleTagFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LogzSubAccountTagRuleTagFilter] {
	return pulumix.Output[[]LogzSubAccountTagRuleTagFilter]{
		OutputState: o.OutputState,
	}
}

func (o LogzSubAccountTagRuleTagFilterArrayOutput) Index(i pulumi.IntInput) LogzSubAccountTagRuleTagFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogzSubAccountTagRuleTagFilter {
		return vs[0].([]LogzSubAccountTagRuleTagFilter)[vs[1].(int)]
	}).(LogzSubAccountTagRuleTagFilterOutput)
}

type LogzSubAccountUser struct {
	// Email of the user used by Logz for contacting them if needed. A valid email address consists of an email prefix and an email domain. The prefix and domain may contain only letters, numbers, underscores, periods and dashes. Changing this forces a new logz Sub Account to be created.
	//
	// > **NOTE** If you use the Azure CLI to authenticate to Azure, the Email of your Azure account needs to be granted the admin permission in your Logz.io account. Otherwise, you may not be able to delete this resource. There is no such limitation for the Service Principal authentication.
	Email string `pulumi:"email"`
	// First Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
	FirstName string `pulumi:"firstName"`
	// Last Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
	LastName string `pulumi:"lastName"`
	// Phone number of the user used by Logz for contacting them if needed. Possible values must be between 1 and 40 characters in length. Changing this forces a new logz Sub Account to be created.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// LogzSubAccountUserInput is an input type that accepts LogzSubAccountUserArgs and LogzSubAccountUserOutput values.
// You can construct a concrete instance of `LogzSubAccountUserInput` via:
//
//	LogzSubAccountUserArgs{...}
type LogzSubAccountUserInput interface {
	pulumi.Input

	ToLogzSubAccountUserOutput() LogzSubAccountUserOutput
	ToLogzSubAccountUserOutputWithContext(context.Context) LogzSubAccountUserOutput
}

type LogzSubAccountUserArgs struct {
	// Email of the user used by Logz for contacting them if needed. A valid email address consists of an email prefix and an email domain. The prefix and domain may contain only letters, numbers, underscores, periods and dashes. Changing this forces a new logz Sub Account to be created.
	//
	// > **NOTE** If you use the Azure CLI to authenticate to Azure, the Email of your Azure account needs to be granted the admin permission in your Logz.io account. Otherwise, you may not be able to delete this resource. There is no such limitation for the Service Principal authentication.
	Email pulumi.StringInput `pulumi:"email"`
	// First Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
	FirstName pulumi.StringInput `pulumi:"firstName"`
	// Last Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
	LastName pulumi.StringInput `pulumi:"lastName"`
	// Phone number of the user used by Logz for contacting them if needed. Possible values must be between 1 and 40 characters in length. Changing this forces a new logz Sub Account to be created.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (LogzSubAccountUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogzSubAccountUser)(nil)).Elem()
}

func (i LogzSubAccountUserArgs) ToLogzSubAccountUserOutput() LogzSubAccountUserOutput {
	return i.ToLogzSubAccountUserOutputWithContext(context.Background())
}

func (i LogzSubAccountUserArgs) ToLogzSubAccountUserOutputWithContext(ctx context.Context) LogzSubAccountUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzSubAccountUserOutput)
}

func (i LogzSubAccountUserArgs) ToOutput(ctx context.Context) pulumix.Output[LogzSubAccountUser] {
	return pulumix.Output[LogzSubAccountUser]{
		OutputState: i.ToLogzSubAccountUserOutputWithContext(ctx).OutputState,
	}
}

func (i LogzSubAccountUserArgs) ToLogzSubAccountUserPtrOutput() LogzSubAccountUserPtrOutput {
	return i.ToLogzSubAccountUserPtrOutputWithContext(context.Background())
}

func (i LogzSubAccountUserArgs) ToLogzSubAccountUserPtrOutputWithContext(ctx context.Context) LogzSubAccountUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzSubAccountUserOutput).ToLogzSubAccountUserPtrOutputWithContext(ctx)
}

// LogzSubAccountUserPtrInput is an input type that accepts LogzSubAccountUserArgs, LogzSubAccountUserPtr and LogzSubAccountUserPtrOutput values.
// You can construct a concrete instance of `LogzSubAccountUserPtrInput` via:
//
//	        LogzSubAccountUserArgs{...}
//
//	or:
//
//	        nil
type LogzSubAccountUserPtrInput interface {
	pulumi.Input

	ToLogzSubAccountUserPtrOutput() LogzSubAccountUserPtrOutput
	ToLogzSubAccountUserPtrOutputWithContext(context.Context) LogzSubAccountUserPtrOutput
}

type logzSubAccountUserPtrType LogzSubAccountUserArgs

func LogzSubAccountUserPtr(v *LogzSubAccountUserArgs) LogzSubAccountUserPtrInput {
	return (*logzSubAccountUserPtrType)(v)
}

func (*logzSubAccountUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogzSubAccountUser)(nil)).Elem()
}

func (i *logzSubAccountUserPtrType) ToLogzSubAccountUserPtrOutput() LogzSubAccountUserPtrOutput {
	return i.ToLogzSubAccountUserPtrOutputWithContext(context.Background())
}

func (i *logzSubAccountUserPtrType) ToLogzSubAccountUserPtrOutputWithContext(ctx context.Context) LogzSubAccountUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzSubAccountUserPtrOutput)
}

func (i *logzSubAccountUserPtrType) ToOutput(ctx context.Context) pulumix.Output[*LogzSubAccountUser] {
	return pulumix.Output[*LogzSubAccountUser]{
		OutputState: i.ToLogzSubAccountUserPtrOutputWithContext(ctx).OutputState,
	}
}

type LogzSubAccountUserOutput struct{ *pulumi.OutputState }

func (LogzSubAccountUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogzSubAccountUser)(nil)).Elem()
}

func (o LogzSubAccountUserOutput) ToLogzSubAccountUserOutput() LogzSubAccountUserOutput {
	return o
}

func (o LogzSubAccountUserOutput) ToLogzSubAccountUserOutputWithContext(ctx context.Context) LogzSubAccountUserOutput {
	return o
}

func (o LogzSubAccountUserOutput) ToLogzSubAccountUserPtrOutput() LogzSubAccountUserPtrOutput {
	return o.ToLogzSubAccountUserPtrOutputWithContext(context.Background())
}

func (o LogzSubAccountUserOutput) ToLogzSubAccountUserPtrOutputWithContext(ctx context.Context) LogzSubAccountUserPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogzSubAccountUser) *LogzSubAccountUser {
		return &v
	}).(LogzSubAccountUserPtrOutput)
}

func (o LogzSubAccountUserOutput) ToOutput(ctx context.Context) pulumix.Output[LogzSubAccountUser] {
	return pulumix.Output[LogzSubAccountUser]{
		OutputState: o.OutputState,
	}
}

// Email of the user used by Logz for contacting them if needed. A valid email address consists of an email prefix and an email domain. The prefix and domain may contain only letters, numbers, underscores, periods and dashes. Changing this forces a new logz Sub Account to be created.
//
// > **NOTE** If you use the Azure CLI to authenticate to Azure, the Email of your Azure account needs to be granted the admin permission in your Logz.io account. Otherwise, you may not be able to delete this resource. There is no such limitation for the Service Principal authentication.
func (o LogzSubAccountUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LogzSubAccountUser) string { return v.Email }).(pulumi.StringOutput)
}

// First Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
func (o LogzSubAccountUserOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v LogzSubAccountUser) string { return v.FirstName }).(pulumi.StringOutput)
}

// Last Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
func (o LogzSubAccountUserOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v LogzSubAccountUser) string { return v.LastName }).(pulumi.StringOutput)
}

// Phone number of the user used by Logz for contacting them if needed. Possible values must be between 1 and 40 characters in length. Changing this forces a new logz Sub Account to be created.
func (o LogzSubAccountUserOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v LogzSubAccountUser) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type LogzSubAccountUserPtrOutput struct{ *pulumi.OutputState }

func (LogzSubAccountUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogzSubAccountUser)(nil)).Elem()
}

func (o LogzSubAccountUserPtrOutput) ToLogzSubAccountUserPtrOutput() LogzSubAccountUserPtrOutput {
	return o
}

func (o LogzSubAccountUserPtrOutput) ToLogzSubAccountUserPtrOutputWithContext(ctx context.Context) LogzSubAccountUserPtrOutput {
	return o
}

func (o LogzSubAccountUserPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LogzSubAccountUser] {
	return pulumix.Output[*LogzSubAccountUser]{
		OutputState: o.OutputState,
	}
}

func (o LogzSubAccountUserPtrOutput) Elem() LogzSubAccountUserOutput {
	return o.ApplyT(func(v *LogzSubAccountUser) LogzSubAccountUser {
		if v != nil {
			return *v
		}
		var ret LogzSubAccountUser
		return ret
	}).(LogzSubAccountUserOutput)
}

// Email of the user used by Logz for contacting them if needed. A valid email address consists of an email prefix and an email domain. The prefix and domain may contain only letters, numbers, underscores, periods and dashes. Changing this forces a new logz Sub Account to be created.
//
// > **NOTE** If you use the Azure CLI to authenticate to Azure, the Email of your Azure account needs to be granted the admin permission in your Logz.io account. Otherwise, you may not be able to delete this resource. There is no such limitation for the Service Principal authentication.
func (o LogzSubAccountUserPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzSubAccountUser) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// First Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
func (o LogzSubAccountUserPtrOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzSubAccountUser) *string {
		if v == nil {
			return nil
		}
		return &v.FirstName
	}).(pulumi.StringPtrOutput)
}

// Last Name of the user. Possible values must be between 1 and 50 characters in length. Changing this forces a new logz Sub Account to be created.
func (o LogzSubAccountUserPtrOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzSubAccountUser) *string {
		if v == nil {
			return nil
		}
		return &v.LastName
	}).(pulumi.StringPtrOutput)
}

// Phone number of the user used by Logz for contacting them if needed. Possible values must be between 1 and 40 characters in length. Changing this forces a new logz Sub Account to be created.
func (o LogzSubAccountUserPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogzSubAccountUser) *string {
		if v == nil {
			return nil
		}
		return &v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

type LogzTagRuleTagFilter struct {
	// The action for a filtering tag. Possible values are `Include` and `Exclude` is allowed. Note that the `Exclude` takes priority over the `Include`.
	Action string `pulumi:"action"`
	// The name of this `tagFilter`.
	Name string `pulumi:"name"`
	// The value of this `tagFilter`.
	Value *string `pulumi:"value"`
}

// LogzTagRuleTagFilterInput is an input type that accepts LogzTagRuleTagFilterArgs and LogzTagRuleTagFilterOutput values.
// You can construct a concrete instance of `LogzTagRuleTagFilterInput` via:
//
//	LogzTagRuleTagFilterArgs{...}
type LogzTagRuleTagFilterInput interface {
	pulumi.Input

	ToLogzTagRuleTagFilterOutput() LogzTagRuleTagFilterOutput
	ToLogzTagRuleTagFilterOutputWithContext(context.Context) LogzTagRuleTagFilterOutput
}

type LogzTagRuleTagFilterArgs struct {
	// The action for a filtering tag. Possible values are `Include` and `Exclude` is allowed. Note that the `Exclude` takes priority over the `Include`.
	Action pulumi.StringInput `pulumi:"action"`
	// The name of this `tagFilter`.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of this `tagFilter`.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LogzTagRuleTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogzTagRuleTagFilter)(nil)).Elem()
}

func (i LogzTagRuleTagFilterArgs) ToLogzTagRuleTagFilterOutput() LogzTagRuleTagFilterOutput {
	return i.ToLogzTagRuleTagFilterOutputWithContext(context.Background())
}

func (i LogzTagRuleTagFilterArgs) ToLogzTagRuleTagFilterOutputWithContext(ctx context.Context) LogzTagRuleTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzTagRuleTagFilterOutput)
}

func (i LogzTagRuleTagFilterArgs) ToOutput(ctx context.Context) pulumix.Output[LogzTagRuleTagFilter] {
	return pulumix.Output[LogzTagRuleTagFilter]{
		OutputState: i.ToLogzTagRuleTagFilterOutputWithContext(ctx).OutputState,
	}
}

// LogzTagRuleTagFilterArrayInput is an input type that accepts LogzTagRuleTagFilterArray and LogzTagRuleTagFilterArrayOutput values.
// You can construct a concrete instance of `LogzTagRuleTagFilterArrayInput` via:
//
//	LogzTagRuleTagFilterArray{ LogzTagRuleTagFilterArgs{...} }
type LogzTagRuleTagFilterArrayInput interface {
	pulumi.Input

	ToLogzTagRuleTagFilterArrayOutput() LogzTagRuleTagFilterArrayOutput
	ToLogzTagRuleTagFilterArrayOutputWithContext(context.Context) LogzTagRuleTagFilterArrayOutput
}

type LogzTagRuleTagFilterArray []LogzTagRuleTagFilterInput

func (LogzTagRuleTagFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogzTagRuleTagFilter)(nil)).Elem()
}

func (i LogzTagRuleTagFilterArray) ToLogzTagRuleTagFilterArrayOutput() LogzTagRuleTagFilterArrayOutput {
	return i.ToLogzTagRuleTagFilterArrayOutputWithContext(context.Background())
}

func (i LogzTagRuleTagFilterArray) ToLogzTagRuleTagFilterArrayOutputWithContext(ctx context.Context) LogzTagRuleTagFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogzTagRuleTagFilterArrayOutput)
}

func (i LogzTagRuleTagFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]LogzTagRuleTagFilter] {
	return pulumix.Output[[]LogzTagRuleTagFilter]{
		OutputState: i.ToLogzTagRuleTagFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type LogzTagRuleTagFilterOutput struct{ *pulumi.OutputState }

func (LogzTagRuleTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogzTagRuleTagFilter)(nil)).Elem()
}

func (o LogzTagRuleTagFilterOutput) ToLogzTagRuleTagFilterOutput() LogzTagRuleTagFilterOutput {
	return o
}

func (o LogzTagRuleTagFilterOutput) ToLogzTagRuleTagFilterOutputWithContext(ctx context.Context) LogzTagRuleTagFilterOutput {
	return o
}

func (o LogzTagRuleTagFilterOutput) ToOutput(ctx context.Context) pulumix.Output[LogzTagRuleTagFilter] {
	return pulumix.Output[LogzTagRuleTagFilter]{
		OutputState: o.OutputState,
	}
}

// The action for a filtering tag. Possible values are `Include` and `Exclude` is allowed. Note that the `Exclude` takes priority over the `Include`.
func (o LogzTagRuleTagFilterOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v LogzTagRuleTagFilter) string { return v.Action }).(pulumi.StringOutput)
}

// The name of this `tagFilter`.
func (o LogzTagRuleTagFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogzTagRuleTagFilter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of this `tagFilter`.
func (o LogzTagRuleTagFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogzTagRuleTagFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LogzTagRuleTagFilterArrayOutput struct{ *pulumi.OutputState }

func (LogzTagRuleTagFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogzTagRuleTagFilter)(nil)).Elem()
}

func (o LogzTagRuleTagFilterArrayOutput) ToLogzTagRuleTagFilterArrayOutput() LogzTagRuleTagFilterArrayOutput {
	return o
}

func (o LogzTagRuleTagFilterArrayOutput) ToLogzTagRuleTagFilterArrayOutputWithContext(ctx context.Context) LogzTagRuleTagFilterArrayOutput {
	return o
}

func (o LogzTagRuleTagFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LogzTagRuleTagFilter] {
	return pulumix.Output[[]LogzTagRuleTagFilter]{
		OutputState: o.OutputState,
	}
}

func (o LogzTagRuleTagFilterArrayOutput) Index(i pulumi.IntInput) LogzTagRuleTagFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogzTagRuleTagFilter {
		return vs[0].([]LogzTagRuleTagFilter)[vs[1].(int)]
	}).(LogzTagRuleTagFilterOutput)
}

type MetricAlertAction struct {
	// The ID of the Action Group can be sourced from the `monitoring.ActionGroup` resource
	ActionGroupId string `pulumi:"actionGroupId"`
	// The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
	WebhookProperties map[string]string `pulumi:"webhookProperties"`
}

// MetricAlertActionInput is an input type that accepts MetricAlertActionArgs and MetricAlertActionOutput values.
// You can construct a concrete instance of `MetricAlertActionInput` via:
//
//	MetricAlertActionArgs{...}
type MetricAlertActionInput interface {
	pulumi.Input

	ToMetricAlertActionOutput() MetricAlertActionOutput
	ToMetricAlertActionOutputWithContext(context.Context) MetricAlertActionOutput
}

type MetricAlertActionArgs struct {
	// The ID of the Action Group can be sourced from the `monitoring.ActionGroup` resource
	ActionGroupId pulumi.StringInput `pulumi:"actionGroupId"`
	// The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
	WebhookProperties pulumi.StringMapInput `pulumi:"webhookProperties"`
}

func (MetricAlertActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertAction)(nil)).Elem()
}

func (i MetricAlertActionArgs) ToMetricAlertActionOutput() MetricAlertActionOutput {
	return i.ToMetricAlertActionOutputWithContext(context.Background())
}

func (i MetricAlertActionArgs) ToMetricAlertActionOutputWithContext(ctx context.Context) MetricAlertActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertActionOutput)
}

func (i MetricAlertActionArgs) ToOutput(ctx context.Context) pulumix.Output[MetricAlertAction] {
	return pulumix.Output[MetricAlertAction]{
		OutputState: i.ToMetricAlertActionOutputWithContext(ctx).OutputState,
	}
}

// MetricAlertActionArrayInput is an input type that accepts MetricAlertActionArray and MetricAlertActionArrayOutput values.
// You can construct a concrete instance of `MetricAlertActionArrayInput` via:
//
//	MetricAlertActionArray{ MetricAlertActionArgs{...} }
type MetricAlertActionArrayInput interface {
	pulumi.Input

	ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput
	ToMetricAlertActionArrayOutputWithContext(context.Context) MetricAlertActionArrayOutput
}

type MetricAlertActionArray []MetricAlertActionInput

func (MetricAlertActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertAction)(nil)).Elem()
}

func (i MetricAlertActionArray) ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput {
	return i.ToMetricAlertActionArrayOutputWithContext(context.Background())
}

func (i MetricAlertActionArray) ToMetricAlertActionArrayOutputWithContext(ctx context.Context) MetricAlertActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertActionArrayOutput)
}

func (i MetricAlertActionArray) ToOutput(ctx context.Context) pulumix.Output[[]MetricAlertAction] {
	return pulumix.Output[[]MetricAlertAction]{
		OutputState: i.ToMetricAlertActionArrayOutputWithContext(ctx).OutputState,
	}
}

type MetricAlertActionOutput struct{ *pulumi.OutputState }

func (MetricAlertActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertAction)(nil)).Elem()
}

func (o MetricAlertActionOutput) ToMetricAlertActionOutput() MetricAlertActionOutput {
	return o
}

func (o MetricAlertActionOutput) ToMetricAlertActionOutputWithContext(ctx context.Context) MetricAlertActionOutput {
	return o
}

func (o MetricAlertActionOutput) ToOutput(ctx context.Context) pulumix.Output[MetricAlertAction] {
	return pulumix.Output[MetricAlertAction]{
		OutputState: o.OutputState,
	}
}

// The ID of the Action Group can be sourced from the `monitoring.ActionGroup` resource
func (o MetricAlertActionOutput) ActionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertAction) string { return v.ActionGroupId }).(pulumi.StringOutput)
}

// The map of custom string properties to include with the post operation. These data are appended to the webhook payload.
func (o MetricAlertActionOutput) WebhookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MetricAlertAction) map[string]string { return v.WebhookProperties }).(pulumi.StringMapOutput)
}

type MetricAlertActionArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertAction)(nil)).Elem()
}

func (o MetricAlertActionArrayOutput) ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput {
	return o
}

func (o MetricAlertActionArrayOutput) ToMetricAlertActionArrayOutputWithContext(ctx context.Context) MetricAlertActionArrayOutput {
	return o
}

func (o MetricAlertActionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MetricAlertAction] {
	return pulumix.Output[[]MetricAlertAction]{
		OutputState: o.OutputState,
	}
}

func (o MetricAlertActionArrayOutput) Index(i pulumi.IntInput) MetricAlertActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlertAction {
		return vs[0].([]MetricAlertAction)[vs[1].(int)]
	}).(MetricAlertActionOutput)
}

type MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria struct {
	// The ID of the Application Insights Resource.
	ComponentId string `pulumi:"componentId"`
	// The number of failed locations.
	FailedLocationCount int `pulumi:"failedLocationCount"`
	// The ID of the Application Insights Web Test.
	WebTestId string `pulumi:"webTestId"`
}

// MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaInput is an input type that accepts MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs and MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput values.
// You can construct a concrete instance of `MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaInput` via:
//
//	MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs{...}
type MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaInput interface {
	pulumi.Input

	ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput() MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput
	ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutputWithContext(context.Context) MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput
}

type MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs struct {
	// The ID of the Application Insights Resource.
	ComponentId pulumi.StringInput `pulumi:"componentId"`
	// The number of failed locations.
	FailedLocationCount pulumi.IntInput `pulumi:"failedLocationCount"`
	// The ID of the Application Insights Web Test.
	WebTestId pulumi.StringInput `pulumi:"webTestId"`
}

func (MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria)(nil)).Elem()
}

func (i MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs) ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput() MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput {
	return i.ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutputWithContext(context.Background())
}

func (i MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs) ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutputWithContext(ctx context.Context) MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput)
}

func (i MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria] {
	return pulumix.Output[MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria]{
		OutputState: i.ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutputWithContext(ctx).OutputState,
	}
}

func (i MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs) ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput() MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput {
	return i.ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutputWithContext(context.Background())
}

func (i MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs) ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutputWithContext(ctx context.Context) MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput).ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutputWithContext(ctx)
}

// MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrInput is an input type that accepts MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs, MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtr and MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput values.
// You can construct a concrete instance of `MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrInput` via:
//
//	        MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs{...}
//
//	or:
//
//	        nil
type MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrInput interface {
	pulumi.Input

	ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput() MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput
	ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutputWithContext(context.Context) MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput
}

type metricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrType MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs

func MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtr(v *MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs) MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrInput {
	return (*metricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrType)(v)
}

func (*metricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria)(nil)).Elem()
}

func (i *metricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrType) ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput() MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput {
	return i.ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutputWithContext(context.Background())
}

func (i *metricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrType) ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutputWithContext(ctx context.Context) MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput)
}

func (i *metricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrType) ToOutput(ctx context.Context) pulumix.Output[*MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria] {
	return pulumix.Output[*MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria]{
		OutputState: i.ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutputWithContext(ctx).OutputState,
	}
}

type MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput struct{ *pulumi.OutputState }

func (MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria)(nil)).Elem()
}

func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput) ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput() MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput {
	return o
}

func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput) ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutputWithContext(ctx context.Context) MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput {
	return o
}

func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput) ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput() MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput {
	return o.ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutputWithContext(context.Background())
}

func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput) ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutputWithContext(ctx context.Context) MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria) *MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria {
		return &v
	}).(MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput)
}

func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria] {
	return pulumix.Output[MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria]{
		OutputState: o.OutputState,
	}
}

// The ID of the Application Insights Resource.
func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput) ComponentId() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria) string { return v.ComponentId }).(pulumi.StringOutput)
}

// The number of failed locations.
func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput) FailedLocationCount() pulumi.IntOutput {
	return o.ApplyT(func(v MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria) int {
		return v.FailedLocationCount
	}).(pulumi.IntOutput)
}

// The ID of the Application Insights Web Test.
func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput) WebTestId() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria) string { return v.WebTestId }).(pulumi.StringOutput)
}

type MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput struct{ *pulumi.OutputState }

func (MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria)(nil)).Elem()
}

func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput) ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput() MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput {
	return o
}

func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput) ToMetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutputWithContext(ctx context.Context) MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput {
	return o
}

func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria] {
	return pulumix.Output[*MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria]{
		OutputState: o.OutputState,
	}
}

func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput) Elem() MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput {
	return o.ApplyT(func(v *MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria) MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria {
		if v != nil {
			return *v
		}
		var ret MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria
		return ret
	}).(MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput)
}

// The ID of the Application Insights Resource.
func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria) *string {
		if v == nil {
			return nil
		}
		return &v.ComponentId
	}).(pulumi.StringPtrOutput)
}

// The number of failed locations.
func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput) FailedLocationCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria) *int {
		if v == nil {
			return nil
		}
		return &v.FailedLocationCount
	}).(pulumi.IntPtrOutput)
}

// The ID of the Application Insights Web Test.
func (o MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput) WebTestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteria) *string {
		if v == nil {
			return nil
		}
		return &v.WebTestId
	}).(pulumi.StringPtrOutput)
}

type MetricAlertCriteria struct {
	// The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
	Aggregation string `pulumi:"aggregation"`
	// One or more `dimension` blocks as defined below.
	Dimensions []MetricAlertCriteriaDimension `pulumi:"dimensions"`
	// One of the metric names to be monitored.
	MetricName string `pulumi:"metricName"`
	// One of the metric namespaces to be monitored.
	MetricNamespace string `pulumi:"metricNamespace"`
	// The criteria operator. Possible values are `Equals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan` and `LessThanOrEqual`.
	Operator string `pulumi:"operator"`
	// Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted? Defaults to `false`.
	SkipMetricValidation *bool `pulumi:"skipMetricValidation"`
	// The criteria threshold value that activates the alert.
	Threshold float64 `pulumi:"threshold"`
}

// MetricAlertCriteriaInput is an input type that accepts MetricAlertCriteriaArgs and MetricAlertCriteriaOutput values.
// You can construct a concrete instance of `MetricAlertCriteriaInput` via:
//
//	MetricAlertCriteriaArgs{...}
type MetricAlertCriteriaInput interface {
	pulumi.Input

	ToMetricAlertCriteriaOutput() MetricAlertCriteriaOutput
	ToMetricAlertCriteriaOutputWithContext(context.Context) MetricAlertCriteriaOutput
}

type MetricAlertCriteriaArgs struct {
	// The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
	Aggregation pulumi.StringInput `pulumi:"aggregation"`
	// One or more `dimension` blocks as defined below.
	Dimensions MetricAlertCriteriaDimensionArrayInput `pulumi:"dimensions"`
	// One of the metric names to be monitored.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// One of the metric namespaces to be monitored.
	MetricNamespace pulumi.StringInput `pulumi:"metricNamespace"`
	// The criteria operator. Possible values are `Equals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan` and `LessThanOrEqual`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted? Defaults to `false`.
	SkipMetricValidation pulumi.BoolPtrInput `pulumi:"skipMetricValidation"`
	// The criteria threshold value that activates the alert.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
}

func (MetricAlertCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertCriteria)(nil)).Elem()
}

func (i MetricAlertCriteriaArgs) ToMetricAlertCriteriaOutput() MetricAlertCriteriaOutput {
	return i.ToMetricAlertCriteriaOutputWithContext(context.Background())
}

func (i MetricAlertCriteriaArgs) ToMetricAlertCriteriaOutputWithContext(ctx context.Context) MetricAlertCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertCriteriaOutput)
}

func (i MetricAlertCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[MetricAlertCriteria] {
	return pulumix.Output[MetricAlertCriteria]{
		OutputState: i.ToMetricAlertCriteriaOutputWithContext(ctx).OutputState,
	}
}

// MetricAlertCriteriaArrayInput is an input type that accepts MetricAlertCriteriaArray and MetricAlertCriteriaArrayOutput values.
// You can construct a concrete instance of `MetricAlertCriteriaArrayInput` via:
//
//	MetricAlertCriteriaArray{ MetricAlertCriteriaArgs{...} }
type MetricAlertCriteriaArrayInput interface {
	pulumi.Input

	ToMetricAlertCriteriaArrayOutput() MetricAlertCriteriaArrayOutput
	ToMetricAlertCriteriaArrayOutputWithContext(context.Context) MetricAlertCriteriaArrayOutput
}

type MetricAlertCriteriaArray []MetricAlertCriteriaInput

func (MetricAlertCriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertCriteria)(nil)).Elem()
}

func (i MetricAlertCriteriaArray) ToMetricAlertCriteriaArrayOutput() MetricAlertCriteriaArrayOutput {
	return i.ToMetricAlertCriteriaArrayOutputWithContext(context.Background())
}

func (i MetricAlertCriteriaArray) ToMetricAlertCriteriaArrayOutputWithContext(ctx context.Context) MetricAlertCriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertCriteriaArrayOutput)
}

func (i MetricAlertCriteriaArray) ToOutput(ctx context.Context) pulumix.Output[[]MetricAlertCriteria] {
	return pulumix.Output[[]MetricAlertCriteria]{
		OutputState: i.ToMetricAlertCriteriaArrayOutputWithContext(ctx).OutputState,
	}
}

type MetricAlertCriteriaOutput struct{ *pulumi.OutputState }

func (MetricAlertCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertCriteria)(nil)).Elem()
}

func (o MetricAlertCriteriaOutput) ToMetricAlertCriteriaOutput() MetricAlertCriteriaOutput {
	return o
}

func (o MetricAlertCriteriaOutput) ToMetricAlertCriteriaOutputWithContext(ctx context.Context) MetricAlertCriteriaOutput {
	return o
}

func (o MetricAlertCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[MetricAlertCriteria] {
	return pulumix.Output[MetricAlertCriteria]{
		OutputState: o.OutputState,
	}
}

// The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
func (o MetricAlertCriteriaOutput) Aggregation() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertCriteria) string { return v.Aggregation }).(pulumi.StringOutput)
}

// One or more `dimension` blocks as defined below.
func (o MetricAlertCriteriaOutput) Dimensions() MetricAlertCriteriaDimensionArrayOutput {
	return o.ApplyT(func(v MetricAlertCriteria) []MetricAlertCriteriaDimension { return v.Dimensions }).(MetricAlertCriteriaDimensionArrayOutput)
}

// One of the metric names to be monitored.
func (o MetricAlertCriteriaOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertCriteria) string { return v.MetricName }).(pulumi.StringOutput)
}

// One of the metric namespaces to be monitored.
func (o MetricAlertCriteriaOutput) MetricNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertCriteria) string { return v.MetricNamespace }).(pulumi.StringOutput)
}

// The criteria operator. Possible values are `Equals`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan` and `LessThanOrEqual`.
func (o MetricAlertCriteriaOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertCriteria) string { return v.Operator }).(pulumi.StringOutput)
}

// Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted? Defaults to `false`.
func (o MetricAlertCriteriaOutput) SkipMetricValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricAlertCriteria) *bool { return v.SkipMetricValidation }).(pulumi.BoolPtrOutput)
}

// The criteria threshold value that activates the alert.
func (o MetricAlertCriteriaOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v MetricAlertCriteria) float64 { return v.Threshold }).(pulumi.Float64Output)
}

type MetricAlertCriteriaArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertCriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertCriteria)(nil)).Elem()
}

func (o MetricAlertCriteriaArrayOutput) ToMetricAlertCriteriaArrayOutput() MetricAlertCriteriaArrayOutput {
	return o
}

func (o MetricAlertCriteriaArrayOutput) ToMetricAlertCriteriaArrayOutputWithContext(ctx context.Context) MetricAlertCriteriaArrayOutput {
	return o
}

func (o MetricAlertCriteriaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MetricAlertCriteria] {
	return pulumix.Output[[]MetricAlertCriteria]{
		OutputState: o.OutputState,
	}
}

func (o MetricAlertCriteriaArrayOutput) Index(i pulumi.IntInput) MetricAlertCriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlertCriteria {
		return vs[0].([]MetricAlertCriteria)[vs[1].(int)]
	}).(MetricAlertCriteriaOutput)
}

type MetricAlertCriteriaDimension struct {
	// One of the dimension names.
	Name string `pulumi:"name"`
	// The dimension operator. Possible values are `Include`, `Exclude` and `StartsWith`.
	Operator string `pulumi:"operator"`
	// The list of dimension values.
	Values []string `pulumi:"values"`
}

// MetricAlertCriteriaDimensionInput is an input type that accepts MetricAlertCriteriaDimensionArgs and MetricAlertCriteriaDimensionOutput values.
// You can construct a concrete instance of `MetricAlertCriteriaDimensionInput` via:
//
//	MetricAlertCriteriaDimensionArgs{...}
type MetricAlertCriteriaDimensionInput interface {
	pulumi.Input

	ToMetricAlertCriteriaDimensionOutput() MetricAlertCriteriaDimensionOutput
	ToMetricAlertCriteriaDimensionOutputWithContext(context.Context) MetricAlertCriteriaDimensionOutput
}

type MetricAlertCriteriaDimensionArgs struct {
	// One of the dimension names.
	Name pulumi.StringInput `pulumi:"name"`
	// The dimension operator. Possible values are `Include`, `Exclude` and `StartsWith`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The list of dimension values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MetricAlertCriteriaDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertCriteriaDimension)(nil)).Elem()
}

func (i MetricAlertCriteriaDimensionArgs) ToMetricAlertCriteriaDimensionOutput() MetricAlertCriteriaDimensionOutput {
	return i.ToMetricAlertCriteriaDimensionOutputWithContext(context.Background())
}

func (i MetricAlertCriteriaDimensionArgs) ToMetricAlertCriteriaDimensionOutputWithContext(ctx context.Context) MetricAlertCriteriaDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertCriteriaDimensionOutput)
}

func (i MetricAlertCriteriaDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[MetricAlertCriteriaDimension] {
	return pulumix.Output[MetricAlertCriteriaDimension]{
		OutputState: i.ToMetricAlertCriteriaDimensionOutputWithContext(ctx).OutputState,
	}
}

// MetricAlertCriteriaDimensionArrayInput is an input type that accepts MetricAlertCriteriaDimensionArray and MetricAlertCriteriaDimensionArrayOutput values.
// You can construct a concrete instance of `MetricAlertCriteriaDimensionArrayInput` via:
//
//	MetricAlertCriteriaDimensionArray{ MetricAlertCriteriaDimensionArgs{...} }
type MetricAlertCriteriaDimensionArrayInput interface {
	pulumi.Input

	ToMetricAlertCriteriaDimensionArrayOutput() MetricAlertCriteriaDimensionArrayOutput
	ToMetricAlertCriteriaDimensionArrayOutputWithContext(context.Context) MetricAlertCriteriaDimensionArrayOutput
}

type MetricAlertCriteriaDimensionArray []MetricAlertCriteriaDimensionInput

func (MetricAlertCriteriaDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertCriteriaDimension)(nil)).Elem()
}

func (i MetricAlertCriteriaDimensionArray) ToMetricAlertCriteriaDimensionArrayOutput() MetricAlertCriteriaDimensionArrayOutput {
	return i.ToMetricAlertCriteriaDimensionArrayOutputWithContext(context.Background())
}

func (i MetricAlertCriteriaDimensionArray) ToMetricAlertCriteriaDimensionArrayOutputWithContext(ctx context.Context) MetricAlertCriteriaDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertCriteriaDimensionArrayOutput)
}

func (i MetricAlertCriteriaDimensionArray) ToOutput(ctx context.Context) pulumix.Output[[]MetricAlertCriteriaDimension] {
	return pulumix.Output[[]MetricAlertCriteriaDimension]{
		OutputState: i.ToMetricAlertCriteriaDimensionArrayOutputWithContext(ctx).OutputState,
	}
}

type MetricAlertCriteriaDimensionOutput struct{ *pulumi.OutputState }

func (MetricAlertCriteriaDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertCriteriaDimension)(nil)).Elem()
}

func (o MetricAlertCriteriaDimensionOutput) ToMetricAlertCriteriaDimensionOutput() MetricAlertCriteriaDimensionOutput {
	return o
}

func (o MetricAlertCriteriaDimensionOutput) ToMetricAlertCriteriaDimensionOutputWithContext(ctx context.Context) MetricAlertCriteriaDimensionOutput {
	return o
}

func (o MetricAlertCriteriaDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[MetricAlertCriteriaDimension] {
	return pulumix.Output[MetricAlertCriteriaDimension]{
		OutputState: o.OutputState,
	}
}

// One of the dimension names.
func (o MetricAlertCriteriaDimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertCriteriaDimension) string { return v.Name }).(pulumi.StringOutput)
}

// The dimension operator. Possible values are `Include`, `Exclude` and `StartsWith`.
func (o MetricAlertCriteriaDimensionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertCriteriaDimension) string { return v.Operator }).(pulumi.StringOutput)
}

// The list of dimension values.
func (o MetricAlertCriteriaDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricAlertCriteriaDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MetricAlertCriteriaDimensionArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertCriteriaDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertCriteriaDimension)(nil)).Elem()
}

func (o MetricAlertCriteriaDimensionArrayOutput) ToMetricAlertCriteriaDimensionArrayOutput() MetricAlertCriteriaDimensionArrayOutput {
	return o
}

func (o MetricAlertCriteriaDimensionArrayOutput) ToMetricAlertCriteriaDimensionArrayOutputWithContext(ctx context.Context) MetricAlertCriteriaDimensionArrayOutput {
	return o
}

func (o MetricAlertCriteriaDimensionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MetricAlertCriteriaDimension] {
	return pulumix.Output[[]MetricAlertCriteriaDimension]{
		OutputState: o.OutputState,
	}
}

func (o MetricAlertCriteriaDimensionArrayOutput) Index(i pulumi.IntInput) MetricAlertCriteriaDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlertCriteriaDimension {
		return vs[0].([]MetricAlertCriteriaDimension)[vs[1].(int)]
	}).(MetricAlertCriteriaDimensionOutput)
}

type MetricAlertDynamicCriteria struct {
	// The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
	Aggregation string `pulumi:"aggregation"`
	// The extent of deviation required to trigger an alert. Possible values are `Low`, `Medium` and `High`.
	AlertSensitivity string `pulumi:"alertSensitivity"`
	// One or more `dimension` blocks as defined below.
	Dimensions []MetricAlertDynamicCriteriaDimension `pulumi:"dimensions"`
	// The number of violations to trigger an alert. Should be smaller or equal to `evaluationTotalCount`. Defaults to `4`.
	EvaluationFailureCount *int `pulumi:"evaluationFailureCount"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (`windowSize`) and the selected number of aggregated points. Defaults to `4`.
	EvaluationTotalCount *int `pulumi:"evaluationTotalCount"`
	// The [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) date from which to start learning the metric historical data and calculate the dynamic thresholds.
	IgnoreDataBefore *string `pulumi:"ignoreDataBefore"`
	// One of the metric names to be monitored.
	MetricName string `pulumi:"metricName"`
	// One of the metric namespaces to be monitored.
	MetricNamespace string `pulumi:"metricNamespace"`
	// The criteria operator. Possible values are `LessThan`, `GreaterThan` and `GreaterOrLessThan`.
	Operator string `pulumi:"operator"`
	// Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted?
	SkipMetricValidation *bool `pulumi:"skipMetricValidation"`
}

// MetricAlertDynamicCriteriaInput is an input type that accepts MetricAlertDynamicCriteriaArgs and MetricAlertDynamicCriteriaOutput values.
// You can construct a concrete instance of `MetricAlertDynamicCriteriaInput` via:
//
//	MetricAlertDynamicCriteriaArgs{...}
type MetricAlertDynamicCriteriaInput interface {
	pulumi.Input

	ToMetricAlertDynamicCriteriaOutput() MetricAlertDynamicCriteriaOutput
	ToMetricAlertDynamicCriteriaOutputWithContext(context.Context) MetricAlertDynamicCriteriaOutput
}

type MetricAlertDynamicCriteriaArgs struct {
	// The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
	Aggregation pulumi.StringInput `pulumi:"aggregation"`
	// The extent of deviation required to trigger an alert. Possible values are `Low`, `Medium` and `High`.
	AlertSensitivity pulumi.StringInput `pulumi:"alertSensitivity"`
	// One or more `dimension` blocks as defined below.
	Dimensions MetricAlertDynamicCriteriaDimensionArrayInput `pulumi:"dimensions"`
	// The number of violations to trigger an alert. Should be smaller or equal to `evaluationTotalCount`. Defaults to `4`.
	EvaluationFailureCount pulumi.IntPtrInput `pulumi:"evaluationFailureCount"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (`windowSize`) and the selected number of aggregated points. Defaults to `4`.
	EvaluationTotalCount pulumi.IntPtrInput `pulumi:"evaluationTotalCount"`
	// The [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) date from which to start learning the metric historical data and calculate the dynamic thresholds.
	IgnoreDataBefore pulumi.StringPtrInput `pulumi:"ignoreDataBefore"`
	// One of the metric names to be monitored.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// One of the metric namespaces to be monitored.
	MetricNamespace pulumi.StringInput `pulumi:"metricNamespace"`
	// The criteria operator. Possible values are `LessThan`, `GreaterThan` and `GreaterOrLessThan`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted?
	SkipMetricValidation pulumi.BoolPtrInput `pulumi:"skipMetricValidation"`
}

func (MetricAlertDynamicCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertDynamicCriteria)(nil)).Elem()
}

func (i MetricAlertDynamicCriteriaArgs) ToMetricAlertDynamicCriteriaOutput() MetricAlertDynamicCriteriaOutput {
	return i.ToMetricAlertDynamicCriteriaOutputWithContext(context.Background())
}

func (i MetricAlertDynamicCriteriaArgs) ToMetricAlertDynamicCriteriaOutputWithContext(ctx context.Context) MetricAlertDynamicCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertDynamicCriteriaOutput)
}

func (i MetricAlertDynamicCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[MetricAlertDynamicCriteria] {
	return pulumix.Output[MetricAlertDynamicCriteria]{
		OutputState: i.ToMetricAlertDynamicCriteriaOutputWithContext(ctx).OutputState,
	}
}

func (i MetricAlertDynamicCriteriaArgs) ToMetricAlertDynamicCriteriaPtrOutput() MetricAlertDynamicCriteriaPtrOutput {
	return i.ToMetricAlertDynamicCriteriaPtrOutputWithContext(context.Background())
}

func (i MetricAlertDynamicCriteriaArgs) ToMetricAlertDynamicCriteriaPtrOutputWithContext(ctx context.Context) MetricAlertDynamicCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertDynamicCriteriaOutput).ToMetricAlertDynamicCriteriaPtrOutputWithContext(ctx)
}

// MetricAlertDynamicCriteriaPtrInput is an input type that accepts MetricAlertDynamicCriteriaArgs, MetricAlertDynamicCriteriaPtr and MetricAlertDynamicCriteriaPtrOutput values.
// You can construct a concrete instance of `MetricAlertDynamicCriteriaPtrInput` via:
//
//	        MetricAlertDynamicCriteriaArgs{...}
//
//	or:
//
//	        nil
type MetricAlertDynamicCriteriaPtrInput interface {
	pulumi.Input

	ToMetricAlertDynamicCriteriaPtrOutput() MetricAlertDynamicCriteriaPtrOutput
	ToMetricAlertDynamicCriteriaPtrOutputWithContext(context.Context) MetricAlertDynamicCriteriaPtrOutput
}

type metricAlertDynamicCriteriaPtrType MetricAlertDynamicCriteriaArgs

func MetricAlertDynamicCriteriaPtr(v *MetricAlertDynamicCriteriaArgs) MetricAlertDynamicCriteriaPtrInput {
	return (*metricAlertDynamicCriteriaPtrType)(v)
}

func (*metricAlertDynamicCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlertDynamicCriteria)(nil)).Elem()
}

func (i *metricAlertDynamicCriteriaPtrType) ToMetricAlertDynamicCriteriaPtrOutput() MetricAlertDynamicCriteriaPtrOutput {
	return i.ToMetricAlertDynamicCriteriaPtrOutputWithContext(context.Background())
}

func (i *metricAlertDynamicCriteriaPtrType) ToMetricAlertDynamicCriteriaPtrOutputWithContext(ctx context.Context) MetricAlertDynamicCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertDynamicCriteriaPtrOutput)
}

func (i *metricAlertDynamicCriteriaPtrType) ToOutput(ctx context.Context) pulumix.Output[*MetricAlertDynamicCriteria] {
	return pulumix.Output[*MetricAlertDynamicCriteria]{
		OutputState: i.ToMetricAlertDynamicCriteriaPtrOutputWithContext(ctx).OutputState,
	}
}

type MetricAlertDynamicCriteriaOutput struct{ *pulumi.OutputState }

func (MetricAlertDynamicCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertDynamicCriteria)(nil)).Elem()
}

func (o MetricAlertDynamicCriteriaOutput) ToMetricAlertDynamicCriteriaOutput() MetricAlertDynamicCriteriaOutput {
	return o
}

func (o MetricAlertDynamicCriteriaOutput) ToMetricAlertDynamicCriteriaOutputWithContext(ctx context.Context) MetricAlertDynamicCriteriaOutput {
	return o
}

func (o MetricAlertDynamicCriteriaOutput) ToMetricAlertDynamicCriteriaPtrOutput() MetricAlertDynamicCriteriaPtrOutput {
	return o.ToMetricAlertDynamicCriteriaPtrOutputWithContext(context.Background())
}

func (o MetricAlertDynamicCriteriaOutput) ToMetricAlertDynamicCriteriaPtrOutputWithContext(ctx context.Context) MetricAlertDynamicCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricAlertDynamicCriteria) *MetricAlertDynamicCriteria {
		return &v
	}).(MetricAlertDynamicCriteriaPtrOutput)
}

func (o MetricAlertDynamicCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[MetricAlertDynamicCriteria] {
	return pulumix.Output[MetricAlertDynamicCriteria]{
		OutputState: o.OutputState,
	}
}

// The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
func (o MetricAlertDynamicCriteriaOutput) Aggregation() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertDynamicCriteria) string { return v.Aggregation }).(pulumi.StringOutput)
}

// The extent of deviation required to trigger an alert. Possible values are `Low`, `Medium` and `High`.
func (o MetricAlertDynamicCriteriaOutput) AlertSensitivity() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertDynamicCriteria) string { return v.AlertSensitivity }).(pulumi.StringOutput)
}

// One or more `dimension` blocks as defined below.
func (o MetricAlertDynamicCriteriaOutput) Dimensions() MetricAlertDynamicCriteriaDimensionArrayOutput {
	return o.ApplyT(func(v MetricAlertDynamicCriteria) []MetricAlertDynamicCriteriaDimension { return v.Dimensions }).(MetricAlertDynamicCriteriaDimensionArrayOutput)
}

// The number of violations to trigger an alert. Should be smaller or equal to `evaluationTotalCount`. Defaults to `4`.
func (o MetricAlertDynamicCriteriaOutput) EvaluationFailureCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricAlertDynamicCriteria) *int { return v.EvaluationFailureCount }).(pulumi.IntPtrOutput)
}

// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (`windowSize`) and the selected number of aggregated points. Defaults to `4`.
func (o MetricAlertDynamicCriteriaOutput) EvaluationTotalCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MetricAlertDynamicCriteria) *int { return v.EvaluationTotalCount }).(pulumi.IntPtrOutput)
}

// The [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) date from which to start learning the metric historical data and calculate the dynamic thresholds.
func (o MetricAlertDynamicCriteriaOutput) IgnoreDataBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertDynamicCriteria) *string { return v.IgnoreDataBefore }).(pulumi.StringPtrOutput)
}

// One of the metric names to be monitored.
func (o MetricAlertDynamicCriteriaOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertDynamicCriteria) string { return v.MetricName }).(pulumi.StringOutput)
}

// One of the metric namespaces to be monitored.
func (o MetricAlertDynamicCriteriaOutput) MetricNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertDynamicCriteria) string { return v.MetricNamespace }).(pulumi.StringOutput)
}

// The criteria operator. Possible values are `LessThan`, `GreaterThan` and `GreaterOrLessThan`.
func (o MetricAlertDynamicCriteriaOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertDynamicCriteria) string { return v.Operator }).(pulumi.StringOutput)
}

// Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted?
func (o MetricAlertDynamicCriteriaOutput) SkipMetricValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricAlertDynamicCriteria) *bool { return v.SkipMetricValidation }).(pulumi.BoolPtrOutput)
}

type MetricAlertDynamicCriteriaPtrOutput struct{ *pulumi.OutputState }

func (MetricAlertDynamicCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricAlertDynamicCriteria)(nil)).Elem()
}

func (o MetricAlertDynamicCriteriaPtrOutput) ToMetricAlertDynamicCriteriaPtrOutput() MetricAlertDynamicCriteriaPtrOutput {
	return o
}

func (o MetricAlertDynamicCriteriaPtrOutput) ToMetricAlertDynamicCriteriaPtrOutputWithContext(ctx context.Context) MetricAlertDynamicCriteriaPtrOutput {
	return o
}

func (o MetricAlertDynamicCriteriaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetricAlertDynamicCriteria] {
	return pulumix.Output[*MetricAlertDynamicCriteria]{
		OutputState: o.OutputState,
	}
}

func (o MetricAlertDynamicCriteriaPtrOutput) Elem() MetricAlertDynamicCriteriaOutput {
	return o.ApplyT(func(v *MetricAlertDynamicCriteria) MetricAlertDynamicCriteria {
		if v != nil {
			return *v
		}
		var ret MetricAlertDynamicCriteria
		return ret
	}).(MetricAlertDynamicCriteriaOutput)
}

// The statistic that runs over the metric values. Possible values are `Average`, `Count`, `Minimum`, `Maximum` and `Total`.
func (o MetricAlertDynamicCriteriaPtrOutput) Aggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertDynamicCriteria) *string {
		if v == nil {
			return nil
		}
		return &v.Aggregation
	}).(pulumi.StringPtrOutput)
}

// The extent of deviation required to trigger an alert. Possible values are `Low`, `Medium` and `High`.
func (o MetricAlertDynamicCriteriaPtrOutput) AlertSensitivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertDynamicCriteria) *string {
		if v == nil {
			return nil
		}
		return &v.AlertSensitivity
	}).(pulumi.StringPtrOutput)
}

// One or more `dimension` blocks as defined below.
func (o MetricAlertDynamicCriteriaPtrOutput) Dimensions() MetricAlertDynamicCriteriaDimensionArrayOutput {
	return o.ApplyT(func(v *MetricAlertDynamicCriteria) []MetricAlertDynamicCriteriaDimension {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(MetricAlertDynamicCriteriaDimensionArrayOutput)
}

// The number of violations to trigger an alert. Should be smaller or equal to `evaluationTotalCount`. Defaults to `4`.
func (o MetricAlertDynamicCriteriaPtrOutput) EvaluationFailureCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricAlertDynamicCriteria) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationFailureCount
	}).(pulumi.IntPtrOutput)
}

// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (`windowSize`) and the selected number of aggregated points. Defaults to `4`.
func (o MetricAlertDynamicCriteriaPtrOutput) EvaluationTotalCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MetricAlertDynamicCriteria) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationTotalCount
	}).(pulumi.IntPtrOutput)
}

// The [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) date from which to start learning the metric historical data and calculate the dynamic thresholds.
func (o MetricAlertDynamicCriteriaPtrOutput) IgnoreDataBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertDynamicCriteria) *string {
		if v == nil {
			return nil
		}
		return v.IgnoreDataBefore
	}).(pulumi.StringPtrOutput)
}

// One of the metric names to be monitored.
func (o MetricAlertDynamicCriteriaPtrOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertDynamicCriteria) *string {
		if v == nil {
			return nil
		}
		return &v.MetricName
	}).(pulumi.StringPtrOutput)
}

// One of the metric namespaces to be monitored.
func (o MetricAlertDynamicCriteriaPtrOutput) MetricNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertDynamicCriteria) *string {
		if v == nil {
			return nil
		}
		return &v.MetricNamespace
	}).(pulumi.StringPtrOutput)
}

// The criteria operator. Possible values are `LessThan`, `GreaterThan` and `GreaterOrLessThan`.
func (o MetricAlertDynamicCriteriaPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricAlertDynamicCriteria) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Skip the metric validation to allow creating an alert rule on a custom metric that isn't yet emitted?
func (o MetricAlertDynamicCriteriaPtrOutput) SkipMetricValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MetricAlertDynamicCriteria) *bool {
		if v == nil {
			return nil
		}
		return v.SkipMetricValidation
	}).(pulumi.BoolPtrOutput)
}

type MetricAlertDynamicCriteriaDimension struct {
	// One of the dimension names.
	Name string `pulumi:"name"`
	// The dimension operator. Possible values are `Include`, `Exclude` and `StartsWith`.
	Operator string `pulumi:"operator"`
	// The list of dimension values.
	Values []string `pulumi:"values"`
}

// MetricAlertDynamicCriteriaDimensionInput is an input type that accepts MetricAlertDynamicCriteriaDimensionArgs and MetricAlertDynamicCriteriaDimensionOutput values.
// You can construct a concrete instance of `MetricAlertDynamicCriteriaDimensionInput` via:
//
//	MetricAlertDynamicCriteriaDimensionArgs{...}
type MetricAlertDynamicCriteriaDimensionInput interface {
	pulumi.Input

	ToMetricAlertDynamicCriteriaDimensionOutput() MetricAlertDynamicCriteriaDimensionOutput
	ToMetricAlertDynamicCriteriaDimensionOutputWithContext(context.Context) MetricAlertDynamicCriteriaDimensionOutput
}

type MetricAlertDynamicCriteriaDimensionArgs struct {
	// One of the dimension names.
	Name pulumi.StringInput `pulumi:"name"`
	// The dimension operator. Possible values are `Include`, `Exclude` and `StartsWith`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The list of dimension values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MetricAlertDynamicCriteriaDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertDynamicCriteriaDimension)(nil)).Elem()
}

func (i MetricAlertDynamicCriteriaDimensionArgs) ToMetricAlertDynamicCriteriaDimensionOutput() MetricAlertDynamicCriteriaDimensionOutput {
	return i.ToMetricAlertDynamicCriteriaDimensionOutputWithContext(context.Background())
}

func (i MetricAlertDynamicCriteriaDimensionArgs) ToMetricAlertDynamicCriteriaDimensionOutputWithContext(ctx context.Context) MetricAlertDynamicCriteriaDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertDynamicCriteriaDimensionOutput)
}

func (i MetricAlertDynamicCriteriaDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[MetricAlertDynamicCriteriaDimension] {
	return pulumix.Output[MetricAlertDynamicCriteriaDimension]{
		OutputState: i.ToMetricAlertDynamicCriteriaDimensionOutputWithContext(ctx).OutputState,
	}
}

// MetricAlertDynamicCriteriaDimensionArrayInput is an input type that accepts MetricAlertDynamicCriteriaDimensionArray and MetricAlertDynamicCriteriaDimensionArrayOutput values.
// You can construct a concrete instance of `MetricAlertDynamicCriteriaDimensionArrayInput` via:
//
//	MetricAlertDynamicCriteriaDimensionArray{ MetricAlertDynamicCriteriaDimensionArgs{...} }
type MetricAlertDynamicCriteriaDimensionArrayInput interface {
	pulumi.Input

	ToMetricAlertDynamicCriteriaDimensionArrayOutput() MetricAlertDynamicCriteriaDimensionArrayOutput
	ToMetricAlertDynamicCriteriaDimensionArrayOutputWithContext(context.Context) MetricAlertDynamicCriteriaDimensionArrayOutput
}

type MetricAlertDynamicCriteriaDimensionArray []MetricAlertDynamicCriteriaDimensionInput

func (MetricAlertDynamicCriteriaDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertDynamicCriteriaDimension)(nil)).Elem()
}

func (i MetricAlertDynamicCriteriaDimensionArray) ToMetricAlertDynamicCriteriaDimensionArrayOutput() MetricAlertDynamicCriteriaDimensionArrayOutput {
	return i.ToMetricAlertDynamicCriteriaDimensionArrayOutputWithContext(context.Background())
}

func (i MetricAlertDynamicCriteriaDimensionArray) ToMetricAlertDynamicCriteriaDimensionArrayOutputWithContext(ctx context.Context) MetricAlertDynamicCriteriaDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertDynamicCriteriaDimensionArrayOutput)
}

func (i MetricAlertDynamicCriteriaDimensionArray) ToOutput(ctx context.Context) pulumix.Output[[]MetricAlertDynamicCriteriaDimension] {
	return pulumix.Output[[]MetricAlertDynamicCriteriaDimension]{
		OutputState: i.ToMetricAlertDynamicCriteriaDimensionArrayOutputWithContext(ctx).OutputState,
	}
}

type MetricAlertDynamicCriteriaDimensionOutput struct{ *pulumi.OutputState }

func (MetricAlertDynamicCriteriaDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertDynamicCriteriaDimension)(nil)).Elem()
}

func (o MetricAlertDynamicCriteriaDimensionOutput) ToMetricAlertDynamicCriteriaDimensionOutput() MetricAlertDynamicCriteriaDimensionOutput {
	return o
}

func (o MetricAlertDynamicCriteriaDimensionOutput) ToMetricAlertDynamicCriteriaDimensionOutputWithContext(ctx context.Context) MetricAlertDynamicCriteriaDimensionOutput {
	return o
}

func (o MetricAlertDynamicCriteriaDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[MetricAlertDynamicCriteriaDimension] {
	return pulumix.Output[MetricAlertDynamicCriteriaDimension]{
		OutputState: o.OutputState,
	}
}

// One of the dimension names.
func (o MetricAlertDynamicCriteriaDimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertDynamicCriteriaDimension) string { return v.Name }).(pulumi.StringOutput)
}

// The dimension operator. Possible values are `Include`, `Exclude` and `StartsWith`.
func (o MetricAlertDynamicCriteriaDimensionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertDynamicCriteriaDimension) string { return v.Operator }).(pulumi.StringOutput)
}

// The list of dimension values.
func (o MetricAlertDynamicCriteriaDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricAlertDynamicCriteriaDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MetricAlertDynamicCriteriaDimensionArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertDynamicCriteriaDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertDynamicCriteriaDimension)(nil)).Elem()
}

func (o MetricAlertDynamicCriteriaDimensionArrayOutput) ToMetricAlertDynamicCriteriaDimensionArrayOutput() MetricAlertDynamicCriteriaDimensionArrayOutput {
	return o
}

func (o MetricAlertDynamicCriteriaDimensionArrayOutput) ToMetricAlertDynamicCriteriaDimensionArrayOutputWithContext(ctx context.Context) MetricAlertDynamicCriteriaDimensionArrayOutput {
	return o
}

func (o MetricAlertDynamicCriteriaDimensionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MetricAlertDynamicCriteriaDimension] {
	return pulumix.Output[[]MetricAlertDynamicCriteriaDimension]{
		OutputState: o.OutputState,
	}
}

func (o MetricAlertDynamicCriteriaDimensionArrayOutput) Index(i pulumi.IntInput) MetricAlertDynamicCriteriaDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlertDynamicCriteriaDimension {
		return vs[0].([]MetricAlertDynamicCriteriaDimension)[vs[1].(int)]
	}).(MetricAlertDynamicCriteriaDimensionOutput)
}

type ScheduledQueryRulesAlertAction struct {
	// List of action group reference resource IDs.
	ActionGroups []string `pulumi:"actionGroups"`
	// Custom payload to be sent for all webhook payloads in alerting action.
	CustomWebhookPayload *string `pulumi:"customWebhookPayload"`
	// Custom subject override for all email ids in Azure action group.
	EmailSubject *string `pulumi:"emailSubject"`
}

// ScheduledQueryRulesAlertActionInput is an input type that accepts ScheduledQueryRulesAlertActionArgs and ScheduledQueryRulesAlertActionOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertActionInput` via:
//
//	ScheduledQueryRulesAlertActionArgs{...}
type ScheduledQueryRulesAlertActionInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertActionOutput() ScheduledQueryRulesAlertActionOutput
	ToScheduledQueryRulesAlertActionOutputWithContext(context.Context) ScheduledQueryRulesAlertActionOutput
}

type ScheduledQueryRulesAlertActionArgs struct {
	// List of action group reference resource IDs.
	ActionGroups pulumi.StringArrayInput `pulumi:"actionGroups"`
	// Custom payload to be sent for all webhook payloads in alerting action.
	CustomWebhookPayload pulumi.StringPtrInput `pulumi:"customWebhookPayload"`
	// Custom subject override for all email ids in Azure action group.
	EmailSubject pulumi.StringPtrInput `pulumi:"emailSubject"`
}

func (ScheduledQueryRulesAlertActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesAlertAction)(nil)).Elem()
}

func (i ScheduledQueryRulesAlertActionArgs) ToScheduledQueryRulesAlertActionOutput() ScheduledQueryRulesAlertActionOutput {
	return i.ToScheduledQueryRulesAlertActionOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertActionArgs) ToScheduledQueryRulesAlertActionOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertActionOutput)
}

func (i ScheduledQueryRulesAlertActionArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesAlertAction] {
	return pulumix.Output[ScheduledQueryRulesAlertAction]{
		OutputState: i.ToScheduledQueryRulesAlertActionOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduledQueryRulesAlertActionArgs) ToScheduledQueryRulesAlertActionPtrOutput() ScheduledQueryRulesAlertActionPtrOutput {
	return i.ToScheduledQueryRulesAlertActionPtrOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertActionArgs) ToScheduledQueryRulesAlertActionPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertActionOutput).ToScheduledQueryRulesAlertActionPtrOutputWithContext(ctx)
}

// ScheduledQueryRulesAlertActionPtrInput is an input type that accepts ScheduledQueryRulesAlertActionArgs, ScheduledQueryRulesAlertActionPtr and ScheduledQueryRulesAlertActionPtrOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertActionPtrInput` via:
//
//	        ScheduledQueryRulesAlertActionArgs{...}
//
//	or:
//
//	        nil
type ScheduledQueryRulesAlertActionPtrInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertActionPtrOutput() ScheduledQueryRulesAlertActionPtrOutput
	ToScheduledQueryRulesAlertActionPtrOutputWithContext(context.Context) ScheduledQueryRulesAlertActionPtrOutput
}

type scheduledQueryRulesAlertActionPtrType ScheduledQueryRulesAlertActionArgs

func ScheduledQueryRulesAlertActionPtr(v *ScheduledQueryRulesAlertActionArgs) ScheduledQueryRulesAlertActionPtrInput {
	return (*scheduledQueryRulesAlertActionPtrType)(v)
}

func (*scheduledQueryRulesAlertActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesAlertAction)(nil)).Elem()
}

func (i *scheduledQueryRulesAlertActionPtrType) ToScheduledQueryRulesAlertActionPtrOutput() ScheduledQueryRulesAlertActionPtrOutput {
	return i.ToScheduledQueryRulesAlertActionPtrOutputWithContext(context.Background())
}

func (i *scheduledQueryRulesAlertActionPtrType) ToScheduledQueryRulesAlertActionPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertActionPtrOutput)
}

func (i *scheduledQueryRulesAlertActionPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduledQueryRulesAlertAction] {
	return pulumix.Output[*ScheduledQueryRulesAlertAction]{
		OutputState: i.ToScheduledQueryRulesAlertActionPtrOutputWithContext(ctx).OutputState,
	}
}

type ScheduledQueryRulesAlertActionOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesAlertAction)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertActionOutput) ToScheduledQueryRulesAlertActionOutput() ScheduledQueryRulesAlertActionOutput {
	return o
}

func (o ScheduledQueryRulesAlertActionOutput) ToScheduledQueryRulesAlertActionOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertActionOutput {
	return o
}

func (o ScheduledQueryRulesAlertActionOutput) ToScheduledQueryRulesAlertActionPtrOutput() ScheduledQueryRulesAlertActionPtrOutput {
	return o.ToScheduledQueryRulesAlertActionPtrOutputWithContext(context.Background())
}

func (o ScheduledQueryRulesAlertActionOutput) ToScheduledQueryRulesAlertActionPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledQueryRulesAlertAction) *ScheduledQueryRulesAlertAction {
		return &v
	}).(ScheduledQueryRulesAlertActionPtrOutput)
}

func (o ScheduledQueryRulesAlertActionOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesAlertAction] {
	return pulumix.Output[ScheduledQueryRulesAlertAction]{
		OutputState: o.OutputState,
	}
}

// List of action group reference resource IDs.
func (o ScheduledQueryRulesAlertActionOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertAction) []string { return v.ActionGroups }).(pulumi.StringArrayOutput)
}

// Custom payload to be sent for all webhook payloads in alerting action.
func (o ScheduledQueryRulesAlertActionOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertAction) *string { return v.CustomWebhookPayload }).(pulumi.StringPtrOutput)
}

// Custom subject override for all email ids in Azure action group.
func (o ScheduledQueryRulesAlertActionOutput) EmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertAction) *string { return v.EmailSubject }).(pulumi.StringPtrOutput)
}

type ScheduledQueryRulesAlertActionPtrOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesAlertAction)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertActionPtrOutput) ToScheduledQueryRulesAlertActionPtrOutput() ScheduledQueryRulesAlertActionPtrOutput {
	return o
}

func (o ScheduledQueryRulesAlertActionPtrOutput) ToScheduledQueryRulesAlertActionPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertActionPtrOutput {
	return o
}

func (o ScheduledQueryRulesAlertActionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduledQueryRulesAlertAction] {
	return pulumix.Output[*ScheduledQueryRulesAlertAction]{
		OutputState: o.OutputState,
	}
}

func (o ScheduledQueryRulesAlertActionPtrOutput) Elem() ScheduledQueryRulesAlertActionOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertAction) ScheduledQueryRulesAlertAction {
		if v != nil {
			return *v
		}
		var ret ScheduledQueryRulesAlertAction
		return ret
	}).(ScheduledQueryRulesAlertActionOutput)
}

// List of action group reference resource IDs.
func (o ScheduledQueryRulesAlertActionPtrOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertAction) []string {
		if v == nil {
			return nil
		}
		return v.ActionGroups
	}).(pulumi.StringArrayOutput)
}

// Custom payload to be sent for all webhook payloads in alerting action.
func (o ScheduledQueryRulesAlertActionPtrOutput) CustomWebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertAction) *string {
		if v == nil {
			return nil
		}
		return v.CustomWebhookPayload
	}).(pulumi.StringPtrOutput)
}

// Custom subject override for all email ids in Azure action group.
func (o ScheduledQueryRulesAlertActionPtrOutput) EmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertAction) *string {
		if v == nil {
			return nil
		}
		return v.EmailSubject
	}).(pulumi.StringPtrOutput)
}

type ScheduledQueryRulesAlertTrigger struct {
	// A `metricTrigger` block as defined above. Trigger condition for metric query rule.
	MetricTrigger *ScheduledQueryRulesAlertTriggerMetricTrigger `pulumi:"metricTrigger"`
	// Evaluation operation for rule - 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.
	Operator string `pulumi:"operator"`
	// Result or count threshold based on which rule should be triggered. Values must be between 0 and 10000 inclusive.
	Threshold float64 `pulumi:"threshold"`
}

// ScheduledQueryRulesAlertTriggerInput is an input type that accepts ScheduledQueryRulesAlertTriggerArgs and ScheduledQueryRulesAlertTriggerOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertTriggerInput` via:
//
//	ScheduledQueryRulesAlertTriggerArgs{...}
type ScheduledQueryRulesAlertTriggerInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertTriggerOutput() ScheduledQueryRulesAlertTriggerOutput
	ToScheduledQueryRulesAlertTriggerOutputWithContext(context.Context) ScheduledQueryRulesAlertTriggerOutput
}

type ScheduledQueryRulesAlertTriggerArgs struct {
	// A `metricTrigger` block as defined above. Trigger condition for metric query rule.
	MetricTrigger ScheduledQueryRulesAlertTriggerMetricTriggerPtrInput `pulumi:"metricTrigger"`
	// Evaluation operation for rule - 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Result or count threshold based on which rule should be triggered. Values must be between 0 and 10000 inclusive.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
}

func (ScheduledQueryRulesAlertTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesAlertTrigger)(nil)).Elem()
}

func (i ScheduledQueryRulesAlertTriggerArgs) ToScheduledQueryRulesAlertTriggerOutput() ScheduledQueryRulesAlertTriggerOutput {
	return i.ToScheduledQueryRulesAlertTriggerOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertTriggerArgs) ToScheduledQueryRulesAlertTriggerOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertTriggerOutput)
}

func (i ScheduledQueryRulesAlertTriggerArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesAlertTrigger] {
	return pulumix.Output[ScheduledQueryRulesAlertTrigger]{
		OutputState: i.ToScheduledQueryRulesAlertTriggerOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduledQueryRulesAlertTriggerArgs) ToScheduledQueryRulesAlertTriggerPtrOutput() ScheduledQueryRulesAlertTriggerPtrOutput {
	return i.ToScheduledQueryRulesAlertTriggerPtrOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertTriggerArgs) ToScheduledQueryRulesAlertTriggerPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertTriggerOutput).ToScheduledQueryRulesAlertTriggerPtrOutputWithContext(ctx)
}

// ScheduledQueryRulesAlertTriggerPtrInput is an input type that accepts ScheduledQueryRulesAlertTriggerArgs, ScheduledQueryRulesAlertTriggerPtr and ScheduledQueryRulesAlertTriggerPtrOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertTriggerPtrInput` via:
//
//	        ScheduledQueryRulesAlertTriggerArgs{...}
//
//	or:
//
//	        nil
type ScheduledQueryRulesAlertTriggerPtrInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertTriggerPtrOutput() ScheduledQueryRulesAlertTriggerPtrOutput
	ToScheduledQueryRulesAlertTriggerPtrOutputWithContext(context.Context) ScheduledQueryRulesAlertTriggerPtrOutput
}

type scheduledQueryRulesAlertTriggerPtrType ScheduledQueryRulesAlertTriggerArgs

func ScheduledQueryRulesAlertTriggerPtr(v *ScheduledQueryRulesAlertTriggerArgs) ScheduledQueryRulesAlertTriggerPtrInput {
	return (*scheduledQueryRulesAlertTriggerPtrType)(v)
}

func (*scheduledQueryRulesAlertTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesAlertTrigger)(nil)).Elem()
}

func (i *scheduledQueryRulesAlertTriggerPtrType) ToScheduledQueryRulesAlertTriggerPtrOutput() ScheduledQueryRulesAlertTriggerPtrOutput {
	return i.ToScheduledQueryRulesAlertTriggerPtrOutputWithContext(context.Background())
}

func (i *scheduledQueryRulesAlertTriggerPtrType) ToScheduledQueryRulesAlertTriggerPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertTriggerPtrOutput)
}

func (i *scheduledQueryRulesAlertTriggerPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduledQueryRulesAlertTrigger] {
	return pulumix.Output[*ScheduledQueryRulesAlertTrigger]{
		OutputState: i.ToScheduledQueryRulesAlertTriggerPtrOutputWithContext(ctx).OutputState,
	}
}

type ScheduledQueryRulesAlertTriggerOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesAlertTrigger)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertTriggerOutput) ToScheduledQueryRulesAlertTriggerOutput() ScheduledQueryRulesAlertTriggerOutput {
	return o
}

func (o ScheduledQueryRulesAlertTriggerOutput) ToScheduledQueryRulesAlertTriggerOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertTriggerOutput {
	return o
}

func (o ScheduledQueryRulesAlertTriggerOutput) ToScheduledQueryRulesAlertTriggerPtrOutput() ScheduledQueryRulesAlertTriggerPtrOutput {
	return o.ToScheduledQueryRulesAlertTriggerPtrOutputWithContext(context.Background())
}

func (o ScheduledQueryRulesAlertTriggerOutput) ToScheduledQueryRulesAlertTriggerPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertTriggerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledQueryRulesAlertTrigger) *ScheduledQueryRulesAlertTrigger {
		return &v
	}).(ScheduledQueryRulesAlertTriggerPtrOutput)
}

func (o ScheduledQueryRulesAlertTriggerOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesAlertTrigger] {
	return pulumix.Output[ScheduledQueryRulesAlertTrigger]{
		OutputState: o.OutputState,
	}
}

// A `metricTrigger` block as defined above. Trigger condition for metric query rule.
func (o ScheduledQueryRulesAlertTriggerOutput) MetricTrigger() ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertTrigger) *ScheduledQueryRulesAlertTriggerMetricTrigger {
		return v.MetricTrigger
	}).(ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput)
}

// Evaluation operation for rule - 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.
func (o ScheduledQueryRulesAlertTriggerOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertTrigger) string { return v.Operator }).(pulumi.StringOutput)
}

// Result or count threshold based on which rule should be triggered. Values must be between 0 and 10000 inclusive.
func (o ScheduledQueryRulesAlertTriggerOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v ScheduledQueryRulesAlertTrigger) float64 { return v.Threshold }).(pulumi.Float64Output)
}

type ScheduledQueryRulesAlertTriggerPtrOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertTriggerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesAlertTrigger)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertTriggerPtrOutput) ToScheduledQueryRulesAlertTriggerPtrOutput() ScheduledQueryRulesAlertTriggerPtrOutput {
	return o
}

func (o ScheduledQueryRulesAlertTriggerPtrOutput) ToScheduledQueryRulesAlertTriggerPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertTriggerPtrOutput {
	return o
}

func (o ScheduledQueryRulesAlertTriggerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduledQueryRulesAlertTrigger] {
	return pulumix.Output[*ScheduledQueryRulesAlertTrigger]{
		OutputState: o.OutputState,
	}
}

func (o ScheduledQueryRulesAlertTriggerPtrOutput) Elem() ScheduledQueryRulesAlertTriggerOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertTrigger) ScheduledQueryRulesAlertTrigger {
		if v != nil {
			return *v
		}
		var ret ScheduledQueryRulesAlertTrigger
		return ret
	}).(ScheduledQueryRulesAlertTriggerOutput)
}

// A `metricTrigger` block as defined above. Trigger condition for metric query rule.
func (o ScheduledQueryRulesAlertTriggerPtrOutput) MetricTrigger() ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertTrigger) *ScheduledQueryRulesAlertTriggerMetricTrigger {
		if v == nil {
			return nil
		}
		return v.MetricTrigger
	}).(ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput)
}

// Evaluation operation for rule - 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.
func (o ScheduledQueryRulesAlertTriggerPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Result or count threshold based on which rule should be triggered. Values must be between 0 and 10000 inclusive.
func (o ScheduledQueryRulesAlertTriggerPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertTrigger) *float64 {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(pulumi.Float64PtrOutput)
}

type ScheduledQueryRulesAlertTriggerMetricTrigger struct {
	// Evaluation of metric on a particular column.
	MetricColumn *string `pulumi:"metricColumn"`
	// Metric Trigger Type - 'Consecutive' or 'Total'.
	MetricTriggerType string `pulumi:"metricTriggerType"`
	// Evaluation operation for rule - 'Equal', 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.
	Operator string `pulumi:"operator"`
	// The threshold of the metric trigger. Values must be between 0 and 10000 inclusive.
	Threshold float64 `pulumi:"threshold"`
}

// ScheduledQueryRulesAlertTriggerMetricTriggerInput is an input type that accepts ScheduledQueryRulesAlertTriggerMetricTriggerArgs and ScheduledQueryRulesAlertTriggerMetricTriggerOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertTriggerMetricTriggerInput` via:
//
//	ScheduledQueryRulesAlertTriggerMetricTriggerArgs{...}
type ScheduledQueryRulesAlertTriggerMetricTriggerInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertTriggerMetricTriggerOutput() ScheduledQueryRulesAlertTriggerMetricTriggerOutput
	ToScheduledQueryRulesAlertTriggerMetricTriggerOutputWithContext(context.Context) ScheduledQueryRulesAlertTriggerMetricTriggerOutput
}

type ScheduledQueryRulesAlertTriggerMetricTriggerArgs struct {
	// Evaluation of metric on a particular column.
	MetricColumn pulumi.StringPtrInput `pulumi:"metricColumn"`
	// Metric Trigger Type - 'Consecutive' or 'Total'.
	MetricTriggerType pulumi.StringInput `pulumi:"metricTriggerType"`
	// Evaluation operation for rule - 'Equal', 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The threshold of the metric trigger. Values must be between 0 and 10000 inclusive.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
}

func (ScheduledQueryRulesAlertTriggerMetricTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesAlertTriggerMetricTrigger)(nil)).Elem()
}

func (i ScheduledQueryRulesAlertTriggerMetricTriggerArgs) ToScheduledQueryRulesAlertTriggerMetricTriggerOutput() ScheduledQueryRulesAlertTriggerMetricTriggerOutput {
	return i.ToScheduledQueryRulesAlertTriggerMetricTriggerOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertTriggerMetricTriggerArgs) ToScheduledQueryRulesAlertTriggerMetricTriggerOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertTriggerMetricTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertTriggerMetricTriggerOutput)
}

func (i ScheduledQueryRulesAlertTriggerMetricTriggerArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesAlertTriggerMetricTrigger] {
	return pulumix.Output[ScheduledQueryRulesAlertTriggerMetricTrigger]{
		OutputState: i.ToScheduledQueryRulesAlertTriggerMetricTriggerOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduledQueryRulesAlertTriggerMetricTriggerArgs) ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput() ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput {
	return i.ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertTriggerMetricTriggerArgs) ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertTriggerMetricTriggerOutput).ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutputWithContext(ctx)
}

// ScheduledQueryRulesAlertTriggerMetricTriggerPtrInput is an input type that accepts ScheduledQueryRulesAlertTriggerMetricTriggerArgs, ScheduledQueryRulesAlertTriggerMetricTriggerPtr and ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertTriggerMetricTriggerPtrInput` via:
//
//	        ScheduledQueryRulesAlertTriggerMetricTriggerArgs{...}
//
//	or:
//
//	        nil
type ScheduledQueryRulesAlertTriggerMetricTriggerPtrInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput() ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput
	ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutputWithContext(context.Context) ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput
}

type scheduledQueryRulesAlertTriggerMetricTriggerPtrType ScheduledQueryRulesAlertTriggerMetricTriggerArgs

func ScheduledQueryRulesAlertTriggerMetricTriggerPtr(v *ScheduledQueryRulesAlertTriggerMetricTriggerArgs) ScheduledQueryRulesAlertTriggerMetricTriggerPtrInput {
	return (*scheduledQueryRulesAlertTriggerMetricTriggerPtrType)(v)
}

func (*scheduledQueryRulesAlertTriggerMetricTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesAlertTriggerMetricTrigger)(nil)).Elem()
}

func (i *scheduledQueryRulesAlertTriggerMetricTriggerPtrType) ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput() ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput {
	return i.ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutputWithContext(context.Background())
}

func (i *scheduledQueryRulesAlertTriggerMetricTriggerPtrType) ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput)
}

func (i *scheduledQueryRulesAlertTriggerMetricTriggerPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduledQueryRulesAlertTriggerMetricTrigger] {
	return pulumix.Output[*ScheduledQueryRulesAlertTriggerMetricTrigger]{
		OutputState: i.ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutputWithContext(ctx).OutputState,
	}
}

type ScheduledQueryRulesAlertTriggerMetricTriggerOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertTriggerMetricTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesAlertTriggerMetricTrigger)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertTriggerMetricTriggerOutput) ToScheduledQueryRulesAlertTriggerMetricTriggerOutput() ScheduledQueryRulesAlertTriggerMetricTriggerOutput {
	return o
}

func (o ScheduledQueryRulesAlertTriggerMetricTriggerOutput) ToScheduledQueryRulesAlertTriggerMetricTriggerOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertTriggerMetricTriggerOutput {
	return o
}

func (o ScheduledQueryRulesAlertTriggerMetricTriggerOutput) ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput() ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput {
	return o.ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutputWithContext(context.Background())
}

func (o ScheduledQueryRulesAlertTriggerMetricTriggerOutput) ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledQueryRulesAlertTriggerMetricTrigger) *ScheduledQueryRulesAlertTriggerMetricTrigger {
		return &v
	}).(ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput)
}

func (o ScheduledQueryRulesAlertTriggerMetricTriggerOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesAlertTriggerMetricTrigger] {
	return pulumix.Output[ScheduledQueryRulesAlertTriggerMetricTrigger]{
		OutputState: o.OutputState,
	}
}

// Evaluation of metric on a particular column.
func (o ScheduledQueryRulesAlertTriggerMetricTriggerOutput) MetricColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertTriggerMetricTrigger) *string { return v.MetricColumn }).(pulumi.StringPtrOutput)
}

// Metric Trigger Type - 'Consecutive' or 'Total'.
func (o ScheduledQueryRulesAlertTriggerMetricTriggerOutput) MetricTriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertTriggerMetricTrigger) string { return v.MetricTriggerType }).(pulumi.StringOutput)
}

// Evaluation operation for rule - 'Equal', 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.
func (o ScheduledQueryRulesAlertTriggerMetricTriggerOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertTriggerMetricTrigger) string { return v.Operator }).(pulumi.StringOutput)
}

// The threshold of the metric trigger. Values must be between 0 and 10000 inclusive.
func (o ScheduledQueryRulesAlertTriggerMetricTriggerOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v ScheduledQueryRulesAlertTriggerMetricTrigger) float64 { return v.Threshold }).(pulumi.Float64Output)
}

type ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesAlertTriggerMetricTrigger)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput) ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput() ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput {
	return o
}

func (o ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput) ToScheduledQueryRulesAlertTriggerMetricTriggerPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput {
	return o
}

func (o ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduledQueryRulesAlertTriggerMetricTrigger] {
	return pulumix.Output[*ScheduledQueryRulesAlertTriggerMetricTrigger]{
		OutputState: o.OutputState,
	}
}

func (o ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput) Elem() ScheduledQueryRulesAlertTriggerMetricTriggerOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertTriggerMetricTrigger) ScheduledQueryRulesAlertTriggerMetricTrigger {
		if v != nil {
			return *v
		}
		var ret ScheduledQueryRulesAlertTriggerMetricTrigger
		return ret
	}).(ScheduledQueryRulesAlertTriggerMetricTriggerOutput)
}

// Evaluation of metric on a particular column.
func (o ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput) MetricColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertTriggerMetricTrigger) *string {
		if v == nil {
			return nil
		}
		return v.MetricColumn
	}).(pulumi.StringPtrOutput)
}

// Metric Trigger Type - 'Consecutive' or 'Total'.
func (o ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput) MetricTriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertTriggerMetricTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.MetricTriggerType
	}).(pulumi.StringPtrOutput)
}

// Evaluation operation for rule - 'Equal', 'GreaterThan', GreaterThanOrEqual', 'LessThan', or 'LessThanOrEqual'.
func (o ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertTriggerMetricTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// The threshold of the metric trigger. Values must be between 0 and 10000 inclusive.
func (o ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertTriggerMetricTrigger) *float64 {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(pulumi.Float64PtrOutput)
}

type ScheduledQueryRulesAlertV2Action struct {
	// List of Action Group resource IDs to invoke when the alert fires.
	ActionGroups []string `pulumi:"actionGroups"`
	// Specifies the properties of an alert payload.
	CustomProperties map[string]string `pulumi:"customProperties"`
}

// ScheduledQueryRulesAlertV2ActionInput is an input type that accepts ScheduledQueryRulesAlertV2ActionArgs and ScheduledQueryRulesAlertV2ActionOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertV2ActionInput` via:
//
//	ScheduledQueryRulesAlertV2ActionArgs{...}
type ScheduledQueryRulesAlertV2ActionInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertV2ActionOutput() ScheduledQueryRulesAlertV2ActionOutput
	ToScheduledQueryRulesAlertV2ActionOutputWithContext(context.Context) ScheduledQueryRulesAlertV2ActionOutput
}

type ScheduledQueryRulesAlertV2ActionArgs struct {
	// List of Action Group resource IDs to invoke when the alert fires.
	ActionGroups pulumi.StringArrayInput `pulumi:"actionGroups"`
	// Specifies the properties of an alert payload.
	CustomProperties pulumi.StringMapInput `pulumi:"customProperties"`
}

func (ScheduledQueryRulesAlertV2ActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesAlertV2Action)(nil)).Elem()
}

func (i ScheduledQueryRulesAlertV2ActionArgs) ToScheduledQueryRulesAlertV2ActionOutput() ScheduledQueryRulesAlertV2ActionOutput {
	return i.ToScheduledQueryRulesAlertV2ActionOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertV2ActionArgs) ToScheduledQueryRulesAlertV2ActionOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2ActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertV2ActionOutput)
}

func (i ScheduledQueryRulesAlertV2ActionArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesAlertV2Action] {
	return pulumix.Output[ScheduledQueryRulesAlertV2Action]{
		OutputState: i.ToScheduledQueryRulesAlertV2ActionOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduledQueryRulesAlertV2ActionArgs) ToScheduledQueryRulesAlertV2ActionPtrOutput() ScheduledQueryRulesAlertV2ActionPtrOutput {
	return i.ToScheduledQueryRulesAlertV2ActionPtrOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertV2ActionArgs) ToScheduledQueryRulesAlertV2ActionPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2ActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertV2ActionOutput).ToScheduledQueryRulesAlertV2ActionPtrOutputWithContext(ctx)
}

// ScheduledQueryRulesAlertV2ActionPtrInput is an input type that accepts ScheduledQueryRulesAlertV2ActionArgs, ScheduledQueryRulesAlertV2ActionPtr and ScheduledQueryRulesAlertV2ActionPtrOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertV2ActionPtrInput` via:
//
//	        ScheduledQueryRulesAlertV2ActionArgs{...}
//
//	or:
//
//	        nil
type ScheduledQueryRulesAlertV2ActionPtrInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertV2ActionPtrOutput() ScheduledQueryRulesAlertV2ActionPtrOutput
	ToScheduledQueryRulesAlertV2ActionPtrOutputWithContext(context.Context) ScheduledQueryRulesAlertV2ActionPtrOutput
}

type scheduledQueryRulesAlertV2ActionPtrType ScheduledQueryRulesAlertV2ActionArgs

func ScheduledQueryRulesAlertV2ActionPtr(v *ScheduledQueryRulesAlertV2ActionArgs) ScheduledQueryRulesAlertV2ActionPtrInput {
	return (*scheduledQueryRulesAlertV2ActionPtrType)(v)
}

func (*scheduledQueryRulesAlertV2ActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesAlertV2Action)(nil)).Elem()
}

func (i *scheduledQueryRulesAlertV2ActionPtrType) ToScheduledQueryRulesAlertV2ActionPtrOutput() ScheduledQueryRulesAlertV2ActionPtrOutput {
	return i.ToScheduledQueryRulesAlertV2ActionPtrOutputWithContext(context.Background())
}

func (i *scheduledQueryRulesAlertV2ActionPtrType) ToScheduledQueryRulesAlertV2ActionPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2ActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertV2ActionPtrOutput)
}

func (i *scheduledQueryRulesAlertV2ActionPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduledQueryRulesAlertV2Action] {
	return pulumix.Output[*ScheduledQueryRulesAlertV2Action]{
		OutputState: i.ToScheduledQueryRulesAlertV2ActionPtrOutputWithContext(ctx).OutputState,
	}
}

type ScheduledQueryRulesAlertV2ActionOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertV2ActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesAlertV2Action)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertV2ActionOutput) ToScheduledQueryRulesAlertV2ActionOutput() ScheduledQueryRulesAlertV2ActionOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2ActionOutput) ToScheduledQueryRulesAlertV2ActionOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2ActionOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2ActionOutput) ToScheduledQueryRulesAlertV2ActionPtrOutput() ScheduledQueryRulesAlertV2ActionPtrOutput {
	return o.ToScheduledQueryRulesAlertV2ActionPtrOutputWithContext(context.Background())
}

func (o ScheduledQueryRulesAlertV2ActionOutput) ToScheduledQueryRulesAlertV2ActionPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2ActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledQueryRulesAlertV2Action) *ScheduledQueryRulesAlertV2Action {
		return &v
	}).(ScheduledQueryRulesAlertV2ActionPtrOutput)
}

func (o ScheduledQueryRulesAlertV2ActionOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesAlertV2Action] {
	return pulumix.Output[ScheduledQueryRulesAlertV2Action]{
		OutputState: o.OutputState,
	}
}

// List of Action Group resource IDs to invoke when the alert fires.
func (o ScheduledQueryRulesAlertV2ActionOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2Action) []string { return v.ActionGroups }).(pulumi.StringArrayOutput)
}

// Specifies the properties of an alert payload.
func (o ScheduledQueryRulesAlertV2ActionOutput) CustomProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2Action) map[string]string { return v.CustomProperties }).(pulumi.StringMapOutput)
}

type ScheduledQueryRulesAlertV2ActionPtrOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertV2ActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesAlertV2Action)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertV2ActionPtrOutput) ToScheduledQueryRulesAlertV2ActionPtrOutput() ScheduledQueryRulesAlertV2ActionPtrOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2ActionPtrOutput) ToScheduledQueryRulesAlertV2ActionPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2ActionPtrOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2ActionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduledQueryRulesAlertV2Action] {
	return pulumix.Output[*ScheduledQueryRulesAlertV2Action]{
		OutputState: o.OutputState,
	}
}

func (o ScheduledQueryRulesAlertV2ActionPtrOutput) Elem() ScheduledQueryRulesAlertV2ActionOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2Action) ScheduledQueryRulesAlertV2Action {
		if v != nil {
			return *v
		}
		var ret ScheduledQueryRulesAlertV2Action
		return ret
	}).(ScheduledQueryRulesAlertV2ActionOutput)
}

// List of Action Group resource IDs to invoke when the alert fires.
func (o ScheduledQueryRulesAlertV2ActionPtrOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2Action) []string {
		if v == nil {
			return nil
		}
		return v.ActionGroups
	}).(pulumi.StringArrayOutput)
}

// Specifies the properties of an alert payload.
func (o ScheduledQueryRulesAlertV2ActionPtrOutput) CustomProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2Action) map[string]string {
		if v == nil {
			return nil
		}
		return v.CustomProperties
	}).(pulumi.StringMapOutput)
}

type ScheduledQueryRulesAlertV2Criteria struct {
	// A `dimension` block as defined below.
	Dimensions []ScheduledQueryRulesAlertV2CriteriaDimension `pulumi:"dimensions"`
	// A `failingPeriods` block as defined below.
	FailingPeriods *ScheduledQueryRulesAlertV2CriteriaFailingPeriods `pulumi:"failingPeriods"`
	// Specifies the column containing the metric measure number.
	//
	// > **Note** `metricMeasureColumn` is required if `timeAggregationMethod` is `Average`, `Maximum`, `Minimum`, or `Total`. And `metricMeasureColumn` can not be specified if `timeAggregationMethod` is `Count`.
	MetricMeasureColumn *string `pulumi:"metricMeasureColumn"`
	// Specifies the criteria operator. Possible values are `Equal`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan`,and `LessThanOrEqual`.
	Operator string `pulumi:"operator"`
	// The query to run on logs. The results returned by this query are used to populate the alert.
	Query string `pulumi:"query"`
	// Specifies the column containing the resource ID. The content of the column must be an uri formatted as resource ID.
	ResourceIdColumn *string `pulumi:"resourceIdColumn"`
	// Specifies the criteria threshold value that activates the alert.
	Threshold float64 `pulumi:"threshold"`
	// The type of aggregation to apply to the data points in aggregation granularity. Possible values are `Average`, `Count`, `Maximum`, `Minimum`,and `Total`.
	TimeAggregationMethod string `pulumi:"timeAggregationMethod"`
}

// ScheduledQueryRulesAlertV2CriteriaInput is an input type that accepts ScheduledQueryRulesAlertV2CriteriaArgs and ScheduledQueryRulesAlertV2CriteriaOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertV2CriteriaInput` via:
//
//	ScheduledQueryRulesAlertV2CriteriaArgs{...}
type ScheduledQueryRulesAlertV2CriteriaInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertV2CriteriaOutput() ScheduledQueryRulesAlertV2CriteriaOutput
	ToScheduledQueryRulesAlertV2CriteriaOutputWithContext(context.Context) ScheduledQueryRulesAlertV2CriteriaOutput
}

type ScheduledQueryRulesAlertV2CriteriaArgs struct {
	// A `dimension` block as defined below.
	Dimensions ScheduledQueryRulesAlertV2CriteriaDimensionArrayInput `pulumi:"dimensions"`
	// A `failingPeriods` block as defined below.
	FailingPeriods ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrInput `pulumi:"failingPeriods"`
	// Specifies the column containing the metric measure number.
	//
	// > **Note** `metricMeasureColumn` is required if `timeAggregationMethod` is `Average`, `Maximum`, `Minimum`, or `Total`. And `metricMeasureColumn` can not be specified if `timeAggregationMethod` is `Count`.
	MetricMeasureColumn pulumi.StringPtrInput `pulumi:"metricMeasureColumn"`
	// Specifies the criteria operator. Possible values are `Equal`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan`,and `LessThanOrEqual`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The query to run on logs. The results returned by this query are used to populate the alert.
	Query pulumi.StringInput `pulumi:"query"`
	// Specifies the column containing the resource ID. The content of the column must be an uri formatted as resource ID.
	ResourceIdColumn pulumi.StringPtrInput `pulumi:"resourceIdColumn"`
	// Specifies the criteria threshold value that activates the alert.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// The type of aggregation to apply to the data points in aggregation granularity. Possible values are `Average`, `Count`, `Maximum`, `Minimum`,and `Total`.
	TimeAggregationMethod pulumi.StringInput `pulumi:"timeAggregationMethod"`
}

func (ScheduledQueryRulesAlertV2CriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesAlertV2Criteria)(nil)).Elem()
}

func (i ScheduledQueryRulesAlertV2CriteriaArgs) ToScheduledQueryRulesAlertV2CriteriaOutput() ScheduledQueryRulesAlertV2CriteriaOutput {
	return i.ToScheduledQueryRulesAlertV2CriteriaOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertV2CriteriaArgs) ToScheduledQueryRulesAlertV2CriteriaOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2CriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertV2CriteriaOutput)
}

func (i ScheduledQueryRulesAlertV2CriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesAlertV2Criteria] {
	return pulumix.Output[ScheduledQueryRulesAlertV2Criteria]{
		OutputState: i.ToScheduledQueryRulesAlertV2CriteriaOutputWithContext(ctx).OutputState,
	}
}

// ScheduledQueryRulesAlertV2CriteriaArrayInput is an input type that accepts ScheduledQueryRulesAlertV2CriteriaArray and ScheduledQueryRulesAlertV2CriteriaArrayOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertV2CriteriaArrayInput` via:
//
//	ScheduledQueryRulesAlertV2CriteriaArray{ ScheduledQueryRulesAlertV2CriteriaArgs{...} }
type ScheduledQueryRulesAlertV2CriteriaArrayInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertV2CriteriaArrayOutput() ScheduledQueryRulesAlertV2CriteriaArrayOutput
	ToScheduledQueryRulesAlertV2CriteriaArrayOutputWithContext(context.Context) ScheduledQueryRulesAlertV2CriteriaArrayOutput
}

type ScheduledQueryRulesAlertV2CriteriaArray []ScheduledQueryRulesAlertV2CriteriaInput

func (ScheduledQueryRulesAlertV2CriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduledQueryRulesAlertV2Criteria)(nil)).Elem()
}

func (i ScheduledQueryRulesAlertV2CriteriaArray) ToScheduledQueryRulesAlertV2CriteriaArrayOutput() ScheduledQueryRulesAlertV2CriteriaArrayOutput {
	return i.ToScheduledQueryRulesAlertV2CriteriaArrayOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertV2CriteriaArray) ToScheduledQueryRulesAlertV2CriteriaArrayOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2CriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertV2CriteriaArrayOutput)
}

func (i ScheduledQueryRulesAlertV2CriteriaArray) ToOutput(ctx context.Context) pulumix.Output[[]ScheduledQueryRulesAlertV2Criteria] {
	return pulumix.Output[[]ScheduledQueryRulesAlertV2Criteria]{
		OutputState: i.ToScheduledQueryRulesAlertV2CriteriaArrayOutputWithContext(ctx).OutputState,
	}
}

type ScheduledQueryRulesAlertV2CriteriaOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertV2CriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesAlertV2Criteria)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertV2CriteriaOutput) ToScheduledQueryRulesAlertV2CriteriaOutput() ScheduledQueryRulesAlertV2CriteriaOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2CriteriaOutput) ToScheduledQueryRulesAlertV2CriteriaOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2CriteriaOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2CriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesAlertV2Criteria] {
	return pulumix.Output[ScheduledQueryRulesAlertV2Criteria]{
		OutputState: o.OutputState,
	}
}

// A `dimension` block as defined below.
func (o ScheduledQueryRulesAlertV2CriteriaOutput) Dimensions() ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2Criteria) []ScheduledQueryRulesAlertV2CriteriaDimension {
		return v.Dimensions
	}).(ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput)
}

// A `failingPeriods` block as defined below.
func (o ScheduledQueryRulesAlertV2CriteriaOutput) FailingPeriods() ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2Criteria) *ScheduledQueryRulesAlertV2CriteriaFailingPeriods {
		return v.FailingPeriods
	}).(ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput)
}

// Specifies the column containing the metric measure number.
//
// > **Note** `metricMeasureColumn` is required if `timeAggregationMethod` is `Average`, `Maximum`, `Minimum`, or `Total`. And `metricMeasureColumn` can not be specified if `timeAggregationMethod` is `Count`.
func (o ScheduledQueryRulesAlertV2CriteriaOutput) MetricMeasureColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2Criteria) *string { return v.MetricMeasureColumn }).(pulumi.StringPtrOutput)
}

// Specifies the criteria operator. Possible values are `Equal`, `GreaterThan`, `GreaterThanOrEqual`, `LessThan`,and `LessThanOrEqual`.
func (o ScheduledQueryRulesAlertV2CriteriaOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2Criteria) string { return v.Operator }).(pulumi.StringOutput)
}

// The query to run on logs. The results returned by this query are used to populate the alert.
func (o ScheduledQueryRulesAlertV2CriteriaOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2Criteria) string { return v.Query }).(pulumi.StringOutput)
}

// Specifies the column containing the resource ID. The content of the column must be an uri formatted as resource ID.
func (o ScheduledQueryRulesAlertV2CriteriaOutput) ResourceIdColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2Criteria) *string { return v.ResourceIdColumn }).(pulumi.StringPtrOutput)
}

// Specifies the criteria threshold value that activates the alert.
func (o ScheduledQueryRulesAlertV2CriteriaOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2Criteria) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The type of aggregation to apply to the data points in aggregation granularity. Possible values are `Average`, `Count`, `Maximum`, `Minimum`,and `Total`.
func (o ScheduledQueryRulesAlertV2CriteriaOutput) TimeAggregationMethod() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2Criteria) string { return v.TimeAggregationMethod }).(pulumi.StringOutput)
}

type ScheduledQueryRulesAlertV2CriteriaArrayOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertV2CriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduledQueryRulesAlertV2Criteria)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertV2CriteriaArrayOutput) ToScheduledQueryRulesAlertV2CriteriaArrayOutput() ScheduledQueryRulesAlertV2CriteriaArrayOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2CriteriaArrayOutput) ToScheduledQueryRulesAlertV2CriteriaArrayOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2CriteriaArrayOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2CriteriaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ScheduledQueryRulesAlertV2Criteria] {
	return pulumix.Output[[]ScheduledQueryRulesAlertV2Criteria]{
		OutputState: o.OutputState,
	}
}

func (o ScheduledQueryRulesAlertV2CriteriaArrayOutput) Index(i pulumi.IntInput) ScheduledQueryRulesAlertV2CriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduledQueryRulesAlertV2Criteria {
		return vs[0].([]ScheduledQueryRulesAlertV2Criteria)[vs[1].(int)]
	}).(ScheduledQueryRulesAlertV2CriteriaOutput)
}

type ScheduledQueryRulesAlertV2CriteriaDimension struct {
	// Name of the dimension.
	Name string `pulumi:"name"`
	// Operator for dimension values. Possible values are `Exclude`,and `Include`.
	Operator string `pulumi:"operator"`
	// List of dimension values. Use a wildcard `*` to collect all.
	Values []string `pulumi:"values"`
}

// ScheduledQueryRulesAlertV2CriteriaDimensionInput is an input type that accepts ScheduledQueryRulesAlertV2CriteriaDimensionArgs and ScheduledQueryRulesAlertV2CriteriaDimensionOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertV2CriteriaDimensionInput` via:
//
//	ScheduledQueryRulesAlertV2CriteriaDimensionArgs{...}
type ScheduledQueryRulesAlertV2CriteriaDimensionInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertV2CriteriaDimensionOutput() ScheduledQueryRulesAlertV2CriteriaDimensionOutput
	ToScheduledQueryRulesAlertV2CriteriaDimensionOutputWithContext(context.Context) ScheduledQueryRulesAlertV2CriteriaDimensionOutput
}

type ScheduledQueryRulesAlertV2CriteriaDimensionArgs struct {
	// Name of the dimension.
	Name pulumi.StringInput `pulumi:"name"`
	// Operator for dimension values. Possible values are `Exclude`,and `Include`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// List of dimension values. Use a wildcard `*` to collect all.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScheduledQueryRulesAlertV2CriteriaDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesAlertV2CriteriaDimension)(nil)).Elem()
}

func (i ScheduledQueryRulesAlertV2CriteriaDimensionArgs) ToScheduledQueryRulesAlertV2CriteriaDimensionOutput() ScheduledQueryRulesAlertV2CriteriaDimensionOutput {
	return i.ToScheduledQueryRulesAlertV2CriteriaDimensionOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertV2CriteriaDimensionArgs) ToScheduledQueryRulesAlertV2CriteriaDimensionOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2CriteriaDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertV2CriteriaDimensionOutput)
}

func (i ScheduledQueryRulesAlertV2CriteriaDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesAlertV2CriteriaDimension] {
	return pulumix.Output[ScheduledQueryRulesAlertV2CriteriaDimension]{
		OutputState: i.ToScheduledQueryRulesAlertV2CriteriaDimensionOutputWithContext(ctx).OutputState,
	}
}

// ScheduledQueryRulesAlertV2CriteriaDimensionArrayInput is an input type that accepts ScheduledQueryRulesAlertV2CriteriaDimensionArray and ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertV2CriteriaDimensionArrayInput` via:
//
//	ScheduledQueryRulesAlertV2CriteriaDimensionArray{ ScheduledQueryRulesAlertV2CriteriaDimensionArgs{...} }
type ScheduledQueryRulesAlertV2CriteriaDimensionArrayInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput() ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput
	ToScheduledQueryRulesAlertV2CriteriaDimensionArrayOutputWithContext(context.Context) ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput
}

type ScheduledQueryRulesAlertV2CriteriaDimensionArray []ScheduledQueryRulesAlertV2CriteriaDimensionInput

func (ScheduledQueryRulesAlertV2CriteriaDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduledQueryRulesAlertV2CriteriaDimension)(nil)).Elem()
}

func (i ScheduledQueryRulesAlertV2CriteriaDimensionArray) ToScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput() ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput {
	return i.ToScheduledQueryRulesAlertV2CriteriaDimensionArrayOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertV2CriteriaDimensionArray) ToScheduledQueryRulesAlertV2CriteriaDimensionArrayOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput)
}

func (i ScheduledQueryRulesAlertV2CriteriaDimensionArray) ToOutput(ctx context.Context) pulumix.Output[[]ScheduledQueryRulesAlertV2CriteriaDimension] {
	return pulumix.Output[[]ScheduledQueryRulesAlertV2CriteriaDimension]{
		OutputState: i.ToScheduledQueryRulesAlertV2CriteriaDimensionArrayOutputWithContext(ctx).OutputState,
	}
}

type ScheduledQueryRulesAlertV2CriteriaDimensionOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertV2CriteriaDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesAlertV2CriteriaDimension)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertV2CriteriaDimensionOutput) ToScheduledQueryRulesAlertV2CriteriaDimensionOutput() ScheduledQueryRulesAlertV2CriteriaDimensionOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2CriteriaDimensionOutput) ToScheduledQueryRulesAlertV2CriteriaDimensionOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2CriteriaDimensionOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2CriteriaDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesAlertV2CriteriaDimension] {
	return pulumix.Output[ScheduledQueryRulesAlertV2CriteriaDimension]{
		OutputState: o.OutputState,
	}
}

// Name of the dimension.
func (o ScheduledQueryRulesAlertV2CriteriaDimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2CriteriaDimension) string { return v.Name }).(pulumi.StringOutput)
}

// Operator for dimension values. Possible values are `Exclude`,and `Include`.
func (o ScheduledQueryRulesAlertV2CriteriaDimensionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2CriteriaDimension) string { return v.Operator }).(pulumi.StringOutput)
}

// List of dimension values. Use a wildcard `*` to collect all.
func (o ScheduledQueryRulesAlertV2CriteriaDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2CriteriaDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduledQueryRulesAlertV2CriteriaDimension)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput) ToScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput() ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput) ToScheduledQueryRulesAlertV2CriteriaDimensionArrayOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ScheduledQueryRulesAlertV2CriteriaDimension] {
	return pulumix.Output[[]ScheduledQueryRulesAlertV2CriteriaDimension]{
		OutputState: o.OutputState,
	}
}

func (o ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput) Index(i pulumi.IntInput) ScheduledQueryRulesAlertV2CriteriaDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduledQueryRulesAlertV2CriteriaDimension {
		return vs[0].([]ScheduledQueryRulesAlertV2CriteriaDimension)[vs[1].(int)]
	}).(ScheduledQueryRulesAlertV2CriteriaDimensionOutput)
}

type ScheduledQueryRulesAlertV2CriteriaFailingPeriods struct {
	// Specifies the number of violations to trigger an alert. Should be smaller or equal to `numberOfEvaluationPeriods`. Possible value is integer between 1 and 6.
	MinimumFailingPeriodsToTriggerAlert int `pulumi:"minimumFailingPeriodsToTriggerAlert"`
	// Specifies the number of aggregated look-back points. The look-back time window is calculated based on the aggregation granularity `windowDuration` and the selected number of aggregated points. Possible value is integer between 1 and 6.
	//
	// > **Note** The query look back which is `windowDuration`*`numberOfEvaluationPeriods` cannot exceed 48 hours.
	//
	// > **Note** `numberOfEvaluationPeriods` must be `1` for queries that do not project timestamp column
	NumberOfEvaluationPeriods int `pulumi:"numberOfEvaluationPeriods"`
}

// ScheduledQueryRulesAlertV2CriteriaFailingPeriodsInput is an input type that accepts ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs and ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertV2CriteriaFailingPeriodsInput` via:
//
//	ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs{...}
type ScheduledQueryRulesAlertV2CriteriaFailingPeriodsInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput() ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput
	ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutputWithContext(context.Context) ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput
}

type ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs struct {
	// Specifies the number of violations to trigger an alert. Should be smaller or equal to `numberOfEvaluationPeriods`. Possible value is integer between 1 and 6.
	MinimumFailingPeriodsToTriggerAlert pulumi.IntInput `pulumi:"minimumFailingPeriodsToTriggerAlert"`
	// Specifies the number of aggregated look-back points. The look-back time window is calculated based on the aggregation granularity `windowDuration` and the selected number of aggregated points. Possible value is integer between 1 and 6.
	//
	// > **Note** The query look back which is `windowDuration`*`numberOfEvaluationPeriods` cannot exceed 48 hours.
	//
	// > **Note** `numberOfEvaluationPeriods` must be `1` for queries that do not project timestamp column
	NumberOfEvaluationPeriods pulumi.IntInput `pulumi:"numberOfEvaluationPeriods"`
}

func (ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesAlertV2CriteriaFailingPeriods)(nil)).Elem()
}

func (i ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs) ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput() ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput {
	return i.ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs) ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput)
}

func (i ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesAlertV2CriteriaFailingPeriods] {
	return pulumix.Output[ScheduledQueryRulesAlertV2CriteriaFailingPeriods]{
		OutputState: i.ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs) ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput() ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput {
	return i.ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs) ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput).ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutputWithContext(ctx)
}

// ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrInput is an input type that accepts ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs, ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtr and ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrInput` via:
//
//	        ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs{...}
//
//	or:
//
//	        nil
type ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrInput interface {
	pulumi.Input

	ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput() ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput
	ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutputWithContext(context.Context) ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput
}

type scheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrType ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs

func ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtr(v *ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs) ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrInput {
	return (*scheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrType)(v)
}

func (*scheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesAlertV2CriteriaFailingPeriods)(nil)).Elem()
}

func (i *scheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrType) ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput() ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput {
	return i.ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutputWithContext(context.Background())
}

func (i *scheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrType) ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput)
}

func (i *scheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduledQueryRulesAlertV2CriteriaFailingPeriods] {
	return pulumix.Output[*ScheduledQueryRulesAlertV2CriteriaFailingPeriods]{
		OutputState: i.ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutputWithContext(ctx).OutputState,
	}
}

type ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesAlertV2CriteriaFailingPeriods)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput) ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput() ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput) ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput) ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput() ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput {
	return o.ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutputWithContext(context.Background())
}

func (o ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput) ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledQueryRulesAlertV2CriteriaFailingPeriods) *ScheduledQueryRulesAlertV2CriteriaFailingPeriods {
		return &v
	}).(ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput)
}

func (o ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesAlertV2CriteriaFailingPeriods] {
	return pulumix.Output[ScheduledQueryRulesAlertV2CriteriaFailingPeriods]{
		OutputState: o.OutputState,
	}
}

// Specifies the number of violations to trigger an alert. Should be smaller or equal to `numberOfEvaluationPeriods`. Possible value is integer between 1 and 6.
func (o ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput) MinimumFailingPeriodsToTriggerAlert() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2CriteriaFailingPeriods) int {
		return v.MinimumFailingPeriodsToTriggerAlert
	}).(pulumi.IntOutput)
}

// Specifies the number of aggregated look-back points. The look-back time window is calculated based on the aggregation granularity `windowDuration` and the selected number of aggregated points. Possible value is integer between 1 and 6.
//
// > **Note** The query look back which is `windowDuration`*`numberOfEvaluationPeriods` cannot exceed 48 hours.
//
// > **Note** `numberOfEvaluationPeriods` must be `1` for queries that do not project timestamp column
func (o ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput) NumberOfEvaluationPeriods() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduledQueryRulesAlertV2CriteriaFailingPeriods) int { return v.NumberOfEvaluationPeriods }).(pulumi.IntOutput)
}

type ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesAlertV2CriteriaFailingPeriods)(nil)).Elem()
}

func (o ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput) ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput() ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput) ToScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput {
	return o
}

func (o ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduledQueryRulesAlertV2CriteriaFailingPeriods] {
	return pulumix.Output[*ScheduledQueryRulesAlertV2CriteriaFailingPeriods]{
		OutputState: o.OutputState,
	}
}

func (o ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput) Elem() ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2CriteriaFailingPeriods) ScheduledQueryRulesAlertV2CriteriaFailingPeriods {
		if v != nil {
			return *v
		}
		var ret ScheduledQueryRulesAlertV2CriteriaFailingPeriods
		return ret
	}).(ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput)
}

// Specifies the number of violations to trigger an alert. Should be smaller or equal to `numberOfEvaluationPeriods`. Possible value is integer between 1 and 6.
func (o ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput) MinimumFailingPeriodsToTriggerAlert() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2CriteriaFailingPeriods) *int {
		if v == nil {
			return nil
		}
		return &v.MinimumFailingPeriodsToTriggerAlert
	}).(pulumi.IntPtrOutput)
}

// Specifies the number of aggregated look-back points. The look-back time window is calculated based on the aggregation granularity `windowDuration` and the selected number of aggregated points. Possible value is integer between 1 and 6.
//
// > **Note** The query look back which is `windowDuration`*`numberOfEvaluationPeriods` cannot exceed 48 hours.
//
// > **Note** `numberOfEvaluationPeriods` must be `1` for queries that do not project timestamp column
func (o ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput) NumberOfEvaluationPeriods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesAlertV2CriteriaFailingPeriods) *int {
		if v == nil {
			return nil
		}
		return &v.NumberOfEvaluationPeriods
	}).(pulumi.IntPtrOutput)
}

type ScheduledQueryRulesLogCriteria struct {
	// A `dimension` block as defined below.
	Dimensions []ScheduledQueryRulesLogCriteriaDimension `pulumi:"dimensions"`
	// Name of the metric. Supported metrics are listed in the Azure Monitor [Microsoft.OperationalInsights/workspaces](https://docs.microsoft.com/azure/azure-monitor/platform/metrics-supported#microsoftoperationalinsightsworkspaces) metrics namespace.
	MetricName string `pulumi:"metricName"`
}

// ScheduledQueryRulesLogCriteriaInput is an input type that accepts ScheduledQueryRulesLogCriteriaArgs and ScheduledQueryRulesLogCriteriaOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesLogCriteriaInput` via:
//
//	ScheduledQueryRulesLogCriteriaArgs{...}
type ScheduledQueryRulesLogCriteriaInput interface {
	pulumi.Input

	ToScheduledQueryRulesLogCriteriaOutput() ScheduledQueryRulesLogCriteriaOutput
	ToScheduledQueryRulesLogCriteriaOutputWithContext(context.Context) ScheduledQueryRulesLogCriteriaOutput
}

type ScheduledQueryRulesLogCriteriaArgs struct {
	// A `dimension` block as defined below.
	Dimensions ScheduledQueryRulesLogCriteriaDimensionArrayInput `pulumi:"dimensions"`
	// Name of the metric. Supported metrics are listed in the Azure Monitor [Microsoft.OperationalInsights/workspaces](https://docs.microsoft.com/azure/azure-monitor/platform/metrics-supported#microsoftoperationalinsightsworkspaces) metrics namespace.
	MetricName pulumi.StringInput `pulumi:"metricName"`
}

func (ScheduledQueryRulesLogCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesLogCriteria)(nil)).Elem()
}

func (i ScheduledQueryRulesLogCriteriaArgs) ToScheduledQueryRulesLogCriteriaOutput() ScheduledQueryRulesLogCriteriaOutput {
	return i.ToScheduledQueryRulesLogCriteriaOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesLogCriteriaArgs) ToScheduledQueryRulesLogCriteriaOutputWithContext(ctx context.Context) ScheduledQueryRulesLogCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesLogCriteriaOutput)
}

func (i ScheduledQueryRulesLogCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesLogCriteria] {
	return pulumix.Output[ScheduledQueryRulesLogCriteria]{
		OutputState: i.ToScheduledQueryRulesLogCriteriaOutputWithContext(ctx).OutputState,
	}
}

func (i ScheduledQueryRulesLogCriteriaArgs) ToScheduledQueryRulesLogCriteriaPtrOutput() ScheduledQueryRulesLogCriteriaPtrOutput {
	return i.ToScheduledQueryRulesLogCriteriaPtrOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesLogCriteriaArgs) ToScheduledQueryRulesLogCriteriaPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesLogCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesLogCriteriaOutput).ToScheduledQueryRulesLogCriteriaPtrOutputWithContext(ctx)
}

// ScheduledQueryRulesLogCriteriaPtrInput is an input type that accepts ScheduledQueryRulesLogCriteriaArgs, ScheduledQueryRulesLogCriteriaPtr and ScheduledQueryRulesLogCriteriaPtrOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesLogCriteriaPtrInput` via:
//
//	        ScheduledQueryRulesLogCriteriaArgs{...}
//
//	or:
//
//	        nil
type ScheduledQueryRulesLogCriteriaPtrInput interface {
	pulumi.Input

	ToScheduledQueryRulesLogCriteriaPtrOutput() ScheduledQueryRulesLogCriteriaPtrOutput
	ToScheduledQueryRulesLogCriteriaPtrOutputWithContext(context.Context) ScheduledQueryRulesLogCriteriaPtrOutput
}

type scheduledQueryRulesLogCriteriaPtrType ScheduledQueryRulesLogCriteriaArgs

func ScheduledQueryRulesLogCriteriaPtr(v *ScheduledQueryRulesLogCriteriaArgs) ScheduledQueryRulesLogCriteriaPtrInput {
	return (*scheduledQueryRulesLogCriteriaPtrType)(v)
}

func (*scheduledQueryRulesLogCriteriaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesLogCriteria)(nil)).Elem()
}

func (i *scheduledQueryRulesLogCriteriaPtrType) ToScheduledQueryRulesLogCriteriaPtrOutput() ScheduledQueryRulesLogCriteriaPtrOutput {
	return i.ToScheduledQueryRulesLogCriteriaPtrOutputWithContext(context.Background())
}

func (i *scheduledQueryRulesLogCriteriaPtrType) ToScheduledQueryRulesLogCriteriaPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesLogCriteriaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesLogCriteriaPtrOutput)
}

func (i *scheduledQueryRulesLogCriteriaPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScheduledQueryRulesLogCriteria] {
	return pulumix.Output[*ScheduledQueryRulesLogCriteria]{
		OutputState: i.ToScheduledQueryRulesLogCriteriaPtrOutputWithContext(ctx).OutputState,
	}
}

type ScheduledQueryRulesLogCriteriaOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesLogCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesLogCriteria)(nil)).Elem()
}

func (o ScheduledQueryRulesLogCriteriaOutput) ToScheduledQueryRulesLogCriteriaOutput() ScheduledQueryRulesLogCriteriaOutput {
	return o
}

func (o ScheduledQueryRulesLogCriteriaOutput) ToScheduledQueryRulesLogCriteriaOutputWithContext(ctx context.Context) ScheduledQueryRulesLogCriteriaOutput {
	return o
}

func (o ScheduledQueryRulesLogCriteriaOutput) ToScheduledQueryRulesLogCriteriaPtrOutput() ScheduledQueryRulesLogCriteriaPtrOutput {
	return o.ToScheduledQueryRulesLogCriteriaPtrOutputWithContext(context.Background())
}

func (o ScheduledQueryRulesLogCriteriaOutput) ToScheduledQueryRulesLogCriteriaPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesLogCriteriaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduledQueryRulesLogCriteria) *ScheduledQueryRulesLogCriteria {
		return &v
	}).(ScheduledQueryRulesLogCriteriaPtrOutput)
}

func (o ScheduledQueryRulesLogCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesLogCriteria] {
	return pulumix.Output[ScheduledQueryRulesLogCriteria]{
		OutputState: o.OutputState,
	}
}

// A `dimension` block as defined below.
func (o ScheduledQueryRulesLogCriteriaOutput) Dimensions() ScheduledQueryRulesLogCriteriaDimensionArrayOutput {
	return o.ApplyT(func(v ScheduledQueryRulesLogCriteria) []ScheduledQueryRulesLogCriteriaDimension { return v.Dimensions }).(ScheduledQueryRulesLogCriteriaDimensionArrayOutput)
}

// Name of the metric. Supported metrics are listed in the Azure Monitor [Microsoft.OperationalInsights/workspaces](https://docs.microsoft.com/azure/azure-monitor/platform/metrics-supported#microsoftoperationalinsightsworkspaces) metrics namespace.
func (o ScheduledQueryRulesLogCriteriaOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledQueryRulesLogCriteria) string { return v.MetricName }).(pulumi.StringOutput)
}

type ScheduledQueryRulesLogCriteriaPtrOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesLogCriteriaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduledQueryRulesLogCriteria)(nil)).Elem()
}

func (o ScheduledQueryRulesLogCriteriaPtrOutput) ToScheduledQueryRulesLogCriteriaPtrOutput() ScheduledQueryRulesLogCriteriaPtrOutput {
	return o
}

func (o ScheduledQueryRulesLogCriteriaPtrOutput) ToScheduledQueryRulesLogCriteriaPtrOutputWithContext(ctx context.Context) ScheduledQueryRulesLogCriteriaPtrOutput {
	return o
}

func (o ScheduledQueryRulesLogCriteriaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScheduledQueryRulesLogCriteria] {
	return pulumix.Output[*ScheduledQueryRulesLogCriteria]{
		OutputState: o.OutputState,
	}
}

func (o ScheduledQueryRulesLogCriteriaPtrOutput) Elem() ScheduledQueryRulesLogCriteriaOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesLogCriteria) ScheduledQueryRulesLogCriteria {
		if v != nil {
			return *v
		}
		var ret ScheduledQueryRulesLogCriteria
		return ret
	}).(ScheduledQueryRulesLogCriteriaOutput)
}

// A `dimension` block as defined below.
func (o ScheduledQueryRulesLogCriteriaPtrOutput) Dimensions() ScheduledQueryRulesLogCriteriaDimensionArrayOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesLogCriteria) []ScheduledQueryRulesLogCriteriaDimension {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(ScheduledQueryRulesLogCriteriaDimensionArrayOutput)
}

// Name of the metric. Supported metrics are listed in the Azure Monitor [Microsoft.OperationalInsights/workspaces](https://docs.microsoft.com/azure/azure-monitor/platform/metrics-supported#microsoftoperationalinsightsworkspaces) metrics namespace.
func (o ScheduledQueryRulesLogCriteriaPtrOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduledQueryRulesLogCriteria) *string {
		if v == nil {
			return nil
		}
		return &v.MetricName
	}).(pulumi.StringPtrOutput)
}

type ScheduledQueryRulesLogCriteriaDimension struct {
	// Name of the dimension.
	Name string `pulumi:"name"`
	// Operator for dimension values, - 'Include'. Defaults to `Include`.
	Operator *string `pulumi:"operator"`
	// List of dimension values.
	Values []string `pulumi:"values"`
}

// ScheduledQueryRulesLogCriteriaDimensionInput is an input type that accepts ScheduledQueryRulesLogCriteriaDimensionArgs and ScheduledQueryRulesLogCriteriaDimensionOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesLogCriteriaDimensionInput` via:
//
//	ScheduledQueryRulesLogCriteriaDimensionArgs{...}
type ScheduledQueryRulesLogCriteriaDimensionInput interface {
	pulumi.Input

	ToScheduledQueryRulesLogCriteriaDimensionOutput() ScheduledQueryRulesLogCriteriaDimensionOutput
	ToScheduledQueryRulesLogCriteriaDimensionOutputWithContext(context.Context) ScheduledQueryRulesLogCriteriaDimensionOutput
}

type ScheduledQueryRulesLogCriteriaDimensionArgs struct {
	// Name of the dimension.
	Name pulumi.StringInput `pulumi:"name"`
	// Operator for dimension values, - 'Include'. Defaults to `Include`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// List of dimension values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScheduledQueryRulesLogCriteriaDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesLogCriteriaDimension)(nil)).Elem()
}

func (i ScheduledQueryRulesLogCriteriaDimensionArgs) ToScheduledQueryRulesLogCriteriaDimensionOutput() ScheduledQueryRulesLogCriteriaDimensionOutput {
	return i.ToScheduledQueryRulesLogCriteriaDimensionOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesLogCriteriaDimensionArgs) ToScheduledQueryRulesLogCriteriaDimensionOutputWithContext(ctx context.Context) ScheduledQueryRulesLogCriteriaDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesLogCriteriaDimensionOutput)
}

func (i ScheduledQueryRulesLogCriteriaDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesLogCriteriaDimension] {
	return pulumix.Output[ScheduledQueryRulesLogCriteriaDimension]{
		OutputState: i.ToScheduledQueryRulesLogCriteriaDimensionOutputWithContext(ctx).OutputState,
	}
}

// ScheduledQueryRulesLogCriteriaDimensionArrayInput is an input type that accepts ScheduledQueryRulesLogCriteriaDimensionArray and ScheduledQueryRulesLogCriteriaDimensionArrayOutput values.
// You can construct a concrete instance of `ScheduledQueryRulesLogCriteriaDimensionArrayInput` via:
//
//	ScheduledQueryRulesLogCriteriaDimensionArray{ ScheduledQueryRulesLogCriteriaDimensionArgs{...} }
type ScheduledQueryRulesLogCriteriaDimensionArrayInput interface {
	pulumi.Input

	ToScheduledQueryRulesLogCriteriaDimensionArrayOutput() ScheduledQueryRulesLogCriteriaDimensionArrayOutput
	ToScheduledQueryRulesLogCriteriaDimensionArrayOutputWithContext(context.Context) ScheduledQueryRulesLogCriteriaDimensionArrayOutput
}

type ScheduledQueryRulesLogCriteriaDimensionArray []ScheduledQueryRulesLogCriteriaDimensionInput

func (ScheduledQueryRulesLogCriteriaDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduledQueryRulesLogCriteriaDimension)(nil)).Elem()
}

func (i ScheduledQueryRulesLogCriteriaDimensionArray) ToScheduledQueryRulesLogCriteriaDimensionArrayOutput() ScheduledQueryRulesLogCriteriaDimensionArrayOutput {
	return i.ToScheduledQueryRulesLogCriteriaDimensionArrayOutputWithContext(context.Background())
}

func (i ScheduledQueryRulesLogCriteriaDimensionArray) ToScheduledQueryRulesLogCriteriaDimensionArrayOutputWithContext(ctx context.Context) ScheduledQueryRulesLogCriteriaDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRulesLogCriteriaDimensionArrayOutput)
}

func (i ScheduledQueryRulesLogCriteriaDimensionArray) ToOutput(ctx context.Context) pulumix.Output[[]ScheduledQueryRulesLogCriteriaDimension] {
	return pulumix.Output[[]ScheduledQueryRulesLogCriteriaDimension]{
		OutputState: i.ToScheduledQueryRulesLogCriteriaDimensionArrayOutputWithContext(ctx).OutputState,
	}
}

type ScheduledQueryRulesLogCriteriaDimensionOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesLogCriteriaDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRulesLogCriteriaDimension)(nil)).Elem()
}

func (o ScheduledQueryRulesLogCriteriaDimensionOutput) ToScheduledQueryRulesLogCriteriaDimensionOutput() ScheduledQueryRulesLogCriteriaDimensionOutput {
	return o
}

func (o ScheduledQueryRulesLogCriteriaDimensionOutput) ToScheduledQueryRulesLogCriteriaDimensionOutputWithContext(ctx context.Context) ScheduledQueryRulesLogCriteriaDimensionOutput {
	return o
}

func (o ScheduledQueryRulesLogCriteriaDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[ScheduledQueryRulesLogCriteriaDimension] {
	return pulumix.Output[ScheduledQueryRulesLogCriteriaDimension]{
		OutputState: o.OutputState,
	}
}

// Name of the dimension.
func (o ScheduledQueryRulesLogCriteriaDimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduledQueryRulesLogCriteriaDimension) string { return v.Name }).(pulumi.StringOutput)
}

// Operator for dimension values, - 'Include'. Defaults to `Include`.
func (o ScheduledQueryRulesLogCriteriaDimensionOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduledQueryRulesLogCriteriaDimension) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// List of dimension values.
func (o ScheduledQueryRulesLogCriteriaDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduledQueryRulesLogCriteriaDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScheduledQueryRulesLogCriteriaDimensionArrayOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRulesLogCriteriaDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduledQueryRulesLogCriteriaDimension)(nil)).Elem()
}

func (o ScheduledQueryRulesLogCriteriaDimensionArrayOutput) ToScheduledQueryRulesLogCriteriaDimensionArrayOutput() ScheduledQueryRulesLogCriteriaDimensionArrayOutput {
	return o
}

func (o ScheduledQueryRulesLogCriteriaDimensionArrayOutput) ToScheduledQueryRulesLogCriteriaDimensionArrayOutputWithContext(ctx context.Context) ScheduledQueryRulesLogCriteriaDimensionArrayOutput {
	return o
}

func (o ScheduledQueryRulesLogCriteriaDimensionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ScheduledQueryRulesLogCriteriaDimension] {
	return pulumix.Output[[]ScheduledQueryRulesLogCriteriaDimension]{
		OutputState: o.OutputState,
	}
}

func (o ScheduledQueryRulesLogCriteriaDimensionArrayOutput) Index(i pulumi.IntInput) ScheduledQueryRulesLogCriteriaDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduledQueryRulesLogCriteriaDimension {
		return vs[0].([]ScheduledQueryRulesLogCriteriaDimension)[vs[1].(int)]
	}).(ScheduledQueryRulesLogCriteriaDimensionOutput)
}

type SmartDetectorAlertRuleActionGroup struct {
	// Specifies a custom email subject if Email Receiver is specified in Monitor Action Group resource.
	EmailSubject *string `pulumi:"emailSubject"`
	// Specifies the action group ids.
	Ids []string `pulumi:"ids"`
	// A JSON String which Specifies the custom webhook payload if Webhook Receiver is specified in Monitor Action Group resource.
	WebhookPayload *string `pulumi:"webhookPayload"`
}

// SmartDetectorAlertRuleActionGroupInput is an input type that accepts SmartDetectorAlertRuleActionGroupArgs and SmartDetectorAlertRuleActionGroupOutput values.
// You can construct a concrete instance of `SmartDetectorAlertRuleActionGroupInput` via:
//
//	SmartDetectorAlertRuleActionGroupArgs{...}
type SmartDetectorAlertRuleActionGroupInput interface {
	pulumi.Input

	ToSmartDetectorAlertRuleActionGroupOutput() SmartDetectorAlertRuleActionGroupOutput
	ToSmartDetectorAlertRuleActionGroupOutputWithContext(context.Context) SmartDetectorAlertRuleActionGroupOutput
}

type SmartDetectorAlertRuleActionGroupArgs struct {
	// Specifies a custom email subject if Email Receiver is specified in Monitor Action Group resource.
	EmailSubject pulumi.StringPtrInput `pulumi:"emailSubject"`
	// Specifies the action group ids.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A JSON String which Specifies the custom webhook payload if Webhook Receiver is specified in Monitor Action Group resource.
	WebhookPayload pulumi.StringPtrInput `pulumi:"webhookPayload"`
}

func (SmartDetectorAlertRuleActionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SmartDetectorAlertRuleActionGroup)(nil)).Elem()
}

func (i SmartDetectorAlertRuleActionGroupArgs) ToSmartDetectorAlertRuleActionGroupOutput() SmartDetectorAlertRuleActionGroupOutput {
	return i.ToSmartDetectorAlertRuleActionGroupOutputWithContext(context.Background())
}

func (i SmartDetectorAlertRuleActionGroupArgs) ToSmartDetectorAlertRuleActionGroupOutputWithContext(ctx context.Context) SmartDetectorAlertRuleActionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartDetectorAlertRuleActionGroupOutput)
}

func (i SmartDetectorAlertRuleActionGroupArgs) ToOutput(ctx context.Context) pulumix.Output[SmartDetectorAlertRuleActionGroup] {
	return pulumix.Output[SmartDetectorAlertRuleActionGroup]{
		OutputState: i.ToSmartDetectorAlertRuleActionGroupOutputWithContext(ctx).OutputState,
	}
}

func (i SmartDetectorAlertRuleActionGroupArgs) ToSmartDetectorAlertRuleActionGroupPtrOutput() SmartDetectorAlertRuleActionGroupPtrOutput {
	return i.ToSmartDetectorAlertRuleActionGroupPtrOutputWithContext(context.Background())
}

func (i SmartDetectorAlertRuleActionGroupArgs) ToSmartDetectorAlertRuleActionGroupPtrOutputWithContext(ctx context.Context) SmartDetectorAlertRuleActionGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartDetectorAlertRuleActionGroupOutput).ToSmartDetectorAlertRuleActionGroupPtrOutputWithContext(ctx)
}

// SmartDetectorAlertRuleActionGroupPtrInput is an input type that accepts SmartDetectorAlertRuleActionGroupArgs, SmartDetectorAlertRuleActionGroupPtr and SmartDetectorAlertRuleActionGroupPtrOutput values.
// You can construct a concrete instance of `SmartDetectorAlertRuleActionGroupPtrInput` via:
//
//	        SmartDetectorAlertRuleActionGroupArgs{...}
//
//	or:
//
//	        nil
type SmartDetectorAlertRuleActionGroupPtrInput interface {
	pulumi.Input

	ToSmartDetectorAlertRuleActionGroupPtrOutput() SmartDetectorAlertRuleActionGroupPtrOutput
	ToSmartDetectorAlertRuleActionGroupPtrOutputWithContext(context.Context) SmartDetectorAlertRuleActionGroupPtrOutput
}

type smartDetectorAlertRuleActionGroupPtrType SmartDetectorAlertRuleActionGroupArgs

func SmartDetectorAlertRuleActionGroupPtr(v *SmartDetectorAlertRuleActionGroupArgs) SmartDetectorAlertRuleActionGroupPtrInput {
	return (*smartDetectorAlertRuleActionGroupPtrType)(v)
}

func (*smartDetectorAlertRuleActionGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SmartDetectorAlertRuleActionGroup)(nil)).Elem()
}

func (i *smartDetectorAlertRuleActionGroupPtrType) ToSmartDetectorAlertRuleActionGroupPtrOutput() SmartDetectorAlertRuleActionGroupPtrOutput {
	return i.ToSmartDetectorAlertRuleActionGroupPtrOutputWithContext(context.Background())
}

func (i *smartDetectorAlertRuleActionGroupPtrType) ToSmartDetectorAlertRuleActionGroupPtrOutputWithContext(ctx context.Context) SmartDetectorAlertRuleActionGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartDetectorAlertRuleActionGroupPtrOutput)
}

func (i *smartDetectorAlertRuleActionGroupPtrType) ToOutput(ctx context.Context) pulumix.Output[*SmartDetectorAlertRuleActionGroup] {
	return pulumix.Output[*SmartDetectorAlertRuleActionGroup]{
		OutputState: i.ToSmartDetectorAlertRuleActionGroupPtrOutputWithContext(ctx).OutputState,
	}
}

type SmartDetectorAlertRuleActionGroupOutput struct{ *pulumi.OutputState }

func (SmartDetectorAlertRuleActionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SmartDetectorAlertRuleActionGroup)(nil)).Elem()
}

func (o SmartDetectorAlertRuleActionGroupOutput) ToSmartDetectorAlertRuleActionGroupOutput() SmartDetectorAlertRuleActionGroupOutput {
	return o
}

func (o SmartDetectorAlertRuleActionGroupOutput) ToSmartDetectorAlertRuleActionGroupOutputWithContext(ctx context.Context) SmartDetectorAlertRuleActionGroupOutput {
	return o
}

func (o SmartDetectorAlertRuleActionGroupOutput) ToSmartDetectorAlertRuleActionGroupPtrOutput() SmartDetectorAlertRuleActionGroupPtrOutput {
	return o.ToSmartDetectorAlertRuleActionGroupPtrOutputWithContext(context.Background())
}

func (o SmartDetectorAlertRuleActionGroupOutput) ToSmartDetectorAlertRuleActionGroupPtrOutputWithContext(ctx context.Context) SmartDetectorAlertRuleActionGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SmartDetectorAlertRuleActionGroup) *SmartDetectorAlertRuleActionGroup {
		return &v
	}).(SmartDetectorAlertRuleActionGroupPtrOutput)
}

func (o SmartDetectorAlertRuleActionGroupOutput) ToOutput(ctx context.Context) pulumix.Output[SmartDetectorAlertRuleActionGroup] {
	return pulumix.Output[SmartDetectorAlertRuleActionGroup]{
		OutputState: o.OutputState,
	}
}

// Specifies a custom email subject if Email Receiver is specified in Monitor Action Group resource.
func (o SmartDetectorAlertRuleActionGroupOutput) EmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SmartDetectorAlertRuleActionGroup) *string { return v.EmailSubject }).(pulumi.StringPtrOutput)
}

// Specifies the action group ids.
func (o SmartDetectorAlertRuleActionGroupOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SmartDetectorAlertRuleActionGroup) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// A JSON String which Specifies the custom webhook payload if Webhook Receiver is specified in Monitor Action Group resource.
func (o SmartDetectorAlertRuleActionGroupOutput) WebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SmartDetectorAlertRuleActionGroup) *string { return v.WebhookPayload }).(pulumi.StringPtrOutput)
}

type SmartDetectorAlertRuleActionGroupPtrOutput struct{ *pulumi.OutputState }

func (SmartDetectorAlertRuleActionGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmartDetectorAlertRuleActionGroup)(nil)).Elem()
}

func (o SmartDetectorAlertRuleActionGroupPtrOutput) ToSmartDetectorAlertRuleActionGroupPtrOutput() SmartDetectorAlertRuleActionGroupPtrOutput {
	return o
}

func (o SmartDetectorAlertRuleActionGroupPtrOutput) ToSmartDetectorAlertRuleActionGroupPtrOutputWithContext(ctx context.Context) SmartDetectorAlertRuleActionGroupPtrOutput {
	return o
}

func (o SmartDetectorAlertRuleActionGroupPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SmartDetectorAlertRuleActionGroup] {
	return pulumix.Output[*SmartDetectorAlertRuleActionGroup]{
		OutputState: o.OutputState,
	}
}

func (o SmartDetectorAlertRuleActionGroupPtrOutput) Elem() SmartDetectorAlertRuleActionGroupOutput {
	return o.ApplyT(func(v *SmartDetectorAlertRuleActionGroup) SmartDetectorAlertRuleActionGroup {
		if v != nil {
			return *v
		}
		var ret SmartDetectorAlertRuleActionGroup
		return ret
	}).(SmartDetectorAlertRuleActionGroupOutput)
}

// Specifies a custom email subject if Email Receiver is specified in Monitor Action Group resource.
func (o SmartDetectorAlertRuleActionGroupPtrOutput) EmailSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmartDetectorAlertRuleActionGroup) *string {
		if v == nil {
			return nil
		}
		return v.EmailSubject
	}).(pulumi.StringPtrOutput)
}

// Specifies the action group ids.
func (o SmartDetectorAlertRuleActionGroupPtrOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SmartDetectorAlertRuleActionGroup) []string {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.StringArrayOutput)
}

// A JSON String which Specifies the custom webhook payload if Webhook Receiver is specified in Monitor Action Group resource.
func (o SmartDetectorAlertRuleActionGroupPtrOutput) WebhookPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmartDetectorAlertRuleActionGroup) *string {
		if v == nil {
			return nil
		}
		return v.WebhookPayload
	}).(pulumi.StringPtrOutput)
}

type GetActionGroupArmRoleReceiver struct {
	// Specifies the name of the Action Group.
	Name string `pulumi:"name"`
	// The arm role id.
	RoleId string `pulumi:"roleId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// GetActionGroupArmRoleReceiverInput is an input type that accepts GetActionGroupArmRoleReceiverArgs and GetActionGroupArmRoleReceiverOutput values.
// You can construct a concrete instance of `GetActionGroupArmRoleReceiverInput` via:
//
//	GetActionGroupArmRoleReceiverArgs{...}
type GetActionGroupArmRoleReceiverInput interface {
	pulumi.Input

	ToGetActionGroupArmRoleReceiverOutput() GetActionGroupArmRoleReceiverOutput
	ToGetActionGroupArmRoleReceiverOutputWithContext(context.Context) GetActionGroupArmRoleReceiverOutput
}

type GetActionGroupArmRoleReceiverArgs struct {
	// Specifies the name of the Action Group.
	Name pulumi.StringInput `pulumi:"name"`
	// The arm role id.
	RoleId pulumi.StringInput `pulumi:"roleId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolInput `pulumi:"useCommonAlertSchema"`
}

func (GetActionGroupArmRoleReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupArmRoleReceiver)(nil)).Elem()
}

func (i GetActionGroupArmRoleReceiverArgs) ToGetActionGroupArmRoleReceiverOutput() GetActionGroupArmRoleReceiverOutput {
	return i.ToGetActionGroupArmRoleReceiverOutputWithContext(context.Background())
}

func (i GetActionGroupArmRoleReceiverArgs) ToGetActionGroupArmRoleReceiverOutputWithContext(ctx context.Context) GetActionGroupArmRoleReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupArmRoleReceiverOutput)
}

func (i GetActionGroupArmRoleReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupArmRoleReceiver] {
	return pulumix.Output[GetActionGroupArmRoleReceiver]{
		OutputState: i.ToGetActionGroupArmRoleReceiverOutputWithContext(ctx).OutputState,
	}
}

// GetActionGroupArmRoleReceiverArrayInput is an input type that accepts GetActionGroupArmRoleReceiverArray and GetActionGroupArmRoleReceiverArrayOutput values.
// You can construct a concrete instance of `GetActionGroupArmRoleReceiverArrayInput` via:
//
//	GetActionGroupArmRoleReceiverArray{ GetActionGroupArmRoleReceiverArgs{...} }
type GetActionGroupArmRoleReceiverArrayInput interface {
	pulumi.Input

	ToGetActionGroupArmRoleReceiverArrayOutput() GetActionGroupArmRoleReceiverArrayOutput
	ToGetActionGroupArmRoleReceiverArrayOutputWithContext(context.Context) GetActionGroupArmRoleReceiverArrayOutput
}

type GetActionGroupArmRoleReceiverArray []GetActionGroupArmRoleReceiverInput

func (GetActionGroupArmRoleReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupArmRoleReceiver)(nil)).Elem()
}

func (i GetActionGroupArmRoleReceiverArray) ToGetActionGroupArmRoleReceiverArrayOutput() GetActionGroupArmRoleReceiverArrayOutput {
	return i.ToGetActionGroupArmRoleReceiverArrayOutputWithContext(context.Background())
}

func (i GetActionGroupArmRoleReceiverArray) ToGetActionGroupArmRoleReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupArmRoleReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupArmRoleReceiverArrayOutput)
}

func (i GetActionGroupArmRoleReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupArmRoleReceiver] {
	return pulumix.Output[[]GetActionGroupArmRoleReceiver]{
		OutputState: i.ToGetActionGroupArmRoleReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type GetActionGroupArmRoleReceiverOutput struct{ *pulumi.OutputState }

func (GetActionGroupArmRoleReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupArmRoleReceiver)(nil)).Elem()
}

func (o GetActionGroupArmRoleReceiverOutput) ToGetActionGroupArmRoleReceiverOutput() GetActionGroupArmRoleReceiverOutput {
	return o
}

func (o GetActionGroupArmRoleReceiverOutput) ToGetActionGroupArmRoleReceiverOutputWithContext(ctx context.Context) GetActionGroupArmRoleReceiverOutput {
	return o
}

func (o GetActionGroupArmRoleReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupArmRoleReceiver] {
	return pulumix.Output[GetActionGroupArmRoleReceiver]{
		OutputState: o.OutputState,
	}
}

// Specifies the name of the Action Group.
func (o GetActionGroupArmRoleReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupArmRoleReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The arm role id.
func (o GetActionGroupArmRoleReceiverOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupArmRoleReceiver) string { return v.RoleId }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o GetActionGroupArmRoleReceiverOutput) UseCommonAlertSchema() pulumi.BoolOutput {
	return o.ApplyT(func(v GetActionGroupArmRoleReceiver) bool { return v.UseCommonAlertSchema }).(pulumi.BoolOutput)
}

type GetActionGroupArmRoleReceiverArrayOutput struct{ *pulumi.OutputState }

func (GetActionGroupArmRoleReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupArmRoleReceiver)(nil)).Elem()
}

func (o GetActionGroupArmRoleReceiverArrayOutput) ToGetActionGroupArmRoleReceiverArrayOutput() GetActionGroupArmRoleReceiverArrayOutput {
	return o
}

func (o GetActionGroupArmRoleReceiverArrayOutput) ToGetActionGroupArmRoleReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupArmRoleReceiverArrayOutput {
	return o
}

func (o GetActionGroupArmRoleReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupArmRoleReceiver] {
	return pulumix.Output[[]GetActionGroupArmRoleReceiver]{
		OutputState: o.OutputState,
	}
}

func (o GetActionGroupArmRoleReceiverArrayOutput) Index(i pulumi.IntInput) GetActionGroupArmRoleReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionGroupArmRoleReceiver {
		return vs[0].([]GetActionGroupArmRoleReceiver)[vs[1].(int)]
	}).(GetActionGroupArmRoleReceiverOutput)
}

type GetActionGroupAutomationRunbookReceiver struct {
	// The automation account ID which holds this runbook and authenticates to Azure resources.
	AutomationAccountId string `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook bool `pulumi:"isGlobalRunbook"`
	// Specifies the name of the Action Group.
	Name string `pulumi:"name"`
	// The name for this runbook.
	RunbookName string `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri string `pulumi:"serviceUri"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId string `pulumi:"webhookResourceId"`
}

// GetActionGroupAutomationRunbookReceiverInput is an input type that accepts GetActionGroupAutomationRunbookReceiverArgs and GetActionGroupAutomationRunbookReceiverOutput values.
// You can construct a concrete instance of `GetActionGroupAutomationRunbookReceiverInput` via:
//
//	GetActionGroupAutomationRunbookReceiverArgs{...}
type GetActionGroupAutomationRunbookReceiverInput interface {
	pulumi.Input

	ToGetActionGroupAutomationRunbookReceiverOutput() GetActionGroupAutomationRunbookReceiverOutput
	ToGetActionGroupAutomationRunbookReceiverOutputWithContext(context.Context) GetActionGroupAutomationRunbookReceiverOutput
}

type GetActionGroupAutomationRunbookReceiverArgs struct {
	// The automation account ID which holds this runbook and authenticates to Azure resources.
	AutomationAccountId pulumi.StringInput `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook pulumi.BoolInput `pulumi:"isGlobalRunbook"`
	// Specifies the name of the Action Group.
	Name pulumi.StringInput `pulumi:"name"`
	// The name for this runbook.
	RunbookName pulumi.StringInput `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringInput `pulumi:"serviceUri"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolInput `pulumi:"useCommonAlertSchema"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId pulumi.StringInput `pulumi:"webhookResourceId"`
}

func (GetActionGroupAutomationRunbookReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupAutomationRunbookReceiver)(nil)).Elem()
}

func (i GetActionGroupAutomationRunbookReceiverArgs) ToGetActionGroupAutomationRunbookReceiverOutput() GetActionGroupAutomationRunbookReceiverOutput {
	return i.ToGetActionGroupAutomationRunbookReceiverOutputWithContext(context.Background())
}

func (i GetActionGroupAutomationRunbookReceiverArgs) ToGetActionGroupAutomationRunbookReceiverOutputWithContext(ctx context.Context) GetActionGroupAutomationRunbookReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupAutomationRunbookReceiverOutput)
}

func (i GetActionGroupAutomationRunbookReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupAutomationRunbookReceiver] {
	return pulumix.Output[GetActionGroupAutomationRunbookReceiver]{
		OutputState: i.ToGetActionGroupAutomationRunbookReceiverOutputWithContext(ctx).OutputState,
	}
}

// GetActionGroupAutomationRunbookReceiverArrayInput is an input type that accepts GetActionGroupAutomationRunbookReceiverArray and GetActionGroupAutomationRunbookReceiverArrayOutput values.
// You can construct a concrete instance of `GetActionGroupAutomationRunbookReceiverArrayInput` via:
//
//	GetActionGroupAutomationRunbookReceiverArray{ GetActionGroupAutomationRunbookReceiverArgs{...} }
type GetActionGroupAutomationRunbookReceiverArrayInput interface {
	pulumi.Input

	ToGetActionGroupAutomationRunbookReceiverArrayOutput() GetActionGroupAutomationRunbookReceiverArrayOutput
	ToGetActionGroupAutomationRunbookReceiverArrayOutputWithContext(context.Context) GetActionGroupAutomationRunbookReceiverArrayOutput
}

type GetActionGroupAutomationRunbookReceiverArray []GetActionGroupAutomationRunbookReceiverInput

func (GetActionGroupAutomationRunbookReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupAutomationRunbookReceiver)(nil)).Elem()
}

func (i GetActionGroupAutomationRunbookReceiverArray) ToGetActionGroupAutomationRunbookReceiverArrayOutput() GetActionGroupAutomationRunbookReceiverArrayOutput {
	return i.ToGetActionGroupAutomationRunbookReceiverArrayOutputWithContext(context.Background())
}

func (i GetActionGroupAutomationRunbookReceiverArray) ToGetActionGroupAutomationRunbookReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupAutomationRunbookReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupAutomationRunbookReceiverArrayOutput)
}

func (i GetActionGroupAutomationRunbookReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupAutomationRunbookReceiver] {
	return pulumix.Output[[]GetActionGroupAutomationRunbookReceiver]{
		OutputState: i.ToGetActionGroupAutomationRunbookReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type GetActionGroupAutomationRunbookReceiverOutput struct{ *pulumi.OutputState }

func (GetActionGroupAutomationRunbookReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupAutomationRunbookReceiver)(nil)).Elem()
}

func (o GetActionGroupAutomationRunbookReceiverOutput) ToGetActionGroupAutomationRunbookReceiverOutput() GetActionGroupAutomationRunbookReceiverOutput {
	return o
}

func (o GetActionGroupAutomationRunbookReceiverOutput) ToGetActionGroupAutomationRunbookReceiverOutputWithContext(ctx context.Context) GetActionGroupAutomationRunbookReceiverOutput {
	return o
}

func (o GetActionGroupAutomationRunbookReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupAutomationRunbookReceiver] {
	return pulumix.Output[GetActionGroupAutomationRunbookReceiver]{
		OutputState: o.OutputState,
	}
}

// The automation account ID which holds this runbook and authenticates to Azure resources.
func (o GetActionGroupAutomationRunbookReceiverOutput) AutomationAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupAutomationRunbookReceiver) string { return v.AutomationAccountId }).(pulumi.StringOutput)
}

// Indicates whether this instance is global runbook.
func (o GetActionGroupAutomationRunbookReceiverOutput) IsGlobalRunbook() pulumi.BoolOutput {
	return o.ApplyT(func(v GetActionGroupAutomationRunbookReceiver) bool { return v.IsGlobalRunbook }).(pulumi.BoolOutput)
}

// Specifies the name of the Action Group.
func (o GetActionGroupAutomationRunbookReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupAutomationRunbookReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The name for this runbook.
func (o GetActionGroupAutomationRunbookReceiverOutput) RunbookName() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupAutomationRunbookReceiver) string { return v.RunbookName }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o GetActionGroupAutomationRunbookReceiverOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupAutomationRunbookReceiver) string { return v.ServiceUri }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o GetActionGroupAutomationRunbookReceiverOutput) UseCommonAlertSchema() pulumi.BoolOutput {
	return o.ApplyT(func(v GetActionGroupAutomationRunbookReceiver) bool { return v.UseCommonAlertSchema }).(pulumi.BoolOutput)
}

// The resource id for webhook linked to this runbook.
func (o GetActionGroupAutomationRunbookReceiverOutput) WebhookResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupAutomationRunbookReceiver) string { return v.WebhookResourceId }).(pulumi.StringOutput)
}

type GetActionGroupAutomationRunbookReceiverArrayOutput struct{ *pulumi.OutputState }

func (GetActionGroupAutomationRunbookReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupAutomationRunbookReceiver)(nil)).Elem()
}

func (o GetActionGroupAutomationRunbookReceiverArrayOutput) ToGetActionGroupAutomationRunbookReceiverArrayOutput() GetActionGroupAutomationRunbookReceiverArrayOutput {
	return o
}

func (o GetActionGroupAutomationRunbookReceiverArrayOutput) ToGetActionGroupAutomationRunbookReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupAutomationRunbookReceiverArrayOutput {
	return o
}

func (o GetActionGroupAutomationRunbookReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupAutomationRunbookReceiver] {
	return pulumix.Output[[]GetActionGroupAutomationRunbookReceiver]{
		OutputState: o.OutputState,
	}
}

func (o GetActionGroupAutomationRunbookReceiverArrayOutput) Index(i pulumi.IntInput) GetActionGroupAutomationRunbookReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionGroupAutomationRunbookReceiver {
		return vs[0].([]GetActionGroupAutomationRunbookReceiver)[vs[1].(int)]
	}).(GetActionGroupAutomationRunbookReceiverOutput)
}

type GetActionGroupAzureAppPushReceiver struct {
	// The email address of this receiver.
	EmailAddress string `pulumi:"emailAddress"`
	// Specifies the name of the Action Group.
	Name string `pulumi:"name"`
}

// GetActionGroupAzureAppPushReceiverInput is an input type that accepts GetActionGroupAzureAppPushReceiverArgs and GetActionGroupAzureAppPushReceiverOutput values.
// You can construct a concrete instance of `GetActionGroupAzureAppPushReceiverInput` via:
//
//	GetActionGroupAzureAppPushReceiverArgs{...}
type GetActionGroupAzureAppPushReceiverInput interface {
	pulumi.Input

	ToGetActionGroupAzureAppPushReceiverOutput() GetActionGroupAzureAppPushReceiverOutput
	ToGetActionGroupAzureAppPushReceiverOutputWithContext(context.Context) GetActionGroupAzureAppPushReceiverOutput
}

type GetActionGroupAzureAppPushReceiverArgs struct {
	// The email address of this receiver.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// Specifies the name of the Action Group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetActionGroupAzureAppPushReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupAzureAppPushReceiver)(nil)).Elem()
}

func (i GetActionGroupAzureAppPushReceiverArgs) ToGetActionGroupAzureAppPushReceiverOutput() GetActionGroupAzureAppPushReceiverOutput {
	return i.ToGetActionGroupAzureAppPushReceiverOutputWithContext(context.Background())
}

func (i GetActionGroupAzureAppPushReceiverArgs) ToGetActionGroupAzureAppPushReceiverOutputWithContext(ctx context.Context) GetActionGroupAzureAppPushReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupAzureAppPushReceiverOutput)
}

func (i GetActionGroupAzureAppPushReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupAzureAppPushReceiver] {
	return pulumix.Output[GetActionGroupAzureAppPushReceiver]{
		OutputState: i.ToGetActionGroupAzureAppPushReceiverOutputWithContext(ctx).OutputState,
	}
}

// GetActionGroupAzureAppPushReceiverArrayInput is an input type that accepts GetActionGroupAzureAppPushReceiverArray and GetActionGroupAzureAppPushReceiverArrayOutput values.
// You can construct a concrete instance of `GetActionGroupAzureAppPushReceiverArrayInput` via:
//
//	GetActionGroupAzureAppPushReceiverArray{ GetActionGroupAzureAppPushReceiverArgs{...} }
type GetActionGroupAzureAppPushReceiverArrayInput interface {
	pulumi.Input

	ToGetActionGroupAzureAppPushReceiverArrayOutput() GetActionGroupAzureAppPushReceiverArrayOutput
	ToGetActionGroupAzureAppPushReceiverArrayOutputWithContext(context.Context) GetActionGroupAzureAppPushReceiverArrayOutput
}

type GetActionGroupAzureAppPushReceiverArray []GetActionGroupAzureAppPushReceiverInput

func (GetActionGroupAzureAppPushReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupAzureAppPushReceiver)(nil)).Elem()
}

func (i GetActionGroupAzureAppPushReceiverArray) ToGetActionGroupAzureAppPushReceiverArrayOutput() GetActionGroupAzureAppPushReceiverArrayOutput {
	return i.ToGetActionGroupAzureAppPushReceiverArrayOutputWithContext(context.Background())
}

func (i GetActionGroupAzureAppPushReceiverArray) ToGetActionGroupAzureAppPushReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupAzureAppPushReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupAzureAppPushReceiverArrayOutput)
}

func (i GetActionGroupAzureAppPushReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupAzureAppPushReceiver] {
	return pulumix.Output[[]GetActionGroupAzureAppPushReceiver]{
		OutputState: i.ToGetActionGroupAzureAppPushReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type GetActionGroupAzureAppPushReceiverOutput struct{ *pulumi.OutputState }

func (GetActionGroupAzureAppPushReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupAzureAppPushReceiver)(nil)).Elem()
}

func (o GetActionGroupAzureAppPushReceiverOutput) ToGetActionGroupAzureAppPushReceiverOutput() GetActionGroupAzureAppPushReceiverOutput {
	return o
}

func (o GetActionGroupAzureAppPushReceiverOutput) ToGetActionGroupAzureAppPushReceiverOutputWithContext(ctx context.Context) GetActionGroupAzureAppPushReceiverOutput {
	return o
}

func (o GetActionGroupAzureAppPushReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupAzureAppPushReceiver] {
	return pulumix.Output[GetActionGroupAzureAppPushReceiver]{
		OutputState: o.OutputState,
	}
}

// The email address of this receiver.
func (o GetActionGroupAzureAppPushReceiverOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupAzureAppPushReceiver) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// Specifies the name of the Action Group.
func (o GetActionGroupAzureAppPushReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupAzureAppPushReceiver) string { return v.Name }).(pulumi.StringOutput)
}

type GetActionGroupAzureAppPushReceiverArrayOutput struct{ *pulumi.OutputState }

func (GetActionGroupAzureAppPushReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupAzureAppPushReceiver)(nil)).Elem()
}

func (o GetActionGroupAzureAppPushReceiverArrayOutput) ToGetActionGroupAzureAppPushReceiverArrayOutput() GetActionGroupAzureAppPushReceiverArrayOutput {
	return o
}

func (o GetActionGroupAzureAppPushReceiverArrayOutput) ToGetActionGroupAzureAppPushReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupAzureAppPushReceiverArrayOutput {
	return o
}

func (o GetActionGroupAzureAppPushReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupAzureAppPushReceiver] {
	return pulumix.Output[[]GetActionGroupAzureAppPushReceiver]{
		OutputState: o.OutputState,
	}
}

func (o GetActionGroupAzureAppPushReceiverArrayOutput) Index(i pulumi.IntInput) GetActionGroupAzureAppPushReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionGroupAzureAppPushReceiver {
		return vs[0].([]GetActionGroupAzureAppPushReceiver)[vs[1].(int)]
	}).(GetActionGroupAzureAppPushReceiverOutput)
}

type GetActionGroupAzureFunctionReceiver struct {
	// The Azure resource ID of the function app.
	FunctionAppResourceId string `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName string `pulumi:"functionName"`
	// The HTTP trigger url where HTTP request sent to.
	HttpTriggerUrl string `pulumi:"httpTriggerUrl"`
	// Specifies the name of the Action Group.
	Name string `pulumi:"name"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// GetActionGroupAzureFunctionReceiverInput is an input type that accepts GetActionGroupAzureFunctionReceiverArgs and GetActionGroupAzureFunctionReceiverOutput values.
// You can construct a concrete instance of `GetActionGroupAzureFunctionReceiverInput` via:
//
//	GetActionGroupAzureFunctionReceiverArgs{...}
type GetActionGroupAzureFunctionReceiverInput interface {
	pulumi.Input

	ToGetActionGroupAzureFunctionReceiverOutput() GetActionGroupAzureFunctionReceiverOutput
	ToGetActionGroupAzureFunctionReceiverOutputWithContext(context.Context) GetActionGroupAzureFunctionReceiverOutput
}

type GetActionGroupAzureFunctionReceiverArgs struct {
	// The Azure resource ID of the function app.
	FunctionAppResourceId pulumi.StringInput `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// The HTTP trigger url where HTTP request sent to.
	HttpTriggerUrl pulumi.StringInput `pulumi:"httpTriggerUrl"`
	// Specifies the name of the Action Group.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolInput `pulumi:"useCommonAlertSchema"`
}

func (GetActionGroupAzureFunctionReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupAzureFunctionReceiver)(nil)).Elem()
}

func (i GetActionGroupAzureFunctionReceiverArgs) ToGetActionGroupAzureFunctionReceiverOutput() GetActionGroupAzureFunctionReceiverOutput {
	return i.ToGetActionGroupAzureFunctionReceiverOutputWithContext(context.Background())
}

func (i GetActionGroupAzureFunctionReceiverArgs) ToGetActionGroupAzureFunctionReceiverOutputWithContext(ctx context.Context) GetActionGroupAzureFunctionReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupAzureFunctionReceiverOutput)
}

func (i GetActionGroupAzureFunctionReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupAzureFunctionReceiver] {
	return pulumix.Output[GetActionGroupAzureFunctionReceiver]{
		OutputState: i.ToGetActionGroupAzureFunctionReceiverOutputWithContext(ctx).OutputState,
	}
}

// GetActionGroupAzureFunctionReceiverArrayInput is an input type that accepts GetActionGroupAzureFunctionReceiverArray and GetActionGroupAzureFunctionReceiverArrayOutput values.
// You can construct a concrete instance of `GetActionGroupAzureFunctionReceiverArrayInput` via:
//
//	GetActionGroupAzureFunctionReceiverArray{ GetActionGroupAzureFunctionReceiverArgs{...} }
type GetActionGroupAzureFunctionReceiverArrayInput interface {
	pulumi.Input

	ToGetActionGroupAzureFunctionReceiverArrayOutput() GetActionGroupAzureFunctionReceiverArrayOutput
	ToGetActionGroupAzureFunctionReceiverArrayOutputWithContext(context.Context) GetActionGroupAzureFunctionReceiverArrayOutput
}

type GetActionGroupAzureFunctionReceiverArray []GetActionGroupAzureFunctionReceiverInput

func (GetActionGroupAzureFunctionReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupAzureFunctionReceiver)(nil)).Elem()
}

func (i GetActionGroupAzureFunctionReceiverArray) ToGetActionGroupAzureFunctionReceiverArrayOutput() GetActionGroupAzureFunctionReceiverArrayOutput {
	return i.ToGetActionGroupAzureFunctionReceiverArrayOutputWithContext(context.Background())
}

func (i GetActionGroupAzureFunctionReceiverArray) ToGetActionGroupAzureFunctionReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupAzureFunctionReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupAzureFunctionReceiverArrayOutput)
}

func (i GetActionGroupAzureFunctionReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupAzureFunctionReceiver] {
	return pulumix.Output[[]GetActionGroupAzureFunctionReceiver]{
		OutputState: i.ToGetActionGroupAzureFunctionReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type GetActionGroupAzureFunctionReceiverOutput struct{ *pulumi.OutputState }

func (GetActionGroupAzureFunctionReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupAzureFunctionReceiver)(nil)).Elem()
}

func (o GetActionGroupAzureFunctionReceiverOutput) ToGetActionGroupAzureFunctionReceiverOutput() GetActionGroupAzureFunctionReceiverOutput {
	return o
}

func (o GetActionGroupAzureFunctionReceiverOutput) ToGetActionGroupAzureFunctionReceiverOutputWithContext(ctx context.Context) GetActionGroupAzureFunctionReceiverOutput {
	return o
}

func (o GetActionGroupAzureFunctionReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupAzureFunctionReceiver] {
	return pulumix.Output[GetActionGroupAzureFunctionReceiver]{
		OutputState: o.OutputState,
	}
}

// The Azure resource ID of the function app.
func (o GetActionGroupAzureFunctionReceiverOutput) FunctionAppResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupAzureFunctionReceiver) string { return v.FunctionAppResourceId }).(pulumi.StringOutput)
}

// The function name in the function app.
func (o GetActionGroupAzureFunctionReceiverOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupAzureFunctionReceiver) string { return v.FunctionName }).(pulumi.StringOutput)
}

// The HTTP trigger url where HTTP request sent to.
func (o GetActionGroupAzureFunctionReceiverOutput) HttpTriggerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupAzureFunctionReceiver) string { return v.HttpTriggerUrl }).(pulumi.StringOutput)
}

// Specifies the name of the Action Group.
func (o GetActionGroupAzureFunctionReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupAzureFunctionReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o GetActionGroupAzureFunctionReceiverOutput) UseCommonAlertSchema() pulumi.BoolOutput {
	return o.ApplyT(func(v GetActionGroupAzureFunctionReceiver) bool { return v.UseCommonAlertSchema }).(pulumi.BoolOutput)
}

type GetActionGroupAzureFunctionReceiverArrayOutput struct{ *pulumi.OutputState }

func (GetActionGroupAzureFunctionReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupAzureFunctionReceiver)(nil)).Elem()
}

func (o GetActionGroupAzureFunctionReceiverArrayOutput) ToGetActionGroupAzureFunctionReceiverArrayOutput() GetActionGroupAzureFunctionReceiverArrayOutput {
	return o
}

func (o GetActionGroupAzureFunctionReceiverArrayOutput) ToGetActionGroupAzureFunctionReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupAzureFunctionReceiverArrayOutput {
	return o
}

func (o GetActionGroupAzureFunctionReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupAzureFunctionReceiver] {
	return pulumix.Output[[]GetActionGroupAzureFunctionReceiver]{
		OutputState: o.OutputState,
	}
}

func (o GetActionGroupAzureFunctionReceiverArrayOutput) Index(i pulumi.IntInput) GetActionGroupAzureFunctionReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionGroupAzureFunctionReceiver {
		return vs[0].([]GetActionGroupAzureFunctionReceiver)[vs[1].(int)]
	}).(GetActionGroupAzureFunctionReceiverOutput)
}

type GetActionGroupEmailReceiver struct {
	// The email address of this receiver.
	EmailAddress string `pulumi:"emailAddress"`
	// Specifies the name of the Action Group.
	Name string `pulumi:"name"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// GetActionGroupEmailReceiverInput is an input type that accepts GetActionGroupEmailReceiverArgs and GetActionGroupEmailReceiverOutput values.
// You can construct a concrete instance of `GetActionGroupEmailReceiverInput` via:
//
//	GetActionGroupEmailReceiverArgs{...}
type GetActionGroupEmailReceiverInput interface {
	pulumi.Input

	ToGetActionGroupEmailReceiverOutput() GetActionGroupEmailReceiverOutput
	ToGetActionGroupEmailReceiverOutputWithContext(context.Context) GetActionGroupEmailReceiverOutput
}

type GetActionGroupEmailReceiverArgs struct {
	// The email address of this receiver.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// Specifies the name of the Action Group.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolInput `pulumi:"useCommonAlertSchema"`
}

func (GetActionGroupEmailReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupEmailReceiver)(nil)).Elem()
}

func (i GetActionGroupEmailReceiverArgs) ToGetActionGroupEmailReceiverOutput() GetActionGroupEmailReceiverOutput {
	return i.ToGetActionGroupEmailReceiverOutputWithContext(context.Background())
}

func (i GetActionGroupEmailReceiverArgs) ToGetActionGroupEmailReceiverOutputWithContext(ctx context.Context) GetActionGroupEmailReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupEmailReceiverOutput)
}

func (i GetActionGroupEmailReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupEmailReceiver] {
	return pulumix.Output[GetActionGroupEmailReceiver]{
		OutputState: i.ToGetActionGroupEmailReceiverOutputWithContext(ctx).OutputState,
	}
}

// GetActionGroupEmailReceiverArrayInput is an input type that accepts GetActionGroupEmailReceiverArray and GetActionGroupEmailReceiverArrayOutput values.
// You can construct a concrete instance of `GetActionGroupEmailReceiverArrayInput` via:
//
//	GetActionGroupEmailReceiverArray{ GetActionGroupEmailReceiverArgs{...} }
type GetActionGroupEmailReceiverArrayInput interface {
	pulumi.Input

	ToGetActionGroupEmailReceiverArrayOutput() GetActionGroupEmailReceiverArrayOutput
	ToGetActionGroupEmailReceiverArrayOutputWithContext(context.Context) GetActionGroupEmailReceiverArrayOutput
}

type GetActionGroupEmailReceiverArray []GetActionGroupEmailReceiverInput

func (GetActionGroupEmailReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupEmailReceiver)(nil)).Elem()
}

func (i GetActionGroupEmailReceiverArray) ToGetActionGroupEmailReceiverArrayOutput() GetActionGroupEmailReceiverArrayOutput {
	return i.ToGetActionGroupEmailReceiverArrayOutputWithContext(context.Background())
}

func (i GetActionGroupEmailReceiverArray) ToGetActionGroupEmailReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupEmailReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupEmailReceiverArrayOutput)
}

func (i GetActionGroupEmailReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupEmailReceiver] {
	return pulumix.Output[[]GetActionGroupEmailReceiver]{
		OutputState: i.ToGetActionGroupEmailReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type GetActionGroupEmailReceiverOutput struct{ *pulumi.OutputState }

func (GetActionGroupEmailReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupEmailReceiver)(nil)).Elem()
}

func (o GetActionGroupEmailReceiverOutput) ToGetActionGroupEmailReceiverOutput() GetActionGroupEmailReceiverOutput {
	return o
}

func (o GetActionGroupEmailReceiverOutput) ToGetActionGroupEmailReceiverOutputWithContext(ctx context.Context) GetActionGroupEmailReceiverOutput {
	return o
}

func (o GetActionGroupEmailReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupEmailReceiver] {
	return pulumix.Output[GetActionGroupEmailReceiver]{
		OutputState: o.OutputState,
	}
}

// The email address of this receiver.
func (o GetActionGroupEmailReceiverOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupEmailReceiver) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// Specifies the name of the Action Group.
func (o GetActionGroupEmailReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupEmailReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o GetActionGroupEmailReceiverOutput) UseCommonAlertSchema() pulumi.BoolOutput {
	return o.ApplyT(func(v GetActionGroupEmailReceiver) bool { return v.UseCommonAlertSchema }).(pulumi.BoolOutput)
}

type GetActionGroupEmailReceiverArrayOutput struct{ *pulumi.OutputState }

func (GetActionGroupEmailReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupEmailReceiver)(nil)).Elem()
}

func (o GetActionGroupEmailReceiverArrayOutput) ToGetActionGroupEmailReceiverArrayOutput() GetActionGroupEmailReceiverArrayOutput {
	return o
}

func (o GetActionGroupEmailReceiverArrayOutput) ToGetActionGroupEmailReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupEmailReceiverArrayOutput {
	return o
}

func (o GetActionGroupEmailReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupEmailReceiver] {
	return pulumix.Output[[]GetActionGroupEmailReceiver]{
		OutputState: o.OutputState,
	}
}

func (o GetActionGroupEmailReceiverArrayOutput) Index(i pulumi.IntInput) GetActionGroupEmailReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionGroupEmailReceiver {
		return vs[0].([]GetActionGroupEmailReceiver)[vs[1].(int)]
	}).(GetActionGroupEmailReceiverOutput)
}

type GetActionGroupEventHubReceiver struct {
	// The resource ID of the respective Event Hub.
	//
	// Deprecated: This property is deprecated and will be removed in version 4.0 of the provider, please use 'event_hub_name' and 'event_hub_namespace' instead.
	EventHubId string `pulumi:"eventHubId"`
	// The name of the specific Event Hub queue.
	EventHubName string `pulumi:"eventHubName"`
	// The namespace name of the Event Hub.
	EventHubNamespace string `pulumi:"eventHubNamespace"`
	// Specifies the name of the Action Group.
	Name string `pulumi:"name"`
	// The ID for the subscription containing this Event Hub. Default to the subscription ID of the Action Group.
	SubscriptionId string `pulumi:"subscriptionId"`
	// The Tenant ID for the subscription containing this Event Hub.
	TenantId string `pulumi:"tenantId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// GetActionGroupEventHubReceiverInput is an input type that accepts GetActionGroupEventHubReceiverArgs and GetActionGroupEventHubReceiverOutput values.
// You can construct a concrete instance of `GetActionGroupEventHubReceiverInput` via:
//
//	GetActionGroupEventHubReceiverArgs{...}
type GetActionGroupEventHubReceiverInput interface {
	pulumi.Input

	ToGetActionGroupEventHubReceiverOutput() GetActionGroupEventHubReceiverOutput
	ToGetActionGroupEventHubReceiverOutputWithContext(context.Context) GetActionGroupEventHubReceiverOutput
}

type GetActionGroupEventHubReceiverArgs struct {
	// The resource ID of the respective Event Hub.
	//
	// Deprecated: This property is deprecated and will be removed in version 4.0 of the provider, please use 'event_hub_name' and 'event_hub_namespace' instead.
	EventHubId pulumi.StringInput `pulumi:"eventHubId"`
	// The name of the specific Event Hub queue.
	EventHubName pulumi.StringInput `pulumi:"eventHubName"`
	// The namespace name of the Event Hub.
	EventHubNamespace pulumi.StringInput `pulumi:"eventHubNamespace"`
	// Specifies the name of the Action Group.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID for the subscription containing this Event Hub. Default to the subscription ID of the Action Group.
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
	// The Tenant ID for the subscription containing this Event Hub.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
}

func (GetActionGroupEventHubReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupEventHubReceiver)(nil)).Elem()
}

func (i GetActionGroupEventHubReceiverArgs) ToGetActionGroupEventHubReceiverOutput() GetActionGroupEventHubReceiverOutput {
	return i.ToGetActionGroupEventHubReceiverOutputWithContext(context.Background())
}

func (i GetActionGroupEventHubReceiverArgs) ToGetActionGroupEventHubReceiverOutputWithContext(ctx context.Context) GetActionGroupEventHubReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupEventHubReceiverOutput)
}

func (i GetActionGroupEventHubReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupEventHubReceiver] {
	return pulumix.Output[GetActionGroupEventHubReceiver]{
		OutputState: i.ToGetActionGroupEventHubReceiverOutputWithContext(ctx).OutputState,
	}
}

// GetActionGroupEventHubReceiverArrayInput is an input type that accepts GetActionGroupEventHubReceiverArray and GetActionGroupEventHubReceiverArrayOutput values.
// You can construct a concrete instance of `GetActionGroupEventHubReceiverArrayInput` via:
//
//	GetActionGroupEventHubReceiverArray{ GetActionGroupEventHubReceiverArgs{...} }
type GetActionGroupEventHubReceiverArrayInput interface {
	pulumi.Input

	ToGetActionGroupEventHubReceiverArrayOutput() GetActionGroupEventHubReceiverArrayOutput
	ToGetActionGroupEventHubReceiverArrayOutputWithContext(context.Context) GetActionGroupEventHubReceiverArrayOutput
}

type GetActionGroupEventHubReceiverArray []GetActionGroupEventHubReceiverInput

func (GetActionGroupEventHubReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupEventHubReceiver)(nil)).Elem()
}

func (i GetActionGroupEventHubReceiverArray) ToGetActionGroupEventHubReceiverArrayOutput() GetActionGroupEventHubReceiverArrayOutput {
	return i.ToGetActionGroupEventHubReceiverArrayOutputWithContext(context.Background())
}

func (i GetActionGroupEventHubReceiverArray) ToGetActionGroupEventHubReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupEventHubReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupEventHubReceiverArrayOutput)
}

func (i GetActionGroupEventHubReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupEventHubReceiver] {
	return pulumix.Output[[]GetActionGroupEventHubReceiver]{
		OutputState: i.ToGetActionGroupEventHubReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type GetActionGroupEventHubReceiverOutput struct{ *pulumi.OutputState }

func (GetActionGroupEventHubReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupEventHubReceiver)(nil)).Elem()
}

func (o GetActionGroupEventHubReceiverOutput) ToGetActionGroupEventHubReceiverOutput() GetActionGroupEventHubReceiverOutput {
	return o
}

func (o GetActionGroupEventHubReceiverOutput) ToGetActionGroupEventHubReceiverOutputWithContext(ctx context.Context) GetActionGroupEventHubReceiverOutput {
	return o
}

func (o GetActionGroupEventHubReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupEventHubReceiver] {
	return pulumix.Output[GetActionGroupEventHubReceiver]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the respective Event Hub.
//
// Deprecated: This property is deprecated and will be removed in version 4.0 of the provider, please use 'event_hub_name' and 'event_hub_namespace' instead.
func (o GetActionGroupEventHubReceiverOutput) EventHubId() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupEventHubReceiver) string { return v.EventHubId }).(pulumi.StringOutput)
}

// The name of the specific Event Hub queue.
func (o GetActionGroupEventHubReceiverOutput) EventHubName() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupEventHubReceiver) string { return v.EventHubName }).(pulumi.StringOutput)
}

// The namespace name of the Event Hub.
func (o GetActionGroupEventHubReceiverOutput) EventHubNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupEventHubReceiver) string { return v.EventHubNamespace }).(pulumi.StringOutput)
}

// Specifies the name of the Action Group.
func (o GetActionGroupEventHubReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupEventHubReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The ID for the subscription containing this Event Hub. Default to the subscription ID of the Action Group.
func (o GetActionGroupEventHubReceiverOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupEventHubReceiver) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The Tenant ID for the subscription containing this Event Hub.
func (o GetActionGroupEventHubReceiverOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupEventHubReceiver) string { return v.TenantId }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o GetActionGroupEventHubReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetActionGroupEventHubReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type GetActionGroupEventHubReceiverArrayOutput struct{ *pulumi.OutputState }

func (GetActionGroupEventHubReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupEventHubReceiver)(nil)).Elem()
}

func (o GetActionGroupEventHubReceiverArrayOutput) ToGetActionGroupEventHubReceiverArrayOutput() GetActionGroupEventHubReceiverArrayOutput {
	return o
}

func (o GetActionGroupEventHubReceiverArrayOutput) ToGetActionGroupEventHubReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupEventHubReceiverArrayOutput {
	return o
}

func (o GetActionGroupEventHubReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupEventHubReceiver] {
	return pulumix.Output[[]GetActionGroupEventHubReceiver]{
		OutputState: o.OutputState,
	}
}

func (o GetActionGroupEventHubReceiverArrayOutput) Index(i pulumi.IntInput) GetActionGroupEventHubReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionGroupEventHubReceiver {
		return vs[0].([]GetActionGroupEventHubReceiver)[vs[1].(int)]
	}).(GetActionGroupEventHubReceiverOutput)
}

type GetActionGroupItsmReceiver struct {
	// The unique connection identifier of the ITSM connection.
	ConnectionId string `pulumi:"connectionId"`
	// Specifies the name of the Action Group.
	Name string `pulumi:"name"`
	// The region of the workspace.
	Region string `pulumi:"region"`
	// A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration string `pulumi:"ticketConfiguration"`
	// The Azure Log Analytics workspace ID where this connection is defined.
	WorkspaceId string `pulumi:"workspaceId"`
}

// GetActionGroupItsmReceiverInput is an input type that accepts GetActionGroupItsmReceiverArgs and GetActionGroupItsmReceiverOutput values.
// You can construct a concrete instance of `GetActionGroupItsmReceiverInput` via:
//
//	GetActionGroupItsmReceiverArgs{...}
type GetActionGroupItsmReceiverInput interface {
	pulumi.Input

	ToGetActionGroupItsmReceiverOutput() GetActionGroupItsmReceiverOutput
	ToGetActionGroupItsmReceiverOutputWithContext(context.Context) GetActionGroupItsmReceiverOutput
}

type GetActionGroupItsmReceiverArgs struct {
	// The unique connection identifier of the ITSM connection.
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// Specifies the name of the Action Group.
	Name pulumi.StringInput `pulumi:"name"`
	// The region of the workspace.
	Region pulumi.StringInput `pulumi:"region"`
	// A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration pulumi.StringInput `pulumi:"ticketConfiguration"`
	// The Azure Log Analytics workspace ID where this connection is defined.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (GetActionGroupItsmReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupItsmReceiver)(nil)).Elem()
}

func (i GetActionGroupItsmReceiverArgs) ToGetActionGroupItsmReceiverOutput() GetActionGroupItsmReceiverOutput {
	return i.ToGetActionGroupItsmReceiverOutputWithContext(context.Background())
}

func (i GetActionGroupItsmReceiverArgs) ToGetActionGroupItsmReceiverOutputWithContext(ctx context.Context) GetActionGroupItsmReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupItsmReceiverOutput)
}

func (i GetActionGroupItsmReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupItsmReceiver] {
	return pulumix.Output[GetActionGroupItsmReceiver]{
		OutputState: i.ToGetActionGroupItsmReceiverOutputWithContext(ctx).OutputState,
	}
}

// GetActionGroupItsmReceiverArrayInput is an input type that accepts GetActionGroupItsmReceiverArray and GetActionGroupItsmReceiverArrayOutput values.
// You can construct a concrete instance of `GetActionGroupItsmReceiverArrayInput` via:
//
//	GetActionGroupItsmReceiverArray{ GetActionGroupItsmReceiverArgs{...} }
type GetActionGroupItsmReceiverArrayInput interface {
	pulumi.Input

	ToGetActionGroupItsmReceiverArrayOutput() GetActionGroupItsmReceiverArrayOutput
	ToGetActionGroupItsmReceiverArrayOutputWithContext(context.Context) GetActionGroupItsmReceiverArrayOutput
}

type GetActionGroupItsmReceiverArray []GetActionGroupItsmReceiverInput

func (GetActionGroupItsmReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupItsmReceiver)(nil)).Elem()
}

func (i GetActionGroupItsmReceiverArray) ToGetActionGroupItsmReceiverArrayOutput() GetActionGroupItsmReceiverArrayOutput {
	return i.ToGetActionGroupItsmReceiverArrayOutputWithContext(context.Background())
}

func (i GetActionGroupItsmReceiverArray) ToGetActionGroupItsmReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupItsmReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupItsmReceiverArrayOutput)
}

func (i GetActionGroupItsmReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupItsmReceiver] {
	return pulumix.Output[[]GetActionGroupItsmReceiver]{
		OutputState: i.ToGetActionGroupItsmReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type GetActionGroupItsmReceiverOutput struct{ *pulumi.OutputState }

func (GetActionGroupItsmReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupItsmReceiver)(nil)).Elem()
}

func (o GetActionGroupItsmReceiverOutput) ToGetActionGroupItsmReceiverOutput() GetActionGroupItsmReceiverOutput {
	return o
}

func (o GetActionGroupItsmReceiverOutput) ToGetActionGroupItsmReceiverOutputWithContext(ctx context.Context) GetActionGroupItsmReceiverOutput {
	return o
}

func (o GetActionGroupItsmReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupItsmReceiver] {
	return pulumix.Output[GetActionGroupItsmReceiver]{
		OutputState: o.OutputState,
	}
}

// The unique connection identifier of the ITSM connection.
func (o GetActionGroupItsmReceiverOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupItsmReceiver) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// Specifies the name of the Action Group.
func (o GetActionGroupItsmReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupItsmReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The region of the workspace.
func (o GetActionGroupItsmReceiverOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupItsmReceiver) string { return v.Region }).(pulumi.StringOutput)
}

// A JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
func (o GetActionGroupItsmReceiverOutput) TicketConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupItsmReceiver) string { return v.TicketConfiguration }).(pulumi.StringOutput)
}

// The Azure Log Analytics workspace ID where this connection is defined.
func (o GetActionGroupItsmReceiverOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupItsmReceiver) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

type GetActionGroupItsmReceiverArrayOutput struct{ *pulumi.OutputState }

func (GetActionGroupItsmReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupItsmReceiver)(nil)).Elem()
}

func (o GetActionGroupItsmReceiverArrayOutput) ToGetActionGroupItsmReceiverArrayOutput() GetActionGroupItsmReceiverArrayOutput {
	return o
}

func (o GetActionGroupItsmReceiverArrayOutput) ToGetActionGroupItsmReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupItsmReceiverArrayOutput {
	return o
}

func (o GetActionGroupItsmReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupItsmReceiver] {
	return pulumix.Output[[]GetActionGroupItsmReceiver]{
		OutputState: o.OutputState,
	}
}

func (o GetActionGroupItsmReceiverArrayOutput) Index(i pulumi.IntInput) GetActionGroupItsmReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionGroupItsmReceiver {
		return vs[0].([]GetActionGroupItsmReceiver)[vs[1].(int)]
	}).(GetActionGroupItsmReceiverOutput)
}

type GetActionGroupLogicAppReceiver struct {
	// The callback url where HTTP request sent to.
	CallbackUrl string `pulumi:"callbackUrl"`
	// Specifies the name of the Action Group.
	Name string `pulumi:"name"`
	// The Azure resource ID of the logic app.
	ResourceId string `pulumi:"resourceId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// GetActionGroupLogicAppReceiverInput is an input type that accepts GetActionGroupLogicAppReceiverArgs and GetActionGroupLogicAppReceiverOutput values.
// You can construct a concrete instance of `GetActionGroupLogicAppReceiverInput` via:
//
//	GetActionGroupLogicAppReceiverArgs{...}
type GetActionGroupLogicAppReceiverInput interface {
	pulumi.Input

	ToGetActionGroupLogicAppReceiverOutput() GetActionGroupLogicAppReceiverOutput
	ToGetActionGroupLogicAppReceiverOutputWithContext(context.Context) GetActionGroupLogicAppReceiverOutput
}

type GetActionGroupLogicAppReceiverArgs struct {
	// The callback url where HTTP request sent to.
	CallbackUrl pulumi.StringInput `pulumi:"callbackUrl"`
	// Specifies the name of the Action Group.
	Name pulumi.StringInput `pulumi:"name"`
	// The Azure resource ID of the logic app.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolInput `pulumi:"useCommonAlertSchema"`
}

func (GetActionGroupLogicAppReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupLogicAppReceiver)(nil)).Elem()
}

func (i GetActionGroupLogicAppReceiverArgs) ToGetActionGroupLogicAppReceiverOutput() GetActionGroupLogicAppReceiverOutput {
	return i.ToGetActionGroupLogicAppReceiverOutputWithContext(context.Background())
}

func (i GetActionGroupLogicAppReceiverArgs) ToGetActionGroupLogicAppReceiverOutputWithContext(ctx context.Context) GetActionGroupLogicAppReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupLogicAppReceiverOutput)
}

func (i GetActionGroupLogicAppReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupLogicAppReceiver] {
	return pulumix.Output[GetActionGroupLogicAppReceiver]{
		OutputState: i.ToGetActionGroupLogicAppReceiverOutputWithContext(ctx).OutputState,
	}
}

// GetActionGroupLogicAppReceiverArrayInput is an input type that accepts GetActionGroupLogicAppReceiverArray and GetActionGroupLogicAppReceiverArrayOutput values.
// You can construct a concrete instance of `GetActionGroupLogicAppReceiverArrayInput` via:
//
//	GetActionGroupLogicAppReceiverArray{ GetActionGroupLogicAppReceiverArgs{...} }
type GetActionGroupLogicAppReceiverArrayInput interface {
	pulumi.Input

	ToGetActionGroupLogicAppReceiverArrayOutput() GetActionGroupLogicAppReceiverArrayOutput
	ToGetActionGroupLogicAppReceiverArrayOutputWithContext(context.Context) GetActionGroupLogicAppReceiverArrayOutput
}

type GetActionGroupLogicAppReceiverArray []GetActionGroupLogicAppReceiverInput

func (GetActionGroupLogicAppReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupLogicAppReceiver)(nil)).Elem()
}

func (i GetActionGroupLogicAppReceiverArray) ToGetActionGroupLogicAppReceiverArrayOutput() GetActionGroupLogicAppReceiverArrayOutput {
	return i.ToGetActionGroupLogicAppReceiverArrayOutputWithContext(context.Background())
}

func (i GetActionGroupLogicAppReceiverArray) ToGetActionGroupLogicAppReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupLogicAppReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupLogicAppReceiverArrayOutput)
}

func (i GetActionGroupLogicAppReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupLogicAppReceiver] {
	return pulumix.Output[[]GetActionGroupLogicAppReceiver]{
		OutputState: i.ToGetActionGroupLogicAppReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type GetActionGroupLogicAppReceiverOutput struct{ *pulumi.OutputState }

func (GetActionGroupLogicAppReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupLogicAppReceiver)(nil)).Elem()
}

func (o GetActionGroupLogicAppReceiverOutput) ToGetActionGroupLogicAppReceiverOutput() GetActionGroupLogicAppReceiverOutput {
	return o
}

func (o GetActionGroupLogicAppReceiverOutput) ToGetActionGroupLogicAppReceiverOutputWithContext(ctx context.Context) GetActionGroupLogicAppReceiverOutput {
	return o
}

func (o GetActionGroupLogicAppReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupLogicAppReceiver] {
	return pulumix.Output[GetActionGroupLogicAppReceiver]{
		OutputState: o.OutputState,
	}
}

// The callback url where HTTP request sent to.
func (o GetActionGroupLogicAppReceiverOutput) CallbackUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupLogicAppReceiver) string { return v.CallbackUrl }).(pulumi.StringOutput)
}

// Specifies the name of the Action Group.
func (o GetActionGroupLogicAppReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupLogicAppReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The Azure resource ID of the logic app.
func (o GetActionGroupLogicAppReceiverOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupLogicAppReceiver) string { return v.ResourceId }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o GetActionGroupLogicAppReceiverOutput) UseCommonAlertSchema() pulumi.BoolOutput {
	return o.ApplyT(func(v GetActionGroupLogicAppReceiver) bool { return v.UseCommonAlertSchema }).(pulumi.BoolOutput)
}

type GetActionGroupLogicAppReceiverArrayOutput struct{ *pulumi.OutputState }

func (GetActionGroupLogicAppReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupLogicAppReceiver)(nil)).Elem()
}

func (o GetActionGroupLogicAppReceiverArrayOutput) ToGetActionGroupLogicAppReceiverArrayOutput() GetActionGroupLogicAppReceiverArrayOutput {
	return o
}

func (o GetActionGroupLogicAppReceiverArrayOutput) ToGetActionGroupLogicAppReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupLogicAppReceiverArrayOutput {
	return o
}

func (o GetActionGroupLogicAppReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupLogicAppReceiver] {
	return pulumix.Output[[]GetActionGroupLogicAppReceiver]{
		OutputState: o.OutputState,
	}
}

func (o GetActionGroupLogicAppReceiverArrayOutput) Index(i pulumi.IntInput) GetActionGroupLogicAppReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionGroupLogicAppReceiver {
		return vs[0].([]GetActionGroupLogicAppReceiver)[vs[1].(int)]
	}).(GetActionGroupLogicAppReceiverOutput)
}

type GetActionGroupSmsReceiver struct {
	// The country code of the voice receiver.
	CountryCode string `pulumi:"countryCode"`
	// Specifies the name of the Action Group.
	Name string `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// GetActionGroupSmsReceiverInput is an input type that accepts GetActionGroupSmsReceiverArgs and GetActionGroupSmsReceiverOutput values.
// You can construct a concrete instance of `GetActionGroupSmsReceiverInput` via:
//
//	GetActionGroupSmsReceiverArgs{...}
type GetActionGroupSmsReceiverInput interface {
	pulumi.Input

	ToGetActionGroupSmsReceiverOutput() GetActionGroupSmsReceiverOutput
	ToGetActionGroupSmsReceiverOutputWithContext(context.Context) GetActionGroupSmsReceiverOutput
}

type GetActionGroupSmsReceiverArgs struct {
	// The country code of the voice receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// Specifies the name of the Action Group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (GetActionGroupSmsReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupSmsReceiver)(nil)).Elem()
}

func (i GetActionGroupSmsReceiverArgs) ToGetActionGroupSmsReceiverOutput() GetActionGroupSmsReceiverOutput {
	return i.ToGetActionGroupSmsReceiverOutputWithContext(context.Background())
}

func (i GetActionGroupSmsReceiverArgs) ToGetActionGroupSmsReceiverOutputWithContext(ctx context.Context) GetActionGroupSmsReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupSmsReceiverOutput)
}

func (i GetActionGroupSmsReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupSmsReceiver] {
	return pulumix.Output[GetActionGroupSmsReceiver]{
		OutputState: i.ToGetActionGroupSmsReceiverOutputWithContext(ctx).OutputState,
	}
}

// GetActionGroupSmsReceiverArrayInput is an input type that accepts GetActionGroupSmsReceiverArray and GetActionGroupSmsReceiverArrayOutput values.
// You can construct a concrete instance of `GetActionGroupSmsReceiverArrayInput` via:
//
//	GetActionGroupSmsReceiverArray{ GetActionGroupSmsReceiverArgs{...} }
type GetActionGroupSmsReceiverArrayInput interface {
	pulumi.Input

	ToGetActionGroupSmsReceiverArrayOutput() GetActionGroupSmsReceiverArrayOutput
	ToGetActionGroupSmsReceiverArrayOutputWithContext(context.Context) GetActionGroupSmsReceiverArrayOutput
}

type GetActionGroupSmsReceiverArray []GetActionGroupSmsReceiverInput

func (GetActionGroupSmsReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupSmsReceiver)(nil)).Elem()
}

func (i GetActionGroupSmsReceiverArray) ToGetActionGroupSmsReceiverArrayOutput() GetActionGroupSmsReceiverArrayOutput {
	return i.ToGetActionGroupSmsReceiverArrayOutputWithContext(context.Background())
}

func (i GetActionGroupSmsReceiverArray) ToGetActionGroupSmsReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupSmsReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupSmsReceiverArrayOutput)
}

func (i GetActionGroupSmsReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupSmsReceiver] {
	return pulumix.Output[[]GetActionGroupSmsReceiver]{
		OutputState: i.ToGetActionGroupSmsReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type GetActionGroupSmsReceiverOutput struct{ *pulumi.OutputState }

func (GetActionGroupSmsReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupSmsReceiver)(nil)).Elem()
}

func (o GetActionGroupSmsReceiverOutput) ToGetActionGroupSmsReceiverOutput() GetActionGroupSmsReceiverOutput {
	return o
}

func (o GetActionGroupSmsReceiverOutput) ToGetActionGroupSmsReceiverOutputWithContext(ctx context.Context) GetActionGroupSmsReceiverOutput {
	return o
}

func (o GetActionGroupSmsReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupSmsReceiver] {
	return pulumix.Output[GetActionGroupSmsReceiver]{
		OutputState: o.OutputState,
	}
}

// The country code of the voice receiver.
func (o GetActionGroupSmsReceiverOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupSmsReceiver) string { return v.CountryCode }).(pulumi.StringOutput)
}

// Specifies the name of the Action Group.
func (o GetActionGroupSmsReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupSmsReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the voice receiver.
func (o GetActionGroupSmsReceiverOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupSmsReceiver) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type GetActionGroupSmsReceiverArrayOutput struct{ *pulumi.OutputState }

func (GetActionGroupSmsReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupSmsReceiver)(nil)).Elem()
}

func (o GetActionGroupSmsReceiverArrayOutput) ToGetActionGroupSmsReceiverArrayOutput() GetActionGroupSmsReceiverArrayOutput {
	return o
}

func (o GetActionGroupSmsReceiverArrayOutput) ToGetActionGroupSmsReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupSmsReceiverArrayOutput {
	return o
}

func (o GetActionGroupSmsReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupSmsReceiver] {
	return pulumix.Output[[]GetActionGroupSmsReceiver]{
		OutputState: o.OutputState,
	}
}

func (o GetActionGroupSmsReceiverArrayOutput) Index(i pulumi.IntInput) GetActionGroupSmsReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionGroupSmsReceiver {
		return vs[0].([]GetActionGroupSmsReceiver)[vs[1].(int)]
	}).(GetActionGroupSmsReceiverOutput)
}

type GetActionGroupVoiceReceiver struct {
	// The country code of the voice receiver.
	CountryCode string `pulumi:"countryCode"`
	// Specifies the name of the Action Group.
	Name string `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// GetActionGroupVoiceReceiverInput is an input type that accepts GetActionGroupVoiceReceiverArgs and GetActionGroupVoiceReceiverOutput values.
// You can construct a concrete instance of `GetActionGroupVoiceReceiverInput` via:
//
//	GetActionGroupVoiceReceiverArgs{...}
type GetActionGroupVoiceReceiverInput interface {
	pulumi.Input

	ToGetActionGroupVoiceReceiverOutput() GetActionGroupVoiceReceiverOutput
	ToGetActionGroupVoiceReceiverOutputWithContext(context.Context) GetActionGroupVoiceReceiverOutput
}

type GetActionGroupVoiceReceiverArgs struct {
	// The country code of the voice receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// Specifies the name of the Action Group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (GetActionGroupVoiceReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupVoiceReceiver)(nil)).Elem()
}

func (i GetActionGroupVoiceReceiverArgs) ToGetActionGroupVoiceReceiverOutput() GetActionGroupVoiceReceiverOutput {
	return i.ToGetActionGroupVoiceReceiverOutputWithContext(context.Background())
}

func (i GetActionGroupVoiceReceiverArgs) ToGetActionGroupVoiceReceiverOutputWithContext(ctx context.Context) GetActionGroupVoiceReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupVoiceReceiverOutput)
}

func (i GetActionGroupVoiceReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupVoiceReceiver] {
	return pulumix.Output[GetActionGroupVoiceReceiver]{
		OutputState: i.ToGetActionGroupVoiceReceiverOutputWithContext(ctx).OutputState,
	}
}

// GetActionGroupVoiceReceiverArrayInput is an input type that accepts GetActionGroupVoiceReceiverArray and GetActionGroupVoiceReceiverArrayOutput values.
// You can construct a concrete instance of `GetActionGroupVoiceReceiverArrayInput` via:
//
//	GetActionGroupVoiceReceiverArray{ GetActionGroupVoiceReceiverArgs{...} }
type GetActionGroupVoiceReceiverArrayInput interface {
	pulumi.Input

	ToGetActionGroupVoiceReceiverArrayOutput() GetActionGroupVoiceReceiverArrayOutput
	ToGetActionGroupVoiceReceiverArrayOutputWithContext(context.Context) GetActionGroupVoiceReceiverArrayOutput
}

type GetActionGroupVoiceReceiverArray []GetActionGroupVoiceReceiverInput

func (GetActionGroupVoiceReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupVoiceReceiver)(nil)).Elem()
}

func (i GetActionGroupVoiceReceiverArray) ToGetActionGroupVoiceReceiverArrayOutput() GetActionGroupVoiceReceiverArrayOutput {
	return i.ToGetActionGroupVoiceReceiverArrayOutputWithContext(context.Background())
}

func (i GetActionGroupVoiceReceiverArray) ToGetActionGroupVoiceReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupVoiceReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupVoiceReceiverArrayOutput)
}

func (i GetActionGroupVoiceReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupVoiceReceiver] {
	return pulumix.Output[[]GetActionGroupVoiceReceiver]{
		OutputState: i.ToGetActionGroupVoiceReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type GetActionGroupVoiceReceiverOutput struct{ *pulumi.OutputState }

func (GetActionGroupVoiceReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupVoiceReceiver)(nil)).Elem()
}

func (o GetActionGroupVoiceReceiverOutput) ToGetActionGroupVoiceReceiverOutput() GetActionGroupVoiceReceiverOutput {
	return o
}

func (o GetActionGroupVoiceReceiverOutput) ToGetActionGroupVoiceReceiverOutputWithContext(ctx context.Context) GetActionGroupVoiceReceiverOutput {
	return o
}

func (o GetActionGroupVoiceReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupVoiceReceiver] {
	return pulumix.Output[GetActionGroupVoiceReceiver]{
		OutputState: o.OutputState,
	}
}

// The country code of the voice receiver.
func (o GetActionGroupVoiceReceiverOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupVoiceReceiver) string { return v.CountryCode }).(pulumi.StringOutput)
}

// Specifies the name of the Action Group.
func (o GetActionGroupVoiceReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupVoiceReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the voice receiver.
func (o GetActionGroupVoiceReceiverOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupVoiceReceiver) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type GetActionGroupVoiceReceiverArrayOutput struct{ *pulumi.OutputState }

func (GetActionGroupVoiceReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupVoiceReceiver)(nil)).Elem()
}

func (o GetActionGroupVoiceReceiverArrayOutput) ToGetActionGroupVoiceReceiverArrayOutput() GetActionGroupVoiceReceiverArrayOutput {
	return o
}

func (o GetActionGroupVoiceReceiverArrayOutput) ToGetActionGroupVoiceReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupVoiceReceiverArrayOutput {
	return o
}

func (o GetActionGroupVoiceReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupVoiceReceiver] {
	return pulumix.Output[[]GetActionGroupVoiceReceiver]{
		OutputState: o.OutputState,
	}
}

func (o GetActionGroupVoiceReceiverArrayOutput) Index(i pulumi.IntInput) GetActionGroupVoiceReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionGroupVoiceReceiver {
		return vs[0].([]GetActionGroupVoiceReceiver)[vs[1].(int)]
	}).(GetActionGroupVoiceReceiverOutput)
}

type GetActionGroupWebhookReceiver struct {
	AadAuths []GetActionGroupWebhookReceiverAadAuth `pulumi:"aadAuths"`
	// Specifies the name of the Action Group.
	Name string `pulumi:"name"`
	// The URI where webhooks should be sent.
	ServiceUri string `pulumi:"serviceUri"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema bool `pulumi:"useCommonAlertSchema"`
}

// GetActionGroupWebhookReceiverInput is an input type that accepts GetActionGroupWebhookReceiverArgs and GetActionGroupWebhookReceiverOutput values.
// You can construct a concrete instance of `GetActionGroupWebhookReceiverInput` via:
//
//	GetActionGroupWebhookReceiverArgs{...}
type GetActionGroupWebhookReceiverInput interface {
	pulumi.Input

	ToGetActionGroupWebhookReceiverOutput() GetActionGroupWebhookReceiverOutput
	ToGetActionGroupWebhookReceiverOutputWithContext(context.Context) GetActionGroupWebhookReceiverOutput
}

type GetActionGroupWebhookReceiverArgs struct {
	AadAuths GetActionGroupWebhookReceiverAadAuthArrayInput `pulumi:"aadAuths"`
	// Specifies the name of the Action Group.
	Name pulumi.StringInput `pulumi:"name"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringInput `pulumi:"serviceUri"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolInput `pulumi:"useCommonAlertSchema"`
}

func (GetActionGroupWebhookReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupWebhookReceiver)(nil)).Elem()
}

func (i GetActionGroupWebhookReceiverArgs) ToGetActionGroupWebhookReceiverOutput() GetActionGroupWebhookReceiverOutput {
	return i.ToGetActionGroupWebhookReceiverOutputWithContext(context.Background())
}

func (i GetActionGroupWebhookReceiverArgs) ToGetActionGroupWebhookReceiverOutputWithContext(ctx context.Context) GetActionGroupWebhookReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupWebhookReceiverOutput)
}

func (i GetActionGroupWebhookReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupWebhookReceiver] {
	return pulumix.Output[GetActionGroupWebhookReceiver]{
		OutputState: i.ToGetActionGroupWebhookReceiverOutputWithContext(ctx).OutputState,
	}
}

// GetActionGroupWebhookReceiverArrayInput is an input type that accepts GetActionGroupWebhookReceiverArray and GetActionGroupWebhookReceiverArrayOutput values.
// You can construct a concrete instance of `GetActionGroupWebhookReceiverArrayInput` via:
//
//	GetActionGroupWebhookReceiverArray{ GetActionGroupWebhookReceiverArgs{...} }
type GetActionGroupWebhookReceiverArrayInput interface {
	pulumi.Input

	ToGetActionGroupWebhookReceiverArrayOutput() GetActionGroupWebhookReceiverArrayOutput
	ToGetActionGroupWebhookReceiverArrayOutputWithContext(context.Context) GetActionGroupWebhookReceiverArrayOutput
}

type GetActionGroupWebhookReceiverArray []GetActionGroupWebhookReceiverInput

func (GetActionGroupWebhookReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupWebhookReceiver)(nil)).Elem()
}

func (i GetActionGroupWebhookReceiverArray) ToGetActionGroupWebhookReceiverArrayOutput() GetActionGroupWebhookReceiverArrayOutput {
	return i.ToGetActionGroupWebhookReceiverArrayOutputWithContext(context.Background())
}

func (i GetActionGroupWebhookReceiverArray) ToGetActionGroupWebhookReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupWebhookReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupWebhookReceiverArrayOutput)
}

func (i GetActionGroupWebhookReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupWebhookReceiver] {
	return pulumix.Output[[]GetActionGroupWebhookReceiver]{
		OutputState: i.ToGetActionGroupWebhookReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type GetActionGroupWebhookReceiverOutput struct{ *pulumi.OutputState }

func (GetActionGroupWebhookReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupWebhookReceiver)(nil)).Elem()
}

func (o GetActionGroupWebhookReceiverOutput) ToGetActionGroupWebhookReceiverOutput() GetActionGroupWebhookReceiverOutput {
	return o
}

func (o GetActionGroupWebhookReceiverOutput) ToGetActionGroupWebhookReceiverOutputWithContext(ctx context.Context) GetActionGroupWebhookReceiverOutput {
	return o
}

func (o GetActionGroupWebhookReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupWebhookReceiver] {
	return pulumix.Output[GetActionGroupWebhookReceiver]{
		OutputState: o.OutputState,
	}
}

func (o GetActionGroupWebhookReceiverOutput) AadAuths() GetActionGroupWebhookReceiverAadAuthArrayOutput {
	return o.ApplyT(func(v GetActionGroupWebhookReceiver) []GetActionGroupWebhookReceiverAadAuth { return v.AadAuths }).(GetActionGroupWebhookReceiverAadAuthArrayOutput)
}

// Specifies the name of the Action Group.
func (o GetActionGroupWebhookReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupWebhookReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o GetActionGroupWebhookReceiverOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupWebhookReceiver) string { return v.ServiceUri }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o GetActionGroupWebhookReceiverOutput) UseCommonAlertSchema() pulumi.BoolOutput {
	return o.ApplyT(func(v GetActionGroupWebhookReceiver) bool { return v.UseCommonAlertSchema }).(pulumi.BoolOutput)
}

type GetActionGroupWebhookReceiverArrayOutput struct{ *pulumi.OutputState }

func (GetActionGroupWebhookReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupWebhookReceiver)(nil)).Elem()
}

func (o GetActionGroupWebhookReceiverArrayOutput) ToGetActionGroupWebhookReceiverArrayOutput() GetActionGroupWebhookReceiverArrayOutput {
	return o
}

func (o GetActionGroupWebhookReceiverArrayOutput) ToGetActionGroupWebhookReceiverArrayOutputWithContext(ctx context.Context) GetActionGroupWebhookReceiverArrayOutput {
	return o
}

func (o GetActionGroupWebhookReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupWebhookReceiver] {
	return pulumix.Output[[]GetActionGroupWebhookReceiver]{
		OutputState: o.OutputState,
	}
}

func (o GetActionGroupWebhookReceiverArrayOutput) Index(i pulumi.IntInput) GetActionGroupWebhookReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionGroupWebhookReceiver {
		return vs[0].([]GetActionGroupWebhookReceiver)[vs[1].(int)]
	}).(GetActionGroupWebhookReceiverOutput)
}

type GetActionGroupWebhookReceiverAadAuth struct {
	IdentifierUri string `pulumi:"identifierUri"`
	ObjectId      string `pulumi:"objectId"`
	// The Tenant ID for the subscription containing this Event Hub.
	TenantId string `pulumi:"tenantId"`
}

// GetActionGroupWebhookReceiverAadAuthInput is an input type that accepts GetActionGroupWebhookReceiverAadAuthArgs and GetActionGroupWebhookReceiverAadAuthOutput values.
// You can construct a concrete instance of `GetActionGroupWebhookReceiverAadAuthInput` via:
//
//	GetActionGroupWebhookReceiverAadAuthArgs{...}
type GetActionGroupWebhookReceiverAadAuthInput interface {
	pulumi.Input

	ToGetActionGroupWebhookReceiverAadAuthOutput() GetActionGroupWebhookReceiverAadAuthOutput
	ToGetActionGroupWebhookReceiverAadAuthOutputWithContext(context.Context) GetActionGroupWebhookReceiverAadAuthOutput
}

type GetActionGroupWebhookReceiverAadAuthArgs struct {
	IdentifierUri pulumi.StringInput `pulumi:"identifierUri"`
	ObjectId      pulumi.StringInput `pulumi:"objectId"`
	// The Tenant ID for the subscription containing this Event Hub.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (GetActionGroupWebhookReceiverAadAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupWebhookReceiverAadAuth)(nil)).Elem()
}

func (i GetActionGroupWebhookReceiverAadAuthArgs) ToGetActionGroupWebhookReceiverAadAuthOutput() GetActionGroupWebhookReceiverAadAuthOutput {
	return i.ToGetActionGroupWebhookReceiverAadAuthOutputWithContext(context.Background())
}

func (i GetActionGroupWebhookReceiverAadAuthArgs) ToGetActionGroupWebhookReceiverAadAuthOutputWithContext(ctx context.Context) GetActionGroupWebhookReceiverAadAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupWebhookReceiverAadAuthOutput)
}

func (i GetActionGroupWebhookReceiverAadAuthArgs) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupWebhookReceiverAadAuth] {
	return pulumix.Output[GetActionGroupWebhookReceiverAadAuth]{
		OutputState: i.ToGetActionGroupWebhookReceiverAadAuthOutputWithContext(ctx).OutputState,
	}
}

// GetActionGroupWebhookReceiverAadAuthArrayInput is an input type that accepts GetActionGroupWebhookReceiverAadAuthArray and GetActionGroupWebhookReceiverAadAuthArrayOutput values.
// You can construct a concrete instance of `GetActionGroupWebhookReceiverAadAuthArrayInput` via:
//
//	GetActionGroupWebhookReceiverAadAuthArray{ GetActionGroupWebhookReceiverAadAuthArgs{...} }
type GetActionGroupWebhookReceiverAadAuthArrayInput interface {
	pulumi.Input

	ToGetActionGroupWebhookReceiverAadAuthArrayOutput() GetActionGroupWebhookReceiverAadAuthArrayOutput
	ToGetActionGroupWebhookReceiverAadAuthArrayOutputWithContext(context.Context) GetActionGroupWebhookReceiverAadAuthArrayOutput
}

type GetActionGroupWebhookReceiverAadAuthArray []GetActionGroupWebhookReceiverAadAuthInput

func (GetActionGroupWebhookReceiverAadAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupWebhookReceiverAadAuth)(nil)).Elem()
}

func (i GetActionGroupWebhookReceiverAadAuthArray) ToGetActionGroupWebhookReceiverAadAuthArrayOutput() GetActionGroupWebhookReceiverAadAuthArrayOutput {
	return i.ToGetActionGroupWebhookReceiverAadAuthArrayOutputWithContext(context.Background())
}

func (i GetActionGroupWebhookReceiverAadAuthArray) ToGetActionGroupWebhookReceiverAadAuthArrayOutputWithContext(ctx context.Context) GetActionGroupWebhookReceiverAadAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetActionGroupWebhookReceiverAadAuthArrayOutput)
}

func (i GetActionGroupWebhookReceiverAadAuthArray) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupWebhookReceiverAadAuth] {
	return pulumix.Output[[]GetActionGroupWebhookReceiverAadAuth]{
		OutputState: i.ToGetActionGroupWebhookReceiverAadAuthArrayOutputWithContext(ctx).OutputState,
	}
}

type GetActionGroupWebhookReceiverAadAuthOutput struct{ *pulumi.OutputState }

func (GetActionGroupWebhookReceiverAadAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetActionGroupWebhookReceiverAadAuth)(nil)).Elem()
}

func (o GetActionGroupWebhookReceiverAadAuthOutput) ToGetActionGroupWebhookReceiverAadAuthOutput() GetActionGroupWebhookReceiverAadAuthOutput {
	return o
}

func (o GetActionGroupWebhookReceiverAadAuthOutput) ToGetActionGroupWebhookReceiverAadAuthOutputWithContext(ctx context.Context) GetActionGroupWebhookReceiverAadAuthOutput {
	return o
}

func (o GetActionGroupWebhookReceiverAadAuthOutput) ToOutput(ctx context.Context) pulumix.Output[GetActionGroupWebhookReceiverAadAuth] {
	return pulumix.Output[GetActionGroupWebhookReceiverAadAuth]{
		OutputState: o.OutputState,
	}
}

func (o GetActionGroupWebhookReceiverAadAuthOutput) IdentifierUri() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupWebhookReceiverAadAuth) string { return v.IdentifierUri }).(pulumi.StringOutput)
}

func (o GetActionGroupWebhookReceiverAadAuthOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupWebhookReceiverAadAuth) string { return v.ObjectId }).(pulumi.StringOutput)
}

// The Tenant ID for the subscription containing this Event Hub.
func (o GetActionGroupWebhookReceiverAadAuthOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetActionGroupWebhookReceiverAadAuth) string { return v.TenantId }).(pulumi.StringOutput)
}

type GetActionGroupWebhookReceiverAadAuthArrayOutput struct{ *pulumi.OutputState }

func (GetActionGroupWebhookReceiverAadAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetActionGroupWebhookReceiverAadAuth)(nil)).Elem()
}

func (o GetActionGroupWebhookReceiverAadAuthArrayOutput) ToGetActionGroupWebhookReceiverAadAuthArrayOutput() GetActionGroupWebhookReceiverAadAuthArrayOutput {
	return o
}

func (o GetActionGroupWebhookReceiverAadAuthArrayOutput) ToGetActionGroupWebhookReceiverAadAuthArrayOutputWithContext(ctx context.Context) GetActionGroupWebhookReceiverAadAuthArrayOutput {
	return o
}

func (o GetActionGroupWebhookReceiverAadAuthArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetActionGroupWebhookReceiverAadAuth] {
	return pulumix.Output[[]GetActionGroupWebhookReceiverAadAuth]{
		OutputState: o.OutputState,
	}
}

func (o GetActionGroupWebhookReceiverAadAuthArrayOutput) Index(i pulumi.IntInput) GetActionGroupWebhookReceiverAadAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetActionGroupWebhookReceiverAadAuth {
		return vs[0].([]GetActionGroupWebhookReceiverAadAuth)[vs[1].(int)]
	}).(GetActionGroupWebhookReceiverAadAuthOutput)
}

type GetDataCollectionRuleDataFlow struct {
	// The built-in transform to transform stream data.
	BuiltInTransform string `pulumi:"builtInTransform"`
	// Specifies a list of destination names. A `azureMonitorMetrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
	Destinations []string `pulumi:"destinations"`
	// The output stream of the transform. Only required if the data flow changes data to a different stream.
	OutputStream string `pulumi:"outputStream"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
	// The KQL query to transform stream data.
	TransformKql string `pulumi:"transformKql"`
}

// GetDataCollectionRuleDataFlowInput is an input type that accepts GetDataCollectionRuleDataFlowArgs and GetDataCollectionRuleDataFlowOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataFlowInput` via:
//
//	GetDataCollectionRuleDataFlowArgs{...}
type GetDataCollectionRuleDataFlowInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataFlowOutput() GetDataCollectionRuleDataFlowOutput
	ToGetDataCollectionRuleDataFlowOutputWithContext(context.Context) GetDataCollectionRuleDataFlowOutput
}

type GetDataCollectionRuleDataFlowArgs struct {
	// The built-in transform to transform stream data.
	BuiltInTransform pulumi.StringInput `pulumi:"builtInTransform"`
	// Specifies a list of destination names. A `azureMonitorMetrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
	Destinations pulumi.StringArrayInput `pulumi:"destinations"`
	// The output stream of the transform. Only required if the data flow changes data to a different stream.
	OutputStream pulumi.StringInput `pulumi:"outputStream"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
	// The KQL query to transform stream data.
	TransformKql pulumi.StringInput `pulumi:"transformKql"`
}

func (GetDataCollectionRuleDataFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataFlow)(nil)).Elem()
}

func (i GetDataCollectionRuleDataFlowArgs) ToGetDataCollectionRuleDataFlowOutput() GetDataCollectionRuleDataFlowOutput {
	return i.ToGetDataCollectionRuleDataFlowOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataFlowArgs) ToGetDataCollectionRuleDataFlowOutputWithContext(ctx context.Context) GetDataCollectionRuleDataFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataFlowOutput)
}

func (i GetDataCollectionRuleDataFlowArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataFlow] {
	return pulumix.Output[GetDataCollectionRuleDataFlow]{
		OutputState: i.ToGetDataCollectionRuleDataFlowOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataFlowArrayInput is an input type that accepts GetDataCollectionRuleDataFlowArray and GetDataCollectionRuleDataFlowArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataFlowArrayInput` via:
//
//	GetDataCollectionRuleDataFlowArray{ GetDataCollectionRuleDataFlowArgs{...} }
type GetDataCollectionRuleDataFlowArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataFlowArrayOutput() GetDataCollectionRuleDataFlowArrayOutput
	ToGetDataCollectionRuleDataFlowArrayOutputWithContext(context.Context) GetDataCollectionRuleDataFlowArrayOutput
}

type GetDataCollectionRuleDataFlowArray []GetDataCollectionRuleDataFlowInput

func (GetDataCollectionRuleDataFlowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataFlow)(nil)).Elem()
}

func (i GetDataCollectionRuleDataFlowArray) ToGetDataCollectionRuleDataFlowArrayOutput() GetDataCollectionRuleDataFlowArrayOutput {
	return i.ToGetDataCollectionRuleDataFlowArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataFlowArray) ToGetDataCollectionRuleDataFlowArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataFlowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataFlowArrayOutput)
}

func (i GetDataCollectionRuleDataFlowArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataFlow] {
	return pulumix.Output[[]GetDataCollectionRuleDataFlow]{
		OutputState: i.ToGetDataCollectionRuleDataFlowArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataFlowOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataFlow)(nil)).Elem()
}

func (o GetDataCollectionRuleDataFlowOutput) ToGetDataCollectionRuleDataFlowOutput() GetDataCollectionRuleDataFlowOutput {
	return o
}

func (o GetDataCollectionRuleDataFlowOutput) ToGetDataCollectionRuleDataFlowOutputWithContext(ctx context.Context) GetDataCollectionRuleDataFlowOutput {
	return o
}

func (o GetDataCollectionRuleDataFlowOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataFlow] {
	return pulumix.Output[GetDataCollectionRuleDataFlow]{
		OutputState: o.OutputState,
	}
}

// The built-in transform to transform stream data.
func (o GetDataCollectionRuleDataFlowOutput) BuiltInTransform() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataFlow) string { return v.BuiltInTransform }).(pulumi.StringOutput)
}

// Specifies a list of destination names. A `azureMonitorMetrics` data source only allows for stream of kind `Microsoft-InsightsMetrics`.
func (o GetDataCollectionRuleDataFlowOutput) Destinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataFlow) []string { return v.Destinations }).(pulumi.StringArrayOutput)
}

// The output stream of the transform. Only required if the data flow changes data to a different stream.
func (o GetDataCollectionRuleDataFlowOutput) OutputStream() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataFlow) string { return v.OutputStream }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o GetDataCollectionRuleDataFlowOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataFlow) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform stream data.
func (o GetDataCollectionRuleDataFlowOutput) TransformKql() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataFlow) string { return v.TransformKql }).(pulumi.StringOutput)
}

type GetDataCollectionRuleDataFlowArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataFlowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataFlow)(nil)).Elem()
}

func (o GetDataCollectionRuleDataFlowArrayOutput) ToGetDataCollectionRuleDataFlowArrayOutput() GetDataCollectionRuleDataFlowArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataFlowArrayOutput) ToGetDataCollectionRuleDataFlowArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataFlowArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataFlowArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataFlow] {
	return pulumix.Output[[]GetDataCollectionRuleDataFlow]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataFlowArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataFlowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataFlow {
		return vs[0].([]GetDataCollectionRuleDataFlow)[vs[1].(int)]
	}).(GetDataCollectionRuleDataFlowOutput)
}

type GetDataCollectionRuleDataSource struct {
	// A `dataImport` block as defined above.
	DataImports []GetDataCollectionRuleDataSourceDataImport `pulumi:"dataImports"`
	// One or more `extension` blocks as defined below.
	Extensions []GetDataCollectionRuleDataSourceExtension `pulumi:"extensions"`
	// One or more `iisLog` blocks as defined below.
	IisLogs []GetDataCollectionRuleDataSourceIisLog `pulumi:"iisLogs"`
	// One or more `logFile` blocks as defined below.
	LogFiles []GetDataCollectionRuleDataSourceLogFile `pulumi:"logFiles"`
	// One or more `performanceCounter` blocks as defined below.
	PerformanceCounters []GetDataCollectionRuleDataSourcePerformanceCounter `pulumi:"performanceCounters"`
	// One or more `platformTelemetry` blocks as defined below.
	PlatformTelemetries []GetDataCollectionRuleDataSourcePlatformTelemetry `pulumi:"platformTelemetries"`
	// One or more `prometheusForwarder` blocks as defined below.
	PrometheusForwarders []GetDataCollectionRuleDataSourcePrometheusForwarder `pulumi:"prometheusForwarders"`
	// One or more `syslog` blocks as defined below.
	Syslogs []GetDataCollectionRuleDataSourceSyslog `pulumi:"syslogs"`
	// One or more `windowsEventLog` blocks as defined below.
	WindowsEventLogs []GetDataCollectionRuleDataSourceWindowsEventLog `pulumi:"windowsEventLogs"`
	// One or more `windowsFirewallLog` blocks as defined below.
	WindowsFirewallLogs []GetDataCollectionRuleDataSourceWindowsFirewallLog `pulumi:"windowsFirewallLogs"`
}

// GetDataCollectionRuleDataSourceInput is an input type that accepts GetDataCollectionRuleDataSourceArgs and GetDataCollectionRuleDataSourceOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceInput` via:
//
//	GetDataCollectionRuleDataSourceArgs{...}
type GetDataCollectionRuleDataSourceInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceOutput() GetDataCollectionRuleDataSourceOutput
	ToGetDataCollectionRuleDataSourceOutputWithContext(context.Context) GetDataCollectionRuleDataSourceOutput
}

type GetDataCollectionRuleDataSourceArgs struct {
	// A `dataImport` block as defined above.
	DataImports GetDataCollectionRuleDataSourceDataImportArrayInput `pulumi:"dataImports"`
	// One or more `extension` blocks as defined below.
	Extensions GetDataCollectionRuleDataSourceExtensionArrayInput `pulumi:"extensions"`
	// One or more `iisLog` blocks as defined below.
	IisLogs GetDataCollectionRuleDataSourceIisLogArrayInput `pulumi:"iisLogs"`
	// One or more `logFile` blocks as defined below.
	LogFiles GetDataCollectionRuleDataSourceLogFileArrayInput `pulumi:"logFiles"`
	// One or more `performanceCounter` blocks as defined below.
	PerformanceCounters GetDataCollectionRuleDataSourcePerformanceCounterArrayInput `pulumi:"performanceCounters"`
	// One or more `platformTelemetry` blocks as defined below.
	PlatformTelemetries GetDataCollectionRuleDataSourcePlatformTelemetryArrayInput `pulumi:"platformTelemetries"`
	// One or more `prometheusForwarder` blocks as defined below.
	PrometheusForwarders GetDataCollectionRuleDataSourcePrometheusForwarderArrayInput `pulumi:"prometheusForwarders"`
	// One or more `syslog` blocks as defined below.
	Syslogs GetDataCollectionRuleDataSourceSyslogArrayInput `pulumi:"syslogs"`
	// One or more `windowsEventLog` blocks as defined below.
	WindowsEventLogs GetDataCollectionRuleDataSourceWindowsEventLogArrayInput `pulumi:"windowsEventLogs"`
	// One or more `windowsFirewallLog` blocks as defined below.
	WindowsFirewallLogs GetDataCollectionRuleDataSourceWindowsFirewallLogArrayInput `pulumi:"windowsFirewallLogs"`
}

func (GetDataCollectionRuleDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSource)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceArgs) ToGetDataCollectionRuleDataSourceOutput() GetDataCollectionRuleDataSourceOutput {
	return i.ToGetDataCollectionRuleDataSourceOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceArgs) ToGetDataCollectionRuleDataSourceOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceOutput)
}

func (i GetDataCollectionRuleDataSourceArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSource] {
	return pulumix.Output[GetDataCollectionRuleDataSource]{
		OutputState: i.ToGetDataCollectionRuleDataSourceOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourceArrayInput is an input type that accepts GetDataCollectionRuleDataSourceArray and GetDataCollectionRuleDataSourceArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceArrayInput` via:
//
//	GetDataCollectionRuleDataSourceArray{ GetDataCollectionRuleDataSourceArgs{...} }
type GetDataCollectionRuleDataSourceArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceArrayOutput() GetDataCollectionRuleDataSourceArrayOutput
	ToGetDataCollectionRuleDataSourceArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourceArrayOutput
}

type GetDataCollectionRuleDataSourceArray []GetDataCollectionRuleDataSourceInput

func (GetDataCollectionRuleDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSource)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceArray) ToGetDataCollectionRuleDataSourceArrayOutput() GetDataCollectionRuleDataSourceArrayOutput {
	return i.ToGetDataCollectionRuleDataSourceArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceArray) ToGetDataCollectionRuleDataSourceArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceArrayOutput)
}

func (i GetDataCollectionRuleDataSourceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSource] {
	return pulumix.Output[[]GetDataCollectionRuleDataSource]{
		OutputState: i.ToGetDataCollectionRuleDataSourceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourceOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSource)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceOutput) ToGetDataCollectionRuleDataSourceOutput() GetDataCollectionRuleDataSourceOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceOutput) ToGetDataCollectionRuleDataSourceOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSource] {
	return pulumix.Output[GetDataCollectionRuleDataSource]{
		OutputState: o.OutputState,
	}
}

// A `dataImport` block as defined above.
func (o GetDataCollectionRuleDataSourceOutput) DataImports() GetDataCollectionRuleDataSourceDataImportArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSource) []GetDataCollectionRuleDataSourceDataImport {
		return v.DataImports
	}).(GetDataCollectionRuleDataSourceDataImportArrayOutput)
}

// One or more `extension` blocks as defined below.
func (o GetDataCollectionRuleDataSourceOutput) Extensions() GetDataCollectionRuleDataSourceExtensionArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSource) []GetDataCollectionRuleDataSourceExtension {
		return v.Extensions
	}).(GetDataCollectionRuleDataSourceExtensionArrayOutput)
}

// One or more `iisLog` blocks as defined below.
func (o GetDataCollectionRuleDataSourceOutput) IisLogs() GetDataCollectionRuleDataSourceIisLogArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSource) []GetDataCollectionRuleDataSourceIisLog { return v.IisLogs }).(GetDataCollectionRuleDataSourceIisLogArrayOutput)
}

// One or more `logFile` blocks as defined below.
func (o GetDataCollectionRuleDataSourceOutput) LogFiles() GetDataCollectionRuleDataSourceLogFileArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSource) []GetDataCollectionRuleDataSourceLogFile { return v.LogFiles }).(GetDataCollectionRuleDataSourceLogFileArrayOutput)
}

// One or more `performanceCounter` blocks as defined below.
func (o GetDataCollectionRuleDataSourceOutput) PerformanceCounters() GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSource) []GetDataCollectionRuleDataSourcePerformanceCounter {
		return v.PerformanceCounters
	}).(GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput)
}

// One or more `platformTelemetry` blocks as defined below.
func (o GetDataCollectionRuleDataSourceOutput) PlatformTelemetries() GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSource) []GetDataCollectionRuleDataSourcePlatformTelemetry {
		return v.PlatformTelemetries
	}).(GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput)
}

// One or more `prometheusForwarder` blocks as defined below.
func (o GetDataCollectionRuleDataSourceOutput) PrometheusForwarders() GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSource) []GetDataCollectionRuleDataSourcePrometheusForwarder {
		return v.PrometheusForwarders
	}).(GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput)
}

// One or more `syslog` blocks as defined below.
func (o GetDataCollectionRuleDataSourceOutput) Syslogs() GetDataCollectionRuleDataSourceSyslogArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSource) []GetDataCollectionRuleDataSourceSyslog { return v.Syslogs }).(GetDataCollectionRuleDataSourceSyslogArrayOutput)
}

// One or more `windowsEventLog` blocks as defined below.
func (o GetDataCollectionRuleDataSourceOutput) WindowsEventLogs() GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSource) []GetDataCollectionRuleDataSourceWindowsEventLog {
		return v.WindowsEventLogs
	}).(GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput)
}

// One or more `windowsFirewallLog` blocks as defined below.
func (o GetDataCollectionRuleDataSourceOutput) WindowsFirewallLogs() GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSource) []GetDataCollectionRuleDataSourceWindowsFirewallLog {
		return v.WindowsFirewallLogs
	}).(GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput)
}

type GetDataCollectionRuleDataSourceArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSource)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceArrayOutput) ToGetDataCollectionRuleDataSourceArrayOutput() GetDataCollectionRuleDataSourceArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceArrayOutput) ToGetDataCollectionRuleDataSourceArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSource] {
	return pulumix.Output[[]GetDataCollectionRuleDataSource]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourceArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSource {
		return vs[0].([]GetDataCollectionRuleDataSource)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourceOutput)
}

type GetDataCollectionRuleDataSourceDataImport struct {
	// An `eventHubDataSource` block as defined below.
	EventHubDataSources []GetDataCollectionRuleDataSourceDataImportEventHubDataSource `pulumi:"eventHubDataSources"`
}

// GetDataCollectionRuleDataSourceDataImportInput is an input type that accepts GetDataCollectionRuleDataSourceDataImportArgs and GetDataCollectionRuleDataSourceDataImportOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceDataImportInput` via:
//
//	GetDataCollectionRuleDataSourceDataImportArgs{...}
type GetDataCollectionRuleDataSourceDataImportInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceDataImportOutput() GetDataCollectionRuleDataSourceDataImportOutput
	ToGetDataCollectionRuleDataSourceDataImportOutputWithContext(context.Context) GetDataCollectionRuleDataSourceDataImportOutput
}

type GetDataCollectionRuleDataSourceDataImportArgs struct {
	// An `eventHubDataSource` block as defined below.
	EventHubDataSources GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayInput `pulumi:"eventHubDataSources"`
}

func (GetDataCollectionRuleDataSourceDataImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceDataImport)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceDataImportArgs) ToGetDataCollectionRuleDataSourceDataImportOutput() GetDataCollectionRuleDataSourceDataImportOutput {
	return i.ToGetDataCollectionRuleDataSourceDataImportOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceDataImportArgs) ToGetDataCollectionRuleDataSourceDataImportOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceDataImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceDataImportOutput)
}

func (i GetDataCollectionRuleDataSourceDataImportArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceDataImport] {
	return pulumix.Output[GetDataCollectionRuleDataSourceDataImport]{
		OutputState: i.ToGetDataCollectionRuleDataSourceDataImportOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourceDataImportArrayInput is an input type that accepts GetDataCollectionRuleDataSourceDataImportArray and GetDataCollectionRuleDataSourceDataImportArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceDataImportArrayInput` via:
//
//	GetDataCollectionRuleDataSourceDataImportArray{ GetDataCollectionRuleDataSourceDataImportArgs{...} }
type GetDataCollectionRuleDataSourceDataImportArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceDataImportArrayOutput() GetDataCollectionRuleDataSourceDataImportArrayOutput
	ToGetDataCollectionRuleDataSourceDataImportArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourceDataImportArrayOutput
}

type GetDataCollectionRuleDataSourceDataImportArray []GetDataCollectionRuleDataSourceDataImportInput

func (GetDataCollectionRuleDataSourceDataImportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceDataImport)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceDataImportArray) ToGetDataCollectionRuleDataSourceDataImportArrayOutput() GetDataCollectionRuleDataSourceDataImportArrayOutput {
	return i.ToGetDataCollectionRuleDataSourceDataImportArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceDataImportArray) ToGetDataCollectionRuleDataSourceDataImportArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceDataImportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceDataImportArrayOutput)
}

func (i GetDataCollectionRuleDataSourceDataImportArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceDataImport] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceDataImport]{
		OutputState: i.ToGetDataCollectionRuleDataSourceDataImportArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourceDataImportOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceDataImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceDataImport)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceDataImportOutput) ToGetDataCollectionRuleDataSourceDataImportOutput() GetDataCollectionRuleDataSourceDataImportOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceDataImportOutput) ToGetDataCollectionRuleDataSourceDataImportOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceDataImportOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceDataImportOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceDataImport] {
	return pulumix.Output[GetDataCollectionRuleDataSourceDataImport]{
		OutputState: o.OutputState,
	}
}

// An `eventHubDataSource` block as defined below.
func (o GetDataCollectionRuleDataSourceDataImportOutput) EventHubDataSources() GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceDataImport) []GetDataCollectionRuleDataSourceDataImportEventHubDataSource {
		return v.EventHubDataSources
	}).(GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput)
}

type GetDataCollectionRuleDataSourceDataImportArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceDataImportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceDataImport)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceDataImportArrayOutput) ToGetDataCollectionRuleDataSourceDataImportArrayOutput() GetDataCollectionRuleDataSourceDataImportArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceDataImportArrayOutput) ToGetDataCollectionRuleDataSourceDataImportArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceDataImportArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceDataImportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceDataImport] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceDataImport]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourceDataImportArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourceDataImportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSourceDataImport {
		return vs[0].([]GetDataCollectionRuleDataSourceDataImport)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourceDataImportOutput)
}

type GetDataCollectionRuleDataSourceDataImportEventHubDataSource struct {
	// The Event Hub consumer group name.
	ConsumerGroup string `pulumi:"consumerGroup"`
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// The stream to collect from Event Hub. Possible value should be a custom stream name.
	Stream string `pulumi:"stream"`
}

// GetDataCollectionRuleDataSourceDataImportEventHubDataSourceInput is an input type that accepts GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArgs and GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceDataImportEventHubDataSourceInput` via:
//
//	GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArgs{...}
type GetDataCollectionRuleDataSourceDataImportEventHubDataSourceInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput() GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput
	ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutputWithContext(context.Context) GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput
}

type GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArgs struct {
	// The Event Hub consumer group name.
	ConsumerGroup pulumi.StringInput `pulumi:"consumerGroup"`
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The stream to collect from Event Hub. Possible value should be a custom stream name.
	Stream pulumi.StringInput `pulumi:"stream"`
}

func (GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceDataImportEventHubDataSource)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArgs) ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput() GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput {
	return i.ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArgs) ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput)
}

func (i GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceDataImportEventHubDataSource] {
	return pulumix.Output[GetDataCollectionRuleDataSourceDataImportEventHubDataSource]{
		OutputState: i.ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayInput is an input type that accepts GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArray and GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayInput` via:
//
//	GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArray{ GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArgs{...} }
type GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput() GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput
	ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput
}

type GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArray []GetDataCollectionRuleDataSourceDataImportEventHubDataSourceInput

func (GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceDataImportEventHubDataSource)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArray) ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput() GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput {
	return i.ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArray) ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput)
}

func (i GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceDataImportEventHubDataSource] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceDataImportEventHubDataSource]{
		OutputState: i.ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceDataImportEventHubDataSource)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput) ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput() GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput) ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceDataImportEventHubDataSource] {
	return pulumix.Output[GetDataCollectionRuleDataSourceDataImportEventHubDataSource]{
		OutputState: o.OutputState,
	}
}

// The Event Hub consumer group name.
func (o GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput) ConsumerGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceDataImportEventHubDataSource) string { return v.ConsumerGroup }).(pulumi.StringOutput)
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceDataImportEventHubDataSource) string { return v.Name }).(pulumi.StringOutput)
}

// The stream to collect from Event Hub. Possible value should be a custom stream name.
func (o GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput) Stream() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceDataImportEventHubDataSource) string { return v.Stream }).(pulumi.StringOutput)
}

type GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceDataImportEventHubDataSource)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput) ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput() GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput) ToGetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceDataImportEventHubDataSource] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceDataImportEventHubDataSource]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSourceDataImportEventHubDataSource {
		return vs[0].([]GetDataCollectionRuleDataSourceDataImportEventHubDataSource)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput)
}

type GetDataCollectionRuleDataSourceExtension struct {
	// A JSON String which specifies the extension setting.
	ExtensionJson string `pulumi:"extensionJson"`
	// The name of the VM extension.
	ExtensionName string `pulumi:"extensionName"`
	// Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performanceCounter`, `windowsEventLog`,and `syslog`.
	InputDataSources []string `pulumi:"inputDataSources"`
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// GetDataCollectionRuleDataSourceExtensionInput is an input type that accepts GetDataCollectionRuleDataSourceExtensionArgs and GetDataCollectionRuleDataSourceExtensionOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceExtensionInput` via:
//
//	GetDataCollectionRuleDataSourceExtensionArgs{...}
type GetDataCollectionRuleDataSourceExtensionInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceExtensionOutput() GetDataCollectionRuleDataSourceExtensionOutput
	ToGetDataCollectionRuleDataSourceExtensionOutputWithContext(context.Context) GetDataCollectionRuleDataSourceExtensionOutput
}

type GetDataCollectionRuleDataSourceExtensionArgs struct {
	// A JSON String which specifies the extension setting.
	ExtensionJson pulumi.StringInput `pulumi:"extensionJson"`
	// The name of the VM extension.
	ExtensionName pulumi.StringInput `pulumi:"extensionName"`
	// Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performanceCounter`, `windowsEventLog`,and `syslog`.
	InputDataSources pulumi.StringArrayInput `pulumi:"inputDataSources"`
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (GetDataCollectionRuleDataSourceExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceExtension)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceExtensionArgs) ToGetDataCollectionRuleDataSourceExtensionOutput() GetDataCollectionRuleDataSourceExtensionOutput {
	return i.ToGetDataCollectionRuleDataSourceExtensionOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceExtensionArgs) ToGetDataCollectionRuleDataSourceExtensionOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceExtensionOutput)
}

func (i GetDataCollectionRuleDataSourceExtensionArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceExtension] {
	return pulumix.Output[GetDataCollectionRuleDataSourceExtension]{
		OutputState: i.ToGetDataCollectionRuleDataSourceExtensionOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourceExtensionArrayInput is an input type that accepts GetDataCollectionRuleDataSourceExtensionArray and GetDataCollectionRuleDataSourceExtensionArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceExtensionArrayInput` via:
//
//	GetDataCollectionRuleDataSourceExtensionArray{ GetDataCollectionRuleDataSourceExtensionArgs{...} }
type GetDataCollectionRuleDataSourceExtensionArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceExtensionArrayOutput() GetDataCollectionRuleDataSourceExtensionArrayOutput
	ToGetDataCollectionRuleDataSourceExtensionArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourceExtensionArrayOutput
}

type GetDataCollectionRuleDataSourceExtensionArray []GetDataCollectionRuleDataSourceExtensionInput

func (GetDataCollectionRuleDataSourceExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceExtension)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceExtensionArray) ToGetDataCollectionRuleDataSourceExtensionArrayOutput() GetDataCollectionRuleDataSourceExtensionArrayOutput {
	return i.ToGetDataCollectionRuleDataSourceExtensionArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceExtensionArray) ToGetDataCollectionRuleDataSourceExtensionArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceExtensionArrayOutput)
}

func (i GetDataCollectionRuleDataSourceExtensionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceExtension] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceExtension]{
		OutputState: i.ToGetDataCollectionRuleDataSourceExtensionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourceExtensionOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceExtension)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceExtensionOutput) ToGetDataCollectionRuleDataSourceExtensionOutput() GetDataCollectionRuleDataSourceExtensionOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceExtensionOutput) ToGetDataCollectionRuleDataSourceExtensionOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceExtensionOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceExtensionOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceExtension] {
	return pulumix.Output[GetDataCollectionRuleDataSourceExtension]{
		OutputState: o.OutputState,
	}
}

// A JSON String which specifies the extension setting.
func (o GetDataCollectionRuleDataSourceExtensionOutput) ExtensionJson() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceExtension) string { return v.ExtensionJson }).(pulumi.StringOutput)
}

// The name of the VM extension.
func (o GetDataCollectionRuleDataSourceExtensionOutput) ExtensionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceExtension) string { return v.ExtensionName }).(pulumi.StringOutput)
}

// Specifies a list of data sources this extension needs data from. An item should be a name of a supported data source which produces only one stream. Supported data sources type: `performanceCounter`, `windowsEventLog`,and `syslog`.
func (o GetDataCollectionRuleDataSourceExtensionOutput) InputDataSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceExtension) []string { return v.InputDataSources }).(pulumi.StringArrayOutput)
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDataSourceExtensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceExtension) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o GetDataCollectionRuleDataSourceExtensionOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceExtension) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type GetDataCollectionRuleDataSourceExtensionArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceExtension)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceExtensionArrayOutput) ToGetDataCollectionRuleDataSourceExtensionArrayOutput() GetDataCollectionRuleDataSourceExtensionArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceExtensionArrayOutput) ToGetDataCollectionRuleDataSourceExtensionArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceExtensionArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceExtensionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceExtension] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceExtension]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourceExtensionArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourceExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSourceExtension {
		return vs[0].([]GetDataCollectionRuleDataSourceExtension)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourceExtensionOutput)
}

type GetDataCollectionRuleDataSourceIisLog struct {
	// Specifies a list of absolute paths where the log files are located.
	LogDirectories []string `pulumi:"logDirectories"`
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// GetDataCollectionRuleDataSourceIisLogInput is an input type that accepts GetDataCollectionRuleDataSourceIisLogArgs and GetDataCollectionRuleDataSourceIisLogOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceIisLogInput` via:
//
//	GetDataCollectionRuleDataSourceIisLogArgs{...}
type GetDataCollectionRuleDataSourceIisLogInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceIisLogOutput() GetDataCollectionRuleDataSourceIisLogOutput
	ToGetDataCollectionRuleDataSourceIisLogOutputWithContext(context.Context) GetDataCollectionRuleDataSourceIisLogOutput
}

type GetDataCollectionRuleDataSourceIisLogArgs struct {
	// Specifies a list of absolute paths where the log files are located.
	LogDirectories pulumi.StringArrayInput `pulumi:"logDirectories"`
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (GetDataCollectionRuleDataSourceIisLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceIisLog)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceIisLogArgs) ToGetDataCollectionRuleDataSourceIisLogOutput() GetDataCollectionRuleDataSourceIisLogOutput {
	return i.ToGetDataCollectionRuleDataSourceIisLogOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceIisLogArgs) ToGetDataCollectionRuleDataSourceIisLogOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceIisLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceIisLogOutput)
}

func (i GetDataCollectionRuleDataSourceIisLogArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceIisLog] {
	return pulumix.Output[GetDataCollectionRuleDataSourceIisLog]{
		OutputState: i.ToGetDataCollectionRuleDataSourceIisLogOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourceIisLogArrayInput is an input type that accepts GetDataCollectionRuleDataSourceIisLogArray and GetDataCollectionRuleDataSourceIisLogArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceIisLogArrayInput` via:
//
//	GetDataCollectionRuleDataSourceIisLogArray{ GetDataCollectionRuleDataSourceIisLogArgs{...} }
type GetDataCollectionRuleDataSourceIisLogArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceIisLogArrayOutput() GetDataCollectionRuleDataSourceIisLogArrayOutput
	ToGetDataCollectionRuleDataSourceIisLogArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourceIisLogArrayOutput
}

type GetDataCollectionRuleDataSourceIisLogArray []GetDataCollectionRuleDataSourceIisLogInput

func (GetDataCollectionRuleDataSourceIisLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceIisLog)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceIisLogArray) ToGetDataCollectionRuleDataSourceIisLogArrayOutput() GetDataCollectionRuleDataSourceIisLogArrayOutput {
	return i.ToGetDataCollectionRuleDataSourceIisLogArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceIisLogArray) ToGetDataCollectionRuleDataSourceIisLogArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceIisLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceIisLogArrayOutput)
}

func (i GetDataCollectionRuleDataSourceIisLogArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceIisLog] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceIisLog]{
		OutputState: i.ToGetDataCollectionRuleDataSourceIisLogArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourceIisLogOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceIisLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceIisLog)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceIisLogOutput) ToGetDataCollectionRuleDataSourceIisLogOutput() GetDataCollectionRuleDataSourceIisLogOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceIisLogOutput) ToGetDataCollectionRuleDataSourceIisLogOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceIisLogOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceIisLogOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceIisLog] {
	return pulumix.Output[GetDataCollectionRuleDataSourceIisLog]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of absolute paths where the log files are located.
func (o GetDataCollectionRuleDataSourceIisLogOutput) LogDirectories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceIisLog) []string { return v.LogDirectories }).(pulumi.StringArrayOutput)
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDataSourceIisLogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceIisLog) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o GetDataCollectionRuleDataSourceIisLogOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceIisLog) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type GetDataCollectionRuleDataSourceIisLogArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceIisLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceIisLog)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceIisLogArrayOutput) ToGetDataCollectionRuleDataSourceIisLogArrayOutput() GetDataCollectionRuleDataSourceIisLogArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceIisLogArrayOutput) ToGetDataCollectionRuleDataSourceIisLogArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceIisLogArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceIisLogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceIisLog] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceIisLog]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourceIisLogArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourceIisLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSourceIisLog {
		return vs[0].([]GetDataCollectionRuleDataSourceIisLog)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourceIisLogOutput)
}

type GetDataCollectionRuleDataSourceLogFile struct {
	// Specifies a list of file patterns where the log files are located. For example, `C:\\JavaLogs\\*.log`.
	FilePatterns []string `pulumi:"filePatterns"`
	// The data format of the log files. possible value is `text`.
	Format string `pulumi:"format"`
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// A `settings` block as defined below.
	Settings []GetDataCollectionRuleDataSourceLogFileSetting `pulumi:"settings"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// GetDataCollectionRuleDataSourceLogFileInput is an input type that accepts GetDataCollectionRuleDataSourceLogFileArgs and GetDataCollectionRuleDataSourceLogFileOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceLogFileInput` via:
//
//	GetDataCollectionRuleDataSourceLogFileArgs{...}
type GetDataCollectionRuleDataSourceLogFileInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceLogFileOutput() GetDataCollectionRuleDataSourceLogFileOutput
	ToGetDataCollectionRuleDataSourceLogFileOutputWithContext(context.Context) GetDataCollectionRuleDataSourceLogFileOutput
}

type GetDataCollectionRuleDataSourceLogFileArgs struct {
	// Specifies a list of file patterns where the log files are located. For example, `C:\\JavaLogs\\*.log`.
	FilePatterns pulumi.StringArrayInput `pulumi:"filePatterns"`
	// The data format of the log files. possible value is `text`.
	Format pulumi.StringInput `pulumi:"format"`
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// A `settings` block as defined below.
	Settings GetDataCollectionRuleDataSourceLogFileSettingArrayInput `pulumi:"settings"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (GetDataCollectionRuleDataSourceLogFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceLogFile)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceLogFileArgs) ToGetDataCollectionRuleDataSourceLogFileOutput() GetDataCollectionRuleDataSourceLogFileOutput {
	return i.ToGetDataCollectionRuleDataSourceLogFileOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceLogFileArgs) ToGetDataCollectionRuleDataSourceLogFileOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceLogFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceLogFileOutput)
}

func (i GetDataCollectionRuleDataSourceLogFileArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceLogFile] {
	return pulumix.Output[GetDataCollectionRuleDataSourceLogFile]{
		OutputState: i.ToGetDataCollectionRuleDataSourceLogFileOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourceLogFileArrayInput is an input type that accepts GetDataCollectionRuleDataSourceLogFileArray and GetDataCollectionRuleDataSourceLogFileArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceLogFileArrayInput` via:
//
//	GetDataCollectionRuleDataSourceLogFileArray{ GetDataCollectionRuleDataSourceLogFileArgs{...} }
type GetDataCollectionRuleDataSourceLogFileArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceLogFileArrayOutput() GetDataCollectionRuleDataSourceLogFileArrayOutput
	ToGetDataCollectionRuleDataSourceLogFileArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourceLogFileArrayOutput
}

type GetDataCollectionRuleDataSourceLogFileArray []GetDataCollectionRuleDataSourceLogFileInput

func (GetDataCollectionRuleDataSourceLogFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceLogFile)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceLogFileArray) ToGetDataCollectionRuleDataSourceLogFileArrayOutput() GetDataCollectionRuleDataSourceLogFileArrayOutput {
	return i.ToGetDataCollectionRuleDataSourceLogFileArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceLogFileArray) ToGetDataCollectionRuleDataSourceLogFileArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceLogFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceLogFileArrayOutput)
}

func (i GetDataCollectionRuleDataSourceLogFileArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceLogFile] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceLogFile]{
		OutputState: i.ToGetDataCollectionRuleDataSourceLogFileArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourceLogFileOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceLogFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceLogFile)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceLogFileOutput) ToGetDataCollectionRuleDataSourceLogFileOutput() GetDataCollectionRuleDataSourceLogFileOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceLogFileOutput) ToGetDataCollectionRuleDataSourceLogFileOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceLogFileOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceLogFileOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceLogFile] {
	return pulumix.Output[GetDataCollectionRuleDataSourceLogFile]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of file patterns where the log files are located. For example, `C:\\JavaLogs\\*.log`.
func (o GetDataCollectionRuleDataSourceLogFileOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceLogFile) []string { return v.FilePatterns }).(pulumi.StringArrayOutput)
}

// The data format of the log files. possible value is `text`.
func (o GetDataCollectionRuleDataSourceLogFileOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceLogFile) string { return v.Format }).(pulumi.StringOutput)
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDataSourceLogFileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceLogFile) string { return v.Name }).(pulumi.StringOutput)
}

// A `settings` block as defined below.
func (o GetDataCollectionRuleDataSourceLogFileOutput) Settings() GetDataCollectionRuleDataSourceLogFileSettingArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceLogFile) []GetDataCollectionRuleDataSourceLogFileSetting {
		return v.Settings
	}).(GetDataCollectionRuleDataSourceLogFileSettingArrayOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o GetDataCollectionRuleDataSourceLogFileOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceLogFile) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type GetDataCollectionRuleDataSourceLogFileArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceLogFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceLogFile)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceLogFileArrayOutput) ToGetDataCollectionRuleDataSourceLogFileArrayOutput() GetDataCollectionRuleDataSourceLogFileArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceLogFileArrayOutput) ToGetDataCollectionRuleDataSourceLogFileArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceLogFileArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceLogFileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceLogFile] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceLogFile]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourceLogFileArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourceLogFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSourceLogFile {
		return vs[0].([]GetDataCollectionRuleDataSourceLogFile)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourceLogFileOutput)
}

type GetDataCollectionRuleDataSourceLogFileSetting struct {
	// A `text` block as defined below.
	Texts []GetDataCollectionRuleDataSourceLogFileSettingText `pulumi:"texts"`
}

// GetDataCollectionRuleDataSourceLogFileSettingInput is an input type that accepts GetDataCollectionRuleDataSourceLogFileSettingArgs and GetDataCollectionRuleDataSourceLogFileSettingOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceLogFileSettingInput` via:
//
//	GetDataCollectionRuleDataSourceLogFileSettingArgs{...}
type GetDataCollectionRuleDataSourceLogFileSettingInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceLogFileSettingOutput() GetDataCollectionRuleDataSourceLogFileSettingOutput
	ToGetDataCollectionRuleDataSourceLogFileSettingOutputWithContext(context.Context) GetDataCollectionRuleDataSourceLogFileSettingOutput
}

type GetDataCollectionRuleDataSourceLogFileSettingArgs struct {
	// A `text` block as defined below.
	Texts GetDataCollectionRuleDataSourceLogFileSettingTextArrayInput `pulumi:"texts"`
}

func (GetDataCollectionRuleDataSourceLogFileSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceLogFileSetting)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceLogFileSettingArgs) ToGetDataCollectionRuleDataSourceLogFileSettingOutput() GetDataCollectionRuleDataSourceLogFileSettingOutput {
	return i.ToGetDataCollectionRuleDataSourceLogFileSettingOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceLogFileSettingArgs) ToGetDataCollectionRuleDataSourceLogFileSettingOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceLogFileSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceLogFileSettingOutput)
}

func (i GetDataCollectionRuleDataSourceLogFileSettingArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceLogFileSetting] {
	return pulumix.Output[GetDataCollectionRuleDataSourceLogFileSetting]{
		OutputState: i.ToGetDataCollectionRuleDataSourceLogFileSettingOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourceLogFileSettingArrayInput is an input type that accepts GetDataCollectionRuleDataSourceLogFileSettingArray and GetDataCollectionRuleDataSourceLogFileSettingArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceLogFileSettingArrayInput` via:
//
//	GetDataCollectionRuleDataSourceLogFileSettingArray{ GetDataCollectionRuleDataSourceLogFileSettingArgs{...} }
type GetDataCollectionRuleDataSourceLogFileSettingArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceLogFileSettingArrayOutput() GetDataCollectionRuleDataSourceLogFileSettingArrayOutput
	ToGetDataCollectionRuleDataSourceLogFileSettingArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourceLogFileSettingArrayOutput
}

type GetDataCollectionRuleDataSourceLogFileSettingArray []GetDataCollectionRuleDataSourceLogFileSettingInput

func (GetDataCollectionRuleDataSourceLogFileSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceLogFileSetting)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceLogFileSettingArray) ToGetDataCollectionRuleDataSourceLogFileSettingArrayOutput() GetDataCollectionRuleDataSourceLogFileSettingArrayOutput {
	return i.ToGetDataCollectionRuleDataSourceLogFileSettingArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceLogFileSettingArray) ToGetDataCollectionRuleDataSourceLogFileSettingArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceLogFileSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceLogFileSettingArrayOutput)
}

func (i GetDataCollectionRuleDataSourceLogFileSettingArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceLogFileSetting] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceLogFileSetting]{
		OutputState: i.ToGetDataCollectionRuleDataSourceLogFileSettingArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourceLogFileSettingOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceLogFileSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceLogFileSetting)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceLogFileSettingOutput) ToGetDataCollectionRuleDataSourceLogFileSettingOutput() GetDataCollectionRuleDataSourceLogFileSettingOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceLogFileSettingOutput) ToGetDataCollectionRuleDataSourceLogFileSettingOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceLogFileSettingOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceLogFileSettingOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceLogFileSetting] {
	return pulumix.Output[GetDataCollectionRuleDataSourceLogFileSetting]{
		OutputState: o.OutputState,
	}
}

// A `text` block as defined below.
func (o GetDataCollectionRuleDataSourceLogFileSettingOutput) Texts() GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceLogFileSetting) []GetDataCollectionRuleDataSourceLogFileSettingText {
		return v.Texts
	}).(GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput)
}

type GetDataCollectionRuleDataSourceLogFileSettingArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceLogFileSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceLogFileSetting)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceLogFileSettingArrayOutput) ToGetDataCollectionRuleDataSourceLogFileSettingArrayOutput() GetDataCollectionRuleDataSourceLogFileSettingArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceLogFileSettingArrayOutput) ToGetDataCollectionRuleDataSourceLogFileSettingArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceLogFileSettingArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceLogFileSettingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceLogFileSetting] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceLogFileSetting]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourceLogFileSettingArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourceLogFileSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSourceLogFileSetting {
		return vs[0].([]GetDataCollectionRuleDataSourceLogFileSetting)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourceLogFileSettingOutput)
}

type GetDataCollectionRuleDataSourceLogFileSettingText struct {
	// The timestamp format of the text log files. Possible values are `ISO 8601`, `YYYY-MM-DD HH:MM:SS`, `M/D/YYYY HH:MM:SS AM/PM`, `Mon DD, YYYY HH:MM:SS`, `yyMMdd HH:mm:ss`, `ddMMyy HH:mm:ss`, `MMM d hh:mm:ss`, `dd/MMM/yyyy:HH:mm:ss zzz`,and `yyyy-MM-ddTHH:mm:ssK`.
	RecordStartTimestampFormat string `pulumi:"recordStartTimestampFormat"`
}

// GetDataCollectionRuleDataSourceLogFileSettingTextInput is an input type that accepts GetDataCollectionRuleDataSourceLogFileSettingTextArgs and GetDataCollectionRuleDataSourceLogFileSettingTextOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceLogFileSettingTextInput` via:
//
//	GetDataCollectionRuleDataSourceLogFileSettingTextArgs{...}
type GetDataCollectionRuleDataSourceLogFileSettingTextInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceLogFileSettingTextOutput() GetDataCollectionRuleDataSourceLogFileSettingTextOutput
	ToGetDataCollectionRuleDataSourceLogFileSettingTextOutputWithContext(context.Context) GetDataCollectionRuleDataSourceLogFileSettingTextOutput
}

type GetDataCollectionRuleDataSourceLogFileSettingTextArgs struct {
	// The timestamp format of the text log files. Possible values are `ISO 8601`, `YYYY-MM-DD HH:MM:SS`, `M/D/YYYY HH:MM:SS AM/PM`, `Mon DD, YYYY HH:MM:SS`, `yyMMdd HH:mm:ss`, `ddMMyy HH:mm:ss`, `MMM d hh:mm:ss`, `dd/MMM/yyyy:HH:mm:ss zzz`,and `yyyy-MM-ddTHH:mm:ssK`.
	RecordStartTimestampFormat pulumi.StringInput `pulumi:"recordStartTimestampFormat"`
}

func (GetDataCollectionRuleDataSourceLogFileSettingTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceLogFileSettingText)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceLogFileSettingTextArgs) ToGetDataCollectionRuleDataSourceLogFileSettingTextOutput() GetDataCollectionRuleDataSourceLogFileSettingTextOutput {
	return i.ToGetDataCollectionRuleDataSourceLogFileSettingTextOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceLogFileSettingTextArgs) ToGetDataCollectionRuleDataSourceLogFileSettingTextOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceLogFileSettingTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceLogFileSettingTextOutput)
}

func (i GetDataCollectionRuleDataSourceLogFileSettingTextArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceLogFileSettingText] {
	return pulumix.Output[GetDataCollectionRuleDataSourceLogFileSettingText]{
		OutputState: i.ToGetDataCollectionRuleDataSourceLogFileSettingTextOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourceLogFileSettingTextArrayInput is an input type that accepts GetDataCollectionRuleDataSourceLogFileSettingTextArray and GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceLogFileSettingTextArrayInput` via:
//
//	GetDataCollectionRuleDataSourceLogFileSettingTextArray{ GetDataCollectionRuleDataSourceLogFileSettingTextArgs{...} }
type GetDataCollectionRuleDataSourceLogFileSettingTextArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput() GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput
	ToGetDataCollectionRuleDataSourceLogFileSettingTextArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput
}

type GetDataCollectionRuleDataSourceLogFileSettingTextArray []GetDataCollectionRuleDataSourceLogFileSettingTextInput

func (GetDataCollectionRuleDataSourceLogFileSettingTextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceLogFileSettingText)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceLogFileSettingTextArray) ToGetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput() GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput {
	return i.ToGetDataCollectionRuleDataSourceLogFileSettingTextArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceLogFileSettingTextArray) ToGetDataCollectionRuleDataSourceLogFileSettingTextArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput)
}

func (i GetDataCollectionRuleDataSourceLogFileSettingTextArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceLogFileSettingText] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceLogFileSettingText]{
		OutputState: i.ToGetDataCollectionRuleDataSourceLogFileSettingTextArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourceLogFileSettingTextOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceLogFileSettingTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceLogFileSettingText)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceLogFileSettingTextOutput) ToGetDataCollectionRuleDataSourceLogFileSettingTextOutput() GetDataCollectionRuleDataSourceLogFileSettingTextOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceLogFileSettingTextOutput) ToGetDataCollectionRuleDataSourceLogFileSettingTextOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceLogFileSettingTextOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceLogFileSettingTextOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceLogFileSettingText] {
	return pulumix.Output[GetDataCollectionRuleDataSourceLogFileSettingText]{
		OutputState: o.OutputState,
	}
}

// The timestamp format of the text log files. Possible values are `ISO 8601`, `YYYY-MM-DD HH:MM:SS`, `M/D/YYYY HH:MM:SS AM/PM`, `Mon DD, YYYY HH:MM:SS`, `yyMMdd HH:mm:ss`, `ddMMyy HH:mm:ss`, `MMM d hh:mm:ss`, `dd/MMM/yyyy:HH:mm:ss zzz`,and `yyyy-MM-ddTHH:mm:ssK`.
func (o GetDataCollectionRuleDataSourceLogFileSettingTextOutput) RecordStartTimestampFormat() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceLogFileSettingText) string { return v.RecordStartTimestampFormat }).(pulumi.StringOutput)
}

type GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceLogFileSettingText)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput) ToGetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput() GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput) ToGetDataCollectionRuleDataSourceLogFileSettingTextArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceLogFileSettingText] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceLogFileSettingText]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourceLogFileSettingTextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSourceLogFileSettingText {
		return vs[0].([]GetDataCollectionRuleDataSourceLogFileSettingText)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourceLogFileSettingTextOutput)
}

type GetDataCollectionRuleDataSourcePerformanceCounter struct {
	// Specifies a list of specifier names of the performance counters you want to collect. Use a wildcard `*` to collect counters for all instances. To get a list of performance counters on Windows, run the command `typeperf`.
	CounterSpecifiers []string `pulumi:"counterSpecifiers"`
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive.
	SamplingFrequencyInSeconds int `pulumi:"samplingFrequencyInSeconds"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// GetDataCollectionRuleDataSourcePerformanceCounterInput is an input type that accepts GetDataCollectionRuleDataSourcePerformanceCounterArgs and GetDataCollectionRuleDataSourcePerformanceCounterOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourcePerformanceCounterInput` via:
//
//	GetDataCollectionRuleDataSourcePerformanceCounterArgs{...}
type GetDataCollectionRuleDataSourcePerformanceCounterInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourcePerformanceCounterOutput() GetDataCollectionRuleDataSourcePerformanceCounterOutput
	ToGetDataCollectionRuleDataSourcePerformanceCounterOutputWithContext(context.Context) GetDataCollectionRuleDataSourcePerformanceCounterOutput
}

type GetDataCollectionRuleDataSourcePerformanceCounterArgs struct {
	// Specifies a list of specifier names of the performance counters you want to collect. Use a wildcard `*` to collect counters for all instances. To get a list of performance counters on Windows, run the command `typeperf`.
	CounterSpecifiers pulumi.StringArrayInput `pulumi:"counterSpecifiers"`
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive.
	SamplingFrequencyInSeconds pulumi.IntInput `pulumi:"samplingFrequencyInSeconds"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (GetDataCollectionRuleDataSourcePerformanceCounterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourcePerformanceCounter)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourcePerformanceCounterArgs) ToGetDataCollectionRuleDataSourcePerformanceCounterOutput() GetDataCollectionRuleDataSourcePerformanceCounterOutput {
	return i.ToGetDataCollectionRuleDataSourcePerformanceCounterOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourcePerformanceCounterArgs) ToGetDataCollectionRuleDataSourcePerformanceCounterOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePerformanceCounterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourcePerformanceCounterOutput)
}

func (i GetDataCollectionRuleDataSourcePerformanceCounterArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourcePerformanceCounter] {
	return pulumix.Output[GetDataCollectionRuleDataSourcePerformanceCounter]{
		OutputState: i.ToGetDataCollectionRuleDataSourcePerformanceCounterOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourcePerformanceCounterArrayInput is an input type that accepts GetDataCollectionRuleDataSourcePerformanceCounterArray and GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourcePerformanceCounterArrayInput` via:
//
//	GetDataCollectionRuleDataSourcePerformanceCounterArray{ GetDataCollectionRuleDataSourcePerformanceCounterArgs{...} }
type GetDataCollectionRuleDataSourcePerformanceCounterArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourcePerformanceCounterArrayOutput() GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput
	ToGetDataCollectionRuleDataSourcePerformanceCounterArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput
}

type GetDataCollectionRuleDataSourcePerformanceCounterArray []GetDataCollectionRuleDataSourcePerformanceCounterInput

func (GetDataCollectionRuleDataSourcePerformanceCounterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourcePerformanceCounter)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourcePerformanceCounterArray) ToGetDataCollectionRuleDataSourcePerformanceCounterArrayOutput() GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput {
	return i.ToGetDataCollectionRuleDataSourcePerformanceCounterArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourcePerformanceCounterArray) ToGetDataCollectionRuleDataSourcePerformanceCounterArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput)
}

func (i GetDataCollectionRuleDataSourcePerformanceCounterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourcePerformanceCounter] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourcePerformanceCounter]{
		OutputState: i.ToGetDataCollectionRuleDataSourcePerformanceCounterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourcePerformanceCounterOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourcePerformanceCounterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourcePerformanceCounter)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourcePerformanceCounterOutput) ToGetDataCollectionRuleDataSourcePerformanceCounterOutput() GetDataCollectionRuleDataSourcePerformanceCounterOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePerformanceCounterOutput) ToGetDataCollectionRuleDataSourcePerformanceCounterOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePerformanceCounterOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePerformanceCounterOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourcePerformanceCounter] {
	return pulumix.Output[GetDataCollectionRuleDataSourcePerformanceCounter]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of specifier names of the performance counters you want to collect. Use a wildcard `*` to collect counters for all instances. To get a list of performance counters on Windows, run the command `typeperf`.
func (o GetDataCollectionRuleDataSourcePerformanceCounterOutput) CounterSpecifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourcePerformanceCounter) []string { return v.CounterSpecifiers }).(pulumi.StringArrayOutput)
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDataSourcePerformanceCounterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourcePerformanceCounter) string { return v.Name }).(pulumi.StringOutput)
}

// The number of seconds between consecutive counter measurements (samples). The value should be integer between `1` and `300` inclusive.
func (o GetDataCollectionRuleDataSourcePerformanceCounterOutput) SamplingFrequencyInSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourcePerformanceCounter) int { return v.SamplingFrequencyInSeconds }).(pulumi.IntOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o GetDataCollectionRuleDataSourcePerformanceCounterOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourcePerformanceCounter) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourcePerformanceCounter)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput) ToGetDataCollectionRuleDataSourcePerformanceCounterArrayOutput() GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput) ToGetDataCollectionRuleDataSourcePerformanceCounterArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourcePerformanceCounter] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourcePerformanceCounter]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourcePerformanceCounterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSourcePerformanceCounter {
		return vs[0].([]GetDataCollectionRuleDataSourcePerformanceCounter)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourcePerformanceCounterOutput)
}

type GetDataCollectionRuleDataSourcePlatformTelemetry struct {
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// GetDataCollectionRuleDataSourcePlatformTelemetryInput is an input type that accepts GetDataCollectionRuleDataSourcePlatformTelemetryArgs and GetDataCollectionRuleDataSourcePlatformTelemetryOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourcePlatformTelemetryInput` via:
//
//	GetDataCollectionRuleDataSourcePlatformTelemetryArgs{...}
type GetDataCollectionRuleDataSourcePlatformTelemetryInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourcePlatformTelemetryOutput() GetDataCollectionRuleDataSourcePlatformTelemetryOutput
	ToGetDataCollectionRuleDataSourcePlatformTelemetryOutputWithContext(context.Context) GetDataCollectionRuleDataSourcePlatformTelemetryOutput
}

type GetDataCollectionRuleDataSourcePlatformTelemetryArgs struct {
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (GetDataCollectionRuleDataSourcePlatformTelemetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourcePlatformTelemetry)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourcePlatformTelemetryArgs) ToGetDataCollectionRuleDataSourcePlatformTelemetryOutput() GetDataCollectionRuleDataSourcePlatformTelemetryOutput {
	return i.ToGetDataCollectionRuleDataSourcePlatformTelemetryOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourcePlatformTelemetryArgs) ToGetDataCollectionRuleDataSourcePlatformTelemetryOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePlatformTelemetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourcePlatformTelemetryOutput)
}

func (i GetDataCollectionRuleDataSourcePlatformTelemetryArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourcePlatformTelemetry] {
	return pulumix.Output[GetDataCollectionRuleDataSourcePlatformTelemetry]{
		OutputState: i.ToGetDataCollectionRuleDataSourcePlatformTelemetryOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourcePlatformTelemetryArrayInput is an input type that accepts GetDataCollectionRuleDataSourcePlatformTelemetryArray and GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourcePlatformTelemetryArrayInput` via:
//
//	GetDataCollectionRuleDataSourcePlatformTelemetryArray{ GetDataCollectionRuleDataSourcePlatformTelemetryArgs{...} }
type GetDataCollectionRuleDataSourcePlatformTelemetryArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput() GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput
	ToGetDataCollectionRuleDataSourcePlatformTelemetryArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput
}

type GetDataCollectionRuleDataSourcePlatformTelemetryArray []GetDataCollectionRuleDataSourcePlatformTelemetryInput

func (GetDataCollectionRuleDataSourcePlatformTelemetryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourcePlatformTelemetry)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourcePlatformTelemetryArray) ToGetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput() GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput {
	return i.ToGetDataCollectionRuleDataSourcePlatformTelemetryArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourcePlatformTelemetryArray) ToGetDataCollectionRuleDataSourcePlatformTelemetryArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput)
}

func (i GetDataCollectionRuleDataSourcePlatformTelemetryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourcePlatformTelemetry] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourcePlatformTelemetry]{
		OutputState: i.ToGetDataCollectionRuleDataSourcePlatformTelemetryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourcePlatformTelemetryOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourcePlatformTelemetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourcePlatformTelemetry)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourcePlatformTelemetryOutput) ToGetDataCollectionRuleDataSourcePlatformTelemetryOutput() GetDataCollectionRuleDataSourcePlatformTelemetryOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePlatformTelemetryOutput) ToGetDataCollectionRuleDataSourcePlatformTelemetryOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePlatformTelemetryOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePlatformTelemetryOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourcePlatformTelemetry] {
	return pulumix.Output[GetDataCollectionRuleDataSourcePlatformTelemetry]{
		OutputState: o.OutputState,
	}
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDataSourcePlatformTelemetryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourcePlatformTelemetry) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o GetDataCollectionRuleDataSourcePlatformTelemetryOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourcePlatformTelemetry) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourcePlatformTelemetry)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput) ToGetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput() GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput) ToGetDataCollectionRuleDataSourcePlatformTelemetryArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourcePlatformTelemetry] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourcePlatformTelemetry]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourcePlatformTelemetryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSourcePlatformTelemetry {
		return vs[0].([]GetDataCollectionRuleDataSourcePlatformTelemetry)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourcePlatformTelemetryOutput)
}

type GetDataCollectionRuleDataSourcePrometheusForwarder struct {
	// One or more `labelIncludeFilter` blocks as defined above.
	LabelIncludeFilters []GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter `pulumi:"labelIncludeFilters"`
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// GetDataCollectionRuleDataSourcePrometheusForwarderInput is an input type that accepts GetDataCollectionRuleDataSourcePrometheusForwarderArgs and GetDataCollectionRuleDataSourcePrometheusForwarderOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourcePrometheusForwarderInput` via:
//
//	GetDataCollectionRuleDataSourcePrometheusForwarderArgs{...}
type GetDataCollectionRuleDataSourcePrometheusForwarderInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourcePrometheusForwarderOutput() GetDataCollectionRuleDataSourcePrometheusForwarderOutput
	ToGetDataCollectionRuleDataSourcePrometheusForwarderOutputWithContext(context.Context) GetDataCollectionRuleDataSourcePrometheusForwarderOutput
}

type GetDataCollectionRuleDataSourcePrometheusForwarderArgs struct {
	// One or more `labelIncludeFilter` blocks as defined above.
	LabelIncludeFilters GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayInput `pulumi:"labelIncludeFilters"`
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (GetDataCollectionRuleDataSourcePrometheusForwarderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourcePrometheusForwarder)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourcePrometheusForwarderArgs) ToGetDataCollectionRuleDataSourcePrometheusForwarderOutput() GetDataCollectionRuleDataSourcePrometheusForwarderOutput {
	return i.ToGetDataCollectionRuleDataSourcePrometheusForwarderOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourcePrometheusForwarderArgs) ToGetDataCollectionRuleDataSourcePrometheusForwarderOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePrometheusForwarderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourcePrometheusForwarderOutput)
}

func (i GetDataCollectionRuleDataSourcePrometheusForwarderArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourcePrometheusForwarder] {
	return pulumix.Output[GetDataCollectionRuleDataSourcePrometheusForwarder]{
		OutputState: i.ToGetDataCollectionRuleDataSourcePrometheusForwarderOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourcePrometheusForwarderArrayInput is an input type that accepts GetDataCollectionRuleDataSourcePrometheusForwarderArray and GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourcePrometheusForwarderArrayInput` via:
//
//	GetDataCollectionRuleDataSourcePrometheusForwarderArray{ GetDataCollectionRuleDataSourcePrometheusForwarderArgs{...} }
type GetDataCollectionRuleDataSourcePrometheusForwarderArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput() GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput
	ToGetDataCollectionRuleDataSourcePrometheusForwarderArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput
}

type GetDataCollectionRuleDataSourcePrometheusForwarderArray []GetDataCollectionRuleDataSourcePrometheusForwarderInput

func (GetDataCollectionRuleDataSourcePrometheusForwarderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourcePrometheusForwarder)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourcePrometheusForwarderArray) ToGetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput() GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput {
	return i.ToGetDataCollectionRuleDataSourcePrometheusForwarderArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourcePrometheusForwarderArray) ToGetDataCollectionRuleDataSourcePrometheusForwarderArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput)
}

func (i GetDataCollectionRuleDataSourcePrometheusForwarderArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourcePrometheusForwarder] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourcePrometheusForwarder]{
		OutputState: i.ToGetDataCollectionRuleDataSourcePrometheusForwarderArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourcePrometheusForwarderOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourcePrometheusForwarderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourcePrometheusForwarder)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourcePrometheusForwarderOutput) ToGetDataCollectionRuleDataSourcePrometheusForwarderOutput() GetDataCollectionRuleDataSourcePrometheusForwarderOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePrometheusForwarderOutput) ToGetDataCollectionRuleDataSourcePrometheusForwarderOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePrometheusForwarderOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePrometheusForwarderOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourcePrometheusForwarder] {
	return pulumix.Output[GetDataCollectionRuleDataSourcePrometheusForwarder]{
		OutputState: o.OutputState,
	}
}

// One or more `labelIncludeFilter` blocks as defined above.
func (o GetDataCollectionRuleDataSourcePrometheusForwarderOutput) LabelIncludeFilters() GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourcePrometheusForwarder) []GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter {
		return v.LabelIncludeFilters
	}).(GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput)
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDataSourcePrometheusForwarderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourcePrometheusForwarder) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o GetDataCollectionRuleDataSourcePrometheusForwarderOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourcePrometheusForwarder) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourcePrometheusForwarder)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput) ToGetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput() GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput) ToGetDataCollectionRuleDataSourcePrometheusForwarderArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourcePrometheusForwarder] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourcePrometheusForwarder]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourcePrometheusForwarderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSourcePrometheusForwarder {
		return vs[0].([]GetDataCollectionRuleDataSourcePrometheusForwarder)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourcePrometheusForwarderOutput)
}

type GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter struct {
	// The label of the filter. This label should be unique across all `labelIncludeFileter` block. Possible value is `microsoftMetricsIncludeLabel`.
	Label string `pulumi:"label"`
	// The value of the filter.
	Value string `pulumi:"value"`
}

// GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterInput is an input type that accepts GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArgs and GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterInput` via:
//
//	GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArgs{...}
type GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput() GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput
	ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutputWithContext(context.Context) GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput
}

type GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArgs struct {
	// The label of the filter. This label should be unique across all `labelIncludeFileter` block. Possible value is `microsoftMetricsIncludeLabel`.
	Label pulumi.StringInput `pulumi:"label"`
	// The value of the filter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArgs) ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput() GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput {
	return i.ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArgs) ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput)
}

func (i GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter] {
	return pulumix.Output[GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter]{
		OutputState: i.ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayInput is an input type that accepts GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArray and GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayInput` via:
//
//	GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArray{ GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArgs{...} }
type GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput() GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput
	ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput
}

type GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArray []GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterInput

func (GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArray) ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput() GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput {
	return i.ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArray) ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput)
}

func (i GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter]{
		OutputState: i.ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput) ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput() GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput) ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter] {
	return pulumix.Output[GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter]{
		OutputState: o.OutputState,
	}
}

// The label of the filter. This label should be unique across all `labelIncludeFileter` block. Possible value is `microsoftMetricsIncludeLabel`.
func (o GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter) string { return v.Label }).(pulumi.StringOutput)
}

// The value of the filter.
func (o GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter) string { return v.Value }).(pulumi.StringOutput)
}

type GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput) ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput() GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput) ToGetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter {
		return vs[0].([]GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilter)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput)
}

type GetDataCollectionRuleDataSourceSyslog struct {
	// Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
	FacilityNames []string `pulumi:"facilityNames"`
	// Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`,  `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
	LogLevels []string `pulumi:"logLevels"`
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// GetDataCollectionRuleDataSourceSyslogInput is an input type that accepts GetDataCollectionRuleDataSourceSyslogArgs and GetDataCollectionRuleDataSourceSyslogOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceSyslogInput` via:
//
//	GetDataCollectionRuleDataSourceSyslogArgs{...}
type GetDataCollectionRuleDataSourceSyslogInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceSyslogOutput() GetDataCollectionRuleDataSourceSyslogOutput
	ToGetDataCollectionRuleDataSourceSyslogOutputWithContext(context.Context) GetDataCollectionRuleDataSourceSyslogOutput
}

type GetDataCollectionRuleDataSourceSyslogArgs struct {
	// Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
	FacilityNames pulumi.StringArrayInput `pulumi:"facilityNames"`
	// Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`,  `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
	LogLevels pulumi.StringArrayInput `pulumi:"logLevels"`
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (GetDataCollectionRuleDataSourceSyslogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceSyslog)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceSyslogArgs) ToGetDataCollectionRuleDataSourceSyslogOutput() GetDataCollectionRuleDataSourceSyslogOutput {
	return i.ToGetDataCollectionRuleDataSourceSyslogOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceSyslogArgs) ToGetDataCollectionRuleDataSourceSyslogOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceSyslogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceSyslogOutput)
}

func (i GetDataCollectionRuleDataSourceSyslogArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceSyslog] {
	return pulumix.Output[GetDataCollectionRuleDataSourceSyslog]{
		OutputState: i.ToGetDataCollectionRuleDataSourceSyslogOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourceSyslogArrayInput is an input type that accepts GetDataCollectionRuleDataSourceSyslogArray and GetDataCollectionRuleDataSourceSyslogArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceSyslogArrayInput` via:
//
//	GetDataCollectionRuleDataSourceSyslogArray{ GetDataCollectionRuleDataSourceSyslogArgs{...} }
type GetDataCollectionRuleDataSourceSyslogArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceSyslogArrayOutput() GetDataCollectionRuleDataSourceSyslogArrayOutput
	ToGetDataCollectionRuleDataSourceSyslogArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourceSyslogArrayOutput
}

type GetDataCollectionRuleDataSourceSyslogArray []GetDataCollectionRuleDataSourceSyslogInput

func (GetDataCollectionRuleDataSourceSyslogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceSyslog)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceSyslogArray) ToGetDataCollectionRuleDataSourceSyslogArrayOutput() GetDataCollectionRuleDataSourceSyslogArrayOutput {
	return i.ToGetDataCollectionRuleDataSourceSyslogArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceSyslogArray) ToGetDataCollectionRuleDataSourceSyslogArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceSyslogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceSyslogArrayOutput)
}

func (i GetDataCollectionRuleDataSourceSyslogArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceSyslog] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceSyslog]{
		OutputState: i.ToGetDataCollectionRuleDataSourceSyslogArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourceSyslogOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceSyslogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceSyslog)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceSyslogOutput) ToGetDataCollectionRuleDataSourceSyslogOutput() GetDataCollectionRuleDataSourceSyslogOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceSyslogOutput) ToGetDataCollectionRuleDataSourceSyslogOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceSyslogOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceSyslogOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceSyslog] {
	return pulumix.Output[GetDataCollectionRuleDataSourceSyslog]{
		OutputState: o.OutputState,
	}
}

// Specifies a list of facility names. Use a wildcard `*` to collect logs for all facility names. Possible values are `auth`, `authpriv`, `cron`, `daemon`, `kern`, `lpr`, `mail`, `mark`, `news`, `syslog`, `user`, `uucp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`,and `*`.
func (o GetDataCollectionRuleDataSourceSyslogOutput) FacilityNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceSyslog) []string { return v.FacilityNames }).(pulumi.StringArrayOutput)
}

// Specifies a list of log levels. Use a wildcard `*` to collect logs for all log levels. Possible values are `Debug`,  `Info`, `Notice`, `Warning`, `Error`, `Critical`, `Alert`, `Emergency`,and `*`.
func (o GetDataCollectionRuleDataSourceSyslogOutput) LogLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceSyslog) []string { return v.LogLevels }).(pulumi.StringArrayOutput)
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDataSourceSyslogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceSyslog) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o GetDataCollectionRuleDataSourceSyslogOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceSyslog) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type GetDataCollectionRuleDataSourceSyslogArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceSyslogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceSyslog)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceSyslogArrayOutput) ToGetDataCollectionRuleDataSourceSyslogArrayOutput() GetDataCollectionRuleDataSourceSyslogArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceSyslogArrayOutput) ToGetDataCollectionRuleDataSourceSyslogArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceSyslogArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceSyslogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceSyslog] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceSyslog]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourceSyslogArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourceSyslogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSourceSyslog {
		return vs[0].([]GetDataCollectionRuleDataSourceSyslog)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourceSyslogOutput)
}

type GetDataCollectionRuleDataSourceWindowsEventLog struct {
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
	// Specifies a list of Windows Event Log queries in XPath expression.
	XPathQueries []string `pulumi:"xPathQueries"`
}

// GetDataCollectionRuleDataSourceWindowsEventLogInput is an input type that accepts GetDataCollectionRuleDataSourceWindowsEventLogArgs and GetDataCollectionRuleDataSourceWindowsEventLogOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceWindowsEventLogInput` via:
//
//	GetDataCollectionRuleDataSourceWindowsEventLogArgs{...}
type GetDataCollectionRuleDataSourceWindowsEventLogInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceWindowsEventLogOutput() GetDataCollectionRuleDataSourceWindowsEventLogOutput
	ToGetDataCollectionRuleDataSourceWindowsEventLogOutputWithContext(context.Context) GetDataCollectionRuleDataSourceWindowsEventLogOutput
}

type GetDataCollectionRuleDataSourceWindowsEventLogArgs struct {
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
	// Specifies a list of Windows Event Log queries in XPath expression.
	XPathQueries pulumi.StringArrayInput `pulumi:"xPathQueries"`
}

func (GetDataCollectionRuleDataSourceWindowsEventLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceWindowsEventLog)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceWindowsEventLogArgs) ToGetDataCollectionRuleDataSourceWindowsEventLogOutput() GetDataCollectionRuleDataSourceWindowsEventLogOutput {
	return i.ToGetDataCollectionRuleDataSourceWindowsEventLogOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceWindowsEventLogArgs) ToGetDataCollectionRuleDataSourceWindowsEventLogOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceWindowsEventLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceWindowsEventLogOutput)
}

func (i GetDataCollectionRuleDataSourceWindowsEventLogArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceWindowsEventLog] {
	return pulumix.Output[GetDataCollectionRuleDataSourceWindowsEventLog]{
		OutputState: i.ToGetDataCollectionRuleDataSourceWindowsEventLogOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourceWindowsEventLogArrayInput is an input type that accepts GetDataCollectionRuleDataSourceWindowsEventLogArray and GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceWindowsEventLogArrayInput` via:
//
//	GetDataCollectionRuleDataSourceWindowsEventLogArray{ GetDataCollectionRuleDataSourceWindowsEventLogArgs{...} }
type GetDataCollectionRuleDataSourceWindowsEventLogArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceWindowsEventLogArrayOutput() GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput
	ToGetDataCollectionRuleDataSourceWindowsEventLogArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput
}

type GetDataCollectionRuleDataSourceWindowsEventLogArray []GetDataCollectionRuleDataSourceWindowsEventLogInput

func (GetDataCollectionRuleDataSourceWindowsEventLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceWindowsEventLog)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceWindowsEventLogArray) ToGetDataCollectionRuleDataSourceWindowsEventLogArrayOutput() GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput {
	return i.ToGetDataCollectionRuleDataSourceWindowsEventLogArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceWindowsEventLogArray) ToGetDataCollectionRuleDataSourceWindowsEventLogArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput)
}

func (i GetDataCollectionRuleDataSourceWindowsEventLogArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceWindowsEventLog] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceWindowsEventLog]{
		OutputState: i.ToGetDataCollectionRuleDataSourceWindowsEventLogArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourceWindowsEventLogOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceWindowsEventLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceWindowsEventLog)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceWindowsEventLogOutput) ToGetDataCollectionRuleDataSourceWindowsEventLogOutput() GetDataCollectionRuleDataSourceWindowsEventLogOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceWindowsEventLogOutput) ToGetDataCollectionRuleDataSourceWindowsEventLogOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceWindowsEventLogOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceWindowsEventLogOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceWindowsEventLog] {
	return pulumix.Output[GetDataCollectionRuleDataSourceWindowsEventLog]{
		OutputState: o.OutputState,
	}
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDataSourceWindowsEventLogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceWindowsEventLog) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o GetDataCollectionRuleDataSourceWindowsEventLogOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceWindowsEventLog) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// Specifies a list of Windows Event Log queries in XPath expression.
func (o GetDataCollectionRuleDataSourceWindowsEventLogOutput) XPathQueries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceWindowsEventLog) []string { return v.XPathQueries }).(pulumi.StringArrayOutput)
}

type GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceWindowsEventLog)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput) ToGetDataCollectionRuleDataSourceWindowsEventLogArrayOutput() GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput) ToGetDataCollectionRuleDataSourceWindowsEventLogArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceWindowsEventLog] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceWindowsEventLog]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourceWindowsEventLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSourceWindowsEventLog {
		return vs[0].([]GetDataCollectionRuleDataSourceWindowsEventLog)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourceWindowsEventLogOutput)
}

type GetDataCollectionRuleDataSourceWindowsFirewallLog struct {
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// GetDataCollectionRuleDataSourceWindowsFirewallLogInput is an input type that accepts GetDataCollectionRuleDataSourceWindowsFirewallLogArgs and GetDataCollectionRuleDataSourceWindowsFirewallLogOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceWindowsFirewallLogInput` via:
//
//	GetDataCollectionRuleDataSourceWindowsFirewallLogArgs{...}
type GetDataCollectionRuleDataSourceWindowsFirewallLogInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceWindowsFirewallLogOutput() GetDataCollectionRuleDataSourceWindowsFirewallLogOutput
	ToGetDataCollectionRuleDataSourceWindowsFirewallLogOutputWithContext(context.Context) GetDataCollectionRuleDataSourceWindowsFirewallLogOutput
}

type GetDataCollectionRuleDataSourceWindowsFirewallLogArgs struct {
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (GetDataCollectionRuleDataSourceWindowsFirewallLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceWindowsFirewallLog)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceWindowsFirewallLogArgs) ToGetDataCollectionRuleDataSourceWindowsFirewallLogOutput() GetDataCollectionRuleDataSourceWindowsFirewallLogOutput {
	return i.ToGetDataCollectionRuleDataSourceWindowsFirewallLogOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceWindowsFirewallLogArgs) ToGetDataCollectionRuleDataSourceWindowsFirewallLogOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceWindowsFirewallLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceWindowsFirewallLogOutput)
}

func (i GetDataCollectionRuleDataSourceWindowsFirewallLogArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceWindowsFirewallLog] {
	return pulumix.Output[GetDataCollectionRuleDataSourceWindowsFirewallLog]{
		OutputState: i.ToGetDataCollectionRuleDataSourceWindowsFirewallLogOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDataSourceWindowsFirewallLogArrayInput is an input type that accepts GetDataCollectionRuleDataSourceWindowsFirewallLogArray and GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDataSourceWindowsFirewallLogArrayInput` via:
//
//	GetDataCollectionRuleDataSourceWindowsFirewallLogArray{ GetDataCollectionRuleDataSourceWindowsFirewallLogArgs{...} }
type GetDataCollectionRuleDataSourceWindowsFirewallLogArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput() GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput
	ToGetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutputWithContext(context.Context) GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput
}

type GetDataCollectionRuleDataSourceWindowsFirewallLogArray []GetDataCollectionRuleDataSourceWindowsFirewallLogInput

func (GetDataCollectionRuleDataSourceWindowsFirewallLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceWindowsFirewallLog)(nil)).Elem()
}

func (i GetDataCollectionRuleDataSourceWindowsFirewallLogArray) ToGetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput() GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput {
	return i.ToGetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDataSourceWindowsFirewallLogArray) ToGetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput)
}

func (i GetDataCollectionRuleDataSourceWindowsFirewallLogArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceWindowsFirewallLog] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceWindowsFirewallLog]{
		OutputState: i.ToGetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDataSourceWindowsFirewallLogOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceWindowsFirewallLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDataSourceWindowsFirewallLog)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceWindowsFirewallLogOutput) ToGetDataCollectionRuleDataSourceWindowsFirewallLogOutput() GetDataCollectionRuleDataSourceWindowsFirewallLogOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceWindowsFirewallLogOutput) ToGetDataCollectionRuleDataSourceWindowsFirewallLogOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceWindowsFirewallLogOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceWindowsFirewallLogOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDataSourceWindowsFirewallLog] {
	return pulumix.Output[GetDataCollectionRuleDataSourceWindowsFirewallLog]{
		OutputState: o.OutputState,
	}
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDataSourceWindowsFirewallLogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceWindowsFirewallLog) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o GetDataCollectionRuleDataSourceWindowsFirewallLogOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDataSourceWindowsFirewallLog) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDataSourceWindowsFirewallLog)(nil)).Elem()
}

func (o GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput) ToGetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput() GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput) ToGetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput {
	return o
}

func (o GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDataSourceWindowsFirewallLog] {
	return pulumix.Output[[]GetDataCollectionRuleDataSourceWindowsFirewallLog]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDataSourceWindowsFirewallLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDataSourceWindowsFirewallLog {
		return vs[0].([]GetDataCollectionRuleDataSourceWindowsFirewallLog)[vs[1].(int)]
	}).(GetDataCollectionRuleDataSourceWindowsFirewallLogOutput)
}

type GetDataCollectionRuleDestination struct {
	// A `azureMonitorMetrics` block as defined above.
	AzureMonitorMetrics []GetDataCollectionRuleDestinationAzureMonitorMetric `pulumi:"azureMonitorMetrics"`
	// One or more `eventHub` blocks as defined below.
	EventHub *GetDataCollectionRuleDestinationEventHub `pulumi:"eventHub"`
	// One or more `eventHubDirect` blocks as defined below.
	EventHubDirect *GetDataCollectionRuleDestinationEventHubDirect `pulumi:"eventHubDirect"`
	// One or more `logAnalytics` blocks as defined below.
	LogAnalytics []GetDataCollectionRuleDestinationLogAnalytic `pulumi:"logAnalytics"`
	// One or more `monitorAccount` blocks as defined below.
	MonitorAccounts []GetDataCollectionRuleDestinationMonitorAccount `pulumi:"monitorAccounts"`
	// One or more `storageBlobDirect` blocks as defined below.
	StorageBlobDirects []GetDataCollectionRuleDestinationStorageBlobDirect `pulumi:"storageBlobDirects"`
	// One or more `storageBlob` blocks as defined below.
	StorageBlobs []GetDataCollectionRuleDestinationStorageBlob `pulumi:"storageBlobs"`
	// One or more `storageTableDirect` blocks as defined below.
	StorageTableDirects []GetDataCollectionRuleDestinationStorageTableDirect `pulumi:"storageTableDirects"`
}

// GetDataCollectionRuleDestinationInput is an input type that accepts GetDataCollectionRuleDestinationArgs and GetDataCollectionRuleDestinationOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationInput` via:
//
//	GetDataCollectionRuleDestinationArgs{...}
type GetDataCollectionRuleDestinationInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationOutput() GetDataCollectionRuleDestinationOutput
	ToGetDataCollectionRuleDestinationOutputWithContext(context.Context) GetDataCollectionRuleDestinationOutput
}

type GetDataCollectionRuleDestinationArgs struct {
	// A `azureMonitorMetrics` block as defined above.
	AzureMonitorMetrics GetDataCollectionRuleDestinationAzureMonitorMetricArrayInput `pulumi:"azureMonitorMetrics"`
	// One or more `eventHub` blocks as defined below.
	EventHub GetDataCollectionRuleDestinationEventHubPtrInput `pulumi:"eventHub"`
	// One or more `eventHubDirect` blocks as defined below.
	EventHubDirect GetDataCollectionRuleDestinationEventHubDirectPtrInput `pulumi:"eventHubDirect"`
	// One or more `logAnalytics` blocks as defined below.
	LogAnalytics GetDataCollectionRuleDestinationLogAnalyticArrayInput `pulumi:"logAnalytics"`
	// One or more `monitorAccount` blocks as defined below.
	MonitorAccounts GetDataCollectionRuleDestinationMonitorAccountArrayInput `pulumi:"monitorAccounts"`
	// One or more `storageBlobDirect` blocks as defined below.
	StorageBlobDirects GetDataCollectionRuleDestinationStorageBlobDirectArrayInput `pulumi:"storageBlobDirects"`
	// One or more `storageBlob` blocks as defined below.
	StorageBlobs GetDataCollectionRuleDestinationStorageBlobArrayInput `pulumi:"storageBlobs"`
	// One or more `storageTableDirect` blocks as defined below.
	StorageTableDirects GetDataCollectionRuleDestinationStorageTableDirectArrayInput `pulumi:"storageTableDirects"`
}

func (GetDataCollectionRuleDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestination)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationArgs) ToGetDataCollectionRuleDestinationOutput() GetDataCollectionRuleDestinationOutput {
	return i.ToGetDataCollectionRuleDestinationOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationArgs) ToGetDataCollectionRuleDestinationOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationOutput)
}

func (i GetDataCollectionRuleDestinationArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestination] {
	return pulumix.Output[GetDataCollectionRuleDestination]{
		OutputState: i.ToGetDataCollectionRuleDestinationOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDestinationArrayInput is an input type that accepts GetDataCollectionRuleDestinationArray and GetDataCollectionRuleDestinationArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationArrayInput` via:
//
//	GetDataCollectionRuleDestinationArray{ GetDataCollectionRuleDestinationArgs{...} }
type GetDataCollectionRuleDestinationArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationArrayOutput() GetDataCollectionRuleDestinationArrayOutput
	ToGetDataCollectionRuleDestinationArrayOutputWithContext(context.Context) GetDataCollectionRuleDestinationArrayOutput
}

type GetDataCollectionRuleDestinationArray []GetDataCollectionRuleDestinationInput

func (GetDataCollectionRuleDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDestination)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationArray) ToGetDataCollectionRuleDestinationArrayOutput() GetDataCollectionRuleDestinationArrayOutput {
	return i.ToGetDataCollectionRuleDestinationArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationArray) ToGetDataCollectionRuleDestinationArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationArrayOutput)
}

func (i GetDataCollectionRuleDestinationArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDestination] {
	return pulumix.Output[[]GetDataCollectionRuleDestination]{
		OutputState: i.ToGetDataCollectionRuleDestinationArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDestinationOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestination)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationOutput) ToGetDataCollectionRuleDestinationOutput() GetDataCollectionRuleDestinationOutput {
	return o
}

func (o GetDataCollectionRuleDestinationOutput) ToGetDataCollectionRuleDestinationOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationOutput {
	return o
}

func (o GetDataCollectionRuleDestinationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestination] {
	return pulumix.Output[GetDataCollectionRuleDestination]{
		OutputState: o.OutputState,
	}
}

// A `azureMonitorMetrics` block as defined above.
func (o GetDataCollectionRuleDestinationOutput) AzureMonitorMetrics() GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestination) []GetDataCollectionRuleDestinationAzureMonitorMetric {
		return v.AzureMonitorMetrics
	}).(GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput)
}

// One or more `eventHub` blocks as defined below.
func (o GetDataCollectionRuleDestinationOutput) EventHub() GetDataCollectionRuleDestinationEventHubPtrOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestination) *GetDataCollectionRuleDestinationEventHub { return v.EventHub }).(GetDataCollectionRuleDestinationEventHubPtrOutput)
}

// One or more `eventHubDirect` blocks as defined below.
func (o GetDataCollectionRuleDestinationOutput) EventHubDirect() GetDataCollectionRuleDestinationEventHubDirectPtrOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestination) *GetDataCollectionRuleDestinationEventHubDirect {
		return v.EventHubDirect
	}).(GetDataCollectionRuleDestinationEventHubDirectPtrOutput)
}

// One or more `logAnalytics` blocks as defined below.
func (o GetDataCollectionRuleDestinationOutput) LogAnalytics() GetDataCollectionRuleDestinationLogAnalyticArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestination) []GetDataCollectionRuleDestinationLogAnalytic {
		return v.LogAnalytics
	}).(GetDataCollectionRuleDestinationLogAnalyticArrayOutput)
}

// One or more `monitorAccount` blocks as defined below.
func (o GetDataCollectionRuleDestinationOutput) MonitorAccounts() GetDataCollectionRuleDestinationMonitorAccountArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestination) []GetDataCollectionRuleDestinationMonitorAccount {
		return v.MonitorAccounts
	}).(GetDataCollectionRuleDestinationMonitorAccountArrayOutput)
}

// One or more `storageBlobDirect` blocks as defined below.
func (o GetDataCollectionRuleDestinationOutput) StorageBlobDirects() GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestination) []GetDataCollectionRuleDestinationStorageBlobDirect {
		return v.StorageBlobDirects
	}).(GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput)
}

// One or more `storageBlob` blocks as defined below.
func (o GetDataCollectionRuleDestinationOutput) StorageBlobs() GetDataCollectionRuleDestinationStorageBlobArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestination) []GetDataCollectionRuleDestinationStorageBlob {
		return v.StorageBlobs
	}).(GetDataCollectionRuleDestinationStorageBlobArrayOutput)
}

// One or more `storageTableDirect` blocks as defined below.
func (o GetDataCollectionRuleDestinationOutput) StorageTableDirects() GetDataCollectionRuleDestinationStorageTableDirectArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestination) []GetDataCollectionRuleDestinationStorageTableDirect {
		return v.StorageTableDirects
	}).(GetDataCollectionRuleDestinationStorageTableDirectArrayOutput)
}

type GetDataCollectionRuleDestinationArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDestination)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationArrayOutput) ToGetDataCollectionRuleDestinationArrayOutput() GetDataCollectionRuleDestinationArrayOutput {
	return o
}

func (o GetDataCollectionRuleDestinationArrayOutput) ToGetDataCollectionRuleDestinationArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationArrayOutput {
	return o
}

func (o GetDataCollectionRuleDestinationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDestination] {
	return pulumix.Output[[]GetDataCollectionRuleDestination]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDestinationArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDestination {
		return vs[0].([]GetDataCollectionRuleDestination)[vs[1].(int)]
	}).(GetDataCollectionRuleDestinationOutput)
}

type GetDataCollectionRuleDestinationAzureMonitorMetric struct {
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
}

// GetDataCollectionRuleDestinationAzureMonitorMetricInput is an input type that accepts GetDataCollectionRuleDestinationAzureMonitorMetricArgs and GetDataCollectionRuleDestinationAzureMonitorMetricOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationAzureMonitorMetricInput` via:
//
//	GetDataCollectionRuleDestinationAzureMonitorMetricArgs{...}
type GetDataCollectionRuleDestinationAzureMonitorMetricInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationAzureMonitorMetricOutput() GetDataCollectionRuleDestinationAzureMonitorMetricOutput
	ToGetDataCollectionRuleDestinationAzureMonitorMetricOutputWithContext(context.Context) GetDataCollectionRuleDestinationAzureMonitorMetricOutput
}

type GetDataCollectionRuleDestinationAzureMonitorMetricArgs struct {
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDataCollectionRuleDestinationAzureMonitorMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationAzureMonitorMetric)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationAzureMonitorMetricArgs) ToGetDataCollectionRuleDestinationAzureMonitorMetricOutput() GetDataCollectionRuleDestinationAzureMonitorMetricOutput {
	return i.ToGetDataCollectionRuleDestinationAzureMonitorMetricOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationAzureMonitorMetricArgs) ToGetDataCollectionRuleDestinationAzureMonitorMetricOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationAzureMonitorMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationAzureMonitorMetricOutput)
}

func (i GetDataCollectionRuleDestinationAzureMonitorMetricArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationAzureMonitorMetric] {
	return pulumix.Output[GetDataCollectionRuleDestinationAzureMonitorMetric]{
		OutputState: i.ToGetDataCollectionRuleDestinationAzureMonitorMetricOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDestinationAzureMonitorMetricArrayInput is an input type that accepts GetDataCollectionRuleDestinationAzureMonitorMetricArray and GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationAzureMonitorMetricArrayInput` via:
//
//	GetDataCollectionRuleDestinationAzureMonitorMetricArray{ GetDataCollectionRuleDestinationAzureMonitorMetricArgs{...} }
type GetDataCollectionRuleDestinationAzureMonitorMetricArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput() GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput
	ToGetDataCollectionRuleDestinationAzureMonitorMetricArrayOutputWithContext(context.Context) GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput
}

type GetDataCollectionRuleDestinationAzureMonitorMetricArray []GetDataCollectionRuleDestinationAzureMonitorMetricInput

func (GetDataCollectionRuleDestinationAzureMonitorMetricArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDestinationAzureMonitorMetric)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationAzureMonitorMetricArray) ToGetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput() GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput {
	return i.ToGetDataCollectionRuleDestinationAzureMonitorMetricArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationAzureMonitorMetricArray) ToGetDataCollectionRuleDestinationAzureMonitorMetricArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput)
}

func (i GetDataCollectionRuleDestinationAzureMonitorMetricArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDestinationAzureMonitorMetric] {
	return pulumix.Output[[]GetDataCollectionRuleDestinationAzureMonitorMetric]{
		OutputState: i.ToGetDataCollectionRuleDestinationAzureMonitorMetricArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDestinationAzureMonitorMetricOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationAzureMonitorMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationAzureMonitorMetric)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationAzureMonitorMetricOutput) ToGetDataCollectionRuleDestinationAzureMonitorMetricOutput() GetDataCollectionRuleDestinationAzureMonitorMetricOutput {
	return o
}

func (o GetDataCollectionRuleDestinationAzureMonitorMetricOutput) ToGetDataCollectionRuleDestinationAzureMonitorMetricOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationAzureMonitorMetricOutput {
	return o
}

func (o GetDataCollectionRuleDestinationAzureMonitorMetricOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationAzureMonitorMetric] {
	return pulumix.Output[GetDataCollectionRuleDestinationAzureMonitorMetric]{
		OutputState: o.OutputState,
	}
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDestinationAzureMonitorMetricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationAzureMonitorMetric) string { return v.Name }).(pulumi.StringOutput)
}

type GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDestinationAzureMonitorMetric)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput) ToGetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput() GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput {
	return o
}

func (o GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput) ToGetDataCollectionRuleDestinationAzureMonitorMetricArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput {
	return o
}

func (o GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDestinationAzureMonitorMetric] {
	return pulumix.Output[[]GetDataCollectionRuleDestinationAzureMonitorMetric]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDestinationAzureMonitorMetricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDestinationAzureMonitorMetric {
		return vs[0].([]GetDataCollectionRuleDestinationAzureMonitorMetric)[vs[1].(int)]
	}).(GetDataCollectionRuleDestinationAzureMonitorMetricOutput)
}

type GetDataCollectionRuleDestinationEventHub struct {
	// The resource ID of the Event Hub.
	EventHubId string `pulumi:"eventHubId"`
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
}

// GetDataCollectionRuleDestinationEventHubInput is an input type that accepts GetDataCollectionRuleDestinationEventHubArgs and GetDataCollectionRuleDestinationEventHubOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationEventHubInput` via:
//
//	GetDataCollectionRuleDestinationEventHubArgs{...}
type GetDataCollectionRuleDestinationEventHubInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationEventHubOutput() GetDataCollectionRuleDestinationEventHubOutput
	ToGetDataCollectionRuleDestinationEventHubOutputWithContext(context.Context) GetDataCollectionRuleDestinationEventHubOutput
}

type GetDataCollectionRuleDestinationEventHubArgs struct {
	// The resource ID of the Event Hub.
	EventHubId pulumi.StringInput `pulumi:"eventHubId"`
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDataCollectionRuleDestinationEventHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationEventHub)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationEventHubArgs) ToGetDataCollectionRuleDestinationEventHubOutput() GetDataCollectionRuleDestinationEventHubOutput {
	return i.ToGetDataCollectionRuleDestinationEventHubOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationEventHubArgs) ToGetDataCollectionRuleDestinationEventHubOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationEventHubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationEventHubOutput)
}

func (i GetDataCollectionRuleDestinationEventHubArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationEventHub] {
	return pulumix.Output[GetDataCollectionRuleDestinationEventHub]{
		OutputState: i.ToGetDataCollectionRuleDestinationEventHubOutputWithContext(ctx).OutputState,
	}
}

func (i GetDataCollectionRuleDestinationEventHubArgs) ToGetDataCollectionRuleDestinationEventHubPtrOutput() GetDataCollectionRuleDestinationEventHubPtrOutput {
	return i.ToGetDataCollectionRuleDestinationEventHubPtrOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationEventHubArgs) ToGetDataCollectionRuleDestinationEventHubPtrOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationEventHubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationEventHubOutput).ToGetDataCollectionRuleDestinationEventHubPtrOutputWithContext(ctx)
}

// GetDataCollectionRuleDestinationEventHubPtrInput is an input type that accepts GetDataCollectionRuleDestinationEventHubArgs, GetDataCollectionRuleDestinationEventHubPtr and GetDataCollectionRuleDestinationEventHubPtrOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationEventHubPtrInput` via:
//
//	        GetDataCollectionRuleDestinationEventHubArgs{...}
//
//	or:
//
//	        nil
type GetDataCollectionRuleDestinationEventHubPtrInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationEventHubPtrOutput() GetDataCollectionRuleDestinationEventHubPtrOutput
	ToGetDataCollectionRuleDestinationEventHubPtrOutputWithContext(context.Context) GetDataCollectionRuleDestinationEventHubPtrOutput
}

type getDataCollectionRuleDestinationEventHubPtrType GetDataCollectionRuleDestinationEventHubArgs

func GetDataCollectionRuleDestinationEventHubPtr(v *GetDataCollectionRuleDestinationEventHubArgs) GetDataCollectionRuleDestinationEventHubPtrInput {
	return (*getDataCollectionRuleDestinationEventHubPtrType)(v)
}

func (*getDataCollectionRuleDestinationEventHubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDataCollectionRuleDestinationEventHub)(nil)).Elem()
}

func (i *getDataCollectionRuleDestinationEventHubPtrType) ToGetDataCollectionRuleDestinationEventHubPtrOutput() GetDataCollectionRuleDestinationEventHubPtrOutput {
	return i.ToGetDataCollectionRuleDestinationEventHubPtrOutputWithContext(context.Background())
}

func (i *getDataCollectionRuleDestinationEventHubPtrType) ToGetDataCollectionRuleDestinationEventHubPtrOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationEventHubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationEventHubPtrOutput)
}

func (i *getDataCollectionRuleDestinationEventHubPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetDataCollectionRuleDestinationEventHub] {
	return pulumix.Output[*GetDataCollectionRuleDestinationEventHub]{
		OutputState: i.ToGetDataCollectionRuleDestinationEventHubPtrOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDestinationEventHubOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationEventHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationEventHub)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationEventHubOutput) ToGetDataCollectionRuleDestinationEventHubOutput() GetDataCollectionRuleDestinationEventHubOutput {
	return o
}

func (o GetDataCollectionRuleDestinationEventHubOutput) ToGetDataCollectionRuleDestinationEventHubOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationEventHubOutput {
	return o
}

func (o GetDataCollectionRuleDestinationEventHubOutput) ToGetDataCollectionRuleDestinationEventHubPtrOutput() GetDataCollectionRuleDestinationEventHubPtrOutput {
	return o.ToGetDataCollectionRuleDestinationEventHubPtrOutputWithContext(context.Background())
}

func (o GetDataCollectionRuleDestinationEventHubOutput) ToGetDataCollectionRuleDestinationEventHubPtrOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationEventHubPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetDataCollectionRuleDestinationEventHub) *GetDataCollectionRuleDestinationEventHub {
		return &v
	}).(GetDataCollectionRuleDestinationEventHubPtrOutput)
}

func (o GetDataCollectionRuleDestinationEventHubOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationEventHub] {
	return pulumix.Output[GetDataCollectionRuleDestinationEventHub]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the Event Hub.
func (o GetDataCollectionRuleDestinationEventHubOutput) EventHubId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationEventHub) string { return v.EventHubId }).(pulumi.StringOutput)
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDestinationEventHubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationEventHub) string { return v.Name }).(pulumi.StringOutput)
}

type GetDataCollectionRuleDestinationEventHubPtrOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationEventHubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDataCollectionRuleDestinationEventHub)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationEventHubPtrOutput) ToGetDataCollectionRuleDestinationEventHubPtrOutput() GetDataCollectionRuleDestinationEventHubPtrOutput {
	return o
}

func (o GetDataCollectionRuleDestinationEventHubPtrOutput) ToGetDataCollectionRuleDestinationEventHubPtrOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationEventHubPtrOutput {
	return o
}

func (o GetDataCollectionRuleDestinationEventHubPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetDataCollectionRuleDestinationEventHub] {
	return pulumix.Output[*GetDataCollectionRuleDestinationEventHub]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDestinationEventHubPtrOutput) Elem() GetDataCollectionRuleDestinationEventHubOutput {
	return o.ApplyT(func(v *GetDataCollectionRuleDestinationEventHub) GetDataCollectionRuleDestinationEventHub {
		if v != nil {
			return *v
		}
		var ret GetDataCollectionRuleDestinationEventHub
		return ret
	}).(GetDataCollectionRuleDestinationEventHubOutput)
}

// The resource ID of the Event Hub.
func (o GetDataCollectionRuleDestinationEventHubPtrOutput) EventHubId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDataCollectionRuleDestinationEventHub) *string {
		if v == nil {
			return nil
		}
		return &v.EventHubId
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDestinationEventHubPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDataCollectionRuleDestinationEventHub) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type GetDataCollectionRuleDestinationEventHubDirect struct {
	// The resource ID of the Event Hub.
	EventHubId string `pulumi:"eventHubId"`
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
}

// GetDataCollectionRuleDestinationEventHubDirectInput is an input type that accepts GetDataCollectionRuleDestinationEventHubDirectArgs and GetDataCollectionRuleDestinationEventHubDirectOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationEventHubDirectInput` via:
//
//	GetDataCollectionRuleDestinationEventHubDirectArgs{...}
type GetDataCollectionRuleDestinationEventHubDirectInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationEventHubDirectOutput() GetDataCollectionRuleDestinationEventHubDirectOutput
	ToGetDataCollectionRuleDestinationEventHubDirectOutputWithContext(context.Context) GetDataCollectionRuleDestinationEventHubDirectOutput
}

type GetDataCollectionRuleDestinationEventHubDirectArgs struct {
	// The resource ID of the Event Hub.
	EventHubId pulumi.StringInput `pulumi:"eventHubId"`
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDataCollectionRuleDestinationEventHubDirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationEventHubDirect)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationEventHubDirectArgs) ToGetDataCollectionRuleDestinationEventHubDirectOutput() GetDataCollectionRuleDestinationEventHubDirectOutput {
	return i.ToGetDataCollectionRuleDestinationEventHubDirectOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationEventHubDirectArgs) ToGetDataCollectionRuleDestinationEventHubDirectOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationEventHubDirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationEventHubDirectOutput)
}

func (i GetDataCollectionRuleDestinationEventHubDirectArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationEventHubDirect] {
	return pulumix.Output[GetDataCollectionRuleDestinationEventHubDirect]{
		OutputState: i.ToGetDataCollectionRuleDestinationEventHubDirectOutputWithContext(ctx).OutputState,
	}
}

func (i GetDataCollectionRuleDestinationEventHubDirectArgs) ToGetDataCollectionRuleDestinationEventHubDirectPtrOutput() GetDataCollectionRuleDestinationEventHubDirectPtrOutput {
	return i.ToGetDataCollectionRuleDestinationEventHubDirectPtrOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationEventHubDirectArgs) ToGetDataCollectionRuleDestinationEventHubDirectPtrOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationEventHubDirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationEventHubDirectOutput).ToGetDataCollectionRuleDestinationEventHubDirectPtrOutputWithContext(ctx)
}

// GetDataCollectionRuleDestinationEventHubDirectPtrInput is an input type that accepts GetDataCollectionRuleDestinationEventHubDirectArgs, GetDataCollectionRuleDestinationEventHubDirectPtr and GetDataCollectionRuleDestinationEventHubDirectPtrOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationEventHubDirectPtrInput` via:
//
//	        GetDataCollectionRuleDestinationEventHubDirectArgs{...}
//
//	or:
//
//	        nil
type GetDataCollectionRuleDestinationEventHubDirectPtrInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationEventHubDirectPtrOutput() GetDataCollectionRuleDestinationEventHubDirectPtrOutput
	ToGetDataCollectionRuleDestinationEventHubDirectPtrOutputWithContext(context.Context) GetDataCollectionRuleDestinationEventHubDirectPtrOutput
}

type getDataCollectionRuleDestinationEventHubDirectPtrType GetDataCollectionRuleDestinationEventHubDirectArgs

func GetDataCollectionRuleDestinationEventHubDirectPtr(v *GetDataCollectionRuleDestinationEventHubDirectArgs) GetDataCollectionRuleDestinationEventHubDirectPtrInput {
	return (*getDataCollectionRuleDestinationEventHubDirectPtrType)(v)
}

func (*getDataCollectionRuleDestinationEventHubDirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDataCollectionRuleDestinationEventHubDirect)(nil)).Elem()
}

func (i *getDataCollectionRuleDestinationEventHubDirectPtrType) ToGetDataCollectionRuleDestinationEventHubDirectPtrOutput() GetDataCollectionRuleDestinationEventHubDirectPtrOutput {
	return i.ToGetDataCollectionRuleDestinationEventHubDirectPtrOutputWithContext(context.Background())
}

func (i *getDataCollectionRuleDestinationEventHubDirectPtrType) ToGetDataCollectionRuleDestinationEventHubDirectPtrOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationEventHubDirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationEventHubDirectPtrOutput)
}

func (i *getDataCollectionRuleDestinationEventHubDirectPtrType) ToOutput(ctx context.Context) pulumix.Output[*GetDataCollectionRuleDestinationEventHubDirect] {
	return pulumix.Output[*GetDataCollectionRuleDestinationEventHubDirect]{
		OutputState: i.ToGetDataCollectionRuleDestinationEventHubDirectPtrOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDestinationEventHubDirectOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationEventHubDirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationEventHubDirect)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationEventHubDirectOutput) ToGetDataCollectionRuleDestinationEventHubDirectOutput() GetDataCollectionRuleDestinationEventHubDirectOutput {
	return o
}

func (o GetDataCollectionRuleDestinationEventHubDirectOutput) ToGetDataCollectionRuleDestinationEventHubDirectOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationEventHubDirectOutput {
	return o
}

func (o GetDataCollectionRuleDestinationEventHubDirectOutput) ToGetDataCollectionRuleDestinationEventHubDirectPtrOutput() GetDataCollectionRuleDestinationEventHubDirectPtrOutput {
	return o.ToGetDataCollectionRuleDestinationEventHubDirectPtrOutputWithContext(context.Background())
}

func (o GetDataCollectionRuleDestinationEventHubDirectOutput) ToGetDataCollectionRuleDestinationEventHubDirectPtrOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationEventHubDirectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetDataCollectionRuleDestinationEventHubDirect) *GetDataCollectionRuleDestinationEventHubDirect {
		return &v
	}).(GetDataCollectionRuleDestinationEventHubDirectPtrOutput)
}

func (o GetDataCollectionRuleDestinationEventHubDirectOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationEventHubDirect] {
	return pulumix.Output[GetDataCollectionRuleDestinationEventHubDirect]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the Event Hub.
func (o GetDataCollectionRuleDestinationEventHubDirectOutput) EventHubId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationEventHubDirect) string { return v.EventHubId }).(pulumi.StringOutput)
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDestinationEventHubDirectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationEventHubDirect) string { return v.Name }).(pulumi.StringOutput)
}

type GetDataCollectionRuleDestinationEventHubDirectPtrOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationEventHubDirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDataCollectionRuleDestinationEventHubDirect)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationEventHubDirectPtrOutput) ToGetDataCollectionRuleDestinationEventHubDirectPtrOutput() GetDataCollectionRuleDestinationEventHubDirectPtrOutput {
	return o
}

func (o GetDataCollectionRuleDestinationEventHubDirectPtrOutput) ToGetDataCollectionRuleDestinationEventHubDirectPtrOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationEventHubDirectPtrOutput {
	return o
}

func (o GetDataCollectionRuleDestinationEventHubDirectPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetDataCollectionRuleDestinationEventHubDirect] {
	return pulumix.Output[*GetDataCollectionRuleDestinationEventHubDirect]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDestinationEventHubDirectPtrOutput) Elem() GetDataCollectionRuleDestinationEventHubDirectOutput {
	return o.ApplyT(func(v *GetDataCollectionRuleDestinationEventHubDirect) GetDataCollectionRuleDestinationEventHubDirect {
		if v != nil {
			return *v
		}
		var ret GetDataCollectionRuleDestinationEventHubDirect
		return ret
	}).(GetDataCollectionRuleDestinationEventHubDirectOutput)
}

// The resource ID of the Event Hub.
func (o GetDataCollectionRuleDestinationEventHubDirectPtrOutput) EventHubId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDataCollectionRuleDestinationEventHubDirect) *string {
		if v == nil {
			return nil
		}
		return &v.EventHubId
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDestinationEventHubDirectPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDataCollectionRuleDestinationEventHubDirect) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type GetDataCollectionRuleDestinationLogAnalytic struct {
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// The ID of a Log Analytic Workspace resource.
	WorkspaceResourceId string `pulumi:"workspaceResourceId"`
}

// GetDataCollectionRuleDestinationLogAnalyticInput is an input type that accepts GetDataCollectionRuleDestinationLogAnalyticArgs and GetDataCollectionRuleDestinationLogAnalyticOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationLogAnalyticInput` via:
//
//	GetDataCollectionRuleDestinationLogAnalyticArgs{...}
type GetDataCollectionRuleDestinationLogAnalyticInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationLogAnalyticOutput() GetDataCollectionRuleDestinationLogAnalyticOutput
	ToGetDataCollectionRuleDestinationLogAnalyticOutputWithContext(context.Context) GetDataCollectionRuleDestinationLogAnalyticOutput
}

type GetDataCollectionRuleDestinationLogAnalyticArgs struct {
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of a Log Analytic Workspace resource.
	WorkspaceResourceId pulumi.StringInput `pulumi:"workspaceResourceId"`
}

func (GetDataCollectionRuleDestinationLogAnalyticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationLogAnalytic)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationLogAnalyticArgs) ToGetDataCollectionRuleDestinationLogAnalyticOutput() GetDataCollectionRuleDestinationLogAnalyticOutput {
	return i.ToGetDataCollectionRuleDestinationLogAnalyticOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationLogAnalyticArgs) ToGetDataCollectionRuleDestinationLogAnalyticOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationLogAnalyticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationLogAnalyticOutput)
}

func (i GetDataCollectionRuleDestinationLogAnalyticArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationLogAnalytic] {
	return pulumix.Output[GetDataCollectionRuleDestinationLogAnalytic]{
		OutputState: i.ToGetDataCollectionRuleDestinationLogAnalyticOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDestinationLogAnalyticArrayInput is an input type that accepts GetDataCollectionRuleDestinationLogAnalyticArray and GetDataCollectionRuleDestinationLogAnalyticArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationLogAnalyticArrayInput` via:
//
//	GetDataCollectionRuleDestinationLogAnalyticArray{ GetDataCollectionRuleDestinationLogAnalyticArgs{...} }
type GetDataCollectionRuleDestinationLogAnalyticArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationLogAnalyticArrayOutput() GetDataCollectionRuleDestinationLogAnalyticArrayOutput
	ToGetDataCollectionRuleDestinationLogAnalyticArrayOutputWithContext(context.Context) GetDataCollectionRuleDestinationLogAnalyticArrayOutput
}

type GetDataCollectionRuleDestinationLogAnalyticArray []GetDataCollectionRuleDestinationLogAnalyticInput

func (GetDataCollectionRuleDestinationLogAnalyticArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDestinationLogAnalytic)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationLogAnalyticArray) ToGetDataCollectionRuleDestinationLogAnalyticArrayOutput() GetDataCollectionRuleDestinationLogAnalyticArrayOutput {
	return i.ToGetDataCollectionRuleDestinationLogAnalyticArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationLogAnalyticArray) ToGetDataCollectionRuleDestinationLogAnalyticArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationLogAnalyticArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationLogAnalyticArrayOutput)
}

func (i GetDataCollectionRuleDestinationLogAnalyticArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDestinationLogAnalytic] {
	return pulumix.Output[[]GetDataCollectionRuleDestinationLogAnalytic]{
		OutputState: i.ToGetDataCollectionRuleDestinationLogAnalyticArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDestinationLogAnalyticOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationLogAnalyticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationLogAnalytic)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationLogAnalyticOutput) ToGetDataCollectionRuleDestinationLogAnalyticOutput() GetDataCollectionRuleDestinationLogAnalyticOutput {
	return o
}

func (o GetDataCollectionRuleDestinationLogAnalyticOutput) ToGetDataCollectionRuleDestinationLogAnalyticOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationLogAnalyticOutput {
	return o
}

func (o GetDataCollectionRuleDestinationLogAnalyticOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationLogAnalytic] {
	return pulumix.Output[GetDataCollectionRuleDestinationLogAnalytic]{
		OutputState: o.OutputState,
	}
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDestinationLogAnalyticOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationLogAnalytic) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of a Log Analytic Workspace resource.
func (o GetDataCollectionRuleDestinationLogAnalyticOutput) WorkspaceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationLogAnalytic) string { return v.WorkspaceResourceId }).(pulumi.StringOutput)
}

type GetDataCollectionRuleDestinationLogAnalyticArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationLogAnalyticArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDestinationLogAnalytic)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationLogAnalyticArrayOutput) ToGetDataCollectionRuleDestinationLogAnalyticArrayOutput() GetDataCollectionRuleDestinationLogAnalyticArrayOutput {
	return o
}

func (o GetDataCollectionRuleDestinationLogAnalyticArrayOutput) ToGetDataCollectionRuleDestinationLogAnalyticArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationLogAnalyticArrayOutput {
	return o
}

func (o GetDataCollectionRuleDestinationLogAnalyticArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDestinationLogAnalytic] {
	return pulumix.Output[[]GetDataCollectionRuleDestinationLogAnalytic]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDestinationLogAnalyticArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDestinationLogAnalyticOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDestinationLogAnalytic {
		return vs[0].([]GetDataCollectionRuleDestinationLogAnalytic)[vs[1].(int)]
	}).(GetDataCollectionRuleDestinationLogAnalyticOutput)
}

type GetDataCollectionRuleDestinationMonitorAccount struct {
	// The resource ID of the Monitor Account.
	MonitorAccountId string `pulumi:"monitorAccountId"`
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
}

// GetDataCollectionRuleDestinationMonitorAccountInput is an input type that accepts GetDataCollectionRuleDestinationMonitorAccountArgs and GetDataCollectionRuleDestinationMonitorAccountOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationMonitorAccountInput` via:
//
//	GetDataCollectionRuleDestinationMonitorAccountArgs{...}
type GetDataCollectionRuleDestinationMonitorAccountInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationMonitorAccountOutput() GetDataCollectionRuleDestinationMonitorAccountOutput
	ToGetDataCollectionRuleDestinationMonitorAccountOutputWithContext(context.Context) GetDataCollectionRuleDestinationMonitorAccountOutput
}

type GetDataCollectionRuleDestinationMonitorAccountArgs struct {
	// The resource ID of the Monitor Account.
	MonitorAccountId pulumi.StringInput `pulumi:"monitorAccountId"`
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDataCollectionRuleDestinationMonitorAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationMonitorAccount)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationMonitorAccountArgs) ToGetDataCollectionRuleDestinationMonitorAccountOutput() GetDataCollectionRuleDestinationMonitorAccountOutput {
	return i.ToGetDataCollectionRuleDestinationMonitorAccountOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationMonitorAccountArgs) ToGetDataCollectionRuleDestinationMonitorAccountOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationMonitorAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationMonitorAccountOutput)
}

func (i GetDataCollectionRuleDestinationMonitorAccountArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationMonitorAccount] {
	return pulumix.Output[GetDataCollectionRuleDestinationMonitorAccount]{
		OutputState: i.ToGetDataCollectionRuleDestinationMonitorAccountOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDestinationMonitorAccountArrayInput is an input type that accepts GetDataCollectionRuleDestinationMonitorAccountArray and GetDataCollectionRuleDestinationMonitorAccountArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationMonitorAccountArrayInput` via:
//
//	GetDataCollectionRuleDestinationMonitorAccountArray{ GetDataCollectionRuleDestinationMonitorAccountArgs{...} }
type GetDataCollectionRuleDestinationMonitorAccountArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationMonitorAccountArrayOutput() GetDataCollectionRuleDestinationMonitorAccountArrayOutput
	ToGetDataCollectionRuleDestinationMonitorAccountArrayOutputWithContext(context.Context) GetDataCollectionRuleDestinationMonitorAccountArrayOutput
}

type GetDataCollectionRuleDestinationMonitorAccountArray []GetDataCollectionRuleDestinationMonitorAccountInput

func (GetDataCollectionRuleDestinationMonitorAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDestinationMonitorAccount)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationMonitorAccountArray) ToGetDataCollectionRuleDestinationMonitorAccountArrayOutput() GetDataCollectionRuleDestinationMonitorAccountArrayOutput {
	return i.ToGetDataCollectionRuleDestinationMonitorAccountArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationMonitorAccountArray) ToGetDataCollectionRuleDestinationMonitorAccountArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationMonitorAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationMonitorAccountArrayOutput)
}

func (i GetDataCollectionRuleDestinationMonitorAccountArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDestinationMonitorAccount] {
	return pulumix.Output[[]GetDataCollectionRuleDestinationMonitorAccount]{
		OutputState: i.ToGetDataCollectionRuleDestinationMonitorAccountArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDestinationMonitorAccountOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationMonitorAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationMonitorAccount)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationMonitorAccountOutput) ToGetDataCollectionRuleDestinationMonitorAccountOutput() GetDataCollectionRuleDestinationMonitorAccountOutput {
	return o
}

func (o GetDataCollectionRuleDestinationMonitorAccountOutput) ToGetDataCollectionRuleDestinationMonitorAccountOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationMonitorAccountOutput {
	return o
}

func (o GetDataCollectionRuleDestinationMonitorAccountOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationMonitorAccount] {
	return pulumix.Output[GetDataCollectionRuleDestinationMonitorAccount]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the Monitor Account.
func (o GetDataCollectionRuleDestinationMonitorAccountOutput) MonitorAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationMonitorAccount) string { return v.MonitorAccountId }).(pulumi.StringOutput)
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDestinationMonitorAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationMonitorAccount) string { return v.Name }).(pulumi.StringOutput)
}

type GetDataCollectionRuleDestinationMonitorAccountArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationMonitorAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDestinationMonitorAccount)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationMonitorAccountArrayOutput) ToGetDataCollectionRuleDestinationMonitorAccountArrayOutput() GetDataCollectionRuleDestinationMonitorAccountArrayOutput {
	return o
}

func (o GetDataCollectionRuleDestinationMonitorAccountArrayOutput) ToGetDataCollectionRuleDestinationMonitorAccountArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationMonitorAccountArrayOutput {
	return o
}

func (o GetDataCollectionRuleDestinationMonitorAccountArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDestinationMonitorAccount] {
	return pulumix.Output[[]GetDataCollectionRuleDestinationMonitorAccount]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDestinationMonitorAccountArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDestinationMonitorAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDestinationMonitorAccount {
		return vs[0].([]GetDataCollectionRuleDestinationMonitorAccount)[vs[1].(int)]
	}).(GetDataCollectionRuleDestinationMonitorAccountOutput)
}

type GetDataCollectionRuleDestinationStorageBlob struct {
	// The Storage Container name.
	ContainerName string `pulumi:"containerName"`
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// The resource ID of the Storage Account.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// GetDataCollectionRuleDestinationStorageBlobInput is an input type that accepts GetDataCollectionRuleDestinationStorageBlobArgs and GetDataCollectionRuleDestinationStorageBlobOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationStorageBlobInput` via:
//
//	GetDataCollectionRuleDestinationStorageBlobArgs{...}
type GetDataCollectionRuleDestinationStorageBlobInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationStorageBlobOutput() GetDataCollectionRuleDestinationStorageBlobOutput
	ToGetDataCollectionRuleDestinationStorageBlobOutputWithContext(context.Context) GetDataCollectionRuleDestinationStorageBlobOutput
}

type GetDataCollectionRuleDestinationStorageBlobArgs struct {
	// The Storage Container name.
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The resource ID of the Storage Account.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (GetDataCollectionRuleDestinationStorageBlobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationStorageBlob)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationStorageBlobArgs) ToGetDataCollectionRuleDestinationStorageBlobOutput() GetDataCollectionRuleDestinationStorageBlobOutput {
	return i.ToGetDataCollectionRuleDestinationStorageBlobOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationStorageBlobArgs) ToGetDataCollectionRuleDestinationStorageBlobOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationStorageBlobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationStorageBlobOutput)
}

func (i GetDataCollectionRuleDestinationStorageBlobArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationStorageBlob] {
	return pulumix.Output[GetDataCollectionRuleDestinationStorageBlob]{
		OutputState: i.ToGetDataCollectionRuleDestinationStorageBlobOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDestinationStorageBlobArrayInput is an input type that accepts GetDataCollectionRuleDestinationStorageBlobArray and GetDataCollectionRuleDestinationStorageBlobArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationStorageBlobArrayInput` via:
//
//	GetDataCollectionRuleDestinationStorageBlobArray{ GetDataCollectionRuleDestinationStorageBlobArgs{...} }
type GetDataCollectionRuleDestinationStorageBlobArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationStorageBlobArrayOutput() GetDataCollectionRuleDestinationStorageBlobArrayOutput
	ToGetDataCollectionRuleDestinationStorageBlobArrayOutputWithContext(context.Context) GetDataCollectionRuleDestinationStorageBlobArrayOutput
}

type GetDataCollectionRuleDestinationStorageBlobArray []GetDataCollectionRuleDestinationStorageBlobInput

func (GetDataCollectionRuleDestinationStorageBlobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDestinationStorageBlob)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationStorageBlobArray) ToGetDataCollectionRuleDestinationStorageBlobArrayOutput() GetDataCollectionRuleDestinationStorageBlobArrayOutput {
	return i.ToGetDataCollectionRuleDestinationStorageBlobArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationStorageBlobArray) ToGetDataCollectionRuleDestinationStorageBlobArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationStorageBlobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationStorageBlobArrayOutput)
}

func (i GetDataCollectionRuleDestinationStorageBlobArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDestinationStorageBlob] {
	return pulumix.Output[[]GetDataCollectionRuleDestinationStorageBlob]{
		OutputState: i.ToGetDataCollectionRuleDestinationStorageBlobArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDestinationStorageBlobOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationStorageBlobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationStorageBlob)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationStorageBlobOutput) ToGetDataCollectionRuleDestinationStorageBlobOutput() GetDataCollectionRuleDestinationStorageBlobOutput {
	return o
}

func (o GetDataCollectionRuleDestinationStorageBlobOutput) ToGetDataCollectionRuleDestinationStorageBlobOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationStorageBlobOutput {
	return o
}

func (o GetDataCollectionRuleDestinationStorageBlobOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationStorageBlob] {
	return pulumix.Output[GetDataCollectionRuleDestinationStorageBlob]{
		OutputState: o.OutputState,
	}
}

// The Storage Container name.
func (o GetDataCollectionRuleDestinationStorageBlobOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationStorageBlob) string { return v.ContainerName }).(pulumi.StringOutput)
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDestinationStorageBlobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationStorageBlob) string { return v.Name }).(pulumi.StringOutput)
}

// The resource ID of the Storage Account.
func (o GetDataCollectionRuleDestinationStorageBlobOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationStorageBlob) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type GetDataCollectionRuleDestinationStorageBlobArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationStorageBlobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDestinationStorageBlob)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationStorageBlobArrayOutput) ToGetDataCollectionRuleDestinationStorageBlobArrayOutput() GetDataCollectionRuleDestinationStorageBlobArrayOutput {
	return o
}

func (o GetDataCollectionRuleDestinationStorageBlobArrayOutput) ToGetDataCollectionRuleDestinationStorageBlobArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationStorageBlobArrayOutput {
	return o
}

func (o GetDataCollectionRuleDestinationStorageBlobArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDestinationStorageBlob] {
	return pulumix.Output[[]GetDataCollectionRuleDestinationStorageBlob]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDestinationStorageBlobArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDestinationStorageBlobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDestinationStorageBlob {
		return vs[0].([]GetDataCollectionRuleDestinationStorageBlob)[vs[1].(int)]
	}).(GetDataCollectionRuleDestinationStorageBlobOutput)
}

type GetDataCollectionRuleDestinationStorageBlobDirect struct {
	// The Storage Container name.
	ContainerName string `pulumi:"containerName"`
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// The resource ID of the Storage Account.
	StorageAccountId string `pulumi:"storageAccountId"`
}

// GetDataCollectionRuleDestinationStorageBlobDirectInput is an input type that accepts GetDataCollectionRuleDestinationStorageBlobDirectArgs and GetDataCollectionRuleDestinationStorageBlobDirectOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationStorageBlobDirectInput` via:
//
//	GetDataCollectionRuleDestinationStorageBlobDirectArgs{...}
type GetDataCollectionRuleDestinationStorageBlobDirectInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationStorageBlobDirectOutput() GetDataCollectionRuleDestinationStorageBlobDirectOutput
	ToGetDataCollectionRuleDestinationStorageBlobDirectOutputWithContext(context.Context) GetDataCollectionRuleDestinationStorageBlobDirectOutput
}

type GetDataCollectionRuleDestinationStorageBlobDirectArgs struct {
	// The Storage Container name.
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The resource ID of the Storage Account.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
}

func (GetDataCollectionRuleDestinationStorageBlobDirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationStorageBlobDirect)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationStorageBlobDirectArgs) ToGetDataCollectionRuleDestinationStorageBlobDirectOutput() GetDataCollectionRuleDestinationStorageBlobDirectOutput {
	return i.ToGetDataCollectionRuleDestinationStorageBlobDirectOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationStorageBlobDirectArgs) ToGetDataCollectionRuleDestinationStorageBlobDirectOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationStorageBlobDirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationStorageBlobDirectOutput)
}

func (i GetDataCollectionRuleDestinationStorageBlobDirectArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationStorageBlobDirect] {
	return pulumix.Output[GetDataCollectionRuleDestinationStorageBlobDirect]{
		OutputState: i.ToGetDataCollectionRuleDestinationStorageBlobDirectOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDestinationStorageBlobDirectArrayInput is an input type that accepts GetDataCollectionRuleDestinationStorageBlobDirectArray and GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationStorageBlobDirectArrayInput` via:
//
//	GetDataCollectionRuleDestinationStorageBlobDirectArray{ GetDataCollectionRuleDestinationStorageBlobDirectArgs{...} }
type GetDataCollectionRuleDestinationStorageBlobDirectArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationStorageBlobDirectArrayOutput() GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput
	ToGetDataCollectionRuleDestinationStorageBlobDirectArrayOutputWithContext(context.Context) GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput
}

type GetDataCollectionRuleDestinationStorageBlobDirectArray []GetDataCollectionRuleDestinationStorageBlobDirectInput

func (GetDataCollectionRuleDestinationStorageBlobDirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDestinationStorageBlobDirect)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationStorageBlobDirectArray) ToGetDataCollectionRuleDestinationStorageBlobDirectArrayOutput() GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput {
	return i.ToGetDataCollectionRuleDestinationStorageBlobDirectArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationStorageBlobDirectArray) ToGetDataCollectionRuleDestinationStorageBlobDirectArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput)
}

func (i GetDataCollectionRuleDestinationStorageBlobDirectArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDestinationStorageBlobDirect] {
	return pulumix.Output[[]GetDataCollectionRuleDestinationStorageBlobDirect]{
		OutputState: i.ToGetDataCollectionRuleDestinationStorageBlobDirectArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDestinationStorageBlobDirectOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationStorageBlobDirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationStorageBlobDirect)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationStorageBlobDirectOutput) ToGetDataCollectionRuleDestinationStorageBlobDirectOutput() GetDataCollectionRuleDestinationStorageBlobDirectOutput {
	return o
}

func (o GetDataCollectionRuleDestinationStorageBlobDirectOutput) ToGetDataCollectionRuleDestinationStorageBlobDirectOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationStorageBlobDirectOutput {
	return o
}

func (o GetDataCollectionRuleDestinationStorageBlobDirectOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationStorageBlobDirect] {
	return pulumix.Output[GetDataCollectionRuleDestinationStorageBlobDirect]{
		OutputState: o.OutputState,
	}
}

// The Storage Container name.
func (o GetDataCollectionRuleDestinationStorageBlobDirectOutput) ContainerName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationStorageBlobDirect) string { return v.ContainerName }).(pulumi.StringOutput)
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDestinationStorageBlobDirectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationStorageBlobDirect) string { return v.Name }).(pulumi.StringOutput)
}

// The resource ID of the Storage Account.
func (o GetDataCollectionRuleDestinationStorageBlobDirectOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationStorageBlobDirect) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

type GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDestinationStorageBlobDirect)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput) ToGetDataCollectionRuleDestinationStorageBlobDirectArrayOutput() GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput {
	return o
}

func (o GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput) ToGetDataCollectionRuleDestinationStorageBlobDirectArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput {
	return o
}

func (o GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDestinationStorageBlobDirect] {
	return pulumix.Output[[]GetDataCollectionRuleDestinationStorageBlobDirect]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDestinationStorageBlobDirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDestinationStorageBlobDirect {
		return vs[0].([]GetDataCollectionRuleDestinationStorageBlobDirect)[vs[1].(int)]
	}).(GetDataCollectionRuleDestinationStorageBlobDirectOutput)
}

type GetDataCollectionRuleDestinationStorageTableDirect struct {
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// The resource ID of the Storage Account.
	StorageAccountId string `pulumi:"storageAccountId"`
	// The Storage Table name.
	TableName string `pulumi:"tableName"`
}

// GetDataCollectionRuleDestinationStorageTableDirectInput is an input type that accepts GetDataCollectionRuleDestinationStorageTableDirectArgs and GetDataCollectionRuleDestinationStorageTableDirectOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationStorageTableDirectInput` via:
//
//	GetDataCollectionRuleDestinationStorageTableDirectArgs{...}
type GetDataCollectionRuleDestinationStorageTableDirectInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationStorageTableDirectOutput() GetDataCollectionRuleDestinationStorageTableDirectOutput
	ToGetDataCollectionRuleDestinationStorageTableDirectOutputWithContext(context.Context) GetDataCollectionRuleDestinationStorageTableDirectOutput
}

type GetDataCollectionRuleDestinationStorageTableDirectArgs struct {
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The resource ID of the Storage Account.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
	// The Storage Table name.
	TableName pulumi.StringInput `pulumi:"tableName"`
}

func (GetDataCollectionRuleDestinationStorageTableDirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationStorageTableDirect)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationStorageTableDirectArgs) ToGetDataCollectionRuleDestinationStorageTableDirectOutput() GetDataCollectionRuleDestinationStorageTableDirectOutput {
	return i.ToGetDataCollectionRuleDestinationStorageTableDirectOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationStorageTableDirectArgs) ToGetDataCollectionRuleDestinationStorageTableDirectOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationStorageTableDirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationStorageTableDirectOutput)
}

func (i GetDataCollectionRuleDestinationStorageTableDirectArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationStorageTableDirect] {
	return pulumix.Output[GetDataCollectionRuleDestinationStorageTableDirect]{
		OutputState: i.ToGetDataCollectionRuleDestinationStorageTableDirectOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleDestinationStorageTableDirectArrayInput is an input type that accepts GetDataCollectionRuleDestinationStorageTableDirectArray and GetDataCollectionRuleDestinationStorageTableDirectArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleDestinationStorageTableDirectArrayInput` via:
//
//	GetDataCollectionRuleDestinationStorageTableDirectArray{ GetDataCollectionRuleDestinationStorageTableDirectArgs{...} }
type GetDataCollectionRuleDestinationStorageTableDirectArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleDestinationStorageTableDirectArrayOutput() GetDataCollectionRuleDestinationStorageTableDirectArrayOutput
	ToGetDataCollectionRuleDestinationStorageTableDirectArrayOutputWithContext(context.Context) GetDataCollectionRuleDestinationStorageTableDirectArrayOutput
}

type GetDataCollectionRuleDestinationStorageTableDirectArray []GetDataCollectionRuleDestinationStorageTableDirectInput

func (GetDataCollectionRuleDestinationStorageTableDirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDestinationStorageTableDirect)(nil)).Elem()
}

func (i GetDataCollectionRuleDestinationStorageTableDirectArray) ToGetDataCollectionRuleDestinationStorageTableDirectArrayOutput() GetDataCollectionRuleDestinationStorageTableDirectArrayOutput {
	return i.ToGetDataCollectionRuleDestinationStorageTableDirectArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleDestinationStorageTableDirectArray) ToGetDataCollectionRuleDestinationStorageTableDirectArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationStorageTableDirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleDestinationStorageTableDirectArrayOutput)
}

func (i GetDataCollectionRuleDestinationStorageTableDirectArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDestinationStorageTableDirect] {
	return pulumix.Output[[]GetDataCollectionRuleDestinationStorageTableDirect]{
		OutputState: i.ToGetDataCollectionRuleDestinationStorageTableDirectArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleDestinationStorageTableDirectOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationStorageTableDirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleDestinationStorageTableDirect)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationStorageTableDirectOutput) ToGetDataCollectionRuleDestinationStorageTableDirectOutput() GetDataCollectionRuleDestinationStorageTableDirectOutput {
	return o
}

func (o GetDataCollectionRuleDestinationStorageTableDirectOutput) ToGetDataCollectionRuleDestinationStorageTableDirectOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationStorageTableDirectOutput {
	return o
}

func (o GetDataCollectionRuleDestinationStorageTableDirectOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleDestinationStorageTableDirect] {
	return pulumix.Output[GetDataCollectionRuleDestinationStorageTableDirect]{
		OutputState: o.OutputState,
	}
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleDestinationStorageTableDirectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationStorageTableDirect) string { return v.Name }).(pulumi.StringOutput)
}

// The resource ID of the Storage Account.
func (o GetDataCollectionRuleDestinationStorageTableDirectOutput) StorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationStorageTableDirect) string { return v.StorageAccountId }).(pulumi.StringOutput)
}

// The Storage Table name.
func (o GetDataCollectionRuleDestinationStorageTableDirectOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleDestinationStorageTableDirect) string { return v.TableName }).(pulumi.StringOutput)
}

type GetDataCollectionRuleDestinationStorageTableDirectArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleDestinationStorageTableDirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleDestinationStorageTableDirect)(nil)).Elem()
}

func (o GetDataCollectionRuleDestinationStorageTableDirectArrayOutput) ToGetDataCollectionRuleDestinationStorageTableDirectArrayOutput() GetDataCollectionRuleDestinationStorageTableDirectArrayOutput {
	return o
}

func (o GetDataCollectionRuleDestinationStorageTableDirectArrayOutput) ToGetDataCollectionRuleDestinationStorageTableDirectArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleDestinationStorageTableDirectArrayOutput {
	return o
}

func (o GetDataCollectionRuleDestinationStorageTableDirectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleDestinationStorageTableDirect] {
	return pulumix.Output[[]GetDataCollectionRuleDestinationStorageTableDirect]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleDestinationStorageTableDirectArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleDestinationStorageTableDirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleDestinationStorageTableDirect {
		return vs[0].([]GetDataCollectionRuleDestinationStorageTableDirect)[vs[1].(int)]
	}).(GetDataCollectionRuleDestinationStorageTableDirectOutput)
}

type GetDataCollectionRuleIdentity struct {
	// A list of User Assigned Managed Identity IDs to be assigned to this Data Collection Rule. Currently, up to 1 identity is supported.
	IdentityIds []string `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId string `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId string `pulumi:"tenantId"`
	// cSpecifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
	Type string `pulumi:"type"`
}

// GetDataCollectionRuleIdentityInput is an input type that accepts GetDataCollectionRuleIdentityArgs and GetDataCollectionRuleIdentityOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleIdentityInput` via:
//
//	GetDataCollectionRuleIdentityArgs{...}
type GetDataCollectionRuleIdentityInput interface {
	pulumi.Input

	ToGetDataCollectionRuleIdentityOutput() GetDataCollectionRuleIdentityOutput
	ToGetDataCollectionRuleIdentityOutputWithContext(context.Context) GetDataCollectionRuleIdentityOutput
}

type GetDataCollectionRuleIdentityArgs struct {
	// A list of User Assigned Managed Identity IDs to be assigned to this Data Collection Rule. Currently, up to 1 identity is supported.
	IdentityIds pulumi.StringArrayInput `pulumi:"identityIds"`
	// The Principal ID associated with this Managed Service Identity.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The Tenant ID associated with this Managed Service Identity.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// cSpecifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDataCollectionRuleIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleIdentity)(nil)).Elem()
}

func (i GetDataCollectionRuleIdentityArgs) ToGetDataCollectionRuleIdentityOutput() GetDataCollectionRuleIdentityOutput {
	return i.ToGetDataCollectionRuleIdentityOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleIdentityArgs) ToGetDataCollectionRuleIdentityOutputWithContext(ctx context.Context) GetDataCollectionRuleIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleIdentityOutput)
}

func (i GetDataCollectionRuleIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleIdentity] {
	return pulumix.Output[GetDataCollectionRuleIdentity]{
		OutputState: i.ToGetDataCollectionRuleIdentityOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleIdentityArrayInput is an input type that accepts GetDataCollectionRuleIdentityArray and GetDataCollectionRuleIdentityArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleIdentityArrayInput` via:
//
//	GetDataCollectionRuleIdentityArray{ GetDataCollectionRuleIdentityArgs{...} }
type GetDataCollectionRuleIdentityArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleIdentityArrayOutput() GetDataCollectionRuleIdentityArrayOutput
	ToGetDataCollectionRuleIdentityArrayOutputWithContext(context.Context) GetDataCollectionRuleIdentityArrayOutput
}

type GetDataCollectionRuleIdentityArray []GetDataCollectionRuleIdentityInput

func (GetDataCollectionRuleIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleIdentity)(nil)).Elem()
}

func (i GetDataCollectionRuleIdentityArray) ToGetDataCollectionRuleIdentityArrayOutput() GetDataCollectionRuleIdentityArrayOutput {
	return i.ToGetDataCollectionRuleIdentityArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleIdentityArray) ToGetDataCollectionRuleIdentityArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleIdentityArrayOutput)
}

func (i GetDataCollectionRuleIdentityArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleIdentity] {
	return pulumix.Output[[]GetDataCollectionRuleIdentity]{
		OutputState: i.ToGetDataCollectionRuleIdentityArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleIdentityOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleIdentity)(nil)).Elem()
}

func (o GetDataCollectionRuleIdentityOutput) ToGetDataCollectionRuleIdentityOutput() GetDataCollectionRuleIdentityOutput {
	return o
}

func (o GetDataCollectionRuleIdentityOutput) ToGetDataCollectionRuleIdentityOutputWithContext(ctx context.Context) GetDataCollectionRuleIdentityOutput {
	return o
}

func (o GetDataCollectionRuleIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleIdentity] {
	return pulumix.Output[GetDataCollectionRuleIdentity]{
		OutputState: o.OutputState,
	}
}

// A list of User Assigned Managed Identity IDs to be assigned to this Data Collection Rule. Currently, up to 1 identity is supported.
func (o GetDataCollectionRuleIdentityOutput) IdentityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleIdentity) []string { return v.IdentityIds }).(pulumi.StringArrayOutput)
}

// The Principal ID associated with this Managed Service Identity.
func (o GetDataCollectionRuleIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The Tenant ID associated with this Managed Service Identity.
func (o GetDataCollectionRuleIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// cSpecifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
func (o GetDataCollectionRuleIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleIdentity) string { return v.Type }).(pulumi.StringOutput)
}

type GetDataCollectionRuleIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleIdentity)(nil)).Elem()
}

func (o GetDataCollectionRuleIdentityArrayOutput) ToGetDataCollectionRuleIdentityArrayOutput() GetDataCollectionRuleIdentityArrayOutput {
	return o
}

func (o GetDataCollectionRuleIdentityArrayOutput) ToGetDataCollectionRuleIdentityArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleIdentityArrayOutput {
	return o
}

func (o GetDataCollectionRuleIdentityArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleIdentity] {
	return pulumix.Output[[]GetDataCollectionRuleIdentity]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleIdentityArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleIdentity {
		return vs[0].([]GetDataCollectionRuleIdentity)[vs[1].(int)]
	}).(GetDataCollectionRuleIdentityOutput)
}

type GetDataCollectionRuleStreamDeclaration struct {
	// One or more `column` blocks as defined above.
	Columns []GetDataCollectionRuleStreamDeclarationColumn `pulumi:"columns"`
	// The name of the custom stream. This name should be unique across all `streamDeclaration` blocks.
	StreamName string `pulumi:"streamName"`
}

// GetDataCollectionRuleStreamDeclarationInput is an input type that accepts GetDataCollectionRuleStreamDeclarationArgs and GetDataCollectionRuleStreamDeclarationOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleStreamDeclarationInput` via:
//
//	GetDataCollectionRuleStreamDeclarationArgs{...}
type GetDataCollectionRuleStreamDeclarationInput interface {
	pulumi.Input

	ToGetDataCollectionRuleStreamDeclarationOutput() GetDataCollectionRuleStreamDeclarationOutput
	ToGetDataCollectionRuleStreamDeclarationOutputWithContext(context.Context) GetDataCollectionRuleStreamDeclarationOutput
}

type GetDataCollectionRuleStreamDeclarationArgs struct {
	// One or more `column` blocks as defined above.
	Columns GetDataCollectionRuleStreamDeclarationColumnArrayInput `pulumi:"columns"`
	// The name of the custom stream. This name should be unique across all `streamDeclaration` blocks.
	StreamName pulumi.StringInput `pulumi:"streamName"`
}

func (GetDataCollectionRuleStreamDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleStreamDeclaration)(nil)).Elem()
}

func (i GetDataCollectionRuleStreamDeclarationArgs) ToGetDataCollectionRuleStreamDeclarationOutput() GetDataCollectionRuleStreamDeclarationOutput {
	return i.ToGetDataCollectionRuleStreamDeclarationOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleStreamDeclarationArgs) ToGetDataCollectionRuleStreamDeclarationOutputWithContext(ctx context.Context) GetDataCollectionRuleStreamDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleStreamDeclarationOutput)
}

func (i GetDataCollectionRuleStreamDeclarationArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleStreamDeclaration] {
	return pulumix.Output[GetDataCollectionRuleStreamDeclaration]{
		OutputState: i.ToGetDataCollectionRuleStreamDeclarationOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleStreamDeclarationArrayInput is an input type that accepts GetDataCollectionRuleStreamDeclarationArray and GetDataCollectionRuleStreamDeclarationArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleStreamDeclarationArrayInput` via:
//
//	GetDataCollectionRuleStreamDeclarationArray{ GetDataCollectionRuleStreamDeclarationArgs{...} }
type GetDataCollectionRuleStreamDeclarationArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleStreamDeclarationArrayOutput() GetDataCollectionRuleStreamDeclarationArrayOutput
	ToGetDataCollectionRuleStreamDeclarationArrayOutputWithContext(context.Context) GetDataCollectionRuleStreamDeclarationArrayOutput
}

type GetDataCollectionRuleStreamDeclarationArray []GetDataCollectionRuleStreamDeclarationInput

func (GetDataCollectionRuleStreamDeclarationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleStreamDeclaration)(nil)).Elem()
}

func (i GetDataCollectionRuleStreamDeclarationArray) ToGetDataCollectionRuleStreamDeclarationArrayOutput() GetDataCollectionRuleStreamDeclarationArrayOutput {
	return i.ToGetDataCollectionRuleStreamDeclarationArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleStreamDeclarationArray) ToGetDataCollectionRuleStreamDeclarationArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleStreamDeclarationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleStreamDeclarationArrayOutput)
}

func (i GetDataCollectionRuleStreamDeclarationArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleStreamDeclaration] {
	return pulumix.Output[[]GetDataCollectionRuleStreamDeclaration]{
		OutputState: i.ToGetDataCollectionRuleStreamDeclarationArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleStreamDeclarationOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleStreamDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleStreamDeclaration)(nil)).Elem()
}

func (o GetDataCollectionRuleStreamDeclarationOutput) ToGetDataCollectionRuleStreamDeclarationOutput() GetDataCollectionRuleStreamDeclarationOutput {
	return o
}

func (o GetDataCollectionRuleStreamDeclarationOutput) ToGetDataCollectionRuleStreamDeclarationOutputWithContext(ctx context.Context) GetDataCollectionRuleStreamDeclarationOutput {
	return o
}

func (o GetDataCollectionRuleStreamDeclarationOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleStreamDeclaration] {
	return pulumix.Output[GetDataCollectionRuleStreamDeclaration]{
		OutputState: o.OutputState,
	}
}

// One or more `column` blocks as defined above.
func (o GetDataCollectionRuleStreamDeclarationOutput) Columns() GetDataCollectionRuleStreamDeclarationColumnArrayOutput {
	return o.ApplyT(func(v GetDataCollectionRuleStreamDeclaration) []GetDataCollectionRuleStreamDeclarationColumn {
		return v.Columns
	}).(GetDataCollectionRuleStreamDeclarationColumnArrayOutput)
}

// The name of the custom stream. This name should be unique across all `streamDeclaration` blocks.
func (o GetDataCollectionRuleStreamDeclarationOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleStreamDeclaration) string { return v.StreamName }).(pulumi.StringOutput)
}

type GetDataCollectionRuleStreamDeclarationArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleStreamDeclarationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleStreamDeclaration)(nil)).Elem()
}

func (o GetDataCollectionRuleStreamDeclarationArrayOutput) ToGetDataCollectionRuleStreamDeclarationArrayOutput() GetDataCollectionRuleStreamDeclarationArrayOutput {
	return o
}

func (o GetDataCollectionRuleStreamDeclarationArrayOutput) ToGetDataCollectionRuleStreamDeclarationArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleStreamDeclarationArrayOutput {
	return o
}

func (o GetDataCollectionRuleStreamDeclarationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleStreamDeclaration] {
	return pulumix.Output[[]GetDataCollectionRuleStreamDeclaration]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleStreamDeclarationArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleStreamDeclarationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleStreamDeclaration {
		return vs[0].([]GetDataCollectionRuleStreamDeclaration)[vs[1].(int)]
	}).(GetDataCollectionRuleStreamDeclarationOutput)
}

type GetDataCollectionRuleStreamDeclarationColumn struct {
	// Specifies the name of the Data Collection Rule.
	Name string `pulumi:"name"`
	// cSpecifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
	Type string `pulumi:"type"`
}

// GetDataCollectionRuleStreamDeclarationColumnInput is an input type that accepts GetDataCollectionRuleStreamDeclarationColumnArgs and GetDataCollectionRuleStreamDeclarationColumnOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleStreamDeclarationColumnInput` via:
//
//	GetDataCollectionRuleStreamDeclarationColumnArgs{...}
type GetDataCollectionRuleStreamDeclarationColumnInput interface {
	pulumi.Input

	ToGetDataCollectionRuleStreamDeclarationColumnOutput() GetDataCollectionRuleStreamDeclarationColumnOutput
	ToGetDataCollectionRuleStreamDeclarationColumnOutputWithContext(context.Context) GetDataCollectionRuleStreamDeclarationColumnOutput
}

type GetDataCollectionRuleStreamDeclarationColumnArgs struct {
	// Specifies the name of the Data Collection Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// cSpecifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDataCollectionRuleStreamDeclarationColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleStreamDeclarationColumn)(nil)).Elem()
}

func (i GetDataCollectionRuleStreamDeclarationColumnArgs) ToGetDataCollectionRuleStreamDeclarationColumnOutput() GetDataCollectionRuleStreamDeclarationColumnOutput {
	return i.ToGetDataCollectionRuleStreamDeclarationColumnOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleStreamDeclarationColumnArgs) ToGetDataCollectionRuleStreamDeclarationColumnOutputWithContext(ctx context.Context) GetDataCollectionRuleStreamDeclarationColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleStreamDeclarationColumnOutput)
}

func (i GetDataCollectionRuleStreamDeclarationColumnArgs) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleStreamDeclarationColumn] {
	return pulumix.Output[GetDataCollectionRuleStreamDeclarationColumn]{
		OutputState: i.ToGetDataCollectionRuleStreamDeclarationColumnOutputWithContext(ctx).OutputState,
	}
}

// GetDataCollectionRuleStreamDeclarationColumnArrayInput is an input type that accepts GetDataCollectionRuleStreamDeclarationColumnArray and GetDataCollectionRuleStreamDeclarationColumnArrayOutput values.
// You can construct a concrete instance of `GetDataCollectionRuleStreamDeclarationColumnArrayInput` via:
//
//	GetDataCollectionRuleStreamDeclarationColumnArray{ GetDataCollectionRuleStreamDeclarationColumnArgs{...} }
type GetDataCollectionRuleStreamDeclarationColumnArrayInput interface {
	pulumi.Input

	ToGetDataCollectionRuleStreamDeclarationColumnArrayOutput() GetDataCollectionRuleStreamDeclarationColumnArrayOutput
	ToGetDataCollectionRuleStreamDeclarationColumnArrayOutputWithContext(context.Context) GetDataCollectionRuleStreamDeclarationColumnArrayOutput
}

type GetDataCollectionRuleStreamDeclarationColumnArray []GetDataCollectionRuleStreamDeclarationColumnInput

func (GetDataCollectionRuleStreamDeclarationColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleStreamDeclarationColumn)(nil)).Elem()
}

func (i GetDataCollectionRuleStreamDeclarationColumnArray) ToGetDataCollectionRuleStreamDeclarationColumnArrayOutput() GetDataCollectionRuleStreamDeclarationColumnArrayOutput {
	return i.ToGetDataCollectionRuleStreamDeclarationColumnArrayOutputWithContext(context.Background())
}

func (i GetDataCollectionRuleStreamDeclarationColumnArray) ToGetDataCollectionRuleStreamDeclarationColumnArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleStreamDeclarationColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataCollectionRuleStreamDeclarationColumnArrayOutput)
}

func (i GetDataCollectionRuleStreamDeclarationColumnArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleStreamDeclarationColumn] {
	return pulumix.Output[[]GetDataCollectionRuleStreamDeclarationColumn]{
		OutputState: i.ToGetDataCollectionRuleStreamDeclarationColumnArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDataCollectionRuleStreamDeclarationColumnOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleStreamDeclarationColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataCollectionRuleStreamDeclarationColumn)(nil)).Elem()
}

func (o GetDataCollectionRuleStreamDeclarationColumnOutput) ToGetDataCollectionRuleStreamDeclarationColumnOutput() GetDataCollectionRuleStreamDeclarationColumnOutput {
	return o
}

func (o GetDataCollectionRuleStreamDeclarationColumnOutput) ToGetDataCollectionRuleStreamDeclarationColumnOutputWithContext(ctx context.Context) GetDataCollectionRuleStreamDeclarationColumnOutput {
	return o
}

func (o GetDataCollectionRuleStreamDeclarationColumnOutput) ToOutput(ctx context.Context) pulumix.Output[GetDataCollectionRuleStreamDeclarationColumn] {
	return pulumix.Output[GetDataCollectionRuleStreamDeclarationColumn]{
		OutputState: o.OutputState,
	}
}

// Specifies the name of the Data Collection Rule.
func (o GetDataCollectionRuleStreamDeclarationColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleStreamDeclarationColumn) string { return v.Name }).(pulumi.StringOutput)
}

// cSpecifies the type of Managed Service Identity that should be configured on this Data Collection Rule. Possible values are `SystemAssigned` and `UserAssigned`.
func (o GetDataCollectionRuleStreamDeclarationColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataCollectionRuleStreamDeclarationColumn) string { return v.Type }).(pulumi.StringOutput)
}

type GetDataCollectionRuleStreamDeclarationColumnArrayOutput struct{ *pulumi.OutputState }

func (GetDataCollectionRuleStreamDeclarationColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataCollectionRuleStreamDeclarationColumn)(nil)).Elem()
}

func (o GetDataCollectionRuleStreamDeclarationColumnArrayOutput) ToGetDataCollectionRuleStreamDeclarationColumnArrayOutput() GetDataCollectionRuleStreamDeclarationColumnArrayOutput {
	return o
}

func (o GetDataCollectionRuleStreamDeclarationColumnArrayOutput) ToGetDataCollectionRuleStreamDeclarationColumnArrayOutputWithContext(ctx context.Context) GetDataCollectionRuleStreamDeclarationColumnArrayOutput {
	return o
}

func (o GetDataCollectionRuleStreamDeclarationColumnArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDataCollectionRuleStreamDeclarationColumn] {
	return pulumix.Output[[]GetDataCollectionRuleStreamDeclarationColumn]{
		OutputState: o.OutputState,
	}
}

func (o GetDataCollectionRuleStreamDeclarationColumnArrayOutput) Index(i pulumi.IntInput) GetDataCollectionRuleStreamDeclarationColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataCollectionRuleStreamDeclarationColumn {
		return vs[0].([]GetDataCollectionRuleStreamDeclarationColumn)[vs[1].(int)]
	}).(GetDataCollectionRuleStreamDeclarationColumnOutput)
}

type GetLogProfileRetentionPolicy struct {
	// The number of days for the retention policy.
	Days int `pulumi:"days"`
	// A boolean value indicating whether the retention policy is enabled.
	Enabled bool `pulumi:"enabled"`
}

// GetLogProfileRetentionPolicyInput is an input type that accepts GetLogProfileRetentionPolicyArgs and GetLogProfileRetentionPolicyOutput values.
// You can construct a concrete instance of `GetLogProfileRetentionPolicyInput` via:
//
//	GetLogProfileRetentionPolicyArgs{...}
type GetLogProfileRetentionPolicyInput interface {
	pulumi.Input

	ToGetLogProfileRetentionPolicyOutput() GetLogProfileRetentionPolicyOutput
	ToGetLogProfileRetentionPolicyOutputWithContext(context.Context) GetLogProfileRetentionPolicyOutput
}

type GetLogProfileRetentionPolicyArgs struct {
	// The number of days for the retention policy.
	Days pulumi.IntInput `pulumi:"days"`
	// A boolean value indicating whether the retention policy is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (GetLogProfileRetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogProfileRetentionPolicy)(nil)).Elem()
}

func (i GetLogProfileRetentionPolicyArgs) ToGetLogProfileRetentionPolicyOutput() GetLogProfileRetentionPolicyOutput {
	return i.ToGetLogProfileRetentionPolicyOutputWithContext(context.Background())
}

func (i GetLogProfileRetentionPolicyArgs) ToGetLogProfileRetentionPolicyOutputWithContext(ctx context.Context) GetLogProfileRetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogProfileRetentionPolicyOutput)
}

func (i GetLogProfileRetentionPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[GetLogProfileRetentionPolicy] {
	return pulumix.Output[GetLogProfileRetentionPolicy]{
		OutputState: i.ToGetLogProfileRetentionPolicyOutputWithContext(ctx).OutputState,
	}
}

// GetLogProfileRetentionPolicyArrayInput is an input type that accepts GetLogProfileRetentionPolicyArray and GetLogProfileRetentionPolicyArrayOutput values.
// You can construct a concrete instance of `GetLogProfileRetentionPolicyArrayInput` via:
//
//	GetLogProfileRetentionPolicyArray{ GetLogProfileRetentionPolicyArgs{...} }
type GetLogProfileRetentionPolicyArrayInput interface {
	pulumi.Input

	ToGetLogProfileRetentionPolicyArrayOutput() GetLogProfileRetentionPolicyArrayOutput
	ToGetLogProfileRetentionPolicyArrayOutputWithContext(context.Context) GetLogProfileRetentionPolicyArrayOutput
}

type GetLogProfileRetentionPolicyArray []GetLogProfileRetentionPolicyInput

func (GetLogProfileRetentionPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogProfileRetentionPolicy)(nil)).Elem()
}

func (i GetLogProfileRetentionPolicyArray) ToGetLogProfileRetentionPolicyArrayOutput() GetLogProfileRetentionPolicyArrayOutput {
	return i.ToGetLogProfileRetentionPolicyArrayOutputWithContext(context.Background())
}

func (i GetLogProfileRetentionPolicyArray) ToGetLogProfileRetentionPolicyArrayOutputWithContext(ctx context.Context) GetLogProfileRetentionPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLogProfileRetentionPolicyArrayOutput)
}

func (i GetLogProfileRetentionPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLogProfileRetentionPolicy] {
	return pulumix.Output[[]GetLogProfileRetentionPolicy]{
		OutputState: i.ToGetLogProfileRetentionPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLogProfileRetentionPolicyOutput struct{ *pulumi.OutputState }

func (GetLogProfileRetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLogProfileRetentionPolicy)(nil)).Elem()
}

func (o GetLogProfileRetentionPolicyOutput) ToGetLogProfileRetentionPolicyOutput() GetLogProfileRetentionPolicyOutput {
	return o
}

func (o GetLogProfileRetentionPolicyOutput) ToGetLogProfileRetentionPolicyOutputWithContext(ctx context.Context) GetLogProfileRetentionPolicyOutput {
	return o
}

func (o GetLogProfileRetentionPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetLogProfileRetentionPolicy] {
	return pulumix.Output[GetLogProfileRetentionPolicy]{
		OutputState: o.OutputState,
	}
}

// The number of days for the retention policy.
func (o GetLogProfileRetentionPolicyOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v GetLogProfileRetentionPolicy) int { return v.Days }).(pulumi.IntOutput)
}

// A boolean value indicating whether the retention policy is enabled.
func (o GetLogProfileRetentionPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLogProfileRetentionPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type GetLogProfileRetentionPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetLogProfileRetentionPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLogProfileRetentionPolicy)(nil)).Elem()
}

func (o GetLogProfileRetentionPolicyArrayOutput) ToGetLogProfileRetentionPolicyArrayOutput() GetLogProfileRetentionPolicyArrayOutput {
	return o
}

func (o GetLogProfileRetentionPolicyArrayOutput) ToGetLogProfileRetentionPolicyArrayOutputWithContext(ctx context.Context) GetLogProfileRetentionPolicyArrayOutput {
	return o
}

func (o GetLogProfileRetentionPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLogProfileRetentionPolicy] {
	return pulumix.Output[[]GetLogProfileRetentionPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetLogProfileRetentionPolicyArrayOutput) Index(i pulumi.IntInput) GetLogProfileRetentionPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLogProfileRetentionPolicy {
		return vs[0].([]GetLogProfileRetentionPolicy)[vs[1].(int)]
	}).(GetLogProfileRetentionPolicyOutput)
}

type GetScheduledQueryRulesAlertAction struct {
	// List of action group reference resource IDs.
	ActionGroups []string `pulumi:"actionGroups"`
	// Custom payload to be sent for all webhook URI in Azure action group.
	CustomWebhookPayload string `pulumi:"customWebhookPayload"`
	// Custom subject override for all email IDs in Azure action group.
	EmailSubject string `pulumi:"emailSubject"`
}

// GetScheduledQueryRulesAlertActionInput is an input type that accepts GetScheduledQueryRulesAlertActionArgs and GetScheduledQueryRulesAlertActionOutput values.
// You can construct a concrete instance of `GetScheduledQueryRulesAlertActionInput` via:
//
//	GetScheduledQueryRulesAlertActionArgs{...}
type GetScheduledQueryRulesAlertActionInput interface {
	pulumi.Input

	ToGetScheduledQueryRulesAlertActionOutput() GetScheduledQueryRulesAlertActionOutput
	ToGetScheduledQueryRulesAlertActionOutputWithContext(context.Context) GetScheduledQueryRulesAlertActionOutput
}

type GetScheduledQueryRulesAlertActionArgs struct {
	// List of action group reference resource IDs.
	ActionGroups pulumi.StringArrayInput `pulumi:"actionGroups"`
	// Custom payload to be sent for all webhook URI in Azure action group.
	CustomWebhookPayload pulumi.StringInput `pulumi:"customWebhookPayload"`
	// Custom subject override for all email IDs in Azure action group.
	EmailSubject pulumi.StringInput `pulumi:"emailSubject"`
}

func (GetScheduledQueryRulesAlertActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduledQueryRulesAlertAction)(nil)).Elem()
}

func (i GetScheduledQueryRulesAlertActionArgs) ToGetScheduledQueryRulesAlertActionOutput() GetScheduledQueryRulesAlertActionOutput {
	return i.ToGetScheduledQueryRulesAlertActionOutputWithContext(context.Background())
}

func (i GetScheduledQueryRulesAlertActionArgs) ToGetScheduledQueryRulesAlertActionOutputWithContext(ctx context.Context) GetScheduledQueryRulesAlertActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduledQueryRulesAlertActionOutput)
}

func (i GetScheduledQueryRulesAlertActionArgs) ToOutput(ctx context.Context) pulumix.Output[GetScheduledQueryRulesAlertAction] {
	return pulumix.Output[GetScheduledQueryRulesAlertAction]{
		OutputState: i.ToGetScheduledQueryRulesAlertActionOutputWithContext(ctx).OutputState,
	}
}

// GetScheduledQueryRulesAlertActionArrayInput is an input type that accepts GetScheduledQueryRulesAlertActionArray and GetScheduledQueryRulesAlertActionArrayOutput values.
// You can construct a concrete instance of `GetScheduledQueryRulesAlertActionArrayInput` via:
//
//	GetScheduledQueryRulesAlertActionArray{ GetScheduledQueryRulesAlertActionArgs{...} }
type GetScheduledQueryRulesAlertActionArrayInput interface {
	pulumi.Input

	ToGetScheduledQueryRulesAlertActionArrayOutput() GetScheduledQueryRulesAlertActionArrayOutput
	ToGetScheduledQueryRulesAlertActionArrayOutputWithContext(context.Context) GetScheduledQueryRulesAlertActionArrayOutput
}

type GetScheduledQueryRulesAlertActionArray []GetScheduledQueryRulesAlertActionInput

func (GetScheduledQueryRulesAlertActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduledQueryRulesAlertAction)(nil)).Elem()
}

func (i GetScheduledQueryRulesAlertActionArray) ToGetScheduledQueryRulesAlertActionArrayOutput() GetScheduledQueryRulesAlertActionArrayOutput {
	return i.ToGetScheduledQueryRulesAlertActionArrayOutputWithContext(context.Background())
}

func (i GetScheduledQueryRulesAlertActionArray) ToGetScheduledQueryRulesAlertActionArrayOutputWithContext(ctx context.Context) GetScheduledQueryRulesAlertActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduledQueryRulesAlertActionArrayOutput)
}

func (i GetScheduledQueryRulesAlertActionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetScheduledQueryRulesAlertAction] {
	return pulumix.Output[[]GetScheduledQueryRulesAlertAction]{
		OutputState: i.ToGetScheduledQueryRulesAlertActionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetScheduledQueryRulesAlertActionOutput struct{ *pulumi.OutputState }

func (GetScheduledQueryRulesAlertActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduledQueryRulesAlertAction)(nil)).Elem()
}

func (o GetScheduledQueryRulesAlertActionOutput) ToGetScheduledQueryRulesAlertActionOutput() GetScheduledQueryRulesAlertActionOutput {
	return o
}

func (o GetScheduledQueryRulesAlertActionOutput) ToGetScheduledQueryRulesAlertActionOutputWithContext(ctx context.Context) GetScheduledQueryRulesAlertActionOutput {
	return o
}

func (o GetScheduledQueryRulesAlertActionOutput) ToOutput(ctx context.Context) pulumix.Output[GetScheduledQueryRulesAlertAction] {
	return pulumix.Output[GetScheduledQueryRulesAlertAction]{
		OutputState: o.OutputState,
	}
}

// List of action group reference resource IDs.
func (o GetScheduledQueryRulesAlertActionOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetScheduledQueryRulesAlertAction) []string { return v.ActionGroups }).(pulumi.StringArrayOutput)
}

// Custom payload to be sent for all webhook URI in Azure action group.
func (o GetScheduledQueryRulesAlertActionOutput) CustomWebhookPayload() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduledQueryRulesAlertAction) string { return v.CustomWebhookPayload }).(pulumi.StringOutput)
}

// Custom subject override for all email IDs in Azure action group.
func (o GetScheduledQueryRulesAlertActionOutput) EmailSubject() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduledQueryRulesAlertAction) string { return v.EmailSubject }).(pulumi.StringOutput)
}

type GetScheduledQueryRulesAlertActionArrayOutput struct{ *pulumi.OutputState }

func (GetScheduledQueryRulesAlertActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduledQueryRulesAlertAction)(nil)).Elem()
}

func (o GetScheduledQueryRulesAlertActionArrayOutput) ToGetScheduledQueryRulesAlertActionArrayOutput() GetScheduledQueryRulesAlertActionArrayOutput {
	return o
}

func (o GetScheduledQueryRulesAlertActionArrayOutput) ToGetScheduledQueryRulesAlertActionArrayOutputWithContext(ctx context.Context) GetScheduledQueryRulesAlertActionArrayOutput {
	return o
}

func (o GetScheduledQueryRulesAlertActionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetScheduledQueryRulesAlertAction] {
	return pulumix.Output[[]GetScheduledQueryRulesAlertAction]{
		OutputState: o.OutputState,
	}
}

func (o GetScheduledQueryRulesAlertActionArrayOutput) Index(i pulumi.IntInput) GetScheduledQueryRulesAlertActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetScheduledQueryRulesAlertAction {
		return vs[0].([]GetScheduledQueryRulesAlertAction)[vs[1].(int)]
	}).(GetScheduledQueryRulesAlertActionOutput)
}

type GetScheduledQueryRulesAlertTrigger struct {
	MetricTriggers []GetScheduledQueryRulesAlertTriggerMetricTrigger `pulumi:"metricTriggers"`
	// Evaluation operation for rule.
	Operator string `pulumi:"operator"`
	// Result or count threshold based on which rule should be triggered.
	Threshold float64 `pulumi:"threshold"`
}

// GetScheduledQueryRulesAlertTriggerInput is an input type that accepts GetScheduledQueryRulesAlertTriggerArgs and GetScheduledQueryRulesAlertTriggerOutput values.
// You can construct a concrete instance of `GetScheduledQueryRulesAlertTriggerInput` via:
//
//	GetScheduledQueryRulesAlertTriggerArgs{...}
type GetScheduledQueryRulesAlertTriggerInput interface {
	pulumi.Input

	ToGetScheduledQueryRulesAlertTriggerOutput() GetScheduledQueryRulesAlertTriggerOutput
	ToGetScheduledQueryRulesAlertTriggerOutputWithContext(context.Context) GetScheduledQueryRulesAlertTriggerOutput
}

type GetScheduledQueryRulesAlertTriggerArgs struct {
	MetricTriggers GetScheduledQueryRulesAlertTriggerMetricTriggerArrayInput `pulumi:"metricTriggers"`
	// Evaluation operation for rule.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Result or count threshold based on which rule should be triggered.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
}

func (GetScheduledQueryRulesAlertTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduledQueryRulesAlertTrigger)(nil)).Elem()
}

func (i GetScheduledQueryRulesAlertTriggerArgs) ToGetScheduledQueryRulesAlertTriggerOutput() GetScheduledQueryRulesAlertTriggerOutput {
	return i.ToGetScheduledQueryRulesAlertTriggerOutputWithContext(context.Background())
}

func (i GetScheduledQueryRulesAlertTriggerArgs) ToGetScheduledQueryRulesAlertTriggerOutputWithContext(ctx context.Context) GetScheduledQueryRulesAlertTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduledQueryRulesAlertTriggerOutput)
}

func (i GetScheduledQueryRulesAlertTriggerArgs) ToOutput(ctx context.Context) pulumix.Output[GetScheduledQueryRulesAlertTrigger] {
	return pulumix.Output[GetScheduledQueryRulesAlertTrigger]{
		OutputState: i.ToGetScheduledQueryRulesAlertTriggerOutputWithContext(ctx).OutputState,
	}
}

// GetScheduledQueryRulesAlertTriggerArrayInput is an input type that accepts GetScheduledQueryRulesAlertTriggerArray and GetScheduledQueryRulesAlertTriggerArrayOutput values.
// You can construct a concrete instance of `GetScheduledQueryRulesAlertTriggerArrayInput` via:
//
//	GetScheduledQueryRulesAlertTriggerArray{ GetScheduledQueryRulesAlertTriggerArgs{...} }
type GetScheduledQueryRulesAlertTriggerArrayInput interface {
	pulumi.Input

	ToGetScheduledQueryRulesAlertTriggerArrayOutput() GetScheduledQueryRulesAlertTriggerArrayOutput
	ToGetScheduledQueryRulesAlertTriggerArrayOutputWithContext(context.Context) GetScheduledQueryRulesAlertTriggerArrayOutput
}

type GetScheduledQueryRulesAlertTriggerArray []GetScheduledQueryRulesAlertTriggerInput

func (GetScheduledQueryRulesAlertTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduledQueryRulesAlertTrigger)(nil)).Elem()
}

func (i GetScheduledQueryRulesAlertTriggerArray) ToGetScheduledQueryRulesAlertTriggerArrayOutput() GetScheduledQueryRulesAlertTriggerArrayOutput {
	return i.ToGetScheduledQueryRulesAlertTriggerArrayOutputWithContext(context.Background())
}

func (i GetScheduledQueryRulesAlertTriggerArray) ToGetScheduledQueryRulesAlertTriggerArrayOutputWithContext(ctx context.Context) GetScheduledQueryRulesAlertTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduledQueryRulesAlertTriggerArrayOutput)
}

func (i GetScheduledQueryRulesAlertTriggerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetScheduledQueryRulesAlertTrigger] {
	return pulumix.Output[[]GetScheduledQueryRulesAlertTrigger]{
		OutputState: i.ToGetScheduledQueryRulesAlertTriggerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetScheduledQueryRulesAlertTriggerOutput struct{ *pulumi.OutputState }

func (GetScheduledQueryRulesAlertTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduledQueryRulesAlertTrigger)(nil)).Elem()
}

func (o GetScheduledQueryRulesAlertTriggerOutput) ToGetScheduledQueryRulesAlertTriggerOutput() GetScheduledQueryRulesAlertTriggerOutput {
	return o
}

func (o GetScheduledQueryRulesAlertTriggerOutput) ToGetScheduledQueryRulesAlertTriggerOutputWithContext(ctx context.Context) GetScheduledQueryRulesAlertTriggerOutput {
	return o
}

func (o GetScheduledQueryRulesAlertTriggerOutput) ToOutput(ctx context.Context) pulumix.Output[GetScheduledQueryRulesAlertTrigger] {
	return pulumix.Output[GetScheduledQueryRulesAlertTrigger]{
		OutputState: o.OutputState,
	}
}

func (o GetScheduledQueryRulesAlertTriggerOutput) MetricTriggers() GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput {
	return o.ApplyT(func(v GetScheduledQueryRulesAlertTrigger) []GetScheduledQueryRulesAlertTriggerMetricTrigger {
		return v.MetricTriggers
	}).(GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput)
}

// Evaluation operation for rule.
func (o GetScheduledQueryRulesAlertTriggerOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduledQueryRulesAlertTrigger) string { return v.Operator }).(pulumi.StringOutput)
}

// Result or count threshold based on which rule should be triggered.
func (o GetScheduledQueryRulesAlertTriggerOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v GetScheduledQueryRulesAlertTrigger) float64 { return v.Threshold }).(pulumi.Float64Output)
}

type GetScheduledQueryRulesAlertTriggerArrayOutput struct{ *pulumi.OutputState }

func (GetScheduledQueryRulesAlertTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduledQueryRulesAlertTrigger)(nil)).Elem()
}

func (o GetScheduledQueryRulesAlertTriggerArrayOutput) ToGetScheduledQueryRulesAlertTriggerArrayOutput() GetScheduledQueryRulesAlertTriggerArrayOutput {
	return o
}

func (o GetScheduledQueryRulesAlertTriggerArrayOutput) ToGetScheduledQueryRulesAlertTriggerArrayOutputWithContext(ctx context.Context) GetScheduledQueryRulesAlertTriggerArrayOutput {
	return o
}

func (o GetScheduledQueryRulesAlertTriggerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetScheduledQueryRulesAlertTrigger] {
	return pulumix.Output[[]GetScheduledQueryRulesAlertTrigger]{
		OutputState: o.OutputState,
	}
}

func (o GetScheduledQueryRulesAlertTriggerArrayOutput) Index(i pulumi.IntInput) GetScheduledQueryRulesAlertTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetScheduledQueryRulesAlertTrigger {
		return vs[0].([]GetScheduledQueryRulesAlertTrigger)[vs[1].(int)]
	}).(GetScheduledQueryRulesAlertTriggerOutput)
}

type GetScheduledQueryRulesAlertTriggerMetricTrigger struct {
	MetricColumn      string `pulumi:"metricColumn"`
	MetricTriggerType string `pulumi:"metricTriggerType"`
	// Evaluation operation for rule.
	Operator string `pulumi:"operator"`
	// Result or count threshold based on which rule should be triggered.
	Threshold float64 `pulumi:"threshold"`
}

// GetScheduledQueryRulesAlertTriggerMetricTriggerInput is an input type that accepts GetScheduledQueryRulesAlertTriggerMetricTriggerArgs and GetScheduledQueryRulesAlertTriggerMetricTriggerOutput values.
// You can construct a concrete instance of `GetScheduledQueryRulesAlertTriggerMetricTriggerInput` via:
//
//	GetScheduledQueryRulesAlertTriggerMetricTriggerArgs{...}
type GetScheduledQueryRulesAlertTriggerMetricTriggerInput interface {
	pulumi.Input

	ToGetScheduledQueryRulesAlertTriggerMetricTriggerOutput() GetScheduledQueryRulesAlertTriggerMetricTriggerOutput
	ToGetScheduledQueryRulesAlertTriggerMetricTriggerOutputWithContext(context.Context) GetScheduledQueryRulesAlertTriggerMetricTriggerOutput
}

type GetScheduledQueryRulesAlertTriggerMetricTriggerArgs struct {
	MetricColumn      pulumi.StringInput `pulumi:"metricColumn"`
	MetricTriggerType pulumi.StringInput `pulumi:"metricTriggerType"`
	// Evaluation operation for rule.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Result or count threshold based on which rule should be triggered.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
}

func (GetScheduledQueryRulesAlertTriggerMetricTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduledQueryRulesAlertTriggerMetricTrigger)(nil)).Elem()
}

func (i GetScheduledQueryRulesAlertTriggerMetricTriggerArgs) ToGetScheduledQueryRulesAlertTriggerMetricTriggerOutput() GetScheduledQueryRulesAlertTriggerMetricTriggerOutput {
	return i.ToGetScheduledQueryRulesAlertTriggerMetricTriggerOutputWithContext(context.Background())
}

func (i GetScheduledQueryRulesAlertTriggerMetricTriggerArgs) ToGetScheduledQueryRulesAlertTriggerMetricTriggerOutputWithContext(ctx context.Context) GetScheduledQueryRulesAlertTriggerMetricTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduledQueryRulesAlertTriggerMetricTriggerOutput)
}

func (i GetScheduledQueryRulesAlertTriggerMetricTriggerArgs) ToOutput(ctx context.Context) pulumix.Output[GetScheduledQueryRulesAlertTriggerMetricTrigger] {
	return pulumix.Output[GetScheduledQueryRulesAlertTriggerMetricTrigger]{
		OutputState: i.ToGetScheduledQueryRulesAlertTriggerMetricTriggerOutputWithContext(ctx).OutputState,
	}
}

// GetScheduledQueryRulesAlertTriggerMetricTriggerArrayInput is an input type that accepts GetScheduledQueryRulesAlertTriggerMetricTriggerArray and GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput values.
// You can construct a concrete instance of `GetScheduledQueryRulesAlertTriggerMetricTriggerArrayInput` via:
//
//	GetScheduledQueryRulesAlertTriggerMetricTriggerArray{ GetScheduledQueryRulesAlertTriggerMetricTriggerArgs{...} }
type GetScheduledQueryRulesAlertTriggerMetricTriggerArrayInput interface {
	pulumi.Input

	ToGetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput() GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput
	ToGetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutputWithContext(context.Context) GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput
}

type GetScheduledQueryRulesAlertTriggerMetricTriggerArray []GetScheduledQueryRulesAlertTriggerMetricTriggerInput

func (GetScheduledQueryRulesAlertTriggerMetricTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduledQueryRulesAlertTriggerMetricTrigger)(nil)).Elem()
}

func (i GetScheduledQueryRulesAlertTriggerMetricTriggerArray) ToGetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput() GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput {
	return i.ToGetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutputWithContext(context.Background())
}

func (i GetScheduledQueryRulesAlertTriggerMetricTriggerArray) ToGetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutputWithContext(ctx context.Context) GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput)
}

func (i GetScheduledQueryRulesAlertTriggerMetricTriggerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetScheduledQueryRulesAlertTriggerMetricTrigger] {
	return pulumix.Output[[]GetScheduledQueryRulesAlertTriggerMetricTrigger]{
		OutputState: i.ToGetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetScheduledQueryRulesAlertTriggerMetricTriggerOutput struct{ *pulumi.OutputState }

func (GetScheduledQueryRulesAlertTriggerMetricTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduledQueryRulesAlertTriggerMetricTrigger)(nil)).Elem()
}

func (o GetScheduledQueryRulesAlertTriggerMetricTriggerOutput) ToGetScheduledQueryRulesAlertTriggerMetricTriggerOutput() GetScheduledQueryRulesAlertTriggerMetricTriggerOutput {
	return o
}

func (o GetScheduledQueryRulesAlertTriggerMetricTriggerOutput) ToGetScheduledQueryRulesAlertTriggerMetricTriggerOutputWithContext(ctx context.Context) GetScheduledQueryRulesAlertTriggerMetricTriggerOutput {
	return o
}

func (o GetScheduledQueryRulesAlertTriggerMetricTriggerOutput) ToOutput(ctx context.Context) pulumix.Output[GetScheduledQueryRulesAlertTriggerMetricTrigger] {
	return pulumix.Output[GetScheduledQueryRulesAlertTriggerMetricTrigger]{
		OutputState: o.OutputState,
	}
}

func (o GetScheduledQueryRulesAlertTriggerMetricTriggerOutput) MetricColumn() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduledQueryRulesAlertTriggerMetricTrigger) string { return v.MetricColumn }).(pulumi.StringOutput)
}

func (o GetScheduledQueryRulesAlertTriggerMetricTriggerOutput) MetricTriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduledQueryRulesAlertTriggerMetricTrigger) string { return v.MetricTriggerType }).(pulumi.StringOutput)
}

// Evaluation operation for rule.
func (o GetScheduledQueryRulesAlertTriggerMetricTriggerOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduledQueryRulesAlertTriggerMetricTrigger) string { return v.Operator }).(pulumi.StringOutput)
}

// Result or count threshold based on which rule should be triggered.
func (o GetScheduledQueryRulesAlertTriggerMetricTriggerOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v GetScheduledQueryRulesAlertTriggerMetricTrigger) float64 { return v.Threshold }).(pulumi.Float64Output)
}

type GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput struct{ *pulumi.OutputState }

func (GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduledQueryRulesAlertTriggerMetricTrigger)(nil)).Elem()
}

func (o GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput) ToGetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput() GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput {
	return o
}

func (o GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput) ToGetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutputWithContext(ctx context.Context) GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput {
	return o
}

func (o GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetScheduledQueryRulesAlertTriggerMetricTrigger] {
	return pulumix.Output[[]GetScheduledQueryRulesAlertTriggerMetricTrigger]{
		OutputState: o.OutputState,
	}
}

func (o GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput) Index(i pulumi.IntInput) GetScheduledQueryRulesAlertTriggerMetricTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetScheduledQueryRulesAlertTriggerMetricTrigger {
		return vs[0].([]GetScheduledQueryRulesAlertTriggerMetricTrigger)[vs[1].(int)]
	}).(GetScheduledQueryRulesAlertTriggerMetricTriggerOutput)
}

type GetScheduledQueryRulesLogCriteria struct {
	// A `dimension` block as defined below.
	Dimensions []GetScheduledQueryRulesLogCriteriaDimension `pulumi:"dimensions"`
	// Name of the metric.
	MetricName string `pulumi:"metricName"`
}

// GetScheduledQueryRulesLogCriteriaInput is an input type that accepts GetScheduledQueryRulesLogCriteriaArgs and GetScheduledQueryRulesLogCriteriaOutput values.
// You can construct a concrete instance of `GetScheduledQueryRulesLogCriteriaInput` via:
//
//	GetScheduledQueryRulesLogCriteriaArgs{...}
type GetScheduledQueryRulesLogCriteriaInput interface {
	pulumi.Input

	ToGetScheduledQueryRulesLogCriteriaOutput() GetScheduledQueryRulesLogCriteriaOutput
	ToGetScheduledQueryRulesLogCriteriaOutputWithContext(context.Context) GetScheduledQueryRulesLogCriteriaOutput
}

type GetScheduledQueryRulesLogCriteriaArgs struct {
	// A `dimension` block as defined below.
	Dimensions GetScheduledQueryRulesLogCriteriaDimensionArrayInput `pulumi:"dimensions"`
	// Name of the metric.
	MetricName pulumi.StringInput `pulumi:"metricName"`
}

func (GetScheduledQueryRulesLogCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduledQueryRulesLogCriteria)(nil)).Elem()
}

func (i GetScheduledQueryRulesLogCriteriaArgs) ToGetScheduledQueryRulesLogCriteriaOutput() GetScheduledQueryRulesLogCriteriaOutput {
	return i.ToGetScheduledQueryRulesLogCriteriaOutputWithContext(context.Background())
}

func (i GetScheduledQueryRulesLogCriteriaArgs) ToGetScheduledQueryRulesLogCriteriaOutputWithContext(ctx context.Context) GetScheduledQueryRulesLogCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduledQueryRulesLogCriteriaOutput)
}

func (i GetScheduledQueryRulesLogCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[GetScheduledQueryRulesLogCriteria] {
	return pulumix.Output[GetScheduledQueryRulesLogCriteria]{
		OutputState: i.ToGetScheduledQueryRulesLogCriteriaOutputWithContext(ctx).OutputState,
	}
}

// GetScheduledQueryRulesLogCriteriaArrayInput is an input type that accepts GetScheduledQueryRulesLogCriteriaArray and GetScheduledQueryRulesLogCriteriaArrayOutput values.
// You can construct a concrete instance of `GetScheduledQueryRulesLogCriteriaArrayInput` via:
//
//	GetScheduledQueryRulesLogCriteriaArray{ GetScheduledQueryRulesLogCriteriaArgs{...} }
type GetScheduledQueryRulesLogCriteriaArrayInput interface {
	pulumi.Input

	ToGetScheduledQueryRulesLogCriteriaArrayOutput() GetScheduledQueryRulesLogCriteriaArrayOutput
	ToGetScheduledQueryRulesLogCriteriaArrayOutputWithContext(context.Context) GetScheduledQueryRulesLogCriteriaArrayOutput
}

type GetScheduledQueryRulesLogCriteriaArray []GetScheduledQueryRulesLogCriteriaInput

func (GetScheduledQueryRulesLogCriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduledQueryRulesLogCriteria)(nil)).Elem()
}

func (i GetScheduledQueryRulesLogCriteriaArray) ToGetScheduledQueryRulesLogCriteriaArrayOutput() GetScheduledQueryRulesLogCriteriaArrayOutput {
	return i.ToGetScheduledQueryRulesLogCriteriaArrayOutputWithContext(context.Background())
}

func (i GetScheduledQueryRulesLogCriteriaArray) ToGetScheduledQueryRulesLogCriteriaArrayOutputWithContext(ctx context.Context) GetScheduledQueryRulesLogCriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduledQueryRulesLogCriteriaArrayOutput)
}

func (i GetScheduledQueryRulesLogCriteriaArray) ToOutput(ctx context.Context) pulumix.Output[[]GetScheduledQueryRulesLogCriteria] {
	return pulumix.Output[[]GetScheduledQueryRulesLogCriteria]{
		OutputState: i.ToGetScheduledQueryRulesLogCriteriaArrayOutputWithContext(ctx).OutputState,
	}
}

type GetScheduledQueryRulesLogCriteriaOutput struct{ *pulumi.OutputState }

func (GetScheduledQueryRulesLogCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduledQueryRulesLogCriteria)(nil)).Elem()
}

func (o GetScheduledQueryRulesLogCriteriaOutput) ToGetScheduledQueryRulesLogCriteriaOutput() GetScheduledQueryRulesLogCriteriaOutput {
	return o
}

func (o GetScheduledQueryRulesLogCriteriaOutput) ToGetScheduledQueryRulesLogCriteriaOutputWithContext(ctx context.Context) GetScheduledQueryRulesLogCriteriaOutput {
	return o
}

func (o GetScheduledQueryRulesLogCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[GetScheduledQueryRulesLogCriteria] {
	return pulumix.Output[GetScheduledQueryRulesLogCriteria]{
		OutputState: o.OutputState,
	}
}

// A `dimension` block as defined below.
func (o GetScheduledQueryRulesLogCriteriaOutput) Dimensions() GetScheduledQueryRulesLogCriteriaDimensionArrayOutput {
	return o.ApplyT(func(v GetScheduledQueryRulesLogCriteria) []GetScheduledQueryRulesLogCriteriaDimension {
		return v.Dimensions
	}).(GetScheduledQueryRulesLogCriteriaDimensionArrayOutput)
}

// Name of the metric.
func (o GetScheduledQueryRulesLogCriteriaOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduledQueryRulesLogCriteria) string { return v.MetricName }).(pulumi.StringOutput)
}

type GetScheduledQueryRulesLogCriteriaArrayOutput struct{ *pulumi.OutputState }

func (GetScheduledQueryRulesLogCriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduledQueryRulesLogCriteria)(nil)).Elem()
}

func (o GetScheduledQueryRulesLogCriteriaArrayOutput) ToGetScheduledQueryRulesLogCriteriaArrayOutput() GetScheduledQueryRulesLogCriteriaArrayOutput {
	return o
}

func (o GetScheduledQueryRulesLogCriteriaArrayOutput) ToGetScheduledQueryRulesLogCriteriaArrayOutputWithContext(ctx context.Context) GetScheduledQueryRulesLogCriteriaArrayOutput {
	return o
}

func (o GetScheduledQueryRulesLogCriteriaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetScheduledQueryRulesLogCriteria] {
	return pulumix.Output[[]GetScheduledQueryRulesLogCriteria]{
		OutputState: o.OutputState,
	}
}

func (o GetScheduledQueryRulesLogCriteriaArrayOutput) Index(i pulumi.IntInput) GetScheduledQueryRulesLogCriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetScheduledQueryRulesLogCriteria {
		return vs[0].([]GetScheduledQueryRulesLogCriteria)[vs[1].(int)]
	}).(GetScheduledQueryRulesLogCriteriaOutput)
}

type GetScheduledQueryRulesLogCriteriaDimension struct {
	// Specifies the name of the scheduled query rule.
	Name string `pulumi:"name"`
	// Operator for dimension values.
	Operator string `pulumi:"operator"`
	// List of dimension values.
	Values []string `pulumi:"values"`
}

// GetScheduledQueryRulesLogCriteriaDimensionInput is an input type that accepts GetScheduledQueryRulesLogCriteriaDimensionArgs and GetScheduledQueryRulesLogCriteriaDimensionOutput values.
// You can construct a concrete instance of `GetScheduledQueryRulesLogCriteriaDimensionInput` via:
//
//	GetScheduledQueryRulesLogCriteriaDimensionArgs{...}
type GetScheduledQueryRulesLogCriteriaDimensionInput interface {
	pulumi.Input

	ToGetScheduledQueryRulesLogCriteriaDimensionOutput() GetScheduledQueryRulesLogCriteriaDimensionOutput
	ToGetScheduledQueryRulesLogCriteriaDimensionOutputWithContext(context.Context) GetScheduledQueryRulesLogCriteriaDimensionOutput
}

type GetScheduledQueryRulesLogCriteriaDimensionArgs struct {
	// Specifies the name of the scheduled query rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Operator for dimension values.
	Operator pulumi.StringInput `pulumi:"operator"`
	// List of dimension values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetScheduledQueryRulesLogCriteriaDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduledQueryRulesLogCriteriaDimension)(nil)).Elem()
}

func (i GetScheduledQueryRulesLogCriteriaDimensionArgs) ToGetScheduledQueryRulesLogCriteriaDimensionOutput() GetScheduledQueryRulesLogCriteriaDimensionOutput {
	return i.ToGetScheduledQueryRulesLogCriteriaDimensionOutputWithContext(context.Background())
}

func (i GetScheduledQueryRulesLogCriteriaDimensionArgs) ToGetScheduledQueryRulesLogCriteriaDimensionOutputWithContext(ctx context.Context) GetScheduledQueryRulesLogCriteriaDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduledQueryRulesLogCriteriaDimensionOutput)
}

func (i GetScheduledQueryRulesLogCriteriaDimensionArgs) ToOutput(ctx context.Context) pulumix.Output[GetScheduledQueryRulesLogCriteriaDimension] {
	return pulumix.Output[GetScheduledQueryRulesLogCriteriaDimension]{
		OutputState: i.ToGetScheduledQueryRulesLogCriteriaDimensionOutputWithContext(ctx).OutputState,
	}
}

// GetScheduledQueryRulesLogCriteriaDimensionArrayInput is an input type that accepts GetScheduledQueryRulesLogCriteriaDimensionArray and GetScheduledQueryRulesLogCriteriaDimensionArrayOutput values.
// You can construct a concrete instance of `GetScheduledQueryRulesLogCriteriaDimensionArrayInput` via:
//
//	GetScheduledQueryRulesLogCriteriaDimensionArray{ GetScheduledQueryRulesLogCriteriaDimensionArgs{...} }
type GetScheduledQueryRulesLogCriteriaDimensionArrayInput interface {
	pulumi.Input

	ToGetScheduledQueryRulesLogCriteriaDimensionArrayOutput() GetScheduledQueryRulesLogCriteriaDimensionArrayOutput
	ToGetScheduledQueryRulesLogCriteriaDimensionArrayOutputWithContext(context.Context) GetScheduledQueryRulesLogCriteriaDimensionArrayOutput
}

type GetScheduledQueryRulesLogCriteriaDimensionArray []GetScheduledQueryRulesLogCriteriaDimensionInput

func (GetScheduledQueryRulesLogCriteriaDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduledQueryRulesLogCriteriaDimension)(nil)).Elem()
}

func (i GetScheduledQueryRulesLogCriteriaDimensionArray) ToGetScheduledQueryRulesLogCriteriaDimensionArrayOutput() GetScheduledQueryRulesLogCriteriaDimensionArrayOutput {
	return i.ToGetScheduledQueryRulesLogCriteriaDimensionArrayOutputWithContext(context.Background())
}

func (i GetScheduledQueryRulesLogCriteriaDimensionArray) ToGetScheduledQueryRulesLogCriteriaDimensionArrayOutputWithContext(ctx context.Context) GetScheduledQueryRulesLogCriteriaDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetScheduledQueryRulesLogCriteriaDimensionArrayOutput)
}

func (i GetScheduledQueryRulesLogCriteriaDimensionArray) ToOutput(ctx context.Context) pulumix.Output[[]GetScheduledQueryRulesLogCriteriaDimension] {
	return pulumix.Output[[]GetScheduledQueryRulesLogCriteriaDimension]{
		OutputState: i.ToGetScheduledQueryRulesLogCriteriaDimensionArrayOutputWithContext(ctx).OutputState,
	}
}

type GetScheduledQueryRulesLogCriteriaDimensionOutput struct{ *pulumi.OutputState }

func (GetScheduledQueryRulesLogCriteriaDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduledQueryRulesLogCriteriaDimension)(nil)).Elem()
}

func (o GetScheduledQueryRulesLogCriteriaDimensionOutput) ToGetScheduledQueryRulesLogCriteriaDimensionOutput() GetScheduledQueryRulesLogCriteriaDimensionOutput {
	return o
}

func (o GetScheduledQueryRulesLogCriteriaDimensionOutput) ToGetScheduledQueryRulesLogCriteriaDimensionOutputWithContext(ctx context.Context) GetScheduledQueryRulesLogCriteriaDimensionOutput {
	return o
}

func (o GetScheduledQueryRulesLogCriteriaDimensionOutput) ToOutput(ctx context.Context) pulumix.Output[GetScheduledQueryRulesLogCriteriaDimension] {
	return pulumix.Output[GetScheduledQueryRulesLogCriteriaDimension]{
		OutputState: o.OutputState,
	}
}

// Specifies the name of the scheduled query rule.
func (o GetScheduledQueryRulesLogCriteriaDimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduledQueryRulesLogCriteriaDimension) string { return v.Name }).(pulumi.StringOutput)
}

// Operator for dimension values.
func (o GetScheduledQueryRulesLogCriteriaDimensionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduledQueryRulesLogCriteriaDimension) string { return v.Operator }).(pulumi.StringOutput)
}

// List of dimension values.
func (o GetScheduledQueryRulesLogCriteriaDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetScheduledQueryRulesLogCriteriaDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetScheduledQueryRulesLogCriteriaDimensionArrayOutput struct{ *pulumi.OutputState }

func (GetScheduledQueryRulesLogCriteriaDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetScheduledQueryRulesLogCriteriaDimension)(nil)).Elem()
}

func (o GetScheduledQueryRulesLogCriteriaDimensionArrayOutput) ToGetScheduledQueryRulesLogCriteriaDimensionArrayOutput() GetScheduledQueryRulesLogCriteriaDimensionArrayOutput {
	return o
}

func (o GetScheduledQueryRulesLogCriteriaDimensionArrayOutput) ToGetScheduledQueryRulesLogCriteriaDimensionArrayOutputWithContext(ctx context.Context) GetScheduledQueryRulesLogCriteriaDimensionArrayOutput {
	return o
}

func (o GetScheduledQueryRulesLogCriteriaDimensionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetScheduledQueryRulesLogCriteriaDimension] {
	return pulumix.Output[[]GetScheduledQueryRulesLogCriteriaDimension]{
		OutputState: o.OutputState,
	}
}

func (o GetScheduledQueryRulesLogCriteriaDimensionArrayOutput) Index(i pulumi.IntInput) GetScheduledQueryRulesLogCriteriaDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetScheduledQueryRulesLogCriteriaDimension {
		return vs[0].([]GetScheduledQueryRulesLogCriteriaDimension)[vs[1].(int)]
	}).(GetScheduledQueryRulesLogCriteriaDimensionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AadDiagnosticSettingEnabledLogInput)(nil)).Elem(), AadDiagnosticSettingEnabledLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AadDiagnosticSettingEnabledLogArrayInput)(nil)).Elem(), AadDiagnosticSettingEnabledLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AadDiagnosticSettingEnabledLogRetentionPolicyInput)(nil)).Elem(), AadDiagnosticSettingEnabledLogRetentionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AadDiagnosticSettingLogInput)(nil)).Elem(), AadDiagnosticSettingLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AadDiagnosticSettingLogArrayInput)(nil)).Elem(), AadDiagnosticSettingLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AadDiagnosticSettingLogRetentionPolicyInput)(nil)).Elem(), AadDiagnosticSettingLogRetentionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupArmRoleReceiverInput)(nil)).Elem(), ActionGroupArmRoleReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupArmRoleReceiverArrayInput)(nil)).Elem(), ActionGroupArmRoleReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupAutomationRunbookReceiverInput)(nil)).Elem(), ActionGroupAutomationRunbookReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupAutomationRunbookReceiverArrayInput)(nil)).Elem(), ActionGroupAutomationRunbookReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupAzureAppPushReceiverInput)(nil)).Elem(), ActionGroupAzureAppPushReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupAzureAppPushReceiverArrayInput)(nil)).Elem(), ActionGroupAzureAppPushReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupAzureFunctionReceiverInput)(nil)).Elem(), ActionGroupAzureFunctionReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupAzureFunctionReceiverArrayInput)(nil)).Elem(), ActionGroupAzureFunctionReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupEmailReceiverInput)(nil)).Elem(), ActionGroupEmailReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupEmailReceiverArrayInput)(nil)).Elem(), ActionGroupEmailReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupEventHubReceiverInput)(nil)).Elem(), ActionGroupEventHubReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupEventHubReceiverArrayInput)(nil)).Elem(), ActionGroupEventHubReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupItsmReceiverInput)(nil)).Elem(), ActionGroupItsmReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupItsmReceiverArrayInput)(nil)).Elem(), ActionGroupItsmReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupLogicAppReceiverInput)(nil)).Elem(), ActionGroupLogicAppReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupLogicAppReceiverArrayInput)(nil)).Elem(), ActionGroupLogicAppReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupSmsReceiverInput)(nil)).Elem(), ActionGroupSmsReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupSmsReceiverArrayInput)(nil)).Elem(), ActionGroupSmsReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupVoiceReceiverInput)(nil)).Elem(), ActionGroupVoiceReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupVoiceReceiverArrayInput)(nil)).Elem(), ActionGroupVoiceReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupWebhookReceiverInput)(nil)).Elem(), ActionGroupWebhookReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupWebhookReceiverArrayInput)(nil)).Elem(), ActionGroupWebhookReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupWebhookReceiverAadAuthInput)(nil)).Elem(), ActionGroupWebhookReceiverAadAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionGroupWebhookReceiverAadAuthPtrInput)(nil)).Elem(), ActionGroupWebhookReceiverAadAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionInput)(nil)).Elem(), ActionRuleActionGroupConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionPtrInput)(nil)).Elem(), ActionRuleActionGroupConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionAlertContextInput)(nil)).Elem(), ActionRuleActionGroupConditionAlertContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionAlertContextPtrInput)(nil)).Elem(), ActionRuleActionGroupConditionAlertContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionAlertRuleIdInput)(nil)).Elem(), ActionRuleActionGroupConditionAlertRuleIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionAlertRuleIdPtrInput)(nil)).Elem(), ActionRuleActionGroupConditionAlertRuleIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionDescriptionInput)(nil)).Elem(), ActionRuleActionGroupConditionDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionDescriptionPtrInput)(nil)).Elem(), ActionRuleActionGroupConditionDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionMonitorInput)(nil)).Elem(), ActionRuleActionGroupConditionMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionMonitorPtrInput)(nil)).Elem(), ActionRuleActionGroupConditionMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionMonitorServiceInput)(nil)).Elem(), ActionRuleActionGroupConditionMonitorServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionMonitorServicePtrInput)(nil)).Elem(), ActionRuleActionGroupConditionMonitorServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionSeverityInput)(nil)).Elem(), ActionRuleActionGroupConditionSeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionSeverityPtrInput)(nil)).Elem(), ActionRuleActionGroupConditionSeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionTargetResourceTypeInput)(nil)).Elem(), ActionRuleActionGroupConditionTargetResourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupConditionTargetResourceTypePtrInput)(nil)).Elem(), ActionRuleActionGroupConditionTargetResourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupScopeInput)(nil)).Elem(), ActionRuleActionGroupScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleActionGroupScopePtrInput)(nil)).Elem(), ActionRuleActionGroupScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionInput)(nil)).Elem(), ActionRuleSuppressionConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionPtrInput)(nil)).Elem(), ActionRuleSuppressionConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionAlertContextInput)(nil)).Elem(), ActionRuleSuppressionConditionAlertContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionAlertContextPtrInput)(nil)).Elem(), ActionRuleSuppressionConditionAlertContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionAlertRuleIdInput)(nil)).Elem(), ActionRuleSuppressionConditionAlertRuleIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionAlertRuleIdPtrInput)(nil)).Elem(), ActionRuleSuppressionConditionAlertRuleIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionDescriptionInput)(nil)).Elem(), ActionRuleSuppressionConditionDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionDescriptionPtrInput)(nil)).Elem(), ActionRuleSuppressionConditionDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionMonitorInput)(nil)).Elem(), ActionRuleSuppressionConditionMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionMonitorPtrInput)(nil)).Elem(), ActionRuleSuppressionConditionMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionMonitorServiceInput)(nil)).Elem(), ActionRuleSuppressionConditionMonitorServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionMonitorServicePtrInput)(nil)).Elem(), ActionRuleSuppressionConditionMonitorServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionSeverityInput)(nil)).Elem(), ActionRuleSuppressionConditionSeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionSeverityPtrInput)(nil)).Elem(), ActionRuleSuppressionConditionSeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionTargetResourceTypeInput)(nil)).Elem(), ActionRuleSuppressionConditionTargetResourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionConditionTargetResourceTypePtrInput)(nil)).Elem(), ActionRuleSuppressionConditionTargetResourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionScopeInput)(nil)).Elem(), ActionRuleSuppressionScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionScopePtrInput)(nil)).Elem(), ActionRuleSuppressionScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionSuppressionInput)(nil)).Elem(), ActionRuleSuppressionSuppressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionSuppressionPtrInput)(nil)).Elem(), ActionRuleSuppressionSuppressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionSuppressionScheduleInput)(nil)).Elem(), ActionRuleSuppressionSuppressionScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionRuleSuppressionSuppressionSchedulePtrInput)(nil)).Elem(), ActionRuleSuppressionSuppressionScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivityLogAlertActionInput)(nil)).Elem(), ActivityLogAlertActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivityLogAlertActionArrayInput)(nil)).Elem(), ActivityLogAlertActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivityLogAlertCriteriaInput)(nil)).Elem(), ActivityLogAlertCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivityLogAlertCriteriaPtrInput)(nil)).Elem(), ActivityLogAlertCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivityLogAlertCriteriaResourceHealthInput)(nil)).Elem(), ActivityLogAlertCriteriaResourceHealthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivityLogAlertCriteriaResourceHealthArrayInput)(nil)).Elem(), ActivityLogAlertCriteriaResourceHealthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivityLogAlertCriteriaServiceHealthInput)(nil)).Elem(), ActivityLogAlertCriteriaServiceHealthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivityLogAlertCriteriaServiceHealthArrayInput)(nil)).Elem(), ActivityLogAlertCriteriaServiceHealthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionPtrInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionAlertContextInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionAlertContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionAlertContextPtrInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionAlertContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionAlertRuleIdInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionAlertRuleIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionAlertRuleIdPtrInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionAlertRuleIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionAlertRuleNameInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionAlertRuleNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionAlertRuleNamePtrInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionAlertRuleNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionDescriptionInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionDescriptionPtrInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionMonitorConditionInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionMonitorConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionMonitorConditionPtrInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionMonitorConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionMonitorServiceInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionMonitorServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionMonitorServicePtrInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionMonitorServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionSeverityInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionSeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionSeverityPtrInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionSeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionSignalTypeInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionSignalTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionSignalTypePtrInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionSignalTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionTargetResourceInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionTargetResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionTargetResourcePtrInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionTargetResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionTargetResourceGroupInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionTargetResourceGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionTargetResourceTypeInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupConditionTargetResourceTypePtrInput)(nil)).Elem(), AlertProcessingRuleActionGroupConditionTargetResourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleInput)(nil)).Elem(), AlertProcessingRuleActionGroupScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupSchedulePtrInput)(nil)).Elem(), AlertProcessingRuleActionGroupScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrenceInput)(nil)).Elem(), AlertProcessingRuleActionGroupScheduleRecurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrencePtrInput)(nil)).Elem(), AlertProcessingRuleActionGroupScheduleRecurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrenceDailyInput)(nil)).Elem(), AlertProcessingRuleActionGroupScheduleRecurrenceDailyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayInput)(nil)).Elem(), AlertProcessingRuleActionGroupScheduleRecurrenceDailyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyInput)(nil)).Elem(), AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayInput)(nil)).Elem(), AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyInput)(nil)).Elem(), AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayInput)(nil)).Elem(), AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionPtrInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionAlertContextInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionAlertContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionAlertContextPtrInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionAlertContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionAlertRuleIdInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionAlertRuleIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionAlertRuleIdPtrInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionAlertRuleIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionAlertRuleNameInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionAlertRuleNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionAlertRuleNamePtrInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionAlertRuleNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionDescriptionInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionDescriptionPtrInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionMonitorConditionInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionMonitorConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionMonitorConditionPtrInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionMonitorConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionMonitorServiceInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionMonitorServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionMonitorServicePtrInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionMonitorServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionSeverityInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionSeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionSeverityPtrInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionSeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionSignalTypeInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionSignalTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionSignalTypePtrInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionSignalTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionTargetResourceInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionTargetResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionTargetResourcePtrInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionTargetResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionTargetResourceGroupInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionTargetResourceGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionTargetResourceTypeInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionConditionTargetResourceTypePtrInput)(nil)).Elem(), AlertProcessingRuleSuppressionConditionTargetResourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleInput)(nil)).Elem(), AlertProcessingRuleSuppressionScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionSchedulePtrInput)(nil)).Elem(), AlertProcessingRuleSuppressionScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrenceInput)(nil)).Elem(), AlertProcessingRuleSuppressionScheduleRecurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrencePtrInput)(nil)).Elem(), AlertProcessingRuleSuppressionScheduleRecurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrenceDailyInput)(nil)).Elem(), AlertProcessingRuleSuppressionScheduleRecurrenceDailyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayInput)(nil)).Elem(), AlertProcessingRuleSuppressionScheduleRecurrenceDailyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyInput)(nil)).Elem(), AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayInput)(nil)).Elem(), AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyInput)(nil)).Elem(), AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayInput)(nil)).Elem(), AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPrometheusRuleGroupRuleInput)(nil)).Elem(), AlertPrometheusRuleGroupRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPrometheusRuleGroupRuleArrayInput)(nil)).Elem(), AlertPrometheusRuleGroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPrometheusRuleGroupRuleActionInput)(nil)).Elem(), AlertPrometheusRuleGroupRuleActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPrometheusRuleGroupRuleActionArrayInput)(nil)).Elem(), AlertPrometheusRuleGroupRuleActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPrometheusRuleGroupRuleAlertResolutionInput)(nil)).Elem(), AlertPrometheusRuleGroupRuleAlertResolutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPrometheusRuleGroupRuleAlertResolutionPtrInput)(nil)).Elem(), AlertPrometheusRuleGroupRuleAlertResolutionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingNotificationInput)(nil)).Elem(), AutoscaleSettingNotificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingNotificationPtrInput)(nil)).Elem(), AutoscaleSettingNotificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingNotificationEmailInput)(nil)).Elem(), AutoscaleSettingNotificationEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingNotificationEmailPtrInput)(nil)).Elem(), AutoscaleSettingNotificationEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingNotificationWebhookInput)(nil)).Elem(), AutoscaleSettingNotificationWebhookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingNotificationWebhookArrayInput)(nil)).Elem(), AutoscaleSettingNotificationWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingPredictiveInput)(nil)).Elem(), AutoscaleSettingPredictiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingPredictivePtrInput)(nil)).Elem(), AutoscaleSettingPredictiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingProfileInput)(nil)).Elem(), AutoscaleSettingProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingProfileArrayInput)(nil)).Elem(), AutoscaleSettingProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingProfileCapacityInput)(nil)).Elem(), AutoscaleSettingProfileCapacityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingProfileFixedDateInput)(nil)).Elem(), AutoscaleSettingProfileFixedDateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingProfileFixedDatePtrInput)(nil)).Elem(), AutoscaleSettingProfileFixedDateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingProfileRecurrenceInput)(nil)).Elem(), AutoscaleSettingProfileRecurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingProfileRecurrencePtrInput)(nil)).Elem(), AutoscaleSettingProfileRecurrenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingProfileRuleInput)(nil)).Elem(), AutoscaleSettingProfileRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingProfileRuleArrayInput)(nil)).Elem(), AutoscaleSettingProfileRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingProfileRuleMetricTriggerInput)(nil)).Elem(), AutoscaleSettingProfileRuleMetricTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingProfileRuleMetricTriggerDimensionInput)(nil)).Elem(), AutoscaleSettingProfileRuleMetricTriggerDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingProfileRuleMetricTriggerDimensionArrayInput)(nil)).Elem(), AutoscaleSettingProfileRuleMetricTriggerDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscaleSettingProfileRuleScaleActionInput)(nil)).Elem(), AutoscaleSettingProfileRuleScaleActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataFlowInput)(nil)).Elem(), DataCollectionRuleDataFlowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataFlowArrayInput)(nil)).Elem(), DataCollectionRuleDataFlowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesInput)(nil)).Elem(), DataCollectionRuleDataSourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesPtrInput)(nil)).Elem(), DataCollectionRuleDataSourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesDataImportInput)(nil)).Elem(), DataCollectionRuleDataSourcesDataImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesDataImportPtrInput)(nil)).Elem(), DataCollectionRuleDataSourcesDataImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesDataImportEventHubDataSourceInput)(nil)).Elem(), DataCollectionRuleDataSourcesDataImportEventHubDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayInput)(nil)).Elem(), DataCollectionRuleDataSourcesDataImportEventHubDataSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesExtensionInput)(nil)).Elem(), DataCollectionRuleDataSourcesExtensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesExtensionArrayInput)(nil)).Elem(), DataCollectionRuleDataSourcesExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesIisLogInput)(nil)).Elem(), DataCollectionRuleDataSourcesIisLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesIisLogArrayInput)(nil)).Elem(), DataCollectionRuleDataSourcesIisLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesLogFileInput)(nil)).Elem(), DataCollectionRuleDataSourcesLogFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesLogFileArrayInput)(nil)).Elem(), DataCollectionRuleDataSourcesLogFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesLogFileSettingsInput)(nil)).Elem(), DataCollectionRuleDataSourcesLogFileSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesLogFileSettingsPtrInput)(nil)).Elem(), DataCollectionRuleDataSourcesLogFileSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesLogFileSettingsTextInput)(nil)).Elem(), DataCollectionRuleDataSourcesLogFileSettingsTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesLogFileSettingsTextPtrInput)(nil)).Elem(), DataCollectionRuleDataSourcesLogFileSettingsTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesPerformanceCounterInput)(nil)).Elem(), DataCollectionRuleDataSourcesPerformanceCounterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesPerformanceCounterArrayInput)(nil)).Elem(), DataCollectionRuleDataSourcesPerformanceCounterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesPlatformTelemetryInput)(nil)).Elem(), DataCollectionRuleDataSourcesPlatformTelemetryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesPlatformTelemetryArrayInput)(nil)).Elem(), DataCollectionRuleDataSourcesPlatformTelemetryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesPrometheusForwarderInput)(nil)).Elem(), DataCollectionRuleDataSourcesPrometheusForwarderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesPrometheusForwarderArrayInput)(nil)).Elem(), DataCollectionRuleDataSourcesPrometheusForwarderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterInput)(nil)).Elem(), DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayInput)(nil)).Elem(), DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesSyslogInput)(nil)).Elem(), DataCollectionRuleDataSourcesSyslogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesSyslogArrayInput)(nil)).Elem(), DataCollectionRuleDataSourcesSyslogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesWindowsEventLogInput)(nil)).Elem(), DataCollectionRuleDataSourcesWindowsEventLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesWindowsEventLogArrayInput)(nil)).Elem(), DataCollectionRuleDataSourcesWindowsEventLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesWindowsFirewallLogInput)(nil)).Elem(), DataCollectionRuleDataSourcesWindowsFirewallLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDataSourcesWindowsFirewallLogArrayInput)(nil)).Elem(), DataCollectionRuleDataSourcesWindowsFirewallLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsInput)(nil)).Elem(), DataCollectionRuleDestinationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsPtrInput)(nil)).Elem(), DataCollectionRuleDestinationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsAzureMonitorMetricsInput)(nil)).Elem(), DataCollectionRuleDestinationsAzureMonitorMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsAzureMonitorMetricsPtrInput)(nil)).Elem(), DataCollectionRuleDestinationsAzureMonitorMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsEventHubInput)(nil)).Elem(), DataCollectionRuleDestinationsEventHubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsEventHubPtrInput)(nil)).Elem(), DataCollectionRuleDestinationsEventHubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsEventHubDirectInput)(nil)).Elem(), DataCollectionRuleDestinationsEventHubDirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsEventHubDirectPtrInput)(nil)).Elem(), DataCollectionRuleDestinationsEventHubDirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsLogAnalyticInput)(nil)).Elem(), DataCollectionRuleDestinationsLogAnalyticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsLogAnalyticArrayInput)(nil)).Elem(), DataCollectionRuleDestinationsLogAnalyticArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsMonitorAccountInput)(nil)).Elem(), DataCollectionRuleDestinationsMonitorAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsMonitorAccountArrayInput)(nil)).Elem(), DataCollectionRuleDestinationsMonitorAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsStorageBlobInput)(nil)).Elem(), DataCollectionRuleDestinationsStorageBlobArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsStorageBlobArrayInput)(nil)).Elem(), DataCollectionRuleDestinationsStorageBlobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsStorageBlobDirectInput)(nil)).Elem(), DataCollectionRuleDestinationsStorageBlobDirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsStorageBlobDirectArrayInput)(nil)).Elem(), DataCollectionRuleDestinationsStorageBlobDirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsStorageTableDirectInput)(nil)).Elem(), DataCollectionRuleDestinationsStorageTableDirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleDestinationsStorageTableDirectArrayInput)(nil)).Elem(), DataCollectionRuleDestinationsStorageTableDirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleIdentityInput)(nil)).Elem(), DataCollectionRuleIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleIdentityPtrInput)(nil)).Elem(), DataCollectionRuleIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleStreamDeclarationInput)(nil)).Elem(), DataCollectionRuleStreamDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleStreamDeclarationArrayInput)(nil)).Elem(), DataCollectionRuleStreamDeclarationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleStreamDeclarationColumnInput)(nil)).Elem(), DataCollectionRuleStreamDeclarationColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataCollectionRuleStreamDeclarationColumnArrayInput)(nil)).Elem(), DataCollectionRuleStreamDeclarationColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingEnabledLogInput)(nil)).Elem(), DiagnosticSettingEnabledLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingEnabledLogArrayInput)(nil)).Elem(), DiagnosticSettingEnabledLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingEnabledLogRetentionPolicyInput)(nil)).Elem(), DiagnosticSettingEnabledLogRetentionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingEnabledLogRetentionPolicyPtrInput)(nil)).Elem(), DiagnosticSettingEnabledLogRetentionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingLogInput)(nil)).Elem(), DiagnosticSettingLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingLogArrayInput)(nil)).Elem(), DiagnosticSettingLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingLogRetentionPolicyInput)(nil)).Elem(), DiagnosticSettingLogRetentionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingLogRetentionPolicyPtrInput)(nil)).Elem(), DiagnosticSettingLogRetentionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingMetricInput)(nil)).Elem(), DiagnosticSettingMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingMetricArrayInput)(nil)).Elem(), DiagnosticSettingMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingMetricRetentionPolicyInput)(nil)).Elem(), DiagnosticSettingMetricRetentionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingMetricRetentionPolicyPtrInput)(nil)).Elem(), DiagnosticSettingMetricRetentionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogProfileRetentionPolicyInput)(nil)).Elem(), LogProfileRetentionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogProfileRetentionPolicyPtrInput)(nil)).Elem(), LogProfileRetentionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogzMonitorPlanInput)(nil)).Elem(), LogzMonitorPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogzMonitorPlanPtrInput)(nil)).Elem(), LogzMonitorPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogzMonitorUserInput)(nil)).Elem(), LogzMonitorUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogzMonitorUserPtrInput)(nil)).Elem(), LogzMonitorUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogzSubAccountTagRuleTagFilterInput)(nil)).Elem(), LogzSubAccountTagRuleTagFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogzSubAccountTagRuleTagFilterArrayInput)(nil)).Elem(), LogzSubAccountTagRuleTagFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogzSubAccountUserInput)(nil)).Elem(), LogzSubAccountUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogzSubAccountUserPtrInput)(nil)).Elem(), LogzSubAccountUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogzTagRuleTagFilterInput)(nil)).Elem(), LogzTagRuleTagFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogzTagRuleTagFilterArrayInput)(nil)).Elem(), LogzTagRuleTagFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertActionInput)(nil)).Elem(), MetricAlertActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertActionArrayInput)(nil)).Elem(), MetricAlertActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaInput)(nil)).Elem(), MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrInput)(nil)).Elem(), MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertCriteriaInput)(nil)).Elem(), MetricAlertCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertCriteriaArrayInput)(nil)).Elem(), MetricAlertCriteriaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertCriteriaDimensionInput)(nil)).Elem(), MetricAlertCriteriaDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertCriteriaDimensionArrayInput)(nil)).Elem(), MetricAlertCriteriaDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertDynamicCriteriaInput)(nil)).Elem(), MetricAlertDynamicCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertDynamicCriteriaPtrInput)(nil)).Elem(), MetricAlertDynamicCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertDynamicCriteriaDimensionInput)(nil)).Elem(), MetricAlertDynamicCriteriaDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricAlertDynamicCriteriaDimensionArrayInput)(nil)).Elem(), MetricAlertDynamicCriteriaDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertActionInput)(nil)).Elem(), ScheduledQueryRulesAlertActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertActionPtrInput)(nil)).Elem(), ScheduledQueryRulesAlertActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertTriggerInput)(nil)).Elem(), ScheduledQueryRulesAlertTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertTriggerPtrInput)(nil)).Elem(), ScheduledQueryRulesAlertTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertTriggerMetricTriggerInput)(nil)).Elem(), ScheduledQueryRulesAlertTriggerMetricTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertTriggerMetricTriggerPtrInput)(nil)).Elem(), ScheduledQueryRulesAlertTriggerMetricTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertV2ActionInput)(nil)).Elem(), ScheduledQueryRulesAlertV2ActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertV2ActionPtrInput)(nil)).Elem(), ScheduledQueryRulesAlertV2ActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertV2CriteriaInput)(nil)).Elem(), ScheduledQueryRulesAlertV2CriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertV2CriteriaArrayInput)(nil)).Elem(), ScheduledQueryRulesAlertV2CriteriaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertV2CriteriaDimensionInput)(nil)).Elem(), ScheduledQueryRulesAlertV2CriteriaDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertV2CriteriaDimensionArrayInput)(nil)).Elem(), ScheduledQueryRulesAlertV2CriteriaDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertV2CriteriaFailingPeriodsInput)(nil)).Elem(), ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrInput)(nil)).Elem(), ScheduledQueryRulesAlertV2CriteriaFailingPeriodsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesLogCriteriaInput)(nil)).Elem(), ScheduledQueryRulesLogCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesLogCriteriaPtrInput)(nil)).Elem(), ScheduledQueryRulesLogCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesLogCriteriaDimensionInput)(nil)).Elem(), ScheduledQueryRulesLogCriteriaDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduledQueryRulesLogCriteriaDimensionArrayInput)(nil)).Elem(), ScheduledQueryRulesLogCriteriaDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmartDetectorAlertRuleActionGroupInput)(nil)).Elem(), SmartDetectorAlertRuleActionGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmartDetectorAlertRuleActionGroupPtrInput)(nil)).Elem(), SmartDetectorAlertRuleActionGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupArmRoleReceiverInput)(nil)).Elem(), GetActionGroupArmRoleReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupArmRoleReceiverArrayInput)(nil)).Elem(), GetActionGroupArmRoleReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupAutomationRunbookReceiverInput)(nil)).Elem(), GetActionGroupAutomationRunbookReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupAutomationRunbookReceiverArrayInput)(nil)).Elem(), GetActionGroupAutomationRunbookReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupAzureAppPushReceiverInput)(nil)).Elem(), GetActionGroupAzureAppPushReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupAzureAppPushReceiverArrayInput)(nil)).Elem(), GetActionGroupAzureAppPushReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupAzureFunctionReceiverInput)(nil)).Elem(), GetActionGroupAzureFunctionReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupAzureFunctionReceiverArrayInput)(nil)).Elem(), GetActionGroupAzureFunctionReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupEmailReceiverInput)(nil)).Elem(), GetActionGroupEmailReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupEmailReceiverArrayInput)(nil)).Elem(), GetActionGroupEmailReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupEventHubReceiverInput)(nil)).Elem(), GetActionGroupEventHubReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupEventHubReceiverArrayInput)(nil)).Elem(), GetActionGroupEventHubReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupItsmReceiverInput)(nil)).Elem(), GetActionGroupItsmReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupItsmReceiverArrayInput)(nil)).Elem(), GetActionGroupItsmReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupLogicAppReceiverInput)(nil)).Elem(), GetActionGroupLogicAppReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupLogicAppReceiverArrayInput)(nil)).Elem(), GetActionGroupLogicAppReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupSmsReceiverInput)(nil)).Elem(), GetActionGroupSmsReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupSmsReceiverArrayInput)(nil)).Elem(), GetActionGroupSmsReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupVoiceReceiverInput)(nil)).Elem(), GetActionGroupVoiceReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupVoiceReceiverArrayInput)(nil)).Elem(), GetActionGroupVoiceReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupWebhookReceiverInput)(nil)).Elem(), GetActionGroupWebhookReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupWebhookReceiverArrayInput)(nil)).Elem(), GetActionGroupWebhookReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupWebhookReceiverAadAuthInput)(nil)).Elem(), GetActionGroupWebhookReceiverAadAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetActionGroupWebhookReceiverAadAuthArrayInput)(nil)).Elem(), GetActionGroupWebhookReceiverAadAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataFlowInput)(nil)).Elem(), GetDataCollectionRuleDataFlowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataFlowArrayInput)(nil)).Elem(), GetDataCollectionRuleDataFlowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceInput)(nil)).Elem(), GetDataCollectionRuleDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceDataImportInput)(nil)).Elem(), GetDataCollectionRuleDataSourceDataImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceDataImportArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourceDataImportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceDataImportEventHubDataSourceInput)(nil)).Elem(), GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceExtensionInput)(nil)).Elem(), GetDataCollectionRuleDataSourceExtensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceExtensionArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourceExtensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceIisLogInput)(nil)).Elem(), GetDataCollectionRuleDataSourceIisLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceIisLogArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourceIisLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceLogFileInput)(nil)).Elem(), GetDataCollectionRuleDataSourceLogFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceLogFileArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourceLogFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceLogFileSettingInput)(nil)).Elem(), GetDataCollectionRuleDataSourceLogFileSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceLogFileSettingArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourceLogFileSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceLogFileSettingTextInput)(nil)).Elem(), GetDataCollectionRuleDataSourceLogFileSettingTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceLogFileSettingTextArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourceLogFileSettingTextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourcePerformanceCounterInput)(nil)).Elem(), GetDataCollectionRuleDataSourcePerformanceCounterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourcePerformanceCounterArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourcePerformanceCounterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourcePlatformTelemetryInput)(nil)).Elem(), GetDataCollectionRuleDataSourcePlatformTelemetryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourcePlatformTelemetryArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourcePlatformTelemetryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourcePrometheusForwarderInput)(nil)).Elem(), GetDataCollectionRuleDataSourcePrometheusForwarderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourcePrometheusForwarderArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourcePrometheusForwarderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterInput)(nil)).Elem(), GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceSyslogInput)(nil)).Elem(), GetDataCollectionRuleDataSourceSyslogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceSyslogArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourceSyslogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceWindowsEventLogInput)(nil)).Elem(), GetDataCollectionRuleDataSourceWindowsEventLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceWindowsEventLogArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourceWindowsEventLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceWindowsFirewallLogInput)(nil)).Elem(), GetDataCollectionRuleDataSourceWindowsFirewallLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDataSourceWindowsFirewallLogArrayInput)(nil)).Elem(), GetDataCollectionRuleDataSourceWindowsFirewallLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationInput)(nil)).Elem(), GetDataCollectionRuleDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationArrayInput)(nil)).Elem(), GetDataCollectionRuleDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationAzureMonitorMetricInput)(nil)).Elem(), GetDataCollectionRuleDestinationAzureMonitorMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationAzureMonitorMetricArrayInput)(nil)).Elem(), GetDataCollectionRuleDestinationAzureMonitorMetricArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationEventHubInput)(nil)).Elem(), GetDataCollectionRuleDestinationEventHubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationEventHubPtrInput)(nil)).Elem(), GetDataCollectionRuleDestinationEventHubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationEventHubDirectInput)(nil)).Elem(), GetDataCollectionRuleDestinationEventHubDirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationEventHubDirectPtrInput)(nil)).Elem(), GetDataCollectionRuleDestinationEventHubDirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationLogAnalyticInput)(nil)).Elem(), GetDataCollectionRuleDestinationLogAnalyticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationLogAnalyticArrayInput)(nil)).Elem(), GetDataCollectionRuleDestinationLogAnalyticArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationMonitorAccountInput)(nil)).Elem(), GetDataCollectionRuleDestinationMonitorAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationMonitorAccountArrayInput)(nil)).Elem(), GetDataCollectionRuleDestinationMonitorAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationStorageBlobInput)(nil)).Elem(), GetDataCollectionRuleDestinationStorageBlobArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationStorageBlobArrayInput)(nil)).Elem(), GetDataCollectionRuleDestinationStorageBlobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationStorageBlobDirectInput)(nil)).Elem(), GetDataCollectionRuleDestinationStorageBlobDirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationStorageBlobDirectArrayInput)(nil)).Elem(), GetDataCollectionRuleDestinationStorageBlobDirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationStorageTableDirectInput)(nil)).Elem(), GetDataCollectionRuleDestinationStorageTableDirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleDestinationStorageTableDirectArrayInput)(nil)).Elem(), GetDataCollectionRuleDestinationStorageTableDirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleIdentityInput)(nil)).Elem(), GetDataCollectionRuleIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleIdentityArrayInput)(nil)).Elem(), GetDataCollectionRuleIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleStreamDeclarationInput)(nil)).Elem(), GetDataCollectionRuleStreamDeclarationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleStreamDeclarationArrayInput)(nil)).Elem(), GetDataCollectionRuleStreamDeclarationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleStreamDeclarationColumnInput)(nil)).Elem(), GetDataCollectionRuleStreamDeclarationColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataCollectionRuleStreamDeclarationColumnArrayInput)(nil)).Elem(), GetDataCollectionRuleStreamDeclarationColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogProfileRetentionPolicyInput)(nil)).Elem(), GetLogProfileRetentionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLogProfileRetentionPolicyArrayInput)(nil)).Elem(), GetLogProfileRetentionPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduledQueryRulesAlertActionInput)(nil)).Elem(), GetScheduledQueryRulesAlertActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduledQueryRulesAlertActionArrayInput)(nil)).Elem(), GetScheduledQueryRulesAlertActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduledQueryRulesAlertTriggerInput)(nil)).Elem(), GetScheduledQueryRulesAlertTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduledQueryRulesAlertTriggerArrayInput)(nil)).Elem(), GetScheduledQueryRulesAlertTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduledQueryRulesAlertTriggerMetricTriggerInput)(nil)).Elem(), GetScheduledQueryRulesAlertTriggerMetricTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduledQueryRulesAlertTriggerMetricTriggerArrayInput)(nil)).Elem(), GetScheduledQueryRulesAlertTriggerMetricTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduledQueryRulesLogCriteriaInput)(nil)).Elem(), GetScheduledQueryRulesLogCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduledQueryRulesLogCriteriaArrayInput)(nil)).Elem(), GetScheduledQueryRulesLogCriteriaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduledQueryRulesLogCriteriaDimensionInput)(nil)).Elem(), GetScheduledQueryRulesLogCriteriaDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetScheduledQueryRulesLogCriteriaDimensionArrayInput)(nil)).Elem(), GetScheduledQueryRulesLogCriteriaDimensionArray{})
	pulumi.RegisterOutputType(AadDiagnosticSettingEnabledLogOutput{})
	pulumi.RegisterOutputType(AadDiagnosticSettingEnabledLogArrayOutput{})
	pulumi.RegisterOutputType(AadDiagnosticSettingEnabledLogRetentionPolicyOutput{})
	pulumi.RegisterOutputType(AadDiagnosticSettingLogOutput{})
	pulumi.RegisterOutputType(AadDiagnosticSettingLogArrayOutput{})
	pulumi.RegisterOutputType(AadDiagnosticSettingLogRetentionPolicyOutput{})
	pulumi.RegisterOutputType(ActionGroupArmRoleReceiverOutput{})
	pulumi.RegisterOutputType(ActionGroupArmRoleReceiverArrayOutput{})
	pulumi.RegisterOutputType(ActionGroupAutomationRunbookReceiverOutput{})
	pulumi.RegisterOutputType(ActionGroupAutomationRunbookReceiverArrayOutput{})
	pulumi.RegisterOutputType(ActionGroupAzureAppPushReceiverOutput{})
	pulumi.RegisterOutputType(ActionGroupAzureAppPushReceiverArrayOutput{})
	pulumi.RegisterOutputType(ActionGroupAzureFunctionReceiverOutput{})
	pulumi.RegisterOutputType(ActionGroupAzureFunctionReceiverArrayOutput{})
	pulumi.RegisterOutputType(ActionGroupEmailReceiverOutput{})
	pulumi.RegisterOutputType(ActionGroupEmailReceiverArrayOutput{})
	pulumi.RegisterOutputType(ActionGroupEventHubReceiverOutput{})
	pulumi.RegisterOutputType(ActionGroupEventHubReceiverArrayOutput{})
	pulumi.RegisterOutputType(ActionGroupItsmReceiverOutput{})
	pulumi.RegisterOutputType(ActionGroupItsmReceiverArrayOutput{})
	pulumi.RegisterOutputType(ActionGroupLogicAppReceiverOutput{})
	pulumi.RegisterOutputType(ActionGroupLogicAppReceiverArrayOutput{})
	pulumi.RegisterOutputType(ActionGroupSmsReceiverOutput{})
	pulumi.RegisterOutputType(ActionGroupSmsReceiverArrayOutput{})
	pulumi.RegisterOutputType(ActionGroupVoiceReceiverOutput{})
	pulumi.RegisterOutputType(ActionGroupVoiceReceiverArrayOutput{})
	pulumi.RegisterOutputType(ActionGroupWebhookReceiverOutput{})
	pulumi.RegisterOutputType(ActionGroupWebhookReceiverArrayOutput{})
	pulumi.RegisterOutputType(ActionGroupWebhookReceiverAadAuthOutput{})
	pulumi.RegisterOutputType(ActionGroupWebhookReceiverAadAuthPtrOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionPtrOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionAlertContextOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionAlertContextPtrOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionAlertRuleIdOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionAlertRuleIdPtrOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionDescriptionOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionDescriptionPtrOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionMonitorOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionMonitorPtrOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionMonitorServiceOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionMonitorServicePtrOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionSeverityOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionSeverityPtrOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionTargetResourceTypeOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupConditionTargetResourceTypePtrOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupScopeOutput{})
	pulumi.RegisterOutputType(ActionRuleActionGroupScopePtrOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionPtrOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionAlertContextOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionAlertContextPtrOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionAlertRuleIdOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionAlertRuleIdPtrOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionDescriptionOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionDescriptionPtrOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionMonitorOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionMonitorPtrOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionMonitorServiceOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionMonitorServicePtrOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionSeverityOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionSeverityPtrOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionTargetResourceTypeOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionConditionTargetResourceTypePtrOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionScopeOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionScopePtrOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionSuppressionOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionSuppressionPtrOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionSuppressionScheduleOutput{})
	pulumi.RegisterOutputType(ActionRuleSuppressionSuppressionSchedulePtrOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertActionOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertActionArrayOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertCriteriaOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertCriteriaPtrOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertCriteriaResourceHealthOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertCriteriaResourceHealthArrayOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertCriteriaServiceHealthOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertCriteriaServiceHealthArrayOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionAlertContextOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionAlertContextPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionAlertRuleIdOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionAlertRuleIdPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionAlertRuleNameOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionAlertRuleNamePtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionDescriptionOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionDescriptionPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionMonitorConditionOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionMonitorConditionPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionMonitorServiceOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionMonitorServicePtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionSeverityOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionSeverityPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionSignalTypeOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionSignalTypePtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionTargetResourceOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionTargetResourcePtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionTargetResourceGroupOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionTargetResourceGroupPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionTargetResourceTypeOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupConditionTargetResourceTypePtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupScheduleOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupSchedulePtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupScheduleRecurrenceOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupScheduleRecurrencePtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupScheduleRecurrenceDailyOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupScheduleRecurrenceDailyArrayOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupScheduleRecurrenceMonthlyArrayOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleActionGroupScheduleRecurrenceWeeklyArrayOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionAlertContextOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionAlertContextPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionAlertRuleIdOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionAlertRuleIdPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionAlertRuleNameOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionAlertRuleNamePtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionDescriptionOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionDescriptionPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionMonitorConditionOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionMonitorConditionPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionMonitorServiceOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionMonitorServicePtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionSeverityOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionSeverityPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionSignalTypeOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionSignalTypePtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionTargetResourceOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionTargetResourcePtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionTargetResourceGroupOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionTargetResourceGroupPtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionTargetResourceTypeOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionConditionTargetResourceTypePtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionScheduleOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionSchedulePtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionScheduleRecurrenceOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionScheduleRecurrencePtrOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionScheduleRecurrenceDailyOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionScheduleRecurrenceDailyArrayOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionScheduleRecurrenceMonthlyArrayOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyOutput{})
	pulumi.RegisterOutputType(AlertProcessingRuleSuppressionScheduleRecurrenceWeeklyArrayOutput{})
	pulumi.RegisterOutputType(AlertPrometheusRuleGroupRuleOutput{})
	pulumi.RegisterOutputType(AlertPrometheusRuleGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(AlertPrometheusRuleGroupRuleActionOutput{})
	pulumi.RegisterOutputType(AlertPrometheusRuleGroupRuleActionArrayOutput{})
	pulumi.RegisterOutputType(AlertPrometheusRuleGroupRuleAlertResolutionOutput{})
	pulumi.RegisterOutputType(AlertPrometheusRuleGroupRuleAlertResolutionPtrOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingNotificationOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingNotificationPtrOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingNotificationEmailOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingNotificationEmailPtrOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingNotificationWebhookOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingNotificationWebhookArrayOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingPredictiveOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingPredictivePtrOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingProfileOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingProfileArrayOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingProfileCapacityOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingProfileFixedDateOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingProfileFixedDatePtrOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingProfileRecurrenceOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingProfileRecurrencePtrOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingProfileRuleOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingProfileRuleArrayOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingProfileRuleMetricTriggerOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingProfileRuleMetricTriggerDimensionOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingProfileRuleMetricTriggerDimensionArrayOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingProfileRuleScaleActionOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataFlowOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataFlowArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesDataImportOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesDataImportPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesDataImportEventHubDataSourceOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesDataImportEventHubDataSourceArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesExtensionOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesExtensionArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesIisLogOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesIisLogArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesLogFileOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesLogFileArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesLogFileSettingsOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesLogFileSettingsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesLogFileSettingsTextOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesLogFileSettingsTextPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesPerformanceCounterOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesPerformanceCounterArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesPlatformTelemetryOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesPlatformTelemetryArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesPrometheusForwarderOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesPrometheusForwarderArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesPrometheusForwarderLabelIncludeFilterArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesSyslogOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesSyslogArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesWindowsEventLogOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesWindowsEventLogArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesWindowsFirewallLogOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesWindowsFirewallLogArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsAzureMonitorMetricsOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsAzureMonitorMetricsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsEventHubOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsEventHubPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsEventHubDirectOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsEventHubDirectPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsLogAnalyticOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsLogAnalyticArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsMonitorAccountOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsMonitorAccountArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsStorageBlobOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsStorageBlobArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsStorageBlobDirectOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsStorageBlobDirectArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsStorageTableDirectOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsStorageTableDirectArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleIdentityOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleIdentityPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleStreamDeclarationOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleStreamDeclarationArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleStreamDeclarationColumnOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleStreamDeclarationColumnArrayOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingEnabledLogOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingEnabledLogArrayOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingEnabledLogRetentionPolicyOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingEnabledLogRetentionPolicyPtrOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingLogOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingLogArrayOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingLogRetentionPolicyOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingLogRetentionPolicyPtrOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingMetricOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingMetricArrayOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingMetricRetentionPolicyOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingMetricRetentionPolicyPtrOutput{})
	pulumi.RegisterOutputType(LogProfileRetentionPolicyOutput{})
	pulumi.RegisterOutputType(LogProfileRetentionPolicyPtrOutput{})
	pulumi.RegisterOutputType(LogzMonitorPlanOutput{})
	pulumi.RegisterOutputType(LogzMonitorPlanPtrOutput{})
	pulumi.RegisterOutputType(LogzMonitorUserOutput{})
	pulumi.RegisterOutputType(LogzMonitorUserPtrOutput{})
	pulumi.RegisterOutputType(LogzSubAccountTagRuleTagFilterOutput{})
	pulumi.RegisterOutputType(LogzSubAccountTagRuleTagFilterArrayOutput{})
	pulumi.RegisterOutputType(LogzSubAccountUserOutput{})
	pulumi.RegisterOutputType(LogzSubAccountUserPtrOutput{})
	pulumi.RegisterOutputType(LogzTagRuleTagFilterOutput{})
	pulumi.RegisterOutputType(LogzTagRuleTagFilterArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertActionOutput{})
	pulumi.RegisterOutputType(MetricAlertActionArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaOutput{})
	pulumi.RegisterOutputType(MetricAlertApplicationInsightsWebTestLocationAvailabilityCriteriaPtrOutput{})
	pulumi.RegisterOutputType(MetricAlertCriteriaOutput{})
	pulumi.RegisterOutputType(MetricAlertCriteriaArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertCriteriaDimensionOutput{})
	pulumi.RegisterOutputType(MetricAlertCriteriaDimensionArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertDynamicCriteriaOutput{})
	pulumi.RegisterOutputType(MetricAlertDynamicCriteriaPtrOutput{})
	pulumi.RegisterOutputType(MetricAlertDynamicCriteriaDimensionOutput{})
	pulumi.RegisterOutputType(MetricAlertDynamicCriteriaDimensionArrayOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertActionOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertActionPtrOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertTriggerOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertTriggerPtrOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertTriggerMetricTriggerOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertTriggerMetricTriggerPtrOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertV2ActionOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertV2ActionPtrOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertV2CriteriaOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertV2CriteriaArrayOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertV2CriteriaDimensionOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertV2CriteriaDimensionArrayOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertV2CriteriaFailingPeriodsOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesAlertV2CriteriaFailingPeriodsPtrOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesLogCriteriaOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesLogCriteriaPtrOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesLogCriteriaDimensionOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRulesLogCriteriaDimensionArrayOutput{})
	pulumi.RegisterOutputType(SmartDetectorAlertRuleActionGroupOutput{})
	pulumi.RegisterOutputType(SmartDetectorAlertRuleActionGroupPtrOutput{})
	pulumi.RegisterOutputType(GetActionGroupArmRoleReceiverOutput{})
	pulumi.RegisterOutputType(GetActionGroupArmRoleReceiverArrayOutput{})
	pulumi.RegisterOutputType(GetActionGroupAutomationRunbookReceiverOutput{})
	pulumi.RegisterOutputType(GetActionGroupAutomationRunbookReceiverArrayOutput{})
	pulumi.RegisterOutputType(GetActionGroupAzureAppPushReceiverOutput{})
	pulumi.RegisterOutputType(GetActionGroupAzureAppPushReceiverArrayOutput{})
	pulumi.RegisterOutputType(GetActionGroupAzureFunctionReceiverOutput{})
	pulumi.RegisterOutputType(GetActionGroupAzureFunctionReceiverArrayOutput{})
	pulumi.RegisterOutputType(GetActionGroupEmailReceiverOutput{})
	pulumi.RegisterOutputType(GetActionGroupEmailReceiverArrayOutput{})
	pulumi.RegisterOutputType(GetActionGroupEventHubReceiverOutput{})
	pulumi.RegisterOutputType(GetActionGroupEventHubReceiverArrayOutput{})
	pulumi.RegisterOutputType(GetActionGroupItsmReceiverOutput{})
	pulumi.RegisterOutputType(GetActionGroupItsmReceiverArrayOutput{})
	pulumi.RegisterOutputType(GetActionGroupLogicAppReceiverOutput{})
	pulumi.RegisterOutputType(GetActionGroupLogicAppReceiverArrayOutput{})
	pulumi.RegisterOutputType(GetActionGroupSmsReceiverOutput{})
	pulumi.RegisterOutputType(GetActionGroupSmsReceiverArrayOutput{})
	pulumi.RegisterOutputType(GetActionGroupVoiceReceiverOutput{})
	pulumi.RegisterOutputType(GetActionGroupVoiceReceiverArrayOutput{})
	pulumi.RegisterOutputType(GetActionGroupWebhookReceiverOutput{})
	pulumi.RegisterOutputType(GetActionGroupWebhookReceiverArrayOutput{})
	pulumi.RegisterOutputType(GetActionGroupWebhookReceiverAadAuthOutput{})
	pulumi.RegisterOutputType(GetActionGroupWebhookReceiverAadAuthArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataFlowOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataFlowArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceDataImportOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceDataImportArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceDataImportEventHubDataSourceOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceDataImportEventHubDataSourceArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceExtensionOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceExtensionArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceIisLogOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceIisLogArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceLogFileOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceLogFileArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceLogFileSettingOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceLogFileSettingArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceLogFileSettingTextOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceLogFileSettingTextArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourcePerformanceCounterOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourcePerformanceCounterArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourcePlatformTelemetryOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourcePlatformTelemetryArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourcePrometheusForwarderOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourcePrometheusForwarderArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourcePrometheusForwarderLabelIncludeFilterArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceSyslogOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceSyslogArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceWindowsEventLogOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceWindowsEventLogArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceWindowsFirewallLogOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDataSourceWindowsFirewallLogArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationAzureMonitorMetricOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationAzureMonitorMetricArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationEventHubOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationEventHubPtrOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationEventHubDirectOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationEventHubDirectPtrOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationLogAnalyticOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationLogAnalyticArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationMonitorAccountOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationMonitorAccountArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationStorageBlobOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationStorageBlobArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationStorageBlobDirectOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationStorageBlobDirectArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationStorageTableDirectOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleDestinationStorageTableDirectArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleIdentityOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleStreamDeclarationOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleStreamDeclarationArrayOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleStreamDeclarationColumnOutput{})
	pulumi.RegisterOutputType(GetDataCollectionRuleStreamDeclarationColumnArrayOutput{})
	pulumi.RegisterOutputType(GetLogProfileRetentionPolicyOutput{})
	pulumi.RegisterOutputType(GetLogProfileRetentionPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetScheduledQueryRulesAlertActionOutput{})
	pulumi.RegisterOutputType(GetScheduledQueryRulesAlertActionArrayOutput{})
	pulumi.RegisterOutputType(GetScheduledQueryRulesAlertTriggerOutput{})
	pulumi.RegisterOutputType(GetScheduledQueryRulesAlertTriggerArrayOutput{})
	pulumi.RegisterOutputType(GetScheduledQueryRulesAlertTriggerMetricTriggerOutput{})
	pulumi.RegisterOutputType(GetScheduledQueryRulesAlertTriggerMetricTriggerArrayOutput{})
	pulumi.RegisterOutputType(GetScheduledQueryRulesLogCriteriaOutput{})
	pulumi.RegisterOutputType(GetScheduledQueryRulesLogCriteriaArrayOutput{})
	pulumi.RegisterOutputType(GetScheduledQueryRulesLogCriteriaDimensionOutput{})
	pulumi.RegisterOutputType(GetScheduledQueryRulesLogCriteriaDimensionArrayOutput{})
}
