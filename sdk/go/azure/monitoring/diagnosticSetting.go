// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Diagnostic Setting for an existing Resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/monitoring"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:                exampleResourceGroup.Location,
//				ResourceGroupName:       exampleResourceGroup.Name,
//				TenantId:                *pulumi.String(current.TenantId),
//				SoftDeleteRetentionDays: pulumi.Int(7),
//				PurgeProtectionEnabled:  pulumi.Bool(false),
//				SkuName:                 pulumi.String("standard"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = monitoring.NewDiagnosticSetting(ctx, "exampleDiagnosticSetting", &monitoring.DiagnosticSettingArgs{
//				TargetResourceId: exampleKeyVault.ID(),
//				StorageAccountId: exampleAccount.ID(),
//				EnabledLogs: monitoring.DiagnosticSettingEnabledLogArray{
//					&monitoring.DiagnosticSettingEnabledLogArgs{
//						Category: pulumi.String("AuditEvent"),
//						RetentionPolicy: &monitoring.DiagnosticSettingEnabledLogRetentionPolicyArgs{
//							Enabled: pulumi.Bool(false),
//						},
//					},
//				},
//				Metrics: monitoring.DiagnosticSettingMetricArray{
//					&monitoring.DiagnosticSettingMetricArgs{
//						Category: pulumi.String("AllMetrics"),
//						RetentionPolicy: &monitoring.DiagnosticSettingMetricRetentionPolicyArgs{
//							Enabled: pulumi.Bool(false),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Diagnostic Settings can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:monitoring/diagnosticSetting:DiagnosticSetting example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.KeyVault/vaults/vault1|logMonitoring1"
//
// ```
type DiagnosticSetting struct {
	pulumi.CustomResourceState

	// One or more `enabledLog` blocks as defined below.
	//
	// > **NOTE:** At least one `log`, `enabledLog` or `metric` block must be specified. At least one type of Log or Metric must be enabled.
	EnabledLogs DiagnosticSettingEnabledLogArrayOutput `pulumi:"enabledLogs"`
	// Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data.
	//
	// > **NOTE:** This can be sourced from the `eventhub.EventHubNamespaceAuthorizationRule` resource and is different from a `eventhub.AuthorizationRule` resource.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	EventhubAuthorizationRuleId pulumi.StringPtrOutput `pulumi:"eventhubAuthorizationRuleId"`
	// Specifies the name of the Event Hub where Diagnostics Data should be sent.
	//
	// > **NOTE:** If this isn't specified then the default Event Hub will be used.
	EventhubName pulumi.StringPtrOutput `pulumi:"eventhubName"`
	// Possible values are `AzureDiagnostics` and `Dedicated`. When set to `Dedicated`, logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy `AzureDiagnostics` table.
	//
	// > **NOTE:** This setting will only have an effect if a `logAnalyticsWorkspaceId` is provided. For some target resource type (e.g., Key Vault), this field is unconfigurable. Please see [resource types](https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azurediagnostics#resource-types) for services that use each method. Please [see the documentation](https://docs.microsoft.com/azure/azure-monitor/platform/diagnostic-logs-stream-log-store#azure-diagnostics-vs-resource-specific) for details on the differences between destination types.
	LogAnalyticsDestinationType pulumi.StringOutput `pulumi:"logAnalyticsDestinationType"`
	// Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	LogAnalyticsWorkspaceId pulumi.StringPtrOutput `pulumi:"logAnalyticsWorkspaceId"`
	// One or more `log` blocks as defined below.
	//
	// > **NOTE:** `log` is deprecated in favour of the `enabledLog` property and will be removed in version 4.0 of the AzureRM Provider.
	//
	// Deprecated: `log` has been superseded by `enabled_log` and will be removed in version 4.0 of the AzureRM Provider.
	Logs DiagnosticSettingLogArrayOutput `pulumi:"logs"`
	// One or more `metric` blocks as defined below.
	//
	// > **NOTE:** At least one `log`, `enabledLog` or `metric` block must be specified.
	Metrics DiagnosticSettingMetricArrayOutput `pulumi:"metrics"`
	// Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If the name is set to 'service' it will not be possible to fully delete the diagnostic setting. This is due to legacy API support.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the market partner solution where Diagnostics Data should be sent. For potential partner integrations, [click to learn more about partner integration](https://learn.microsoft.com/en-us/azure/partner-solutions/overview).
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	PartnerSolutionId pulumi.StringPtrOutput `pulumi:"partnerSolutionId"`
	// The ID of the Storage Account where logs should be sent.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	StorageAccountId pulumi.StringPtrOutput `pulumi:"storageAccountId"`
	// The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
	TargetResourceId pulumi.StringOutput `pulumi:"targetResourceId"`
}

// NewDiagnosticSetting registers a new resource with the given unique name, arguments, and options.
func NewDiagnosticSetting(ctx *pulumi.Context,
	name string, args *DiagnosticSettingArgs, opts ...pulumi.ResourceOption) (*DiagnosticSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TargetResourceId == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DiagnosticSetting
	err := ctx.RegisterResource("azure:monitoring/diagnosticSetting:DiagnosticSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiagnosticSetting gets an existing DiagnosticSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiagnosticSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiagnosticSettingState, opts ...pulumi.ResourceOption) (*DiagnosticSetting, error) {
	var resource DiagnosticSetting
	err := ctx.ReadResource("azure:monitoring/diagnosticSetting:DiagnosticSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiagnosticSetting resources.
type diagnosticSettingState struct {
	// One or more `enabledLog` blocks as defined below.
	//
	// > **NOTE:** At least one `log`, `enabledLog` or `metric` block must be specified. At least one type of Log or Metric must be enabled.
	EnabledLogs []DiagnosticSettingEnabledLog `pulumi:"enabledLogs"`
	// Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data.
	//
	// > **NOTE:** This can be sourced from the `eventhub.EventHubNamespaceAuthorizationRule` resource and is different from a `eventhub.AuthorizationRule` resource.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	EventhubAuthorizationRuleId *string `pulumi:"eventhubAuthorizationRuleId"`
	// Specifies the name of the Event Hub where Diagnostics Data should be sent.
	//
	// > **NOTE:** If this isn't specified then the default Event Hub will be used.
	EventhubName *string `pulumi:"eventhubName"`
	// Possible values are `AzureDiagnostics` and `Dedicated`. When set to `Dedicated`, logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy `AzureDiagnostics` table.
	//
	// > **NOTE:** This setting will only have an effect if a `logAnalyticsWorkspaceId` is provided. For some target resource type (e.g., Key Vault), this field is unconfigurable. Please see [resource types](https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azurediagnostics#resource-types) for services that use each method. Please [see the documentation](https://docs.microsoft.com/azure/azure-monitor/platform/diagnostic-logs-stream-log-store#azure-diagnostics-vs-resource-specific) for details on the differences between destination types.
	LogAnalyticsDestinationType *string `pulumi:"logAnalyticsDestinationType"`
	// Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	LogAnalyticsWorkspaceId *string `pulumi:"logAnalyticsWorkspaceId"`
	// One or more `log` blocks as defined below.
	//
	// > **NOTE:** `log` is deprecated in favour of the `enabledLog` property and will be removed in version 4.0 of the AzureRM Provider.
	//
	// Deprecated: `log` has been superseded by `enabled_log` and will be removed in version 4.0 of the AzureRM Provider.
	Logs []DiagnosticSettingLog `pulumi:"logs"`
	// One or more `metric` blocks as defined below.
	//
	// > **NOTE:** At least one `log`, `enabledLog` or `metric` block must be specified.
	Metrics []DiagnosticSettingMetric `pulumi:"metrics"`
	// Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If the name is set to 'service' it will not be possible to fully delete the diagnostic setting. This is due to legacy API support.
	Name *string `pulumi:"name"`
	// The ID of the market partner solution where Diagnostics Data should be sent. For potential partner integrations, [click to learn more about partner integration](https://learn.microsoft.com/en-us/azure/partner-solutions/overview).
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	PartnerSolutionId *string `pulumi:"partnerSolutionId"`
	// The ID of the Storage Account where logs should be sent.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
	TargetResourceId *string `pulumi:"targetResourceId"`
}

type DiagnosticSettingState struct {
	// One or more `enabledLog` blocks as defined below.
	//
	// > **NOTE:** At least one `log`, `enabledLog` or `metric` block must be specified. At least one type of Log or Metric must be enabled.
	EnabledLogs DiagnosticSettingEnabledLogArrayInput
	// Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data.
	//
	// > **NOTE:** This can be sourced from the `eventhub.EventHubNamespaceAuthorizationRule` resource and is different from a `eventhub.AuthorizationRule` resource.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	EventhubAuthorizationRuleId pulumi.StringPtrInput
	// Specifies the name of the Event Hub where Diagnostics Data should be sent.
	//
	// > **NOTE:** If this isn't specified then the default Event Hub will be used.
	EventhubName pulumi.StringPtrInput
	// Possible values are `AzureDiagnostics` and `Dedicated`. When set to `Dedicated`, logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy `AzureDiagnostics` table.
	//
	// > **NOTE:** This setting will only have an effect if a `logAnalyticsWorkspaceId` is provided. For some target resource type (e.g., Key Vault), this field is unconfigurable. Please see [resource types](https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azurediagnostics#resource-types) for services that use each method. Please [see the documentation](https://docs.microsoft.com/azure/azure-monitor/platform/diagnostic-logs-stream-log-store#azure-diagnostics-vs-resource-specific) for details on the differences between destination types.
	LogAnalyticsDestinationType pulumi.StringPtrInput
	// Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	LogAnalyticsWorkspaceId pulumi.StringPtrInput
	// One or more `log` blocks as defined below.
	//
	// > **NOTE:** `log` is deprecated in favour of the `enabledLog` property and will be removed in version 4.0 of the AzureRM Provider.
	//
	// Deprecated: `log` has been superseded by `enabled_log` and will be removed in version 4.0 of the AzureRM Provider.
	Logs DiagnosticSettingLogArrayInput
	// One or more `metric` blocks as defined below.
	//
	// > **NOTE:** At least one `log`, `enabledLog` or `metric` block must be specified.
	Metrics DiagnosticSettingMetricArrayInput
	// Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If the name is set to 'service' it will not be possible to fully delete the diagnostic setting. This is due to legacy API support.
	Name pulumi.StringPtrInput
	// The ID of the market partner solution where Diagnostics Data should be sent. For potential partner integrations, [click to learn more about partner integration](https://learn.microsoft.com/en-us/azure/partner-solutions/overview).
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	PartnerSolutionId pulumi.StringPtrInput
	// The ID of the Storage Account where logs should be sent.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	StorageAccountId pulumi.StringPtrInput
	// The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
	TargetResourceId pulumi.StringPtrInput
}

func (DiagnosticSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*diagnosticSettingState)(nil)).Elem()
}

type diagnosticSettingArgs struct {
	// One or more `enabledLog` blocks as defined below.
	//
	// > **NOTE:** At least one `log`, `enabledLog` or `metric` block must be specified. At least one type of Log or Metric must be enabled.
	EnabledLogs []DiagnosticSettingEnabledLog `pulumi:"enabledLogs"`
	// Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data.
	//
	// > **NOTE:** This can be sourced from the `eventhub.EventHubNamespaceAuthorizationRule` resource and is different from a `eventhub.AuthorizationRule` resource.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	EventhubAuthorizationRuleId *string `pulumi:"eventhubAuthorizationRuleId"`
	// Specifies the name of the Event Hub where Diagnostics Data should be sent.
	//
	// > **NOTE:** If this isn't specified then the default Event Hub will be used.
	EventhubName *string `pulumi:"eventhubName"`
	// Possible values are `AzureDiagnostics` and `Dedicated`. When set to `Dedicated`, logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy `AzureDiagnostics` table.
	//
	// > **NOTE:** This setting will only have an effect if a `logAnalyticsWorkspaceId` is provided. For some target resource type (e.g., Key Vault), this field is unconfigurable. Please see [resource types](https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azurediagnostics#resource-types) for services that use each method. Please [see the documentation](https://docs.microsoft.com/azure/azure-monitor/platform/diagnostic-logs-stream-log-store#azure-diagnostics-vs-resource-specific) for details on the differences between destination types.
	LogAnalyticsDestinationType *string `pulumi:"logAnalyticsDestinationType"`
	// Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	LogAnalyticsWorkspaceId *string `pulumi:"logAnalyticsWorkspaceId"`
	// One or more `log` blocks as defined below.
	//
	// > **NOTE:** `log` is deprecated in favour of the `enabledLog` property and will be removed in version 4.0 of the AzureRM Provider.
	//
	// Deprecated: `log` has been superseded by `enabled_log` and will be removed in version 4.0 of the AzureRM Provider.
	Logs []DiagnosticSettingLog `pulumi:"logs"`
	// One or more `metric` blocks as defined below.
	//
	// > **NOTE:** At least one `log`, `enabledLog` or `metric` block must be specified.
	Metrics []DiagnosticSettingMetric `pulumi:"metrics"`
	// Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If the name is set to 'service' it will not be possible to fully delete the diagnostic setting. This is due to legacy API support.
	Name *string `pulumi:"name"`
	// The ID of the market partner solution where Diagnostics Data should be sent. For potential partner integrations, [click to learn more about partner integration](https://learn.microsoft.com/en-us/azure/partner-solutions/overview).
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	PartnerSolutionId *string `pulumi:"partnerSolutionId"`
	// The ID of the Storage Account where logs should be sent.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
	TargetResourceId string `pulumi:"targetResourceId"`
}

// The set of arguments for constructing a DiagnosticSetting resource.
type DiagnosticSettingArgs struct {
	// One or more `enabledLog` blocks as defined below.
	//
	// > **NOTE:** At least one `log`, `enabledLog` or `metric` block must be specified. At least one type of Log or Metric must be enabled.
	EnabledLogs DiagnosticSettingEnabledLogArrayInput
	// Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data.
	//
	// > **NOTE:** This can be sourced from the `eventhub.EventHubNamespaceAuthorizationRule` resource and is different from a `eventhub.AuthorizationRule` resource.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	EventhubAuthorizationRuleId pulumi.StringPtrInput
	// Specifies the name of the Event Hub where Diagnostics Data should be sent.
	//
	// > **NOTE:** If this isn't specified then the default Event Hub will be used.
	EventhubName pulumi.StringPtrInput
	// Possible values are `AzureDiagnostics` and `Dedicated`. When set to `Dedicated`, logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy `AzureDiagnostics` table.
	//
	// > **NOTE:** This setting will only have an effect if a `logAnalyticsWorkspaceId` is provided. For some target resource type (e.g., Key Vault), this field is unconfigurable. Please see [resource types](https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azurediagnostics#resource-types) for services that use each method. Please [see the documentation](https://docs.microsoft.com/azure/azure-monitor/platform/diagnostic-logs-stream-log-store#azure-diagnostics-vs-resource-specific) for details on the differences between destination types.
	LogAnalyticsDestinationType pulumi.StringPtrInput
	// Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	LogAnalyticsWorkspaceId pulumi.StringPtrInput
	// One or more `log` blocks as defined below.
	//
	// > **NOTE:** `log` is deprecated in favour of the `enabledLog` property and will be removed in version 4.0 of the AzureRM Provider.
	//
	// Deprecated: `log` has been superseded by `enabled_log` and will be removed in version 4.0 of the AzureRM Provider.
	Logs DiagnosticSettingLogArrayInput
	// One or more `metric` blocks as defined below.
	//
	// > **NOTE:** At least one `log`, `enabledLog` or `metric` block must be specified.
	Metrics DiagnosticSettingMetricArrayInput
	// Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
	//
	// > **NOTE:** If the name is set to 'service' it will not be possible to fully delete the diagnostic setting. This is due to legacy API support.
	Name pulumi.StringPtrInput
	// The ID of the market partner solution where Diagnostics Data should be sent. For potential partner integrations, [click to learn more about partner integration](https://learn.microsoft.com/en-us/azure/partner-solutions/overview).
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	PartnerSolutionId pulumi.StringPtrInput
	// The ID of the Storage Account where logs should be sent.
	//
	// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
	StorageAccountId pulumi.StringPtrInput
	// The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
	TargetResourceId pulumi.StringInput
}

func (DiagnosticSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diagnosticSettingArgs)(nil)).Elem()
}

type DiagnosticSettingInput interface {
	pulumi.Input

	ToDiagnosticSettingOutput() DiagnosticSettingOutput
	ToDiagnosticSettingOutputWithContext(ctx context.Context) DiagnosticSettingOutput
}

func (*DiagnosticSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticSetting)(nil)).Elem()
}

func (i *DiagnosticSetting) ToDiagnosticSettingOutput() DiagnosticSettingOutput {
	return i.ToDiagnosticSettingOutputWithContext(context.Background())
}

func (i *DiagnosticSetting) ToDiagnosticSettingOutputWithContext(ctx context.Context) DiagnosticSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingOutput)
}

// DiagnosticSettingArrayInput is an input type that accepts DiagnosticSettingArray and DiagnosticSettingArrayOutput values.
// You can construct a concrete instance of `DiagnosticSettingArrayInput` via:
//
//	DiagnosticSettingArray{ DiagnosticSettingArgs{...} }
type DiagnosticSettingArrayInput interface {
	pulumi.Input

	ToDiagnosticSettingArrayOutput() DiagnosticSettingArrayOutput
	ToDiagnosticSettingArrayOutputWithContext(context.Context) DiagnosticSettingArrayOutput
}

type DiagnosticSettingArray []DiagnosticSettingInput

func (DiagnosticSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiagnosticSetting)(nil)).Elem()
}

func (i DiagnosticSettingArray) ToDiagnosticSettingArrayOutput() DiagnosticSettingArrayOutput {
	return i.ToDiagnosticSettingArrayOutputWithContext(context.Background())
}

func (i DiagnosticSettingArray) ToDiagnosticSettingArrayOutputWithContext(ctx context.Context) DiagnosticSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingArrayOutput)
}

// DiagnosticSettingMapInput is an input type that accepts DiagnosticSettingMap and DiagnosticSettingMapOutput values.
// You can construct a concrete instance of `DiagnosticSettingMapInput` via:
//
//	DiagnosticSettingMap{ "key": DiagnosticSettingArgs{...} }
type DiagnosticSettingMapInput interface {
	pulumi.Input

	ToDiagnosticSettingMapOutput() DiagnosticSettingMapOutput
	ToDiagnosticSettingMapOutputWithContext(context.Context) DiagnosticSettingMapOutput
}

type DiagnosticSettingMap map[string]DiagnosticSettingInput

func (DiagnosticSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiagnosticSetting)(nil)).Elem()
}

func (i DiagnosticSettingMap) ToDiagnosticSettingMapOutput() DiagnosticSettingMapOutput {
	return i.ToDiagnosticSettingMapOutputWithContext(context.Background())
}

func (i DiagnosticSettingMap) ToDiagnosticSettingMapOutputWithContext(ctx context.Context) DiagnosticSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiagnosticSettingMapOutput)
}

type DiagnosticSettingOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticSetting)(nil)).Elem()
}

func (o DiagnosticSettingOutput) ToDiagnosticSettingOutput() DiagnosticSettingOutput {
	return o
}

func (o DiagnosticSettingOutput) ToDiagnosticSettingOutputWithContext(ctx context.Context) DiagnosticSettingOutput {
	return o
}

// One or more `enabledLog` blocks as defined below.
//
// > **NOTE:** At least one `log`, `enabledLog` or `metric` block must be specified. At least one type of Log or Metric must be enabled.
func (o DiagnosticSettingOutput) EnabledLogs() DiagnosticSettingEnabledLogArrayOutput {
	return o.ApplyT(func(v *DiagnosticSetting) DiagnosticSettingEnabledLogArrayOutput { return v.EnabledLogs }).(DiagnosticSettingEnabledLogArrayOutput)
}

// Specifies the ID of an Event Hub Namespace Authorization Rule used to send Diagnostics Data.
//
// > **NOTE:** This can be sourced from the `eventhub.EventHubNamespaceAuthorizationRule` resource and is different from a `eventhub.AuthorizationRule` resource.
//
// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
func (o DiagnosticSettingOutput) EventhubAuthorizationRuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticSetting) pulumi.StringPtrOutput { return v.EventhubAuthorizationRuleId }).(pulumi.StringPtrOutput)
}

// Specifies the name of the Event Hub where Diagnostics Data should be sent.
//
// > **NOTE:** If this isn't specified then the default Event Hub will be used.
func (o DiagnosticSettingOutput) EventhubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticSetting) pulumi.StringPtrOutput { return v.EventhubName }).(pulumi.StringPtrOutput)
}

// Possible values are `AzureDiagnostics` and `Dedicated`. When set to `Dedicated`, logs sent to a Log Analytics workspace will go into resource specific tables, instead of the legacy `AzureDiagnostics` table.
//
// > **NOTE:** This setting will only have an effect if a `logAnalyticsWorkspaceId` is provided. For some target resource type (e.g., Key Vault), this field is unconfigurable. Please see [resource types](https://learn.microsoft.com/en-us/azure/azure-monitor/reference/tables/azurediagnostics#resource-types) for services that use each method. Please [see the documentation](https://docs.microsoft.com/azure/azure-monitor/platform/diagnostic-logs-stream-log-store#azure-diagnostics-vs-resource-specific) for details on the differences between destination types.
func (o DiagnosticSettingOutput) LogAnalyticsDestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *DiagnosticSetting) pulumi.StringOutput { return v.LogAnalyticsDestinationType }).(pulumi.StringOutput)
}

// Specifies the ID of a Log Analytics Workspace where Diagnostics Data should be sent.
//
// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
func (o DiagnosticSettingOutput) LogAnalyticsWorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticSetting) pulumi.StringPtrOutput { return v.LogAnalyticsWorkspaceId }).(pulumi.StringPtrOutput)
}

// One or more `log` blocks as defined below.
//
// > **NOTE:** `log` is deprecated in favour of the `enabledLog` property and will be removed in version 4.0 of the AzureRM Provider.
//
// Deprecated: `log` has been superseded by `enabled_log` and will be removed in version 4.0 of the AzureRM Provider.
func (o DiagnosticSettingOutput) Logs() DiagnosticSettingLogArrayOutput {
	return o.ApplyT(func(v *DiagnosticSetting) DiagnosticSettingLogArrayOutput { return v.Logs }).(DiagnosticSettingLogArrayOutput)
}

// One or more `metric` blocks as defined below.
//
// > **NOTE:** At least one `log`, `enabledLog` or `metric` block must be specified.
func (o DiagnosticSettingOutput) Metrics() DiagnosticSettingMetricArrayOutput {
	return o.ApplyT(func(v *DiagnosticSetting) DiagnosticSettingMetricArrayOutput { return v.Metrics }).(DiagnosticSettingMetricArrayOutput)
}

// Specifies the name of the Diagnostic Setting. Changing this forces a new resource to be created.
//
// > **NOTE:** If the name is set to 'service' it will not be possible to fully delete the diagnostic setting. This is due to legacy API support.
func (o DiagnosticSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DiagnosticSetting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the market partner solution where Diagnostics Data should be sent. For potential partner integrations, [click to learn more about partner integration](https://learn.microsoft.com/en-us/azure/partner-solutions/overview).
//
// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
func (o DiagnosticSettingOutput) PartnerSolutionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticSetting) pulumi.StringPtrOutput { return v.PartnerSolutionId }).(pulumi.StringPtrOutput)
}

// The ID of the Storage Account where logs should be sent.
//
// > **NOTE:** At least one of `eventhubAuthorizationRuleId`, `logAnalyticsWorkspaceId`, `partnerSolutionId` and `storageAccountId` must be specified.
func (o DiagnosticSettingOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiagnosticSetting) pulumi.StringPtrOutput { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// The ID of an existing Resource on which to configure Diagnostic Settings. Changing this forces a new resource to be created.
func (o DiagnosticSettingOutput) TargetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DiagnosticSetting) pulumi.StringOutput { return v.TargetResourceId }).(pulumi.StringOutput)
}

type DiagnosticSettingArrayOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DiagnosticSetting)(nil)).Elem()
}

func (o DiagnosticSettingArrayOutput) ToDiagnosticSettingArrayOutput() DiagnosticSettingArrayOutput {
	return o
}

func (o DiagnosticSettingArrayOutput) ToDiagnosticSettingArrayOutputWithContext(ctx context.Context) DiagnosticSettingArrayOutput {
	return o
}

func (o DiagnosticSettingArrayOutput) Index(i pulumi.IntInput) DiagnosticSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DiagnosticSetting {
		return vs[0].([]*DiagnosticSetting)[vs[1].(int)]
	}).(DiagnosticSettingOutput)
}

type DiagnosticSettingMapOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DiagnosticSetting)(nil)).Elem()
}

func (o DiagnosticSettingMapOutput) ToDiagnosticSettingMapOutput() DiagnosticSettingMapOutput {
	return o
}

func (o DiagnosticSettingMapOutput) ToDiagnosticSettingMapOutputWithContext(ctx context.Context) DiagnosticSettingMapOutput {
	return o
}

func (o DiagnosticSettingMapOutput) MapIndex(k pulumi.StringInput) DiagnosticSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DiagnosticSetting {
		return vs[0].(map[string]*DiagnosticSetting)[vs[1].(string)]
	}).(DiagnosticSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingInput)(nil)).Elem(), &DiagnosticSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingArrayInput)(nil)).Elem(), DiagnosticSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiagnosticSettingMapInput)(nil)).Elem(), DiagnosticSettingMap{})
	pulumi.RegisterOutputType(DiagnosticSettingOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingArrayOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingMapOutput{})
}
