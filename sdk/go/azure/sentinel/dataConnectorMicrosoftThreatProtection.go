// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentinel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Microsoft Threat Protection Data Connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/operationalinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/sentinel"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("PerGB2018"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogAnalyticsWorkspaceOnboarding, err := sentinel.NewLogAnalyticsWorkspaceOnboarding(ctx, "exampleLogAnalyticsWorkspaceOnboarding", &sentinel.LogAnalyticsWorkspaceOnboardingArgs{
//				WorkspaceId: exampleAnalyticsWorkspace.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sentinel.NewDataConnectorMicrosoftThreatProtection(ctx, "exampleDataConnectorMicrosoftThreatProtection", &sentinel.DataConnectorMicrosoftThreatProtectionArgs{
//				LogAnalyticsWorkspaceId: exampleLogAnalyticsWorkspaceOnboarding.WorkspaceId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Microsoft Threat Protection Data Connectors can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:sentinel/dataConnectorMicrosoftThreatProtection:DataConnectorMicrosoftThreatProtection example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/dataConnectors/dc1
//
// ```
type DataConnectorMicrosoftThreatProtection struct {
	pulumi.CustomResourceState

	// The ID of the Log Analytics Workspace that this Microsoft Threat Protection Data Connector resides in. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringOutput `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Microsoft Threat Protection Data Connector. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the tenant that this Microsoft Threat Protection Data Connector connects to. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewDataConnectorMicrosoftThreatProtection registers a new resource with the given unique name, arguments, and options.
func NewDataConnectorMicrosoftThreatProtection(ctx *pulumi.Context,
	name string, args *DataConnectorMicrosoftThreatProtectionArgs, opts ...pulumi.ResourceOption) (*DataConnectorMicrosoftThreatProtection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogAnalyticsWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'LogAnalyticsWorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataConnectorMicrosoftThreatProtection
	err := ctx.RegisterResource("azure:sentinel/dataConnectorMicrosoftThreatProtection:DataConnectorMicrosoftThreatProtection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataConnectorMicrosoftThreatProtection gets an existing DataConnectorMicrosoftThreatProtection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataConnectorMicrosoftThreatProtection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataConnectorMicrosoftThreatProtectionState, opts ...pulumi.ResourceOption) (*DataConnectorMicrosoftThreatProtection, error) {
	var resource DataConnectorMicrosoftThreatProtection
	err := ctx.ReadResource("azure:sentinel/dataConnectorMicrosoftThreatProtection:DataConnectorMicrosoftThreatProtection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataConnectorMicrosoftThreatProtection resources.
type dataConnectorMicrosoftThreatProtectionState struct {
	// The ID of the Log Analytics Workspace that this Microsoft Threat Protection Data Connector resides in. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	LogAnalyticsWorkspaceId *string `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Microsoft Threat Protection Data Connector. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the tenant that this Microsoft Threat Protection Data Connector connects to. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
}

type DataConnectorMicrosoftThreatProtectionState struct {
	// The ID of the Log Analytics Workspace that this Microsoft Threat Protection Data Connector resides in. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringPtrInput
	// The name which should be used for this Microsoft Threat Protection Data Connector. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the tenant that this Microsoft Threat Protection Data Connector connects to. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
}

func (DataConnectorMicrosoftThreatProtectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorMicrosoftThreatProtectionState)(nil)).Elem()
}

type dataConnectorMicrosoftThreatProtectionArgs struct {
	// The ID of the Log Analytics Workspace that this Microsoft Threat Protection Data Connector resides in. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	LogAnalyticsWorkspaceId string `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Microsoft Threat Protection Data Connector. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the tenant that this Microsoft Threat Protection Data Connector connects to. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a DataConnectorMicrosoftThreatProtection resource.
type DataConnectorMicrosoftThreatProtectionArgs struct {
	// The ID of the Log Analytics Workspace that this Microsoft Threat Protection Data Connector resides in. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringInput
	// The name which should be used for this Microsoft Threat Protection Data Connector. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the tenant that this Microsoft Threat Protection Data Connector connects to. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
}

func (DataConnectorMicrosoftThreatProtectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorMicrosoftThreatProtectionArgs)(nil)).Elem()
}

type DataConnectorMicrosoftThreatProtectionInput interface {
	pulumi.Input

	ToDataConnectorMicrosoftThreatProtectionOutput() DataConnectorMicrosoftThreatProtectionOutput
	ToDataConnectorMicrosoftThreatProtectionOutputWithContext(ctx context.Context) DataConnectorMicrosoftThreatProtectionOutput
}

func (*DataConnectorMicrosoftThreatProtection) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorMicrosoftThreatProtection)(nil)).Elem()
}

func (i *DataConnectorMicrosoftThreatProtection) ToDataConnectorMicrosoftThreatProtectionOutput() DataConnectorMicrosoftThreatProtectionOutput {
	return i.ToDataConnectorMicrosoftThreatProtectionOutputWithContext(context.Background())
}

func (i *DataConnectorMicrosoftThreatProtection) ToDataConnectorMicrosoftThreatProtectionOutputWithContext(ctx context.Context) DataConnectorMicrosoftThreatProtectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorMicrosoftThreatProtectionOutput)
}

// DataConnectorMicrosoftThreatProtectionArrayInput is an input type that accepts DataConnectorMicrosoftThreatProtectionArray and DataConnectorMicrosoftThreatProtectionArrayOutput values.
// You can construct a concrete instance of `DataConnectorMicrosoftThreatProtectionArrayInput` via:
//
//	DataConnectorMicrosoftThreatProtectionArray{ DataConnectorMicrosoftThreatProtectionArgs{...} }
type DataConnectorMicrosoftThreatProtectionArrayInput interface {
	pulumi.Input

	ToDataConnectorMicrosoftThreatProtectionArrayOutput() DataConnectorMicrosoftThreatProtectionArrayOutput
	ToDataConnectorMicrosoftThreatProtectionArrayOutputWithContext(context.Context) DataConnectorMicrosoftThreatProtectionArrayOutput
}

type DataConnectorMicrosoftThreatProtectionArray []DataConnectorMicrosoftThreatProtectionInput

func (DataConnectorMicrosoftThreatProtectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorMicrosoftThreatProtection)(nil)).Elem()
}

func (i DataConnectorMicrosoftThreatProtectionArray) ToDataConnectorMicrosoftThreatProtectionArrayOutput() DataConnectorMicrosoftThreatProtectionArrayOutput {
	return i.ToDataConnectorMicrosoftThreatProtectionArrayOutputWithContext(context.Background())
}

func (i DataConnectorMicrosoftThreatProtectionArray) ToDataConnectorMicrosoftThreatProtectionArrayOutputWithContext(ctx context.Context) DataConnectorMicrosoftThreatProtectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorMicrosoftThreatProtectionArrayOutput)
}

// DataConnectorMicrosoftThreatProtectionMapInput is an input type that accepts DataConnectorMicrosoftThreatProtectionMap and DataConnectorMicrosoftThreatProtectionMapOutput values.
// You can construct a concrete instance of `DataConnectorMicrosoftThreatProtectionMapInput` via:
//
//	DataConnectorMicrosoftThreatProtectionMap{ "key": DataConnectorMicrosoftThreatProtectionArgs{...} }
type DataConnectorMicrosoftThreatProtectionMapInput interface {
	pulumi.Input

	ToDataConnectorMicrosoftThreatProtectionMapOutput() DataConnectorMicrosoftThreatProtectionMapOutput
	ToDataConnectorMicrosoftThreatProtectionMapOutputWithContext(context.Context) DataConnectorMicrosoftThreatProtectionMapOutput
}

type DataConnectorMicrosoftThreatProtectionMap map[string]DataConnectorMicrosoftThreatProtectionInput

func (DataConnectorMicrosoftThreatProtectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorMicrosoftThreatProtection)(nil)).Elem()
}

func (i DataConnectorMicrosoftThreatProtectionMap) ToDataConnectorMicrosoftThreatProtectionMapOutput() DataConnectorMicrosoftThreatProtectionMapOutput {
	return i.ToDataConnectorMicrosoftThreatProtectionMapOutputWithContext(context.Background())
}

func (i DataConnectorMicrosoftThreatProtectionMap) ToDataConnectorMicrosoftThreatProtectionMapOutputWithContext(ctx context.Context) DataConnectorMicrosoftThreatProtectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorMicrosoftThreatProtectionMapOutput)
}

type DataConnectorMicrosoftThreatProtectionOutput struct{ *pulumi.OutputState }

func (DataConnectorMicrosoftThreatProtectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorMicrosoftThreatProtection)(nil)).Elem()
}

func (o DataConnectorMicrosoftThreatProtectionOutput) ToDataConnectorMicrosoftThreatProtectionOutput() DataConnectorMicrosoftThreatProtectionOutput {
	return o
}

func (o DataConnectorMicrosoftThreatProtectionOutput) ToDataConnectorMicrosoftThreatProtectionOutputWithContext(ctx context.Context) DataConnectorMicrosoftThreatProtectionOutput {
	return o
}

// The ID of the Log Analytics Workspace that this Microsoft Threat Protection Data Connector resides in. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
func (o DataConnectorMicrosoftThreatProtectionOutput) LogAnalyticsWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorMicrosoftThreatProtection) pulumi.StringOutput { return v.LogAnalyticsWorkspaceId }).(pulumi.StringOutput)
}

// The name which should be used for this Microsoft Threat Protection Data Connector. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
func (o DataConnectorMicrosoftThreatProtectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorMicrosoftThreatProtection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the tenant that this Microsoft Threat Protection Data Connector connects to. Changing this forces a new Microsoft Threat Protection Data Connector to be created.
//
// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
func (o DataConnectorMicrosoftThreatProtectionOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorMicrosoftThreatProtection) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type DataConnectorMicrosoftThreatProtectionArrayOutput struct{ *pulumi.OutputState }

func (DataConnectorMicrosoftThreatProtectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorMicrosoftThreatProtection)(nil)).Elem()
}

func (o DataConnectorMicrosoftThreatProtectionArrayOutput) ToDataConnectorMicrosoftThreatProtectionArrayOutput() DataConnectorMicrosoftThreatProtectionArrayOutput {
	return o
}

func (o DataConnectorMicrosoftThreatProtectionArrayOutput) ToDataConnectorMicrosoftThreatProtectionArrayOutputWithContext(ctx context.Context) DataConnectorMicrosoftThreatProtectionArrayOutput {
	return o
}

func (o DataConnectorMicrosoftThreatProtectionArrayOutput) Index(i pulumi.IntInput) DataConnectorMicrosoftThreatProtectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataConnectorMicrosoftThreatProtection {
		return vs[0].([]*DataConnectorMicrosoftThreatProtection)[vs[1].(int)]
	}).(DataConnectorMicrosoftThreatProtectionOutput)
}

type DataConnectorMicrosoftThreatProtectionMapOutput struct{ *pulumi.OutputState }

func (DataConnectorMicrosoftThreatProtectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorMicrosoftThreatProtection)(nil)).Elem()
}

func (o DataConnectorMicrosoftThreatProtectionMapOutput) ToDataConnectorMicrosoftThreatProtectionMapOutput() DataConnectorMicrosoftThreatProtectionMapOutput {
	return o
}

func (o DataConnectorMicrosoftThreatProtectionMapOutput) ToDataConnectorMicrosoftThreatProtectionMapOutputWithContext(ctx context.Context) DataConnectorMicrosoftThreatProtectionMapOutput {
	return o
}

func (o DataConnectorMicrosoftThreatProtectionMapOutput) MapIndex(k pulumi.StringInput) DataConnectorMicrosoftThreatProtectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataConnectorMicrosoftThreatProtection {
		return vs[0].(map[string]*DataConnectorMicrosoftThreatProtection)[vs[1].(string)]
	}).(DataConnectorMicrosoftThreatProtectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorMicrosoftThreatProtectionInput)(nil)).Elem(), &DataConnectorMicrosoftThreatProtection{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorMicrosoftThreatProtectionArrayInput)(nil)).Elem(), DataConnectorMicrosoftThreatProtectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorMicrosoftThreatProtectionMapInput)(nil)).Elem(), DataConnectorMicrosoftThreatProtectionMap{})
	pulumi.RegisterOutputType(DataConnectorMicrosoftThreatProtectionOutput{})
	pulumi.RegisterOutputType(DataConnectorMicrosoftThreatProtectionArrayOutput{})
	pulumi.RegisterOutputType(DataConnectorMicrosoftThreatProtectionMapOutput{})
}
