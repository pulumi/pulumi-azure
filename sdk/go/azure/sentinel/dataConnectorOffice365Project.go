// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentinel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Office 365 Project Data Connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/operationalinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/sentinel"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("PerGB2018"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogAnalyticsWorkspaceOnboarding, err := sentinel.NewLogAnalyticsWorkspaceOnboarding(ctx, "exampleLogAnalyticsWorkspaceOnboarding", &sentinel.LogAnalyticsWorkspaceOnboardingArgs{
//				WorkspaceId: exampleAnalyticsWorkspace.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sentinel.NewDataConnectorOffice365Project(ctx, "exampleDataConnectorOffice365Project", &sentinel.DataConnectorOffice365ProjectArgs{
//				LogAnalyticsWorkspaceId: exampleLogAnalyticsWorkspaceOnboarding.WorkspaceId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Office 365 Project Data Connectors can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:sentinel/dataConnectorOffice365Project:DataConnectorOffice365Project example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/dataConnectors/dc1
//
// ```
type DataConnectorOffice365Project struct {
	pulumi.CustomResourceState

	// The ID of the Log Analytics Workspace that this Office 365 Project Data Connector resides in. Changing this forces a new Office 365 Project Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringOutput `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Office 365 Project Data Connector. Changing this forces a new Office 365 Project Data Connector to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the tenant that this Office 365 Project Data Connector connects to. Changing this forces a new Office 365 Project Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewDataConnectorOffice365Project registers a new resource with the given unique name, arguments, and options.
func NewDataConnectorOffice365Project(ctx *pulumi.Context,
	name string, args *DataConnectorOffice365ProjectArgs, opts ...pulumi.ResourceOption) (*DataConnectorOffice365Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogAnalyticsWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'LogAnalyticsWorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataConnectorOffice365Project
	err := ctx.RegisterResource("azure:sentinel/dataConnectorOffice365Project:DataConnectorOffice365Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataConnectorOffice365Project gets an existing DataConnectorOffice365Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataConnectorOffice365Project(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataConnectorOffice365ProjectState, opts ...pulumi.ResourceOption) (*DataConnectorOffice365Project, error) {
	var resource DataConnectorOffice365Project
	err := ctx.ReadResource("azure:sentinel/dataConnectorOffice365Project:DataConnectorOffice365Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataConnectorOffice365Project resources.
type dataConnectorOffice365ProjectState struct {
	// The ID of the Log Analytics Workspace that this Office 365 Project Data Connector resides in. Changing this forces a new Office 365 Project Data Connector to be created.
	LogAnalyticsWorkspaceId *string `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Office 365 Project Data Connector. Changing this forces a new Office 365 Project Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the tenant that this Office 365 Project Data Connector connects to. Changing this forces a new Office 365 Project Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
}

type DataConnectorOffice365ProjectState struct {
	// The ID of the Log Analytics Workspace that this Office 365 Project Data Connector resides in. Changing this forces a new Office 365 Project Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringPtrInput
	// The name which should be used for this Office 365 Project Data Connector. Changing this forces a new Office 365 Project Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the tenant that this Office 365 Project Data Connector connects to. Changing this forces a new Office 365 Project Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
}

func (DataConnectorOffice365ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorOffice365ProjectState)(nil)).Elem()
}

type dataConnectorOffice365ProjectArgs struct {
	// The ID of the Log Analytics Workspace that this Office 365 Project Data Connector resides in. Changing this forces a new Office 365 Project Data Connector to be created.
	LogAnalyticsWorkspaceId string `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Office 365 Project Data Connector. Changing this forces a new Office 365 Project Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the tenant that this Office 365 Project Data Connector connects to. Changing this forces a new Office 365 Project Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a DataConnectorOffice365Project resource.
type DataConnectorOffice365ProjectArgs struct {
	// The ID of the Log Analytics Workspace that this Office 365 Project Data Connector resides in. Changing this forces a new Office 365 Project Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringInput
	// The name which should be used for this Office 365 Project Data Connector. Changing this forces a new Office 365 Project Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the tenant that this Office 365 Project Data Connector connects to. Changing this forces a new Office 365 Project Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
}

func (DataConnectorOffice365ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorOffice365ProjectArgs)(nil)).Elem()
}

type DataConnectorOffice365ProjectInput interface {
	pulumi.Input

	ToDataConnectorOffice365ProjectOutput() DataConnectorOffice365ProjectOutput
	ToDataConnectorOffice365ProjectOutputWithContext(ctx context.Context) DataConnectorOffice365ProjectOutput
}

func (*DataConnectorOffice365Project) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorOffice365Project)(nil)).Elem()
}

func (i *DataConnectorOffice365Project) ToDataConnectorOffice365ProjectOutput() DataConnectorOffice365ProjectOutput {
	return i.ToDataConnectorOffice365ProjectOutputWithContext(context.Background())
}

func (i *DataConnectorOffice365Project) ToDataConnectorOffice365ProjectOutputWithContext(ctx context.Context) DataConnectorOffice365ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorOffice365ProjectOutput)
}

// DataConnectorOffice365ProjectArrayInput is an input type that accepts DataConnectorOffice365ProjectArray and DataConnectorOffice365ProjectArrayOutput values.
// You can construct a concrete instance of `DataConnectorOffice365ProjectArrayInput` via:
//
//	DataConnectorOffice365ProjectArray{ DataConnectorOffice365ProjectArgs{...} }
type DataConnectorOffice365ProjectArrayInput interface {
	pulumi.Input

	ToDataConnectorOffice365ProjectArrayOutput() DataConnectorOffice365ProjectArrayOutput
	ToDataConnectorOffice365ProjectArrayOutputWithContext(context.Context) DataConnectorOffice365ProjectArrayOutput
}

type DataConnectorOffice365ProjectArray []DataConnectorOffice365ProjectInput

func (DataConnectorOffice365ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorOffice365Project)(nil)).Elem()
}

func (i DataConnectorOffice365ProjectArray) ToDataConnectorOffice365ProjectArrayOutput() DataConnectorOffice365ProjectArrayOutput {
	return i.ToDataConnectorOffice365ProjectArrayOutputWithContext(context.Background())
}

func (i DataConnectorOffice365ProjectArray) ToDataConnectorOffice365ProjectArrayOutputWithContext(ctx context.Context) DataConnectorOffice365ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorOffice365ProjectArrayOutput)
}

// DataConnectorOffice365ProjectMapInput is an input type that accepts DataConnectorOffice365ProjectMap and DataConnectorOffice365ProjectMapOutput values.
// You can construct a concrete instance of `DataConnectorOffice365ProjectMapInput` via:
//
//	DataConnectorOffice365ProjectMap{ "key": DataConnectorOffice365ProjectArgs{...} }
type DataConnectorOffice365ProjectMapInput interface {
	pulumi.Input

	ToDataConnectorOffice365ProjectMapOutput() DataConnectorOffice365ProjectMapOutput
	ToDataConnectorOffice365ProjectMapOutputWithContext(context.Context) DataConnectorOffice365ProjectMapOutput
}

type DataConnectorOffice365ProjectMap map[string]DataConnectorOffice365ProjectInput

func (DataConnectorOffice365ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorOffice365Project)(nil)).Elem()
}

func (i DataConnectorOffice365ProjectMap) ToDataConnectorOffice365ProjectMapOutput() DataConnectorOffice365ProjectMapOutput {
	return i.ToDataConnectorOffice365ProjectMapOutputWithContext(context.Background())
}

func (i DataConnectorOffice365ProjectMap) ToDataConnectorOffice365ProjectMapOutputWithContext(ctx context.Context) DataConnectorOffice365ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorOffice365ProjectMapOutput)
}

type DataConnectorOffice365ProjectOutput struct{ *pulumi.OutputState }

func (DataConnectorOffice365ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorOffice365Project)(nil)).Elem()
}

func (o DataConnectorOffice365ProjectOutput) ToDataConnectorOffice365ProjectOutput() DataConnectorOffice365ProjectOutput {
	return o
}

func (o DataConnectorOffice365ProjectOutput) ToDataConnectorOffice365ProjectOutputWithContext(ctx context.Context) DataConnectorOffice365ProjectOutput {
	return o
}

// The ID of the Log Analytics Workspace that this Office 365 Project Data Connector resides in. Changing this forces a new Office 365 Project Data Connector to be created.
func (o DataConnectorOffice365ProjectOutput) LogAnalyticsWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorOffice365Project) pulumi.StringOutput { return v.LogAnalyticsWorkspaceId }).(pulumi.StringOutput)
}

// The name which should be used for this Office 365 Project Data Connector. Changing this forces a new Office 365 Project Data Connector to be created.
func (o DataConnectorOffice365ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorOffice365Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the tenant that this Office 365 Project Data Connector connects to. Changing this forces a new Office 365 Project Data Connector to be created.
//
// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
func (o DataConnectorOffice365ProjectOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorOffice365Project) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type DataConnectorOffice365ProjectArrayOutput struct{ *pulumi.OutputState }

func (DataConnectorOffice365ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorOffice365Project)(nil)).Elem()
}

func (o DataConnectorOffice365ProjectArrayOutput) ToDataConnectorOffice365ProjectArrayOutput() DataConnectorOffice365ProjectArrayOutput {
	return o
}

func (o DataConnectorOffice365ProjectArrayOutput) ToDataConnectorOffice365ProjectArrayOutputWithContext(ctx context.Context) DataConnectorOffice365ProjectArrayOutput {
	return o
}

func (o DataConnectorOffice365ProjectArrayOutput) Index(i pulumi.IntInput) DataConnectorOffice365ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataConnectorOffice365Project {
		return vs[0].([]*DataConnectorOffice365Project)[vs[1].(int)]
	}).(DataConnectorOffice365ProjectOutput)
}

type DataConnectorOffice365ProjectMapOutput struct{ *pulumi.OutputState }

func (DataConnectorOffice365ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorOffice365Project)(nil)).Elem()
}

func (o DataConnectorOffice365ProjectMapOutput) ToDataConnectorOffice365ProjectMapOutput() DataConnectorOffice365ProjectMapOutput {
	return o
}

func (o DataConnectorOffice365ProjectMapOutput) ToDataConnectorOffice365ProjectMapOutputWithContext(ctx context.Context) DataConnectorOffice365ProjectMapOutput {
	return o
}

func (o DataConnectorOffice365ProjectMapOutput) MapIndex(k pulumi.StringInput) DataConnectorOffice365ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataConnectorOffice365Project {
		return vs[0].(map[string]*DataConnectorOffice365Project)[vs[1].(string)]
	}).(DataConnectorOffice365ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorOffice365ProjectInput)(nil)).Elem(), &DataConnectorOffice365Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorOffice365ProjectArrayInput)(nil)).Elem(), DataConnectorOffice365ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorOffice365ProjectMapInput)(nil)).Elem(), DataConnectorOffice365ProjectMap{})
	pulumi.RegisterOutputType(DataConnectorOffice365ProjectOutput{})
	pulumi.RegisterOutputType(DataConnectorOffice365ProjectArrayOutput{})
	pulumi.RegisterOutputType(DataConnectorOffice365ProjectMapOutput{})
}
