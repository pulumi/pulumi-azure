// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentinel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Sentinel Metadata.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/operationalinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/sentinel"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("pergb2018"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsSolution, err := operationalinsights.NewAnalyticsSolution(ctx, "exampleAnalyticsSolution", &operationalinsights.AnalyticsSolutionArgs{
//				SolutionName:        pulumi.String("SecurityInsights"),
//				Location:            exampleResourceGroup.Location,
//				ResourceGroupName:   exampleResourceGroup.Name,
//				WorkspaceResourceId: exampleAnalyticsWorkspace.ID(),
//				WorkspaceName:       exampleAnalyticsWorkspace.Name,
//				Plan: &operationalinsights.AnalyticsSolutionPlanArgs{
//					Publisher: pulumi.String("Microsoft"),
//					Product:   pulumi.String("OMSGallery/SecurityInsights"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleAlertRuleNrt, err := sentinel.NewAlertRuleNrt(ctx, "exampleAlertRuleNrt", &sentinel.AlertRuleNrtArgs{
//				LogAnalyticsWorkspaceId: exampleAnalyticsSolution.WorkspaceResourceId,
//				DisplayName:             pulumi.String("example"),
//				Severity:                pulumi.String("High"),
//				Query:                   pulumi.String("AzureActivity |\n  where OperationName == \"Create or Update Virtual Machine\" or OperationName ==\"Create Deployment\" |\n  where ActivityStatus == \"Succeeded\" |\n  make-series dcount(ResourceId) default=0 on EventSubmissionTimestamp in range(ago(7d), now(), 1d) by Caller\n"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sentinel.NewMetadata(ctx, "exampleMetadata", &sentinel.MetadataArgs{
//				WorkspaceId: exampleAnalyticsSolution.WorkspaceResourceId,
//				ContentId:   exampleAlertRuleNrt.Name,
//				Kind:        pulumi.String("AnalyticsRule"),
//				ParentId:    exampleAlertRuleNrt.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Sentinel Metadata can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:sentinel/metadata:Metadata example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourcegroup1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/metadata/metadata1
//
// ```
type Metadata struct {
	pulumi.CustomResourceState

	// An `author` blocks as defined below.
	Author MetadataAuthorPtrOutput `pulumi:"author"`
	// A `category` block as defined below.
	Category MetadataCategoryPtrOutput `pulumi:"category"`
	// The ID of the content. Used to identify dependencies and content from solutions or community.
	ContentId pulumi.StringOutput `pulumi:"contentId"`
	// Schema version of the content. Can be used to distinguish between flow based on the schema version.
	ContentSchemaVersion pulumi.StringPtrOutput `pulumi:"contentSchemaVersion"`
	// The Custom version of the content.
	CustomVersion pulumi.StringPtrOutput `pulumi:"customVersion"`
	// A JSON formatted `dependency` block as defined below. Dependency for the content item, what other content items it requires to work.
	Dependency pulumi.StringPtrOutput `pulumi:"dependency"`
	// The first publish date of solution content item.
	FirstPublishDate pulumi.StringPtrOutput `pulumi:"firstPublishDate"`
	// The ID of the icon, this id can be fetched from the solution template.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The kind of content the metadata is for. Possible values are `AnalyticsRule`, `AnalyticsRuleTemplate`, `AutomationRule`, `AzureFunction`, `DataConnector`, `DataType`, `HuntingQuery`, `InvestigationQuery`, `LogicAppsCustomConnector`, `Parser`, `Playbook`, `PlaybookTemplate`, `Solution`, `Watchlist`, `WatchlistTemplate`, `Workbook` and `WorkbookTemplate`.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The last publish date of solution content item.
	LastPublishDate pulumi.StringPtrOutput `pulumi:"lastPublishDate"`
	// The name which should be used for this Sentinel Metadata. Changing this forces a new Sentinel Metadata to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the parent resource ID of the content item, which the metadata belongs to.
	ParentId pulumi.StringOutput `pulumi:"parentId"`
	// Specifies a list of preview image file names. These will be taken from solution artifacts.
	PreviewImages pulumi.StringArrayOutput `pulumi:"previewImages"`
	// Specifies a list of preview image file names used for dark theme. These will be taken from solution artifacts.
	PreviewImagesDarks pulumi.StringArrayOutput `pulumi:"previewImagesDarks"`
	// Specifies a list of providers for the solution content item.
	Providers pulumi.StringArrayOutput `pulumi:"providers"`
	// A `source` block as defined below.
	Source MetadataSourceOutput `pulumi:"source"`
	// A `support` block as defined below.
	Support MetadataSupportPtrOutput `pulumi:"support"`
	// Specifies a list of tactics the resource covers. Possible values are `Reconnaissance`, `ResourceDevelopment`, `InitialAccess`, `Execution`, `Persistence`, `PrivilegeEscalation`, `DefenseEvasion`, `CredentialAccess`, `Discovery`, `LateralMovement`, `Collection`, `CommandAndControl`, `Exfiltration`, `Impact`, `ImpairProcessControl` and `InhibitResponseFunction`.
	ThreatAnalysisTactics pulumi.StringArrayOutput `pulumi:"threatAnalysisTactics"`
	// Specifies a list of techniques the resource covers.
	ThreatAnalysisTechniques pulumi.StringArrayOutput `pulumi:"threatAnalysisTechniques"`
	// Version of the content.
	Version pulumi.StringPtrOutput `pulumi:"version"`
	// The ID of the Log Analytics Workspace. Changing this forces a new Sentinel Metadata to be created.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewMetadata registers a new resource with the given unique name, arguments, and options.
func NewMetadata(ctx *pulumi.Context,
	name string, args *MetadataArgs, opts ...pulumi.ResourceOption) (*Metadata, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContentId == nil {
		return nil, errors.New("invalid value for required argument 'ContentId'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ParentId == nil {
		return nil, errors.New("invalid value for required argument 'ParentId'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Metadata
	err := ctx.RegisterResource("azure:sentinel/metadata:Metadata", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetadata gets an existing Metadata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetadata(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetadataState, opts ...pulumi.ResourceOption) (*Metadata, error) {
	var resource Metadata
	err := ctx.ReadResource("azure:sentinel/metadata:Metadata", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Metadata resources.
type metadataState struct {
	// An `author` blocks as defined below.
	Author *MetadataAuthor `pulumi:"author"`
	// A `category` block as defined below.
	Category *MetadataCategory `pulumi:"category"`
	// The ID of the content. Used to identify dependencies and content from solutions or community.
	ContentId *string `pulumi:"contentId"`
	// Schema version of the content. Can be used to distinguish between flow based on the schema version.
	ContentSchemaVersion *string `pulumi:"contentSchemaVersion"`
	// The Custom version of the content.
	CustomVersion *string `pulumi:"customVersion"`
	// A JSON formatted `dependency` block as defined below. Dependency for the content item, what other content items it requires to work.
	Dependency *string `pulumi:"dependency"`
	// The first publish date of solution content item.
	FirstPublishDate *string `pulumi:"firstPublishDate"`
	// The ID of the icon, this id can be fetched from the solution template.
	IconId *string `pulumi:"iconId"`
	// The kind of content the metadata is for. Possible values are `AnalyticsRule`, `AnalyticsRuleTemplate`, `AutomationRule`, `AzureFunction`, `DataConnector`, `DataType`, `HuntingQuery`, `InvestigationQuery`, `LogicAppsCustomConnector`, `Parser`, `Playbook`, `PlaybookTemplate`, `Solution`, `Watchlist`, `WatchlistTemplate`, `Workbook` and `WorkbookTemplate`.
	Kind *string `pulumi:"kind"`
	// The last publish date of solution content item.
	LastPublishDate *string `pulumi:"lastPublishDate"`
	// The name which should be used for this Sentinel Metadata. Changing this forces a new Sentinel Metadata to be created.
	Name *string `pulumi:"name"`
	// The ID of the parent resource ID of the content item, which the metadata belongs to.
	ParentId *string `pulumi:"parentId"`
	// Specifies a list of preview image file names. These will be taken from solution artifacts.
	PreviewImages []string `pulumi:"previewImages"`
	// Specifies a list of preview image file names used for dark theme. These will be taken from solution artifacts.
	PreviewImagesDarks []string `pulumi:"previewImagesDarks"`
	// Specifies a list of providers for the solution content item.
	Providers []string `pulumi:"providers"`
	// A `source` block as defined below.
	Source *MetadataSource `pulumi:"source"`
	// A `support` block as defined below.
	Support *MetadataSupport `pulumi:"support"`
	// Specifies a list of tactics the resource covers. Possible values are `Reconnaissance`, `ResourceDevelopment`, `InitialAccess`, `Execution`, `Persistence`, `PrivilegeEscalation`, `DefenseEvasion`, `CredentialAccess`, `Discovery`, `LateralMovement`, `Collection`, `CommandAndControl`, `Exfiltration`, `Impact`, `ImpairProcessControl` and `InhibitResponseFunction`.
	ThreatAnalysisTactics []string `pulumi:"threatAnalysisTactics"`
	// Specifies a list of techniques the resource covers.
	ThreatAnalysisTechniques []string `pulumi:"threatAnalysisTechniques"`
	// Version of the content.
	Version *string `pulumi:"version"`
	// The ID of the Log Analytics Workspace. Changing this forces a new Sentinel Metadata to be created.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type MetadataState struct {
	// An `author` blocks as defined below.
	Author MetadataAuthorPtrInput
	// A `category` block as defined below.
	Category MetadataCategoryPtrInput
	// The ID of the content. Used to identify dependencies and content from solutions or community.
	ContentId pulumi.StringPtrInput
	// Schema version of the content. Can be used to distinguish between flow based on the schema version.
	ContentSchemaVersion pulumi.StringPtrInput
	// The Custom version of the content.
	CustomVersion pulumi.StringPtrInput
	// A JSON formatted `dependency` block as defined below. Dependency for the content item, what other content items it requires to work.
	Dependency pulumi.StringPtrInput
	// The first publish date of solution content item.
	FirstPublishDate pulumi.StringPtrInput
	// The ID of the icon, this id can be fetched from the solution template.
	IconId pulumi.StringPtrInput
	// The kind of content the metadata is for. Possible values are `AnalyticsRule`, `AnalyticsRuleTemplate`, `AutomationRule`, `AzureFunction`, `DataConnector`, `DataType`, `HuntingQuery`, `InvestigationQuery`, `LogicAppsCustomConnector`, `Parser`, `Playbook`, `PlaybookTemplate`, `Solution`, `Watchlist`, `WatchlistTemplate`, `Workbook` and `WorkbookTemplate`.
	Kind pulumi.StringPtrInput
	// The last publish date of solution content item.
	LastPublishDate pulumi.StringPtrInput
	// The name which should be used for this Sentinel Metadata. Changing this forces a new Sentinel Metadata to be created.
	Name pulumi.StringPtrInput
	// The ID of the parent resource ID of the content item, which the metadata belongs to.
	ParentId pulumi.StringPtrInput
	// Specifies a list of preview image file names. These will be taken from solution artifacts.
	PreviewImages pulumi.StringArrayInput
	// Specifies a list of preview image file names used for dark theme. These will be taken from solution artifacts.
	PreviewImagesDarks pulumi.StringArrayInput
	// Specifies a list of providers for the solution content item.
	Providers pulumi.StringArrayInput
	// A `source` block as defined below.
	Source MetadataSourcePtrInput
	// A `support` block as defined below.
	Support MetadataSupportPtrInput
	// Specifies a list of tactics the resource covers. Possible values are `Reconnaissance`, `ResourceDevelopment`, `InitialAccess`, `Execution`, `Persistence`, `PrivilegeEscalation`, `DefenseEvasion`, `CredentialAccess`, `Discovery`, `LateralMovement`, `Collection`, `CommandAndControl`, `Exfiltration`, `Impact`, `ImpairProcessControl` and `InhibitResponseFunction`.
	ThreatAnalysisTactics pulumi.StringArrayInput
	// Specifies a list of techniques the resource covers.
	ThreatAnalysisTechniques pulumi.StringArrayInput
	// Version of the content.
	Version pulumi.StringPtrInput
	// The ID of the Log Analytics Workspace. Changing this forces a new Sentinel Metadata to be created.
	WorkspaceId pulumi.StringPtrInput
}

func (MetadataState) ElementType() reflect.Type {
	return reflect.TypeOf((*metadataState)(nil)).Elem()
}

type metadataArgs struct {
	// An `author` blocks as defined below.
	Author *MetadataAuthor `pulumi:"author"`
	// A `category` block as defined below.
	Category *MetadataCategory `pulumi:"category"`
	// The ID of the content. Used to identify dependencies and content from solutions or community.
	ContentId string `pulumi:"contentId"`
	// Schema version of the content. Can be used to distinguish between flow based on the schema version.
	ContentSchemaVersion *string `pulumi:"contentSchemaVersion"`
	// The Custom version of the content.
	CustomVersion *string `pulumi:"customVersion"`
	// A JSON formatted `dependency` block as defined below. Dependency for the content item, what other content items it requires to work.
	Dependency *string `pulumi:"dependency"`
	// The first publish date of solution content item.
	FirstPublishDate *string `pulumi:"firstPublishDate"`
	// The ID of the icon, this id can be fetched from the solution template.
	IconId *string `pulumi:"iconId"`
	// The kind of content the metadata is for. Possible values are `AnalyticsRule`, `AnalyticsRuleTemplate`, `AutomationRule`, `AzureFunction`, `DataConnector`, `DataType`, `HuntingQuery`, `InvestigationQuery`, `LogicAppsCustomConnector`, `Parser`, `Playbook`, `PlaybookTemplate`, `Solution`, `Watchlist`, `WatchlistTemplate`, `Workbook` and `WorkbookTemplate`.
	Kind string `pulumi:"kind"`
	// The last publish date of solution content item.
	LastPublishDate *string `pulumi:"lastPublishDate"`
	// The name which should be used for this Sentinel Metadata. Changing this forces a new Sentinel Metadata to be created.
	Name *string `pulumi:"name"`
	// The ID of the parent resource ID of the content item, which the metadata belongs to.
	ParentId string `pulumi:"parentId"`
	// Specifies a list of preview image file names. These will be taken from solution artifacts.
	PreviewImages []string `pulumi:"previewImages"`
	// Specifies a list of preview image file names used for dark theme. These will be taken from solution artifacts.
	PreviewImagesDarks []string `pulumi:"previewImagesDarks"`
	// Specifies a list of providers for the solution content item.
	Providers []string `pulumi:"providers"`
	// A `source` block as defined below.
	Source *MetadataSource `pulumi:"source"`
	// A `support` block as defined below.
	Support *MetadataSupport `pulumi:"support"`
	// Specifies a list of tactics the resource covers. Possible values are `Reconnaissance`, `ResourceDevelopment`, `InitialAccess`, `Execution`, `Persistence`, `PrivilegeEscalation`, `DefenseEvasion`, `CredentialAccess`, `Discovery`, `LateralMovement`, `Collection`, `CommandAndControl`, `Exfiltration`, `Impact`, `ImpairProcessControl` and `InhibitResponseFunction`.
	ThreatAnalysisTactics []string `pulumi:"threatAnalysisTactics"`
	// Specifies a list of techniques the resource covers.
	ThreatAnalysisTechniques []string `pulumi:"threatAnalysisTechniques"`
	// Version of the content.
	Version *string `pulumi:"version"`
	// The ID of the Log Analytics Workspace. Changing this forces a new Sentinel Metadata to be created.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a Metadata resource.
type MetadataArgs struct {
	// An `author` blocks as defined below.
	Author MetadataAuthorPtrInput
	// A `category` block as defined below.
	Category MetadataCategoryPtrInput
	// The ID of the content. Used to identify dependencies and content from solutions or community.
	ContentId pulumi.StringInput
	// Schema version of the content. Can be used to distinguish between flow based on the schema version.
	ContentSchemaVersion pulumi.StringPtrInput
	// The Custom version of the content.
	CustomVersion pulumi.StringPtrInput
	// A JSON formatted `dependency` block as defined below. Dependency for the content item, what other content items it requires to work.
	Dependency pulumi.StringPtrInput
	// The first publish date of solution content item.
	FirstPublishDate pulumi.StringPtrInput
	// The ID of the icon, this id can be fetched from the solution template.
	IconId pulumi.StringPtrInput
	// The kind of content the metadata is for. Possible values are `AnalyticsRule`, `AnalyticsRuleTemplate`, `AutomationRule`, `AzureFunction`, `DataConnector`, `DataType`, `HuntingQuery`, `InvestigationQuery`, `LogicAppsCustomConnector`, `Parser`, `Playbook`, `PlaybookTemplate`, `Solution`, `Watchlist`, `WatchlistTemplate`, `Workbook` and `WorkbookTemplate`.
	Kind pulumi.StringInput
	// The last publish date of solution content item.
	LastPublishDate pulumi.StringPtrInput
	// The name which should be used for this Sentinel Metadata. Changing this forces a new Sentinel Metadata to be created.
	Name pulumi.StringPtrInput
	// The ID of the parent resource ID of the content item, which the metadata belongs to.
	ParentId pulumi.StringInput
	// Specifies a list of preview image file names. These will be taken from solution artifacts.
	PreviewImages pulumi.StringArrayInput
	// Specifies a list of preview image file names used for dark theme. These will be taken from solution artifacts.
	PreviewImagesDarks pulumi.StringArrayInput
	// Specifies a list of providers for the solution content item.
	Providers pulumi.StringArrayInput
	// A `source` block as defined below.
	Source MetadataSourcePtrInput
	// A `support` block as defined below.
	Support MetadataSupportPtrInput
	// Specifies a list of tactics the resource covers. Possible values are `Reconnaissance`, `ResourceDevelopment`, `InitialAccess`, `Execution`, `Persistence`, `PrivilegeEscalation`, `DefenseEvasion`, `CredentialAccess`, `Discovery`, `LateralMovement`, `Collection`, `CommandAndControl`, `Exfiltration`, `Impact`, `ImpairProcessControl` and `InhibitResponseFunction`.
	ThreatAnalysisTactics pulumi.StringArrayInput
	// Specifies a list of techniques the resource covers.
	ThreatAnalysisTechniques pulumi.StringArrayInput
	// Version of the content.
	Version pulumi.StringPtrInput
	// The ID of the Log Analytics Workspace. Changing this forces a new Sentinel Metadata to be created.
	WorkspaceId pulumi.StringInput
}

func (MetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*metadataArgs)(nil)).Elem()
}

type MetadataInput interface {
	pulumi.Input

	ToMetadataOutput() MetadataOutput
	ToMetadataOutputWithContext(ctx context.Context) MetadataOutput
}

func (*Metadata) ElementType() reflect.Type {
	return reflect.TypeOf((**Metadata)(nil)).Elem()
}

func (i *Metadata) ToMetadataOutput() MetadataOutput {
	return i.ToMetadataOutputWithContext(context.Background())
}

func (i *Metadata) ToMetadataOutputWithContext(ctx context.Context) MetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataOutput)
}

func (i *Metadata) ToOutput(ctx context.Context) pulumix.Output[*Metadata] {
	return pulumix.Output[*Metadata]{
		OutputState: i.ToMetadataOutputWithContext(ctx).OutputState,
	}
}

// MetadataArrayInput is an input type that accepts MetadataArray and MetadataArrayOutput values.
// You can construct a concrete instance of `MetadataArrayInput` via:
//
//	MetadataArray{ MetadataArgs{...} }
type MetadataArrayInput interface {
	pulumi.Input

	ToMetadataArrayOutput() MetadataArrayOutput
	ToMetadataArrayOutputWithContext(context.Context) MetadataArrayOutput
}

type MetadataArray []MetadataInput

func (MetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Metadata)(nil)).Elem()
}

func (i MetadataArray) ToMetadataArrayOutput() MetadataArrayOutput {
	return i.ToMetadataArrayOutputWithContext(context.Background())
}

func (i MetadataArray) ToMetadataArrayOutputWithContext(ctx context.Context) MetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataArrayOutput)
}

func (i MetadataArray) ToOutput(ctx context.Context) pulumix.Output[[]*Metadata] {
	return pulumix.Output[[]*Metadata]{
		OutputState: i.ToMetadataArrayOutputWithContext(ctx).OutputState,
	}
}

// MetadataMapInput is an input type that accepts MetadataMap and MetadataMapOutput values.
// You can construct a concrete instance of `MetadataMapInput` via:
//
//	MetadataMap{ "key": MetadataArgs{...} }
type MetadataMapInput interface {
	pulumi.Input

	ToMetadataMapOutput() MetadataMapOutput
	ToMetadataMapOutputWithContext(context.Context) MetadataMapOutput
}

type MetadataMap map[string]MetadataInput

func (MetadataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Metadata)(nil)).Elem()
}

func (i MetadataMap) ToMetadataMapOutput() MetadataMapOutput {
	return i.ToMetadataMapOutputWithContext(context.Background())
}

func (i MetadataMap) ToMetadataMapOutputWithContext(ctx context.Context) MetadataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataMapOutput)
}

func (i MetadataMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Metadata] {
	return pulumix.Output[map[string]*Metadata]{
		OutputState: i.ToMetadataMapOutputWithContext(ctx).OutputState,
	}
}

type MetadataOutput struct{ *pulumi.OutputState }

func (MetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Metadata)(nil)).Elem()
}

func (o MetadataOutput) ToMetadataOutput() MetadataOutput {
	return o
}

func (o MetadataOutput) ToMetadataOutputWithContext(ctx context.Context) MetadataOutput {
	return o
}

func (o MetadataOutput) ToOutput(ctx context.Context) pulumix.Output[*Metadata] {
	return pulumix.Output[*Metadata]{
		OutputState: o.OutputState,
	}
}

// An `author` blocks as defined below.
func (o MetadataOutput) Author() MetadataAuthorPtrOutput {
	return o.ApplyT(func(v *Metadata) MetadataAuthorPtrOutput { return v.Author }).(MetadataAuthorPtrOutput)
}

// A `category` block as defined below.
func (o MetadataOutput) Category() MetadataCategoryPtrOutput {
	return o.ApplyT(func(v *Metadata) MetadataCategoryPtrOutput { return v.Category }).(MetadataCategoryPtrOutput)
}

// The ID of the content. Used to identify dependencies and content from solutions or community.
func (o MetadataOutput) ContentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringOutput { return v.ContentId }).(pulumi.StringOutput)
}

// Schema version of the content. Can be used to distinguish between flow based on the schema version.
func (o MetadataOutput) ContentSchemaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringPtrOutput { return v.ContentSchemaVersion }).(pulumi.StringPtrOutput)
}

// The Custom version of the content.
func (o MetadataOutput) CustomVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringPtrOutput { return v.CustomVersion }).(pulumi.StringPtrOutput)
}

// A JSON formatted `dependency` block as defined below. Dependency for the content item, what other content items it requires to work.
func (o MetadataOutput) Dependency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringPtrOutput { return v.Dependency }).(pulumi.StringPtrOutput)
}

// The first publish date of solution content item.
func (o MetadataOutput) FirstPublishDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringPtrOutput { return v.FirstPublishDate }).(pulumi.StringPtrOutput)
}

// The ID of the icon, this id can be fetched from the solution template.
func (o MetadataOutput) IconId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringPtrOutput { return v.IconId }).(pulumi.StringPtrOutput)
}

// The kind of content the metadata is for. Possible values are `AnalyticsRule`, `AnalyticsRuleTemplate`, `AutomationRule`, `AzureFunction`, `DataConnector`, `DataType`, `HuntingQuery`, `InvestigationQuery`, `LogicAppsCustomConnector`, `Parser`, `Playbook`, `PlaybookTemplate`, `Solution`, `Watchlist`, `WatchlistTemplate`, `Workbook` and `WorkbookTemplate`.
func (o MetadataOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The last publish date of solution content item.
func (o MetadataOutput) LastPublishDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringPtrOutput { return v.LastPublishDate }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Sentinel Metadata. Changing this forces a new Sentinel Metadata to be created.
func (o MetadataOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the parent resource ID of the content item, which the metadata belongs to.
func (o MetadataOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringOutput { return v.ParentId }).(pulumi.StringOutput)
}

// Specifies a list of preview image file names. These will be taken from solution artifacts.
func (o MetadataOutput) PreviewImages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringArrayOutput { return v.PreviewImages }).(pulumi.StringArrayOutput)
}

// Specifies a list of preview image file names used for dark theme. These will be taken from solution artifacts.
func (o MetadataOutput) PreviewImagesDarks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringArrayOutput { return v.PreviewImagesDarks }).(pulumi.StringArrayOutput)
}

// Specifies a list of providers for the solution content item.
func (o MetadataOutput) Providers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringArrayOutput { return v.Providers }).(pulumi.StringArrayOutput)
}

// A `source` block as defined below.
func (o MetadataOutput) Source() MetadataSourceOutput {
	return o.ApplyT(func(v *Metadata) MetadataSourceOutput { return v.Source }).(MetadataSourceOutput)
}

// A `support` block as defined below.
func (o MetadataOutput) Support() MetadataSupportPtrOutput {
	return o.ApplyT(func(v *Metadata) MetadataSupportPtrOutput { return v.Support }).(MetadataSupportPtrOutput)
}

// Specifies a list of tactics the resource covers. Possible values are `Reconnaissance`, `ResourceDevelopment`, `InitialAccess`, `Execution`, `Persistence`, `PrivilegeEscalation`, `DefenseEvasion`, `CredentialAccess`, `Discovery`, `LateralMovement`, `Collection`, `CommandAndControl`, `Exfiltration`, `Impact`, `ImpairProcessControl` and `InhibitResponseFunction`.
func (o MetadataOutput) ThreatAnalysisTactics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringArrayOutput { return v.ThreatAnalysisTactics }).(pulumi.StringArrayOutput)
}

// Specifies a list of techniques the resource covers.
func (o MetadataOutput) ThreatAnalysisTechniques() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringArrayOutput { return v.ThreatAnalysisTechniques }).(pulumi.StringArrayOutput)
}

// Version of the content.
func (o MetadataOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

// The ID of the Log Analytics Workspace. Changing this forces a new Sentinel Metadata to be created.
func (o MetadataOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Metadata) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type MetadataArrayOutput struct{ *pulumi.OutputState }

func (MetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Metadata)(nil)).Elem()
}

func (o MetadataArrayOutput) ToMetadataArrayOutput() MetadataArrayOutput {
	return o
}

func (o MetadataArrayOutput) ToMetadataArrayOutputWithContext(ctx context.Context) MetadataArrayOutput {
	return o
}

func (o MetadataArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Metadata] {
	return pulumix.Output[[]*Metadata]{
		OutputState: o.OutputState,
	}
}

func (o MetadataArrayOutput) Index(i pulumi.IntInput) MetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Metadata {
		return vs[0].([]*Metadata)[vs[1].(int)]
	}).(MetadataOutput)
}

type MetadataMapOutput struct{ *pulumi.OutputState }

func (MetadataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Metadata)(nil)).Elem()
}

func (o MetadataMapOutput) ToMetadataMapOutput() MetadataMapOutput {
	return o
}

func (o MetadataMapOutput) ToMetadataMapOutputWithContext(ctx context.Context) MetadataMapOutput {
	return o
}

func (o MetadataMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Metadata] {
	return pulumix.Output[map[string]*Metadata]{
		OutputState: o.OutputState,
	}
}

func (o MetadataMapOutput) MapIndex(k pulumi.StringInput) MetadataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Metadata {
		return vs[0].(map[string]*Metadata)[vs[1].(string)]
	}).(MetadataOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataInput)(nil)).Elem(), &Metadata{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataArrayInput)(nil)).Elem(), MetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataMapInput)(nil)).Elem(), MetadataMap{})
	pulumi.RegisterOutputType(MetadataOutput{})
	pulumi.RegisterOutputType(MetadataArrayOutput{})
	pulumi.RegisterOutputType(MetadataMapOutput{})
}
