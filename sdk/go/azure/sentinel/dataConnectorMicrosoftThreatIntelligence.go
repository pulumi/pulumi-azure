// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentinel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Microsoft Threat Intelligence Data Connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/operationalinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/sentinel"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("east us"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("PerGB2018"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogAnalyticsWorkspaceOnboarding, err := sentinel.NewLogAnalyticsWorkspaceOnboarding(ctx, "exampleLogAnalyticsWorkspaceOnboarding", &sentinel.LogAnalyticsWorkspaceOnboardingArgs{
//				WorkspaceId: exampleAnalyticsWorkspace.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sentinel.NewDataConnectorMicrosoftThreatIntelligence(ctx, "exampleDataConnectorMicrosoftThreatIntelligence", &sentinel.DataConnectorMicrosoftThreatIntelligenceArgs{
//				LogAnalyticsWorkspaceId:                 exampleLogAnalyticsWorkspaceOnboarding.WorkspaceId,
//				MicrosoftEmergingThreatFeedLookbackDate: pulumi.String("1970-01-01T00:00:00Z"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// sentinels can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:sentinel/dataConnectorMicrosoftThreatIntelligence:DataConnectorMicrosoftThreatIntelligence example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/dataConnectors/dc1
//
// ```
type DataConnectorMicrosoftThreatIntelligence struct {
	pulumi.CustomResourceState

	// The lookback date for the Bing Safety Phishing Url in RFC3339. Changing this forces a new Data Connector to be created.
	//
	// > **Note:** `bingSafetyPhishingUrlLookbackDate` has been deprecated as the API no longer supports it and will be removed in version 4.0 of the provider.
	//
	// Deprecated: This field is deprecated and will be removed in version 4.0 of the AzureRM Provider.
	BingSafetyPhishingUrlLookbackDate pulumi.StringPtrOutput `pulumi:"bingSafetyPhishingUrlLookbackDate"`
	// The ID of the Log Analytics Workspace. Changing this forces a new Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringOutput `pulumi:"logAnalyticsWorkspaceId"`
	// The lookback date for the Microsoft Emerging Threat Feed in RFC3339. Changing this forces a new Data Connector to be created.
	//
	// > **Note:** `microsoftEmergingThreatFeedLookbackDate` will be required in version 4.0 of the provider.
	//
	// > **NOTE:** At least one of `bingSafetyPhishingUrlLookbackDate` and `microsoftEmergingThreatFeedLookbackDate` must be specified.
	MicrosoftEmergingThreatFeedLookbackDate pulumi.StringPtrOutput `pulumi:"microsoftEmergingThreatFeedLookbackDate"`
	// The name which should be used for this Microsoft Threat Intelligence Data Connector. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the tenant that this Microsoft Threat Intelligence Data Connector connects to. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewDataConnectorMicrosoftThreatIntelligence registers a new resource with the given unique name, arguments, and options.
func NewDataConnectorMicrosoftThreatIntelligence(ctx *pulumi.Context,
	name string, args *DataConnectorMicrosoftThreatIntelligenceArgs, opts ...pulumi.ResourceOption) (*DataConnectorMicrosoftThreatIntelligence, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogAnalyticsWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'LogAnalyticsWorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataConnectorMicrosoftThreatIntelligence
	err := ctx.RegisterResource("azure:sentinel/dataConnectorMicrosoftThreatIntelligence:DataConnectorMicrosoftThreatIntelligence", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataConnectorMicrosoftThreatIntelligence gets an existing DataConnectorMicrosoftThreatIntelligence resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataConnectorMicrosoftThreatIntelligence(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataConnectorMicrosoftThreatIntelligenceState, opts ...pulumi.ResourceOption) (*DataConnectorMicrosoftThreatIntelligence, error) {
	var resource DataConnectorMicrosoftThreatIntelligence
	err := ctx.ReadResource("azure:sentinel/dataConnectorMicrosoftThreatIntelligence:DataConnectorMicrosoftThreatIntelligence", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataConnectorMicrosoftThreatIntelligence resources.
type dataConnectorMicrosoftThreatIntelligenceState struct {
	// The lookback date for the Bing Safety Phishing Url in RFC3339. Changing this forces a new Data Connector to be created.
	//
	// > **Note:** `bingSafetyPhishingUrlLookbackDate` has been deprecated as the API no longer supports it and will be removed in version 4.0 of the provider.
	//
	// Deprecated: This field is deprecated and will be removed in version 4.0 of the AzureRM Provider.
	BingSafetyPhishingUrlLookbackDate *string `pulumi:"bingSafetyPhishingUrlLookbackDate"`
	// The ID of the Log Analytics Workspace. Changing this forces a new Data Connector to be created.
	LogAnalyticsWorkspaceId *string `pulumi:"logAnalyticsWorkspaceId"`
	// The lookback date for the Microsoft Emerging Threat Feed in RFC3339. Changing this forces a new Data Connector to be created.
	//
	// > **Note:** `microsoftEmergingThreatFeedLookbackDate` will be required in version 4.0 of the provider.
	//
	// > **NOTE:** At least one of `bingSafetyPhishingUrlLookbackDate` and `microsoftEmergingThreatFeedLookbackDate` must be specified.
	MicrosoftEmergingThreatFeedLookbackDate *string `pulumi:"microsoftEmergingThreatFeedLookbackDate"`
	// The name which should be used for this Microsoft Threat Intelligence Data Connector. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the tenant that this Microsoft Threat Intelligence Data Connector connects to. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
}

type DataConnectorMicrosoftThreatIntelligenceState struct {
	// The lookback date for the Bing Safety Phishing Url in RFC3339. Changing this forces a new Data Connector to be created.
	//
	// > **Note:** `bingSafetyPhishingUrlLookbackDate` has been deprecated as the API no longer supports it and will be removed in version 4.0 of the provider.
	//
	// Deprecated: This field is deprecated and will be removed in version 4.0 of the AzureRM Provider.
	BingSafetyPhishingUrlLookbackDate pulumi.StringPtrInput
	// The ID of the Log Analytics Workspace. Changing this forces a new Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringPtrInput
	// The lookback date for the Microsoft Emerging Threat Feed in RFC3339. Changing this forces a new Data Connector to be created.
	//
	// > **Note:** `microsoftEmergingThreatFeedLookbackDate` will be required in version 4.0 of the provider.
	//
	// > **NOTE:** At least one of `bingSafetyPhishingUrlLookbackDate` and `microsoftEmergingThreatFeedLookbackDate` must be specified.
	MicrosoftEmergingThreatFeedLookbackDate pulumi.StringPtrInput
	// The name which should be used for this Microsoft Threat Intelligence Data Connector. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the tenant that this Microsoft Threat Intelligence Data Connector connects to. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
}

func (DataConnectorMicrosoftThreatIntelligenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorMicrosoftThreatIntelligenceState)(nil)).Elem()
}

type dataConnectorMicrosoftThreatIntelligenceArgs struct {
	// The lookback date for the Bing Safety Phishing Url in RFC3339. Changing this forces a new Data Connector to be created.
	//
	// > **Note:** `bingSafetyPhishingUrlLookbackDate` has been deprecated as the API no longer supports it and will be removed in version 4.0 of the provider.
	//
	// Deprecated: This field is deprecated and will be removed in version 4.0 of the AzureRM Provider.
	BingSafetyPhishingUrlLookbackDate *string `pulumi:"bingSafetyPhishingUrlLookbackDate"`
	// The ID of the Log Analytics Workspace. Changing this forces a new Data Connector to be created.
	LogAnalyticsWorkspaceId string `pulumi:"logAnalyticsWorkspaceId"`
	// The lookback date for the Microsoft Emerging Threat Feed in RFC3339. Changing this forces a new Data Connector to be created.
	//
	// > **Note:** `microsoftEmergingThreatFeedLookbackDate` will be required in version 4.0 of the provider.
	//
	// > **NOTE:** At least one of `bingSafetyPhishingUrlLookbackDate` and `microsoftEmergingThreatFeedLookbackDate` must be specified.
	MicrosoftEmergingThreatFeedLookbackDate *string `pulumi:"microsoftEmergingThreatFeedLookbackDate"`
	// The name which should be used for this Microsoft Threat Intelligence Data Connector. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the tenant that this Microsoft Threat Intelligence Data Connector connects to. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a DataConnectorMicrosoftThreatIntelligence resource.
type DataConnectorMicrosoftThreatIntelligenceArgs struct {
	// The lookback date for the Bing Safety Phishing Url in RFC3339. Changing this forces a new Data Connector to be created.
	//
	// > **Note:** `bingSafetyPhishingUrlLookbackDate` has been deprecated as the API no longer supports it and will be removed in version 4.0 of the provider.
	//
	// Deprecated: This field is deprecated and will be removed in version 4.0 of the AzureRM Provider.
	BingSafetyPhishingUrlLookbackDate pulumi.StringPtrInput
	// The ID of the Log Analytics Workspace. Changing this forces a new Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringInput
	// The lookback date for the Microsoft Emerging Threat Feed in RFC3339. Changing this forces a new Data Connector to be created.
	//
	// > **Note:** `microsoftEmergingThreatFeedLookbackDate` will be required in version 4.0 of the provider.
	//
	// > **NOTE:** At least one of `bingSafetyPhishingUrlLookbackDate` and `microsoftEmergingThreatFeedLookbackDate` must be specified.
	MicrosoftEmergingThreatFeedLookbackDate pulumi.StringPtrInput
	// The name which should be used for this Microsoft Threat Intelligence Data Connector. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the tenant that this Microsoft Threat Intelligence Data Connector connects to. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
}

func (DataConnectorMicrosoftThreatIntelligenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorMicrosoftThreatIntelligenceArgs)(nil)).Elem()
}

type DataConnectorMicrosoftThreatIntelligenceInput interface {
	pulumi.Input

	ToDataConnectorMicrosoftThreatIntelligenceOutput() DataConnectorMicrosoftThreatIntelligenceOutput
	ToDataConnectorMicrosoftThreatIntelligenceOutputWithContext(ctx context.Context) DataConnectorMicrosoftThreatIntelligenceOutput
}

func (*DataConnectorMicrosoftThreatIntelligence) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorMicrosoftThreatIntelligence)(nil)).Elem()
}

func (i *DataConnectorMicrosoftThreatIntelligence) ToDataConnectorMicrosoftThreatIntelligenceOutput() DataConnectorMicrosoftThreatIntelligenceOutput {
	return i.ToDataConnectorMicrosoftThreatIntelligenceOutputWithContext(context.Background())
}

func (i *DataConnectorMicrosoftThreatIntelligence) ToDataConnectorMicrosoftThreatIntelligenceOutputWithContext(ctx context.Context) DataConnectorMicrosoftThreatIntelligenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorMicrosoftThreatIntelligenceOutput)
}

// DataConnectorMicrosoftThreatIntelligenceArrayInput is an input type that accepts DataConnectorMicrosoftThreatIntelligenceArray and DataConnectorMicrosoftThreatIntelligenceArrayOutput values.
// You can construct a concrete instance of `DataConnectorMicrosoftThreatIntelligenceArrayInput` via:
//
//	DataConnectorMicrosoftThreatIntelligenceArray{ DataConnectorMicrosoftThreatIntelligenceArgs{...} }
type DataConnectorMicrosoftThreatIntelligenceArrayInput interface {
	pulumi.Input

	ToDataConnectorMicrosoftThreatIntelligenceArrayOutput() DataConnectorMicrosoftThreatIntelligenceArrayOutput
	ToDataConnectorMicrosoftThreatIntelligenceArrayOutputWithContext(context.Context) DataConnectorMicrosoftThreatIntelligenceArrayOutput
}

type DataConnectorMicrosoftThreatIntelligenceArray []DataConnectorMicrosoftThreatIntelligenceInput

func (DataConnectorMicrosoftThreatIntelligenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorMicrosoftThreatIntelligence)(nil)).Elem()
}

func (i DataConnectorMicrosoftThreatIntelligenceArray) ToDataConnectorMicrosoftThreatIntelligenceArrayOutput() DataConnectorMicrosoftThreatIntelligenceArrayOutput {
	return i.ToDataConnectorMicrosoftThreatIntelligenceArrayOutputWithContext(context.Background())
}

func (i DataConnectorMicrosoftThreatIntelligenceArray) ToDataConnectorMicrosoftThreatIntelligenceArrayOutputWithContext(ctx context.Context) DataConnectorMicrosoftThreatIntelligenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorMicrosoftThreatIntelligenceArrayOutput)
}

// DataConnectorMicrosoftThreatIntelligenceMapInput is an input type that accepts DataConnectorMicrosoftThreatIntelligenceMap and DataConnectorMicrosoftThreatIntelligenceMapOutput values.
// You can construct a concrete instance of `DataConnectorMicrosoftThreatIntelligenceMapInput` via:
//
//	DataConnectorMicrosoftThreatIntelligenceMap{ "key": DataConnectorMicrosoftThreatIntelligenceArgs{...} }
type DataConnectorMicrosoftThreatIntelligenceMapInput interface {
	pulumi.Input

	ToDataConnectorMicrosoftThreatIntelligenceMapOutput() DataConnectorMicrosoftThreatIntelligenceMapOutput
	ToDataConnectorMicrosoftThreatIntelligenceMapOutputWithContext(context.Context) DataConnectorMicrosoftThreatIntelligenceMapOutput
}

type DataConnectorMicrosoftThreatIntelligenceMap map[string]DataConnectorMicrosoftThreatIntelligenceInput

func (DataConnectorMicrosoftThreatIntelligenceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorMicrosoftThreatIntelligence)(nil)).Elem()
}

func (i DataConnectorMicrosoftThreatIntelligenceMap) ToDataConnectorMicrosoftThreatIntelligenceMapOutput() DataConnectorMicrosoftThreatIntelligenceMapOutput {
	return i.ToDataConnectorMicrosoftThreatIntelligenceMapOutputWithContext(context.Background())
}

func (i DataConnectorMicrosoftThreatIntelligenceMap) ToDataConnectorMicrosoftThreatIntelligenceMapOutputWithContext(ctx context.Context) DataConnectorMicrosoftThreatIntelligenceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorMicrosoftThreatIntelligenceMapOutput)
}

type DataConnectorMicrosoftThreatIntelligenceOutput struct{ *pulumi.OutputState }

func (DataConnectorMicrosoftThreatIntelligenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorMicrosoftThreatIntelligence)(nil)).Elem()
}

func (o DataConnectorMicrosoftThreatIntelligenceOutput) ToDataConnectorMicrosoftThreatIntelligenceOutput() DataConnectorMicrosoftThreatIntelligenceOutput {
	return o
}

func (o DataConnectorMicrosoftThreatIntelligenceOutput) ToDataConnectorMicrosoftThreatIntelligenceOutputWithContext(ctx context.Context) DataConnectorMicrosoftThreatIntelligenceOutput {
	return o
}

// The lookback date for the Bing Safety Phishing Url in RFC3339. Changing this forces a new Data Connector to be created.
//
// > **Note:** `bingSafetyPhishingUrlLookbackDate` has been deprecated as the API no longer supports it and will be removed in version 4.0 of the provider.
//
// Deprecated: This field is deprecated and will be removed in version 4.0 of the AzureRM Provider.
func (o DataConnectorMicrosoftThreatIntelligenceOutput) BingSafetyPhishingUrlLookbackDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataConnectorMicrosoftThreatIntelligence) pulumi.StringPtrOutput {
		return v.BingSafetyPhishingUrlLookbackDate
	}).(pulumi.StringPtrOutput)
}

// The ID of the Log Analytics Workspace. Changing this forces a new Data Connector to be created.
func (o DataConnectorMicrosoftThreatIntelligenceOutput) LogAnalyticsWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorMicrosoftThreatIntelligence) pulumi.StringOutput {
		return v.LogAnalyticsWorkspaceId
	}).(pulumi.StringOutput)
}

// The lookback date for the Microsoft Emerging Threat Feed in RFC3339. Changing this forces a new Data Connector to be created.
//
// > **Note:** `microsoftEmergingThreatFeedLookbackDate` will be required in version 4.0 of the provider.
//
// > **NOTE:** At least one of `bingSafetyPhishingUrlLookbackDate` and `microsoftEmergingThreatFeedLookbackDate` must be specified.
func (o DataConnectorMicrosoftThreatIntelligenceOutput) MicrosoftEmergingThreatFeedLookbackDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataConnectorMicrosoftThreatIntelligence) pulumi.StringPtrOutput {
		return v.MicrosoftEmergingThreatFeedLookbackDate
	}).(pulumi.StringPtrOutput)
}

// The name which should be used for this Microsoft Threat Intelligence Data Connector. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
func (o DataConnectorMicrosoftThreatIntelligenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorMicrosoftThreatIntelligence) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the tenant that this Microsoft Threat Intelligence Data Connector connects to. Changing this forces a new Microsoft Threat Intelligence Data Connector to be created.
//
// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
func (o DataConnectorMicrosoftThreatIntelligenceOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorMicrosoftThreatIntelligence) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type DataConnectorMicrosoftThreatIntelligenceArrayOutput struct{ *pulumi.OutputState }

func (DataConnectorMicrosoftThreatIntelligenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorMicrosoftThreatIntelligence)(nil)).Elem()
}

func (o DataConnectorMicrosoftThreatIntelligenceArrayOutput) ToDataConnectorMicrosoftThreatIntelligenceArrayOutput() DataConnectorMicrosoftThreatIntelligenceArrayOutput {
	return o
}

func (o DataConnectorMicrosoftThreatIntelligenceArrayOutput) ToDataConnectorMicrosoftThreatIntelligenceArrayOutputWithContext(ctx context.Context) DataConnectorMicrosoftThreatIntelligenceArrayOutput {
	return o
}

func (o DataConnectorMicrosoftThreatIntelligenceArrayOutput) Index(i pulumi.IntInput) DataConnectorMicrosoftThreatIntelligenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataConnectorMicrosoftThreatIntelligence {
		return vs[0].([]*DataConnectorMicrosoftThreatIntelligence)[vs[1].(int)]
	}).(DataConnectorMicrosoftThreatIntelligenceOutput)
}

type DataConnectorMicrosoftThreatIntelligenceMapOutput struct{ *pulumi.OutputState }

func (DataConnectorMicrosoftThreatIntelligenceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorMicrosoftThreatIntelligence)(nil)).Elem()
}

func (o DataConnectorMicrosoftThreatIntelligenceMapOutput) ToDataConnectorMicrosoftThreatIntelligenceMapOutput() DataConnectorMicrosoftThreatIntelligenceMapOutput {
	return o
}

func (o DataConnectorMicrosoftThreatIntelligenceMapOutput) ToDataConnectorMicrosoftThreatIntelligenceMapOutputWithContext(ctx context.Context) DataConnectorMicrosoftThreatIntelligenceMapOutput {
	return o
}

func (o DataConnectorMicrosoftThreatIntelligenceMapOutput) MapIndex(k pulumi.StringInput) DataConnectorMicrosoftThreatIntelligenceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataConnectorMicrosoftThreatIntelligence {
		return vs[0].(map[string]*DataConnectorMicrosoftThreatIntelligence)[vs[1].(string)]
	}).(DataConnectorMicrosoftThreatIntelligenceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorMicrosoftThreatIntelligenceInput)(nil)).Elem(), &DataConnectorMicrosoftThreatIntelligence{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorMicrosoftThreatIntelligenceArrayInput)(nil)).Elem(), DataConnectorMicrosoftThreatIntelligenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorMicrosoftThreatIntelligenceMapInput)(nil)).Elem(), DataConnectorMicrosoftThreatIntelligenceMap{})
	pulumi.RegisterOutputType(DataConnectorMicrosoftThreatIntelligenceOutput{})
	pulumi.RegisterOutputType(DataConnectorMicrosoftThreatIntelligenceArrayOutput{})
	pulumi.RegisterOutputType(DataConnectorMicrosoftThreatIntelligenceMapOutput{})
}
