// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentinel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Office Power BI Data Connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/operationalinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/sentinel"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("PerGB2018"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogAnalyticsWorkspaceOnboarding, err := sentinel.NewLogAnalyticsWorkspaceOnboarding(ctx, "exampleLogAnalyticsWorkspaceOnboarding", &sentinel.LogAnalyticsWorkspaceOnboardingArgs{
//				WorkspaceId: exampleAnalyticsWorkspace.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sentinel.NewDataConnectorOfficePowerBi(ctx, "exampleDataConnectorOfficePowerBi", &sentinel.DataConnectorOfficePowerBiArgs{
//				LogAnalyticsWorkspaceId: exampleLogAnalyticsWorkspaceOnboarding.WorkspaceId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Office Power BI Data Connectors can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:sentinel/dataConnectorOfficePowerBi:DataConnectorOfficePowerBi example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/dataConnectors/dc1
//
// ```
type DataConnectorOfficePowerBi struct {
	pulumi.CustomResourceState

	// The ID of the Log Analytics Workspace that this Office Power BI Data Connector resides in. Changing this forces a new Office Power BI Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringOutput `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Office Power BI Data Connector. Changing this forces a new Office Power BI Data Connector to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the tenant that this Office Power BI Data Connector connects to. Changing this forces a new Office Power BI Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewDataConnectorOfficePowerBi registers a new resource with the given unique name, arguments, and options.
func NewDataConnectorOfficePowerBi(ctx *pulumi.Context,
	name string, args *DataConnectorOfficePowerBiArgs, opts ...pulumi.ResourceOption) (*DataConnectorOfficePowerBi, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogAnalyticsWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'LogAnalyticsWorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataConnectorOfficePowerBi
	err := ctx.RegisterResource("azure:sentinel/dataConnectorOfficePowerBi:DataConnectorOfficePowerBi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataConnectorOfficePowerBi gets an existing DataConnectorOfficePowerBi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataConnectorOfficePowerBi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataConnectorOfficePowerBiState, opts ...pulumi.ResourceOption) (*DataConnectorOfficePowerBi, error) {
	var resource DataConnectorOfficePowerBi
	err := ctx.ReadResource("azure:sentinel/dataConnectorOfficePowerBi:DataConnectorOfficePowerBi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataConnectorOfficePowerBi resources.
type dataConnectorOfficePowerBiState struct {
	// The ID of the Log Analytics Workspace that this Office Power BI Data Connector resides in. Changing this forces a new Office Power BI Data Connector to be created.
	LogAnalyticsWorkspaceId *string `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Office Power BI Data Connector. Changing this forces a new Office Power BI Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the tenant that this Office Power BI Data Connector connects to. Changing this forces a new Office Power BI Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
}

type DataConnectorOfficePowerBiState struct {
	// The ID of the Log Analytics Workspace that this Office Power BI Data Connector resides in. Changing this forces a new Office Power BI Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringPtrInput
	// The name which should be used for this Office Power BI Data Connector. Changing this forces a new Office Power BI Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the tenant that this Office Power BI Data Connector connects to. Changing this forces a new Office Power BI Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
}

func (DataConnectorOfficePowerBiState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorOfficePowerBiState)(nil)).Elem()
}

type dataConnectorOfficePowerBiArgs struct {
	// The ID of the Log Analytics Workspace that this Office Power BI Data Connector resides in. Changing this forces a new Office Power BI Data Connector to be created.
	LogAnalyticsWorkspaceId string `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Office Power BI Data Connector. Changing this forces a new Office Power BI Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the tenant that this Office Power BI Data Connector connects to. Changing this forces a new Office Power BI Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a DataConnectorOfficePowerBi resource.
type DataConnectorOfficePowerBiArgs struct {
	// The ID of the Log Analytics Workspace that this Office Power BI Data Connector resides in. Changing this forces a new Office Power BI Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringInput
	// The name which should be used for this Office Power BI Data Connector. Changing this forces a new Office Power BI Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the tenant that this Office Power BI Data Connector connects to. Changing this forces a new Office Power BI Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
}

func (DataConnectorOfficePowerBiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorOfficePowerBiArgs)(nil)).Elem()
}

type DataConnectorOfficePowerBiInput interface {
	pulumi.Input

	ToDataConnectorOfficePowerBiOutput() DataConnectorOfficePowerBiOutput
	ToDataConnectorOfficePowerBiOutputWithContext(ctx context.Context) DataConnectorOfficePowerBiOutput
}

func (*DataConnectorOfficePowerBi) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorOfficePowerBi)(nil)).Elem()
}

func (i *DataConnectorOfficePowerBi) ToDataConnectorOfficePowerBiOutput() DataConnectorOfficePowerBiOutput {
	return i.ToDataConnectorOfficePowerBiOutputWithContext(context.Background())
}

func (i *DataConnectorOfficePowerBi) ToDataConnectorOfficePowerBiOutputWithContext(ctx context.Context) DataConnectorOfficePowerBiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorOfficePowerBiOutput)
}

// DataConnectorOfficePowerBiArrayInput is an input type that accepts DataConnectorOfficePowerBiArray and DataConnectorOfficePowerBiArrayOutput values.
// You can construct a concrete instance of `DataConnectorOfficePowerBiArrayInput` via:
//
//	DataConnectorOfficePowerBiArray{ DataConnectorOfficePowerBiArgs{...} }
type DataConnectorOfficePowerBiArrayInput interface {
	pulumi.Input

	ToDataConnectorOfficePowerBiArrayOutput() DataConnectorOfficePowerBiArrayOutput
	ToDataConnectorOfficePowerBiArrayOutputWithContext(context.Context) DataConnectorOfficePowerBiArrayOutput
}

type DataConnectorOfficePowerBiArray []DataConnectorOfficePowerBiInput

func (DataConnectorOfficePowerBiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorOfficePowerBi)(nil)).Elem()
}

func (i DataConnectorOfficePowerBiArray) ToDataConnectorOfficePowerBiArrayOutput() DataConnectorOfficePowerBiArrayOutput {
	return i.ToDataConnectorOfficePowerBiArrayOutputWithContext(context.Background())
}

func (i DataConnectorOfficePowerBiArray) ToDataConnectorOfficePowerBiArrayOutputWithContext(ctx context.Context) DataConnectorOfficePowerBiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorOfficePowerBiArrayOutput)
}

// DataConnectorOfficePowerBiMapInput is an input type that accepts DataConnectorOfficePowerBiMap and DataConnectorOfficePowerBiMapOutput values.
// You can construct a concrete instance of `DataConnectorOfficePowerBiMapInput` via:
//
//	DataConnectorOfficePowerBiMap{ "key": DataConnectorOfficePowerBiArgs{...} }
type DataConnectorOfficePowerBiMapInput interface {
	pulumi.Input

	ToDataConnectorOfficePowerBiMapOutput() DataConnectorOfficePowerBiMapOutput
	ToDataConnectorOfficePowerBiMapOutputWithContext(context.Context) DataConnectorOfficePowerBiMapOutput
}

type DataConnectorOfficePowerBiMap map[string]DataConnectorOfficePowerBiInput

func (DataConnectorOfficePowerBiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorOfficePowerBi)(nil)).Elem()
}

func (i DataConnectorOfficePowerBiMap) ToDataConnectorOfficePowerBiMapOutput() DataConnectorOfficePowerBiMapOutput {
	return i.ToDataConnectorOfficePowerBiMapOutputWithContext(context.Background())
}

func (i DataConnectorOfficePowerBiMap) ToDataConnectorOfficePowerBiMapOutputWithContext(ctx context.Context) DataConnectorOfficePowerBiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorOfficePowerBiMapOutput)
}

type DataConnectorOfficePowerBiOutput struct{ *pulumi.OutputState }

func (DataConnectorOfficePowerBiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorOfficePowerBi)(nil)).Elem()
}

func (o DataConnectorOfficePowerBiOutput) ToDataConnectorOfficePowerBiOutput() DataConnectorOfficePowerBiOutput {
	return o
}

func (o DataConnectorOfficePowerBiOutput) ToDataConnectorOfficePowerBiOutputWithContext(ctx context.Context) DataConnectorOfficePowerBiOutput {
	return o
}

// The ID of the Log Analytics Workspace that this Office Power BI Data Connector resides in. Changing this forces a new Office Power BI Data Connector to be created.
func (o DataConnectorOfficePowerBiOutput) LogAnalyticsWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorOfficePowerBi) pulumi.StringOutput { return v.LogAnalyticsWorkspaceId }).(pulumi.StringOutput)
}

// The name which should be used for this Office Power BI Data Connector. Changing this forces a new Office Power BI Data Connector to be created.
func (o DataConnectorOfficePowerBiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorOfficePowerBi) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the tenant that this Office Power BI Data Connector connects to. Changing this forces a new Office Power BI Data Connector to be created.
//
// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
func (o DataConnectorOfficePowerBiOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorOfficePowerBi) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type DataConnectorOfficePowerBiArrayOutput struct{ *pulumi.OutputState }

func (DataConnectorOfficePowerBiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorOfficePowerBi)(nil)).Elem()
}

func (o DataConnectorOfficePowerBiArrayOutput) ToDataConnectorOfficePowerBiArrayOutput() DataConnectorOfficePowerBiArrayOutput {
	return o
}

func (o DataConnectorOfficePowerBiArrayOutput) ToDataConnectorOfficePowerBiArrayOutputWithContext(ctx context.Context) DataConnectorOfficePowerBiArrayOutput {
	return o
}

func (o DataConnectorOfficePowerBiArrayOutput) Index(i pulumi.IntInput) DataConnectorOfficePowerBiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataConnectorOfficePowerBi {
		return vs[0].([]*DataConnectorOfficePowerBi)[vs[1].(int)]
	}).(DataConnectorOfficePowerBiOutput)
}

type DataConnectorOfficePowerBiMapOutput struct{ *pulumi.OutputState }

func (DataConnectorOfficePowerBiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorOfficePowerBi)(nil)).Elem()
}

func (o DataConnectorOfficePowerBiMapOutput) ToDataConnectorOfficePowerBiMapOutput() DataConnectorOfficePowerBiMapOutput {
	return o
}

func (o DataConnectorOfficePowerBiMapOutput) ToDataConnectorOfficePowerBiMapOutputWithContext(ctx context.Context) DataConnectorOfficePowerBiMapOutput {
	return o
}

func (o DataConnectorOfficePowerBiMapOutput) MapIndex(k pulumi.StringInput) DataConnectorOfficePowerBiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataConnectorOfficePowerBi {
		return vs[0].(map[string]*DataConnectorOfficePowerBi)[vs[1].(string)]
	}).(DataConnectorOfficePowerBiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorOfficePowerBiInput)(nil)).Elem(), &DataConnectorOfficePowerBi{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorOfficePowerBiArrayInput)(nil)).Elem(), DataConnectorOfficePowerBiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorOfficePowerBiMapInput)(nil)).Elem(), DataConnectorOfficePowerBiMap{})
	pulumi.RegisterOutputType(DataConnectorOfficePowerBiOutput{})
	pulumi.RegisterOutputType(DataConnectorOfficePowerBiArrayOutput{})
	pulumi.RegisterOutputType(DataConnectorOfficePowerBiMapOutput{})
}
