// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentinel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Dynamics 365 Data Connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/operationalinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/sentinel"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("PerGB2018"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogAnalyticsWorkspaceOnboarding, err := sentinel.NewLogAnalyticsWorkspaceOnboarding(ctx, "exampleLogAnalyticsWorkspaceOnboarding", &sentinel.LogAnalyticsWorkspaceOnboardingArgs{
//				WorkspaceId: exampleAnalyticsWorkspace.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sentinel.NewDataConnectorDynamics365(ctx, "exampleDataConnectorDynamics365", &sentinel.DataConnectorDynamics365Args{
//				LogAnalyticsWorkspaceId: exampleLogAnalyticsWorkspaceOnboarding.WorkspaceId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Dynamics 365 Data Connectors can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:sentinel/dataConnectorDynamics365:DataConnectorDynamics365 example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/dataConnectors/dc1
//
// ```
type DataConnectorDynamics365 struct {
	pulumi.CustomResourceState

	// The ID of the Log Analytics Workspace that this Dynamics 365 Data Connector resides in. Changing this forces a new Dynamics 365 Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringOutput `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Dynamics 365 Data Connector. Changing this forces a new Dynamics 365 Data Connector to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the tenant that this Dynamics 365 Data Connector connects to. Changing this forces a new Dynamics 365 Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewDataConnectorDynamics365 registers a new resource with the given unique name, arguments, and options.
func NewDataConnectorDynamics365(ctx *pulumi.Context,
	name string, args *DataConnectorDynamics365Args, opts ...pulumi.ResourceOption) (*DataConnectorDynamics365, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogAnalyticsWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'LogAnalyticsWorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataConnectorDynamics365
	err := ctx.RegisterResource("azure:sentinel/dataConnectorDynamics365:DataConnectorDynamics365", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataConnectorDynamics365 gets an existing DataConnectorDynamics365 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataConnectorDynamics365(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataConnectorDynamics365State, opts ...pulumi.ResourceOption) (*DataConnectorDynamics365, error) {
	var resource DataConnectorDynamics365
	err := ctx.ReadResource("azure:sentinel/dataConnectorDynamics365:DataConnectorDynamics365", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataConnectorDynamics365 resources.
type dataConnectorDynamics365State struct {
	// The ID of the Log Analytics Workspace that this Dynamics 365 Data Connector resides in. Changing this forces a new Dynamics 365 Data Connector to be created.
	LogAnalyticsWorkspaceId *string `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Dynamics 365 Data Connector. Changing this forces a new Dynamics 365 Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the tenant that this Dynamics 365 Data Connector connects to. Changing this forces a new Dynamics 365 Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
}

type DataConnectorDynamics365State struct {
	// The ID of the Log Analytics Workspace that this Dynamics 365 Data Connector resides in. Changing this forces a new Dynamics 365 Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringPtrInput
	// The name which should be used for this Dynamics 365 Data Connector. Changing this forces a new Dynamics 365 Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the tenant that this Dynamics 365 Data Connector connects to. Changing this forces a new Dynamics 365 Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
}

func (DataConnectorDynamics365State) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorDynamics365State)(nil)).Elem()
}

type dataConnectorDynamics365Args struct {
	// The ID of the Log Analytics Workspace that this Dynamics 365 Data Connector resides in. Changing this forces a new Dynamics 365 Data Connector to be created.
	LogAnalyticsWorkspaceId string `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Dynamics 365 Data Connector. Changing this forces a new Dynamics 365 Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the tenant that this Dynamics 365 Data Connector connects to. Changing this forces a new Dynamics 365 Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a DataConnectorDynamics365 resource.
type DataConnectorDynamics365Args struct {
	// The ID of the Log Analytics Workspace that this Dynamics 365 Data Connector resides in. Changing this forces a new Dynamics 365 Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringInput
	// The name which should be used for this Dynamics 365 Data Connector. Changing this forces a new Dynamics 365 Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the tenant that this Dynamics 365 Data Connector connects to. Changing this forces a new Dynamics 365 Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
}

func (DataConnectorDynamics365Args) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorDynamics365Args)(nil)).Elem()
}

type DataConnectorDynamics365Input interface {
	pulumi.Input

	ToDataConnectorDynamics365Output() DataConnectorDynamics365Output
	ToDataConnectorDynamics365OutputWithContext(ctx context.Context) DataConnectorDynamics365Output
}

func (*DataConnectorDynamics365) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorDynamics365)(nil)).Elem()
}

func (i *DataConnectorDynamics365) ToDataConnectorDynamics365Output() DataConnectorDynamics365Output {
	return i.ToDataConnectorDynamics365OutputWithContext(context.Background())
}

func (i *DataConnectorDynamics365) ToDataConnectorDynamics365OutputWithContext(ctx context.Context) DataConnectorDynamics365Output {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorDynamics365Output)
}

// DataConnectorDynamics365ArrayInput is an input type that accepts DataConnectorDynamics365Array and DataConnectorDynamics365ArrayOutput values.
// You can construct a concrete instance of `DataConnectorDynamics365ArrayInput` via:
//
//	DataConnectorDynamics365Array{ DataConnectorDynamics365Args{...} }
type DataConnectorDynamics365ArrayInput interface {
	pulumi.Input

	ToDataConnectorDynamics365ArrayOutput() DataConnectorDynamics365ArrayOutput
	ToDataConnectorDynamics365ArrayOutputWithContext(context.Context) DataConnectorDynamics365ArrayOutput
}

type DataConnectorDynamics365Array []DataConnectorDynamics365Input

func (DataConnectorDynamics365Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorDynamics365)(nil)).Elem()
}

func (i DataConnectorDynamics365Array) ToDataConnectorDynamics365ArrayOutput() DataConnectorDynamics365ArrayOutput {
	return i.ToDataConnectorDynamics365ArrayOutputWithContext(context.Background())
}

func (i DataConnectorDynamics365Array) ToDataConnectorDynamics365ArrayOutputWithContext(ctx context.Context) DataConnectorDynamics365ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorDynamics365ArrayOutput)
}

// DataConnectorDynamics365MapInput is an input type that accepts DataConnectorDynamics365Map and DataConnectorDynamics365MapOutput values.
// You can construct a concrete instance of `DataConnectorDynamics365MapInput` via:
//
//	DataConnectorDynamics365Map{ "key": DataConnectorDynamics365Args{...} }
type DataConnectorDynamics365MapInput interface {
	pulumi.Input

	ToDataConnectorDynamics365MapOutput() DataConnectorDynamics365MapOutput
	ToDataConnectorDynamics365MapOutputWithContext(context.Context) DataConnectorDynamics365MapOutput
}

type DataConnectorDynamics365Map map[string]DataConnectorDynamics365Input

func (DataConnectorDynamics365Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorDynamics365)(nil)).Elem()
}

func (i DataConnectorDynamics365Map) ToDataConnectorDynamics365MapOutput() DataConnectorDynamics365MapOutput {
	return i.ToDataConnectorDynamics365MapOutputWithContext(context.Background())
}

func (i DataConnectorDynamics365Map) ToDataConnectorDynamics365MapOutputWithContext(ctx context.Context) DataConnectorDynamics365MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorDynamics365MapOutput)
}

type DataConnectorDynamics365Output struct{ *pulumi.OutputState }

func (DataConnectorDynamics365Output) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorDynamics365)(nil)).Elem()
}

func (o DataConnectorDynamics365Output) ToDataConnectorDynamics365Output() DataConnectorDynamics365Output {
	return o
}

func (o DataConnectorDynamics365Output) ToDataConnectorDynamics365OutputWithContext(ctx context.Context) DataConnectorDynamics365Output {
	return o
}

// The ID of the Log Analytics Workspace that this Dynamics 365 Data Connector resides in. Changing this forces a new Dynamics 365 Data Connector to be created.
func (o DataConnectorDynamics365Output) LogAnalyticsWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorDynamics365) pulumi.StringOutput { return v.LogAnalyticsWorkspaceId }).(pulumi.StringOutput)
}

// The name which should be used for this Dynamics 365 Data Connector. Changing this forces a new Dynamics 365 Data Connector to be created.
func (o DataConnectorDynamics365Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorDynamics365) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the tenant that this Dynamics 365 Data Connector connects to. Changing this forces a new Dynamics 365 Data Connector to be created.
//
// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
func (o DataConnectorDynamics365Output) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorDynamics365) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type DataConnectorDynamics365ArrayOutput struct{ *pulumi.OutputState }

func (DataConnectorDynamics365ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorDynamics365)(nil)).Elem()
}

func (o DataConnectorDynamics365ArrayOutput) ToDataConnectorDynamics365ArrayOutput() DataConnectorDynamics365ArrayOutput {
	return o
}

func (o DataConnectorDynamics365ArrayOutput) ToDataConnectorDynamics365ArrayOutputWithContext(ctx context.Context) DataConnectorDynamics365ArrayOutput {
	return o
}

func (o DataConnectorDynamics365ArrayOutput) Index(i pulumi.IntInput) DataConnectorDynamics365Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataConnectorDynamics365 {
		return vs[0].([]*DataConnectorDynamics365)[vs[1].(int)]
	}).(DataConnectorDynamics365Output)
}

type DataConnectorDynamics365MapOutput struct{ *pulumi.OutputState }

func (DataConnectorDynamics365MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorDynamics365)(nil)).Elem()
}

func (o DataConnectorDynamics365MapOutput) ToDataConnectorDynamics365MapOutput() DataConnectorDynamics365MapOutput {
	return o
}

func (o DataConnectorDynamics365MapOutput) ToDataConnectorDynamics365MapOutputWithContext(ctx context.Context) DataConnectorDynamics365MapOutput {
	return o
}

func (o DataConnectorDynamics365MapOutput) MapIndex(k pulumi.StringInput) DataConnectorDynamics365Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataConnectorDynamics365 {
		return vs[0].(map[string]*DataConnectorDynamics365)[vs[1].(string)]
	}).(DataConnectorDynamics365Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorDynamics365Input)(nil)).Elem(), &DataConnectorDynamics365{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorDynamics365ArrayInput)(nil)).Elem(), DataConnectorDynamics365Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorDynamics365MapInput)(nil)).Elem(), DataConnectorDynamics365Map{})
	pulumi.RegisterOutputType(DataConnectorDynamics365Output{})
	pulumi.RegisterOutputType(DataConnectorDynamics365ArrayOutput{})
	pulumi.RegisterOutputType(DataConnectorDynamics365MapOutput{})
}
