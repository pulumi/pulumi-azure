// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentinel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Office ATP Data Connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/operationalinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/sentinel"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("PerGB2018"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogAnalyticsWorkspaceOnboarding, err := sentinel.NewLogAnalyticsWorkspaceOnboarding(ctx, "exampleLogAnalyticsWorkspaceOnboarding", &sentinel.LogAnalyticsWorkspaceOnboardingArgs{
//				WorkspaceId: exampleAnalyticsWorkspace.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sentinel.NewDataConnectorOfficeAtp(ctx, "exampleDataConnectorOfficeAtp", &sentinel.DataConnectorOfficeAtpArgs{
//				LogAnalyticsWorkspaceId: exampleLogAnalyticsWorkspaceOnboarding.WorkspaceId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Office ATP Data Connectors can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:sentinel/dataConnectorOfficeAtp:DataConnectorOfficeAtp example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/dataConnectors/dc1
//
// ```
type DataConnectorOfficeAtp struct {
	pulumi.CustomResourceState

	// The ID of the Log Analytics Workspace that this Office ATP Data Connector resides in. Changing this forces a new Office ATP Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringOutput `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Office ATP Data Connector. Changing this forces a new Office ATP Data Connector to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the tenant that this Office ATP Data Connector connects to. Changing this forces a new Office ATP Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewDataConnectorOfficeAtp registers a new resource with the given unique name, arguments, and options.
func NewDataConnectorOfficeAtp(ctx *pulumi.Context,
	name string, args *DataConnectorOfficeAtpArgs, opts ...pulumi.ResourceOption) (*DataConnectorOfficeAtp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogAnalyticsWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'LogAnalyticsWorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataConnectorOfficeAtp
	err := ctx.RegisterResource("azure:sentinel/dataConnectorOfficeAtp:DataConnectorOfficeAtp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataConnectorOfficeAtp gets an existing DataConnectorOfficeAtp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataConnectorOfficeAtp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataConnectorOfficeAtpState, opts ...pulumi.ResourceOption) (*DataConnectorOfficeAtp, error) {
	var resource DataConnectorOfficeAtp
	err := ctx.ReadResource("azure:sentinel/dataConnectorOfficeAtp:DataConnectorOfficeAtp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataConnectorOfficeAtp resources.
type dataConnectorOfficeAtpState struct {
	// The ID of the Log Analytics Workspace that this Office ATP Data Connector resides in. Changing this forces a new Office ATP Data Connector to be created.
	LogAnalyticsWorkspaceId *string `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Office ATP Data Connector. Changing this forces a new Office ATP Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the tenant that this Office ATP Data Connector connects to. Changing this forces a new Office ATP Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
}

type DataConnectorOfficeAtpState struct {
	// The ID of the Log Analytics Workspace that this Office ATP Data Connector resides in. Changing this forces a new Office ATP Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringPtrInput
	// The name which should be used for this Office ATP Data Connector. Changing this forces a new Office ATP Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the tenant that this Office ATP Data Connector connects to. Changing this forces a new Office ATP Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
}

func (DataConnectorOfficeAtpState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorOfficeAtpState)(nil)).Elem()
}

type dataConnectorOfficeAtpArgs struct {
	// The ID of the Log Analytics Workspace that this Office ATP Data Connector resides in. Changing this forces a new Office ATP Data Connector to be created.
	LogAnalyticsWorkspaceId string `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Office ATP Data Connector. Changing this forces a new Office ATP Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the tenant that this Office ATP Data Connector connects to. Changing this forces a new Office ATP Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a DataConnectorOfficeAtp resource.
type DataConnectorOfficeAtpArgs struct {
	// The ID of the Log Analytics Workspace that this Office ATP Data Connector resides in. Changing this forces a new Office ATP Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringInput
	// The name which should be used for this Office ATP Data Connector. Changing this forces a new Office ATP Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the tenant that this Office ATP Data Connector connects to. Changing this forces a new Office ATP Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
}

func (DataConnectorOfficeAtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorOfficeAtpArgs)(nil)).Elem()
}

type DataConnectorOfficeAtpInput interface {
	pulumi.Input

	ToDataConnectorOfficeAtpOutput() DataConnectorOfficeAtpOutput
	ToDataConnectorOfficeAtpOutputWithContext(ctx context.Context) DataConnectorOfficeAtpOutput
}

func (*DataConnectorOfficeAtp) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorOfficeAtp)(nil)).Elem()
}

func (i *DataConnectorOfficeAtp) ToDataConnectorOfficeAtpOutput() DataConnectorOfficeAtpOutput {
	return i.ToDataConnectorOfficeAtpOutputWithContext(context.Background())
}

func (i *DataConnectorOfficeAtp) ToDataConnectorOfficeAtpOutputWithContext(ctx context.Context) DataConnectorOfficeAtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorOfficeAtpOutput)
}

// DataConnectorOfficeAtpArrayInput is an input type that accepts DataConnectorOfficeAtpArray and DataConnectorOfficeAtpArrayOutput values.
// You can construct a concrete instance of `DataConnectorOfficeAtpArrayInput` via:
//
//	DataConnectorOfficeAtpArray{ DataConnectorOfficeAtpArgs{...} }
type DataConnectorOfficeAtpArrayInput interface {
	pulumi.Input

	ToDataConnectorOfficeAtpArrayOutput() DataConnectorOfficeAtpArrayOutput
	ToDataConnectorOfficeAtpArrayOutputWithContext(context.Context) DataConnectorOfficeAtpArrayOutput
}

type DataConnectorOfficeAtpArray []DataConnectorOfficeAtpInput

func (DataConnectorOfficeAtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorOfficeAtp)(nil)).Elem()
}

func (i DataConnectorOfficeAtpArray) ToDataConnectorOfficeAtpArrayOutput() DataConnectorOfficeAtpArrayOutput {
	return i.ToDataConnectorOfficeAtpArrayOutputWithContext(context.Background())
}

func (i DataConnectorOfficeAtpArray) ToDataConnectorOfficeAtpArrayOutputWithContext(ctx context.Context) DataConnectorOfficeAtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorOfficeAtpArrayOutput)
}

// DataConnectorOfficeAtpMapInput is an input type that accepts DataConnectorOfficeAtpMap and DataConnectorOfficeAtpMapOutput values.
// You can construct a concrete instance of `DataConnectorOfficeAtpMapInput` via:
//
//	DataConnectorOfficeAtpMap{ "key": DataConnectorOfficeAtpArgs{...} }
type DataConnectorOfficeAtpMapInput interface {
	pulumi.Input

	ToDataConnectorOfficeAtpMapOutput() DataConnectorOfficeAtpMapOutput
	ToDataConnectorOfficeAtpMapOutputWithContext(context.Context) DataConnectorOfficeAtpMapOutput
}

type DataConnectorOfficeAtpMap map[string]DataConnectorOfficeAtpInput

func (DataConnectorOfficeAtpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorOfficeAtp)(nil)).Elem()
}

func (i DataConnectorOfficeAtpMap) ToDataConnectorOfficeAtpMapOutput() DataConnectorOfficeAtpMapOutput {
	return i.ToDataConnectorOfficeAtpMapOutputWithContext(context.Background())
}

func (i DataConnectorOfficeAtpMap) ToDataConnectorOfficeAtpMapOutputWithContext(ctx context.Context) DataConnectorOfficeAtpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorOfficeAtpMapOutput)
}

type DataConnectorOfficeAtpOutput struct{ *pulumi.OutputState }

func (DataConnectorOfficeAtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorOfficeAtp)(nil)).Elem()
}

func (o DataConnectorOfficeAtpOutput) ToDataConnectorOfficeAtpOutput() DataConnectorOfficeAtpOutput {
	return o
}

func (o DataConnectorOfficeAtpOutput) ToDataConnectorOfficeAtpOutputWithContext(ctx context.Context) DataConnectorOfficeAtpOutput {
	return o
}

// The ID of the Log Analytics Workspace that this Office ATP Data Connector resides in. Changing this forces a new Office ATP Data Connector to be created.
func (o DataConnectorOfficeAtpOutput) LogAnalyticsWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorOfficeAtp) pulumi.StringOutput { return v.LogAnalyticsWorkspaceId }).(pulumi.StringOutput)
}

// The name which should be used for this Office ATP Data Connector. Changing this forces a new Office ATP Data Connector to be created.
func (o DataConnectorOfficeAtpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorOfficeAtp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the tenant that this Office ATP Data Connector connects to. Changing this forces a new Office ATP Data Connector to be created.
//
// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
func (o DataConnectorOfficeAtpOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorOfficeAtp) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type DataConnectorOfficeAtpArrayOutput struct{ *pulumi.OutputState }

func (DataConnectorOfficeAtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorOfficeAtp)(nil)).Elem()
}

func (o DataConnectorOfficeAtpArrayOutput) ToDataConnectorOfficeAtpArrayOutput() DataConnectorOfficeAtpArrayOutput {
	return o
}

func (o DataConnectorOfficeAtpArrayOutput) ToDataConnectorOfficeAtpArrayOutputWithContext(ctx context.Context) DataConnectorOfficeAtpArrayOutput {
	return o
}

func (o DataConnectorOfficeAtpArrayOutput) Index(i pulumi.IntInput) DataConnectorOfficeAtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataConnectorOfficeAtp {
		return vs[0].([]*DataConnectorOfficeAtp)[vs[1].(int)]
	}).(DataConnectorOfficeAtpOutput)
}

type DataConnectorOfficeAtpMapOutput struct{ *pulumi.OutputState }

func (DataConnectorOfficeAtpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorOfficeAtp)(nil)).Elem()
}

func (o DataConnectorOfficeAtpMapOutput) ToDataConnectorOfficeAtpMapOutput() DataConnectorOfficeAtpMapOutput {
	return o
}

func (o DataConnectorOfficeAtpMapOutput) ToDataConnectorOfficeAtpMapOutputWithContext(ctx context.Context) DataConnectorOfficeAtpMapOutput {
	return o
}

func (o DataConnectorOfficeAtpMapOutput) MapIndex(k pulumi.StringInput) DataConnectorOfficeAtpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataConnectorOfficeAtp {
		return vs[0].(map[string]*DataConnectorOfficeAtp)[vs[1].(string)]
	}).(DataConnectorOfficeAtpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorOfficeAtpInput)(nil)).Elem(), &DataConnectorOfficeAtp{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorOfficeAtpArrayInput)(nil)).Elem(), DataConnectorOfficeAtpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorOfficeAtpMapInput)(nil)).Elem(), DataConnectorOfficeAtpMap{})
	pulumi.RegisterOutputType(DataConnectorOfficeAtpOutput{})
	pulumi.RegisterOutputType(DataConnectorOfficeAtpArrayOutput{})
	pulumi.RegisterOutputType(DataConnectorOfficeAtpMapOutput{})
}
