// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentinel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a AWS S3 Data Connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/operationalinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/sentinel"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("PerGB2018"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogAnalyticsWorkspaceOnboarding, err := sentinel.NewLogAnalyticsWorkspaceOnboarding(ctx, "exampleLogAnalyticsWorkspaceOnboarding", &sentinel.LogAnalyticsWorkspaceOnboardingArgs{
//				WorkspaceId: exampleAnalyticsWorkspace.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sentinel.NewDataConnectorAwsS3(ctx, "exampleDataConnectorAwsS3", &sentinel.DataConnectorAwsS3Args{
//				LogAnalyticsWorkspaceId: exampleLogAnalyticsWorkspaceOnboarding.WorkspaceId,
//				AwsRoleArn:              pulumi.String("arn:aws:iam::000000000000:role/role1"),
//				DestinationTable:        pulumi.String("AWSGuardDuty"),
//				SqsUrls: pulumi.StringArray{
//					pulumi.String("https://sqs.us-east-1.amazonaws.com/000000000000/example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AWS S3 Data Connectors can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:sentinel/dataConnectorAwsS3:DataConnectorAwsS3 example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/dataConnectors/dc1
//
// ```
type DataConnectorAwsS3 struct {
	pulumi.CustomResourceState

	// The ARN of the AWS role, which is connected to this AWS CloudTrail Data Connector. See the [Azure document](https://docs.microsoft.com/azure/sentinel/connect-aws?tabs=s3#create-an-aws-assumed-role-and-grant-access-to-the-aws-sentinel-account) for details.
	AwsRoleArn pulumi.StringOutput `pulumi:"awsRoleArn"`
	// The name of the Log Analytics table that will store the ingested data.
	DestinationTable pulumi.StringOutput `pulumi:"destinationTable"`
	// The ID of the Log Analytics Workspace that this AWS S3 Data Connector resides in. Changing this forces a new AWS S3 Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringOutput `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this AWS S3 Data Connector. Changing this forces a new AWS S3 Data Connector to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies a list of AWS SQS urls for the AWS S3 Data Connector.
	SqsUrls pulumi.StringArrayOutput `pulumi:"sqsUrls"`
}

// NewDataConnectorAwsS3 registers a new resource with the given unique name, arguments, and options.
func NewDataConnectorAwsS3(ctx *pulumi.Context,
	name string, args *DataConnectorAwsS3Args, opts ...pulumi.ResourceOption) (*DataConnectorAwsS3, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'AwsRoleArn'")
	}
	if args.DestinationTable == nil {
		return nil, errors.New("invalid value for required argument 'DestinationTable'")
	}
	if args.LogAnalyticsWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'LogAnalyticsWorkspaceId'")
	}
	if args.SqsUrls == nil {
		return nil, errors.New("invalid value for required argument 'SqsUrls'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataConnectorAwsS3
	err := ctx.RegisterResource("azure:sentinel/dataConnectorAwsS3:DataConnectorAwsS3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataConnectorAwsS3 gets an existing DataConnectorAwsS3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataConnectorAwsS3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataConnectorAwsS3State, opts ...pulumi.ResourceOption) (*DataConnectorAwsS3, error) {
	var resource DataConnectorAwsS3
	err := ctx.ReadResource("azure:sentinel/dataConnectorAwsS3:DataConnectorAwsS3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataConnectorAwsS3 resources.
type dataConnectorAwsS3State struct {
	// The ARN of the AWS role, which is connected to this AWS CloudTrail Data Connector. See the [Azure document](https://docs.microsoft.com/azure/sentinel/connect-aws?tabs=s3#create-an-aws-assumed-role-and-grant-access-to-the-aws-sentinel-account) for details.
	AwsRoleArn *string `pulumi:"awsRoleArn"`
	// The name of the Log Analytics table that will store the ingested data.
	DestinationTable *string `pulumi:"destinationTable"`
	// The ID of the Log Analytics Workspace that this AWS S3 Data Connector resides in. Changing this forces a new AWS S3 Data Connector to be created.
	LogAnalyticsWorkspaceId *string `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this AWS S3 Data Connector. Changing this forces a new AWS S3 Data Connector to be created.
	Name *string `pulumi:"name"`
	// Specifies a list of AWS SQS urls for the AWS S3 Data Connector.
	SqsUrls []string `pulumi:"sqsUrls"`
}

type DataConnectorAwsS3State struct {
	// The ARN of the AWS role, which is connected to this AWS CloudTrail Data Connector. See the [Azure document](https://docs.microsoft.com/azure/sentinel/connect-aws?tabs=s3#create-an-aws-assumed-role-and-grant-access-to-the-aws-sentinel-account) for details.
	AwsRoleArn pulumi.StringPtrInput
	// The name of the Log Analytics table that will store the ingested data.
	DestinationTable pulumi.StringPtrInput
	// The ID of the Log Analytics Workspace that this AWS S3 Data Connector resides in. Changing this forces a new AWS S3 Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringPtrInput
	// The name which should be used for this AWS S3 Data Connector. Changing this forces a new AWS S3 Data Connector to be created.
	Name pulumi.StringPtrInput
	// Specifies a list of AWS SQS urls for the AWS S3 Data Connector.
	SqsUrls pulumi.StringArrayInput
}

func (DataConnectorAwsS3State) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorAwsS3State)(nil)).Elem()
}

type dataConnectorAwsS3Args struct {
	// The ARN of the AWS role, which is connected to this AWS CloudTrail Data Connector. See the [Azure document](https://docs.microsoft.com/azure/sentinel/connect-aws?tabs=s3#create-an-aws-assumed-role-and-grant-access-to-the-aws-sentinel-account) for details.
	AwsRoleArn string `pulumi:"awsRoleArn"`
	// The name of the Log Analytics table that will store the ingested data.
	DestinationTable string `pulumi:"destinationTable"`
	// The ID of the Log Analytics Workspace that this AWS S3 Data Connector resides in. Changing this forces a new AWS S3 Data Connector to be created.
	LogAnalyticsWorkspaceId string `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this AWS S3 Data Connector. Changing this forces a new AWS S3 Data Connector to be created.
	Name *string `pulumi:"name"`
	// Specifies a list of AWS SQS urls for the AWS S3 Data Connector.
	SqsUrls []string `pulumi:"sqsUrls"`
}

// The set of arguments for constructing a DataConnectorAwsS3 resource.
type DataConnectorAwsS3Args struct {
	// The ARN of the AWS role, which is connected to this AWS CloudTrail Data Connector. See the [Azure document](https://docs.microsoft.com/azure/sentinel/connect-aws?tabs=s3#create-an-aws-assumed-role-and-grant-access-to-the-aws-sentinel-account) for details.
	AwsRoleArn pulumi.StringInput
	// The name of the Log Analytics table that will store the ingested data.
	DestinationTable pulumi.StringInput
	// The ID of the Log Analytics Workspace that this AWS S3 Data Connector resides in. Changing this forces a new AWS S3 Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringInput
	// The name which should be used for this AWS S3 Data Connector. Changing this forces a new AWS S3 Data Connector to be created.
	Name pulumi.StringPtrInput
	// Specifies a list of AWS SQS urls for the AWS S3 Data Connector.
	SqsUrls pulumi.StringArrayInput
}

func (DataConnectorAwsS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorAwsS3Args)(nil)).Elem()
}

type DataConnectorAwsS3Input interface {
	pulumi.Input

	ToDataConnectorAwsS3Output() DataConnectorAwsS3Output
	ToDataConnectorAwsS3OutputWithContext(ctx context.Context) DataConnectorAwsS3Output
}

func (*DataConnectorAwsS3) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorAwsS3)(nil)).Elem()
}

func (i *DataConnectorAwsS3) ToDataConnectorAwsS3Output() DataConnectorAwsS3Output {
	return i.ToDataConnectorAwsS3OutputWithContext(context.Background())
}

func (i *DataConnectorAwsS3) ToDataConnectorAwsS3OutputWithContext(ctx context.Context) DataConnectorAwsS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorAwsS3Output)
}

// DataConnectorAwsS3ArrayInput is an input type that accepts DataConnectorAwsS3Array and DataConnectorAwsS3ArrayOutput values.
// You can construct a concrete instance of `DataConnectorAwsS3ArrayInput` via:
//
//	DataConnectorAwsS3Array{ DataConnectorAwsS3Args{...} }
type DataConnectorAwsS3ArrayInput interface {
	pulumi.Input

	ToDataConnectorAwsS3ArrayOutput() DataConnectorAwsS3ArrayOutput
	ToDataConnectorAwsS3ArrayOutputWithContext(context.Context) DataConnectorAwsS3ArrayOutput
}

type DataConnectorAwsS3Array []DataConnectorAwsS3Input

func (DataConnectorAwsS3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorAwsS3)(nil)).Elem()
}

func (i DataConnectorAwsS3Array) ToDataConnectorAwsS3ArrayOutput() DataConnectorAwsS3ArrayOutput {
	return i.ToDataConnectorAwsS3ArrayOutputWithContext(context.Background())
}

func (i DataConnectorAwsS3Array) ToDataConnectorAwsS3ArrayOutputWithContext(ctx context.Context) DataConnectorAwsS3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorAwsS3ArrayOutput)
}

// DataConnectorAwsS3MapInput is an input type that accepts DataConnectorAwsS3Map and DataConnectorAwsS3MapOutput values.
// You can construct a concrete instance of `DataConnectorAwsS3MapInput` via:
//
//	DataConnectorAwsS3Map{ "key": DataConnectorAwsS3Args{...} }
type DataConnectorAwsS3MapInput interface {
	pulumi.Input

	ToDataConnectorAwsS3MapOutput() DataConnectorAwsS3MapOutput
	ToDataConnectorAwsS3MapOutputWithContext(context.Context) DataConnectorAwsS3MapOutput
}

type DataConnectorAwsS3Map map[string]DataConnectorAwsS3Input

func (DataConnectorAwsS3Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorAwsS3)(nil)).Elem()
}

func (i DataConnectorAwsS3Map) ToDataConnectorAwsS3MapOutput() DataConnectorAwsS3MapOutput {
	return i.ToDataConnectorAwsS3MapOutputWithContext(context.Background())
}

func (i DataConnectorAwsS3Map) ToDataConnectorAwsS3MapOutputWithContext(ctx context.Context) DataConnectorAwsS3MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorAwsS3MapOutput)
}

type DataConnectorAwsS3Output struct{ *pulumi.OutputState }

func (DataConnectorAwsS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorAwsS3)(nil)).Elem()
}

func (o DataConnectorAwsS3Output) ToDataConnectorAwsS3Output() DataConnectorAwsS3Output {
	return o
}

func (o DataConnectorAwsS3Output) ToDataConnectorAwsS3OutputWithContext(ctx context.Context) DataConnectorAwsS3Output {
	return o
}

// The ARN of the AWS role, which is connected to this AWS CloudTrail Data Connector. See the [Azure document](https://docs.microsoft.com/azure/sentinel/connect-aws?tabs=s3#create-an-aws-assumed-role-and-grant-access-to-the-aws-sentinel-account) for details.
func (o DataConnectorAwsS3Output) AwsRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorAwsS3) pulumi.StringOutput { return v.AwsRoleArn }).(pulumi.StringOutput)
}

// The name of the Log Analytics table that will store the ingested data.
func (o DataConnectorAwsS3Output) DestinationTable() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorAwsS3) pulumi.StringOutput { return v.DestinationTable }).(pulumi.StringOutput)
}

// The ID of the Log Analytics Workspace that this AWS S3 Data Connector resides in. Changing this forces a new AWS S3 Data Connector to be created.
func (o DataConnectorAwsS3Output) LogAnalyticsWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorAwsS3) pulumi.StringOutput { return v.LogAnalyticsWorkspaceId }).(pulumi.StringOutput)
}

// The name which should be used for this AWS S3 Data Connector. Changing this forces a new AWS S3 Data Connector to be created.
func (o DataConnectorAwsS3Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorAwsS3) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies a list of AWS SQS urls for the AWS S3 Data Connector.
func (o DataConnectorAwsS3Output) SqsUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataConnectorAwsS3) pulumi.StringArrayOutput { return v.SqsUrls }).(pulumi.StringArrayOutput)
}

type DataConnectorAwsS3ArrayOutput struct{ *pulumi.OutputState }

func (DataConnectorAwsS3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorAwsS3)(nil)).Elem()
}

func (o DataConnectorAwsS3ArrayOutput) ToDataConnectorAwsS3ArrayOutput() DataConnectorAwsS3ArrayOutput {
	return o
}

func (o DataConnectorAwsS3ArrayOutput) ToDataConnectorAwsS3ArrayOutputWithContext(ctx context.Context) DataConnectorAwsS3ArrayOutput {
	return o
}

func (o DataConnectorAwsS3ArrayOutput) Index(i pulumi.IntInput) DataConnectorAwsS3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataConnectorAwsS3 {
		return vs[0].([]*DataConnectorAwsS3)[vs[1].(int)]
	}).(DataConnectorAwsS3Output)
}

type DataConnectorAwsS3MapOutput struct{ *pulumi.OutputState }

func (DataConnectorAwsS3MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorAwsS3)(nil)).Elem()
}

func (o DataConnectorAwsS3MapOutput) ToDataConnectorAwsS3MapOutput() DataConnectorAwsS3MapOutput {
	return o
}

func (o DataConnectorAwsS3MapOutput) ToDataConnectorAwsS3MapOutputWithContext(ctx context.Context) DataConnectorAwsS3MapOutput {
	return o
}

func (o DataConnectorAwsS3MapOutput) MapIndex(k pulumi.StringInput) DataConnectorAwsS3Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataConnectorAwsS3 {
		return vs[0].(map[string]*DataConnectorAwsS3)[vs[1].(string)]
	}).(DataConnectorAwsS3Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorAwsS3Input)(nil)).Elem(), &DataConnectorAwsS3{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorAwsS3ArrayInput)(nil)).Elem(), DataConnectorAwsS3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorAwsS3MapInput)(nil)).Elem(), DataConnectorAwsS3Map{})
	pulumi.RegisterOutputType(DataConnectorAwsS3Output{})
	pulumi.RegisterOutputType(DataConnectorAwsS3ArrayOutput{})
	pulumi.RegisterOutputType(DataConnectorAwsS3MapOutput{})
}
