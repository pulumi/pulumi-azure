// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentinel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Iot Data Connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/operationalinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/sentinel"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("PerGB2018"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogAnalyticsWorkspaceOnboarding, err := sentinel.NewLogAnalyticsWorkspaceOnboarding(ctx, "exampleLogAnalyticsWorkspaceOnboarding", &sentinel.LogAnalyticsWorkspaceOnboardingArgs{
//				WorkspaceId: exampleAnalyticsWorkspace.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sentinel.NewDataConnectorIot(ctx, "exampleDataConnectorIot", &sentinel.DataConnectorIotArgs{
//				LogAnalyticsWorkspaceId: exampleLogAnalyticsWorkspaceOnboarding.WorkspaceId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Iot Data Connectors can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:sentinel/dataConnectorIot:DataConnectorIot example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/dataConnectors/dc1
//
// ```
type DataConnectorIot struct {
	pulumi.CustomResourceState

	// The ID of the Log Analytics Workspace that this Iot Data Connector resides in. Changing this forces a new Iot Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringOutput `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Iot Data Connector. Changing this forces a new Iot Data Connector to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the subscription that this Iot Data Connector connects to. Changing this forces a new Iot Data Connector to be created.
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
}

// NewDataConnectorIot registers a new resource with the given unique name, arguments, and options.
func NewDataConnectorIot(ctx *pulumi.Context,
	name string, args *DataConnectorIotArgs, opts ...pulumi.ResourceOption) (*DataConnectorIot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogAnalyticsWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'LogAnalyticsWorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataConnectorIot
	err := ctx.RegisterResource("azure:sentinel/dataConnectorIot:DataConnectorIot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataConnectorIot gets an existing DataConnectorIot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataConnectorIot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataConnectorIotState, opts ...pulumi.ResourceOption) (*DataConnectorIot, error) {
	var resource DataConnectorIot
	err := ctx.ReadResource("azure:sentinel/dataConnectorIot:DataConnectorIot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataConnectorIot resources.
type dataConnectorIotState struct {
	// The ID of the Log Analytics Workspace that this Iot Data Connector resides in. Changing this forces a new Iot Data Connector to be created.
	LogAnalyticsWorkspaceId *string `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Iot Data Connector. Changing this forces a new Iot Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the subscription that this Iot Data Connector connects to. Changing this forces a new Iot Data Connector to be created.
	SubscriptionId *string `pulumi:"subscriptionId"`
}

type DataConnectorIotState struct {
	// The ID of the Log Analytics Workspace that this Iot Data Connector resides in. Changing this forces a new Iot Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringPtrInput
	// The name which should be used for this Iot Data Connector. Changing this forces a new Iot Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the subscription that this Iot Data Connector connects to. Changing this forces a new Iot Data Connector to be created.
	SubscriptionId pulumi.StringPtrInput
}

func (DataConnectorIotState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorIotState)(nil)).Elem()
}

type dataConnectorIotArgs struct {
	// The ID of the Log Analytics Workspace that this Iot Data Connector resides in. Changing this forces a new Iot Data Connector to be created.
	LogAnalyticsWorkspaceId string `pulumi:"logAnalyticsWorkspaceId"`
	// The name which should be used for this Iot Data Connector. Changing this forces a new Iot Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the subscription that this Iot Data Connector connects to. Changing this forces a new Iot Data Connector to be created.
	SubscriptionId *string `pulumi:"subscriptionId"`
}

// The set of arguments for constructing a DataConnectorIot resource.
type DataConnectorIotArgs struct {
	// The ID of the Log Analytics Workspace that this Iot Data Connector resides in. Changing this forces a new Iot Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringInput
	// The name which should be used for this Iot Data Connector. Changing this forces a new Iot Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the subscription that this Iot Data Connector connects to. Changing this forces a new Iot Data Connector to be created.
	SubscriptionId pulumi.StringPtrInput
}

func (DataConnectorIotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorIotArgs)(nil)).Elem()
}

type DataConnectorIotInput interface {
	pulumi.Input

	ToDataConnectorIotOutput() DataConnectorIotOutput
	ToDataConnectorIotOutputWithContext(ctx context.Context) DataConnectorIotOutput
}

func (*DataConnectorIot) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorIot)(nil)).Elem()
}

func (i *DataConnectorIot) ToDataConnectorIotOutput() DataConnectorIotOutput {
	return i.ToDataConnectorIotOutputWithContext(context.Background())
}

func (i *DataConnectorIot) ToDataConnectorIotOutputWithContext(ctx context.Context) DataConnectorIotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorIotOutput)
}

// DataConnectorIotArrayInput is an input type that accepts DataConnectorIotArray and DataConnectorIotArrayOutput values.
// You can construct a concrete instance of `DataConnectorIotArrayInput` via:
//
//	DataConnectorIotArray{ DataConnectorIotArgs{...} }
type DataConnectorIotArrayInput interface {
	pulumi.Input

	ToDataConnectorIotArrayOutput() DataConnectorIotArrayOutput
	ToDataConnectorIotArrayOutputWithContext(context.Context) DataConnectorIotArrayOutput
}

type DataConnectorIotArray []DataConnectorIotInput

func (DataConnectorIotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorIot)(nil)).Elem()
}

func (i DataConnectorIotArray) ToDataConnectorIotArrayOutput() DataConnectorIotArrayOutput {
	return i.ToDataConnectorIotArrayOutputWithContext(context.Background())
}

func (i DataConnectorIotArray) ToDataConnectorIotArrayOutputWithContext(ctx context.Context) DataConnectorIotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorIotArrayOutput)
}

// DataConnectorIotMapInput is an input type that accepts DataConnectorIotMap and DataConnectorIotMapOutput values.
// You can construct a concrete instance of `DataConnectorIotMapInput` via:
//
//	DataConnectorIotMap{ "key": DataConnectorIotArgs{...} }
type DataConnectorIotMapInput interface {
	pulumi.Input

	ToDataConnectorIotMapOutput() DataConnectorIotMapOutput
	ToDataConnectorIotMapOutputWithContext(context.Context) DataConnectorIotMapOutput
}

type DataConnectorIotMap map[string]DataConnectorIotInput

func (DataConnectorIotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorIot)(nil)).Elem()
}

func (i DataConnectorIotMap) ToDataConnectorIotMapOutput() DataConnectorIotMapOutput {
	return i.ToDataConnectorIotMapOutputWithContext(context.Background())
}

func (i DataConnectorIotMap) ToDataConnectorIotMapOutputWithContext(ctx context.Context) DataConnectorIotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorIotMapOutput)
}

type DataConnectorIotOutput struct{ *pulumi.OutputState }

func (DataConnectorIotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorIot)(nil)).Elem()
}

func (o DataConnectorIotOutput) ToDataConnectorIotOutput() DataConnectorIotOutput {
	return o
}

func (o DataConnectorIotOutput) ToDataConnectorIotOutputWithContext(ctx context.Context) DataConnectorIotOutput {
	return o
}

// The ID of the Log Analytics Workspace that this Iot Data Connector resides in. Changing this forces a new Iot Data Connector to be created.
func (o DataConnectorIotOutput) LogAnalyticsWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorIot) pulumi.StringOutput { return v.LogAnalyticsWorkspaceId }).(pulumi.StringOutput)
}

// The name which should be used for this Iot Data Connector. Changing this forces a new Iot Data Connector to be created.
func (o DataConnectorIotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorIot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the subscription that this Iot Data Connector connects to. Changing this forces a new Iot Data Connector to be created.
func (o DataConnectorIotOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorIot) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

type DataConnectorIotArrayOutput struct{ *pulumi.OutputState }

func (DataConnectorIotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorIot)(nil)).Elem()
}

func (o DataConnectorIotArrayOutput) ToDataConnectorIotArrayOutput() DataConnectorIotArrayOutput {
	return o
}

func (o DataConnectorIotArrayOutput) ToDataConnectorIotArrayOutputWithContext(ctx context.Context) DataConnectorIotArrayOutput {
	return o
}

func (o DataConnectorIotArrayOutput) Index(i pulumi.IntInput) DataConnectorIotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataConnectorIot {
		return vs[0].([]*DataConnectorIot)[vs[1].(int)]
	}).(DataConnectorIotOutput)
}

type DataConnectorIotMapOutput struct{ *pulumi.OutputState }

func (DataConnectorIotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorIot)(nil)).Elem()
}

func (o DataConnectorIotMapOutput) ToDataConnectorIotMapOutput() DataConnectorIotMapOutput {
	return o
}

func (o DataConnectorIotMapOutput) ToDataConnectorIotMapOutputWithContext(ctx context.Context) DataConnectorIotMapOutput {
	return o
}

func (o DataConnectorIotMapOutput) MapIndex(k pulumi.StringInput) DataConnectorIotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataConnectorIot {
		return vs[0].(map[string]*DataConnectorIot)[vs[1].(string)]
	}).(DataConnectorIotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorIotInput)(nil)).Elem(), &DataConnectorIot{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorIotArrayInput)(nil)).Elem(), DataConnectorIotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorIotMapInput)(nil)).Elem(), DataConnectorIotMap{})
	pulumi.RegisterOutputType(DataConnectorIotOutput{})
	pulumi.RegisterOutputType(DataConnectorIotArrayOutput{})
	pulumi.RegisterOutputType(DataConnectorIotMapOutput{})
}
