// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentinel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Threat Intelligence Data Connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/operationalinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/sentinel"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("PerGB2018"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogAnalyticsWorkspaceOnboarding, err := sentinel.NewLogAnalyticsWorkspaceOnboarding(ctx, "exampleLogAnalyticsWorkspaceOnboarding", &sentinel.LogAnalyticsWorkspaceOnboardingArgs{
//				WorkspaceId: exampleAnalyticsWorkspace.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sentinel.NewDataConnectorThreatIntelligence(ctx, "exampleDataConnectorThreatIntelligence", &sentinel.DataConnectorThreatIntelligenceArgs{
//				LogAnalyticsWorkspaceId: exampleLogAnalyticsWorkspaceOnboarding.WorkspaceId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Threat Intelligence Data Connectors can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:sentinel/dataConnectorThreatIntelligence:DataConnectorThreatIntelligence example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/dataConnectors/dc1
//
// ```
type DataConnectorThreatIntelligence struct {
	pulumi.CustomResourceState

	// The ID of the Log Analytics Workspace that this Threat Intelligence Data Connector resides in. Changing this forces a new Threat Intelligence Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringOutput `pulumi:"logAnalyticsWorkspaceId"`
	// The lookback date for the this Threat Intelligence Data Connector in RFC3339. Defaults to `1970-01-01T00:00:00Z`. Changing this forces a new resource to be created.
	LookbackDate pulumi.StringPtrOutput `pulumi:"lookbackDate"`
	// The name which should be used for this Threat Intelligence Data Connector. Changing this forces a new Threat Intelligence Data Connector to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the tenant that this Threat Intelligence Data Connector connects to. Changing this forces a new Threat Intelligence Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewDataConnectorThreatIntelligence registers a new resource with the given unique name, arguments, and options.
func NewDataConnectorThreatIntelligence(ctx *pulumi.Context,
	name string, args *DataConnectorThreatIntelligenceArgs, opts ...pulumi.ResourceOption) (*DataConnectorThreatIntelligence, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogAnalyticsWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'LogAnalyticsWorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataConnectorThreatIntelligence
	err := ctx.RegisterResource("azure:sentinel/dataConnectorThreatIntelligence:DataConnectorThreatIntelligence", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataConnectorThreatIntelligence gets an existing DataConnectorThreatIntelligence resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataConnectorThreatIntelligence(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataConnectorThreatIntelligenceState, opts ...pulumi.ResourceOption) (*DataConnectorThreatIntelligence, error) {
	var resource DataConnectorThreatIntelligence
	err := ctx.ReadResource("azure:sentinel/dataConnectorThreatIntelligence:DataConnectorThreatIntelligence", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataConnectorThreatIntelligence resources.
type dataConnectorThreatIntelligenceState struct {
	// The ID of the Log Analytics Workspace that this Threat Intelligence Data Connector resides in. Changing this forces a new Threat Intelligence Data Connector to be created.
	LogAnalyticsWorkspaceId *string `pulumi:"logAnalyticsWorkspaceId"`
	// The lookback date for the this Threat Intelligence Data Connector in RFC3339. Defaults to `1970-01-01T00:00:00Z`. Changing this forces a new resource to be created.
	LookbackDate *string `pulumi:"lookbackDate"`
	// The name which should be used for this Threat Intelligence Data Connector. Changing this forces a new Threat Intelligence Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the tenant that this Threat Intelligence Data Connector connects to. Changing this forces a new Threat Intelligence Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
}

type DataConnectorThreatIntelligenceState struct {
	// The ID of the Log Analytics Workspace that this Threat Intelligence Data Connector resides in. Changing this forces a new Threat Intelligence Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringPtrInput
	// The lookback date for the this Threat Intelligence Data Connector in RFC3339. Defaults to `1970-01-01T00:00:00Z`. Changing this forces a new resource to be created.
	LookbackDate pulumi.StringPtrInput
	// The name which should be used for this Threat Intelligence Data Connector. Changing this forces a new Threat Intelligence Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the tenant that this Threat Intelligence Data Connector connects to. Changing this forces a new Threat Intelligence Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
}

func (DataConnectorThreatIntelligenceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorThreatIntelligenceState)(nil)).Elem()
}

type dataConnectorThreatIntelligenceArgs struct {
	// The ID of the Log Analytics Workspace that this Threat Intelligence Data Connector resides in. Changing this forces a new Threat Intelligence Data Connector to be created.
	LogAnalyticsWorkspaceId string `pulumi:"logAnalyticsWorkspaceId"`
	// The lookback date for the this Threat Intelligence Data Connector in RFC3339. Defaults to `1970-01-01T00:00:00Z`. Changing this forces a new resource to be created.
	LookbackDate *string `pulumi:"lookbackDate"`
	// The name which should be used for this Threat Intelligence Data Connector. Changing this forces a new Threat Intelligence Data Connector to be created.
	Name *string `pulumi:"name"`
	// The ID of the tenant that this Threat Intelligence Data Connector connects to. Changing this forces a new Threat Intelligence Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a DataConnectorThreatIntelligence resource.
type DataConnectorThreatIntelligenceArgs struct {
	// The ID of the Log Analytics Workspace that this Threat Intelligence Data Connector resides in. Changing this forces a new Threat Intelligence Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringInput
	// The lookback date for the this Threat Intelligence Data Connector in RFC3339. Defaults to `1970-01-01T00:00:00Z`. Changing this forces a new resource to be created.
	LookbackDate pulumi.StringPtrInput
	// The name which should be used for this Threat Intelligence Data Connector. Changing this forces a new Threat Intelligence Data Connector to be created.
	Name pulumi.StringPtrInput
	// The ID of the tenant that this Threat Intelligence Data Connector connects to. Changing this forces a new Threat Intelligence Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
}

func (DataConnectorThreatIntelligenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorThreatIntelligenceArgs)(nil)).Elem()
}

type DataConnectorThreatIntelligenceInput interface {
	pulumi.Input

	ToDataConnectorThreatIntelligenceOutput() DataConnectorThreatIntelligenceOutput
	ToDataConnectorThreatIntelligenceOutputWithContext(ctx context.Context) DataConnectorThreatIntelligenceOutput
}

func (*DataConnectorThreatIntelligence) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorThreatIntelligence)(nil)).Elem()
}

func (i *DataConnectorThreatIntelligence) ToDataConnectorThreatIntelligenceOutput() DataConnectorThreatIntelligenceOutput {
	return i.ToDataConnectorThreatIntelligenceOutputWithContext(context.Background())
}

func (i *DataConnectorThreatIntelligence) ToDataConnectorThreatIntelligenceOutputWithContext(ctx context.Context) DataConnectorThreatIntelligenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorThreatIntelligenceOutput)
}

// DataConnectorThreatIntelligenceArrayInput is an input type that accepts DataConnectorThreatIntelligenceArray and DataConnectorThreatIntelligenceArrayOutput values.
// You can construct a concrete instance of `DataConnectorThreatIntelligenceArrayInput` via:
//
//	DataConnectorThreatIntelligenceArray{ DataConnectorThreatIntelligenceArgs{...} }
type DataConnectorThreatIntelligenceArrayInput interface {
	pulumi.Input

	ToDataConnectorThreatIntelligenceArrayOutput() DataConnectorThreatIntelligenceArrayOutput
	ToDataConnectorThreatIntelligenceArrayOutputWithContext(context.Context) DataConnectorThreatIntelligenceArrayOutput
}

type DataConnectorThreatIntelligenceArray []DataConnectorThreatIntelligenceInput

func (DataConnectorThreatIntelligenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorThreatIntelligence)(nil)).Elem()
}

func (i DataConnectorThreatIntelligenceArray) ToDataConnectorThreatIntelligenceArrayOutput() DataConnectorThreatIntelligenceArrayOutput {
	return i.ToDataConnectorThreatIntelligenceArrayOutputWithContext(context.Background())
}

func (i DataConnectorThreatIntelligenceArray) ToDataConnectorThreatIntelligenceArrayOutputWithContext(ctx context.Context) DataConnectorThreatIntelligenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorThreatIntelligenceArrayOutput)
}

// DataConnectorThreatIntelligenceMapInput is an input type that accepts DataConnectorThreatIntelligenceMap and DataConnectorThreatIntelligenceMapOutput values.
// You can construct a concrete instance of `DataConnectorThreatIntelligenceMapInput` via:
//
//	DataConnectorThreatIntelligenceMap{ "key": DataConnectorThreatIntelligenceArgs{...} }
type DataConnectorThreatIntelligenceMapInput interface {
	pulumi.Input

	ToDataConnectorThreatIntelligenceMapOutput() DataConnectorThreatIntelligenceMapOutput
	ToDataConnectorThreatIntelligenceMapOutputWithContext(context.Context) DataConnectorThreatIntelligenceMapOutput
}

type DataConnectorThreatIntelligenceMap map[string]DataConnectorThreatIntelligenceInput

func (DataConnectorThreatIntelligenceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorThreatIntelligence)(nil)).Elem()
}

func (i DataConnectorThreatIntelligenceMap) ToDataConnectorThreatIntelligenceMapOutput() DataConnectorThreatIntelligenceMapOutput {
	return i.ToDataConnectorThreatIntelligenceMapOutputWithContext(context.Background())
}

func (i DataConnectorThreatIntelligenceMap) ToDataConnectorThreatIntelligenceMapOutputWithContext(ctx context.Context) DataConnectorThreatIntelligenceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorThreatIntelligenceMapOutput)
}

type DataConnectorThreatIntelligenceOutput struct{ *pulumi.OutputState }

func (DataConnectorThreatIntelligenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorThreatIntelligence)(nil)).Elem()
}

func (o DataConnectorThreatIntelligenceOutput) ToDataConnectorThreatIntelligenceOutput() DataConnectorThreatIntelligenceOutput {
	return o
}

func (o DataConnectorThreatIntelligenceOutput) ToDataConnectorThreatIntelligenceOutputWithContext(ctx context.Context) DataConnectorThreatIntelligenceOutput {
	return o
}

// The ID of the Log Analytics Workspace that this Threat Intelligence Data Connector resides in. Changing this forces a new Threat Intelligence Data Connector to be created.
func (o DataConnectorThreatIntelligenceOutput) LogAnalyticsWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorThreatIntelligence) pulumi.StringOutput { return v.LogAnalyticsWorkspaceId }).(pulumi.StringOutput)
}

// The lookback date for the this Threat Intelligence Data Connector in RFC3339. Defaults to `1970-01-01T00:00:00Z`. Changing this forces a new resource to be created.
func (o DataConnectorThreatIntelligenceOutput) LookbackDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataConnectorThreatIntelligence) pulumi.StringPtrOutput { return v.LookbackDate }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Threat Intelligence Data Connector. Changing this forces a new Threat Intelligence Data Connector to be created.
func (o DataConnectorThreatIntelligenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorThreatIntelligence) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the tenant that this Threat Intelligence Data Connector connects to. Changing this forces a new Threat Intelligence Data Connector to be created.
//
// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
func (o DataConnectorThreatIntelligenceOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorThreatIntelligence) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type DataConnectorThreatIntelligenceArrayOutput struct{ *pulumi.OutputState }

func (DataConnectorThreatIntelligenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorThreatIntelligence)(nil)).Elem()
}

func (o DataConnectorThreatIntelligenceArrayOutput) ToDataConnectorThreatIntelligenceArrayOutput() DataConnectorThreatIntelligenceArrayOutput {
	return o
}

func (o DataConnectorThreatIntelligenceArrayOutput) ToDataConnectorThreatIntelligenceArrayOutputWithContext(ctx context.Context) DataConnectorThreatIntelligenceArrayOutput {
	return o
}

func (o DataConnectorThreatIntelligenceArrayOutput) Index(i pulumi.IntInput) DataConnectorThreatIntelligenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataConnectorThreatIntelligence {
		return vs[0].([]*DataConnectorThreatIntelligence)[vs[1].(int)]
	}).(DataConnectorThreatIntelligenceOutput)
}

type DataConnectorThreatIntelligenceMapOutput struct{ *pulumi.OutputState }

func (DataConnectorThreatIntelligenceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorThreatIntelligence)(nil)).Elem()
}

func (o DataConnectorThreatIntelligenceMapOutput) ToDataConnectorThreatIntelligenceMapOutput() DataConnectorThreatIntelligenceMapOutput {
	return o
}

func (o DataConnectorThreatIntelligenceMapOutput) ToDataConnectorThreatIntelligenceMapOutputWithContext(ctx context.Context) DataConnectorThreatIntelligenceMapOutput {
	return o
}

func (o DataConnectorThreatIntelligenceMapOutput) MapIndex(k pulumi.StringInput) DataConnectorThreatIntelligenceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataConnectorThreatIntelligence {
		return vs[0].(map[string]*DataConnectorThreatIntelligence)[vs[1].(string)]
	}).(DataConnectorThreatIntelligenceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorThreatIntelligenceInput)(nil)).Elem(), &DataConnectorThreatIntelligence{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorThreatIntelligenceArrayInput)(nil)).Elem(), DataConnectorThreatIntelligenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorThreatIntelligenceMapInput)(nil)).Elem(), DataConnectorThreatIntelligenceMap{})
	pulumi.RegisterOutputType(DataConnectorThreatIntelligenceOutput{})
	pulumi.RegisterOutputType(DataConnectorThreatIntelligenceArrayOutput{})
	pulumi.RegisterOutputType(DataConnectorThreatIntelligenceMapOutput{})
}
