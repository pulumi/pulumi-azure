// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentinel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Threat Intelligence TAXII Data Connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/operationalinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/sentinel"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAnalyticsWorkspace, err := operationalinsights.NewAnalyticsWorkspace(ctx, "exampleAnalyticsWorkspace", &operationalinsights.AnalyticsWorkspaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("PerGB2018"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleLogAnalyticsWorkspaceOnboarding, err := sentinel.NewLogAnalyticsWorkspaceOnboarding(ctx, "exampleLogAnalyticsWorkspaceOnboarding", &sentinel.LogAnalyticsWorkspaceOnboardingArgs{
//				WorkspaceId: exampleAnalyticsWorkspace.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sentinel.NewDataConnectorThreatIntelligenceTaxii(ctx, "exampleDataConnectorThreatIntelligenceTaxii", &sentinel.DataConnectorThreatIntelligenceTaxiiArgs{
//				LogAnalyticsWorkspaceId: exampleLogAnalyticsWorkspaceOnboarding.WorkspaceId,
//				DisplayName:             pulumi.String("example"),
//				ApiRootUrl:              pulumi.String("https://foo/taxii2/api2/"),
//				CollectionId:            pulumi.String("someid"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Threat Intelligence TAXII Data Connectors can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:sentinel/dataConnectorThreatIntelligenceTaxii:DataConnectorThreatIntelligenceTaxii example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/providers/Microsoft.SecurityInsights/dataConnectors/dc1
//
// ```
type DataConnectorThreatIntelligenceTaxii struct {
	pulumi.CustomResourceState

	// The API root URI of the TAXII server.
	ApiRootUrl pulumi.StringOutput `pulumi:"apiRootUrl"`
	// The collection ID of the TAXII server.
	CollectionId pulumi.StringOutput `pulumi:"collectionId"`
	// The friendly name which should be used for this Threat Intelligence TAXII Data Connector.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The ID of the Log Analytics Workspace that this Threat Intelligence TAXII Data Connector resides in. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringOutput `pulumi:"logAnalyticsWorkspaceId"`
	// The lookback date for the TAXII server in RFC3339. Defaults to `1970-01-01T00:00:00Z`.
	LookbackDate pulumi.StringPtrOutput `pulumi:"lookbackDate"`
	// The name which should be used for this Threat Intelligence TAXII Data Connector. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The password for the TAXII server.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The polling frequency for the TAXII server. Possible values are `OnceAMinute`, `OnceAnHour` and `OnceADay`. Defaults to `OnceAnHour`.
	PollingFrequency pulumi.StringPtrOutput `pulumi:"pollingFrequency"`
	// The ID of the tenant that this Threat Intelligence TAXII Data Connector connects to. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The user name for the TAXII server.
	UserName pulumi.StringPtrOutput `pulumi:"userName"`
}

// NewDataConnectorThreatIntelligenceTaxii registers a new resource with the given unique name, arguments, and options.
func NewDataConnectorThreatIntelligenceTaxii(ctx *pulumi.Context,
	name string, args *DataConnectorThreatIntelligenceTaxiiArgs, opts ...pulumi.ResourceOption) (*DataConnectorThreatIntelligenceTaxii, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiRootUrl == nil {
		return nil, errors.New("invalid value for required argument 'ApiRootUrl'")
	}
	if args.CollectionId == nil {
		return nil, errors.New("invalid value for required argument 'CollectionId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.LogAnalyticsWorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'LogAnalyticsWorkspaceId'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.UserName != nil {
		args.UserName = pulumi.ToSecret(args.UserName).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"userName",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataConnectorThreatIntelligenceTaxii
	err := ctx.RegisterResource("azure:sentinel/dataConnectorThreatIntelligenceTaxii:DataConnectorThreatIntelligenceTaxii", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataConnectorThreatIntelligenceTaxii gets an existing DataConnectorThreatIntelligenceTaxii resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataConnectorThreatIntelligenceTaxii(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataConnectorThreatIntelligenceTaxiiState, opts ...pulumi.ResourceOption) (*DataConnectorThreatIntelligenceTaxii, error) {
	var resource DataConnectorThreatIntelligenceTaxii
	err := ctx.ReadResource("azure:sentinel/dataConnectorThreatIntelligenceTaxii:DataConnectorThreatIntelligenceTaxii", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataConnectorThreatIntelligenceTaxii resources.
type dataConnectorThreatIntelligenceTaxiiState struct {
	// The API root URI of the TAXII server.
	ApiRootUrl *string `pulumi:"apiRootUrl"`
	// The collection ID of the TAXII server.
	CollectionId *string `pulumi:"collectionId"`
	// The friendly name which should be used for this Threat Intelligence TAXII Data Connector.
	DisplayName *string `pulumi:"displayName"`
	// The ID of the Log Analytics Workspace that this Threat Intelligence TAXII Data Connector resides in. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	LogAnalyticsWorkspaceId *string `pulumi:"logAnalyticsWorkspaceId"`
	// The lookback date for the TAXII server in RFC3339. Defaults to `1970-01-01T00:00:00Z`.
	LookbackDate *string `pulumi:"lookbackDate"`
	// The name which should be used for this Threat Intelligence TAXII Data Connector. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	Name *string `pulumi:"name"`
	// The password for the TAXII server.
	Password *string `pulumi:"password"`
	// The polling frequency for the TAXII server. Possible values are `OnceAMinute`, `OnceAnHour` and `OnceADay`. Defaults to `OnceAnHour`.
	PollingFrequency *string `pulumi:"pollingFrequency"`
	// The ID of the tenant that this Threat Intelligence TAXII Data Connector connects to. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
	// The user name for the TAXII server.
	UserName *string `pulumi:"userName"`
}

type DataConnectorThreatIntelligenceTaxiiState struct {
	// The API root URI of the TAXII server.
	ApiRootUrl pulumi.StringPtrInput
	// The collection ID of the TAXII server.
	CollectionId pulumi.StringPtrInput
	// The friendly name which should be used for this Threat Intelligence TAXII Data Connector.
	DisplayName pulumi.StringPtrInput
	// The ID of the Log Analytics Workspace that this Threat Intelligence TAXII Data Connector resides in. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringPtrInput
	// The lookback date for the TAXII server in RFC3339. Defaults to `1970-01-01T00:00:00Z`.
	LookbackDate pulumi.StringPtrInput
	// The name which should be used for this Threat Intelligence TAXII Data Connector. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	Name pulumi.StringPtrInput
	// The password for the TAXII server.
	Password pulumi.StringPtrInput
	// The polling frequency for the TAXII server. Possible values are `OnceAMinute`, `OnceAnHour` and `OnceADay`. Defaults to `OnceAnHour`.
	PollingFrequency pulumi.StringPtrInput
	// The ID of the tenant that this Threat Intelligence TAXII Data Connector connects to. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
	// The user name for the TAXII server.
	UserName pulumi.StringPtrInput
}

func (DataConnectorThreatIntelligenceTaxiiState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorThreatIntelligenceTaxiiState)(nil)).Elem()
}

type dataConnectorThreatIntelligenceTaxiiArgs struct {
	// The API root URI of the TAXII server.
	ApiRootUrl string `pulumi:"apiRootUrl"`
	// The collection ID of the TAXII server.
	CollectionId string `pulumi:"collectionId"`
	// The friendly name which should be used for this Threat Intelligence TAXII Data Connector.
	DisplayName string `pulumi:"displayName"`
	// The ID of the Log Analytics Workspace that this Threat Intelligence TAXII Data Connector resides in. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	LogAnalyticsWorkspaceId string `pulumi:"logAnalyticsWorkspaceId"`
	// The lookback date for the TAXII server in RFC3339. Defaults to `1970-01-01T00:00:00Z`.
	LookbackDate *string `pulumi:"lookbackDate"`
	// The name which should be used for this Threat Intelligence TAXII Data Connector. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	Name *string `pulumi:"name"`
	// The password for the TAXII server.
	Password *string `pulumi:"password"`
	// The polling frequency for the TAXII server. Possible values are `OnceAMinute`, `OnceAnHour` and `OnceADay`. Defaults to `OnceAnHour`.
	PollingFrequency *string `pulumi:"pollingFrequency"`
	// The ID of the tenant that this Threat Intelligence TAXII Data Connector connects to. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId *string `pulumi:"tenantId"`
	// The user name for the TAXII server.
	UserName *string `pulumi:"userName"`
}

// The set of arguments for constructing a DataConnectorThreatIntelligenceTaxii resource.
type DataConnectorThreatIntelligenceTaxiiArgs struct {
	// The API root URI of the TAXII server.
	ApiRootUrl pulumi.StringInput
	// The collection ID of the TAXII server.
	CollectionId pulumi.StringInput
	// The friendly name which should be used for this Threat Intelligence TAXII Data Connector.
	DisplayName pulumi.StringInput
	// The ID of the Log Analytics Workspace that this Threat Intelligence TAXII Data Connector resides in. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	LogAnalyticsWorkspaceId pulumi.StringInput
	// The lookback date for the TAXII server in RFC3339. Defaults to `1970-01-01T00:00:00Z`.
	LookbackDate pulumi.StringPtrInput
	// The name which should be used for this Threat Intelligence TAXII Data Connector. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	Name pulumi.StringPtrInput
	// The password for the TAXII server.
	Password pulumi.StringPtrInput
	// The polling frequency for the TAXII server. Possible values are `OnceAMinute`, `OnceAnHour` and `OnceADay`. Defaults to `OnceAnHour`.
	PollingFrequency pulumi.StringPtrInput
	// The ID of the tenant that this Threat Intelligence TAXII Data Connector connects to. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
	//
	// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
	TenantId pulumi.StringPtrInput
	// The user name for the TAXII server.
	UserName pulumi.StringPtrInput
}

func (DataConnectorThreatIntelligenceTaxiiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataConnectorThreatIntelligenceTaxiiArgs)(nil)).Elem()
}

type DataConnectorThreatIntelligenceTaxiiInput interface {
	pulumi.Input

	ToDataConnectorThreatIntelligenceTaxiiOutput() DataConnectorThreatIntelligenceTaxiiOutput
	ToDataConnectorThreatIntelligenceTaxiiOutputWithContext(ctx context.Context) DataConnectorThreatIntelligenceTaxiiOutput
}

func (*DataConnectorThreatIntelligenceTaxii) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorThreatIntelligenceTaxii)(nil)).Elem()
}

func (i *DataConnectorThreatIntelligenceTaxii) ToDataConnectorThreatIntelligenceTaxiiOutput() DataConnectorThreatIntelligenceTaxiiOutput {
	return i.ToDataConnectorThreatIntelligenceTaxiiOutputWithContext(context.Background())
}

func (i *DataConnectorThreatIntelligenceTaxii) ToDataConnectorThreatIntelligenceTaxiiOutputWithContext(ctx context.Context) DataConnectorThreatIntelligenceTaxiiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorThreatIntelligenceTaxiiOutput)
}

// DataConnectorThreatIntelligenceTaxiiArrayInput is an input type that accepts DataConnectorThreatIntelligenceTaxiiArray and DataConnectorThreatIntelligenceTaxiiArrayOutput values.
// You can construct a concrete instance of `DataConnectorThreatIntelligenceTaxiiArrayInput` via:
//
//	DataConnectorThreatIntelligenceTaxiiArray{ DataConnectorThreatIntelligenceTaxiiArgs{...} }
type DataConnectorThreatIntelligenceTaxiiArrayInput interface {
	pulumi.Input

	ToDataConnectorThreatIntelligenceTaxiiArrayOutput() DataConnectorThreatIntelligenceTaxiiArrayOutput
	ToDataConnectorThreatIntelligenceTaxiiArrayOutputWithContext(context.Context) DataConnectorThreatIntelligenceTaxiiArrayOutput
}

type DataConnectorThreatIntelligenceTaxiiArray []DataConnectorThreatIntelligenceTaxiiInput

func (DataConnectorThreatIntelligenceTaxiiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorThreatIntelligenceTaxii)(nil)).Elem()
}

func (i DataConnectorThreatIntelligenceTaxiiArray) ToDataConnectorThreatIntelligenceTaxiiArrayOutput() DataConnectorThreatIntelligenceTaxiiArrayOutput {
	return i.ToDataConnectorThreatIntelligenceTaxiiArrayOutputWithContext(context.Background())
}

func (i DataConnectorThreatIntelligenceTaxiiArray) ToDataConnectorThreatIntelligenceTaxiiArrayOutputWithContext(ctx context.Context) DataConnectorThreatIntelligenceTaxiiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorThreatIntelligenceTaxiiArrayOutput)
}

// DataConnectorThreatIntelligenceTaxiiMapInput is an input type that accepts DataConnectorThreatIntelligenceTaxiiMap and DataConnectorThreatIntelligenceTaxiiMapOutput values.
// You can construct a concrete instance of `DataConnectorThreatIntelligenceTaxiiMapInput` via:
//
//	DataConnectorThreatIntelligenceTaxiiMap{ "key": DataConnectorThreatIntelligenceTaxiiArgs{...} }
type DataConnectorThreatIntelligenceTaxiiMapInput interface {
	pulumi.Input

	ToDataConnectorThreatIntelligenceTaxiiMapOutput() DataConnectorThreatIntelligenceTaxiiMapOutput
	ToDataConnectorThreatIntelligenceTaxiiMapOutputWithContext(context.Context) DataConnectorThreatIntelligenceTaxiiMapOutput
}

type DataConnectorThreatIntelligenceTaxiiMap map[string]DataConnectorThreatIntelligenceTaxiiInput

func (DataConnectorThreatIntelligenceTaxiiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorThreatIntelligenceTaxii)(nil)).Elem()
}

func (i DataConnectorThreatIntelligenceTaxiiMap) ToDataConnectorThreatIntelligenceTaxiiMapOutput() DataConnectorThreatIntelligenceTaxiiMapOutput {
	return i.ToDataConnectorThreatIntelligenceTaxiiMapOutputWithContext(context.Background())
}

func (i DataConnectorThreatIntelligenceTaxiiMap) ToDataConnectorThreatIntelligenceTaxiiMapOutputWithContext(ctx context.Context) DataConnectorThreatIntelligenceTaxiiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorThreatIntelligenceTaxiiMapOutput)
}

type DataConnectorThreatIntelligenceTaxiiOutput struct{ *pulumi.OutputState }

func (DataConnectorThreatIntelligenceTaxiiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorThreatIntelligenceTaxii)(nil)).Elem()
}

func (o DataConnectorThreatIntelligenceTaxiiOutput) ToDataConnectorThreatIntelligenceTaxiiOutput() DataConnectorThreatIntelligenceTaxiiOutput {
	return o
}

func (o DataConnectorThreatIntelligenceTaxiiOutput) ToDataConnectorThreatIntelligenceTaxiiOutputWithContext(ctx context.Context) DataConnectorThreatIntelligenceTaxiiOutput {
	return o
}

// The API root URI of the TAXII server.
func (o DataConnectorThreatIntelligenceTaxiiOutput) ApiRootUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorThreatIntelligenceTaxii) pulumi.StringOutput { return v.ApiRootUrl }).(pulumi.StringOutput)
}

// The collection ID of the TAXII server.
func (o DataConnectorThreatIntelligenceTaxiiOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorThreatIntelligenceTaxii) pulumi.StringOutput { return v.CollectionId }).(pulumi.StringOutput)
}

// The friendly name which should be used for this Threat Intelligence TAXII Data Connector.
func (o DataConnectorThreatIntelligenceTaxiiOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorThreatIntelligenceTaxii) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The ID of the Log Analytics Workspace that this Threat Intelligence TAXII Data Connector resides in. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
func (o DataConnectorThreatIntelligenceTaxiiOutput) LogAnalyticsWorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorThreatIntelligenceTaxii) pulumi.StringOutput { return v.LogAnalyticsWorkspaceId }).(pulumi.StringOutput)
}

// The lookback date for the TAXII server in RFC3339. Defaults to `1970-01-01T00:00:00Z`.
func (o DataConnectorThreatIntelligenceTaxiiOutput) LookbackDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataConnectorThreatIntelligenceTaxii) pulumi.StringPtrOutput { return v.LookbackDate }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Threat Intelligence TAXII Data Connector. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
func (o DataConnectorThreatIntelligenceTaxiiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorThreatIntelligenceTaxii) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password for the TAXII server.
func (o DataConnectorThreatIntelligenceTaxiiOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataConnectorThreatIntelligenceTaxii) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The polling frequency for the TAXII server. Possible values are `OnceAMinute`, `OnceAnHour` and `OnceADay`. Defaults to `OnceAnHour`.
func (o DataConnectorThreatIntelligenceTaxiiOutput) PollingFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataConnectorThreatIntelligenceTaxii) pulumi.StringPtrOutput { return v.PollingFrequency }).(pulumi.StringPtrOutput)
}

// The ID of the tenant that this Threat Intelligence TAXII Data Connector connects to. Changing this forces a new Threat Intelligence TAXII Data Connector to be created.
//
// > **NOTE** Currently, only the same tenant as the running account is allowed. Cross-tenant scenario is not supported yet.
func (o DataConnectorThreatIntelligenceTaxiiOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataConnectorThreatIntelligenceTaxii) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The user name for the TAXII server.
func (o DataConnectorThreatIntelligenceTaxiiOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataConnectorThreatIntelligenceTaxii) pulumi.StringPtrOutput { return v.UserName }).(pulumi.StringPtrOutput)
}

type DataConnectorThreatIntelligenceTaxiiArrayOutput struct{ *pulumi.OutputState }

func (DataConnectorThreatIntelligenceTaxiiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataConnectorThreatIntelligenceTaxii)(nil)).Elem()
}

func (o DataConnectorThreatIntelligenceTaxiiArrayOutput) ToDataConnectorThreatIntelligenceTaxiiArrayOutput() DataConnectorThreatIntelligenceTaxiiArrayOutput {
	return o
}

func (o DataConnectorThreatIntelligenceTaxiiArrayOutput) ToDataConnectorThreatIntelligenceTaxiiArrayOutputWithContext(ctx context.Context) DataConnectorThreatIntelligenceTaxiiArrayOutput {
	return o
}

func (o DataConnectorThreatIntelligenceTaxiiArrayOutput) Index(i pulumi.IntInput) DataConnectorThreatIntelligenceTaxiiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataConnectorThreatIntelligenceTaxii {
		return vs[0].([]*DataConnectorThreatIntelligenceTaxii)[vs[1].(int)]
	}).(DataConnectorThreatIntelligenceTaxiiOutput)
}

type DataConnectorThreatIntelligenceTaxiiMapOutput struct{ *pulumi.OutputState }

func (DataConnectorThreatIntelligenceTaxiiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataConnectorThreatIntelligenceTaxii)(nil)).Elem()
}

func (o DataConnectorThreatIntelligenceTaxiiMapOutput) ToDataConnectorThreatIntelligenceTaxiiMapOutput() DataConnectorThreatIntelligenceTaxiiMapOutput {
	return o
}

func (o DataConnectorThreatIntelligenceTaxiiMapOutput) ToDataConnectorThreatIntelligenceTaxiiMapOutputWithContext(ctx context.Context) DataConnectorThreatIntelligenceTaxiiMapOutput {
	return o
}

func (o DataConnectorThreatIntelligenceTaxiiMapOutput) MapIndex(k pulumi.StringInput) DataConnectorThreatIntelligenceTaxiiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataConnectorThreatIntelligenceTaxii {
		return vs[0].(map[string]*DataConnectorThreatIntelligenceTaxii)[vs[1].(string)]
	}).(DataConnectorThreatIntelligenceTaxiiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorThreatIntelligenceTaxiiInput)(nil)).Elem(), &DataConnectorThreatIntelligenceTaxii{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorThreatIntelligenceTaxiiArrayInput)(nil)).Elem(), DataConnectorThreatIntelligenceTaxiiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataConnectorThreatIntelligenceTaxiiMapInput)(nil)).Elem(), DataConnectorThreatIntelligenceTaxiiMap{})
	pulumi.RegisterOutputType(DataConnectorThreatIntelligenceTaxiiOutput{})
	pulumi.RegisterOutputType(DataConnectorThreatIntelligenceTaxiiArrayOutput{})
	pulumi.RegisterOutputType(DataConnectorThreatIntelligenceTaxiiMapOutput{})
}
