// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Enables you to manage DNS AAAA Records within Azure DNS.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/dns"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleZone, err := dns.NewZone(ctx, "exampleZone", &dns.ZoneArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = dns.NewAaaaRecord(ctx, "exampleAaaaRecord", &dns.AaaaRecordArgs{
// 			ZoneName:          exampleZone.Name,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Ttl:               pulumi.Int(300),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Alias Record)
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/dns"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/network"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleZone, err := dns.NewZone(ctx, "exampleZone", &dns.ZoneArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		examplePublicIp, err := network.NewPublicIp(ctx, "examplePublicIp", &network.PublicIpArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			AllocationMethod:  pulumi.String("Dynamic"),
// 			IpVersion:         pulumi.String("IPv6"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = dns.NewAaaaRecord(ctx, "exampleAaaaRecord", &dns.AaaaRecordArgs{
// 			ZoneName:          exampleZone.Name,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			Ttl:               pulumi.Int(300),
// 			TargetResourceId:  examplePublicIp.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// AAAA records can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:dns/aaaaRecord:AaaaRecord example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/dnszones/zone1/AAAA/myrecord1
// ```
type AaaaRecord struct {
	pulumi.CustomResourceState

	// The FQDN of the DNS AAAA Record.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The name of the DNS AAAA Record.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of IPv4 Addresses. Conflicts with `targetResourceId`.
	Records pulumi.StringArrayOutput `pulumi:"records"`
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The Azure resource id of the target object. Conflicts with `records`
	TargetResourceId pulumi.StringPtrOutput `pulumi:"targetResourceId"`
	Ttl              pulumi.IntOutput       `pulumi:"ttl"`
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewAaaaRecord registers a new resource with the given unique name, arguments, and options.
func NewAaaaRecord(ctx *pulumi.Context,
	name string, args *AaaaRecordArgs, opts ...pulumi.ResourceOption) (*AaaaRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	if args.ZoneName == nil {
		return nil, errors.New("invalid value for required argument 'ZoneName'")
	}
	var resource AaaaRecord
	err := ctx.RegisterResource("azure:dns/aaaaRecord:AaaaRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAaaaRecord gets an existing AaaaRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAaaaRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AaaaRecordState, opts ...pulumi.ResourceOption) (*AaaaRecord, error) {
	var resource AaaaRecord
	err := ctx.ReadResource("azure:dns/aaaaRecord:AaaaRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AaaaRecord resources.
type aaaaRecordState struct {
	// The FQDN of the DNS AAAA Record.
	Fqdn *string `pulumi:"fqdn"`
	// The name of the DNS AAAA Record.
	Name *string `pulumi:"name"`
	// List of IPv4 Addresses. Conflicts with `targetResourceId`.
	Records []string `pulumi:"records"`
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The Azure resource id of the target object. Conflicts with `records`
	TargetResourceId *string `pulumi:"targetResourceId"`
	Ttl              *int    `pulumi:"ttl"`
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName *string `pulumi:"zoneName"`
}

type AaaaRecordState struct {
	// The FQDN of the DNS AAAA Record.
	Fqdn pulumi.StringPtrInput
	// The name of the DNS AAAA Record.
	Name pulumi.StringPtrInput
	// List of IPv4 Addresses. Conflicts with `targetResourceId`.
	Records pulumi.StringArrayInput
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The Azure resource id of the target object. Conflicts with `records`
	TargetResourceId pulumi.StringPtrInput
	Ttl              pulumi.IntPtrInput
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringPtrInput
}

func (AaaaRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*aaaaRecordState)(nil)).Elem()
}

type aaaaRecordArgs struct {
	// The name of the DNS AAAA Record.
	Name *string `pulumi:"name"`
	// List of IPv4 Addresses. Conflicts with `targetResourceId`.
	Records []string `pulumi:"records"`
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The Azure resource id of the target object. Conflicts with `records`
	TargetResourceId *string `pulumi:"targetResourceId"`
	Ttl              int     `pulumi:"ttl"`
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName string `pulumi:"zoneName"`
}

// The set of arguments for constructing a AaaaRecord resource.
type AaaaRecordArgs struct {
	// The name of the DNS AAAA Record.
	Name pulumi.StringPtrInput
	// List of IPv4 Addresses. Conflicts with `targetResourceId`.
	Records pulumi.StringArrayInput
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The Azure resource id of the target object. Conflicts with `records`
	TargetResourceId pulumi.StringPtrInput
	Ttl              pulumi.IntInput
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringInput
}

func (AaaaRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aaaaRecordArgs)(nil)).Elem()
}

type AaaaRecordInput interface {
	pulumi.Input

	ToAaaaRecordOutput() AaaaRecordOutput
	ToAaaaRecordOutputWithContext(ctx context.Context) AaaaRecordOutput
}

func (*AaaaRecord) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecord)(nil))
}

func (i *AaaaRecord) ToAaaaRecordOutput() AaaaRecordOutput {
	return i.ToAaaaRecordOutputWithContext(context.Background())
}

func (i *AaaaRecord) ToAaaaRecordOutputWithContext(ctx context.Context) AaaaRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordOutput)
}

func (i *AaaaRecord) ToAaaaRecordPtrOutput() AaaaRecordPtrOutput {
	return i.ToAaaaRecordPtrOutputWithContext(context.Background())
}

func (i *AaaaRecord) ToAaaaRecordPtrOutputWithContext(ctx context.Context) AaaaRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordPtrOutput)
}

type AaaaRecordPtrInput interface {
	pulumi.Input

	ToAaaaRecordPtrOutput() AaaaRecordPtrOutput
	ToAaaaRecordPtrOutputWithContext(ctx context.Context) AaaaRecordPtrOutput
}

type aaaaRecordPtrType AaaaRecordArgs

func (*aaaaRecordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AaaaRecord)(nil))
}

func (i *aaaaRecordPtrType) ToAaaaRecordPtrOutput() AaaaRecordPtrOutput {
	return i.ToAaaaRecordPtrOutputWithContext(context.Background())
}

func (i *aaaaRecordPtrType) ToAaaaRecordPtrOutputWithContext(ctx context.Context) AaaaRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordPtrOutput)
}

// AaaaRecordArrayInput is an input type that accepts AaaaRecordArray and AaaaRecordArrayOutput values.
// You can construct a concrete instance of `AaaaRecordArrayInput` via:
//
//          AaaaRecordArray{ AaaaRecordArgs{...} }
type AaaaRecordArrayInput interface {
	pulumi.Input

	ToAaaaRecordArrayOutput() AaaaRecordArrayOutput
	ToAaaaRecordArrayOutputWithContext(context.Context) AaaaRecordArrayOutput
}

type AaaaRecordArray []AaaaRecordInput

func (AaaaRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AaaaRecord)(nil))
}

func (i AaaaRecordArray) ToAaaaRecordArrayOutput() AaaaRecordArrayOutput {
	return i.ToAaaaRecordArrayOutputWithContext(context.Background())
}

func (i AaaaRecordArray) ToAaaaRecordArrayOutputWithContext(ctx context.Context) AaaaRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordArrayOutput)
}

// AaaaRecordMapInput is an input type that accepts AaaaRecordMap and AaaaRecordMapOutput values.
// You can construct a concrete instance of `AaaaRecordMapInput` via:
//
//          AaaaRecordMap{ "key": AaaaRecordArgs{...} }
type AaaaRecordMapInput interface {
	pulumi.Input

	ToAaaaRecordMapOutput() AaaaRecordMapOutput
	ToAaaaRecordMapOutputWithContext(context.Context) AaaaRecordMapOutput
}

type AaaaRecordMap map[string]AaaaRecordInput

func (AaaaRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AaaaRecord)(nil))
}

func (i AaaaRecordMap) ToAaaaRecordMapOutput() AaaaRecordMapOutput {
	return i.ToAaaaRecordMapOutputWithContext(context.Background())
}

func (i AaaaRecordMap) ToAaaaRecordMapOutputWithContext(ctx context.Context) AaaaRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaaRecordMapOutput)
}

type AaaaRecordOutput struct {
	*pulumi.OutputState
}

func (AaaaRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaaRecord)(nil))
}

func (o AaaaRecordOutput) ToAaaaRecordOutput() AaaaRecordOutput {
	return o
}

func (o AaaaRecordOutput) ToAaaaRecordOutputWithContext(ctx context.Context) AaaaRecordOutput {
	return o
}

func (o AaaaRecordOutput) ToAaaaRecordPtrOutput() AaaaRecordPtrOutput {
	return o.ToAaaaRecordPtrOutputWithContext(context.Background())
}

func (o AaaaRecordOutput) ToAaaaRecordPtrOutputWithContext(ctx context.Context) AaaaRecordPtrOutput {
	return o.ApplyT(func(v AaaaRecord) *AaaaRecord {
		return &v
	}).(AaaaRecordPtrOutput)
}

type AaaaRecordPtrOutput struct {
	*pulumi.OutputState
}

func (AaaaRecordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AaaaRecord)(nil))
}

func (o AaaaRecordPtrOutput) ToAaaaRecordPtrOutput() AaaaRecordPtrOutput {
	return o
}

func (o AaaaRecordPtrOutput) ToAaaaRecordPtrOutputWithContext(ctx context.Context) AaaaRecordPtrOutput {
	return o
}

type AaaaRecordArrayOutput struct{ *pulumi.OutputState }

func (AaaaRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaaRecord)(nil))
}

func (o AaaaRecordArrayOutput) ToAaaaRecordArrayOutput() AaaaRecordArrayOutput {
	return o
}

func (o AaaaRecordArrayOutput) ToAaaaRecordArrayOutputWithContext(ctx context.Context) AaaaRecordArrayOutput {
	return o
}

func (o AaaaRecordArrayOutput) Index(i pulumi.IntInput) AaaaRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaaRecord {
		return vs[0].([]AaaaRecord)[vs[1].(int)]
	}).(AaaaRecordOutput)
}

type AaaaRecordMapOutput struct{ *pulumi.OutputState }

func (AaaaRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AaaaRecord)(nil))
}

func (o AaaaRecordMapOutput) ToAaaaRecordMapOutput() AaaaRecordMapOutput {
	return o
}

func (o AaaaRecordMapOutput) ToAaaaRecordMapOutputWithContext(ctx context.Context) AaaaRecordMapOutput {
	return o
}

func (o AaaaRecordMapOutput) MapIndex(k pulumi.StringInput) AaaaRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AaaaRecord {
		return vs[0].(map[string]AaaaRecord)[vs[1].(string)]
	}).(AaaaRecordOutput)
}

func init() {
	pulumi.RegisterOutputType(AaaaRecordOutput{})
	pulumi.RegisterOutputType(AaaaRecordPtrOutput{})
	pulumi.RegisterOutputType(AaaaRecordArrayOutput{})
	pulumi.RegisterOutputType(AaaaRecordMapOutput{})
}
