// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleZone, err := dns.NewZone(ctx, "exampleZone", &dns.ZoneArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dns.NewTxtRecord(ctx, "exampleTxtRecord", &dns.TxtRecordArgs{
//				ZoneName:          exampleZone.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Ttl:               pulumi.Int(300),
//				Records: dns.TxtRecordRecordArray{
//					&dns.TxtRecordRecordArgs{
//						Value: pulumi.String("google-site-authenticator"),
//					},
//					&dns.TxtRecordRecordArgs{
//						Value: pulumi.String("more site information here"),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"Environment": pulumi.String("Production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TXT records can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:dns/txtRecord:TxtRecord example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/dnsZones/zone1/TXT/myrecord1
//
// ```
type TxtRecord struct {
	pulumi.CustomResourceState

	// The FQDN of the DNS TXT Record.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The name of the DNS TXT Record. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of values that make up the txt record. Each `record` block supports fields documented below.
	Records TxtRecordRecordArrayOutput `pulumi:"records"`
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewTxtRecord registers a new resource with the given unique name, arguments, and options.
func NewTxtRecord(ctx *pulumi.Context,
	name string, args *TxtRecordArgs, opts ...pulumi.ResourceOption) (*TxtRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Records == nil {
		return nil, errors.New("invalid value for required argument 'Records'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	if args.ZoneName == nil {
		return nil, errors.New("invalid value for required argument 'ZoneName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TxtRecord
	err := ctx.RegisterResource("azure:dns/txtRecord:TxtRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTxtRecord gets an existing TxtRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTxtRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TxtRecordState, opts ...pulumi.ResourceOption) (*TxtRecord, error) {
	var resource TxtRecord
	err := ctx.ReadResource("azure:dns/txtRecord:TxtRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TxtRecord resources.
type txtRecordState struct {
	// The FQDN of the DNS TXT Record.
	Fqdn *string `pulumi:"fqdn"`
	// The name of the DNS TXT Record. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A list of values that make up the txt record. Each `record` block supports fields documented below.
	Records []TxtRecordRecord `pulumi:"records"`
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl *int `pulumi:"ttl"`
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName *string `pulumi:"zoneName"`
}

type TxtRecordState struct {
	// The FQDN of the DNS TXT Record.
	Fqdn pulumi.StringPtrInput
	// The name of the DNS TXT Record. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A list of values that make up the txt record. Each `record` block supports fields documented below.
	Records TxtRecordRecordArrayInput
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntPtrInput
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringPtrInput
}

func (TxtRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*txtRecordState)(nil)).Elem()
}

type txtRecordArgs struct {
	// The name of the DNS TXT Record. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A list of values that make up the txt record. Each `record` block supports fields documented below.
	Records []TxtRecordRecord `pulumi:"records"`
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl int `pulumi:"ttl"`
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName string `pulumi:"zoneName"`
}

// The set of arguments for constructing a TxtRecord resource.
type TxtRecordArgs struct {
	// The name of the DNS TXT Record. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A list of values that make up the txt record. Each `record` block supports fields documented below.
	Records TxtRecordRecordArrayInput
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntInput
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringInput
}

func (TxtRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*txtRecordArgs)(nil)).Elem()
}

type TxtRecordInput interface {
	pulumi.Input

	ToTxtRecordOutput() TxtRecordOutput
	ToTxtRecordOutputWithContext(ctx context.Context) TxtRecordOutput
}

func (*TxtRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**TxtRecord)(nil)).Elem()
}

func (i *TxtRecord) ToTxtRecordOutput() TxtRecordOutput {
	return i.ToTxtRecordOutputWithContext(context.Background())
}

func (i *TxtRecord) ToTxtRecordOutputWithContext(ctx context.Context) TxtRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordOutput)
}

// TxtRecordArrayInput is an input type that accepts TxtRecordArray and TxtRecordArrayOutput values.
// You can construct a concrete instance of `TxtRecordArrayInput` via:
//
//	TxtRecordArray{ TxtRecordArgs{...} }
type TxtRecordArrayInput interface {
	pulumi.Input

	ToTxtRecordArrayOutput() TxtRecordArrayOutput
	ToTxtRecordArrayOutputWithContext(context.Context) TxtRecordArrayOutput
}

type TxtRecordArray []TxtRecordInput

func (TxtRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TxtRecord)(nil)).Elem()
}

func (i TxtRecordArray) ToTxtRecordArrayOutput() TxtRecordArrayOutput {
	return i.ToTxtRecordArrayOutputWithContext(context.Background())
}

func (i TxtRecordArray) ToTxtRecordArrayOutputWithContext(ctx context.Context) TxtRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordArrayOutput)
}

// TxtRecordMapInput is an input type that accepts TxtRecordMap and TxtRecordMapOutput values.
// You can construct a concrete instance of `TxtRecordMapInput` via:
//
//	TxtRecordMap{ "key": TxtRecordArgs{...} }
type TxtRecordMapInput interface {
	pulumi.Input

	ToTxtRecordMapOutput() TxtRecordMapOutput
	ToTxtRecordMapOutputWithContext(context.Context) TxtRecordMapOutput
}

type TxtRecordMap map[string]TxtRecordInput

func (TxtRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TxtRecord)(nil)).Elem()
}

func (i TxtRecordMap) ToTxtRecordMapOutput() TxtRecordMapOutput {
	return i.ToTxtRecordMapOutputWithContext(context.Background())
}

func (i TxtRecordMap) ToTxtRecordMapOutputWithContext(ctx context.Context) TxtRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordMapOutput)
}

type TxtRecordOutput struct{ *pulumi.OutputState }

func (TxtRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TxtRecord)(nil)).Elem()
}

func (o TxtRecordOutput) ToTxtRecordOutput() TxtRecordOutput {
	return o
}

func (o TxtRecordOutput) ToTxtRecordOutputWithContext(ctx context.Context) TxtRecordOutput {
	return o
}

// The FQDN of the DNS TXT Record.
func (o TxtRecordOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *TxtRecord) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// The name of the DNS TXT Record. Changing this forces a new resource to be created.
func (o TxtRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TxtRecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of values that make up the txt record. Each `record` block supports fields documented below.
func (o TxtRecordOutput) Records() TxtRecordRecordArrayOutput {
	return o.ApplyT(func(v *TxtRecord) TxtRecordRecordArrayOutput { return v.Records }).(TxtRecordRecordArrayOutput)
}

// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
func (o TxtRecordOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *TxtRecord) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o TxtRecordOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TxtRecord) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The Time To Live (TTL) of the DNS record in seconds.
func (o TxtRecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *TxtRecord) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
func (o TxtRecordOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *TxtRecord) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

type TxtRecordArrayOutput struct{ *pulumi.OutputState }

func (TxtRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TxtRecord)(nil)).Elem()
}

func (o TxtRecordArrayOutput) ToTxtRecordArrayOutput() TxtRecordArrayOutput {
	return o
}

func (o TxtRecordArrayOutput) ToTxtRecordArrayOutputWithContext(ctx context.Context) TxtRecordArrayOutput {
	return o
}

func (o TxtRecordArrayOutput) Index(i pulumi.IntInput) TxtRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TxtRecord {
		return vs[0].([]*TxtRecord)[vs[1].(int)]
	}).(TxtRecordOutput)
}

type TxtRecordMapOutput struct{ *pulumi.OutputState }

func (TxtRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TxtRecord)(nil)).Elem()
}

func (o TxtRecordMapOutput) ToTxtRecordMapOutput() TxtRecordMapOutput {
	return o
}

func (o TxtRecordMapOutput) ToTxtRecordMapOutputWithContext(ctx context.Context) TxtRecordMapOutput {
	return o
}

func (o TxtRecordMapOutput) MapIndex(k pulumi.StringInput) TxtRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TxtRecord {
		return vs[0].(map[string]*TxtRecord)[vs[1].(string)]
	}).(TxtRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TxtRecordInput)(nil)).Elem(), &TxtRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*TxtRecordArrayInput)(nil)).Elem(), TxtRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TxtRecordMapInput)(nil)).Elem(), TxtRecordMap{})
	pulumi.RegisterOutputType(TxtRecordOutput{})
	pulumi.RegisterOutputType(TxtRecordArrayOutput{})
	pulumi.RegisterOutputType(TxtRecordMapOutput{})
}
