// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package dns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type CaaRecordRecord struct {
	Flags int `pulumi:"flags"`
	Tag string `pulumi:"tag"`
	Value string `pulumi:"value"`
}

type CaaRecordRecordInput interface {
	pulumi.Input

	ToCaaRecordRecordOutput() CaaRecordRecordOutput
	ToCaaRecordRecordOutputWithContext(context.Context) CaaRecordRecordOutput
}

type CaaRecordRecordArgs struct {
	Flags pulumi.IntInput `pulumi:"flags"`
	Tag pulumi.StringInput `pulumi:"tag"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (CaaRecordRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CaaRecordRecord)(nil)).Elem()
}

func (i CaaRecordRecordArgs) ToCaaRecordRecordOutput() CaaRecordRecordOutput {
	return i.ToCaaRecordRecordOutputWithContext(context.Background())
}

func (i CaaRecordRecordArgs) ToCaaRecordRecordOutputWithContext(ctx context.Context) CaaRecordRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaaRecordRecordOutput)
}

type CaaRecordRecordArrayInput interface {
	pulumi.Input

	ToCaaRecordRecordArrayOutput() CaaRecordRecordArrayOutput
	ToCaaRecordRecordArrayOutputWithContext(context.Context) CaaRecordRecordArrayOutput
}

type CaaRecordRecordArray []CaaRecordRecordInput

func (CaaRecordRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CaaRecordRecord)(nil)).Elem()
}

func (i CaaRecordRecordArray) ToCaaRecordRecordArrayOutput() CaaRecordRecordArrayOutput {
	return i.ToCaaRecordRecordArrayOutputWithContext(context.Background())
}

func (i CaaRecordRecordArray) ToCaaRecordRecordArrayOutputWithContext(ctx context.Context) CaaRecordRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaaRecordRecordArrayOutput)
}

type CaaRecordRecordOutput struct { *pulumi.OutputState }

func (CaaRecordRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaaRecordRecord)(nil)).Elem()
}

func (o CaaRecordRecordOutput) ToCaaRecordRecordOutput() CaaRecordRecordOutput {
	return o
}

func (o CaaRecordRecordOutput) ToCaaRecordRecordOutputWithContext(ctx context.Context) CaaRecordRecordOutput {
	return o
}

func (o CaaRecordRecordOutput) Flags() pulumi.IntOutput {
	return o.ApplyT(func (v CaaRecordRecord) int { return v.Flags }).(pulumi.IntOutput)
}

func (o CaaRecordRecordOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func (v CaaRecordRecord) string { return v.Tag }).(pulumi.StringOutput)
}

func (o CaaRecordRecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func (v CaaRecordRecord) string { return v.Value }).(pulumi.StringOutput)
}

type CaaRecordRecordArrayOutput struct { *pulumi.OutputState}

func (CaaRecordRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CaaRecordRecord)(nil)).Elem()
}

func (o CaaRecordRecordArrayOutput) ToCaaRecordRecordArrayOutput() CaaRecordRecordArrayOutput {
	return o
}

func (o CaaRecordRecordArrayOutput) ToCaaRecordRecordArrayOutputWithContext(ctx context.Context) CaaRecordRecordArrayOutput {
	return o
}

func (o CaaRecordRecordArrayOutput) Index(i pulumi.IntInput) CaaRecordRecordOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) CaaRecordRecord {
		return vs[0].([]CaaRecordRecord)[vs[1].(int)]
	}).(CaaRecordRecordOutput)
}

type MxRecordRecord struct {
	Exchange string `pulumi:"exchange"`
	Preference string `pulumi:"preference"`
}

type MxRecordRecordInput interface {
	pulumi.Input

	ToMxRecordRecordOutput() MxRecordRecordOutput
	ToMxRecordRecordOutputWithContext(context.Context) MxRecordRecordOutput
}

type MxRecordRecordArgs struct {
	Exchange pulumi.StringInput `pulumi:"exchange"`
	Preference pulumi.StringInput `pulumi:"preference"`
}

func (MxRecordRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecordRecord)(nil)).Elem()
}

func (i MxRecordRecordArgs) ToMxRecordRecordOutput() MxRecordRecordOutput {
	return i.ToMxRecordRecordOutputWithContext(context.Background())
}

func (i MxRecordRecordArgs) ToMxRecordRecordOutputWithContext(ctx context.Context) MxRecordRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordRecordOutput)
}

type MxRecordRecordArrayInput interface {
	pulumi.Input

	ToMxRecordRecordArrayOutput() MxRecordRecordArrayOutput
	ToMxRecordRecordArrayOutputWithContext(context.Context) MxRecordRecordArrayOutput
}

type MxRecordRecordArray []MxRecordRecordInput

func (MxRecordRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecordRecord)(nil)).Elem()
}

func (i MxRecordRecordArray) ToMxRecordRecordArrayOutput() MxRecordRecordArrayOutput {
	return i.ToMxRecordRecordArrayOutputWithContext(context.Background())
}

func (i MxRecordRecordArray) ToMxRecordRecordArrayOutputWithContext(ctx context.Context) MxRecordRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MxRecordRecordArrayOutput)
}

type MxRecordRecordOutput struct { *pulumi.OutputState }

func (MxRecordRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MxRecordRecord)(nil)).Elem()
}

func (o MxRecordRecordOutput) ToMxRecordRecordOutput() MxRecordRecordOutput {
	return o
}

func (o MxRecordRecordOutput) ToMxRecordRecordOutputWithContext(ctx context.Context) MxRecordRecordOutput {
	return o
}

func (o MxRecordRecordOutput) Exchange() pulumi.StringOutput {
	return o.ApplyT(func (v MxRecordRecord) string { return v.Exchange }).(pulumi.StringOutput)
}

func (o MxRecordRecordOutput) Preference() pulumi.StringOutput {
	return o.ApplyT(func (v MxRecordRecord) string { return v.Preference }).(pulumi.StringOutput)
}

type MxRecordRecordArrayOutput struct { *pulumi.OutputState}

func (MxRecordRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MxRecordRecord)(nil)).Elem()
}

func (o MxRecordRecordArrayOutput) ToMxRecordRecordArrayOutput() MxRecordRecordArrayOutput {
	return o
}

func (o MxRecordRecordArrayOutput) ToMxRecordRecordArrayOutputWithContext(ctx context.Context) MxRecordRecordArrayOutput {
	return o
}

func (o MxRecordRecordArrayOutput) Index(i pulumi.IntInput) MxRecordRecordOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) MxRecordRecord {
		return vs[0].([]MxRecordRecord)[vs[1].(int)]
	}).(MxRecordRecordOutput)
}

type NsRecordRecord struct {
	Nsdname string `pulumi:"nsdname"`
}

type NsRecordRecordInput interface {
	pulumi.Input

	ToNsRecordRecordOutput() NsRecordRecordOutput
	ToNsRecordRecordOutputWithContext(context.Context) NsRecordRecordOutput
}

type NsRecordRecordArgs struct {
	Nsdname pulumi.StringInput `pulumi:"nsdname"`
}

func (NsRecordRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecordRecord)(nil)).Elem()
}

func (i NsRecordRecordArgs) ToNsRecordRecordOutput() NsRecordRecordOutput {
	return i.ToNsRecordRecordOutputWithContext(context.Background())
}

func (i NsRecordRecordArgs) ToNsRecordRecordOutputWithContext(ctx context.Context) NsRecordRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsRecordRecordOutput)
}

type NsRecordRecordArrayInput interface {
	pulumi.Input

	ToNsRecordRecordArrayOutput() NsRecordRecordArrayOutput
	ToNsRecordRecordArrayOutputWithContext(context.Context) NsRecordRecordArrayOutput
}

type NsRecordRecordArray []NsRecordRecordInput

func (NsRecordRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecordRecord)(nil)).Elem()
}

func (i NsRecordRecordArray) ToNsRecordRecordArrayOutput() NsRecordRecordArrayOutput {
	return i.ToNsRecordRecordArrayOutputWithContext(context.Background())
}

func (i NsRecordRecordArray) ToNsRecordRecordArrayOutputWithContext(ctx context.Context) NsRecordRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NsRecordRecordArrayOutput)
}

type NsRecordRecordOutput struct { *pulumi.OutputState }

func (NsRecordRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NsRecordRecord)(nil)).Elem()
}

func (o NsRecordRecordOutput) ToNsRecordRecordOutput() NsRecordRecordOutput {
	return o
}

func (o NsRecordRecordOutput) ToNsRecordRecordOutputWithContext(ctx context.Context) NsRecordRecordOutput {
	return o
}

func (o NsRecordRecordOutput) Nsdname() pulumi.StringOutput {
	return o.ApplyT(func (v NsRecordRecord) string { return v.Nsdname }).(pulumi.StringOutput)
}

type NsRecordRecordArrayOutput struct { *pulumi.OutputState}

func (NsRecordRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NsRecordRecord)(nil)).Elem()
}

func (o NsRecordRecordArrayOutput) ToNsRecordRecordArrayOutput() NsRecordRecordArrayOutput {
	return o
}

func (o NsRecordRecordArrayOutput) ToNsRecordRecordArrayOutputWithContext(ctx context.Context) NsRecordRecordArrayOutput {
	return o
}

func (o NsRecordRecordArrayOutput) Index(i pulumi.IntInput) NsRecordRecordOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) NsRecordRecord {
		return vs[0].([]NsRecordRecord)[vs[1].(int)]
	}).(NsRecordRecordOutput)
}

type SrvRecordRecord struct {
	Port int `pulumi:"port"`
	Priority int `pulumi:"priority"`
	Target string `pulumi:"target"`
	Weight int `pulumi:"weight"`
}

type SrvRecordRecordInput interface {
	pulumi.Input

	ToSrvRecordRecordOutput() SrvRecordRecordOutput
	ToSrvRecordRecordOutputWithContext(context.Context) SrvRecordRecordOutput
}

type SrvRecordRecordArgs struct {
	Port pulumi.IntInput `pulumi:"port"`
	Priority pulumi.IntInput `pulumi:"priority"`
	Target pulumi.StringInput `pulumi:"target"`
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (SrvRecordRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecordRecord)(nil)).Elem()
}

func (i SrvRecordRecordArgs) ToSrvRecordRecordOutput() SrvRecordRecordOutput {
	return i.ToSrvRecordRecordOutputWithContext(context.Background())
}

func (i SrvRecordRecordArgs) ToSrvRecordRecordOutputWithContext(ctx context.Context) SrvRecordRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SrvRecordRecordOutput)
}

type SrvRecordRecordArrayInput interface {
	pulumi.Input

	ToSrvRecordRecordArrayOutput() SrvRecordRecordArrayOutput
	ToSrvRecordRecordArrayOutputWithContext(context.Context) SrvRecordRecordArrayOutput
}

type SrvRecordRecordArray []SrvRecordRecordInput

func (SrvRecordRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecordRecord)(nil)).Elem()
}

func (i SrvRecordRecordArray) ToSrvRecordRecordArrayOutput() SrvRecordRecordArrayOutput {
	return i.ToSrvRecordRecordArrayOutputWithContext(context.Background())
}

func (i SrvRecordRecordArray) ToSrvRecordRecordArrayOutputWithContext(ctx context.Context) SrvRecordRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SrvRecordRecordArrayOutput)
}

type SrvRecordRecordOutput struct { *pulumi.OutputState }

func (SrvRecordRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SrvRecordRecord)(nil)).Elem()
}

func (o SrvRecordRecordOutput) ToSrvRecordRecordOutput() SrvRecordRecordOutput {
	return o
}

func (o SrvRecordRecordOutput) ToSrvRecordRecordOutputWithContext(ctx context.Context) SrvRecordRecordOutput {
	return o
}

func (o SrvRecordRecordOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func (v SrvRecordRecord) int { return v.Port }).(pulumi.IntOutput)
}

func (o SrvRecordRecordOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func (v SrvRecordRecord) int { return v.Priority }).(pulumi.IntOutput)
}

func (o SrvRecordRecordOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func (v SrvRecordRecord) string { return v.Target }).(pulumi.StringOutput)
}

func (o SrvRecordRecordOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func (v SrvRecordRecord) int { return v.Weight }).(pulumi.IntOutput)
}

type SrvRecordRecordArrayOutput struct { *pulumi.OutputState}

func (SrvRecordRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SrvRecordRecord)(nil)).Elem()
}

func (o SrvRecordRecordArrayOutput) ToSrvRecordRecordArrayOutput() SrvRecordRecordArrayOutput {
	return o
}

func (o SrvRecordRecordArrayOutput) ToSrvRecordRecordArrayOutputWithContext(ctx context.Context) SrvRecordRecordArrayOutput {
	return o
}

func (o SrvRecordRecordArrayOutput) Index(i pulumi.IntInput) SrvRecordRecordOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) SrvRecordRecord {
		return vs[0].([]SrvRecordRecord)[vs[1].(int)]
	}).(SrvRecordRecordOutput)
}

type TxtRecordRecord struct {
	Value string `pulumi:"value"`
}

type TxtRecordRecordInput interface {
	pulumi.Input

	ToTxtRecordRecordOutput() TxtRecordRecordOutput
	ToTxtRecordRecordOutputWithContext(context.Context) TxtRecordRecordOutput
}

type TxtRecordRecordArgs struct {
	Value pulumi.StringInput `pulumi:"value"`
}

func (TxtRecordRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecordRecord)(nil)).Elem()
}

func (i TxtRecordRecordArgs) ToTxtRecordRecordOutput() TxtRecordRecordOutput {
	return i.ToTxtRecordRecordOutputWithContext(context.Background())
}

func (i TxtRecordRecordArgs) ToTxtRecordRecordOutputWithContext(ctx context.Context) TxtRecordRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordRecordOutput)
}

type TxtRecordRecordArrayInput interface {
	pulumi.Input

	ToTxtRecordRecordArrayOutput() TxtRecordRecordArrayOutput
	ToTxtRecordRecordArrayOutputWithContext(context.Context) TxtRecordRecordArrayOutput
}

type TxtRecordRecordArray []TxtRecordRecordInput

func (TxtRecordRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecordRecord)(nil)).Elem()
}

func (i TxtRecordRecordArray) ToTxtRecordRecordArrayOutput() TxtRecordRecordArrayOutput {
	return i.ToTxtRecordRecordArrayOutputWithContext(context.Background())
}

func (i TxtRecordRecordArray) ToTxtRecordRecordArrayOutputWithContext(ctx context.Context) TxtRecordRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TxtRecordRecordArrayOutput)
}

type TxtRecordRecordOutput struct { *pulumi.OutputState }

func (TxtRecordRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TxtRecordRecord)(nil)).Elem()
}

func (o TxtRecordRecordOutput) ToTxtRecordRecordOutput() TxtRecordRecordOutput {
	return o
}

func (o TxtRecordRecordOutput) ToTxtRecordRecordOutputWithContext(ctx context.Context) TxtRecordRecordOutput {
	return o
}

func (o TxtRecordRecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func (v TxtRecordRecord) string { return v.Value }).(pulumi.StringOutput)
}

type TxtRecordRecordArrayOutput struct { *pulumi.OutputState}

func (TxtRecordRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TxtRecordRecord)(nil)).Elem()
}

func (o TxtRecordRecordArrayOutput) ToTxtRecordRecordArrayOutput() TxtRecordRecordArrayOutput {
	return o
}

func (o TxtRecordRecordArrayOutput) ToTxtRecordRecordArrayOutputWithContext(ctx context.Context) TxtRecordRecordArrayOutput {
	return o
}

func (o TxtRecordRecordArrayOutput) Index(i pulumi.IntInput) TxtRecordRecordOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) TxtRecordRecord {
		return vs[0].([]TxtRecordRecord)[vs[1].(int)]
	}).(TxtRecordRecordOutput)
}

func init() {
	pulumi.RegisterOutputType(CaaRecordRecordOutput{})
	pulumi.RegisterOutputType(CaaRecordRecordArrayOutput{})
	pulumi.RegisterOutputType(MxRecordRecordOutput{})
	pulumi.RegisterOutputType(MxRecordRecordArrayOutput{})
	pulumi.RegisterOutputType(NsRecordRecordOutput{})
	pulumi.RegisterOutputType(NsRecordRecordArrayOutput{})
	pulumi.RegisterOutputType(SrvRecordRecordOutput{})
	pulumi.RegisterOutputType(SrvRecordRecordArrayOutput{})
	pulumi.RegisterOutputType(TxtRecordRecordOutput{})
	pulumi.RegisterOutputType(TxtRecordRecordArrayOutput{})
}
