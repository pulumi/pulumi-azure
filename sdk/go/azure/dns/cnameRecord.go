// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleZone, err := dns.NewZone(ctx, "exampleZone", &dns.ZoneArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dns.NewCNameRecord(ctx, "exampleCNameRecord", &dns.CNameRecordArgs{
//				ZoneName:          exampleZone.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Ttl:               pulumi.Int(300),
//				Record:            pulumi.String("contoso.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Alias Record)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleZone, err := dns.NewZone(ctx, "exampleZone", &dns.ZoneArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			target, err := dns.NewCNameRecord(ctx, "target", &dns.CNameRecordArgs{
//				ZoneName:          exampleZone.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Ttl:               pulumi.Int(300),
//				Record:            pulumi.String("contoso.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dns.NewCNameRecord(ctx, "exampleCNameRecord", &dns.CNameRecordArgs{
//				ZoneName:          exampleZone.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Ttl:               pulumi.Int(300),
//				TargetResourceId:  target.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CNAME records can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:dns/cNameRecord:CNameRecord example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/dnsZones/zone1/CNAME/myrecord1
//
// ```
type CNameRecord struct {
	pulumi.CustomResourceState

	// The FQDN of the DNS CName Record.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The name of the DNS CNAME Record. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The target of the CNAME.
	Record pulumi.StringPtrOutput `pulumi:"record"`
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	//
	// > **Note:** either `record` OR `targetResourceId` must be specified, but not both.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The Azure resource id of the target object. Conflicts with `record`.
	TargetResourceId pulumi.StringPtrOutput `pulumi:"targetResourceId"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewCNameRecord registers a new resource with the given unique name, arguments, and options.
func NewCNameRecord(ctx *pulumi.Context,
	name string, args *CNameRecordArgs, opts ...pulumi.ResourceOption) (*CNameRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	if args.ZoneName == nil {
		return nil, errors.New("invalid value for required argument 'ZoneName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CNameRecord
	err := ctx.RegisterResource("azure:dns/cNameRecord:CNameRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCNameRecord gets an existing CNameRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCNameRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CNameRecordState, opts ...pulumi.ResourceOption) (*CNameRecord, error) {
	var resource CNameRecord
	err := ctx.ReadResource("azure:dns/cNameRecord:CNameRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CNameRecord resources.
type cnameRecordState struct {
	// The FQDN of the DNS CName Record.
	Fqdn *string `pulumi:"fqdn"`
	// The name of the DNS CNAME Record. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The target of the CNAME.
	Record *string `pulumi:"record"`
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	//
	// > **Note:** either `record` OR `targetResourceId` must be specified, but not both.
	Tags map[string]string `pulumi:"tags"`
	// The Azure resource id of the target object. Conflicts with `record`.
	TargetResourceId *string `pulumi:"targetResourceId"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl *int `pulumi:"ttl"`
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName *string `pulumi:"zoneName"`
}

type CNameRecordState struct {
	// The FQDN of the DNS CName Record.
	Fqdn pulumi.StringPtrInput
	// The name of the DNS CNAME Record. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The target of the CNAME.
	Record pulumi.StringPtrInput
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	//
	// > **Note:** either `record` OR `targetResourceId` must be specified, but not both.
	Tags pulumi.StringMapInput
	// The Azure resource id of the target object. Conflicts with `record`.
	TargetResourceId pulumi.StringPtrInput
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntPtrInput
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringPtrInput
}

func (CNameRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*cnameRecordState)(nil)).Elem()
}

type cnameRecordArgs struct {
	// The name of the DNS CNAME Record. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The target of the CNAME.
	Record *string `pulumi:"record"`
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	//
	// > **Note:** either `record` OR `targetResourceId` must be specified, but not both.
	Tags map[string]string `pulumi:"tags"`
	// The Azure resource id of the target object. Conflicts with `record`.
	TargetResourceId *string `pulumi:"targetResourceId"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl int `pulumi:"ttl"`
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName string `pulumi:"zoneName"`
}

// The set of arguments for constructing a CNameRecord resource.
type CNameRecordArgs struct {
	// The name of the DNS CNAME Record. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The target of the CNAME.
	Record pulumi.StringPtrInput
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	//
	// > **Note:** either `record` OR `targetResourceId` must be specified, but not both.
	Tags pulumi.StringMapInput
	// The Azure resource id of the target object. Conflicts with `record`.
	TargetResourceId pulumi.StringPtrInput
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntInput
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringInput
}

func (CNameRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cnameRecordArgs)(nil)).Elem()
}

type CNameRecordInput interface {
	pulumi.Input

	ToCNameRecordOutput() CNameRecordOutput
	ToCNameRecordOutputWithContext(ctx context.Context) CNameRecordOutput
}

func (*CNameRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**CNameRecord)(nil)).Elem()
}

func (i *CNameRecord) ToCNameRecordOutput() CNameRecordOutput {
	return i.ToCNameRecordOutputWithContext(context.Background())
}

func (i *CNameRecord) ToCNameRecordOutputWithContext(ctx context.Context) CNameRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CNameRecordOutput)
}

// CNameRecordArrayInput is an input type that accepts CNameRecordArray and CNameRecordArrayOutput values.
// You can construct a concrete instance of `CNameRecordArrayInput` via:
//
//	CNameRecordArray{ CNameRecordArgs{...} }
type CNameRecordArrayInput interface {
	pulumi.Input

	ToCNameRecordArrayOutput() CNameRecordArrayOutput
	ToCNameRecordArrayOutputWithContext(context.Context) CNameRecordArrayOutput
}

type CNameRecordArray []CNameRecordInput

func (CNameRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CNameRecord)(nil)).Elem()
}

func (i CNameRecordArray) ToCNameRecordArrayOutput() CNameRecordArrayOutput {
	return i.ToCNameRecordArrayOutputWithContext(context.Background())
}

func (i CNameRecordArray) ToCNameRecordArrayOutputWithContext(ctx context.Context) CNameRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CNameRecordArrayOutput)
}

// CNameRecordMapInput is an input type that accepts CNameRecordMap and CNameRecordMapOutput values.
// You can construct a concrete instance of `CNameRecordMapInput` via:
//
//	CNameRecordMap{ "key": CNameRecordArgs{...} }
type CNameRecordMapInput interface {
	pulumi.Input

	ToCNameRecordMapOutput() CNameRecordMapOutput
	ToCNameRecordMapOutputWithContext(context.Context) CNameRecordMapOutput
}

type CNameRecordMap map[string]CNameRecordInput

func (CNameRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CNameRecord)(nil)).Elem()
}

func (i CNameRecordMap) ToCNameRecordMapOutput() CNameRecordMapOutput {
	return i.ToCNameRecordMapOutputWithContext(context.Background())
}

func (i CNameRecordMap) ToCNameRecordMapOutputWithContext(ctx context.Context) CNameRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CNameRecordMapOutput)
}

type CNameRecordOutput struct{ *pulumi.OutputState }

func (CNameRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CNameRecord)(nil)).Elem()
}

func (o CNameRecordOutput) ToCNameRecordOutput() CNameRecordOutput {
	return o
}

func (o CNameRecordOutput) ToCNameRecordOutputWithContext(ctx context.Context) CNameRecordOutput {
	return o
}

// The FQDN of the DNS CName Record.
func (o CNameRecordOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *CNameRecord) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// The name of the DNS CNAME Record. Changing this forces a new resource to be created.
func (o CNameRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CNameRecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The target of the CNAME.
func (o CNameRecordOutput) Record() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CNameRecord) pulumi.StringPtrOutput { return v.Record }).(pulumi.StringPtrOutput)
}

// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
func (o CNameRecordOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *CNameRecord) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
//
// > **Note:** either `record` OR `targetResourceId` must be specified, but not both.
func (o CNameRecordOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CNameRecord) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The Azure resource id of the target object. Conflicts with `record`.
func (o CNameRecordOutput) TargetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CNameRecord) pulumi.StringPtrOutput { return v.TargetResourceId }).(pulumi.StringPtrOutput)
}

// The Time To Live (TTL) of the DNS record in seconds.
func (o CNameRecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *CNameRecord) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
func (o CNameRecordOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *CNameRecord) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

type CNameRecordArrayOutput struct{ *pulumi.OutputState }

func (CNameRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CNameRecord)(nil)).Elem()
}

func (o CNameRecordArrayOutput) ToCNameRecordArrayOutput() CNameRecordArrayOutput {
	return o
}

func (o CNameRecordArrayOutput) ToCNameRecordArrayOutputWithContext(ctx context.Context) CNameRecordArrayOutput {
	return o
}

func (o CNameRecordArrayOutput) Index(i pulumi.IntInput) CNameRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CNameRecord {
		return vs[0].([]*CNameRecord)[vs[1].(int)]
	}).(CNameRecordOutput)
}

type CNameRecordMapOutput struct{ *pulumi.OutputState }

func (CNameRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CNameRecord)(nil)).Elem()
}

func (o CNameRecordMapOutput) ToCNameRecordMapOutput() CNameRecordMapOutput {
	return o
}

func (o CNameRecordMapOutput) ToCNameRecordMapOutputWithContext(ctx context.Context) CNameRecordMapOutput {
	return o
}

func (o CNameRecordMapOutput) MapIndex(k pulumi.StringInput) CNameRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CNameRecord {
		return vs[0].(map[string]*CNameRecord)[vs[1].(string)]
	}).(CNameRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CNameRecordInput)(nil)).Elem(), &CNameRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*CNameRecordArrayInput)(nil)).Elem(), CNameRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CNameRecordMapInput)(nil)).Elem(), CNameRecordMap{})
	pulumi.RegisterOutputType(CNameRecordOutput{})
	pulumi.RegisterOutputType(CNameRecordArrayOutput{})
	pulumi.RegisterOutputType(CNameRecordMapOutput{})
}
