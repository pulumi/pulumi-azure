// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/dns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleZone, err := dns.NewZone(ctx, "exampleZone", &dns.ZoneArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dns.NewPtrRecord(ctx, "examplePtrRecord", &dns.PtrRecordArgs{
//				ZoneName:          exampleZone.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Ttl:               pulumi.Int(300),
//				Records: pulumi.StringArray{
//					pulumi.String("yourdomain.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PTR records can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:dns/ptrRecord:PtrRecord example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/dnsZones/zone1/PTR/myrecord1
//
// ```
type PtrRecord struct {
	pulumi.CustomResourceState

	// The FQDN of the DNS PTR Record.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The name of the DNS PTR Record. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of Fully Qualified Domain Names.
	Records pulumi.StringArrayOutput `pulumi:"records"`
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewPtrRecord registers a new resource with the given unique name, arguments, and options.
func NewPtrRecord(ctx *pulumi.Context,
	name string, args *PtrRecordArgs, opts ...pulumi.ResourceOption) (*PtrRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Records == nil {
		return nil, errors.New("invalid value for required argument 'Records'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	if args.ZoneName == nil {
		return nil, errors.New("invalid value for required argument 'ZoneName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PtrRecord
	err := ctx.RegisterResource("azure:dns/ptrRecord:PtrRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPtrRecord gets an existing PtrRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPtrRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PtrRecordState, opts ...pulumi.ResourceOption) (*PtrRecord, error) {
	var resource PtrRecord
	err := ctx.ReadResource("azure:dns/ptrRecord:PtrRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PtrRecord resources.
type ptrRecordState struct {
	// The FQDN of the DNS PTR Record.
	Fqdn *string `pulumi:"fqdn"`
	// The name of the DNS PTR Record. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// List of Fully Qualified Domain Names.
	Records []string `pulumi:"records"`
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl *int `pulumi:"ttl"`
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName *string `pulumi:"zoneName"`
}

type PtrRecordState struct {
	// The FQDN of the DNS PTR Record.
	Fqdn pulumi.StringPtrInput
	// The name of the DNS PTR Record. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// List of Fully Qualified Domain Names.
	Records pulumi.StringArrayInput
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntPtrInput
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringPtrInput
}

func (PtrRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*ptrRecordState)(nil)).Elem()
}

type ptrRecordArgs struct {
	// The name of the DNS PTR Record. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// List of Fully Qualified Domain Names.
	Records []string `pulumi:"records"`
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl int `pulumi:"ttl"`
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName string `pulumi:"zoneName"`
}

// The set of arguments for constructing a PtrRecord resource.
type PtrRecordArgs struct {
	// The name of the DNS PTR Record. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// List of Fully Qualified Domain Names.
	Records pulumi.StringArrayInput
	// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntInput
	// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringInput
}

func (PtrRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ptrRecordArgs)(nil)).Elem()
}

type PtrRecordInput interface {
	pulumi.Input

	ToPtrRecordOutput() PtrRecordOutput
	ToPtrRecordOutputWithContext(ctx context.Context) PtrRecordOutput
}

func (*PtrRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**PtrRecord)(nil)).Elem()
}

func (i *PtrRecord) ToPtrRecordOutput() PtrRecordOutput {
	return i.ToPtrRecordOutputWithContext(context.Background())
}

func (i *PtrRecord) ToPtrRecordOutputWithContext(ctx context.Context) PtrRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordOutput)
}

// PtrRecordArrayInput is an input type that accepts PtrRecordArray and PtrRecordArrayOutput values.
// You can construct a concrete instance of `PtrRecordArrayInput` via:
//
//	PtrRecordArray{ PtrRecordArgs{...} }
type PtrRecordArrayInput interface {
	pulumi.Input

	ToPtrRecordArrayOutput() PtrRecordArrayOutput
	ToPtrRecordArrayOutputWithContext(context.Context) PtrRecordArrayOutput
}

type PtrRecordArray []PtrRecordInput

func (PtrRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PtrRecord)(nil)).Elem()
}

func (i PtrRecordArray) ToPtrRecordArrayOutput() PtrRecordArrayOutput {
	return i.ToPtrRecordArrayOutputWithContext(context.Background())
}

func (i PtrRecordArray) ToPtrRecordArrayOutputWithContext(ctx context.Context) PtrRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordArrayOutput)
}

// PtrRecordMapInput is an input type that accepts PtrRecordMap and PtrRecordMapOutput values.
// You can construct a concrete instance of `PtrRecordMapInput` via:
//
//	PtrRecordMap{ "key": PtrRecordArgs{...} }
type PtrRecordMapInput interface {
	pulumi.Input

	ToPtrRecordMapOutput() PtrRecordMapOutput
	ToPtrRecordMapOutputWithContext(context.Context) PtrRecordMapOutput
}

type PtrRecordMap map[string]PtrRecordInput

func (PtrRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PtrRecord)(nil)).Elem()
}

func (i PtrRecordMap) ToPtrRecordMapOutput() PtrRecordMapOutput {
	return i.ToPtrRecordMapOutputWithContext(context.Background())
}

func (i PtrRecordMap) ToPtrRecordMapOutputWithContext(ctx context.Context) PtrRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PtrRecordMapOutput)
}

type PtrRecordOutput struct{ *pulumi.OutputState }

func (PtrRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PtrRecord)(nil)).Elem()
}

func (o PtrRecordOutput) ToPtrRecordOutput() PtrRecordOutput {
	return o
}

func (o PtrRecordOutput) ToPtrRecordOutputWithContext(ctx context.Context) PtrRecordOutput {
	return o
}

// The FQDN of the DNS PTR Record.
func (o PtrRecordOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *PtrRecord) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// The name of the DNS PTR Record. Changing this forces a new resource to be created.
func (o PtrRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PtrRecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of Fully Qualified Domain Names.
func (o PtrRecordOutput) Records() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PtrRecord) pulumi.StringArrayOutput { return v.Records }).(pulumi.StringArrayOutput)
}

// Specifies the resource group where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
func (o PtrRecordOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *PtrRecord) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o PtrRecordOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PtrRecord) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The Time To Live (TTL) of the DNS record in seconds.
func (o PtrRecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *PtrRecord) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// Specifies the DNS Zone where the resource exists. Changing this forces a new resource to be created.
func (o PtrRecordOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *PtrRecord) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

type PtrRecordArrayOutput struct{ *pulumi.OutputState }

func (PtrRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PtrRecord)(nil)).Elem()
}

func (o PtrRecordArrayOutput) ToPtrRecordArrayOutput() PtrRecordArrayOutput {
	return o
}

func (o PtrRecordArrayOutput) ToPtrRecordArrayOutputWithContext(ctx context.Context) PtrRecordArrayOutput {
	return o
}

func (o PtrRecordArrayOutput) Index(i pulumi.IntInput) PtrRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PtrRecord {
		return vs[0].([]*PtrRecord)[vs[1].(int)]
	}).(PtrRecordOutput)
}

type PtrRecordMapOutput struct{ *pulumi.OutputState }

func (PtrRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PtrRecord)(nil)).Elem()
}

func (o PtrRecordMapOutput) ToPtrRecordMapOutput() PtrRecordMapOutput {
	return o
}

func (o PtrRecordMapOutput) ToPtrRecordMapOutputWithContext(ctx context.Context) PtrRecordMapOutput {
	return o
}

func (o PtrRecordMapOutput) MapIndex(k pulumi.StringInput) PtrRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PtrRecord {
		return vs[0].(map[string]*PtrRecord)[vs[1].(string)]
	}).(PtrRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PtrRecordInput)(nil)).Elem(), &PtrRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*PtrRecordArrayInput)(nil)).Elem(), PtrRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PtrRecordMapInput)(nil)).Elem(), PtrRecordMap{})
	pulumi.RegisterOutputType(PtrRecordOutput{})
	pulumi.RegisterOutputType(PtrRecordArrayOutput{})
	pulumi.RegisterOutputType(PtrRecordMapOutput{})
}
