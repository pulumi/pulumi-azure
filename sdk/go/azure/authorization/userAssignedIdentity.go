// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// <!-- Note: This documentation is generated. Any manual changes will be overwritten -->
//
// Manages a User Assigned Identity.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = authorization.NewUserAssignedIdentity(ctx, "exampleUserAssignedIdentity", &authorization.UserAssignedIdentityArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An existing User Assigned Identity can be imported into Terraform using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:authorization/userAssignedIdentity:UserAssignedIdentity example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{userAssignedIdentityName}
//
// ```
//
//   - Where `{subscriptionId}` is the ID of the Azure Subscription where the User Assigned Identity exists. For example `12345678-1234-9876-4563-123456789012`. * Where `{resourceGroupName}` is the name of Resource Group where this User Assigned Identity exists. For example `example-resource-group`. * Where `{userAssignedIdentityName}` is the name of the User Assigned Identity. For example `userAssignedIdentityValue`.
type UserAssignedIdentity struct {
	pulumi.CustomResourceState

	// The ID of the app associated with the Identity.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// The Azure Region where the User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of this User Assigned Identity. Changing this forces a new User Assigned Identity to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Service Principal object associated with the created Identity.
	PrincipalId pulumi.StringOutput `pulumi:"principalId"`
	// Specifies the name of the Resource Group within which this User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the User Assigned Identity.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The ID of the Tenant which the Identity belongs to.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewUserAssignedIdentity registers a new resource with the given unique name, arguments, and options.
func NewUserAssignedIdentity(ctx *pulumi.Context,
	name string, args *UserAssignedIdentityArgs, opts ...pulumi.ResourceOption) (*UserAssignedIdentity, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure:msi/userAssignedIdentity:UserAssignedIdentity"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserAssignedIdentity
	err := ctx.RegisterResource("azure:authorization/userAssignedIdentity:UserAssignedIdentity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserAssignedIdentity gets an existing UserAssignedIdentity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserAssignedIdentity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserAssignedIdentityState, opts ...pulumi.ResourceOption) (*UserAssignedIdentity, error) {
	var resource UserAssignedIdentity
	err := ctx.ReadResource("azure:authorization/userAssignedIdentity:UserAssignedIdentity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserAssignedIdentity resources.
type userAssignedIdentityState struct {
	// The ID of the app associated with the Identity.
	ClientId *string `pulumi:"clientId"`
	// The Azure Region where the User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of this User Assigned Identity. Changing this forces a new User Assigned Identity to be created.
	Name *string `pulumi:"name"`
	// The ID of the Service Principal object associated with the created Identity.
	PrincipalId *string `pulumi:"principalId"`
	// Specifies the name of the Resource Group within which this User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the User Assigned Identity.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the Tenant which the Identity belongs to.
	TenantId *string `pulumi:"tenantId"`
}

type UserAssignedIdentityState struct {
	// The ID of the app associated with the Identity.
	ClientId pulumi.StringPtrInput
	// The Azure Region where the User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of this User Assigned Identity. Changing this forces a new User Assigned Identity to be created.
	Name pulumi.StringPtrInput
	// The ID of the Service Principal object associated with the created Identity.
	PrincipalId pulumi.StringPtrInput
	// Specifies the name of the Resource Group within which this User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the User Assigned Identity.
	Tags pulumi.StringMapInput
	// The ID of the Tenant which the Identity belongs to.
	TenantId pulumi.StringPtrInput
}

func (UserAssignedIdentityState) ElementType() reflect.Type {
	return reflect.TypeOf((*userAssignedIdentityState)(nil)).Elem()
}

type userAssignedIdentityArgs struct {
	// The Azure Region where the User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of this User Assigned Identity. Changing this forces a new User Assigned Identity to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group within which this User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the User Assigned Identity.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a UserAssignedIdentity resource.
type UserAssignedIdentityArgs struct {
	// The Azure Region where the User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of this User Assigned Identity. Changing this forces a new User Assigned Identity to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group within which this User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the User Assigned Identity.
	Tags pulumi.StringMapInput
}

func (UserAssignedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userAssignedIdentityArgs)(nil)).Elem()
}

type UserAssignedIdentityInput interface {
	pulumi.Input

	ToUserAssignedIdentityOutput() UserAssignedIdentityOutput
	ToUserAssignedIdentityOutputWithContext(ctx context.Context) UserAssignedIdentityOutput
}

func (*UserAssignedIdentity) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentity)(nil)).Elem()
}

func (i *UserAssignedIdentity) ToUserAssignedIdentityOutput() UserAssignedIdentityOutput {
	return i.ToUserAssignedIdentityOutputWithContext(context.Background())
}

func (i *UserAssignedIdentity) ToUserAssignedIdentityOutputWithContext(ctx context.Context) UserAssignedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityOutput)
}

// UserAssignedIdentityArrayInput is an input type that accepts UserAssignedIdentityArray and UserAssignedIdentityArrayOutput values.
// You can construct a concrete instance of `UserAssignedIdentityArrayInput` via:
//
//	UserAssignedIdentityArray{ UserAssignedIdentityArgs{...} }
type UserAssignedIdentityArrayInput interface {
	pulumi.Input

	ToUserAssignedIdentityArrayOutput() UserAssignedIdentityArrayOutput
	ToUserAssignedIdentityArrayOutputWithContext(context.Context) UserAssignedIdentityArrayOutput
}

type UserAssignedIdentityArray []UserAssignedIdentityInput

func (UserAssignedIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAssignedIdentity)(nil)).Elem()
}

func (i UserAssignedIdentityArray) ToUserAssignedIdentityArrayOutput() UserAssignedIdentityArrayOutput {
	return i.ToUserAssignedIdentityArrayOutputWithContext(context.Background())
}

func (i UserAssignedIdentityArray) ToUserAssignedIdentityArrayOutputWithContext(ctx context.Context) UserAssignedIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityArrayOutput)
}

// UserAssignedIdentityMapInput is an input type that accepts UserAssignedIdentityMap and UserAssignedIdentityMapOutput values.
// You can construct a concrete instance of `UserAssignedIdentityMapInput` via:
//
//	UserAssignedIdentityMap{ "key": UserAssignedIdentityArgs{...} }
type UserAssignedIdentityMapInput interface {
	pulumi.Input

	ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput
	ToUserAssignedIdentityMapOutputWithContext(context.Context) UserAssignedIdentityMapOutput
}

type UserAssignedIdentityMap map[string]UserAssignedIdentityInput

func (UserAssignedIdentityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAssignedIdentity)(nil)).Elem()
}

func (i UserAssignedIdentityMap) ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput {
	return i.ToUserAssignedIdentityMapOutputWithContext(context.Background())
}

func (i UserAssignedIdentityMap) ToUserAssignedIdentityMapOutputWithContext(ctx context.Context) UserAssignedIdentityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityMapOutput)
}

type UserAssignedIdentityOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentity)(nil)).Elem()
}

func (o UserAssignedIdentityOutput) ToUserAssignedIdentityOutput() UserAssignedIdentityOutput {
	return o
}

func (o UserAssignedIdentityOutput) ToUserAssignedIdentityOutputWithContext(ctx context.Context) UserAssignedIdentityOutput {
	return o
}

// The ID of the app associated with the Identity.
func (o UserAssignedIdentityOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAssignedIdentity) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// The Azure Region where the User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
func (o UserAssignedIdentityOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAssignedIdentity) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of this User Assigned Identity. Changing this forces a new User Assigned Identity to be created.
func (o UserAssignedIdentityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAssignedIdentity) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Service Principal object associated with the created Identity.
func (o UserAssignedIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAssignedIdentity) pulumi.StringOutput { return v.PrincipalId }).(pulumi.StringOutput)
}

// Specifies the name of the Resource Group within which this User Assigned Identity should exist. Changing this forces a new User Assigned Identity to be created.
func (o UserAssignedIdentityOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAssignedIdentity) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the User Assigned Identity.
func (o UserAssignedIdentityOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *UserAssignedIdentity) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The ID of the Tenant which the Identity belongs to.
func (o UserAssignedIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAssignedIdentity) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type UserAssignedIdentityArrayOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAssignedIdentity)(nil)).Elem()
}

func (o UserAssignedIdentityArrayOutput) ToUserAssignedIdentityArrayOutput() UserAssignedIdentityArrayOutput {
	return o
}

func (o UserAssignedIdentityArrayOutput) ToUserAssignedIdentityArrayOutputWithContext(ctx context.Context) UserAssignedIdentityArrayOutput {
	return o
}

func (o UserAssignedIdentityArrayOutput) Index(i pulumi.IntInput) UserAssignedIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserAssignedIdentity {
		return vs[0].([]*UserAssignedIdentity)[vs[1].(int)]
	}).(UserAssignedIdentityOutput)
}

type UserAssignedIdentityMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAssignedIdentity)(nil)).Elem()
}

func (o UserAssignedIdentityMapOutput) ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput {
	return o
}

func (o UserAssignedIdentityMapOutput) ToUserAssignedIdentityMapOutputWithContext(ctx context.Context) UserAssignedIdentityMapOutput {
	return o
}

func (o UserAssignedIdentityMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserAssignedIdentity {
		return vs[0].(map[string]*UserAssignedIdentity)[vs[1].(string)]
	}).(UserAssignedIdentityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserAssignedIdentityInput)(nil)).Elem(), &UserAssignedIdentity{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAssignedIdentityArrayInput)(nil)).Elem(), UserAssignedIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAssignedIdentityMapInput)(nil)).Elem(), UserAssignedIdentityMap{})
	pulumi.RegisterOutputType(UserAssignedIdentityOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityArrayOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityMapOutput{})
}
