// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the transparent data encryption configuration for a MSSQL Server
//
// > **NOTE:** Once transparent data encryption is enabled on a MS SQL instance, it is not possible to remove TDE. You will be able to switch between 'ServiceManaged' and 'CustomerManaged' keys, but will not be able to remove encryption. For safety when this resource is deleted, the TDE mode will automatically be set to 'ServiceManaged'. See `keyVaultUri` for more information on how to specify the key types. As SQL Server only supports a single configuration for encryption settings, this resource will replace the current encryption settings on the server.
//
// > **Note:** See [documentation](https://docs.microsoft.com/en-us/azure/azure-sql/database/transparent-data-encryption-byok-overview) for important information on how handle lifecycle management of the keys to prevent data lockout.
//
// ## Example Usage
// ### With Service Managed Key
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/mssql"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("EastUs"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleServer, err := mssql.NewServer(ctx, "exampleServer", &mssql.ServerArgs{
// 			ResourceGroupName:          exampleResourceGroup.Name,
// 			Location:                   exampleResourceGroup.Location,
// 			Version:                    pulumi.String("12.0"),
// 			AdministratorLogin:         pulumi.String("missadministrator"),
// 			AdministratorLoginPassword: pulumi.String("thisIsKat11"),
// 			MinimumTlsVersion:          pulumi.String("1.2"),
// 			AzureadAdministrator: &mssql.ServerAzureadAdministratorArgs{
// 				LoginUsername: pulumi.String("AzureAD Admin"),
// 				ObjectId:      pulumi.String("00000000-0000-0000-0000-000000000000"),
// 			},
// 			ExtendedAuditingPolicy: &mssql.ServerExtendedAuditingPolicyArgs{
// 				StorageEndpoint:                    pulumi.Any(azurerm_storage_account.Example.Primary_blob_endpoint),
// 				StorageAccountAccessKey:            pulumi.Any(azurerm_storage_account.Example.Primary_access_key),
// 				StorageAccountAccessKeyIsSecondary: pulumi.Bool(true),
// 				RetentionInDays:                    pulumi.Int(6),
// 			},
// 			Tags: pulumi.StringMap{
// 				"environment": pulumi.String("production"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = mssql.NewServerTransparentDataEncryption(ctx, "exampleServerTransparentDataEncryption", &mssql.ServerTransparentDataEncryptionArgs{
// 			ServerId: exampleServer.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### With Customer Managed Key
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/keyvault"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/mssql"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		current, err := core.GetClientConfig(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("EastUs"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleServer, err := mssql.NewServer(ctx, "exampleServer", &mssql.ServerArgs{
// 			ResourceGroupName:          exampleResourceGroup.Name,
// 			Location:                   exampleResourceGroup.Location,
// 			Version:                    pulumi.String("12.0"),
// 			AdministratorLogin:         pulumi.String("missadministrator"),
// 			AdministratorLoginPassword: pulumi.String("thisIsKat11"),
// 			MinimumTlsVersion:          pulumi.String("1.2"),
// 			AzureadAdministrator: &mssql.ServerAzureadAdministratorArgs{
// 				LoginUsername: pulumi.String("AzureAD Admin"),
// 				ObjectId:      pulumi.String("00000000-0000-0000-0000-000000000000"),
// 			},
// 			ExtendedAuditingPolicy: &mssql.ServerExtendedAuditingPolicyArgs{
// 				StorageEndpoint:                    pulumi.Any(azurerm_storage_account.Example.Primary_blob_endpoint),
// 				StorageAccountAccessKey:            pulumi.Any(azurerm_storage_account.Example.Primary_access_key),
// 				StorageAccountAccessKeyIsSecondary: pulumi.Bool(true),
// 				RetentionInDays:                    pulumi.Int(6),
// 			},
// 			Tags: pulumi.StringMap{
// 				"environment": pulumi.String("production"),
// 			},
// 			Identity: &mssql.ServerIdentityArgs{
// 				Type: pulumi.String("SystemAssigned"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
// 			Location:                 exampleResourceGroup.Location,
// 			ResourceGroupName:        exampleResourceGroup.Name,
// 			EnabledForDiskEncryption: pulumi.Bool(true),
// 			TenantId:                 pulumi.String(current.TenantId),
// 			SoftDeleteRetentionDays:  pulumi.Int(7),
// 			PurgeProtectionEnabled:   pulumi.Bool(false),
// 			SkuName:                  pulumi.String("standard"),
// 			AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
// 				&keyvault.KeyVaultAccessPolicyArgs{
// 					TenantId: pulumi.String(current.TenantId),
// 					ObjectId: pulumi.String(current.ObjectId),
// 					KeyPermissions: pulumi.StringArray{
// 						pulumi.String("Get"),
// 						pulumi.String("List"),
// 						pulumi.String("Create"),
// 						pulumi.String("Delete"),
// 						pulumi.String("Update"),
// 						pulumi.String("Recover"),
// 						pulumi.String("Purge"),
// 					},
// 				},
// 				&keyvault.KeyVaultAccessPolicyArgs{
// 					TenantId: exampleServer.Identity.ApplyT(func(identity mssql.ServerIdentity) (string, error) {
// 						return identity.TenantId, nil
// 					}).(pulumi.StringOutput),
// 					ObjectId: exampleServer.Identity.ApplyT(func(identity mssql.ServerIdentity) (string, error) {
// 						return identity.PrincipalId, nil
// 					}).(pulumi.StringOutput),
// 					KeyPermissions: pulumi.StringArray{
// 						pulumi.String("Get"),
// 						pulumi.String("WrapKey"),
// 						pulumi.String("UnwrapKey"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleKey, err := keyvault.NewKey(ctx, "exampleKey", &keyvault.KeyArgs{
// 			KeyVaultId: exampleKeyVault.ID(),
// 			KeyType:    pulumi.String("RSA"),
// 			KeySize:    pulumi.Int(2048),
// 			KeyOpts: pulumi.StringArray{
// 				pulumi.String("unwrapKey"),
// 				pulumi.String("wrapKey"),
// 			},
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			exampleKeyVault,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = mssql.NewServerTransparentDataEncryption(ctx, "exampleServerTransparentDataEncryption", &mssql.ServerTransparentDataEncryptionArgs{
// 			ServerId:      exampleServer.ID(),
// 			KeyVaultKeyId: exampleKey.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// SQL Server Transparent Data Encryption can be imported using the resource id, e.g.
//
// ```sh
//  $ pulumi import azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/encryptionProtector/current
// ```
type ServerTransparentDataEncryption struct {
	pulumi.CustomResourceState

	// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
	KeyVaultKeyId pulumi.StringPtrOutput `pulumi:"keyVaultKeyId"`
	// Specifies the name of the MS SQL Server.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
}

// NewServerTransparentDataEncryption registers a new resource with the given unique name, arguments, and options.
func NewServerTransparentDataEncryption(ctx *pulumi.Context,
	name string, args *ServerTransparentDataEncryptionArgs, opts ...pulumi.ResourceOption) (*ServerTransparentDataEncryption, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	var resource ServerTransparentDataEncryption
	err := ctx.RegisterResource("azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerTransparentDataEncryption gets an existing ServerTransparentDataEncryption resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerTransparentDataEncryption(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerTransparentDataEncryptionState, opts ...pulumi.ResourceOption) (*ServerTransparentDataEncryption, error) {
	var resource ServerTransparentDataEncryption
	err := ctx.ReadResource("azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerTransparentDataEncryption resources.
type serverTransparentDataEncryptionState struct {
	// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
	KeyVaultKeyId *string `pulumi:"keyVaultKeyId"`
	// Specifies the name of the MS SQL Server.
	ServerId *string `pulumi:"serverId"`
}

type ServerTransparentDataEncryptionState struct {
	// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
	KeyVaultKeyId pulumi.StringPtrInput
	// Specifies the name of the MS SQL Server.
	ServerId pulumi.StringPtrInput
}

func (ServerTransparentDataEncryptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverTransparentDataEncryptionState)(nil)).Elem()
}

type serverTransparentDataEncryptionArgs struct {
	// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
	KeyVaultKeyId *string `pulumi:"keyVaultKeyId"`
	// Specifies the name of the MS SQL Server.
	ServerId string `pulumi:"serverId"`
}

// The set of arguments for constructing a ServerTransparentDataEncryption resource.
type ServerTransparentDataEncryptionArgs struct {
	// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
	KeyVaultKeyId pulumi.StringPtrInput
	// Specifies the name of the MS SQL Server.
	ServerId pulumi.StringInput
}

func (ServerTransparentDataEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverTransparentDataEncryptionArgs)(nil)).Elem()
}

type ServerTransparentDataEncryptionInput interface {
	pulumi.Input

	ToServerTransparentDataEncryptionOutput() ServerTransparentDataEncryptionOutput
	ToServerTransparentDataEncryptionOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionOutput
}

func (*ServerTransparentDataEncryption) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTransparentDataEncryption)(nil))
}

func (i *ServerTransparentDataEncryption) ToServerTransparentDataEncryptionOutput() ServerTransparentDataEncryptionOutput {
	return i.ToServerTransparentDataEncryptionOutputWithContext(context.Background())
}

func (i *ServerTransparentDataEncryption) ToServerTransparentDataEncryptionOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTransparentDataEncryptionOutput)
}

func (i *ServerTransparentDataEncryption) ToServerTransparentDataEncryptionPtrOutput() ServerTransparentDataEncryptionPtrOutput {
	return i.ToServerTransparentDataEncryptionPtrOutputWithContext(context.Background())
}

func (i *ServerTransparentDataEncryption) ToServerTransparentDataEncryptionPtrOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTransparentDataEncryptionPtrOutput)
}

type ServerTransparentDataEncryptionPtrInput interface {
	pulumi.Input

	ToServerTransparentDataEncryptionPtrOutput() ServerTransparentDataEncryptionPtrOutput
	ToServerTransparentDataEncryptionPtrOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionPtrOutput
}

type serverTransparentDataEncryptionPtrType ServerTransparentDataEncryptionArgs

func (*serverTransparentDataEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTransparentDataEncryption)(nil))
}

func (i *serverTransparentDataEncryptionPtrType) ToServerTransparentDataEncryptionPtrOutput() ServerTransparentDataEncryptionPtrOutput {
	return i.ToServerTransparentDataEncryptionPtrOutputWithContext(context.Background())
}

func (i *serverTransparentDataEncryptionPtrType) ToServerTransparentDataEncryptionPtrOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTransparentDataEncryptionPtrOutput)
}

// ServerTransparentDataEncryptionArrayInput is an input type that accepts ServerTransparentDataEncryptionArray and ServerTransparentDataEncryptionArrayOutput values.
// You can construct a concrete instance of `ServerTransparentDataEncryptionArrayInput` via:
//
//          ServerTransparentDataEncryptionArray{ ServerTransparentDataEncryptionArgs{...} }
type ServerTransparentDataEncryptionArrayInput interface {
	pulumi.Input

	ToServerTransparentDataEncryptionArrayOutput() ServerTransparentDataEncryptionArrayOutput
	ToServerTransparentDataEncryptionArrayOutputWithContext(context.Context) ServerTransparentDataEncryptionArrayOutput
}

type ServerTransparentDataEncryptionArray []ServerTransparentDataEncryptionInput

func (ServerTransparentDataEncryptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerTransparentDataEncryption)(nil)).Elem()
}

func (i ServerTransparentDataEncryptionArray) ToServerTransparentDataEncryptionArrayOutput() ServerTransparentDataEncryptionArrayOutput {
	return i.ToServerTransparentDataEncryptionArrayOutputWithContext(context.Background())
}

func (i ServerTransparentDataEncryptionArray) ToServerTransparentDataEncryptionArrayOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTransparentDataEncryptionArrayOutput)
}

// ServerTransparentDataEncryptionMapInput is an input type that accepts ServerTransparentDataEncryptionMap and ServerTransparentDataEncryptionMapOutput values.
// You can construct a concrete instance of `ServerTransparentDataEncryptionMapInput` via:
//
//          ServerTransparentDataEncryptionMap{ "key": ServerTransparentDataEncryptionArgs{...} }
type ServerTransparentDataEncryptionMapInput interface {
	pulumi.Input

	ToServerTransparentDataEncryptionMapOutput() ServerTransparentDataEncryptionMapOutput
	ToServerTransparentDataEncryptionMapOutputWithContext(context.Context) ServerTransparentDataEncryptionMapOutput
}

type ServerTransparentDataEncryptionMap map[string]ServerTransparentDataEncryptionInput

func (ServerTransparentDataEncryptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerTransparentDataEncryption)(nil)).Elem()
}

func (i ServerTransparentDataEncryptionMap) ToServerTransparentDataEncryptionMapOutput() ServerTransparentDataEncryptionMapOutput {
	return i.ToServerTransparentDataEncryptionMapOutputWithContext(context.Background())
}

func (i ServerTransparentDataEncryptionMap) ToServerTransparentDataEncryptionMapOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTransparentDataEncryptionMapOutput)
}

type ServerTransparentDataEncryptionOutput struct{ *pulumi.OutputState }

func (ServerTransparentDataEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTransparentDataEncryption)(nil))
}

func (o ServerTransparentDataEncryptionOutput) ToServerTransparentDataEncryptionOutput() ServerTransparentDataEncryptionOutput {
	return o
}

func (o ServerTransparentDataEncryptionOutput) ToServerTransparentDataEncryptionOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionOutput {
	return o
}

func (o ServerTransparentDataEncryptionOutput) ToServerTransparentDataEncryptionPtrOutput() ServerTransparentDataEncryptionPtrOutput {
	return o.ToServerTransparentDataEncryptionPtrOutputWithContext(context.Background())
}

func (o ServerTransparentDataEncryptionOutput) ToServerTransparentDataEncryptionPtrOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerTransparentDataEncryption) *ServerTransparentDataEncryption {
		return &v
	}).(ServerTransparentDataEncryptionPtrOutput)
}

type ServerTransparentDataEncryptionPtrOutput struct{ *pulumi.OutputState }

func (ServerTransparentDataEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTransparentDataEncryption)(nil))
}

func (o ServerTransparentDataEncryptionPtrOutput) ToServerTransparentDataEncryptionPtrOutput() ServerTransparentDataEncryptionPtrOutput {
	return o
}

func (o ServerTransparentDataEncryptionPtrOutput) ToServerTransparentDataEncryptionPtrOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionPtrOutput {
	return o
}

func (o ServerTransparentDataEncryptionPtrOutput) Elem() ServerTransparentDataEncryptionOutput {
	return o.ApplyT(func(v *ServerTransparentDataEncryption) ServerTransparentDataEncryption {
		if v != nil {
			return *v
		}
		var ret ServerTransparentDataEncryption
		return ret
	}).(ServerTransparentDataEncryptionOutput)
}

type ServerTransparentDataEncryptionArrayOutput struct{ *pulumi.OutputState }

func (ServerTransparentDataEncryptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerTransparentDataEncryption)(nil))
}

func (o ServerTransparentDataEncryptionArrayOutput) ToServerTransparentDataEncryptionArrayOutput() ServerTransparentDataEncryptionArrayOutput {
	return o
}

func (o ServerTransparentDataEncryptionArrayOutput) ToServerTransparentDataEncryptionArrayOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionArrayOutput {
	return o
}

func (o ServerTransparentDataEncryptionArrayOutput) Index(i pulumi.IntInput) ServerTransparentDataEncryptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerTransparentDataEncryption {
		return vs[0].([]ServerTransparentDataEncryption)[vs[1].(int)]
	}).(ServerTransparentDataEncryptionOutput)
}

type ServerTransparentDataEncryptionMapOutput struct{ *pulumi.OutputState }

func (ServerTransparentDataEncryptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ServerTransparentDataEncryption)(nil))
}

func (o ServerTransparentDataEncryptionMapOutput) ToServerTransparentDataEncryptionMapOutput() ServerTransparentDataEncryptionMapOutput {
	return o
}

func (o ServerTransparentDataEncryptionMapOutput) ToServerTransparentDataEncryptionMapOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionMapOutput {
	return o
}

func (o ServerTransparentDataEncryptionMapOutput) MapIndex(k pulumi.StringInput) ServerTransparentDataEncryptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ServerTransparentDataEncryption {
		return vs[0].(map[string]ServerTransparentDataEncryption)[vs[1].(string)]
	}).(ServerTransparentDataEncryptionOutput)
}

func init() {
	pulumi.RegisterOutputType(ServerTransparentDataEncryptionOutput{})
	pulumi.RegisterOutputType(ServerTransparentDataEncryptionPtrOutput{})
	pulumi.RegisterOutputType(ServerTransparentDataEncryptionArrayOutput{})
	pulumi.RegisterOutputType(ServerTransparentDataEncryptionMapOutput{})
}
