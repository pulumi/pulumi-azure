// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages the transparent data encryption configuration for a MSSQL Server
//
// !> **IMPORTANT:** This resource should only be used with pre-existing MS SQL Instances that are over 2 years old. For new MS SQL Instances that will be created through the use of the `mssql.Server` resource, please enable Transit Data Encryption through `mssql.Server` resource itself by configuring an identity block. By default all new MS SQL Instances are deployed with System Managed Transparent Data Encryption enabled.
//
// > **NOTE:** Once transparent data encryption is enabled on a MS SQL instance, it is not possible to remove TDE. You will be able to switch between 'ServiceManaged' and 'CustomerManaged' keys, but will not be able to remove encryption. For safety when this resource is deleted, the TDE mode will automatically be set to 'ServiceManaged'. See `keyVaultUri` for more information on how to specify the key types. As SQL Server only supports a single configuration for encryption settings, this resource will replace the current encryption settings on the server.
//
// > **Note:** See [documentation](https://docs.microsoft.com/azure/azure-sql/database/transparent-data-encryption-byok-overview) for important information on how handle lifecycle management of the keys to prevent data lockout.
//
// ## Example Usage
// ### With Service Managed Key
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mssql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("EastUs"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServer, err := mssql.NewServer(ctx, "exampleServer", &mssql.ServerArgs{
//				ResourceGroupName:          exampleResourceGroup.Name,
//				Location:                   exampleResourceGroup.Location,
//				Version:                    pulumi.String("12.0"),
//				AdministratorLogin:         pulumi.String("missadministrator"),
//				AdministratorLoginPassword: pulumi.String("thisIsKat11"),
//				MinimumTlsVersion:          pulumi.String("1.2"),
//				AzureadAdministrator: &mssql.ServerAzureadAdministratorArgs{
//					LoginUsername: pulumi.String("AzureAD Admin"),
//					ObjectId:      pulumi.String("00000000-0000-0000-0000-000000000000"),
//				},
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mssql.NewServerTransparentDataEncryption(ctx, "exampleServerTransparentDataEncryption", &mssql.ServerTransparentDataEncryptionArgs{
//				ServerId: exampleServer.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Customer Managed Key
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mssql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("EastUs"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServer, err := mssql.NewServer(ctx, "exampleServer", &mssql.ServerArgs{
//				ResourceGroupName:          exampleResourceGroup.Name,
//				Location:                   exampleResourceGroup.Location,
//				Version:                    pulumi.String("12.0"),
//				AdministratorLogin:         pulumi.String("missadministrator"),
//				AdministratorLoginPassword: pulumi.String("thisIsKat11"),
//				MinimumTlsVersion:          pulumi.String("1.2"),
//				AzureadAdministrator: &mssql.ServerAzureadAdministratorArgs{
//					LoginUsername: pulumi.String("AzureAD Admin"),
//					ObjectId:      pulumi.String("00000000-0000-0000-0000-000000000000"),
//				},
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("production"),
//				},
//				Identity: &mssql.ServerIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:                 exampleResourceGroup.Location,
//				ResourceGroupName:        exampleResourceGroup.Name,
//				EnabledForDiskEncryption: pulumi.Bool(true),
//				TenantId:                 *pulumi.String(current.TenantId),
//				SoftDeleteRetentionDays:  pulumi.Int(7),
//				PurgeProtectionEnabled:   pulumi.Bool(false),
//				SkuName:                  pulumi.String("standard"),
//				AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: *pulumi.String(current.TenantId),
//						ObjectId: *pulumi.String(current.ObjectId),
//						KeyPermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//							pulumi.String("List"),
//							pulumi.String("Create"),
//							pulumi.String("Delete"),
//							pulumi.String("Update"),
//							pulumi.String("Recover"),
//							pulumi.String("Purge"),
//							pulumi.String("GetRotationPolicy"),
//						},
//					},
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: exampleServer.Identity.ApplyT(func(identity mssql.ServerIdentity) (*string, error) {
//							return &identity.TenantId, nil
//						}).(pulumi.StringPtrOutput),
//						ObjectId: exampleServer.Identity.ApplyT(func(identity mssql.ServerIdentity) (*string, error) {
//							return &identity.PrincipalId, nil
//						}).(pulumi.StringPtrOutput),
//						KeyPermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//							pulumi.String("WrapKey"),
//							pulumi.String("UnwrapKey"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleKey, err := keyvault.NewKey(ctx, "exampleKey", &keyvault.KeyArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				KeyType:    pulumi.String("RSA"),
//				KeySize:    pulumi.Int(2048),
//				KeyOpts: pulumi.StringArray{
//					pulumi.String("unwrapKey"),
//					pulumi.String("wrapKey"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleKeyVault,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = mssql.NewServerTransparentDataEncryption(ctx, "exampleServerTransparentDataEncryption", &mssql.ServerTransparentDataEncryptionArgs{
//				ServerId:      exampleServer.ID(),
//				KeyVaultKeyId: exampleKey.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SQL Server Transparent Data Encryption can be imported using the resource id, e.g.
//
// ```sh
//
//	$ pulumi import azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/encryptionProtector/current
//
// ```
type ServerTransparentDataEncryption struct {
	pulumi.CustomResourceState

	// When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server will be automatically rotated to the latest key version within 60 minutes.
	AutoRotationEnabled pulumi.BoolPtrOutput `pulumi:"autoRotationEnabled"`
	// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
	//
	// > **NOTE:** In order to use customer managed keys, the identity of the MSSQL server must have the following permissions on the key vault: 'get', 'wrapKey' and 'unwrapKey'
	//
	// > **NOTE:** If `serverId` denotes a secondary server deployed for disaster recovery purposes, then the `keyVaultKeyId` should be the same key used for the primary server's transparent data encryption. Both primary and secondary servers should be encrypted with same key material.
	KeyVaultKeyId pulumi.StringPtrOutput `pulumi:"keyVaultKeyId"`
	// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
}

// NewServerTransparentDataEncryption registers a new resource with the given unique name, arguments, and options.
func NewServerTransparentDataEncryption(ctx *pulumi.Context,
	name string, args *ServerTransparentDataEncryptionArgs, opts ...pulumi.ResourceOption) (*ServerTransparentDataEncryption, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerTransparentDataEncryption
	err := ctx.RegisterResource("azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerTransparentDataEncryption gets an existing ServerTransparentDataEncryption resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerTransparentDataEncryption(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerTransparentDataEncryptionState, opts ...pulumi.ResourceOption) (*ServerTransparentDataEncryption, error) {
	var resource ServerTransparentDataEncryption
	err := ctx.ReadResource("azure:mssql/serverTransparentDataEncryption:ServerTransparentDataEncryption", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerTransparentDataEncryption resources.
type serverTransparentDataEncryptionState struct {
	// When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server will be automatically rotated to the latest key version within 60 minutes.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
	//
	// > **NOTE:** In order to use customer managed keys, the identity of the MSSQL server must have the following permissions on the key vault: 'get', 'wrapKey' and 'unwrapKey'
	//
	// > **NOTE:** If `serverId` denotes a secondary server deployed for disaster recovery purposes, then the `keyVaultKeyId` should be the same key used for the primary server's transparent data encryption. Both primary and secondary servers should be encrypted with same key material.
	KeyVaultKeyId *string `pulumi:"keyVaultKeyId"`
	// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
	ServerId *string `pulumi:"serverId"`
}

type ServerTransparentDataEncryptionState struct {
	// When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server will be automatically rotated to the latest key version within 60 minutes.
	AutoRotationEnabled pulumi.BoolPtrInput
	// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
	//
	// > **NOTE:** In order to use customer managed keys, the identity of the MSSQL server must have the following permissions on the key vault: 'get', 'wrapKey' and 'unwrapKey'
	//
	// > **NOTE:** If `serverId` denotes a secondary server deployed for disaster recovery purposes, then the `keyVaultKeyId` should be the same key used for the primary server's transparent data encryption. Both primary and secondary servers should be encrypted with same key material.
	KeyVaultKeyId pulumi.StringPtrInput
	// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
	ServerId pulumi.StringPtrInput
}

func (ServerTransparentDataEncryptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverTransparentDataEncryptionState)(nil)).Elem()
}

type serverTransparentDataEncryptionArgs struct {
	// When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server will be automatically rotated to the latest key version within 60 minutes.
	AutoRotationEnabled *bool `pulumi:"autoRotationEnabled"`
	// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
	//
	// > **NOTE:** In order to use customer managed keys, the identity of the MSSQL server must have the following permissions on the key vault: 'get', 'wrapKey' and 'unwrapKey'
	//
	// > **NOTE:** If `serverId` denotes a secondary server deployed for disaster recovery purposes, then the `keyVaultKeyId` should be the same key used for the primary server's transparent data encryption. Both primary and secondary servers should be encrypted with same key material.
	KeyVaultKeyId *string `pulumi:"keyVaultKeyId"`
	// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
	ServerId string `pulumi:"serverId"`
}

// The set of arguments for constructing a ServerTransparentDataEncryption resource.
type ServerTransparentDataEncryptionArgs struct {
	// When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server will be automatically rotated to the latest key version within 60 minutes.
	AutoRotationEnabled pulumi.BoolPtrInput
	// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
	//
	// > **NOTE:** In order to use customer managed keys, the identity of the MSSQL server must have the following permissions on the key vault: 'get', 'wrapKey' and 'unwrapKey'
	//
	// > **NOTE:** If `serverId` denotes a secondary server deployed for disaster recovery purposes, then the `keyVaultKeyId` should be the same key used for the primary server's transparent data encryption. Both primary and secondary servers should be encrypted with same key material.
	KeyVaultKeyId pulumi.StringPtrInput
	// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
	ServerId pulumi.StringInput
}

func (ServerTransparentDataEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverTransparentDataEncryptionArgs)(nil)).Elem()
}

type ServerTransparentDataEncryptionInput interface {
	pulumi.Input

	ToServerTransparentDataEncryptionOutput() ServerTransparentDataEncryptionOutput
	ToServerTransparentDataEncryptionOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionOutput
}

func (*ServerTransparentDataEncryption) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTransparentDataEncryption)(nil)).Elem()
}

func (i *ServerTransparentDataEncryption) ToServerTransparentDataEncryptionOutput() ServerTransparentDataEncryptionOutput {
	return i.ToServerTransparentDataEncryptionOutputWithContext(context.Background())
}

func (i *ServerTransparentDataEncryption) ToServerTransparentDataEncryptionOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTransparentDataEncryptionOutput)
}

func (i *ServerTransparentDataEncryption) ToOutput(ctx context.Context) pulumix.Output[*ServerTransparentDataEncryption] {
	return pulumix.Output[*ServerTransparentDataEncryption]{
		OutputState: i.ToServerTransparentDataEncryptionOutputWithContext(ctx).OutputState,
	}
}

// ServerTransparentDataEncryptionArrayInput is an input type that accepts ServerTransparentDataEncryptionArray and ServerTransparentDataEncryptionArrayOutput values.
// You can construct a concrete instance of `ServerTransparentDataEncryptionArrayInput` via:
//
//	ServerTransparentDataEncryptionArray{ ServerTransparentDataEncryptionArgs{...} }
type ServerTransparentDataEncryptionArrayInput interface {
	pulumi.Input

	ToServerTransparentDataEncryptionArrayOutput() ServerTransparentDataEncryptionArrayOutput
	ToServerTransparentDataEncryptionArrayOutputWithContext(context.Context) ServerTransparentDataEncryptionArrayOutput
}

type ServerTransparentDataEncryptionArray []ServerTransparentDataEncryptionInput

func (ServerTransparentDataEncryptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerTransparentDataEncryption)(nil)).Elem()
}

func (i ServerTransparentDataEncryptionArray) ToServerTransparentDataEncryptionArrayOutput() ServerTransparentDataEncryptionArrayOutput {
	return i.ToServerTransparentDataEncryptionArrayOutputWithContext(context.Background())
}

func (i ServerTransparentDataEncryptionArray) ToServerTransparentDataEncryptionArrayOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTransparentDataEncryptionArrayOutput)
}

func (i ServerTransparentDataEncryptionArray) ToOutput(ctx context.Context) pulumix.Output[[]*ServerTransparentDataEncryption] {
	return pulumix.Output[[]*ServerTransparentDataEncryption]{
		OutputState: i.ToServerTransparentDataEncryptionArrayOutputWithContext(ctx).OutputState,
	}
}

// ServerTransparentDataEncryptionMapInput is an input type that accepts ServerTransparentDataEncryptionMap and ServerTransparentDataEncryptionMapOutput values.
// You can construct a concrete instance of `ServerTransparentDataEncryptionMapInput` via:
//
//	ServerTransparentDataEncryptionMap{ "key": ServerTransparentDataEncryptionArgs{...} }
type ServerTransparentDataEncryptionMapInput interface {
	pulumi.Input

	ToServerTransparentDataEncryptionMapOutput() ServerTransparentDataEncryptionMapOutput
	ToServerTransparentDataEncryptionMapOutputWithContext(context.Context) ServerTransparentDataEncryptionMapOutput
}

type ServerTransparentDataEncryptionMap map[string]ServerTransparentDataEncryptionInput

func (ServerTransparentDataEncryptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerTransparentDataEncryption)(nil)).Elem()
}

func (i ServerTransparentDataEncryptionMap) ToServerTransparentDataEncryptionMapOutput() ServerTransparentDataEncryptionMapOutput {
	return i.ToServerTransparentDataEncryptionMapOutputWithContext(context.Background())
}

func (i ServerTransparentDataEncryptionMap) ToServerTransparentDataEncryptionMapOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTransparentDataEncryptionMapOutput)
}

func (i ServerTransparentDataEncryptionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServerTransparentDataEncryption] {
	return pulumix.Output[map[string]*ServerTransparentDataEncryption]{
		OutputState: i.ToServerTransparentDataEncryptionMapOutputWithContext(ctx).OutputState,
	}
}

type ServerTransparentDataEncryptionOutput struct{ *pulumi.OutputState }

func (ServerTransparentDataEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTransparentDataEncryption)(nil)).Elem()
}

func (o ServerTransparentDataEncryptionOutput) ToServerTransparentDataEncryptionOutput() ServerTransparentDataEncryptionOutput {
	return o
}

func (o ServerTransparentDataEncryptionOutput) ToServerTransparentDataEncryptionOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionOutput {
	return o
}

func (o ServerTransparentDataEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[*ServerTransparentDataEncryption] {
	return pulumix.Output[*ServerTransparentDataEncryption]{
		OutputState: o.OutputState,
	}
}

// When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server will be automatically rotated to the latest key version within 60 minutes.
func (o ServerTransparentDataEncryptionOutput) AutoRotationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerTransparentDataEncryption) pulumi.BoolPtrOutput { return v.AutoRotationEnabled }).(pulumi.BoolPtrOutput)
}

// To use customer managed keys from Azure Key Vault, provide the AKV Key ID. To use service managed keys, omit this field.
//
// > **NOTE:** In order to use customer managed keys, the identity of the MSSQL server must have the following permissions on the key vault: 'get', 'wrapKey' and 'unwrapKey'
//
// > **NOTE:** If `serverId` denotes a secondary server deployed for disaster recovery purposes, then the `keyVaultKeyId` should be the same key used for the primary server's transparent data encryption. Both primary and secondary servers should be encrypted with same key material.
func (o ServerTransparentDataEncryptionOutput) KeyVaultKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerTransparentDataEncryption) pulumi.StringPtrOutput { return v.KeyVaultKeyId }).(pulumi.StringPtrOutput)
}

// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
func (o ServerTransparentDataEncryptionOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerTransparentDataEncryption) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

type ServerTransparentDataEncryptionArrayOutput struct{ *pulumi.OutputState }

func (ServerTransparentDataEncryptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerTransparentDataEncryption)(nil)).Elem()
}

func (o ServerTransparentDataEncryptionArrayOutput) ToServerTransparentDataEncryptionArrayOutput() ServerTransparentDataEncryptionArrayOutput {
	return o
}

func (o ServerTransparentDataEncryptionArrayOutput) ToServerTransparentDataEncryptionArrayOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionArrayOutput {
	return o
}

func (o ServerTransparentDataEncryptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ServerTransparentDataEncryption] {
	return pulumix.Output[[]*ServerTransparentDataEncryption]{
		OutputState: o.OutputState,
	}
}

func (o ServerTransparentDataEncryptionArrayOutput) Index(i pulumi.IntInput) ServerTransparentDataEncryptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerTransparentDataEncryption {
		return vs[0].([]*ServerTransparentDataEncryption)[vs[1].(int)]
	}).(ServerTransparentDataEncryptionOutput)
}

type ServerTransparentDataEncryptionMapOutput struct{ *pulumi.OutputState }

func (ServerTransparentDataEncryptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerTransparentDataEncryption)(nil)).Elem()
}

func (o ServerTransparentDataEncryptionMapOutput) ToServerTransparentDataEncryptionMapOutput() ServerTransparentDataEncryptionMapOutput {
	return o
}

func (o ServerTransparentDataEncryptionMapOutput) ToServerTransparentDataEncryptionMapOutputWithContext(ctx context.Context) ServerTransparentDataEncryptionMapOutput {
	return o
}

func (o ServerTransparentDataEncryptionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServerTransparentDataEncryption] {
	return pulumix.Output[map[string]*ServerTransparentDataEncryption]{
		OutputState: o.OutputState,
	}
}

func (o ServerTransparentDataEncryptionMapOutput) MapIndex(k pulumi.StringInput) ServerTransparentDataEncryptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerTransparentDataEncryption {
		return vs[0].(map[string]*ServerTransparentDataEncryption)[vs[1].(string)]
	}).(ServerTransparentDataEncryptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTransparentDataEncryptionInput)(nil)).Elem(), &ServerTransparentDataEncryption{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTransparentDataEncryptionArrayInput)(nil)).Elem(), ServerTransparentDataEncryptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTransparentDataEncryptionMapInput)(nil)).Elem(), ServerTransparentDataEncryptionMap{})
	pulumi.RegisterOutputType(ServerTransparentDataEncryptionOutput{})
	pulumi.RegisterOutputType(ServerTransparentDataEncryptionArrayOutput{})
	pulumi.RegisterOutputType(ServerTransparentDataEncryptionMapOutput{})
}
