// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Security Alert Policy for an MS SQL Managed Instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	mssql/managedInstance "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/mssql/managedInstance"
//	mssql/managedInstanceSecurityAlertPolicy "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/mssql/managedInstanceSecurityAlertPolicy"
//	network/networkSecurityGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/networkSecurityGroup"
//	network/networkSecurityRule "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/networkSecurityRule"
//	network/routeTable "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/routeTable"
//	network/subnet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnet"
//	network/subnetNetworkSecurityGroupAssociation "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnetNetworkSecurityGroupAssociation"
//	network/subnetRouteTableAssociation "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnetRouteTableAssociation"
//	network/virtualNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetwork"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// example, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "database-rg",
// Location: "West Europe",
// })
// if err != nil {
// return err
// }
// exampleNetworkSecurityGroup, err := network/networkSecurityGroup.NewNetworkSecurityGroup(ctx, "example", &network/networkSecurityGroup.NetworkSecurityGroupArgs{
// Name: "mi-security-group",
// Location: example.Location,
// ResourceGroupName: example.Name,
// })
// if err != nil {
// return err
// }
// _, err = network/networkSecurityRule.NewNetworkSecurityRule(ctx, "allow_management_inbound", &network/networkSecurityRule.NetworkSecurityRuleArgs{
// Name: "allow_management_inbound",
// Priority: 106,
// Direction: "Inbound",
// Access: "Allow",
// Protocol: "Tcp",
// SourcePortRange: "*",
// DestinationPortRanges: []string{
// "9000",
// "9003",
// "1438",
// "1440",
// "1452",
// },
// SourceAddressPrefix: "*",
// DestinationAddressPrefix: "*",
// ResourceGroupName: example.Name,
// NetworkSecurityGroupName: exampleNetworkSecurityGroup.Name,
// })
// if err != nil {
// return err
// }
// _, err = network/networkSecurityRule.NewNetworkSecurityRule(ctx, "allow_misubnet_inbound", &network/networkSecurityRule.NetworkSecurityRuleArgs{
// Name: "allow_misubnet_inbound",
// Priority: 200,
// Direction: "Inbound",
// Access: "Allow",
// Protocol: "*",
// SourcePortRange: "*",
// DestinationPortRange: "*",
// SourceAddressPrefix: "10.0.0.0/24",
// DestinationAddressPrefix: "*",
// ResourceGroupName: example.Name,
// NetworkSecurityGroupName: exampleNetworkSecurityGroup.Name,
// })
// if err != nil {
// return err
// }
// _, err = network/networkSecurityRule.NewNetworkSecurityRule(ctx, "allow_health_probe_inbound", &network/networkSecurityRule.NetworkSecurityRuleArgs{
// Name: "allow_health_probe_inbound",
// Priority: 300,
// Direction: "Inbound",
// Access: "Allow",
// Protocol: "*",
// SourcePortRange: "*",
// DestinationPortRange: "*",
// SourceAddressPrefix: "AzureLoadBalancer",
// DestinationAddressPrefix: "*",
// ResourceGroupName: example.Name,
// NetworkSecurityGroupName: exampleNetworkSecurityGroup.Name,
// })
// if err != nil {
// return err
// }
// _, err = network/networkSecurityRule.NewNetworkSecurityRule(ctx, "allow_tds_inbound", &network/networkSecurityRule.NetworkSecurityRuleArgs{
// Name: "allow_tds_inbound",
// Priority: 1000,
// Direction: "Inbound",
// Access: "Allow",
// Protocol: "Tcp",
// SourcePortRange: "*",
// DestinationPortRange: "1433",
// SourceAddressPrefix: "VirtualNetwork",
// DestinationAddressPrefix: "*",
// ResourceGroupName: example.Name,
// NetworkSecurityGroupName: exampleNetworkSecurityGroup.Name,
// })
// if err != nil {
// return err
// }
// _, err = network/networkSecurityRule.NewNetworkSecurityRule(ctx, "deny_all_inbound", &network/networkSecurityRule.NetworkSecurityRuleArgs{
// Name: "deny_all_inbound",
// Priority: 4096,
// Direction: "Inbound",
// Access: "Deny",
// Protocol: "*",
// SourcePortRange: "*",
// DestinationPortRange: "*",
// SourceAddressPrefix: "*",
// DestinationAddressPrefix: "*",
// ResourceGroupName: example.Name,
// NetworkSecurityGroupName: exampleNetworkSecurityGroup.Name,
// })
// if err != nil {
// return err
// }
// _, err = network/networkSecurityRule.NewNetworkSecurityRule(ctx, "allow_management_outbound", &network/networkSecurityRule.NetworkSecurityRuleArgs{
// Name: "allow_management_outbound",
// Priority: 102,
// Direction: "Outbound",
// Access: "Allow",
// Protocol: "Tcp",
// SourcePortRange: "*",
// DestinationPortRanges: []string{
// "80",
// "443",
// "12000",
// },
// SourceAddressPrefix: "*",
// DestinationAddressPrefix: "*",
// ResourceGroupName: example.Name,
// NetworkSecurityGroupName: exampleNetworkSecurityGroup.Name,
// })
// if err != nil {
// return err
// }
// _, err = network/networkSecurityRule.NewNetworkSecurityRule(ctx, "allow_misubnet_outbound", &network/networkSecurityRule.NetworkSecurityRuleArgs{
// Name: "allow_misubnet_outbound",
// Priority: 200,
// Direction: "Outbound",
// Access: "Allow",
// Protocol: "*",
// SourcePortRange: "*",
// DestinationPortRange: "*",
// SourceAddressPrefix: "10.0.0.0/24",
// DestinationAddressPrefix: "*",
// ResourceGroupName: example.Name,
// NetworkSecurityGroupName: exampleNetworkSecurityGroup.Name,
// })
// if err != nil {
// return err
// }
// _, err = network/networkSecurityRule.NewNetworkSecurityRule(ctx, "deny_all_outbound", &network/networkSecurityRule.NetworkSecurityRuleArgs{
// Name: "deny_all_outbound",
// Priority: 4096,
// Direction: "Outbound",
// Access: "Deny",
// Protocol: "*",
// SourcePortRange: "*",
// DestinationPortRange: "*",
// SourceAddressPrefix: "*",
// DestinationAddressPrefix: "*",
// ResourceGroupName: example.Name,
// NetworkSecurityGroupName: exampleNetworkSecurityGroup.Name,
// })
// if err != nil {
// return err
// }
// exampleVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "example", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "vnet-mi",
// ResourceGroupName: example.Name,
// AddressSpaces: []string{
// "10.0.0.0/16",
// },
// Location: example.Location,
// })
// if err != nil {
// return err
// }
// exampleSubnet, err := network/subnet.NewSubnet(ctx, "example", &network/subnet.SubnetArgs{
// Name: "subnet-mi",
// ResourceGroupName: example.Name,
// VirtualNetworkName: exampleVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.0.0.0/24",
// },
// Delegations: []map[string]interface{}{
// map[string]interface{}{
// "name": "managedinstancedelegation",
// "serviceDelegation": map[string]interface{}{
// "name": "Microsoft.Sql/managedInstances",
// "actions": []string{
// "Microsoft.Network/virtualNetworks/subnets/join/action",
// "Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action",
// "Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action",
// },
// },
// },
// },
// })
// if err != nil {
// return err
// }
// _, err = network/subnetNetworkSecurityGroupAssociation.NewSubnetNetworkSecurityGroupAssociation(ctx, "example", &network/subnetNetworkSecurityGroupAssociation.SubnetNetworkSecurityGroupAssociationArgs{
// SubnetId: exampleSubnet.Id,
// NetworkSecurityGroupId: exampleNetworkSecurityGroup.Id,
// })
// if err != nil {
// return err
// }
// exampleRouteTable, err := network/routeTable.NewRouteTable(ctx, "example", &network/routeTable.RouteTableArgs{
// Name: "routetable-mi",
// Location: example.Location,
// ResourceGroupName: example.Name,
// DisableBgpRoutePropagation: false,
// })
// if err != nil {
// return err
// }
// _, err = network/subnetRouteTableAssociation.NewSubnetRouteTableAssociation(ctx, "example", &network/subnetRouteTableAssociation.SubnetRouteTableAssociationArgs{
// SubnetId: exampleSubnet.Id,
// RouteTableId: exampleRouteTable.Id,
// })
// if err != nil {
// return err
// }
// exampleManagedInstance, err := mssql/managedInstance.NewManagedInstance(ctx, "example", &mssql/managedInstance.ManagedInstanceArgs{
// Name: "managedsqlinstance",
// ResourceGroupName: example.Name,
// Location: example.Location,
// LicenseType: "BasePrice",
// SkuName: "GP_Gen5",
// StorageSizeInGb: 32,
// SubnetId: exampleSubnet.Id,
// Vcores: 4,
// AdministratorLogin: "mradministrator",
// AdministratorLoginPassword: "thisIsDog11",
// })
// if err != nil {
// return err
// }
// _, err = mssql/managedInstanceSecurityAlertPolicy.NewManagedInstanceSecurityAlertPolicy(ctx, "example", &mssql/managedInstanceSecurityAlertPolicy.ManagedInstanceSecurityAlertPolicyArgs{
// ResourceGroupName: example.Name,
// ManagedInstanceName: exampleManagedInstance.Name,
// Enabled: true,
// StorageEndpoint: exampleAzurermStorageAccount.PrimaryBlobEndpoint,
// StorageAccountAccessKey: exampleAzurermStorageAccount.PrimaryAccessKey,
// DisabledAlerts: []string{
// "Sql_Injection",
// "Data_Exfiltration",
// },
// RetentionDays: 20,
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// MS SQL Managed Instance Security Alert Policy can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:mssql/managedInstanceSecurityAlertPolicy:ManagedInstanceSecurityAlertPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/managedInstances/instance1/securityAlertPolicies/Default
// ```
type ManagedInstanceSecurityAlertPolicy struct {
	pulumi.CustomResourceState

	// Specifies an array of alerts that are disabled. Possible values are `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action` and `Brute_Force`.
	DisabledAlerts pulumi.StringArrayOutput `pulumi:"disabledAlerts"`
	// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
	EmailAccountAdminsEnabled pulumi.BoolPtrOutput `pulumi:"emailAccountAdminsEnabled"`
	// Specifies an array of email addresses to which the alert is sent.
	EmailAddresses pulumi.StringArrayOutput `pulumi:"emailAddresses"`
	// Specifies the state of the Security Alert Policy, whether it is enabled or disabled. Possible values are `true`, `false`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Specifies the name of the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ManagedInstanceName pulumi.StringOutput `pulumi:"managedInstanceName"`
	// The name of the resource group that contains the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
	RetentionDays pulumi.IntPtrOutput `pulumi:"retentionDays"`
	// Specifies the identifier key of the Threat Detection audit storage account. This is mandatory when you use `storageEndpoint` to specify a storage account blob endpoint.
	//
	// > **NOTE:**  Please note that storage accounts configured with `sharedAccessKeyEnabled = false` cannot be used to configure `mssql.ManagedInstanceSecurityAlertPolicy` with `storageEndpoint` for now.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// Specifies the blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint pulumi.StringPtrOutput `pulumi:"storageEndpoint"`
}

// NewManagedInstanceSecurityAlertPolicy registers a new resource with the given unique name, arguments, and options.
func NewManagedInstanceSecurityAlertPolicy(ctx *pulumi.Context,
	name string, args *ManagedInstanceSecurityAlertPolicyArgs, opts ...pulumi.ResourceOption) (*ManagedInstanceSecurityAlertPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagedInstanceName == nil {
		return nil, errors.New("invalid value for required argument 'ManagedInstanceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StorageAccountAccessKey != nil {
		args.StorageAccountAccessKey = pulumi.ToSecret(args.StorageAccountAccessKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"storageAccountAccessKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedInstanceSecurityAlertPolicy
	err := ctx.RegisterResource("azure:mssql/managedInstanceSecurityAlertPolicy:ManagedInstanceSecurityAlertPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedInstanceSecurityAlertPolicy gets an existing ManagedInstanceSecurityAlertPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedInstanceSecurityAlertPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedInstanceSecurityAlertPolicyState, opts ...pulumi.ResourceOption) (*ManagedInstanceSecurityAlertPolicy, error) {
	var resource ManagedInstanceSecurityAlertPolicy
	err := ctx.ReadResource("azure:mssql/managedInstanceSecurityAlertPolicy:ManagedInstanceSecurityAlertPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedInstanceSecurityAlertPolicy resources.
type managedInstanceSecurityAlertPolicyState struct {
	// Specifies an array of alerts that are disabled. Possible values are `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action` and `Brute_Force`.
	DisabledAlerts []string `pulumi:"disabledAlerts"`
	// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
	EmailAccountAdminsEnabled *bool `pulumi:"emailAccountAdminsEnabled"`
	// Specifies an array of email addresses to which the alert is sent.
	EmailAddresses []string `pulumi:"emailAddresses"`
	// Specifies the state of the Security Alert Policy, whether it is enabled or disabled. Possible values are `true`, `false`.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the name of the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ManagedInstanceName *string `pulumi:"managedInstanceName"`
	// The name of the resource group that contains the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
	RetentionDays *int `pulumi:"retentionDays"`
	// Specifies the identifier key of the Threat Detection audit storage account. This is mandatory when you use `storageEndpoint` to specify a storage account blob endpoint.
	//
	// > **NOTE:**  Please note that storage accounts configured with `sharedAccessKeyEnabled = false` cannot be used to configure `mssql.ManagedInstanceSecurityAlertPolicy` with `storageEndpoint` for now.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Specifies the blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

type ManagedInstanceSecurityAlertPolicyState struct {
	// Specifies an array of alerts that are disabled. Possible values are `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action` and `Brute_Force`.
	DisabledAlerts pulumi.StringArrayInput
	// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
	EmailAccountAdminsEnabled pulumi.BoolPtrInput
	// Specifies an array of email addresses to which the alert is sent.
	EmailAddresses pulumi.StringArrayInput
	// Specifies the state of the Security Alert Policy, whether it is enabled or disabled. Possible values are `true`, `false`.
	Enabled pulumi.BoolPtrInput
	// Specifies the name of the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ManagedInstanceName pulumi.StringPtrInput
	// The name of the resource group that contains the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
	RetentionDays pulumi.IntPtrInput
	// Specifies the identifier key of the Threat Detection audit storage account. This is mandatory when you use `storageEndpoint` to specify a storage account blob endpoint.
	//
	// > **NOTE:**  Please note that storage accounts configured with `sharedAccessKeyEnabled = false` cannot be used to configure `mssql.ManagedInstanceSecurityAlertPolicy` with `storageEndpoint` for now.
	StorageAccountAccessKey pulumi.StringPtrInput
	// Specifies the blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint pulumi.StringPtrInput
}

func (ManagedInstanceSecurityAlertPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceSecurityAlertPolicyState)(nil)).Elem()
}

type managedInstanceSecurityAlertPolicyArgs struct {
	// Specifies an array of alerts that are disabled. Possible values are `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action` and `Brute_Force`.
	DisabledAlerts []string `pulumi:"disabledAlerts"`
	// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
	EmailAccountAdminsEnabled *bool `pulumi:"emailAccountAdminsEnabled"`
	// Specifies an array of email addresses to which the alert is sent.
	EmailAddresses []string `pulumi:"emailAddresses"`
	// Specifies the state of the Security Alert Policy, whether it is enabled or disabled. Possible values are `true`, `false`.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the name of the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ManagedInstanceName string `pulumi:"managedInstanceName"`
	// The name of the resource group that contains the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
	RetentionDays *int `pulumi:"retentionDays"`
	// Specifies the identifier key of the Threat Detection audit storage account. This is mandatory when you use `storageEndpoint` to specify a storage account blob endpoint.
	//
	// > **NOTE:**  Please note that storage accounts configured with `sharedAccessKeyEnabled = false` cannot be used to configure `mssql.ManagedInstanceSecurityAlertPolicy` with `storageEndpoint` for now.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Specifies the blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

// The set of arguments for constructing a ManagedInstanceSecurityAlertPolicy resource.
type ManagedInstanceSecurityAlertPolicyArgs struct {
	// Specifies an array of alerts that are disabled. Possible values are `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action` and `Brute_Force`.
	DisabledAlerts pulumi.StringArrayInput
	// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
	EmailAccountAdminsEnabled pulumi.BoolPtrInput
	// Specifies an array of email addresses to which the alert is sent.
	EmailAddresses pulumi.StringArrayInput
	// Specifies the state of the Security Alert Policy, whether it is enabled or disabled. Possible values are `true`, `false`.
	Enabled pulumi.BoolPtrInput
	// Specifies the name of the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ManagedInstanceName pulumi.StringInput
	// The name of the resource group that contains the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
	RetentionDays pulumi.IntPtrInput
	// Specifies the identifier key of the Threat Detection audit storage account. This is mandatory when you use `storageEndpoint` to specify a storage account blob endpoint.
	//
	// > **NOTE:**  Please note that storage accounts configured with `sharedAccessKeyEnabled = false` cannot be used to configure `mssql.ManagedInstanceSecurityAlertPolicy` with `storageEndpoint` for now.
	StorageAccountAccessKey pulumi.StringPtrInput
	// Specifies the blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint pulumi.StringPtrInput
}

func (ManagedInstanceSecurityAlertPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceSecurityAlertPolicyArgs)(nil)).Elem()
}

type ManagedInstanceSecurityAlertPolicyInput interface {
	pulumi.Input

	ToManagedInstanceSecurityAlertPolicyOutput() ManagedInstanceSecurityAlertPolicyOutput
	ToManagedInstanceSecurityAlertPolicyOutputWithContext(ctx context.Context) ManagedInstanceSecurityAlertPolicyOutput
}

func (*ManagedInstanceSecurityAlertPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceSecurityAlertPolicy)(nil)).Elem()
}

func (i *ManagedInstanceSecurityAlertPolicy) ToManagedInstanceSecurityAlertPolicyOutput() ManagedInstanceSecurityAlertPolicyOutput {
	return i.ToManagedInstanceSecurityAlertPolicyOutputWithContext(context.Background())
}

func (i *ManagedInstanceSecurityAlertPolicy) ToManagedInstanceSecurityAlertPolicyOutputWithContext(ctx context.Context) ManagedInstanceSecurityAlertPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceSecurityAlertPolicyOutput)
}

// ManagedInstanceSecurityAlertPolicyArrayInput is an input type that accepts ManagedInstanceSecurityAlertPolicyArray and ManagedInstanceSecurityAlertPolicyArrayOutput values.
// You can construct a concrete instance of `ManagedInstanceSecurityAlertPolicyArrayInput` via:
//
//	ManagedInstanceSecurityAlertPolicyArray{ ManagedInstanceSecurityAlertPolicyArgs{...} }
type ManagedInstanceSecurityAlertPolicyArrayInput interface {
	pulumi.Input

	ToManagedInstanceSecurityAlertPolicyArrayOutput() ManagedInstanceSecurityAlertPolicyArrayOutput
	ToManagedInstanceSecurityAlertPolicyArrayOutputWithContext(context.Context) ManagedInstanceSecurityAlertPolicyArrayOutput
}

type ManagedInstanceSecurityAlertPolicyArray []ManagedInstanceSecurityAlertPolicyInput

func (ManagedInstanceSecurityAlertPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceSecurityAlertPolicy)(nil)).Elem()
}

func (i ManagedInstanceSecurityAlertPolicyArray) ToManagedInstanceSecurityAlertPolicyArrayOutput() ManagedInstanceSecurityAlertPolicyArrayOutput {
	return i.ToManagedInstanceSecurityAlertPolicyArrayOutputWithContext(context.Background())
}

func (i ManagedInstanceSecurityAlertPolicyArray) ToManagedInstanceSecurityAlertPolicyArrayOutputWithContext(ctx context.Context) ManagedInstanceSecurityAlertPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceSecurityAlertPolicyArrayOutput)
}

// ManagedInstanceSecurityAlertPolicyMapInput is an input type that accepts ManagedInstanceSecurityAlertPolicyMap and ManagedInstanceSecurityAlertPolicyMapOutput values.
// You can construct a concrete instance of `ManagedInstanceSecurityAlertPolicyMapInput` via:
//
//	ManagedInstanceSecurityAlertPolicyMap{ "key": ManagedInstanceSecurityAlertPolicyArgs{...} }
type ManagedInstanceSecurityAlertPolicyMapInput interface {
	pulumi.Input

	ToManagedInstanceSecurityAlertPolicyMapOutput() ManagedInstanceSecurityAlertPolicyMapOutput
	ToManagedInstanceSecurityAlertPolicyMapOutputWithContext(context.Context) ManagedInstanceSecurityAlertPolicyMapOutput
}

type ManagedInstanceSecurityAlertPolicyMap map[string]ManagedInstanceSecurityAlertPolicyInput

func (ManagedInstanceSecurityAlertPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceSecurityAlertPolicy)(nil)).Elem()
}

func (i ManagedInstanceSecurityAlertPolicyMap) ToManagedInstanceSecurityAlertPolicyMapOutput() ManagedInstanceSecurityAlertPolicyMapOutput {
	return i.ToManagedInstanceSecurityAlertPolicyMapOutputWithContext(context.Background())
}

func (i ManagedInstanceSecurityAlertPolicyMap) ToManagedInstanceSecurityAlertPolicyMapOutputWithContext(ctx context.Context) ManagedInstanceSecurityAlertPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceSecurityAlertPolicyMapOutput)
}

type ManagedInstanceSecurityAlertPolicyOutput struct{ *pulumi.OutputState }

func (ManagedInstanceSecurityAlertPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceSecurityAlertPolicy)(nil)).Elem()
}

func (o ManagedInstanceSecurityAlertPolicyOutput) ToManagedInstanceSecurityAlertPolicyOutput() ManagedInstanceSecurityAlertPolicyOutput {
	return o
}

func (o ManagedInstanceSecurityAlertPolicyOutput) ToManagedInstanceSecurityAlertPolicyOutputWithContext(ctx context.Context) ManagedInstanceSecurityAlertPolicyOutput {
	return o
}

// Specifies an array of alerts that are disabled. Possible values are `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action` and `Brute_Force`.
func (o ManagedInstanceSecurityAlertPolicyOutput) DisabledAlerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedInstanceSecurityAlertPolicy) pulumi.StringArrayOutput { return v.DisabledAlerts }).(pulumi.StringArrayOutput)
}

// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
func (o ManagedInstanceSecurityAlertPolicyOutput) EmailAccountAdminsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceSecurityAlertPolicy) pulumi.BoolPtrOutput { return v.EmailAccountAdminsEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies an array of email addresses to which the alert is sent.
func (o ManagedInstanceSecurityAlertPolicyOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedInstanceSecurityAlertPolicy) pulumi.StringArrayOutput { return v.EmailAddresses }).(pulumi.StringArrayOutput)
}

// Specifies the state of the Security Alert Policy, whether it is enabled or disabled. Possible values are `true`, `false`.
func (o ManagedInstanceSecurityAlertPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceSecurityAlertPolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the name of the MS SQL Managed Instance. Changing this forces a new resource to be created.
func (o ManagedInstanceSecurityAlertPolicyOutput) ManagedInstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceSecurityAlertPolicy) pulumi.StringOutput { return v.ManagedInstanceName }).(pulumi.StringOutput)
}

// The name of the resource group that contains the MS SQL Managed Instance. Changing this forces a new resource to be created.
func (o ManagedInstanceSecurityAlertPolicyOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceSecurityAlertPolicy) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
func (o ManagedInstanceSecurityAlertPolicyOutput) RetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceSecurityAlertPolicy) pulumi.IntPtrOutput { return v.RetentionDays }).(pulumi.IntPtrOutput)
}

// Specifies the identifier key of the Threat Detection audit storage account. This is mandatory when you use `storageEndpoint` to specify a storage account blob endpoint.
//
// > **NOTE:**  Please note that storage accounts configured with `sharedAccessKeyEnabled = false` cannot be used to configure `mssql.ManagedInstanceSecurityAlertPolicy` with `storageEndpoint` for now.
func (o ManagedInstanceSecurityAlertPolicyOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceSecurityAlertPolicy) pulumi.StringPtrOutput { return v.StorageAccountAccessKey }).(pulumi.StringPtrOutput)
}

// Specifies the blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
func (o ManagedInstanceSecurityAlertPolicyOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceSecurityAlertPolicy) pulumi.StringPtrOutput { return v.StorageEndpoint }).(pulumi.StringPtrOutput)
}

type ManagedInstanceSecurityAlertPolicyArrayOutput struct{ *pulumi.OutputState }

func (ManagedInstanceSecurityAlertPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceSecurityAlertPolicy)(nil)).Elem()
}

func (o ManagedInstanceSecurityAlertPolicyArrayOutput) ToManagedInstanceSecurityAlertPolicyArrayOutput() ManagedInstanceSecurityAlertPolicyArrayOutput {
	return o
}

func (o ManagedInstanceSecurityAlertPolicyArrayOutput) ToManagedInstanceSecurityAlertPolicyArrayOutputWithContext(ctx context.Context) ManagedInstanceSecurityAlertPolicyArrayOutput {
	return o
}

func (o ManagedInstanceSecurityAlertPolicyArrayOutput) Index(i pulumi.IntInput) ManagedInstanceSecurityAlertPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedInstanceSecurityAlertPolicy {
		return vs[0].([]*ManagedInstanceSecurityAlertPolicy)[vs[1].(int)]
	}).(ManagedInstanceSecurityAlertPolicyOutput)
}

type ManagedInstanceSecurityAlertPolicyMapOutput struct{ *pulumi.OutputState }

func (ManagedInstanceSecurityAlertPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceSecurityAlertPolicy)(nil)).Elem()
}

func (o ManagedInstanceSecurityAlertPolicyMapOutput) ToManagedInstanceSecurityAlertPolicyMapOutput() ManagedInstanceSecurityAlertPolicyMapOutput {
	return o
}

func (o ManagedInstanceSecurityAlertPolicyMapOutput) ToManagedInstanceSecurityAlertPolicyMapOutputWithContext(ctx context.Context) ManagedInstanceSecurityAlertPolicyMapOutput {
	return o
}

func (o ManagedInstanceSecurityAlertPolicyMapOutput) MapIndex(k pulumi.StringInput) ManagedInstanceSecurityAlertPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedInstanceSecurityAlertPolicy {
		return vs[0].(map[string]*ManagedInstanceSecurityAlertPolicy)[vs[1].(string)]
	}).(ManagedInstanceSecurityAlertPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceSecurityAlertPolicyInput)(nil)).Elem(), &ManagedInstanceSecurityAlertPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceSecurityAlertPolicyArrayInput)(nil)).Elem(), ManagedInstanceSecurityAlertPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceSecurityAlertPolicyMapInput)(nil)).Elem(), ManagedInstanceSecurityAlertPolicyMap{})
	pulumi.RegisterOutputType(ManagedInstanceSecurityAlertPolicyOutput{})
	pulumi.RegisterOutputType(ManagedInstanceSecurityAlertPolicyArrayOutput{})
	pulumi.RegisterOutputType(ManagedInstanceSecurityAlertPolicyMapOutput{})
}
