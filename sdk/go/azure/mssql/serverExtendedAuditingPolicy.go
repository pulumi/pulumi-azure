// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a MS SQL Server Extended Auditing Policy.
//
// ## Import
//
// MS SQL Server Extended Auditing Policies can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:mssql/serverExtendedAuditingPolicy:ServerExtendedAuditingPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlServer1/extendedAuditingSettings/default
//
// ```
type ServerExtendedAuditingPolicy struct {
	pulumi.CustomResourceState

	// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
	//
	// ->**NOTE:**  If `enabled` is `true`, `storageEndpoint` or `logMonitoringEnabled` are required.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled pulumi.BoolPtrOutput `pulumi:"logMonitoringEnabled"`
	// The number of days to retain logs for in the storage account. Defaults to `0`.
	RetentionInDays pulumi.IntPtrOutput `pulumi:"retentionInDays"`
	// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary pulumi.BoolPtrOutput `pulumi:"storageAccountAccessKeyIsSecondary"`
	// The ID of the Subscription containing the Storage Account.
	StorageAccountSubscriptionId pulumi.StringPtrOutput `pulumi:"storageAccountSubscriptionId"`
	// The blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all extended auditing logs.
	StorageEndpoint pulumi.StringPtrOutput `pulumi:"storageEndpoint"`
}

// NewServerExtendedAuditingPolicy registers a new resource with the given unique name, arguments, and options.
func NewServerExtendedAuditingPolicy(ctx *pulumi.Context,
	name string, args *ServerExtendedAuditingPolicyArgs, opts ...pulumi.ResourceOption) (*ServerExtendedAuditingPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.StorageAccountAccessKey != nil {
		args.StorageAccountAccessKey = pulumi.ToSecret(args.StorageAccountAccessKey).(pulumi.StringPtrInput)
	}
	if args.StorageAccountSubscriptionId != nil {
		args.StorageAccountSubscriptionId = pulumi.ToSecret(args.StorageAccountSubscriptionId).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"storageAccountAccessKey",
		"storageAccountSubscriptionId",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerExtendedAuditingPolicy
	err := ctx.RegisterResource("azure:mssql/serverExtendedAuditingPolicy:ServerExtendedAuditingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerExtendedAuditingPolicy gets an existing ServerExtendedAuditingPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerExtendedAuditingPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerExtendedAuditingPolicyState, opts ...pulumi.ResourceOption) (*ServerExtendedAuditingPolicy, error) {
	var resource ServerExtendedAuditingPolicy
	err := ctx.ReadResource("azure:mssql/serverExtendedAuditingPolicy:ServerExtendedAuditingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerExtendedAuditingPolicy resources.
type serverExtendedAuditingPolicyState struct {
	// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
	//
	// ->**NOTE:**  If `enabled` is `true`, `storageEndpoint` or `logMonitoringEnabled` are required.
	Enabled *bool `pulumi:"enabled"`
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled *bool `pulumi:"logMonitoringEnabled"`
	// The number of days to retain logs for in the storage account. Defaults to `0`.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId *string `pulumi:"serverId"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary *bool `pulumi:"storageAccountAccessKeyIsSecondary"`
	// The ID of the Subscription containing the Storage Account.
	StorageAccountSubscriptionId *string `pulumi:"storageAccountSubscriptionId"`
	// The blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all extended auditing logs.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

type ServerExtendedAuditingPolicyState struct {
	// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
	//
	// ->**NOTE:**  If `enabled` is `true`, `storageEndpoint` or `logMonitoringEnabled` are required.
	Enabled pulumi.BoolPtrInput
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled pulumi.BoolPtrInput
	// The number of days to retain logs for in the storage account. Defaults to `0`.
	RetentionInDays pulumi.IntPtrInput
	// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId pulumi.StringPtrInput
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrInput
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary pulumi.BoolPtrInput
	// The ID of the Subscription containing the Storage Account.
	StorageAccountSubscriptionId pulumi.StringPtrInput
	// The blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all extended auditing logs.
	StorageEndpoint pulumi.StringPtrInput
}

func (ServerExtendedAuditingPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverExtendedAuditingPolicyState)(nil)).Elem()
}

type serverExtendedAuditingPolicyArgs struct {
	// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
	//
	// ->**NOTE:**  If `enabled` is `true`, `storageEndpoint` or `logMonitoringEnabled` are required.
	Enabled *bool `pulumi:"enabled"`
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled *bool `pulumi:"logMonitoringEnabled"`
	// The number of days to retain logs for in the storage account. Defaults to `0`.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId string `pulumi:"serverId"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary *bool `pulumi:"storageAccountAccessKeyIsSecondary"`
	// The ID of the Subscription containing the Storage Account.
	StorageAccountSubscriptionId *string `pulumi:"storageAccountSubscriptionId"`
	// The blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all extended auditing logs.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

// The set of arguments for constructing a ServerExtendedAuditingPolicy resource.
type ServerExtendedAuditingPolicyArgs struct {
	// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
	//
	// ->**NOTE:**  If `enabled` is `true`, `storageEndpoint` or `logMonitoringEnabled` are required.
	Enabled pulumi.BoolPtrInput
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled pulumi.BoolPtrInput
	// The number of days to retain logs for in the storage account. Defaults to `0`.
	RetentionInDays pulumi.IntPtrInput
	// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId pulumi.StringInput
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrInput
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary pulumi.BoolPtrInput
	// The ID of the Subscription containing the Storage Account.
	StorageAccountSubscriptionId pulumi.StringPtrInput
	// The blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all extended auditing logs.
	StorageEndpoint pulumi.StringPtrInput
}

func (ServerExtendedAuditingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverExtendedAuditingPolicyArgs)(nil)).Elem()
}

type ServerExtendedAuditingPolicyInput interface {
	pulumi.Input

	ToServerExtendedAuditingPolicyOutput() ServerExtendedAuditingPolicyOutput
	ToServerExtendedAuditingPolicyOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyOutput
}

func (*ServerExtendedAuditingPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerExtendedAuditingPolicy)(nil)).Elem()
}

func (i *ServerExtendedAuditingPolicy) ToServerExtendedAuditingPolicyOutput() ServerExtendedAuditingPolicyOutput {
	return i.ToServerExtendedAuditingPolicyOutputWithContext(context.Background())
}

func (i *ServerExtendedAuditingPolicy) ToServerExtendedAuditingPolicyOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerExtendedAuditingPolicyOutput)
}

func (i *ServerExtendedAuditingPolicy) ToOutput(ctx context.Context) pulumix.Output[*ServerExtendedAuditingPolicy] {
	return pulumix.Output[*ServerExtendedAuditingPolicy]{
		OutputState: i.ToServerExtendedAuditingPolicyOutputWithContext(ctx).OutputState,
	}
}

// ServerExtendedAuditingPolicyArrayInput is an input type that accepts ServerExtendedAuditingPolicyArray and ServerExtendedAuditingPolicyArrayOutput values.
// You can construct a concrete instance of `ServerExtendedAuditingPolicyArrayInput` via:
//
//	ServerExtendedAuditingPolicyArray{ ServerExtendedAuditingPolicyArgs{...} }
type ServerExtendedAuditingPolicyArrayInput interface {
	pulumi.Input

	ToServerExtendedAuditingPolicyArrayOutput() ServerExtendedAuditingPolicyArrayOutput
	ToServerExtendedAuditingPolicyArrayOutputWithContext(context.Context) ServerExtendedAuditingPolicyArrayOutput
}

type ServerExtendedAuditingPolicyArray []ServerExtendedAuditingPolicyInput

func (ServerExtendedAuditingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerExtendedAuditingPolicy)(nil)).Elem()
}

func (i ServerExtendedAuditingPolicyArray) ToServerExtendedAuditingPolicyArrayOutput() ServerExtendedAuditingPolicyArrayOutput {
	return i.ToServerExtendedAuditingPolicyArrayOutputWithContext(context.Background())
}

func (i ServerExtendedAuditingPolicyArray) ToServerExtendedAuditingPolicyArrayOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerExtendedAuditingPolicyArrayOutput)
}

func (i ServerExtendedAuditingPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]*ServerExtendedAuditingPolicy] {
	return pulumix.Output[[]*ServerExtendedAuditingPolicy]{
		OutputState: i.ToServerExtendedAuditingPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// ServerExtendedAuditingPolicyMapInput is an input type that accepts ServerExtendedAuditingPolicyMap and ServerExtendedAuditingPolicyMapOutput values.
// You can construct a concrete instance of `ServerExtendedAuditingPolicyMapInput` via:
//
//	ServerExtendedAuditingPolicyMap{ "key": ServerExtendedAuditingPolicyArgs{...} }
type ServerExtendedAuditingPolicyMapInput interface {
	pulumi.Input

	ToServerExtendedAuditingPolicyMapOutput() ServerExtendedAuditingPolicyMapOutput
	ToServerExtendedAuditingPolicyMapOutputWithContext(context.Context) ServerExtendedAuditingPolicyMapOutput
}

type ServerExtendedAuditingPolicyMap map[string]ServerExtendedAuditingPolicyInput

func (ServerExtendedAuditingPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerExtendedAuditingPolicy)(nil)).Elem()
}

func (i ServerExtendedAuditingPolicyMap) ToServerExtendedAuditingPolicyMapOutput() ServerExtendedAuditingPolicyMapOutput {
	return i.ToServerExtendedAuditingPolicyMapOutputWithContext(context.Background())
}

func (i ServerExtendedAuditingPolicyMap) ToServerExtendedAuditingPolicyMapOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerExtendedAuditingPolicyMapOutput)
}

func (i ServerExtendedAuditingPolicyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServerExtendedAuditingPolicy] {
	return pulumix.Output[map[string]*ServerExtendedAuditingPolicy]{
		OutputState: i.ToServerExtendedAuditingPolicyMapOutputWithContext(ctx).OutputState,
	}
}

type ServerExtendedAuditingPolicyOutput struct{ *pulumi.OutputState }

func (ServerExtendedAuditingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerExtendedAuditingPolicy)(nil)).Elem()
}

func (o ServerExtendedAuditingPolicyOutput) ToServerExtendedAuditingPolicyOutput() ServerExtendedAuditingPolicyOutput {
	return o
}

func (o ServerExtendedAuditingPolicyOutput) ToServerExtendedAuditingPolicyOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyOutput {
	return o
}

func (o ServerExtendedAuditingPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*ServerExtendedAuditingPolicy] {
	return pulumix.Output[*ServerExtendedAuditingPolicy]{
		OutputState: o.OutputState,
	}
}

// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
//
// ->**NOTE:**  If `enabled` is `true`, `storageEndpoint` or `logMonitoringEnabled` are required.
func (o ServerExtendedAuditingPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerExtendedAuditingPolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
func (o ServerExtendedAuditingPolicyOutput) LogMonitoringEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerExtendedAuditingPolicy) pulumi.BoolPtrOutput { return v.LogMonitoringEnabled }).(pulumi.BoolPtrOutput)
}

// The number of days to retain logs for in the storage account. Defaults to `0`.
func (o ServerExtendedAuditingPolicyOutput) RetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerExtendedAuditingPolicy) pulumi.IntPtrOutput { return v.RetentionInDays }).(pulumi.IntPtrOutput)
}

// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
func (o ServerExtendedAuditingPolicyOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerExtendedAuditingPolicy) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// The access key to use for the auditing storage account.
func (o ServerExtendedAuditingPolicyOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerExtendedAuditingPolicy) pulumi.StringPtrOutput { return v.StorageAccountAccessKey }).(pulumi.StringPtrOutput)
}

// Is `storageAccountAccessKey` value the storage's secondary key?
func (o ServerExtendedAuditingPolicyOutput) StorageAccountAccessKeyIsSecondary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerExtendedAuditingPolicy) pulumi.BoolPtrOutput {
		return v.StorageAccountAccessKeyIsSecondary
	}).(pulumi.BoolPtrOutput)
}

// The ID of the Subscription containing the Storage Account.
func (o ServerExtendedAuditingPolicyOutput) StorageAccountSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerExtendedAuditingPolicy) pulumi.StringPtrOutput { return v.StorageAccountSubscriptionId }).(pulumi.StringPtrOutput)
}

// The blob storage endpoint (e.g. <https://example.blob.core.windows.net>). This blob storage will hold all extended auditing logs.
func (o ServerExtendedAuditingPolicyOutput) StorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerExtendedAuditingPolicy) pulumi.StringPtrOutput { return v.StorageEndpoint }).(pulumi.StringPtrOutput)
}

type ServerExtendedAuditingPolicyArrayOutput struct{ *pulumi.OutputState }

func (ServerExtendedAuditingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerExtendedAuditingPolicy)(nil)).Elem()
}

func (o ServerExtendedAuditingPolicyArrayOutput) ToServerExtendedAuditingPolicyArrayOutput() ServerExtendedAuditingPolicyArrayOutput {
	return o
}

func (o ServerExtendedAuditingPolicyArrayOutput) ToServerExtendedAuditingPolicyArrayOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyArrayOutput {
	return o
}

func (o ServerExtendedAuditingPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ServerExtendedAuditingPolicy] {
	return pulumix.Output[[]*ServerExtendedAuditingPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ServerExtendedAuditingPolicyArrayOutput) Index(i pulumi.IntInput) ServerExtendedAuditingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerExtendedAuditingPolicy {
		return vs[0].([]*ServerExtendedAuditingPolicy)[vs[1].(int)]
	}).(ServerExtendedAuditingPolicyOutput)
}

type ServerExtendedAuditingPolicyMapOutput struct{ *pulumi.OutputState }

func (ServerExtendedAuditingPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerExtendedAuditingPolicy)(nil)).Elem()
}

func (o ServerExtendedAuditingPolicyMapOutput) ToServerExtendedAuditingPolicyMapOutput() ServerExtendedAuditingPolicyMapOutput {
	return o
}

func (o ServerExtendedAuditingPolicyMapOutput) ToServerExtendedAuditingPolicyMapOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyMapOutput {
	return o
}

func (o ServerExtendedAuditingPolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServerExtendedAuditingPolicy] {
	return pulumix.Output[map[string]*ServerExtendedAuditingPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ServerExtendedAuditingPolicyMapOutput) MapIndex(k pulumi.StringInput) ServerExtendedAuditingPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerExtendedAuditingPolicy {
		return vs[0].(map[string]*ServerExtendedAuditingPolicy)[vs[1].(string)]
	}).(ServerExtendedAuditingPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerExtendedAuditingPolicyInput)(nil)).Elem(), &ServerExtendedAuditingPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerExtendedAuditingPolicyArrayInput)(nil)).Elem(), ServerExtendedAuditingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerExtendedAuditingPolicyMapInput)(nil)).Elem(), ServerExtendedAuditingPolicyMap{})
	pulumi.RegisterOutputType(ServerExtendedAuditingPolicyOutput{})
	pulumi.RegisterOutputType(ServerExtendedAuditingPolicyArrayOutput{})
	pulumi.RegisterOutputType(ServerExtendedAuditingPolicyMapOutput{})
}
