// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Ms Sql Server Extended Auditing Policy.
//
// > **NOTE:** The Server Extended Auditing Policy Can be set inline here as well as with the mssqlServerExtendedAuditingPolicy resource resource. You can only use one or the other and using both will cause a conflict.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/mssql"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleServer, err := mssql.NewServer(ctx, "exampleServer", &mssql.ServerArgs{
// 			ResourceGroupName:          exampleResourceGroup.Name,
// 			Location:                   exampleResourceGroup.Location,
// 			Version:                    pulumi.String("12.0"),
// 			AdministratorLogin:         pulumi.String("missadministrator"),
// 			AdministratorLoginPassword: pulumi.String("AdminPassword123!"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("LRS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = mssql.NewServerExtendedAuditingPolicy(ctx, "exampleServerExtendedAuditingPolicy", &mssql.ServerExtendedAuditingPolicyArgs{
// 			ServerId:                           exampleServer.ID(),
// 			StorageEndpoint:                    exampleAccount.PrimaryBlobEndpoint,
// 			StorageAccountAccessKey:            exampleAccount.PrimaryAccessKey,
// 			StorageAccountAccessKeyIsSecondary: pulumi.Bool(false),
// 			RetentionInDays:                    pulumi.Int(6),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Ms Sql Server Extended Auditing Policys can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:mssql/serverExtendedAuditingPolicy:ServerExtendedAuditingPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlServer1/extendedAuditingSettings/default
// ```
type ServerExtendedAuditingPolicyType struct {
	pulumi.CustomResourceState

	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor.
	LogMonitoringEnabled pulumi.BoolPtrOutput `pulumi:"logMonitoringEnabled"`
	// The number of days to retain logs for in the storage account.
	RetentionInDays pulumi.IntPtrOutput `pulumi:"retentionInDays"`
	// The ID of the sql server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary pulumi.BoolPtrOutput `pulumi:"storageAccountAccessKeyIsSecondary"`
	// The blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all extended auditing logs.
	StorageEndpoint pulumi.StringPtrOutput `pulumi:"storageEndpoint"`
}

// NewServerExtendedAuditingPolicyType registers a new resource with the given unique name, arguments, and options.
func NewServerExtendedAuditingPolicyType(ctx *pulumi.Context,
	name string, args *ServerExtendedAuditingPolicyTypeArgs, opts ...pulumi.ResourceOption) (*ServerExtendedAuditingPolicyType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	var resource ServerExtendedAuditingPolicyType
	err := ctx.RegisterResource("azure:mssql/serverExtendedAuditingPolicy:ServerExtendedAuditingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerExtendedAuditingPolicyType gets an existing ServerExtendedAuditingPolicyType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerExtendedAuditingPolicyType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerExtendedAuditingPolicyTypeState, opts ...pulumi.ResourceOption) (*ServerExtendedAuditingPolicyType, error) {
	var resource ServerExtendedAuditingPolicyType
	err := ctx.ReadResource("azure:mssql/serverExtendedAuditingPolicy:ServerExtendedAuditingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerExtendedAuditingPolicyType resources.
type serverExtendedAuditingPolicyTypeState struct {
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor.
	LogMonitoringEnabled *bool `pulumi:"logMonitoringEnabled"`
	// The number of days to retain logs for in the storage account.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// The ID of the sql server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId *string `pulumi:"serverId"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary *bool `pulumi:"storageAccountAccessKeyIsSecondary"`
	// The blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all extended auditing logs.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

type ServerExtendedAuditingPolicyTypeState struct {
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor.
	LogMonitoringEnabled pulumi.BoolPtrInput
	// The number of days to retain logs for in the storage account.
	RetentionInDays pulumi.IntPtrInput
	// The ID of the sql server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId pulumi.StringPtrInput
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrInput
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary pulumi.BoolPtrInput
	// The blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all extended auditing logs.
	StorageEndpoint pulumi.StringPtrInput
}

func (ServerExtendedAuditingPolicyTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverExtendedAuditingPolicyTypeState)(nil)).Elem()
}

type serverExtendedAuditingPolicyTypeArgs struct {
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor.
	LogMonitoringEnabled *bool `pulumi:"logMonitoringEnabled"`
	// The number of days to retain logs for in the storage account.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// The ID of the sql server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId string `pulumi:"serverId"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary *bool `pulumi:"storageAccountAccessKeyIsSecondary"`
	// The blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all extended auditing logs.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

// The set of arguments for constructing a ServerExtendedAuditingPolicyType resource.
type ServerExtendedAuditingPolicyTypeArgs struct {
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor.
	LogMonitoringEnabled pulumi.BoolPtrInput
	// The number of days to retain logs for in the storage account.
	RetentionInDays pulumi.IntPtrInput
	// The ID of the sql server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId pulumi.StringInput
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrInput
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary pulumi.BoolPtrInput
	// The blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all extended auditing logs.
	StorageEndpoint pulumi.StringPtrInput
}

func (ServerExtendedAuditingPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverExtendedAuditingPolicyTypeArgs)(nil)).Elem()
}

type ServerExtendedAuditingPolicyTypeInput interface {
	pulumi.Input

	ToServerExtendedAuditingPolicyTypeOutput() ServerExtendedAuditingPolicyTypeOutput
	ToServerExtendedAuditingPolicyTypeOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyTypeOutput
}

func (*ServerExtendedAuditingPolicyType) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerExtendedAuditingPolicyType)(nil))
}

func (i *ServerExtendedAuditingPolicyType) ToServerExtendedAuditingPolicyTypeOutput() ServerExtendedAuditingPolicyTypeOutput {
	return i.ToServerExtendedAuditingPolicyTypeOutputWithContext(context.Background())
}

func (i *ServerExtendedAuditingPolicyType) ToServerExtendedAuditingPolicyTypeOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerExtendedAuditingPolicyTypeOutput)
}

func (i *ServerExtendedAuditingPolicyType) ToServerExtendedAuditingPolicyTypePtrOutput() ServerExtendedAuditingPolicyTypePtrOutput {
	return i.ToServerExtendedAuditingPolicyTypePtrOutputWithContext(context.Background())
}

func (i *ServerExtendedAuditingPolicyType) ToServerExtendedAuditingPolicyTypePtrOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerExtendedAuditingPolicyTypePtrOutput)
}

type ServerExtendedAuditingPolicyTypePtrInput interface {
	pulumi.Input

	ToServerExtendedAuditingPolicyTypePtrOutput() ServerExtendedAuditingPolicyTypePtrOutput
	ToServerExtendedAuditingPolicyTypePtrOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyTypePtrOutput
}

type serverExtendedAuditingPolicyTypePtrType ServerExtendedAuditingPolicyTypeArgs

func (*serverExtendedAuditingPolicyTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerExtendedAuditingPolicyType)(nil))
}

func (i *serverExtendedAuditingPolicyTypePtrType) ToServerExtendedAuditingPolicyTypePtrOutput() ServerExtendedAuditingPolicyTypePtrOutput {
	return i.ToServerExtendedAuditingPolicyTypePtrOutputWithContext(context.Background())
}

func (i *serverExtendedAuditingPolicyTypePtrType) ToServerExtendedAuditingPolicyTypePtrOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerExtendedAuditingPolicyTypePtrOutput)
}

// ServerExtendedAuditingPolicyTypeArrayInput is an input type that accepts ServerExtendedAuditingPolicyTypeArray and ServerExtendedAuditingPolicyTypeArrayOutput values.
// You can construct a concrete instance of `ServerExtendedAuditingPolicyTypeArrayInput` via:
//
//          ServerExtendedAuditingPolicyTypeArray{ ServerExtendedAuditingPolicyTypeArgs{...} }
type ServerExtendedAuditingPolicyTypeArrayInput interface {
	pulumi.Input

	ToServerExtendedAuditingPolicyTypeArrayOutput() ServerExtendedAuditingPolicyTypeArrayOutput
	ToServerExtendedAuditingPolicyTypeArrayOutputWithContext(context.Context) ServerExtendedAuditingPolicyTypeArrayOutput
}

type ServerExtendedAuditingPolicyTypeArray []ServerExtendedAuditingPolicyTypeInput

func (ServerExtendedAuditingPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerExtendedAuditingPolicyType)(nil)).Elem()
}

func (i ServerExtendedAuditingPolicyTypeArray) ToServerExtendedAuditingPolicyTypeArrayOutput() ServerExtendedAuditingPolicyTypeArrayOutput {
	return i.ToServerExtendedAuditingPolicyTypeArrayOutputWithContext(context.Background())
}

func (i ServerExtendedAuditingPolicyTypeArray) ToServerExtendedAuditingPolicyTypeArrayOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerExtendedAuditingPolicyTypeArrayOutput)
}

// ServerExtendedAuditingPolicyTypeMapInput is an input type that accepts ServerExtendedAuditingPolicyTypeMap and ServerExtendedAuditingPolicyTypeMapOutput values.
// You can construct a concrete instance of `ServerExtendedAuditingPolicyTypeMapInput` via:
//
//          ServerExtendedAuditingPolicyTypeMap{ "key": ServerExtendedAuditingPolicyTypeArgs{...} }
type ServerExtendedAuditingPolicyTypeMapInput interface {
	pulumi.Input

	ToServerExtendedAuditingPolicyTypeMapOutput() ServerExtendedAuditingPolicyTypeMapOutput
	ToServerExtendedAuditingPolicyTypeMapOutputWithContext(context.Context) ServerExtendedAuditingPolicyTypeMapOutput
}

type ServerExtendedAuditingPolicyTypeMap map[string]ServerExtendedAuditingPolicyTypeInput

func (ServerExtendedAuditingPolicyTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerExtendedAuditingPolicyType)(nil)).Elem()
}

func (i ServerExtendedAuditingPolicyTypeMap) ToServerExtendedAuditingPolicyTypeMapOutput() ServerExtendedAuditingPolicyTypeMapOutput {
	return i.ToServerExtendedAuditingPolicyTypeMapOutputWithContext(context.Background())
}

func (i ServerExtendedAuditingPolicyTypeMap) ToServerExtendedAuditingPolicyTypeMapOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerExtendedAuditingPolicyTypeMapOutput)
}

type ServerExtendedAuditingPolicyTypeOutput struct{ *pulumi.OutputState }

func (ServerExtendedAuditingPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerExtendedAuditingPolicyType)(nil))
}

func (o ServerExtendedAuditingPolicyTypeOutput) ToServerExtendedAuditingPolicyTypeOutput() ServerExtendedAuditingPolicyTypeOutput {
	return o
}

func (o ServerExtendedAuditingPolicyTypeOutput) ToServerExtendedAuditingPolicyTypeOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyTypeOutput {
	return o
}

func (o ServerExtendedAuditingPolicyTypeOutput) ToServerExtendedAuditingPolicyTypePtrOutput() ServerExtendedAuditingPolicyTypePtrOutput {
	return o.ToServerExtendedAuditingPolicyTypePtrOutputWithContext(context.Background())
}

func (o ServerExtendedAuditingPolicyTypeOutput) ToServerExtendedAuditingPolicyTypePtrOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerExtendedAuditingPolicyType) *ServerExtendedAuditingPolicyType {
		return &v
	}).(ServerExtendedAuditingPolicyTypePtrOutput)
}

type ServerExtendedAuditingPolicyTypePtrOutput struct{ *pulumi.OutputState }

func (ServerExtendedAuditingPolicyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerExtendedAuditingPolicyType)(nil))
}

func (o ServerExtendedAuditingPolicyTypePtrOutput) ToServerExtendedAuditingPolicyTypePtrOutput() ServerExtendedAuditingPolicyTypePtrOutput {
	return o
}

func (o ServerExtendedAuditingPolicyTypePtrOutput) ToServerExtendedAuditingPolicyTypePtrOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyTypePtrOutput {
	return o
}

func (o ServerExtendedAuditingPolicyTypePtrOutput) Elem() ServerExtendedAuditingPolicyTypeOutput {
	return o.ApplyT(func(v *ServerExtendedAuditingPolicyType) ServerExtendedAuditingPolicyType {
		if v != nil {
			return *v
		}
		var ret ServerExtendedAuditingPolicyType
		return ret
	}).(ServerExtendedAuditingPolicyTypeOutput)
}

type ServerExtendedAuditingPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (ServerExtendedAuditingPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerExtendedAuditingPolicyType)(nil))
}

func (o ServerExtendedAuditingPolicyTypeArrayOutput) ToServerExtendedAuditingPolicyTypeArrayOutput() ServerExtendedAuditingPolicyTypeArrayOutput {
	return o
}

func (o ServerExtendedAuditingPolicyTypeArrayOutput) ToServerExtendedAuditingPolicyTypeArrayOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyTypeArrayOutput {
	return o
}

func (o ServerExtendedAuditingPolicyTypeArrayOutput) Index(i pulumi.IntInput) ServerExtendedAuditingPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerExtendedAuditingPolicyType {
		return vs[0].([]ServerExtendedAuditingPolicyType)[vs[1].(int)]
	}).(ServerExtendedAuditingPolicyTypeOutput)
}

type ServerExtendedAuditingPolicyTypeMapOutput struct{ *pulumi.OutputState }

func (ServerExtendedAuditingPolicyTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ServerExtendedAuditingPolicyType)(nil))
}

func (o ServerExtendedAuditingPolicyTypeMapOutput) ToServerExtendedAuditingPolicyTypeMapOutput() ServerExtendedAuditingPolicyTypeMapOutput {
	return o
}

func (o ServerExtendedAuditingPolicyTypeMapOutput) ToServerExtendedAuditingPolicyTypeMapOutputWithContext(ctx context.Context) ServerExtendedAuditingPolicyTypeMapOutput {
	return o
}

func (o ServerExtendedAuditingPolicyTypeMapOutput) MapIndex(k pulumi.StringInput) ServerExtendedAuditingPolicyTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ServerExtendedAuditingPolicyType {
		return vs[0].(map[string]ServerExtendedAuditingPolicyType)[vs[1].(string)]
	}).(ServerExtendedAuditingPolicyTypeOutput)
}

func init() {
	pulumi.RegisterOutputType(ServerExtendedAuditingPolicyTypeOutput{})
	pulumi.RegisterOutputType(ServerExtendedAuditingPolicyTypePtrOutput{})
	pulumi.RegisterOutputType(ServerExtendedAuditingPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(ServerExtendedAuditingPolicyTypeMapOutput{})
}
