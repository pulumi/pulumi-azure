// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the Vulnerability Assessment for an MS Managed Instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mssql"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleManagedInstance, err := mssql.NewManagedInstance(ctx, "exampleManagedInstance", &mssql.ManagedInstanceArgs{
//				ResourceGroupName:          exampleResourceGroup.Name,
//				Location:                   exampleResourceGroup.Location,
//				LicenseType:                pulumi.String("BasePrice"),
//				SkuName:                    pulumi.String("GP_Gen5"),
//				StorageSizeInGb:            pulumi.Int(32),
//				SubnetId:                   exampleSubnet.ID(),
//				Vcores:                     pulumi.Int(4),
//				AdministratorLogin:         pulumi.String("missadministrator"),
//				AdministratorLoginPassword: pulumi.String("NCC-1701-D"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("GRS"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleContainer, err := storage.NewContainer(ctx, "exampleContainer", &storage.ContainerArgs{
//				StorageAccountName:  exampleAccount.Name,
//				ContainerAccessType: pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleManagedInstanceSecurityAlertPolicy, err := mssql.NewManagedInstanceSecurityAlertPolicy(ctx, "exampleManagedInstanceSecurityAlertPolicy", &mssql.ManagedInstanceSecurityAlertPolicyArgs{
//				ResourceGroupName:       pulumi.Any(azurerm_resource_group.Test.Name),
//				ManagedInstanceName:     pulumi.Any(azurerm_mssql_managed_instance.Test.Name),
//				Enabled:                 pulumi.Bool(true),
//				StorageEndpoint:         pulumi.Any(azurerm_storage_account.Test.Primary_blob_endpoint),
//				StorageAccountAccessKey: pulumi.Any(azurerm_storage_account.Test.Primary_access_key),
//				RetentionDays:           pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mssql.NewManagedInstanceVulnerabilityAssessment(ctx, "exampleManagedInstanceVulnerabilityAssessment", &mssql.ManagedInstanceVulnerabilityAssessmentArgs{
//				ManagedInstanceId: exampleManagedInstance.ID(),
//				StorageContainerPath: pulumi.All(exampleAccount.PrimaryBlobEndpoint, exampleContainer.Name).ApplyT(func(_args []interface{}) (string, error) {
//					primaryBlobEndpoint := _args[0].(string)
//					name := _args[1].(string)
//					return fmt.Sprintf("%v%v/", primaryBlobEndpoint, name), nil
//				}).(pulumi.StringOutput),
//				StorageAccountAccessKey: exampleAccount.PrimaryAccessKey,
//				RecurringScans: &mssql.ManagedInstanceVulnerabilityAssessmentRecurringScansArgs{
//					Enabled:                 pulumi.Bool(true),
//					EmailSubscriptionAdmins: pulumi.Bool(true),
//					Emails: pulumi.StringArray{
//						pulumi.String("email@example1.com"),
//						pulumi.String("email@example2.com"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleManagedInstanceSecurityAlertPolicy,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The Vulnerability Assessment can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:mssql/managedInstanceVulnerabilityAssessment:ManagedInstanceVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/managedInstances/instance1/vulnerabilityAssessments/Default
//
// ```
type ManagedInstanceVulnerabilityAssessment struct {
	pulumi.CustomResourceState

	// The id of the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ManagedInstanceId pulumi.StringOutput `pulumi:"managedInstanceId"`
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans ManagedInstanceVulnerabilityAssessmentRecurringScansOutput `pulumi:"recurringScans"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	//
	// > **NOTE** The `storageAccountAccessKey` only applies if the storage account is not behind a virtual network or a firewall.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. <https://myStorage.blob.core.windows.net/VaScans/>).
	StorageContainerPath pulumi.StringOutput `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	//
	// > **NOTE** The `storageContainerSasKey` only applies if the storage account is not behind a virtual network or a firewall.
	StorageContainerSasKey pulumi.StringPtrOutput `pulumi:"storageContainerSasKey"`
}

// NewManagedInstanceVulnerabilityAssessment registers a new resource with the given unique name, arguments, and options.
func NewManagedInstanceVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *ManagedInstanceVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOption) (*ManagedInstanceVulnerabilityAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagedInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'ManagedInstanceId'")
	}
	if args.StorageContainerPath == nil {
		return nil, errors.New("invalid value for required argument 'StorageContainerPath'")
	}
	if args.StorageAccountAccessKey != nil {
		args.StorageAccountAccessKey = pulumi.ToSecret(args.StorageAccountAccessKey).(pulumi.StringPtrInput)
	}
	if args.StorageContainerSasKey != nil {
		args.StorageContainerSasKey = pulumi.ToSecret(args.StorageContainerSasKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"storageAccountAccessKey",
		"storageContainerSasKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedInstanceVulnerabilityAssessment
	err := ctx.RegisterResource("azure:mssql/managedInstanceVulnerabilityAssessment:ManagedInstanceVulnerabilityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedInstanceVulnerabilityAssessment gets an existing ManagedInstanceVulnerabilityAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedInstanceVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedInstanceVulnerabilityAssessmentState, opts ...pulumi.ResourceOption) (*ManagedInstanceVulnerabilityAssessment, error) {
	var resource ManagedInstanceVulnerabilityAssessment
	err := ctx.ReadResource("azure:mssql/managedInstanceVulnerabilityAssessment:ManagedInstanceVulnerabilityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedInstanceVulnerabilityAssessment resources.
type managedInstanceVulnerabilityAssessmentState struct {
	// The id of the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ManagedInstanceId *string `pulumi:"managedInstanceId"`
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans *ManagedInstanceVulnerabilityAssessmentRecurringScans `pulumi:"recurringScans"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	//
	// > **NOTE** The `storageAccountAccessKey` only applies if the storage account is not behind a virtual network or a firewall.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. <https://myStorage.blob.core.windows.net/VaScans/>).
	StorageContainerPath *string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	//
	// > **NOTE** The `storageContainerSasKey` only applies if the storage account is not behind a virtual network or a firewall.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
}

type ManagedInstanceVulnerabilityAssessmentState struct {
	// The id of the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ManagedInstanceId pulumi.StringPtrInput
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans ManagedInstanceVulnerabilityAssessmentRecurringScansPtrInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	//
	// > **NOTE** The `storageAccountAccessKey` only applies if the storage account is not behind a virtual network or a firewall.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. <https://myStorage.blob.core.windows.net/VaScans/>).
	StorageContainerPath pulumi.StringPtrInput
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	//
	// > **NOTE** The `storageContainerSasKey` only applies if the storage account is not behind a virtual network or a firewall.
	StorageContainerSasKey pulumi.StringPtrInput
}

func (ManagedInstanceVulnerabilityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceVulnerabilityAssessmentState)(nil)).Elem()
}

type managedInstanceVulnerabilityAssessmentArgs struct {
	// The id of the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ManagedInstanceId string `pulumi:"managedInstanceId"`
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans *ManagedInstanceVulnerabilityAssessmentRecurringScans `pulumi:"recurringScans"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	//
	// > **NOTE** The `storageAccountAccessKey` only applies if the storage account is not behind a virtual network or a firewall.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. <https://myStorage.blob.core.windows.net/VaScans/>).
	StorageContainerPath string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	//
	// > **NOTE** The `storageContainerSasKey` only applies if the storage account is not behind a virtual network or a firewall.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
}

// The set of arguments for constructing a ManagedInstanceVulnerabilityAssessment resource.
type ManagedInstanceVulnerabilityAssessmentArgs struct {
	// The id of the MS SQL Managed Instance. Changing this forces a new resource to be created.
	ManagedInstanceId pulumi.StringInput
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans ManagedInstanceVulnerabilityAssessmentRecurringScansPtrInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	//
	// > **NOTE** The `storageAccountAccessKey` only applies if the storage account is not behind a virtual network or a firewall.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. <https://myStorage.blob.core.windows.net/VaScans/>).
	StorageContainerPath pulumi.StringInput
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	//
	// > **NOTE** The `storageContainerSasKey` only applies if the storage account is not behind a virtual network or a firewall.
	StorageContainerSasKey pulumi.StringPtrInput
}

func (ManagedInstanceVulnerabilityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceVulnerabilityAssessmentArgs)(nil)).Elem()
}

type ManagedInstanceVulnerabilityAssessmentInput interface {
	pulumi.Input

	ToManagedInstanceVulnerabilityAssessmentOutput() ManagedInstanceVulnerabilityAssessmentOutput
	ToManagedInstanceVulnerabilityAssessmentOutputWithContext(ctx context.Context) ManagedInstanceVulnerabilityAssessmentOutput
}

func (*ManagedInstanceVulnerabilityAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceVulnerabilityAssessment)(nil)).Elem()
}

func (i *ManagedInstanceVulnerabilityAssessment) ToManagedInstanceVulnerabilityAssessmentOutput() ManagedInstanceVulnerabilityAssessmentOutput {
	return i.ToManagedInstanceVulnerabilityAssessmentOutputWithContext(context.Background())
}

func (i *ManagedInstanceVulnerabilityAssessment) ToManagedInstanceVulnerabilityAssessmentOutputWithContext(ctx context.Context) ManagedInstanceVulnerabilityAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceVulnerabilityAssessmentOutput)
}

// ManagedInstanceVulnerabilityAssessmentArrayInput is an input type that accepts ManagedInstanceVulnerabilityAssessmentArray and ManagedInstanceVulnerabilityAssessmentArrayOutput values.
// You can construct a concrete instance of `ManagedInstanceVulnerabilityAssessmentArrayInput` via:
//
//	ManagedInstanceVulnerabilityAssessmentArray{ ManagedInstanceVulnerabilityAssessmentArgs{...} }
type ManagedInstanceVulnerabilityAssessmentArrayInput interface {
	pulumi.Input

	ToManagedInstanceVulnerabilityAssessmentArrayOutput() ManagedInstanceVulnerabilityAssessmentArrayOutput
	ToManagedInstanceVulnerabilityAssessmentArrayOutputWithContext(context.Context) ManagedInstanceVulnerabilityAssessmentArrayOutput
}

type ManagedInstanceVulnerabilityAssessmentArray []ManagedInstanceVulnerabilityAssessmentInput

func (ManagedInstanceVulnerabilityAssessmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceVulnerabilityAssessment)(nil)).Elem()
}

func (i ManagedInstanceVulnerabilityAssessmentArray) ToManagedInstanceVulnerabilityAssessmentArrayOutput() ManagedInstanceVulnerabilityAssessmentArrayOutput {
	return i.ToManagedInstanceVulnerabilityAssessmentArrayOutputWithContext(context.Background())
}

func (i ManagedInstanceVulnerabilityAssessmentArray) ToManagedInstanceVulnerabilityAssessmentArrayOutputWithContext(ctx context.Context) ManagedInstanceVulnerabilityAssessmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceVulnerabilityAssessmentArrayOutput)
}

// ManagedInstanceVulnerabilityAssessmentMapInput is an input type that accepts ManagedInstanceVulnerabilityAssessmentMap and ManagedInstanceVulnerabilityAssessmentMapOutput values.
// You can construct a concrete instance of `ManagedInstanceVulnerabilityAssessmentMapInput` via:
//
//	ManagedInstanceVulnerabilityAssessmentMap{ "key": ManagedInstanceVulnerabilityAssessmentArgs{...} }
type ManagedInstanceVulnerabilityAssessmentMapInput interface {
	pulumi.Input

	ToManagedInstanceVulnerabilityAssessmentMapOutput() ManagedInstanceVulnerabilityAssessmentMapOutput
	ToManagedInstanceVulnerabilityAssessmentMapOutputWithContext(context.Context) ManagedInstanceVulnerabilityAssessmentMapOutput
}

type ManagedInstanceVulnerabilityAssessmentMap map[string]ManagedInstanceVulnerabilityAssessmentInput

func (ManagedInstanceVulnerabilityAssessmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceVulnerabilityAssessment)(nil)).Elem()
}

func (i ManagedInstanceVulnerabilityAssessmentMap) ToManagedInstanceVulnerabilityAssessmentMapOutput() ManagedInstanceVulnerabilityAssessmentMapOutput {
	return i.ToManagedInstanceVulnerabilityAssessmentMapOutputWithContext(context.Background())
}

func (i ManagedInstanceVulnerabilityAssessmentMap) ToManagedInstanceVulnerabilityAssessmentMapOutputWithContext(ctx context.Context) ManagedInstanceVulnerabilityAssessmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceVulnerabilityAssessmentMapOutput)
}

type ManagedInstanceVulnerabilityAssessmentOutput struct{ *pulumi.OutputState }

func (ManagedInstanceVulnerabilityAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceVulnerabilityAssessment)(nil)).Elem()
}

func (o ManagedInstanceVulnerabilityAssessmentOutput) ToManagedInstanceVulnerabilityAssessmentOutput() ManagedInstanceVulnerabilityAssessmentOutput {
	return o
}

func (o ManagedInstanceVulnerabilityAssessmentOutput) ToManagedInstanceVulnerabilityAssessmentOutputWithContext(ctx context.Context) ManagedInstanceVulnerabilityAssessmentOutput {
	return o
}

// The id of the MS SQL Managed Instance. Changing this forces a new resource to be created.
func (o ManagedInstanceVulnerabilityAssessmentOutput) ManagedInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceVulnerabilityAssessment) pulumi.StringOutput { return v.ManagedInstanceId }).(pulumi.StringOutput)
}

// The recurring scans settings. The `recurringScans` block supports fields documented below.
func (o ManagedInstanceVulnerabilityAssessmentOutput) RecurringScans() ManagedInstanceVulnerabilityAssessmentRecurringScansOutput {
	return o.ApplyT(func(v *ManagedInstanceVulnerabilityAssessment) ManagedInstanceVulnerabilityAssessmentRecurringScansOutput {
		return v.RecurringScans
	}).(ManagedInstanceVulnerabilityAssessmentRecurringScansOutput)
}

// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
//
// > **NOTE** The `storageAccountAccessKey` only applies if the storage account is not behind a virtual network or a firewall.
func (o ManagedInstanceVulnerabilityAssessmentOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceVulnerabilityAssessment) pulumi.StringPtrOutput {
		return v.StorageAccountAccessKey
	}).(pulumi.StringPtrOutput)
}

// A blob storage container path to hold the scan results (e.g. <https://myStorage.blob.core.windows.net/VaScans/>).
func (o ManagedInstanceVulnerabilityAssessmentOutput) StorageContainerPath() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceVulnerabilityAssessment) pulumi.StringOutput { return v.StorageContainerPath }).(pulumi.StringOutput)
}

// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
//
// > **NOTE** The `storageContainerSasKey` only applies if the storage account is not behind a virtual network or a firewall.
func (o ManagedInstanceVulnerabilityAssessmentOutput) StorageContainerSasKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceVulnerabilityAssessment) pulumi.StringPtrOutput {
		return v.StorageContainerSasKey
	}).(pulumi.StringPtrOutput)
}

type ManagedInstanceVulnerabilityAssessmentArrayOutput struct{ *pulumi.OutputState }

func (ManagedInstanceVulnerabilityAssessmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceVulnerabilityAssessment)(nil)).Elem()
}

func (o ManagedInstanceVulnerabilityAssessmentArrayOutput) ToManagedInstanceVulnerabilityAssessmentArrayOutput() ManagedInstanceVulnerabilityAssessmentArrayOutput {
	return o
}

func (o ManagedInstanceVulnerabilityAssessmentArrayOutput) ToManagedInstanceVulnerabilityAssessmentArrayOutputWithContext(ctx context.Context) ManagedInstanceVulnerabilityAssessmentArrayOutput {
	return o
}

func (o ManagedInstanceVulnerabilityAssessmentArrayOutput) Index(i pulumi.IntInput) ManagedInstanceVulnerabilityAssessmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedInstanceVulnerabilityAssessment {
		return vs[0].([]*ManagedInstanceVulnerabilityAssessment)[vs[1].(int)]
	}).(ManagedInstanceVulnerabilityAssessmentOutput)
}

type ManagedInstanceVulnerabilityAssessmentMapOutput struct{ *pulumi.OutputState }

func (ManagedInstanceVulnerabilityAssessmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceVulnerabilityAssessment)(nil)).Elem()
}

func (o ManagedInstanceVulnerabilityAssessmentMapOutput) ToManagedInstanceVulnerabilityAssessmentMapOutput() ManagedInstanceVulnerabilityAssessmentMapOutput {
	return o
}

func (o ManagedInstanceVulnerabilityAssessmentMapOutput) ToManagedInstanceVulnerabilityAssessmentMapOutputWithContext(ctx context.Context) ManagedInstanceVulnerabilityAssessmentMapOutput {
	return o
}

func (o ManagedInstanceVulnerabilityAssessmentMapOutput) MapIndex(k pulumi.StringInput) ManagedInstanceVulnerabilityAssessmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedInstanceVulnerabilityAssessment {
		return vs[0].(map[string]*ManagedInstanceVulnerabilityAssessment)[vs[1].(string)]
	}).(ManagedInstanceVulnerabilityAssessmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceVulnerabilityAssessmentInput)(nil)).Elem(), &ManagedInstanceVulnerabilityAssessment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceVulnerabilityAssessmentArrayInput)(nil)).Elem(), ManagedInstanceVulnerabilityAssessmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceVulnerabilityAssessmentMapInput)(nil)).Elem(), ManagedInstanceVulnerabilityAssessmentMap{})
	pulumi.RegisterOutputType(ManagedInstanceVulnerabilityAssessmentOutput{})
	pulumi.RegisterOutputType(ManagedInstanceVulnerabilityAssessmentArrayOutput{})
	pulumi.RegisterOutputType(ManagedInstanceVulnerabilityAssessmentMapOutput{})
}
