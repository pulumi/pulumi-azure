// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Ms Sql Database Extended Auditing Policy.
//
// > **NOTE:** The Database Extended Auditing Policy Can be set inline here as well as with the mssqlDatabaseExtendedAuditingPolicy resource resource. You can only use one or the other and using both will cause a conflict.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/mssql"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West Europe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleServer, err := mssql.NewServer(ctx, "exampleServer", &mssql.ServerArgs{
// 			ResourceGroupName:          exampleResourceGroup.Name,
// 			Location:                   exampleResourceGroup.Location,
// 			Version:                    pulumi.String("12.0"),
// 			AdministratorLogin:         pulumi.String("missadministrator"),
// 			AdministratorLoginPassword: pulumi.String("AdminPassword123!"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleDatabase, err := mssql.NewDatabase(ctx, "exampleDatabase", &mssql.DatabaseArgs{
// 			ServerId: exampleServer.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("LRS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = mssql.NewDatabaseExtendedAuditingPolicy(ctx, "exampleDatabaseExtendedAuditingPolicy", &mssql.DatabaseExtendedAuditingPolicyArgs{
// 			DatabaseId:                         exampleDatabase.ID(),
// 			StorageEndpoint:                    exampleAccount.PrimaryBlobEndpoint,
// 			StorageAccountAccessKey:            exampleAccount.PrimaryAccessKey,
// 			StorageAccountAccessKeyIsSecondary: pulumi.Bool(false),
// 			RetentionInDays:                    pulumi.Int(6),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Ms Sql Database Extended Auditing Policys can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:mssql/databaseExtendedAuditingPolicy:DatabaseExtendedAuditingPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlServer1/databases/db1/extendedAuditingSettings/default
// ```
type DatabaseExtendedAuditingPolicyType struct {
	pulumi.CustomResourceState

	// The ID of the sql database to set the extended auditing policy. Changing this forces a new resource to be created.
	DatabaseId           pulumi.StringOutput  `pulumi:"databaseId"`
	LogMonitoringEnabled pulumi.BoolPtrOutput `pulumi:"logMonitoringEnabled"`
	// The number of days to retain logs for in the storage account.
	RetentionInDays pulumi.IntPtrOutput `pulumi:"retentionInDays"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary pulumi.BoolPtrOutput `pulumi:"storageAccountAccessKeyIsSecondary"`
	// The blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all extended auditing logs.
	StorageEndpoint pulumi.StringPtrOutput `pulumi:"storageEndpoint"`
}

// NewDatabaseExtendedAuditingPolicyType registers a new resource with the given unique name, arguments, and options.
func NewDatabaseExtendedAuditingPolicyType(ctx *pulumi.Context,
	name string, args *DatabaseExtendedAuditingPolicyTypeArgs, opts ...pulumi.ResourceOption) (*DatabaseExtendedAuditingPolicyType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	var resource DatabaseExtendedAuditingPolicyType
	err := ctx.RegisterResource("azure:mssql/databaseExtendedAuditingPolicy:DatabaseExtendedAuditingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseExtendedAuditingPolicyType gets an existing DatabaseExtendedAuditingPolicyType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseExtendedAuditingPolicyType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseExtendedAuditingPolicyTypeState, opts ...pulumi.ResourceOption) (*DatabaseExtendedAuditingPolicyType, error) {
	var resource DatabaseExtendedAuditingPolicyType
	err := ctx.ReadResource("azure:mssql/databaseExtendedAuditingPolicy:DatabaseExtendedAuditingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseExtendedAuditingPolicyType resources.
type databaseExtendedAuditingPolicyTypeState struct {
	// The ID of the sql database to set the extended auditing policy. Changing this forces a new resource to be created.
	DatabaseId           *string `pulumi:"databaseId"`
	LogMonitoringEnabled *bool   `pulumi:"logMonitoringEnabled"`
	// The number of days to retain logs for in the storage account.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary *bool `pulumi:"storageAccountAccessKeyIsSecondary"`
	// The blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all extended auditing logs.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

type DatabaseExtendedAuditingPolicyTypeState struct {
	// The ID of the sql database to set the extended auditing policy. Changing this forces a new resource to be created.
	DatabaseId           pulumi.StringPtrInput
	LogMonitoringEnabled pulumi.BoolPtrInput
	// The number of days to retain logs for in the storage account.
	RetentionInDays pulumi.IntPtrInput
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrInput
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary pulumi.BoolPtrInput
	// The blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all extended auditing logs.
	StorageEndpoint pulumi.StringPtrInput
}

func (DatabaseExtendedAuditingPolicyTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseExtendedAuditingPolicyTypeState)(nil)).Elem()
}

type databaseExtendedAuditingPolicyTypeArgs struct {
	// The ID of the sql database to set the extended auditing policy. Changing this forces a new resource to be created.
	DatabaseId           string `pulumi:"databaseId"`
	LogMonitoringEnabled *bool  `pulumi:"logMonitoringEnabled"`
	// The number of days to retain logs for in the storage account.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary *bool `pulumi:"storageAccountAccessKeyIsSecondary"`
	// The blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all extended auditing logs.
	StorageEndpoint *string `pulumi:"storageEndpoint"`
}

// The set of arguments for constructing a DatabaseExtendedAuditingPolicyType resource.
type DatabaseExtendedAuditingPolicyTypeArgs struct {
	// The ID of the sql database to set the extended auditing policy. Changing this forces a new resource to be created.
	DatabaseId           pulumi.StringInput
	LogMonitoringEnabled pulumi.BoolPtrInput
	// The number of days to retain logs for in the storage account.
	RetentionInDays pulumi.IntPtrInput
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrInput
	// Is `storageAccountAccessKey` value the storage's secondary key?
	StorageAccountAccessKeyIsSecondary pulumi.BoolPtrInput
	// The blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all extended auditing logs.
	StorageEndpoint pulumi.StringPtrInput
}

func (DatabaseExtendedAuditingPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseExtendedAuditingPolicyTypeArgs)(nil)).Elem()
}

type DatabaseExtendedAuditingPolicyTypeInput interface {
	pulumi.Input

	ToDatabaseExtendedAuditingPolicyTypeOutput() DatabaseExtendedAuditingPolicyTypeOutput
	ToDatabaseExtendedAuditingPolicyTypeOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyTypeOutput
}

func (*DatabaseExtendedAuditingPolicyType) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseExtendedAuditingPolicyType)(nil))
}

func (i *DatabaseExtendedAuditingPolicyType) ToDatabaseExtendedAuditingPolicyTypeOutput() DatabaseExtendedAuditingPolicyTypeOutput {
	return i.ToDatabaseExtendedAuditingPolicyTypeOutputWithContext(context.Background())
}

func (i *DatabaseExtendedAuditingPolicyType) ToDatabaseExtendedAuditingPolicyTypeOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExtendedAuditingPolicyTypeOutput)
}

func (i *DatabaseExtendedAuditingPolicyType) ToDatabaseExtendedAuditingPolicyTypePtrOutput() DatabaseExtendedAuditingPolicyTypePtrOutput {
	return i.ToDatabaseExtendedAuditingPolicyTypePtrOutputWithContext(context.Background())
}

func (i *DatabaseExtendedAuditingPolicyType) ToDatabaseExtendedAuditingPolicyTypePtrOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExtendedAuditingPolicyTypePtrOutput)
}

type DatabaseExtendedAuditingPolicyTypePtrInput interface {
	pulumi.Input

	ToDatabaseExtendedAuditingPolicyTypePtrOutput() DatabaseExtendedAuditingPolicyTypePtrOutput
	ToDatabaseExtendedAuditingPolicyTypePtrOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyTypePtrOutput
}

type databaseExtendedAuditingPolicyTypePtrType DatabaseExtendedAuditingPolicyTypeArgs

func (*databaseExtendedAuditingPolicyTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseExtendedAuditingPolicyType)(nil))
}

func (i *databaseExtendedAuditingPolicyTypePtrType) ToDatabaseExtendedAuditingPolicyTypePtrOutput() DatabaseExtendedAuditingPolicyTypePtrOutput {
	return i.ToDatabaseExtendedAuditingPolicyTypePtrOutputWithContext(context.Background())
}

func (i *databaseExtendedAuditingPolicyTypePtrType) ToDatabaseExtendedAuditingPolicyTypePtrOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExtendedAuditingPolicyTypePtrOutput)
}

// DatabaseExtendedAuditingPolicyTypeArrayInput is an input type that accepts DatabaseExtendedAuditingPolicyTypeArray and DatabaseExtendedAuditingPolicyTypeArrayOutput values.
// You can construct a concrete instance of `DatabaseExtendedAuditingPolicyTypeArrayInput` via:
//
//          DatabaseExtendedAuditingPolicyTypeArray{ DatabaseExtendedAuditingPolicyTypeArgs{...} }
type DatabaseExtendedAuditingPolicyTypeArrayInput interface {
	pulumi.Input

	ToDatabaseExtendedAuditingPolicyTypeArrayOutput() DatabaseExtendedAuditingPolicyTypeArrayOutput
	ToDatabaseExtendedAuditingPolicyTypeArrayOutputWithContext(context.Context) DatabaseExtendedAuditingPolicyTypeArrayOutput
}

type DatabaseExtendedAuditingPolicyTypeArray []DatabaseExtendedAuditingPolicyTypeInput

func (DatabaseExtendedAuditingPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseExtendedAuditingPolicyType)(nil)).Elem()
}

func (i DatabaseExtendedAuditingPolicyTypeArray) ToDatabaseExtendedAuditingPolicyTypeArrayOutput() DatabaseExtendedAuditingPolicyTypeArrayOutput {
	return i.ToDatabaseExtendedAuditingPolicyTypeArrayOutputWithContext(context.Background())
}

func (i DatabaseExtendedAuditingPolicyTypeArray) ToDatabaseExtendedAuditingPolicyTypeArrayOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExtendedAuditingPolicyTypeArrayOutput)
}

// DatabaseExtendedAuditingPolicyTypeMapInput is an input type that accepts DatabaseExtendedAuditingPolicyTypeMap and DatabaseExtendedAuditingPolicyTypeMapOutput values.
// You can construct a concrete instance of `DatabaseExtendedAuditingPolicyTypeMapInput` via:
//
//          DatabaseExtendedAuditingPolicyTypeMap{ "key": DatabaseExtendedAuditingPolicyTypeArgs{...} }
type DatabaseExtendedAuditingPolicyTypeMapInput interface {
	pulumi.Input

	ToDatabaseExtendedAuditingPolicyTypeMapOutput() DatabaseExtendedAuditingPolicyTypeMapOutput
	ToDatabaseExtendedAuditingPolicyTypeMapOutputWithContext(context.Context) DatabaseExtendedAuditingPolicyTypeMapOutput
}

type DatabaseExtendedAuditingPolicyTypeMap map[string]DatabaseExtendedAuditingPolicyTypeInput

func (DatabaseExtendedAuditingPolicyTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseExtendedAuditingPolicyType)(nil)).Elem()
}

func (i DatabaseExtendedAuditingPolicyTypeMap) ToDatabaseExtendedAuditingPolicyTypeMapOutput() DatabaseExtendedAuditingPolicyTypeMapOutput {
	return i.ToDatabaseExtendedAuditingPolicyTypeMapOutputWithContext(context.Background())
}

func (i DatabaseExtendedAuditingPolicyTypeMap) ToDatabaseExtendedAuditingPolicyTypeMapOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExtendedAuditingPolicyTypeMapOutput)
}

type DatabaseExtendedAuditingPolicyTypeOutput struct{ *pulumi.OutputState }

func (DatabaseExtendedAuditingPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseExtendedAuditingPolicyType)(nil))
}

func (o DatabaseExtendedAuditingPolicyTypeOutput) ToDatabaseExtendedAuditingPolicyTypeOutput() DatabaseExtendedAuditingPolicyTypeOutput {
	return o
}

func (o DatabaseExtendedAuditingPolicyTypeOutput) ToDatabaseExtendedAuditingPolicyTypeOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyTypeOutput {
	return o
}

func (o DatabaseExtendedAuditingPolicyTypeOutput) ToDatabaseExtendedAuditingPolicyTypePtrOutput() DatabaseExtendedAuditingPolicyTypePtrOutput {
	return o.ToDatabaseExtendedAuditingPolicyTypePtrOutputWithContext(context.Background())
}

func (o DatabaseExtendedAuditingPolicyTypeOutput) ToDatabaseExtendedAuditingPolicyTypePtrOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseExtendedAuditingPolicyType) *DatabaseExtendedAuditingPolicyType {
		return &v
	}).(DatabaseExtendedAuditingPolicyTypePtrOutput)
}

type DatabaseExtendedAuditingPolicyTypePtrOutput struct{ *pulumi.OutputState }

func (DatabaseExtendedAuditingPolicyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseExtendedAuditingPolicyType)(nil))
}

func (o DatabaseExtendedAuditingPolicyTypePtrOutput) ToDatabaseExtendedAuditingPolicyTypePtrOutput() DatabaseExtendedAuditingPolicyTypePtrOutput {
	return o
}

func (o DatabaseExtendedAuditingPolicyTypePtrOutput) ToDatabaseExtendedAuditingPolicyTypePtrOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyTypePtrOutput {
	return o
}

func (o DatabaseExtendedAuditingPolicyTypePtrOutput) Elem() DatabaseExtendedAuditingPolicyTypeOutput {
	return o.ApplyT(func(v *DatabaseExtendedAuditingPolicyType) DatabaseExtendedAuditingPolicyType {
		if v != nil {
			return *v
		}
		var ret DatabaseExtendedAuditingPolicyType
		return ret
	}).(DatabaseExtendedAuditingPolicyTypeOutput)
}

type DatabaseExtendedAuditingPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (DatabaseExtendedAuditingPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseExtendedAuditingPolicyType)(nil))
}

func (o DatabaseExtendedAuditingPolicyTypeArrayOutput) ToDatabaseExtendedAuditingPolicyTypeArrayOutput() DatabaseExtendedAuditingPolicyTypeArrayOutput {
	return o
}

func (o DatabaseExtendedAuditingPolicyTypeArrayOutput) ToDatabaseExtendedAuditingPolicyTypeArrayOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyTypeArrayOutput {
	return o
}

func (o DatabaseExtendedAuditingPolicyTypeArrayOutput) Index(i pulumi.IntInput) DatabaseExtendedAuditingPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseExtendedAuditingPolicyType {
		return vs[0].([]DatabaseExtendedAuditingPolicyType)[vs[1].(int)]
	}).(DatabaseExtendedAuditingPolicyTypeOutput)
}

type DatabaseExtendedAuditingPolicyTypeMapOutput struct{ *pulumi.OutputState }

func (DatabaseExtendedAuditingPolicyTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseExtendedAuditingPolicyType)(nil))
}

func (o DatabaseExtendedAuditingPolicyTypeMapOutput) ToDatabaseExtendedAuditingPolicyTypeMapOutput() DatabaseExtendedAuditingPolicyTypeMapOutput {
	return o
}

func (o DatabaseExtendedAuditingPolicyTypeMapOutput) ToDatabaseExtendedAuditingPolicyTypeMapOutputWithContext(ctx context.Context) DatabaseExtendedAuditingPolicyTypeMapOutput {
	return o
}

func (o DatabaseExtendedAuditingPolicyTypeMapOutput) MapIndex(k pulumi.StringInput) DatabaseExtendedAuditingPolicyTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabaseExtendedAuditingPolicyType {
		return vs[0].(map[string]DatabaseExtendedAuditingPolicyType)[vs[1].(string)]
	}).(DatabaseExtendedAuditingPolicyTypeOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseExtendedAuditingPolicyTypeOutput{})
	pulumi.RegisterOutputType(DatabaseExtendedAuditingPolicyTypePtrOutput{})
	pulumi.RegisterOutputType(DatabaseExtendedAuditingPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(DatabaseExtendedAuditingPolicyTypeMapOutput{})
}
