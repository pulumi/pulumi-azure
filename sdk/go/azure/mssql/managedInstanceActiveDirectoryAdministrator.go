// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows you to set a user, group or service principal as the AAD Administrator for an Azure SQL Managed Instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mssql"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleManagedInstance, err := mssql.NewManagedInstance(ctx, "exampleManagedInstance", &mssql.ManagedInstanceArgs{
//				ResourceGroupName:          exampleResourceGroup.Name,
//				Location:                   exampleResourceGroup.Location,
//				LicenseType:                pulumi.String("BasePrice"),
//				SkuName:                    pulumi.String("GP_Gen5"),
//				StorageSizeInGb:            pulumi.Int(32),
//				SubnetId:                   exampleSubnet.ID(),
//				Vcores:                     pulumi.Int(4),
//				AdministratorLogin:         pulumi.String("msadministrator"),
//				AdministratorLoginPassword: pulumi.String("thisIsDog11"),
//				Identity: &mssql.ManagedInstanceIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			reader, err := azuread.NewDirectoryRole(ctx, "reader", &azuread.DirectoryRoleArgs{
//				DisplayName: pulumi.String("Directory Readers"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuread.NewDirectoryRoleMember(ctx, "exampleDirectoryRoleMember", &azuread.DirectoryRoleMemberArgs{
//				RoleObjectId: reader.ObjectId,
//				MemberObjectId: exampleManagedInstance.Identity.ApplyT(func(identity mssql.ManagedInstanceIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput),
//			})
//			if err != nil {
//				return err
//			}
//			admin, err := azuread.NewUser(ctx, "admin", &azuread.UserArgs{
//				UserPrincipalName: pulumi.String("ms.admin@hashicorp.com"),
//				DisplayName:       pulumi.String("Ms Admin"),
//				MailNickname:      pulumi.String("ms.admin"),
//				Password:          pulumi.String("SecretP@sswd99!"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mssql.NewManagedInstanceActiveDirectoryAdministrator(ctx, "exampleManagedInstanceActiveDirectoryAdministrator", &mssql.ManagedInstanceActiveDirectoryAdministratorArgs{
//				ManagedInstanceId: exampleManagedInstance.ID(),
//				LoginUsername:     pulumi.String("msadmin"),
//				ObjectId:          admin.ObjectId,
//				TenantId:          *pulumi.String(current.TenantId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An Azure SQL Active Directory Administrator can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:mssql/managedInstanceActiveDirectoryAdministrator:ManagedInstanceActiveDirectoryAdministrator administrator /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/managedInstances/mymanagedinstance/administrators/activeDirectory
//
// ```
type ManagedInstanceActiveDirectoryAdministrator struct {
	pulumi.CustomResourceState

	// When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users.
	AzureadAuthenticationOnly pulumi.BoolPtrOutput `pulumi:"azureadAuthenticationOnly"`
	// The login name of the principal to set as the Managed Instance Administrator.
	LoginUsername pulumi.StringOutput `pulumi:"loginUsername"`
	// The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.
	ManagedInstanceId pulumi.StringOutput `pulumi:"managedInstanceId"`
	// The Object ID of the principal to set as the Managed Instance Administrator.
	ObjectId pulumi.StringOutput `pulumi:"objectId"`
	// The Azure Active Directory Tenant ID.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewManagedInstanceActiveDirectoryAdministrator registers a new resource with the given unique name, arguments, and options.
func NewManagedInstanceActiveDirectoryAdministrator(ctx *pulumi.Context,
	name string, args *ManagedInstanceActiveDirectoryAdministratorArgs, opts ...pulumi.ResourceOption) (*ManagedInstanceActiveDirectoryAdministrator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoginUsername == nil {
		return nil, errors.New("invalid value for required argument 'LoginUsername'")
	}
	if args.ManagedInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'ManagedInstanceId'")
	}
	if args.ObjectId == nil {
		return nil, errors.New("invalid value for required argument 'ObjectId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedInstanceActiveDirectoryAdministrator
	err := ctx.RegisterResource("azure:mssql/managedInstanceActiveDirectoryAdministrator:ManagedInstanceActiveDirectoryAdministrator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedInstanceActiveDirectoryAdministrator gets an existing ManagedInstanceActiveDirectoryAdministrator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedInstanceActiveDirectoryAdministrator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedInstanceActiveDirectoryAdministratorState, opts ...pulumi.ResourceOption) (*ManagedInstanceActiveDirectoryAdministrator, error) {
	var resource ManagedInstanceActiveDirectoryAdministrator
	err := ctx.ReadResource("azure:mssql/managedInstanceActiveDirectoryAdministrator:ManagedInstanceActiveDirectoryAdministrator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedInstanceActiveDirectoryAdministrator resources.
type managedInstanceActiveDirectoryAdministratorState struct {
	// When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users.
	AzureadAuthenticationOnly *bool `pulumi:"azureadAuthenticationOnly"`
	// The login name of the principal to set as the Managed Instance Administrator.
	LoginUsername *string `pulumi:"loginUsername"`
	// The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.
	ManagedInstanceId *string `pulumi:"managedInstanceId"`
	// The Object ID of the principal to set as the Managed Instance Administrator.
	ObjectId *string `pulumi:"objectId"`
	// The Azure Active Directory Tenant ID.
	TenantId *string `pulumi:"tenantId"`
}

type ManagedInstanceActiveDirectoryAdministratorState struct {
	// When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users.
	AzureadAuthenticationOnly pulumi.BoolPtrInput
	// The login name of the principal to set as the Managed Instance Administrator.
	LoginUsername pulumi.StringPtrInput
	// The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.
	ManagedInstanceId pulumi.StringPtrInput
	// The Object ID of the principal to set as the Managed Instance Administrator.
	ObjectId pulumi.StringPtrInput
	// The Azure Active Directory Tenant ID.
	TenantId pulumi.StringPtrInput
}

func (ManagedInstanceActiveDirectoryAdministratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceActiveDirectoryAdministratorState)(nil)).Elem()
}

type managedInstanceActiveDirectoryAdministratorArgs struct {
	// When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users.
	AzureadAuthenticationOnly *bool `pulumi:"azureadAuthenticationOnly"`
	// The login name of the principal to set as the Managed Instance Administrator.
	LoginUsername string `pulumi:"loginUsername"`
	// The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.
	ManagedInstanceId string `pulumi:"managedInstanceId"`
	// The Object ID of the principal to set as the Managed Instance Administrator.
	ObjectId string `pulumi:"objectId"`
	// The Azure Active Directory Tenant ID.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a ManagedInstanceActiveDirectoryAdministrator resource.
type ManagedInstanceActiveDirectoryAdministratorArgs struct {
	// When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users.
	AzureadAuthenticationOnly pulumi.BoolPtrInput
	// The login name of the principal to set as the Managed Instance Administrator.
	LoginUsername pulumi.StringInput
	// The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.
	ManagedInstanceId pulumi.StringInput
	// The Object ID of the principal to set as the Managed Instance Administrator.
	ObjectId pulumi.StringInput
	// The Azure Active Directory Tenant ID.
	TenantId pulumi.StringInput
}

func (ManagedInstanceActiveDirectoryAdministratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceActiveDirectoryAdministratorArgs)(nil)).Elem()
}

type ManagedInstanceActiveDirectoryAdministratorInput interface {
	pulumi.Input

	ToManagedInstanceActiveDirectoryAdministratorOutput() ManagedInstanceActiveDirectoryAdministratorOutput
	ToManagedInstanceActiveDirectoryAdministratorOutputWithContext(ctx context.Context) ManagedInstanceActiveDirectoryAdministratorOutput
}

func (*ManagedInstanceActiveDirectoryAdministrator) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceActiveDirectoryAdministrator)(nil)).Elem()
}

func (i *ManagedInstanceActiveDirectoryAdministrator) ToManagedInstanceActiveDirectoryAdministratorOutput() ManagedInstanceActiveDirectoryAdministratorOutput {
	return i.ToManagedInstanceActiveDirectoryAdministratorOutputWithContext(context.Background())
}

func (i *ManagedInstanceActiveDirectoryAdministrator) ToManagedInstanceActiveDirectoryAdministratorOutputWithContext(ctx context.Context) ManagedInstanceActiveDirectoryAdministratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceActiveDirectoryAdministratorOutput)
}

// ManagedInstanceActiveDirectoryAdministratorArrayInput is an input type that accepts ManagedInstanceActiveDirectoryAdministratorArray and ManagedInstanceActiveDirectoryAdministratorArrayOutput values.
// You can construct a concrete instance of `ManagedInstanceActiveDirectoryAdministratorArrayInput` via:
//
//	ManagedInstanceActiveDirectoryAdministratorArray{ ManagedInstanceActiveDirectoryAdministratorArgs{...} }
type ManagedInstanceActiveDirectoryAdministratorArrayInput interface {
	pulumi.Input

	ToManagedInstanceActiveDirectoryAdministratorArrayOutput() ManagedInstanceActiveDirectoryAdministratorArrayOutput
	ToManagedInstanceActiveDirectoryAdministratorArrayOutputWithContext(context.Context) ManagedInstanceActiveDirectoryAdministratorArrayOutput
}

type ManagedInstanceActiveDirectoryAdministratorArray []ManagedInstanceActiveDirectoryAdministratorInput

func (ManagedInstanceActiveDirectoryAdministratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceActiveDirectoryAdministrator)(nil)).Elem()
}

func (i ManagedInstanceActiveDirectoryAdministratorArray) ToManagedInstanceActiveDirectoryAdministratorArrayOutput() ManagedInstanceActiveDirectoryAdministratorArrayOutput {
	return i.ToManagedInstanceActiveDirectoryAdministratorArrayOutputWithContext(context.Background())
}

func (i ManagedInstanceActiveDirectoryAdministratorArray) ToManagedInstanceActiveDirectoryAdministratorArrayOutputWithContext(ctx context.Context) ManagedInstanceActiveDirectoryAdministratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceActiveDirectoryAdministratorArrayOutput)
}

// ManagedInstanceActiveDirectoryAdministratorMapInput is an input type that accepts ManagedInstanceActiveDirectoryAdministratorMap and ManagedInstanceActiveDirectoryAdministratorMapOutput values.
// You can construct a concrete instance of `ManagedInstanceActiveDirectoryAdministratorMapInput` via:
//
//	ManagedInstanceActiveDirectoryAdministratorMap{ "key": ManagedInstanceActiveDirectoryAdministratorArgs{...} }
type ManagedInstanceActiveDirectoryAdministratorMapInput interface {
	pulumi.Input

	ToManagedInstanceActiveDirectoryAdministratorMapOutput() ManagedInstanceActiveDirectoryAdministratorMapOutput
	ToManagedInstanceActiveDirectoryAdministratorMapOutputWithContext(context.Context) ManagedInstanceActiveDirectoryAdministratorMapOutput
}

type ManagedInstanceActiveDirectoryAdministratorMap map[string]ManagedInstanceActiveDirectoryAdministratorInput

func (ManagedInstanceActiveDirectoryAdministratorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceActiveDirectoryAdministrator)(nil)).Elem()
}

func (i ManagedInstanceActiveDirectoryAdministratorMap) ToManagedInstanceActiveDirectoryAdministratorMapOutput() ManagedInstanceActiveDirectoryAdministratorMapOutput {
	return i.ToManagedInstanceActiveDirectoryAdministratorMapOutputWithContext(context.Background())
}

func (i ManagedInstanceActiveDirectoryAdministratorMap) ToManagedInstanceActiveDirectoryAdministratorMapOutputWithContext(ctx context.Context) ManagedInstanceActiveDirectoryAdministratorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceActiveDirectoryAdministratorMapOutput)
}

type ManagedInstanceActiveDirectoryAdministratorOutput struct{ *pulumi.OutputState }

func (ManagedInstanceActiveDirectoryAdministratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceActiveDirectoryAdministrator)(nil)).Elem()
}

func (o ManagedInstanceActiveDirectoryAdministratorOutput) ToManagedInstanceActiveDirectoryAdministratorOutput() ManagedInstanceActiveDirectoryAdministratorOutput {
	return o
}

func (o ManagedInstanceActiveDirectoryAdministratorOutput) ToManagedInstanceActiveDirectoryAdministratorOutputWithContext(ctx context.Context) ManagedInstanceActiveDirectoryAdministratorOutput {
	return o
}

// When `true`, only permit logins from AAD users and administrators. When `false`, also allow local database users.
func (o ManagedInstanceActiveDirectoryAdministratorOutput) AzureadAuthenticationOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceActiveDirectoryAdministrator) pulumi.BoolPtrOutput {
		return v.AzureadAuthenticationOnly
	}).(pulumi.BoolPtrOutput)
}

// The login name of the principal to set as the Managed Instance Administrator.
func (o ManagedInstanceActiveDirectoryAdministratorOutput) LoginUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceActiveDirectoryAdministrator) pulumi.StringOutput { return v.LoginUsername }).(pulumi.StringOutput)
}

// The ID of the Azure SQL Managed Instance for which to set the administrator. Changing this forces a new resource to be created.
func (o ManagedInstanceActiveDirectoryAdministratorOutput) ManagedInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceActiveDirectoryAdministrator) pulumi.StringOutput { return v.ManagedInstanceId }).(pulumi.StringOutput)
}

// The Object ID of the principal to set as the Managed Instance Administrator.
func (o ManagedInstanceActiveDirectoryAdministratorOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceActiveDirectoryAdministrator) pulumi.StringOutput { return v.ObjectId }).(pulumi.StringOutput)
}

// The Azure Active Directory Tenant ID.
func (o ManagedInstanceActiveDirectoryAdministratorOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceActiveDirectoryAdministrator) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type ManagedInstanceActiveDirectoryAdministratorArrayOutput struct{ *pulumi.OutputState }

func (ManagedInstanceActiveDirectoryAdministratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceActiveDirectoryAdministrator)(nil)).Elem()
}

func (o ManagedInstanceActiveDirectoryAdministratorArrayOutput) ToManagedInstanceActiveDirectoryAdministratorArrayOutput() ManagedInstanceActiveDirectoryAdministratorArrayOutput {
	return o
}

func (o ManagedInstanceActiveDirectoryAdministratorArrayOutput) ToManagedInstanceActiveDirectoryAdministratorArrayOutputWithContext(ctx context.Context) ManagedInstanceActiveDirectoryAdministratorArrayOutput {
	return o
}

func (o ManagedInstanceActiveDirectoryAdministratorArrayOutput) Index(i pulumi.IntInput) ManagedInstanceActiveDirectoryAdministratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedInstanceActiveDirectoryAdministrator {
		return vs[0].([]*ManagedInstanceActiveDirectoryAdministrator)[vs[1].(int)]
	}).(ManagedInstanceActiveDirectoryAdministratorOutput)
}

type ManagedInstanceActiveDirectoryAdministratorMapOutput struct{ *pulumi.OutputState }

func (ManagedInstanceActiveDirectoryAdministratorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceActiveDirectoryAdministrator)(nil)).Elem()
}

func (o ManagedInstanceActiveDirectoryAdministratorMapOutput) ToManagedInstanceActiveDirectoryAdministratorMapOutput() ManagedInstanceActiveDirectoryAdministratorMapOutput {
	return o
}

func (o ManagedInstanceActiveDirectoryAdministratorMapOutput) ToManagedInstanceActiveDirectoryAdministratorMapOutputWithContext(ctx context.Context) ManagedInstanceActiveDirectoryAdministratorMapOutput {
	return o
}

func (o ManagedInstanceActiveDirectoryAdministratorMapOutput) MapIndex(k pulumi.StringInput) ManagedInstanceActiveDirectoryAdministratorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedInstanceActiveDirectoryAdministrator {
		return vs[0].(map[string]*ManagedInstanceActiveDirectoryAdministrator)[vs[1].(string)]
	}).(ManagedInstanceActiveDirectoryAdministratorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceActiveDirectoryAdministratorInput)(nil)).Elem(), &ManagedInstanceActiveDirectoryAdministrator{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceActiveDirectoryAdministratorArrayInput)(nil)).Elem(), ManagedInstanceActiveDirectoryAdministratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceActiveDirectoryAdministratorMapInput)(nil)).Elem(), ManagedInstanceActiveDirectoryAdministratorMap{})
	pulumi.RegisterOutputType(ManagedInstanceActiveDirectoryAdministratorOutput{})
	pulumi.RegisterOutputType(ManagedInstanceActiveDirectoryAdministratorArrayOutput{})
	pulumi.RegisterOutputType(ManagedInstanceActiveDirectoryAdministratorMapOutput{})
}
