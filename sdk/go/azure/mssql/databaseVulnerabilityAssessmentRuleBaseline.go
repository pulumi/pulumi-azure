// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Database Vulnerability Assessment Rule Baseline.
//
// > **NOTE** Database Vulnerability Assessment is currently only available for MS SQL databases.
type DatabaseVulnerabilityAssessmentRuleBaseline struct {
	pulumi.CustomResourceState

	// The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
	BaselineName pulumi.StringPtrOutput `pulumi:"baselineName"`
	// A `baselineResult` block as documented below. Multiple blocks can be defined.
	BaselineResults DatabaseVulnerabilityAssessmentRuleBaselineBaselineResultArrayOutput `pulumi:"baselineResults"`
	// Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// The vulnerability assessment rule ID. Changing this forces a new resource to be created.
	RuleId pulumi.StringOutput `pulumi:"ruleId"`
	// The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
	ServerVulnerabilityAssessmentId pulumi.StringOutput `pulumi:"serverVulnerabilityAssessmentId"`
}

// NewDatabaseVulnerabilityAssessmentRuleBaseline registers a new resource with the given unique name, arguments, and options.
func NewDatabaseVulnerabilityAssessmentRuleBaseline(ctx *pulumi.Context,
	name string, args *DatabaseVulnerabilityAssessmentRuleBaselineArgs, opts ...pulumi.ResourceOption) (*DatabaseVulnerabilityAssessmentRuleBaseline, error) {
	if args == nil || args.BaselineResults == nil {
		return nil, errors.New("missing required argument 'BaselineResults'")
	}
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.RuleId == nil {
		return nil, errors.New("missing required argument 'RuleId'")
	}
	if args == nil || args.ServerVulnerabilityAssessmentId == nil {
		return nil, errors.New("missing required argument 'ServerVulnerabilityAssessmentId'")
	}
	if args == nil {
		args = &DatabaseVulnerabilityAssessmentRuleBaselineArgs{}
	}
	var resource DatabaseVulnerabilityAssessmentRuleBaseline
	err := ctx.RegisterResource("azure:mssql/databaseVulnerabilityAssessmentRuleBaseline:DatabaseVulnerabilityAssessmentRuleBaseline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseVulnerabilityAssessmentRuleBaseline gets an existing DatabaseVulnerabilityAssessmentRuleBaseline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseVulnerabilityAssessmentRuleBaseline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseVulnerabilityAssessmentRuleBaselineState, opts ...pulumi.ResourceOption) (*DatabaseVulnerabilityAssessmentRuleBaseline, error) {
	var resource DatabaseVulnerabilityAssessmentRuleBaseline
	err := ctx.ReadResource("azure:mssql/databaseVulnerabilityAssessmentRuleBaseline:DatabaseVulnerabilityAssessmentRuleBaseline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseVulnerabilityAssessmentRuleBaseline resources.
type databaseVulnerabilityAssessmentRuleBaselineState struct {
	// The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
	BaselineName *string `pulumi:"baselineName"`
	// A `baselineResult` block as documented below. Multiple blocks can be defined.
	BaselineResults []DatabaseVulnerabilityAssessmentRuleBaselineBaselineResult `pulumi:"baselineResults"`
	// Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
	DatabaseName *string `pulumi:"databaseName"`
	// The vulnerability assessment rule ID. Changing this forces a new resource to be created.
	RuleId *string `pulumi:"ruleId"`
	// The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
	ServerVulnerabilityAssessmentId *string `pulumi:"serverVulnerabilityAssessmentId"`
}

type DatabaseVulnerabilityAssessmentRuleBaselineState struct {
	// The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
	BaselineName pulumi.StringPtrInput
	// A `baselineResult` block as documented below. Multiple blocks can be defined.
	BaselineResults DatabaseVulnerabilityAssessmentRuleBaselineBaselineResultArrayInput
	// Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringPtrInput
	// The vulnerability assessment rule ID. Changing this forces a new resource to be created.
	RuleId pulumi.StringPtrInput
	// The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
	ServerVulnerabilityAssessmentId pulumi.StringPtrInput
}

func (DatabaseVulnerabilityAssessmentRuleBaselineState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseVulnerabilityAssessmentRuleBaselineState)(nil)).Elem()
}

type databaseVulnerabilityAssessmentRuleBaselineArgs struct {
	// The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
	BaselineName *string `pulumi:"baselineName"`
	// A `baselineResult` block as documented below. Multiple blocks can be defined.
	BaselineResults []DatabaseVulnerabilityAssessmentRuleBaselineBaselineResult `pulumi:"baselineResults"`
	// Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
	DatabaseName string `pulumi:"databaseName"`
	// The vulnerability assessment rule ID. Changing this forces a new resource to be created.
	RuleId string `pulumi:"ruleId"`
	// The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
	ServerVulnerabilityAssessmentId string `pulumi:"serverVulnerabilityAssessmentId"`
}

// The set of arguments for constructing a DatabaseVulnerabilityAssessmentRuleBaseline resource.
type DatabaseVulnerabilityAssessmentRuleBaselineArgs struct {
	// The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
	BaselineName pulumi.StringPtrInput
	// A `baselineResult` block as documented below. Multiple blocks can be defined.
	BaselineResults DatabaseVulnerabilityAssessmentRuleBaselineBaselineResultArrayInput
	// Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringInput
	// The vulnerability assessment rule ID. Changing this forces a new resource to be created.
	RuleId pulumi.StringInput
	// The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
	ServerVulnerabilityAssessmentId pulumi.StringInput
}

func (DatabaseVulnerabilityAssessmentRuleBaselineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseVulnerabilityAssessmentRuleBaselineArgs)(nil)).Elem()
}
