// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a MS SQL Server Microsoft Support Auditing Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mssql"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServer, err := mssql.NewServer(ctx, "exampleServer", &mssql.ServerArgs{
//				ResourceGroupName:          exampleResourceGroup.Name,
//				Location:                   exampleResourceGroup.Location,
//				Version:                    pulumi.String("12.0"),
//				AdministratorLogin:         pulumi.String("missadministrator"),
//				AdministratorLoginPassword: pulumi.String("AdminPassword123!"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mssql.NewServerMicrosoftSupportAuditingPolicy(ctx, "exampleServerMicrosoftSupportAuditingPolicy", &mssql.ServerMicrosoftSupportAuditingPolicyArgs{
//				ServerId:                exampleServer.ID(),
//				BlobStorageEndpoint:     exampleAccount.PrimaryBlobEndpoint,
//				StorageAccountAccessKey: exampleAccount.PrimaryAccessKey,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With Storage Account Behind VNet And Firewall
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/authorization"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mssql"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/sql"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			primary, err := core.LookupSubscription(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVirtualNetwork, err := network.NewVirtualNetwork(ctx, "exampleVirtualNetwork", &network.VirtualNetworkArgs{
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			exampleSubnet, err := network.NewSubnet(ctx, "exampleSubnet", &network.SubnetArgs{
//				ResourceGroupName:  exampleResourceGroup.Name,
//				VirtualNetworkName: exampleVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.2.0/24"),
//				},
//				ServiceEndpoints: pulumi.StringArray{
//					pulumi.String("Microsoft.Sql"),
//					pulumi.String("Microsoft.Storage"),
//				},
//				EnforcePrivateLinkEndpointNetworkPolicies: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServer, err := mssql.NewServer(ctx, "exampleServer", &mssql.ServerArgs{
//				ResourceGroupName:          exampleResourceGroup.Name,
//				Location:                   exampleResourceGroup.Location,
//				Version:                    pulumi.String("12.0"),
//				AdministratorLogin:         pulumi.String("missadministrator"),
//				AdministratorLoginPassword: pulumi.String("AdminPassword123!"),
//				MinimumTlsVersion:          pulumi.String("1.2"),
//				Identity: &mssql.ServerIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleAssignment, err := authorization.NewAssignment(ctx, "exampleAssignment", &authorization.AssignmentArgs{
//				Scope:              *pulumi.String(primary.Id),
//				RoleDefinitionName: pulumi.String("Storage Blob Data Contributor"),
//				PrincipalId: exampleServer.Identity.ApplyT(func(identity mssql.ServerIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sql.NewVirtualNetworkRule(ctx, "sqlvnetrule", &sql.VirtualNetworkRuleArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				ServerName:        exampleServer.Name,
//				SubnetId:          exampleSubnet.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sql.NewFirewallRule(ctx, "exampleFirewallRule", &sql.FirewallRuleArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				ServerName:        exampleServer.Name,
//				StartIpAddress:    pulumi.String("0.0.0.0"),
//				EndIpAddress:      pulumi.String("0.0.0.0"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:          exampleResourceGroup.Name,
//				Location:                   exampleResourceGroup.Location,
//				AccountTier:                pulumi.String("Standard"),
//				AccountReplicationType:     pulumi.String("LRS"),
//				AccountKind:                pulumi.String("StorageV2"),
//				AllowNestedItemsToBePublic: pulumi.Bool(false),
//				NetworkRules: &storage.AccountNetworkRulesTypeArgs{
//					DefaultAction: pulumi.String("Deny"),
//					IpRules: pulumi.StringArray{
//						pulumi.String("127.0.0.1"),
//					},
//					VirtualNetworkSubnetIds: pulumi.StringArray{
//						exampleSubnet.ID(),
//					},
//					Bypasses: pulumi.StringArray{
//						pulumi.String("AzureServices"),
//					},
//				},
//				Identity: &storage.AccountIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mssql.NewServerMicrosoftSupportAuditingPolicy(ctx, "exampleServerMicrosoftSupportAuditingPolicy", &mssql.ServerMicrosoftSupportAuditingPolicyArgs{
//				BlobStorageEndpoint:          exampleAccount.PrimaryBlobEndpoint,
//				ServerId:                     exampleServer.ID(),
//				LogMonitoringEnabled:         pulumi.Bool(false),
//				StorageAccountSubscriptionId: pulumi.Any(azurerm_subscription.Primary.Subscription_id),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleAssignment,
//				exampleAccount,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MS SQL Server Microsoft Support Auditing Policies can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:mssql/serverMicrosoftSupportAuditingPolicy:ServerMicrosoftSupportAuditingPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Sql/servers/sqlServer1/devOpsAuditingSettings/default
//
// ```
type ServerMicrosoftSupportAuditingPolicy struct {
	pulumi.CustomResourceState

	// The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Microsoft support auditing logs.
	BlobStorageEndpoint pulumi.StringPtrOutput `pulumi:"blobStorageEndpoint"`
	// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
	//
	// ->**NOTE:**  If `enabled` is `true`, `blobStorageEndpoint` or `logMonitoringEnabled` are required.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled pulumi.BoolPtrOutput `pulumi:"logMonitoringEnabled"`
	// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// The ID of the Subscription containing the Storage Account.
	StorageAccountSubscriptionId pulumi.StringPtrOutput `pulumi:"storageAccountSubscriptionId"`
}

// NewServerMicrosoftSupportAuditingPolicy registers a new resource with the given unique name, arguments, and options.
func NewServerMicrosoftSupportAuditingPolicy(ctx *pulumi.Context,
	name string, args *ServerMicrosoftSupportAuditingPolicyArgs, opts ...pulumi.ResourceOption) (*ServerMicrosoftSupportAuditingPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.StorageAccountAccessKey != nil {
		args.StorageAccountAccessKey = pulumi.ToSecret(args.StorageAccountAccessKey).(pulumi.StringPtrInput)
	}
	if args.StorageAccountSubscriptionId != nil {
		args.StorageAccountSubscriptionId = pulumi.ToSecret(args.StorageAccountSubscriptionId).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"storageAccountAccessKey",
		"storageAccountSubscriptionId",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerMicrosoftSupportAuditingPolicy
	err := ctx.RegisterResource("azure:mssql/serverMicrosoftSupportAuditingPolicy:ServerMicrosoftSupportAuditingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerMicrosoftSupportAuditingPolicy gets an existing ServerMicrosoftSupportAuditingPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerMicrosoftSupportAuditingPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerMicrosoftSupportAuditingPolicyState, opts ...pulumi.ResourceOption) (*ServerMicrosoftSupportAuditingPolicy, error) {
	var resource ServerMicrosoftSupportAuditingPolicy
	err := ctx.ReadResource("azure:mssql/serverMicrosoftSupportAuditingPolicy:ServerMicrosoftSupportAuditingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerMicrosoftSupportAuditingPolicy resources.
type serverMicrosoftSupportAuditingPolicyState struct {
	// The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Microsoft support auditing logs.
	BlobStorageEndpoint *string `pulumi:"blobStorageEndpoint"`
	// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
	//
	// ->**NOTE:**  If `enabled` is `true`, `blobStorageEndpoint` or `logMonitoringEnabled` are required.
	Enabled *bool `pulumi:"enabled"`
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled *bool `pulumi:"logMonitoringEnabled"`
	// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId *string `pulumi:"serverId"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// The ID of the Subscription containing the Storage Account.
	StorageAccountSubscriptionId *string `pulumi:"storageAccountSubscriptionId"`
}

type ServerMicrosoftSupportAuditingPolicyState struct {
	// The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Microsoft support auditing logs.
	BlobStorageEndpoint pulumi.StringPtrInput
	// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
	//
	// ->**NOTE:**  If `enabled` is `true`, `blobStorageEndpoint` or `logMonitoringEnabled` are required.
	Enabled pulumi.BoolPtrInput
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled pulumi.BoolPtrInput
	// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId pulumi.StringPtrInput
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrInput
	// The ID of the Subscription containing the Storage Account.
	StorageAccountSubscriptionId pulumi.StringPtrInput
}

func (ServerMicrosoftSupportAuditingPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverMicrosoftSupportAuditingPolicyState)(nil)).Elem()
}

type serverMicrosoftSupportAuditingPolicyArgs struct {
	// The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Microsoft support auditing logs.
	BlobStorageEndpoint *string `pulumi:"blobStorageEndpoint"`
	// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
	//
	// ->**NOTE:**  If `enabled` is `true`, `blobStorageEndpoint` or `logMonitoringEnabled` are required.
	Enabled *bool `pulumi:"enabled"`
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled *bool `pulumi:"logMonitoringEnabled"`
	// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId string `pulumi:"serverId"`
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// The ID of the Subscription containing the Storage Account.
	StorageAccountSubscriptionId *string `pulumi:"storageAccountSubscriptionId"`
}

// The set of arguments for constructing a ServerMicrosoftSupportAuditingPolicy resource.
type ServerMicrosoftSupportAuditingPolicyArgs struct {
	// The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Microsoft support auditing logs.
	BlobStorageEndpoint pulumi.StringPtrInput
	// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
	//
	// ->**NOTE:**  If `enabled` is `true`, `blobStorageEndpoint` or `logMonitoringEnabled` are required.
	Enabled pulumi.BoolPtrInput
	// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
	LogMonitoringEnabled pulumi.BoolPtrInput
	// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
	ServerId pulumi.StringInput
	// The access key to use for the auditing storage account.
	StorageAccountAccessKey pulumi.StringPtrInput
	// The ID of the Subscription containing the Storage Account.
	StorageAccountSubscriptionId pulumi.StringPtrInput
}

func (ServerMicrosoftSupportAuditingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverMicrosoftSupportAuditingPolicyArgs)(nil)).Elem()
}

type ServerMicrosoftSupportAuditingPolicyInput interface {
	pulumi.Input

	ToServerMicrosoftSupportAuditingPolicyOutput() ServerMicrosoftSupportAuditingPolicyOutput
	ToServerMicrosoftSupportAuditingPolicyOutputWithContext(ctx context.Context) ServerMicrosoftSupportAuditingPolicyOutput
}

func (*ServerMicrosoftSupportAuditingPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerMicrosoftSupportAuditingPolicy)(nil)).Elem()
}

func (i *ServerMicrosoftSupportAuditingPolicy) ToServerMicrosoftSupportAuditingPolicyOutput() ServerMicrosoftSupportAuditingPolicyOutput {
	return i.ToServerMicrosoftSupportAuditingPolicyOutputWithContext(context.Background())
}

func (i *ServerMicrosoftSupportAuditingPolicy) ToServerMicrosoftSupportAuditingPolicyOutputWithContext(ctx context.Context) ServerMicrosoftSupportAuditingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMicrosoftSupportAuditingPolicyOutput)
}

// ServerMicrosoftSupportAuditingPolicyArrayInput is an input type that accepts ServerMicrosoftSupportAuditingPolicyArray and ServerMicrosoftSupportAuditingPolicyArrayOutput values.
// You can construct a concrete instance of `ServerMicrosoftSupportAuditingPolicyArrayInput` via:
//
//	ServerMicrosoftSupportAuditingPolicyArray{ ServerMicrosoftSupportAuditingPolicyArgs{...} }
type ServerMicrosoftSupportAuditingPolicyArrayInput interface {
	pulumi.Input

	ToServerMicrosoftSupportAuditingPolicyArrayOutput() ServerMicrosoftSupportAuditingPolicyArrayOutput
	ToServerMicrosoftSupportAuditingPolicyArrayOutputWithContext(context.Context) ServerMicrosoftSupportAuditingPolicyArrayOutput
}

type ServerMicrosoftSupportAuditingPolicyArray []ServerMicrosoftSupportAuditingPolicyInput

func (ServerMicrosoftSupportAuditingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerMicrosoftSupportAuditingPolicy)(nil)).Elem()
}

func (i ServerMicrosoftSupportAuditingPolicyArray) ToServerMicrosoftSupportAuditingPolicyArrayOutput() ServerMicrosoftSupportAuditingPolicyArrayOutput {
	return i.ToServerMicrosoftSupportAuditingPolicyArrayOutputWithContext(context.Background())
}

func (i ServerMicrosoftSupportAuditingPolicyArray) ToServerMicrosoftSupportAuditingPolicyArrayOutputWithContext(ctx context.Context) ServerMicrosoftSupportAuditingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMicrosoftSupportAuditingPolicyArrayOutput)
}

// ServerMicrosoftSupportAuditingPolicyMapInput is an input type that accepts ServerMicrosoftSupportAuditingPolicyMap and ServerMicrosoftSupportAuditingPolicyMapOutput values.
// You can construct a concrete instance of `ServerMicrosoftSupportAuditingPolicyMapInput` via:
//
//	ServerMicrosoftSupportAuditingPolicyMap{ "key": ServerMicrosoftSupportAuditingPolicyArgs{...} }
type ServerMicrosoftSupportAuditingPolicyMapInput interface {
	pulumi.Input

	ToServerMicrosoftSupportAuditingPolicyMapOutput() ServerMicrosoftSupportAuditingPolicyMapOutput
	ToServerMicrosoftSupportAuditingPolicyMapOutputWithContext(context.Context) ServerMicrosoftSupportAuditingPolicyMapOutput
}

type ServerMicrosoftSupportAuditingPolicyMap map[string]ServerMicrosoftSupportAuditingPolicyInput

func (ServerMicrosoftSupportAuditingPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerMicrosoftSupportAuditingPolicy)(nil)).Elem()
}

func (i ServerMicrosoftSupportAuditingPolicyMap) ToServerMicrosoftSupportAuditingPolicyMapOutput() ServerMicrosoftSupportAuditingPolicyMapOutput {
	return i.ToServerMicrosoftSupportAuditingPolicyMapOutputWithContext(context.Background())
}

func (i ServerMicrosoftSupportAuditingPolicyMap) ToServerMicrosoftSupportAuditingPolicyMapOutputWithContext(ctx context.Context) ServerMicrosoftSupportAuditingPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMicrosoftSupportAuditingPolicyMapOutput)
}

type ServerMicrosoftSupportAuditingPolicyOutput struct{ *pulumi.OutputState }

func (ServerMicrosoftSupportAuditingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerMicrosoftSupportAuditingPolicy)(nil)).Elem()
}

func (o ServerMicrosoftSupportAuditingPolicyOutput) ToServerMicrosoftSupportAuditingPolicyOutput() ServerMicrosoftSupportAuditingPolicyOutput {
	return o
}

func (o ServerMicrosoftSupportAuditingPolicyOutput) ToServerMicrosoftSupportAuditingPolicyOutputWithContext(ctx context.Context) ServerMicrosoftSupportAuditingPolicyOutput {
	return o
}

// The blob storage endpoint (e.g. https://example.blob.core.windows.net). This blob storage will hold all Microsoft support auditing logs.
func (o ServerMicrosoftSupportAuditingPolicyOutput) BlobStorageEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerMicrosoftSupportAuditingPolicy) pulumi.StringPtrOutput { return v.BlobStorageEndpoint }).(pulumi.StringPtrOutput)
}

// Whether to enable the extended auditing policy. Possible values are `true` and `false`. Defaults to `true`.
//
// ->**NOTE:**  If `enabled` is `true`, `blobStorageEndpoint` or `logMonitoringEnabled` are required.
func (o ServerMicrosoftSupportAuditingPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerMicrosoftSupportAuditingPolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Enable audit events to Azure Monitor? To enable server audit events to Azure Monitor, please enable its main database audit events to Azure Monitor. Defaults to `true`.
func (o ServerMicrosoftSupportAuditingPolicyOutput) LogMonitoringEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerMicrosoftSupportAuditingPolicy) pulumi.BoolPtrOutput { return v.LogMonitoringEnabled }).(pulumi.BoolPtrOutput)
}

// The ID of the SQL Server to set the extended auditing policy. Changing this forces a new resource to be created.
func (o ServerMicrosoftSupportAuditingPolicyOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerMicrosoftSupportAuditingPolicy) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// The access key to use for the auditing storage account.
func (o ServerMicrosoftSupportAuditingPolicyOutput) StorageAccountAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerMicrosoftSupportAuditingPolicy) pulumi.StringPtrOutput { return v.StorageAccountAccessKey }).(pulumi.StringPtrOutput)
}

// The ID of the Subscription containing the Storage Account.
func (o ServerMicrosoftSupportAuditingPolicyOutput) StorageAccountSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerMicrosoftSupportAuditingPolicy) pulumi.StringPtrOutput {
		return v.StorageAccountSubscriptionId
	}).(pulumi.StringPtrOutput)
}

type ServerMicrosoftSupportAuditingPolicyArrayOutput struct{ *pulumi.OutputState }

func (ServerMicrosoftSupportAuditingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerMicrosoftSupportAuditingPolicy)(nil)).Elem()
}

func (o ServerMicrosoftSupportAuditingPolicyArrayOutput) ToServerMicrosoftSupportAuditingPolicyArrayOutput() ServerMicrosoftSupportAuditingPolicyArrayOutput {
	return o
}

func (o ServerMicrosoftSupportAuditingPolicyArrayOutput) ToServerMicrosoftSupportAuditingPolicyArrayOutputWithContext(ctx context.Context) ServerMicrosoftSupportAuditingPolicyArrayOutput {
	return o
}

func (o ServerMicrosoftSupportAuditingPolicyArrayOutput) Index(i pulumi.IntInput) ServerMicrosoftSupportAuditingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerMicrosoftSupportAuditingPolicy {
		return vs[0].([]*ServerMicrosoftSupportAuditingPolicy)[vs[1].(int)]
	}).(ServerMicrosoftSupportAuditingPolicyOutput)
}

type ServerMicrosoftSupportAuditingPolicyMapOutput struct{ *pulumi.OutputState }

func (ServerMicrosoftSupportAuditingPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerMicrosoftSupportAuditingPolicy)(nil)).Elem()
}

func (o ServerMicrosoftSupportAuditingPolicyMapOutput) ToServerMicrosoftSupportAuditingPolicyMapOutput() ServerMicrosoftSupportAuditingPolicyMapOutput {
	return o
}

func (o ServerMicrosoftSupportAuditingPolicyMapOutput) ToServerMicrosoftSupportAuditingPolicyMapOutputWithContext(ctx context.Context) ServerMicrosoftSupportAuditingPolicyMapOutput {
	return o
}

func (o ServerMicrosoftSupportAuditingPolicyMapOutput) MapIndex(k pulumi.StringInput) ServerMicrosoftSupportAuditingPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerMicrosoftSupportAuditingPolicy {
		return vs[0].(map[string]*ServerMicrosoftSupportAuditingPolicy)[vs[1].(string)]
	}).(ServerMicrosoftSupportAuditingPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMicrosoftSupportAuditingPolicyInput)(nil)).Elem(), &ServerMicrosoftSupportAuditingPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMicrosoftSupportAuditingPolicyArrayInput)(nil)).Elem(), ServerMicrosoftSupportAuditingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMicrosoftSupportAuditingPolicyMapInput)(nil)).Elem(), ServerMicrosoftSupportAuditingPolicyMap{})
	pulumi.RegisterOutputType(ServerMicrosoftSupportAuditingPolicyOutput{})
	pulumi.RegisterOutputType(ServerMicrosoftSupportAuditingPolicyArrayOutput{})
	pulumi.RegisterOutputType(ServerMicrosoftSupportAuditingPolicyMapOutput{})
}
