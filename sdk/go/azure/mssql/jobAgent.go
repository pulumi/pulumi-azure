// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Elastic Job Agent.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mssql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("northeurope"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServer, err := mssql.NewServer(ctx, "exampleServer", &mssql.ServerArgs{
//				ResourceGroupName:          exampleResourceGroup.Name,
//				Location:                   exampleResourceGroup.Location,
//				Version:                    pulumi.String("12.0"),
//				AdministratorLogin:         pulumi.String("4dm1n157r470r"),
//				AdministratorLoginPassword: pulumi.String("4-v3ry-53cr37-p455w0rd"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDatabase, err := mssql.NewDatabase(ctx, "exampleDatabase", &mssql.DatabaseArgs{
//				ServerId:  exampleServer.ID(),
//				Collation: pulumi.String("SQL_Latin1_General_CP1_CI_AS"),
//				SkuName:   pulumi.String("S1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mssql.NewJobAgent(ctx, "exampleJobAgent", &mssql.JobAgentArgs{
//				Location:   exampleResourceGroup.Location,
//				DatabaseId: exampleDatabase.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Elastic Job Agents can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:mssql/jobAgent:JobAgent example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Sql/servers/myserver1/jobAgents/myjobagent1
//
// ```
type JobAgent struct {
	pulumi.CustomResourceState

	// The ID of the database to store metadata for the Elastic Job Agent. Changing this forces a new Elastic Job Agent to be created.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// The Azure Region where the Elastic Job Agent should exist. Changing this forces a new Elastic Job Agent to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name which should be used for this Elastic Job Agent. Changing this forces a new Elastic Job Agent to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A mapping of tags which should be assigned to the Database.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewJobAgent registers a new resource with the given unique name, arguments, and options.
func NewJobAgent(ctx *pulumi.Context,
	name string, args *JobAgentArgs, opts ...pulumi.ResourceOption) (*JobAgent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JobAgent
	err := ctx.RegisterResource("azure:mssql/jobAgent:JobAgent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobAgent gets an existing JobAgent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobAgent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobAgentState, opts ...pulumi.ResourceOption) (*JobAgent, error) {
	var resource JobAgent
	err := ctx.ReadResource("azure:mssql/jobAgent:JobAgent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobAgent resources.
type jobAgentState struct {
	// The ID of the database to store metadata for the Elastic Job Agent. Changing this forces a new Elastic Job Agent to be created.
	DatabaseId *string `pulumi:"databaseId"`
	// The Azure Region where the Elastic Job Agent should exist. Changing this forces a new Elastic Job Agent to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Elastic Job Agent. Changing this forces a new Elastic Job Agent to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the Database.
	Tags map[string]string `pulumi:"tags"`
}

type JobAgentState struct {
	// The ID of the database to store metadata for the Elastic Job Agent. Changing this forces a new Elastic Job Agent to be created.
	DatabaseId pulumi.StringPtrInput
	// The Azure Region where the Elastic Job Agent should exist. Changing this forces a new Elastic Job Agent to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Elastic Job Agent. Changing this forces a new Elastic Job Agent to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Database.
	Tags pulumi.StringMapInput
}

func (JobAgentState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobAgentState)(nil)).Elem()
}

type jobAgentArgs struct {
	// The ID of the database to store metadata for the Elastic Job Agent. Changing this forces a new Elastic Job Agent to be created.
	DatabaseId string `pulumi:"databaseId"`
	// The Azure Region where the Elastic Job Agent should exist. Changing this forces a new Elastic Job Agent to be created.
	Location *string `pulumi:"location"`
	// The name which should be used for this Elastic Job Agent. Changing this forces a new Elastic Job Agent to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the Database.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a JobAgent resource.
type JobAgentArgs struct {
	// The ID of the database to store metadata for the Elastic Job Agent. Changing this forces a new Elastic Job Agent to be created.
	DatabaseId pulumi.StringInput
	// The Azure Region where the Elastic Job Agent should exist. Changing this forces a new Elastic Job Agent to be created.
	Location pulumi.StringPtrInput
	// The name which should be used for this Elastic Job Agent. Changing this forces a new Elastic Job Agent to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Database.
	Tags pulumi.StringMapInput
}

func (JobAgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobAgentArgs)(nil)).Elem()
}

type JobAgentInput interface {
	pulumi.Input

	ToJobAgentOutput() JobAgentOutput
	ToJobAgentOutputWithContext(ctx context.Context) JobAgentOutput
}

func (*JobAgent) ElementType() reflect.Type {
	return reflect.TypeOf((**JobAgent)(nil)).Elem()
}

func (i *JobAgent) ToJobAgentOutput() JobAgentOutput {
	return i.ToJobAgentOutputWithContext(context.Background())
}

func (i *JobAgent) ToJobAgentOutputWithContext(ctx context.Context) JobAgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobAgentOutput)
}

// JobAgentArrayInput is an input type that accepts JobAgentArray and JobAgentArrayOutput values.
// You can construct a concrete instance of `JobAgentArrayInput` via:
//
//	JobAgentArray{ JobAgentArgs{...} }
type JobAgentArrayInput interface {
	pulumi.Input

	ToJobAgentArrayOutput() JobAgentArrayOutput
	ToJobAgentArrayOutputWithContext(context.Context) JobAgentArrayOutput
}

type JobAgentArray []JobAgentInput

func (JobAgentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobAgent)(nil)).Elem()
}

func (i JobAgentArray) ToJobAgentArrayOutput() JobAgentArrayOutput {
	return i.ToJobAgentArrayOutputWithContext(context.Background())
}

func (i JobAgentArray) ToJobAgentArrayOutputWithContext(ctx context.Context) JobAgentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobAgentArrayOutput)
}

// JobAgentMapInput is an input type that accepts JobAgentMap and JobAgentMapOutput values.
// You can construct a concrete instance of `JobAgentMapInput` via:
//
//	JobAgentMap{ "key": JobAgentArgs{...} }
type JobAgentMapInput interface {
	pulumi.Input

	ToJobAgentMapOutput() JobAgentMapOutput
	ToJobAgentMapOutputWithContext(context.Context) JobAgentMapOutput
}

type JobAgentMap map[string]JobAgentInput

func (JobAgentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobAgent)(nil)).Elem()
}

func (i JobAgentMap) ToJobAgentMapOutput() JobAgentMapOutput {
	return i.ToJobAgentMapOutputWithContext(context.Background())
}

func (i JobAgentMap) ToJobAgentMapOutputWithContext(ctx context.Context) JobAgentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobAgentMapOutput)
}

type JobAgentOutput struct{ *pulumi.OutputState }

func (JobAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobAgent)(nil)).Elem()
}

func (o JobAgentOutput) ToJobAgentOutput() JobAgentOutput {
	return o
}

func (o JobAgentOutput) ToJobAgentOutputWithContext(ctx context.Context) JobAgentOutput {
	return o
}

// The ID of the database to store metadata for the Elastic Job Agent. Changing this forces a new Elastic Job Agent to be created.
func (o JobAgentOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *JobAgent) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// The Azure Region where the Elastic Job Agent should exist. Changing this forces a new Elastic Job Agent to be created.
func (o JobAgentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *JobAgent) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name which should be used for this Elastic Job Agent. Changing this forces a new Elastic Job Agent to be created.
func (o JobAgentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *JobAgent) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Database.
func (o JobAgentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobAgent) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type JobAgentArrayOutput struct{ *pulumi.OutputState }

func (JobAgentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobAgent)(nil)).Elem()
}

func (o JobAgentArrayOutput) ToJobAgentArrayOutput() JobAgentArrayOutput {
	return o
}

func (o JobAgentArrayOutput) ToJobAgentArrayOutputWithContext(ctx context.Context) JobAgentArrayOutput {
	return o
}

func (o JobAgentArrayOutput) Index(i pulumi.IntInput) JobAgentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JobAgent {
		return vs[0].([]*JobAgent)[vs[1].(int)]
	}).(JobAgentOutput)
}

type JobAgentMapOutput struct{ *pulumi.OutputState }

func (JobAgentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobAgent)(nil)).Elem()
}

func (o JobAgentMapOutput) ToJobAgentMapOutput() JobAgentMapOutput {
	return o
}

func (o JobAgentMapOutput) ToJobAgentMapOutputWithContext(ctx context.Context) JobAgentMapOutput {
	return o
}

func (o JobAgentMapOutput) MapIndex(k pulumi.StringInput) JobAgentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JobAgent {
		return vs[0].(map[string]*JobAgent)[vs[1].(string)]
	}).(JobAgentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobAgentInput)(nil)).Elem(), &JobAgent{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobAgentArrayInput)(nil)).Elem(), JobAgentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobAgentMapInput)(nil)).Elem(), JobAgentMap{})
	pulumi.RegisterOutputType(JobAgentOutput{})
	pulumi.RegisterOutputType(JobAgentArrayOutput{})
	pulumi.RegisterOutputType(JobAgentMapOutput{})
}
