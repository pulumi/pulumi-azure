// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Microsoft Azure SQL Failover Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/mssql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := mssql.LookupFailoverGroup(ctx, &mssql.LookupFailoverGroupArgs{
//				Name:     "example",
//				ServerId: "example-sql-server",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("mssqlFailoverGroupId", example.Id)
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This data source uses the following Azure API Providers:
//
// * `Microsoft.Sql` - 2023-08-01-preview
func LookupFailoverGroup(ctx *pulumi.Context, args *LookupFailoverGroupArgs, opts ...pulumi.InvokeOption) (*LookupFailoverGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFailoverGroupResult
	err := ctx.Invoke("azure:mssql/getFailoverGroup:getFailoverGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFailoverGroup.
type LookupFailoverGroupArgs struct {
	// The name of the Failover Group.
	Name string `pulumi:"name"`
	// The ID of the primary SQL Server where the Failover Group exists.
	ServerId string `pulumi:"serverId"`
}

// A collection of values returned by getFailoverGroup.
type LookupFailoverGroupResult struct {
	// A set of database names in the Failover Group.
	Databases []string `pulumi:"databases"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// A `partnerServer` block as defined below.
	PartnerServers []GetFailoverGroupPartnerServer `pulumi:"partnerServers"`
	// A `readWriteEndpointFailoverPolicy` block as defined below.
	ReadWriteEndpointFailoverPolicies []GetFailoverGroupReadWriteEndpointFailoverPolicy `pulumi:"readWriteEndpointFailoverPolicies"`
	// Whether failover is enabled for the readonly endpoint.
	ReadonlyEndpointFailoverPolicyEnabled bool   `pulumi:"readonlyEndpointFailoverPolicyEnabled"`
	ServerId                              string `pulumi:"serverId"`
	// A mapping of tags which are assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
}

func LookupFailoverGroupOutput(ctx *pulumi.Context, args LookupFailoverGroupOutputArgs, opts ...pulumi.InvokeOption) LookupFailoverGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupFailoverGroupResultOutput, error) {
			args := v.(LookupFailoverGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure:mssql/getFailoverGroup:getFailoverGroup", args, LookupFailoverGroupResultOutput{}, options).(LookupFailoverGroupResultOutput), nil
		}).(LookupFailoverGroupResultOutput)
}

// A collection of arguments for invoking getFailoverGroup.
type LookupFailoverGroupOutputArgs struct {
	// The name of the Failover Group.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the primary SQL Server where the Failover Group exists.
	ServerId pulumi.StringInput `pulumi:"serverId"`
}

func (LookupFailoverGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFailoverGroupArgs)(nil)).Elem()
}

// A collection of values returned by getFailoverGroup.
type LookupFailoverGroupResultOutput struct{ *pulumi.OutputState }

func (LookupFailoverGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFailoverGroupResult)(nil)).Elem()
}

func (o LookupFailoverGroupResultOutput) ToLookupFailoverGroupResultOutput() LookupFailoverGroupResultOutput {
	return o
}

func (o LookupFailoverGroupResultOutput) ToLookupFailoverGroupResultOutputWithContext(ctx context.Context) LookupFailoverGroupResultOutput {
	return o
}

// A set of database names in the Failover Group.
func (o LookupFailoverGroupResultOutput) Databases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupFailoverGroupResult) []string { return v.Databases }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupFailoverGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFailoverGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupFailoverGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFailoverGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// A `partnerServer` block as defined below.
func (o LookupFailoverGroupResultOutput) PartnerServers() GetFailoverGroupPartnerServerArrayOutput {
	return o.ApplyT(func(v LookupFailoverGroupResult) []GetFailoverGroupPartnerServer { return v.PartnerServers }).(GetFailoverGroupPartnerServerArrayOutput)
}

// A `readWriteEndpointFailoverPolicy` block as defined below.
func (o LookupFailoverGroupResultOutput) ReadWriteEndpointFailoverPolicies() GetFailoverGroupReadWriteEndpointFailoverPolicyArrayOutput {
	return o.ApplyT(func(v LookupFailoverGroupResult) []GetFailoverGroupReadWriteEndpointFailoverPolicy {
		return v.ReadWriteEndpointFailoverPolicies
	}).(GetFailoverGroupReadWriteEndpointFailoverPolicyArrayOutput)
}

// Whether failover is enabled for the readonly endpoint.
func (o LookupFailoverGroupResultOutput) ReadonlyEndpointFailoverPolicyEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupFailoverGroupResult) bool { return v.ReadonlyEndpointFailoverPolicyEnabled }).(pulumi.BoolOutput)
}

func (o LookupFailoverGroupResultOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFailoverGroupResult) string { return v.ServerId }).(pulumi.StringOutput)
}

// A mapping of tags which are assigned to the resource.
func (o LookupFailoverGroupResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupFailoverGroupResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFailoverGroupResultOutput{})
}
