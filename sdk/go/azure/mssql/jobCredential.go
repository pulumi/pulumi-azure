// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Elastic Job Credential.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mssql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("northeurope"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServer, err := mssql.NewServer(ctx, "exampleServer", &mssql.ServerArgs{
//				ResourceGroupName:          exampleResourceGroup.Name,
//				Location:                   exampleResourceGroup.Location,
//				Version:                    pulumi.String("12.0"),
//				AdministratorLogin:         pulumi.String("4dm1n157r470r"),
//				AdministratorLoginPassword: pulumi.String("4-v3ry-53cr37-p455w0rd"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleDatabase, err := mssql.NewDatabase(ctx, "exampleDatabase", &mssql.DatabaseArgs{
//				ServerId:  exampleServer.ID(),
//				Collation: pulumi.String("SQL_Latin1_General_CP1_CI_AS"),
//				SkuName:   pulumi.String("S1"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleJobAgent, err := mssql.NewJobAgent(ctx, "exampleJobAgent", &mssql.JobAgentArgs{
//				Location:   exampleResourceGroup.Location,
//				DatabaseId: exampleDatabase.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mssql.NewJobCredential(ctx, "exampleJobCredential", &mssql.JobCredentialArgs{
//				JobAgentId: exampleJobAgent.ID(),
//				Username:   pulumi.String("my-username"),
//				Password:   pulumi.String("MyP4ssw0rd!!!"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Elastic Job Credentials can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:mssql/jobCredential:JobCredential example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Sql/servers/myserver1/jobAgents/myjobagent1/credentials/credential1
//
// ```
type JobCredential struct {
	pulumi.CustomResourceState

	// The ID of the Elastic Job Agent. Changing this forces a new Elastic Job Credential to be created.
	JobAgentId pulumi.StringOutput `pulumi:"jobAgentId"`
	// The name which should be used for this Elastic Job Credential. Changing this forces a new Elastic Job Credential to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The password part of the credential.
	Password pulumi.StringOutput `pulumi:"password"`
	// The username part of the credential.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewJobCredential registers a new resource with the given unique name, arguments, and options.
func NewJobCredential(ctx *pulumi.Context,
	name string, args *JobCredentialArgs, opts ...pulumi.ResourceOption) (*JobCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobAgentId == nil {
		return nil, errors.New("invalid value for required argument 'JobAgentId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource JobCredential
	err := ctx.RegisterResource("azure:mssql/jobCredential:JobCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobCredential gets an existing JobCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobCredentialState, opts ...pulumi.ResourceOption) (*JobCredential, error) {
	var resource JobCredential
	err := ctx.ReadResource("azure:mssql/jobCredential:JobCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobCredential resources.
type jobCredentialState struct {
	// The ID of the Elastic Job Agent. Changing this forces a new Elastic Job Credential to be created.
	JobAgentId *string `pulumi:"jobAgentId"`
	// The name which should be used for this Elastic Job Credential. Changing this forces a new Elastic Job Credential to be created.
	Name *string `pulumi:"name"`
	// The password part of the credential.
	Password *string `pulumi:"password"`
	// The username part of the credential.
	Username *string `pulumi:"username"`
}

type JobCredentialState struct {
	// The ID of the Elastic Job Agent. Changing this forces a new Elastic Job Credential to be created.
	JobAgentId pulumi.StringPtrInput
	// The name which should be used for this Elastic Job Credential. Changing this forces a new Elastic Job Credential to be created.
	Name pulumi.StringPtrInput
	// The password part of the credential.
	Password pulumi.StringPtrInput
	// The username part of the credential.
	Username pulumi.StringPtrInput
}

func (JobCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobCredentialState)(nil)).Elem()
}

type jobCredentialArgs struct {
	// The ID of the Elastic Job Agent. Changing this forces a new Elastic Job Credential to be created.
	JobAgentId string `pulumi:"jobAgentId"`
	// The name which should be used for this Elastic Job Credential. Changing this forces a new Elastic Job Credential to be created.
	Name *string `pulumi:"name"`
	// The password part of the credential.
	Password string `pulumi:"password"`
	// The username part of the credential.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a JobCredential resource.
type JobCredentialArgs struct {
	// The ID of the Elastic Job Agent. Changing this forces a new Elastic Job Credential to be created.
	JobAgentId pulumi.StringInput
	// The name which should be used for this Elastic Job Credential. Changing this forces a new Elastic Job Credential to be created.
	Name pulumi.StringPtrInput
	// The password part of the credential.
	Password pulumi.StringInput
	// The username part of the credential.
	Username pulumi.StringInput
}

func (JobCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobCredentialArgs)(nil)).Elem()
}

type JobCredentialInput interface {
	pulumi.Input

	ToJobCredentialOutput() JobCredentialOutput
	ToJobCredentialOutputWithContext(ctx context.Context) JobCredentialOutput
}

func (*JobCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCredential)(nil)).Elem()
}

func (i *JobCredential) ToJobCredentialOutput() JobCredentialOutput {
	return i.ToJobCredentialOutputWithContext(context.Background())
}

func (i *JobCredential) ToJobCredentialOutputWithContext(ctx context.Context) JobCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCredentialOutput)
}

// JobCredentialArrayInput is an input type that accepts JobCredentialArray and JobCredentialArrayOutput values.
// You can construct a concrete instance of `JobCredentialArrayInput` via:
//
//	JobCredentialArray{ JobCredentialArgs{...} }
type JobCredentialArrayInput interface {
	pulumi.Input

	ToJobCredentialArrayOutput() JobCredentialArrayOutput
	ToJobCredentialArrayOutputWithContext(context.Context) JobCredentialArrayOutput
}

type JobCredentialArray []JobCredentialInput

func (JobCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobCredential)(nil)).Elem()
}

func (i JobCredentialArray) ToJobCredentialArrayOutput() JobCredentialArrayOutput {
	return i.ToJobCredentialArrayOutputWithContext(context.Background())
}

func (i JobCredentialArray) ToJobCredentialArrayOutputWithContext(ctx context.Context) JobCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCredentialArrayOutput)
}

// JobCredentialMapInput is an input type that accepts JobCredentialMap and JobCredentialMapOutput values.
// You can construct a concrete instance of `JobCredentialMapInput` via:
//
//	JobCredentialMap{ "key": JobCredentialArgs{...} }
type JobCredentialMapInput interface {
	pulumi.Input

	ToJobCredentialMapOutput() JobCredentialMapOutput
	ToJobCredentialMapOutputWithContext(context.Context) JobCredentialMapOutput
}

type JobCredentialMap map[string]JobCredentialInput

func (JobCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobCredential)(nil)).Elem()
}

func (i JobCredentialMap) ToJobCredentialMapOutput() JobCredentialMapOutput {
	return i.ToJobCredentialMapOutputWithContext(context.Background())
}

func (i JobCredentialMap) ToJobCredentialMapOutputWithContext(ctx context.Context) JobCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobCredentialMapOutput)
}

type JobCredentialOutput struct{ *pulumi.OutputState }

func (JobCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobCredential)(nil)).Elem()
}

func (o JobCredentialOutput) ToJobCredentialOutput() JobCredentialOutput {
	return o
}

func (o JobCredentialOutput) ToJobCredentialOutputWithContext(ctx context.Context) JobCredentialOutput {
	return o
}

// The ID of the Elastic Job Agent. Changing this forces a new Elastic Job Credential to be created.
func (o JobCredentialOutput) JobAgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *JobCredential) pulumi.StringOutput { return v.JobAgentId }).(pulumi.StringOutput)
}

// The name which should be used for this Elastic Job Credential. Changing this forces a new Elastic Job Credential to be created.
func (o JobCredentialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *JobCredential) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password part of the credential.
func (o JobCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *JobCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The username part of the credential.
func (o JobCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *JobCredential) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type JobCredentialArrayOutput struct{ *pulumi.OutputState }

func (JobCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobCredential)(nil)).Elem()
}

func (o JobCredentialArrayOutput) ToJobCredentialArrayOutput() JobCredentialArrayOutput {
	return o
}

func (o JobCredentialArrayOutput) ToJobCredentialArrayOutputWithContext(ctx context.Context) JobCredentialArrayOutput {
	return o
}

func (o JobCredentialArrayOutput) Index(i pulumi.IntInput) JobCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JobCredential {
		return vs[0].([]*JobCredential)[vs[1].(int)]
	}).(JobCredentialOutput)
}

type JobCredentialMapOutput struct{ *pulumi.OutputState }

func (JobCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobCredential)(nil)).Elem()
}

func (o JobCredentialMapOutput) ToJobCredentialMapOutput() JobCredentialMapOutput {
	return o
}

func (o JobCredentialMapOutput) ToJobCredentialMapOutputWithContext(ctx context.Context) JobCredentialMapOutput {
	return o
}

func (o JobCredentialMapOutput) MapIndex(k pulumi.StringInput) JobCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JobCredential {
		return vs[0].(map[string]*JobCredential)[vs[1].(string)]
	}).(JobCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobCredentialInput)(nil)).Elem(), &JobCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobCredentialArrayInput)(nil)).Elem(), JobCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobCredentialMapInput)(nil)).Elem(), JobCredentialMap{})
	pulumi.RegisterOutputType(JobCredentialOutput{})
	pulumi.RegisterOutputType(JobCredentialArrayOutput{})
	pulumi.RegisterOutputType(JobCredentialMapOutput{})
}
