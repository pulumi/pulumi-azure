// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a MS SQL Server DNS Alias.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mssql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleServer, err := mssql.NewServer(ctx, "exampleServer", &mssql.ServerArgs{
//				ResourceGroupName:          exampleResourceGroup.Name,
//				Location:                   exampleResourceGroup.Location,
//				Version:                    pulumi.String("12.0"),
//				AdministratorLogin:         pulumi.String("missadministrator"),
//				AdministratorLoginPassword: pulumi.String("AdminPassword123!"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mssql.NewServerDnsAlias(ctx, "exampleServerDnsAlias", &mssql.ServerDnsAliasArgs{
//				MssqlServerId: exampleServer.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MSSQL Server DNS Aliass can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:mssql/serverDnsAlias:ServerDnsAlias example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.Sql/servers/server1/dnsAliases/default
//
// ```
type ServerDnsAlias struct {
	pulumi.CustomResourceState

	// The fully qualified DNS record for alias.
	DnsRecord pulumi.StringOutput `pulumi:"dnsRecord"`
	// The ID of the mssql server. Changing this forces a new MSSQL Server DNS Alias to be created.
	MssqlServerId pulumi.StringOutput `pulumi:"mssqlServerId"`
	// The name which should be used for this MSSQL Server DNS Alias. Changing this forces a new MSSQL Server DNS Alias to be created.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewServerDnsAlias registers a new resource with the given unique name, arguments, and options.
func NewServerDnsAlias(ctx *pulumi.Context,
	name string, args *ServerDnsAliasArgs, opts ...pulumi.ResourceOption) (*ServerDnsAlias, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MssqlServerId == nil {
		return nil, errors.New("invalid value for required argument 'MssqlServerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerDnsAlias
	err := ctx.RegisterResource("azure:mssql/serverDnsAlias:ServerDnsAlias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerDnsAlias gets an existing ServerDnsAlias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerDnsAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerDnsAliasState, opts ...pulumi.ResourceOption) (*ServerDnsAlias, error) {
	var resource ServerDnsAlias
	err := ctx.ReadResource("azure:mssql/serverDnsAlias:ServerDnsAlias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerDnsAlias resources.
type serverDnsAliasState struct {
	// The fully qualified DNS record for alias.
	DnsRecord *string `pulumi:"dnsRecord"`
	// The ID of the mssql server. Changing this forces a new MSSQL Server DNS Alias to be created.
	MssqlServerId *string `pulumi:"mssqlServerId"`
	// The name which should be used for this MSSQL Server DNS Alias. Changing this forces a new MSSQL Server DNS Alias to be created.
	Name *string `pulumi:"name"`
}

type ServerDnsAliasState struct {
	// The fully qualified DNS record for alias.
	DnsRecord pulumi.StringPtrInput
	// The ID of the mssql server. Changing this forces a new MSSQL Server DNS Alias to be created.
	MssqlServerId pulumi.StringPtrInput
	// The name which should be used for this MSSQL Server DNS Alias. Changing this forces a new MSSQL Server DNS Alias to be created.
	Name pulumi.StringPtrInput
}

func (ServerDnsAliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverDnsAliasState)(nil)).Elem()
}

type serverDnsAliasArgs struct {
	// The ID of the mssql server. Changing this forces a new MSSQL Server DNS Alias to be created.
	MssqlServerId string `pulumi:"mssqlServerId"`
	// The name which should be used for this MSSQL Server DNS Alias. Changing this forces a new MSSQL Server DNS Alias to be created.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ServerDnsAlias resource.
type ServerDnsAliasArgs struct {
	// The ID of the mssql server. Changing this forces a new MSSQL Server DNS Alias to be created.
	MssqlServerId pulumi.StringInput
	// The name which should be used for this MSSQL Server DNS Alias. Changing this forces a new MSSQL Server DNS Alias to be created.
	Name pulumi.StringPtrInput
}

func (ServerDnsAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverDnsAliasArgs)(nil)).Elem()
}

type ServerDnsAliasInput interface {
	pulumi.Input

	ToServerDnsAliasOutput() ServerDnsAliasOutput
	ToServerDnsAliasOutputWithContext(ctx context.Context) ServerDnsAliasOutput
}

func (*ServerDnsAlias) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerDnsAlias)(nil)).Elem()
}

func (i *ServerDnsAlias) ToServerDnsAliasOutput() ServerDnsAliasOutput {
	return i.ToServerDnsAliasOutputWithContext(context.Background())
}

func (i *ServerDnsAlias) ToServerDnsAliasOutputWithContext(ctx context.Context) ServerDnsAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerDnsAliasOutput)
}

// ServerDnsAliasArrayInput is an input type that accepts ServerDnsAliasArray and ServerDnsAliasArrayOutput values.
// You can construct a concrete instance of `ServerDnsAliasArrayInput` via:
//
//	ServerDnsAliasArray{ ServerDnsAliasArgs{...} }
type ServerDnsAliasArrayInput interface {
	pulumi.Input

	ToServerDnsAliasArrayOutput() ServerDnsAliasArrayOutput
	ToServerDnsAliasArrayOutputWithContext(context.Context) ServerDnsAliasArrayOutput
}

type ServerDnsAliasArray []ServerDnsAliasInput

func (ServerDnsAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerDnsAlias)(nil)).Elem()
}

func (i ServerDnsAliasArray) ToServerDnsAliasArrayOutput() ServerDnsAliasArrayOutput {
	return i.ToServerDnsAliasArrayOutputWithContext(context.Background())
}

func (i ServerDnsAliasArray) ToServerDnsAliasArrayOutputWithContext(ctx context.Context) ServerDnsAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerDnsAliasArrayOutput)
}

// ServerDnsAliasMapInput is an input type that accepts ServerDnsAliasMap and ServerDnsAliasMapOutput values.
// You can construct a concrete instance of `ServerDnsAliasMapInput` via:
//
//	ServerDnsAliasMap{ "key": ServerDnsAliasArgs{...} }
type ServerDnsAliasMapInput interface {
	pulumi.Input

	ToServerDnsAliasMapOutput() ServerDnsAliasMapOutput
	ToServerDnsAliasMapOutputWithContext(context.Context) ServerDnsAliasMapOutput
}

type ServerDnsAliasMap map[string]ServerDnsAliasInput

func (ServerDnsAliasMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerDnsAlias)(nil)).Elem()
}

func (i ServerDnsAliasMap) ToServerDnsAliasMapOutput() ServerDnsAliasMapOutput {
	return i.ToServerDnsAliasMapOutputWithContext(context.Background())
}

func (i ServerDnsAliasMap) ToServerDnsAliasMapOutputWithContext(ctx context.Context) ServerDnsAliasMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerDnsAliasMapOutput)
}

type ServerDnsAliasOutput struct{ *pulumi.OutputState }

func (ServerDnsAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerDnsAlias)(nil)).Elem()
}

func (o ServerDnsAliasOutput) ToServerDnsAliasOutput() ServerDnsAliasOutput {
	return o
}

func (o ServerDnsAliasOutput) ToServerDnsAliasOutputWithContext(ctx context.Context) ServerDnsAliasOutput {
	return o
}

// The fully qualified DNS record for alias.
func (o ServerDnsAliasOutput) DnsRecord() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerDnsAlias) pulumi.StringOutput { return v.DnsRecord }).(pulumi.StringOutput)
}

// The ID of the mssql server. Changing this forces a new MSSQL Server DNS Alias to be created.
func (o ServerDnsAliasOutput) MssqlServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerDnsAlias) pulumi.StringOutput { return v.MssqlServerId }).(pulumi.StringOutput)
}

// The name which should be used for this MSSQL Server DNS Alias. Changing this forces a new MSSQL Server DNS Alias to be created.
func (o ServerDnsAliasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerDnsAlias) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ServerDnsAliasArrayOutput struct{ *pulumi.OutputState }

func (ServerDnsAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerDnsAlias)(nil)).Elem()
}

func (o ServerDnsAliasArrayOutput) ToServerDnsAliasArrayOutput() ServerDnsAliasArrayOutput {
	return o
}

func (o ServerDnsAliasArrayOutput) ToServerDnsAliasArrayOutputWithContext(ctx context.Context) ServerDnsAliasArrayOutput {
	return o
}

func (o ServerDnsAliasArrayOutput) Index(i pulumi.IntInput) ServerDnsAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerDnsAlias {
		return vs[0].([]*ServerDnsAlias)[vs[1].(int)]
	}).(ServerDnsAliasOutput)
}

type ServerDnsAliasMapOutput struct{ *pulumi.OutputState }

func (ServerDnsAliasMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerDnsAlias)(nil)).Elem()
}

func (o ServerDnsAliasMapOutput) ToServerDnsAliasMapOutput() ServerDnsAliasMapOutput {
	return o
}

func (o ServerDnsAliasMapOutput) ToServerDnsAliasMapOutputWithContext(ctx context.Context) ServerDnsAliasMapOutput {
	return o
}

func (o ServerDnsAliasMapOutput) MapIndex(k pulumi.StringInput) ServerDnsAliasOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerDnsAlias {
		return vs[0].(map[string]*ServerDnsAlias)[vs[1].(string)]
	}).(ServerDnsAliasOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerDnsAliasInput)(nil)).Elem(), &ServerDnsAlias{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerDnsAliasArrayInput)(nil)).Elem(), ServerDnsAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerDnsAliasMapInput)(nil)).Elem(), ServerDnsAliasMap{})
	pulumi.RegisterOutputType(ServerDnsAliasOutput{})
	pulumi.RegisterOutputType(ServerDnsAliasArrayOutput{})
	pulumi.RegisterOutputType(ServerDnsAliasMapOutput{})
}
