// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Microsoft SQL Azure Managed Instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/mssql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mssql.LookupManagedInstance(ctx, &mssql.LookupManagedInstanceArgs{
//				Name:              "managedsqlinstance",
//				ResourceGroupName: azurerm_resource_group.Example.Name,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupManagedInstance(ctx *pulumi.Context, args *LookupManagedInstanceArgs, opts ...pulumi.InvokeOption) (*LookupManagedInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupManagedInstanceResult
	err := ctx.Invoke("azure:mssql/getManagedInstance:getManagedInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedInstance.
type LookupManagedInstanceArgs struct {
	// The name of the SQL Managed Instance.
	Name string `pulumi:"name"`
	// The name of the resource group where the SQL Managed Instance exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getManagedInstance.
type LookupManagedInstanceResult struct {
	// The administrator login name for the SQL Managed Instance.
	AdministratorLogin string `pulumi:"administratorLogin"`
	// Specifies how the SQL Managed Instance will be collated.
	Collation            string `pulumi:"collation"`
	CustomerManagedKeyId string `pulumi:"customerManagedKeyId"`
	// The ID of the SQL Managed Instance which shares the DNS zone.
	DnsZonePartnerId string `pulumi:"dnsZonePartnerId"`
	// The fully qualified domain name of the Azure Managed SQL Instance.
	Fqdn string `pulumi:"fqdn"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// An `identity` block as defined below.
	Identities []GetManagedInstanceIdentity `pulumi:"identities"`
	// What type of license the SQL Managed Instance uses.
	LicenseType string `pulumi:"licenseType"`
	// Specifies the supported Azure location where the resource exists.
	Location string `pulumi:"location"`
	// The Minimum TLS Version.
	MinimumTlsVersion string `pulumi:"minimumTlsVersion"`
	Name              string `pulumi:"name"`
	// Specifies how the SQL Managed Instance will be accessed.
	ProxyOverride string `pulumi:"proxyOverride"`
	// Whether the public data endpoint is enabled.
	PublicDataEndpointEnabled bool   `pulumi:"publicDataEndpointEnabled"`
	ResourceGroupName         string `pulumi:"resourceGroupName"`
	// Specifies the SKU Name of the SQL Managed Instance.
	SkuName string `pulumi:"skuName"`
	// Specifies the storage account type used to store backups for this database.
	StorageAccountType string `pulumi:"storageAccountType"`
	// Maximum storage space allocated for the SQL Managed Instance.
	StorageSizeInGb int `pulumi:"storageSizeInGb"`
	// The subnet resource ID that the SQL Managed Instance is associated with.
	SubnetId string `pulumi:"subnetId"`
	// A mapping of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The TimeZone ID that the SQL Managed Instance is running in.
	TimezoneId string `pulumi:"timezoneId"`
	// Number of cores that are assigned to the SQL Managed Instance.
	Vcores int `pulumi:"vcores"`
}

func LookupManagedInstanceOutput(ctx *pulumi.Context, args LookupManagedInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupManagedInstanceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupManagedInstanceResult, error) {
			args := v.(LookupManagedInstanceArgs)
			r, err := LookupManagedInstance(ctx, &args, opts...)
			var s LookupManagedInstanceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupManagedInstanceResultOutput)
}

// A collection of arguments for invoking getManagedInstance.
type LookupManagedInstanceOutputArgs struct {
	// The name of the SQL Managed Instance.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group where the SQL Managed Instance exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupManagedInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagedInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getManagedInstance.
type LookupManagedInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupManagedInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagedInstanceResult)(nil)).Elem()
}

func (o LookupManagedInstanceResultOutput) ToLookupManagedInstanceResultOutput() LookupManagedInstanceResultOutput {
	return o
}

func (o LookupManagedInstanceResultOutput) ToLookupManagedInstanceResultOutputWithContext(ctx context.Context) LookupManagedInstanceResultOutput {
	return o
}

// The administrator login name for the SQL Managed Instance.
func (o LookupManagedInstanceResultOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.AdministratorLogin }).(pulumi.StringOutput)
}

// Specifies how the SQL Managed Instance will be collated.
func (o LookupManagedInstanceResultOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.Collation }).(pulumi.StringOutput)
}

func (o LookupManagedInstanceResultOutput) CustomerManagedKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.CustomerManagedKeyId }).(pulumi.StringOutput)
}

// The ID of the SQL Managed Instance which shares the DNS zone.
func (o LookupManagedInstanceResultOutput) DnsZonePartnerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.DnsZonePartnerId }).(pulumi.StringOutput)
}

// The fully qualified domain name of the Azure Managed SQL Instance.
func (o LookupManagedInstanceResultOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupManagedInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o LookupManagedInstanceResultOutput) Identities() GetManagedInstanceIdentityArrayOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) []GetManagedInstanceIdentity { return v.Identities }).(GetManagedInstanceIdentityArrayOutput)
}

// What type of license the SQL Managed Instance uses.
func (o LookupManagedInstanceResultOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.LicenseType }).(pulumi.StringOutput)
}

// Specifies the supported Azure location where the resource exists.
func (o LookupManagedInstanceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.Location }).(pulumi.StringOutput)
}

// The Minimum TLS Version.
func (o LookupManagedInstanceResultOutput) MinimumTlsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.MinimumTlsVersion }).(pulumi.StringOutput)
}

func (o LookupManagedInstanceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies how the SQL Managed Instance will be accessed.
func (o LookupManagedInstanceResultOutput) ProxyOverride() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.ProxyOverride }).(pulumi.StringOutput)
}

// Whether the public data endpoint is enabled.
func (o LookupManagedInstanceResultOutput) PublicDataEndpointEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) bool { return v.PublicDataEndpointEnabled }).(pulumi.BoolOutput)
}

func (o LookupManagedInstanceResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Specifies the SKU Name of the SQL Managed Instance.
func (o LookupManagedInstanceResultOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.SkuName }).(pulumi.StringOutput)
}

// Specifies the storage account type used to store backups for this database.
func (o LookupManagedInstanceResultOutput) StorageAccountType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.StorageAccountType }).(pulumi.StringOutput)
}

// Maximum storage space allocated for the SQL Managed Instance.
func (o LookupManagedInstanceResultOutput) StorageSizeInGb() pulumi.IntOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) int { return v.StorageSizeInGb }).(pulumi.IntOutput)
}

// The subnet resource ID that the SQL Managed Instance is associated with.
func (o LookupManagedInstanceResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the resource.
func (o LookupManagedInstanceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The TimeZone ID that the SQL Managed Instance is running in.
func (o LookupManagedInstanceResultOutput) TimezoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) string { return v.TimezoneId }).(pulumi.StringOutput)
}

// Number of cores that are assigned to the SQL Managed Instance.
func (o LookupManagedInstanceResultOutput) Vcores() pulumi.IntOutput {
	return o.ApplyT(func(v LookupManagedInstanceResult) int { return v.Vcores }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupManagedInstanceResultOutput{})
}
