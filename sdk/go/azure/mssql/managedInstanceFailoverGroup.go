// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure SQL Managed Instance Failover Group.
//
// ## Example Usage
//
// > **Note:** For a more complete example, see the `./examples/sql-azure/managed_instance_failover_group` directory within the GitHub Repository.
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/mssql"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/network"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/privatedns"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			name := "mymssqlmitest"
//			primaryName := fmt.Sprintf("%v-primary", name)
//			primaryLocation := "West Europe"
//			failoverName := fmt.Sprintf("%v-failover", name)
//			failoverLocation := "North Europe"
//			// # Primary SQL Managed Instance
//			primary, err := core.NewResourceGroup(ctx, "primary", &core.ResourceGroupArgs{
//				Name:     pulumi.String(primaryName),
//				Location: pulumi.String(primaryLocation),
//			})
//			if err != nil {
//				return err
//			}
//			exampleZone, err := privatedns.NewZone(ctx, "example", &privatedns.ZoneArgs{
//				Name:              pulumi.Sprintf("%v.private", name),
//				ResourceGroupName: primary.Name,
//			})
//			if err != nil {
//				return err
//			}
//			primaryVirtualNetwork, err := network.NewVirtualNetwork(ctx, "primary", &network.VirtualNetworkArgs{
//				Name:              pulumi.String(primaryName),
//				Location:          primary.Location,
//				ResourceGroupName: primary.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			primaryZoneVirtualNetworkLink, err := privatedns.NewZoneVirtualNetworkLink(ctx, "primary", &privatedns.ZoneVirtualNetworkLinkArgs{
//				Name:               pulumi.String("primary-link"),
//				ResourceGroupName:  primary.Name,
//				PrivateDnsZoneName: exampleZone.Name,
//				VirtualNetworkId:   primaryVirtualNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			primarySubnet, err := network.NewSubnet(ctx, "primary", &network.SubnetArgs{
//				Name:               pulumi.String(primaryName),
//				ResourceGroupName:  primary.Name,
//				VirtualNetworkName: primaryVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.1.0/24"),
//				},
//				Delegations: network.SubnetDelegationArray{
//					&network.SubnetDelegationArgs{
//						Name: pulumi.String("delegation"),
//						ServiceDelegation: &network.SubnetDelegationServiceDelegationArgs{
//							Actions: pulumi.StringArray{
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/join/action"),
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action"),
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action"),
//							},
//							Name: pulumi.String("Microsoft.Sql/managedInstances"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			primaryNetworkSecurityGroup, err := network.NewNetworkSecurityGroup(ctx, "primary", &network.NetworkSecurityGroupArgs{
//				Name:              pulumi.String(primaryName),
//				Location:          primary.Location,
//				ResourceGroupName: primary.Name,
//			})
//			if err != nil {
//				return err
//			}
//			primarySubnetNetworkSecurityGroupAssociation, err := network.NewSubnetNetworkSecurityGroupAssociation(ctx, "primary", &network.SubnetNetworkSecurityGroupAssociationArgs{
//				SubnetId:               primarySubnet.ID(),
//				NetworkSecurityGroupId: primaryNetworkSecurityGroup.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			primaryRouteTable, err := network.NewRouteTable(ctx, "primary", &network.RouteTableArgs{
//				Name:              pulumi.String(primaryName),
//				Location:          primary.Location,
//				ResourceGroupName: primary.Name,
//			})
//			if err != nil {
//				return err
//			}
//			primarySubnetRouteTableAssociation, err := network.NewSubnetRouteTableAssociation(ctx, "primary", &network.SubnetRouteTableAssociationArgs{
//				SubnetId:     primarySubnet.ID(),
//				RouteTableId: primaryRouteTable.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			primaryManagedInstance, err := mssql.NewManagedInstance(ctx, "primary", &mssql.ManagedInstanceArgs{
//				Name:                       pulumi.String(primaryName),
//				ResourceGroupName:          primary.Name,
//				Location:                   primary.Location,
//				AdministratorLogin:         pulumi.String("mradministrator"),
//				AdministratorLoginPassword: pulumi.String("thisIsDog11"),
//				LicenseType:                pulumi.String("BasePrice"),
//				SubnetId:                   primarySubnet.ID(),
//				SkuName:                    pulumi.String("GP_Gen5"),
//				Vcores:                     pulumi.Int(4),
//				StorageSizeInGb:            pulumi.Int(32),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				primarySubnetNetworkSecurityGroupAssociation,
//				primarySubnetRouteTableAssociation,
//			}))
//			if err != nil {
//				return err
//			}
//			// # Secondary (Fail-over) SQL Managed Instance
//			failover, err := core.NewResourceGroup(ctx, "failover", &core.ResourceGroupArgs{
//				Name:     pulumi.String(failoverName),
//				Location: pulumi.String(failoverLocation),
//			})
//			if err != nil {
//				return err
//			}
//			failoverVirtualNetwork, err := network.NewVirtualNetwork(ctx, "failover", &network.VirtualNetworkArgs{
//				Name:              pulumi.String(failoverName),
//				Location:          failover.Location,
//				ResourceGroupName: failover.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.1.0.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			failoverZoneVirtualNetworkLink, err := privatedns.NewZoneVirtualNetworkLink(ctx, "failover", &privatedns.ZoneVirtualNetworkLinkArgs{
//				Name:               pulumi.String("failover-link"),
//				ResourceGroupName:  exampleZone.ResourceGroupName,
//				PrivateDnsZoneName: exampleZone.Name,
//				VirtualNetworkId:   failoverVirtualNetwork.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			failoverSubnet, err := network.NewSubnet(ctx, "failover", &network.SubnetArgs{
//				Name:               pulumi.String("ManagedInstance"),
//				ResourceGroupName:  failover.Name,
//				VirtualNetworkName: failoverVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.1.1.0/24"),
//				},
//				Delegations: network.SubnetDelegationArray{
//					&network.SubnetDelegationArgs{
//						Name: pulumi.String("delegation"),
//						ServiceDelegation: &network.SubnetDelegationServiceDelegationArgs{
//							Actions: pulumi.StringArray{
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/join/action"),
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/prepareNetworkPolicies/action"),
//								pulumi.String("Microsoft.Network/virtualNetworks/subnets/unprepareNetworkPolicies/action"),
//							},
//							Name: pulumi.String("Microsoft.Sql/managedInstances"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			failoverNetworkSecurityGroup, err := network.NewNetworkSecurityGroup(ctx, "failover", &network.NetworkSecurityGroupArgs{
//				Name:              pulumi.String(failoverName),
//				Location:          failover.Location,
//				ResourceGroupName: failover.Name,
//			})
//			if err != nil {
//				return err
//			}
//			failoverSubnetNetworkSecurityGroupAssociation, err := network.NewSubnetNetworkSecurityGroupAssociation(ctx, "failover", &network.SubnetNetworkSecurityGroupAssociationArgs{
//				SubnetId:               failoverSubnet.ID(),
//				NetworkSecurityGroupId: failoverNetworkSecurityGroup.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			failoverRouteTable, err := network.NewRouteTable(ctx, "failover", &network.RouteTableArgs{
//				Name:              pulumi.String(failoverName),
//				Location:          failover.Location,
//				ResourceGroupName: failover.Name,
//			})
//			if err != nil {
//				return err
//			}
//			failoverSubnetRouteTableAssociation, err := network.NewSubnetRouteTableAssociation(ctx, "failover", &network.SubnetRouteTableAssociationArgs{
//				SubnetId:     failoverSubnet.ID(),
//				RouteTableId: failoverRouteTable.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			failoverManagedInstance, err := mssql.NewManagedInstance(ctx, "failover", &mssql.ManagedInstanceArgs{
//				Name:                       pulumi.String(failoverName),
//				ResourceGroupName:          failover.Name,
//				Location:                   failover.Location,
//				AdministratorLogin:         pulumi.String("mradministrator"),
//				AdministratorLoginPassword: pulumi.String("thisIsDog11"),
//				LicenseType:                pulumi.String("BasePrice"),
//				SubnetId:                   failoverSubnet.ID(),
//				SkuName:                    pulumi.String("GP_Gen5"),
//				Vcores:                     pulumi.Int(4),
//				StorageSizeInGb:            pulumi.Int(32),
//				DnsZonePartnerId:           primaryManagedInstance.ID(),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				failoverSubnetNetworkSecurityGroupAssociation,
//				failoverSubnetRouteTableAssociation,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = mssql.NewManagedInstanceFailoverGroup(ctx, "example", &mssql.ManagedInstanceFailoverGroupArgs{
//				Name:                     pulumi.String("example-failover-group"),
//				Location:                 primaryManagedInstance.Location,
//				ManagedInstanceId:        primaryManagedInstance.ID(),
//				PartnerManagedInstanceId: failoverManagedInstance.ID(),
//				SecondaryType:            pulumi.String("Geo"),
//				ReadWriteEndpointFailoverPolicy: &mssql.ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyArgs{
//					Mode:         pulumi.String("Automatic"),
//					GraceMinutes: pulumi.Int(60),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				primaryZoneVirtualNetworkLink,
//				failoverZoneVirtualNetworkLink,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = network.NewVirtualNetworkPeering(ctx, "primary_to_failover", &network.VirtualNetworkPeeringArgs{
//				Name:                   pulumi.String("primary-to-failover"),
//				RemoteVirtualNetworkId: failoverVirtualNetwork.ID(),
//				ResourceGroupName:      primary.Name,
//				VirtualNetworkName:     primaryVirtualNetwork.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewSubnet(ctx, "default", &network.SubnetArgs{
//				Name:               pulumi.String("default"),
//				ResourceGroupName:  failover.Name,
//				VirtualNetworkName: failoverVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.1.0.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = network.NewVirtualNetworkPeering(ctx, "failover_to_primary", &network.VirtualNetworkPeeringArgs{
//				Name:                   pulumi.String("failover-to-primary"),
//				RemoteVirtualNetworkId: primaryVirtualNetwork.ID(),
//				ResourceGroupName:      failover.Name,
//				VirtualNetworkName:     failoverVirtualNetwork.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// > **Note:** There are many prerequisites that must be in place before creating the failover group. To see them all, refer to [Configure a failover group for Azure SQL Managed Instance](https://learn.microsoft.com/en-us/azure/azure-sql/managed-instance/failover-group-configure-sql-mi).
//
// ## Import
//
// SQL Instance Failover Groups can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:mssql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Sql/locations/Location/instanceFailoverGroups/failoverGroup1
// ```
type ManagedInstanceFailoverGroup struct {
	pulumi.CustomResourceState

	// The Azure Region where the Managed Instance Failover Group should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The ID of the Azure SQL Managed Instance which will be replicated using a Managed Instance Failover Group. Changing this forces a new resource to be created.
	ManagedInstanceId pulumi.StringOutput `pulumi:"managedInstanceId"`
	// The name which should be used for this Managed Instance Failover Group. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Azure SQL Managed Instance which will be replicated to. Changing this forces a new resource to be created.
	PartnerManagedInstanceId pulumi.StringOutput `pulumi:"partnerManagedInstanceId"`
	// A `partnerRegion` block as defined below.
	PartnerRegions ManagedInstanceFailoverGroupPartnerRegionArrayOutput `pulumi:"partnerRegions"`
	// A `readWriteEndpointFailoverPolicy` block as defined below.
	ReadWriteEndpointFailoverPolicy ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput `pulumi:"readWriteEndpointFailoverPolicy"`
	// Failover policy for the read-only endpoint. Defaults to `true`.
	ReadonlyEndpointFailoverPolicyEnabled pulumi.BoolPtrOutput `pulumi:"readonlyEndpointFailoverPolicyEnabled"`
	// The partner replication role of the Managed Instance Failover Group.
	Role pulumi.StringOutput `pulumi:"role"`
	// The type of the secondary Managed Instance. Possible values are `Geo`, `Standby`. Defaults to `Geo`.
	SecondaryType pulumi.StringPtrOutput `pulumi:"secondaryType"`
}

// NewManagedInstanceFailoverGroup registers a new resource with the given unique name, arguments, and options.
func NewManagedInstanceFailoverGroup(ctx *pulumi.Context,
	name string, args *ManagedInstanceFailoverGroupArgs, opts ...pulumi.ResourceOption) (*ManagedInstanceFailoverGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagedInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'ManagedInstanceId'")
	}
	if args.PartnerManagedInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'PartnerManagedInstanceId'")
	}
	if args.ReadWriteEndpointFailoverPolicy == nil {
		return nil, errors.New("invalid value for required argument 'ReadWriteEndpointFailoverPolicy'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure:sql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedInstanceFailoverGroup
	err := ctx.RegisterResource("azure:mssql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedInstanceFailoverGroup gets an existing ManagedInstanceFailoverGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedInstanceFailoverGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedInstanceFailoverGroupState, opts ...pulumi.ResourceOption) (*ManagedInstanceFailoverGroup, error) {
	var resource ManagedInstanceFailoverGroup
	err := ctx.ReadResource("azure:mssql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedInstanceFailoverGroup resources.
type managedInstanceFailoverGroupState struct {
	// The Azure Region where the Managed Instance Failover Group should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The ID of the Azure SQL Managed Instance which will be replicated using a Managed Instance Failover Group. Changing this forces a new resource to be created.
	ManagedInstanceId *string `pulumi:"managedInstanceId"`
	// The name which should be used for this Managed Instance Failover Group. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Azure SQL Managed Instance which will be replicated to. Changing this forces a new resource to be created.
	PartnerManagedInstanceId *string `pulumi:"partnerManagedInstanceId"`
	// A `partnerRegion` block as defined below.
	PartnerRegions []ManagedInstanceFailoverGroupPartnerRegion `pulumi:"partnerRegions"`
	// A `readWriteEndpointFailoverPolicy` block as defined below.
	ReadWriteEndpointFailoverPolicy *ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy `pulumi:"readWriteEndpointFailoverPolicy"`
	// Failover policy for the read-only endpoint. Defaults to `true`.
	ReadonlyEndpointFailoverPolicyEnabled *bool `pulumi:"readonlyEndpointFailoverPolicyEnabled"`
	// The partner replication role of the Managed Instance Failover Group.
	Role *string `pulumi:"role"`
	// The type of the secondary Managed Instance. Possible values are `Geo`, `Standby`. Defaults to `Geo`.
	SecondaryType *string `pulumi:"secondaryType"`
}

type ManagedInstanceFailoverGroupState struct {
	// The Azure Region where the Managed Instance Failover Group should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The ID of the Azure SQL Managed Instance which will be replicated using a Managed Instance Failover Group. Changing this forces a new resource to be created.
	ManagedInstanceId pulumi.StringPtrInput
	// The name which should be used for this Managed Instance Failover Group. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Azure SQL Managed Instance which will be replicated to. Changing this forces a new resource to be created.
	PartnerManagedInstanceId pulumi.StringPtrInput
	// A `partnerRegion` block as defined below.
	PartnerRegions ManagedInstanceFailoverGroupPartnerRegionArrayInput
	// A `readWriteEndpointFailoverPolicy` block as defined below.
	ReadWriteEndpointFailoverPolicy ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyPtrInput
	// Failover policy for the read-only endpoint. Defaults to `true`.
	ReadonlyEndpointFailoverPolicyEnabled pulumi.BoolPtrInput
	// The partner replication role of the Managed Instance Failover Group.
	Role pulumi.StringPtrInput
	// The type of the secondary Managed Instance. Possible values are `Geo`, `Standby`. Defaults to `Geo`.
	SecondaryType pulumi.StringPtrInput
}

func (ManagedInstanceFailoverGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceFailoverGroupState)(nil)).Elem()
}

type managedInstanceFailoverGroupArgs struct {
	// The Azure Region where the Managed Instance Failover Group should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The ID of the Azure SQL Managed Instance which will be replicated using a Managed Instance Failover Group. Changing this forces a new resource to be created.
	ManagedInstanceId string `pulumi:"managedInstanceId"`
	// The name which should be used for this Managed Instance Failover Group. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The ID of the Azure SQL Managed Instance which will be replicated to. Changing this forces a new resource to be created.
	PartnerManagedInstanceId string `pulumi:"partnerManagedInstanceId"`
	// A `readWriteEndpointFailoverPolicy` block as defined below.
	ReadWriteEndpointFailoverPolicy ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicy `pulumi:"readWriteEndpointFailoverPolicy"`
	// Failover policy for the read-only endpoint. Defaults to `true`.
	ReadonlyEndpointFailoverPolicyEnabled *bool `pulumi:"readonlyEndpointFailoverPolicyEnabled"`
	// The type of the secondary Managed Instance. Possible values are `Geo`, `Standby`. Defaults to `Geo`.
	SecondaryType *string `pulumi:"secondaryType"`
}

// The set of arguments for constructing a ManagedInstanceFailoverGroup resource.
type ManagedInstanceFailoverGroupArgs struct {
	// The Azure Region where the Managed Instance Failover Group should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The ID of the Azure SQL Managed Instance which will be replicated using a Managed Instance Failover Group. Changing this forces a new resource to be created.
	ManagedInstanceId pulumi.StringInput
	// The name which should be used for this Managed Instance Failover Group. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The ID of the Azure SQL Managed Instance which will be replicated to. Changing this forces a new resource to be created.
	PartnerManagedInstanceId pulumi.StringInput
	// A `readWriteEndpointFailoverPolicy` block as defined below.
	ReadWriteEndpointFailoverPolicy ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyInput
	// Failover policy for the read-only endpoint. Defaults to `true`.
	ReadonlyEndpointFailoverPolicyEnabled pulumi.BoolPtrInput
	// The type of the secondary Managed Instance. Possible values are `Geo`, `Standby`. Defaults to `Geo`.
	SecondaryType pulumi.StringPtrInput
}

func (ManagedInstanceFailoverGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedInstanceFailoverGroupArgs)(nil)).Elem()
}

type ManagedInstanceFailoverGroupInput interface {
	pulumi.Input

	ToManagedInstanceFailoverGroupOutput() ManagedInstanceFailoverGroupOutput
	ToManagedInstanceFailoverGroupOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupOutput
}

func (*ManagedInstanceFailoverGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceFailoverGroup)(nil)).Elem()
}

func (i *ManagedInstanceFailoverGroup) ToManagedInstanceFailoverGroupOutput() ManagedInstanceFailoverGroupOutput {
	return i.ToManagedInstanceFailoverGroupOutputWithContext(context.Background())
}

func (i *ManagedInstanceFailoverGroup) ToManagedInstanceFailoverGroupOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceFailoverGroupOutput)
}

// ManagedInstanceFailoverGroupArrayInput is an input type that accepts ManagedInstanceFailoverGroupArray and ManagedInstanceFailoverGroupArrayOutput values.
// You can construct a concrete instance of `ManagedInstanceFailoverGroupArrayInput` via:
//
//	ManagedInstanceFailoverGroupArray{ ManagedInstanceFailoverGroupArgs{...} }
type ManagedInstanceFailoverGroupArrayInput interface {
	pulumi.Input

	ToManagedInstanceFailoverGroupArrayOutput() ManagedInstanceFailoverGroupArrayOutput
	ToManagedInstanceFailoverGroupArrayOutputWithContext(context.Context) ManagedInstanceFailoverGroupArrayOutput
}

type ManagedInstanceFailoverGroupArray []ManagedInstanceFailoverGroupInput

func (ManagedInstanceFailoverGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceFailoverGroup)(nil)).Elem()
}

func (i ManagedInstanceFailoverGroupArray) ToManagedInstanceFailoverGroupArrayOutput() ManagedInstanceFailoverGroupArrayOutput {
	return i.ToManagedInstanceFailoverGroupArrayOutputWithContext(context.Background())
}

func (i ManagedInstanceFailoverGroupArray) ToManagedInstanceFailoverGroupArrayOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceFailoverGroupArrayOutput)
}

// ManagedInstanceFailoverGroupMapInput is an input type that accepts ManagedInstanceFailoverGroupMap and ManagedInstanceFailoverGroupMapOutput values.
// You can construct a concrete instance of `ManagedInstanceFailoverGroupMapInput` via:
//
//	ManagedInstanceFailoverGroupMap{ "key": ManagedInstanceFailoverGroupArgs{...} }
type ManagedInstanceFailoverGroupMapInput interface {
	pulumi.Input

	ToManagedInstanceFailoverGroupMapOutput() ManagedInstanceFailoverGroupMapOutput
	ToManagedInstanceFailoverGroupMapOutputWithContext(context.Context) ManagedInstanceFailoverGroupMapOutput
}

type ManagedInstanceFailoverGroupMap map[string]ManagedInstanceFailoverGroupInput

func (ManagedInstanceFailoverGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceFailoverGroup)(nil)).Elem()
}

func (i ManagedInstanceFailoverGroupMap) ToManagedInstanceFailoverGroupMapOutput() ManagedInstanceFailoverGroupMapOutput {
	return i.ToManagedInstanceFailoverGroupMapOutputWithContext(context.Background())
}

func (i ManagedInstanceFailoverGroupMap) ToManagedInstanceFailoverGroupMapOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedInstanceFailoverGroupMapOutput)
}

type ManagedInstanceFailoverGroupOutput struct{ *pulumi.OutputState }

func (ManagedInstanceFailoverGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedInstanceFailoverGroup)(nil)).Elem()
}

func (o ManagedInstanceFailoverGroupOutput) ToManagedInstanceFailoverGroupOutput() ManagedInstanceFailoverGroupOutput {
	return o
}

func (o ManagedInstanceFailoverGroupOutput) ToManagedInstanceFailoverGroupOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupOutput {
	return o
}

// The Azure Region where the Managed Instance Failover Group should exist. Changing this forces a new resource to be created.
func (o ManagedInstanceFailoverGroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceFailoverGroup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The ID of the Azure SQL Managed Instance which will be replicated using a Managed Instance Failover Group. Changing this forces a new resource to be created.
func (o ManagedInstanceFailoverGroupOutput) ManagedInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceFailoverGroup) pulumi.StringOutput { return v.ManagedInstanceId }).(pulumi.StringOutput)
}

// The name which should be used for this Managed Instance Failover Group. Changing this forces a new resource to be created.
func (o ManagedInstanceFailoverGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceFailoverGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Azure SQL Managed Instance which will be replicated to. Changing this forces a new resource to be created.
func (o ManagedInstanceFailoverGroupOutput) PartnerManagedInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceFailoverGroup) pulumi.StringOutput { return v.PartnerManagedInstanceId }).(pulumi.StringOutput)
}

// A `partnerRegion` block as defined below.
func (o ManagedInstanceFailoverGroupOutput) PartnerRegions() ManagedInstanceFailoverGroupPartnerRegionArrayOutput {
	return o.ApplyT(func(v *ManagedInstanceFailoverGroup) ManagedInstanceFailoverGroupPartnerRegionArrayOutput {
		return v.PartnerRegions
	}).(ManagedInstanceFailoverGroupPartnerRegionArrayOutput)
}

// A `readWriteEndpointFailoverPolicy` block as defined below.
func (o ManagedInstanceFailoverGroupOutput) ReadWriteEndpointFailoverPolicy() ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput {
	return o.ApplyT(func(v *ManagedInstanceFailoverGroup) ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput {
		return v.ReadWriteEndpointFailoverPolicy
	}).(ManagedInstanceFailoverGroupReadWriteEndpointFailoverPolicyOutput)
}

// Failover policy for the read-only endpoint. Defaults to `true`.
func (o ManagedInstanceFailoverGroupOutput) ReadonlyEndpointFailoverPolicyEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceFailoverGroup) pulumi.BoolPtrOutput {
		return v.ReadonlyEndpointFailoverPolicyEnabled
	}).(pulumi.BoolPtrOutput)
}

// The partner replication role of the Managed Instance Failover Group.
func (o ManagedInstanceFailoverGroupOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedInstanceFailoverGroup) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// The type of the secondary Managed Instance. Possible values are `Geo`, `Standby`. Defaults to `Geo`.
func (o ManagedInstanceFailoverGroupOutput) SecondaryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedInstanceFailoverGroup) pulumi.StringPtrOutput { return v.SecondaryType }).(pulumi.StringPtrOutput)
}

type ManagedInstanceFailoverGroupArrayOutput struct{ *pulumi.OutputState }

func (ManagedInstanceFailoverGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedInstanceFailoverGroup)(nil)).Elem()
}

func (o ManagedInstanceFailoverGroupArrayOutput) ToManagedInstanceFailoverGroupArrayOutput() ManagedInstanceFailoverGroupArrayOutput {
	return o
}

func (o ManagedInstanceFailoverGroupArrayOutput) ToManagedInstanceFailoverGroupArrayOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupArrayOutput {
	return o
}

func (o ManagedInstanceFailoverGroupArrayOutput) Index(i pulumi.IntInput) ManagedInstanceFailoverGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedInstanceFailoverGroup {
		return vs[0].([]*ManagedInstanceFailoverGroup)[vs[1].(int)]
	}).(ManagedInstanceFailoverGroupOutput)
}

type ManagedInstanceFailoverGroupMapOutput struct{ *pulumi.OutputState }

func (ManagedInstanceFailoverGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedInstanceFailoverGroup)(nil)).Elem()
}

func (o ManagedInstanceFailoverGroupMapOutput) ToManagedInstanceFailoverGroupMapOutput() ManagedInstanceFailoverGroupMapOutput {
	return o
}

func (o ManagedInstanceFailoverGroupMapOutput) ToManagedInstanceFailoverGroupMapOutputWithContext(ctx context.Context) ManagedInstanceFailoverGroupMapOutput {
	return o
}

func (o ManagedInstanceFailoverGroupMapOutput) MapIndex(k pulumi.StringInput) ManagedInstanceFailoverGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedInstanceFailoverGroup {
		return vs[0].(map[string]*ManagedInstanceFailoverGroup)[vs[1].(string)]
	}).(ManagedInstanceFailoverGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceFailoverGroupInput)(nil)).Elem(), &ManagedInstanceFailoverGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceFailoverGroupArrayInput)(nil)).Elem(), ManagedInstanceFailoverGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedInstanceFailoverGroupMapInput)(nil)).Elem(), ManagedInstanceFailoverGroupMap{})
	pulumi.RegisterOutputType(ManagedInstanceFailoverGroupOutput{})
	pulumi.RegisterOutputType(ManagedInstanceFailoverGroupArrayOutput{})
	pulumi.RegisterOutputType(ManagedInstanceFailoverGroupMapOutput{})
}
