// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages the Vulnerability Assessment for a MS SQL Server.
//
// > **NOTE** Vulnerability Assessment is currently only available for MS SQL databases.
type ServerVulnerabilityAssessment struct {
	pulumi.CustomResourceState

	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans ServerVulnerabilityAssessmentRecurringScansOutput `pulumi:"recurringScans"`
	// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
	ServerSecurityAlertPolicyId pulumi.StringOutput `pulumi:"serverSecurityAlertPolicyId"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath pulumi.StringOutput `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey pulumi.StringPtrOutput `pulumi:"storageContainerSasKey"`
}

// NewServerVulnerabilityAssessment registers a new resource with the given unique name, arguments, and options.
func NewServerVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *ServerVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOption) (*ServerVulnerabilityAssessment, error) {
	if args == nil || args.ServerSecurityAlertPolicyId == nil {
		return nil, errors.New("missing required argument 'ServerSecurityAlertPolicyId'")
	}
	if args == nil || args.StorageContainerPath == nil {
		return nil, errors.New("missing required argument 'StorageContainerPath'")
	}
	if args == nil {
		args = &ServerVulnerabilityAssessmentArgs{}
	}
	var resource ServerVulnerabilityAssessment
	err := ctx.RegisterResource("azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerVulnerabilityAssessment gets an existing ServerVulnerabilityAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerVulnerabilityAssessmentState, opts ...pulumi.ResourceOption) (*ServerVulnerabilityAssessment, error) {
	var resource ServerVulnerabilityAssessment
	err := ctx.ReadResource("azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerVulnerabilityAssessment resources.
type serverVulnerabilityAssessmentState struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans *ServerVulnerabilityAssessmentRecurringScans `pulumi:"recurringScans"`
	// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
	ServerSecurityAlertPolicyId *string `pulumi:"serverSecurityAlertPolicyId"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath *string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
}

type ServerVulnerabilityAssessmentState struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans ServerVulnerabilityAssessmentRecurringScansPtrInput
	// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
	ServerSecurityAlertPolicyId pulumi.StringPtrInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath pulumi.StringPtrInput
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey pulumi.StringPtrInput
}

func (ServerVulnerabilityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverVulnerabilityAssessmentState)(nil)).Elem()
}

type serverVulnerabilityAssessmentArgs struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans *ServerVulnerabilityAssessmentRecurringScans `pulumi:"recurringScans"`
	// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
	ServerSecurityAlertPolicyId string `pulumi:"serverSecurityAlertPolicyId"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
}

// The set of arguments for constructing a ServerVulnerabilityAssessment resource.
type ServerVulnerabilityAssessmentArgs struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans ServerVulnerabilityAssessmentRecurringScansPtrInput
	// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
	ServerSecurityAlertPolicyId pulumi.StringInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath pulumi.StringInput
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey pulumi.StringPtrInput
}

func (ServerVulnerabilityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverVulnerabilityAssessmentArgs)(nil)).Elem()
}
