// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages the Vulnerability Assessment for a MS SQL Server.
//
// > **NOTE** Vulnerability Assessment is currently only available for MS SQL databases.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/mssql"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/sql"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/storage"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleSqlServer, err := sql.NewSqlServer(ctx, "exampleSqlServer", &sql.SqlServerArgs{
// 			ResourceGroupName:          exampleResourceGroup.Name,
// 			Location:                   exampleResourceGroup.Location,
// 			Version:                    pulumi.String("12.0"),
// 			AdministratorLogin:         pulumi.String("4dm1n157r470r"),
// 			AdministratorLoginPassword: pulumi.String("4-v3ry-53cr37-p455w0rd"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      exampleResourceGroup.Name,
// 			Location:               exampleResourceGroup.Location,
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("GRS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleContainer, err := storage.NewContainer(ctx, "exampleContainer", &storage.ContainerArgs{
// 			StorageAccountName:  exampleAccount.Name,
// 			ContainerAccessType: pulumi.String("private"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleServerSecurityAlertPolicy, err := mssql.NewServerSecurityAlertPolicy(ctx, "exampleServerSecurityAlertPolicy", &mssql.ServerSecurityAlertPolicyArgs{
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			ServerName:        exampleSqlServer.Name,
// 			State:             pulumi.String("Enabled"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = mssql.NewServerVulnerabilityAssessment(ctx, "exampleServerVulnerabilityAssessment", &mssql.ServerVulnerabilityAssessmentArgs{
// 			ServerSecurityAlertPolicyId: exampleServerSecurityAlertPolicy.ID(),
// 			StorageContainerPath: pulumi.All(exampleAccount.PrimaryBlobEndpoint, exampleContainer.Name).ApplyT(func(_args []interface{}) (string, error) {
// 				primaryBlobEndpoint := _args[0].(string)
// 				name := _args[1].(string)
// 				return fmt.Sprintf("%v%v%v", primaryBlobEndpoint, name, "/"), nil
// 			}).(pulumi.StringOutput),
// 			StorageAccountAccessKey: exampleAccount.PrimaryAccessKey,
// 			RecurringScans: &mssql.ServerVulnerabilityAssessmentRecurringScansArgs{
// 				Enabled:                 pulumi.Bool(true),
// 				EmailSubscriptionAdmins: pulumi.Bool(true),
// 				Emails: pulumi.StringArray{
// 					pulumi.String("email@example1.com"),
// 					pulumi.String("email@example2.com"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// MS SQL Server Vulnerability Assessment can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/servers/mssqlserver/vulnerabilityAssessments/Default
// ```
type ServerVulnerabilityAssessment struct {
	pulumi.CustomResourceState

	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans ServerVulnerabilityAssessmentRecurringScansOutput `pulumi:"recurringScans"`
	// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
	ServerSecurityAlertPolicyId pulumi.StringOutput `pulumi:"serverSecurityAlertPolicyId"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey pulumi.StringPtrOutput `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath pulumi.StringOutput `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey pulumi.StringPtrOutput `pulumi:"storageContainerSasKey"`
}

// NewServerVulnerabilityAssessment registers a new resource with the given unique name, arguments, and options.
func NewServerVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *ServerVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOption) (*ServerVulnerabilityAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerSecurityAlertPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'ServerSecurityAlertPolicyId'")
	}
	if args.StorageContainerPath == nil {
		return nil, errors.New("invalid value for required argument 'StorageContainerPath'")
	}
	var resource ServerVulnerabilityAssessment
	err := ctx.RegisterResource("azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerVulnerabilityAssessment gets an existing ServerVulnerabilityAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerVulnerabilityAssessmentState, opts ...pulumi.ResourceOption) (*ServerVulnerabilityAssessment, error) {
	var resource ServerVulnerabilityAssessment
	err := ctx.ReadResource("azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerVulnerabilityAssessment resources.
type serverVulnerabilityAssessmentState struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans *ServerVulnerabilityAssessmentRecurringScans `pulumi:"recurringScans"`
	// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
	ServerSecurityAlertPolicyId *string `pulumi:"serverSecurityAlertPolicyId"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath *string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
}

type ServerVulnerabilityAssessmentState struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans ServerVulnerabilityAssessmentRecurringScansPtrInput
	// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
	ServerSecurityAlertPolicyId pulumi.StringPtrInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath pulumi.StringPtrInput
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey pulumi.StringPtrInput
}

func (ServerVulnerabilityAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverVulnerabilityAssessmentState)(nil)).Elem()
}

type serverVulnerabilityAssessmentArgs struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans *ServerVulnerabilityAssessmentRecurringScans `pulumi:"recurringScans"`
	// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
	ServerSecurityAlertPolicyId string `pulumi:"serverSecurityAlertPolicyId"`
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey *string `pulumi:"storageAccountAccessKey"`
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath string `pulumi:"storageContainerPath"`
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey *string `pulumi:"storageContainerSasKey"`
}

// The set of arguments for constructing a ServerVulnerabilityAssessment resource.
type ServerVulnerabilityAssessmentArgs struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans ServerVulnerabilityAssessmentRecurringScansPtrInput
	// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
	ServerSecurityAlertPolicyId pulumi.StringInput
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey pulumi.StringPtrInput
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath pulumi.StringInput
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey pulumi.StringPtrInput
}

func (ServerVulnerabilityAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverVulnerabilityAssessmentArgs)(nil)).Elem()
}

type ServerVulnerabilityAssessmentInput interface {
	pulumi.Input

	ToServerVulnerabilityAssessmentOutput() ServerVulnerabilityAssessmentOutput
	ToServerVulnerabilityAssessmentOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentOutput
}

func (*ServerVulnerabilityAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerVulnerabilityAssessment)(nil))
}

func (i *ServerVulnerabilityAssessment) ToServerVulnerabilityAssessmentOutput() ServerVulnerabilityAssessmentOutput {
	return i.ToServerVulnerabilityAssessmentOutputWithContext(context.Background())
}

func (i *ServerVulnerabilityAssessment) ToServerVulnerabilityAssessmentOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVulnerabilityAssessmentOutput)
}

func (i *ServerVulnerabilityAssessment) ToServerVulnerabilityAssessmentPtrOutput() ServerVulnerabilityAssessmentPtrOutput {
	return i.ToServerVulnerabilityAssessmentPtrOutputWithContext(context.Background())
}

func (i *ServerVulnerabilityAssessment) ToServerVulnerabilityAssessmentPtrOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVulnerabilityAssessmentPtrOutput)
}

type ServerVulnerabilityAssessmentPtrInput interface {
	pulumi.Input

	ToServerVulnerabilityAssessmentPtrOutput() ServerVulnerabilityAssessmentPtrOutput
	ToServerVulnerabilityAssessmentPtrOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentPtrOutput
}

type serverVulnerabilityAssessmentPtrType ServerVulnerabilityAssessmentArgs

func (*serverVulnerabilityAssessmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerVulnerabilityAssessment)(nil))
}

func (i *serverVulnerabilityAssessmentPtrType) ToServerVulnerabilityAssessmentPtrOutput() ServerVulnerabilityAssessmentPtrOutput {
	return i.ToServerVulnerabilityAssessmentPtrOutputWithContext(context.Background())
}

func (i *serverVulnerabilityAssessmentPtrType) ToServerVulnerabilityAssessmentPtrOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVulnerabilityAssessmentPtrOutput)
}

// ServerVulnerabilityAssessmentArrayInput is an input type that accepts ServerVulnerabilityAssessmentArray and ServerVulnerabilityAssessmentArrayOutput values.
// You can construct a concrete instance of `ServerVulnerabilityAssessmentArrayInput` via:
//
//          ServerVulnerabilityAssessmentArray{ ServerVulnerabilityAssessmentArgs{...} }
type ServerVulnerabilityAssessmentArrayInput interface {
	pulumi.Input

	ToServerVulnerabilityAssessmentArrayOutput() ServerVulnerabilityAssessmentArrayOutput
	ToServerVulnerabilityAssessmentArrayOutputWithContext(context.Context) ServerVulnerabilityAssessmentArrayOutput
}

type ServerVulnerabilityAssessmentArray []ServerVulnerabilityAssessmentInput

func (ServerVulnerabilityAssessmentArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ServerVulnerabilityAssessment)(nil))
}

func (i ServerVulnerabilityAssessmentArray) ToServerVulnerabilityAssessmentArrayOutput() ServerVulnerabilityAssessmentArrayOutput {
	return i.ToServerVulnerabilityAssessmentArrayOutputWithContext(context.Background())
}

func (i ServerVulnerabilityAssessmentArray) ToServerVulnerabilityAssessmentArrayOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVulnerabilityAssessmentArrayOutput)
}

// ServerVulnerabilityAssessmentMapInput is an input type that accepts ServerVulnerabilityAssessmentMap and ServerVulnerabilityAssessmentMapOutput values.
// You can construct a concrete instance of `ServerVulnerabilityAssessmentMapInput` via:
//
//          ServerVulnerabilityAssessmentMap{ "key": ServerVulnerabilityAssessmentArgs{...} }
type ServerVulnerabilityAssessmentMapInput interface {
	pulumi.Input

	ToServerVulnerabilityAssessmentMapOutput() ServerVulnerabilityAssessmentMapOutput
	ToServerVulnerabilityAssessmentMapOutputWithContext(context.Context) ServerVulnerabilityAssessmentMapOutput
}

type ServerVulnerabilityAssessmentMap map[string]ServerVulnerabilityAssessmentInput

func (ServerVulnerabilityAssessmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ServerVulnerabilityAssessment)(nil))
}

func (i ServerVulnerabilityAssessmentMap) ToServerVulnerabilityAssessmentMapOutput() ServerVulnerabilityAssessmentMapOutput {
	return i.ToServerVulnerabilityAssessmentMapOutputWithContext(context.Background())
}

func (i ServerVulnerabilityAssessmentMap) ToServerVulnerabilityAssessmentMapOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerVulnerabilityAssessmentMapOutput)
}

type ServerVulnerabilityAssessmentOutput struct {
	*pulumi.OutputState
}

func (ServerVulnerabilityAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerVulnerabilityAssessment)(nil))
}

func (o ServerVulnerabilityAssessmentOutput) ToServerVulnerabilityAssessmentOutput() ServerVulnerabilityAssessmentOutput {
	return o
}

func (o ServerVulnerabilityAssessmentOutput) ToServerVulnerabilityAssessmentOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentOutput {
	return o
}

func (o ServerVulnerabilityAssessmentOutput) ToServerVulnerabilityAssessmentPtrOutput() ServerVulnerabilityAssessmentPtrOutput {
	return o.ToServerVulnerabilityAssessmentPtrOutputWithContext(context.Background())
}

func (o ServerVulnerabilityAssessmentOutput) ToServerVulnerabilityAssessmentPtrOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentPtrOutput {
	return o.ApplyT(func(v ServerVulnerabilityAssessment) *ServerVulnerabilityAssessment {
		return &v
	}).(ServerVulnerabilityAssessmentPtrOutput)
}

type ServerVulnerabilityAssessmentPtrOutput struct {
	*pulumi.OutputState
}

func (ServerVulnerabilityAssessmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerVulnerabilityAssessment)(nil))
}

func (o ServerVulnerabilityAssessmentPtrOutput) ToServerVulnerabilityAssessmentPtrOutput() ServerVulnerabilityAssessmentPtrOutput {
	return o
}

func (o ServerVulnerabilityAssessmentPtrOutput) ToServerVulnerabilityAssessmentPtrOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentPtrOutput {
	return o
}

type ServerVulnerabilityAssessmentArrayOutput struct{ *pulumi.OutputState }

func (ServerVulnerabilityAssessmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerVulnerabilityAssessment)(nil))
}

func (o ServerVulnerabilityAssessmentArrayOutput) ToServerVulnerabilityAssessmentArrayOutput() ServerVulnerabilityAssessmentArrayOutput {
	return o
}

func (o ServerVulnerabilityAssessmentArrayOutput) ToServerVulnerabilityAssessmentArrayOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentArrayOutput {
	return o
}

func (o ServerVulnerabilityAssessmentArrayOutput) Index(i pulumi.IntInput) ServerVulnerabilityAssessmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerVulnerabilityAssessment {
		return vs[0].([]ServerVulnerabilityAssessment)[vs[1].(int)]
	}).(ServerVulnerabilityAssessmentOutput)
}

type ServerVulnerabilityAssessmentMapOutput struct{ *pulumi.OutputState }

func (ServerVulnerabilityAssessmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ServerVulnerabilityAssessment)(nil))
}

func (o ServerVulnerabilityAssessmentMapOutput) ToServerVulnerabilityAssessmentMapOutput() ServerVulnerabilityAssessmentMapOutput {
	return o
}

func (o ServerVulnerabilityAssessmentMapOutput) ToServerVulnerabilityAssessmentMapOutputWithContext(ctx context.Context) ServerVulnerabilityAssessmentMapOutput {
	return o
}

func (o ServerVulnerabilityAssessmentMapOutput) MapIndex(k pulumi.StringInput) ServerVulnerabilityAssessmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ServerVulnerabilityAssessment {
		return vs[0].(map[string]ServerVulnerabilityAssessment)[vs[1].(string)]
	}).(ServerVulnerabilityAssessmentOutput)
}

func init() {
	pulumi.RegisterOutputType(ServerVulnerabilityAssessmentOutput{})
	pulumi.RegisterOutputType(ServerVulnerabilityAssessmentPtrOutput{})
	pulumi.RegisterOutputType(ServerVulnerabilityAssessmentArrayOutput{})
	pulumi.RegisterOutputType(ServerVulnerabilityAssessmentMapOutput{})
}
