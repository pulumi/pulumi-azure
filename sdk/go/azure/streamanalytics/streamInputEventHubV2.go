// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package streamanalytics

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **Note:** This resource creates a Stream Input of type `Microsoft.EventHub/EventHub`, to create a Stream Input of type `Microsoft.ServiceBus/EventHub` please use the resource azurerm_stream_analytics_stream_input_eventhub.
//
// Manages a Stream Analytics Stream Input EventHub V2.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/eventhub"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/streamanalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleJob := streamanalytics.LookupJobOutput(ctx, streamanalytics.GetJobOutputArgs{
//				Name:              pulumi.String("example-job"),
//				ResourceGroupName: exampleResourceGroup.Name,
//			}, nil)
//			exampleEventHubNamespace, err := eventhub.NewEventHubNamespace(ctx, "exampleEventHubNamespace", &eventhub.EventHubNamespaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Standard"),
//				Capacity:          pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			exampleEventHub, err := eventhub.NewEventHub(ctx, "exampleEventHub", &eventhub.EventHubArgs{
//				NamespaceName:     exampleEventHubNamespace.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PartitionCount:    pulumi.Int(2),
//				MessageRetention:  pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			exampleConsumerGroup, err := eventhub.NewConsumerGroup(ctx, "exampleConsumerGroup", &eventhub.ConsumerGroupArgs{
//				NamespaceName:     exampleEventHubNamespace.Name,
//				EventhubName:      exampleEventHub.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = streamanalytics.NewStreamInputEventHubV2(ctx, "exampleStreamInputEventHubV2", &streamanalytics.StreamInputEventHubV2Args{
//				StreamAnalyticsJobId: exampleJob.ApplyT(func(exampleJob streamanalytics.GetJobResult) (*string, error) {
//					return &exampleJob.Id, nil
//				}).(pulumi.StringPtrOutput),
//				EventhubConsumerGroupName: exampleConsumerGroup.Name,
//				EventhubName:              exampleEventHub.Name,
//				ServicebusNamespace:       exampleEventHubNamespace.Name,
//				SharedAccessPolicyKey:     exampleEventHubNamespace.DefaultPrimaryKey,
//				SharedAccessPolicyName:    pulumi.String("RootManageSharedAccessKey"),
//				Serialization: &streamanalytics.StreamInputEventHubV2SerializationArgs{
//					Type:     pulumi.String("Json"),
//					Encoding: pulumi.String("UTF8"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Stream Analytics Stream Input EventHub's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:streamanalytics/streamInputEventHubV2:StreamInputEventHubV2 example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StreamAnalytics/streamingJobs/job1/inputs/input1
//
// ```
type StreamInputEventHubV2 struct {
	pulumi.CustomResourceState

	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode pulumi.StringPtrOutput `pulumi:"authenticationMode"`
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub's default consumer group.
	EventhubConsumerGroupName pulumi.StringPtrOutput `pulumi:"eventhubConsumerGroupName"`
	// The name of the Event Hub.
	EventhubName pulumi.StringOutput `pulumi:"eventhubName"`
	// The name of the Stream Input EventHub V2. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The property the input Event Hub has been partitioned by.
	PartitionKey pulumi.StringPtrOutput `pulumi:"partitionKey"`
	// A `serialization` block as defined below.
	Serialization StreamInputEventHubV2SerializationOutput `pulumi:"serialization"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
	ServicebusNamespace pulumi.StringOutput `pulumi:"servicebusNamespace"`
	// The shared access policy key for the specified shared access policy.
	SharedAccessPolicyKey pulumi.StringPtrOutput `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	SharedAccessPolicyName pulumi.StringPtrOutput `pulumi:"sharedAccessPolicyName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobId pulumi.StringOutput `pulumi:"streamAnalyticsJobId"`
}

// NewStreamInputEventHubV2 registers a new resource with the given unique name, arguments, and options.
func NewStreamInputEventHubV2(ctx *pulumi.Context,
	name string, args *StreamInputEventHubV2Args, opts ...pulumi.ResourceOption) (*StreamInputEventHubV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventhubName == nil {
		return nil, errors.New("invalid value for required argument 'EventhubName'")
	}
	if args.Serialization == nil {
		return nil, errors.New("invalid value for required argument 'Serialization'")
	}
	if args.ServicebusNamespace == nil {
		return nil, errors.New("invalid value for required argument 'ServicebusNamespace'")
	}
	if args.StreamAnalyticsJobId == nil {
		return nil, errors.New("invalid value for required argument 'StreamAnalyticsJobId'")
	}
	if args.SharedAccessPolicyKey != nil {
		args.SharedAccessPolicyKey = pulumi.ToSecret(args.SharedAccessPolicyKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"sharedAccessPolicyKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamInputEventHubV2
	err := ctx.RegisterResource("azure:streamanalytics/streamInputEventHubV2:StreamInputEventHubV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamInputEventHubV2 gets an existing StreamInputEventHubV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamInputEventHubV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamInputEventHubV2State, opts ...pulumi.ResourceOption) (*StreamInputEventHubV2, error) {
	var resource StreamInputEventHubV2
	err := ctx.ReadResource("azure:streamanalytics/streamInputEventHubV2:StreamInputEventHubV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamInputEventHubV2 resources.
type streamInputEventHubV2State struct {
	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub's default consumer group.
	EventhubConsumerGroupName *string `pulumi:"eventhubConsumerGroupName"`
	// The name of the Event Hub.
	EventhubName *string `pulumi:"eventhubName"`
	// The name of the Stream Input EventHub V2. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The property the input Event Hub has been partitioned by.
	PartitionKey *string `pulumi:"partitionKey"`
	// A `serialization` block as defined below.
	Serialization *StreamInputEventHubV2Serialization `pulumi:"serialization"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
	ServicebusNamespace *string `pulumi:"servicebusNamespace"`
	// The shared access policy key for the specified shared access policy.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobId *string `pulumi:"streamAnalyticsJobId"`
}

type StreamInputEventHubV2State struct {
	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode pulumi.StringPtrInput
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub's default consumer group.
	EventhubConsumerGroupName pulumi.StringPtrInput
	// The name of the Event Hub.
	EventhubName pulumi.StringPtrInput
	// The name of the Stream Input EventHub V2. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The property the input Event Hub has been partitioned by.
	PartitionKey pulumi.StringPtrInput
	// A `serialization` block as defined below.
	Serialization StreamInputEventHubV2SerializationPtrInput
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
	ServicebusNamespace pulumi.StringPtrInput
	// The shared access policy key for the specified shared access policy.
	SharedAccessPolicyKey pulumi.StringPtrInput
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	SharedAccessPolicyName pulumi.StringPtrInput
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobId pulumi.StringPtrInput
}

func (StreamInputEventHubV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*streamInputEventHubV2State)(nil)).Elem()
}

type streamInputEventHubV2Args struct {
	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub's default consumer group.
	EventhubConsumerGroupName *string `pulumi:"eventhubConsumerGroupName"`
	// The name of the Event Hub.
	EventhubName string `pulumi:"eventhubName"`
	// The name of the Stream Input EventHub V2. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The property the input Event Hub has been partitioned by.
	PartitionKey *string `pulumi:"partitionKey"`
	// A `serialization` block as defined below.
	Serialization StreamInputEventHubV2Serialization `pulumi:"serialization"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
	ServicebusNamespace string `pulumi:"servicebusNamespace"`
	// The shared access policy key for the specified shared access policy.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobId string `pulumi:"streamAnalyticsJobId"`
}

// The set of arguments for constructing a StreamInputEventHubV2 resource.
type StreamInputEventHubV2Args struct {
	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode pulumi.StringPtrInput
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub's default consumer group.
	EventhubConsumerGroupName pulumi.StringPtrInput
	// The name of the Event Hub.
	EventhubName pulumi.StringInput
	// The name of the Stream Input EventHub V2. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The property the input Event Hub has been partitioned by.
	PartitionKey pulumi.StringPtrInput
	// A `serialization` block as defined below.
	Serialization StreamInputEventHubV2SerializationInput
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
	ServicebusNamespace pulumi.StringInput
	// The shared access policy key for the specified shared access policy.
	SharedAccessPolicyKey pulumi.StringPtrInput
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	SharedAccessPolicyName pulumi.StringPtrInput
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobId pulumi.StringInput
}

func (StreamInputEventHubV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*streamInputEventHubV2Args)(nil)).Elem()
}

type StreamInputEventHubV2Input interface {
	pulumi.Input

	ToStreamInputEventHubV2Output() StreamInputEventHubV2Output
	ToStreamInputEventHubV2OutputWithContext(ctx context.Context) StreamInputEventHubV2Output
}

func (*StreamInputEventHubV2) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputEventHubV2)(nil)).Elem()
}

func (i *StreamInputEventHubV2) ToStreamInputEventHubV2Output() StreamInputEventHubV2Output {
	return i.ToStreamInputEventHubV2OutputWithContext(context.Background())
}

func (i *StreamInputEventHubV2) ToStreamInputEventHubV2OutputWithContext(ctx context.Context) StreamInputEventHubV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubV2Output)
}

// StreamInputEventHubV2ArrayInput is an input type that accepts StreamInputEventHubV2Array and StreamInputEventHubV2ArrayOutput values.
// You can construct a concrete instance of `StreamInputEventHubV2ArrayInput` via:
//
//	StreamInputEventHubV2Array{ StreamInputEventHubV2Args{...} }
type StreamInputEventHubV2ArrayInput interface {
	pulumi.Input

	ToStreamInputEventHubV2ArrayOutput() StreamInputEventHubV2ArrayOutput
	ToStreamInputEventHubV2ArrayOutputWithContext(context.Context) StreamInputEventHubV2ArrayOutput
}

type StreamInputEventHubV2Array []StreamInputEventHubV2Input

func (StreamInputEventHubV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamInputEventHubV2)(nil)).Elem()
}

func (i StreamInputEventHubV2Array) ToStreamInputEventHubV2ArrayOutput() StreamInputEventHubV2ArrayOutput {
	return i.ToStreamInputEventHubV2ArrayOutputWithContext(context.Background())
}

func (i StreamInputEventHubV2Array) ToStreamInputEventHubV2ArrayOutputWithContext(ctx context.Context) StreamInputEventHubV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubV2ArrayOutput)
}

// StreamInputEventHubV2MapInput is an input type that accepts StreamInputEventHubV2Map and StreamInputEventHubV2MapOutput values.
// You can construct a concrete instance of `StreamInputEventHubV2MapInput` via:
//
//	StreamInputEventHubV2Map{ "key": StreamInputEventHubV2Args{...} }
type StreamInputEventHubV2MapInput interface {
	pulumi.Input

	ToStreamInputEventHubV2MapOutput() StreamInputEventHubV2MapOutput
	ToStreamInputEventHubV2MapOutputWithContext(context.Context) StreamInputEventHubV2MapOutput
}

type StreamInputEventHubV2Map map[string]StreamInputEventHubV2Input

func (StreamInputEventHubV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamInputEventHubV2)(nil)).Elem()
}

func (i StreamInputEventHubV2Map) ToStreamInputEventHubV2MapOutput() StreamInputEventHubV2MapOutput {
	return i.ToStreamInputEventHubV2MapOutputWithContext(context.Background())
}

func (i StreamInputEventHubV2Map) ToStreamInputEventHubV2MapOutputWithContext(ctx context.Context) StreamInputEventHubV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubV2MapOutput)
}

type StreamInputEventHubV2Output struct{ *pulumi.OutputState }

func (StreamInputEventHubV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputEventHubV2)(nil)).Elem()
}

func (o StreamInputEventHubV2Output) ToStreamInputEventHubV2Output() StreamInputEventHubV2Output {
	return o
}

func (o StreamInputEventHubV2Output) ToStreamInputEventHubV2OutputWithContext(ctx context.Context) StreamInputEventHubV2Output {
	return o
}

// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
func (o StreamInputEventHubV2Output) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHubV2) pulumi.StringPtrOutput { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub's default consumer group.
func (o StreamInputEventHubV2Output) EventhubConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHubV2) pulumi.StringPtrOutput { return v.EventhubConsumerGroupName }).(pulumi.StringPtrOutput)
}

// The name of the Event Hub.
func (o StreamInputEventHubV2Output) EventhubName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamInputEventHubV2) pulumi.StringOutput { return v.EventhubName }).(pulumi.StringOutput)
}

// The name of the Stream Input EventHub V2. Changing this forces a new resource to be created.
func (o StreamInputEventHubV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamInputEventHubV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The property the input Event Hub has been partitioned by.
func (o StreamInputEventHubV2Output) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHubV2) pulumi.StringPtrOutput { return v.PartitionKey }).(pulumi.StringPtrOutput)
}

// A `serialization` block as defined below.
func (o StreamInputEventHubV2Output) Serialization() StreamInputEventHubV2SerializationOutput {
	return o.ApplyT(func(v *StreamInputEventHubV2) StreamInputEventHubV2SerializationOutput { return v.Serialization }).(StreamInputEventHubV2SerializationOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
func (o StreamInputEventHubV2Output) ServicebusNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamInputEventHubV2) pulumi.StringOutput { return v.ServicebusNamespace }).(pulumi.StringOutput)
}

// The shared access policy key for the specified shared access policy.
func (o StreamInputEventHubV2Output) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHubV2) pulumi.StringPtrOutput { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
func (o StreamInputEventHubV2Output) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHubV2) pulumi.StringPtrOutput { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
func (o StreamInputEventHubV2Output) StreamAnalyticsJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamInputEventHubV2) pulumi.StringOutput { return v.StreamAnalyticsJobId }).(pulumi.StringOutput)
}

type StreamInputEventHubV2ArrayOutput struct{ *pulumi.OutputState }

func (StreamInputEventHubV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamInputEventHubV2)(nil)).Elem()
}

func (o StreamInputEventHubV2ArrayOutput) ToStreamInputEventHubV2ArrayOutput() StreamInputEventHubV2ArrayOutput {
	return o
}

func (o StreamInputEventHubV2ArrayOutput) ToStreamInputEventHubV2ArrayOutputWithContext(ctx context.Context) StreamInputEventHubV2ArrayOutput {
	return o
}

func (o StreamInputEventHubV2ArrayOutput) Index(i pulumi.IntInput) StreamInputEventHubV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamInputEventHubV2 {
		return vs[0].([]*StreamInputEventHubV2)[vs[1].(int)]
	}).(StreamInputEventHubV2Output)
}

type StreamInputEventHubV2MapOutput struct{ *pulumi.OutputState }

func (StreamInputEventHubV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamInputEventHubV2)(nil)).Elem()
}

func (o StreamInputEventHubV2MapOutput) ToStreamInputEventHubV2MapOutput() StreamInputEventHubV2MapOutput {
	return o
}

func (o StreamInputEventHubV2MapOutput) ToStreamInputEventHubV2MapOutputWithContext(ctx context.Context) StreamInputEventHubV2MapOutput {
	return o
}

func (o StreamInputEventHubV2MapOutput) MapIndex(k pulumi.StringInput) StreamInputEventHubV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamInputEventHubV2 {
		return vs[0].(map[string]*StreamInputEventHubV2)[vs[1].(string)]
	}).(StreamInputEventHubV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputEventHubV2Input)(nil)).Elem(), &StreamInputEventHubV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputEventHubV2ArrayInput)(nil)).Elem(), StreamInputEventHubV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputEventHubV2MapInput)(nil)).Elem(), StreamInputEventHubV2Map{})
	pulumi.RegisterOutputType(StreamInputEventHubV2Output{})
	pulumi.RegisterOutputType(StreamInputEventHubV2ArrayOutput{})
	pulumi.RegisterOutputType(StreamInputEventHubV2MapOutput{})
}
