// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package streamanalytics

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **Note:** This resource creates a Stream Input of type `Microsoft.ServiceBus/EventHub`, to create a Stream Input of type `Microsoft.EventHub/EventHub` please use the resource azurerm_stream_analytics_stream_input_eventhub_v2.
//
// Manages a Stream Analytics Stream Input EventHub.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/eventhub"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/streamanalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleJob := streamanalytics.LookupJobOutput(ctx, streamanalytics.GetJobOutputArgs{
//				Name:              pulumi.String("example-job"),
//				ResourceGroupName: exampleResourceGroup.Name,
//			}, nil)
//			exampleEventHubNamespace, err := eventhub.NewEventHubNamespace(ctx, "exampleEventHubNamespace", &eventhub.EventHubNamespaceArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Standard"),
//				Capacity:          pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			exampleEventHub, err := eventhub.NewEventHub(ctx, "exampleEventHub", &eventhub.EventHubArgs{
//				NamespaceName:     exampleEventHubNamespace.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//				PartitionCount:    pulumi.Int(2),
//				MessageRetention:  pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			exampleConsumerGroup, err := eventhub.NewConsumerGroup(ctx, "exampleConsumerGroup", &eventhub.ConsumerGroupArgs{
//				NamespaceName:     exampleEventHubNamespace.Name,
//				EventhubName:      exampleEventHub.Name,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = streamanalytics.NewStreamInputEventHub(ctx, "exampleStreamInputEventHub", &streamanalytics.StreamInputEventHubArgs{
//				StreamAnalyticsJobName: exampleJob.ApplyT(func(exampleJob streamanalytics.GetJobResult) (*string, error) {
//					return &exampleJob.Name, nil
//				}).(pulumi.StringPtrOutput),
//				ResourceGroupName: exampleJob.ApplyT(func(exampleJob streamanalytics.GetJobResult) (*string, error) {
//					return &exampleJob.ResourceGroupName, nil
//				}).(pulumi.StringPtrOutput),
//				EventhubConsumerGroupName: exampleConsumerGroup.Name,
//				EventhubName:              exampleEventHub.Name,
//				ServicebusNamespace:       exampleEventHubNamespace.Name,
//				SharedAccessPolicyKey:     exampleEventHubNamespace.DefaultPrimaryKey,
//				SharedAccessPolicyName:    pulumi.String("RootManageSharedAccessKey"),
//				Serialization: &streamanalytics.StreamInputEventHubSerializationArgs{
//					Type:     pulumi.String("Json"),
//					Encoding: pulumi.String("UTF8"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Stream Analytics Stream Input EventHub's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:streamanalytics/streamInputEventHub:StreamInputEventHub example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StreamAnalytics/streamingJobs/job1/inputs/input1
//
// ```
type StreamInputEventHub struct {
	pulumi.CustomResourceState

	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode pulumi.StringPtrOutput `pulumi:"authenticationMode"`
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub's default consumer group.
	EventhubConsumerGroupName pulumi.StringPtrOutput `pulumi:"eventhubConsumerGroupName"`
	// The name of the Event Hub.
	EventhubName pulumi.StringOutput `pulumi:"eventhubName"`
	// The name of the Stream Input EventHub. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The property the input Event Hub has been partitioned by.
	PartitionKey pulumi.StringPtrOutput `pulumi:"partitionKey"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `serialization` block as defined below.
	Serialization StreamInputEventHubSerializationOutput `pulumi:"serialization"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
	ServicebusNamespace pulumi.StringOutput `pulumi:"servicebusNamespace"`
	// The shared access policy key for the specified shared access policy.
	SharedAccessPolicyKey pulumi.StringPtrOutput `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	SharedAccessPolicyName pulumi.StringPtrOutput `pulumi:"sharedAccessPolicyName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringOutput `pulumi:"streamAnalyticsJobName"`
}

// NewStreamInputEventHub registers a new resource with the given unique name, arguments, and options.
func NewStreamInputEventHub(ctx *pulumi.Context,
	name string, args *StreamInputEventHubArgs, opts ...pulumi.ResourceOption) (*StreamInputEventHub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventhubName == nil {
		return nil, errors.New("invalid value for required argument 'EventhubName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Serialization == nil {
		return nil, errors.New("invalid value for required argument 'Serialization'")
	}
	if args.ServicebusNamespace == nil {
		return nil, errors.New("invalid value for required argument 'ServicebusNamespace'")
	}
	if args.StreamAnalyticsJobName == nil {
		return nil, errors.New("invalid value for required argument 'StreamAnalyticsJobName'")
	}
	if args.SharedAccessPolicyKey != nil {
		args.SharedAccessPolicyKey = pulumi.ToSecret(args.SharedAccessPolicyKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"sharedAccessPolicyKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamInputEventHub
	err := ctx.RegisterResource("azure:streamanalytics/streamInputEventHub:StreamInputEventHub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamInputEventHub gets an existing StreamInputEventHub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamInputEventHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamInputEventHubState, opts ...pulumi.ResourceOption) (*StreamInputEventHub, error) {
	var resource StreamInputEventHub
	err := ctx.ReadResource("azure:streamanalytics/streamInputEventHub:StreamInputEventHub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamInputEventHub resources.
type streamInputEventHubState struct {
	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub's default consumer group.
	EventhubConsumerGroupName *string `pulumi:"eventhubConsumerGroupName"`
	// The name of the Event Hub.
	EventhubName *string `pulumi:"eventhubName"`
	// The name of the Stream Input EventHub. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The property the input Event Hub has been partitioned by.
	PartitionKey *string `pulumi:"partitionKey"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `serialization` block as defined below.
	Serialization *StreamInputEventHubSerialization `pulumi:"serialization"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
	ServicebusNamespace *string `pulumi:"servicebusNamespace"`
	// The shared access policy key for the specified shared access policy.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName *string `pulumi:"streamAnalyticsJobName"`
}

type StreamInputEventHubState struct {
	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode pulumi.StringPtrInput
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub's default consumer group.
	EventhubConsumerGroupName pulumi.StringPtrInput
	// The name of the Event Hub.
	EventhubName pulumi.StringPtrInput
	// The name of the Stream Input EventHub. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The property the input Event Hub has been partitioned by.
	PartitionKey pulumi.StringPtrInput
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `serialization` block as defined below.
	Serialization StreamInputEventHubSerializationPtrInput
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
	ServicebusNamespace pulumi.StringPtrInput
	// The shared access policy key for the specified shared access policy.
	SharedAccessPolicyKey pulumi.StringPtrInput
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	SharedAccessPolicyName pulumi.StringPtrInput
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringPtrInput
}

func (StreamInputEventHubState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamInputEventHubState)(nil)).Elem()
}

type streamInputEventHubArgs struct {
	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub's default consumer group.
	EventhubConsumerGroupName *string `pulumi:"eventhubConsumerGroupName"`
	// The name of the Event Hub.
	EventhubName string `pulumi:"eventhubName"`
	// The name of the Stream Input EventHub. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The property the input Event Hub has been partitioned by.
	PartitionKey *string `pulumi:"partitionKey"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `serialization` block as defined below.
	Serialization StreamInputEventHubSerialization `pulumi:"serialization"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
	ServicebusNamespace string `pulumi:"servicebusNamespace"`
	// The shared access policy key for the specified shared access policy.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName string `pulumi:"streamAnalyticsJobName"`
}

// The set of arguments for constructing a StreamInputEventHub resource.
type StreamInputEventHubArgs struct {
	// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
	AuthenticationMode pulumi.StringPtrInput
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub's default consumer group.
	EventhubConsumerGroupName pulumi.StringPtrInput
	// The name of the Event Hub.
	EventhubName pulumi.StringInput
	// The name of the Stream Input EventHub. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The property the input Event Hub has been partitioned by.
	PartitionKey pulumi.StringPtrInput
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `serialization` block as defined below.
	Serialization StreamInputEventHubSerializationInput
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
	ServicebusNamespace pulumi.StringInput
	// The shared access policy key for the specified shared access policy.
	SharedAccessPolicyKey pulumi.StringPtrInput
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	SharedAccessPolicyName pulumi.StringPtrInput
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringInput
}

func (StreamInputEventHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamInputEventHubArgs)(nil)).Elem()
}

type StreamInputEventHubInput interface {
	pulumi.Input

	ToStreamInputEventHubOutput() StreamInputEventHubOutput
	ToStreamInputEventHubOutputWithContext(ctx context.Context) StreamInputEventHubOutput
}

func (*StreamInputEventHub) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputEventHub)(nil)).Elem()
}

func (i *StreamInputEventHub) ToStreamInputEventHubOutput() StreamInputEventHubOutput {
	return i.ToStreamInputEventHubOutputWithContext(context.Background())
}

func (i *StreamInputEventHub) ToStreamInputEventHubOutputWithContext(ctx context.Context) StreamInputEventHubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubOutput)
}

// StreamInputEventHubArrayInput is an input type that accepts StreamInputEventHubArray and StreamInputEventHubArrayOutput values.
// You can construct a concrete instance of `StreamInputEventHubArrayInput` via:
//
//	StreamInputEventHubArray{ StreamInputEventHubArgs{...} }
type StreamInputEventHubArrayInput interface {
	pulumi.Input

	ToStreamInputEventHubArrayOutput() StreamInputEventHubArrayOutput
	ToStreamInputEventHubArrayOutputWithContext(context.Context) StreamInputEventHubArrayOutput
}

type StreamInputEventHubArray []StreamInputEventHubInput

func (StreamInputEventHubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamInputEventHub)(nil)).Elem()
}

func (i StreamInputEventHubArray) ToStreamInputEventHubArrayOutput() StreamInputEventHubArrayOutput {
	return i.ToStreamInputEventHubArrayOutputWithContext(context.Background())
}

func (i StreamInputEventHubArray) ToStreamInputEventHubArrayOutputWithContext(ctx context.Context) StreamInputEventHubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubArrayOutput)
}

// StreamInputEventHubMapInput is an input type that accepts StreamInputEventHubMap and StreamInputEventHubMapOutput values.
// You can construct a concrete instance of `StreamInputEventHubMapInput` via:
//
//	StreamInputEventHubMap{ "key": StreamInputEventHubArgs{...} }
type StreamInputEventHubMapInput interface {
	pulumi.Input

	ToStreamInputEventHubMapOutput() StreamInputEventHubMapOutput
	ToStreamInputEventHubMapOutputWithContext(context.Context) StreamInputEventHubMapOutput
}

type StreamInputEventHubMap map[string]StreamInputEventHubInput

func (StreamInputEventHubMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamInputEventHub)(nil)).Elem()
}

func (i StreamInputEventHubMap) ToStreamInputEventHubMapOutput() StreamInputEventHubMapOutput {
	return i.ToStreamInputEventHubMapOutputWithContext(context.Background())
}

func (i StreamInputEventHubMap) ToStreamInputEventHubMapOutputWithContext(ctx context.Context) StreamInputEventHubMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubMapOutput)
}

type StreamInputEventHubOutput struct{ *pulumi.OutputState }

func (StreamInputEventHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputEventHub)(nil)).Elem()
}

func (o StreamInputEventHubOutput) ToStreamInputEventHubOutput() StreamInputEventHubOutput {
	return o
}

func (o StreamInputEventHubOutput) ToStreamInputEventHubOutputWithContext(ctx context.Context) StreamInputEventHubOutput {
	return o
}

// The authentication mode for the Stream Output. Possible values are `Msi` and `ConnectionString`. Defaults to `ConnectionString`.
func (o StreamInputEventHubOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHub) pulumi.StringPtrOutput { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not set the input will use the Event Hub's default consumer group.
func (o StreamInputEventHubOutput) EventhubConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHub) pulumi.StringPtrOutput { return v.EventhubConsumerGroupName }).(pulumi.StringPtrOutput)
}

// The name of the Event Hub.
func (o StreamInputEventHubOutput) EventhubName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamInputEventHub) pulumi.StringOutput { return v.EventhubName }).(pulumi.StringOutput)
}

// The name of the Stream Input EventHub. Changing this forces a new resource to be created.
func (o StreamInputEventHubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamInputEventHub) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The property the input Event Hub has been partitioned by.
func (o StreamInputEventHubOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHub) pulumi.StringPtrOutput { return v.PartitionKey }).(pulumi.StringPtrOutput)
}

// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
func (o StreamInputEventHubOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamInputEventHub) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `serialization` block as defined below.
func (o StreamInputEventHubOutput) Serialization() StreamInputEventHubSerializationOutput {
	return o.ApplyT(func(v *StreamInputEventHub) StreamInputEventHubSerializationOutput { return v.Serialization }).(StreamInputEventHubSerializationOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
func (o StreamInputEventHubOutput) ServicebusNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamInputEventHub) pulumi.StringOutput { return v.ServicebusNamespace }).(pulumi.StringOutput)
}

// The shared access policy key for the specified shared access policy.
func (o StreamInputEventHubOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHub) pulumi.StringPtrOutput { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
func (o StreamInputEventHubOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputEventHub) pulumi.StringPtrOutput { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
func (o StreamInputEventHubOutput) StreamAnalyticsJobName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamInputEventHub) pulumi.StringOutput { return v.StreamAnalyticsJobName }).(pulumi.StringOutput)
}

type StreamInputEventHubArrayOutput struct{ *pulumi.OutputState }

func (StreamInputEventHubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamInputEventHub)(nil)).Elem()
}

func (o StreamInputEventHubArrayOutput) ToStreamInputEventHubArrayOutput() StreamInputEventHubArrayOutput {
	return o
}

func (o StreamInputEventHubArrayOutput) ToStreamInputEventHubArrayOutputWithContext(ctx context.Context) StreamInputEventHubArrayOutput {
	return o
}

func (o StreamInputEventHubArrayOutput) Index(i pulumi.IntInput) StreamInputEventHubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamInputEventHub {
		return vs[0].([]*StreamInputEventHub)[vs[1].(int)]
	}).(StreamInputEventHubOutput)
}

type StreamInputEventHubMapOutput struct{ *pulumi.OutputState }

func (StreamInputEventHubMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamInputEventHub)(nil)).Elem()
}

func (o StreamInputEventHubMapOutput) ToStreamInputEventHubMapOutput() StreamInputEventHubMapOutput {
	return o
}

func (o StreamInputEventHubMapOutput) ToStreamInputEventHubMapOutputWithContext(ctx context.Context) StreamInputEventHubMapOutput {
	return o
}

func (o StreamInputEventHubMapOutput) MapIndex(k pulumi.StringInput) StreamInputEventHubOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamInputEventHub {
		return vs[0].(map[string]*StreamInputEventHub)[vs[1].(string)]
	}).(StreamInputEventHubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputEventHubInput)(nil)).Elem(), &StreamInputEventHub{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputEventHubArrayInput)(nil)).Elem(), StreamInputEventHubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInputEventHubMapInput)(nil)).Elem(), StreamInputEventHubMap{})
	pulumi.RegisterOutputType(StreamInputEventHubOutput{})
	pulumi.RegisterOutputType(StreamInputEventHubArrayOutput{})
	pulumi.RegisterOutputType(StreamInputEventHubMapOutput{})
}
