// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package streamanalytics

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Stream Analytics Output to an Azure Synapse Analytics Workspace.
//
// ## Import
//
// A Stream Analytics Output to an Azure Synapse Analytics Workspace can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:streamanalytics/outputSynapse:OutputSynapse example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StreamAnalytics/streamingJobs/job1/outputs/output1
//
// ```
type OutputSynapse struct {
	pulumi.CustomResourceState

	// The name of the Azure SQL database. Changing this forces a new resource to be created.
	Database pulumi.StringOutput `pulumi:"database"`
	// The name of the Stream Output. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The password that will be used to connect to the Azure SQL database.
	Password pulumi.StringOutput `pulumi:"password"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The name of the SQL server containing the Azure SQL database. Changing this forces a new resource to be created.
	Server pulumi.StringOutput `pulumi:"server"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringOutput `pulumi:"streamAnalyticsJobName"`
	// The name of the table in the Azure SQL database. Changing this forces a new resource to be created.
	Table pulumi.StringOutput `pulumi:"table"`
	// The user name that will be used to connect to the Azure SQL database. Changing this forces a new resource to be created.
	User pulumi.StringOutput `pulumi:"user"`
}

// NewOutputSynapse registers a new resource with the given unique name, arguments, and options.
func NewOutputSynapse(ctx *pulumi.Context,
	name string, args *OutputSynapseArgs, opts ...pulumi.ResourceOption) (*OutputSynapse, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	if args.StreamAnalyticsJobName == nil {
		return nil, errors.New("invalid value for required argument 'StreamAnalyticsJobName'")
	}
	if args.Table == nil {
		return nil, errors.New("invalid value for required argument 'Table'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OutputSynapse
	err := ctx.RegisterResource("azure:streamanalytics/outputSynapse:OutputSynapse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOutputSynapse gets an existing OutputSynapse resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOutputSynapse(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OutputSynapseState, opts ...pulumi.ResourceOption) (*OutputSynapse, error) {
	var resource OutputSynapse
	err := ctx.ReadResource("azure:streamanalytics/outputSynapse:OutputSynapse", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OutputSynapse resources.
type outputSynapseState struct {
	// The name of the Azure SQL database. Changing this forces a new resource to be created.
	Database *string `pulumi:"database"`
	// The name of the Stream Output. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The password that will be used to connect to the Azure SQL database.
	Password *string `pulumi:"password"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The name of the SQL server containing the Azure SQL database. Changing this forces a new resource to be created.
	Server *string `pulumi:"server"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName *string `pulumi:"streamAnalyticsJobName"`
	// The name of the table in the Azure SQL database. Changing this forces a new resource to be created.
	Table *string `pulumi:"table"`
	// The user name that will be used to connect to the Azure SQL database. Changing this forces a new resource to be created.
	User *string `pulumi:"user"`
}

type OutputSynapseState struct {
	// The name of the Azure SQL database. Changing this forces a new resource to be created.
	Database pulumi.StringPtrInput
	// The name of the Stream Output. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The password that will be used to connect to the Azure SQL database.
	Password pulumi.StringPtrInput
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The name of the SQL server containing the Azure SQL database. Changing this forces a new resource to be created.
	Server pulumi.StringPtrInput
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringPtrInput
	// The name of the table in the Azure SQL database. Changing this forces a new resource to be created.
	Table pulumi.StringPtrInput
	// The user name that will be used to connect to the Azure SQL database. Changing this forces a new resource to be created.
	User pulumi.StringPtrInput
}

func (OutputSynapseState) ElementType() reflect.Type {
	return reflect.TypeOf((*outputSynapseState)(nil)).Elem()
}

type outputSynapseArgs struct {
	// The name of the Azure SQL database. Changing this forces a new resource to be created.
	Database string `pulumi:"database"`
	// The name of the Stream Output. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The password that will be used to connect to the Azure SQL database.
	Password string `pulumi:"password"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the SQL server containing the Azure SQL database. Changing this forces a new resource to be created.
	Server string `pulumi:"server"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName string `pulumi:"streamAnalyticsJobName"`
	// The name of the table in the Azure SQL database. Changing this forces a new resource to be created.
	Table string `pulumi:"table"`
	// The user name that will be used to connect to the Azure SQL database. Changing this forces a new resource to be created.
	User string `pulumi:"user"`
}

// The set of arguments for constructing a OutputSynapse resource.
type OutputSynapseArgs struct {
	// The name of the Azure SQL database. Changing this forces a new resource to be created.
	Database pulumi.StringInput
	// The name of the Stream Output. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The password that will be used to connect to the Azure SQL database.
	Password pulumi.StringInput
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The name of the SQL server containing the Azure SQL database. Changing this forces a new resource to be created.
	Server pulumi.StringInput
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringInput
	// The name of the table in the Azure SQL database. Changing this forces a new resource to be created.
	Table pulumi.StringInput
	// The user name that will be used to connect to the Azure SQL database. Changing this forces a new resource to be created.
	User pulumi.StringInput
}

func (OutputSynapseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*outputSynapseArgs)(nil)).Elem()
}

type OutputSynapseInput interface {
	pulumi.Input

	ToOutputSynapseOutput() OutputSynapseOutput
	ToOutputSynapseOutputWithContext(ctx context.Context) OutputSynapseOutput
}

func (*OutputSynapse) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputSynapse)(nil)).Elem()
}

func (i *OutputSynapse) ToOutputSynapseOutput() OutputSynapseOutput {
	return i.ToOutputSynapseOutputWithContext(context.Background())
}

func (i *OutputSynapse) ToOutputSynapseOutputWithContext(ctx context.Context) OutputSynapseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputSynapseOutput)
}

func (i *OutputSynapse) ToOutput(ctx context.Context) pulumix.Output[*OutputSynapse] {
	return pulumix.Output[*OutputSynapse]{
		OutputState: i.ToOutputSynapseOutputWithContext(ctx).OutputState,
	}
}

// OutputSynapseArrayInput is an input type that accepts OutputSynapseArray and OutputSynapseArrayOutput values.
// You can construct a concrete instance of `OutputSynapseArrayInput` via:
//
//	OutputSynapseArray{ OutputSynapseArgs{...} }
type OutputSynapseArrayInput interface {
	pulumi.Input

	ToOutputSynapseArrayOutput() OutputSynapseArrayOutput
	ToOutputSynapseArrayOutputWithContext(context.Context) OutputSynapseArrayOutput
}

type OutputSynapseArray []OutputSynapseInput

func (OutputSynapseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OutputSynapse)(nil)).Elem()
}

func (i OutputSynapseArray) ToOutputSynapseArrayOutput() OutputSynapseArrayOutput {
	return i.ToOutputSynapseArrayOutputWithContext(context.Background())
}

func (i OutputSynapseArray) ToOutputSynapseArrayOutputWithContext(ctx context.Context) OutputSynapseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputSynapseArrayOutput)
}

func (i OutputSynapseArray) ToOutput(ctx context.Context) pulumix.Output[[]*OutputSynapse] {
	return pulumix.Output[[]*OutputSynapse]{
		OutputState: i.ToOutputSynapseArrayOutputWithContext(ctx).OutputState,
	}
}

// OutputSynapseMapInput is an input type that accepts OutputSynapseMap and OutputSynapseMapOutput values.
// You can construct a concrete instance of `OutputSynapseMapInput` via:
//
//	OutputSynapseMap{ "key": OutputSynapseArgs{...} }
type OutputSynapseMapInput interface {
	pulumi.Input

	ToOutputSynapseMapOutput() OutputSynapseMapOutput
	ToOutputSynapseMapOutputWithContext(context.Context) OutputSynapseMapOutput
}

type OutputSynapseMap map[string]OutputSynapseInput

func (OutputSynapseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OutputSynapse)(nil)).Elem()
}

func (i OutputSynapseMap) ToOutputSynapseMapOutput() OutputSynapseMapOutput {
	return i.ToOutputSynapseMapOutputWithContext(context.Background())
}

func (i OutputSynapseMap) ToOutputSynapseMapOutputWithContext(ctx context.Context) OutputSynapseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputSynapseMapOutput)
}

func (i OutputSynapseMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OutputSynapse] {
	return pulumix.Output[map[string]*OutputSynapse]{
		OutputState: i.ToOutputSynapseMapOutputWithContext(ctx).OutputState,
	}
}

type OutputSynapseOutput struct{ *pulumi.OutputState }

func (OutputSynapseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputSynapse)(nil)).Elem()
}

func (o OutputSynapseOutput) ToOutputSynapseOutput() OutputSynapseOutput {
	return o
}

func (o OutputSynapseOutput) ToOutputSynapseOutputWithContext(ctx context.Context) OutputSynapseOutput {
	return o
}

func (o OutputSynapseOutput) ToOutput(ctx context.Context) pulumix.Output[*OutputSynapse] {
	return pulumix.Output[*OutputSynapse]{
		OutputState: o.OutputState,
	}
}

// The name of the Azure SQL database. Changing this forces a new resource to be created.
func (o OutputSynapseOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputSynapse) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// The name of the Stream Output. Changing this forces a new resource to be created.
func (o OutputSynapseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputSynapse) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password that will be used to connect to the Azure SQL database.
func (o OutputSynapseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputSynapse) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
func (o OutputSynapseOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputSynapse) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The name of the SQL server containing the Azure SQL database. Changing this forces a new resource to be created.
func (o OutputSynapseOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputSynapse) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
func (o OutputSynapseOutput) StreamAnalyticsJobName() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputSynapse) pulumi.StringOutput { return v.StreamAnalyticsJobName }).(pulumi.StringOutput)
}

// The name of the table in the Azure SQL database. Changing this forces a new resource to be created.
func (o OutputSynapseOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputSynapse) pulumi.StringOutput { return v.Table }).(pulumi.StringOutput)
}

// The user name that will be used to connect to the Azure SQL database. Changing this forces a new resource to be created.
func (o OutputSynapseOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputSynapse) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type OutputSynapseArrayOutput struct{ *pulumi.OutputState }

func (OutputSynapseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OutputSynapse)(nil)).Elem()
}

func (o OutputSynapseArrayOutput) ToOutputSynapseArrayOutput() OutputSynapseArrayOutput {
	return o
}

func (o OutputSynapseArrayOutput) ToOutputSynapseArrayOutputWithContext(ctx context.Context) OutputSynapseArrayOutput {
	return o
}

func (o OutputSynapseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OutputSynapse] {
	return pulumix.Output[[]*OutputSynapse]{
		OutputState: o.OutputState,
	}
}

func (o OutputSynapseArrayOutput) Index(i pulumi.IntInput) OutputSynapseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OutputSynapse {
		return vs[0].([]*OutputSynapse)[vs[1].(int)]
	}).(OutputSynapseOutput)
}

type OutputSynapseMapOutput struct{ *pulumi.OutputState }

func (OutputSynapseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OutputSynapse)(nil)).Elem()
}

func (o OutputSynapseMapOutput) ToOutputSynapseMapOutput() OutputSynapseMapOutput {
	return o
}

func (o OutputSynapseMapOutput) ToOutputSynapseMapOutputWithContext(ctx context.Context) OutputSynapseMapOutput {
	return o
}

func (o OutputSynapseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OutputSynapse] {
	return pulumix.Output[map[string]*OutputSynapse]{
		OutputState: o.OutputState,
	}
}

func (o OutputSynapseMapOutput) MapIndex(k pulumi.StringInput) OutputSynapseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OutputSynapse {
		return vs[0].(map[string]*OutputSynapse)[vs[1].(string)]
	}).(OutputSynapseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OutputSynapseInput)(nil)).Elem(), &OutputSynapse{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputSynapseArrayInput)(nil)).Elem(), OutputSynapseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputSynapseMapInput)(nil)).Elem(), OutputSynapseMap{})
	pulumi.RegisterOutputType(OutputSynapseOutput{})
	pulumi.RegisterOutputType(OutputSynapseArrayOutput{})
	pulumi.RegisterOutputType(OutputSynapseMapOutput{})
}
