// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package streamanalytics

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Stream Analytics Stream Input Blob.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/stream_analytics_stream_input_blob.html.markdown.
type StreamInputBlob struct {
	s *pulumi.ResourceState
}

// NewStreamInputBlob registers a new resource with the given unique name, arguments, and options.
func NewStreamInputBlob(ctx *pulumi.Context,
	name string, args *StreamInputBlobArgs, opts ...pulumi.ResourceOpt) (*StreamInputBlob, error) {
	if args == nil || args.DateFormat == nil {
		return nil, errors.New("missing required argument 'DateFormat'")
	}
	if args == nil || args.PathPattern == nil {
		return nil, errors.New("missing required argument 'PathPattern'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Serialization == nil {
		return nil, errors.New("missing required argument 'Serialization'")
	}
	if args == nil || args.StorageAccountKey == nil {
		return nil, errors.New("missing required argument 'StorageAccountKey'")
	}
	if args == nil || args.StorageAccountName == nil {
		return nil, errors.New("missing required argument 'StorageAccountName'")
	}
	if args == nil || args.StorageContainerName == nil {
		return nil, errors.New("missing required argument 'StorageContainerName'")
	}
	if args == nil || args.StreamAnalyticsJobName == nil {
		return nil, errors.New("missing required argument 'StreamAnalyticsJobName'")
	}
	if args == nil || args.TimeFormat == nil {
		return nil, errors.New("missing required argument 'TimeFormat'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dateFormat"] = nil
		inputs["name"] = nil
		inputs["pathPattern"] = nil
		inputs["resourceGroupName"] = nil
		inputs["serialization"] = nil
		inputs["storageAccountKey"] = nil
		inputs["storageAccountName"] = nil
		inputs["storageContainerName"] = nil
		inputs["streamAnalyticsJobName"] = nil
		inputs["timeFormat"] = nil
	} else {
		inputs["dateFormat"] = args.DateFormat
		inputs["name"] = args.Name
		inputs["pathPattern"] = args.PathPattern
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["serialization"] = args.Serialization
		inputs["storageAccountKey"] = args.StorageAccountKey
		inputs["storageAccountName"] = args.StorageAccountName
		inputs["storageContainerName"] = args.StorageContainerName
		inputs["streamAnalyticsJobName"] = args.StreamAnalyticsJobName
		inputs["timeFormat"] = args.TimeFormat
	}
	s, err := ctx.RegisterResource("azure:streamanalytics/streamInputBlob:StreamInputBlob", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &StreamInputBlob{s: s}, nil
}

// GetStreamInputBlob gets an existing StreamInputBlob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamInputBlob(ctx *pulumi.Context,
	name string, id pulumi.ID, state *StreamInputBlobState, opts ...pulumi.ResourceOpt) (*StreamInputBlob, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dateFormat"] = state.DateFormat
		inputs["name"] = state.Name
		inputs["pathPattern"] = state.PathPattern
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["serialization"] = state.Serialization
		inputs["storageAccountKey"] = state.StorageAccountKey
		inputs["storageAccountName"] = state.StorageAccountName
		inputs["storageContainerName"] = state.StorageContainerName
		inputs["streamAnalyticsJobName"] = state.StreamAnalyticsJobName
		inputs["timeFormat"] = state.TimeFormat
	}
	s, err := ctx.ReadResource("azure:streamanalytics/streamInputBlob:StreamInputBlob", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &StreamInputBlob{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *StreamInputBlob) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *StreamInputBlob) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The date format. Wherever `{date}` appears in `path_pattern`, the value of this property is used as the date format instead.
func (r *StreamInputBlob) DateFormat() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dateFormat"])
}

// The name of the Stream Input Blob. Changing this forces a new resource to be created.
func (r *StreamInputBlob) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job.
func (r *StreamInputBlob) PathPattern() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["pathPattern"])
}

// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
func (r *StreamInputBlob) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// A `serialization` block as defined below.
func (r *StreamInputBlob) Serialization() *pulumi.Output {
	return r.s.State["serialization"]
}

// The Access Key which should be used to connect to this Storage Account.
func (r *StreamInputBlob) StorageAccountKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["storageAccountKey"])
}

// The name of the Storage Account.
func (r *StreamInputBlob) StorageAccountName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["storageAccountName"])
}

// The name of the Container within the Storage Account.
func (r *StreamInputBlob) StorageContainerName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["storageContainerName"])
}

// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
func (r *StreamInputBlob) StreamAnalyticsJobName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["streamAnalyticsJobName"])
}

// The time format. Wherever `{time}` appears in `path_pattern`, the value of this property is used as the time format instead.
func (r *StreamInputBlob) TimeFormat() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["timeFormat"])
}

// Input properties used for looking up and filtering StreamInputBlob resources.
type StreamInputBlobState struct {
	// The date format. Wherever `{date}` appears in `path_pattern`, the value of this property is used as the date format instead.
	DateFormat interface{}
	// The name of the Stream Input Blob. Changing this forces a new resource to be created.
	Name interface{}
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job.
	PathPattern interface{}
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A `serialization` block as defined below.
	Serialization interface{}
	// The Access Key which should be used to connect to this Storage Account.
	StorageAccountKey interface{}
	// The name of the Storage Account.
	StorageAccountName interface{}
	// The name of the Container within the Storage Account.
	StorageContainerName interface{}
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName interface{}
	// The time format. Wherever `{time}` appears in `path_pattern`, the value of this property is used as the time format instead.
	TimeFormat interface{}
}

// The set of arguments for constructing a StreamInputBlob resource.
type StreamInputBlobArgs struct {
	// The date format. Wherever `{date}` appears in `path_pattern`, the value of this property is used as the date format instead.
	DateFormat interface{}
	// The name of the Stream Input Blob. Changing this forces a new resource to be created.
	Name interface{}
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job.
	PathPattern interface{}
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A `serialization` block as defined below.
	Serialization interface{}
	// The Access Key which should be used to connect to this Storage Account.
	StorageAccountKey interface{}
	// The name of the Storage Account.
	StorageAccountName interface{}
	// The name of the Container within the Storage Account.
	StorageContainerName interface{}
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName interface{}
	// The time format. Wherever `{time}` appears in `path_pattern`, the value of this property is used as the time format instead.
	TimeFormat interface{}
}
