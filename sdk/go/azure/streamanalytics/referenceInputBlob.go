// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package streamanalytics

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Stream Analytics Reference Input Blob. Reference data (also known as a lookup table) is a finite data set that is static or slowly changing in nature, used to perform a lookup or to correlate with your data stream. Learn more [here](https://docs.microsoft.com/en-us/azure/stream-analytics/stream-analytics-use-reference-data#azure-blob-storage).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/storage"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/streamanalytics"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := core.LookupResourceGroup(ctx, &core.LookupResourceGroupArgs{
// 			Name: "example-resources",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		exampleJob, err := streamanalytics.LookupJob(ctx, &streamanalytics.LookupJobArgs{
// 			Name:              "example-job",
// 			ResourceGroupName: azurerm_resource_group.Example.Name,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
// 			ResourceGroupName:      pulumi.Any(azurerm_resource_group.Example.Name),
// 			Location:               pulumi.Any(azurerm_resource_group.Example.Location),
// 			AccountTier:            pulumi.String("Standard"),
// 			AccountReplicationType: pulumi.String("LRS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		exampleContainer, err := storage.NewContainer(ctx, "exampleContainer", &storage.ContainerArgs{
// 			StorageAccountName:  exampleAccount.Name,
// 			ContainerAccessType: pulumi.String("private"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = streamanalytics.NewReferenceInputBlob(ctx, "test", &streamanalytics.ReferenceInputBlobArgs{
// 			StreamAnalyticsJobName: pulumi.String(exampleJob.Name),
// 			ResourceGroupName:      pulumi.String(exampleJob.ResourceGroupName),
// 			StorageAccountName:     exampleAccount.Name,
// 			StorageAccountKey:      exampleAccount.PrimaryAccessKey,
// 			StorageContainerName:   exampleContainer.Name,
// 			PathPattern:            pulumi.String("some-random-pattern"),
// 			DateFormat:             pulumi.String("yyyy/MM/dd"),
// 			TimeFormat:             pulumi.String("HH"),
// 			Serialization: &streamanalytics.ReferenceInputBlobSerializationArgs{
// 				Type:     pulumi.String("Json"),
// 				Encoding: pulumi.String("UTF8"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Stream Analytics Reference Input Blob's can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:streamanalytics/referenceInputBlob:ReferenceInputBlob example /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/group1/providers/Microsoft.StreamAnalytics/streamingjobs/job1/inputs/input1
// ```
type ReferenceInputBlob struct {
	pulumi.CustomResourceState

	// The date format. Wherever `{date}` appears in `pathPattern`, the value of this property is used as the date format instead.
	DateFormat pulumi.StringOutput `pulumi:"dateFormat"`
	// The name of the Reference Input Blob. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job.
	PathPattern pulumi.StringOutput `pulumi:"pathPattern"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `serialization` block as defined below.
	Serialization ReferenceInputBlobSerializationOutput `pulumi:"serialization"`
	// The Access Key which should be used to connect to this Storage Account.
	StorageAccountKey pulumi.StringOutput `pulumi:"storageAccountKey"`
	// The name of the Storage Account that has the blob container with reference data.
	StorageAccountName pulumi.StringOutput `pulumi:"storageAccountName"`
	// The name of the Container within the Storage Account.
	StorageContainerName pulumi.StringOutput `pulumi:"storageContainerName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringOutput `pulumi:"streamAnalyticsJobName"`
	// The time format. Wherever `{time}` appears in `pathPattern`, the value of this property is used as the time format instead.
	TimeFormat pulumi.StringOutput `pulumi:"timeFormat"`
}

// NewReferenceInputBlob registers a new resource with the given unique name, arguments, and options.
func NewReferenceInputBlob(ctx *pulumi.Context,
	name string, args *ReferenceInputBlobArgs, opts ...pulumi.ResourceOption) (*ReferenceInputBlob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DateFormat == nil {
		return nil, errors.New("invalid value for required argument 'DateFormat'")
	}
	if args.PathPattern == nil {
		return nil, errors.New("invalid value for required argument 'PathPattern'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Serialization == nil {
		return nil, errors.New("invalid value for required argument 'Serialization'")
	}
	if args.StorageAccountKey == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountKey'")
	}
	if args.StorageAccountName == nil {
		return nil, errors.New("invalid value for required argument 'StorageAccountName'")
	}
	if args.StorageContainerName == nil {
		return nil, errors.New("invalid value for required argument 'StorageContainerName'")
	}
	if args.StreamAnalyticsJobName == nil {
		return nil, errors.New("invalid value for required argument 'StreamAnalyticsJobName'")
	}
	if args.TimeFormat == nil {
		return nil, errors.New("invalid value for required argument 'TimeFormat'")
	}
	var resource ReferenceInputBlob
	err := ctx.RegisterResource("azure:streamanalytics/referenceInputBlob:ReferenceInputBlob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReferenceInputBlob gets an existing ReferenceInputBlob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReferenceInputBlob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReferenceInputBlobState, opts ...pulumi.ResourceOption) (*ReferenceInputBlob, error) {
	var resource ReferenceInputBlob
	err := ctx.ReadResource("azure:streamanalytics/referenceInputBlob:ReferenceInputBlob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReferenceInputBlob resources.
type referenceInputBlobState struct {
	// The date format. Wherever `{date}` appears in `pathPattern`, the value of this property is used as the date format instead.
	DateFormat *string `pulumi:"dateFormat"`
	// The name of the Reference Input Blob. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job.
	PathPattern *string `pulumi:"pathPattern"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `serialization` block as defined below.
	Serialization *ReferenceInputBlobSerialization `pulumi:"serialization"`
	// The Access Key which should be used to connect to this Storage Account.
	StorageAccountKey *string `pulumi:"storageAccountKey"`
	// The name of the Storage Account that has the blob container with reference data.
	StorageAccountName *string `pulumi:"storageAccountName"`
	// The name of the Container within the Storage Account.
	StorageContainerName *string `pulumi:"storageContainerName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName *string `pulumi:"streamAnalyticsJobName"`
	// The time format. Wherever `{time}` appears in `pathPattern`, the value of this property is used as the time format instead.
	TimeFormat *string `pulumi:"timeFormat"`
}

type ReferenceInputBlobState struct {
	// The date format. Wherever `{date}` appears in `pathPattern`, the value of this property is used as the date format instead.
	DateFormat pulumi.StringPtrInput
	// The name of the Reference Input Blob. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job.
	PathPattern pulumi.StringPtrInput
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `serialization` block as defined below.
	Serialization ReferenceInputBlobSerializationPtrInput
	// The Access Key which should be used to connect to this Storage Account.
	StorageAccountKey pulumi.StringPtrInput
	// The name of the Storage Account that has the blob container with reference data.
	StorageAccountName pulumi.StringPtrInput
	// The name of the Container within the Storage Account.
	StorageContainerName pulumi.StringPtrInput
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringPtrInput
	// The time format. Wherever `{time}` appears in `pathPattern`, the value of this property is used as the time format instead.
	TimeFormat pulumi.StringPtrInput
}

func (ReferenceInputBlobState) ElementType() reflect.Type {
	return reflect.TypeOf((*referenceInputBlobState)(nil)).Elem()
}

type referenceInputBlobArgs struct {
	// The date format. Wherever `{date}` appears in `pathPattern`, the value of this property is used as the date format instead.
	DateFormat string `pulumi:"dateFormat"`
	// The name of the Reference Input Blob. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job.
	PathPattern string `pulumi:"pathPattern"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `serialization` block as defined below.
	Serialization ReferenceInputBlobSerialization `pulumi:"serialization"`
	// The Access Key which should be used to connect to this Storage Account.
	StorageAccountKey string `pulumi:"storageAccountKey"`
	// The name of the Storage Account that has the blob container with reference data.
	StorageAccountName string `pulumi:"storageAccountName"`
	// The name of the Container within the Storage Account.
	StorageContainerName string `pulumi:"storageContainerName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName string `pulumi:"streamAnalyticsJobName"`
	// The time format. Wherever `{time}` appears in `pathPattern`, the value of this property is used as the time format instead.
	TimeFormat string `pulumi:"timeFormat"`
}

// The set of arguments for constructing a ReferenceInputBlob resource.
type ReferenceInputBlobArgs struct {
	// The date format. Wherever `{date}` appears in `pathPattern`, the value of this property is used as the date format instead.
	DateFormat pulumi.StringInput
	// The name of the Reference Input Blob. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job.
	PathPattern pulumi.StringInput
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `serialization` block as defined below.
	Serialization ReferenceInputBlobSerializationInput
	// The Access Key which should be used to connect to this Storage Account.
	StorageAccountKey pulumi.StringInput
	// The name of the Storage Account that has the blob container with reference data.
	StorageAccountName pulumi.StringInput
	// The name of the Container within the Storage Account.
	StorageContainerName pulumi.StringInput
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringInput
	// The time format. Wherever `{time}` appears in `pathPattern`, the value of this property is used as the time format instead.
	TimeFormat pulumi.StringInput
}

func (ReferenceInputBlobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*referenceInputBlobArgs)(nil)).Elem()
}

type ReferenceInputBlobInput interface {
	pulumi.Input

	ToReferenceInputBlobOutput() ReferenceInputBlobOutput
	ToReferenceInputBlobOutputWithContext(ctx context.Context) ReferenceInputBlobOutput
}

func (*ReferenceInputBlob) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceInputBlob)(nil))
}

func (i *ReferenceInputBlob) ToReferenceInputBlobOutput() ReferenceInputBlobOutput {
	return i.ToReferenceInputBlobOutputWithContext(context.Background())
}

func (i *ReferenceInputBlob) ToReferenceInputBlobOutputWithContext(ctx context.Context) ReferenceInputBlobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputBlobOutput)
}

func (i *ReferenceInputBlob) ToReferenceInputBlobPtrOutput() ReferenceInputBlobPtrOutput {
	return i.ToReferenceInputBlobPtrOutputWithContext(context.Background())
}

func (i *ReferenceInputBlob) ToReferenceInputBlobPtrOutputWithContext(ctx context.Context) ReferenceInputBlobPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputBlobPtrOutput)
}

type ReferenceInputBlobPtrInput interface {
	pulumi.Input

	ToReferenceInputBlobPtrOutput() ReferenceInputBlobPtrOutput
	ToReferenceInputBlobPtrOutputWithContext(ctx context.Context) ReferenceInputBlobPtrOutput
}

type referenceInputBlobPtrType ReferenceInputBlobArgs

func (*referenceInputBlobPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceInputBlob)(nil))
}

func (i *referenceInputBlobPtrType) ToReferenceInputBlobPtrOutput() ReferenceInputBlobPtrOutput {
	return i.ToReferenceInputBlobPtrOutputWithContext(context.Background())
}

func (i *referenceInputBlobPtrType) ToReferenceInputBlobPtrOutputWithContext(ctx context.Context) ReferenceInputBlobPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputBlobPtrOutput)
}

// ReferenceInputBlobArrayInput is an input type that accepts ReferenceInputBlobArray and ReferenceInputBlobArrayOutput values.
// You can construct a concrete instance of `ReferenceInputBlobArrayInput` via:
//
//          ReferenceInputBlobArray{ ReferenceInputBlobArgs{...} }
type ReferenceInputBlobArrayInput interface {
	pulumi.Input

	ToReferenceInputBlobArrayOutput() ReferenceInputBlobArrayOutput
	ToReferenceInputBlobArrayOutputWithContext(context.Context) ReferenceInputBlobArrayOutput
}

type ReferenceInputBlobArray []ReferenceInputBlobInput

func (ReferenceInputBlobArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ReferenceInputBlob)(nil))
}

func (i ReferenceInputBlobArray) ToReferenceInputBlobArrayOutput() ReferenceInputBlobArrayOutput {
	return i.ToReferenceInputBlobArrayOutputWithContext(context.Background())
}

func (i ReferenceInputBlobArray) ToReferenceInputBlobArrayOutputWithContext(ctx context.Context) ReferenceInputBlobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputBlobArrayOutput)
}

// ReferenceInputBlobMapInput is an input type that accepts ReferenceInputBlobMap and ReferenceInputBlobMapOutput values.
// You can construct a concrete instance of `ReferenceInputBlobMapInput` via:
//
//          ReferenceInputBlobMap{ "key": ReferenceInputBlobArgs{...} }
type ReferenceInputBlobMapInput interface {
	pulumi.Input

	ToReferenceInputBlobMapOutput() ReferenceInputBlobMapOutput
	ToReferenceInputBlobMapOutputWithContext(context.Context) ReferenceInputBlobMapOutput
}

type ReferenceInputBlobMap map[string]ReferenceInputBlobInput

func (ReferenceInputBlobMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ReferenceInputBlob)(nil))
}

func (i ReferenceInputBlobMap) ToReferenceInputBlobMapOutput() ReferenceInputBlobMapOutput {
	return i.ToReferenceInputBlobMapOutputWithContext(context.Background())
}

func (i ReferenceInputBlobMap) ToReferenceInputBlobMapOutputWithContext(ctx context.Context) ReferenceInputBlobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputBlobMapOutput)
}

type ReferenceInputBlobOutput struct {
	*pulumi.OutputState
}

func (ReferenceInputBlobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceInputBlob)(nil))
}

func (o ReferenceInputBlobOutput) ToReferenceInputBlobOutput() ReferenceInputBlobOutput {
	return o
}

func (o ReferenceInputBlobOutput) ToReferenceInputBlobOutputWithContext(ctx context.Context) ReferenceInputBlobOutput {
	return o
}

func (o ReferenceInputBlobOutput) ToReferenceInputBlobPtrOutput() ReferenceInputBlobPtrOutput {
	return o.ToReferenceInputBlobPtrOutputWithContext(context.Background())
}

func (o ReferenceInputBlobOutput) ToReferenceInputBlobPtrOutputWithContext(ctx context.Context) ReferenceInputBlobPtrOutput {
	return o.ApplyT(func(v ReferenceInputBlob) *ReferenceInputBlob {
		return &v
	}).(ReferenceInputBlobPtrOutput)
}

type ReferenceInputBlobPtrOutput struct {
	*pulumi.OutputState
}

func (ReferenceInputBlobPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceInputBlob)(nil))
}

func (o ReferenceInputBlobPtrOutput) ToReferenceInputBlobPtrOutput() ReferenceInputBlobPtrOutput {
	return o
}

func (o ReferenceInputBlobPtrOutput) ToReferenceInputBlobPtrOutputWithContext(ctx context.Context) ReferenceInputBlobPtrOutput {
	return o
}

type ReferenceInputBlobArrayOutput struct{ *pulumi.OutputState }

func (ReferenceInputBlobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceInputBlob)(nil))
}

func (o ReferenceInputBlobArrayOutput) ToReferenceInputBlobArrayOutput() ReferenceInputBlobArrayOutput {
	return o
}

func (o ReferenceInputBlobArrayOutput) ToReferenceInputBlobArrayOutputWithContext(ctx context.Context) ReferenceInputBlobArrayOutput {
	return o
}

func (o ReferenceInputBlobArrayOutput) Index(i pulumi.IntInput) ReferenceInputBlobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReferenceInputBlob {
		return vs[0].([]ReferenceInputBlob)[vs[1].(int)]
	}).(ReferenceInputBlobOutput)
}

type ReferenceInputBlobMapOutput struct{ *pulumi.OutputState }

func (ReferenceInputBlobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReferenceInputBlob)(nil))
}

func (o ReferenceInputBlobMapOutput) ToReferenceInputBlobMapOutput() ReferenceInputBlobMapOutput {
	return o
}

func (o ReferenceInputBlobMapOutput) ToReferenceInputBlobMapOutputWithContext(ctx context.Context) ReferenceInputBlobMapOutput {
	return o
}

func (o ReferenceInputBlobMapOutput) MapIndex(k pulumi.StringInput) ReferenceInputBlobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ReferenceInputBlob {
		return vs[0].(map[string]ReferenceInputBlob)[vs[1].(string)]
	}).(ReferenceInputBlobOutput)
}

func init() {
	pulumi.RegisterOutputType(ReferenceInputBlobOutput{})
	pulumi.RegisterOutputType(ReferenceInputBlobPtrOutput{})
	pulumi.RegisterOutputType(ReferenceInputBlobArrayOutput{})
	pulumi.RegisterOutputType(ReferenceInputBlobMapOutput{})
}
