// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package streamanalytics

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Stream Analytics Job.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/stream_analytics_job.html.markdown.
type Job struct {
	s *pulumi.ResourceState
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOpt) (*Job, error) {
	if args == nil || args.CompatibilityLevel == nil {
		return nil, errors.New("missing required argument 'CompatibilityLevel'")
	}
	if args == nil || args.DataLocale == nil {
		return nil, errors.New("missing required argument 'DataLocale'")
	}
	if args == nil || args.EventsLateArrivalMaxDelayInSeconds == nil {
		return nil, errors.New("missing required argument 'EventsLateArrivalMaxDelayInSeconds'")
	}
	if args == nil || args.EventsOutOfOrderMaxDelayInSeconds == nil {
		return nil, errors.New("missing required argument 'EventsOutOfOrderMaxDelayInSeconds'")
	}
	if args == nil || args.EventsOutOfOrderPolicy == nil {
		return nil, errors.New("missing required argument 'EventsOutOfOrderPolicy'")
	}
	if args == nil || args.OutputErrorPolicy == nil {
		return nil, errors.New("missing required argument 'OutputErrorPolicy'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.StreamingUnits == nil {
		return nil, errors.New("missing required argument 'StreamingUnits'")
	}
	if args == nil || args.TransformationQuery == nil {
		return nil, errors.New("missing required argument 'TransformationQuery'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["compatibilityLevel"] = nil
		inputs["dataLocale"] = nil
		inputs["eventsLateArrivalMaxDelayInSeconds"] = nil
		inputs["eventsOutOfOrderMaxDelayInSeconds"] = nil
		inputs["eventsOutOfOrderPolicy"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["outputErrorPolicy"] = nil
		inputs["resourceGroupName"] = nil
		inputs["streamingUnits"] = nil
		inputs["tags"] = nil
		inputs["transformationQuery"] = nil
	} else {
		inputs["compatibilityLevel"] = args.CompatibilityLevel
		inputs["dataLocale"] = args.DataLocale
		inputs["eventsLateArrivalMaxDelayInSeconds"] = args.EventsLateArrivalMaxDelayInSeconds
		inputs["eventsOutOfOrderMaxDelayInSeconds"] = args.EventsOutOfOrderMaxDelayInSeconds
		inputs["eventsOutOfOrderPolicy"] = args.EventsOutOfOrderPolicy
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["outputErrorPolicy"] = args.OutputErrorPolicy
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["streamingUnits"] = args.StreamingUnits
		inputs["tags"] = args.Tags
		inputs["transformationQuery"] = args.TransformationQuery
	}
	inputs["jobId"] = nil
	s, err := ctx.RegisterResource("azure:streamanalytics/job:Job", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Job{s: s}, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.ID, state *JobState, opts ...pulumi.ResourceOpt) (*Job, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["compatibilityLevel"] = state.CompatibilityLevel
		inputs["dataLocale"] = state.DataLocale
		inputs["eventsLateArrivalMaxDelayInSeconds"] = state.EventsLateArrivalMaxDelayInSeconds
		inputs["eventsOutOfOrderMaxDelayInSeconds"] = state.EventsOutOfOrderMaxDelayInSeconds
		inputs["eventsOutOfOrderPolicy"] = state.EventsOutOfOrderPolicy
		inputs["jobId"] = state.JobId
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["outputErrorPolicy"] = state.OutputErrorPolicy
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["streamingUnits"] = state.StreamingUnits
		inputs["tags"] = state.Tags
		inputs["transformationQuery"] = state.TransformationQuery
	}
	s, err := ctx.ReadResource("azure:streamanalytics/job:Job", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Job{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Job) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Job) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Specifies the compatibility level for this job - which controls certain runtime behaviors of the streaming job. Possible values are `1.0` and 1.1`.
func (r *Job) CompatibilityLevel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["compatibilityLevel"])
}

// Specifies the Data Locale of the Job, which [should be a supported .NET Culture](https://msdn.microsoft.com/en-us/library/system.globalization.culturetypes(v=vs.110).aspx).
func (r *Job) DataLocale() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dataLocale"])
}

// Specifies the maximum tolerable delay in seconds where events arriving late could be included. Supported range is `-1` (indefinite) to `1814399` (20d 23h 59m 59s).
func (r *Job) EventsLateArrivalMaxDelayInSeconds() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["eventsLateArrivalMaxDelayInSeconds"])
}

// Specifies the maximum tolerable delay in seconds where out-of-order events can be adjusted to be back in order. Supported range is `0` to `599` (9m 59s).
func (r *Job) EventsOutOfOrderMaxDelayInSeconds() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["eventsOutOfOrderMaxDelayInSeconds"])
}

// Specifies the policy which should be applied to events which arrive out of order in the input event stream. Possible values are `Adjust` and `Drop`.
func (r *Job) EventsOutOfOrderPolicy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["eventsOutOfOrderPolicy"])
}

// The Job ID assigned by the Stream Analytics Job.
func (r *Job) JobId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["jobId"])
}

// The Azure Region in which the Resource Group exists. Changing this forces a new resource to be created.
func (r *Job) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
func (r *Job) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Specifies the policy which should be applied to events which arrive at the output and cannot be written to the external storage due to being malformed (such as missing column values, column values of wrong type or size). Possible values are `Drop` and `Stop`. 
func (r *Job) OutputErrorPolicy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["outputErrorPolicy"])
}

// The name of the Resource Group where the Stream Analytics Job should exist. Changing this forces a new resource to be created.
func (r *Job) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Specifies the number of streaming units that the streaming job uses. Supported values are `1`, `3`, `6` and multiples of `6` up to `120`.
func (r *Job) StreamingUnits() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["streamingUnits"])
}

// A mapping of tags assigned to the resource.
func (r *Job) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Specifies the query that will be run in the streaming job, [written in Stream Analytics Query Language (SAQL)](https://msdn.microsoft.com/library/azure/dn834998).
func (r *Job) TransformationQuery() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["transformationQuery"])
}

// Input properties used for looking up and filtering Job resources.
type JobState struct {
	// Specifies the compatibility level for this job - which controls certain runtime behaviors of the streaming job. Possible values are `1.0` and 1.1`.
	CompatibilityLevel interface{}
	// Specifies the Data Locale of the Job, which [should be a supported .NET Culture](https://msdn.microsoft.com/en-us/library/system.globalization.culturetypes(v=vs.110).aspx).
	DataLocale interface{}
	// Specifies the maximum tolerable delay in seconds where events arriving late could be included. Supported range is `-1` (indefinite) to `1814399` (20d 23h 59m 59s).
	EventsLateArrivalMaxDelayInSeconds interface{}
	// Specifies the maximum tolerable delay in seconds where out-of-order events can be adjusted to be back in order. Supported range is `0` to `599` (9m 59s).
	EventsOutOfOrderMaxDelayInSeconds interface{}
	// Specifies the policy which should be applied to events which arrive out of order in the input event stream. Possible values are `Adjust` and `Drop`.
	EventsOutOfOrderPolicy interface{}
	// The Job ID assigned by the Stream Analytics Job.
	JobId interface{}
	// The Azure Region in which the Resource Group exists. Changing this forces a new resource to be created.
	Location interface{}
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the policy which should be applied to events which arrive at the output and cannot be written to the external storage due to being malformed (such as missing column values, column values of wrong type or size). Possible values are `Drop` and `Stop`. 
	OutputErrorPolicy interface{}
	// The name of the Resource Group where the Stream Analytics Job should exist. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Specifies the number of streaming units that the streaming job uses. Supported values are `1`, `3`, `6` and multiples of `6` up to `120`.
	StreamingUnits interface{}
	// A mapping of tags assigned to the resource.
	Tags interface{}
	// Specifies the query that will be run in the streaming job, [written in Stream Analytics Query Language (SAQL)](https://msdn.microsoft.com/library/azure/dn834998).
	TransformationQuery interface{}
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// Specifies the compatibility level for this job - which controls certain runtime behaviors of the streaming job. Possible values are `1.0` and 1.1`.
	CompatibilityLevel interface{}
	// Specifies the Data Locale of the Job, which [should be a supported .NET Culture](https://msdn.microsoft.com/en-us/library/system.globalization.culturetypes(v=vs.110).aspx).
	DataLocale interface{}
	// Specifies the maximum tolerable delay in seconds where events arriving late could be included. Supported range is `-1` (indefinite) to `1814399` (20d 23h 59m 59s).
	EventsLateArrivalMaxDelayInSeconds interface{}
	// Specifies the maximum tolerable delay in seconds where out-of-order events can be adjusted to be back in order. Supported range is `0` to `599` (9m 59s).
	EventsOutOfOrderMaxDelayInSeconds interface{}
	// Specifies the policy which should be applied to events which arrive out of order in the input event stream. Possible values are `Adjust` and `Drop`.
	EventsOutOfOrderPolicy interface{}
	// The Azure Region in which the Resource Group exists. Changing this forces a new resource to be created.
	Location interface{}
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the policy which should be applied to events which arrive at the output and cannot be written to the external storage due to being malformed (such as missing column values, column values of wrong type or size). Possible values are `Drop` and `Stop`. 
	OutputErrorPolicy interface{}
	// The name of the Resource Group where the Stream Analytics Job should exist. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Specifies the number of streaming units that the streaming job uses. Supported values are `1`, `3`, `6` and multiples of `6` up to `120`.
	StreamingUnits interface{}
	// A mapping of tags assigned to the resource.
	Tags interface{}
	// Specifies the query that will be run in the streaming job, [written in Stream Analytics Query Language (SAQL)](https://msdn.microsoft.com/library/azure/dn834998).
	TransformationQuery interface{}
}
