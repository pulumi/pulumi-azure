// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package streamanalytics

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Stream Analytics Output Function.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/streamanalytics"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				ResourceGroupName:      exampleResourceGroup.Name,
//				Location:               exampleResourceGroup.Location,
//				AccountTier:            pulumi.String("Standard"),
//				AccountReplicationType: pulumi.String("LRS"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePlan, err := appservice.NewPlan(ctx, "examplePlan", &appservice.PlanArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Kind:              pulumi.Any("FunctionApp"),
//				Reserved:          pulumi.Bool(true),
//				Sku: &appservice.PlanSkuArgs{
//					Tier: pulumi.String("Dynamic"),
//					Size: pulumi.String("Y1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleFunctionApp, err := appservice.NewFunctionApp(ctx, "exampleFunctionApp", &appservice.FunctionAppArgs{
//				Location:                exampleResourceGroup.Location,
//				ResourceGroupName:       exampleResourceGroup.Name,
//				AppServicePlanId:        examplePlan.ID(),
//				StorageAccountName:      exampleAccount.Name,
//				StorageAccountAccessKey: exampleAccount.PrimaryAccessKey,
//				OsType:                  pulumi.String("linux"),
//				Version:                 pulumi.String("~3"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleJob, err := streamanalytics.NewJob(ctx, "exampleJob", &streamanalytics.JobArgs{
//				ResourceGroupName:   exampleResourceGroup.Name,
//				Location:            exampleResourceGroup.Location,
//				StreamingUnits:      pulumi.Int(3),
//				TransformationQuery: pulumi.String("    SELECT *\n    INTO [YourOutputAlias]\n    FROM [YourInputAlias]\n"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = streamanalytics.NewOutputFunction(ctx, "exampleOutputFunction", &streamanalytics.OutputFunctionArgs{
//				ResourceGroupName:      exampleJob.ResourceGroupName,
//				StreamAnalyticsJobName: exampleJob.Name,
//				FunctionApp:            exampleFunctionApp.Name,
//				FunctionName:           pulumi.String("examplefunctionname"),
//				ApiKey:                 pulumi.String("exampleapikey"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Stream Analytics Output Functions can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:streamanalytics/outputFunction:OutputFunction example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StreamAnalytics/streamingJobs/job1/outputs/output1
//
// ```
type OutputFunction struct {
	pulumi.CustomResourceState

	// The API key for the Function.
	ApiKey pulumi.StringOutput `pulumi:"apiKey"`
	// The maximum number of events in each batch that's sent to the function. Defaults to `100`.
	BatchMaxCount pulumi.IntPtrOutput `pulumi:"batchMaxCount"`
	// The maximum batch size in bytes that's sent to the function. Defaults to `262144` (256 kB).
	BatchMaxInBytes pulumi.IntPtrOutput `pulumi:"batchMaxInBytes"`
	// The name of the Function App.
	FunctionApp pulumi.StringOutput `pulumi:"functionApp"`
	// The name of the function in the Function App.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// The name which should be used for this Stream Analytics Output. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Resource Group where the Stream Analytics Output should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringOutput `pulumi:"streamAnalyticsJobName"`
}

// NewOutputFunction registers a new resource with the given unique name, arguments, and options.
func NewOutputFunction(ctx *pulumi.Context,
	name string, args *OutputFunctionArgs, opts ...pulumi.ResourceOption) (*OutputFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiKey == nil {
		return nil, errors.New("invalid value for required argument 'ApiKey'")
	}
	if args.FunctionApp == nil {
		return nil, errors.New("invalid value for required argument 'FunctionApp'")
	}
	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.StreamAnalyticsJobName == nil {
		return nil, errors.New("invalid value for required argument 'StreamAnalyticsJobName'")
	}
	if args.ApiKey != nil {
		args.ApiKey = pulumi.ToSecret(args.ApiKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OutputFunction
	err := ctx.RegisterResource("azure:streamanalytics/outputFunction:OutputFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOutputFunction gets an existing OutputFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOutputFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OutputFunctionState, opts ...pulumi.ResourceOption) (*OutputFunction, error) {
	var resource OutputFunction
	err := ctx.ReadResource("azure:streamanalytics/outputFunction:OutputFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OutputFunction resources.
type outputFunctionState struct {
	// The API key for the Function.
	ApiKey *string `pulumi:"apiKey"`
	// The maximum number of events in each batch that's sent to the function. Defaults to `100`.
	BatchMaxCount *int `pulumi:"batchMaxCount"`
	// The maximum batch size in bytes that's sent to the function. Defaults to `262144` (256 kB).
	BatchMaxInBytes *int `pulumi:"batchMaxInBytes"`
	// The name of the Function App.
	FunctionApp *string `pulumi:"functionApp"`
	// The name of the function in the Function App.
	FunctionName *string `pulumi:"functionName"`
	// The name which should be used for this Stream Analytics Output. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Stream Analytics Output should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName *string `pulumi:"streamAnalyticsJobName"`
}

type OutputFunctionState struct {
	// The API key for the Function.
	ApiKey pulumi.StringPtrInput
	// The maximum number of events in each batch that's sent to the function. Defaults to `100`.
	BatchMaxCount pulumi.IntPtrInput
	// The maximum batch size in bytes that's sent to the function. Defaults to `262144` (256 kB).
	BatchMaxInBytes pulumi.IntPtrInput
	// The name of the Function App.
	FunctionApp pulumi.StringPtrInput
	// The name of the function in the Function App.
	FunctionName pulumi.StringPtrInput
	// The name which should be used for this Stream Analytics Output. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Stream Analytics Output should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringPtrInput
}

func (OutputFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*outputFunctionState)(nil)).Elem()
}

type outputFunctionArgs struct {
	// The API key for the Function.
	ApiKey string `pulumi:"apiKey"`
	// The maximum number of events in each batch that's sent to the function. Defaults to `100`.
	BatchMaxCount *int `pulumi:"batchMaxCount"`
	// The maximum batch size in bytes that's sent to the function. Defaults to `262144` (256 kB).
	BatchMaxInBytes *int `pulumi:"batchMaxInBytes"`
	// The name of the Function App.
	FunctionApp string `pulumi:"functionApp"`
	// The name of the function in the Function App.
	FunctionName string `pulumi:"functionName"`
	// The name which should be used for this Stream Analytics Output. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the Resource Group where the Stream Analytics Output should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName string `pulumi:"streamAnalyticsJobName"`
}

// The set of arguments for constructing a OutputFunction resource.
type OutputFunctionArgs struct {
	// The API key for the Function.
	ApiKey pulumi.StringInput
	// The maximum number of events in each batch that's sent to the function. Defaults to `100`.
	BatchMaxCount pulumi.IntPtrInput
	// The maximum batch size in bytes that's sent to the function. Defaults to `262144` (256 kB).
	BatchMaxInBytes pulumi.IntPtrInput
	// The name of the Function App.
	FunctionApp pulumi.StringInput
	// The name of the function in the Function App.
	FunctionName pulumi.StringInput
	// The name which should be used for this Stream Analytics Output. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the Resource Group where the Stream Analytics Output should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringInput
}

func (OutputFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*outputFunctionArgs)(nil)).Elem()
}

type OutputFunctionInput interface {
	pulumi.Input

	ToOutputFunctionOutput() OutputFunctionOutput
	ToOutputFunctionOutputWithContext(ctx context.Context) OutputFunctionOutput
}

func (*OutputFunction) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputFunction)(nil)).Elem()
}

func (i *OutputFunction) ToOutputFunctionOutput() OutputFunctionOutput {
	return i.ToOutputFunctionOutputWithContext(context.Background())
}

func (i *OutputFunction) ToOutputFunctionOutputWithContext(ctx context.Context) OutputFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputFunctionOutput)
}

// OutputFunctionArrayInput is an input type that accepts OutputFunctionArray and OutputFunctionArrayOutput values.
// You can construct a concrete instance of `OutputFunctionArrayInput` via:
//
//	OutputFunctionArray{ OutputFunctionArgs{...} }
type OutputFunctionArrayInput interface {
	pulumi.Input

	ToOutputFunctionArrayOutput() OutputFunctionArrayOutput
	ToOutputFunctionArrayOutputWithContext(context.Context) OutputFunctionArrayOutput
}

type OutputFunctionArray []OutputFunctionInput

func (OutputFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OutputFunction)(nil)).Elem()
}

func (i OutputFunctionArray) ToOutputFunctionArrayOutput() OutputFunctionArrayOutput {
	return i.ToOutputFunctionArrayOutputWithContext(context.Background())
}

func (i OutputFunctionArray) ToOutputFunctionArrayOutputWithContext(ctx context.Context) OutputFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputFunctionArrayOutput)
}

// OutputFunctionMapInput is an input type that accepts OutputFunctionMap and OutputFunctionMapOutput values.
// You can construct a concrete instance of `OutputFunctionMapInput` via:
//
//	OutputFunctionMap{ "key": OutputFunctionArgs{...} }
type OutputFunctionMapInput interface {
	pulumi.Input

	ToOutputFunctionMapOutput() OutputFunctionMapOutput
	ToOutputFunctionMapOutputWithContext(context.Context) OutputFunctionMapOutput
}

type OutputFunctionMap map[string]OutputFunctionInput

func (OutputFunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OutputFunction)(nil)).Elem()
}

func (i OutputFunctionMap) ToOutputFunctionMapOutput() OutputFunctionMapOutput {
	return i.ToOutputFunctionMapOutputWithContext(context.Background())
}

func (i OutputFunctionMap) ToOutputFunctionMapOutputWithContext(ctx context.Context) OutputFunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputFunctionMapOutput)
}

type OutputFunctionOutput struct{ *pulumi.OutputState }

func (OutputFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputFunction)(nil)).Elem()
}

func (o OutputFunctionOutput) ToOutputFunctionOutput() OutputFunctionOutput {
	return o
}

func (o OutputFunctionOutput) ToOutputFunctionOutputWithContext(ctx context.Context) OutputFunctionOutput {
	return o
}

// The API key for the Function.
func (o OutputFunctionOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputFunction) pulumi.StringOutput { return v.ApiKey }).(pulumi.StringOutput)
}

// The maximum number of events in each batch that's sent to the function. Defaults to `100`.
func (o OutputFunctionOutput) BatchMaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutputFunction) pulumi.IntPtrOutput { return v.BatchMaxCount }).(pulumi.IntPtrOutput)
}

// The maximum batch size in bytes that's sent to the function. Defaults to `262144` (256 kB).
func (o OutputFunctionOutput) BatchMaxInBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutputFunction) pulumi.IntPtrOutput { return v.BatchMaxInBytes }).(pulumi.IntPtrOutput)
}

// The name of the Function App.
func (o OutputFunctionOutput) FunctionApp() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputFunction) pulumi.StringOutput { return v.FunctionApp }).(pulumi.StringOutput)
}

// The name of the function in the Function App.
func (o OutputFunctionOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputFunction) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// The name which should be used for this Stream Analytics Output. Changing this forces a new resource to be created.
func (o OutputFunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputFunction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the Resource Group where the Stream Analytics Output should exist. Changing this forces a new resource to be created.
func (o OutputFunctionOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputFunction) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
func (o OutputFunctionOutput) StreamAnalyticsJobName() pulumi.StringOutput {
	return o.ApplyT(func(v *OutputFunction) pulumi.StringOutput { return v.StreamAnalyticsJobName }).(pulumi.StringOutput)
}

type OutputFunctionArrayOutput struct{ *pulumi.OutputState }

func (OutputFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OutputFunction)(nil)).Elem()
}

func (o OutputFunctionArrayOutput) ToOutputFunctionArrayOutput() OutputFunctionArrayOutput {
	return o
}

func (o OutputFunctionArrayOutput) ToOutputFunctionArrayOutputWithContext(ctx context.Context) OutputFunctionArrayOutput {
	return o
}

func (o OutputFunctionArrayOutput) Index(i pulumi.IntInput) OutputFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OutputFunction {
		return vs[0].([]*OutputFunction)[vs[1].(int)]
	}).(OutputFunctionOutput)
}

type OutputFunctionMapOutput struct{ *pulumi.OutputState }

func (OutputFunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OutputFunction)(nil)).Elem()
}

func (o OutputFunctionMapOutput) ToOutputFunctionMapOutput() OutputFunctionMapOutput {
	return o
}

func (o OutputFunctionMapOutput) ToOutputFunctionMapOutputWithContext(ctx context.Context) OutputFunctionMapOutput {
	return o
}

func (o OutputFunctionMapOutput) MapIndex(k pulumi.StringInput) OutputFunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OutputFunction {
		return vs[0].(map[string]*OutputFunction)[vs[1].(string)]
	}).(OutputFunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OutputFunctionInput)(nil)).Elem(), &OutputFunction{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputFunctionArrayInput)(nil)).Elem(), OutputFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputFunctionMapInput)(nil)).Elem(), OutputFunctionMap{})
	pulumi.RegisterOutputType(OutputFunctionOutput{})
	pulumi.RegisterOutputType(OutputFunctionArrayOutput{})
	pulumi.RegisterOutputType(OutputFunctionMapOutput{})
}
