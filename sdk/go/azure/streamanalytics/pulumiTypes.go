// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package streamanalytics

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type FunctionJavaScriptUDFInput struct {
	// The Data Type for the Input Argument of this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type string `pulumi:"type"`
}

type FunctionJavaScriptUDFInputInput interface {
	pulumi.Input

	ToFunctionJavaScriptUDFInputOutput() FunctionJavaScriptUDFInputOutput
	ToFunctionJavaScriptUDFInputOutputWithContext(context.Context) FunctionJavaScriptUDFInputOutput
}

type FunctionJavaScriptUDFInputArgs struct {
	// The Data Type for the Input Argument of this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionJavaScriptUDFInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavaScriptUDFInput)(nil)).Elem()
}

func (i FunctionJavaScriptUDFInputArgs) ToFunctionJavaScriptUDFInputOutput() FunctionJavaScriptUDFInputOutput {
	return i.ToFunctionJavaScriptUDFInputOutputWithContext(context.Background())
}

func (i FunctionJavaScriptUDFInputArgs) ToFunctionJavaScriptUDFInputOutputWithContext(ctx context.Context) FunctionJavaScriptUDFInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavaScriptUDFInputOutput)
}

type FunctionJavaScriptUDFInputArrayInput interface {
	pulumi.Input

	ToFunctionJavaScriptUDFInputArrayOutput() FunctionJavaScriptUDFInputArrayOutput
	ToFunctionJavaScriptUDFInputArrayOutputWithContext(context.Context) FunctionJavaScriptUDFInputArrayOutput
}

type FunctionJavaScriptUDFInputArray []FunctionJavaScriptUDFInputInput

func (FunctionJavaScriptUDFInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionJavaScriptUDFInput)(nil)).Elem()
}

func (i FunctionJavaScriptUDFInputArray) ToFunctionJavaScriptUDFInputArrayOutput() FunctionJavaScriptUDFInputArrayOutput {
	return i.ToFunctionJavaScriptUDFInputArrayOutputWithContext(context.Background())
}

func (i FunctionJavaScriptUDFInputArray) ToFunctionJavaScriptUDFInputArrayOutputWithContext(ctx context.Context) FunctionJavaScriptUDFInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavaScriptUDFInputArrayOutput)
}

type FunctionJavaScriptUDFInputOutput struct{ *pulumi.OutputState }

func (FunctionJavaScriptUDFInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavaScriptUDFInput)(nil)).Elem()
}

func (o FunctionJavaScriptUDFInputOutput) ToFunctionJavaScriptUDFInputOutput() FunctionJavaScriptUDFInputOutput {
	return o
}

func (o FunctionJavaScriptUDFInputOutput) ToFunctionJavaScriptUDFInputOutputWithContext(ctx context.Context) FunctionJavaScriptUDFInputOutput {
	return o
}

// The Data Type for the Input Argument of this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
func (o FunctionJavaScriptUDFInputOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionJavaScriptUDFInput) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionJavaScriptUDFInputArrayOutput struct{ *pulumi.OutputState }

func (FunctionJavaScriptUDFInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionJavaScriptUDFInput)(nil)).Elem()
}

func (o FunctionJavaScriptUDFInputArrayOutput) ToFunctionJavaScriptUDFInputArrayOutput() FunctionJavaScriptUDFInputArrayOutput {
	return o
}

func (o FunctionJavaScriptUDFInputArrayOutput) ToFunctionJavaScriptUDFInputArrayOutputWithContext(ctx context.Context) FunctionJavaScriptUDFInputArrayOutput {
	return o
}

func (o FunctionJavaScriptUDFInputArrayOutput) Index(i pulumi.IntInput) FunctionJavaScriptUDFInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionJavaScriptUDFInput {
		return vs[0].([]FunctionJavaScriptUDFInput)[vs[1].(int)]
	}).(FunctionJavaScriptUDFInputOutput)
}

type FunctionJavaScriptUDFOutput struct {
	// The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type string `pulumi:"type"`
}

type FunctionJavaScriptUDFOutputInput interface {
	pulumi.Input

	ToFunctionJavaScriptUDFOutputOutput() FunctionJavaScriptUDFOutputOutput
	ToFunctionJavaScriptUDFOutputOutputWithContext(context.Context) FunctionJavaScriptUDFOutputOutput
}

type FunctionJavaScriptUDFOutputArgs struct {
	// The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionJavaScriptUDFOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavaScriptUDFOutput)(nil)).Elem()
}

func (i FunctionJavaScriptUDFOutputArgs) ToFunctionJavaScriptUDFOutputOutput() FunctionJavaScriptUDFOutputOutput {
	return i.ToFunctionJavaScriptUDFOutputOutputWithContext(context.Background())
}

func (i FunctionJavaScriptUDFOutputArgs) ToFunctionJavaScriptUDFOutputOutputWithContext(ctx context.Context) FunctionJavaScriptUDFOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavaScriptUDFOutputOutput)
}

func (i FunctionJavaScriptUDFOutputArgs) ToFunctionJavaScriptUDFOutputPtrOutput() FunctionJavaScriptUDFOutputPtrOutput {
	return i.ToFunctionJavaScriptUDFOutputPtrOutputWithContext(context.Background())
}

func (i FunctionJavaScriptUDFOutputArgs) ToFunctionJavaScriptUDFOutputPtrOutputWithContext(ctx context.Context) FunctionJavaScriptUDFOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavaScriptUDFOutputOutput).ToFunctionJavaScriptUDFOutputPtrOutputWithContext(ctx)
}

type FunctionJavaScriptUDFOutputPtrInput interface {
	pulumi.Input

	ToFunctionJavaScriptUDFOutputPtrOutput() FunctionJavaScriptUDFOutputPtrOutput
	ToFunctionJavaScriptUDFOutputPtrOutputWithContext(context.Context) FunctionJavaScriptUDFOutputPtrOutput
}

type functionJavaScriptUDFOutputPtrType FunctionJavaScriptUDFOutputArgs

func FunctionJavaScriptUDFOutputPtr(v *FunctionJavaScriptUDFOutputArgs) FunctionJavaScriptUDFOutputPtrInput {
	return (*functionJavaScriptUDFOutputPtrType)(v)
}

func (*functionJavaScriptUDFOutputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionJavaScriptUDFOutput)(nil)).Elem()
}

func (i *functionJavaScriptUDFOutputPtrType) ToFunctionJavaScriptUDFOutputPtrOutput() FunctionJavaScriptUDFOutputPtrOutput {
	return i.ToFunctionJavaScriptUDFOutputPtrOutputWithContext(context.Background())
}

func (i *functionJavaScriptUDFOutputPtrType) ToFunctionJavaScriptUDFOutputPtrOutputWithContext(ctx context.Context) FunctionJavaScriptUDFOutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionJavaScriptUDFOutputPtrOutput)
}

type FunctionJavaScriptUDFOutputOutput struct{ *pulumi.OutputState }

func (FunctionJavaScriptUDFOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionJavaScriptUDFOutput)(nil)).Elem()
}

func (o FunctionJavaScriptUDFOutputOutput) ToFunctionJavaScriptUDFOutputOutput() FunctionJavaScriptUDFOutputOutput {
	return o
}

func (o FunctionJavaScriptUDFOutputOutput) ToFunctionJavaScriptUDFOutputOutputWithContext(ctx context.Context) FunctionJavaScriptUDFOutputOutput {
	return o
}

func (o FunctionJavaScriptUDFOutputOutput) ToFunctionJavaScriptUDFOutputPtrOutput() FunctionJavaScriptUDFOutputPtrOutput {
	return o.ToFunctionJavaScriptUDFOutputPtrOutputWithContext(context.Background())
}

func (o FunctionJavaScriptUDFOutputOutput) ToFunctionJavaScriptUDFOutputPtrOutputWithContext(ctx context.Context) FunctionJavaScriptUDFOutputPtrOutput {
	return o.ApplyT(func(v FunctionJavaScriptUDFOutput) *FunctionJavaScriptUDFOutput {
		return &v
	}).(FunctionJavaScriptUDFOutputPtrOutput)
}

// The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
func (o FunctionJavaScriptUDFOutputOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionJavaScriptUDFOutput) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionJavaScriptUDFOutputPtrOutput struct{ *pulumi.OutputState }

func (FunctionJavaScriptUDFOutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionJavaScriptUDFOutput)(nil)).Elem()
}

func (o FunctionJavaScriptUDFOutputPtrOutput) ToFunctionJavaScriptUDFOutputPtrOutput() FunctionJavaScriptUDFOutputPtrOutput {
	return o
}

func (o FunctionJavaScriptUDFOutputPtrOutput) ToFunctionJavaScriptUDFOutputPtrOutputWithContext(ctx context.Context) FunctionJavaScriptUDFOutputPtrOutput {
	return o
}

func (o FunctionJavaScriptUDFOutputPtrOutput) Elem() FunctionJavaScriptUDFOutputOutput {
	return o.ApplyT(func(v *FunctionJavaScriptUDFOutput) FunctionJavaScriptUDFOutput { return *v }).(FunctionJavaScriptUDFOutputOutput)
}

// The Data Type output from this JavaScript Function. Possible values include `array`, `any`, `bigint`, `datetime`, `float`, `nvarchar(max)` and `record`.
func (o FunctionJavaScriptUDFOutputPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionJavaScriptUDFOutput) string { return v.Type }).(pulumi.StringOutput)
}

type OutputBlobSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format *string `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

type OutputBlobSerializationInput interface {
	pulumi.Input

	ToOutputBlobSerializationOutput() OutputBlobSerializationOutput
	ToOutputBlobSerializationOutputWithContext(context.Context) OutputBlobSerializationOutput
}

type OutputBlobSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OutputBlobSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputBlobSerialization)(nil)).Elem()
}

func (i OutputBlobSerializationArgs) ToOutputBlobSerializationOutput() OutputBlobSerializationOutput {
	return i.ToOutputBlobSerializationOutputWithContext(context.Background())
}

func (i OutputBlobSerializationArgs) ToOutputBlobSerializationOutputWithContext(ctx context.Context) OutputBlobSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputBlobSerializationOutput)
}

func (i OutputBlobSerializationArgs) ToOutputBlobSerializationPtrOutput() OutputBlobSerializationPtrOutput {
	return i.ToOutputBlobSerializationPtrOutputWithContext(context.Background())
}

func (i OutputBlobSerializationArgs) ToOutputBlobSerializationPtrOutputWithContext(ctx context.Context) OutputBlobSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputBlobSerializationOutput).ToOutputBlobSerializationPtrOutputWithContext(ctx)
}

type OutputBlobSerializationPtrInput interface {
	pulumi.Input

	ToOutputBlobSerializationPtrOutput() OutputBlobSerializationPtrOutput
	ToOutputBlobSerializationPtrOutputWithContext(context.Context) OutputBlobSerializationPtrOutput
}

type outputBlobSerializationPtrType OutputBlobSerializationArgs

func OutputBlobSerializationPtr(v *OutputBlobSerializationArgs) OutputBlobSerializationPtrInput {
	return (*outputBlobSerializationPtrType)(v)
}

func (*outputBlobSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputBlobSerialization)(nil)).Elem()
}

func (i *outputBlobSerializationPtrType) ToOutputBlobSerializationPtrOutput() OutputBlobSerializationPtrOutput {
	return i.ToOutputBlobSerializationPtrOutputWithContext(context.Background())
}

func (i *outputBlobSerializationPtrType) ToOutputBlobSerializationPtrOutputWithContext(ctx context.Context) OutputBlobSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputBlobSerializationPtrOutput)
}

type OutputBlobSerializationOutput struct{ *pulumi.OutputState }

func (OutputBlobSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputBlobSerialization)(nil)).Elem()
}

func (o OutputBlobSerializationOutput) ToOutputBlobSerializationOutput() OutputBlobSerializationOutput {
	return o
}

func (o OutputBlobSerializationOutput) ToOutputBlobSerializationOutputWithContext(ctx context.Context) OutputBlobSerializationOutput {
	return o
}

func (o OutputBlobSerializationOutput) ToOutputBlobSerializationPtrOutput() OutputBlobSerializationPtrOutput {
	return o.ToOutputBlobSerializationPtrOutputWithContext(context.Background())
}

func (o OutputBlobSerializationOutput) ToOutputBlobSerializationPtrOutputWithContext(ctx context.Context) OutputBlobSerializationPtrOutput {
	return o.ApplyT(func(v OutputBlobSerialization) *OutputBlobSerialization {
		return &v
	}).(OutputBlobSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o OutputBlobSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputBlobSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o OutputBlobSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputBlobSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
func (o OutputBlobSerializationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputBlobSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o OutputBlobSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputBlobSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type OutputBlobSerializationPtrOutput struct{ *pulumi.OutputState }

func (OutputBlobSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputBlobSerialization)(nil)).Elem()
}

func (o OutputBlobSerializationPtrOutput) ToOutputBlobSerializationPtrOutput() OutputBlobSerializationPtrOutput {
	return o
}

func (o OutputBlobSerializationPtrOutput) ToOutputBlobSerializationPtrOutputWithContext(ctx context.Context) OutputBlobSerializationPtrOutput {
	return o
}

func (o OutputBlobSerializationPtrOutput) Elem() OutputBlobSerializationOutput {
	return o.ApplyT(func(v *OutputBlobSerialization) OutputBlobSerialization { return *v }).(OutputBlobSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o OutputBlobSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputBlobSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o OutputBlobSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputBlobSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
func (o OutputBlobSerializationPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputBlobSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o OutputBlobSerializationPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputBlobSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type OutputEventHubSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format *string `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

type OutputEventHubSerializationInput interface {
	pulumi.Input

	ToOutputEventHubSerializationOutput() OutputEventHubSerializationOutput
	ToOutputEventHubSerializationOutputWithContext(context.Context) OutputEventHubSerializationOutput
}

type OutputEventHubSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OutputEventHubSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputEventHubSerialization)(nil)).Elem()
}

func (i OutputEventHubSerializationArgs) ToOutputEventHubSerializationOutput() OutputEventHubSerializationOutput {
	return i.ToOutputEventHubSerializationOutputWithContext(context.Background())
}

func (i OutputEventHubSerializationArgs) ToOutputEventHubSerializationOutputWithContext(ctx context.Context) OutputEventHubSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputEventHubSerializationOutput)
}

func (i OutputEventHubSerializationArgs) ToOutputEventHubSerializationPtrOutput() OutputEventHubSerializationPtrOutput {
	return i.ToOutputEventHubSerializationPtrOutputWithContext(context.Background())
}

func (i OutputEventHubSerializationArgs) ToOutputEventHubSerializationPtrOutputWithContext(ctx context.Context) OutputEventHubSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputEventHubSerializationOutput).ToOutputEventHubSerializationPtrOutputWithContext(ctx)
}

type OutputEventHubSerializationPtrInput interface {
	pulumi.Input

	ToOutputEventHubSerializationPtrOutput() OutputEventHubSerializationPtrOutput
	ToOutputEventHubSerializationPtrOutputWithContext(context.Context) OutputEventHubSerializationPtrOutput
}

type outputEventHubSerializationPtrType OutputEventHubSerializationArgs

func OutputEventHubSerializationPtr(v *OutputEventHubSerializationArgs) OutputEventHubSerializationPtrInput {
	return (*outputEventHubSerializationPtrType)(v)
}

func (*outputEventHubSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputEventHubSerialization)(nil)).Elem()
}

func (i *outputEventHubSerializationPtrType) ToOutputEventHubSerializationPtrOutput() OutputEventHubSerializationPtrOutput {
	return i.ToOutputEventHubSerializationPtrOutputWithContext(context.Background())
}

func (i *outputEventHubSerializationPtrType) ToOutputEventHubSerializationPtrOutputWithContext(ctx context.Context) OutputEventHubSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputEventHubSerializationPtrOutput)
}

type OutputEventHubSerializationOutput struct{ *pulumi.OutputState }

func (OutputEventHubSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputEventHubSerialization)(nil)).Elem()
}

func (o OutputEventHubSerializationOutput) ToOutputEventHubSerializationOutput() OutputEventHubSerializationOutput {
	return o
}

func (o OutputEventHubSerializationOutput) ToOutputEventHubSerializationOutputWithContext(ctx context.Context) OutputEventHubSerializationOutput {
	return o
}

func (o OutputEventHubSerializationOutput) ToOutputEventHubSerializationPtrOutput() OutputEventHubSerializationPtrOutput {
	return o.ToOutputEventHubSerializationPtrOutputWithContext(context.Background())
}

func (o OutputEventHubSerializationOutput) ToOutputEventHubSerializationPtrOutputWithContext(ctx context.Context) OutputEventHubSerializationPtrOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) *OutputEventHubSerialization {
		return &v
	}).(OutputEventHubSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o OutputEventHubSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o OutputEventHubSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
func (o OutputEventHubSerializationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o OutputEventHubSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type OutputEventHubSerializationPtrOutput struct{ *pulumi.OutputState }

func (OutputEventHubSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputEventHubSerialization)(nil)).Elem()
}

func (o OutputEventHubSerializationPtrOutput) ToOutputEventHubSerializationPtrOutput() OutputEventHubSerializationPtrOutput {
	return o
}

func (o OutputEventHubSerializationPtrOutput) ToOutputEventHubSerializationPtrOutputWithContext(ctx context.Context) OutputEventHubSerializationPtrOutput {
	return o
}

func (o OutputEventHubSerializationPtrOutput) Elem() OutputEventHubSerializationOutput {
	return o.ApplyT(func(v *OutputEventHubSerialization) OutputEventHubSerialization { return *v }).(OutputEventHubSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o OutputEventHubSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o OutputEventHubSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
func (o OutputEventHubSerializationPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o OutputEventHubSerializationPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputEventHubSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type OutputServiceBusQueueSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format *string `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

type OutputServiceBusQueueSerializationInput interface {
	pulumi.Input

	ToOutputServiceBusQueueSerializationOutput() OutputServiceBusQueueSerializationOutput
	ToOutputServiceBusQueueSerializationOutputWithContext(context.Context) OutputServiceBusQueueSerializationOutput
}

type OutputServiceBusQueueSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OutputServiceBusQueueSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputServiceBusQueueSerialization)(nil)).Elem()
}

func (i OutputServiceBusQueueSerializationArgs) ToOutputServiceBusQueueSerializationOutput() OutputServiceBusQueueSerializationOutput {
	return i.ToOutputServiceBusQueueSerializationOutputWithContext(context.Background())
}

func (i OutputServiceBusQueueSerializationArgs) ToOutputServiceBusQueueSerializationOutputWithContext(ctx context.Context) OutputServiceBusQueueSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputServiceBusQueueSerializationOutput)
}

func (i OutputServiceBusQueueSerializationArgs) ToOutputServiceBusQueueSerializationPtrOutput() OutputServiceBusQueueSerializationPtrOutput {
	return i.ToOutputServiceBusQueueSerializationPtrOutputWithContext(context.Background())
}

func (i OutputServiceBusQueueSerializationArgs) ToOutputServiceBusQueueSerializationPtrOutputWithContext(ctx context.Context) OutputServiceBusQueueSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputServiceBusQueueSerializationOutput).ToOutputServiceBusQueueSerializationPtrOutputWithContext(ctx)
}

type OutputServiceBusQueueSerializationPtrInput interface {
	pulumi.Input

	ToOutputServiceBusQueueSerializationPtrOutput() OutputServiceBusQueueSerializationPtrOutput
	ToOutputServiceBusQueueSerializationPtrOutputWithContext(context.Context) OutputServiceBusQueueSerializationPtrOutput
}

type outputServiceBusQueueSerializationPtrType OutputServiceBusQueueSerializationArgs

func OutputServiceBusQueueSerializationPtr(v *OutputServiceBusQueueSerializationArgs) OutputServiceBusQueueSerializationPtrInput {
	return (*outputServiceBusQueueSerializationPtrType)(v)
}

func (*outputServiceBusQueueSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputServiceBusQueueSerialization)(nil)).Elem()
}

func (i *outputServiceBusQueueSerializationPtrType) ToOutputServiceBusQueueSerializationPtrOutput() OutputServiceBusQueueSerializationPtrOutput {
	return i.ToOutputServiceBusQueueSerializationPtrOutputWithContext(context.Background())
}

func (i *outputServiceBusQueueSerializationPtrType) ToOutputServiceBusQueueSerializationPtrOutputWithContext(ctx context.Context) OutputServiceBusQueueSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputServiceBusQueueSerializationPtrOutput)
}

type OutputServiceBusQueueSerializationOutput struct{ *pulumi.OutputState }

func (OutputServiceBusQueueSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputServiceBusQueueSerialization)(nil)).Elem()
}

func (o OutputServiceBusQueueSerializationOutput) ToOutputServiceBusQueueSerializationOutput() OutputServiceBusQueueSerializationOutput {
	return o
}

func (o OutputServiceBusQueueSerializationOutput) ToOutputServiceBusQueueSerializationOutputWithContext(ctx context.Context) OutputServiceBusQueueSerializationOutput {
	return o
}

func (o OutputServiceBusQueueSerializationOutput) ToOutputServiceBusQueueSerializationPtrOutput() OutputServiceBusQueueSerializationPtrOutput {
	return o.ToOutputServiceBusQueueSerializationPtrOutputWithContext(context.Background())
}

func (o OutputServiceBusQueueSerializationOutput) ToOutputServiceBusQueueSerializationPtrOutputWithContext(ctx context.Context) OutputServiceBusQueueSerializationPtrOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) *OutputServiceBusQueueSerialization {
		return &v
	}).(OutputServiceBusQueueSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o OutputServiceBusQueueSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o OutputServiceBusQueueSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
func (o OutputServiceBusQueueSerializationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o OutputServiceBusQueueSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type OutputServiceBusQueueSerializationPtrOutput struct{ *pulumi.OutputState }

func (OutputServiceBusQueueSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputServiceBusQueueSerialization)(nil)).Elem()
}

func (o OutputServiceBusQueueSerializationPtrOutput) ToOutputServiceBusQueueSerializationPtrOutput() OutputServiceBusQueueSerializationPtrOutput {
	return o
}

func (o OutputServiceBusQueueSerializationPtrOutput) ToOutputServiceBusQueueSerializationPtrOutputWithContext(ctx context.Context) OutputServiceBusQueueSerializationPtrOutput {
	return o
}

func (o OutputServiceBusQueueSerializationPtrOutput) Elem() OutputServiceBusQueueSerializationOutput {
	return o.ApplyT(func(v *OutputServiceBusQueueSerialization) OutputServiceBusQueueSerialization { return *v }).(OutputServiceBusQueueSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o OutputServiceBusQueueSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o OutputServiceBusQueueSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
func (o OutputServiceBusQueueSerializationPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o OutputServiceBusQueueSerializationPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputServiceBusQueueSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type OutputServicebusTopicSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format *string `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

type OutputServicebusTopicSerializationInput interface {
	pulumi.Input

	ToOutputServicebusTopicSerializationOutput() OutputServicebusTopicSerializationOutput
	ToOutputServicebusTopicSerializationOutputWithContext(context.Context) OutputServicebusTopicSerializationOutput
}

type OutputServicebusTopicSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (OutputServicebusTopicSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputServicebusTopicSerialization)(nil)).Elem()
}

func (i OutputServicebusTopicSerializationArgs) ToOutputServicebusTopicSerializationOutput() OutputServicebusTopicSerializationOutput {
	return i.ToOutputServicebusTopicSerializationOutputWithContext(context.Background())
}

func (i OutputServicebusTopicSerializationArgs) ToOutputServicebusTopicSerializationOutputWithContext(ctx context.Context) OutputServicebusTopicSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputServicebusTopicSerializationOutput)
}

func (i OutputServicebusTopicSerializationArgs) ToOutputServicebusTopicSerializationPtrOutput() OutputServicebusTopicSerializationPtrOutput {
	return i.ToOutputServicebusTopicSerializationPtrOutputWithContext(context.Background())
}

func (i OutputServicebusTopicSerializationArgs) ToOutputServicebusTopicSerializationPtrOutputWithContext(ctx context.Context) OutputServicebusTopicSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputServicebusTopicSerializationOutput).ToOutputServicebusTopicSerializationPtrOutputWithContext(ctx)
}

type OutputServicebusTopicSerializationPtrInput interface {
	pulumi.Input

	ToOutputServicebusTopicSerializationPtrOutput() OutputServicebusTopicSerializationPtrOutput
	ToOutputServicebusTopicSerializationPtrOutputWithContext(context.Context) OutputServicebusTopicSerializationPtrOutput
}

type outputServicebusTopicSerializationPtrType OutputServicebusTopicSerializationArgs

func OutputServicebusTopicSerializationPtr(v *OutputServicebusTopicSerializationArgs) OutputServicebusTopicSerializationPtrInput {
	return (*outputServicebusTopicSerializationPtrType)(v)
}

func (*outputServicebusTopicSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputServicebusTopicSerialization)(nil)).Elem()
}

func (i *outputServicebusTopicSerializationPtrType) ToOutputServicebusTopicSerializationPtrOutput() OutputServicebusTopicSerializationPtrOutput {
	return i.ToOutputServicebusTopicSerializationPtrOutputWithContext(context.Background())
}

func (i *outputServicebusTopicSerializationPtrType) ToOutputServicebusTopicSerializationPtrOutputWithContext(ctx context.Context) OutputServicebusTopicSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputServicebusTopicSerializationPtrOutput)
}

type OutputServicebusTopicSerializationOutput struct{ *pulumi.OutputState }

func (OutputServicebusTopicSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputServicebusTopicSerialization)(nil)).Elem()
}

func (o OutputServicebusTopicSerializationOutput) ToOutputServicebusTopicSerializationOutput() OutputServicebusTopicSerializationOutput {
	return o
}

func (o OutputServicebusTopicSerializationOutput) ToOutputServicebusTopicSerializationOutputWithContext(ctx context.Context) OutputServicebusTopicSerializationOutput {
	return o
}

func (o OutputServicebusTopicSerializationOutput) ToOutputServicebusTopicSerializationPtrOutput() OutputServicebusTopicSerializationPtrOutput {
	return o.ToOutputServicebusTopicSerializationPtrOutputWithContext(context.Background())
}

func (o OutputServicebusTopicSerializationOutput) ToOutputServicebusTopicSerializationPtrOutputWithContext(ctx context.Context) OutputServicebusTopicSerializationPtrOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) *OutputServicebusTopicSerialization {
		return &v
	}).(OutputServicebusTopicSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o OutputServicebusTopicSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o OutputServicebusTopicSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
func (o OutputServicebusTopicSerializationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o OutputServicebusTopicSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type OutputServicebusTopicSerializationPtrOutput struct{ *pulumi.OutputState }

func (OutputServicebusTopicSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputServicebusTopicSerialization)(nil)).Elem()
}

func (o OutputServicebusTopicSerializationPtrOutput) ToOutputServicebusTopicSerializationPtrOutput() OutputServicebusTopicSerializationPtrOutput {
	return o
}

func (o OutputServicebusTopicSerializationPtrOutput) ToOutputServicebusTopicSerializationPtrOutputWithContext(ctx context.Context) OutputServicebusTopicSerializationPtrOutput {
	return o
}

func (o OutputServicebusTopicSerializationPtrOutput) Elem() OutputServicebusTopicSerializationOutput {
	return o.ApplyT(func(v *OutputServicebusTopicSerialization) OutputServicebusTopicSerialization { return *v }).(OutputServicebusTopicSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o OutputServicebusTopicSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o OutputServicebusTopicSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Specifies the format of the JSON the output will be written in. Possible values are `Array` and `LineSeparated`.
func (o OutputServicebusTopicSerializationPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The serialization format used for outgoing data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o OutputServicebusTopicSerializationPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputServicebusTopicSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type ReferenceInputBlobSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

type ReferenceInputBlobSerializationInput interface {
	pulumi.Input

	ToReferenceInputBlobSerializationOutput() ReferenceInputBlobSerializationOutput
	ToReferenceInputBlobSerializationOutputWithContext(context.Context) ReferenceInputBlobSerializationOutput
}

type ReferenceInputBlobSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReferenceInputBlobSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceInputBlobSerialization)(nil)).Elem()
}

func (i ReferenceInputBlobSerializationArgs) ToReferenceInputBlobSerializationOutput() ReferenceInputBlobSerializationOutput {
	return i.ToReferenceInputBlobSerializationOutputWithContext(context.Background())
}

func (i ReferenceInputBlobSerializationArgs) ToReferenceInputBlobSerializationOutputWithContext(ctx context.Context) ReferenceInputBlobSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputBlobSerializationOutput)
}

func (i ReferenceInputBlobSerializationArgs) ToReferenceInputBlobSerializationPtrOutput() ReferenceInputBlobSerializationPtrOutput {
	return i.ToReferenceInputBlobSerializationPtrOutputWithContext(context.Background())
}

func (i ReferenceInputBlobSerializationArgs) ToReferenceInputBlobSerializationPtrOutputWithContext(ctx context.Context) ReferenceInputBlobSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputBlobSerializationOutput).ToReferenceInputBlobSerializationPtrOutputWithContext(ctx)
}

type ReferenceInputBlobSerializationPtrInput interface {
	pulumi.Input

	ToReferenceInputBlobSerializationPtrOutput() ReferenceInputBlobSerializationPtrOutput
	ToReferenceInputBlobSerializationPtrOutputWithContext(context.Context) ReferenceInputBlobSerializationPtrOutput
}

type referenceInputBlobSerializationPtrType ReferenceInputBlobSerializationArgs

func ReferenceInputBlobSerializationPtr(v *ReferenceInputBlobSerializationArgs) ReferenceInputBlobSerializationPtrInput {
	return (*referenceInputBlobSerializationPtrType)(v)
}

func (*referenceInputBlobSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceInputBlobSerialization)(nil)).Elem()
}

func (i *referenceInputBlobSerializationPtrType) ToReferenceInputBlobSerializationPtrOutput() ReferenceInputBlobSerializationPtrOutput {
	return i.ToReferenceInputBlobSerializationPtrOutputWithContext(context.Background())
}

func (i *referenceInputBlobSerializationPtrType) ToReferenceInputBlobSerializationPtrOutputWithContext(ctx context.Context) ReferenceInputBlobSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputBlobSerializationPtrOutput)
}

type ReferenceInputBlobSerializationOutput struct{ *pulumi.OutputState }

func (ReferenceInputBlobSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceInputBlobSerialization)(nil)).Elem()
}

func (o ReferenceInputBlobSerializationOutput) ToReferenceInputBlobSerializationOutput() ReferenceInputBlobSerializationOutput {
	return o
}

func (o ReferenceInputBlobSerializationOutput) ToReferenceInputBlobSerializationOutputWithContext(ctx context.Context) ReferenceInputBlobSerializationOutput {
	return o
}

func (o ReferenceInputBlobSerializationOutput) ToReferenceInputBlobSerializationPtrOutput() ReferenceInputBlobSerializationPtrOutput {
	return o.ToReferenceInputBlobSerializationPtrOutputWithContext(context.Background())
}

func (o ReferenceInputBlobSerializationOutput) ToReferenceInputBlobSerializationPtrOutputWithContext(ctx context.Context) ReferenceInputBlobSerializationPtrOutput {
	return o.ApplyT(func(v ReferenceInputBlobSerialization) *ReferenceInputBlobSerialization {
		return &v
	}).(ReferenceInputBlobSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o ReferenceInputBlobSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceInputBlobSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
func (o ReferenceInputBlobSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceInputBlobSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
func (o ReferenceInputBlobSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceInputBlobSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type ReferenceInputBlobSerializationPtrOutput struct{ *pulumi.OutputState }

func (ReferenceInputBlobSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceInputBlobSerialization)(nil)).Elem()
}

func (o ReferenceInputBlobSerializationPtrOutput) ToReferenceInputBlobSerializationPtrOutput() ReferenceInputBlobSerializationPtrOutput {
	return o
}

func (o ReferenceInputBlobSerializationPtrOutput) ToReferenceInputBlobSerializationPtrOutputWithContext(ctx context.Context) ReferenceInputBlobSerializationPtrOutput {
	return o
}

func (o ReferenceInputBlobSerializationPtrOutput) Elem() ReferenceInputBlobSerializationOutput {
	return o.ApplyT(func(v *ReferenceInputBlobSerialization) ReferenceInputBlobSerialization { return *v }).(ReferenceInputBlobSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o ReferenceInputBlobSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceInputBlobSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `	` (tab), `|` (pipe) and `;`.
func (o ReferenceInputBlobSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceInputBlobSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for the reference data. Possible values are `Avro`, `Csv` and `Json`.
func (o ReferenceInputBlobSerializationPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceInputBlobSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputBlobSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

type StreamInputBlobSerializationInput interface {
	pulumi.Input

	ToStreamInputBlobSerializationOutput() StreamInputBlobSerializationOutput
	ToStreamInputBlobSerializationOutputWithContext(context.Context) StreamInputBlobSerializationOutput
}

type StreamInputBlobSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamInputBlobSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputBlobSerialization)(nil)).Elem()
}

func (i StreamInputBlobSerializationArgs) ToStreamInputBlobSerializationOutput() StreamInputBlobSerializationOutput {
	return i.ToStreamInputBlobSerializationOutputWithContext(context.Background())
}

func (i StreamInputBlobSerializationArgs) ToStreamInputBlobSerializationOutputWithContext(ctx context.Context) StreamInputBlobSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputBlobSerializationOutput)
}

func (i StreamInputBlobSerializationArgs) ToStreamInputBlobSerializationPtrOutput() StreamInputBlobSerializationPtrOutput {
	return i.ToStreamInputBlobSerializationPtrOutputWithContext(context.Background())
}

func (i StreamInputBlobSerializationArgs) ToStreamInputBlobSerializationPtrOutputWithContext(ctx context.Context) StreamInputBlobSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputBlobSerializationOutput).ToStreamInputBlobSerializationPtrOutputWithContext(ctx)
}

type StreamInputBlobSerializationPtrInput interface {
	pulumi.Input

	ToStreamInputBlobSerializationPtrOutput() StreamInputBlobSerializationPtrOutput
	ToStreamInputBlobSerializationPtrOutputWithContext(context.Context) StreamInputBlobSerializationPtrOutput
}

type streamInputBlobSerializationPtrType StreamInputBlobSerializationArgs

func StreamInputBlobSerializationPtr(v *StreamInputBlobSerializationArgs) StreamInputBlobSerializationPtrInput {
	return (*streamInputBlobSerializationPtrType)(v)
}

func (*streamInputBlobSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputBlobSerialization)(nil)).Elem()
}

func (i *streamInputBlobSerializationPtrType) ToStreamInputBlobSerializationPtrOutput() StreamInputBlobSerializationPtrOutput {
	return i.ToStreamInputBlobSerializationPtrOutputWithContext(context.Background())
}

func (i *streamInputBlobSerializationPtrType) ToStreamInputBlobSerializationPtrOutputWithContext(ctx context.Context) StreamInputBlobSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputBlobSerializationPtrOutput)
}

type StreamInputBlobSerializationOutput struct{ *pulumi.OutputState }

func (StreamInputBlobSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputBlobSerialization)(nil)).Elem()
}

func (o StreamInputBlobSerializationOutput) ToStreamInputBlobSerializationOutput() StreamInputBlobSerializationOutput {
	return o
}

func (o StreamInputBlobSerializationOutput) ToStreamInputBlobSerializationOutputWithContext(ctx context.Context) StreamInputBlobSerializationOutput {
	return o
}

func (o StreamInputBlobSerializationOutput) ToStreamInputBlobSerializationPtrOutput() StreamInputBlobSerializationPtrOutput {
	return o.ToStreamInputBlobSerializationPtrOutputWithContext(context.Background())
}

func (o StreamInputBlobSerializationOutput) ToStreamInputBlobSerializationPtrOutputWithContext(ctx context.Context) StreamInputBlobSerializationPtrOutput {
	return o.ApplyT(func(v StreamInputBlobSerialization) *StreamInputBlobSerialization {
		return &v
	}).(StreamInputBlobSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o StreamInputBlobSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputBlobSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o StreamInputBlobSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputBlobSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputBlobSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputBlobSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputBlobSerializationPtrOutput struct{ *pulumi.OutputState }

func (StreamInputBlobSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputBlobSerialization)(nil)).Elem()
}

func (o StreamInputBlobSerializationPtrOutput) ToStreamInputBlobSerializationPtrOutput() StreamInputBlobSerializationPtrOutput {
	return o
}

func (o StreamInputBlobSerializationPtrOutput) ToStreamInputBlobSerializationPtrOutputWithContext(ctx context.Context) StreamInputBlobSerializationPtrOutput {
	return o
}

func (o StreamInputBlobSerializationPtrOutput) Elem() StreamInputBlobSerializationOutput {
	return o.ApplyT(func(v *StreamInputBlobSerialization) StreamInputBlobSerialization { return *v }).(StreamInputBlobSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o StreamInputBlobSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputBlobSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o StreamInputBlobSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputBlobSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputBlobSerializationPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputBlobSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputEventHubSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

type StreamInputEventHubSerializationInput interface {
	pulumi.Input

	ToStreamInputEventHubSerializationOutput() StreamInputEventHubSerializationOutput
	ToStreamInputEventHubSerializationOutputWithContext(context.Context) StreamInputEventHubSerializationOutput
}

type StreamInputEventHubSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamInputEventHubSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputEventHubSerialization)(nil)).Elem()
}

func (i StreamInputEventHubSerializationArgs) ToStreamInputEventHubSerializationOutput() StreamInputEventHubSerializationOutput {
	return i.ToStreamInputEventHubSerializationOutputWithContext(context.Background())
}

func (i StreamInputEventHubSerializationArgs) ToStreamInputEventHubSerializationOutputWithContext(ctx context.Context) StreamInputEventHubSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubSerializationOutput)
}

func (i StreamInputEventHubSerializationArgs) ToStreamInputEventHubSerializationPtrOutput() StreamInputEventHubSerializationPtrOutput {
	return i.ToStreamInputEventHubSerializationPtrOutputWithContext(context.Background())
}

func (i StreamInputEventHubSerializationArgs) ToStreamInputEventHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputEventHubSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubSerializationOutput).ToStreamInputEventHubSerializationPtrOutputWithContext(ctx)
}

type StreamInputEventHubSerializationPtrInput interface {
	pulumi.Input

	ToStreamInputEventHubSerializationPtrOutput() StreamInputEventHubSerializationPtrOutput
	ToStreamInputEventHubSerializationPtrOutputWithContext(context.Context) StreamInputEventHubSerializationPtrOutput
}

type streamInputEventHubSerializationPtrType StreamInputEventHubSerializationArgs

func StreamInputEventHubSerializationPtr(v *StreamInputEventHubSerializationArgs) StreamInputEventHubSerializationPtrInput {
	return (*streamInputEventHubSerializationPtrType)(v)
}

func (*streamInputEventHubSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputEventHubSerialization)(nil)).Elem()
}

func (i *streamInputEventHubSerializationPtrType) ToStreamInputEventHubSerializationPtrOutput() StreamInputEventHubSerializationPtrOutput {
	return i.ToStreamInputEventHubSerializationPtrOutputWithContext(context.Background())
}

func (i *streamInputEventHubSerializationPtrType) ToStreamInputEventHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputEventHubSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputEventHubSerializationPtrOutput)
}

type StreamInputEventHubSerializationOutput struct{ *pulumi.OutputState }

func (StreamInputEventHubSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputEventHubSerialization)(nil)).Elem()
}

func (o StreamInputEventHubSerializationOutput) ToStreamInputEventHubSerializationOutput() StreamInputEventHubSerializationOutput {
	return o
}

func (o StreamInputEventHubSerializationOutput) ToStreamInputEventHubSerializationOutputWithContext(ctx context.Context) StreamInputEventHubSerializationOutput {
	return o
}

func (o StreamInputEventHubSerializationOutput) ToStreamInputEventHubSerializationPtrOutput() StreamInputEventHubSerializationPtrOutput {
	return o.ToStreamInputEventHubSerializationPtrOutputWithContext(context.Background())
}

func (o StreamInputEventHubSerializationOutput) ToStreamInputEventHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputEventHubSerializationPtrOutput {
	return o.ApplyT(func(v StreamInputEventHubSerialization) *StreamInputEventHubSerialization {
		return &v
	}).(StreamInputEventHubSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o StreamInputEventHubSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputEventHubSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o StreamInputEventHubSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputEventHubSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputEventHubSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputEventHubSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputEventHubSerializationPtrOutput struct{ *pulumi.OutputState }

func (StreamInputEventHubSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputEventHubSerialization)(nil)).Elem()
}

func (o StreamInputEventHubSerializationPtrOutput) ToStreamInputEventHubSerializationPtrOutput() StreamInputEventHubSerializationPtrOutput {
	return o
}

func (o StreamInputEventHubSerializationPtrOutput) ToStreamInputEventHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputEventHubSerializationPtrOutput {
	return o
}

func (o StreamInputEventHubSerializationPtrOutput) Elem() StreamInputEventHubSerializationOutput {
	return o.ApplyT(func(v *StreamInputEventHubSerialization) StreamInputEventHubSerialization { return *v }).(StreamInputEventHubSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o StreamInputEventHubSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputEventHubSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o StreamInputEventHubSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputEventHubSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputEventHubSerializationPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputEventHubSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputIotHubSerialization struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding *string `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type string `pulumi:"type"`
}

type StreamInputIotHubSerializationInput interface {
	pulumi.Input

	ToStreamInputIotHubSerializationOutput() StreamInputIotHubSerializationOutput
	ToStreamInputIotHubSerializationOutputWithContext(context.Context) StreamInputIotHubSerializationOutput
}

type StreamInputIotHubSerializationArgs struct {
	// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamInputIotHubSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputIotHubSerialization)(nil)).Elem()
}

func (i StreamInputIotHubSerializationArgs) ToStreamInputIotHubSerializationOutput() StreamInputIotHubSerializationOutput {
	return i.ToStreamInputIotHubSerializationOutputWithContext(context.Background())
}

func (i StreamInputIotHubSerializationArgs) ToStreamInputIotHubSerializationOutputWithContext(ctx context.Context) StreamInputIotHubSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputIotHubSerializationOutput)
}

func (i StreamInputIotHubSerializationArgs) ToStreamInputIotHubSerializationPtrOutput() StreamInputIotHubSerializationPtrOutput {
	return i.ToStreamInputIotHubSerializationPtrOutputWithContext(context.Background())
}

func (i StreamInputIotHubSerializationArgs) ToStreamInputIotHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputIotHubSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputIotHubSerializationOutput).ToStreamInputIotHubSerializationPtrOutputWithContext(ctx)
}

type StreamInputIotHubSerializationPtrInput interface {
	pulumi.Input

	ToStreamInputIotHubSerializationPtrOutput() StreamInputIotHubSerializationPtrOutput
	ToStreamInputIotHubSerializationPtrOutputWithContext(context.Context) StreamInputIotHubSerializationPtrOutput
}

type streamInputIotHubSerializationPtrType StreamInputIotHubSerializationArgs

func StreamInputIotHubSerializationPtr(v *StreamInputIotHubSerializationArgs) StreamInputIotHubSerializationPtrInput {
	return (*streamInputIotHubSerializationPtrType)(v)
}

func (*streamInputIotHubSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputIotHubSerialization)(nil)).Elem()
}

func (i *streamInputIotHubSerializationPtrType) ToStreamInputIotHubSerializationPtrOutput() StreamInputIotHubSerializationPtrOutput {
	return i.ToStreamInputIotHubSerializationPtrOutputWithContext(context.Background())
}

func (i *streamInputIotHubSerializationPtrType) ToStreamInputIotHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputIotHubSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputIotHubSerializationPtrOutput)
}

type StreamInputIotHubSerializationOutput struct{ *pulumi.OutputState }

func (StreamInputIotHubSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputIotHubSerialization)(nil)).Elem()
}

func (o StreamInputIotHubSerializationOutput) ToStreamInputIotHubSerializationOutput() StreamInputIotHubSerializationOutput {
	return o
}

func (o StreamInputIotHubSerializationOutput) ToStreamInputIotHubSerializationOutputWithContext(ctx context.Context) StreamInputIotHubSerializationOutput {
	return o
}

func (o StreamInputIotHubSerializationOutput) ToStreamInputIotHubSerializationPtrOutput() StreamInputIotHubSerializationPtrOutput {
	return o.ToStreamInputIotHubSerializationPtrOutputWithContext(context.Background())
}

func (o StreamInputIotHubSerializationOutput) ToStreamInputIotHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputIotHubSerializationPtrOutput {
	return o.ApplyT(func(v StreamInputIotHubSerialization) *StreamInputIotHubSerialization {
		return &v
	}).(StreamInputIotHubSerializationPtrOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o StreamInputIotHubSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputIotHubSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o StreamInputIotHubSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputIotHubSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputIotHubSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputIotHubSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputIotHubSerializationPtrOutput struct{ *pulumi.OutputState }

func (StreamInputIotHubSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputIotHubSerialization)(nil)).Elem()
}

func (o StreamInputIotHubSerializationPtrOutput) ToStreamInputIotHubSerializationPtrOutput() StreamInputIotHubSerializationPtrOutput {
	return o
}

func (o StreamInputIotHubSerializationPtrOutput) ToStreamInputIotHubSerializationPtrOutputWithContext(ctx context.Context) StreamInputIotHubSerializationPtrOutput {
	return o
}

func (o StreamInputIotHubSerializationPtrOutput) Elem() StreamInputIotHubSerializationOutput {
	return o.ApplyT(func(v *StreamInputIotHubSerialization) StreamInputIotHubSerialization { return *v }).(StreamInputIotHubSerializationOutput)
}

// The encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. It currently can only be set to `UTF8`.
func (o StreamInputIotHubSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputIotHubSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// The delimiter that will be used to separate comma-separated value (CSV) records. Possible values are ` ` (space), `,` (comma), `   ` (tab), `|` (pipe) and `;`.
func (o StreamInputIotHubSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputIotHubSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// The serialization format used for incoming data streams. Possible values are `Avro`, `Csv` and `Json`.
func (o StreamInputIotHubSerializationPtrOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputIotHubSerialization) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(FunctionJavaScriptUDFInputOutput{})
	pulumi.RegisterOutputType(FunctionJavaScriptUDFInputArrayOutput{})
	pulumi.RegisterOutputType(FunctionJavaScriptUDFOutputOutput{})
	pulumi.RegisterOutputType(FunctionJavaScriptUDFOutputPtrOutput{})
	pulumi.RegisterOutputType(OutputBlobSerializationOutput{})
	pulumi.RegisterOutputType(OutputBlobSerializationPtrOutput{})
	pulumi.RegisterOutputType(OutputEventHubSerializationOutput{})
	pulumi.RegisterOutputType(OutputEventHubSerializationPtrOutput{})
	pulumi.RegisterOutputType(OutputServiceBusQueueSerializationOutput{})
	pulumi.RegisterOutputType(OutputServiceBusQueueSerializationPtrOutput{})
	pulumi.RegisterOutputType(OutputServicebusTopicSerializationOutput{})
	pulumi.RegisterOutputType(OutputServicebusTopicSerializationPtrOutput{})
	pulumi.RegisterOutputType(ReferenceInputBlobSerializationOutput{})
	pulumi.RegisterOutputType(ReferenceInputBlobSerializationPtrOutput{})
	pulumi.RegisterOutputType(StreamInputBlobSerializationOutput{})
	pulumi.RegisterOutputType(StreamInputBlobSerializationPtrOutput{})
	pulumi.RegisterOutputType(StreamInputEventHubSerializationOutput{})
	pulumi.RegisterOutputType(StreamInputEventHubSerializationPtrOutput{})
	pulumi.RegisterOutputType(StreamInputIotHubSerializationOutput{})
	pulumi.RegisterOutputType(StreamInputIotHubSerializationPtrOutput{})
}
